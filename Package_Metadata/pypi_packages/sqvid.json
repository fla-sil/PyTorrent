{"info": {"author": "Marek Suppa", "author_email": "mr@shu.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "SQVID\n=====\n\n.. image:: https://img.shields.io/pypi/v/sqvid.svg\n    :target: https://pypi.python.org/pypi/sqvid\n    :alt: PyPI Status\n\n.. image:: https://img.shields.io/travis/mrshu/sqvid.svg\n    :target: https://travis-ci.org/mrshu/sqvid\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/mrshu/sqvid/badge.svg?branch=master\n    :target: https://coveralls.io/github/mrshu/sqvid?branch=master\n    :alt: Code coverage Status\n\n.. image:: https://img.shields.io/pypi/l/sqvid.svg\n   :target: ./LICENSE\n   :alt: License Status\n\n.. image:: https://readthedocs.org/projects/sqvid/badge/?version=latest\n   :target: https://sqvid.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n\nSQVID, the Simple sQl Validator of varIous Datasources is a framework for\nvalidating any type of data source that can be queried via SQL with the\nhelp of `SQLAlchemy`_. It aims to be a simplified and extensible\ncounterpart to `validation of dbt models`_ or `data assertions of\ndataform`_ that does not require you to use the full `dbt`_ or `dataform`_\nand still ensure your data is automatically validated to be what you expect\nit to be. This allows SQVID to be used on all sorts of data sources: from\nCSVs and spreadsheets to massive databases.\n\nYou can easily use SQVID to serve as a \"sanity check\" of your processing\npipeline or as a testing framework for your various ETL processes.\n\nFound out more about it in the `documentation`_.\n\nInstallation\n------------\n\n.. code::\n\n    pip install sqvid\n\nExample\n-------\n\nLet us consider a database table called ``suppliers`` that would result\nfrom executing the following code snippet in a SQLite database called\n``test_sqvid_db``.\n\n.. code:: sql\n\n    CREATE TABLE `suppliers` (\n      `SupplierID` int NOT NULL,\n      `SupplierName` varchar(255) DEFAULT NULL,\n      `ContactName` varchar(255) DEFAULT NULL,\n      `Address` varchar(255) DEFAULT NULL,\n      `City` varchar(255) DEFAULT NULL,\n      `PostalCode` varchar(255) DEFAULT NULL,\n      `Country` varchar(255) DEFAULT NULL,\n      `Phone` varchar(255) DEFAULT NULL\n    );\n    \n    INSERT INTO `suppliers` (`SupplierID`, `SupplierName`, `ContactName`, `Address`, `City`, `PostalCode`, `Country`, `Phone`) VALUES\n    (1, \"Exotic Liquid\", \"Charlotte Cooper\", \"49 Gilbert St.\", \"Londona\", \"EC1 4SD\", \"UK\", \"(171) 555-2222\"),\n    (2, \"New Orleans Cajun Delights\", \"Shelley Burke\", \"P.O. Box 78934\", \"New Orleans\", \"70117\", \"USA\", \"(100) 555-4822\"),\n    (3, \"Grandma Kelly's Homestead\", \"Regina Murphy\", \"707 Oxford Rd.\", \"Ann Arbor\", \"48104\", \"USA\", \"(313) 555-5735\"),\n    (4, \"Tokyo Traders\", \"Yoshi Nagase\", \"9-8 Sekimai Musashino-shi\", \"Tokyo\", \"100\", \"Japan\", \"(03) 3555-5011\"),\n    (5, \"Cooperativa de Quesos 'Las Cabras'\", \"Antonio del Valle Saavedra\", \"Calle del Rosal 4\", \"Oviedo\", \"33007\", \"Spain\", \"(98) 598 76 54\"),\n\n\nIn order to validate that this table contains the data we would expect it\nto, we can put together the following SQVID validation config:\n\n.. code:: toml\n\n   [general]\n   sqla = \"sqlite:///test_sqvid_db.sqlite\"\n   db_name = 'test_sqvid_db'\n   \n   [[test_sqvid_db.suppliers.SupplierID]]\n   validator = 'unique'\n   \n   [[test_sqvid_db.suppliers.SupplierID]]\n   validator = 'in_range'\n   args = {min = 1, max = 256}\n\n*Note that the the validation config file is formated using* `TOML`_ *-- you\ncan find a very nice tutorial on this formatting language at*\n`LearnXinYMinutes`_.\n\nThe ``[general]`` section specifies SQLAlchemy connection string in\n``sqla`` and the name of the DB that is going to have its data validated in\n``db_name``.\n\nThe other sections specify the various validations performed on this DB. In\nparticular the table ``suppliers`` and data in its column ``SupplierID`` is\nbeing validated via two validators: the ``unique`` validator ensures that\neach value in this column occurs only once and the ``in_range`` validator\nchecks whether all data points in this column fall withing the ``min`` and\n``max`` range specified via parameters of the same name in ``args``.\n\nOnce we save a validation config like this one into a file (say\n``validate_suppliers.toml``), SQVID validation tests can be invoked in the\nfollowing way:\n\n.. code::\n    \n    sqvid --config ./validate_suppliers.toml\n\nThis should provide output close to the following:\n\n.. code::\n\n    PASSED: Validation on [test_sqvid_db] suppliers.SupplierID of unique\n    PASSED: Validation on [test_sqvid_db] suppliers.SupplierID of in_range({'min': 1, 'max': 256})\n\nSince all tests passed, ``sqvid`` would finish with exit code ``0``.\n\nFailing validations\n~~~~~~~~~~~~~~~~~~~\n\nWhat happens when a SQVID validation test fails? We can easily see that by\nslightly changing the config file from the above:\n\n.. code:: toml\n\n   [general]\n   sqla = \"sqlite:///test_sqvid_db.sqlite\"\n   db_name = 'test_sqvid_db'\n   \n   [[test_sqvid_db.suppliers.SupplierID]]\n   validator = 'unique'\n   \n   [[test_sqvid_db.suppliers.SupplierID]]\n   validator = 'in_range'\n   args = {min = 3, max = 256}\n\n\nNote that the contents stayed the same, except for the final line where the\n``min`` parameter has been set to ``3``. If we now save this file (to say\n``./validate_suppliers_fail.toml``), we can again execute SQVID tests in a\nsimilar way:\n\n.. code::\n    \n    sqvid --config ./validate_suppliers_fail.toml\n\nThe output should change to something like this:\n\n.. code::\n\n    PASSED: Validation on [test_sqvid_db] suppliers.SupplierID of unique\n    FAILED: Validation on [test_sqvid_db] suppliers.SupplierID of in_range({'min': 3, 'max': 256})\n    Offending 2 rows:\n    +--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n    |  SupplierID  |  SupplierName                |  ContactName       |  Address         |  City         |  PostalCode  |  Country  |  Phone           |\n    +--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n    |           1  |  Exotic Liquid               |  Charlotte Cooper  |  49 Gilbert St.  |  Londona      |  EC1 4SD     |  UK       |  (171) 555-2222  |\n    |           2  |  New Orleans Cajun Delights  |  Shelley Burke     |  P.O. Box 78934  |  New Orleans  |  70117       |  USA      |  (100) 555-4822  |\n    +--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n\n\nAs we would expect, the ``unique`` validation still passed while the\n``in_range`` validation failed on the two rows which have their\n``SupplierID`` outside of the ``[3, 256]`` range.\n\nSince some tests failed, ``sqvid`` would finish with exit code ``1``.\n\nTests\n-----\n\nAs this project makes use of `Poetry <https://poetry.eustace.io/>`_, after\ninstalling it the tests can be ran by executing the following from the\nproject's root directory:\n\n.. code:: bash\n\n    poetry run pytest\n\nThey can also be ran with `coverage <https://nose.readthedocs.io/en/latest/plugins/cover.html>`_:\n\n.. code:: bash\n\n    poetry run pytest --cov=sqvid\n\n\nLicense\n-------\n\nCopyright 2019 Marek \"mr.Shu\" Suppa\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n.. _validation of dbt models: https://docs.getdbt.com/docs/testing\n.. _data assertions of dataform: https://docs.dataform.co/guides/assertions/\n.. _dbt: https://getdbt.com\n.. _dataform: https://dataform.co/\n.. _TOML: https://github.com/toml-lang/toml\n.. _LearnXinYMinutes:  https://learnxinyminutes.com/docs/toml/\n.. _documentation:  https://sqvid.readthedocs.io/\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrshu/sqvid", "keywords": "SQL,data,validation,test", "license": "Apache-2.0", "maintainer": "Marek Suppa", "maintainer_email": "mr@shu.io", "name": "sqvid", "package_url": "https://pypi.org/project/sqvid/", "platform": "", "project_url": "https://pypi.org/project/sqvid/", "project_urls": {"Homepage": "https://github.com/mrshu/sqvid", "Repository": "https://github.com/mrshu/sqvid"}, "release_url": "https://pypi.org/project/sqvid/0.1.7/", "requires_dist": ["sqlalchemy (>=1.3,<2.0)", "envtoml (>=0.1.1,<0.2.0)", "nicetable (>=0.7.0,<0.8.0)", "click (>=7.0,<8.0)", "jinjasql (>=0.1.7,<0.2.0)"], "requires_python": ">=3.6,<4.0", "summary": "SQVID: Simple sQl Validator of varIous Datasources", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/sqvid\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98c856cb2f83908ae0cc0857c090e11ecd80540e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73717669642e737667\"></a>\n<a href=\"https://travis-ci.org/mrshu/sqvid\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15b9937d5675e515a7116e3080dbacc563f1d687/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d727368752f73717669642e737667\"></a>\n<a href=\"https://coveralls.io/github/mrshu/sqvid?branch=master\" rel=\"nofollow\"><img alt=\"Code coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf9bf49957bcf79cdcc32f29f6552372d9967328/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d727368752f73717669642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"./LICENSE\" rel=\"nofollow\"><img alt=\"License Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af17987c193e860fdeed22be82019168dbf86fad/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f73717669642e737667\"></a>\n<a href=\"https://sqvid.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2ccf94044bc4e12743d3007d9c4f07dd0c0df4d/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73717669642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>SQVID, the Simple sQl Validator of varIous Datasources is a framework for\nvalidating any type of data source that can be queried via SQL with the\nhelp of <a href=\"https://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a>. It aims to be a simplified and extensible\ncounterpart to <a href=\"https://docs.getdbt.com/docs/testing\" rel=\"nofollow\">validation of dbt models</a> or <a href=\"https://docs.dataform.co/guides/assertions/\" rel=\"nofollow\">data assertions of\ndataform</a> that does not require you to use the full <a href=\"https://getdbt.com\" rel=\"nofollow\">dbt</a> or <a href=\"https://dataform.co/\" rel=\"nofollow\">dataform</a>\nand still ensure your data is automatically validated to be what you expect\nit to be. This allows SQVID to be used on all sorts of data sources: from\nCSVs and spreadsheets to massive databases.</p>\n<p>You can easily use SQVID to serve as a \u201csanity check\u201d of your processing\npipeline or as a testing framework for your various ETL processes.</p>\n<p>Found out more about it in the <a href=\"https://sqvid.readthedocs.io/\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install sqvid\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Let us consider a database table called <tt>suppliers</tt> that would result\nfrom executing the following code snippet in a SQLite database called\n<tt>test_sqvid_db</tt>.</p>\n<pre><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"o\">`</span><span class=\"n\">suppliers</span><span class=\"o\">`</span> <span class=\"p\">(</span>\n  <span class=\"o\">`</span><span class=\"n\">SupplierID</span><span class=\"o\">`</span> <span class=\"nb\">int</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">SupplierName</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">ContactName</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">Address</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">City</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">PostalCode</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">Country</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n  <span class=\"o\">`</span><span class=\"n\">Phone</span><span class=\"o\">`</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"k\">DEFAULT</span> <span class=\"k\">NULL</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"o\">`</span><span class=\"n\">suppliers</span><span class=\"o\">`</span> <span class=\"p\">(</span><span class=\"o\">`</span><span class=\"n\">SupplierID</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">SupplierName</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">ContactName</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">Address</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">City</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">PostalCode</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">Country</span><span class=\"o\">`</span><span class=\"p\">,</span> <span class=\"o\">`</span><span class=\"n\">Phone</span><span class=\"o\">`</span><span class=\"p\">)</span> <span class=\"k\">VALUES</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ss\">\"Exotic Liquid\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Charlotte Cooper\"</span><span class=\"p\">,</span> <span class=\"ss\">\"49 Gilbert St.\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Londona\"</span><span class=\"p\">,</span> <span class=\"ss\">\"EC1 4SD\"</span><span class=\"p\">,</span> <span class=\"ss\">\"UK\"</span><span class=\"p\">,</span> <span class=\"ss\">\"(171) 555-2222\"</span><span class=\"p\">),</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"ss\">\"New Orleans Cajun Delights\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Shelley Burke\"</span><span class=\"p\">,</span> <span class=\"ss\">\"P.O. Box 78934\"</span><span class=\"p\">,</span> <span class=\"ss\">\"New Orleans\"</span><span class=\"p\">,</span> <span class=\"ss\">\"70117\"</span><span class=\"p\">,</span> <span class=\"ss\">\"USA\"</span><span class=\"p\">,</span> <span class=\"ss\">\"(100) 555-4822\"</span><span class=\"p\">),</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"ss\">\"Grandma Kelly's Homestead\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Regina Murphy\"</span><span class=\"p\">,</span> <span class=\"ss\">\"707 Oxford Rd.\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Ann Arbor\"</span><span class=\"p\">,</span> <span class=\"ss\">\"48104\"</span><span class=\"p\">,</span> <span class=\"ss\">\"USA\"</span><span class=\"p\">,</span> <span class=\"ss\">\"(313) 555-5735\"</span><span class=\"p\">),</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"ss\">\"Tokyo Traders\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Yoshi Nagase\"</span><span class=\"p\">,</span> <span class=\"ss\">\"9-8 Sekimai Musashino-shi\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"ss\">\"100\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Japan\"</span><span class=\"p\">,</span> <span class=\"ss\">\"(03) 3555-5011\"</span><span class=\"p\">),</span>\n<span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"ss\">\"Cooperativa de Quesos 'Las Cabras'\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Antonio del Valle Saavedra\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Calle del Rosal 4\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Oviedo\"</span><span class=\"p\">,</span> <span class=\"ss\">\"33007\"</span><span class=\"p\">,</span> <span class=\"ss\">\"Spain\"</span><span class=\"p\">,</span> <span class=\"ss\">\"(98) 598 76 54\"</span><span class=\"p\">),</span>\n</pre>\n<p>In order to validate that this table contains the data we would expect it\nto, we can put together the following SQVID validation config:</p>\n<pre><span class=\"k\">[general]</span>\n<span class=\"n\">sqla</span> <span class=\"o\">=</span> <span class=\"s\">\"sqlite:///test_sqvid_db.sqlite\"</span>\n<span class=\"n\">db_name</span> <span class=\"o\">=</span> <span class=\"s\">'test_sqvid_db'</span>\n\n<span class=\"k\">[[test_sqvid_db.suppliers.SupplierID]]</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"s\">'unique'</span>\n\n<span class=\"k\">[[test_sqvid_db.suppliers.SupplierID]]</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"s\">'in_range'</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">}</span>\n</pre>\n<p><em>Note that the the validation config file is formated using</em> <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> <em>\u2013 you\ncan find a very nice tutorial on this formatting language at</em>\n<a href=\"https://learnxinyminutes.com/docs/toml/\" rel=\"nofollow\">LearnXinYMinutes</a>.</p>\n<p>The <tt>[general]</tt> section specifies SQLAlchemy connection string in\n<tt>sqla</tt> and the name of the DB that is going to have its data validated in\n<tt>db_name</tt>.</p>\n<p>The other sections specify the various validations performed on this DB. In\nparticular the table <tt>suppliers</tt> and data in its column <tt>SupplierID</tt> is\nbeing validated via two validators: the <tt>unique</tt> validator ensures that\neach value in this column occurs only once and the <tt>in_range</tt> validator\nchecks whether all data points in this column fall withing the <tt>min</tt> and\n<tt>max</tt> range specified via parameters of the same name in <tt>args</tt>.</p>\n<p>Once we save a validation config like this one into a file (say\n<tt>validate_suppliers.toml</tt>), SQVID validation tests can be invoked in the\nfollowing way:</p>\n<pre>sqvid --config ./validate_suppliers.toml\n</pre>\n<p>This should provide output close to the following:</p>\n<pre>PASSED: Validation on [test_sqvid_db] suppliers.SupplierID of unique\nPASSED: Validation on [test_sqvid_db] suppliers.SupplierID of in_range({'min': 1, 'max': 256})\n</pre>\n<p>Since all tests passed, <tt>sqvid</tt> would finish with exit code <tt>0</tt>.</p>\n<div id=\"failing-validations\">\n<h3>Failing validations</h3>\n<p>What happens when a SQVID validation test fails? We can easily see that by\nslightly changing the config file from the above:</p>\n<pre><span class=\"k\">[general]</span>\n<span class=\"n\">sqla</span> <span class=\"o\">=</span> <span class=\"s\">\"sqlite:///test_sqvid_db.sqlite\"</span>\n<span class=\"n\">db_name</span> <span class=\"o\">=</span> <span class=\"s\">'test_sqvid_db'</span>\n\n<span class=\"k\">[[test_sqvid_db.suppliers.SupplierID]]</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"s\">'unique'</span>\n\n<span class=\"k\">[[test_sqvid_db.suppliers.SupplierID]]</span>\n<span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"s\">'in_range'</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"mi\">256</span><span class=\"p\">}</span>\n</pre>\n<p>Note that the contents stayed the same, except for the final line where the\n<tt>min</tt> parameter has been set to <tt>3</tt>. If we now save this file (to say\n<tt>./validate_suppliers_fail.toml</tt>), we can again execute SQVID tests in a\nsimilar way:</p>\n<pre>sqvid --config ./validate_suppliers_fail.toml\n</pre>\n<p>The output should change to something like this:</p>\n<pre>PASSED: Validation on [test_sqvid_db] suppliers.SupplierID of unique\nFAILED: Validation on [test_sqvid_db] suppliers.SupplierID of in_range({'min': 3, 'max': 256})\nOffending 2 rows:\n+--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n|  SupplierID  |  SupplierName                |  ContactName       |  Address         |  City         |  PostalCode  |  Country  |  Phone           |\n+--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n|           1  |  Exotic Liquid               |  Charlotte Cooper  |  49 Gilbert St.  |  Londona      |  EC1 4SD     |  UK       |  (171) 555-2222  |\n|           2  |  New Orleans Cajun Delights  |  Shelley Burke     |  P.O. Box 78934  |  New Orleans  |  70117       |  USA      |  (100) 555-4822  |\n+--------------+------------------------------+--------------------+------------------+---------------+--------------+-----------+------------------+\n</pre>\n<p>As we would expect, the <tt>unique</tt> validation still passed while the\n<tt>in_range</tt> validation failed on the two rows which have their\n<tt>SupplierID</tt> outside of the <tt>[3, 256]</tt> range.</p>\n<p>Since some tests failed, <tt>sqvid</tt> would finish with exit code <tt>1</tt>.</p>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>As this project makes use of <a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">Poetry</a>, after\ninstalling it the tests can be ran by executing the following from the\nproject\u2019s root directory:</p>\n<pre>poetry run pytest\n</pre>\n<p>They can also be ran with <a href=\"https://nose.readthedocs.io/en/latest/plugins/cover.html\" rel=\"nofollow\">coverage</a>:</p>\n<pre>poetry run pytest --cov<span class=\"o\">=</span>sqvid\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright 2019 Marek \u201cmr.Shu\u201d Suppa</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<blockquote>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></blockquote>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 6282995, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c3233c3cd5b952e3996e951373604922", "sha256": "a6e48fa84ef38fb7b31b8e45b463a470c3f0e06d94486ae8023d342bfddf6796"}, "downloads": -1, "filename": "sqvid-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3233c3cd5b952e3996e951373604922", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10252, "upload_time": "2019-09-27T16:18:41", "upload_time_iso_8601": "2019-09-27T16:18:41.152454Z", "url": "https://files.pythonhosted.org/packages/28/77/9b1c0e5d244f6b7f9fb8a738fcac432d70eeef0f596c973c36f110e2176d/sqvid-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1549d365ccdda1cf92b09f5c6ca4f6c", "sha256": "be4e6d837c7269068be186646ff76716a0dd92de8d7a17b8b66b0944d6e6909e"}, "downloads": -1, "filename": "sqvid-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e1549d365ccdda1cf92b09f5c6ca4f6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9782, "upload_time": "2019-09-27T16:18:43", "upload_time_iso_8601": "2019-09-27T16:18:43.950072Z", "url": "https://files.pythonhosted.org/packages/03/89/8d6c0a741b320a37136aa1ae66ac140e0ac66e3c8bac6c52fc178f916f42/sqvid-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8529d6030f2522a5176baa1de7c36b2b", "sha256": "f20bcb6ad464082684b1c8c50be4dac9e99a076ccaaeffdc75c5c408a4d03698"}, "downloads": -1, "filename": "sqvid-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8529d6030f2522a5176baa1de7c36b2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10593, "upload_time": "2019-09-27T16:56:01", "upload_time_iso_8601": "2019-09-27T16:56:01.258221Z", "url": "https://files.pythonhosted.org/packages/38/47/e1410d8e6c5587da7c4b002d706dd0f5da6a1b14fd3c914eb9eb2278e874/sqvid-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7654f02389f97cadd5a5bfeb7df549ed", "sha256": "a0d4fadcd553e4e95e7139962fdbba8349ce530974c8ae700d7948f203820b07"}, "downloads": -1, "filename": "sqvid-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7654f02389f97cadd5a5bfeb7df549ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10659, "upload_time": "2019-09-27T16:56:03", "upload_time_iso_8601": "2019-09-27T16:56:03.539604Z", "url": "https://files.pythonhosted.org/packages/0a/c0/0526eb741798a47c5ee8ecff8e82464f78c530e12e55655e8d8339c70859/sqvid-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f3957842adf04586b5eafa94f1583838", "sha256": "af4fae8b8bbaeba3e83af84f840b2ecff43c8a2e70284df2ee68826b7a124906"}, "downloads": -1, "filename": "sqvid-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f3957842adf04586b5eafa94f1583838", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10605, "upload_time": "2019-10-04T12:55:03", "upload_time_iso_8601": "2019-10-04T12:55:03.690883Z", "url": "https://files.pythonhosted.org/packages/dd/03/2803b0e62645baf290ac480834d2ce940294ca8a5363073ade62b3d538da/sqvid-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8426b1ad7b6969d60673f88d3703b85", "sha256": "8b7e2d92d89f77e64ef5590edc10fe44bb57b5933de74325ba4d7da2c8a5a787"}, "downloads": -1, "filename": "sqvid-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e8426b1ad7b6969d60673f88d3703b85", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10675, "upload_time": "2019-10-04T12:55:05", "upload_time_iso_8601": "2019-10-04T12:55:05.373523Z", "url": "https://files.pythonhosted.org/packages/5d/c9/b14b1dadd16038aad72ef624e4297dc696a2329cc56a7a18300358caa831/sqvid-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "edcc614878fde72560f93dd0a95f9d03", "sha256": "b70b6c5f9a07f8cb34118c09f3e47f22d238c534bc1886060038a9a1873771d0"}, "downloads": -1, "filename": "sqvid-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "edcc614878fde72560f93dd0a95f9d03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10669, "upload_time": "2019-10-04T13:53:44", "upload_time_iso_8601": "2019-10-04T13:53:44.809763Z", "url": "https://files.pythonhosted.org/packages/cb/f9/b71b7ab4b6a6228616a56f2bca806db255202ae4269c280724c2b1f79ce0/sqvid-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfe261d3436912245d174fd08d6c60e6", "sha256": "4e67f33017a352504983d7f509c5bfad630a8122e2e94a7e861823971750c560"}, "downloads": -1, "filename": "sqvid-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bfe261d3436912245d174fd08d6c60e6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10729, "upload_time": "2019-10-04T13:53:46", "upload_time_iso_8601": "2019-10-04T13:53:46.844508Z", "url": "https://files.pythonhosted.org/packages/34/e1/6f5fa3f9c62555dab834a9d0d5dc04bd5c4898faf6e4932a0f4055101274/sqvid-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d9e54ac79ee802c26c574b8d2259ff9e", "sha256": "5cb608936d786153d3537ad8cadc50520bde78a2f77539b08f59a1c6a477cd74"}, "downloads": -1, "filename": "sqvid-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d9e54ac79ee802c26c574b8d2259ff9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10840, "upload_time": "2019-10-07T07:05:39", "upload_time_iso_8601": "2019-10-07T07:05:39.662786Z", "url": "https://files.pythonhosted.org/packages/ff/09/d3185f93c2dd48404ce22b7b2e82ca5ec05f036efe8a6bc501c8fa0cd831/sqvid-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b39ca892a7d393cab5c3fe7d55a28adc", "sha256": "76303eedfc7433902fb368392c42296aefbf2f7963dfc1d321ec5a40ac22e596"}, "downloads": -1, "filename": "sqvid-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b39ca892a7d393cab5c3fe7d55a28adc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10883, "upload_time": "2019-10-07T07:05:42", "upload_time_iso_8601": "2019-10-07T07:05:42.128934Z", "url": "https://files.pythonhosted.org/packages/2b/f7/77d8f6325e0938f908def7c6d3db15558d178066870e650f29f546fd9947/sqvid-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "bde79c6e962aeb3d2f1d4f24c66b593d", "sha256": "57cf6df9ae5bbd9736931670a8c172b21d9f4e60a6c7e7b8fe94173d299d70c4"}, "downloads": -1, "filename": "sqvid-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bde79c6e962aeb3d2f1d4f24c66b593d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10999, "upload_time": "2019-10-10T13:15:46", "upload_time_iso_8601": "2019-10-10T13:15:46.858784Z", "url": "https://files.pythonhosted.org/packages/72/20/e66945c5726e5e436e5030fe2b7f225a945ba03de2e18b4b7552773315ba/sqvid-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9673c965e0f98ee692f4777ff84913d2", "sha256": "2642e527b6b478bed574c6e75b4fd5b2e58bc206efe24455d6cfefb8f8cb20a0"}, "downloads": -1, "filename": "sqvid-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9673c965e0f98ee692f4777ff84913d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11080, "upload_time": "2019-10-10T13:15:49", "upload_time_iso_8601": "2019-10-10T13:15:49.043919Z", "url": "https://files.pythonhosted.org/packages/df/1c/be4506832c226a304d09a1399123eb9203e9f831c78f2eb433a7ae225738/sqvid-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "2e3de8aea0c7653a9600675048ad09ba", "sha256": "4fee0e8e6d36cea8908998c15d5d45aec037dd1c055c7b0e5bae3e224c9b9e21"}, "downloads": -1, "filename": "sqvid-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2e3de8aea0c7653a9600675048ad09ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11539, "upload_time": "2019-10-29T10:25:19", "upload_time_iso_8601": "2019-10-29T10:25:19.709395Z", "url": "https://files.pythonhosted.org/packages/b7/2c/c82c6b3ff5696b360e43d35ed7ba31628232d5297167763ab4eb2381e62d/sqvid-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d4110069c7704d3200a1997b868508e", "sha256": "7c37af199b0a23466f1d26e6dc5226cefc0d4c3a1bbfb370c3747d69cc89ac68"}, "downloads": -1, "filename": "sqvid-0.1.6.tar.gz", "has_sig": false, "md5_digest": "6d4110069c7704d3200a1997b868508e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11630, "upload_time": "2019-10-29T10:25:21", "upload_time_iso_8601": "2019-10-29T10:25:21.854544Z", "url": "https://files.pythonhosted.org/packages/93/de/bd819247a639d19194116969f2919af8c3075bfb99c9714e8a717a868036/sqvid-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c308d5907f411ad9dbcb0863a5ef90ba", "sha256": "687cb05a995e5a7a3f1f506d3972e526edc091135756c5aeed561f7c54cb3f81"}, "downloads": -1, "filename": "sqvid-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c308d5907f411ad9dbcb0863a5ef90ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11728, "upload_time": "2019-12-12T07:44:03", "upload_time_iso_8601": "2019-12-12T07:44:03.947650Z", "url": "https://files.pythonhosted.org/packages/8c/9e/f27d04374c7351a788023d4df7c86215db7d111b0da235e3c4d84088e835/sqvid-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3173a1e986e0fbd3e4ac334a24af4a9", "sha256": "986149bf2a40393ffb9d5320ba1209e97db3c528174471555c07f17abcd1630c"}, "downloads": -1, "filename": "sqvid-0.1.7.tar.gz", "has_sig": false, "md5_digest": "e3173a1e986e0fbd3e4ac334a24af4a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11797, "upload_time": "2019-12-12T07:44:05", "upload_time_iso_8601": "2019-12-12T07:44:05.765547Z", "url": "https://files.pythonhosted.org/packages/e0/e6/99f71012bee2152272e486cfe5af11d8967cdf02ff746f3c54342f7865a0/sqvid-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c308d5907f411ad9dbcb0863a5ef90ba", "sha256": "687cb05a995e5a7a3f1f506d3972e526edc091135756c5aeed561f7c54cb3f81"}, "downloads": -1, "filename": "sqvid-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c308d5907f411ad9dbcb0863a5ef90ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11728, "upload_time": "2019-12-12T07:44:03", "upload_time_iso_8601": "2019-12-12T07:44:03.947650Z", "url": "https://files.pythonhosted.org/packages/8c/9e/f27d04374c7351a788023d4df7c86215db7d111b0da235e3c4d84088e835/sqvid-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3173a1e986e0fbd3e4ac334a24af4a9", "sha256": "986149bf2a40393ffb9d5320ba1209e97db3c528174471555c07f17abcd1630c"}, "downloads": -1, "filename": "sqvid-0.1.7.tar.gz", "has_sig": false, "md5_digest": "e3173a1e986e0fbd3e4ac334a24af4a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11797, "upload_time": "2019-12-12T07:44:05", "upload_time_iso_8601": "2019-12-12T07:44:05.765547Z", "url": "https://files.pythonhosted.org/packages/e0/e6/99f71012bee2152272e486cfe5af11d8967cdf02ff746f3c54342f7865a0/sqvid-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:23 2020"}