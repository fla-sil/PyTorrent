{"info": {"author": "Mathias Kahl", "author_email": "mathias.kahl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.3"], "description": "azure-python3\n=============\n\n**azurepython3** is a Python 3.3 compatible library for Windows Azure. This package is still in an early development phase. Right now only the essential functions of the Azure REST API are implemented, so that it can be used as a custom Django Storage provider.\n\nThe project is hosted on GitHub: https://github.com/Bunkerbewohner/azurepython3\nIt can also be found on PyPI: https://pypi.python.org/pypi/azurepython3\n\nThe development status of this package is \"alpha\". While it works and I'm successfully using the AzureStorage for my Django project, there are probably still bugs around and scenarios that I hadn't tested. So any help in that regard is welcome, if you are trying to use Azure in your Python 3 project and want to use this library.\n\nInstallation and Usage\n----------------------\n\nYou can download the package from GitHub or install it from PyPI using **easy_install** or **pip**, e.g. ```pip install azurepython3```.\n\nThe important classes of this package are **azurepython3.blobservice.BlobService**, which offers essential functions for Windows Azure blob storage, and **azurepython3.djangostorage.AzureStorage**, which implements a custom Django storage based on Azure's blob storage.\n\nExamples\n--------\n\nHere are a couple of examples of how to use this library.\n\n * Using Blob Services \t\n \t* [Get BlobService](#get-blobservice)\n \t* Containers\n \t\t* [Create Container](#create-container)\n \t\t* [List Containers](#list-containers)\n \t\t* [Delete Container](#delete-container)\n\t* Blobs\n \t\t* [Create Blob](#create-blob)\n \t\t* [List Blobs](#list-blobs)\n \t\t* [Get Blob](#get-blob)\n \t\t* [Delete Blob](#delete-blob)\n * [Using AzureStorage in Django](#using-azurestorage-in-django)\n * [Migrate from Django's FileSystemStorage to AzureStorage](#migrate-from-djangos-filesystemstorage-to-azurestorage)\n\n### Get BlobService\n\nThe interface to all Blob storage related functions is the class BlobService. It requires the Windows Azure account name and an access key to work. These credentials can be passed directly as parameters. Additionally the helper method BlobService.from_config can read the values from a JSON file that contains an object with the properties \"account_name\" and \"account_key\".\n\n```python\nfrom azurepython3.blobservice import BlobService\n\n# create from JSON config, containing \"account_name\" and \"account_key\"\nsvc = BlobService.from_config(\"credentials.json\")\n\n# or specifiy account credentials explicitly\nsvc = BlobService(\"myaccountname\", \"myaccountkey\")\n\n# or attempt to discover an \"azurecredentials.json\" file in the local filetree\nsvc = BlobService.discover()\n```\n\n### Create Container\n\nThis example shows how to create containers with different public access rights, determined by the second parameter of ```BlobService.create_container(name, access)```. The following values are possible:\n\n* ```None``` - the container will be private\n* ```'container'``` - container: Specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account. \n* ```'blob'``` - Specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request.\n\n```python\nfrom azurepython3.blobservice import BlobService\nsvc = BlobService(\"myaccountname\", \"myaccountkey\")\n\nsvc.create_container(\"new-private-container\", access = None)\nsvc.create_container(\"new-public-container\", access = \"container\")\nsvc.create_container(\"new-protected-container\", access = \"blob\")\n```\n\n**Remarks:** The method will return True if the container was successfully created. Errors will cause appropriate exceptions. Specifically, if the container already exists an HTTPError with the status code 409 (Conflict) will be raised.\n\n### List Containers\n\nThis example shows how to list containers of an account. The method ```BlobService.list_containers()``` will return a list of ```Container``` instances, consisting of name, url, properties and metadata.\n\n```python\nfrom azurepython3.blobservice import BlobService\nsvc = BlobService.from_config(\"azurecredentials.json\")\ncontainers = svc.list_containers()\n\nfor c in containers:\n\tprint(\"%s (%s)\" % (c.name, c.url))\n\tprint(c.properties)\n```\n\n### Delete a Container\n\n```python\nfrom azurepython.blobservice import BlobService\nsvc = BlobService.discover()\n\nif svc.delete_container('containername'):\n\tprint(\"Container was deleted\")\n```\n\n### Create Blob\n\nThe following code example uses the BlobService to upload a file to an existing container. The content is expected to be an iterable of bytes, such as a bytearray. Optionally the content encoding can be passed an argument. If not provided none will be specified.\n\n```python\nfrom azurepython3.blobservice import BlobService\nsvc = BlobService(\"myaccountname\", \"myaccountkey\")\n\nwith open(\"path/to/somefile.ext\") as file:\n\tsvc.create_blob('containername', 'blobname', file.read())\n\n```\t\t\n\n### List Blobs\n\nTo list blobs in a container use the method ```BlobService.list_blobs(container, prefix=None)```. You can use ```prefix``` to filter blobs whose names start with that prefix. The blobs returned only contain properties and metadata, not the contents. Contents can be downloaded separately either by using ```BlobService.get_blob(container,name,with_content=True)``` or calling ```Blob.download_bytes()``` on the Blob instance.\n\n```python3\nfrom azurepython3.blobservice import BlobService\nsvc = BlobService.discover()\n\nblobs = svc.list_blobs('container-name', prefix = None)\nfor b in blob:\n\tprint(\"%s (%s)\" % (b.name, b.url))\n\tprint(b.properties)\n```\n\n### Get Blob\n\nSingle blobs can be fetched with or without their contents.\n\n```python\nfrom azurepython3.blobservice import BlobService\nsvc = BlobService.discover()\n\n# Get blob properties, metadata and content in one request\nblob = svc.get_blob('container-name', 'file.ext', with_content = True)\nprint(blob.content)\n\n# Or fetch only the properties and metadata, then the content optionally in a second request\nblob = svc.get_blob('container-name', 'file.ext', with_content = False)\nif print_content:\n\tprint(blob.download_bytes())\n```\n \n\n### Delete Blob\n\n```python\nfrom azurepython.blobservice import BlobService\nsvc = BlobService.discover()\n\nif svc.delete_blob('containername', 'blobname'):\n\tprint(\"Blob was deleted\")\n```\n\n### Using AzureStorage in Django\n\nTo use Windows Azure Blob Storage as a custom storage provider in Django you can simply use the **AzureStorage** class, as in the following example.\n\n```python \nfrom django.db import models\nfrom azurepython3.djangostorage import AzureStorage\n\nclass Posting(models.Model):\n\ttitle = models.CharField()\n\timage = models.ImageField(max_length=255, storage=AzureStorage(),\n\t\t\t\t\t\t\t  upload_to=\"images/postings\")\n```\n\nThis will store images as Blobs in the configurated container, whereas ```upload_to``` will be used as a prefix for the blob names, and therefore serve as a pseudo-directory. \n\nFor the AzureStorage to work you have to configure the Azure credentials in your ```settings.py``` as follows, using your actual credentials (account name and access key) and the name of an existing container in your storage:\n\n```python\n# put this into your settings.py\nAZURE_ACCOUNT_NAME = \"myaccountname\"\nAZURE_ACCOUNT_KEY = \"myaccountkey\"\nAZURE_DEFAULT_CONTAINER = \"containername\"\n```\n\nAlternatively these properties can be passed to the AzureStorage instance explicitly:\n\n```python\nstorage=AzureStorage(account_name='myaccountname',\n\t\t\t\t\t account_key='myaccountkey',\n\t\t\t\t\t container='containername'))\n```\n\nIf previously you have been using the default FileSystemStorage, you can use the ```azuremigrate``` command to migrate all your files into the cloud storage, as described in the next example.\n\n### Migrate from Django's FileSystemStorage to AzureStorage\n\nThe default storage used by Django is FileSystemStorage which stores all user uploads in the user defined ```MEDIA_ROOT``` directory. Add azurepython3 to ```INSTALLED_APPS``` to gain access to the ```azuremigrate``` command, which will automatically upload all those files to the AZURE_DEFAULT_CONTAINER. This is not required for using the AzureStorage itself, it merely provides the admin command. \n\n```python\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',\n    #...\n\n    # include azurepython3 app to get \"azuremigrate\" command\n    'azurepython3'\n)\n```\n\nOnce the app is available execute the command to upload the media files:\n\n```python\npython manage.py azuremigrate\nStarting migration from \"<project_dir>/media\" to Cloud Storage container \"$root\"\n\nfolder1/image1.jpg...ok\nfolder1/image2.jpg...ok\n...\nmigration complete\n```\n\nUnitTests\n---------\n\nThe package contains unittests. Since no storage emulation has been implemented yet, an actual Windows Azure storage account is required to test the functionality. They must be provided by creating a file \"azurecredentials.json\" in the ```azurepython3/tests``` directory, looking like the following example:\n\n```json\n{\n\t\"account_name\": \"myaccountname\",\n\t\"account_key\": \"myaccountkey\"\n}\n```", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Bunkerbewohner/azurepython3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/azurepython3/", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "azurepython3", "package_url": "https://pypi.org/project/azurepython3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/azurepython3/", "project_urls": {"Download": "https://github.com/Bunkerbewohner/azurepython3", "Homepage": "http://pypi.python.org/pypi/azurepython3/"}, "release_url": "https://pypi.org/project/azurepython3/1.7.7/", "requires_dist": null, "requires_python": null, "summary": "Incomplete Windows Azure library for Python 3", "version": "1.7.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            azure-python3<br>=============<br><br>**azurepython3** is a Python 3.3 compatible library for Windows Azure. This package is still in an early development phase. Right now only the essential functions of the Azure REST API are implemented, so that it can be used as a custom Django Storage provider.<br><br>The project is hosted on GitHub: https://github.com/Bunkerbewohner/azurepython3<br>It can also be found on PyPI: https://pypi.python.org/pypi/azurepython3<br><br>The development status of this package is \"alpha\". While it works and I'm successfully using the AzureStorage for my Django project, there are probably still bugs around and scenarios that I hadn't tested. So any help in that regard is welcome, if you are trying to use Azure in your Python 3 project and want to use this library.<br><br>Installation and Usage<br>----------------------<br><br>You can download the package from GitHub or install it from PyPI using **easy_install** or **pip**, e.g. ```pip install azurepython3```.<br><br>The important classes of this package are **azurepython3.blobservice.BlobService**, which offers essential functions for Windows Azure blob storage, and **azurepython3.djangostorage.AzureStorage**, which implements a custom Django storage based on Azure's blob storage.<br><br>Examples<br>--------<br><br>Here are a couple of examples of how to use this library.<br><br> * Using Blob Services \t<br> \t* [Get BlobService](#get-blobservice)<br> \t* Containers<br> \t\t* [Create Container](#create-container)<br> \t\t* [List Containers](#list-containers)<br> \t\t* [Delete Container](#delete-container)<br>\t* Blobs<br> \t\t* [Create Blob](#create-blob)<br> \t\t* [List Blobs](#list-blobs)<br> \t\t* [Get Blob](#get-blob)<br> \t\t* [Delete Blob](#delete-blob)<br> * [Using AzureStorage in Django](#using-azurestorage-in-django)<br> * [Migrate from Django's FileSystemStorage to AzureStorage](#migrate-from-djangos-filesystemstorage-to-azurestorage)<br><br>### Get BlobService<br><br>The interface to all Blob storage related functions is the class BlobService. It requires the Windows Azure account name and an access key to work. These credentials can be passed directly as parameters. Additionally the helper method BlobService.from_config can read the values from a JSON file that contains an object with the properties \"account_name\" and \"account_key\".<br><br>```python<br>from azurepython3.blobservice import BlobService<br><br># create from JSON config, containing \"account_name\" and \"account_key\"<br>svc = BlobService.from_config(\"credentials.json\")<br><br># or specifiy account credentials explicitly<br>svc = BlobService(\"myaccountname\", \"myaccountkey\")<br><br># or attempt to discover an \"azurecredentials.json\" file in the local filetree<br>svc = BlobService.discover()<br>```<br><br>### Create Container<br><br>This example shows how to create containers with different public access rights, determined by the second parameter of ```BlobService.create_container(name, access)```. The following values are possible:<br><br>* ```None``` - the container will be private<br>* ```'container'``` - container: Specifies full public read access for container and blob data. Clients can enumerate blobs within the container via anonymous request, but cannot enumerate containers within the storage account. <br>* ```'blob'``` - Specifies public read access for blobs. Blob data within this container can be read via anonymous request, but container data is not available. Clients cannot enumerate blobs within the container via anonymous request.<br><br>```python<br>from azurepython3.blobservice import BlobService<br>svc = BlobService(\"myaccountname\", \"myaccountkey\")<br><br>svc.create_container(\"new-private-container\", access = None)<br>svc.create_container(\"new-public-container\", access = \"container\")<br>svc.create_container(\"new-protected-container\", access = \"blob\")<br>```<br><br>**Remarks:** The method will return True if the container was successfully created. Errors will cause appropriate exceptions. Specifically, if the container already exists an HTTPError with the status code 409 (Conflict) will be raised.<br><br>### List Containers<br><br>This example shows how to list containers of an account. The method ```BlobService.list_containers()``` will return a list of ```Container``` instances, consisting of name, url, properties and metadata.<br><br>```python<br>from azurepython3.blobservice import BlobService<br>svc = BlobService.from_config(\"azurecredentials.json\")<br>containers = svc.list_containers()<br><br>for c in containers:<br>\tprint(\"%s (%s)\" % (c.name, c.url))<br>\tprint(c.properties)<br>```<br><br>### Delete a Container<br><br>```python<br>from azurepython.blobservice import BlobService<br>svc = BlobService.discover()<br><br>if svc.delete_container('containername'):<br>\tprint(\"Container was deleted\")<br>```<br><br>### Create Blob<br><br>The following code example uses the BlobService to upload a file to an existing container. The content is expected to be an iterable of bytes, such as a bytearray. Optionally the content encoding can be passed an argument. If not provided none will be specified.<br><br>```python<br>from azurepython3.blobservice import BlobService<br>svc = BlobService(\"myaccountname\", \"myaccountkey\")<br><br>with open(\"path/to/somefile.ext\") as file:<br>\tsvc.create_blob('containername', 'blobname', file.read())<br><br>```\t\t<br><br>### List Blobs<br><br>To list blobs in a container use the method ```BlobService.list_blobs(container, prefix=None)```. You can use ```prefix``` to filter blobs whose names start with that prefix. The blobs returned only contain properties and metadata, not the contents. Contents can be downloaded separately either by using ```BlobService.get_blob(container,name,with_content=True)``` or calling ```Blob.download_bytes()``` on the Blob instance.<br><br>```python3<br>from azurepython3.blobservice import BlobService<br>svc = BlobService.discover()<br><br>blobs = svc.list_blobs('container-name', prefix = None)<br>for b in blob:<br>\tprint(\"%s (%s)\" % (b.name, b.url))<br>\tprint(b.properties)<br>```<br><br>### Get Blob<br><br>Single blobs can be fetched with or without their contents.<br><br>```python<br>from azurepython3.blobservice import BlobService<br>svc = BlobService.discover()<br><br># Get blob properties, metadata and content in one request<br>blob = svc.get_blob('container-name', 'file.ext', with_content = True)<br>print(blob.content)<br><br># Or fetch only the properties and metadata, then the content optionally in a second request<br>blob = svc.get_blob('container-name', 'file.ext', with_content = False)<br>if print_content:<br>\tprint(blob.download_bytes())<br>```<br> <br><br>### Delete Blob<br><br>```python<br>from azurepython.blobservice import BlobService<br>svc = BlobService.discover()<br><br>if svc.delete_blob('containername', 'blobname'):<br>\tprint(\"Blob was deleted\")<br>```<br><br>### Using AzureStorage in Django<br><br>To use Windows Azure Blob Storage as a custom storage provider in Django you can simply use the **AzureStorage** class, as in the following example.<br><br>```python <br>from django.db import models<br>from azurepython3.djangostorage import AzureStorage<br><br>class Posting(models.Model):<br>\ttitle = models.CharField()<br>\timage = models.ImageField(max_length=255, storage=AzureStorage(),<br>\t\t\t\t\t\t\t  upload_to=\"images/postings\")<br>```<br><br>This will store images as Blobs in the configurated container, whereas ```upload_to``` will be used as a prefix for the blob names, and therefore serve as a pseudo-directory. <br><br>For the AzureStorage to work you have to configure the Azure credentials in your ```settings.py``` as follows, using your actual credentials (account name and access key) and the name of an existing container in your storage:<br><br>```python<br># put this into your settings.py<br>AZURE_ACCOUNT_NAME = \"myaccountname\"<br>AZURE_ACCOUNT_KEY = \"myaccountkey\"<br>AZURE_DEFAULT_CONTAINER = \"containername\"<br>```<br><br>Alternatively these properties can be passed to the AzureStorage instance explicitly:<br><br>```python<br>storage=AzureStorage(account_name='myaccountname',<br>\t\t\t\t\t account_key='myaccountkey',<br>\t\t\t\t\t container='containername'))<br>```<br><br>If previously you have been using the default FileSystemStorage, you can use the ```azuremigrate``` command to migrate all your files into the cloud storage, as described in the next example.<br><br>### Migrate from Django's FileSystemStorage to AzureStorage<br><br>The default storage used by Django is FileSystemStorage which stores all user uploads in the user defined ```MEDIA_ROOT``` directory. Add azurepython3 to ```INSTALLED_APPS``` to gain access to the ```azuremigrate``` command, which will automatically upload all those files to the AZURE_DEFAULT_CONTAINER. This is not required for using the AzureStorage itself, it merely provides the admin command. <br><br>```python<br>INSTALLED_APPS = (<br>    'django.contrib.auth',<br>    'django.contrib.contenttypes',<br>    'django.contrib.sessions',<br>    'django.contrib.sites',<br>    'django.contrib.messages',<br>    'django.contrib.staticfiles',<br>    'django.contrib.humanize',<br>    #...<br><br>    # include azurepython3 app to get \"azuremigrate\" command<br>    'azurepython3'<br>)<br>```<br><br>Once the app is available execute the command to upload the media files:<br><br>```python<br>python manage.py azuremigrate<br>Starting migration from \"&lt;project_dir&gt;/media\" to Cloud Storage container \"$root\"<br><br>folder1/image1.jpg...ok<br>folder1/image2.jpg...ok<br>...<br>migration complete<br>```<br><br>UnitTests<br>---------<br><br>The package contains unittests. Since no storage emulation has been implemented yet, an actual Windows Azure storage account is required to test the functionality. They must be provided by creating a file \"azurecredentials.json\" in the ```azurepython3/tests``` directory, looking like the following example:<br><br>```json<br>{<br>\t\"account_name\": \"myaccountname\",<br>\t\"account_key\": \"myaccountkey\"<br>}<br>```\n          </div>"}, "last_serial": 1043395, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9f8357c81061f159d517ddb5de365f07", "sha256": "2a90a7fbb98d5acd6516c7f6112301a79500252bd73ec41e1147fbd7390cbed6"}, "downloads": -1, "filename": "azurepython3-0.1.0.zip", "has_sig": false, "md5_digest": "9f8357c81061f159d517ddb5de365f07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9752, "upload_time": "2013-08-14T20:39:08", "upload_time_iso_8601": "2013-08-14T20:39:08.663028Z", "url": "https://files.pythonhosted.org/packages/ed/f3/2ac20a34a3f7d302d7ac13fb72679f1c87bdc6fa46d13b41a30339af1934/azurepython3-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0c9cb59ffd18aee0e5cb9622e5862f6a", "sha256": "bb4e74b98aa6f1044a076beb46520af79e4c40542430e954de7ad70709fc1235"}, "downloads": -1, "filename": "azurepython3-0.1.1.zip", "has_sig": false, "md5_digest": "0c9cb59ffd18aee0e5cb9622e5862f6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14282, "upload_time": "2013-08-14T20:47:28", "upload_time_iso_8601": "2013-08-14T20:47:28.794515Z", "url": "https://files.pythonhosted.org/packages/03/3b/c6d4e957415cd4fd5deace15c7a303415b3c72365d8f06d1843a2198d613/azurepython3-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "132092fb03bc64c2fe2742bce1a6dd4f", "sha256": "92fa1c4c7f7105c1f1e645757e8b6416213bc04d51652c5f08276f75a600020f"}, "downloads": -1, "filename": "azurepython3-0.1.2.zip", "has_sig": false, "md5_digest": "132092fb03bc64c2fe2742bce1a6dd4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14278, "upload_time": "2013-08-14T20:56:09", "upload_time_iso_8601": "2013-08-14T20:56:09.855294Z", "url": "https://files.pythonhosted.org/packages/94/82/9dfbf31031d8bb2dc5fb6ea2574ddf3e925bd34c448ec0a64d6590a7ab6b/azurepython3-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9e875ee273be2e78650ee8fb803ed704", "sha256": "f0d64f98236cfb615f23928b4c2184a8b6e995181297279e9eaecc873b9fdd81"}, "downloads": -1, "filename": "azurepython3-0.1.3.zip", "has_sig": false, "md5_digest": "9e875ee273be2e78650ee8fb803ed704", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14284, "upload_time": "2013-08-14T20:59:10", "upload_time_iso_8601": "2013-08-14T20:59:10.184798Z", "url": "https://files.pythonhosted.org/packages/68/e8/267d3b88585f336c3aedfec5f702d0c3bfb9351e05f2bcef6ceb1772b938/azurepython3-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "46176397436f2282031120c51b351cdc", "sha256": "27099837d6452d26ea77caaa87ac906f8a11ea4a86e679390484ff34ec825dc8"}, "downloads": -1, "filename": "azurepython3-0.1.4.zip", "has_sig": false, "md5_digest": "46176397436f2282031120c51b351cdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16684, "upload_time": "2013-08-15T18:05:37", "upload_time_iso_8601": "2013-08-15T18:05:37.265387Z", "url": "https://files.pythonhosted.org/packages/61/e6/0144ee83165b996ea1fdd071c39346bb5ed619b0711a685d2de86e383425/azurepython3-0.1.4.zip", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "46bf1f38f4e85d848685f74f93c1193d", "sha256": "596c90270a07a9b8a284ac08ec8a009719c6f6f983ddd6770b983a5079c4feea"}, "downloads": -1, "filename": "azurepython3-0.1.5.win32.exe", "has_sig": false, "md5_digest": "46bf1f38f4e85d848685f74f93c1193d", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 215956, "upload_time": "2013-09-04T12:27:07", "upload_time_iso_8601": "2013-09-04T12:27:07.914867Z", "url": "https://files.pythonhosted.org/packages/b2/17/db21b32d78f3c1db858e734a6583a66f851d3cece8cf38d5e26fff9e9985/azurepython3-0.1.5.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c927c5b05b877ed340567308cf68fee", "sha256": "49f91185a9d6ca509d8206ffef5895c6a25d8d72bfe1a667d5ff229239508be2"}, "downloads": -1, "filename": "azurepython3-0.1.5.zip", "has_sig": false, "md5_digest": "8c927c5b05b877ed340567308cf68fee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16747, "upload_time": "2013-09-04T12:27:05", "upload_time_iso_8601": "2013-09-04T12:27:05.605981Z", "url": "https://files.pythonhosted.org/packages/1d/ee/b90483170bb132b074fbb8b4728f702abf5ddcb8feb49f8d24c976a3cd4f/azurepython3-0.1.5.zip", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b9f9e5862d313e6fa3b25879dff082bd", "sha256": "d3494fb49b1a16169a5c0bd07a36b89934cc951d684f11d99dd9b51e5192c82c"}, "downloads": -1, "filename": "azurepython3-0.1.6.win32.exe", "has_sig": false, "md5_digest": "b9f9e5862d313e6fa3b25879dff082bd", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 215956, "upload_time": "2013-09-04T12:30:56", "upload_time_iso_8601": "2013-09-04T12:30:56.749726Z", "url": "https://files.pythonhosted.org/packages/4d/25/802b6dd9181bdcfb48922877c9594f7cabf22578f032f72f939c39ab6549/azurepython3-0.1.6.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "84c8e302103eb43a16b3ea78c6fe012e", "sha256": "65605c84e929aa1dc0401320facde750dff35c91c5e09a023730fa7b76951f1b"}, "downloads": -1, "filename": "azurepython3-0.1.6.zip", "has_sig": false, "md5_digest": "84c8e302103eb43a16b3ea78c6fe012e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16748, "upload_time": "2013-09-04T12:30:54", "upload_time_iso_8601": "2013-09-04T12:30:54.172176Z", "url": "https://files.pythonhosted.org/packages/f8/26/6ea542865a32f537a94836abea44f5de62b2631b2d5416d959cd6f31ead9/azurepython3-0.1.6.zip", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "d3acc7f41e53270277384472adce3058", "sha256": "04d7b6ea3f134c3e664fdd4bff248e769cc3c21b726bf4744ab7cd79e146b876"}, "downloads": -1, "filename": "azurepython3-0.1.7.win32.exe", "has_sig": false, "md5_digest": "d3acc7f41e53270277384472adce3058", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 216014, "upload_time": "2013-09-11T14:06:06", "upload_time_iso_8601": "2013-09-11T14:06:06.409005Z", "url": "https://files.pythonhosted.org/packages/43/91/5e7d79b0bf273265b0037f3e500d8f13703fdd3867507f270840176b4a72/azurepython3-0.1.7.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cb034cbde4ab087bd5e139c168fc06b", "sha256": "6f085fb93a954dc721185409c2ccb282fa084bc2cb300d6cedd5886d675a39ba"}, "downloads": -1, "filename": "azurepython3-0.1.7.zip", "has_sig": false, "md5_digest": "1cb034cbde4ab087bd5e139c168fc06b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16806, "upload_time": "2013-09-11T14:06:04", "upload_time_iso_8601": "2013-09-11T14:06:04.143362Z", "url": "https://files.pythonhosted.org/packages/64/a7/65d8c0f3c05ee3187993fd2a70e023a191975398669e770f24612e152399/azurepython3-0.1.7.zip", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "25d55024466a959db32c1d626d546ffe", "sha256": "1f4daf3cdde262c222856549cc7e761472736681274aefcacb25939edc548f0f"}, "downloads": -1, "filename": "azurepython3-1.7.1.win32.exe", "has_sig": false, "md5_digest": "25d55024466a959db32c1d626d546ffe", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 216146, "upload_time": "2013-09-11T15:27:08", "upload_time_iso_8601": "2013-09-11T15:27:08.590941Z", "url": "https://files.pythonhosted.org/packages/59/ba/138c2aa75c2897fb3ff3fcb640d7846ee4370206423ee41a6057915e12e2/azurepython3-1.7.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "98534a42f85776e7f2b84dd6e6bef88d", "sha256": "602fa2563cfb82764ef9b9601d095706889b0add74addadc5f4248aeda82a7f4"}, "downloads": -1, "filename": "azurepython3-1.7.1.zip", "has_sig": false, "md5_digest": "98534a42f85776e7f2b84dd6e6bef88d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16937, "upload_time": "2013-09-11T15:27:06", "upload_time_iso_8601": "2013-09-11T15:27:06.381271Z", "url": "https://files.pythonhosted.org/packages/fb/6c/091b2e04d837b0dc5703cd86239f1de6922935b3bb4fc1d4d984a66bf4df/azurepython3-1.7.1.zip", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "274541c2afda31022bccbc46cf573361", "sha256": "d30984669c97c96a399cfd29ec52633151b5f87d7ac993db1a1b10ccc581c80d"}, "downloads": -1, "filename": "azurepython3-1.7.2.win-amd64.exe", "has_sig": false, "md5_digest": "274541c2afda31022bccbc46cf573361", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 242318, "upload_time": "2014-01-08T15:01:29", "upload_time_iso_8601": "2014-01-08T15:01:29.816067Z", "url": "https://files.pythonhosted.org/packages/ce/18/b6a89f789855aac4bf943a8c5a0314a8d01c8fff60205afc10d67be9a2bd/azurepython3-1.7.2.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "cee6d93bdab1fbd93d369489fe0cfcf7", "sha256": "be10b5a6335120f9671f2abf15e4e7244e0630a4df7dd978576d20d7bcfaa8bb"}, "downloads": -1, "filename": "azurepython3-1.7.2.zip", "has_sig": false, "md5_digest": "cee6d93bdab1fbd93d369489fe0cfcf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16997, "upload_time": "2014-01-08T15:01:27", "upload_time_iso_8601": "2014-01-08T15:01:27.200579Z", "url": "https://files.pythonhosted.org/packages/71/72/601f2d4958151b65f59eba6fbeb06d85a026ae6ff7f41881c8f57a77692a/azurepython3-1.7.2.zip", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "d7036b5447e5d71fa9e18769c801d5ee", "sha256": "24e8e579c33ae095ccec280cef5b9a491023f704bdf7fa4e22b5450a884d59bc"}, "downloads": -1, "filename": "azurepython3-1.7.3.win-amd64.exe", "has_sig": false, "md5_digest": "d7036b5447e5d71fa9e18769c801d5ee", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 242326, "upload_time": "2014-01-08T16:01:30", "upload_time_iso_8601": "2014-01-08T16:01:30.186440Z", "url": "https://files.pythonhosted.org/packages/66/ec/67d8eb9c481db75f3cf25450b7f353b9edd3c9adbc41fcb546c5bccdb7e2/azurepython3-1.7.3.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "61d53187dcbc88e061e7929a7c3ac6fd", "sha256": "ffa56d4290d3ca678d41a8a808a3a35ca51486f533a3fc3bafac758cb66e93d2"}, "downloads": -1, "filename": "azurepython3-1.7.3.zip", "has_sig": false, "md5_digest": "61d53187dcbc88e061e7929a7c3ac6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17004, "upload_time": "2014-01-08T16:01:27", "upload_time_iso_8601": "2014-01-08T16:01:27.506048Z", "url": "https://files.pythonhosted.org/packages/0b/12/133c83896f27d4a4c19a74d41b349cf34292ef7f2ac3d41daa599c91f363/azurepython3-1.7.3.zip", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "03659ea408cfb9a4f01972cb777e6dfe", "sha256": "ee214af7ebaa4dcc3d55f9d716db73abb7d928932c548ccc04726829a4fa613d"}, "downloads": -1, "filename": "azurepython3-1.7.4.zip", "has_sig": false, "md5_digest": "03659ea408cfb9a4f01972cb777e6dfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17014, "upload_time": "2014-03-12T09:19:40", "upload_time_iso_8601": "2014-03-12T09:19:40.975412Z", "url": "https://files.pythonhosted.org/packages/48/ea/08cec0b88571b0304f3214897c2162f62c624e79111b5b40ea09a482850b/azurepython3-1.7.4.zip", "yanked": false}], "1.7.5": [{"comment_text": "", "digests": {"md5": "8e7b58c820e09beea57b169d2b172c4a", "sha256": "84aea8f3daa06a0672b3a8d8e44da4e8eaf6ad0fdbe88f4dbf3df6edfe65d8f3"}, "downloads": -1, "filename": "azurepython3-1.7.5.zip", "has_sig": false, "md5_digest": "8e7b58c820e09beea57b169d2b172c4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17057, "upload_time": "2014-03-12T14:04:21", "upload_time_iso_8601": "2014-03-12T14:04:21.819701Z", "url": "https://files.pythonhosted.org/packages/f5/ec/2f29cad846561d2fc99aebee7b294a952ab770682c885267ccac5da98747/azurepython3-1.7.5.zip", "yanked": false}], "1.7.6": [{"comment_text": "", "digests": {"md5": "b014cf4f9ef85e1f00b3a5ed8f77dd15", "sha256": "28772093433a23e84557a8fd3e44fc155cdad917272521535c6d5b63c61bf3df"}, "downloads": -1, "filename": "azurepython3-1.7.6.zip", "has_sig": false, "md5_digest": "b014cf4f9ef85e1f00b3a5ed8f77dd15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17134, "upload_time": "2014-03-12T14:27:35", "upload_time_iso_8601": "2014-03-12T14:27:35.053482Z", "url": "https://files.pythonhosted.org/packages/00/f8/222833ea30914fdb77aeda286434f85571f257dd4d157b09522be3553748/azurepython3-1.7.6.zip", "yanked": false}], "1.7.7": [{"comment_text": "", "digests": {"md5": "5baeb573f06fe1fc2012966d1e846711", "sha256": "119e1634b47171a528187f529669fc809866e8bf5f6c3472e5276b77f805c53d"}, "downloads": -1, "filename": "azurepython3-1.7.7.zip", "has_sig": false, "md5_digest": "5baeb573f06fe1fc2012966d1e846711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17675, "upload_time": "2014-03-27T13:28:43", "upload_time_iso_8601": "2014-03-27T13:28:43.346993Z", "url": "https://files.pythonhosted.org/packages/b5/9e/160ccea188a5998f8c43f45b949b15dfb49fb0f4b45caad998254d56f74f/azurepython3-1.7.7.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5baeb573f06fe1fc2012966d1e846711", "sha256": "119e1634b47171a528187f529669fc809866e8bf5f6c3472e5276b77f805c53d"}, "downloads": -1, "filename": "azurepython3-1.7.7.zip", "has_sig": false, "md5_digest": "5baeb573f06fe1fc2012966d1e846711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17675, "upload_time": "2014-03-27T13:28:43", "upload_time_iso_8601": "2014-03-27T13:28:43.346993Z", "url": "https://files.pythonhosted.org/packages/b5/9e/160ccea188a5998f8c43f45b949b15dfb49fb0f4b45caad998254d56f74f/azurepython3-1.7.7.zip", "yanked": false}], "timestamp": "Thu May  7 18:15:14 2020"}