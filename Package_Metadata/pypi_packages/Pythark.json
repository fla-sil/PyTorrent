{"info": {"author": "Highjhacker", "author_email": "jolanbeer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Software Development :: Build Tools"], "description": "![Imgur](https://i.imgur.com/ysh3akS.png)\n\n[![HitCount](http://hits.dwyl.io/Highjhacker/pyrark.svg)](http://hits.dwyl.io/Highjhacker/pyrark) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Build Status](https://travis-ci.org/Highjhacker/pythark.svg?branch=master)](https://travis-ci.org/Highjhacker/pythark)\n\n# Pythark\n\nArk API Wrapper in Python.\n\n## Built with\n- [Python](https://www.python.org/)\n- [Requests](http://docs.python-requests.org/en/master/)\n\n## Installation\n\nPythark uses Arky to create a new transaction, if you want to use this feature \nyou will need to install Arky too. \n\nSince Arky can works with the nano s ledger now, you need to install these dependencies :\n\n```shell\nsudo apt-get install python3-dev libusb-1.0-0-dev libudev-dev\n```\n\n```shell\npip install pythark\npip install https://github.com/ArkEcosystem/arky/archive/aip11.zip\n```\n\n## Application Example\n\n- [PytharkFlask](https://github.com/Highjhacker/PytharkFlask) - Example of a web application using Flask and Pythark\n- [PytharkCLI](https://github.com/Highjhacker/PytharkCLI) - Example of a CLI application using Click and Pythark\n## Usage\n\n### Network\nSince the version 0.1.3, Pythark can now interact with others network than the main one. If you want\nto query on the devnet for example, you will need to specify it like this : \n\n```python\nfrom pythark import Peer\n# It's not mandatory to specify the network, by default the main network will be used.\n# So : peer = Peer() is still correct.\npeer = Peer(\"dev\") # or peer = Peer(network=\"dev\")\nprint(peer.get_peers())\n\n>>> {'success': True, 'peers': [{'ip': '167.114.29.62', 'port': 4002, 'version': '1.1.0', 'errors': 0, 'os': 'linux4.4.0-79-generic', 'height': 2056284, 'status': 'OK', 'delay': 33}, \n}...\n```\n\nYou can use this with all the Pythark functions.\n\nThe currently available networks are the following : main, dev, dark, kapu.\n\n\n### Account\n\n```python\nfrom pythark import Account\nacc = Account()\nprint(acc.get_balance(\"ANwjGUcVbLXpqbBUWbjUBQWkr4MWVDuJu9\"))\n\n>>> {'success': True, 'balance': '51795878544', 'unconfirmedBalance': '51795878544'}\n\n# If you want to query a balance on the devnet\nfrom pythark import Account\nacc = Account(\"dev\")\nprint(acc.get_balance(\"DMEvkeU7pNnH5eVDz63GVK6A4CThCmdcpk\"))\n\n>>> {'success': True, 'balance': '4688266611418', 'unconfirmedBalance': '4688266611418'}\n```\n\n### Block\n\n```python\nfrom pythark import Block\nb = Block()\nprint(b.get_block(\"570934191207974498\"))\n\n>>> {'success': True, 'block': {'id': '570934191207974498', 'version': 0, 'timestamp': 19174464, 'height': 2376065, 'previousBlock': '7483598217382372212', 'numberOfTransactions': 50, 'totalAmount': 15830360775, 'totalFee': 500000000, 'reward': 200000000, 'payloadLength': 1600, 'payloadHash': '04c497e303c9aaa16db51e52b139e87ec19666f7a0e0fb14804ba0dcf0a15932', 'generatorPublicKey': '034682a4c4d2c8c0bc5f966dd422a83d2b433e212ef1f334f82cc3fe4676240933', 'generatorId': 'AdBSvLKPp6pMp5ZDsxkgjFu6KeCokncSMk', 'blockSignature': '304402201eb4097e7de1f2601e82333c040acac6df6458b7d59ec2370904fca42729243b022043d7ee08bf7007c06ec1119d12aa0ffe2895769f05c34fabc39f1c478a882049', 'confirmations': 158928, 'totalForged': '700000000'}}\n\n# If you want to query a block on the dev network :\n\nfrom pythark import Block\nb = Block(\"dev\")\nprint(b.get_block(\"5927359504701109797\"))\n\n>>> {'success': True, 'block': {'id': '5927359504701109797', 'version': 0, 'timestamp': 23094024, 'height': 2076244, 'previousBlock': '17513022799527103654', 'numberOfTransactions': 4, 'totalAmount': 3320058873, 'totalFee': 40000000, 'reward': 200000000, 'payloadLength': 128, 'payloadHash': '5ff2e3c58a2fe4c3d7c5327ab811d039943e9444dab865853070def0d9f60e1c', 'generatorPublicKey': '0284a88da69cc04439633217c6961d2800df0f7dff7f85b9803848ee02d0743f1d', 'generatorId': 'DRkVSeW5e2zh9v7R5msdLc26fo8axFALGT', 'blockSignature': '3045022100f8e7b6bab48264b77c8f398ff6312a72d4f8698de0328a5a2d0840b481cef3ce02202fb011c0b5883117adf2ab729f7db460abd12e44e275de50547a21bd4e82d3a8', 'confirmations': 18, 'totalForged': '240000000'}}\n```\n\n### Delegate\n\n```python\nfrom pythark import Delegate\nd = Delegate()\nprint(d.search_delegates())\n\n>>> {'success': True, 'delegates': [{'username': 'dr10', 'address': 'ANwjGUcVbLXpqbBUWbjUBQWkr4MWVDuJu9', 'publicKey': '031641ff081b93279b669f7771b3fbe48ade13eadb6d5fd85bdd025655e349f008', 'vote': '147614629879279', 'producedblocks': 30607, 'missedblocks': 190}, {'username': 'drusilla', 'address': 'AGzLMjoUiLbccC4YpaDsMRwHaoUwCoorQG', 'publicKey': '038dfc041c7e609f254b2cf38de4b55e02dff9e743497f5cf6b67d49d8e44978ce', 'vote': '0', 'producedblocks': 0, 'missedblocks': 0}]}\n\n# If you want to search for a delegate on the dev network :\n\nfrom pythark import Delegate\nd = Delegate(\"dev\")\nprint(d.search_delegates(\"d\", limit=1))\n\n>>> {'success': True, 'delegates': [{'username': 'arksidious', 'address': 'DJ4z35JF61d8zkA5B9soUAhg9mYHyLJr2C', 'publicKey': '02ec3f1b7d79d022b5a62a5af97218afd751db2210d1729309cd792c7a4fe92b2e', 'vote': '0', 'producedblocks': 10272, 'missedblocks': 42}]}\n```\n\n### Loader\n\n```python\nfrom pythark import Loader\nl = Loader()\nprint(l.get_status())\n\n>>> {'success': True, 'loaded': False, 'now': 2286032, 'blocksCount': 0}\n\n# If you want to get the status on the dev network :\n\nfrom pythark import Loader\nl = Loader(\"dev\")\nprint(l.get_status())\n\n{'success': True, 'loaded': False, 'now': 1952955, 'blocksCount': 0}\n```\n\n### MultiSignature\n\n```python\nfrom pythark import MultiSignature\nm = MultiSignature()\nprint(m.get_pending(\"02c7455bebeadde04728441e0f57f82f972155c088252bf7c1365eb0dc84fbf5de\"))\n\n>>> {'success': True, 'transactions': []}\n\n# If you want to get the pending multi sig on the dev network : \n\nfrom pythark import MultiSignature\nm = MultiSignature(\"dev\")\nprint(m.get_pending(\"026f777ed892898a7c834e4cd9ce7b4c33bf90d2c91a9e67ddaa28de6d60d18ab1\"))\n\n>>> {'success': True, 'transactions': []}\n```\n\n### Peer\n\n```python\nfrom pythark import Peer\np = Peer()\nprint(p.get_peer(\"78.229.106.139\", 4001))\n\n>>> {'success': True, 'peer': {'ip': '78.229.106.139', 'port': 4001, 'version': '1.0.1', 'errors': 0, 'os': 'linux4.4.0-92-generic', 'height': 2535012, 'status': 'OK', 'delay': 221}}\n\n# If you want to get a peer on the dev network :\n\nfrom pythark import Peer\np = Peer(\"dev\")\nprint(p.get_peer(\"204.10.184.228\", 4002))\n\n>>> {'success': True, 'peer': {'ip': '204.10.184.228', 'port': 4002, 'version': '1.1.1', 'errors': 0, 'os': 'linux4.4.0-98-generic', 'height': 2076293, 'status': 'OK', 'delay': 117}}\n```\n\n### Signature\n\n```python\nfrom pythark import Signature\ns = Signature()\nprint(s.get_signature_fee())\n\n>>> {'success': True, 'fee': 500000000}\n\n# Get signature fee on the dev network :\n\nfrom pythark import Signature\ns = Signature(\"dev\")\nprint(s.get_signature_fee())\n\n>>> {'success': True, 'fee': 500000000}\n```\n\n### Transaction\n\n```python\nfrom pythark import Transaction\nt = Transaction()\nprint(t.get_transactions(limit=5, orderBy=\"timestamp\"))\n\n>>> {'success': True, 'transactions': [{'id': 'b2ef0adc90e3cf4af5d221350d79c2f2712378e0ef5a71244eecaca4afdc7140', 'blockid': '4195226696324437309', 'type': 0, 'timestamp': -1980252, 'amount': 7350732799999, 'fee': 10000000, 'vendorField': 'Ark', 'senderId': 'AQKk9BwUZjM5fsjYCpreZJ4Ltatrt6ZJBE', 'recipientId': 'AXGVkwNJ3p5ruPJrEGEcwcaSz3THw69Eni', 'senderPublicKey': '0367b6eeef79462803cecff4692f06df379803d055941fb1f0c976097fa054aa03', 'signature': '3044022023eb7496803968e2f0e63d9eb7b0885adc3138ad7582e91ab83eae6a0d0afbcf02207f9d0f3a83179c408b819791dc007e3d5e3f266da81ba57aece6524586be3172', 'asset': {}, 'confirmations': 2533357}, {'id': '44d9d0a3093232b9368a24af90577741df8340b93732db23b90d44f6590d3e42', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AU9BgcsCBDCkzPyY9EZXqiwukYq4Kor4oX', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3045022100ed57f27cabdb01f5398b30e63e3372735ee428e17e95de675c37586b6d1a5c12022062a0040ed189a4adac6c3d105e05180f7c74e8c68ca9912b3c60286c2226f3fa', 'asset': {}, 'confirmations': 2535055}, {'id': '512f1aa00538b24a3ba55d65519d34cea83d753f5b2cebfd7004d5c0eaa7177a', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AeLpRK8rFVtBeyBVqBtdQpWDfLzaiNujKr', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3044022018618cfd5dd1024c0dd7677fdbddcaa6977b57f832eca130583d36480dfa452302202c067556fd93899fb0d18ea28e6f0276a778099cdde3d97d3bb8733dff965a59', 'asset': {}, 'confirmations': 2535055}, {'id': '8bb3997878a6a359f1418cf25f31c84f660e5e6897ebd6d07549ff6a4374a44d', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'ARagsXvdeTHYghaQgJkwbdSkPLZ73qdMkR', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3044022021e056a123b4a6c30e3f30dd68ff56f4cc1a994222cf27ff5b48434947e45f300220424cbc671a54a019cc655d02b2313a324702908a4a05c86bac4ac83029bb01ef', 'asset': {}, 'confirmations': 2535055}, {'id': '30cb724924823c689058c25243d1c213b9cdb8c157eff26ee9c89fc1e705fedd', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AT9xWcPQ8hGYuXZ8aWE57VJFohyX1TTLkH', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3045022100fd0ab0bee79152978d8d5835e2d244fa159e4957f48d602c65e35e2383c0d14a022036380dac439784075befef7f7b14734f9ed782e4be5ac7f2f4c49985b08fdce9', 'asset': {}, 'confirmations': 2535055}], 'count': '340315'}\n\n# Get the transactions on the dev network :\n\nfrom pythark import Transaction\nt = Transaction(\"dev\")\nprint(t.get_transactions(limit=5, orderBy=\"timestamp\"))\n\n>>> {'success': True, 'transactions': [{'id': 'e40ce11cab82736da1cc91191716f3c1f446ca7b6a9f4f93b7120ef105ba06e8', 'blockid': '13149578060728881902', 'type': 0, 'timestamp': 0, 'amount': 12500000000000000, 'fee': 0, 'senderId': 'DUFeXjJmYt1mWY3auywA1EQSqfCv5kYYfP', 'recipientId': 'DGihocTkwDygiFvmg6aG8jThYTic47GzU9', 'senderPublicKey': '03cb7bca143376721d0e9e3f3ccb0dc2e7e8470c06e630c3cef73f03e309b558ad', 'signature': '3044022016ecdf3039e69514c7d75861b22fc076496b61c07a1fcf793dc4f5c76fa0532b0220579c4c0c9d13720f9db5d9df29ed8ceab0adc266c6c160d612d4894dc5867eb1', 'asset': {}, 'confirmations': 2076306}, {'id': 'eb0146ac79afc228f0474a5ae1c4771970ae7880450b998c401029f522cd8a21', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DNL81CT6WNG1PHjobBmLvKwLV3UUscBymB', 'senderPublicKey': '03e5b39a83e6c7c952c5908089d4524bb8dda93acc2b2b953247e43dc4fe9aa3d1', 'signature': '3045022100e3e38811778023e6f17fefd447f179d45ab92c398c7cfb1e34e2f6e1b167c95a022070c36439ecec0fc3c43850070f29515910435d389e059579878d61b5ff2ea337', 'asset': {'delegate': {'username': 'genesis_1', 'publicKey': '03e5b39a83e6c7c952c5908089d4524bb8dda93acc2b2b953247e43dc4fe9aa3d1'}}, 'confirmations': 2076306}, {'id': 'c9c554056b3428951633a7059dd64dfcbd776fef7f4a156ea362b37ee6ce74c7', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DG9LYv5rqX67wuGvGVa9is5k1r86LKCVTA', 'senderPublicKey': '031137050d5fed0b5229b150257da2ac9c135efdf4bcb382b0ad0c197d7be458f4', 'signature': '30440220124baaa04491287d0abbf5a167c9b0f5ac95c22b196f42ff3d275cc9a213c2fd02206e6ebada85f67063e642dbcde6b956f8c99c05f4b9c55f1551d3eebba6375043', 'asset': {'delegate': {'username': 'genesis_3', 'publicKey': '031137050d5fed0b5229b150257da2ac9c135efdf4bcb382b0ad0c197d7be458f4'}}, 'confirmations': 2076306}, {'id': 'c82ccaa16be0e3c7ff4a53e2807968b71a0d88115223c3af2eb320f32449ac32', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DMSwarrHg5N9ZAZ6nsqPuUjyAU6gdRAM9d', 'senderPublicKey': '037def83d085778d7767a182a179f345207953441089081f5bc13f86d3891308aa', 'signature': '3045022100900cea3c2df393414899c9d74db57d89c9f311c70d08b974d0fd4a98bfae2fc902204a2aa51a1ec71da27c26afc033de6bd2d15978813c120c95e1a4dafca75ce876', 'asset': {'delegate': {'username': 'genesis_4', 'publicKey': '037def83d085778d7767a182a179f345207953441089081f5bc13f86d3891308aa'}}, 'confirmations': 2076306}, {'id': 'ee6a19fff622ab4e6e96d159396de56d6034b4b18a9cf5c99efcf4e61b28e15a', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DFcYHfCwhGWcBNy6cp48wy5SfXbQmfBYgT', 'senderPublicKey': '033f28ad2e9b897d46f1e67c7c52070e9ca46b04c0679ebb21fb236719e38aade3', 'signature': '30440220285188d8900cd3cffccf5e1de305b18856451dd04d2ed21165dffe9a7ce4afc1022009457be6bfe536971697105d47ad1f829738a5cacdb27a23c5d1e8a8dddf3ebd', 'asset': {'delegate': {'username': 'genesis_5', 'publicKey': '033f28ad2e9b897d46f1e67c7c52070e9ca46b04c0679ebb21fb236719e38aade3'}}, 'confirmations': 2076306}], 'count': '142386'}\n```\n\n### Transport\n\n```python\nfrom pythark import Transport\nt = Transport()\nprint(t.get_status())\n\n>>> {'success': True, 'height': 2535061, 'forgingAllowed': True, 'currentSlot': 2560155, 'header': {'id': '17084042248047495221', 'height': 2535061, 'version': 0, 'totalAmount': 0, 'totalFee': 0, 'reward': 200000000, 'payloadHash': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 'payloadLength': 0, 'timestamp': 20481240, 'numberOfTransactions': 0, 'previousBlock': '9903476536476021910', 'generatorPublicKey': '0354319db3f22fb8d4588a09ebbb3e91631cbc2202ba58c69149b75c1a47eb7686', 'blockSignature': '3045022100d7988e19980767d259072d4884f359f95d5ca99bc99d909f70b55b1eadde5921022000b8eb45266a1ad7943d18abe45e5487da680677272a26f7ede78c63a0d545bb'}}\n\n# Get the status on the dev network : \n\nfrom pythark import Transport\nt = Transport(\"dev\")\nprint(t.get_status())\n\n>>> {'success': True, 'height': 2076312, 'forgingAllowed': True, 'currentSlot': 2886837, 'header': {'id': '8062806100428564762', 'height': 2076312, 'version': 0, 'totalAmount': 0, 'totalFee': 0, 'reward': 200000000, 'payloadHash': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 'payloadLength': 0, 'timestamp': 23094688, 'numberOfTransactions': 0, 'previousBlock': '3568461414597517092', 'generatorPublicKey': '02dc13fcb190bcfbe9e7ecfc6269635ed2c497a75bab471f2b15c1a99897da97b3', 'blockSignature': '304402202168ab17061e91b15193d4acbdcbf73c4a12a5380161b3359f9abfed9dc24f6702201435e6f13da3b46109c1c1621b147939c74fa5b61b348c86202fb0cf87528878'}}\n```\n\nCreating a new transaction : \n\n```python\nfrom pythark import Transport\ntransport = Transport()\nresp = transport.post_transaction(\n        \"dark\", # Network\n        \"DDvQqwqPXKd5P8dLAroFsnKR5Q3tKUtvnp\", # RecipientAddress\n        1000000, # Amount\n        \"firstPassphrase\", # First passphrase, mandatory\n        \"vendorField\", # Vendor field, optionnal\n        \"secondPassphrase\") # Second passphrase, optionnal\n```\n\n## TODOS\n\n- [x] Core code.\n- [x] Write documentation.\n    - [ ] Basic docs written, need to polish.\n- [x] Unit testing.\n    - [ ] Check if it can be better.\n- [x] Package it.\n    - [ ] Seems OK right now, distributed on PyPi, but have to be sure it's OK for everyone on\n          X python version and differents OS.\n- [x] Travis.\n    - [ ] Missing support for python 3.2.\n    - [ ] OSX Support ?\n    - [ ] Windows support ?\n- [ ] Better errors handling for the models methods.\n- [x] Sample flask app.\n- [x] Sample CLI app.\n- [ ] Integrate it to the DiscArk bot.\n- [x] Allow to post a new transaction.\n- [x] Allow to specify a network to use (so we can query on the devnet, mainnet, ..)\n    - [ ] Functionnal but can be better.\n\n## Authors\n\n- Jolan Beer - Highjhacker\n\n## License\n\npythark is under MIT license. See the [LICENSE file](https://github.com/Highjhacker/pythark/blob/master/LICENSE) for more informations.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Highjhacker/pythark", "keywords": "Ark python wrapper api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Pythark", "package_url": "https://pypi.org/project/Pythark/", "platform": "", "project_url": "https://pypi.org/project/Pythark/", "project_urls": {"Homepage": "https://github.com/Highjhacker/pythark"}, "release_url": "https://pypi.org/project/Pythark/0.1.6/", "requires_dist": null, "requires_python": ">=3", "summary": "Ark API Wrapper", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            ![Imgur](https://i.imgur.com/ysh3akS.png)<br><br>[![HitCount](http://hits.dwyl.io/Highjhacker/pyrark.svg)](http://hits.dwyl.io/Highjhacker/pyrark) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Build Status](https://travis-ci.org/Highjhacker/pythark.svg?branch=master)](https://travis-ci.org/Highjhacker/pythark)<br><br># Pythark<br><br>Ark API Wrapper in Python.<br><br>## Built with<br>- [Python](https://www.python.org/)<br>- [Requests](http://docs.python-requests.org/en/master/)<br><br>## Installation<br><br>Pythark uses Arky to create a new transaction, if you want to use this feature <br>you will need to install Arky too. <br><br>Since Arky can works with the nano s ledger now, you need to install these dependencies :<br><br>```shell<br>sudo apt-get install python3-dev libusb-1.0-0-dev libudev-dev<br>```<br><br>```shell<br>pip install pythark<br>pip install https://github.com/ArkEcosystem/arky/archive/aip11.zip<br>```<br><br>## Application Example<br><br>- [PytharkFlask](https://github.com/Highjhacker/PytharkFlask) - Example of a web application using Flask and Pythark<br>- [PytharkCLI](https://github.com/Highjhacker/PytharkCLI) - Example of a CLI application using Click and Pythark<br>## Usage<br><br>### Network<br>Since the version 0.1.3, Pythark can now interact with others network than the main one. If you want<br>to query on the devnet for example, you will need to specify it like this : <br><br>```python<br>from pythark import Peer<br># It's not mandatory to specify the network, by default the main network will be used.<br># So : peer = Peer() is still correct.<br>peer = Peer(\"dev\") # or peer = Peer(network=\"dev\")<br>print(peer.get_peers())<br><br>&gt;&gt;&gt; {'success': True, 'peers': [{'ip': '167.114.29.62', 'port': 4002, 'version': '1.1.0', 'errors': 0, 'os': 'linux4.4.0-79-generic', 'height': 2056284, 'status': 'OK', 'delay': 33}, <br>}...<br>```<br><br>You can use this with all the Pythark functions.<br><br>The currently available networks are the following : main, dev, dark, kapu.<br><br><br>### Account<br><br>```python<br>from pythark import Account<br>acc = Account()<br>print(acc.get_balance(\"ANwjGUcVbLXpqbBUWbjUBQWkr4MWVDuJu9\"))<br><br>&gt;&gt;&gt; {'success': True, 'balance': '51795878544', 'unconfirmedBalance': '51795878544'}<br><br># If you want to query a balance on the devnet<br>from pythark import Account<br>acc = Account(\"dev\")<br>print(acc.get_balance(\"DMEvkeU7pNnH5eVDz63GVK6A4CThCmdcpk\"))<br><br>&gt;&gt;&gt; {'success': True, 'balance': '4688266611418', 'unconfirmedBalance': '4688266611418'}<br>```<br><br>### Block<br><br>```python<br>from pythark import Block<br>b = Block()<br>print(b.get_block(\"570934191207974498\"))<br><br>&gt;&gt;&gt; {'success': True, 'block': {'id': '570934191207974498', 'version': 0, 'timestamp': 19174464, 'height': 2376065, 'previousBlock': '7483598217382372212', 'numberOfTransactions': 50, 'totalAmount': 15830360775, 'totalFee': 500000000, 'reward': 200000000, 'payloadLength': 1600, 'payloadHash': '04c497e303c9aaa16db51e52b139e87ec19666f7a0e0fb14804ba0dcf0a15932', 'generatorPublicKey': '034682a4c4d2c8c0bc5f966dd422a83d2b433e212ef1f334f82cc3fe4676240933', 'generatorId': 'AdBSvLKPp6pMp5ZDsxkgjFu6KeCokncSMk', 'blockSignature': '304402201eb4097e7de1f2601e82333c040acac6df6458b7d59ec2370904fca42729243b022043d7ee08bf7007c06ec1119d12aa0ffe2895769f05c34fabc39f1c478a882049', 'confirmations': 158928, 'totalForged': '700000000'}}<br><br># If you want to query a block on the dev network :<br><br>from pythark import Block<br>b = Block(\"dev\")<br>print(b.get_block(\"5927359504701109797\"))<br><br>&gt;&gt;&gt; {'success': True, 'block': {'id': '5927359504701109797', 'version': 0, 'timestamp': 23094024, 'height': 2076244, 'previousBlock': '17513022799527103654', 'numberOfTransactions': 4, 'totalAmount': 3320058873, 'totalFee': 40000000, 'reward': 200000000, 'payloadLength': 128, 'payloadHash': '5ff2e3c58a2fe4c3d7c5327ab811d039943e9444dab865853070def0d9f60e1c', 'generatorPublicKey': '0284a88da69cc04439633217c6961d2800df0f7dff7f85b9803848ee02d0743f1d', 'generatorId': 'DRkVSeW5e2zh9v7R5msdLc26fo8axFALGT', 'blockSignature': '3045022100f8e7b6bab48264b77c8f398ff6312a72d4f8698de0328a5a2d0840b481cef3ce02202fb011c0b5883117adf2ab729f7db460abd12e44e275de50547a21bd4e82d3a8', 'confirmations': 18, 'totalForged': '240000000'}}<br>```<br><br>### Delegate<br><br>```python<br>from pythark import Delegate<br>d = Delegate()<br>print(d.search_delegates())<br><br>&gt;&gt;&gt; {'success': True, 'delegates': [{'username': 'dr10', 'address': 'ANwjGUcVbLXpqbBUWbjUBQWkr4MWVDuJu9', 'publicKey': '031641ff081b93279b669f7771b3fbe48ade13eadb6d5fd85bdd025655e349f008', 'vote': '147614629879279', 'producedblocks': 30607, 'missedblocks': 190}, {'username': 'drusilla', 'address': 'AGzLMjoUiLbccC4YpaDsMRwHaoUwCoorQG', 'publicKey': '038dfc041c7e609f254b2cf38de4b55e02dff9e743497f5cf6b67d49d8e44978ce', 'vote': '0', 'producedblocks': 0, 'missedblocks': 0}]}<br><br># If you want to search for a delegate on the dev network :<br><br>from pythark import Delegate<br>d = Delegate(\"dev\")<br>print(d.search_delegates(\"d\", limit=1))<br><br>&gt;&gt;&gt; {'success': True, 'delegates': [{'username': 'arksidious', 'address': 'DJ4z35JF61d8zkA5B9soUAhg9mYHyLJr2C', 'publicKey': '02ec3f1b7d79d022b5a62a5af97218afd751db2210d1729309cd792c7a4fe92b2e', 'vote': '0', 'producedblocks': 10272, 'missedblocks': 42}]}<br>```<br><br>### Loader<br><br>```python<br>from pythark import Loader<br>l = Loader()<br>print(l.get_status())<br><br>&gt;&gt;&gt; {'success': True, 'loaded': False, 'now': 2286032, 'blocksCount': 0}<br><br># If you want to get the status on the dev network :<br><br>from pythark import Loader<br>l = Loader(\"dev\")<br>print(l.get_status())<br><br>{'success': True, 'loaded': False, 'now': 1952955, 'blocksCount': 0}<br>```<br><br>### MultiSignature<br><br>```python<br>from pythark import MultiSignature<br>m = MultiSignature()<br>print(m.get_pending(\"02c7455bebeadde04728441e0f57f82f972155c088252bf7c1365eb0dc84fbf5de\"))<br><br>&gt;&gt;&gt; {'success': True, 'transactions': []}<br><br># If you want to get the pending multi sig on the dev network : <br><br>from pythark import MultiSignature<br>m = MultiSignature(\"dev\")<br>print(m.get_pending(\"026f777ed892898a7c834e4cd9ce7b4c33bf90d2c91a9e67ddaa28de6d60d18ab1\"))<br><br>&gt;&gt;&gt; {'success': True, 'transactions': []}<br>```<br><br>### Peer<br><br>```python<br>from pythark import Peer<br>p = Peer()<br>print(p.get_peer(\"78.229.106.139\", 4001))<br><br>&gt;&gt;&gt; {'success': True, 'peer': {'ip': '78.229.106.139', 'port': 4001, 'version': '1.0.1', 'errors': 0, 'os': 'linux4.4.0-92-generic', 'height': 2535012, 'status': 'OK', 'delay': 221}}<br><br># If you want to get a peer on the dev network :<br><br>from pythark import Peer<br>p = Peer(\"dev\")<br>print(p.get_peer(\"204.10.184.228\", 4002))<br><br>&gt;&gt;&gt; {'success': True, 'peer': {'ip': '204.10.184.228', 'port': 4002, 'version': '1.1.1', 'errors': 0, 'os': 'linux4.4.0-98-generic', 'height': 2076293, 'status': 'OK', 'delay': 117}}<br>```<br><br>### Signature<br><br>```python<br>from pythark import Signature<br>s = Signature()<br>print(s.get_signature_fee())<br><br>&gt;&gt;&gt; {'success': True, 'fee': 500000000}<br><br># Get signature fee on the dev network :<br><br>from pythark import Signature<br>s = Signature(\"dev\")<br>print(s.get_signature_fee())<br><br>&gt;&gt;&gt; {'success': True, 'fee': 500000000}<br>```<br><br>### Transaction<br><br>```python<br>from pythark import Transaction<br>t = Transaction()<br>print(t.get_transactions(limit=5, orderBy=\"timestamp\"))<br><br>&gt;&gt;&gt; {'success': True, 'transactions': [{'id': 'b2ef0adc90e3cf4af5d221350d79c2f2712378e0ef5a71244eecaca4afdc7140', 'blockid': '4195226696324437309', 'type': 0, 'timestamp': -1980252, 'amount': 7350732799999, 'fee': 10000000, 'vendorField': 'Ark', 'senderId': 'AQKk9BwUZjM5fsjYCpreZJ4Ltatrt6ZJBE', 'recipientId': 'AXGVkwNJ3p5ruPJrEGEcwcaSz3THw69Eni', 'senderPublicKey': '0367b6eeef79462803cecff4692f06df379803d055941fb1f0c976097fa054aa03', 'signature': '3044022023eb7496803968e2f0e63d9eb7b0885adc3138ad7582e91ab83eae6a0d0afbcf02207f9d0f3a83179c408b819791dc007e3d5e3f266da81ba57aece6524586be3172', 'asset': {}, 'confirmations': 2533357}, {'id': '44d9d0a3093232b9368a24af90577741df8340b93732db23b90d44f6590d3e42', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AU9BgcsCBDCkzPyY9EZXqiwukYq4Kor4oX', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3045022100ed57f27cabdb01f5398b30e63e3372735ee428e17e95de675c37586b6d1a5c12022062a0040ed189a4adac6c3d105e05180f7c74e8c68ca9912b3c60286c2226f3fa', 'asset': {}, 'confirmations': 2535055}, {'id': '512f1aa00538b24a3ba55d65519d34cea83d753f5b2cebfd7004d5c0eaa7177a', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AeLpRK8rFVtBeyBVqBtdQpWDfLzaiNujKr', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3044022018618cfd5dd1024c0dd7677fdbddcaa6977b57f832eca130583d36480dfa452302202c067556fd93899fb0d18ea28e6f0276a778099cdde3d97d3bb8733dff965a59', 'asset': {}, 'confirmations': 2535055}, {'id': '8bb3997878a6a359f1418cf25f31c84f660e5e6897ebd6d07549ff6a4374a44d', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'ARagsXvdeTHYghaQgJkwbdSkPLZ73qdMkR', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3044022021e056a123b4a6c30e3f30dd68ff56f4cc1a994222cf27ff5b48434947e45f300220424cbc671a54a019cc655d02b2313a324702908a4a05c86bac4ac83029bb01ef', 'asset': {}, 'confirmations': 2535055}, {'id': '30cb724924823c689058c25243d1c213b9cdb8c157eff26ee9c89fc1e705fedd', 'blockid': '4366553906931540162', 'type': 0, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'AewxfHQobSc49a4radHp74JZCGP8LRe4xA', 'recipientId': 'AT9xWcPQ8hGYuXZ8aWE57VJFohyX1TTLkH', 'senderPublicKey': '0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3', 'signature': '3045022100fd0ab0bee79152978d8d5835e2d244fa159e4957f48d602c65e35e2383c0d14a022036380dac439784075befef7f7b14734f9ed782e4be5ac7f2f4c49985b08fdce9', 'asset': {}, 'confirmations': 2535055}], 'count': '340315'}<br><br># Get the transactions on the dev network :<br><br>from pythark import Transaction<br>t = Transaction(\"dev\")<br>print(t.get_transactions(limit=5, orderBy=\"timestamp\"))<br><br>&gt;&gt;&gt; {'success': True, 'transactions': [{'id': 'e40ce11cab82736da1cc91191716f3c1f446ca7b6a9f4f93b7120ef105ba06e8', 'blockid': '13149578060728881902', 'type': 0, 'timestamp': 0, 'amount': 12500000000000000, 'fee': 0, 'senderId': 'DUFeXjJmYt1mWY3auywA1EQSqfCv5kYYfP', 'recipientId': 'DGihocTkwDygiFvmg6aG8jThYTic47GzU9', 'senderPublicKey': '03cb7bca143376721d0e9e3f3ccb0dc2e7e8470c06e630c3cef73f03e309b558ad', 'signature': '3044022016ecdf3039e69514c7d75861b22fc076496b61c07a1fcf793dc4f5c76fa0532b0220579c4c0c9d13720f9db5d9df29ed8ceab0adc266c6c160d612d4894dc5867eb1', 'asset': {}, 'confirmations': 2076306}, {'id': 'eb0146ac79afc228f0474a5ae1c4771970ae7880450b998c401029f522cd8a21', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DNL81CT6WNG1PHjobBmLvKwLV3UUscBymB', 'senderPublicKey': '03e5b39a83e6c7c952c5908089d4524bb8dda93acc2b2b953247e43dc4fe9aa3d1', 'signature': '3045022100e3e38811778023e6f17fefd447f179d45ab92c398c7cfb1e34e2f6e1b167c95a022070c36439ecec0fc3c43850070f29515910435d389e059579878d61b5ff2ea337', 'asset': {'delegate': {'username': 'genesis_1', 'publicKey': '03e5b39a83e6c7c952c5908089d4524bb8dda93acc2b2b953247e43dc4fe9aa3d1'}}, 'confirmations': 2076306}, {'id': 'c9c554056b3428951633a7059dd64dfcbd776fef7f4a156ea362b37ee6ce74c7', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DG9LYv5rqX67wuGvGVa9is5k1r86LKCVTA', 'senderPublicKey': '031137050d5fed0b5229b150257da2ac9c135efdf4bcb382b0ad0c197d7be458f4', 'signature': '30440220124baaa04491287d0abbf5a167c9b0f5ac95c22b196f42ff3d275cc9a213c2fd02206e6ebada85f67063e642dbcde6b956f8c99c05f4b9c55f1551d3eebba6375043', 'asset': {'delegate': {'username': 'genesis_3', 'publicKey': '031137050d5fed0b5229b150257da2ac9c135efdf4bcb382b0ad0c197d7be458f4'}}, 'confirmations': 2076306}, {'id': 'c82ccaa16be0e3c7ff4a53e2807968b71a0d88115223c3af2eb320f32449ac32', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DMSwarrHg5N9ZAZ6nsqPuUjyAU6gdRAM9d', 'senderPublicKey': '037def83d085778d7767a182a179f345207953441089081f5bc13f86d3891308aa', 'signature': '3045022100900cea3c2df393414899c9d74db57d89c9f311c70d08b974d0fd4a98bfae2fc902204a2aa51a1ec71da27c26afc033de6bd2d15978813c120c95e1a4dafca75ce876', 'asset': {'delegate': {'username': 'genesis_4', 'publicKey': '037def83d085778d7767a182a179f345207953441089081f5bc13f86d3891308aa'}}, 'confirmations': 2076306}, {'id': 'ee6a19fff622ab4e6e96d159396de56d6034b4b18a9cf5c99efcf4e61b28e15a', 'blockid': '13149578060728881902', 'type': 2, 'timestamp': 0, 'amount': 0, 'fee': 0, 'senderId': 'DFcYHfCwhGWcBNy6cp48wy5SfXbQmfBYgT', 'senderPublicKey': '033f28ad2e9b897d46f1e67c7c52070e9ca46b04c0679ebb21fb236719e38aade3', 'signature': '30440220285188d8900cd3cffccf5e1de305b18856451dd04d2ed21165dffe9a7ce4afc1022009457be6bfe536971697105d47ad1f829738a5cacdb27a23c5d1e8a8dddf3ebd', 'asset': {'delegate': {'username': 'genesis_5', 'publicKey': '033f28ad2e9b897d46f1e67c7c52070e9ca46b04c0679ebb21fb236719e38aade3'}}, 'confirmations': 2076306}], 'count': '142386'}<br>```<br><br>### Transport<br><br>```python<br>from pythark import Transport<br>t = Transport()<br>print(t.get_status())<br><br>&gt;&gt;&gt; {'success': True, 'height': 2535061, 'forgingAllowed': True, 'currentSlot': 2560155, 'header': {'id': '17084042248047495221', 'height': 2535061, 'version': 0, 'totalAmount': 0, 'totalFee': 0, 'reward': 200000000, 'payloadHash': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 'payloadLength': 0, 'timestamp': 20481240, 'numberOfTransactions': 0, 'previousBlock': '9903476536476021910', 'generatorPublicKey': '0354319db3f22fb8d4588a09ebbb3e91631cbc2202ba58c69149b75c1a47eb7686', 'blockSignature': '3045022100d7988e19980767d259072d4884f359f95d5ca99bc99d909f70b55b1eadde5921022000b8eb45266a1ad7943d18abe45e5487da680677272a26f7ede78c63a0d545bb'}}<br><br># Get the status on the dev network : <br><br>from pythark import Transport<br>t = Transport(\"dev\")<br>print(t.get_status())<br><br>&gt;&gt;&gt; {'success': True, 'height': 2076312, 'forgingAllowed': True, 'currentSlot': 2886837, 'header': {'id': '8062806100428564762', 'height': 2076312, 'version': 0, 'totalAmount': 0, 'totalFee': 0, 'reward': 200000000, 'payloadHash': 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855', 'payloadLength': 0, 'timestamp': 23094688, 'numberOfTransactions': 0, 'previousBlock': '3568461414597517092', 'generatorPublicKey': '02dc13fcb190bcfbe9e7ecfc6269635ed2c497a75bab471f2b15c1a99897da97b3', 'blockSignature': '304402202168ab17061e91b15193d4acbdcbf73c4a12a5380161b3359f9abfed9dc24f6702201435e6f13da3b46109c1c1621b147939c74fa5b61b348c86202fb0cf87528878'}}<br>```<br><br>Creating a new transaction : <br><br>```python<br>from pythark import Transport<br>transport = Transport()<br>resp = transport.post_transaction(<br>        \"dark\", # Network<br>        \"DDvQqwqPXKd5P8dLAroFsnKR5Q3tKUtvnp\", # RecipientAddress<br>        1000000, # Amount<br>        \"firstPassphrase\", # First passphrase, mandatory<br>        \"vendorField\", # Vendor field, optionnal<br>        \"secondPassphrase\") # Second passphrase, optionnal<br>```<br><br>## TODOS<br><br>- [x] Core code.<br>- [x] Write documentation.<br>    - [ ] Basic docs written, need to polish.<br>- [x] Unit testing.<br>    - [ ] Check if it can be better.<br>- [x] Package it.<br>    - [ ] Seems OK right now, distributed on PyPi, but have to be sure it's OK for everyone on<br>          X python version and differents OS.<br>- [x] Travis.<br>    - [ ] Missing support for python 3.2.<br>    - [ ] OSX Support ?<br>    - [ ] Windows support ?<br>- [ ] Better errors handling for the models methods.<br>- [x] Sample flask app.<br>- [x] Sample CLI app.<br>- [ ] Integrate it to the DiscArk bot.<br>- [x] Allow to post a new transaction.<br>- [x] Allow to specify a network to use (so we can query on the devnet, mainnet, ..)<br>    - [ ] Functionnal but can be better.<br><br>## Authors<br><br>- Jolan Beer - Highjhacker<br><br>## License<br><br>pythark is under MIT license. See the [LICENSE file](https://github.com/Highjhacker/pythark/blob/master/LICENSE) for more informations.\n          </div>"}, "last_serial": 3559022, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f2d369e2a2170c7a739ccbf6b9360bec", "sha256": "edb0829031cecb3e2b025df540f71f2a3d51f8984a6cd45f4056a2bffa46973f"}, "downloads": -1, "filename": "Pythark-0.1.tar.gz", "has_sig": false, "md5_digest": "f2d369e2a2170c7a739ccbf6b9360bec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9421, "upload_time": "2017-11-13T20:04:12", "upload_time_iso_8601": "2017-11-13T20:04:12.370610Z", "url": "https://files.pythonhosted.org/packages/fa/eb/bf72640a145c85a433b3bc71268854d7ff8b33fd4a32a80b16c90d7b1256/Pythark-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "686ca8b34d75b4c4d5c36c6438f18535", "sha256": "4a1f17007712d0e5123aee275fa9ca52f736b9fdf2b878544d86302f57a8399b"}, "downloads": -1, "filename": "Pythark-0.1.1.tar.gz", "has_sig": false, "md5_digest": "686ca8b34d75b4c4d5c36c6438f18535", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 11927, "upload_time": "2017-11-17T10:33:57", "upload_time_iso_8601": "2017-11-17T10:33:57.312911Z", "url": "https://files.pythonhosted.org/packages/07/70/d83252afd7ed7868097f63928f17b4cfeff782b3d87d4f7d3c9b478e8ba1/Pythark-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d476030ad92e729865c3a3f0c135f3cf", "sha256": "afd8486b65a7fa2da0052e0d089e92003f73ca0b453dd29a59b6fb30026b4921"}, "downloads": -1, "filename": "Pythark-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d476030ad92e729865c3a3f0c135f3cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13594, "upload_time": "2017-12-10T21:27:23", "upload_time_iso_8601": "2017-12-10T21:27:23.561250Z", "url": "https://files.pythonhosted.org/packages/03/5b/73b7c6707ae3d802614072465e64b38842898db85ee51a45742df8d7a081/Pythark-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "82b144b57451378e767b2578629cff59", "sha256": "07ee5015971e454737f81c182f55f9b051c49cb20e1fccd115e6736374f512d0"}, "downloads": -1, "filename": "Pythark-0.1.3.tar.gz", "has_sig": false, "md5_digest": "82b144b57451378e767b2578629cff59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14947, "upload_time": "2017-12-11T17:00:43", "upload_time_iso_8601": "2017-12-11T17:00:43.833025Z", "url": "https://files.pythonhosted.org/packages/6b/29/06cc6176cc4aba1350212d0cc6f3775e3290156343584096e370dc2dbbcc/Pythark-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2caba4bbe3b500f03b918aba6cc5dd9b", "sha256": "4728a711aeb43487e802b13c43db3e9018b6eb8da6556a914d1c0186ce3890d2"}, "downloads": -1, "filename": "Pythark-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2caba4bbe3b500f03b918aba6cc5dd9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24494, "upload_time": "2017-12-13T20:33:27", "upload_time_iso_8601": "2017-12-13T20:33:27.883897Z", "url": "https://files.pythonhosted.org/packages/ec/27/eed5daee0dce885cd20bb17d713ead574beea9280567eb87007785e103a0/Pythark-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d495d2fe05fb83854493952ba927a3f8", "sha256": "4cc6ecb58362b217ed4ff3117edb296b34d12966b953df35f3c6630ccec24fe7"}, "downloads": -1, "filename": "Pythark-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d495d2fe05fb83854493952ba927a3f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24520, "upload_time": "2017-12-18T00:47:50", "upload_time_iso_8601": "2017-12-18T00:47:50.651405Z", "url": "https://files.pythonhosted.org/packages/93/40/69b4edd058cffca610c066f762e2e014a9d9fcadf0b420b0875ef2931c9d/Pythark-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "5cc65c4a5f24cc24793d5485d863beea", "sha256": "67d67f3117965807c6f5e17044b5cb4864df346d40d99d002d6cd5b91b3faf72"}, "downloads": -1, "filename": "Pythark-0.1.6.tar.gz", "has_sig": false, "md5_digest": "5cc65c4a5f24cc24793d5485d863beea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24918, "upload_time": "2018-02-07T01:34:31", "upload_time_iso_8601": "2018-02-07T01:34:31.310372Z", "url": "https://files.pythonhosted.org/packages/8a/38/6ee0c7e69648af0d0fe94ffbf5a4ec16657bc54ec9e7871b871bac855b9c/Pythark-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cc65c4a5f24cc24793d5485d863beea", "sha256": "67d67f3117965807c6f5e17044b5cb4864df346d40d99d002d6cd5b91b3faf72"}, "downloads": -1, "filename": "Pythark-0.1.6.tar.gz", "has_sig": false, "md5_digest": "5cc65c4a5f24cc24793d5485d863beea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24918, "upload_time": "2018-02-07T01:34:31", "upload_time_iso_8601": "2018-02-07T01:34:31.310372Z", "url": "https://files.pythonhosted.org/packages/8a/38/6ee0c7e69648af0d0fe94ffbf5a4ec16657bc54ec9e7871b871bac855b9c/Pythark-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:30 2020"}