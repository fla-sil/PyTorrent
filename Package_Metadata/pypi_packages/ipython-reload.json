{"info": {"author": "Matt Martz", "author_email": "matt@sivel.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# ipython-reload\nIPython magic command to reload modules on demand\n\n## Install\n\n```shell\npip install ipython-reload\n```\n\n## Use\n\n```\nIn [1]: %load_ext ipython_reload\n\nIn [2]: from foo import some_function\n\nIn [3]: some_function()\nOut[3]: 42\n\nIn [4]: # open foo.py in an editor and change some_function to return 43\n\nIn [5]: %reload some_function\n\nIn [6]: some_function()\nOut[6]: 43\n```\n\nThe `%reload` magic can reload modules not directly imported, imported modules\nin the local namespace, and imported variables.\n\nReloading imported variables may produce unexpected results if the name is\ngeneric, such as in the case of `__version__`. Python does not track the source\nof where a variable was defined, so this code loops all imported modules, and\nlooks for a matching name, that is the same type as the variable you want to\nreload. If you have imported a _variable_ using `from foo import bar as baz`\nthis functionality will not work.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sivel/ipython-reload", "keywords": "ipython magic", "license": "", "maintainer": "", "maintainer_email": "", "name": "ipython-reload", "package_url": "https://pypi.org/project/ipython-reload/", "platform": "", "project_url": "https://pypi.org/project/ipython-reload/", "project_urls": {"Bug Reports": "https://github.com/sivel/ipython-reload/issues", "Homepage": "https://github.com/sivel/ipython-reload", "Source": "https://github.com/sivel/ipython-reload/"}, "release_url": "https://pypi.org/project/ipython-reload/0.0.1/", "requires_dist": null, "requires_python": ">=3.5, <4", "summary": "IPython magic command to reload modules on demand", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ipython-reload</h1>\n<p>IPython magic command to reload modules on demand</p>\n<h2>Install</h2>\n<pre>pip install ipython-reload\n</pre>\n<h2>Use</h2>\n<pre><code>In [1]: %load_ext ipython_reload\n\nIn [2]: from foo import some_function\n\nIn [3]: some_function()\nOut[3]: 42\n\nIn [4]: # open foo.py in an editor and change some_function to return 43\n\nIn [5]: %reload some_function\n\nIn [6]: some_function()\nOut[6]: 43\n</code></pre>\n<p>The <code>%reload</code> magic can reload modules not directly imported, imported modules\nin the local namespace, and imported variables.</p>\n<p>Reloading imported variables may produce unexpected results if the name is\ngeneric, such as in the case of <code>__version__</code>. Python does not track the source\nof where a variable was defined, so this code loops all imported modules, and\nlooks for a matching name, that is the same type as the variable you want to\nreload. If you have imported a <em>variable</em> using <code>from foo import bar as baz</code>\nthis functionality will not work.</p>\n\n          </div>"}, "last_serial": 7131389, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f918b701620ef83dabdadde1372b3986", "sha256": "c848e841984736b53b318f372e20f0b0376183323a9fe306adad9fff5c14ec9e"}, "downloads": -1, "filename": "ipython_reload-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f918b701620ef83dabdadde1372b3986", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, <4", "size": 5529, "upload_time": "2020-04-29T19:08:45", "upload_time_iso_8601": "2020-04-29T19:08:45.790369Z", "url": "https://files.pythonhosted.org/packages/ce/2c/a15d58ed8c76957c61ba03761ea5737b954bc1bd8ba992f80b13db96706f/ipython_reload-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92198786995653cec0c8d68be8db5cfd", "sha256": "b1d4f713f74a576ef17f06a3751c4887d18c93c80adc43f5a1611773b9d9e1e6"}, "downloads": -1, "filename": "ipython-reload-0.0.1.tar.gz", "has_sig": false, "md5_digest": "92198786995653cec0c8d68be8db5cfd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5616, "upload_time": "2020-04-29T19:08:48", "upload_time_iso_8601": "2020-04-29T19:08:48.149025Z", "url": "https://files.pythonhosted.org/packages/e4/fc/8c1ece3c94477b8ae574d5f265a15e3fee116e9ee9641c0e2e7060f1d09e/ipython-reload-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f918b701620ef83dabdadde1372b3986", "sha256": "c848e841984736b53b318f372e20f0b0376183323a9fe306adad9fff5c14ec9e"}, "downloads": -1, "filename": "ipython_reload-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f918b701620ef83dabdadde1372b3986", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5, <4", "size": 5529, "upload_time": "2020-04-29T19:08:45", "upload_time_iso_8601": "2020-04-29T19:08:45.790369Z", "url": "https://files.pythonhosted.org/packages/ce/2c/a15d58ed8c76957c61ba03761ea5737b954bc1bd8ba992f80b13db96706f/ipython_reload-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92198786995653cec0c8d68be8db5cfd", "sha256": "b1d4f713f74a576ef17f06a3751c4887d18c93c80adc43f5a1611773b9d9e1e6"}, "downloads": -1, "filename": "ipython-reload-0.0.1.tar.gz", "has_sig": false, "md5_digest": "92198786995653cec0c8d68be8db5cfd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 5616, "upload_time": "2020-04-29T19:08:48", "upload_time_iso_8601": "2020-04-29T19:08:48.149025Z", "url": "https://files.pythonhosted.org/packages/e4/fc/8c1ece3c94477b8ae574d5f265a15e3fee116e9ee9641c0e2e7060f1d09e/ipython-reload-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:24 2020"}