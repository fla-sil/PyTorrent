{"info": {"author": "Sumer Cip", "author_email": "sumerc@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/sumerc/yappi/master/Misc/logo.png\" alt=\"yappi\">\n</p>\n\n<h1 align=\"center\">Yappi</h1>\n<p align=\"center\">\n    Yet Another Python Profiler, but this time <b>thread&coroutine</b> aware.\n</p>\n\n<p align=\"center\">\n    <img src=\"https://www.travis-ci.org/sumerc/yappi.svg?branch=master\">\n    <img src=\"https://ci.appveyor.com/api/projects/status/github/sumerc/yappi?branch=master&svg=true\">\n    <img src=\"https://img.shields.io/pypi/v/yappi.svg\">\n    <img src=\"https://img.shields.io/pypi/dw/yappi.svg\">\n    <img src=\"https://img.shields.io/pypi/pyversions/yappi.svg\">\n    <img src=\"https://img.shields.io/github/last-commit/sumerc/yappi.svg\">\n    <img src=\"https://img.shields.io/github/license/sumerc/yappi.svg\">\n</p>\n\n## Highlights\n\n- **Fast**: Yappi is fast. It is completely written in C and lots of love&care went into making it fast.\n- **Unique**: Yappi supports multithreaded and [asynchronous code](https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md) profiling. Tagging/filtering multiple profiler results has interesting [use cases](https://github.com/sumerc/yappi/blob/master/doc/api.md#set_tag_callback).\n- **Intuitive**: Profiler can\u00a0be\u00a0started/stopped and results can be obtained from any time and any thread.\n- **Standards Complaint**: Profiler\u00a0results\u00a0can\u00a0be\u00a0saved\u00a0in\u00a0[callgrind](http://valgrind.org/docs/manual/cl-format.html)\u00a0or\u00a0[pstat](http://docs.python.org/3.4/library/profile.html#pstats.Stats)\u00a0formats.\n- **Rich in Feature set**: Profiler results can show either [Wall Time](https://en.wikipedia.org/wiki/Elapsed_real_time) or actual [CPU Time](http://en.wikipedia.org/wiki/CPU_time) and can be aggregated\u00a0from\u00a0different\u00a0sessions. Various flags are defined for filtering and sorting profiler results.\n- **Robust**: Yappi had seen more than *8 years* of production usage.\n\n## Motivation\n\nCPython standard distribution comes with three deterministic profilers. `cProfile`, `Profile` and `hotshot`. `cProfile` is implemented as a C module based on `lsprof`, `Profile` is in pure Python and `hotshot` can be seen as a small subset of a cProfile. The major issue is that all of these profilers lack support for multi-threaded programs and CPU time.\n\nIf you want to profile a  multi-threaded application, you must give an entry point to these profilers and then maybe merge the outputs. None of these profilers are designed to work on long-running multi-threaded applications. It is also not possible to profile an application that start/stop/retrieve traces on the fly with these profilers. \n\nNow fast forwarding to 2019: With the latest improvements on `asyncio` library and asynchronous frameworks, most of the current profilers lacks the ability to show correct wall/cpu time or even call count information per-coroutine. Thus we need a different kind of approach to profile asynchronous code. Yappi, with v1.2 introduces the concept of `coroutine profiling`. With `coroutine-profiling`, you should be able to profile correct wall/cpu time and call count of your coroutine. (including the time spent in context switches, too). You can see details [here](https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md).\n\n\n## Installation\n\nCan be installed via PyPI\n\n```\n$ pip install yappi\n```\n\nOR from the source directly.\n\n```\n$ pip install git+https://github.com/sumerc/yappi#egg=yappi\n```\n\n## Examples\n\n### A simple example:\n\n```python\nimport yappi\n\ndef a():\n    for _ in range(10000000):  # do something CPU heavy\n        pass\n\nyappi.set_clock_type(\"cpu\") # Use set_clock_type(\"wall\") for wall time\nyappi.start()\na()\n\nyappi.get_func_stats().print_all()\nyappi.get_thread_stats().print_all()\n'''\n\nClock type: CPU\nOrdered by: totaltime, desc\n\nname                                  ncall  tsub      ttot      tavg      \ndoc.py:5 a                            1      0.117907  0.117907  0.117907\n\nname           id     tid              ttot      scnt        \n_MainThread    0      139867147315008  0.118297  1\n'''\n```\n\n### Profile a multithreaded application:\n\nYou can profile a multithreaded application via Yappi and can easily retrieve\nper-thread profile information by filtering on `ctx_id` with `get_func_stats` API.\n\n```python\nimport yappi\nimport time\nimport threading\n\n_NTHREAD = 3\n\n\ndef _work(n):\n    time.sleep(n * 0.1)\n\n\nyappi.start()\n\nthreads = []\n# generate _NTHREAD threads\nfor i in range(_NTHREAD):\n    t = threading.Thread(target=_work, args=(i + 1, ))\n    t.start()\n    threads.append(t)\n# wait all threads to finish\nfor t in threads:\n    t.join()\n\nyappi.stop()\n\n# retrieve thread stats by their thread id (given by yappi)\nthreads = yappi.get_thread_stats()\nfor thread in threads:\n    print(\n        \"Function stats for (%s) (%d)\" % (thread.name, thread.id)\n    )  # it is the Thread.__class__.__name__\n    yappi.get_func_stats(ctx_id=thread.id).print_all()\n'''\nFunction stats for (Thread) (3)\n\nname                                  ncall  tsub      ttot      tavg\n..hon3.7/threading.py:859 Thread.run  1      0.000017  0.000062  0.000062\ndoc3.py:8 _work                       1      0.000012  0.000045  0.000045\n\nFunction stats for (Thread) (2)\n\nname                                  ncall  tsub      ttot      tavg\n..hon3.7/threading.py:859 Thread.run  1      0.000017  0.000065  0.000065\ndoc3.py:8 _work                       1      0.000010  0.000048  0.000048\n\n\nFunction stats for (Thread) (1)\n\nname                                  ncall  tsub      ttot      tavg\n..hon3.7/threading.py:859 Thread.run  1      0.000010  0.000043  0.000043\ndoc3.py:8 _work                       1      0.000006  0.000033  0.000033\n'''\n```\n\n### Different ways to filter/sort stats:\n\nYou can use `filter_callback` on `get_func_stats` API to filter on functions, modules\nor whatever available in `YFuncStat` object.\n\n```python\nimport package_a\nimport yappi\nimport sys\n\ndef a():\n    pass\n\ndef b():\n    pass\n\nyappi.start()\na()\nb()\npackage_a.a()\nyappi.stop()\n\n# filter by module object\ncurrent_module = sys.modules[__name__]\nstats = yappi.get_func_stats(\n    filter_callback=lambda x: yappi.module_matches(x, [current_module])\n)  # x is a yappi.YFuncStat object\nstats.sort(\"name\", \"desc\").print_all()\n'''\nClock type: CPU\nOrdered by: name, desc\n\nname                                  ncall  tsub      ttot      tavg\ndoc2.py:10 b                          1      0.000001  0.000001  0.000001\ndoc2.py:6 a                           1      0.000001  0.000001  0.000001\n'''\n\n# filter by function object\nstats = yappi.get_func_stats(\n    filter_callback=lambda x: yappi.func_matches(x, [a, b])\n).print_all()\n'''\nname                                  ncall  tsub      ttot      tavg\ndoc2.py:6 a                           1      0.000001  0.000001  0.000001\ndoc2.py:10 b                          1      0.000001  0.000001  0.000001\n'''\n\n# filter by module name\nstats = yappi.get_func_stats(filter_callback=lambda x: 'package_a' in x.module\n                             ).print_all()\n'''\nname                                  ncall  tsub      ttot      tavg\npackage_a/__init__.py:1 a             1      0.000001  0.000001  0.000001\n'''\n\n# filter by function name\nstats = yappi.get_func_stats(filter_callback=lambda x: 'a' in x.name\n                             ).print_all()\n'''\nname                                  ncall  tsub      ttot      tavg\ndoc2.py:6 a                           1      0.000001  0.000001  0.000001\npackage_a/__init__.py:1 a             1      0.000001  0.000001  0.000001\n'''\n```\n\n### Profile an async application:\n\nYou can see that coroutine wall-time's are correctly profiled.\n\n```python\nimport asyncio\nimport yappi\n\nasync def foo():\n    await asyncio.sleep(1.0)\n    await baz()\n    await asyncio.sleep(0.5)\n\nasync def bar():\n    await asyncio.sleep(2.0)\n\nasync def baz():\n    await asyncio.sleep(1.0)\n\nyappi.set_clock_type(\"WALL\")\nwith yappi.run():\n    asyncio.run(foo())\n    asyncio.run(bar())\nyappi.get_func_stats().print_all()\n'''\nClock type: WALL\nOrdered by: totaltime, desc\n\nname                                  ncall  tsub      ttot      tavg      \ndoc4.py:5 foo                         1      0.000030  2.503808  2.503808\ndoc4.py:11 bar                        1      0.000012  2.002492  2.002492\ndoc4.py:15 baz                        1      0.000013  1.001397  1.001397\n'''\n```\n\n\n## Documentation\n\n- [Introduction](https://github.com/sumerc/yappi/blob/master/doc/introduction.md)\n- [Clock Types](https://github.com/sumerc/yappi/blob/master/doc/clock_types.md)\n- [API](https://github.com/sumerc/yappi/blob/master/doc/api.md)\n- [Coroutine Profiling](https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md) _(new in 1.2)_\n\n  Note: Yes. I know I should be moving docs to readthedocs.io. Stay tuned!\n\n\n## Related Talks\n\n  Special thanks to A.Jesse Jiryu Davis:\n- [Python Performance Profiling: The Guts And The Glory (PyCon 2015)](https://www.youtube.com/watch?v=4uJWWXYHxaM)\n\n## PyCharm Integration\n\nYappi is the default profiler in `PyCharm`. If you have Yappi installed, `PyCharm` will use it. See [the official](https://www.jetbrains.com/help/pycharm/profiler.html) documentation for more details.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sumerc/yappi", "keywords": "python thread multithread profiler", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yappi", "package_url": "https://pypi.org/project/yappi/", "platform": "", "project_url": "https://pypi.org/project/yappi/", "project_urls": {"Homepage": "https://github.com/sumerc/yappi"}, "release_url": "https://pypi.org/project/yappi/1.2.5/", "requires_dist": null, "requires_python": "", "summary": "Yet Another Python Profiler", "version": "1.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <img alt=\"yappi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a737d34b4278cf1a032c5df299e9276e355f2bf2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73756d6572632f79617070692f6d61737465722f4d6973632f6c6f676f2e706e67\">\n</p>\n<h1>Yappi</h1>\n<p align=\"center\">\n    Yet Another Python Profiler, but this time <b>thread&amp;coroutine</b> aware.\n</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2e71d8bcbcc16713ed2dd17804f0f69caf07356/68747470733a2f2f7777772e7472617669732d63692e6f72672f73756d6572632f79617070692e7376673f6272616e63683d6d6173746572\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1066b3bfd99d0db603f7a7fa253a5265e2eb00c8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f73756d6572632f79617070693f6272616e63683d6d6173746572267376673d74727565\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58f704121f810d5f321b727f440bbec1b1db599a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f79617070692e737667\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e641fd284f26ee57fdd53cd1496f4e62989833d5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64772f79617070692e737667\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d665cfd0c50cd4b1a3e1ee521595019fda53dd81/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f79617070692e737667\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/335809513ac8f768002b75ca43c436530b24c29a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f73756d6572632f79617070692e737667\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca9a5da5f8e09aa2097d8633eaad6ff2e888ef92/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73756d6572632f79617070692e737667\">\n</p>\n<h2>Highlights</h2>\n<ul>\n<li><strong>Fast</strong>: Yappi is fast. It is completely written in C and lots of love&amp;care went into making it fast.</li>\n<li><strong>Unique</strong>: Yappi supports multithreaded and <a href=\"https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md\" rel=\"nofollow\">asynchronous code</a> profiling. Tagging/filtering multiple profiler results has interesting <a href=\"https://github.com/sumerc/yappi/blob/master/doc/api.md#set_tag_callback\" rel=\"nofollow\">use cases</a>.</li>\n<li><strong>Intuitive</strong>: Profiler can\u00a0be\u00a0started/stopped and results can be obtained from any time and any thread.</li>\n<li><strong>Standards Complaint</strong>: Profiler\u00a0results\u00a0can\u00a0be\u00a0saved\u00a0in\u00a0<a href=\"http://valgrind.org/docs/manual/cl-format.html\" rel=\"nofollow\">callgrind</a>\u00a0or\u00a0<a href=\"http://docs.python.org/3.4/library/profile.html#pstats.Stats\" rel=\"nofollow\">pstat</a>\u00a0formats.</li>\n<li><strong>Rich in Feature set</strong>: Profiler results can show either <a href=\"https://en.wikipedia.org/wiki/Elapsed_real_time\" rel=\"nofollow\">Wall Time</a> or actual <a href=\"http://en.wikipedia.org/wiki/CPU_time\" rel=\"nofollow\">CPU Time</a> and can be aggregated\u00a0from\u00a0different\u00a0sessions. Various flags are defined for filtering and sorting profiler results.</li>\n<li><strong>Robust</strong>: Yappi had seen more than <em>8 years</em> of production usage.</li>\n</ul>\n<h2>Motivation</h2>\n<p>CPython standard distribution comes with three deterministic profilers. <code>cProfile</code>, <code>Profile</code> and <code>hotshot</code>. <code>cProfile</code> is implemented as a C module based on <code>lsprof</code>, <code>Profile</code> is in pure Python and <code>hotshot</code> can be seen as a small subset of a cProfile. The major issue is that all of these profilers lack support for multi-threaded programs and CPU time.</p>\n<p>If you want to profile a  multi-threaded application, you must give an entry point to these profilers and then maybe merge the outputs. None of these profilers are designed to work on long-running multi-threaded applications. It is also not possible to profile an application that start/stop/retrieve traces on the fly with these profilers.</p>\n<p>Now fast forwarding to 2019: With the latest improvements on <code>asyncio</code> library and asynchronous frameworks, most of the current profilers lacks the ability to show correct wall/cpu time or even call count information per-coroutine. Thus we need a different kind of approach to profile asynchronous code. Yappi, with v1.2 introduces the concept of <code>coroutine profiling</code>. With <code>coroutine-profiling</code>, you should be able to profile correct wall/cpu time and call count of your coroutine. (including the time spent in context switches, too). You can see details <a href=\"https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>Can be installed via PyPI</p>\n<pre><code>$ pip install yappi\n</code></pre>\n<p>OR from the source directly.</p>\n<pre><code>$ pip install git+https://github.com/sumerc/yappi#egg=yappi\n</code></pre>\n<h2>Examples</h2>\n<h3>A simple example:</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yappi</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10000000</span><span class=\"p\">):</span>  <span class=\"c1\"># do something CPU heavy</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">set_clock_type</span><span class=\"p\">(</span><span class=\"s2\">\"cpu\"</span><span class=\"p\">)</span> <span class=\"c1\"># Use set_clock_type(\"wall\") for wall time</span>\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"p\">()</span>\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_thread_stats</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"sd\">Clock type: CPU</span>\n<span class=\"sd\">Ordered by: totaltime, desc</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg      </span>\n<span class=\"sd\">doc.py:5 a                            1      0.117907  0.117907  0.117907</span>\n\n<span class=\"sd\">name           id     tid              ttot      scnt        </span>\n<span class=\"sd\">_MainThread    0      139867147315008  0.118297  1</span>\n<span class=\"sd\">'''</span>\n</pre>\n<h3>Profile a multithreaded application:</h3>\n<p>You can profile a multithreaded application via Yappi and can easily retrieve\nper-thread profile information by filtering on <code>ctx_id</code> with <code>get_func_stats</code> API.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yappi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"n\">_NTHREAD</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_work</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"c1\"># generate _NTHREAD threads</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">_NTHREAD</span><span class=\"p\">):</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_work</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">threads</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"c1\"># wait all threads to finish</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># retrieve thread stats by their thread id (given by yappi)</span>\n<span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_thread_stats</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">thread</span> <span class=\"ow\">in</span> <span class=\"n\">threads</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"Function stats for (</span><span class=\"si\">%s</span><span class=\"s2\">) (</span><span class=\"si\">%d</span><span class=\"s2\">)\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>  <span class=\"c1\"># it is the Thread.__class__.__name__</span>\n    <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">(</span><span class=\"n\">ctx_id</span><span class=\"o\">=</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">Function stats for (Thread) (3)</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">..hon3.7/threading.py:859 Thread.run  1      0.000017  0.000062  0.000062</span>\n<span class=\"sd\">doc3.py:8 _work                       1      0.000012  0.000045  0.000045</span>\n\n<span class=\"sd\">Function stats for (Thread) (2)</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">..hon3.7/threading.py:859 Thread.run  1      0.000017  0.000065  0.000065</span>\n<span class=\"sd\">doc3.py:8 _work                       1      0.000010  0.000048  0.000048</span>\n\n\n<span class=\"sd\">Function stats for (Thread) (1)</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">..hon3.7/threading.py:859 Thread.run  1      0.000010  0.000043  0.000043</span>\n<span class=\"sd\">doc3.py:8 _work                       1      0.000006  0.000033  0.000033</span>\n<span class=\"sd\">'''</span>\n</pre>\n<h3>Different ways to filter/sort stats:</h3>\n<p>You can use <code>filter_callback</code> on <code>get_func_stats</code> API to filter on functions, modules\nor whatever available in <code>YFuncStat</code> object.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">package_a</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yappi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">b</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"p\">()</span>\n<span class=\"n\">b</span><span class=\"p\">()</span>\n<span class=\"n\">package_a</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">()</span>\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># filter by module object</span>\n<span class=\"n\">current_module</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"vm\">__name__</span><span class=\"p\">]</span>\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">(</span>\n    <span class=\"n\">filter_callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">module_matches</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">current_module</span><span class=\"p\">])</span>\n<span class=\"p\">)</span>  <span class=\"c1\"># x is a yappi.YFuncStat object</span>\n<span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"desc\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">Clock type: CPU</span>\n<span class=\"sd\">Ordered by: name, desc</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">doc2.py:10 b                          1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">doc2.py:6 a                           1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># filter by function object</span>\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">(</span>\n    <span class=\"n\">filter_callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">func_matches</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">])</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">doc2.py:6 a                           1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">doc2.py:10 b                          1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># filter by module name</span>\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">(</span><span class=\"n\">filter_callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'package_a'</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">module</span>\n                             <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">package_a/__init__.py:1 a             1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># filter by function name</span>\n<span class=\"n\">stats</span> <span class=\"o\">=</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">(</span><span class=\"n\">filter_callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                             <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg</span>\n<span class=\"sd\">doc2.py:6 a                           1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">package_a/__init__.py:1 a             1      0.000001  0.000001  0.000001</span>\n<span class=\"sd\">'''</span>\n</pre>\n<h3>Profile an async application:</h3>\n<p>You can see that coroutine wall-time's are correctly profiled.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yappi</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">baz</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">set_clock_type</span><span class=\"p\">(</span><span class=\"s2\">\"WALL\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">())</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">())</span>\n<span class=\"n\">yappi</span><span class=\"o\">.</span><span class=\"n\">get_func_stats</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">()</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">Clock type: WALL</span>\n<span class=\"sd\">Ordered by: totaltime, desc</span>\n\n<span class=\"sd\">name                                  ncall  tsub      ttot      tavg      </span>\n<span class=\"sd\">doc4.py:5 foo                         1      0.000030  2.503808  2.503808</span>\n<span class=\"sd\">doc4.py:11 bar                        1      0.000012  2.002492  2.002492</span>\n<span class=\"sd\">doc4.py:15 baz                        1      0.000013  1.001397  1.001397</span>\n<span class=\"sd\">'''</span>\n</pre>\n<h2>Documentation</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/sumerc/yappi/blob/master/doc/introduction.md\" rel=\"nofollow\">Introduction</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/sumerc/yappi/blob/master/doc/clock_types.md\" rel=\"nofollow\">Clock Types</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/sumerc/yappi/blob/master/doc/api.md\" rel=\"nofollow\">API</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/sumerc/yappi/blob/master/doc/coroutine-profiling.md\" rel=\"nofollow\">Coroutine Profiling</a> <em>(new in 1.2)</em></p>\n<p>Note: Yes. I know I should be moving docs to readthedocs.io. Stay tuned!</p>\n</li>\n</ul>\n<h2>Related Talks</h2>\n<p>Special thanks to A.Jesse Jiryu Davis:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=4uJWWXYHxaM\" rel=\"nofollow\">Python Performance Profiling: The Guts And The Glory (PyCon 2015)</a></li>\n</ul>\n<h2>PyCharm Integration</h2>\n<p>Yappi is the default profiler in <code>PyCharm</code>. If you have Yappi installed, <code>PyCharm</code> will use it. See <a href=\"https://www.jetbrains.com/help/pycharm/profiler.html\" rel=\"nofollow\">the official</a> documentation for more details.</p>\n\n          </div>"}, "last_serial": 7111018, "releases": {"0.54": [{"comment_text": "", "digests": {"md5": "740f3f1533e33cafa21a889656db4970", "sha256": "d680a2783fed58a5992fcf79dacb91a1c2c603621616da980099bd416e6fadc8"}, "downloads": -1, "filename": "yappi-0.54.tar.gz", "has_sig": false, "md5_digest": "740f3f1533e33cafa21a889656db4970", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15695, "upload_time": "2011-08-14T22:55:55", "upload_time_iso_8601": "2011-08-14T22:55:55.132444Z", "url": "https://files.pythonhosted.org/packages/68/cd/4c81603ef5f27416643eac7d16e29e978c2d59c1dddd23044021885cd69c/yappi-0.54.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4c75f1f9aa14536d7eab778dab69973", "sha256": "0bb77b58ae693aa21628c89ab202765a37460e11f888af48ccc83c1336833afc"}, "downloads": -1, "filename": "yappi-0.54.zip", "has_sig": false, "md5_digest": "c4c75f1f9aa14536d7eab778dab69973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19845, "upload_time": "2011-08-17T08:03:18", "upload_time_iso_8601": "2011-08-17T08:03:18.559330Z", "url": "https://files.pythonhosted.org/packages/d7/43/5121fb647d236b95aa31097dc930ca8742e841e3a05fa7978e2013c01f3d/yappi-0.54.zip", "yanked": false}], "0.62": [], "0.82": [{"comment_text": "", "digests": {"md5": "fbd6be3ee08207df6573d3aa14f3ea9e", "sha256": "1321532bd47ddb4998c1f1a95f51f2a6a0e652fdfe93f82a25e41e77dca78f23"}, "downloads": -1, "filename": "yappi-0.82.tar.gz", "has_sig": false, "md5_digest": "fbd6be3ee08207df6573d3aa14f3ea9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29841, "upload_time": "2014-01-06T12:52:52", "upload_time_iso_8601": "2014-01-06T12:52:52.801182Z", "url": "https://files.pythonhosted.org/packages/ad/45/320dd5bd567cc53947e52510868523a6845503320a40e7b2e533157a979f/yappi-0.82.tar.gz", "yanked": false}], "0.92": [{"comment_text": "", "digests": {"md5": "d7b6b0bc0a0f738d428b82e655f0290f", "sha256": "6b8b1b222dbd6b6c1e64433ee085e0f86b0fd368f73d6cd19563a842b24cf000"}, "downloads": -1, "filename": "yappi-0.92.tar.gz", "has_sig": false, "md5_digest": "d7b6b0bc0a0f738d428b82e655f0290f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24442, "upload_time": "2014-07-01T17:05:15", "upload_time_iso_8601": "2014-07-01T17:05:15.525716Z", "url": "https://files.pythonhosted.org/packages/1e/fe/ea58fb251a68606325a08634d2a0e5284dc46c16ba084c897a7a917a7377/yappi-0.92.tar.gz", "yanked": false}], "0.93": [{"comment_text": "", "digests": {"md5": "68d221209304a20991be09268fce0434", "sha256": "09c028fafb31423a46305d3dc55cf30734b66ec4607541d1b561a2ddb17d2081"}, "downloads": -1, "filename": "yappi-0.93.tar.gz", "has_sig": false, "md5_digest": "68d221209304a20991be09268fce0434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24367, "upload_time": "2014-10-27T08:10:21", "upload_time_iso_8601": "2014-10-27T08:10:21.412040Z", "url": "https://files.pythonhosted.org/packages/70/ad/e7212d40bcadf549e2df940ba48b4308f5e15a7cbc4b80a9c22a17df9231/yappi-0.93.tar.gz", "yanked": false}], "0.94": [{"comment_text": "", "digests": {"md5": "a02c49efe783c4e31d6bbd805a37adec", "sha256": "15cc17dba1252ecaae29ced1e96c216165d93fd3e9ea05dff1f5e5866f16bd59"}, "downloads": -1, "filename": "yappi-0.94.tar.gz", "has_sig": false, "md5_digest": "a02c49efe783c4e31d6bbd805a37adec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25173, "upload_time": "2014-12-22T10:14:40", "upload_time_iso_8601": "2014-12-22T10:14:40.701752Z", "url": "https://files.pythonhosted.org/packages/c3/24/fc0a4d390074190895612521d643ade341b24e9b90db42b6d2e4086ad79e/yappi-0.94.tar.gz", "yanked": false}], "0.98": [{"comment_text": "", "digests": {"md5": "dc56240575c99938a924eaeb7c0d8beb", "sha256": "5f657129e1b9b952379ffbc009357d0dcdb58c50f3bfe88ffbb992e4b27b263c"}, "downloads": -1, "filename": "yappi-0.98.tar.gz", "has_sig": false, "md5_digest": "dc56240575c99938a924eaeb7c0d8beb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37074, "upload_time": "2016-10-07T08:28:42", "upload_time_iso_8601": "2016-10-07T08:28:42.230763Z", "url": "https://files.pythonhosted.org/packages/35/43/489bf1dd0923c16b4abe09271da979ca0576662d02ba59f26cfb54e93be1/yappi-0.98.tar.gz", "yanked": false}], "0.99": [{"comment_text": "", "digests": {"md5": "e82bd6dc34745883cccd26d51f183754", "sha256": "7a81d7975eeccfaa235448b63aece052e9417f7e0f7862b827dba21be0218b22"}, "downloads": -1, "filename": "yappi-0.99.tar.gz", "has_sig": false, "md5_digest": "e82bd6dc34745883cccd26d51f183754", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38461, "upload_time": "2019-01-18T09:50:08", "upload_time_iso_8601": "2019-01-18T09:50:08.867487Z", "url": "https://files.pythonhosted.org/packages/18/55/6a30d07853f06ede3df160ed7ce47eb635d0ac7ee5c2e308f4cd61de46cd/yappi-0.99.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "a545101aa8a435b0780f06f4723f58c8", "sha256": "7f814131515d51db62b1a3468bcb84de30499124752806a5a6e11caf0b4344bf"}, "downloads": -1, "filename": "yappi-1.0.tar.gz", "has_sig": false, "md5_digest": "a545101aa8a435b0780f06f4723f58c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38939, "upload_time": "2019-02-20T09:31:25", "upload_time_iso_8601": "2019-02-20T09:31:25.082151Z", "url": "https://files.pythonhosted.org/packages/d2/92/7cd637a19fa2a10c0e55a44f8b36bcb83f0e1943ba8f1fb5edb15c819f2e/yappi-1.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "dfe17d33efd9fef8b28aa2f74efd5c5a", "sha256": "81c420480161e96b28372fc027a162a28785cdba81aaf45c52cdf5536abbd6fb"}, "downloads": -1, "filename": "yappi-1.2.1.tar.gz", "has_sig": false, "md5_digest": "dfe17d33efd9fef8b28aa2f74efd5c5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44812, "upload_time": "2019-12-12T10:02:42", "upload_time_iso_8601": "2019-12-12T10:02:42.350394Z", "url": "https://files.pythonhosted.org/packages/90/8e/ac718e8ffaffb7c92c09eb2cec33557f8f1b3ec32af5b7599a993a7700c8/yappi-1.2.1.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "36474a3e47ad9a2e4605b8e7e30a08fc", "sha256": "b8db9bc607610d6da4e27e87ec828ebddec4bdaac89ca07ebfe9a153b0641580"}, "downloads": -1, "filename": "yappi-1.2.3.tar.gz", "has_sig": false, "md5_digest": "36474a3e47ad9a2e4605b8e7e30a08fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45640, "upload_time": "2019-12-19T12:52:55", "upload_time_iso_8601": "2019-12-19T12:52:55.318507Z", "url": "https://files.pythonhosted.org/packages/37/dc/86bbe1822cdc6dbf46c644061bd24217f6a0f056f00162a3697c9bea7575/yappi-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "b705bde92b110551f85ef3ca356d1659", "sha256": "5650e28b53f624cccc4fd0f8697e7a0a823424197fc8da9ce6770e3d0bc1e392"}, "downloads": -1, "filename": "yappi-1.2.4.tar.gz", "has_sig": false, "md5_digest": "b705bde92b110551f85ef3ca356d1659", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50350, "upload_time": "2020-04-13T10:12:37", "upload_time_iso_8601": "2020-04-13T10:12:37.861156Z", "url": "https://files.pythonhosted.org/packages/04/61/189f45ac37eb1540c06be75cebabe1794a8b809cb2878f326e4aa19ad8eb/yappi-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "83237494e7d22df2a31935a1e6650fa6", "sha256": "ad5fa4caf2859e480ffc4ec3e85615a6f7dea852c8f035f2db723f824ed4ba11"}, "downloads": -1, "filename": "yappi-1.2.5.tar.gz", "has_sig": false, "md5_digest": "83237494e7d22df2a31935a1e6650fa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52806, "upload_time": "2020-04-27T11:50:33", "upload_time_iso_8601": "2020-04-27T11:50:33.953206Z", "url": "https://files.pythonhosted.org/packages/a5/c6/1edb532eb1f8db311288a058883d549bebd6e028a42f331819970d5f16a6/yappi-1.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83237494e7d22df2a31935a1e6650fa6", "sha256": "ad5fa4caf2859e480ffc4ec3e85615a6f7dea852c8f035f2db723f824ed4ba11"}, "downloads": -1, "filename": "yappi-1.2.5.tar.gz", "has_sig": false, "md5_digest": "83237494e7d22df2a31935a1e6650fa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52806, "upload_time": "2020-04-27T11:50:33", "upload_time_iso_8601": "2020-04-27T11:50:33.953206Z", "url": "https://files.pythonhosted.org/packages/a5/c6/1edb532eb1f8db311288a058883d549bebd6e028a42f331819970d5f16a6/yappi-1.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:01 2020"}