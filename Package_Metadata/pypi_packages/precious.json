{"info": {"author": "Marcin Biernat", "author_email": "mb@marcinbiernat.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Precious\n========\n\n.. image:: https://img.shields.io/pypi/pyversions/precious.svg\n    :target: https://pypi.python.org/pypi/precious\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/biern/precious.svg?branch=master\n    :target: https://travis-ci.org/biern/precious\n    :alt: Latest Travis CI build status\n\nValue objects for Python.\n\n\nExample\n-------\n\n.. code-block:: python\n\n   from precious import Value, assign_attributes\n\n\n   class Color(Value):\n       @assign_attributes\n       def __init__(self, red, green, blue, alpha=0): pass\n\n       @property\n       def grayscale(self):\n           return (self.r + self.g + self.b) / 3\n\n\n.. code-block:: python\n\n   >>> red = Color(255, 0, 0)\n   >>> red\n   Color(255, 0, 0, 0)\n   >>> red == Color(255, 0, 0)\n   True\n   >>> Color.__slots__\n   ('red', 'green', 'blue', 'alpha')\n   >>> hash(red)\n   8736776571231852889\n\n\nInstallation\n------------\n\n.. code-block::\n\n   pip install precious\n\n\nUsage\n-----\n\nValue object classes should subclass base ``Value`` class. Every ``Value`` subclass has to define ``attributes``, which is an iterable containing names of all attributes.\nThis may happen by explicitly setting the attribute on the class:\n\n.. code-block:: python\n\n   class Point(Value):\n       attributes = ('x', 'y')\n\n       def __init__(self, x, y):\n           self.x = x\n           self.y = y\n\n\nBy extracting attribute names directly from ``__init__`` definition using one of provided helper decorators:\n\n.. code-block:: python\n\n   from precious import Value, extract_attributes\n\n   class Point(Value):\n       @extract_attributes\n       def __init__(self, x, y):\n           self.x = x\n           self.y = y\n\n\nBy using a shortcut ``assign_attributes`` to replace a common boilerplate of extracting and assigning all the attributes in ``__init__``:\n\n.. code-block:: python\n\n   from precious import Value, assign_attributes\n\n   class Point(Value):\n       @assign_attributes\n       def __init__(self, x, y): pass\n\n\nNote that in the example above attributes are not being assigned in parent's class ``__init__``, thus no ``super()`` call is required.\n\n\nFeatures\n--------\n\n``Value`` implements\n********************\n\n* ``__eq__``\n* ``__repr__``\n* ``__hash__``\n\n\nMemory efficiency\n*****************\n\nSubclassing ``Value`` automaticaly assignes names of all attributes to ``__slots__`` [1]_.\n\nTesting\n-------\n\nJust run ``tox`` in package directory:\n\n.. code-block:: bash\n\n  $ tox\n\n\nWhy not simply use ``namedtuple``?\n----------------------------------\n\nNamedtuple definition is equally fine for simple use cases.\n\n.. code-block:: python\n\n    Point = namedtuple('Point', ('x', 'y'))\n\n\nHaving to repeat the classname is a minor inconvinience, but the definition is pretty readable and concise. Also, class gets iterable interface and indexing support, which sometimes is what you want. However, things with namedtuple get very ugly when a default value or a method or a property is required. Subclassing is the only way to go. Consider the following example:\n\n.. code-block:: python\n\n    class Color(namedtuple('Color_', ('r', 'g', 'b', 'alpha'))):\n        __slots__ = ()\n\n        def __new__(cls, r, g, b, alpha=0):\n            return super().__new__(cls, r, g, b, alpha)\n\n        @property\n        def grayscale(self):\n            return (self.r + self.g + self.b) / 3\n\n    # Equivalent to\n\n    class Color(Value):\n        @assign_attributes\n        def __init__(self, red, green, blue, alpha=0): pass\n\n        @property\n        def grayscale(self):\n            return (self.r + self.g + self.b) / 3\n\n\nTo sum up, problems with extending namedtuple include:\n\n* Having to define empty ``__slots__`` [1]_.\n* Overriding ``__new__`` when a default values is required.\n* Repeating attributes names in several places.\n* Unintuitive inheritance by generating parent class on the fly.\n\n\n.. [1] https://docs.python.org/3/reference/datamodel.html#slots", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/biern/precious", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "precious", "package_url": "https://pypi.org/project/precious/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/precious/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/biern/precious"}, "release_url": "https://pypi.org/project/precious/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Value objects for Python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/precious\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a14348098f39138b33fbe85ced60d0d67377ea2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70726563696f75732e737667\"></a>\n<a href=\"https://travis-ci.org/biern/precious\" rel=\"nofollow\"><img alt=\"Latest Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95442f7630f91719e5f79bbf0b2f954ec32bf0cc/68747470733a2f2f7472617669732d63692e6f72672f626965726e2f70726563696f75732e7376673f6272616e63683d6d6173746572\"></a>\n<p>Value objects for Python.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">precious</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">assign_attributes</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"nd\">@assign_attributes</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">green</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">grayscale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">red</span>\n<span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">red</span> <span class=\"o\">==</span> <span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"vm\">__slots__</span>\n<span class=\"p\">(</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'green'</span><span class=\"p\">,</span> <span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"s1\">'alpha'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">)</span>\n<span class=\"mi\">8736776571231852889</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install precious\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Value object classes should subclass base <tt>Value</tt> class. Every <tt>Value</tt> subclass has to define <tt>attributes</tt>, which is an iterable containing names of all attributes.\nThis may happen by explicitly setting the attribute on the class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n</pre>\n<p>By extracting attribute names directly from <tt>__init__</tt> definition using one of provided helper decorators:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">precious</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">extract_attributes</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"nd\">@extract_attributes</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n</pre>\n<p>By using a shortcut <tt>assign_attributes</tt> to replace a common boilerplate of extracting and assigning all the attributes in <tt>__init__</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">precious</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">assign_attributes</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"nd\">@assign_attributes</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n<p>Note that in the example above attributes are not being assigned in parent\u2019s class <tt>__init__</tt>, thus no <tt>super()</tt> call is required.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"value-implements\">\n<h3><tt>Value</tt> implements</h3>\n<ul>\n<li><tt>__eq__</tt></li>\n<li><tt>__repr__</tt></li>\n<li><tt>__hash__</tt></li>\n</ul>\n</div>\n<div id=\"memory-efficiency\">\n<h3>Memory efficiency</h3>\n<p>Subclassing <tt>Value</tt> automaticaly assignes names of all attributes to <tt>__slots__</tt> <a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Just run <tt>tox</tt> in package directory:</p>\n<pre>$ tox\n</pre>\n</div>\n<div id=\"why-not-simply-use-namedtuple\">\n<h2>Why not simply use <tt>namedtuple</tt>?</h2>\n<p>Namedtuple definition is equally fine for simple use cases.</p>\n<pre><span class=\"n\">Point</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">))</span>\n</pre>\n<p>Having to repeat the classname is a minor inconvinience, but the definition is pretty readable and concise. Also, class gets iterable interface and indexing support, which sometimes is what you want. However, things with namedtuple get very ugly when a default value or a method or a property is required. Subclassing is the only way to go. Consider the following example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Color_'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'alpha'</span><span class=\"p\">))):</span>\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">grayscale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\"># Equivalent to</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"nd\">@assign_attributes</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">green</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">grayscale</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">g</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n</pre>\n<p>To sum up, problems with extending namedtuple include:</p>\n<ul>\n<li>Having to define empty <tt>__slots__</tt> <a href=\"#id3\" id=\"id2\" rel=\"nofollow\">[1]</a>.</li>\n<li>Overriding <tt>__new__</tt> when a default values is required.</li>\n<li>Repeating attributes names in several places.</li>\n<li>Unintuitive inheritance by generating parent class on the fly.</li>\n</ul>\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td>[1]</td><td><em>(<a href=\"#id1\" rel=\"nofollow\">1</a>, <a href=\"#id2\" rel=\"nofollow\">2</a>)</em> <a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"nofollow\">https://docs.python.org/3/reference/datamodel.html#slots</a></td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 2435265, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9114f70eaa9305ab6ed73d1c5b80d3c1", "sha256": "ee6b66d680d1e671302af9b55b3170680be87bf3d5f4271f29e66ad52e624485"}, "downloads": -1, "filename": "precious-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9114f70eaa9305ab6ed73d1c5b80d3c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2649, "upload_time": "2016-09-29T18:58:50", "upload_time_iso_8601": "2016-09-29T18:58:50.257019Z", "url": "https://files.pythonhosted.org/packages/67/07/bd5d425f0d4abe00e4a9cd37eefadaceada4b16b974e802eb6c7907b8ce0/precious-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "85dbfd981a4c80d00303ff28a577569a", "sha256": "e2bb253292c15bdb45c0e8e1c8db83c94f1c6e51aa5862a469f55fd5b8b60330"}, "downloads": -1, "filename": "precious-0.1.1.tar.gz", "has_sig": false, "md5_digest": "85dbfd981a4c80d00303ff28a577569a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4085, "upload_time": "2016-11-01T14:40:01", "upload_time_iso_8601": "2016-11-01T14:40:01.390995Z", "url": "https://files.pythonhosted.org/packages/95/29/a18d12e52cd6aa735b7e974d7d62ab67f70e4df3ae9f9eb09fbad5b72fd5/precious-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85dbfd981a4c80d00303ff28a577569a", "sha256": "e2bb253292c15bdb45c0e8e1c8db83c94f1c6e51aa5862a469f55fd5b8b60330"}, "downloads": -1, "filename": "precious-0.1.1.tar.gz", "has_sig": false, "md5_digest": "85dbfd981a4c80d00303ff28a577569a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4085, "upload_time": "2016-11-01T14:40:01", "upload_time_iso_8601": "2016-11-01T14:40:01.390995Z", "url": "https://files.pythonhosted.org/packages/95/29/a18d12e52cd6aa735b7e974d7d62ab67f70e4df3ae9f9eb09fbad5b72fd5/precious-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:06 2020"}