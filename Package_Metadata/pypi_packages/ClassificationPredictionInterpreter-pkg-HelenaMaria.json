{"info": {"author": "HelenaMaria", "author_email": "anna.schmitt.anna@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Prediction Interpreter\n\nThis package contains a wrapper to interpret any predictor. Use this package:\n - to interpret a machine learning model that runs over a service\n - to interpret a trained ML- model in python, that has insufficient features for interpretation \n - to interpret a trained  ML- model in python, using the methods already set up for you\n - to get ideas about how to use the interpretation methods\n\nBy using established interpretation- techniques, the package only needs a function that takes a dataset and returns a prediction, as well as some information about the data and columns.\nThe package then automatically sets up a wrapper containing the important information and configurations to run interpretations.\n\nTo set up the predictor, state the necessary information as in file StartPredictionInterpreter given:\nHere, we use a DummyML-Model that predicts the amount of visitors on a day, depending on whether it is holiday, how much the ticket price is, and what'S the weather like.\n(For your additional information: There are many visitors if its holiday, or when the price is low. The weather has a random effect on the amount of visitors. But all of this you will see when running the dummy data.) \n\nAdditionally to the DummyMLModel, it is necessary to give \n - the testdata as a panda-Dataframe\n - as well as the result column's name\n - all data columns' names\n - the numerical column names (if there are any...)\n - the categories in result column (classes_)\n - rather the result is a continuous value\n\n\n     #get data and object that has singlepredict in correct format\n    dm = DummyMLModel()\n    data = dm.testdata\n\n    #define necessary variables for techniques\n    standardColumns = data.columns.to_list()\n    resultcolumn = \"visitorsOnThisDay\"\n    listOfNumericalColumns = [\"ticketPrice\"]\n    _classes_ = data[resultcolumn].unique().tolist()\n    resultIsContinuous = False\n\nAfter that, create the the interpreter with the before defined parameters, and run the interpretation techniques that are of interest for you. \n\n    #create interpreter \n    predictionInterpreter = PredictionInterpreterClass(dm.predict, listOfNumericalColumns, standardColumns, resultcolumn, _classes_, data, resultIsContinuous)\n\n    #call interpretation technique  s you want to use:\n    predictionInterpreter.plotpdpOfDistanceToTrueResultSklearn() # only works if called without any prior methods\n    predictionInterpreter.plotpdpOfDistanceToTrueResultSklearn2D()\n    predictionInterpreter.writeDistribution(\"visitorsOnThisDay\")\n    predictionInterpreter.plotConfusionTable()\n    predictionInterpreter.printImportanceEli5(exceptedColumns = resultcolumn)\n    predictionInterpreter.printImportanceEli5(distanceAnalysis=True)\n    predictionInterpreter.featureAnnulation(annulationValue = \"0\")\n    predictionInterpreter.plotIce()\n    predictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featureToExamine=\"ticketPrice\")\n    predictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featuresToExamine=[\"holidayYN\", \"ticketPrice\"])\n    predictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featureToExamine=\"ticketPrice\", featuresToExamine=[\"holidayYN\", \"ticketPrice\"])\n    predictionInterpreter.globalSurrogateModel()\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HelenaMaria112/PredictionInterpreter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ClassificationPredictionInterpreter-pkg-HelenaMaria", "package_url": "https://pypi.org/project/ClassificationPredictionInterpreter-pkg-HelenaMaria/", "platform": "", "project_url": "https://pypi.org/project/ClassificationPredictionInterpreter-pkg-HelenaMaria/", "project_urls": {"Homepage": "https://github.com/HelenaMaria112/PredictionInterpreter"}, "release_url": "https://pypi.org/project/ClassificationPredictionInterpreter-pkg-HelenaMaria/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "univariate model's Interpretation Techniques - also for classificating features and predictions", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Prediction Interpreter</h1>\n<p>This package contains a wrapper to interpret any predictor. Use this package:</p>\n<ul>\n<li>to interpret a machine learning model that runs over a service</li>\n<li>to interpret a trained ML- model in python, that has insufficient features for interpretation</li>\n<li>to interpret a trained  ML- model in python, using the methods already set up for you</li>\n<li>to get ideas about how to use the interpretation methods</li>\n</ul>\n<p>By using established interpretation- techniques, the package only needs a function that takes a dataset and returns a prediction, as well as some information about the data and columns.\nThe package then automatically sets up a wrapper containing the important information and configurations to run interpretations.</p>\n<p>To set up the predictor, state the necessary information as in file StartPredictionInterpreter given:\nHere, we use a DummyML-Model that predicts the amount of visitors on a day, depending on whether it is holiday, how much the ticket price is, and what'S the weather like.\n(For your additional information: There are many visitors if its holiday, or when the price is low. The weather has a random effect on the amount of visitors. But all of this you will see when running the dummy data.)</p>\n<p>Additionally to the DummyMLModel, it is necessary to give</p>\n<ul>\n<li>\n<p>the testdata as a panda-Dataframe</p>\n</li>\n<li>\n<p>as well as the result column's name</p>\n</li>\n<li>\n<p>all data columns' names</p>\n</li>\n<li>\n<p>the numerical column names (if there are any...)</p>\n</li>\n<li>\n<p>the categories in result column (classes_)</p>\n</li>\n<li>\n<p>rather the result is a continuous value</p>\n<p>#get data and object that has singlepredict in correct format\ndm = DummyMLModel()\ndata = dm.testdata</p>\n<p>#define necessary variables for techniques\nstandardColumns = data.columns.to_list()\nresultcolumn = \"visitorsOnThisDay\"\nlistOfNumericalColumns = [\"ticketPrice\"]\n<em>classes</em> = data[resultcolumn].unique().tolist()\nresultIsContinuous = False</p>\n</li>\n</ul>\n<p>After that, create the the interpreter with the before defined parameters, and run the interpretation techniques that are of interest for you.</p>\n<pre><code>#create interpreter \npredictionInterpreter = PredictionInterpreterClass(dm.predict, listOfNumericalColumns, standardColumns, resultcolumn, _classes_, data, resultIsContinuous)\n\n#call interpretation technique  s you want to use:\npredictionInterpreter.plotpdpOfDistanceToTrueResultSklearn() # only works if called without any prior methods\npredictionInterpreter.plotpdpOfDistanceToTrueResultSklearn2D()\npredictionInterpreter.writeDistribution(\"visitorsOnThisDay\")\npredictionInterpreter.plotConfusionTable()\npredictionInterpreter.printImportanceEli5(exceptedColumns = resultcolumn)\npredictionInterpreter.printImportanceEli5(distanceAnalysis=True)\npredictionInterpreter.featureAnnulation(annulationValue = \"0\")\npredictionInterpreter.plotIce()\npredictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featureToExamine=\"ticketPrice\")\npredictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featuresToExamine=[\"holidayYN\", \"ticketPrice\"])\npredictionInterpreter.plotpdpOfDistanceToTrueResultPdpbox(featureToExamine=\"ticketPrice\", featuresToExamine=[\"holidayYN\", \"ticketPrice\"])\npredictionInterpreter.globalSurrogateModel()\n</code></pre>\n\n          </div>"}, "last_serial": 7037930, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "953b4f941080a3f6f21548b62b928726", "sha256": "b4abfd6c78714fb05eae322e0d656a9821ca0b9ee1a29983ff1e9f6550e2680b"}, "downloads": -1, "filename": "ClassificationPredictionInterpreter_pkg_HelenaMaria-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "953b4f941080a3f6f21548b62b928726", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3684, "upload_time": "2020-04-17T06:18:34", "upload_time_iso_8601": "2020-04-17T06:18:34.397320Z", "url": "https://files.pythonhosted.org/packages/ad/40/bb638b9eeb1b537557c6bc186379924465a8041238747a2a24789dc7bd83/ClassificationPredictionInterpreter_pkg_HelenaMaria-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dc60277b140210d7c0a12421530a9eb", "sha256": "5033f3d23a1bbadb6c0d551eb35e300dfec0a6a0a206c3e1baa1680240d96954"}, "downloads": -1, "filename": "ClassificationPredictionInterpreter-pkg-HelenaMaria-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9dc60277b140210d7c0a12421530a9eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2587, "upload_time": "2020-04-17T06:18:36", "upload_time_iso_8601": "2020-04-17T06:18:36.984977Z", "url": "https://files.pythonhosted.org/packages/fd/5e/d4db951822e8f7992e4f4d7b3e1141cca387c6372deb32bfbcce9770c506/ClassificationPredictionInterpreter-pkg-HelenaMaria-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "953b4f941080a3f6f21548b62b928726", "sha256": "b4abfd6c78714fb05eae322e0d656a9821ca0b9ee1a29983ff1e9f6550e2680b"}, "downloads": -1, "filename": "ClassificationPredictionInterpreter_pkg_HelenaMaria-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "953b4f941080a3f6f21548b62b928726", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3684, "upload_time": "2020-04-17T06:18:34", "upload_time_iso_8601": "2020-04-17T06:18:34.397320Z", "url": "https://files.pythonhosted.org/packages/ad/40/bb638b9eeb1b537557c6bc186379924465a8041238747a2a24789dc7bd83/ClassificationPredictionInterpreter_pkg_HelenaMaria-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dc60277b140210d7c0a12421530a9eb", "sha256": "5033f3d23a1bbadb6c0d551eb35e300dfec0a6a0a206c3e1baa1680240d96954"}, "downloads": -1, "filename": "ClassificationPredictionInterpreter-pkg-HelenaMaria-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9dc60277b140210d7c0a12421530a9eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2587, "upload_time": "2020-04-17T06:18:36", "upload_time_iso_8601": "2020-04-17T06:18:36.984977Z", "url": "https://files.pythonhosted.org/packages/fd/5e/d4db951822e8f7992e4f4d7b3e1141cca387c6372deb32bfbcce9770c506/ClassificationPredictionInterpreter-pkg-HelenaMaria-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:08 2020"}