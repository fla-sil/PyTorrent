{"info": {"author": "fcracker79", "author_email": "fcracker79@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "Chattyraspi\n===========\n\nChattyraspi is a support library to connect your Raspberry Pi to Amazon\nAlexa.\n\nQuick start\n-----------\n\n1. Connect to `the configuration\n   console <https://raspberry.alexa.mirko.io/login>`__\n2. Logon using your Amazon credentials\n3. Add your device(s)\n4. Download your configuration file\n5. Start the the example script:\n   ``test_chattyraspi --config devices_configuration.yaml``\n6. Install Chattyraspy skill on your Alexa\n7. Detect your new device(s) on Alexa\n8. Turn on/off your device(s) using Alexa\n\nCustom script\n-------------\n\nChattyraspi allows you to intercept all the turn on/off requests from\nAlexa, upon which you can freely react as you wish.\n\nThis snippet of code comes from the ``test_chattyraspi`` script:\n\n.. code:: python\n\n    #!/usr/bin/env python\n    from logging.config import fileConfig\n\n    import click\n    import typing\n\n    from chattyraspi.client import Client\n    from chattyraspi.device import DevicesConfiguration\n\n\n    def test_devices():\n        # Optionally configure you logging system\n        logging_conf_file = '<youg logging configuration>'\n        fileConfig(logging_conf_file, disable_existing_loggers=False)\n        \n        config = DevicesConfiguration('devices_configuration.yaml')\n        client = Client(config)\n\n        statuses = dict()\n\n        def _turn_on(device_id: str):\n            print('Device {} turned ON'.format(device_id))\n            # Here you have received a turn on request.\n            # Feel free to do whatever you want, but please remember\n            # to mark your device as ON somehow\n            statuses[device_id] = True\n\n        def _turn_off(device_id: str):\n            print('Device {} turned OFF'.format(device_id))\n            # Here you have received a turn off request.\n            # Here you are free to do whatever you want, but reasonably\n            # you would do the opposite as turn on callback.\n            # Finally, please remember that your device is OFF.\n            statuses[device_id] = False\n\n        def _fetch_is_power_on(device_id: str) -> bool:\n            print('Device {} requested power status'.format(device_id))\n            # Here Alexa is asking for the the power status of your device.\n            # Please be consistent with what you have done before\n            status = statuses[device_id]\n            print('Returning', status)\n            return status\n        \n        # Some boilerplate code: here we add the same callbacks for each configured\n        # device.\n        for device_id in map(lambda d: d['device_id'], config.get_configuration()['Devices']):\n            statuses[device_id] = False\n            client.set_on_turn_on(device_id, _turn_on)\n            client.set_on_turn_off(device_id, _turn_off)\n            client.set_fetch_is_power_on(device_id, _fetch_is_power_on)\n        client.listen()\n\n\n    if __name__ == '__main__':\n        test_devices()", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fcracker79/alexa-home-skill/clients/generic", "keywords": "alexa alexa-home alexa-skill", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "chattyraspi", "package_url": "https://pypi.org/project/chattyraspi/", "platform": "", "project_url": "https://pypi.org/project/chattyraspi/", "project_urls": {"Homepage": "https://github.com/fcracker79/alexa-home-skill/clients/generic"}, "release_url": "https://pypi.org/project/chattyraspi/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "Allows interaction between Alexa and your Raspberry Pi", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Chattyraspi is a support library to connect your Raspberry Pi to Amazon\nAlexa.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li>Connect to <a href=\"https://raspberry.alexa.mirko.io/login\" rel=\"nofollow\">the configuration\nconsole</a></li>\n<li>Logon using your Amazon credentials</li>\n<li>Add your device(s)</li>\n<li>Download your configuration file</li>\n<li>Start the the example script:\n<tt>test_chattyraspi <span class=\"pre\">--config</span> devices_configuration.yaml</tt></li>\n<li>Install Chattyraspy skill on your Alexa</li>\n<li>Detect your new device(s) on Alexa</li>\n<li>Turn on/off your device(s) using Alexa</li>\n</ol>\n</div>\n<div id=\"custom-script\">\n<h2>Custom script</h2>\n<p>Chattyraspi allows you to intercept all the turn on/off requests from\nAlexa, upon which you can freely react as you wish.</p>\n<p>This snippet of code comes from the <tt>test_chattyraspi</tt> script:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.config</span> <span class=\"kn\">import</span> <span class=\"n\">fileConfig</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">click</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">chattyraspi.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chattyraspi.device</span> <span class=\"kn\">import</span> <span class=\"n\">DevicesConfiguration</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_devices</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Optionally configure you logging system</span>\n    <span class=\"n\">logging_conf_file</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;youg logging configuration&gt;'</span>\n    <span class=\"n\">fileConfig</span><span class=\"p\">(</span><span class=\"n\">logging_conf_file</span><span class=\"p\">,</span> <span class=\"n\">disable_existing_loggers</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">DevicesConfiguration</span><span class=\"p\">(</span><span class=\"s1\">'devices_configuration.yaml'</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">statuses</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_turn_on</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Device </span><span class=\"si\">{}</span><span class=\"s1\"> turned ON'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Here you have received a turn on request.</span>\n        <span class=\"c1\"># Feel free to do whatever you want, but please remember</span>\n        <span class=\"c1\"># to mark your device as ON somehow</span>\n        <span class=\"n\">statuses</span><span class=\"p\">[</span><span class=\"n\">device_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_turn_off</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Device </span><span class=\"si\">{}</span><span class=\"s1\"> turned OFF'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Here you have received a turn off request.</span>\n        <span class=\"c1\"># Here you are free to do whatever you want, but reasonably</span>\n        <span class=\"c1\"># you would do the opposite as turn on callback.</span>\n        <span class=\"c1\"># Finally, please remember that your device is OFF.</span>\n        <span class=\"n\">statuses</span><span class=\"p\">[</span><span class=\"n\">device_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_fetch_is_power_on</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Device </span><span class=\"si\">{}</span><span class=\"s1\"> requested power status'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Here Alexa is asking for the the power status of your device.</span>\n        <span class=\"c1\"># Please be consistent with what you have done before</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">statuses</span><span class=\"p\">[</span><span class=\"n\">device_id</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Returning'</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">status</span>\n\n    <span class=\"c1\"># Some boilerplate code: here we add the same callbacks for each configured</span>\n    <span class=\"c1\"># device.</span>\n    <span class=\"k\">for</span> <span class=\"n\">device_id</span> <span class=\"ow\">in</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'device_id'</span><span class=\"p\">],</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_configuration</span><span class=\"p\">()[</span><span class=\"s1\">'Devices'</span><span class=\"p\">]):</span>\n        <span class=\"n\">statuses</span><span class=\"p\">[</span><span class=\"n\">device_id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_on_turn_on</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"n\">_turn_on</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_on_turn_off</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"n\">_turn_off</span><span class=\"p\">)</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_fetch_is_power_on</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"n\">_fetch_is_power_on</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">test_devices</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7177910, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4ff038a149c054c9354459e3a34de102", "sha256": "092ad91a7bd972f1eb83c0f7eafd0669107d59161277f4b5e3597dcb110f4f65"}, "downloads": -1, "filename": "chattyraspi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4ff038a149c054c9354459e3a34de102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5910, "upload_time": "2020-04-03T20:35:27", "upload_time_iso_8601": "2020-04-03T20:35:27.863709Z", "url": "https://files.pythonhosted.org/packages/88/50/c6a44a78da98a107334bf4dc15903059315c76a819574e5e3953ce5f7e4b/chattyraspi-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9cf15f663511a5c98d3d0f5f0c46cf51", "sha256": "f11186278cc7133597c61dfd34bbb11b9c0c1ac75d33408b499ad147d5c3c057"}, "downloads": -1, "filename": "chattyraspi-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9cf15f663511a5c98d3d0f5f0c46cf51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5932, "upload_time": "2020-04-27T20:21:59", "upload_time_iso_8601": "2020-04-27T20:21:59.104060Z", "url": "https://files.pythonhosted.org/packages/b6/2e/f4f6aa829bddc7c298cc272155ce49c39f38462f6648ea4fcbe6645436cf/chattyraspi-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d4de54f442634cf24ac1cc60e711f41b", "sha256": "afca6425f128ca056a5d1b85b58579d43357caf3b22db5e884f97a638a6e383c"}, "downloads": -1, "filename": "chattyraspi-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d4de54f442634cf24ac1cc60e711f41b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5982, "upload_time": "2020-04-29T06:32:27", "upload_time_iso_8601": "2020-04-29T06:32:27.128272Z", "url": "https://files.pythonhosted.org/packages/df/c0/5b35d26c3719ada72cc5c215894c16f7bda55522d82badd810d6011b3b03/chattyraspi-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "584c43b9a216a21bb18d1fbe95af0d45", "sha256": "ed6d9f7b82d11af96a631aed1b7907ad72e4920f99c6d7362fc2be293d1700ec"}, "downloads": -1, "filename": "chattyraspi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "584c43b9a216a21bb18d1fbe95af0d45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6026, "upload_time": "2020-04-30T20:36:51", "upload_time_iso_8601": "2020-04-30T20:36:51.095694Z", "url": "https://files.pythonhosted.org/packages/72/86/02fd37e6adfba35ceea000f0bce2f6a0291c7f8ed0d3e3423bfff0d70717/chattyraspi-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "dd50c451402d26d115805b4a06ffa483", "sha256": "8b17c2708337701c14141e50a37d16d7af27f200b66253724de64807fb644969"}, "downloads": -1, "filename": "chattyraspi-0.0.5.tar.gz", "has_sig": false, "md5_digest": "dd50c451402d26d115805b4a06ffa483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6206, "upload_time": "2020-05-06T06:08:57", "upload_time_iso_8601": "2020-05-06T06:08:57.232989Z", "url": "https://files.pythonhosted.org/packages/bd/da/a5a8d0bebfd98e978dceaf150971dc0448890b0b171cbc5487fcf59347fd/chattyraspi-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd50c451402d26d115805b4a06ffa483", "sha256": "8b17c2708337701c14141e50a37d16d7af27f200b66253724de64807fb644969"}, "downloads": -1, "filename": "chattyraspi-0.0.5.tar.gz", "has_sig": false, "md5_digest": "dd50c451402d26d115805b4a06ffa483", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6206, "upload_time": "2020-05-06T06:08:57", "upload_time_iso_8601": "2020-05-06T06:08:57.232989Z", "url": "https://files.pythonhosted.org/packages/bd/da/a5a8d0bebfd98e978dceaf150971dc0448890b0b171cbc5487fcf59347fd/chattyraspi-0.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:22 2020"}