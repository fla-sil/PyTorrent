{"info": {"author": "Doubletapp", "author_email": "info@doubletapp.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "django-url-shortening\n=====================\n\nA custom URL shortening app for Django with API.\n\nUsage\n=====\n\n1. Add ``urlshortening`` app to your ``INSTALLED_APPS`` and do\n   ``migrate``\n\n2. Wire up the redirect view by adding to your URLconf\n\n   ::\n\n       ('^linkshortening/', include('urlshortening.urls'))\n\n3. Add settings (more about parameters further)\n\n   ::\n\n       INITIAL_URL_LEN = 6\n       RETRY_COUNT = 5\n       SHORT_URL_PATH = 'http://example.com/short-prefix/'\n       REDIRECT_PREFIX = 'r'\n\n4. Now you can use API to make short links\n\n   ``POST linkshortening/short/``\n\n   With json data ``{\"full_url\": \"http://example.com/a/b/c/d/e\"}``\n\n   And get response\n\n   ::\n\n       {\"data\": {\n           \"short_id\": \"123456\",\n           \"short_url_path\": \"http://example.com/short-prefix/\"\n        }, \"error\": \"\"}\n\n5. You could also use ``urlshortening`` right from code\n\n   ::\n\n       from urlshortening.models import get_short_url, invalidate_url, get_full_url\n\n   ::\n\n       url = \"http://example.com/a/b/c/d/e\"\n       short_url = get_short_url(url) # Url object\n       print(short_url.short_id) # id for short url\n\n   ::\n\n       full_url = get_full_url(short_url.short_id) # Url object\n       print(full_url.url) # \"http://example.com/a/b/c/d/e\"\n\n   ::\n\n       # You could also invalidate url\n       invalidate_url(full_url.short_id)\n\nAPI\n===\n\n**Get short link**\n\n-  **URL**\n\n   ::\n\n       /short/\n\n-  **Method:** ``POST``\n\n-  **Data Params**\n\n   -  full\\_url\n\n-  **Success Response:**\n\n   -  **Code:** 200 **Content:**\n      ``{ data: { \"short_url_path\": \"000001\" }, error: \"\" }``\n\n-  **Error Response:**\n\n   -  **Code:** 400 **Content:** ``{ error : \"full_url is empty\" }``\n\n   -  **Code:** 400 **Content:** ``{ error : \"full_url is too long\" }``\n\n**Get full link**\n\n-  **URL**\n\n   ::\n\n       /expand/:short_id/\n\n-  **Method:** ``GET``\n\n-  **URL Params**\n\n   ::\n\n       short_id=[string]\n\n-  **Success Response:**\n\n   -  **Code:** 200 **Content:**\n      ``{ error : \"\", data: { full_url: \"http://example.com/to-000001\" }}``\n\n-  **Error Response:**\n\n   -  **Code:** 404 **Content:** ``{ error : \"Link is expired\" }``\n\n   -  **Code:** 404 **Content:** ``{ error : \"Url doesn\\'t exist\" }``\n\n**Get redirect**\n\n-  **URL**\n\n   ::\n\n       /REDIRECT_PREFIX/expand/:short_id/\n\n-  **Method:** ``GET``\n\n-  **URL Params**\n\n   ::\n\n       short_id=[string]\n\n-  **Success Response:**\n\n   -  **Code:** 302\n\n-  **Error Response:**\n\n   -  **Code:** 404 **Content:** ``{ error : \"Link is expired\" }``\n\n   -  **Code:** 404 **Content:** ``{ error : \"Url doesn\\'t exist\" }``\n\n**Invalidate url**\n\n-  **URL**\n\n   ::\n\n       /invalidate/\n\n-  **Method:** ``POST``\n\n-  **Data Params**\n\n   -  short\\_id\n\n-  **Success Response:**\n\n   -  **Code:** 200 **Content:**\n      ``{ error : \"\", data: { \"short_id\": \"000001\", \"invalidated\": \"true\" } }``\n\n-  **Error Response:**\n\n   -  **Code:** 400 **Content:** ``{ error : \"short_id is empty\" }``\n\n   -  **Code:** 400 **Content:**\n      ``{ error : \"Link is already expired\" }``\n\n   -  **Code:** 404 **Content:** ``{ error : \"Url doesn\\'t exist\" }``\n\nSettings\n========\n\nAvailable settings are:\n\n-  ``INITIAL_URL_LEN``\n\n   Initial length of short id for url. Once you get more short id's than\n   is possible in all combinations of ``INITIAL_URL_LEN`` symbols it\n   will increase by one\n\n-  ``RETRY_COUNT``\n\n   How many times do we to check before increasing ``INITIAL_URL_LEN``.\n\n-  ``SHORT_URL_PATH``\n\n   Url that will be returned with ``short_id`` on\n   ``POST linkshortening/short/`` request. It might help you to\n   construct full url.\n\n-  ``REDIRECT_PREFIX``\n\n   Select prefix to use redirect links. For example\n   ``REDIRECT_PREFIX=\"r\"`` and we get redirect links with format\n   ``/r/expand/{short_id}/``", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/doubletapp/django-url-shortening", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-url-shortening", "package_url": "https://pypi.org/project/django-url-shortening/", "platform": "", "project_url": "https://pypi.org/project/django-url-shortening/", "project_urls": {"Homepage": "https://github.com/doubletapp/django-url-shortening"}, "release_url": "https://pypi.org/project/django-url-shortening/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A URL shortening app for Django.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-url-shortening\">\n<h2>django-url-shortening</h2>\n<p>A custom URL shortening app for Django with API.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ol>\n<li><p>Add <tt>urlshortening</tt> app to your <tt>INSTALLED_APPS</tt> and do\n<tt>migrate</tt></p>\n</li>\n<li><p>Wire up the redirect view by adding to your URLconf</p>\n<pre>('^linkshortening/', include('urlshortening.urls'))\n</pre>\n</li>\n<li><p>Add settings (more about parameters further)</p>\n<pre>INITIAL_URL_LEN = 6\nRETRY_COUNT = 5\nSHORT_URL_PATH = 'http://example.com/short-prefix/'\nREDIRECT_PREFIX = 'r'\n</pre>\n</li>\n<li><p>Now you can use API to make short links</p>\n<p><tt>POST linkshortening/short/</tt></p>\n<p>With json data <tt>{\"full_url\": <span class=\"pre\">\"http://example.com/a/b/c/d/e\"}</span></tt></p>\n<p>And get response</p>\n<pre>{\"data\": {\n    \"short_id\": \"123456\",\n    \"short_url_path\": \"http://example.com/short-prefix/\"\n }, \"error\": \"\"}\n</pre>\n</li>\n<li><p>You could also use <tt>urlshortening</tt> right from code</p>\n<pre>from urlshortening.models import get_short_url, invalidate_url, get_full_url\n</pre>\n<pre>url = \"http://example.com/a/b/c/d/e\"\nshort_url = get_short_url(url) # Url object\nprint(short_url.short_id) # id for short url\n</pre>\n<pre>full_url = get_full_url(short_url.short_id) # Url object\nprint(full_url.url) # \"http://example.com/a/b/c/d/e\"\n</pre>\n<pre># You could also invalidate url\ninvalidate_url(full_url.short_id)\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p><strong>Get short link</strong></p>\n<ul>\n<li><p><strong>URL</strong></p>\n<pre>/short/\n</pre>\n</li>\n<li><p><strong>Method:</strong> <tt>POST</tt></p>\n</li>\n<li><p><strong>Data Params</strong></p>\n<ul>\n<li>full_url</li>\n</ul>\n</li>\n<li><p><strong>Success Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 200 <strong>Content:</strong>\n<tt>{ data: { \"short_url_path\": \"000001\" }, error: \"\" }</tt></li>\n</ul>\n</li>\n<li><p><strong>Error Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 400 <strong>Content:</strong> <tt>{ error : \"full_url is empty\" }</tt></li>\n<li><strong>Code:</strong> 400 <strong>Content:</strong> <tt>{ error : \"full_url is too long\" }</tt></li>\n</ul>\n</li>\n</ul>\n<p><strong>Get full link</strong></p>\n<ul>\n<li><p><strong>URL</strong></p>\n<pre>/expand/:short_id/\n</pre>\n</li>\n<li><p><strong>Method:</strong> <tt>GET</tt></p>\n</li>\n<li><p><strong>URL Params</strong></p>\n<pre>short_id=[string]\n</pre>\n</li>\n<li><p><strong>Success Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 200 <strong>Content:</strong>\n<tt>{ error : \"\", data: { full_url: <span class=\"pre\">\"http://example.com/to-000001\"</span> }}</tt></li>\n</ul>\n</li>\n<li><p><strong>Error Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 404 <strong>Content:</strong> <tt>{ error : \"Link is expired\" }</tt></li>\n<li><strong>Code:</strong> 404 <strong>Content:</strong> <tt>{ error : \"Url <span class=\"pre\">doesn\\'t</span> exist\" }</tt></li>\n</ul>\n</li>\n</ul>\n<p><strong>Get redirect</strong></p>\n<ul>\n<li><p><strong>URL</strong></p>\n<pre>/REDIRECT_PREFIX/expand/:short_id/\n</pre>\n</li>\n<li><p><strong>Method:</strong> <tt>GET</tt></p>\n</li>\n<li><p><strong>URL Params</strong></p>\n<pre>short_id=[string]\n</pre>\n</li>\n<li><p><strong>Success Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 302</li>\n</ul>\n</li>\n<li><p><strong>Error Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 404 <strong>Content:</strong> <tt>{ error : \"Link is expired\" }</tt></li>\n<li><strong>Code:</strong> 404 <strong>Content:</strong> <tt>{ error : \"Url <span class=\"pre\">doesn\\'t</span> exist\" }</tt></li>\n</ul>\n</li>\n</ul>\n<p><strong>Invalidate url</strong></p>\n<ul>\n<li><p><strong>URL</strong></p>\n<pre>/invalidate/\n</pre>\n</li>\n<li><p><strong>Method:</strong> <tt>POST</tt></p>\n</li>\n<li><p><strong>Data Params</strong></p>\n<ul>\n<li>short_id</li>\n</ul>\n</li>\n<li><p><strong>Success Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 200 <strong>Content:</strong>\n<tt>{ error : \"\", data: { \"short_id\": \"000001\", \"invalidated\": \"true\" } }</tt></li>\n</ul>\n</li>\n<li><p><strong>Error Response:</strong></p>\n<ul>\n<li><strong>Code:</strong> 400 <strong>Content:</strong> <tt>{ error : \"short_id is empty\" }</tt></li>\n<li><strong>Code:</strong> 400 <strong>Content:</strong>\n<tt>{ error : \"Link is already expired\" }</tt></li>\n<li><strong>Code:</strong> 404 <strong>Content:</strong> <tt>{ error : \"Url <span class=\"pre\">doesn\\'t</span> exist\" }</tt></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>Available settings are:</p>\n<ul>\n<li><p><tt>INITIAL_URL_LEN</tt></p>\n<p>Initial length of short id for url. Once you get more short id\u2019s than\nis possible in all combinations of <tt>INITIAL_URL_LEN</tt> symbols it\nwill increase by one</p>\n</li>\n<li><p><tt>RETRY_COUNT</tt></p>\n<p>How many times do we to check before increasing <tt>INITIAL_URL_LEN</tt>.</p>\n</li>\n<li><p><tt>SHORT_URL_PATH</tt></p>\n<p>Url that will be returned with <tt>short_id</tt> on\n<tt>POST linkshortening/short/</tt> request. It might help you to\nconstruct full url.</p>\n</li>\n<li><p><tt>REDIRECT_PREFIX</tt></p>\n<p>Select prefix to use redirect links. For example\n<tt><span class=\"pre\">REDIRECT_PREFIX=\"r\"</span></tt> and we get redirect links with format\n<tt><span class=\"pre\">/r/expand/{short_id}/</span></tt></p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3219623, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9d3d57142a10b49231234ad81d76efe7", "sha256": "5d94c6adc46dd80427e73b1c7433dbd8af240037c9960f778d1fedb6489e9f4e"}, "downloads": -1, "filename": "django-url-shortening-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d3d57142a10b49231234ad81d76efe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5623, "upload_time": "2017-10-02T15:45:13", "upload_time_iso_8601": "2017-10-02T15:45:13.517930Z", "url": "https://files.pythonhosted.org/packages/cb/88/281ed0e22547a94a6042a53eb639e2b637e6df95f5cfafda8e25d67174a2/django-url-shortening-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d3d57142a10b49231234ad81d76efe7", "sha256": "5d94c6adc46dd80427e73b1c7433dbd8af240037c9960f778d1fedb6489e9f4e"}, "downloads": -1, "filename": "django-url-shortening-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9d3d57142a10b49231234ad81d76efe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5623, "upload_time": "2017-10-02T15:45:13", "upload_time_iso_8601": "2017-10-02T15:45:13.517930Z", "url": "https://files.pythonhosted.org/packages/cb/88/281ed0e22547a94a6042a53eb639e2b637e6df95f5cfafda8e25d67174a2/django-url-shortening-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:11 2020"}