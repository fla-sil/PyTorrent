{"info": {"author": "Victor SANH", "author_email": "victorsanh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# Knock Knock\n\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-red.svg)](#python) [![Downloads](https://pepy.tech/badge/knockknock)](https://pepy.tech/project/knockknock) [![Downloads](https://pepy.tech/badge/knockknock/month)](https://pepy.tech/project/knockknock/month) [![GitHub stars](https://img.shields.io/github/stars/huggingface/knockknock.svg?style=social&label=Star&maxAge=1000)](https://github.com/huggingface/knockknock/stargazers/)\n\nA small library to get a notification when your training is complete or when it crashes during the process with two additional lines of code.\n\nWhen training deep learning models, it is common to use early stopping. Apart from a rough estimate, it is difficult to predict when the training will finish. Thus, it can be interesting to set up automatic notifications for your training. It is also interesting to be notified when your training crashes in the middle of the process for unexpected reasons.\n\n## Installation\n\nInstall with `pip` or equivalent.\n\n```bash\npip install knockknock\n```\n\nThis code has only been tested with Python >= 3.6.\n\n## Usage\n\nThe library is designed to be used in a seamless way, with minimal code modification: you only need to add a decorator on top your main function call. The return value (if there is one) is also reported in the notification.\n\nThere are currently *twelve* ways to setup notifications:\n\n|               Platform                |                                   External Contributors                                   |\n| :-----------------------------------: | :---------------------------------------------------------------------------------------: |\n|            [email](#email)            |                                             -                                             |\n|            [Slack](#slack)            |                                             -                                             |\n|         [Telegram](#telegram)         |                                             -                                             |\n|  [Microsoft Teams](#microsoft-teams)  |                           [@noklam](https://github.com/noklam)                            |\n| [Text Message](<#text-message-(sms)>) |                 [@abhishekkrthakur](https://github.com/abhishekkrthakur)                  |\n|          [Discord](#discord)          |                         [@watkinsm](https://github.com/watkinsm)                          |\n|   [Desktop](#desktop-notification)    | [@atakanyenel](https://github.com/atakanyenel) [@eyalmazuz](https://github.com/eyalmazuz) |\n|           [Matrix](#matrix)           |                           [@jcklie](https://github.com/jcklie)                            |\n|     [Amazon Chime](#amazon-chime)     |                     [@prabhakar267](https://github.com/prabhakar267)                      |\n|         [DingTalk](#dingtalk)         |                         [@wuutiing](https://github.com/wuutiing)                          |\n|       [RocketChat](#rocketchat)       |                            [@radao](https://github.com/radao)                             |\n|      [WeChat Work](#wechat-work)      |                             [@jcyk](https://github.com/jcyk)                              |\n\n\n### Email\n\nThe service relies on [Yagmail](https://github.com/kootenpv/yagmail) a GMAIL/SMTP client. You'll need a gmail email address to use it (you can setup one [here](https://accounts.google.com), it's free). I recommend creating a new one (rather than your usual one) since you'll have to modify the account's security settings to allow the Python library to access it by [Turning on less secure apps](https://devanswers.co/allow-less-secure-apps-access-gmail-account/).\n\n#### Python\n\n```python\nfrom knockknock import email_sender\n\n@email_sender(recipient_emails=[\"<your_email@address.com>\", \"<your_second_email@address.com>\"], sender_email=\"<grandma's_email@gmail.com>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock email \\\n    --recipient-emails <your_email@address.com>,<your_second_email@address.com> \\\n    --sender-email <grandma's_email@gmail.com> \\\n    sleep 10\n```\n\nIf `sender_email` is not specified, then the first email in `recipient_emails` will be used as the sender's email.\n\nNote that launching this will asks you for the sender's email password. It will be safely stored in the system keyring service through the [`keyring` Python library](https://pypi.org/project/keyring/).\n\n\n### Slack\n\nSimilarly, you can also use Slack to get notifications. You'll have to get your Slack room [webhook URL](https://api.slack.com/incoming-webhooks#create_a_webhook) and optionally your [user id](https://api.slack.com/methods/users.identity) (if you want to tag yourself or someone else).\n\n#### Python\n\n```python\nfrom knockknock import slack_sender\n\nwebhook_url = \"<webhook_url_to_your_slack_room>\"\n@slack_sender(webhook_url=webhook_url, channel=\"<your_favorite_slack_channel>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\nYou can also specify an optional argument to tag specific people: `user_mentions=[<your_slack_id>, <grandma's_slack_id>]`.\n\n#### Command-line\n\n```bash\nknockknock slack \\\n    --webhook-url <webhook_url_to_your_slack_room> \\\n    --channel <your_favorite_slack_channel> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `--user-mentions <your_slack_id>,<grandma's_slack_id>`.\n\n\n### Telegram\n\nYou can also use Telegram Messenger to get notifications. You'll first have to create your own notification bot by following the three steps provided by Telegram [here](https://core.telegram.org/bots#6-botfather) and save your API access `TOKEN`.\n\nTelegram bots are shy and can't send the first message so you'll have to do the first step. By sending the first message, you'll be able to get the `chat_id` required (identification of your messaging room) by visiting `https://api.telegram.org/bot<YourBOTToken>/getUpdates` and get the `int` under the key `message['chat']['id']`.\n\n#### Python\n\n```python\nfrom knockknock import telegram_sender\n\nCHAT_ID: int = <your_messaging_room_id>\n@telegram_sender(token=\"<your_api_token>\", chat_id=CHAT_ID)\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock telegram \\\n    --token <your_api_token> \\\n    --chat-id <your_messaging_room_id> \\\n    sleep 10\n```\n\n\n### Microsoft Teams\n\nThanks to [@noklam](https://github.com/noklam), you can also use Microsoft Teams to get notifications. You'll have to get your Team Channel [webhook URL](https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using).\n\n#### Python\n\n```python\nfrom knockknock import teams_sender\n\n@teams_sender(token=\"<webhook_url_to_your_teams_channel>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock teams \\\n    --webhook-url <webhook_url_to_your_teams_channel> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `user_mentions=[<your_teams_id>, <grandma's_teams_id>]`.\n\n\n### Text Message (SMS)\n\nThanks to [@abhishekkrthakur](https://github.com/abhishekkrthakur), you can use Twilio to send text message notifications. You'll have to setup a [Twilio](www.twilio.com) account [here](https://www.twilio.com/try-twilio), which is paid service with competitive prices: for instance in the US, getting a new number and sending one text message through this service respectively cost $1.00 and $0.0075. You'll need to get (a) a phone number, (b) your [account SID](https://www.twilio.com/docs/glossary/what-is-a-sid) and (c) your [authentification token](https://www.twilio.com/docs/iam/access-tokens). Some detail [here](https://www.twilio.com/docs/iam/api/account).\n\n#### Python\n\n```python\nfrom knockknock import sms_sender\n\nACCOUNT_SID: str = \"<your_account_sid>\"\nAUTH_TOKEN: str = \"<your_auth_token>\"\n@sms_sender(account_sid=ACCOUNT_SID, auth_token=AUTH_TOKEN, recipient_number=\"<recipient's_number>\", sender_number=\"<sender's_number>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock sms \\\n    --account-sid <your_account_sid> \\\n    --auth-token <your_account_auth_token> \\\n    --recipient-number <recipient_number> \\\n    --sender-number <sender_number>\n    sleep 10\n```\n\n\n### Discord\n\nThanks to [@watkinsm](https://github.com/watkinsm), you can also use Discord to get notifications. You'll just have to get your Discord channel's [webhook URL](https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks).\n\n#### Python\n\n```python\nfrom knockknock import discord_sender\n\nwebhook_url = \"<webhook_url_to_your_discord_channel>\"\n@discord_sender(webhook_url=webhook_url)\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock discord \\\n    --webhook-url <webhook_url_to_your_discord_channel> \\\n    sleep 10\n```\n\n\n### Desktop Notification\n\nYou can also get notified from a desktop notification. It is currently only available for MacOS and Linux and Windows 10.\nFor Linux it uses the nofity-send command which uses libnotify, In order to use libnotify, you have to install a notification server. Cinnamon, Deepin, Enlightenment, GNOME, GNOME Flashback and KDE Plasma use their own implementations to display notifications. In other desktop environments, the notification server needs to be launched using your WM's/DE's \"autostart\" option.\n\n#### Python\n\n```python\nfrom knockknock import desktop_sender\n\n@desktop_sender(title=\"Knockknock Desktop Notifier\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {\"loss\": 0.9}\n```\n\n#### Command Line\n\n```bash\nknockknock desktop \\\n    --title 'Knockknock Desktop Notifier' \\\n    sleep 2\n```\n\n### Matrix\n\nThanks to [@jcklie](https://github.com/jcklie), you can send notifications via [Matrix](https://matrix.org/). The homeserver is the\nserver on which your user that will send messages is registered. Do not forget the schema for the URL (`http` or `https`).\nYou'll have to get the access token for a bot or your own user. The easiest way to obtain it is to look into Riot looking\nin the riot settings, `Help & About`, down the bottom is: `Access Token:<click to reveal>`. You also need to specify a\nroom alias to which messages are sent. To obtain the alias in Riot, create a room you want to use, then open the room\nsettings under `Room Addresses` and add an alias.\n\n#### Python\n\n```python\nfrom knockknock import matrix_sender\n\nHOMESERVER = \"<url_to_your_home_server>\" # e.g. https://matrix.org\nTOKEN = \"<your_auth_token>\"              # e.g. WiTyGizlr8ntvBXdFfZLctyY\nROOM = \"<room_alias\"                     # e.g. #knockknock:matrix.org\n\n@matrix_sender(homeserver=HOMESERVER, token=TOKEN, room=ROOM)\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock matrix \\\n    --homeserver <homeserver> \\\n    --token <token> \\\n    --room <room> \\\n    sleep 10\n```\n\n\n### Amazon Chime\n\nThanks to [@prabhakar267](https://github.com/prabhakar267), you can also use Amazon Chime to get notifications. You'll have to get your Chime room [webhook URL](https://docs.aws.amazon.com/chime/latest/dg/webhooks.html).\n\n#### Python\n\n```python\nfrom knockknock import chime_sender\n\n@chime_sender(webhook_url=\"<webhook_url_to_your_chime_room>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock chime \\\n    --webhook-url <webhook_url_to_your_chime_room> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `user_mentions=[<your_alias>, <grandma's_alias>]`.\n\n\n### DingTalk\n\nDingTalk is now supported thanks to [@wuutiing](https://github.com/wuutiing). Given DingTalk chatroom robot's webhook url and secret/keywords(at least one of them are set when creating a chatroom robot), your notifications will be sent to reach any one in that chatroom.\n\n#### Python\n\n```python\nfrom knockknock import dingtalk_sender\n\nwebhook_url = \"<webhook_url_to_your_dingtalk_chatroom_robot>\"\n@dingtalk_sender(webhook_url=webhook_url, secret=\"<your_robot_secret_if_set>\", keywords=[\"<list_of_keywords_if_set>\"])\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock dingtalk \\\n    --webhook-url <webhook_url_to_your_dingtalk_chatroom_robot> \\\n    --secret <your_robot_secret_if_set> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to at specific people: `user_mentions=[\"<list_of_phonenumbers_who_you_want_to_tag>\"]`.\n\n\n### RocketChat\n\nYou can use [RocketChat](https://rocket.chat/) to get notifications. You'll need the following before you can post notifications:\n\n- a RocketChat server e.g. rocketchat.yourcompany.com\n- a RocketChat user id (you'll be able to view your user id when you create a personal access token in the next step)\n- a RocketChat personal access token ([create one as per this guide](https://rocket.chat/docs/developer-guides/rest-api/personal-access-tokens/))\n- a RocketChat channel\n\n#### Python\n\n```python\nfrom knockknock import rocketchat_sender\n\n@rocketchat_sender(\n    rocketchat_server_url=\"<url_to_your_rocketchat_server>\",\n    rocketchat_user_id=\"<your_rocketchat_user_id>\",\n    rocketchat_auth_token=\"<your_rocketchat_auth_token>\",\n    channel=\"<channel_name>\")\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\nYou can also specify two optional arguments:\n\n- to tag specific users: `user_mentions=[<your_user_name>, <grandma's_user_name>]`\n- to use an alias for the notification: `alias=\"My Alias\"`\n\n#### Command-line\n\n```bash\nknockknock rocketchat \\\n    --rocketchat-server-url <url_to_your_rocketchat_server> \\\n    --rocketchat-user-id <your_rocketchat_user_id> \\\n    --rocketchat-auth-token <your_rocketchat_auth_token> \\\n    --channel <channel_name> \\\n    sleep 10\n```\n\n\n### WeChat Work\n\nWeChat Work is now supported thanks to [@jcyk](https://github.com/jcyk). Given WeChat Work chatroom robot's webhook url, your notifications will be sent to reach anyone in that chatroom.\n\n#### Python\n\n```python\nfrom knockknock import wechat_sender\n\nwebhook_url = \"<webhook_url_to_your_wechat_work_chatroom_robot>\"\n@wechat_sender(webhook_url=webhook_url)\ndef train_your_nicest_model(your_nicest_parameters):\n    import time\n    time.sleep(10000)\n    return {'loss': 0.9} # Optional return value\n```\n\n#### Command-line\n\n```bash\nknockknock wechat \\\n    --webhook-url <webhook_url_to_your_wechat_work_chatroom_robot> \\\n    sleep 10\n```\n\nYou can also specify an optional argument to tag specific people: `user-mentions=[\"<list_of_userids_you_want_to_tag>\"]` and/or `user-mentions-mobile=[\"<list_of_phonenumbers_you_want_to_tag>\"]`.\n\n\n## Note on distributed training\n\nWhen using distributed training, a GPU is bound to its process using the local rank variable. Since knockknock works at the process level, if you are using 8 GPUs, you would get 8 notifications at the beginning and 8 notifications at the end... To circumvent that, except for errors, only the master process is allowed to send notifications so that you receive only one notification at the beginning and one notification at the end.\n\n**Note:** _In PyTorch, the launch of `torch.distributed.launch` sets up a RANK environment variable for each process (see [here](https://github.com/pytorch/pytorch/blob/master/torch/distributed/launch.py#L211)). This is used to detect the master process, and for now, the only simple way I came up with. Unfortunately, this is not intended to be general for all platforms but I would happily discuss smarter/better ways to handle distributed training in an issue/PR._\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/huggingface/knockknock", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "knockknock", "package_url": "https://pypi.org/project/knockknock/", "platform": "", "project_url": "https://pypi.org/project/knockknock/", "project_urls": {"Homepage": "http://github.com/huggingface/knockknock"}, "release_url": "https://pypi.org/project/knockknock/0.1.8.1/", "requires_dist": ["yagmail (>=0.11.214)", "keyring", "matrix-client", "python-telegram-bot", "requests", "twilio"], "requires_python": ">=3.6", "summary": "Be notified when your training is complete with only two additional lines of code", "version": "0.1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Knock Knock</h1>\n<p><a href=\"#python\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/923e2f0fb8eabb2031eb4b8bec6c938a01fa28dd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d7265642e737667\"></a> <a href=\"https://pepy.tech/project/knockknock\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d58139aebb821d93bfb701073f87a2fb7b7fee8e/68747470733a2f2f706570792e746563682f62616467652f6b6e6f636b6b6e6f636b\"></a> <a href=\"https://pepy.tech/project/knockknock/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dec281cae1ceb00bb642100a97495d6846f6601a/68747470733a2f2f706570792e746563682f62616467652f6b6e6f636b6b6e6f636b2f6d6f6e7468\"></a> <a href=\"https://github.com/huggingface/knockknock/stargazers/\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cb6988c4065578ab4c5251f3fbb87eca6816d84/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f68756767696e67666163652f6b6e6f636b6b6e6f636b2e7376673f7374796c653d736f6369616c266c6162656c3d53746172266d61784167653d31303030\"></a></p>\n<p>A small library to get a notification when your training is complete or when it crashes during the process with two additional lines of code.</p>\n<p>When training deep learning models, it is common to use early stopping. Apart from a rough estimate, it is difficult to predict when the training will finish. Thus, it can be interesting to set up automatic notifications for your training. It is also interesting to be notified when your training crashes in the middle of the process for unexpected reasons.</p>\n<h2>Installation</h2>\n<p>Install with <code>pip</code> or equivalent.</p>\n<pre>pip install knockknock\n</pre>\n<p>This code has only been tested with Python &gt;= 3.6.</p>\n<h2>Usage</h2>\n<p>The library is designed to be used in a seamless way, with minimal code modification: you only need to add a decorator on top your main function call. The return value (if there is one) is also reported in the notification.</p>\n<p>There are currently <em>twelve</em> ways to setup notifications:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Platform</th>\n<th align=\"center\">External Contributors</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><a href=\"#email\" rel=\"nofollow\">email</a></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#slack\" rel=\"nofollow\">Slack</a></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#telegram\" rel=\"nofollow\">Telegram</a></td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#microsoft-teams\" rel=\"nofollow\">Microsoft Teams</a></td>\n<td align=\"center\"><a href=\"https://github.com/noklam\" rel=\"nofollow\">@noklam</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#text-message-(sms)\" rel=\"nofollow\">Text Message</a></td>\n<td align=\"center\"><a href=\"https://github.com/abhishekkrthakur\" rel=\"nofollow\">@abhishekkrthakur</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#discord\" rel=\"nofollow\">Discord</a></td>\n<td align=\"center\"><a href=\"https://github.com/watkinsm\" rel=\"nofollow\">@watkinsm</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#desktop-notification\" rel=\"nofollow\">Desktop</a></td>\n<td align=\"center\"><a href=\"https://github.com/atakanyenel\" rel=\"nofollow\">@atakanyenel</a> <a href=\"https://github.com/eyalmazuz\" rel=\"nofollow\">@eyalmazuz</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#matrix\" rel=\"nofollow\">Matrix</a></td>\n<td align=\"center\"><a href=\"https://github.com/jcklie\" rel=\"nofollow\">@jcklie</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#amazon-chime\" rel=\"nofollow\">Amazon Chime</a></td>\n<td align=\"center\"><a href=\"https://github.com/prabhakar267\" rel=\"nofollow\">@prabhakar267</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#dingtalk\" rel=\"nofollow\">DingTalk</a></td>\n<td align=\"center\"><a href=\"https://github.com/wuutiing\" rel=\"nofollow\">@wuutiing</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#rocketchat\" rel=\"nofollow\">RocketChat</a></td>\n<td align=\"center\"><a href=\"https://github.com/radao\" rel=\"nofollow\">@radao</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"#wechat-work\" rel=\"nofollow\">WeChat Work</a></td>\n<td align=\"center\"><a href=\"https://github.com/jcyk\" rel=\"nofollow\">@jcyk</a></td>\n</tr></tbody></table>\n<h3>Email</h3>\n<p>The service relies on <a href=\"https://github.com/kootenpv/yagmail\" rel=\"nofollow\">Yagmail</a> a GMAIL/SMTP client. You'll need a gmail email address to use it (you can setup one <a href=\"https://accounts.google.com\" rel=\"nofollow\">here</a>, it's free). I recommend creating a new one (rather than your usual one) since you'll have to modify the account's security settings to allow the Python library to access it by <a href=\"https://devanswers.co/allow-less-secure-apps-access-gmail-account/\" rel=\"nofollow\">Turning on less secure apps</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">email_sender</span>\n\n<span class=\"nd\">@email_sender</span><span class=\"p\">(</span><span class=\"n\">recipient_emails</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"&lt;your_email@address.com&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;your_second_email@address.com&gt;\"</span><span class=\"p\">],</span> <span class=\"n\">sender_email</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;grandma's_email@gmail.com&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock email <span class=\"se\">\\</span>\n    --recipient-emails &lt;your_email@address.com&gt;,&lt;your_second_email@address.com&gt; <span class=\"se\">\\</span>\n    --sender-email &lt;grandma<span class=\"err\">'</span>s_email@gmail.com&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>If <code>sender_email</code> is not specified, then the first email in <code>recipient_emails</code> will be used as the sender's email.</p>\n<p>Note that launching this will asks you for the sender's email password. It will be safely stored in the system keyring service through the <a href=\"https://pypi.org/project/keyring/\" rel=\"nofollow\"><code>keyring</code> Python library</a>.</p>\n<h3>Slack</h3>\n<p>Similarly, you can also use Slack to get notifications. You'll have to get your Slack room <a href=\"https://api.slack.com/incoming-webhooks#create_a_webhook\" rel=\"nofollow\">webhook URL</a> and optionally your <a href=\"https://api.slack.com/methods/users.identity\" rel=\"nofollow\">user id</a> (if you want to tag yourself or someone else).</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">slack_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_slack_room&gt;\"</span>\n<span class=\"nd\">@slack_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_favorite_slack_channel&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user_mentions=[&lt;your_slack_id&gt;, &lt;grandma's_slack_id&gt;]</code>.</p>\n<h4>Command-line</h4>\n<pre>knockknock slack <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_slack_room&gt; <span class=\"se\">\\</span>\n    --channel &lt;your_favorite_slack_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>--user-mentions &lt;your_slack_id&gt;,&lt;grandma's_slack_id&gt;</code>.</p>\n<h3>Telegram</h3>\n<p>You can also use Telegram Messenger to get notifications. You'll first have to create your own notification bot by following the three steps provided by Telegram <a href=\"https://core.telegram.org/bots#6-botfather\" rel=\"nofollow\">here</a> and save your API access <code>TOKEN</code>.</p>\n<p>Telegram bots are shy and can't send the first message so you'll have to do the first step. By sending the first message, you'll be able to get the <code>chat_id</code> required (identification of your messaging room) by visiting <code>https://api.telegram.org/bot&lt;YourBOTToken&gt;/getUpdates</code> and get the <code>int</code> under the key <code>message['chat']['id']</code>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">telegram_sender</span>\n\n<span class=\"n\">CHAT_ID</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">your_messaging_room_id</span><span class=\"o\">&gt;</span>\n<span class=\"nd\">@telegram_sender</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_api_token&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">CHAT_ID</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock telegram <span class=\"se\">\\</span>\n    --token &lt;your_api_token&gt; <span class=\"se\">\\</span>\n    --chat-id &lt;your_messaging_room_id&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Microsoft Teams</h3>\n<p>Thanks to <a href=\"https://github.com/noklam\" rel=\"nofollow\">@noklam</a>, you can also use Microsoft Teams to get notifications. You'll have to get your Team Channel <a href=\"https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using\" rel=\"nofollow\">webhook URL</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">teams_sender</span>\n\n<span class=\"nd\">@teams_sender</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;webhook_url_to_your_teams_channel&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock teams <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_teams_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user_mentions=[&lt;your_teams_id&gt;, &lt;grandma's_teams_id&gt;]</code>.</p>\n<h3>Text Message (SMS)</h3>\n<p>Thanks to <a href=\"https://github.com/abhishekkrthakur\" rel=\"nofollow\">@abhishekkrthakur</a>, you can use Twilio to send text message notifications. You'll have to setup a <a href=\"www.twilio.com\" rel=\"nofollow\">Twilio</a> account <a href=\"https://www.twilio.com/try-twilio\" rel=\"nofollow\">here</a>, which is paid service with competitive prices: for instance in the US, getting a new number and sending one text message through this service respectively cost $1.00 and $0.0075. You'll need to get (a) a phone number, (b) your <a href=\"https://www.twilio.com/docs/glossary/what-is-a-sid\" rel=\"nofollow\">account SID</a> and (c) your <a href=\"https://www.twilio.com/docs/iam/access-tokens\" rel=\"nofollow\">authentification token</a>. Some detail <a href=\"https://www.twilio.com/docs/iam/api/account\" rel=\"nofollow\">here</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">sms_sender</span>\n\n<span class=\"n\">ACCOUNT_SID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_account_sid&gt;\"</span>\n<span class=\"n\">AUTH_TOKEN</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_auth_token&gt;\"</span>\n<span class=\"nd\">@sms_sender</span><span class=\"p\">(</span><span class=\"n\">account_sid</span><span class=\"o\">=</span><span class=\"n\">ACCOUNT_SID</span><span class=\"p\">,</span> <span class=\"n\">auth_token</span><span class=\"o\">=</span><span class=\"n\">AUTH_TOKEN</span><span class=\"p\">,</span> <span class=\"n\">recipient_number</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;recipient's_number&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">sender_number</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;sender's_number&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock sms <span class=\"se\">\\</span>\n    --account-sid &lt;your_account_sid&gt; <span class=\"se\">\\</span>\n    --auth-token &lt;your_account_auth_token&gt; <span class=\"se\">\\</span>\n    --recipient-number &lt;recipient_number&gt; <span class=\"se\">\\</span>\n    --sender-number &lt;sender_number&gt;\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Discord</h3>\n<p>Thanks to <a href=\"https://github.com/watkinsm\" rel=\"nofollow\">@watkinsm</a>, you can also use Discord to get notifications. You'll just have to get your Discord channel's <a href=\"https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks\" rel=\"nofollow\">webhook URL</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">discord_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_discord_channel&gt;\"</span>\n<span class=\"nd\">@discord_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock discord <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_discord_channel&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Desktop Notification</h3>\n<p>You can also get notified from a desktop notification. It is currently only available for MacOS and Linux and Windows 10.\nFor Linux it uses the nofity-send command which uses libnotify, In order to use libnotify, you have to install a notification server. Cinnamon, Deepin, Enlightenment, GNOME, GNOME Flashback and KDE Plasma use their own implementations to display notifications. In other desktop environments, the notification server needs to be launched using your WM's/DE's \"autostart\" option.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">desktop_sender</span>\n\n<span class=\"nd\">@desktop_sender</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Knockknock Desktop Notifier\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"loss\"</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span>\n</pre>\n<h4>Command Line</h4>\n<pre>knockknock desktop <span class=\"se\">\\</span>\n    --title <span class=\"s1\">'Knockknock Desktop Notifier'</span> <span class=\"se\">\\</span>\n    sleep <span class=\"m\">2</span>\n</pre>\n<h3>Matrix</h3>\n<p>Thanks to <a href=\"https://github.com/jcklie\" rel=\"nofollow\">@jcklie</a>, you can send notifications via <a href=\"https://matrix.org/\" rel=\"nofollow\">Matrix</a>. The homeserver is the\nserver on which your user that will send messages is registered. Do not forget the schema for the URL (<code>http</code> or <code>https</code>).\nYou'll have to get the access token for a bot or your own user. The easiest way to obtain it is to look into Riot looking\nin the riot settings, <code>Help &amp; About</code>, down the bottom is: <code>Access Token:&lt;click to reveal&gt;</code>. You also need to specify a\nroom alias to which messages are sent. To obtain the alias in Riot, create a room you want to use, then open the room\nsettings under <code>Room Addresses</code> and add an alias.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">matrix_sender</span>\n\n<span class=\"n\">HOMESERVER</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;url_to_your_home_server&gt;\"</span> <span class=\"c1\"># e.g. https://matrix.org</span>\n<span class=\"n\">TOKEN</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;your_auth_token&gt;\"</span>              <span class=\"c1\"># e.g. WiTyGizlr8ntvBXdFfZLctyY</span>\n<span class=\"n\">ROOM</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;room_alias\"</span>                     <span class=\"c1\"># e.g. #knockknock:matrix.org</span>\n\n<span class=\"nd\">@matrix_sender</span><span class=\"p\">(</span><span class=\"n\">homeserver</span><span class=\"o\">=</span><span class=\"n\">HOMESERVER</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">TOKEN</span><span class=\"p\">,</span> <span class=\"n\">room</span><span class=\"o\">=</span><span class=\"n\">ROOM</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock matrix <span class=\"se\">\\</span>\n    --homeserver &lt;homeserver&gt; <span class=\"se\">\\</span>\n    --token &lt;token&gt; <span class=\"se\">\\</span>\n    --room &lt;room&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>Amazon Chime</h3>\n<p>Thanks to <a href=\"https://github.com/prabhakar267\" rel=\"nofollow\">@prabhakar267</a>, you can also use Amazon Chime to get notifications. You'll have to get your Chime room <a href=\"https://docs.aws.amazon.com/chime/latest/dg/webhooks.html\" rel=\"nofollow\">webhook URL</a>.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">chime_sender</span>\n\n<span class=\"nd\">@chime_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;webhook_url_to_your_chime_room&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock chime <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_chime_room&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user_mentions=[&lt;your_alias&gt;, &lt;grandma's_alias&gt;]</code>.</p>\n<h3>DingTalk</h3>\n<p>DingTalk is now supported thanks to <a href=\"https://github.com/wuutiing\" rel=\"nofollow\">@wuutiing</a>. Given DingTalk chatroom robot's webhook url and secret/keywords(at least one of them are set when creating a chatroom robot), your notifications will be sent to reach any one in that chatroom.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">dingtalk_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_dingtalk_chatroom_robot&gt;\"</span>\n<span class=\"nd\">@dingtalk_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_robot_secret_if_set&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"&lt;list_of_keywords_if_set&gt;\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock dingtalk <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_dingtalk_chatroom_robot&gt; <span class=\"se\">\\</span>\n    --secret &lt;your_robot_secret_if_set&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to at specific people: <code>user_mentions=[\"&lt;list_of_phonenumbers_who_you_want_to_tag&gt;\"]</code>.</p>\n<h3>RocketChat</h3>\n<p>You can use <a href=\"https://rocket.chat/\" rel=\"nofollow\">RocketChat</a> to get notifications. You'll need the following before you can post notifications:</p>\n<ul>\n<li>a RocketChat server e.g. rocketchat.yourcompany.com</li>\n<li>a RocketChat user id (you'll be able to view your user id when you create a personal access token in the next step)</li>\n<li>a RocketChat personal access token (<a href=\"https://rocket.chat/docs/developer-guides/rest-api/personal-access-tokens/\" rel=\"nofollow\">create one as per this guide</a>)</li>\n<li>a RocketChat channel</li>\n</ul>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">rocketchat_sender</span>\n\n<span class=\"nd\">@rocketchat_sender</span><span class=\"p\">(</span>\n    <span class=\"n\">rocketchat_server_url</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;url_to_your_rocketchat_server&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"n\">rocketchat_user_id</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_rocketchat_user_id&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"n\">rocketchat_auth_token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your_rocketchat_auth_token&gt;\"</span><span class=\"p\">,</span>\n    <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;channel_name&gt;\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<p>You can also specify two optional arguments:</p>\n<ul>\n<li>to tag specific users: <code>user_mentions=[&lt;your_user_name&gt;, &lt;grandma's_user_name&gt;]</code></li>\n<li>to use an alias for the notification: <code>alias=\"My Alias\"</code></li>\n</ul>\n<h4>Command-line</h4>\n<pre>knockknock rocketchat <span class=\"se\">\\</span>\n    --rocketchat-server-url &lt;url_to_your_rocketchat_server&gt; <span class=\"se\">\\</span>\n    --rocketchat-user-id &lt;your_rocketchat_user_id&gt; <span class=\"se\">\\</span>\n    --rocketchat-auth-token &lt;your_rocketchat_auth_token&gt; <span class=\"se\">\\</span>\n    --channel &lt;channel_name&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<h3>WeChat Work</h3>\n<p>WeChat Work is now supported thanks to <a href=\"https://github.com/jcyk\" rel=\"nofollow\">@jcyk</a>. Given WeChat Work chatroom robot's webhook url, your notifications will be sent to reach anyone in that chatroom.</p>\n<h4>Python</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knockknock</span> <span class=\"kn\">import</span> <span class=\"n\">wechat_sender</span>\n\n<span class=\"n\">webhook_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;webhook_url_to_your_wechat_work_chatroom_robot&gt;\"</span>\n<span class=\"nd\">@wechat_sender</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">webhook_url</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">train_your_nicest_model</span><span class=\"p\">(</span><span class=\"n\">your_nicest_parameters</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'loss'</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">}</span> <span class=\"c1\"># Optional return value</span>\n</pre>\n<h4>Command-line</h4>\n<pre>knockknock wechat <span class=\"se\">\\</span>\n    --webhook-url &lt;webhook_url_to_your_wechat_work_chatroom_robot&gt; <span class=\"se\">\\</span>\n    sleep <span class=\"m\">10</span>\n</pre>\n<p>You can also specify an optional argument to tag specific people: <code>user-mentions=[\"&lt;list_of_userids_you_want_to_tag&gt;\"]</code> and/or <code>user-mentions-mobile=[\"&lt;list_of_phonenumbers_you_want_to_tag&gt;\"]</code>.</p>\n<h2>Note on distributed training</h2>\n<p>When using distributed training, a GPU is bound to its process using the local rank variable. Since knockknock works at the process level, if you are using 8 GPUs, you would get 8 notifications at the beginning and 8 notifications at the end... To circumvent that, except for errors, only the master process is allowed to send notifications so that you receive only one notification at the beginning and one notification at the end.</p>\n<p><strong>Note:</strong> <em>In PyTorch, the launch of <code>torch.distributed.launch</code> sets up a RANK environment variable for each process (see <a href=\"https://github.com/pytorch/pytorch/blob/master/torch/distributed/launch.py#L211\" rel=\"nofollow\">here</a>). This is used to detect the master process, and for now, the only simple way I came up with. Unfortunately, this is not intended to be general for all platforms but I would happily discuss smarter/better ways to handle distributed training in an issue/PR.</em></p>\n\n          </div>"}, "last_serial": 6821627, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b82da8cf0398acc2fccbf3f46dacc399", "sha256": "36118834f8fc34af6da5a0e20a3e8a14a1bd7411731dc4cf2b9dd4013eed8356"}, "downloads": -1, "filename": "knockknock-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b82da8cf0398acc2fccbf3f46dacc399", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7104, "upload_time": "2019-03-31T21:50:32", "upload_time_iso_8601": "2019-03-31T21:50:32.391960Z", "url": "https://files.pythonhosted.org/packages/d5/f3/c0bf4b9f26e6357d6115438a089d46a63069b05b19f5bd415ab52df8dc39/knockknock-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bf90e44f1c89937a624d875c5ba4964", "sha256": "bd685c4c212b82824fd9ec602e7b83e75d02aeeb89d45198ec4fe02d1000a6ef"}, "downloads": -1, "filename": "knockknock-0.1.tar.gz", "has_sig": false, "md5_digest": "8bf90e44f1c89937a624d875c5ba4964", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4424, "upload_time": "2019-03-31T21:50:34", "upload_time_iso_8601": "2019-03-31T21:50:34.283185Z", "url": "https://files.pythonhosted.org/packages/7a/9a/b4339b0cb0ac3643b5b30f5f84dbc92ce8cb179f5dfe5c62513f3e887129/knockknock-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ac3b8202a95fbc477bdd87b0ca71ab2a", "sha256": "109fcfaebf45301b5603b18b73debc337e149f3788d60b160b1e6ad98e8092dd"}, "downloads": -1, "filename": "knockknock-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac3b8202a95fbc477bdd87b0ca71ab2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7156, "upload_time": "2019-04-08T14:46:47", "upload_time_iso_8601": "2019-04-08T14:46:47.278980Z", "url": "https://files.pythonhosted.org/packages/f7/eb/180285fdc3c60545088ffc00eb0cb06c1dfcdb0b16f02ca3e6f1728c91e4/knockknock-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "126395a03fd6a0d5533e4192ace93f2d", "sha256": "2bd54bf5503f4085de8175f65ce30a3ad4ee8b3eec355a93869bef27658d3bd5"}, "downloads": -1, "filename": "knockknock-0.1.1.tar.gz", "has_sig": false, "md5_digest": "126395a03fd6a0d5533e4192ace93f2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4488, "upload_time": "2019-04-08T14:47:43", "upload_time_iso_8601": "2019-04-08T14:47:43.062529Z", "url": "https://files.pythonhosted.org/packages/d0/3c/fa05452891b1b2d9dce9a8c077b21493d3fb14d124224fcf2c8e7831e1d6/knockknock-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ec832772fb11fcad622bbae5ae2881fd", "sha256": "4fa7b25731e55eab684f337a0bf8285b1f90df9f4fbe8a5632f0f3f8a32c9418"}, "downloads": -1, "filename": "knockknock-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ec832772fb11fcad622bbae5ae2881fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8792, "upload_time": "2019-04-17T18:29:36", "upload_time_iso_8601": "2019-04-17T18:29:36.627063Z", "url": "https://files.pythonhosted.org/packages/7c/93/975e049a6d29ce8a697bd2a3055f80e79948cd61b21768cd273e72583be2/knockknock-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9389e36b8b92cb4544d0c1d771ab859", "sha256": "29b03dd0068cfcb8b7d0984df35c913fc123cf6c42ffaafc2e2eba2a38b04af8"}, "downloads": -1, "filename": "knockknock-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a9389e36b8b92cb4544d0c1d771ab859", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5532, "upload_time": "2019-04-17T18:29:38", "upload_time_iso_8601": "2019-04-17T18:29:38.208763Z", "url": "https://files.pythonhosted.org/packages/56/d5/f2bdad3f041236da61b45ff67592371784a839213b6391f0ad75e0bd967f/knockknock-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e17291916e1fa718dc8205f11f163099", "sha256": "84db1e7099520df36407064bc1a9a32beaf601adde74c0d7e6ad1bc289e862e9"}, "downloads": -1, "filename": "knockknock-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e17291916e1fa718dc8205f11f163099", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10323, "upload_time": "2019-05-13T19:14:30", "upload_time_iso_8601": "2019-05-13T19:14:30.827284Z", "url": "https://files.pythonhosted.org/packages/82/4c/36f457232b812e0ee1d2f09daa35b538c20fec69a080c10bbaab156e0a8b/knockknock-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ce54140db11a6cb302115d19de25acf", "sha256": "f6f87013c39982bf31d8177e879d6adf92c989cab578ce5a73dd138d1919f72e"}, "downloads": -1, "filename": "knockknock-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6ce54140db11a6cb302115d19de25acf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6697, "upload_time": "2019-05-13T19:14:31", "upload_time_iso_8601": "2019-05-13T19:14:31.965577Z", "url": "https://files.pythonhosted.org/packages/29/37/d3d3abb10f3a87cbd84bcc191dd6b5c391b476acb529b25b1106e9f7bc12/knockknock-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "73668cac6f43fe9d2ce73665dae313b5", "sha256": "3b1e3be1e886e3e72c9cfe375104daa4239a0909f368315e39c39e4f83d7decf"}, "downloads": -1, "filename": "knockknock-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "73668cac6f43fe9d2ce73665dae313b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13704, "upload_time": "2019-10-15T03:03:44", "upload_time_iso_8601": "2019-10-15T03:03:44.545504Z", "url": "https://files.pythonhosted.org/packages/0d/1a/62e66f4dc5c65b7cd5f1cda3ccdc97806364e4ec25e31d7882792282a99c/knockknock-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "360449018490db05b8380edfecc2f52e", "sha256": "6d0fa6866b3d6ab4d75811f4085db9be04d558aae7a034add2b659fde95e9308"}, "downloads": -1, "filename": "knockknock-0.1.4.tar.gz", "has_sig": false, "md5_digest": "360449018490db05b8380edfecc2f52e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7611, "upload_time": "2019-10-15T03:03:46", "upload_time_iso_8601": "2019-10-15T03:03:46.592772Z", "url": "https://files.pythonhosted.org/packages/cb/51/47bfa148dd0b72363b7fd0e6606054d468da6ad690918ce95849f1cb067b/knockknock-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "163081d73b1974f1895416294c27196c", "sha256": "89e0ac13b5719f571de1ffbb66046fa5334b8e1af41e0e8856443c3e088db330"}, "downloads": -1, "filename": "knockknock-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "163081d73b1974f1895416294c27196c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15440, "upload_time": "2019-10-31T03:23:20", "upload_time_iso_8601": "2019-10-31T03:23:20.942776Z", "url": "https://files.pythonhosted.org/packages/80/c4/26c8d98ae3bd9b321e200db3319e4333be78b18cfed8eb12e07cf90c05cb/knockknock-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b112f66807cb373cd88c85272fdd01e5", "sha256": "57c82cd3ac47f60d65d843d9e202957f8cc1de184144ff19e9bde0e12ba5a5bd"}, "downloads": -1, "filename": "knockknock-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b112f66807cb373cd88c85272fdd01e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8185, "upload_time": "2019-10-31T03:23:23", "upload_time_iso_8601": "2019-10-31T03:23:23.306189Z", "url": "https://files.pythonhosted.org/packages/a7/56/f299c37d07add9d46291ac3f86cc60c3a9bd50880e97ff014e5605bc6387/knockknock-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "69b02835401b5a8df246a4093d6e4dd0", "sha256": "e9a7114fb423eca58ddcfa5d9d0b2cda5caf2d514df6de005ace2b8f6fa88873"}, "downloads": -1, "filename": "knockknock-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "69b02835401b5a8df246a4093d6e4dd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17598, "upload_time": "2019-12-03T22:37:27", "upload_time_iso_8601": "2019-12-03T22:37:27.543812Z", "url": "https://files.pythonhosted.org/packages/8c/b4/1dca2cc1311051e2ce60360d94a744ea1de903c2c6619b757a7290fb3d66/knockknock-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82f82525c1ef613b3329d204bd7ef7fc", "sha256": "8d8ed298087a4cdbcb8bd302a81fbbb0a265d6ad3c3f19665f6033058e29db70"}, "downloads": -1, "filename": "knockknock-0.1.6.tar.gz", "has_sig": false, "md5_digest": "82f82525c1ef613b3329d204bd7ef7fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9040, "upload_time": "2019-12-03T22:37:29", "upload_time_iso_8601": "2019-12-03T22:37:29.681608Z", "url": "https://files.pythonhosted.org/packages/79/ce/bc5f34316de73f162ea1452257dff3efcae9c875373cf613a5188e2979da/knockknock-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "d941b14132b1ceefc9bbb9754cbaebd8", "sha256": "cec8289427c4d345d272243deab1324fd9324960a98468583815a3d1abedfc34"}, "downloads": -1, "filename": "knockknock-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d941b14132b1ceefc9bbb9754cbaebd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19785, "upload_time": "2020-01-08T19:25:07", "upload_time_iso_8601": "2020-01-08T19:25:07.793632Z", "url": "https://files.pythonhosted.org/packages/3b/d0/435a247d19cbce8cd88560776c45e1472b02bbf008821a8a11d5afae2ef8/knockknock-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "777ca387010aafe8016cd5c993642a9e", "sha256": "1b7274b52e58bf1b1e0a8731a1d3bc2f6af677c02ddc46048587fd9c16cd9465"}, "downloads": -1, "filename": "knockknock-0.1.7.tar.gz", "has_sig": false, "md5_digest": "777ca387010aafe8016cd5c993642a9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13748, "upload_time": "2020-01-08T19:25:09", "upload_time_iso_8601": "2020-01-08T19:25:09.637727Z", "url": "https://files.pythonhosted.org/packages/44/9e/0f4a17c5cb6d7c579c8a8bfe876962f74767e16c08bd3515a404b78a2f54/knockknock-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "cb26512b31577e53e3a126ec25788db0", "sha256": "fa7acdfd256f14f74dd03d733076fc6abcdb28f6fc6c57a7e310fe7c73dadedb"}, "downloads": -1, "filename": "knockknock-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "cb26512b31577e53e3a126ec25788db0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24184, "upload_time": "2020-03-04T04:15:47", "upload_time_iso_8601": "2020-03-04T04:15:47.093936Z", "url": "https://files.pythonhosted.org/packages/67/bb/018b372033f598a502ebfaf74bcbadcb9f685b8074c09e0db1fff2ee1dc7/knockknock-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34f2917d404ef10de313c120c0288e8c", "sha256": "85cb70c5e9c8e487979aed394c4033e6e4594d272840c62c6c0c586877575fcb"}, "downloads": -1, "filename": "knockknock-0.1.8.tar.gz", "has_sig": false, "md5_digest": "34f2917d404ef10de313c120c0288e8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12466, "upload_time": "2020-03-04T04:15:48", "upload_time_iso_8601": "2020-03-04T04:15:48.816952Z", "url": "https://files.pythonhosted.org/packages/dc/4a/982697851c70633892a4cfee72f6471b97089331b24d1aee3898dd27000e/knockknock-0.1.8.tar.gz", "yanked": false}], "0.1.8.1": [{"comment_text": "", "digests": {"md5": "4d65127adc32d125a9fa6d21d8167f88", "sha256": "9439fdbb7897ede11f68c64f32c54388745f44787c582345a540e7986772f31d"}, "downloads": -1, "filename": "knockknock-0.1.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d65127adc32d125a9fa6d21d8167f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28615, "upload_time": "2020-03-16T14:30:23", "upload_time_iso_8601": "2020-03-16T14:30:23.090952Z", "url": "https://files.pythonhosted.org/packages/c8/cf/699a7902fe63c08f09131fdf6c14ca57bdd562aec41aa0be9fb71f958f4f/knockknock-0.1.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb156d3bd0809cdc090f3dd5729ec2f", "sha256": "c7fa2038ddd5a10379b5ef11b775865298c637cbd9a6a175c2c40d8e2b8df773"}, "downloads": -1, "filename": "knockknock-0.1.8.1.tar.gz", "has_sig": false, "md5_digest": "6eb156d3bd0809cdc090f3dd5729ec2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14689, "upload_time": "2020-03-16T14:30:24", "upload_time_iso_8601": "2020-03-16T14:30:24.830107Z", "url": "https://files.pythonhosted.org/packages/62/f2/750306922c19580148ec865acec7eb0e87f9b382a19cc49ac995d0c99121/knockknock-0.1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d65127adc32d125a9fa6d21d8167f88", "sha256": "9439fdbb7897ede11f68c64f32c54388745f44787c582345a540e7986772f31d"}, "downloads": -1, "filename": "knockknock-0.1.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d65127adc32d125a9fa6d21d8167f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28615, "upload_time": "2020-03-16T14:30:23", "upload_time_iso_8601": "2020-03-16T14:30:23.090952Z", "url": "https://files.pythonhosted.org/packages/c8/cf/699a7902fe63c08f09131fdf6c14ca57bdd562aec41aa0be9fb71f958f4f/knockknock-0.1.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb156d3bd0809cdc090f3dd5729ec2f", "sha256": "c7fa2038ddd5a10379b5ef11b775865298c637cbd9a6a175c2c40d8e2b8df773"}, "downloads": -1, "filename": "knockknock-0.1.8.1.tar.gz", "has_sig": false, "md5_digest": "6eb156d3bd0809cdc090f3dd5729ec2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14689, "upload_time": "2020-03-16T14:30:24", "upload_time_iso_8601": "2020-03-16T14:30:24.830107Z", "url": "https://files.pythonhosted.org/packages/62/f2/750306922c19580148ec865acec7eb0e87f9b382a19cc49ac995d0c99121/knockknock-0.1.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:13 2020"}