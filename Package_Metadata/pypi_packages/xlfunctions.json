{"info": {"author": "Bradley van Ree", "author_email": "brads@bradbase.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# XLFunctions\n\nA collection of classes which implement functions as used in Microsoft Excel. The intent is to be a definitive library to support evaluating Excel calculations.\n\nThere are a number of solutions being developed in the Python universe which are writing their own implementations of the same functions. Often those implementations are simply wrapping pandas, numpy or scipy. Although potentially fit for purpose in those solutions, the calculated result may not necessarily agree with Excel.\n\nThere are also a handful of libraries to be found which have attempted a universal Python implementation of Excel functions however as they aren't being actively used by a library they appear to be abandoned reasonably rapidly. xlfunctions is being used by (xlcalcualtor)[https://github.com/bradbase/xlcalculator] (an attempted re-write of (Koala2)[https://github.com/vallettea/koala] and, in turn, (FlyingKoala)[https://github.com/bradbase/flyingkoala].\n\nExcel occasionally does unusual things while calculating which may not always align with what is accepted outside the realms of Excel. With this in mind it is common that numpy, scipy or pandas libraries may not calculate a result which agrees with Excel. This is especially true of Excel's date handling. This library attempts to take care to return results as close as possible to what Excel would expect. **If you want to align perfectly with Excel, please read the discussion on Excel number precision (below)**\n\n\n# Supported Functions\n  * AVERAGE\n  * CHOOSE\n  * CONCAT\n  * COUNT\n  * COUNTA\n  * DATE\n  * IRR\n  * LN\n    - Python Math.log() differs from Excel LN. Currently returning Math.log()\n  * MAX\n  * MID\n  * MIN\n  * MOD\n  * NPV\n  * PMT\n  * POWER\n  * RIGHT\n  * ROUND\n  * ROUNDDOWN\n  * ROUNDUP\n  * SLN\n  * SQRT\n  * SUM\n  * SUMPRODUCT\n  * TODAY\n  * VLOOKUP\n    - Exact match only\n  * XNPV\n  * YEARFRAC\n    - Basis 1, Actual/actual, is only within 3 decimal places\n\n\n# Run tests\nFrom the root xlfunctions directory\n```python\npython -m unittest discover -p \"*_test.py\"\n```\n\n\n# How to add Excel functions\nExcel function support can be easily added to xlfunctions.\n\nDo the git things.. (fork, clone, branch. checkout the new branch) and then;\n- Write a class for the function in xlfunctions. Use existing supported function classes as template examples.\n- Add the function name and related class to excel_lib.py SUPPORTED_FUNCTIONS dict\n- Add the class to xlfunctions\\\\\\_\\_init\\_\\_.py\n- Write a test for it in tests. Use existing tests as template examples. Often a great place for example test ideas is found on the Microsoft Office Excel help page for that function.\n- Update the README.md to state that function is supported.\n- Put your code, tests and doco forward as a pull request.\n\n\n# Excel number precision\nExcel number precision is a complex discussion.\n\nIt has been discussed in a (Wikipedia page)[https://en.wikipedia.org/wiki/Numeric_precision_in_Microsoft_Excel].\n\nThe fundamentals come down to floating point numbers and a contention between how they are represented in memory Vs how they are stored on disk Vs how they are presented on screen. A (Microsoft article)[https://www.microsoft.com/en-us/microsoft-365/blog/2008/04/10/understanding-floating-point-precision-aka-why-does-excel-give-me-seemingly-wrong-answers/] explains the contention.\n\nThis project is attempting to take care while reading numbers from the Excel file to try and remove a variety of representation errors.\n\nFurther work will be required to keep numbers in-line with Excel throughout different transformations.\n\nFrom what I can determine this requires a low-level implementation of a numeric datatype (C or C++, Cython??) to replicate its behaviour. Python built-in numeric types don't replicate appropriate behaviours.\n\n\n# TODO\n- Improve testing, broadening test cases, testing for errors\n- Support more functions\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bradbase/xlfunctions", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "xlfunctions", "package_url": "https://pypi.org/project/xlfunctions/", "platform": "", "project_url": "https://pypi.org/project/xlfunctions/", "project_urls": {"Homepage": "https://github.com/bradbase/xlfunctions"}, "release_url": "https://pypi.org/project/xlfunctions/0.0.1b0/", "requires_dist": ["numpy (>=1.18.1)", "pandas (>=1.0.1)", "numpy-financial (>=1.0.0)"], "requires_python": ">=3.7.6", "summary": "xlfunctions implements Python equivalents of MS Excel formulas.", "version": "0.0.1b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>XLFunctions</h1>\n<p>A collection of classes which implement functions as used in Microsoft Excel. The intent is to be a definitive library to support evaluating Excel calculations.</p>\n<p>There are a number of solutions being developed in the Python universe which are writing their own implementations of the same functions. Often those implementations are simply wrapping pandas, numpy or scipy. Although potentially fit for purpose in those solutions, the calculated result may not necessarily agree with Excel.</p>\n<p>There are also a handful of libraries to be found which have attempted a universal Python implementation of Excel functions however as they aren't being actively used by a library they appear to be abandoned reasonably rapidly. xlfunctions is being used by (xlcalcualtor)[https://github.com/bradbase/xlcalculator] (an attempted re-write of (Koala2)[https://github.com/vallettea/koala] and, in turn, (FlyingKoala)[https://github.com/bradbase/flyingkoala].</p>\n<p>Excel occasionally does unusual things while calculating which may not always align with what is accepted outside the realms of Excel. With this in mind it is common that numpy, scipy or pandas libraries may not calculate a result which agrees with Excel. This is especially true of Excel's date handling. This library attempts to take care to return results as close as possible to what Excel would expect. <strong>If you want to align perfectly with Excel, please read the discussion on Excel number precision (below)</strong></p>\n<h1>Supported Functions</h1>\n<ul>\n<li>AVERAGE</li>\n<li>CHOOSE</li>\n<li>CONCAT</li>\n<li>COUNT</li>\n<li>COUNTA</li>\n<li>DATE</li>\n<li>IRR</li>\n<li>LN\n<ul>\n<li>Python Math.log() differs from Excel LN. Currently returning Math.log()</li>\n</ul>\n</li>\n<li>MAX</li>\n<li>MID</li>\n<li>MIN</li>\n<li>MOD</li>\n<li>NPV</li>\n<li>PMT</li>\n<li>POWER</li>\n<li>RIGHT</li>\n<li>ROUND</li>\n<li>ROUNDDOWN</li>\n<li>ROUNDUP</li>\n<li>SLN</li>\n<li>SQRT</li>\n<li>SUM</li>\n<li>SUMPRODUCT</li>\n<li>TODAY</li>\n<li>VLOOKUP\n<ul>\n<li>Exact match only</li>\n</ul>\n</li>\n<li>XNPV</li>\n<li>YEARFRAC\n<ul>\n<li>Basis 1, Actual/actual, is only within 3 decimal places</li>\n</ul>\n</li>\n</ul>\n<h1>Run tests</h1>\n<p>From the root xlfunctions directory</p>\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">unittest</span> <span class=\"n\">discover</span> <span class=\"o\">-</span><span class=\"n\">p</span> <span class=\"s2\">\"*_test.py\"</span>\n</pre>\n<h1>How to add Excel functions</h1>\n<p>Excel function support can be easily added to xlfunctions.</p>\n<p>Do the git things.. (fork, clone, branch. checkout the new branch) and then;</p>\n<ul>\n<li>Write a class for the function in xlfunctions. Use existing supported function classes as template examples.</li>\n<li>Add the function name and related class to excel_lib.py SUPPORTED_FUNCTIONS dict</li>\n<li>Add the class to xlfunctions\\__init__.py</li>\n<li>Write a test for it in tests. Use existing tests as template examples. Often a great place for example test ideas is found on the Microsoft Office Excel help page for that function.</li>\n<li>Update the README.md to state that function is supported.</li>\n<li>Put your code, tests and doco forward as a pull request.</li>\n</ul>\n<h1>Excel number precision</h1>\n<p>Excel number precision is a complex discussion.</p>\n<p>It has been discussed in a (Wikipedia page)[https://en.wikipedia.org/wiki/Numeric_precision_in_Microsoft_Excel].</p>\n<p>The fundamentals come down to floating point numbers and a contention between how they are represented in memory Vs how they are stored on disk Vs how they are presented on screen. A (Microsoft article)[https://www.microsoft.com/en-us/microsoft-365/blog/2008/04/10/understanding-floating-point-precision-aka-why-does-excel-give-me-seemingly-wrong-answers/] explains the contention.</p>\n<p>This project is attempting to take care while reading numbers from the Excel file to try and remove a variety of representation errors.</p>\n<p>Further work will be required to keep numbers in-line with Excel throughout different transformations.</p>\n<p>From what I can determine this requires a low-level implementation of a numeric datatype (C or C++, Cython??) to replicate its behaviour. Python built-in numeric types don't replicate appropriate behaviours.</p>\n<h1>TODO</h1>\n<ul>\n<li>Improve testing, broadening test cases, testing for errors</li>\n<li>Support more functions</li>\n</ul>\n\n          </div>"}, "last_serial": 7155057, "releases": {"0.0.1b0": [{"comment_text": "", "digests": {"md5": "70c4e67a7d520e156e44aa0e55f5810f", "sha256": "431c48b257c7d2b127a47845b0bbdebcc17e3b8a9238483f9a86d6d3105d8cce"}, "downloads": -1, "filename": "xlfunctions-0.0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "70c4e67a7d520e156e44aa0e55f5810f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.6", "size": 50681, "upload_time": "2020-05-03T06:25:42", "upload_time_iso_8601": "2020-05-03T06:25:42.011392Z", "url": "https://files.pythonhosted.org/packages/6d/65/8f6b3b05384935009e5bbee8f674a4fb7fbbf45731d5dc14312eaed98fb5/xlfunctions-0.0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d104c3a60e4a832435e937ef0d8bfa9b", "sha256": "bfef99bacf19c32e532c71f56a0a247c68da9279ec4b8604a8fe42da7fddbfe5"}, "downloads": -1, "filename": "xlfunctions-0.0.1b0.tar.gz", "has_sig": false, "md5_digest": "d104c3a60e4a832435e937ef0d8bfa9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.6", "size": 21164, "upload_time": "2020-05-03T06:25:44", "upload_time_iso_8601": "2020-05-03T06:25:44.421404Z", "url": "https://files.pythonhosted.org/packages/d0/4c/559228cf40d1b646f45cbf76703dbff77d3ab820d34c907ba67658f14aaa/xlfunctions-0.0.1b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70c4e67a7d520e156e44aa0e55f5810f", "sha256": "431c48b257c7d2b127a47845b0bbdebcc17e3b8a9238483f9a86d6d3105d8cce"}, "downloads": -1, "filename": "xlfunctions-0.0.1b0-py3-none-any.whl", "has_sig": false, "md5_digest": "70c4e67a7d520e156e44aa0e55f5810f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.6", "size": 50681, "upload_time": "2020-05-03T06:25:42", "upload_time_iso_8601": "2020-05-03T06:25:42.011392Z", "url": "https://files.pythonhosted.org/packages/6d/65/8f6b3b05384935009e5bbee8f674a4fb7fbbf45731d5dc14312eaed98fb5/xlfunctions-0.0.1b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d104c3a60e4a832435e937ef0d8bfa9b", "sha256": "bfef99bacf19c32e532c71f56a0a247c68da9279ec4b8604a8fe42da7fddbfe5"}, "downloads": -1, "filename": "xlfunctions-0.0.1b0.tar.gz", "has_sig": false, "md5_digest": "d104c3a60e4a832435e937ef0d8bfa9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.6", "size": 21164, "upload_time": "2020-05-03T06:25:44", "upload_time_iso_8601": "2020-05-03T06:25:44.421404Z", "url": "https://files.pythonhosted.org/packages/d0/4c/559228cf40d1b646f45cbf76703dbff77d3ab820d34c907ba67658f14aaa/xlfunctions-0.0.1b0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:20 2020"}