{"info": {"author": "Jerry Wang", "author_email": "wangjianjun@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# python-nest\nPython library for nest style Microservices\n\n# Description\n\nThere is one nodejs framework named [nestjs](https://nestjs.com) which is perfect to develop microservices. but we wanted to\nimplement some microservices in python to work together with nestjs framework, I didn't find a solution, so I developed this \npackage to do that, for now, it only implemented the [MessagePattern](https://docs.nestjs.com/microservices/basics#request-response) \nso in nestjs, it is @MessagePattern and we can have same function in python with this lib/package.\n\n\n# How to use\n\n## Install latest version\n```python\npip install python-nestjs\n```\n## The microservices server\n\nin nestjs, you can do it with @MessagePattern, and the pattern can be string or object in nestjs, similarly\nin python the pattern can also be str or dict, you can find sample code [test_server.py](test/test_server.py)\nhere is sample code, e.g.\n\n### in your `nest_server.py`\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom nest import NestMsServer, MessagePatternBaseHandler\n\napp = NestMsServer()\n\n```\n\n### to have handler function to process the pattern, you have two options\n* have a class which extends `MessagePatternBaseHandler` \n\n1. have the class\n```python\nclass TestDictHanlder(MessagePatternBaseHandler):\n    def __init__(self):\n        pass\n\n    def get_message_pattern(self):\n        '''return the message pattern\n\n        it can be string or dict\n        e.g. 'TEST' or {'cmd': 'test'}\n        '''\n        return {'cmd': 'TEST_PATTERN' }\n\n    def handle(self, payload):\n        '''handler function to process payload\n\n        It should returns\n        err - any error or None\n        result - the processed result\n        '''\n        print(payload)\n        return None, ['this is test dict', 'another test dict result']\n```\n2. add/register the handler class\n```python\napp.add_handler(TestDictHanlder)\n```\n\n* have a function decorated with decorator `message_pattern`\n1. write a function and decorate it\n```python\n@app.message_pattern({'cmd': 'test_decorator'})\ndef test_decorator(payload):\n    '''test decorator function\n\n    the function accepts one parameter payload\n    '''\n    print(payload)\n    return None, payload\n```\n### start/run it\n```python\n    HOST ='localhost'\n    PORT = 7086\n    print(f'started to run and listed to port {PORT}')\n    app.run(HOST, PORT)\n```\n\n## The microservices client\n\nif you want to call microservices which was implemented in nestjs, it is also simple, find in [test_client.py](test/test_client.py)\nor sample code here.\n```python\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom nest import NestMsClient\n\nif __name__ == '__main__':\n    HOST ='localhost'\n    PORT = 7086\n    client = NestMsClient(HOST, PORT)\n    pattern = 'TEST_PATTERN'\n    res = client.send(pattern, None)\n    print(res)\n    pattern = { 'cmd' :'TEST_PATTERN' }\n    res = client.send(pattern, None)\n    print(res)\n    pattern = { 'cmd' :'test_decorator' }\n    res = client.send(pattern, 'this is ok')\n    print(res)\n```\n\n# Maintainers\n[@jerrywang1981](https://github.com/jerrywang1981)\n\n# Contributors\n[![](https://github.com/jerrywang1981.png?size=50)](https://github.com/jerrywang1981)\n\n# License\nMIT License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jerrywang1981/python-nest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-nestjs", "package_url": "https://pypi.org/project/python-nestjs/", "platform": "", "project_url": "https://pypi.org/project/python-nestjs/", "project_urls": {"Homepage": "https://github.com/jerrywang1981/python-nest"}, "release_url": "https://pypi.org/project/python-nestjs/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The library for nest style microservice", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-nest</h1>\n<p>Python library for nest style Microservices</p>\n<h1>Description</h1>\n<p>There is one nodejs framework named <a href=\"https://nestjs.com\" rel=\"nofollow\">nestjs</a> which is perfect to develop microservices. but we wanted to\nimplement some microservices in python to work together with nestjs framework, I didn't find a solution, so I developed this\npackage to do that, for now, it only implemented the <a href=\"https://docs.nestjs.com/microservices/basics#request-response\" rel=\"nofollow\">MessagePattern</a>\nso in nestjs, it is @MessagePattern and we can have same function in python with this lib/package.</p>\n<h1>How to use</h1>\n<h2>Install latest version</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">python</span><span class=\"o\">-</span><span class=\"n\">nestjs</span>\n</pre>\n<h2>The microservices server</h2>\n<p>in nestjs, you can do it with @MessagePattern, and the pattern can be string or object in nestjs, similarly\nin python the pattern can also be str or dict, you can find sample code <a href=\"test/test_server.py\" rel=\"nofollow\">test_server.py</a>\nhere is sample code, e.g.</p>\n<h3>in your <code>nest_server.py</code></h3>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding:utf-8 -*-</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nest</span> <span class=\"kn\">import</span> <span class=\"n\">NestMsServer</span><span class=\"p\">,</span> <span class=\"n\">MessagePatternBaseHandler</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">NestMsServer</span><span class=\"p\">()</span>\n</pre>\n<h3>to have handler function to process the pattern, you have two options</h3>\n<ul>\n<li>have a class which extends <code>MessagePatternBaseHandler</code></li>\n</ul>\n<ol>\n<li>have the class</li>\n</ol>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TestDictHanlder</span><span class=\"p\">(</span><span class=\"n\">MessagePatternBaseHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_message_pattern</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''return the message pattern</span>\n\n<span class=\"sd\">        it can be string or dict</span>\n<span class=\"sd\">        e.g. 'TEST' or {'cmd': 'test'}</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'cmd'</span><span class=\"p\">:</span> <span class=\"s1\">'TEST_PATTERN'</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''handler function to process payload</span>\n\n<span class=\"sd\">        It should returns</span>\n<span class=\"sd\">        err - any error or None</span>\n<span class=\"sd\">        result - the processed result</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'this is test dict'</span><span class=\"p\">,</span> <span class=\"s1\">'another test dict result'</span><span class=\"p\">]</span>\n</pre>\n<ol>\n<li>add/register the handler class</li>\n</ol>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">TestDictHanlder</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>have a function decorated with decorator <code>message_pattern</code></li>\n</ul>\n<ol>\n<li>write a function and decorate it</li>\n</ol>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">message_pattern</span><span class=\"p\">({</span><span class=\"s1\">'cmd'</span><span class=\"p\">:</span> <span class=\"s1\">'test_decorator'</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_decorator</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''test decorator function</span>\n\n<span class=\"sd\">    the function accepts one parameter payload</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">payload</span>\n</pre>\n<h3>start/run it</h3>\n<pre>    <span class=\"n\">HOST</span> <span class=\"o\">=</span><span class=\"s1\">'localhost'</span>\n    <span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">7086</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'started to run and listed to port </span><span class=\"si\">{</span><span class=\"n\">PORT</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">)</span>\n</pre>\n<h2>The microservices client</h2>\n<p>if you want to call microservices which was implemented in nestjs, it is also simple, find in <a href=\"test/test_client.py\" rel=\"nofollow\">test_client.py</a>\nor sample code here.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding:utf-8 -*-</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nest</span> <span class=\"kn\">import</span> <span class=\"n\">NestMsClient</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">HOST</span> <span class=\"o\">=</span><span class=\"s1\">'localhost'</span>\n    <span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">7086</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">NestMsClient</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">)</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"s1\">'TEST_PATTERN'</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'cmd'</span> <span class=\"p\">:</span><span class=\"s1\">'TEST_PATTERN'</span> <span class=\"p\">}</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'cmd'</span> <span class=\"p\">:</span><span class=\"s1\">'test_decorator'</span> <span class=\"p\">}</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"s1\">'this is ok'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre>\n<h1>Maintainers</h1>\n<p><a href=\"https://github.com/jerrywang1981\" rel=\"nofollow\">@jerrywang1981</a></p>\n<h1>Contributors</h1>\n<p><a href=\"https://github.com/jerrywang1981\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92fcf6bba6760286e112b5fba897b6b1651c5069/68747470733a2f2f6769746875622e636f6d2f6a6572727977616e67313938312e706e673f73697a653d3530\"></a></p>\n<h1>License</h1>\n<p>MIT License</p>\n\n          </div>"}, "last_serial": 6276416, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "75e9b563e5cba1f4b010456ffed44f77", "sha256": "17dec1cbbf6e31cb4636e01e4f868b2a451a0bf7e978b93b73f6cf692a180f14"}, "downloads": -1, "filename": "python_nestjs-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75e9b563e5cba1f4b010456ffed44f77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6099, "upload_time": "2019-12-10T11:56:08", "upload_time_iso_8601": "2019-12-10T11:56:08.934167Z", "url": "https://files.pythonhosted.org/packages/77/a3/58d82a7d59ef54a71897c0f8235a6225cc015215d815c043b40b30f14d72/python_nestjs-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "114389f5fc2a526d545b0b16ca6ec610", "sha256": "7ffeec4bf1afaaaf3dfe583cb589a543848f5eec3ed684cb52cab497dc911669"}, "downloads": -1, "filename": "python-nestjs-0.0.1.tar.gz", "has_sig": false, "md5_digest": "114389f5fc2a526d545b0b16ca6ec610", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3470, "upload_time": "2019-12-10T11:56:11", "upload_time_iso_8601": "2019-12-10T11:56:11.267345Z", "url": "https://files.pythonhosted.org/packages/42/a8/22d2ed44d27f5866ada83d6ff6803bae26e0de5db7ecd10022f1a43f56d3/python-nestjs-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "72c839b74fb4f63342ae872c4ba1cceb", "sha256": "6494958934702438aafcbb49dd8f7bcacc561d92e162704a4955367e771abf80"}, "downloads": -1, "filename": "python_nestjs-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "72c839b74fb4f63342ae872c4ba1cceb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6221, "upload_time": "2019-12-10T14:28:04", "upload_time_iso_8601": "2019-12-10T14:28:04.020846Z", "url": "https://files.pythonhosted.org/packages/ff/2b/3aa64f72ae6ff129948ad4111f23b556d63ac2d63d0f4efafa687bf2b9cf/python_nestjs-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40b2c79229e69cd5653de3f9dc1045b1", "sha256": "5212a3ea8ecb2b44821763c871bc877ec032713379aaf9427ab44d22f1bfb725"}, "downloads": -1, "filename": "python-nestjs-0.0.2.tar.gz", "has_sig": false, "md5_digest": "40b2c79229e69cd5653de3f9dc1045b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3790, "upload_time": "2019-12-10T14:28:05", "upload_time_iso_8601": "2019-12-10T14:28:05.449928Z", "url": "https://files.pythonhosted.org/packages/15/d3/7438358d74c6a4069459932ea047781485f1fbdab8748aa9cc235643e052/python-nestjs-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b5ff5657ec69a2638912e16b8d6781d6", "sha256": "3617253653628901a266f564a79f18e9a2ef143c47a77fa2dabf21bf3208be8f"}, "downloads": -1, "filename": "python_nestjs-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b5ff5657ec69a2638912e16b8d6781d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6360, "upload_time": "2019-12-10T15:14:54", "upload_time_iso_8601": "2019-12-10T15:14:54.109839Z", "url": "https://files.pythonhosted.org/packages/69/57/33fb4d49d52acb244d96e78fbf21f699ca30a84f71c79182d3834f3f2abc/python_nestjs-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc1dd5c00691ce5c2c234824d24f2f78", "sha256": "46da819e3c16c4c0d161256e93294197cc504e6581fec44538ca6f0af89a8caf"}, "downloads": -1, "filename": "python-nestjs-0.0.3.tar.gz", "has_sig": false, "md5_digest": "fc1dd5c00691ce5c2c234824d24f2f78", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4017, "upload_time": "2019-12-10T15:14:55", "upload_time_iso_8601": "2019-12-10T15:14:55.553118Z", "url": "https://files.pythonhosted.org/packages/84/7c/47f1c862f18983289535f2e706fbfc3cb1a644f0628b74fcb4fbdc7a7d39/python-nestjs-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "68b91f20668d75a598a46455ba727c18", "sha256": "5618af1abd664c12f03bae1515d2530396c3a4824e20a479e4cb5cf487cc0e8b"}, "downloads": -1, "filename": "python_nestjs-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "68b91f20668d75a598a46455ba727c18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7556, "upload_time": "2019-12-11T01:13:28", "upload_time_iso_8601": "2019-12-11T01:13:28.505742Z", "url": "https://files.pythonhosted.org/packages/1e/06/1c15bc689bbc88eb0690956b5b07f3012b688f462d70578dba15e1d94098/python_nestjs-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05215a11d3b48806113d68bf61de72cc", "sha256": "799ebc82c43d52559e8371823aed06170a5eba68ed0159f5f002a4514c9048ba"}, "downloads": -1, "filename": "python-nestjs-0.0.4.tar.gz", "has_sig": false, "md5_digest": "05215a11d3b48806113d68bf61de72cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5834, "upload_time": "2019-12-11T01:13:30", "upload_time_iso_8601": "2019-12-11T01:13:30.006821Z", "url": "https://files.pythonhosted.org/packages/7d/e3/85210d46374e6a47d8597636bbe59b23ca1e01c16c42a200bffbfd50812b/python-nestjs-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68b91f20668d75a598a46455ba727c18", "sha256": "5618af1abd664c12f03bae1515d2530396c3a4824e20a479e4cb5cf487cc0e8b"}, "downloads": -1, "filename": "python_nestjs-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "68b91f20668d75a598a46455ba727c18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7556, "upload_time": "2019-12-11T01:13:28", "upload_time_iso_8601": "2019-12-11T01:13:28.505742Z", "url": "https://files.pythonhosted.org/packages/1e/06/1c15bc689bbc88eb0690956b5b07f3012b688f462d70578dba15e1d94098/python_nestjs-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05215a11d3b48806113d68bf61de72cc", "sha256": "799ebc82c43d52559e8371823aed06170a5eba68ed0159f5f002a4514c9048ba"}, "downloads": -1, "filename": "python-nestjs-0.0.4.tar.gz", "has_sig": false, "md5_digest": "05215a11d3b48806113d68bf61de72cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5834, "upload_time": "2019-12-11T01:13:30", "upload_time_iso_8601": "2019-12-11T01:13:30.006821Z", "url": "https://files.pythonhosted.org/packages/7d/e3/85210d46374e6a47d8597636bbe59b23ca1e01c16c42a200bffbfd50812b/python-nestjs-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:24 2020"}