{"info": {"author": "aluriak", "author_email": "lucas.bourneuf@laposte.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: C", "Programming Language :: C++", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Delaunator\n2D Delaunay Triangulation in C++ with Python wrapper.  \n(or wathever you want, thanks to SWIG)   \n  \n__LICENSE:__ _GPL-2.0_; for use, help and share. cf LICENSE.txt file.  \n__Portability:__ code and tests on Debian Stable, with c++11, gcc 4.7.2, make 3.81, python 3.2 and SWIG 2.0; i don't know for others platforms, but except for windows, i think portability is totally possible, maybe already done. \n\n\n\n## PROGRADE DIRECTION\n- [x] do triangulation;\n- [x] print it by Python script and pygame;\n- [x] do delaunay triangulation;\n- [x] manage movement;\n- [x] do a victory cry;\n- [x] upload packaged lib on pypi;\n- [x] doxygen integration;\n- [x] find a better way than TTL limit for fix infinite recursion problem;  (find: use of set of processed faces)\n- [x] vertex deleting;\n- [x] manage big/precise moves;\n- [x] permit to user to choose finder options at Delaunator instanciation;\n- [x] manage confunded Vertex;\n- [x] manage internal association between Vertex and associated user objects;\n- [x] write API documentation;\n- [x] write spec file;\n- [x] implement iterator on the N nearest neighbors of a vertex;\n- [x] implement iterator on the N nearest neighbors of a vertex that respect a predicat;\n- [x] implement iterator on the neighbors that are away from a max distance;\n- [x] optimize Vertex, Edge and Face containing;\n- [ ] manage groups of vertices that moves together; [Next goal]\n- [ ] support constraints; [Next goal]\n- [ ] built in collision management; [Next goal]\n- [ ] access in constant complexity to nearer neighbour; [PoC on a branch ; not interesting result]\n- [ ] use threads; [One day]\n- [ ] permit to user to choose preprocessor options by config files or other useful way;  [One day]\n- [ ] improve API documentation; [One day]\n- [ ] improve spec file; [One day]\n- [ ] implement MultiTrianguledObject, that can be present in multiple Delaunator instances; [One day]\n- [ ] find a way to retract Face class (because its useless for user); [One day]\n- [ ] improve VirtualVertex container in Vertex class; [In progress]\n\n\n## MAYBE-A-DAY DO LIST\n- support the third dimension;\n- implements pure python version of this module & do benchmarks between it and current implementation;\n- be brave and keep the pure python version if its quicker;\n- do a technical tutorial on quad-edge and other structure/algo used by this module;\n- do a technical tutorial on methodology for creat a package like this;\n- build documentation of source, presented in Python style;\n\n\n\n\n## EXAMPLE OF USE\nAPI will be improved with time and ideas.\n\n\n        from random import randint\n        from delaunator import Delaunator, TrianguledObject\n\n        # useful class\n        class People(TrianguledObject):\n            def __init__(self, name):\n                super().__init__()\n                self.name = str(name)\n\n            def presentation(self, othr=None):\n                if othr is not None:\n                    d = str(othr.distanceTo(self))\n                    return self.name + \" \" + \"(\"+d+\")\"\n                else:\n                    return self.name\n\n        # bounds\n        xmin, xmax, ymin, ymax = 0, 600, 0, 600\n\n        # creat delaunator and data\n        dt = Delaunator(xmin, xmax, ymin, ymax)\n        man = People('a man who look at People at 300 px of distance')\n        dt.addTrianguledObject(man, (342, 123))\n\n        for name in ['Totoro', 'Batman', 'Michel', 'Rosalind']:\n            dt.addTrianguledObject(People(name), (randint(xmin, xmax), randint(ymin, ymax)))\n\n        # movement\n        dt.movTrianguledObject(man, (randint(xmin, xmax) / 2, randint(ymin, ymax) / 2))\n\n        # print name of all neighbors that are to a distance at most 300\n        print(\"I'm\", man.name)\n        print(\"My neighbors are \" + \", \".join([n.presentation(man) for n in man.neighborsAt(300)]))\n        print(\"The others are   \" + \", \".join([n.presentation(man) for n in man.neighborsAt(dt.distanceMax(), 300)]))\n        print(\"All are          \" + \", \".join([n.presentation(man) for n in man.neighborsAt(dt.distanceMax())]))\n\n        # frees\n        dt.delTrianguledObject(man)\n\n\nSee github repo, pydelaunator repertory, for more complex built-in example, with GUI and direct data manipulation.\n\n\n\n\n## CHANGE LOG\n- 1.0.4:\n    - C++ unit tests created;\n    - rewrite algorithm of deletion;\n    - TTL mecanism replaced by the more robust set of processed faces;\n    - first approach of mesh generation (C++ only);\n    - internal ownership of VirtualVertex corrected;\n    - new STL container like method: clear;\n    - fix bugs about moving of vertex on another;\n- 1.0.3:\n    - no more segfault when movements around corners with confounded VirtualVertices;\n    - algorithmic correction of VirtualVertex::nearerNeighbors() and remove useless parameter;\n    - improvement of data structures for Vertex, Edge and Face;\n    - correct const-correctness of iterators;\n    - add few words on the arch document (always available in doc/);\n- 1.0.2:\n    - clean setup.py;\n    - update README prograde directions indications, and add a changelog;\n    - documentation uploading is always bugged;\n    - some additionnal lines of doc for Edge class;\n    - set non-verbose and non-debug compilation flags;\n    - filtering by predicat added for main TrianguledObject's neighbors access;\n\n\n\n\n## INSTALLATION\nA simple\n\n    pip install delaunator\n\nmust be enough.\nPlease note that SWIG is needed. (see links below; SWIG is in official repositories in most of cases)\n\nSome problems can appear :\n- on my debian stable, SWIG is named *swig2.0*, but setuptools call *swig*. You can correct that with command *python3 setup.py setopt --command=build_ext --option=swig --set-value=swig2.0*, or something like that.\n- be sur to have only one version of setuptools, sometimes there are problems when two different versions are installed.\n\nContact maintainer by mail for help if necessary.\n\n### Options in installations\nYou can edit setup.py file, and change lines about 38, where DEBUG macro is defined. When DEBUG is defined,\nlots of verifications are done (by assert calls), so delete DEBUG will increase performances but remove detection of corruptions;\n\nFeel free to modify theses. (notabily delete DEBUG, if you want use delaunator in the faster way)\n\n\n\n\n## DOCUMENTATION GENERATION\nGenerate the documentation require Doxygen (or something that works like it) and can be performed with a simple\n\n    make gendoc\n\nor\n\n    doxygen Doxyfile\n\nHTML and Latex documentations are generated in doc repertory.\nAn online documentation can be found at pythonhosted.org. (see links below)\n\nSome documents in doc/ repertory are not generated by doxygen: its keyboard-writed documents, notabily specification document.\n\n\n## USE DOCUMENTATION\nThe documentation is generated with Doxygen by parsing C++ source.\nHowever, as SWIG creat Python wrapper by parsing same source, documentation is usable for Python codes.\n\nMaybe later, i will found a solution for generate pure Python documentation.\n\n\n\n### Some links\nhttps://github.com/Aluriak/Delaunator\nhttps://pypi.python.org/pypi/delaunator\nhttps://pythonhosted.org/delaunator/\n\nhttp://swig.org\nhttp://swig.org/tutorial.html\n\nhttp://totologic.blogspot.fr/2013/11/core-quad-edge-implementation-explained.html\n\nhttp://stackoverflow.com/questions/10121957/swig-to-python-import-errordynamic-module-does-not-define-init-function\n\nhttp://sametmax.com/creer-un-setup-py-et-mettre-sa-bibliotheque-python-en-ligne-sur-pypi/\nhttps://docs.python.org/3.2/distutils/setupscript.html#extension-source-files\nhttps://pythonhosted.org/setuptools/setuptools.html", "description_content_type": null, "docs_url": "https://pythonhosted.org/delaunator/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Aluriak/Delaunator", "keywords": "triangulation geometry delaunay wrapper", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "delaunator", "package_url": "https://pypi.org/project/delaunator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/delaunator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Aluriak/Delaunator"}, "release_url": "https://pypi.org/project/delaunator/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "2D Delaunay Triangulation in C++ with Python wrapper", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Delaunator<br>2D Delaunay Triangulation in C++ with Python wrapper.  <br>(or wathever you want, thanks to SWIG)   <br>  <br>__LICENSE:__ _GPL-2.0_; for use, help and share. cf LICENSE.txt file.  <br>__Portability:__ code and tests on Debian Stable, with c++11, gcc 4.7.2, make 3.81, python 3.2 and SWIG 2.0; i don't know for others platforms, but except for windows, i think portability is totally possible, maybe already done. <br><br><br><br>## PROGRADE DIRECTION<br>- [x] do triangulation;<br>- [x] print it by Python script and pygame;<br>- [x] do delaunay triangulation;<br>- [x] manage movement;<br>- [x] do a victory cry;<br>- [x] upload packaged lib on pypi;<br>- [x] doxygen integration;<br>- [x] find a better way than TTL limit for fix infinite recursion problem;  (find: use of set of processed faces)<br>- [x] vertex deleting;<br>- [x] manage big/precise moves;<br>- [x] permit to user to choose finder options at Delaunator instanciation;<br>- [x] manage confunded Vertex;<br>- [x] manage internal association between Vertex and associated user objects;<br>- [x] write API documentation;<br>- [x] write spec file;<br>- [x] implement iterator on the N nearest neighbors of a vertex;<br>- [x] implement iterator on the N nearest neighbors of a vertex that respect a predicat;<br>- [x] implement iterator on the neighbors that are away from a max distance;<br>- [x] optimize Vertex, Edge and Face containing;<br>- [ ] manage groups of vertices that moves together; [Next goal]<br>- [ ] support constraints; [Next goal]<br>- [ ] built in collision management; [Next goal]<br>- [ ] access in constant complexity to nearer neighbour; [PoC on a branch ; not interesting result]<br>- [ ] use threads; [One day]<br>- [ ] permit to user to choose preprocessor options by config files or other useful way;  [One day]<br>- [ ] improve API documentation; [One day]<br>- [ ] improve spec file; [One day]<br>- [ ] implement MultiTrianguledObject, that can be present in multiple Delaunator instances; [One day]<br>- [ ] find a way to retract Face class (because its useless for user); [One day]<br>- [ ] improve VirtualVertex container in Vertex class; [In progress]<br><br><br>## MAYBE-A-DAY DO LIST<br>- support the third dimension;<br>- implements pure python version of this module &amp; do benchmarks between it and current implementation;<br>- be brave and keep the pure python version if its quicker;<br>- do a technical tutorial on quad-edge and other structure/algo used by this module;<br>- do a technical tutorial on methodology for creat a package like this;<br>- build documentation of source, presented in Python style;<br><br><br><br><br>## EXAMPLE OF USE<br>API will be improved with time and ideas.<br><br><br>        from random import randint<br>        from delaunator import Delaunator, TrianguledObject<br><br>        # useful class<br>        class People(TrianguledObject):<br>            def __init__(self, name):<br>                super().__init__()<br>                self.name = str(name)<br><br>            def presentation(self, othr=None):<br>                if othr is not None:<br>                    d = str(othr.distanceTo(self))<br>                    return self.name + \" \" + \"(\"+d+\")\"<br>                else:<br>                    return self.name<br><br>        # bounds<br>        xmin, xmax, ymin, ymax = 0, 600, 0, 600<br><br>        # creat delaunator and data<br>        dt = Delaunator(xmin, xmax, ymin, ymax)<br>        man = People('a man who look at People at 300 px of distance')<br>        dt.addTrianguledObject(man, (342, 123))<br><br>        for name in ['Totoro', 'Batman', 'Michel', 'Rosalind']:<br>            dt.addTrianguledObject(People(name), (randint(xmin, xmax), randint(ymin, ymax)))<br><br>        # movement<br>        dt.movTrianguledObject(man, (randint(xmin, xmax) / 2, randint(ymin, ymax) / 2))<br><br>        # print name of all neighbors that are to a distance at most 300<br>        print(\"I'm\", man.name)<br>        print(\"My neighbors are \" + \", \".join([n.presentation(man) for n in man.neighborsAt(300)]))<br>        print(\"The others are   \" + \", \".join([n.presentation(man) for n in man.neighborsAt(dt.distanceMax(), 300)]))<br>        print(\"All are          \" + \", \".join([n.presentation(man) for n in man.neighborsAt(dt.distanceMax())]))<br><br>        # frees<br>        dt.delTrianguledObject(man)<br><br><br>See github repo, pydelaunator repertory, for more complex built-in example, with GUI and direct data manipulation.<br><br><br><br><br>## CHANGE LOG<br>- 1.0.4:<br>    - C++ unit tests created;<br>    - rewrite algorithm of deletion;<br>    - TTL mecanism replaced by the more robust set of processed faces;<br>    - first approach of mesh generation (C++ only);<br>    - internal ownership of VirtualVertex corrected;<br>    - new STL container like method: clear;<br>    - fix bugs about moving of vertex on another;<br>- 1.0.3:<br>    - no more segfault when movements around corners with confounded VirtualVertices;<br>    - algorithmic correction of VirtualVertex::nearerNeighbors() and remove useless parameter;<br>    - improvement of data structures for Vertex, Edge and Face;<br>    - correct const-correctness of iterators;<br>    - add few words on the arch document (always available in doc/);<br>- 1.0.2:<br>    - clean setup.py;<br>    - update README prograde directions indications, and add a changelog;<br>    - documentation uploading is always bugged;<br>    - some additionnal lines of doc for Edge class;<br>    - set non-verbose and non-debug compilation flags;<br>    - filtering by predicat added for main TrianguledObject's neighbors access;<br><br><br><br><br>## INSTALLATION<br>A simple<br><br>    pip install delaunator<br><br>must be enough.<br>Please note that SWIG is needed. (see links below; SWIG is in official repositories in most of cases)<br><br>Some problems can appear :<br>- on my debian stable, SWIG is named *swig2.0*, but setuptools call *swig*. You can correct that with command *python3 setup.py setopt --command=build_ext --option=swig --set-value=swig2.0*, or something like that.<br>- be sur to have only one version of setuptools, sometimes there are problems when two different versions are installed.<br><br>Contact maintainer by mail for help if necessary.<br><br>### Options in installations<br>You can edit setup.py file, and change lines about 38, where DEBUG macro is defined. When DEBUG is defined,<br>lots of verifications are done (by assert calls), so delete DEBUG will increase performances but remove detection of corruptions;<br><br>Feel free to modify theses. (notabily delete DEBUG, if you want use delaunator in the faster way)<br><br><br><br><br>## DOCUMENTATION GENERATION<br>Generate the documentation require Doxygen (or something that works like it) and can be performed with a simple<br><br>    make gendoc<br><br>or<br><br>    doxygen Doxyfile<br><br>HTML and Latex documentations are generated in doc repertory.<br>An online documentation can be found at pythonhosted.org. (see links below)<br><br>Some documents in doc/ repertory are not generated by doxygen: its keyboard-writed documents, notabily specification document.<br><br><br>## USE DOCUMENTATION<br>The documentation is generated with Doxygen by parsing C++ source.<br>However, as SWIG creat Python wrapper by parsing same source, documentation is usable for Python codes.<br><br>Maybe later, i will found a solution for generate pure Python documentation.<br><br><br><br>### Some links<br>https://github.com/Aluriak/Delaunator<br>https://pypi.python.org/pypi/delaunator<br>https://pythonhosted.org/delaunator/<br><br>http://swig.org<br>http://swig.org/tutorial.html<br><br>http://totologic.blogspot.fr/2013/11/core-quad-edge-implementation-explained.html<br><br>http://stackoverflow.com/questions/10121957/swig-to-python-import-errordynamic-module-does-not-define-init-function<br><br>http://sametmax.com/creer-un-setup-py-et-mettre-sa-bibliotheque-python-en-ligne-sur-pypi/<br>https://docs.python.org/3.2/distutils/setupscript.html#extension-source-files<br>https://pythonhosted.org/setuptools/setuptools.html\n          </div>"}, "last_serial": 1561319, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c9630d46495aed2b23f86f51ddc61c6d", "sha256": "9ba729b5389591e0c0bf81d0a67f99c97633b01dc6606df3896703c1375f7189"}, "downloads": -1, "filename": "delaunator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c9630d46495aed2b23f86f51ddc61c6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85987, "upload_time": "2014-06-05T21:56:01", "upload_time_iso_8601": "2014-06-05T21:56:01.428233Z", "url": "https://files.pythonhosted.org/packages/80/52/5e479c964abcb3f1e6fbc3e5224d8742b14ed9ee554aa7b3413364461879/delaunator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "12885679c2b6ac20bf61569a01a328d7", "sha256": "6ac0e77bcd5080baa731f0b4ac354fbc1f37b78060a4bff40d065dfab015a7eb"}, "downloads": -1, "filename": "delaunator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "12885679c2b6ac20bf61569a01a328d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86067, "upload_time": "2014-06-05T22:22:21", "upload_time_iso_8601": "2014-06-05T22:22:21.926374Z", "url": "https://files.pythonhosted.org/packages/71/a5/0348a807c61fd9ef255b04e9e1816ea3ee07e4e11d6793649d365df9098f/delaunator-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3fc643f73e492975f4ba3e7f9723bfda", "sha256": "e184f5af1f7ff14a36a2bc1888917793309d9b658965526a331c4048e8a8549f"}, "downloads": -1, "filename": "delaunator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3fc643f73e492975f4ba3e7f9723bfda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37261, "upload_time": "2014-06-05T22:34:07", "upload_time_iso_8601": "2014-06-05T22:34:07.668352Z", "url": "https://files.pythonhosted.org/packages/af/c0/b00ec13e04c603ef2189e25d5bb73da3887c326376b8740a2cd4522e7fd6/delaunator-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a09e5b1e52bc3f13a8064f3df6009986", "sha256": "b95b9fd503c27e799b27a70a600e6b36c71b2bc07123b79211b3dc10c17ef7ed"}, "downloads": -1, "filename": "delaunator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a09e5b1e52bc3f13a8064f3df6009986", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28066, "upload_time": "2014-06-05T22:51:44", "upload_time_iso_8601": "2014-06-05T22:51:44.899503Z", "url": "https://files.pythonhosted.org/packages/83/5b/46f3259d33df6939ff61ae7dffb8281e23ccff6333a4d5b56229563c1f68/delaunator-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "635906e2bc076d97c52380b3618edffe", "sha256": "197afdf92a887cb76c6b487415436a5dd33ed7eff3900c53d883a623050a4e1c"}, "downloads": -1, "filename": "delaunator-0.0.5.tar.gz", "has_sig": false, "md5_digest": "635906e2bc076d97c52380b3618edffe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28556, "upload_time": "2014-06-09T14:16:03", "upload_time_iso_8601": "2014-06-09T14:16:03.083492Z", "url": "https://files.pythonhosted.org/packages/0d/66/24ad7af48f055964304e548416ae036e3e75166668cc9a4770914895d237/delaunator-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "4cb1420db7d60e5278dd823d61a5e521", "sha256": "c8ae6fd96ade65755279d4a41907a9a2129325c75f54bda55223aeed6e896200"}, "downloads": -1, "filename": "delaunator-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4cb1420db7d60e5278dd823d61a5e521", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47426, "upload_time": "2014-11-01T01:33:36", "upload_time_iso_8601": "2014-11-01T01:33:36.275418Z", "url": "https://files.pythonhosted.org/packages/0a/09/47cfc2276cfc9063c9662126b866fddcb8036365c4a1d3e3dd760648ab30/delaunator-0.0.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c59da3c7f2d989a8922d65f20f8703e0", "sha256": "0620a7af0c7a7fced79470adfe194cee9c63d1eb860fa2669f7241219c167591"}, "downloads": -1, "filename": "delaunator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c59da3c7f2d989a8922d65f20f8703e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47435, "upload_time": "2014-11-01T01:34:37", "upload_time_iso_8601": "2014-11-01T01:34:37.462524Z", "url": "https://files.pythonhosted.org/packages/32/82/ad0772b9379b5f200e6ba11f2521621e24ade7f199853a622f7a5b290986/delaunator-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "74ec6507278bab4ac1aca14f85e8bfbb", "sha256": "39b7ce939dc2964e529dd5bc020a8e3f3fa88171b44415b5eb30de5ae58f2386"}, "downloads": -1, "filename": "delaunator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "74ec6507278bab4ac1aca14f85e8bfbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48020, "upload_time": "2014-11-01T11:39:33", "upload_time_iso_8601": "2014-11-01T11:39:33.347762Z", "url": "https://files.pythonhosted.org/packages/fd/65/5d1d41ca7a46748e2016bef9dd2040909b046286d11878b0d5a65dabfaea/delaunator-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "756b502585a6f49f23cc67b967d2771a", "sha256": "3f81f8e6ad72fd584e63746410ab3497041f688f522fe9ba37b4b8dd0f6b302c"}, "downloads": -1, "filename": "delaunator-1.0.2.tar.gz", "has_sig": false, "md5_digest": "756b502585a6f49f23cc67b967d2771a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49201, "upload_time": "2014-11-01T15:18:58", "upload_time_iso_8601": "2014-11-01T15:18:58.376071Z", "url": "https://files.pythonhosted.org/packages/a9/ea/851119dc018641c0a91e8b5525b8c7cff5374e026595c436162ae2b1b033/delaunator-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bdb5de5698937f64ff92dee557ae6fb8", "sha256": "430cdafa61ba04b725c9f75960cf8183a4c82c2a9c2b200604d975ec536c7153"}, "downloads": -1, "filename": "delaunator-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bdb5de5698937f64ff92dee557ae6fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50535, "upload_time": "2014-11-02T02:37:23", "upload_time_iso_8601": "2014-11-02T02:37:23.514631Z", "url": "https://files.pythonhosted.org/packages/20/43/114af02b2fb55bfdcd3476661aa3798de5003da1fb78946c90d41c18df77/delaunator-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "b56685b180a66e44f629f66b140b6d20", "sha256": "50eb02519d161b78c8f1658e053127815789ffbebae9eb7acf4f21b4d4a7fa99"}, "downloads": -1, "filename": "delaunator-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b56685b180a66e44f629f66b140b6d20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57360, "upload_time": "2015-05-25T10:55:21", "upload_time_iso_8601": "2015-05-25T10:55:21.698267Z", "url": "https://files.pythonhosted.org/packages/ca/99/07d31c1fd037d5c5e336affa7d93b63830b054d97fdda3ab40144bb2f05a/delaunator-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b56685b180a66e44f629f66b140b6d20", "sha256": "50eb02519d161b78c8f1658e053127815789ffbebae9eb7acf4f21b4d4a7fa99"}, "downloads": -1, "filename": "delaunator-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b56685b180a66e44f629f66b140b6d20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57360, "upload_time": "2015-05-25T10:55:21", "upload_time_iso_8601": "2015-05-25T10:55:21.698267Z", "url": "https://files.pythonhosted.org/packages/ca/99/07d31c1fd037d5c5e336affa7d93b63830b054d97fdda3ab40144bb2f05a/delaunator-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:13 2020"}