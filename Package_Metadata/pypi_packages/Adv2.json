{"info": {"author": "Bob Anderson", "author_email": "bob.anderson.ok@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "Adv2\n====\n\nThis package provides a 'reader' for .adv (AstroDigitalVideo) Version 2 files.\n\nIt is the result of a collaborative effort involving Bob Anderson and Hristo Pavlov.\n\nThe specification for Astro Digital Video files can be \nfound at: <http://www.astrodigitalvideoformat.org/spec.html>\n\nTo install this package on your system:\n\n    pip install Adv2\n\nThen, sample usage from within your Python code is:\n\n    from pathlib import Path\n\n    from Adv2.Adv2File import Adv2reader\n\n    try:\n        # Create a platform agnostic path to your .adv file (use forward slashes)\n        file_path = str(Path('path/to/your/file.adv'))  # Python will make Windows version as needed\n\n        # Create a 'reader' for the given file\n        rdr = Adv2reader(file_path)\n\n    except AdvLibException as adverr:\n        print(repr(adverr))\n        exit()\n\n    except IOError as ioerr:\n        print(repr(ioerr))\n        exit()\n\nNow that the file has been opened and a 'reader' (rdr) created for it, \nthere are instance variables available that will be useful.\nHere is how to print some of those out (these give the image size and number of images in the file):\n\n    print(f'Width: {rdr.Width}  Height: {rdr.Height}  NumMainFrames: {rdr.CountMainFrames}')\n\nThere is also an composite instance variable called `FileInfo` which gives access to all\nof the values defined in the structure `AdvFileInfo` (there are 20 of them).\n\nFor example:\n\n    print(rdr.FileInfo.UtcTimestampAccuracyInNanoseconds)\n\nTo get (and show) the file metadata (returned as a Dict[str, str]):\n\n    print(f'\\nADV_FILE_META_DATA:')\n    meta_data = rdr.getAdvFileMetaData()\n    for key in meta_data:\n        print(f'    {key}: {meta_data[key]}')\n\nThe main thing that one will want to do is read image data, timestamps, and frame status information\nfrom image frames.\n\nContinuing with the example and assuming that the adv file contains a MAIN stream (it\nmight also contain a CALIBRATION stream):\n\n\n    for frame in range(rdr.CountMainFrames):\n\n        # status is a Dict[str, str]\n        err, image, frameInfo, status = rdr.getMainImageAndStatusData(frameNumber=frame)\n        # To get frames from a CALIBRATION stream, use rdr.getCalibImageAndStatusData()\n\n        if not err:\n            # If timestamp info was not present in the file (highly unlikely),\n            # the timestamp string returned will be empty (== '')\n            if frameInfo.StartOfExposureTimestampString:\n                print(frameInfo.DateString, frameInfo.StartOfExposureTimestampString)\n            print(f'\\nframe: {frame} STATUS:')\n            for entry in status:\n                print(f'    {entry}: {status[entry]}')\n        else:\n            print(err)\n\n`err` is a string that will be empty if image bytes and metadata where successfully extracted.\nIn that case, `image` will contain a numpy array of uint16 values. If `err` is not empty, it will contain\na human-readable description of the error encountered.\n\nThe 'shape' of image will be `image[Height, Width]` for grayscale images. Color video\nfiles are not yet supported.\n\nFinally, the file should closed as in the example below:\n\n    print(f'closeFile returned: {rdr.closeFile()}')\n    rdr = None\n\nThe value returned will be the version number (2) of the file closed or 0, which indicates an attempt to close a file that was\nalready closed.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bob-anderson-ok/adv2reader", "keywords": "ADV file reader,Astro Digital Video version 2 file reader", "license": "License :: OSI Approved :: MIT License", "maintainer": "Bob Anderson", "maintainer_email": "bob.anderson.ok@gmail.com", "name": "Adv2", "package_url": "https://pypi.org/project/Adv2/", "platform": "", "project_url": "https://pypi.org/project/Adv2/", "project_urls": {"Homepage": "https://github.com/bob-anderson-ok/adv2reader"}, "release_url": "https://pypi.org/project/Adv2/1.2.0/", "requires_dist": ["numpy"], "requires_python": ">=3.7", "summary": "Adv2reader reads version 2 Astro Digital Video files.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Adv2</h1>\n<p>This package provides a 'reader' for .adv (AstroDigitalVideo) Version 2 files.</p>\n<p>It is the result of a collaborative effort involving Bob Anderson and Hristo Pavlov.</p>\n<p>The specification for Astro Digital Video files can be\nfound at: <a href=\"http://www.astrodigitalvideoformat.org/spec.html\" rel=\"nofollow\">http://www.astrodigitalvideoformat.org/spec.html</a></p>\n<p>To install this package on your system:</p>\n<pre><code>pip install Adv2\n</code></pre>\n<p>Then, sample usage from within your Python code is:</p>\n<pre><code>from pathlib import Path\n\nfrom Adv2.Adv2File import Adv2reader\n\ntry:\n    # Create a platform agnostic path to your .adv file (use forward slashes)\n    file_path = str(Path('path/to/your/file.adv'))  # Python will make Windows version as needed\n\n    # Create a 'reader' for the given file\n    rdr = Adv2reader(file_path)\n\nexcept AdvLibException as adverr:\n    print(repr(adverr))\n    exit()\n\nexcept IOError as ioerr:\n    print(repr(ioerr))\n    exit()\n</code></pre>\n<p>Now that the file has been opened and a 'reader' (rdr) created for it,\nthere are instance variables available that will be useful.\nHere is how to print some of those out (these give the image size and number of images in the file):</p>\n<pre><code>print(f'Width: {rdr.Width}  Height: {rdr.Height}  NumMainFrames: {rdr.CountMainFrames}')\n</code></pre>\n<p>There is also an composite instance variable called <code>FileInfo</code> which gives access to all\nof the values defined in the structure <code>AdvFileInfo</code> (there are 20 of them).</p>\n<p>For example:</p>\n<pre><code>print(rdr.FileInfo.UtcTimestampAccuracyInNanoseconds)\n</code></pre>\n<p>To get (and show) the file metadata (returned as a Dict[str, str]):</p>\n<pre><code>print(f'\\nADV_FILE_META_DATA:')\nmeta_data = rdr.getAdvFileMetaData()\nfor key in meta_data:\n    print(f'    {key}: {meta_data[key]}')\n</code></pre>\n<p>The main thing that one will want to do is read image data, timestamps, and frame status information\nfrom image frames.</p>\n<p>Continuing with the example and assuming that the adv file contains a MAIN stream (it\nmight also contain a CALIBRATION stream):</p>\n<pre><code>for frame in range(rdr.CountMainFrames):\n\n    # status is a Dict[str, str]\n    err, image, frameInfo, status = rdr.getMainImageAndStatusData(frameNumber=frame)\n    # To get frames from a CALIBRATION stream, use rdr.getCalibImageAndStatusData()\n\n    if not err:\n        # If timestamp info was not present in the file (highly unlikely),\n        # the timestamp string returned will be empty (== '')\n        if frameInfo.StartOfExposureTimestampString:\n            print(frameInfo.DateString, frameInfo.StartOfExposureTimestampString)\n        print(f'\\nframe: {frame} STATUS:')\n        for entry in status:\n            print(f'    {entry}: {status[entry]}')\n    else:\n        print(err)\n</code></pre>\n<p><code>err</code> is a string that will be empty if image bytes and metadata where successfully extracted.\nIn that case, <code>image</code> will contain a numpy array of uint16 values. If <code>err</code> is not empty, it will contain\na human-readable description of the error encountered.</p>\n<p>The 'shape' of image will be <code>image[Height, Width]</code> for grayscale images. Color video\nfiles are not yet supported.</p>\n<p>Finally, the file should closed as in the example below:</p>\n<pre><code>print(f'closeFile returned: {rdr.closeFile()}')\nrdr = None\n</code></pre>\n<p>The value returned will be the version number (2) of the file closed or 0, which indicates an attempt to close a file that was\nalready closed.</p>\n\n          </div>"}, "last_serial": 6964751, "releases": {"0.3.3": [{"comment_text": "", "digests": {"md5": "8beee6557eba049e21b3061dc0979250", "sha256": "eda919fdf0d74921c86495e298df164da899ad4999e6a0bfc063027f9e0fb768"}, "downloads": -1, "filename": "Adv2-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8beee6557eba049e21b3061dc0979250", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979022, "upload_time": "2020-03-21T18:09:22", "upload_time_iso_8601": "2020-03-21T18:09:22.986689Z", "url": "https://files.pythonhosted.org/packages/06/68/bec12de8572dd3940f7276f65c27dbc08da090c109a71e9473108715d1f5/Adv2-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60f9b2bd6f429fc80e26b41ff6549750", "sha256": "daf36e701059990efb469aa22c5e8d45dbd7350a360ff3bb2faf822b1e05fec6"}, "downloads": -1, "filename": "Adv2-0.3.3.tar.gz", "has_sig": false, "md5_digest": "60f9b2bd6f429fc80e26b41ff6549750", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1960712, "upload_time": "2020-03-21T18:09:25", "upload_time_iso_8601": "2020-03-21T18:09:25.842782Z", "url": "https://files.pythonhosted.org/packages/ee/7a/0cef7dafee5337c9b02315f67c16951d285741b5cf130db4c98a6a4bd879/Adv2-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "4556293579e64a0e5b25774c771d02a1", "sha256": "40c38e519ce268e9e46e95ff03ef083d3748a6233e6565d5076ee4e7ca680140"}, "downloads": -1, "filename": "Adv2-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4556293579e64a0e5b25774c771d02a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979119, "upload_time": "2020-03-21T21:30:27", "upload_time_iso_8601": "2020-03-21T21:30:27.559146Z", "url": "https://files.pythonhosted.org/packages/42/ad/1747ef365c294009fba9853e6c38b96dae68eed4267863a33a16d8a91c00/Adv2-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45378c607ff5d6610afcc610345dfa2a", "sha256": "ec7a34b62d852777465659cf60dac5175a72467cbe5553d55c5bf7f36fda6f86"}, "downloads": -1, "filename": "Adv2-0.3.4.tar.gz", "has_sig": false, "md5_digest": "45378c607ff5d6610afcc610345dfa2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1960818, "upload_time": "2020-03-21T21:30:31", "upload_time_iso_8601": "2020-03-21T21:30:31.169669Z", "url": "https://files.pythonhosted.org/packages/0e/d6/1f95b59e57c15873f08c3e362ff07856a526ea2c71a2e4b40ab19ee72c98/Adv2-0.3.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a4615f7982806d751ed86570a8362702", "sha256": "2e04ef6d11c3049d07ab9601c565e77546fe371a33e1b43cfb2371fd4a893845"}, "downloads": -1, "filename": "Adv2-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4615f7982806d751ed86570a8362702", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979263, "upload_time": "2020-03-22T22:08:35", "upload_time_iso_8601": "2020-03-22T22:08:35.228742Z", "url": "https://files.pythonhosted.org/packages/97/24/f54c37c57eee3c75eb3c636153568967115c015c0f29673fff3408367f23/Adv2-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75a421c41eba5ea302ed0ce0c0e5be83", "sha256": "a8e6e7c809cbd716ecf815c45d9baf770a088a5a60f9a150733968c809568238"}, "downloads": -1, "filename": "Adv2-1.0.0.tar.gz", "has_sig": false, "md5_digest": "75a421c41eba5ea302ed0ce0c0e5be83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1960975, "upload_time": "2020-03-22T22:08:38", "upload_time_iso_8601": "2020-03-22T22:08:38.617136Z", "url": "https://files.pythonhosted.org/packages/72/8f/2b7b130b359a0396fb4159b1fd9012dab451ffb5c985852bf7fe37115657/Adv2-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "12f05b06fe7cc126bfd80cbd6bec016d", "sha256": "5c639441509ae52f91d8c2fa655c579caa75f948e33d4c97d8d3133264e67ca6"}, "downloads": -1, "filename": "Adv2-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12f05b06fe7cc126bfd80cbd6bec016d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979469, "upload_time": "2020-03-25T00:50:15", "upload_time_iso_8601": "2020-03-25T00:50:15.359822Z", "url": "https://files.pythonhosted.org/packages/8e/34/a5acbde04fe349baed92a885ee7afa58d52dc947353c4a0a0325e0071a08/Adv2-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ede374820948af2e03f233c70615b4bf", "sha256": "24668e11ddee8837db3a912b66fe777e01583667ce89e05bb399b4f74cfe9b3b"}, "downloads": -1, "filename": "Adv2-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ede374820948af2e03f233c70615b4bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1961176, "upload_time": "2020-03-25T00:50:22", "upload_time_iso_8601": "2020-03-25T00:50:22.258987Z", "url": "https://files.pythonhosted.org/packages/ad/b3/b81aee9f6240efea906f229b412900dbeeac5f94b7d92c7251365eab3d59/Adv2-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6024a4614699002554aa20c42b32a102", "sha256": "af732ef1e6a1a5324facadcbe8a628cdadfca53d4783617e65f010b450d363b3"}, "downloads": -1, "filename": "Adv2-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6024a4614699002554aa20c42b32a102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979558, "upload_time": "2020-04-06T20:54:55", "upload_time_iso_8601": "2020-04-06T20:54:55.038782Z", "url": "https://files.pythonhosted.org/packages/5a/53/6afa0afe1c2699fc1009b6e8905ab463559453c2cb0c386784307f1a74aa/Adv2-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d29fe5313a575693a10e47cc22b00722", "sha256": "2f09159b3637582ec90c6ff4aa33cfc3f1988103b0e55fb274d3bf18a85a931a"}, "downloads": -1, "filename": "Adv2-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d29fe5313a575693a10e47cc22b00722", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1961232, "upload_time": "2020-04-06T20:55:00", "upload_time_iso_8601": "2020-04-06T20:55:00.153827Z", "url": "https://files.pythonhosted.org/packages/69/8a/e4658e2cf77a7723c02070135b2df71388a3bb9a2f788671ca397e79608f/Adv2-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6024a4614699002554aa20c42b32a102", "sha256": "af732ef1e6a1a5324facadcbe8a628cdadfca53d4783617e65f010b450d363b3"}, "downloads": -1, "filename": "Adv2-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6024a4614699002554aa20c42b32a102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1979558, "upload_time": "2020-04-06T20:54:55", "upload_time_iso_8601": "2020-04-06T20:54:55.038782Z", "url": "https://files.pythonhosted.org/packages/5a/53/6afa0afe1c2699fc1009b6e8905ab463559453c2cb0c386784307f1a74aa/Adv2-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d29fe5313a575693a10e47cc22b00722", "sha256": "2f09159b3637582ec90c6ff4aa33cfc3f1988103b0e55fb274d3bf18a85a931a"}, "downloads": -1, "filename": "Adv2-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d29fe5313a575693a10e47cc22b00722", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1961232, "upload_time": "2020-04-06T20:55:00", "upload_time_iso_8601": "2020-04-06T20:55:00.153827Z", "url": "https://files.pythonhosted.org/packages/69/8a/e4658e2cf77a7723c02070135b2df71388a3bb9a2f788671ca397e79608f/Adv2-1.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:12 2020"}