{"info": {"author": "Mike Malinowski", "author_email": "mike@twisted.space", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "#Overview\n\nQute is a wrapped extension of Marcus Ottosson's Qt.py. The emphasis is on\nutilising the convience of Qt.py (allowing for use of PyQt, PySide and \nPySide2 seamlessly) whilst also exposing a set of common pieces of functionality\nwe tend to replicate and utilise in many places.\n\n\n#Key Features\n\n## General Usage\n\n```python\nimport qute\n\n\nclass MyWidget(qute.QWidget):\n\n    def __init__(self, parent=None):\n        super(MyWidget, self).__init__(parent=parent)\n        \n        # -- Create a layout and set it as the base layout. Use \n        # -- qute to slim the layout - removing margins\n        self.setLayout(\n            qute.slimify(qute.QVBoxLayout())\n        )\n        \n        # -- Create some widgets\n        self.spinner = qute.QSpinBox()\n        self.checker = qute.QCheckBox()\n        \n        # -- Add these to our layout\n        self.layout().addWidget(self.spinner)\n        self.layout().addWidget(self.checkbox)\n        \n        # -- Finally lets connect some signals and slots without\n        # -- caring what it is\n        qute.connectBlind(self.spinner, self.do_something)\n        qute.connectBlind(self.checker, self.do_something)\n        \n    def do_something(self, *args, **kwargs):\n        print('doing something...')\n\nif __name__ == '__main__':\n\n    # -- Use qute to get or create the QApplication instance\n    q_app = qute.qApp()\n    \n    widget = MyWidget()\n    widget.show()\n    \n    q_app.exec_()\n```\nIn this example we see some of the features of qute in use, but most importantly is that it is usable in environments using either PyQt, PySide or PySide2 (thanks to Qt.py), and then utilises the various helper functionality defined within qute which you can read about below.\n\n\n# Cross Application Support\n\nThis library is specifically intended for use when in environments where\nyou're actively trying to share/develop tools across multiple applications\nwhich support PyQt, PySide or PySide2. \n\nThe premise is that you can request the main application window using \na common function regardless of the actual application - making it trivial\nto implement a tool which works in multiple host applications without any\nbespoke code.\n\nThe current list of supported applications are:\n\n    * Native Python\n    * Maya\n    * 3dsmax\n    * Motion Builder\n\nHere is an example:\n\n```python\nimport qute\n\nclass MyCrossApplicationTool(qute.QWidget):\n\n    def __init__(self, parent=None):\n        super(MyCrossApplicationTool, self).__init__(parent=parent)\n\n        self.setLayout(qute.QVBoxLayout())\n        self.layout().addWidget(qute.QLabel('This tool will launch and parent under Max, Maya, Motion Builder or Pure Python'))\n\n\n# ------------------------------------------------------------------------------\ndef launch(blocking=False, *args, **kwargs):\n\n    # -- This will return the running QApplication instance, or create\n    # -- one if one is not present\n    q_app = qute.qApp()\n\n    # -- Create a window and set its parent 'blindly' to what qute\n    # -- resolves as the main window.\n    window = qute.QMainWindow(parent=qute.mainWindow())\n\n    # -- Assign our widget to the window\n    window.setCentralWidget(MyCrossApplicationTool(*args, **kwargs))\n\n    window.show()\n\n    if blocking:\n        q_app.exec_()\n\nlaunch()\n```\n\nIn the example above, we have a (somewhat simple!) tool, and we expose the\ntool through a launch function which is creating a main window. The crucial\npart is that the window is asking Qute to return the main application window\nrather than you relying on an application specific Ui.\n\nIn doing this, you can copy/paste the code from the example into Max, Maya or\nMotion Builder and you will get the same widget, and that widget will be \ncorrectly parented under that application, making your Ui incredibly portably\nand re-usable without an application specific layer.\n\n\n## Styling\n\nQute gives a convience function for applying stylesheets to Qt widgets. Crucually it also exposes a mechanism allowing you do define variables to be replaced within stylesheets. This helps when wanting to use the same values multiple times across a stylesheet.\n\nFor example, if we have a stylesheet such as:\n\n```css\nQWidget {\n    background-color: rgb(BG_COLOR);\n    color: rgb(TEXT_COLOR);\n}\n\nQLabel {\n    padding-top: 7px;\n    padding-bottom: 7px;\n    background-color: transparent;\n    color: rgb(TEXT_COLOR);\n}\n```\n\nThis can be assigned to a widget using:\n\n```python\nimport qute\n\nqute.applyStyle(\n    css_str,\n    apply_to=widget,\n    BG_COLOR='50, 50, 50',\n    TEXT_COLOR='255, 0, 0',\n)\n```\nIn this example we pass a CSS string and the widget we want to apply to. Any additional keywords will be used as search and replace elements. This is handy when wanting to change sections of your stylesheet easily. Your replacements can be numbers, strings or filepaths (just ensure your slashing is / and not \\\\). The ```space``` example stylesheet demonstrates this by using png files for widget backgrounds.\n\nEqually, you can pass the full path to a css/qss file too:\n\n```python\nqute.applyStyle(\n    '/usr/styles/my_style.qss',\n    widget,\n)\n```\n\nAlternatively you can have a library of style sheets and set the environment variable `QUTE_STYLE_PATH` to that location. By doing this you can pass the name of the style rather than the absolute path. Qute comes with one example stylesheet called `space` which can be used to demonstrate this as below:\n```python\nqute.applyStyle(\n    'space',\n    widget,\n)   \n```\n\nThis is an example of the space stylesheet:\n\n![alt text](https://github.com/mikemalinowski/qute/blob/master/docs/space_demo.png?raw=true)\n\n\n\n## Menu Generation\n\nGenerating menu's can be tedious and involve a lot of repetative code. In many cases a menu is made up of either actions, sseperators or sub-menus. \n\nEach of these are supported by the menu generation function ```qute.menuFromDictionary```. The format of the dictionary you provide must conform to:\n\n`{'Label': function}` or `{'Label': dict}` or `{'Label': None}`\n\nIf a function is given then the function is set as the callable when the item is clicked. If a dictionary is given as the value a submenu is generated (this is recusive, so you can nest menus). If the value is None then a Seperator will be added regardless of the key.\n\nHere is an example:\n\n```python\nimport qute\n\ndef foo():\n    print('calling foo')\n\ndef bar():\n    print('calling bar')\n\nmenu_definition = {\n    'Foo': foo,\n    '-': None,\n    'More': dict(bar=bar)\n}\n\nmenu = qute.menuFromDictionary(menu_definition)\n```\n\nIn this example we define some functions and add them as keys, we can then generate a QMenu from that dictionary. This is especially useful when you're dynamically generating menu from variable data.\n\nYou can also define icons for your menu. To utilise this mechanism your icons must have the same name as the label and end in .png. You can then define the path to the icons during the menu call as shown here:\n\n```python\nmenu = qute.menuFromDictionary(\n    structure=menu_definition,\n    icon_paths=[\n        os.path.dirname(__file__),\n    ]\n)\n```\n\n\n## Derive\n\nDerive is all about dynamically generating ui elements based on data types and being able to extract values from widgets without having to know what they are. This is particularly useful when generating ui elements on the fly without knowing what they are up front.\n\nA good example of this is the exposure of options or attributes on a class without knowing exactly what those options are. We can see an example of that here:\n\n```python\nimport qute\n\nclass Node:\n    \"\"\"\n    Define a base class for something\n    \"\"\"\n    \n    def __init__(self):\n        self.options=dict()\n\nclass Circle(Node):\n\n    def __init__(self):\n        self.options['radius'] = 5\n        self.options['closed'] = True\n   \nclass Quadtrilateral(Node):\n\n    def __init__(self):\n        self.options['force_rectangle']\n\ndef example_callback(*args, **kwargs):\n    print('In Callback')\n    \nnodes = [\n    Circle(),\n    Quadtrilateral(),\n    Quadtrilateral(),\n    Circle(),\n]\n\nfor node in nodes:\n    for option, value in node.options:\n    \n        # -- Blindly create a widget to represent the widget\n        widget = qute.deriveWidget(\n        value=value,\n        label=option,\n        )\n        \n        # -- Connect the change event of the widget\n        # -- to our callback - without knowing what \n        # -- the widget is or what to connect\n        qute.connectBlind(widget, example_callback)\n```\n\nWe can also ask for the value from a widget without knowing what the widget is. This can be done using:\n\n```python\nimport qute\n\nvalue = qute.deriveValue(widget)\n```\n\nThis mechanism makes it easier to create dynamic ui's, especially when you're trying to expose data which can be manipulated on code objects.\n\n\n\n## Compatability\n\nThis has been tested under Python 2.7.13 and Python 3.6.6 under both Windows and Ubuntu.\n\n\n## Contribute\n\nIf you would like to contribute thoughts, ideas, fixes or features please get in touch! mike@twisted.space", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikemalinowski/qute", "keywords": "qute qt pyside pyside2 pyqt", "license": "", "maintainer": "", "maintainer_email": "", "name": "qute", "package_url": "https://pypi.org/project/qute/", "platform": "", "project_url": "https://pypi.org/project/qute/", "project_urls": {"Homepage": "https://github.com/mikemalinowski/qute"}, "release_url": "https://pypi.org/project/qute/1.0.10/", "requires_dist": null, "requires_python": "", "summary": "A Qt.py extension which aims to expose additional helper utilities to Qt which are common place within coding projects.", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>#Overview</p>\n<p>Qute is a wrapped extension of Marcus Ottosson's Qt.py. The emphasis is on\nutilising the convience of Qt.py (allowing for use of PyQt, PySide and\nPySide2 seamlessly) whilst also exposing a set of common pieces of functionality\nwe tend to replicate and utilise in many places.</p>\n<p>#Key Features</p>\n<h2>General Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWidget</span><span class=\"p\">(</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QWidget</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyWidget</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># -- Create a layout and set it as the base layout. Use </span>\n        <span class=\"c1\"># -- qute to slim the layout - removing margins</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setLayout</span><span class=\"p\">(</span>\n            <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">slimify</span><span class=\"p\">(</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QVBoxLayout</span><span class=\"p\">())</span>\n        <span class=\"p\">)</span>\n        \n        <span class=\"c1\"># -- Create some widgets</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spinner</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QSpinBox</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QCheckBox</span><span class=\"p\">()</span>\n        \n        <span class=\"c1\"># -- Add these to our layout</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spinner</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">checkbox</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># -- Finally lets connect some signals and slots without</span>\n        <span class=\"c1\"># -- caring what it is</span>\n        <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">connectBlind</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spinner</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">)</span>\n        <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">connectBlind</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">checker</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'doing something...'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># -- Use qute to get or create the QApplication instance</span>\n    <span class=\"n\">q_app</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">qApp</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">MyWidget</span><span class=\"p\">()</span>\n    <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n    \n    <span class=\"n\">q_app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n</pre>\n<p>In this example we see some of the features of qute in use, but most importantly is that it is usable in environments using either PyQt, PySide or PySide2 (thanks to Qt.py), and then utilises the various helper functionality defined within qute which you can read about below.</p>\n<h1>Cross Application Support</h1>\n<p>This library is specifically intended for use when in environments where\nyou're actively trying to share/develop tools across multiple applications\nwhich support PyQt, PySide or PySide2.</p>\n<p>The premise is that you can request the main application window using\na common function regardless of the actual application - making it trivial\nto implement a tool which works in multiple host applications without any\nbespoke code.</p>\n<p>The current list of supported applications are:</p>\n<pre><code>* Native Python\n* Maya\n* 3dsmax\n* Motion Builder\n</code></pre>\n<p>Here is an example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyCrossApplicationTool</span><span class=\"p\">(</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QWidget</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyCrossApplicationTool</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setLayout</span><span class=\"p\">(</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QVBoxLayout</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QLabel</span><span class=\"p\">(</span><span class=\"s1\">'This tool will launch and parent under Max, Maya, Motion Builder or Pure Python'</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># -- This will return the running QApplication instance, or create</span>\n    <span class=\"c1\"># -- one if one is not present</span>\n    <span class=\"n\">q_app</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">qApp</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># -- Create a window and set its parent 'blindly' to what qute</span>\n    <span class=\"c1\"># -- resolves as the main window.</span>\n    <span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">QMainWindow</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">mainWindow</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># -- Assign our widget to the window</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">setCentralWidget</span><span class=\"p\">(</span><span class=\"n\">MyCrossApplicationTool</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">blocking</span><span class=\"p\">:</span>\n        <span class=\"n\">q_app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n\n<span class=\"n\">launch</span><span class=\"p\">()</span>\n</pre>\n<p>In the example above, we have a (somewhat simple!) tool, and we expose the\ntool through a launch function which is creating a main window. The crucial\npart is that the window is asking Qute to return the main application window\nrather than you relying on an application specific Ui.</p>\n<p>In doing this, you can copy/paste the code from the example into Max, Maya or\nMotion Builder and you will get the same widget, and that widget will be\ncorrectly parented under that application, making your Ui incredibly portably\nand re-usable without an application specific layer.</p>\n<h2>Styling</h2>\n<p>Qute gives a convience function for applying stylesheets to Qt widgets. Crucually it also exposes a mechanism allowing you do define variables to be replaced within stylesheets. This helps when wanting to use the same values multiple times across a stylesheet.</p>\n<p>For example, if we have a stylesheet such as:</p>\n<pre><span class=\"nt\">QWidget</span> <span class=\"p\">{</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"n\">BG_COLOR</span><span class=\"p\">);</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"n\">TEXT_COLOR</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">QLabel</span> <span class=\"p\">{</span>\n    <span class=\"k\">padding-top</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">padding-bottom</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n    <span class=\"k\">background-color</span><span class=\"p\">:</span> <span class=\"kc\">transparent</span><span class=\"p\">;</span>\n    <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"n\">TEXT_COLOR</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This can be assigned to a widget using:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n<span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">applyStyle</span><span class=\"p\">(</span>\n    <span class=\"n\">css_str</span><span class=\"p\">,</span>\n    <span class=\"n\">apply_to</span><span class=\"o\">=</span><span class=\"n\">widget</span><span class=\"p\">,</span>\n    <span class=\"n\">BG_COLOR</span><span class=\"o\">=</span><span class=\"s1\">'50, 50, 50'</span><span class=\"p\">,</span>\n    <span class=\"n\">TEXT_COLOR</span><span class=\"o\">=</span><span class=\"s1\">'255, 0, 0'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In this example we pass a CSS string and the widget we want to apply to. Any additional keywords will be used as search and replace elements. This is handy when wanting to change sections of your stylesheet easily. Your replacements can be numbers, strings or filepaths (just ensure your slashing is / and not \\). The <code>space</code> example stylesheet demonstrates this by using png files for widget backgrounds.</p>\n<p>Equally, you can pass the full path to a css/qss file too:</p>\n<pre><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">applyStyle</span><span class=\"p\">(</span>\n    <span class=\"s1\">'/usr/styles/my_style.qss'</span><span class=\"p\">,</span>\n    <span class=\"n\">widget</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Alternatively you can have a library of style sheets and set the environment variable <code>QUTE_STYLE_PATH</code> to that location. By doing this you can pass the name of the style rather than the absolute path. Qute comes with one example stylesheet called <code>space</code> which can be used to demonstrate this as below:</p>\n<pre><span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">applyStyle</span><span class=\"p\">(</span>\n    <span class=\"s1\">'space'</span><span class=\"p\">,</span>\n    <span class=\"n\">widget</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>   \n</pre>\n<p>This is an example of the space stylesheet:</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21d7c721eb56b4ef10754e0388fe2db47ac5d33d/68747470733a2f2f6769746875622e636f6d2f6d696b656d616c696e6f77736b692f717574652f626c6f622f6d61737465722f646f63732f73706163655f64656d6f2e706e673f7261773d74727565\"></p>\n<h2>Menu Generation</h2>\n<p>Generating menu's can be tedious and involve a lot of repetative code. In many cases a menu is made up of either actions, sseperators or sub-menus.</p>\n<p>Each of these are supported by the menu generation function <code>qute.menuFromDictionary</code>. The format of the dictionary you provide must conform to:</p>\n<p><code>{'Label': function}</code> or <code>{'Label': dict}</code> or <code>{'Label': None}</code></p>\n<p>If a function is given then the function is set as the callable when the item is clicked. If a dictionary is given as the value a submenu is generated (this is recusive, so you can nest menus). If the value is None then a Seperator will be added regardless of the key.</p>\n<p>Here is an example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'calling foo'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'calling bar'</span><span class=\"p\">)</span>\n\n<span class=\"n\">menu_definition</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'Foo'</span><span class=\"p\">:</span> <span class=\"n\">foo</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'More'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">menuFromDictionary</span><span class=\"p\">(</span><span class=\"n\">menu_definition</span><span class=\"p\">)</span>\n</pre>\n<p>In this example we define some functions and add them as keys, we can then generate a QMenu from that dictionary. This is especially useful when you're dynamically generating menu from variable data.</p>\n<p>You can also define icons for your menu. To utilise this mechanism your icons must have the same name as the label and end in .png. You can then define the path to the icons during the menu call as shown here:</p>\n<pre><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">menuFromDictionary</span><span class=\"p\">(</span>\n    <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">menu_definition</span><span class=\"p\">,</span>\n    <span class=\"n\">icon_paths</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Derive</h2>\n<p>Derive is all about dynamically generating ui elements based on data types and being able to extract values from widgets without having to know what they are. This is particularly useful when generating ui elements on the fly without knowing what they are up front.</p>\n<p>A good example of this is the exposure of options or attributes on a class without knowing exactly what those options are. We can see an example of that here:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Define a base class for something</span>\n<span class=\"sd\">    \"\"\"</span>\n    \n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Circle</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'radius'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'closed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n   \n<span class=\"k\">class</span> <span class=\"nc\">Quadtrilateral</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'force_rectangle'</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_callback</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'In Callback'</span><span class=\"p\">)</span>\n    \n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Circle</span><span class=\"p\">(),</span>\n    <span class=\"n\">Quadtrilateral</span><span class=\"p\">(),</span>\n    <span class=\"n\">Quadtrilateral</span><span class=\"p\">(),</span>\n    <span class=\"n\">Circle</span><span class=\"p\">(),</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">:</span>\n    \n        <span class=\"c1\"># -- Blindly create a widget to represent the widget</span>\n        <span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">deriveWidget</span><span class=\"p\">(</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">option</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        \n        <span class=\"c1\"># -- Connect the change event of the widget</span>\n        <span class=\"c1\"># -- to our callback - without knowing what </span>\n        <span class=\"c1\"># -- the widget is or what to connect</span>\n        <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">connectBlind</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"p\">,</span> <span class=\"n\">example_callback</span><span class=\"p\">)</span>\n</pre>\n<p>We can also ask for the value from a widget without knowing what the widget is. This can be done using:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qute</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">qute</span><span class=\"o\">.</span><span class=\"n\">deriveValue</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"p\">)</span>\n</pre>\n<p>This mechanism makes it easier to create dynamic ui's, especially when you're trying to expose data which can be manipulated on code objects.</p>\n<h2>Compatability</h2>\n<p>This has been tested under Python 2.7.13 and Python 3.6.6 under both Windows and Ubuntu.</p>\n<h2>Contribute</h2>\n<p>If you would like to contribute thoughts, ideas, fixes or features please get in touch! <a href=\"mailto:mike@twisted.space\">mike@twisted.space</a></p>\n\n          </div>"}, "last_serial": 5323517, "releases": {"0.0.0.0.0.0.0.0.0.1": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "cda248605c3a8abd8a8594be84f88ee7", "sha256": "85c50e3a8ff7884ac831c4936f420c60990f47e4b174d62a8a3b52720f3bfabb"}, "downloads": -1, "filename": "qute-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cda248605c3a8abd8a8594be84f88ee7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34253, "upload_time": "2019-03-21T20:22:37", "upload_time_iso_8601": "2019-03-21T20:22:37.083234Z", "url": "https://files.pythonhosted.org/packages/85/ff/0256e2dc687538e45f457d4b3dd35fc2e1fe152c7d92b2791f846ed2802f/qute-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "48288fa19258ec9106eb867d155cfc63", "sha256": "e10b734b5f55010a06c0101022cbf959f4cb653db414192a198020522d74f205"}, "downloads": -1, "filename": "qute-1.0.10.tar.gz", "has_sig": false, "md5_digest": "48288fa19258ec9106eb867d155cfc63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37727, "upload_time": "2019-05-27T19:24:25", "upload_time_iso_8601": "2019-05-27T19:24:25.323156Z", "url": "https://files.pythonhosted.org/packages/5d/f2/e4a7c4e6fa5f9b7aa18e20aac549757d06ef34c57d1b2e0c7ee372bf81fc/qute-1.0.10.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ccdbaf37110e8061071fac23b1fb08bc", "sha256": "55ab738e20c07a4b502a16d865beb609605709817ce2175fdc373e283d5a598a"}, "downloads": -1, "filename": "qute-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ccdbaf37110e8061071fac23b1fb08bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34253, "upload_time": "2019-03-22T06:27:29", "upload_time_iso_8601": "2019-03-22T06:27:29.261419Z", "url": "https://files.pythonhosted.org/packages/26/74/1c1dcdd9a81c639e6faea5fdb7be7ca1dff9639b6a12dc4eb144f5221c4f/qute-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bb39206536da4dac2a0df93c1614fe6b", "sha256": "1669fe7653535004401ab3adfa22605e2272406b25441b3234dc87b24ed6be8a"}, "downloads": -1, "filename": "qute-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bb39206536da4dac2a0df93c1614fe6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36466, "upload_time": "2019-03-23T21:35:26", "upload_time_iso_8601": "2019-03-23T21:35:26.708064Z", "url": "https://files.pythonhosted.org/packages/dd/00/8900256eafd6ef9012e8c86499e49a3adb47b8fce88ac0901c8fcfb8570e/qute-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9dac778c1266edbae05bf596f5a5e30c", "sha256": "46641efc5f66879878b56cf13ea177d357efb3c0b895ddb00afa9acf59e5a1d2"}, "downloads": -1, "filename": "qute-1.0.4.tar.gz", "has_sig": false, "md5_digest": "9dac778c1266edbae05bf596f5a5e30c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36513, "upload_time": "2019-03-25T21:05:24", "upload_time_iso_8601": "2019-03-25T21:05:24.051476Z", "url": "https://files.pythonhosted.org/packages/f1/c2/936b903b24c92aff150c0a3b282a5d37a5d517328013ebd549f384343761/qute-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "40f2271282133b517882880b14835404", "sha256": "56adfecdd6f705da3089c046acff9f43209ddadb229d845e04395c963c1622b3"}, "downloads": -1, "filename": "qute-1.0.5.tar.gz", "has_sig": false, "md5_digest": "40f2271282133b517882880b14835404", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37116, "upload_time": "2019-03-30T07:44:24", "upload_time_iso_8601": "2019-03-30T07:44:24.146195Z", "url": "https://files.pythonhosted.org/packages/f0/2a/26b883e7d1432afd498a55feca87ac0137d36776067f32ef2136413fae9d/qute-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "2cf1acdc04d269e088459f9a3b4da0d9", "sha256": "22e54bf2d6a1ee693ddfc1a72f6089f2a677574294c3c1bfc25c680649d61360"}, "downloads": -1, "filename": "qute-1.0.6.tar.gz", "has_sig": false, "md5_digest": "2cf1acdc04d269e088459f9a3b4da0d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37116, "upload_time": "2019-03-30T22:05:41", "upload_time_iso_8601": "2019-03-30T22:05:41.914159Z", "url": "https://files.pythonhosted.org/packages/50/9e/43c4dda36c74ca1feea708e0bfc2be9f66fede75c0dbb744aaf53ec71be1/qute-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "84e57e4a52e1882c4fd4fed754ab0045", "sha256": "5896fd18cded751d542431704adefae1c8c620e9a746f9f3c83ec8843e847a73"}, "downloads": -1, "filename": "qute-1.0.7.tar.gz", "has_sig": false, "md5_digest": "84e57e4a52e1882c4fd4fed754ab0045", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37103, "upload_time": "2019-03-30T22:13:50", "upload_time_iso_8601": "2019-03-30T22:13:50.960378Z", "url": "https://files.pythonhosted.org/packages/7e/b6/51c841a8306d5cb51e5ee4a6c2935ed0772cd65d9945b2bb5e1dc79a7235/qute-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "32efef7345d6dd9dc01d77463b5e861e", "sha256": "2043ffbcc91a287f976f66b559c906f59b739e5d8ca6078cf5aa2a3f7536cbd2"}, "downloads": -1, "filename": "qute-1.0.8.tar.gz", "has_sig": false, "md5_digest": "32efef7345d6dd9dc01d77463b5e861e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37107, "upload_time": "2019-03-30T22:33:45", "upload_time_iso_8601": "2019-03-30T22:33:45.152694Z", "url": "https://files.pythonhosted.org/packages/ca/a2/6627d12a4ebea2a697b41faf7d97fbc001b647c5cb89a4c35b6a98cac436/qute-1.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48288fa19258ec9106eb867d155cfc63", "sha256": "e10b734b5f55010a06c0101022cbf959f4cb653db414192a198020522d74f205"}, "downloads": -1, "filename": "qute-1.0.10.tar.gz", "has_sig": false, "md5_digest": "48288fa19258ec9106eb867d155cfc63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37727, "upload_time": "2019-05-27T19:24:25", "upload_time_iso_8601": "2019-05-27T19:24:25.323156Z", "url": "https://files.pythonhosted.org/packages/5d/f2/e4a7c4e6fa5f9b7aa18e20aac549757d06ef34c57d1b2e0c7ee372bf81fc/qute-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:15 2020"}