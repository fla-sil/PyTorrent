{"info": {"author": "Trevor Manz", "author_email": "trevor.j.manz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Science/Research", "Programming Language :: Python"], "description": "# deep_lincs\n\nA deep learning wrapper around Keras for [Lincs](http://www.lincsproject.org/) L1000 expression data.\n\nCheck out the documentation [here](https://deep-lincs.readthedocs.io/en/latest/).\n\n## Installation\n```bash\n$ pip install deep-lincs\n```\n\n## Getting started\nThe data for 1.3 million L1000 profiles are availabe [on GEO](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE92742). The script load_files.sh fetches the `Level 3` data along with all metadata available. The largest file is quite big (~50Gb) so please be patient.\n\n```bash\n$ git clone https://github.com/manzt/deep_lincs.git && cd deep_lincs\n$ source load_files.sh # download raw data from GEO\n$ cd notebooks \n$ jupyter lab # get started in a notebook \n```\n\n## L1000 Dataset\nThe `Dataset` class is built with a variety of methods to load, subset, filter, and combine expression and metadata. \n```python\nfrom deep_lincs import Dataset\n\n# Select samples \ncell_ids = [\"VCAP\", \"MCF7\", \"PC3\"]\npert_types = [\"trt_cp\", \"ctl_vehicle\", \"ctl_untrt\"]\n\n# Loading a Dataset\ndataset = Dataset.from_yaml(\"settings.yaml\", cell_id=cell_ids, pert_type=pert_types)\n\n# Normalizing the expression data\ndataset.normalize_by_gene(\"standard_scale\")\n\n# Chainable methods\nsubset = dataset.sample_rows(5000).filter_rows(pert_id=[\"ctl_vehicle\", \"ctl_untrt\"])\n```\n\n## Models\nModels interface with the `Dataset` class to make training and evaluating different arcitectures simple.\n\n\n### Single Classifier\n\n```python\nfrom deep_lincs.models import SingleClassifier\n\nmodel = SingleClassifier(dataset, target=\"cell_id\")\nmodel.prepare_tf_datasets(batch_size=64)\nmodel.compile_model([128, 128, 64, 32], dropout_rate=0.1)\nmodel.fit(epochs=10)\n\nmodel.evaluate() # Evaluates on isntance test Dataset\nmodel.evaluate(subset) # Evalutates model on user-defined Dataset\n```\n\n### Multiple Classifier\n\n```python\nfrom deep_lincs.models import MutliClassifier\n\ntargets = [\"cell_id\", \"pert_type\"]\nmodel = MutliClassifier(dataset, target=targets)\nmodel.prepare_tf_datasets(batch_size=64)\nmodel.compile_model(hidden_layers=[128, 128, 64, 32])\nmodel.fit(epochs=10)\n\nmodel.evaluate() # Evaluates on isntance test Dataset\nmodel.evaluate(subset) # Evalutates model on user-defined Dataset\n```\n\n### Autoencoder\n\n```python\nfrom deep_lincs.models import AutoEncoder\n\nmodel = AutoEncoder(dataset)\nmodel.prepare_tf_datasets(batch_size=64)\nmodel.compile_model(hidden_layers=[128, 32, 128], l1_reg=0.01)\nmodel.fit(epochs=10)\n\nmodel.encoder.predict() # Gives encodings for instance test Dataset\nmodel.encoder.predict(subset) # Gives encodings for user-defined Dataset\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/manzt/deep_lincs", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://deep-lincs.readthedocs.io", "keywords": "LINCS L1000 gene expression", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "deep-lincs", "package_url": "https://pypi.org/project/deep-lincs/", "platform": "", "project_url": "https://pypi.org/project/deep-lincs/", "project_urls": {"Download": "https://github.com/manzt/deep_lincs", "Homepage": "https://deep-lincs.readthedocs.io"}, "release_url": "https://pypi.org/project/deep-lincs/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A framework for deep learning with LINCS L1000 Data", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>deep_lincs</h1>\n<p>A deep learning wrapper around Keras for <a href=\"http://www.lincsproject.org/\" rel=\"nofollow\">Lincs</a> L1000 expression data.</p>\n<p>Check out the documentation <a href=\"https://deep-lincs.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<pre>$ pip install deep-lincs\n</pre>\n<h2>Getting started</h2>\n<p>The data for 1.3 million L1000 profiles are availabe <a href=\"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE92742\" rel=\"nofollow\">on GEO</a>. The script load_files.sh fetches the <code>Level 3</code> data along with all metadata available. The largest file is quite big (~50Gb) so please be patient.</p>\n<pre>$ git clone https://github.com/manzt/deep_lincs.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> deep_lincs\n$ <span class=\"nb\">source</span> load_files.sh <span class=\"c1\"># download raw data from GEO</span>\n$ <span class=\"nb\">cd</span> notebooks \n$ jupyter lab <span class=\"c1\"># get started in a notebook </span>\n</pre>\n<h2>L1000 Dataset</h2>\n<p>The <code>Dataset</code> class is built with a variety of methods to load, subset, filter, and combine expression and metadata.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deep_lincs</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n\n<span class=\"c1\"># Select samples </span>\n<span class=\"n\">cell_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"VCAP\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MCF7\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PC3\"</span><span class=\"p\">]</span>\n<span class=\"n\">pert_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"trt_cp\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ctl_vehicle\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ctl_untrt\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Loading a Dataset</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s2\">\"settings.yaml\"</span><span class=\"p\">,</span> <span class=\"n\">cell_id</span><span class=\"o\">=</span><span class=\"n\">cell_ids</span><span class=\"p\">,</span> <span class=\"n\">pert_type</span><span class=\"o\">=</span><span class=\"n\">pert_types</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Normalizing the expression data</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">normalize_by_gene</span><span class=\"p\">(</span><span class=\"s2\">\"standard_scale\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Chainable methods</span>\n<span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">sample_rows</span><span class=\"p\">(</span><span class=\"mi\">5000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_rows</span><span class=\"p\">(</span><span class=\"n\">pert_id</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ctl_vehicle\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ctl_untrt\"</span><span class=\"p\">])</span>\n</pre>\n<h2>Models</h2>\n<p>Models interface with the <code>Dataset</code> class to make training and evaluating different arcitectures simple.</p>\n<h3>Single Classifier</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deep_lincs.models</span> <span class=\"kn\">import</span> <span class=\"n\">SingleClassifier</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SingleClassifier</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s2\">\"cell_id\"</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">prepare_tf_datasets</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile_model</span><span class=\"p\">([</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">],</span> <span class=\"n\">dropout_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span> <span class=\"c1\"># Evaluates on isntance test Dataset</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span> <span class=\"c1\"># Evalutates model on user-defined Dataset</span>\n</pre>\n<h3>Multiple Classifier</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deep_lincs.models</span> <span class=\"kn\">import</span> <span class=\"n\">MutliClassifier</span>\n\n<span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"cell_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pert_type\"</span><span class=\"p\">]</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MutliClassifier</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">targets</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">prepare_tf_datasets</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile_model</span><span class=\"p\">(</span><span class=\"n\">hidden_layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span> <span class=\"c1\"># Evaluates on isntance test Dataset</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span> <span class=\"c1\"># Evalutates model on user-defined Dataset</span>\n</pre>\n<h3>Autoencoder</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deep_lincs.models</span> <span class=\"kn\">import</span> <span class=\"n\">AutoEncoder</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">AutoEncoder</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">prepare_tf_datasets</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile_model</span><span class=\"p\">(</span><span class=\"n\">hidden_layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">],</span> <span class=\"n\">l1_reg</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">()</span> <span class=\"c1\"># Gives encodings for instance test Dataset</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">)</span> <span class=\"c1\"># Gives encodings for user-defined Dataset</span>\n</pre>\n\n          </div>"}, "last_serial": 5659202, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3335f06a34c8a466ba19c9550ed9b694", "sha256": "ad75495be460b2a545cc732e67c94282f81df942b8cfda96585c73f0c8cb4a8b"}, "downloads": -1, "filename": "deep_lincs-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3335f06a34c8a466ba19c9550ed9b694", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3713, "upload_time": "2019-08-03T16:11:58", "upload_time_iso_8601": "2019-08-03T16:11:58.951009Z", "url": "https://files.pythonhosted.org/packages/e2/13/338f29ee06ad1c72a381ec22d4e8b74c5e55ae926cce82e292b9affd2b5a/deep_lincs-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "778063a9f0a0e96af1561f5a9e6834b4", "sha256": "46d09583316f4d7ede4da7b93e40d77769a6638212412d45aad5bebcbebf43b9"}, "downloads": -1, "filename": "deep_lincs-0.0.2.tar.gz", "has_sig": false, "md5_digest": "778063a9f0a0e96af1561f5a9e6834b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20495, "upload_time": "2019-08-03T21:46:33", "upload_time_iso_8601": "2019-08-03T21:46:33.180057Z", "url": "https://files.pythonhosted.org/packages/62/ce/5fb140b8c658b13409d1dcb9991f9287556ca6231d97916f52741430bdda/deep_lincs-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fde2c2ffaf6c167a2c762679d841a7c8", "sha256": "36dd7e6a70d123b8e548d416de30825643c21565e7b277419d8609e4331a086b"}, "downloads": -1, "filename": "deep_lincs-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fde2c2ffaf6c167a2c762679d841a7c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30237, "upload_time": "2019-08-10T10:38:36", "upload_time_iso_8601": "2019-08-10T10:38:36.037034Z", "url": "https://files.pythonhosted.org/packages/44/dd/718eb6a672a95651c7b228cbdeea4c63aaa7ad8dafbb227c08590bb8aed6/deep_lincs-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e37fadc383410d299a33b7e841ff2e", "sha256": "bcaed96605c8fc42a5e6112b648bb3152f4e9fa007a4079f4376311f4f48de51"}, "downloads": -1, "filename": "deep_lincs-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e5e37fadc383410d299a33b7e841ff2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22222, "upload_time": "2019-08-10T10:38:37", "upload_time_iso_8601": "2019-08-10T10:38:37.854992Z", "url": "https://files.pythonhosted.org/packages/6c/08/46d796308fd2e80c4d41b4c0806f2b504108306b87115222501166ec0ea6/deep_lincs-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fde2c2ffaf6c167a2c762679d841a7c8", "sha256": "36dd7e6a70d123b8e548d416de30825643c21565e7b277419d8609e4331a086b"}, "downloads": -1, "filename": "deep_lincs-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fde2c2ffaf6c167a2c762679d841a7c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30237, "upload_time": "2019-08-10T10:38:36", "upload_time_iso_8601": "2019-08-10T10:38:36.037034Z", "url": "https://files.pythonhosted.org/packages/44/dd/718eb6a672a95651c7b228cbdeea4c63aaa7ad8dafbb227c08590bb8aed6/deep_lincs-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e37fadc383410d299a33b7e841ff2e", "sha256": "bcaed96605c8fc42a5e6112b648bb3152f4e9fa007a4079f4376311f4f48de51"}, "downloads": -1, "filename": "deep_lincs-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e5e37fadc383410d299a33b7e841ff2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22222, "upload_time": "2019-08-10T10:38:37", "upload_time_iso_8601": "2019-08-10T10:38:37.854992Z", "url": "https://files.pythonhosted.org/packages/6c/08/46d796308fd2e80c4d41b4c0806f2b504108306b87115222501166ec0ea6/deep_lincs-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:23 2020"}