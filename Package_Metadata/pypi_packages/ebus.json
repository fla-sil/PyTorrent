{"info": {"author": "Abi", "author_email": "abi@singiro.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5"], "description": "# ebus\n\n**ebus** is a minimalistic event bus for python. It does not need any \ninitialization or sequence for register or raise events. \n\nThere are two concepts inside, events and handlers. The subscribers register \na handler for a type of event, that can be any type actually, then they recieve a signal when a publisher\nemits this signal. \n\n**ebus** accepts to emit the signal if there is no subscriber. However,\nif you want to handle the events correctly, you should register you handlers\nbefore you raise the event.\n\n## Installation\n\nThe easy way to install package is to use pip:\n\n```bash\nsudo pip install ebus\n```\n\nAlternatively, you can download it or clone it directly from github and then type:\n\n```bash\ngit clone https://github.com/abisxir/ebus.git\ncd ebus\nsudo python setup.py install\n```\n\n## Usage\n\nThe simple way is just like this, define your event, register them using handle decorator \nand emit your events when it is required:\n\n```python\nimport ebus\n\n# This can be anything\nclass MyEvent:\n    def __init__(self, message):\n        self.message = message\n\n# Handlers can listen to any type\n@ebus.handle(MyEvent)\nasync def handle_my_event(e: MyEvent):\n    print(e.message)\n\n# When this call, all registered handlers will run\nawait ebus.emit_async(MyEvent('My async event happened.'))\n```\n\nIf you like to handle it in synchronous way, **ebus** will take care of that also: \n\n```python\n@ebus.handle(MyEvent)\ndef handle_my_event_sync(e: MyEvent):\n    print('Handle the event in sync mode:', e.message)\n\nebus.emit(MyEvent('My event happened.'))\n```\n\nThere is also an event context provided to pass data to the other events or stop the chain:\n\n```python\n@ebus.handle(MyEvent)\ndef handle_first(e: MyEvent, ctx: ebus.EventContext):\n    print('I add something to context of ', e.message)\n    # Here we can attach any information to context, the next handler will get it.\n    ctx['extra'] = 'Extra info can be anything'\n\n@ebus.handle(MyEvent)\ndef handle_second(e: MyEvent, ctx: ebus.EventContext):\n    # Here we get the extra information\n    print('There is something for me in ctx [{}].'.format(ctx['extra']))\n    # We add another information to context\n    ctx['something_else'] = 12\n\n@ebus.handle(MyEvent)\ndef handle_third(e: MyEvent, ctx: ebus.EventContext):\n    print('If something else[{}] is less than 10 I will stop.'.format(ctx['something_else']))\n    # It will stop if something_else is less than 10\n    if ctx['something_else'] < 10:\n        ctx.stop()\n\n@ebus.handle(MyEvent)\ndef handle_last(e: MyEvent, ctx: ebus.EventContext):\n    # We will never reach here to print this, as long as we stop the event chain\n    print('Never see this!!!, event process stopped.')\n\nebus.emit(MyEvent('My event happened.'))\n```\n\nYou can also use **register_handler** to register event handlers:\n\n```python\ndef handle_my_event(e: MyEvent):\n    print(e.message)\n\n# This will register the event handler.\nebus.add_handler(MyEvent, handle_my_event)\n\n# Will run all the handlers registered for this event.\nebus.emit(MyEvent('Test adding handler'))\n```\n\nAlso **ebus** prevents add a handler twice, it just ignores the second one.\n\n```python\ndef handle_my_event(e: MyEvent):\n    print(e.message)\n\n# The first one registers correctly\nebus.add_handler(MyEvent, handle_my_event)\n\n# This will get ignored by ebus\nebus.add_handler(MyEvent, handle_my_event)\n\nebus.emit(MyEvent('My event happened.'))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ebus/0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ebus", "keywords": "event bus", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ebus", "package_url": "https://pypi.org/project/ebus/", "platform": "any", "project_url": "https://pypi.org/project/ebus/", "project_urls": {"Download": "https://github.com/ebus/0.1.0.tar.gz", "Homepage": "https://github.com/ebus"}, "release_url": "https://pypi.org/project/ebus/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "ebus - Event bus", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ebus</h1>\n<p><strong>ebus</strong> is a minimalistic event bus for python. It does not need any\ninitialization or sequence for register or raise events.</p>\n<p>There are two concepts inside, events and handlers. The subscribers register\na handler for a type of event, that can be any type actually, then they recieve a signal when a publisher\nemits this signal.</p>\n<p><strong>ebus</strong> accepts to emit the signal if there is no subscriber. However,\nif you want to handle the events correctly, you should register you handlers\nbefore you raise the event.</p>\n<h2>Installation</h2>\n<p>The easy way to install package is to use pip:</p>\n<pre>sudo pip install ebus\n</pre>\n<p>Alternatively, you can download it or clone it directly from github and then type:</p>\n<pre>git clone https://github.com/abisxir/ebus.git\n<span class=\"nb\">cd</span> ebus\nsudo python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>The simple way is just like this, define your event, register them using handle decorator\nand emit your events when it is required:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ebus</span>\n\n<span class=\"c1\"># This can be anything</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyEvent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n\n<span class=\"c1\"># Handlers can listen to any type</span>\n<span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_my_event</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># When this call, all registered handlers will run</span>\n<span class=\"k\">await</span> <span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">emit_async</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">(</span><span class=\"s1\">'My async event happened.'</span><span class=\"p\">))</span>\n</pre>\n<p>If you like to handle it in synchronous way, <strong>ebus</strong> will take care of that also:</p>\n<pre><span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_my_event_sync</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Handle the event in sync mode:'</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">(</span><span class=\"s1\">'My event happened.'</span><span class=\"p\">))</span>\n</pre>\n<p>There is also an event context provided to pass data to the other events or stop the chain:</p>\n<pre><span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_first</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">EventContext</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I add something to context of '</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Here we can attach any information to context, the next handler will get it.</span>\n    <span class=\"n\">ctx</span><span class=\"p\">[</span><span class=\"s1\">'extra'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Extra info can be anything'</span>\n\n<span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_second</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">EventContext</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Here we get the extra information</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'There is something for me in ctx [</span><span class=\"si\">{}</span><span class=\"s1\">].'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">[</span><span class=\"s1\">'extra'</span><span class=\"p\">]))</span>\n    <span class=\"c1\"># We add another information to context</span>\n    <span class=\"n\">ctx</span><span class=\"p\">[</span><span class=\"s1\">'something_else'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n\n<span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_third</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">EventContext</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'If something else[</span><span class=\"si\">{}</span><span class=\"s1\">] is less than 10 I will stop.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">[</span><span class=\"s1\">'something_else'</span><span class=\"p\">]))</span>\n    <span class=\"c1\"># It will stop if something_else is less than 10</span>\n    <span class=\"k\">if</span> <span class=\"n\">ctx</span><span class=\"p\">[</span><span class=\"s1\">'something_else'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@ebus</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_last</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">:</span> <span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">EventContext</span><span class=\"p\">):</span>\n    <span class=\"c1\"># We will never reach here to print this, as long as we stop the event chain</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Never see this!!!, event process stopped.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">(</span><span class=\"s1\">'My event happened.'</span><span class=\"p\">))</span>\n</pre>\n<p>You can also use <strong>register_handler</strong> to register event handlers:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_my_event</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will register the event handler.</span>\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">handle_my_event</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Will run all the handlers registered for this event.</span>\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">(</span><span class=\"s1\">'Test adding handler'</span><span class=\"p\">))</span>\n</pre>\n<p>Also <strong>ebus</strong> prevents add a handler twice, it just ignores the second one.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_my_event</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">MyEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The first one registers correctly</span>\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">handle_my_event</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will get ignored by ebus</span>\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">,</span> <span class=\"n\">handle_my_event</span><span class=\"p\">)</span>\n\n<span class=\"n\">ebus</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">MyEvent</span><span class=\"p\">(</span><span class=\"s1\">'My event happened.'</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 7082814, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "dc3383e8d5dd69252e39fd56e686f46a", "sha256": "2602d644f064fde8e57317908e40d10fd8cdad73054b1b56fc5c5bfe456772cb"}, "downloads": -1, "filename": "ebus-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dc3383e8d5dd69252e39fd56e686f46a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4041, "upload_time": "2020-04-22T13:55:05", "upload_time_iso_8601": "2020-04-22T13:55:05.706580Z", "url": "https://files.pythonhosted.org/packages/81/8e/7abd03dafebabad1a401d148078f01fe6e7c7ba339117d8aa90b4ced7aa8/ebus-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d6fb9579b814815efca27d65f0a69fc4", "sha256": "08c4f5b7c10d3037527b2a50c9022e63cf9a8287952b052330278611a5bae1d7"}, "downloads": -1, "filename": "ebus-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6fb9579b814815efca27d65f0a69fc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4077, "upload_time": "2020-04-23T08:52:54", "upload_time_iso_8601": "2020-04-23T08:52:54.801203Z", "url": "https://files.pythonhosted.org/packages/89/d4/674a74f4fbcc84dc9ef90016d9869e3b2c8a1b361225202df89c6598d6d6/ebus-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9d7c3fba0e9dede5e4aaa436896cd4", "sha256": "068de83f26394afe0ba7ab7cf03afbffc6101cee3e741c696db34631431d5162"}, "downloads": -1, "filename": "ebus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ef9d7c3fba0e9dede5e4aaa436896cd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3944, "upload_time": "2020-04-23T08:52:55", "upload_time_iso_8601": "2020-04-23T08:52:55.830493Z", "url": "https://files.pythonhosted.org/packages/53/f7/9136d6293f8b5213bbd6706761961e85c5d08b4de341c21b8cb7f70b7721/ebus-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6fb9579b814815efca27d65f0a69fc4", "sha256": "08c4f5b7c10d3037527b2a50c9022e63cf9a8287952b052330278611a5bae1d7"}, "downloads": -1, "filename": "ebus-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6fb9579b814815efca27d65f0a69fc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4077, "upload_time": "2020-04-23T08:52:54", "upload_time_iso_8601": "2020-04-23T08:52:54.801203Z", "url": "https://files.pythonhosted.org/packages/89/d4/674a74f4fbcc84dc9ef90016d9869e3b2c8a1b361225202df89c6598d6d6/ebus-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9d7c3fba0e9dede5e4aaa436896cd4", "sha256": "068de83f26394afe0ba7ab7cf03afbffc6101cee3e741c696db34631431d5162"}, "downloads": -1, "filename": "ebus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ef9d7c3fba0e9dede5e4aaa436896cd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3944, "upload_time": "2020-04-23T08:52:55", "upload_time_iso_8601": "2020-04-23T08:52:55.830493Z", "url": "https://files.pythonhosted.org/packages/53/f7/9136d6293f8b5213bbd6706761961e85c5d08b4de341c21b8cb7f70b7721/ebus-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:07 2020"}