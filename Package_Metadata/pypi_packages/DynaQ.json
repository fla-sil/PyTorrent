{"info": {"author": "Claudio Driussi", "author_email": "claudio.driussi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Software Development :: Build Tools"], "description": "=====\r\n        DynaQ\r\n        =====\r\n        \r\n        This project is at beginning state, many things are to do but the first step\r\n        is done, it will create object for SQLAlchemy\r\n        \r\n        \r\n        What is\r\n        -------\r\n        \r\n        DynaQ is a system that read yaml files (structured as the system require), and\r\n        dynamically generate the orm classes for SQLAlchemy.\r\n        \r\n        \r\n        Why\r\n        ---\r\n        \r\n        SQLAlchemy knows only informations strictly related to the database structure\r\n        and doesn't store other metadata informations. In the last releases every \r\n        object hast the \"info\" variable, but infos are not related in a coordinated way.\r\n        \r\n        DynaQ let to store in a Database definition also semantic informations about\r\n        objects of database and informations that can be used to handle data by\r\n        applications. The use of yaml files give a clean and readable way to project \r\n        the database and let to store meta informations and comments useful for the \r\n        programmer.\r\n        \r\n        The types are defined in abstract and hierarchical way so field can be \r\n        categorized well and changes to the type are consistent for every fields of the\r\n        same type.\r\n        \r\n        What is lost\r\n        ------------\r\n        \r\n        DynaQ dynamically generate SQLAlchemy classes, so it's natural a simplification\r\n        a loss of functionality and versatility. Thanks to Python power and versatility,\r\n        it's easy to add some of the not provided capabilities.\r\n        \r\n        Anyway some abilities are loss:\r\n        \r\n        - **Compound primary keys**: DynaQ support only single field primary keys\r\n        - **Compound custom types**: SQLAlchemy types must have only a single field.\r\n        - **Complex relations**: There are no specific logic for many to many and one to\r\n          one relations. DynaQ supports well One to Many relation.\r\n        - **Many minor abilities**: Many functions are not yet implemented, but they are\r\n          not structural so they may be implemented in the future.\r\n        \r\n        \r\n        What is gained\r\n        --------------\r\n        \r\n        Some benefits of DynaQ are:\r\n        \r\n        - The definition of database in yaml files is clear, readable and less error \r\n          prone, the types are abstract and helps the classification of fields.\r\n        - In the yaml files are stored information not strictly referred to database\r\n          engine and let to store comments and properties useful for application \r\n          development.\r\n        - DynaQ will be improved with functionalities useful for application \r\n          development such query builder, sets of records handling, CRUD back end \r\n          facilities and more.\r\n        \r\n        \r\n        What is to do\r\n        -------------\r\n        \r\n        Many things, first of all some minor improvements such as __repr__ method \r\n        automation, better One to Many handling and so on.\r\n        \r\n        Then some mayor improvements will be a query builder and CRUD UI interfaces.\r\n        But these functionalities will be added when required by other projects that\r\n        I'm thinking on now.\r\n        \r\n        At the moment the yaml format is not well documented because is not complete\r\n        and may be changed and improved, please look at the \"test\" directory for \r\n        samples and tests.\r\n        \r\n        A user flendly DB system need an automatic restructure facility for simple\r\n        adding or deleting of fields, Alembic provide all API to do this for simple\r\n        situations.\r\n        \r\n        DynaQ is a part of bigger project which will be a complete framework for the\r\n        development of business application in web environment that act as desktop \r\n        replacement. ASAP I will publish links to the other parts of project.\r\n        \r\n        Are you interested?\r\n        -------------------\r\n        \r\n        I don't know how much time I can spend to this project because it depends from\r\n        other projects. But if you are interested please send me a mail we can decide\r\n        how you can participate.\r\n        \r\n        \r\n        Conclusion\r\n        ----------\r\n        \r\n        This packages is tested only on Python 2.7 environment, let me know if it works\r\n        on Python 3.* too.\r\n        \r\n        At the end I will apologize for my english, i hope it's not so terrible, but I\r\n        am not english speaker.\r\n        \r\n        Kind regards\r\n        \r\n        Claudio Driussi", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/claudiodriussi/DynaQ", "keywords": "SQLAlchemy dynamic database yaml", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "DynaQ", "package_url": "https://pypi.org/project/DynaQ/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/DynaQ/", "project_urls": {"Homepage": "https://github.com/claudiodriussi/DynaQ"}, "release_url": "https://pypi.org/project/DynaQ/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Dynamic creation of SQLAlchemy orm objects from YAML files", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            =====\n<br>        DynaQ\n<br>        =====\n<br>        \n<br>        This project is at beginning state, many things are to do but the first step\n<br>        is done, it will create object for SQLAlchemy\n<br>        \n<br>        \n<br>        What is\n<br>        -------\n<br>        \n<br>        DynaQ is a system that read yaml files (structured as the system require), and\n<br>        dynamically generate the orm classes for SQLAlchemy.\n<br>        \n<br>        \n<br>        Why\n<br>        ---\n<br>        \n<br>        SQLAlchemy knows only informations strictly related to the database structure\n<br>        and doesn't store other metadata informations. In the last releases every \n<br>        object hast the \"info\" variable, but infos are not related in a coordinated way.\n<br>        \n<br>        DynaQ let to store in a Database definition also semantic informations about\n<br>        objects of database and informations that can be used to handle data by\n<br>        applications. The use of yaml files give a clean and readable way to project \n<br>        the database and let to store meta informations and comments useful for the \n<br>        programmer.\n<br>        \n<br>        The types are defined in abstract and hierarchical way so field can be \n<br>        categorized well and changes to the type are consistent for every fields of the\n<br>        same type.\n<br>        \n<br>        What is lost\n<br>        ------------\n<br>        \n<br>        DynaQ dynamically generate SQLAlchemy classes, so it's natural a simplification\n<br>        a loss of functionality and versatility. Thanks to Python power and versatility,\n<br>        it's easy to add some of the not provided capabilities.\n<br>        \n<br>        Anyway some abilities are loss:\n<br>        \n<br>        - **Compound primary keys**: DynaQ support only single field primary keys\n<br>        - **Compound custom types**: SQLAlchemy types must have only a single field.\n<br>        - **Complex relations**: There are no specific logic for many to many and one to\n<br>          one relations. DynaQ supports well One to Many relation.\n<br>        - **Many minor abilities**: Many functions are not yet implemented, but they are\n<br>          not structural so they may be implemented in the future.\n<br>        \n<br>        \n<br>        What is gained\n<br>        --------------\n<br>        \n<br>        Some benefits of DynaQ are:\n<br>        \n<br>        - The definition of database in yaml files is clear, readable and less error \n<br>          prone, the types are abstract and helps the classification of fields.\n<br>        - In the yaml files are stored information not strictly referred to database\n<br>          engine and let to store comments and properties useful for application \n<br>          development.\n<br>        - DynaQ will be improved with functionalities useful for application \n<br>          development such query builder, sets of records handling, CRUD back end \n<br>          facilities and more.\n<br>        \n<br>        \n<br>        What is to do\n<br>        -------------\n<br>        \n<br>        Many things, first of all some minor improvements such as __repr__ method \n<br>        automation, better One to Many handling and so on.\n<br>        \n<br>        Then some mayor improvements will be a query builder and CRUD UI interfaces.\n<br>        But these functionalities will be added when required by other projects that\n<br>        I'm thinking on now.\n<br>        \n<br>        At the moment the yaml format is not well documented because is not complete\n<br>        and may be changed and improved, please look at the \"test\" directory for \n<br>        samples and tests.\n<br>        \n<br>        A user flendly DB system need an automatic restructure facility for simple\n<br>        adding or deleting of fields, Alembic provide all API to do this for simple\n<br>        situations.\n<br>        \n<br>        DynaQ is a part of bigger project which will be a complete framework for the\n<br>        development of business application in web environment that act as desktop \n<br>        replacement. ASAP I will publish links to the other parts of project.\n<br>        \n<br>        Are you interested?\n<br>        -------------------\n<br>        \n<br>        I don't know how much time I can spend to this project because it depends from\n<br>        other projects. But if you are interested please send me a mail we can decide\n<br>        how you can participate.\n<br>        \n<br>        \n<br>        Conclusion\n<br>        ----------\n<br>        \n<br>        This packages is tested only on Python 2.7 environment, let me know if it works\n<br>        on Python 3.* too.\n<br>        \n<br>        At the end I will apologize for my english, i hope it's not so terrible, but I\n<br>        am not english speaker.\n<br>        \n<br>        Kind regards\n<br>        \n<br>        Claudio Driussi\n          </div>"}, "last_serial": 1223724, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "28f6d19465d3fd3e3339109024fd4969", "sha256": "cf1a6df9462c96de7ea31532e46fb662ad8bd18f50f0d8acf08c107e3ca736b2"}, "downloads": -1, "filename": "DynaQ-0.1.0.zip", "has_sig": false, "md5_digest": "28f6d19465d3fd3e3339109024fd4969", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26803, "upload_time": "2014-09-14T15:10:49", "upload_time_iso_8601": "2014-09-14T15:10:49.805695Z", "url": "https://files.pythonhosted.org/packages/4e/2c/310675bc54f8ab7015e6d09165e80d71814991a0c828010168e7d5ee01cb/DynaQ-0.1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28f6d19465d3fd3e3339109024fd4969", "sha256": "cf1a6df9462c96de7ea31532e46fb662ad8bd18f50f0d8acf08c107e3ca736b2"}, "downloads": -1, "filename": "DynaQ-0.1.0.zip", "has_sig": false, "md5_digest": "28f6d19465d3fd3e3339109024fd4969", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26803, "upload_time": "2014-09-14T15:10:49", "upload_time_iso_8601": "2014-09-14T15:10:49.805695Z", "url": "https://files.pythonhosted.org/packages/4e/2c/310675bc54f8ab7015e6d09165e80d71814991a0c828010168e7d5ee01cb/DynaQ-0.1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:48:39 2020"}