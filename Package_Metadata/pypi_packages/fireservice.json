{"info": {"author": "Kaustubh Pratap Chand", "author_email": "contact@kausalitylabs.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# FireService\n\nFireService is a simple library to create Python Services.\n\n* Declarative input fields.\n* Input validations.\n* Immutable fields.\n* Execution callbacks.\n* Less biolerplate.\n* Works with native Python objects wherever possible.\n* Extensible with custom field types and validators.\n* Provides an elegant superstructure for classes which work on any input.\n\n## Installation\n\nTo install FireService using pip, run: ```pip install fireservice```\n\nTo install FireService using pipenv, run: ```pipenv install fireservice```\n\n\n## Basic Usage\n\n```python\nfrom fireservice import IntegerField, StringField, FireService\nfrom fireservice.exceptions import SkipError, ValidationError\n\n\nCRAWLED_DB = []\n\ndef page_name_validator(name, value):\n    if not value.endswith('.html'):\n        raise ValidationError(name, 'I only know html pages!')\n\n\nclass Crawler(FireService):\n    # All fields are required by default\n    user_id = IntegerField(min_value=1)\n    page_name = StringField(validators=[page_name_validator])\n\n    def url(self):\n        # Fields are directly accessible using instance __dict__\n        return 'http://example.com/{}/{}'.format(self.user_id, self.page_name)\n\n    def pre_fire(self):\n        if self.url() in CRAWLED_DB:\n            # Control directly goes to post_fire method\n            raise SkipError('Page already crawled!')\n\n    def fire(self, **kwargs):\n        CRAWLED_DB.append(self.url())\n\n    def post_fire(self, fired, exc):\n        if fired:\n            print('I crawled!')\n        else:\n            print('I skipped crawling because: ', exc)\n\n\ncrawler = Crawler()\ncrawler.call({\n    'user_id': 1,\n    'page_name': 'about.html'\n})\n\n# Values are stored in native python types wherever possible:\nprint(type(crawler.user_id), type(crawler.page_name))  # <class 'int'> <class 'str'>\n\n# Raises ModificationError as all Fields are immutable\ncrawler.user_id = 2 \n```\n\nA slightly convoluted example to show nested field types:\n\n```python\nclass Service(FireService):\n    a = ListField(ListField(ListField(CharacterField())))\n\n    def fire(self, **kwargs):\n        print(self.a)\n\n\ns = Service()\ns.call({\n    'a': [[['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]]\n})\n\n```\n\n\n## What is a Service?\n\nServices are a part of the domain model which performs some business logic. Usually they work on a set of inputs and change some state or return a computed value. In languages like Python which are not type safe, input validation and a common interface for programs which work on dynamic inputs could be an issue.\n\nSome reading resources :\n* https://en.wikipedia.org/wiki/Service_layer_pattern\n* https://www.martinfowler.com/bliki/AnemicDomainModel.html\n\n\n## Docs\n\nView the Docs at: https://kpchand.github.io/fireservice/.\nIf redirection fails, then directly go [here](https://kpchand.github.io/fireservice/fireservice/index.html).\n\n\n## Extending FireService\n\nWe can also create custom fields. Suppose our application takes user ID with the pattern *xxx-yyy-zzz*. We can create a `StringField ` and use a custom *validator*. But it would be more convenient & declarative if we had a `Field` type which did this validation by default. Here is an example of such an implementation:\n\n\n```python\nclass IDField(StringField):\n    \"\"\"A Field which takes input in the pattern xxx-yyy-zzz.\n    \"\"\"\n    def default_validator(self, value):\n        # Use StringField validator to validate str\n        super().default_validator(value)\n        value = value.split('-')\n        if len(value) != 3 or not all([len(v) == 3 for v in value]):\n            raise ValidationError(self.name, 'Improper format')\n\n\nclass Service(FireService):\n    user_id = IDField()\n\n    def fire(self, **kwargs):\n        print('user_id: ', self.user_id)\n\n\ns = Service()\ns.call({\n    'user_id': 'foo-bar-baz'\n    }\n)\n```\n\n\n## Inspiration\n\nFireService was inspired from [django-service-objects](https://github.com/mixxorz/django-service-objects) but designed to work with any framework and as close to raw Python as possible. \n\n\n## Why is it called FireService?\n\nWhen you invoke `call()` it starts `fire()` which in turn starts the `FireService`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpchand/fireservice", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fireservice", "package_url": "https://pypi.org/project/fireservice/", "platform": "", "project_url": "https://pypi.org/project/fireservice/", "project_urls": {"Homepage": "https://github.com/kpchand/fireservice"}, "release_url": "https://pypi.org/project/fireservice/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "FireService is a simple library to create Python Services", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FireService</h1>\n<p>FireService is a simple library to create Python Services.</p>\n<ul>\n<li>Declarative input fields.</li>\n<li>Input validations.</li>\n<li>Immutable fields.</li>\n<li>Execution callbacks.</li>\n<li>Less biolerplate.</li>\n<li>Works with native Python objects wherever possible.</li>\n<li>Extensible with custom field types and validators.</li>\n<li>Provides an elegant superstructure for classes which work on any input.</li>\n</ul>\n<h2>Installation</h2>\n<p>To install FireService using pip, run: <code>pip install fireservice</code></p>\n<p>To install FireService using pipenv, run: <code>pipenv install fireservice</code></p>\n<h2>Basic Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fireservice</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">StringField</span><span class=\"p\">,</span> <span class=\"n\">FireService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fireservice.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">SkipError</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span>\n\n\n<span class=\"n\">CRAWLED_DB</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">page_name_validator</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'.html'</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'I only know html pages!'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Crawler</span><span class=\"p\">(</span><span class=\"n\">FireService</span><span class=\"p\">):</span>\n    <span class=\"c1\"># All fields are required by default</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">page_name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">page_name_validator</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Fields are directly accessible using instance __dict__</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'http://example.com/</span><span class=\"si\">{}</span><span class=\"s1\">/</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pre_fire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">CRAWLED_DB</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Control directly goes to post_fire method</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SkipError</span><span class=\"p\">(</span><span class=\"s1\">'Page already crawled!'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">CRAWLED_DB</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post_fire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fired</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">fired</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I crawled!'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I skipped crawling because: '</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">crawler</span> <span class=\"o\">=</span> <span class=\"n\">Crawler</span><span class=\"p\">()</span>\n<span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">({</span>\n    <span class=\"s1\">'user_id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'page_name'</span><span class=\"p\">:</span> <span class=\"s1\">'about.html'</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Values are stored in native python types wherever possible:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">page_name</span><span class=\"p\">))</span>  <span class=\"c1\"># &lt;class 'int'&gt; &lt;class 'str'&gt;</span>\n\n<span class=\"c1\"># Raises ModificationError as all Fields are immutable</span>\n<span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> \n</pre>\n<p>A slightly convoluted example to show nested field types:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Service</span><span class=\"p\">(</span><span class=\"n\">FireService</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">ListField</span><span class=\"p\">(</span><span class=\"n\">CharacterField</span><span class=\"p\">())))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Service</span><span class=\"p\">()</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">({</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]],</span> <span class=\"p\">[[</span><span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">]]]</span>\n<span class=\"p\">})</span>\n</pre>\n<h2>What is a Service?</h2>\n<p>Services are a part of the domain model which performs some business logic. Usually they work on a set of inputs and change some state or return a computed value. In languages like Python which are not type safe, input validation and a common interface for programs which work on dynamic inputs could be an issue.</p>\n<p>Some reading resources :</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Service_layer_pattern\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Service_layer_pattern</a></li>\n<li><a href=\"https://www.martinfowler.com/bliki/AnemicDomainModel.html\" rel=\"nofollow\">https://www.martinfowler.com/bliki/AnemicDomainModel.html</a></li>\n</ul>\n<h2>Docs</h2>\n<p>View the Docs at: <a href=\"https://kpchand.github.io/fireservice/\" rel=\"nofollow\">https://kpchand.github.io/fireservice/</a>.\nIf redirection fails, then directly go <a href=\"https://kpchand.github.io/fireservice/fireservice/index.html\" rel=\"nofollow\">here</a>.</p>\n<h2>Extending FireService</h2>\n<p>We can also create custom fields. Suppose our application takes user ID with the pattern <em>xxx-yyy-zzz</em>. We can create a <code>StringField</code> and use a custom <em>validator</em>. But it would be more convenient &amp; declarative if we had a <code>Field</code> type which did this validation by default. Here is an example of such an implementation:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IDField</span><span class=\"p\">(</span><span class=\"n\">StringField</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A Field which takes input in the pattern xxx-yyy-zzz.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_validator</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Use StringField validator to validate str</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">default_validator</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">3</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">]):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'Improper format'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Service</span><span class=\"p\">(</span><span class=\"n\">FireService</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">IDField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fire</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'user_id: '</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Service</span><span class=\"p\">()</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">({</span>\n    <span class=\"s1\">'user_id'</span><span class=\"p\">:</span> <span class=\"s1\">'foo-bar-baz'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Inspiration</h2>\n<p>FireService was inspired from <a href=\"https://github.com/mixxorz/django-service-objects\" rel=\"nofollow\">django-service-objects</a> but designed to work with any framework and as close to raw Python as possible.</p>\n<h2>Why is it called FireService?</h2>\n<p>When you invoke <code>call()</code> it starts <code>fire()</code> which in turn starts the <code>FireService</code>.</p>\n\n          </div>"}, "last_serial": 6982004, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "bfed6c10117fed7f5b1fcca0edae3509", "sha256": "63638143bcd7716dbaaa9b698ee127f38928fcdf0a58bc42dfa68bd9d5da1b6d"}, "downloads": -1, "filename": "fireservice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bfed6c10117fed7f5b1fcca0edae3509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9601, "upload_time": "2020-04-08T22:23:08", "upload_time_iso_8601": "2020-04-08T22:23:08.459380Z", "url": "https://files.pythonhosted.org/packages/f8/66/886a0a709302d83012d099241ed9c5c08cbebd92c176abea0a18a7d4597a/fireservice-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20a519e6640d38d40840446596f56737", "sha256": "225c77efab08997fa1f032d6a526b0ff81c57d59ee8f95146d554f05115fd803"}, "downloads": -1, "filename": "fireservice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20a519e6640d38d40840446596f56737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8041, "upload_time": "2020-04-08T22:23:10", "upload_time_iso_8601": "2020-04-08T22:23:10.098792Z", "url": "https://files.pythonhosted.org/packages/cf/13/0d69fbcca23a6ecbc01d1458c8d814f9dd6aea3ddef8c7e52bbf2ca5db8a/fireservice-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfed6c10117fed7f5b1fcca0edae3509", "sha256": "63638143bcd7716dbaaa9b698ee127f38928fcdf0a58bc42dfa68bd9d5da1b6d"}, "downloads": -1, "filename": "fireservice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bfed6c10117fed7f5b1fcca0edae3509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9601, "upload_time": "2020-04-08T22:23:08", "upload_time_iso_8601": "2020-04-08T22:23:08.459380Z", "url": "https://files.pythonhosted.org/packages/f8/66/886a0a709302d83012d099241ed9c5c08cbebd92c176abea0a18a7d4597a/fireservice-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20a519e6640d38d40840446596f56737", "sha256": "225c77efab08997fa1f032d6a526b0ff81c57d59ee8f95146d554f05115fd803"}, "downloads": -1, "filename": "fireservice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20a519e6640d38d40840446596f56737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8041, "upload_time": "2020-04-08T22:23:10", "upload_time_iso_8601": "2020-04-08T22:23:10.098792Z", "url": "https://files.pythonhosted.org/packages/cf/13/0d69fbcca23a6ecbc01d1458c8d814f9dd6aea3ddef8c7e52bbf2ca5db8a/fireservice-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:12 2020"}