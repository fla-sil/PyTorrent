{"info": {"author": "Stef Smeets", "author_email": "s.smeets@tudelft.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "![build](https://github.com/stefsmeets/pyserialem/workflows/build/badge.svg)\n![PyPI](https://img.shields.io/pypi/v/pyserialem.svg?style=flat)\n\n# PySerialEM\n\nA small Python library to read and write [SerialEM][serialem] navigator files (`.nav`).\n\nInstall using `pip install pyserialem`.\n\n[The source for this project is available here][src].\n\n# Usage\n\nThe main use of `pyserialem` is to manipulate coordinates in a `.nav` file written by SerialEM ([specification][serialem_nav]).\n\nReading a `.nav` file:\n\n```python\nimport pyserialem\nfrom pathlib import Path\n\np = Path('C:/path/to/data/') / 'nav.nav'\nitems = pyserialem.read_nav_file(p)  # list\n```\nYou can set the `acquire_only` toggle to return only the items with the `Acquire` tag set:\n\n```python\nitems = pyserialem.read_nav_file(p, acquire_only=True)  # list\n```\n\nThis returns a `list` of `MapItem` and `NavItem`. A `MapItem` is associated with an image in the corresponding `.mrc` file, and a `NavItem` is a marker or point on that image.\n\n```python\nmap_items = [item.kind == 'Map' for item in items]\nnav_items = [item.kind == 'Marker' for item in items]\n```\n\nAll of the tags associated with the `MapItem` or `NavItem` can be accessed as an attribute using the same name as in the `.nav` file, i.e. with the key defined [here][serialem_nav]. This is also how the values should be updated:\n\n```python\nnav_item = nav_items[0]\nstage_position = nav_item.StageXYZ  # tuple\nmap_item.StageXYZ = (100, 200, 0)   # overwrite values\n```\n\nAlternatively, the stage position can be accessed directly through:\n\n```python\nx = map_item.stage_x\ny = map_item.stage_y\nz = map_item.stage_z\nxy = map_item.stage_xy\n```\n\n## Map items\n\nA `MapItem` has all the functions of a `NavItem`, and then some. Each `MapItem` can have a list of markers associated with it:\n\n```python\nmap_item = map_items[0]\nmarkers = map_item.markers  # list\n```\n\nTo visualize them, call:\n\n```python\nmap_item.plot()\n```\n\nTo just load the image associated with the `MapItem`:\n\n```python\nimg = map_item.load()  # np.array\n```\n\nThey can be extracted as a dictionary:\n\n```python\nd = map_item.to_dict()  # dict\n```\n\n...and restored:\n\n```python\nnew_map_item = pysem.from_dict(d, tag='new_mapitem')\n```\n\nThis is also the easiest way of constructing a new `MapItem`, because some keys can be autogenerated. Otherwise, all the required keys have to be specified to the `MapItem` constructor. The `tag` specifies the name of the item when displayed in `SerialEM`. If omitted, one will be generated.\n\nIt is easy to add new markers to a `MapItem`. As a pixel coordinate (i.e. from segmentation) is the default. `PySerialEM` calculates the corresponding stage position. The `acquire` argument sets the acquire flag (default=`True`):\n\n```python\npixel_position = (0, 0)\nnew_nav_item = map_item.add_marker(\n    pixel_position,\n    tag='pixel_item',\n    acquire=True)  # NavItem\n```\n\nYou can also add a marker as a stage coordinate (although this is a bit more tricky to calculate the corresponding pixel coordinate):\n\n```python\nstage_positionion = (1000, 1000)\nnew_nav_item = map_item.add_marker(\n    pixel_position,\n    kind='stage',\n    tag='stage_item',\n    acquire=False)  # NavItem\n```\n\nTo add many markers:\n\n```python\npixel_coordinates = ((0, 0), (100, 100), (200, 200))\nnav_item_group = map_item.add_marker_group(pixel_coordinates)  # tuple\n```\n\nSpecify `replace=True` to replace the current list of markers associated with the `MapItem`.\n\nIf the `MapItem` has a set of markers associated with it `map_item.markers`, the coordinates be retrieved as followed:\n\n```python\nmap_item.markers_as_pixel_coordinates()  # np.array (Nx2)\nmap_item.markers_as_stage_coordinates()  # np.array (Nx2)\n```\n\nTo just convert between stage and pixel coordinates:\n\n```python\npixel_coord = (1024, 1024)\nstage_coord = map_item.pixel_to_stagecoords(pixel_coord)  # tuple\nnew_pixel_coord = map_item.stage_to_pixelcoords(stagecoord)  # tuple\nassert new_pixel_coord == pixel_coord\n```\n\nTo write a new file:\n\n```python\npyserialem.write_nav_file('out.nav', map_item, *nav_item_group)\n```\n\nNote the `*`. This function captures arguments in a list (`*args`, so they must be unpacked when supplied.\n\n## Stitching\n\nA basic stitching algorithm is available to get an overview of the location of all map items:\n\n```python\nmap_items = [item for item in items if item.kind == 'Map']\npyserialem.stitch_map_items(map_items)\n```\n\n## Mdoc files\n\nThere is also a simple function to read `.mdoc` files ([link][serialem_nav]). This returns a list of python objects where each key can be accessed as an attribute.\n\n```python\np = Path('C:/path/to/data') / 'gm.mrc.mdoc'\nmdoc = pyserialem.read_mdoc_file(p)\n```\n\n[src]: https://github.com/stefsmeets/pyserialem\n[serialem]: https://bio3d.colorado.edu/SerialEM/\n[serialem_nav]: https://bio3d.colorado.edu/SerialEM/hlp/html/about_formats.htm\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/stefsmeets/pyserialem", "keywords": "serialem,electron-microscopy,navigator", "license": "GPL-3.0-only", "maintainer": "Stef Smeets", "maintainer_email": "s.smeets@tudelft.nl", "name": "pyserialem", "package_url": "https://pypi.org/project/pyserialem/", "platform": "", "project_url": "https://pypi.org/project/pyserialem/", "project_urls": {"Bug Reports": "https://github.com/stefsmeets/pyserialem/issues", "Documentation": "http://github.com/stefsmeets/pyserialem", "Homepage": "http://github.com/stefsmeets/pyserialem", "Repository": "http://github.com/stefsmeets/pyserialem"}, "release_url": "https://pypi.org/project/pyserialem/0.1.3/", "requires_dist": ["matplotlib (>=3.1.2)", "numpy (>=1.17.3)", "mrcfile (>=1.1.2,<2.0.0)"], "requires_python": ">=3.6.1", "summary": "Python module to read/write SerialEM .nav files.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37808bc596b7bb9dd286654d6b85cfab142c1c35/68747470733a2f2f6769746875622e636f6d2f73746566736d656574732f707973657269616c656d2f776f726b666c6f77732f6275696c642f62616467652e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79a5d0eca5b34b01a701a93aa7ef275a5f347286/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707973657269616c656d2e7376673f7374796c653d666c6174\"></p>\n<h1>PySerialEM</h1>\n<p>A small Python library to read and write <a href=\"https://bio3d.colorado.edu/SerialEM/\" rel=\"nofollow\">SerialEM</a> navigator files (<code>.nav</code>).</p>\n<p>Install using <code>pip install pyserialem</code>.</p>\n<p><a href=\"https://github.com/stefsmeets/pyserialem\" rel=\"nofollow\">The source for this project is available here</a>.</p>\n<h1>Usage</h1>\n<p>The main use of <code>pyserialem</code> is to manipulate coordinates in a <code>.nav</code> file written by SerialEM (<a href=\"https://bio3d.colorado.edu/SerialEM/hlp/html/about_formats.htm\" rel=\"nofollow\">specification</a>).</p>\n<p>Reading a <code>.nav</code> file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyserialem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'C:/path/to/data/'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s1\">'nav.nav'</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">pyserialem</span><span class=\"o\">.</span><span class=\"n\">read_nav_file</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>  <span class=\"c1\"># list</span>\n</pre>\n<p>You can set the <code>acquire_only</code> toggle to return only the items with the <code>Acquire</code> tag set:</p>\n<pre><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">pyserialem</span><span class=\"o\">.</span><span class=\"n\">read_nav_file</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">acquire_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># list</span>\n</pre>\n<p>This returns a <code>list</code> of <code>MapItem</code> and <code>NavItem</code>. A <code>MapItem</code> is associated with an image in the corresponding <code>.mrc</code> file, and a <code>NavItem</code> is a marker or point on that image.</p>\n<pre><span class=\"n\">map_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"s1\">'Map'</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">]</span>\n<span class=\"n\">nav_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"s1\">'Marker'</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">]</span>\n</pre>\n<p>All of the tags associated with the <code>MapItem</code> or <code>NavItem</code> can be accessed as an attribute using the same name as in the <code>.nav</code> file, i.e. with the key defined <a href=\"https://bio3d.colorado.edu/SerialEM/hlp/html/about_formats.htm\" rel=\"nofollow\">here</a>. This is also how the values should be updated:</p>\n<pre><span class=\"n\">nav_item</span> <span class=\"o\">=</span> <span class=\"n\">nav_items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">stage_position</span> <span class=\"o\">=</span> <span class=\"n\">nav_item</span><span class=\"o\">.</span><span class=\"n\">StageXYZ</span>  <span class=\"c1\"># tuple</span>\n<span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">StageXYZ</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>   <span class=\"c1\"># overwrite values</span>\n</pre>\n<p>Alternatively, the stage position can be accessed directly through:</p>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">stage_x</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">stage_y</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">stage_z</span>\n<span class=\"n\">xy</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">stage_xy</span>\n</pre>\n<h2>Map items</h2>\n<p>A <code>MapItem</code> has all the functions of a <code>NavItem</code>, and then some. Each <code>MapItem</code> can have a list of markers associated with it:</p>\n<pre><span class=\"n\">map_item</span> <span class=\"o\">=</span> <span class=\"n\">map_items</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">markers</span>  <span class=\"c1\"># list</span>\n</pre>\n<p>To visualize them, call:</p>\n<pre><span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>To just load the image associated with the <code>MapItem</code>:</p>\n<pre><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>  <span class=\"c1\"># np.array</span>\n</pre>\n<p>They can be extracted as a dictionary:</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># dict</span>\n</pre>\n<p>...and restored:</p>\n<pre><span class=\"n\">new_map_item</span> <span class=\"o\">=</span> <span class=\"n\">pysem</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'new_mapitem'</span><span class=\"p\">)</span>\n</pre>\n<p>This is also the easiest way of constructing a new <code>MapItem</code>, because some keys can be autogenerated. Otherwise, all the required keys have to be specified to the <code>MapItem</code> constructor. The <code>tag</code> specifies the name of the item when displayed in <code>SerialEM</code>. If omitted, one will be generated.</p>\n<p>It is easy to add new markers to a <code>MapItem</code>. As a pixel coordinate (i.e. from segmentation) is the default. <code>PySerialEM</code> calculates the corresponding stage position. The <code>acquire</code> argument sets the acquire flag (default=<code>True</code>):</p>\n<pre><span class=\"n\">pixel_position</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">new_nav_item</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">add_marker</span><span class=\"p\">(</span>\n    <span class=\"n\">pixel_position</span><span class=\"p\">,</span>\n    <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'pixel_item'</span><span class=\"p\">,</span>\n    <span class=\"n\">acquire</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># NavItem</span>\n</pre>\n<p>You can also add a marker as a stage coordinate (although this is a bit more tricky to calculate the corresponding pixel coordinate):</p>\n<pre><span class=\"n\">stage_positionion</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">new_nav_item</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">add_marker</span><span class=\"p\">(</span>\n    <span class=\"n\">pixel_position</span><span class=\"p\">,</span>\n    <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'stage'</span><span class=\"p\">,</span>\n    <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'stage_item'</span><span class=\"p\">,</span>\n    <span class=\"n\">acquire</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># NavItem</span>\n</pre>\n<p>To add many markers:</p>\n<pre><span class=\"n\">pixel_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span>\n<span class=\"n\">nav_item_group</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">add_marker_group</span><span class=\"p\">(</span><span class=\"n\">pixel_coordinates</span><span class=\"p\">)</span>  <span class=\"c1\"># tuple</span>\n</pre>\n<p>Specify <code>replace=True</code> to replace the current list of markers associated with the <code>MapItem</code>.</p>\n<p>If the <code>MapItem</code> has a set of markers associated with it <code>map_item.markers</code>, the coordinates be retrieved as followed:</p>\n<pre><span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">markers_as_pixel_coordinates</span><span class=\"p\">()</span>  <span class=\"c1\"># np.array (Nx2)</span>\n<span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">markers_as_stage_coordinates</span><span class=\"p\">()</span>  <span class=\"c1\"># np.array (Nx2)</span>\n</pre>\n<p>To just convert between stage and pixel coordinates:</p>\n<pre><span class=\"n\">pixel_coord</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"n\">stage_coord</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">pixel_to_stagecoords</span><span class=\"p\">(</span><span class=\"n\">pixel_coord</span><span class=\"p\">)</span>  <span class=\"c1\"># tuple</span>\n<span class=\"n\">new_pixel_coord</span> <span class=\"o\">=</span> <span class=\"n\">map_item</span><span class=\"o\">.</span><span class=\"n\">stage_to_pixelcoords</span><span class=\"p\">(</span><span class=\"n\">stagecoord</span><span class=\"p\">)</span>  <span class=\"c1\"># tuple</span>\n<span class=\"k\">assert</span> <span class=\"n\">new_pixel_coord</span> <span class=\"o\">==</span> <span class=\"n\">pixel_coord</span>\n</pre>\n<p>To write a new file:</p>\n<pre><span class=\"n\">pyserialem</span><span class=\"o\">.</span><span class=\"n\">write_nav_file</span><span class=\"p\">(</span><span class=\"s1\">'out.nav'</span><span class=\"p\">,</span> <span class=\"n\">map_item</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">nav_item_group</span><span class=\"p\">)</span>\n</pre>\n<p>Note the <code>*</code>. This function captures arguments in a list (<code>*args</code>, so they must be unpacked when supplied.</p>\n<h2>Stitching</h2>\n<p>A basic stitching algorithm is available to get an overview of the location of all map items:</p>\n<pre><span class=\"n\">map_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">item</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span> <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"s1\">'Map'</span><span class=\"p\">]</span>\n<span class=\"n\">pyserialem</span><span class=\"o\">.</span><span class=\"n\">stitch_map_items</span><span class=\"p\">(</span><span class=\"n\">map_items</span><span class=\"p\">)</span>\n</pre>\n<h2>Mdoc files</h2>\n<p>There is also a simple function to read <code>.mdoc</code> files (<a href=\"https://bio3d.colorado.edu/SerialEM/hlp/html/about_formats.htm\" rel=\"nofollow\">link</a>). This returns a list of python objects where each key can be accessed as an attribute.</p>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'C:/path/to/data'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s1\">'gm.mrc.mdoc'</span>\n<span class=\"n\">mdoc</span> <span class=\"o\">=</span> <span class=\"n\">pyserialem</span><span class=\"o\">.</span><span class=\"n\">read_mdoc_file</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7084763, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3fd3541812aca7491711975a406f7106", "sha256": "d914f4491578f9cba09ba4cb22c5339b10910ace427eaa5b2b21a957378ba1cc"}, "downloads": -1, "filename": "pyserialem-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3fd3541812aca7491711975a406f7106", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 33867, "upload_time": "2020-04-17T08:13:34", "upload_time_iso_8601": "2020-04-17T08:13:34.506658Z", "url": "https://files.pythonhosted.org/packages/94/22/197818b0a044f836182286d9d041202ba1201fadca742d9d79761136c247/pyserialem-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c56ecac7b789a0c7cd29cbacc9ab893b", "sha256": "d6cb1e6893fb804d4df2f77a6777ff6a2e68fc8d9ae06b069cff9b7293bf75a8"}, "downloads": -1, "filename": "pyserialem-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c56ecac7b789a0c7cd29cbacc9ab893b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28961, "upload_time": "2020-04-17T08:13:36", "upload_time_iso_8601": "2020-04-17T08:13:36.493043Z", "url": "https://files.pythonhosted.org/packages/e1/d9/41eba8b1afa5928076236b808a54cbbe1dc2a4d427cd3a3ae6bdeb1b5adf/pyserialem-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "acd1a9ea144b3eb06684f06768001a6c", "sha256": "62a3a562738618d7a54132446fbdc69921842c9e318b3a597531e8a23dcc9d0a"}, "downloads": -1, "filename": "pyserialem-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "acd1a9ea144b3eb06684f06768001a6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1", "size": 31219, "upload_time": "2020-04-20T09:18:18", "upload_time_iso_8601": "2020-04-20T09:18:18.408879Z", "url": "https://files.pythonhosted.org/packages/fa/32/fe739cc5b05e533fb323bc5817fe4e3a97be8568d3ee54a10982f80b61c6/pyserialem-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c9b66a926e2e1a9261d15fb5915d2c5", "sha256": "c5c6868670b7b7f9d3428c28ef5d00479ea955dfef1b2f2d1aa63a58faffed49"}, "downloads": -1, "filename": "pyserialem-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1c9b66a926e2e1a9261d15fb5915d2c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 28883, "upload_time": "2020-04-20T09:18:19", "upload_time_iso_8601": "2020-04-20T09:18:19.758909Z", "url": "https://files.pythonhosted.org/packages/39/cc/93b51c850b555cea43e9fd1cb817bf4800c6792dfb896c75d16f56709a88/pyserialem-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "178f162e884351f6f9e811bd51fb7876", "sha256": "51f793efc1420ed15340c3b944299cfa4b9260298c7ea7270b0dacad0f04bd62"}, "downloads": -1, "filename": "pyserialem-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "178f162e884351f6f9e811bd51fb7876", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1", "size": 31060, "upload_time": "2020-04-23T14:16:33", "upload_time_iso_8601": "2020-04-23T14:16:33.804128Z", "url": "https://files.pythonhosted.org/packages/a5/36/a1b984a4598164840a9e20161914ddeaaf99ecf8b2a6f79810d02f1426d4/pyserialem-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "407bd253ebc68c2e71e14080a11b377f", "sha256": "dcd7f46ab4f8b7ca09bf9c5df67b681b4e5739c9ab1ba42ac027a71bd3be4481"}, "downloads": -1, "filename": "pyserialem-0.1.3.tar.gz", "has_sig": false, "md5_digest": "407bd253ebc68c2e71e14080a11b377f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 28795, "upload_time": "2020-04-23T14:16:34", "upload_time_iso_8601": "2020-04-23T14:16:34.943349Z", "url": "https://files.pythonhosted.org/packages/1e/51/98d30a1e1483d7a5e754c2212d8df595ef422deb73fd789cd5692fac856c/pyserialem-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "178f162e884351f6f9e811bd51fb7876", "sha256": "51f793efc1420ed15340c3b944299cfa4b9260298c7ea7270b0dacad0f04bd62"}, "downloads": -1, "filename": "pyserialem-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "178f162e884351f6f9e811bd51fb7876", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1", "size": 31060, "upload_time": "2020-04-23T14:16:33", "upload_time_iso_8601": "2020-04-23T14:16:33.804128Z", "url": "https://files.pythonhosted.org/packages/a5/36/a1b984a4598164840a9e20161914ddeaaf99ecf8b2a6f79810d02f1426d4/pyserialem-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "407bd253ebc68c2e71e14080a11b377f", "sha256": "dcd7f46ab4f8b7ca09bf9c5df67b681b4e5739c9ab1ba42ac027a71bd3be4481"}, "downloads": -1, "filename": "pyserialem-0.1.3.tar.gz", "has_sig": false, "md5_digest": "407bd253ebc68c2e71e14080a11b377f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 28795, "upload_time": "2020-04-23T14:16:34", "upload_time_iso_8601": "2020-04-23T14:16:34.943349Z", "url": "https://files.pythonhosted.org/packages/1e/51/98d30a1e1483d7a5e754c2212d8df595ef422deb73fd789cd5692fac856c/pyserialem-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:05 2020"}