{"info": {"author": "Raphael Yancey", "author_email": "pypi@raphaelyancey.fr", "bugtrack_url": null, "classifiers": [], "description": "# pyKY040\n\n**High-level Python module for the KY040 rotary encoder and switch** on Raspberry Pi and similar boards that use `RPi.GPIO`\n\n<img src=\"https://i.imgur.com/vgHjSoY.jpg\" width=\"300\" alt=\"KY-040 rotary encoder and switch\">\n\n## Features\n\n- Increment callback\n- Decrement callback\n- Change callback (increment or decrement)\n- Switch press callback\n\n### Options\n\n- Scale mode (internal counter is bound between X and Y, and is given as argument in the callback functions)\n- Looped scale mode (from X to Y, then X again)\n- Custom scale step\n- GPIO polling (easier) or [as a device](#device-or-gpio-polling) (sturdier)\n\n## Installation\n\n```bash\npip install pyky040\n```\n\n## Usage\n\n[![asciicast](https://asciinema.org/a/GVUyrqUUnZP4Sne8eEmKTWHCt.svg)](https://asciinema.org/a/GVUyrqUUnZP4Sne8eEmKTWHCt)\n\n### Basic\n\n```python\n# Import the module\nfrom pyky040 import pyky040\n\n# Define your callback\ndef my_callback(scale_position):\n    print('Hello world! The scale position is {}'.format(scale_position))\n\n# Init the encoder pins\nmy_encoder = pyky040.Encoder(CLK=17, DT=18, SW=26)\n\n# Or the encoder as a device (must be installed on the system beforehand!)\n# my_encoder = pyky040.Encoder(device='/dev/input/event0')\n\n# Setup the options and callbacks (see documentation)\nmy_encoder.setup(scale_min=0, scale_max=100, step=1, chg_callback=my_callback)\n\n# Launch the listener\nmy_encoder.watch()\n\n# Mess with the encoder...\n# > Hello world! The scale position is 1\n# > Hello world! The scale position is 2\n# > Hello world! The scale position is 3\n# > Hello world! The scale position is 2\n# > Hello world! The scale position is 1\n```\n\n### In a thread\n\nAs the `watch()` method runs an infinite polling loop, you might want to run it in a thread if you don't want to block the rest of your script, or if you have **multiple encoders** to handle.\n\n```python\n# Import the module and threading\nfrom pyky040 import pyky040\nimport threading\n\n# Define your callback\ndef my_callback(scale_position):\n    print('Hello world! The scale position is {}'.format(scale_position))\n\n# Init the encoder pins\nmy_encoder = pyky040.Encoder(CLK=17, DT=18, SW=26)\n\n# Or the encoder as a device (must be installed on the system beforehand!)\n# my_encoder = pyky040.Encoder(device='/dev/input/event0')\n\n# Setup the options and callbacks (see documentation)\nmy_encoder.setup(scale_min=0, scale_max=100, step=1, chg_callback=my_callback)\n\n# Create the thread\nmy_thread = threading.Thread(target=my_encoder.watch)\n\n# Launch the thread\nmy_thread.start()\n\n# Do other stuff\nprint('Other stuff...')\nwhile True:\n    print('Looped stuff...')\n    sleep(1000)\n# ... this is also where you can setup other encoders!\n\n# Mess with the encoder...\n# > Other stuff...\n# > Looped stuff...\n# > Hello world! The scale position is 1\n# > Hello world! The scale position is 2\n# > Hello world! The scale position is 3\n# > Looped stuff...\n# > Hello world! The scale position is 2\n\n```\n\n**Note:** The interruption of the module when running in threads is not yet handled, you might have to kill it by yourself \ud83d\udd2a\n\n## Documentation\n\n#### `Encoder(CLK=x, DT=y, SW=z)`\n\nInitializes the module with the specified encoder pins.\n\n- Options\n  - `polling_interval` Specify the pins polling interval in ms (default 1ms)\n\n#### `Encoder(device='...')`\n\n\u26a0\ufe0f Linux only\n\nInitializes the module with the specified encoder device. [Read more](#device-or-gpio-polling)\n\nRequirement: `pip install pyky040[device]`\n\n#### `Encoder.setup()`\n\nSetup the behavior of the module. All of the following keyword arguments are optional.\n\n- Callbacks\n  - `inc_callback (function)` When the encoder is incremented (clockwise). Scale position as first argument.\n  - `dec_callback (function)` When the encoder is decremented. Scale position as first argument.\n  - `chg_callback (function)` When the encoder is either incremented or decremented. Scale position as first argument.\n  - `sw_callback (function)` When the encoder switch is pressed\n\n- Scale mode\n  - `scale_min (int/float)` Scale minimum\n  - `scale_max (int/float)` Scale maximum\n  - `loop (boolean)` Loop mode (defaults to `False`)\n  - `step (int/float)` Scale step when incrementing or decrementing\n\n- Options\n  - `sw_debounce_time (int/float)` Switch debounce time in ms (allow only one interrupt per X ms, dismiss others)\n\n**Note:** better keep using ints and not floats for more precise results.\n\n#### `Encoder.watch()`\n\nStarts the listener. The pins polling interval is `1ms` by default and can be customized (see `Encoder()`).\n\n## <a name=\"device-or-gpio-polling\"></a>Should I use the GPIO polling or the device overlay?\n\nThe Raspberry Pi firmware allows the encoder to be set up as a device with the [`rotary-encoder` overlay](https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README#L1892-L1921). It trades *the promise to catch every encoder tick* for *the ease of use* (because it needs to be installed on the host beforeheand, with root privileges).\n\n|Approach|Plug & Play|Needs prior installation|Catches every tick|\n|--------|-----------|------------------------|---------------------|\n|GPIO polling|**Yes**|No|No|\n|Device overlay|No|Yes|**Yes**|\n\n### <a name=\"install-device\"></a>How to install the encoder as a device?\n\nOnly tested on Raspbian Buster at this time.\n\n```\n# Copy this line in `/boot/config.txt` and reboot\n# (replacing {CLK_PIN} and {DT_PIN} by their real values)\ndtoverlay=rotary-encoder,pin_a={CLK_PIN},pin_b={DT_PIN},relative_axis=1,steps-per-period=2\n```\n\n## TROUBLESHOOTING\n\n### Erratic behavior\n\nIt is known that some pins combinations introduce erratic behavior (interferences?). The library has been tested successfully using the following combinations (BCM numbering).\n\n|CLK| DT| SW|       Pi|Raspbian|\n|---|---|---|---------|--------|\n| 26|  4| 21| 3B (1.2)|Buster  |\n\nFeel free to edit the README to provide your working combinations!\n\nIf you are still experiencing issues, you might want to try to [set up the encoder as a device](#device-or-gpio-polling) instead.\n\n## CHANGELOG\n\n**0.1.4**\n\n  - Added `device` mode\n\n**0.1.3**\n\n  - Fixed `latest_switch_call` not defined before the loop\n\n**0.1.2**\n\n  - Changed `__init_` args to kwargs for better readability and ease of use `Encoder(CLK=x, DT=y, SW=z)`\n  - Added customizable debounce time (in ms) for the switch `setup(..., sw_debounce_time=300)`\n  - Added customizable polling interval (in ms) `Encoder(..., polling_interval=1)`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/raphaelyancey/pyKY040", "keywords": "keyes rotary encoder switch ky040", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyky040", "package_url": "https://pypi.org/project/pyky040/", "platform": "", "project_url": "https://pypi.org/project/pyky040/", "project_urls": {"Bug Reports": "https://github.com/raphaelyancey/pyKY040/issues", "Homepage": "https://github.com/raphaelyancey/pyKY040", "Source": "https://github.com/raphaelyancey/pyKY040"}, "release_url": "https://pypi.org/project/pyky040/0.1.4/", "requires_dist": ["RPi.GPIO", "evdev ; extra == 'device'"], "requires_python": "", "summary": "High-level interface for the KY040 rotary encoder and switch.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyKY040</h1>\n<p><strong>High-level Python module for the KY040 rotary encoder and switch</strong> on Raspberry Pi and similar boards that use <code>RPi.GPIO</code></p>\n<img alt=\"KY-040 rotary encoder and switch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd121c461134c1d75ed62df23fcc2267b8ec3451/68747470733a2f2f692e696d6775722e636f6d2f7667486a536f592e6a7067\" width=\"300\">\n<h2>Features</h2>\n<ul>\n<li>Increment callback</li>\n<li>Decrement callback</li>\n<li>Change callback (increment or decrement)</li>\n<li>Switch press callback</li>\n</ul>\n<h3>Options</h3>\n<ul>\n<li>Scale mode (internal counter is bound between X and Y, and is given as argument in the callback functions)</li>\n<li>Looped scale mode (from X to Y, then X again)</li>\n<li>Custom scale step</li>\n<li>GPIO polling (easier) or <a href=\"#device-or-gpio-polling\" rel=\"nofollow\">as a device</a> (sturdier)</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install pyky040\n</pre>\n<h2>Usage</h2>\n<p><a href=\"https://asciinema.org/a/GVUyrqUUnZP4Sne8eEmKTWHCt\" rel=\"nofollow\"><img alt=\"asciicast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1e3a8196371b98e9002e71fae77b2a090f4cb11/68747470733a2f2f61736369696e656d612e6f72672f612f47565579727155556e5a5034536e653865456d4b54574843742e737667\"></a></p>\n<h3>Basic</h3>\n<pre><span class=\"c1\"># Import the module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyky040</span> <span class=\"kn\">import</span> <span class=\"n\">pyky040</span>\n\n<span class=\"c1\"># Define your callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_callback</span><span class=\"p\">(</span><span class=\"n\">scale_position</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello world! The scale position is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">scale_position</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Init the encoder pins</span>\n<span class=\"n\">my_encoder</span> <span class=\"o\">=</span> <span class=\"n\">pyky040</span><span class=\"o\">.</span><span class=\"n\">Encoder</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">DT</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">SW</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or the encoder as a device (must be installed on the system beforehand!)</span>\n<span class=\"c1\"># my_encoder = pyky040.Encoder(device='/dev/input/event0')</span>\n\n<span class=\"c1\"># Setup the options and callbacks (see documentation)</span>\n<span class=\"n\">my_encoder</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">chg_callback</span><span class=\"o\">=</span><span class=\"n\">my_callback</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Launch the listener</span>\n<span class=\"n\">my_encoder</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Mess with the encoder...</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 1</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 2</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 3</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 2</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 1</span>\n</pre>\n<h3>In a thread</h3>\n<p>As the <code>watch()</code> method runs an infinite polling loop, you might want to run it in a thread if you don't want to block the rest of your script, or if you have <strong>multiple encoders</strong> to handle.</p>\n<pre><span class=\"c1\"># Import the module and threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyky040</span> <span class=\"kn\">import</span> <span class=\"n\">pyky040</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"c1\"># Define your callback</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_callback</span><span class=\"p\">(</span><span class=\"n\">scale_position</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello world! The scale position is </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">scale_position</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Init the encoder pins</span>\n<span class=\"n\">my_encoder</span> <span class=\"o\">=</span> <span class=\"n\">pyky040</span><span class=\"o\">.</span><span class=\"n\">Encoder</span><span class=\"p\">(</span><span class=\"n\">CLK</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">DT</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">SW</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or the encoder as a device (must be installed on the system beforehand!)</span>\n<span class=\"c1\"># my_encoder = pyky040.Encoder(device='/dev/input/event0')</span>\n\n<span class=\"c1\"># Setup the options and callbacks (see documentation)</span>\n<span class=\"n\">my_encoder</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">scale_min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale_max</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">chg_callback</span><span class=\"o\">=</span><span class=\"n\">my_callback</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the thread</span>\n<span class=\"n\">my_thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">my_encoder</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Launch the thread</span>\n<span class=\"n\">my_thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Do other stuff</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Other stuff...'</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Looped stuff...'</span><span class=\"p\">)</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"c1\"># ... this is also where you can setup other encoders!</span>\n\n<span class=\"c1\"># Mess with the encoder...</span>\n<span class=\"c1\"># &gt; Other stuff...</span>\n<span class=\"c1\"># &gt; Looped stuff...</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 1</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 2</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 3</span>\n<span class=\"c1\"># &gt; Looped stuff...</span>\n<span class=\"c1\"># &gt; Hello world! The scale position is 2</span>\n</pre>\n<p><strong>Note:</strong> The interruption of the module when running in threads is not yet handled, you might have to kill it by yourself \ud83d\udd2a</p>\n<h2>Documentation</h2>\n<h4><code>Encoder(CLK=x, DT=y, SW=z)</code></h4>\n<p>Initializes the module with the specified encoder pins.</p>\n<ul>\n<li>Options\n<ul>\n<li><code>polling_interval</code> Specify the pins polling interval in ms (default 1ms)</li>\n</ul>\n</li>\n</ul>\n<h4><code>Encoder(device='...')</code></h4>\n<p>\u26a0\ufe0f Linux only</p>\n<p>Initializes the module with the specified encoder device. <a href=\"#device-or-gpio-polling\" rel=\"nofollow\">Read more</a></p>\n<p>Requirement: <code>pip install pyky040[device]</code></p>\n<h4><code>Encoder.setup()</code></h4>\n<p>Setup the behavior of the module. All of the following keyword arguments are optional.</p>\n<ul>\n<li>\n<p>Callbacks</p>\n<ul>\n<li><code>inc_callback (function)</code> When the encoder is incremented (clockwise). Scale position as first argument.</li>\n<li><code>dec_callback (function)</code> When the encoder is decremented. Scale position as first argument.</li>\n<li><code>chg_callback (function)</code> When the encoder is either incremented or decremented. Scale position as first argument.</li>\n<li><code>sw_callback (function)</code> When the encoder switch is pressed</li>\n</ul>\n</li>\n<li>\n<p>Scale mode</p>\n<ul>\n<li><code>scale_min (int/float)</code> Scale minimum</li>\n<li><code>scale_max (int/float)</code> Scale maximum</li>\n<li><code>loop (boolean)</code> Loop mode (defaults to <code>False</code>)</li>\n<li><code>step (int/float)</code> Scale step when incrementing or decrementing</li>\n</ul>\n</li>\n<li>\n<p>Options</p>\n<ul>\n<li><code>sw_debounce_time (int/float)</code> Switch debounce time in ms (allow only one interrupt per X ms, dismiss others)</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note:</strong> better keep using ints and not floats for more precise results.</p>\n<h4><code>Encoder.watch()</code></h4>\n<p>Starts the listener. The pins polling interval is <code>1ms</code> by default and can be customized (see <code>Encoder()</code>).</p>\n<h2><a></a>Should I use the GPIO polling or the device overlay?</h2>\n<p>The Raspberry Pi firmware allows the encoder to be set up as a device with the <a href=\"https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README#L1892-L1921\" rel=\"nofollow\"><code>rotary-encoder</code> overlay</a>. It trades <em>the promise to catch every encoder tick</em> for <em>the ease of use</em> (because it needs to be installed on the host beforeheand, with root privileges).</p>\n<table>\n<thead>\n<tr>\n<th>Approach</th>\n<th>Plug &amp; Play</th>\n<th>Needs prior installation</th>\n<th>Catches every tick</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GPIO polling</td>\n<td><strong>Yes</strong></td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>Device overlay</td>\n<td>No</td>\n<td>Yes</td>\n<td><strong>Yes</strong></td>\n</tr></tbody></table>\n<h3><a></a>How to install the encoder as a device?</h3>\n<p>Only tested on Raspbian Buster at this time.</p>\n<pre><code># Copy this line in `/boot/config.txt` and reboot\n# (replacing {CLK_PIN} and {DT_PIN} by their real values)\ndtoverlay=rotary-encoder,pin_a={CLK_PIN},pin_b={DT_PIN},relative_axis=1,steps-per-period=2\n</code></pre>\n<h2>TROUBLESHOOTING</h2>\n<h3>Erratic behavior</h3>\n<p>It is known that some pins combinations introduce erratic behavior (interferences?). The library has been tested successfully using the following combinations (BCM numbering).</p>\n<table>\n<thead>\n<tr>\n<th>CLK</th>\n<th>DT</th>\n<th>SW</th>\n<th>Pi</th>\n<th>Raspbian</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>26</td>\n<td>4</td>\n<td>21</td>\n<td>3B (1.2)</td>\n<td>Buster</td>\n</tr></tbody></table>\n<p>Feel free to edit the README to provide your working combinations!</p>\n<p>If you are still experiencing issues, you might want to try to <a href=\"#device-or-gpio-polling\" rel=\"nofollow\">set up the encoder as a device</a> instead.</p>\n<h2>CHANGELOG</h2>\n<p><strong>0.1.4</strong></p>\n<ul>\n<li>Added <code>device</code> mode</li>\n</ul>\n<p><strong>0.1.3</strong></p>\n<ul>\n<li>Fixed <code>latest_switch_call</code> not defined before the loop</li>\n</ul>\n<p><strong>0.1.2</strong></p>\n<ul>\n<li>Changed <code>__init_</code> args to kwargs for better readability and ease of use <code>Encoder(CLK=x, DT=y, SW=z)</code></li>\n<li>Added customizable debounce time (in ms) for the switch <code>setup(..., sw_debounce_time=300)</code></li>\n<li>Added customizable polling interval (in ms) <code>Encoder(..., polling_interval=1)</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6594499, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63d0cfe895014f7c9a48c32fff67800e", "sha256": "f457e8d10b3665088c85b382d7b2893141bcebc42a66c42fbee624e50d21b140"}, "downloads": -1, "filename": "pyky040-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63d0cfe895014f7c9a48c32fff67800e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17635, "upload_time": "2018-05-09T23:57:37", "upload_time_iso_8601": "2018-05-09T23:57:37.695007Z", "url": "https://files.pythonhosted.org/packages/63/3f/3823651a11a71279c3d1abafa2bf8c081db6628b0cec3ca3381ae0b45c2e/pyky040-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d33c33a588d0c606567f9e69136d3b9f", "sha256": "c8483ccf67c13b3c7c84cd07e69566b241d0ee7c2fd41143df65f0f6b6628939"}, "downloads": -1, "filename": "pyky040-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d33c33a588d0c606567f9e69136d3b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4042, "upload_time": "2018-05-09T23:57:39", "upload_time_iso_8601": "2018-05-09T23:57:39.122693Z", "url": "https://files.pythonhosted.org/packages/57/f2/a56ca316b81da0b400d4b62ac018992594bb52cd6989801e44a87b4d3c73/pyky040-0.1.0.tar.gz", "yanked": false}], "0.1.0a0": [{"comment_text": "", "digests": {"md5": "c51aadf27065fbff33a60636aacc9185", "sha256": "1abb8a8cff183f2e55e0b5232e804972f3f8647f41aa1641820b0a19b04856a7"}, "downloads": -1, "filename": "pyky040-0.1.0a0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c51aadf27065fbff33a60636aacc9185", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17641, "upload_time": "2018-05-10T12:57:52", "upload_time_iso_8601": "2018-05-10T12:57:52.911234Z", "url": "https://files.pythonhosted.org/packages/c7/04/e2eee6aeb1f904fc08ea770f3d3eddc1340f7d8b421234a3a3fd9de4480b/pyky040-0.1.0a0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee17b7546e4693dafb1939eba50dc0f2", "sha256": "fce73f067575cf6412eb865532be0c6fd3f324c8c2db6311cb5325278011824e"}, "downloads": -1, "filename": "pyky040-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "ee17b7546e4693dafb1939eba50dc0f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4039, "upload_time": "2018-05-10T12:57:54", "upload_time_iso_8601": "2018-05-10T12:57:54.470464Z", "url": "https://files.pythonhosted.org/packages/f0/aa/8ce26f1cce1d05141d4524283557851a6d5d6df3a313066edd16037d147e/pyky040-0.1.0a0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2903dbbdd0ea6b44e9942e380652412b", "sha256": "5929f2715b489168150db18202196f092f515b7094a010932d839cc3687c4f79"}, "downloads": -1, "filename": "pyky040-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2903dbbdd0ea6b44e9942e380652412b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17618, "upload_time": "2018-05-10T13:00:38", "upload_time_iso_8601": "2018-05-10T13:00:38.700442Z", "url": "https://files.pythonhosted.org/packages/ff/6f/e8795923d0db1092f5c3f5478ebe648d85b343c210fcb28fd92a7a27d903/pyky040-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66316aea62af1c7864beb7f345839e74", "sha256": "682f2d7a0feee82cf1a84de5026ed0aaeac346c4fded713143adf6b8f091baf0"}, "downloads": -1, "filename": "pyky040-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66316aea62af1c7864beb7f345839e74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4037, "upload_time": "2018-05-10T13:00:40", "upload_time_iso_8601": "2018-05-10T13:00:40.151521Z", "url": "https://files.pythonhosted.org/packages/3b/ea/02a094844abca801e692b11f28b4b4e13ee8493eca9de47819d2578fb6df/pyky040-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2f9640edd4a32e1eddb02293442741c3", "sha256": "ae2b18fbbc292f7319be38cf46a33fee8aee83880145654f52c5fb08effb1e5e"}, "downloads": -1, "filename": "pyky040-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f9640edd4a32e1eddb02293442741c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18013, "upload_time": "2018-06-27T14:20:39", "upload_time_iso_8601": "2018-06-27T14:20:39.332438Z", "url": "https://files.pythonhosted.org/packages/4b/51/0c74d023d42663abd912af1add3ef7428a535ea020d2a9de9fdb37668e77/pyky040-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93a1957e6034890b9b58fad3324ec367", "sha256": "91557d373155ef2167b6373d45939160e5b5084a0adea7993f20bcc2c6fd8cf3"}, "downloads": -1, "filename": "pyky040-0.1.2.tar.gz", "has_sig": false, "md5_digest": "93a1957e6034890b9b58fad3324ec367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4481, "upload_time": "2018-06-27T14:20:40", "upload_time_iso_8601": "2018-06-27T14:20:40.766700Z", "url": "https://files.pythonhosted.org/packages/34/a8/f8ac1216f48a0d54151c22b04879aec6101b72bb42b7a6b9bf387a05cb90/pyky040-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c55a39ff39e52ff6e7ed07109f4c0b3a", "sha256": "d6c7a96de968d1e1df8de270e67d891c23f016d312ec7fa26a81f53eac71e6c2"}, "downloads": -1, "filename": "pyky040-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c55a39ff39e52ff6e7ed07109f4c0b3a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18019, "upload_time": "2018-06-27T16:34:32", "upload_time_iso_8601": "2018-06-27T16:34:32.385363Z", "url": "https://files.pythonhosted.org/packages/dd/31/c49323cafdcf011334ac7c225daf8f96d96ece0b23884894fa6f037ad7f6/pyky040-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "391b1809bbc0444687aa63a5e15805f5", "sha256": "d4905d3c381be2d56f14e728656e75d138011d7d68ba91814fe2f4dd6b2bed0b"}, "downloads": -1, "filename": "pyky040-0.1.3.tar.gz", "has_sig": false, "md5_digest": "391b1809bbc0444687aa63a5e15805f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4480, "upload_time": "2018-06-27T16:34:33", "upload_time_iso_8601": "2018-06-27T16:34:33.708171Z", "url": "https://files.pythonhosted.org/packages/56/14/e514d1e786cf468c8d269ac15a65e8dd6c116bab2b90d4f0c5a90da55e7f/pyky040-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3b883b7d03937777c01b767d7d205923", "sha256": "e7f9e276423a55440aec89f160693de0a390aac58b055ae6a7231e760f38e844"}, "downloads": -1, "filename": "pyky040-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b883b7d03937777c01b767d7d205923", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20823, "upload_time": "2020-02-08T17:07:34", "upload_time_iso_8601": "2020-02-08T17:07:34.427756Z", "url": "https://files.pythonhosted.org/packages/f2/e1/c995baa1ec7003180072d4c8cfab6a8d4848876229f418c92a1f70b717e4/pyky040-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b889885c94e8c3162b5d9eed01d01e7b", "sha256": "95f8cfedf0b5fe0d3c3cb4918509d29832ef9cb27e8a5c6980d58a1b40146617"}, "downloads": -1, "filename": "pyky040-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b889885c94e8c3162b5d9eed01d01e7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19939, "upload_time": "2020-02-08T17:07:36", "upload_time_iso_8601": "2020-02-08T17:07:36.314612Z", "url": "https://files.pythonhosted.org/packages/9c/9f/6cfd08dae4b45684a366e4fab9df01d6c776f5fbb610652e7b621cff8bac/pyky040-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b883b7d03937777c01b767d7d205923", "sha256": "e7f9e276423a55440aec89f160693de0a390aac58b055ae6a7231e760f38e844"}, "downloads": -1, "filename": "pyky040-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b883b7d03937777c01b767d7d205923", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20823, "upload_time": "2020-02-08T17:07:34", "upload_time_iso_8601": "2020-02-08T17:07:34.427756Z", "url": "https://files.pythonhosted.org/packages/f2/e1/c995baa1ec7003180072d4c8cfab6a8d4848876229f418c92a1f70b717e4/pyky040-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b889885c94e8c3162b5d9eed01d01e7b", "sha256": "95f8cfedf0b5fe0d3c3cb4918509d29832ef9cb27e8a5c6980d58a1b40146617"}, "downloads": -1, "filename": "pyky040-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b889885c94e8c3162b5d9eed01d01e7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19939, "upload_time": "2020-02-08T17:07:36", "upload_time_iso_8601": "2020-02-08T17:07:36.314612Z", "url": "https://files.pythonhosted.org/packages/9c/9f/6cfd08dae4b45684a366e4fab9df01d6c776f5fbb610652e7b621cff8bac/pyky040-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:25 2020"}