{"info": {"author": "Brett Vanderwerff", "author_email": "brett.vanderwerff@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Flask", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Flaskerizer\n\n[![Build Status](https://travis-ci.org/brettvanderwerff/Flaskerizer.svg?branch=master)](https://travis-ci.org/brettvanderwerff/Flaskerizer)\n\n## What is the Flaskerizer and what problem does it solve?\n\nBootstrap templates are a fast way to a get very dynamic website up and running, but these templates typically don't work \"out of the box\" with the python web framework Flask and require some tedious directory building and link modification before being functional with Flask. This is especially true if the Bootstrap templates are for large multi-page websites. \n\nThe Flaskerizer automates the necessary directory building and link creation needed to make Bootstrap templates work \"out of the box\" with Flask. The Flaskerizer also automatically creates the necessary files with the appropriate routes and basic error handling needed to serve the Bootstrap template as a Flask app.\n\nThe Flaskerizer takes a Bootstrap template that looks like this \"out of the box\" with Flask:\n\n![picture alt](/readme_images/not_working_example.png)\n\nand converts it to something that looks like this \"out of the box\" with Flask:\n\n![picture alt](/readme_images/working_example.png)\n\n## Dependencies\n\nFlask: 0.12.3 or higher\n\n## Usage case/Quickstart\n\n1. Install Flaskerizer from PyPI.\n\n```commandline\n$pip install flaskerizer \n\n```\n\n2. Run Flaskerizer as a command line tool.\n\n```commandline\n$flaskerizer -i 'Path to the top level folder of the Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app'\n\n```\n\n## Command Line Arguments\n\nFlaskerizer is run by command line arguments. After using pip to install Flaskerizer, command line arguments are always preceded by:\n\n```commandline\n$flaskerizer\n``` \n\n#### Required Arguments:\n\n| Command | Description | Default Value\n| :---: | :---: | :---: |\n| -i | Path to the top level folder of the unzipped Bootstrap template | None\n| -t | Path to the folder containing the HTML files of the Bootstrap template | None\n| -o | Path of the destination folder for your Flask app | None\n\n#### Optional Arguments:\n\n| Command | Description | Default Value\n| :---: | :---: | :---: |\n| -n | Flask app name (note: cannot be named 'app') | 'Flaskerized_app'\n| -L | Creates a large structure package based Flask app | None\n| -S | Creates a small structure module based Flask app | None\n\n\n## Detailed Setup and Operation Example\n\n1. Download your favorite Bootstrap template. https://startbootstrap.com/, https://bootstrapmade.com/, and https://colorlib.com/wp/free-bootstrap--templates/ are good places to look if you don't already have one. It does not matter where you get if from Flaskerizer is designed to be source agnostic. \n\n2. If the Bootstrap template is downloaded as a zipped file you will need to unzip the Bootstrap template.\n\n3. Open a terminal and install Flaskerizer:\n\n```commandline\n$pip install flaskerizer\n```\n\n4. Run Flaskerizer as a command line tool using the arguments specified in the previous sections of the readme.\n\n```commandline\n$flaskerizer -i 'Path to the top level folder of the unzipped Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app' -S -n my_app \n       \n```\n\n\n* `-i` should always be set to the full path of the top level folder of the Bootstrap template (i.e. the folder that appears when you first unzip the Bootstrap template).\n\n* `-t` should always be set to the full path of the folder containing the HTML files of the Bootstrap template you downloaded. Note that there may be multiple folders that contain HTML files, generally you want to set the 'templates_path' value equal to the path of the folder with the *most* HTML files in it.\n \n\n5. After running flaskerizer, navigate to the directory you indicated with the `-o` argument as the destination of your newly written Flask app, clear your browser's cache, open a terminal, and enter:\n \non Linux:\n\n ```commandline\n $python my_app/my_app.py\n ```\non Windows: \n\n ```commandline\n $python my_app\\my_app.py\n ```\n\n \n \n in the terminal to launch the newly made Flask app (this may vary by environment, i.e. some users will enter python3 instead of python).\n\n6. View your website by opening the browser to your local address on port 5000 (i.e. http://127.0.0.1:5000 / http://0.0.0.0:5000) , Note: may have to enter http://127.0.0.1:5000/index.html / http://0.0.0.0:5000/index.html to route the  website homepage. **NOTE :** You may need to clear your browser's cache to view the website properly.\n\n7. You may get still get a few 404 errors for broken links that you might need to fix manually, the Flaskerizer is early in development and not perfect yet, but overall it seems to be doing a good job regardless of the Bootstrap template source. The best things you can do if you get broken link errors is to raise an issue with us and specify the template you are using and the error you are getting so that we can try to fix it. You can also email me at brett.vanderwerff@gmail.com.\n\n\n\n## Selection of large or small Flask application structure (optional)\n\nUsing the command line argument `-S`, results in the creation of a small structure module based Flask app after running steps 1-4 under **Detailed Setup and Operation Example** with the creation of a basic module that contains both the Flask app object and all the routes:\n```\n.\n\u251c\u2500\u2500 {{app-name}}.py    # Module with the Flask app and routes\n\u251c\u2500\u2500static\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 css  \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fonts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 img  \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 js  \n\u2514\u2500\u2500 templates  \n```\n\n By using the command line argument `-L` you are choosing to create a large structure package based Flask app as described in the Flask documentation \n@ http://flask.pocoo.org/docs/1.0/patterns/packages/ :\n\n```\n.\n\u251c\u2500\u2500{{app-name}}     # Package folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py    # File containing the Flask app object\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 routes.py      # File with the routes\n\u2502   \u251c\u2500\u2500static\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 css  \n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 fonts\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 img  \n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 js  \n\u2502   \u2514\u2500\u2500 templates\n\u2514\u2500\u2500 setup.py  \n```\nCreating and launching the large structure Flask app is a bit different, here is an example:\n\n1. Complete steps 1 and 3 under **Detailed Setup and Operation Example**.\n\n2. Open the terminal and enter:\n\n```commandline\n$flaskerizer -i 'Path to the top level folder of the unzipped Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app' -L -n my_app \n        \n```\n\n3. After running flaskerizer, navigate to the directory you indicated with the `-o` argument as the destination of your newly written Flask app, open a terminal, and enter:\n\non Windows:\n\n```commandline\n$set FLASK_APP=my_app\\my_app\\__init__.py\n\n```\non Linux:\n\n```commandline\n$export FLASK_APP=my_app/my_app/__init__.py\n```\n\n4. Enter `$flask run`\n\n5. View your website by opening the browser to your local address on port 5000 (i.e. http://127.0.0.1:5000 / http://0.0.0.0:5000) , Note: may have to enter http://127.0.0.1:5000/index.html / http://0.0.0.0:5000/index.html to route the  website homepage. **NOTE :** You may need to clear your browser's cache to view the website properly.\n\n\n## How it works\n\nThe Flaskerizer has two main classes:\n* `StructureDirectory()`\n\n* `WriteApp()`\n\n**The StructureDirectory class**\n\nThe StructureDirectory class makes the typical Flask project folder structure in the Flaskerized_app directory. This includes making a 'static' folder that will contain all the front end files from the Bootstrap template (css, javascript, etc.) and a 'templates' folder that will contain all the HTML files from the Bootstrap template. The StructureDirectory class takes both the full path to Bootstrap template HTML files (templates_path) and the full path to the top level directory of the Bootstrap template (top_level_path) as arguments. HTML files are copied from the Bootstrap template to the Flask project folder via the explicitly stated templates_path. Methods of the StructureDirectory class search the entire Bootstrap template directory tree for any files that belong in the 'static' folder based on their extensions (.js, .css, .img, etc). Any files that belong in the 'static' folder of the Flask project are then migrated there. The StructureDirectory class also has methods that parse all migrated files for links that refer to original folder structure of the Bootstrap template and fixes them to reflect the new structure of the Flask project. \n\n**The WriteApp class**\n\n\nMethods of the WriteApp class automatically write a python script 'app.py' with the necessary instructions to launch a Flask app of the Bootstrap template. The methods write the import statements, instantiate the 'app' object from the Flask class, and write a main loop to run the app. These methods also detect the HTML files in the 'templates' folder of the Flask project and write the corresponding routes to these HTML files. If any of the HTML files are named for an HTTP status code, the methods generate an error handling route for that file. This assumes that any HTML file with an HTTP status code in it's name reflects an error, which is usually true. \n\n\n## Contribution Guidelines\n\nWe are beginner friendly. We love bug reports.\n\n1. Comment on an issue you would like assigned to you. \n2. Fork the Flaskerizer repo onto your Github.\n3. Clone your fork to your machine.\n4. Use git to make a new branch on your local machine by opening a terminal and typing `$ git checkout -b XXXX-SHORT_TITLE_OF_ISSUE` where XXX is the zero padded issue number, such as 0001. For example: `$ git checkout -b 0001-HTTP_STATUS_CODE_ISSUE` would be good for the first issue in the repo. \n5. Make a pull request right away by pushing your branch to Github and trying to merge your fork with my master branch. It's okay if you have not made any progress, just title the pull request whatever you titled the branch and add 'Work in progress\" to the title so that I know you are working on it. \n6. Let me know when you are done with your branch and we can review the code together before finalizing the contribution :)\n\n### Running Flaskerizer as a developer\n\n1. Clone the repo.\n2. Navigate to the top level directory, open a terminal, and enter:\n```commandline\n$python -m flaskerizer \n```\n3. See previous sections in the readme for appropriate use of command line arguments.\n\n### Running the tests\n\nWe are currently using [pytest](https://docs.pytest.org/en/latest/) for running all the tests at once. Run `$pip install pytest`  and then in the top level directory of the repo run `$pytest` to run the tests.\n\n### Contributors:\n\nA list of people that have contributed to Flaskerizer by completing a pull request:\n\n- [@avnish98](https://github.com/avnish98)\n\n- [Mayank Nader](https://github.com/makkoncept)\n\n- [@jmbriody](https://github.com/jmbriody)\n\n- [@PvtHaggard](https://github.com/PvtHaggard)\n\n- [@WeepingJarl012](https://github.com/WeepingJarl012)\n\n- [@etiontdn](https://github.com/etiontdn)\n\n- [@heberfabiano](https://github.com/eberfabiano)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brettvanderwerff/Flaskerizer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flaskerizer", "package_url": "https://pypi.org/project/flaskerizer/", "platform": "", "project_url": "https://pypi.org/project/flaskerizer/", "project_urls": {"Homepage": "https://github.com/brettvanderwerff/Flaskerizer"}, "release_url": "https://pypi.org/project/flaskerizer/0.0.8/", "requires_dist": null, "requires_python": "", "summary": "The Flaskerizer makes Bootstrap templates work \"out of the box\" with Flask.", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flaskerizer</h1>\n<p><a href=\"https://travis-ci.org/brettvanderwerff/Flaskerizer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3a91ce0ac1c0c2f8f733b1877bc1ae33fac5c3c/68747470733a2f2f7472617669732d63692e6f72672f627265747476616e64657277657266662f466c61736b6572697a65722e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>What is the Flaskerizer and what problem does it solve?</h2>\n<p>Bootstrap templates are a fast way to a get very dynamic website up and running, but these templates typically don't work \"out of the box\" with the python web framework Flask and require some tedious directory building and link modification before being functional with Flask. This is especially true if the Bootstrap templates are for large multi-page websites.</p>\n<p>The Flaskerizer automates the necessary directory building and link creation needed to make Bootstrap templates work \"out of the box\" with Flask. The Flaskerizer also automatically creates the necessary files with the appropriate routes and basic error handling needed to serve the Bootstrap template as a Flask app.</p>\n<p>The Flaskerizer takes a Bootstrap template that looks like this \"out of the box\" with Flask:</p>\n<p><img alt=\"picture alt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e322779559044b8545b83b381326561f9147bf08/2f726561646d655f696d616765732f6e6f745f776f726b696e675f6578616d706c652e706e67\"></p>\n<p>and converts it to something that looks like this \"out of the box\" with Flask:</p>\n<p><img alt=\"picture alt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/246f559e300bb89a17e4d3344231e23bc0d9e501/2f726561646d655f696d616765732f776f726b696e675f6578616d706c652e706e67\"></p>\n<h2>Dependencies</h2>\n<p>Flask: 0.12.3 or higher</p>\n<h2>Usage case/Quickstart</h2>\n<ol>\n<li>Install Flaskerizer from PyPI.</li>\n</ol>\n<pre>$pip install flaskerizer \n</pre>\n<ol>\n<li>Run Flaskerizer as a command line tool.</li>\n</ol>\n<pre>$flaskerizer -i 'Path to the top level folder of the Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app'\n</pre>\n<h2>Command Line Arguments</h2>\n<p>Flaskerizer is run by command line arguments. After using pip to install Flaskerizer, command line arguments are always preceded by:</p>\n<pre>$flaskerizer\n</pre>\n<h4>Required Arguments:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Command</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">-i</td>\n<td align=\"center\">Path to the top level folder of the unzipped Bootstrap template</td>\n<td align=\"center\">None</td>\n</tr>\n<tr>\n<td align=\"center\">-t</td>\n<td align=\"center\">Path to the folder containing the HTML files of the Bootstrap template</td>\n<td align=\"center\">None</td>\n</tr>\n<tr>\n<td align=\"center\">-o</td>\n<td align=\"center\">Path of the destination folder for your Flask app</td>\n<td align=\"center\">None</td>\n</tr></tbody></table>\n<h4>Optional Arguments:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Command</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">-n</td>\n<td align=\"center\">Flask app name (note: cannot be named 'app')</td>\n<td align=\"center\">'Flaskerized_app'</td>\n</tr>\n<tr>\n<td align=\"center\">-L</td>\n<td align=\"center\">Creates a large structure package based Flask app</td>\n<td align=\"center\">None</td>\n</tr>\n<tr>\n<td align=\"center\">-S</td>\n<td align=\"center\">Creates a small structure module based Flask app</td>\n<td align=\"center\">None</td>\n</tr></tbody></table>\n<h2>Detailed Setup and Operation Example</h2>\n<ol>\n<li>\n<p>Download your favorite Bootstrap template. <a href=\"https://startbootstrap.com/\" rel=\"nofollow\">https://startbootstrap.com/</a>, <a href=\"https://bootstrapmade.com/\" rel=\"nofollow\">https://bootstrapmade.com/</a>, and <a href=\"https://colorlib.com/wp/free-bootstrap--templates/\" rel=\"nofollow\">https://colorlib.com/wp/free-bootstrap--templates/</a> are good places to look if you don't already have one. It does not matter where you get if from Flaskerizer is designed to be source agnostic.</p>\n</li>\n<li>\n<p>If the Bootstrap template is downloaded as a zipped file you will need to unzip the Bootstrap template.</p>\n</li>\n<li>\n<p>Open a terminal and install Flaskerizer:</p>\n</li>\n</ol>\n<pre>$pip install flaskerizer\n</pre>\n<ol>\n<li>Run Flaskerizer as a command line tool using the arguments specified in the previous sections of the readme.</li>\n</ol>\n<pre>$flaskerizer -i 'Path to the top level folder of the unzipped Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app' -S -n my_app \n       \n</pre>\n<ul>\n<li>\n<p><code>-i</code> should always be set to the full path of the top level folder of the Bootstrap template (i.e. the folder that appears when you first unzip the Bootstrap template).</p>\n</li>\n<li>\n<p><code>-t</code> should always be set to the full path of the folder containing the HTML files of the Bootstrap template you downloaded. Note that there may be multiple folders that contain HTML files, generally you want to set the 'templates_path' value equal to the path of the folder with the <em>most</em> HTML files in it.</p>\n</li>\n</ul>\n<ol>\n<li>After running flaskerizer, navigate to the directory you indicated with the <code>-o</code> argument as the destination of your newly written Flask app, clear your browser's cache, open a terminal, and enter:</li>\n</ol>\n<p>on Linux:</p>\n<pre>$python my_app/my_app.py\n</pre>\n<p>on Windows:</p>\n<pre>$python my_app\\my_app.py\n</pre>\n<p>in the terminal to launch the newly made Flask app (this may vary by environment, i.e. some users will enter python3 instead of python).</p>\n<ol>\n<li>\n<p>View your website by opening the browser to your local address on port 5000 (i.e. <a href=\"http://127.0.0.1:5000\" rel=\"nofollow\">http://127.0.0.1:5000</a> / <a href=\"http://0.0.0.0:5000\" rel=\"nofollow\">http://0.0.0.0:5000</a>) , Note: may have to enter <a href=\"http://127.0.0.1:5000/index.html\" rel=\"nofollow\">http://127.0.0.1:5000/index.html</a> / <a href=\"http://0.0.0.0:5000/index.html\" rel=\"nofollow\">http://0.0.0.0:5000/index.html</a> to route the  website homepage. <strong>NOTE :</strong> You may need to clear your browser's cache to view the website properly.</p>\n</li>\n<li>\n<p>You may get still get a few 404 errors for broken links that you might need to fix manually, the Flaskerizer is early in development and not perfect yet, but overall it seems to be doing a good job regardless of the Bootstrap template source. The best things you can do if you get broken link errors is to raise an issue with us and specify the template you are using and the error you are getting so that we can try to fix it. You can also email me at <a href=\"mailto:brett.vanderwerff@gmail.com\">brett.vanderwerff@gmail.com</a>.</p>\n</li>\n</ol>\n<h2>Selection of large or small Flask application structure (optional)</h2>\n<p>Using the command line argument <code>-S</code>, results in the creation of a small structure module based Flask app after running steps 1-4 under <strong>Detailed Setup and Operation Example</strong> with the creation of a basic module that contains both the Flask app object and all the routes:</p>\n<pre><code>.\n\u251c\u2500\u2500 {{app-name}}.py    # Module with the Flask app and routes\n\u251c\u2500\u2500static\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 css  \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fonts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 img  \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 js  \n\u2514\u2500\u2500 templates  \n</code></pre>\n<p>By using the command line argument <code>-L</code> you are choosing to create a large structure package based Flask app as described in the Flask documentation\n@ <a href=\"http://flask.pocoo.org/docs/1.0/patterns/packages/\" rel=\"nofollow\">http://flask.pocoo.org/docs/1.0/patterns/packages/</a> :</p>\n<pre><code>.\n\u251c\u2500\u2500{{app-name}}     # Package folder\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py    # File containing the Flask app object\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 routes.py      # File with the routes\n\u2502   \u251c\u2500\u2500static\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 css  \n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 fonts\n\u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 img  \n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 js  \n\u2502   \u2514\u2500\u2500 templates\n\u2514\u2500\u2500 setup.py  \n</code></pre>\n<p>Creating and launching the large structure Flask app is a bit different, here is an example:</p>\n<ol>\n<li>\n<p>Complete steps 1 and 3 under <strong>Detailed Setup and Operation Example</strong>.</p>\n</li>\n<li>\n<p>Open the terminal and enter:</p>\n</li>\n</ol>\n<pre>$flaskerizer -i 'Path to the top level folder of the unzipped Bootstrap template' -t 'Path to the folder containing the HTML files of the Bootstrap template' -o 'Path of the destination folder for your Flask app' -L -n my_app \n        \n</pre>\n<ol>\n<li>After running flaskerizer, navigate to the directory you indicated with the <code>-o</code> argument as the destination of your newly written Flask app, open a terminal, and enter:</li>\n</ol>\n<p>on Windows:</p>\n<pre>$set FLASK_APP=my_app\\my_app\\__init__.py\n</pre>\n<p>on Linux:</p>\n<pre>$export FLASK_APP=my_app/my_app/__init__.py\n</pre>\n<ol>\n<li>\n<p>Enter <code>$flask run</code></p>\n</li>\n<li>\n<p>View your website by opening the browser to your local address on port 5000 (i.e. <a href=\"http://127.0.0.1:5000\" rel=\"nofollow\">http://127.0.0.1:5000</a> / <a href=\"http://0.0.0.0:5000\" rel=\"nofollow\">http://0.0.0.0:5000</a>) , Note: may have to enter <a href=\"http://127.0.0.1:5000/index.html\" rel=\"nofollow\">http://127.0.0.1:5000/index.html</a> / <a href=\"http://0.0.0.0:5000/index.html\" rel=\"nofollow\">http://0.0.0.0:5000/index.html</a> to route the  website homepage. <strong>NOTE :</strong> You may need to clear your browser's cache to view the website properly.</p>\n</li>\n</ol>\n<h2>How it works</h2>\n<p>The Flaskerizer has two main classes:</p>\n<ul>\n<li>\n<p><code>StructureDirectory()</code></p>\n</li>\n<li>\n<p><code>WriteApp()</code></p>\n</li>\n</ul>\n<p><strong>The StructureDirectory class</strong></p>\n<p>The StructureDirectory class makes the typical Flask project folder structure in the Flaskerized_app directory. This includes making a 'static' folder that will contain all the front end files from the Bootstrap template (css, javascript, etc.) and a 'templates' folder that will contain all the HTML files from the Bootstrap template. The StructureDirectory class takes both the full path to Bootstrap template HTML files (templates_path) and the full path to the top level directory of the Bootstrap template (top_level_path) as arguments. HTML files are copied from the Bootstrap template to the Flask project folder via the explicitly stated templates_path. Methods of the StructureDirectory class search the entire Bootstrap template directory tree for any files that belong in the 'static' folder based on their extensions (.js, .css, .img, etc). Any files that belong in the 'static' folder of the Flask project are then migrated there. The StructureDirectory class also has methods that parse all migrated files for links that refer to original folder structure of the Bootstrap template and fixes them to reflect the new structure of the Flask project.</p>\n<p><strong>The WriteApp class</strong></p>\n<p>Methods of the WriteApp class automatically write a python script 'app.py' with the necessary instructions to launch a Flask app of the Bootstrap template. The methods write the import statements, instantiate the 'app' object from the Flask class, and write a main loop to run the app. These methods also detect the HTML files in the 'templates' folder of the Flask project and write the corresponding routes to these HTML files. If any of the HTML files are named for an HTTP status code, the methods generate an error handling route for that file. This assumes that any HTML file with an HTTP status code in it's name reflects an error, which is usually true.</p>\n<h2>Contribution Guidelines</h2>\n<p>We are beginner friendly. We love bug reports.</p>\n<ol>\n<li>Comment on an issue you would like assigned to you.</li>\n<li>Fork the Flaskerizer repo onto your Github.</li>\n<li>Clone your fork to your machine.</li>\n<li>Use git to make a new branch on your local machine by opening a terminal and typing <code>$ git checkout -b XXXX-SHORT_TITLE_OF_ISSUE</code> where XXX is the zero padded issue number, such as 0001. For example: <code>$ git checkout -b 0001-HTTP_STATUS_CODE_ISSUE</code> would be good for the first issue in the repo.</li>\n<li>Make a pull request right away by pushing your branch to Github and trying to merge your fork with my master branch. It's okay if you have not made any progress, just title the pull request whatever you titled the branch and add 'Work in progress\" to the title so that I know you are working on it.</li>\n<li>Let me know when you are done with your branch and we can review the code together before finalizing the contribution :)</li>\n</ol>\n<h3>Running Flaskerizer as a developer</h3>\n<ol>\n<li>Clone the repo.</li>\n<li>Navigate to the top level directory, open a terminal, and enter:</li>\n</ol>\n<pre>$python -m flaskerizer \n</pre>\n<ol>\n<li>See previous sections in the readme for appropriate use of command line arguments.</li>\n</ol>\n<h3>Running the tests</h3>\n<p>We are currently using <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> for running all the tests at once. Run <code>$pip install pytest</code>  and then in the top level directory of the repo run <code>$pytest</code> to run the tests.</p>\n<h3>Contributors:</h3>\n<p>A list of people that have contributed to Flaskerizer by completing a pull request:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/avnish98\" rel=\"nofollow\">@avnish98</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/makkoncept\" rel=\"nofollow\">Mayank Nader</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jmbriody\" rel=\"nofollow\">@jmbriody</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/PvtHaggard\" rel=\"nofollow\">@PvtHaggard</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/WeepingJarl012\" rel=\"nofollow\">@WeepingJarl012</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/etiontdn\" rel=\"nofollow\">@etiontdn</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/eberfabiano\" rel=\"nofollow\">@heberfabiano</a></p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 4275720, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6ad1fba85243779ad4669f5ef13940d7", "sha256": "9f3d3b60ecc856cafb0bf31065ba1f57047fb940d749d302460a2cdb401c841e"}, "downloads": -1, "filename": "flaskerizer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ad1fba85243779ad4669f5ef13940d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18966, "upload_time": "2018-08-01T04:13:44", "upload_time_iso_8601": "2018-08-01T04:13:44.178019Z", "url": "https://files.pythonhosted.org/packages/5f/a4/db9d2914b542cdf7eb1e02b8c4d08e393529da7ad8e3eba43183861fae42/flaskerizer-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "962886d61595d2fc45c9d5d35662fa68", "sha256": "195004c3110aef5f13f64d5ce94792194a0e98cbd1d5f7cee55ac7ddfc8706ee"}, "downloads": -1, "filename": "flaskerizer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "962886d61595d2fc45c9d5d35662fa68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16634, "upload_time": "2018-08-01T04:13:45", "upload_time_iso_8601": "2018-08-01T04:13:45.702159Z", "url": "https://files.pythonhosted.org/packages/72/34/bfa6449f25080c12a15f01fc66caf24e053df685fcc8609af0b9cf669159/flaskerizer-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b803a1e4441b1abe8fbf8c999c900325", "sha256": "f1de29bf5c164b323a17bbb02dd098dcf5fc51db3a09fd1f0605298237b9291b"}, "downloads": -1, "filename": "flaskerizer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b803a1e4441b1abe8fbf8c999c900325", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18972, "upload_time": "2018-08-01T05:27:34", "upload_time_iso_8601": "2018-08-01T05:27:34.314527Z", "url": "https://files.pythonhosted.org/packages/ab/f7/a22c0f987dd3757102665d1264645eb8e7017e43f2d0ef0b96cd53a6120b/flaskerizer-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7422c624a6d5d29a582227f7238300d5", "sha256": "02bfda5e7e322f594056eba44337a43fa3d728a116f11b276aa88520c2766e23"}, "downloads": -1, "filename": "flaskerizer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7422c624a6d5d29a582227f7238300d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16593, "upload_time": "2018-08-01T05:27:35", "upload_time_iso_8601": "2018-08-01T05:27:35.822297Z", "url": "https://files.pythonhosted.org/packages/1c/d5/0c3b268a4d5a87a9d44c2fdff051f0248060ad7687ffec63ecb70db7e9d0/flaskerizer-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "143d4cfcf9dcdcd28a10c1b3ee139386", "sha256": "35facf83235a47f16d4135a406775de625b1d874d73aa3e38acb82751b855adc"}, "downloads": -1, "filename": "flaskerizer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "143d4cfcf9dcdcd28a10c1b3ee139386", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16748, "upload_time": "2018-09-03T20:06:38", "upload_time_iso_8601": "2018-09-03T20:06:38.184869Z", "url": "https://files.pythonhosted.org/packages/96/49/434194bd8037bd3b79af86d8af4bc8a68f0485cf73380aa290d07bf97d36/flaskerizer-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "63436679cefb4967ae83996da2e1611f", "sha256": "c31acd47e0cc9cef0231c1c67cc5882ba9d343b736078707759ce0961b789157"}, "downloads": -1, "filename": "flaskerizer-0.0.4.tar.gz", "has_sig": false, "md5_digest": "63436679cefb4967ae83996da2e1611f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16812, "upload_time": "2018-09-05T14:12:54", "upload_time_iso_8601": "2018-09-05T14:12:54.395495Z", "url": "https://files.pythonhosted.org/packages/87/e9/d15efbc0a8f08dc91d363c7006b2907545dcc8ad60873c313ea215fe925b/flaskerizer-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "65d0f727d6d081a595ab571ea0159039", "sha256": "a7aad3827dadb8f019128930b26250eac8b3edff5ec7f18918b9c9d552b2aeef"}, "downloads": -1, "filename": "flaskerizer-0.0.5.tar.gz", "has_sig": false, "md5_digest": "65d0f727d6d081a595ab571ea0159039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16780, "upload_time": "2018-09-05T14:34:37", "upload_time_iso_8601": "2018-09-05T14:34:37.265396Z", "url": "https://files.pythonhosted.org/packages/f1/0e/3bda30576cb5774973487cf89ea683dd798afaf9cc4ee82f384ca83dff10/flaskerizer-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "1ec43b38408c87369683f8e644d06af2", "sha256": "c632de09f2095c585ddbf35a15cd9667133f252c38181ecafe5d4e64c136bc18"}, "downloads": -1, "filename": "flaskerizer-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1ec43b38408c87369683f8e644d06af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16763, "upload_time": "2018-09-06T15:20:32", "upload_time_iso_8601": "2018-09-06T15:20:32.895275Z", "url": "https://files.pythonhosted.org/packages/b7/73/3f5cbe318ac23d43216fc8f0afd714ae70f3f49426f2106dc2362838b183/flaskerizer-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "12f6d61f1f68e830c107f5dadced35a6", "sha256": "04cee2849adfb5b70e8917acf18d9681fa1bb334c4631f6ab05da1cab10b5550"}, "downloads": -1, "filename": "flaskerizer-0.0.7.tar.gz", "has_sig": false, "md5_digest": "12f6d61f1f68e830c107f5dadced35a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17076, "upload_time": "2018-09-16T00:14:50", "upload_time_iso_8601": "2018-09-16T00:14:50.017863Z", "url": "https://files.pythonhosted.org/packages/cc/6e/954818fa193279e0c2184cc62bcf7a54d3591d00bc1d04036c0d4f54f256/flaskerizer-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "7fe2564ebf709e2a867135ec1b7224de", "sha256": "9ac62e5896564fc1b0f2ec725d00dae5cbe43c2b6bad6d18a851c09dd6029df4"}, "downloads": -1, "filename": "flaskerizer-0.0.8.tar.gz", "has_sig": false, "md5_digest": "7fe2564ebf709e2a867135ec1b7224de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17082, "upload_time": "2018-09-16T00:38:57", "upload_time_iso_8601": "2018-09-16T00:38:57.009406Z", "url": "https://files.pythonhosted.org/packages/b4/73/964b6063d95e025d340cf134875db79d3ceda230eb241d9894ad339ff6c0/flaskerizer-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fe2564ebf709e2a867135ec1b7224de", "sha256": "9ac62e5896564fc1b0f2ec725d00dae5cbe43c2b6bad6d18a851c09dd6029df4"}, "downloads": -1, "filename": "flaskerizer-0.0.8.tar.gz", "has_sig": false, "md5_digest": "7fe2564ebf709e2a867135ec1b7224de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17082, "upload_time": "2018-09-16T00:38:57", "upload_time_iso_8601": "2018-09-16T00:38:57.009406Z", "url": "https://files.pythonhosted.org/packages/b4/73/964b6063d95e025d340cf134875db79d3ceda230eb241d9894ad339ff6c0/flaskerizer-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:55 2020"}