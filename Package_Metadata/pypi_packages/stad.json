{"info": {"author": "Jan Aerts", "author_email": "jan.aerts@uhasselt.be", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Visualization"], "description": "# pySTAD - Python implementation of Simplified Topological Abstraction of Data\n\n## Installation\n`pip install stad`\n\n## Usage\nThe input to `stad` is a _normalised distance matrix_ (i.e. with values between 0 and 1). Optionally, you can also provide an array of values for each datapoint that can be used in the lens.\n\nLet's for example look at the five circles dataset that is used in the example script below. Without a lens, a `stad` analysis will reveal a circle with four spikes; with a lens each of these spikes itself also becomes a circle (as in the picture).\n\n<img src=\"circles_with_lens.png\" width=\"400px\"/>\n\nThe data for this dataset looks like this:\n```\nx,y,hue\n377,566,#1F988B\n362,589,#21A585\n350,607,#29AF7F\n104,977,#20928C\n124,978,#26818E\n118,956,#1F9E89\n...\n```\n\nHere's a complete script to create this graph:\n\n```python\nimport stad\nimport pandas as pd\n\n## Load the data\nurl = 'https://gist.githubusercontent.com/jandot/a84c0505cdc8008a6e5ae5032532a39f/raw/d834527117fd204d33486998d10290251354d013/five_circles.csv'\ndata = pd.read_csv(url, header=0)\n\n## Extract the values we want to use in our distance, the lens, and optional features\nvalues = data[['x','y']].values.tolist()\nlens = data['hue'].map(lambda x:stad.hex_to_hsv(x)[0]).values\nxs = data['x'].values.tolist()\nys = data['y'].values.tolist()\nhues = data['hue'].values.tolist()\n\n## Create the distance matrix in the high_dimensional space. This can be using\n## cosine distance, euclidean, or any other.\nhighD_dist_matrix = stad.calculate_highD_dist_matrix(values)\n\n## Run STAD and show the result\ng = stad.run_stad(highD_dist_matrix, lens=lens, features={'x':xs, 'y':ys, 'hue': hues})\nstad.draw_stad(g)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vda-lab/pySTAD", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "stad", "package_url": "https://pypi.org/project/stad/", "platform": "", "project_url": "https://pypi.org/project/stad/", "project_urls": {"Homepage": "https://github.com/vda-lab/pySTAD"}, "release_url": "https://pypi.org/project/stad/2.0.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Dimensionality reduction through Simplified Topological Abstraction of Data", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pySTAD - Python implementation of Simplified Topological Abstraction of Data</h1>\n<h2>Installation</h2>\n<p><code>pip install stad</code></p>\n<h2>Usage</h2>\n<p>The input to <code>stad</code> is a <em>normalised distance matrix</em> (i.e. with values between 0 and 1). Optionally, you can also provide an array of values for each datapoint that can be used in the lens.</p>\n<p>Let's for example look at the five circles dataset that is used in the example script below. Without a lens, a <code>stad</code> analysis will reveal a circle with four spikes; with a lens each of these spikes itself also becomes a circle (as in the picture).</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c8a3a6b72acb0896a8c9574a4abe0a9949a646f/636972636c65735f776974685f6c656e732e706e67\" width=\"400px\">\n<p>The data for this dataset looks like this:</p>\n<pre><code>x,y,hue\n377,566,#1F988B\n362,589,#21A585\n350,607,#29AF7F\n104,977,#20928C\n124,978,#26818E\n118,956,#1F9E89\n...\n</code></pre>\n<p>Here's a complete script to create this graph:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">stad</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"c1\">## Load the data</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://gist.githubusercontent.com/jandot/a84c0505cdc8008a6e5ae5032532a39f/raw/d834527117fd204d33486998d10290251354d013/five_circles.csv'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## Extract the values we want to use in our distance, the lens, and optional features</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span><span class=\"s1\">'y'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n<span class=\"n\">lens</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'hue'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span><span class=\"n\">stad</span><span class=\"o\">.</span><span class=\"n\">hex_to_hsv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n<span class=\"n\">ys</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'y'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n<span class=\"n\">hues</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'hue'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n\n<span class=\"c1\">## Create the distance matrix in the high_dimensional space. This can be using</span>\n<span class=\"c1\">## cosine distance, euclidean, or any other.</span>\n<span class=\"n\">highD_dist_matrix</span> <span class=\"o\">=</span> <span class=\"n\">stad</span><span class=\"o\">.</span><span class=\"n\">calculate_highD_dist_matrix</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## Run STAD and show the result</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">stad</span><span class=\"o\">.</span><span class=\"n\">run_stad</span><span class=\"p\">(</span><span class=\"n\">highD_dist_matrix</span><span class=\"p\">,</span> <span class=\"n\">lens</span><span class=\"o\">=</span><span class=\"n\">lens</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">:</span><span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"s1\">'hue'</span><span class=\"p\">:</span> <span class=\"n\">hues</span><span class=\"p\">})</span>\n<span class=\"n\">stad</span><span class=\"o\">.</span><span class=\"n\">draw_stad</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6545376, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "6849641d6cf848c3338d8d42aa0dab0e", "sha256": "74aba90047bb233bd1b1508f7398b4507367a34abc4a1d5567ce62848254c8cc"}, "downloads": -1, "filename": "stad-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6849641d6cf848c3338d8d42aa0dab0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2881, "upload_time": "2020-01-30T19:17:45", "upload_time_iso_8601": "2020-01-30T19:17:45.777660Z", "url": "https://files.pythonhosted.org/packages/53/d4/ee293f9f4ba93da8c45b1a5f940edc05c197509d98b23d6568d17ab44f78/stad-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "285617f17defd56af0b453e8e6f05f90", "sha256": "c626172aaf9b143d66a7106027596671fa5d1da356b53c35016a6d3250591352"}, "downloads": -1, "filename": "stad-2.0.0.tar.gz", "has_sig": false, "md5_digest": "285617f17defd56af0b453e8e6f05f90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2080, "upload_time": "2020-01-30T19:17:48", "upload_time_iso_8601": "2020-01-30T19:17:48.742839Z", "url": "https://files.pythonhosted.org/packages/5f/3e/5abcdc8fa90929e986c703c2a8a2749a3a5020b58f81f1b12027af91ec83/stad-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "a8712dc455132bcdada7bcd4fc5d42ec", "sha256": "fcb996784aa5f685fdaf85bfe8149c45b80e768eac98dbdecc1713c92fb4db90"}, "downloads": -1, "filename": "stad-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8712dc455132bcdada7bcd4fc5d42ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8320, "upload_time": "2020-01-30T19:55:12", "upload_time_iso_8601": "2020-01-30T19:55:12.864142Z", "url": "https://files.pythonhosted.org/packages/f3/81/5eb74c96413b3547a2100fd94fb41afc3775bc619a8ceddafa3171adc63d/stad-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7d844a2ed2f387c50bfd13179a6fd7a", "sha256": "5a9aa9ef87a9802d211e6c799ce7effac5b34cb74c0d397dde9374b8a36aa70a"}, "downloads": -1, "filename": "stad-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c7d844a2ed2f387c50bfd13179a6fd7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7218, "upload_time": "2020-01-30T19:55:14", "upload_time_iso_8601": "2020-01-30T19:55:14.268478Z", "url": "https://files.pythonhosted.org/packages/58/1f/c4fbeaec08cd13442e26c2bdc53547864b3d463abadc4aa11bd4944945de/stad-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8712dc455132bcdada7bcd4fc5d42ec", "sha256": "fcb996784aa5f685fdaf85bfe8149c45b80e768eac98dbdecc1713c92fb4db90"}, "downloads": -1, "filename": "stad-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8712dc455132bcdada7bcd4fc5d42ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8320, "upload_time": "2020-01-30T19:55:12", "upload_time_iso_8601": "2020-01-30T19:55:12.864142Z", "url": "https://files.pythonhosted.org/packages/f3/81/5eb74c96413b3547a2100fd94fb41afc3775bc619a8ceddafa3171adc63d/stad-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7d844a2ed2f387c50bfd13179a6fd7a", "sha256": "5a9aa9ef87a9802d211e6c799ce7effac5b34cb74c0d397dde9374b8a36aa70a"}, "downloads": -1, "filename": "stad-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c7d844a2ed2f387c50bfd13179a6fd7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7218, "upload_time": "2020-01-30T19:55:14", "upload_time_iso_8601": "2020-01-30T19:55:14.268478Z", "url": "https://files.pythonhosted.org/packages/58/1f/c4fbeaec08cd13442e26c2bdc53547864b3d463abadc4aa11bd4944945de/stad-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:48 2020"}