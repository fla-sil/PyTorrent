{"info": {"author": "Jesper Friis, Francesca L\u00f8nstad Bleken, Bj\u00f8rn Tore L\u00f8vfall", "author_email": "jesper.friis@sintef.no", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "EMMO - Python API for the European Materials & Modelling Ontology\n=================================================================\n\n![CI tests](https://github.com/emmo-repo/EMMO-python/workflows/CI%20Tests/badge.svg)\n[![PyPI version](https://badge.fury.io/py/EMMO.svg)](https://badge.fury.io/py/EMMO)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://github.com/emmo-repo/EMMO-python/blob/pypi-badge/LICENSE.txt)\n\n\nThis package is based on [Owlready2] and provides an intuitive\nrepresentation of [EMMO] in Python.\nIt is available on [GitHub][EMMO-python] and on [PyPI][PyPI:EMMO]\nunder the open source BSD 3-Clause license.\n\nThe European Materials & Modelling Ontology (EMMO) is an ongoing\neffort to create an ontology that takes into account fundamental\nconcepts of physics, chemistry and materials science and is designed\nto pave the road for semantic interoperability.  The aim of EMMO is to\nbe generic and provide a common ground for describing materials,\nmodels and data that can be adapted by all domains.\n\nEMMO is formulated using OWL.  EMMO-python is a Python API for using\nEMMO to solving real problems.  By using the excellent Python package\n[Owlready2], EMMO-python provides a natural representation of\nEMMO in Python.  On top of that EMMO-python provides:\n\n  - Access by label (as well as by names, important since class and\n    property names in EMMO are based on UUIDs).\n  - Test suite for EMMO-based ontologies.\n  - Generation of graphs.\n  - Generation of documentation.\n  - Command-line tools:\n      - [emmocheck](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#emmocheck):\n        checks an ontology against EMMO conventions\n      - [ontoversion](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontoversion):\n        prints ontology version number\n      - [ontograph](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontograph):\n        vertasile tool for visualising (parts of) an ontology\n      - [ontodoc](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontodoc):\n        documents an ontology\n\nSome examples of what you can do with EMMO-python includes:\n\n  - Access and query EMMO-based ontologies from your application.\n  - Extend EMMO with new domain or application ontologies.  This can\n    be done both statically with easy readable Python code or\n    dynamically within your application.\n  - Generate graphs and documentation of your ontologies.  EMMO-python\n    includes `ontodoc`, which is a dedicated command line tool for this.\n    You find it in the [tools/](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/tools) sub directory.\n  - Check that a EMMO-based domain or application ontology ahead to the\n    conventions of EMMO.\n  - Interactively explore an ontology in e.g. [IPython].  Tab completion\n    makes exploration easy and fast.  Below is an example of an IPython\n    session where we check the relations of `Matter`:\n\n    ```python\n    In [1]: from emmo import get_ontology\n\n    In [2]: emmo = get_ontology()\n\n    In [3]: emmo.load()\n    Out[3]: get_ontology(\"http://emmo.info/emmo/emmo-inferred#\")\n\n    In [4]: emmo.Matter\n    Out[4]: physicalistic.Matter\n\n    In [5]: emmo.Matter.is_a\n    Out[5]:\n    [physicalistic.Physicalistic,\n     physical.Physical,\n     mereotopology.hasPart.some(physicalistic.Massive),\n     physical.hasTemporalPart.only(physicalistic.Matter)]\n    ```\n\n\nDocumentation and examples\n--------------------------\nThe [Owlready2 documentation][Owlready2-doc] is a good starting point.\n\nIn addition EMMO-python includes a few examples and demos:\n  - [demo/vertical](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/vertical/README.md) shows an example of\n    how EMMO may be used to achieve vertical interoperability.\n    The file [define-ontology.py](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/vertical/define-ontology.py)\n    provides a good example for how an EMMO-based application ontology\n    can be defined in Python.\n\n  - [demo/horizontal](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/horizontal/README.md) shows an example of\n    shows an example of how EMMO may be used to achieve horizontal\n    interoperability.  This demo also shows how you can use\n    EMMO-python to represent your ontology with the low-level metadata\n    framework [DLite]. In addition to achieve interoperability, as\n    shown in the demo, DLite also allow you to automatically generate\n    C or Fortran code base on your ontology.\n\n  - [examples/emmodoc](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/examples/emmodoc/README.md) shows how the\n    documentation of EMMO is generated using the `ontodoc` tool.\n\n\nInstallation\n------------\nInstall with\n\n    pip install EMMO\n\n### Required Dependencies\n  * [Python] 3.6 or later\n  * [Owlready2] v0.23 or later\n\n\n### Optional Dependencies\n  * [Graphviz]: Needed for graph generation. With support for generation\n    pdf, png and svg figures for tests and generation of documentation\n    automatically (ontodoc).\n\n  * [pandoc]: Only used for generated documentation from markdown to\n    nicely formatted html or pdf.  Tested with v2.1.2.\n\n  * [pdfLaTeX] or [XeLaTeX] and the `upgreek` latex\n    package (included in `texlive-was` on RetHat-based distributions\n    and `texlive-latex-extra` on Ubuntu) for generation of pdf\n    documentation.  If your ontology contain exotic unicode characters, we\n    recommend XeLaTeX.\n\n  * Java. Needed for reasoning.\n\n  * Optional Python packages\n    - [graphviz]: Generation of documentation and graphs.\n    - [PyYAML]:  Required for generating documentation with pandoc.\n    - [blessings]: Clean output for emmocheck\n    - [Pygments]: Coloured output for emmocheck\n    - [rdflib]: Required for ontoversion-tool\n    - [semver]: Required for ontoversion-tool\n    - [pydot]: Used for generating graphs. Will be deprecated.\n\nSee [docs/docker-dockerinstructions.md](https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/#docs/docker-dockerinstructions.md)\nfor how to build a docker image.\n\n[EMMO-python]: https://github.com/emmo-repo/EMMO-python/\n[EMMO-pypi]: https://pypi.org/project/EMMO/\n[Owlready2]: https://pypi.org/project/Owlready2/\n[Owlready2-doc]: https://pythonhosted.org/Owlready2/\n[EMMO]: https://github.com/emmo-repo/EMMO/\n[EMMO-python]: https://github.com/emmo-repo/EMMO-python/\n[PyPI:EMMO]: https://pypi.org/project/EMMO/\n[Python]: https://www.python.org/\n[IPython]: https://ipython.org/\n[DLite]: https://github.com/SINTEF/dlite/\n[pydot]: https://pypi.org/project/pydot/\n[Graphviz]: https://www.graphviz.org/\n[pandoc]: http://pandoc.org/\n[XeLaTeX]: https://www.overleaf.com/learn/latex/XeLaTeX/\n[pdfLaTeX]: https://www.latex-project.org/\n[graphviz]: https://pypi.org/project/\n[PyYAML]: https://pypi.org/project/PyYAML/\n[blessings]: https://pypi.org/project/blessings/\n[Pygments]: https://pypi.org/project/Pygments/\n[semver]: https://pypi.org/project/semver/\n[rdflib]: https://pypi.org/project/rdflib/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emmo-repo/EMMO-python", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "EMMO", "package_url": "https://pypi.org/project/EMMO/", "platform": "", "project_url": "https://pypi.org/project/EMMO/", "project_urls": {"Homepage": "https://github.com/emmo-repo/EMMO-python"}, "release_url": "https://pypi.org/project/EMMO/1.0.0a10/", "requires_dist": ["Cython", "Owlready2 (>=0.23)", "graphviz", "PyYAML", "blessings", "Pygments", "rdflib", "semver", "pydot"], "requires_python": ">=3.6.0", "summary": "Python reference API for the Europeean Materials & Modelling Ontology", "version": "1.0.0a10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EMMO - Python API for the European Materials &amp; Modelling Ontology</h1>\n<p><img alt=\"CI tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9422d26412db32d707c4d3986dc983597ed6441c/68747470733a2f2f6769746875622e636f6d2f656d6d6f2d7265706f2f454d4d4f2d707974686f6e2f776f726b666c6f77732f434925323054657374732f62616467652e737667\">\n<a href=\"https://badge.fury.io/py/EMMO\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61955b7ad785d480e4dca6d4d84f16f5c03e461e/68747470733a2f2f62616467652e667572792e696f2f70792f454d4d4f2e737667\"></a>\n<a href=\"https://github.com/emmo-repo/EMMO-python/blob/pypi-badge/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a></p>\n<p>This package is based on <a href=\"https://pypi.org/project/Owlready2/\" rel=\"nofollow\">Owlready2</a> and provides an intuitive\nrepresentation of <a href=\"https://github.com/emmo-repo/EMMO/\" rel=\"nofollow\">EMMO</a> in Python.\nIt is available on <a href=\"https://github.com/emmo-repo/EMMO-python/\" rel=\"nofollow\">GitHub</a> and on <a href=\"https://pypi.org/project/EMMO/\" rel=\"nofollow\">PyPI</a>\nunder the open source BSD 3-Clause license.</p>\n<p>The European Materials &amp; Modelling Ontology (EMMO) is an ongoing\neffort to create an ontology that takes into account fundamental\nconcepts of physics, chemistry and materials science and is designed\nto pave the road for semantic interoperability.  The aim of EMMO is to\nbe generic and provide a common ground for describing materials,\nmodels and data that can be adapted by all domains.</p>\n<p>EMMO is formulated using OWL.  EMMO-python is a Python API for using\nEMMO to solving real problems.  By using the excellent Python package\n<a href=\"https://pypi.org/project/Owlready2/\" rel=\"nofollow\">Owlready2</a>, EMMO-python provides a natural representation of\nEMMO in Python.  On top of that EMMO-python provides:</p>\n<ul>\n<li>Access by label (as well as by names, important since class and\nproperty names in EMMO are based on UUIDs).</li>\n<li>Test suite for EMMO-based ontologies.</li>\n<li>Generation of graphs.</li>\n<li>Generation of documentation.</li>\n<li>Command-line tools:\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#emmocheck\" rel=\"nofollow\">emmocheck</a>:\nchecks an ontology against EMMO conventions</li>\n<li><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontoversion\" rel=\"nofollow\">ontoversion</a>:\nprints ontology version number</li>\n<li><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontograph\" rel=\"nofollow\">ontograph</a>:\nvertasile tool for visualising (parts of) an ontology</li>\n<li><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/docs/tools-instructions.md#ontodoc\" rel=\"nofollow\">ontodoc</a>:\ndocuments an ontology</li>\n</ul>\n</li>\n</ul>\n<p>Some examples of what you can do with EMMO-python includes:</p>\n<ul>\n<li>\n<p>Access and query EMMO-based ontologies from your application.</p>\n</li>\n<li>\n<p>Extend EMMO with new domain or application ontologies.  This can\nbe done both statically with easy readable Python code or\ndynamically within your application.</p>\n</li>\n<li>\n<p>Generate graphs and documentation of your ontologies.  EMMO-python\nincludes <code>ontodoc</code>, which is a dedicated command line tool for this.\nYou find it in the <a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/tools\" rel=\"nofollow\">tools/</a> sub directory.</p>\n</li>\n<li>\n<p>Check that a EMMO-based domain or application ontology ahead to the\nconventions of EMMO.</p>\n</li>\n<li>\n<p>Interactively explore an ontology in e.g. <a href=\"https://ipython.org/\" rel=\"nofollow\">IPython</a>.  Tab completion\nmakes exploration easy and fast.  Below is an example of an IPython\nsession where we check the relations of <code>Matter</code>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">emmo</span> <span class=\"kn\">import</span> <span class=\"n\">get_ontology</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">emmo</span> <span class=\"o\">=</span> <span class=\"n\">get_ontology</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">emmo</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">get_ontology</span><span class=\"p\">(</span><span class=\"s2\">\"http://emmo.info/emmo/emmo-inferred#\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">emmo</span><span class=\"o\">.</span><span class=\"n\">Matter</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">physicalistic</span><span class=\"o\">.</span><span class=\"n\">Matter</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">emmo</span><span class=\"o\">.</span><span class=\"n\">Matter</span><span class=\"o\">.</span><span class=\"n\">is_a</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n<span class=\"p\">[</span><span class=\"n\">physicalistic</span><span class=\"o\">.</span><span class=\"n\">Physicalistic</span><span class=\"p\">,</span>\n <span class=\"n\">physical</span><span class=\"o\">.</span><span class=\"n\">Physical</span><span class=\"p\">,</span>\n <span class=\"n\">mereotopology</span><span class=\"o\">.</span><span class=\"n\">hasPart</span><span class=\"o\">.</span><span class=\"n\">some</span><span class=\"p\">(</span><span class=\"n\">physicalistic</span><span class=\"o\">.</span><span class=\"n\">Massive</span><span class=\"p\">),</span>\n <span class=\"n\">physical</span><span class=\"o\">.</span><span class=\"n\">hasTemporalPart</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">physicalistic</span><span class=\"o\">.</span><span class=\"n\">Matter</span><span class=\"p\">)]</span>\n</pre>\n</li>\n</ul>\n<h2>Documentation and examples</h2>\n<p>The <a href=\"https://pythonhosted.org/Owlready2/\" rel=\"nofollow\">Owlready2 documentation</a> is a good starting point.</p>\n<p>In addition EMMO-python includes a few examples and demos:</p>\n<ul>\n<li>\n<p><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/vertical/README.md\" rel=\"nofollow\">demo/vertical</a> shows an example of\nhow EMMO may be used to achieve vertical interoperability.\nThe file <a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/vertical/define-ontology.py\" rel=\"nofollow\">define-ontology.py</a>\nprovides a good example for how an EMMO-based application ontology\ncan be defined in Python.</p>\n</li>\n<li>\n<p><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/demo/horizontal/README.md\" rel=\"nofollow\">demo/horizontal</a> shows an example of\nshows an example of how EMMO may be used to achieve horizontal\ninteroperability.  This demo also shows how you can use\nEMMO-python to represent your ontology with the low-level metadata\nframework <a href=\"https://github.com/SINTEF/dlite/\" rel=\"nofollow\">DLite</a>. In addition to achieve interoperability, as\nshown in the demo, DLite also allow you to automatically generate\nC or Fortran code base on your ontology.</p>\n</li>\n<li>\n<p><a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/examples/emmodoc/README.md\" rel=\"nofollow\">examples/emmodoc</a> shows how the\ndocumentation of EMMO is generated using the <code>ontodoc</code> tool.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Install with</p>\n<pre><code>pip install EMMO\n</code></pre>\n<h3>Required Dependencies</h3>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> 3.6 or later</li>\n<li><a href=\"https://pypi.org/project/Owlready2/\" rel=\"nofollow\">Owlready2</a> v0.23 or later</li>\n</ul>\n<h3>Optional Dependencies</h3>\n<ul>\n<li>\n<p><a href=\"https://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a>: Needed for graph generation. With support for generation\npdf, png and svg figures for tests and generation of documentation\nautomatically (ontodoc).</p>\n</li>\n<li>\n<p><a href=\"http://pandoc.org/\" rel=\"nofollow\">pandoc</a>: Only used for generated documentation from markdown to\nnicely formatted html or pdf.  Tested with v2.1.2.</p>\n</li>\n<li>\n<p><a href=\"https://www.latex-project.org/\" rel=\"nofollow\">pdfLaTeX</a> or <a href=\"https://www.overleaf.com/learn/latex/XeLaTeX/\" rel=\"nofollow\">XeLaTeX</a> and the <code>upgreek</code> latex\npackage (included in <code>texlive-was</code> on RetHat-based distributions\nand <code>texlive-latex-extra</code> on Ubuntu) for generation of pdf\ndocumentation.  If your ontology contain exotic unicode characters, we\nrecommend XeLaTeX.</p>\n</li>\n<li>\n<p>Java. Needed for reasoning.</p>\n</li>\n<li>\n<p>Optional Python packages</p>\n<ul>\n<li><a href=\"https://www.graphviz.org/\" rel=\"nofollow\">graphviz</a>: Generation of documentation and graphs.</li>\n<li><a href=\"https://pypi.org/project/PyYAML/\" rel=\"nofollow\">PyYAML</a>:  Required for generating documentation with pandoc.</li>\n<li><a href=\"https://pypi.org/project/blessings/\" rel=\"nofollow\">blessings</a>: Clean output for emmocheck</li>\n<li><a href=\"https://pypi.org/project/Pygments/\" rel=\"nofollow\">Pygments</a>: Coloured output for emmocheck</li>\n<li><a href=\"https://pypi.org/project/rdflib/\" rel=\"nofollow\">rdflib</a>: Required for ontoversion-tool</li>\n<li><a href=\"https://pypi.org/project/semver/\" rel=\"nofollow\">semver</a>: Required for ontoversion-tool</li>\n<li><a href=\"https://pypi.org/project/pydot/\" rel=\"nofollow\">pydot</a>: Used for generating graphs. Will be deprecated.</li>\n</ul>\n</li>\n</ul>\n<p>See <a href=\"https://raw.githubusercontent.com/emmo-repo/EMMO-python/master/#docs/docker-dockerinstructions.md\" rel=\"nofollow\">docs/docker-dockerinstructions.md</a>\nfor how to build a docker image.</p>\n\n          </div>"}, "last_serial": 7115113, "releases": {"1.0.0a0": [{"comment_text": "", "digests": {"md5": "672633bc2945ef61db2d80c2cbd7cca7", "sha256": "87f0757b626c35f64a0bba134352a709a1365c8c20fe71869680a87f36135ddd"}, "downloads": -1, "filename": "EMMO-1.0.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "672633bc2945ef61db2d80c2cbd7cca7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12895031, "upload_time": "2020-01-06T23:44:19", "upload_time_iso_8601": "2020-01-06T23:44:19.757702Z", "url": "https://files.pythonhosted.org/packages/79/90/4d945779b1ef90f1a4d87b5f32ea357321775c2db80cfd393f2fb2351571/EMMO-1.0.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c3d7e8991471df91caa25ae3e70f682", "sha256": "f5c70ae3137e9492b7bfc0a1a2af66e46305375ae7d3de2f6229918a3a523e03"}, "downloads": -1, "filename": "EMMO-1.0.0a0.tar.gz", "has_sig": false, "md5_digest": "8c3d7e8991471df91caa25ae3e70f682", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5952635, "upload_time": "2020-01-06T23:44:29", "upload_time_iso_8601": "2020-01-06T23:44:29.872580Z", "url": "https://files.pythonhosted.org/packages/76/a3/655153718244b4421f652b94a373bfa670727dd6e27be1589356e35af08b/EMMO-1.0.0a0.tar.gz", "yanked": false}], "1.0.0a10": [{"comment_text": "", "digests": {"md5": "cbcdc724a605806a8b12c0aea032a252", "sha256": "9df0f6b67f655e6c773e381a8daec4f95d190d2c42498e5e61fbd79bacc329a5"}, "downloads": -1, "filename": "EMMO-1.0.0a10-py3-none-any.whl", "has_sig": false, "md5_digest": "cbcdc724a605806a8b12c0aea032a252", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 2434328, "upload_time": "2020-04-27T20:43:56", "upload_time_iso_8601": "2020-04-27T20:43:56.425385Z", "url": "https://files.pythonhosted.org/packages/b6/ec/6ba8018cc3057bc01748f5dd588fe8d7ede751ea4371ba6d5ed1ab5014d1/EMMO-1.0.0a10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060c9be59e90bfa6c3a5e75caedc8e48", "sha256": "834e92ca718ad125cf9b763528eb88d4673bb4fed54ad3287ce2bd28cac0597e"}, "downloads": -1, "filename": "EMMO-1.0.0a10.tar.gz", "has_sig": false, "md5_digest": "060c9be59e90bfa6c3a5e75caedc8e48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2416261, "upload_time": "2020-04-27T20:44:00", "upload_time_iso_8601": "2020-04-27T20:44:00.159399Z", "url": "https://files.pythonhosted.org/packages/2a/4f/d95e451b9f499655cdfa43f92460b683cc4e1236d30a52909dce63c9e16d/EMMO-1.0.0a10.tar.gz", "yanked": false}], "1.0.0a5": [{"comment_text": "", "digests": {"md5": "6d28e060a37ee437bf37b623a3f73cf4", "sha256": "2f6fdc153f9e7d403a4fa7940bf2a1c95315b067d5e29c383d8e9bc52d4d95ac"}, "downloads": -1, "filename": "EMMO-1.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "6d28e060a37ee437bf37b623a3f73cf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7482794, "upload_time": "2020-03-18T20:56:47", "upload_time_iso_8601": "2020-03-18T20:56:47.099005Z", "url": "https://files.pythonhosted.org/packages/9e/29/3e0f44eeb48bd1f3fcff26160536e0498586d565140fabfb826e91c14a65/EMMO-1.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "729842c3089592cb914c771864283540", "sha256": "1f529918f7a2f8ca6275c96337b3c7e6d39be14f52b09ad7ed75662d5a817a3f"}, "downloads": -1, "filename": "EMMO-1.0.0a5.tar.gz", "has_sig": false, "md5_digest": "729842c3089592cb914c771864283540", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2748853, "upload_time": "2020-03-18T20:56:51", "upload_time_iso_8601": "2020-03-18T20:56:51.638784Z", "url": "https://files.pythonhosted.org/packages/e4/b2/17fd19d23f574138e27c25c9e19c5ff9e12aabf72db356d294e5bc0e7aee/EMMO-1.0.0a5.tar.gz", "yanked": false}], "1.0.0a7": [{"comment_text": "", "digests": {"md5": "e15cfb5f1dc568af17eae747ecafc6ad", "sha256": "4676d4e528a9db95e5cad57fc6226b2da0a721554cf96aafbacc849a28aab292"}, "downloads": -1, "filename": "EMMO-1.0.0a7-py3-none-any.whl", "has_sig": false, "md5_digest": "e15cfb5f1dc568af17eae747ecafc6ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7482991, "upload_time": "2020-03-18T22:32:50", "upload_time_iso_8601": "2020-03-18T22:32:50.356082Z", "url": "https://files.pythonhosted.org/packages/79/e7/a89a8c8e6bb82466765013da5dba2bff037f6c0d996b94cab521f3c60a04/EMMO-1.0.0a7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa6cfd8f28941c09224ddabc4782dfc8", "sha256": "ef1f6c2feb5474b1d759f597d57bc64d0d75fc70143c2cea12e50e01a16db17f"}, "downloads": -1, "filename": "EMMO-1.0.0a7.tar.gz", "has_sig": false, "md5_digest": "aa6cfd8f28941c09224ddabc4782dfc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2745201, "upload_time": "2020-03-18T22:32:55", "upload_time_iso_8601": "2020-03-18T22:32:55.282349Z", "url": "https://files.pythonhosted.org/packages/fc/60/e0c7ef7bcf06261a88920f9d9e899a339db790edc3899fee3467f3b3fe39/EMMO-1.0.0a7.tar.gz", "yanked": false}], "1.0.0a8": [{"comment_text": "", "digests": {"md5": "1cc1384c2136827de3118c0636b6f5b8", "sha256": "9f2296d2bf74cb87d7d685b65a3ce74fee6ca6fbb0168da540b802fe02634277"}, "downloads": -1, "filename": "EMMO-1.0.0a8-py3-none-any.whl", "has_sig": false, "md5_digest": "1cc1384c2136827de3118c0636b6f5b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 2237471, "upload_time": "2020-03-22T13:17:33", "upload_time_iso_8601": "2020-03-22T13:17:33.456425Z", "url": "https://files.pythonhosted.org/packages/6d/a0/c48313406af1284fb6ac740109ffd311a858d55d9858a2508f11058e3d9c/EMMO-1.0.0a8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29f911bfeac21dfb1689bef96284f383", "sha256": "95a51ee0418e118494bd3172a375155e40905e75d3da831a2219c1e500661749"}, "downloads": -1, "filename": "EMMO-1.0.0a8.tar.gz", "has_sig": false, "md5_digest": "29f911bfeac21dfb1689bef96284f383", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2178462, "upload_time": "2020-03-22T13:17:36", "upload_time_iso_8601": "2020-03-22T13:17:36.770031Z", "url": "https://files.pythonhosted.org/packages/ab/fb/3f52e506abb956cffdc9cb6676e2c3312795bb36e30d19fa929386fe084d/EMMO-1.0.0a8.tar.gz", "yanked": false}], "1.0.0a9": [{"comment_text": "", "digests": {"md5": "b606b450dfb1415dc9a7f38136ad0a8b", "sha256": "2901af5d32bfe3126ce2c0b579e84712469664202f97688e7d077a49cfb4487f"}, "downloads": -1, "filename": "EMMO-1.0.0a9-py3-none-any.whl", "has_sig": false, "md5_digest": "b606b450dfb1415dc9a7f38136ad0a8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 2591251, "upload_time": "2020-04-14T06:19:26", "upload_time_iso_8601": "2020-04-14T06:19:26.001851Z", "url": "https://files.pythonhosted.org/packages/fd/a4/e6c1cbef3490cf79f87997f02fa37387c76111056d308c634a3b7e8ee581/EMMO-1.0.0a9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d39484b690a2fec3e87b578df207acb", "sha256": "5c7a44daca5cb2417fea1262318f945a1dde6c0286fcd95d371f29f6e81f04db"}, "downloads": -1, "filename": "EMMO-1.0.0a9.tar.gz", "has_sig": false, "md5_digest": "1d39484b690a2fec3e87b578df207acb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2565835, "upload_time": "2020-04-14T06:19:29", "upload_time_iso_8601": "2020-04-14T06:19:29.381582Z", "url": "https://files.pythonhosted.org/packages/f9/10/490f0090406a501db8e20137ec3d514c6e33172fb7e687f8cfdf567244c9/EMMO-1.0.0a9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbcdc724a605806a8b12c0aea032a252", "sha256": "9df0f6b67f655e6c773e381a8daec4f95d190d2c42498e5e61fbd79bacc329a5"}, "downloads": -1, "filename": "EMMO-1.0.0a10-py3-none-any.whl", "has_sig": false, "md5_digest": "cbcdc724a605806a8b12c0aea032a252", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 2434328, "upload_time": "2020-04-27T20:43:56", "upload_time_iso_8601": "2020-04-27T20:43:56.425385Z", "url": "https://files.pythonhosted.org/packages/b6/ec/6ba8018cc3057bc01748f5dd588fe8d7ede751ea4371ba6d5ed1ab5014d1/EMMO-1.0.0a10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060c9be59e90bfa6c3a5e75caedc8e48", "sha256": "834e92ca718ad125cf9b763528eb88d4673bb4fed54ad3287ce2bd28cac0597e"}, "downloads": -1, "filename": "EMMO-1.0.0a10.tar.gz", "has_sig": false, "md5_digest": "060c9be59e90bfa6c3a5e75caedc8e48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 2416261, "upload_time": "2020-04-27T20:44:00", "upload_time_iso_8601": "2020-04-27T20:44:00.159399Z", "url": "https://files.pythonhosted.org/packages/2a/4f/d95e451b9f499655cdfa43f92460b683cc4e1236d30a52909dce63c9e16d/EMMO-1.0.0a10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:35 2020"}