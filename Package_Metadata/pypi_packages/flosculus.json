{"info": {"author": "Isman Firmansyah", "author_email": "isman.firmansyah@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "Flosculus\n=========\n\nFlosculus is a **work-in-progress** script to tail rotated log file, parse each line, and send it to Fluentd.\nIt is intended to replace a subset of Fluentd ``in_tail`` features.\n\nCrash Course\n------------\n\nFirst things first, install Flosculus into your Python path.\n\n.. code-block:: sh\n\n    $ git clone git://github.com/iromli/flosculus.git\n    $ cd flosculus\n    $ python setup.py install\n\nAfterwards you need to create a configuration file to run the ``flosculusd`` event loop.\nThe convenient way to do this boring thing is by invoking the ``flosculusd --init > flosculus.ini`` command.\nHere's an example of ``flosculus.ini`` (you can call it whatever you like):\n\n.. code-block:: ini\n\n    [flosculus]\n    ; the IP address (or host name) of the remote server\n    remote_host = 127.0.0.1\n\n    ; the TCP port of the remote server\n    remote_port = 24224\n\n\n    ; Each section with `path:/path/to/log` is a valid config\n    [log:/var/log/nginx/access.log]\n\n    ; the label\n    tag = example.api.access\n\n    ; format to use, either use 'nginx' or custom regex\n    format = nginx\n\nBy default, the ``format`` option is matched against **nginx** default access log format.\nYou may change the format as long as using a valid Python regex.\n\n.. code-block:: ini\n\n    [log:/var/log/nginx/access.log]\n\n    format = (?P<remote>[^ ]*) (?P<host>[^ ]*) (?P<user>[^ ]*) \\[(?P<time>[^\\]]*)\\] \"(?P<method>\\S+)(?: +(?P<path>[^\\\"]*) +\\S*)?\" (?P<code>[^ ]*) (?P<size>[^ ]*)(?: \"(?P<referer>[^\\\"]*)\" \"(?P<agent>[^\\\"]*)\")(?: (?P<request_time>[^ ]*) (?P<upstream_time>[^ ]*) (?P<pipe>[\\.|p]))?\n\nAnd did I already mentioned that you can have multiple log files? Simply copy the whole ``log`` section.\n\n.. code-block:: ini\n\n    ; Each section with `path:/path/to/log` is a valid config\n    [log:/var/log/nginx/access.log]\n\n    ; the label\n    tag = example.api.access\n\n    ; format to use, either use 'nginx' or custom regex\n    format = nginx\n\n    ; Each section with `path:/path/to/log` is a valid config\n    [log:/var/log/nginx/timed-combined.access.log]\n\n    ; the label\n    tag = test.api.access\n\n    ; format to use, either use 'nginx' or custom regex\n    format = (?P<remote>[^ ]*) (?P<host>[^ ]*) (?P<user>[^ ]*) \\[(?P<time>[^\\]]*)\\] \"(?P<method>\\S+)(?: +(?P<path>[^\\\"]*) +\\S*)?\" (?P<code>[^ ]*) (?P<size>[^ ]*)(?: \"(?P<referer>[^\\\"]*)\" \"(?P<agent>[^\\\"]*)\")(?: (?P<request_time>[^ ]*) (?P<upstream_time>[^ ]*) (?P<pipe>[\\.|p]))?\n\n    ; the IP address (or host name) of the remote server\n    ; use another Fluentd remote host\n    remote_host = 10.0.0.1\n\n    ; the TCP port of the remote server\n    ; use another Fluentd remote port\n    remote_port = 24225\n\nAssuming the configuration is written properly, run the event loop to see its magic (well, not really):\n\n.. code-block:: sh\n\n    $ flosculusd -c flosculus.ini\n\nCredits\n-------\n\n* `Beaver <https://github.com/josegonzalez/beaver>`_\n* `Fluentd <https://github.com/fluent/fluentd>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/iromli/flosculus", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "flosculus", "package_url": "https://pypi.org/project/flosculus/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flosculus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/iromli/flosculus"}, "release_url": "https://pypi.org/project/flosculus/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Tail your log, extract the data, and send it to Fluentd", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Flosculus is a <strong>work-in-progress</strong> script to tail rotated log file, parse each line, and send it to Fluentd.\nIt is intended to replace a subset of Fluentd <tt>in_tail</tt> features.</p>\n<div id=\"crash-course\">\n<h2>Crash Course</h2>\n<p>First things first, install Flosculus into your Python path.</p>\n<pre>$ git clone git://github.com/iromli/flosculus.git\n$ <span class=\"nb\">cd</span> flosculus\n$ python setup.py install\n</pre>\n<p>Afterwards you need to create a configuration file to run the <tt>flosculusd</tt> event loop.\nThe convenient way to do this boring thing is by invoking the <tt>flosculusd <span class=\"pre\">--init</span> &gt; flosculus.ini</tt> command.\nHere\u2019s an example of <tt>flosculus.ini</tt> (you can call it whatever you like):</p>\n<pre><span class=\"k\">[flosculus]</span>\n<span class=\"c1\">; the IP address (or host name) of the remote server</span>\n<span class=\"na\">remote_host</span> <span class=\"o\">=</span> <span class=\"s\">127.0.0.1</span>\n\n<span class=\"c1\">; the TCP port of the remote server</span>\n<span class=\"na\">remote_port</span> <span class=\"o\">=</span> <span class=\"s\">24224</span>\n\n\n<span class=\"c1\">; Each section with `path:/path/to/log` is a valid config</span>\n<span class=\"k\">[log:/var/log/nginx/access.log]</span>\n\n<span class=\"c1\">; the label</span>\n<span class=\"na\">tag</span> <span class=\"o\">=</span> <span class=\"s\">example.api.access</span>\n\n<span class=\"c1\">; format to use, either use 'nginx' or custom regex</span>\n<span class=\"na\">format</span> <span class=\"o\">=</span> <span class=\"s\">nginx</span>\n</pre>\n<p>By default, the <tt>format</tt> option is matched against <strong>nginx</strong> default access log format.\nYou may change the format as long as using a valid Python regex.</p>\n<pre><span class=\"k\">[log:/var/log/nginx/access.log]</span>\n\n<span class=\"na\">format</span> <span class=\"o\">=</span> <span class=\"s\">(?P&lt;remote&gt;[^ ]*) (?P&lt;host&gt;[^ ]*) (?P&lt;user&gt;[^ ]*) \\[(?P&lt;time&gt;[^\\]]*)\\] \"(?P&lt;method&gt;\\S+)(?: +(?P&lt;path&gt;[^\\\"]*) +\\S*)?\" (?P&lt;code&gt;[^ ]*) (?P&lt;size&gt;[^ ]*)(?: \"(?P&lt;referer&gt;[^\\\"]*)\" \"(?P&lt;agent&gt;[^\\\"]*)\")(?: (?P&lt;request_time&gt;[^ ]*) (?P&lt;upstream_time&gt;[^ ]*) (?P&lt;pipe&gt;[\\.|p]))?</span>\n</pre>\n<p>And did I already mentioned that you can have multiple log files? Simply copy the whole <tt>log</tt> section.</p>\n<pre><span class=\"c1\">; Each section with `path:/path/to/log` is a valid config</span>\n<span class=\"k\">[log:/var/log/nginx/access.log]</span>\n\n<span class=\"c1\">; the label</span>\n<span class=\"na\">tag</span> <span class=\"o\">=</span> <span class=\"s\">example.api.access</span>\n\n<span class=\"c1\">; format to use, either use 'nginx' or custom regex</span>\n<span class=\"na\">format</span> <span class=\"o\">=</span> <span class=\"s\">nginx</span>\n\n<span class=\"c1\">; Each section with `path:/path/to/log` is a valid config</span>\n<span class=\"k\">[log:/var/log/nginx/timed-combined.access.log]</span>\n\n<span class=\"c1\">; the label</span>\n<span class=\"na\">tag</span> <span class=\"o\">=</span> <span class=\"s\">test.api.access</span>\n\n<span class=\"c1\">; format to use, either use 'nginx' or custom regex</span>\n<span class=\"na\">format</span> <span class=\"o\">=</span> <span class=\"s\">(?P&lt;remote&gt;[^ ]*) (?P&lt;host&gt;[^ ]*) (?P&lt;user&gt;[^ ]*) \\[(?P&lt;time&gt;[^\\]]*)\\] \"(?P&lt;method&gt;\\S+)(?: +(?P&lt;path&gt;[^\\\"]*) +\\S*)?\" (?P&lt;code&gt;[^ ]*) (?P&lt;size&gt;[^ ]*)(?: \"(?P&lt;referer&gt;[^\\\"]*)\" \"(?P&lt;agent&gt;[^\\\"]*)\")(?: (?P&lt;request_time&gt;[^ ]*) (?P&lt;upstream_time&gt;[^ ]*) (?P&lt;pipe&gt;[\\.|p]))?</span>\n\n<span class=\"c1\">; the IP address (or host name) of the remote server</span>\n<span class=\"c1\">; use another Fluentd remote host</span>\n<span class=\"na\">remote_host</span> <span class=\"o\">=</span> <span class=\"s\">10.0.0.1</span>\n\n<span class=\"c1\">; the TCP port of the remote server</span>\n<span class=\"c1\">; use another Fluentd remote port</span>\n<span class=\"na\">remote_port</span> <span class=\"o\">=</span> <span class=\"s\">24225</span>\n</pre>\n<p>Assuming the configuration is written properly, run the event loop to see its magic (well, not really):</p>\n<pre>$ flosculusd -c flosculus.ini\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li><a href=\"https://github.com/josegonzalez/beaver\" rel=\"nofollow\">Beaver</a></li>\n<li><a href=\"https://github.com/fluent/fluentd\" rel=\"nofollow\">Fluentd</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1150210, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2799c802aecbaa0ebf84026fbb05a127", "sha256": "0825eaa313d8021f6c819ae5b5cf9c877e794d2b31e06ad762973e067a40577b"}, "downloads": -1, "filename": "flosculus-0.1.tar.gz", "has_sig": false, "md5_digest": "2799c802aecbaa0ebf84026fbb05a127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6265, "upload_time": "2013-12-09T02:54:15", "upload_time_iso_8601": "2013-12-09T02:54:15.535890Z", "url": "https://files.pythonhosted.org/packages/88/55/51d51340cd196ad38d91ce90034ce7a68f5aa98cce8a02dce9edbe5df1f1/flosculus-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "819fe9779818bbbb977d846475fb9a9c", "sha256": "cc63413c1080c9ee1a3ca17100391bc12bc26ba8bb66162553362b65270fc6c1"}, "downloads": -1, "filename": "flosculus-0.2.tar.gz", "has_sig": false, "md5_digest": "819fe9779818bbbb977d846475fb9a9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6810, "upload_time": "2014-01-12T10:47:16", "upload_time_iso_8601": "2014-01-12T10:47:16.888136Z", "url": "https://files.pythonhosted.org/packages/64/2a/e38371b1bfc220f8b0f08528d03cd43b064709dc1942e4165392682096cb/flosculus-0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "938609625728335e0057911d437a2dd9", "sha256": "b0e29b59383b1e327d122f301509554d6d824dedbd4f41b53091370dcf71b4ef"}, "downloads": -1, "filename": "flosculus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "938609625728335e0057911d437a2dd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6968, "upload_time": "2014-06-12T10:53:55", "upload_time_iso_8601": "2014-06-12T10:53:55.333701Z", "url": "https://files.pythonhosted.org/packages/d1/9a/e98b69e1d7b204610458a1d334b98b28b93267715570d3ebfe7fbeb05d32/flosculus-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "938609625728335e0057911d437a2dd9", "sha256": "b0e29b59383b1e327d122f301509554d6d824dedbd4f41b53091370dcf71b4ef"}, "downloads": -1, "filename": "flosculus-0.3.0.tar.gz", "has_sig": false, "md5_digest": "938609625728335e0057911d437a2dd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6968, "upload_time": "2014-06-12T10:53:55", "upload_time_iso_8601": "2014-06-12T10:53:55.333701Z", "url": "https://files.pythonhosted.org/packages/d1/9a/e98b69e1d7b204610458a1d334b98b28b93267715570d3ebfe7fbeb05d32/flosculus-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:45 2020"}