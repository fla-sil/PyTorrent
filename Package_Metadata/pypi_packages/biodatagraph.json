{"info": {"author": "Martin Preusse", "author_email": "martin.preusse@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python"], "description": "# BioDataGraph\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![PyPI](https://img.shields.io/pypi/v/biodatagraph)](https://pypi.org/project/biodatagraph)\n[![Build Status](https://travis-ci.com/kaiserpreusse/biodatagraph.svg?branch=master)](https://travis-ci.com/kaiserpreusse/biodatagraph)\n\n\nBioDataGraph is a toolset to download data from **biomedical databases** \n(such as ENSEMBL, Refseq and Uniprot) and extract data in a  format that\ncan be stored in the graph databases **Neo4j**. It is a framework that can be used in applications that work \nwith biomedical data and Neo4j.\n\n> :warning: **Note:** BioDataGraph is in alpha stage and was published early as part of the https://covidgraph.org project.\n \nBioDataGraph works standalone now but it was carved out of a larger application. The following issues need to be addressed:\n\n- The application was tightly integrated with Neo4j, thus all objects of BioDataGraph are also `py2neo.ogm.GraphObjects`.\n- You can pass an optional `py2neo.Graph` instance to most objects. When the `py2neo.Graph` instance is available the \ndownload and parsing functions persist metadata to Neo4j. It works well without the graph but the code contains a lot\nof checks for an existing `py2neo.Graph` instance. This should be addressed by refactored architecture.\n- Names of `Parser` and `DataSource` classes are not stable yet (some names only make \nsense in the context of the previous application)\n\n## Example\n\n```python\nimport py2neo\nimport logging\n\nfrom biodatagraph.datasources import NcbiGene\nfrom biodatagraph.parser import NcbiGeneParser\n\nNEO4J_URL = 'bolt://localhost:7687'\nNEO4J_USER = 'neo4j'\nNEO4J_PASSWORD = 'test'\nROOT_DIR = '/path/to/dir'\n\nif __name__ == '__main__':\n\n    graph = py2neo.Graph(NEO4J_URL, user=NEO4J_USER, password=NEO4J_PASSWORD)\n\n    # download datasource\n    ncbigene = NcbiGene(ROOT_DIR)\n    ncbigene.download()\n\n    # run parser\n    ncbigene_parser = NcbiGeneParser(ROOT_DIR)\n    ncbigene_parser.run('9606')\n\n    # load data to Neo4j\n    for nodeset in ncbigene_parser.nodesets:\n        nodeset.create(graph)\n```\n\n ## Structure\n \n BioDataGraph has two main components: `DataSource` and `Parser`. \n \n ### DataSource\n \n The `DataSource` classes take care of downloading data from public databases.\n \n ### Parser\n \n The `Parser` classes extract data from the downloaded files and create Neo4j ready data structures.\n \n ## Dependencies\n \n BioDataGraph creates Neo4j ready data in `NodeSet` and `RelationshipSet` classes from the \n [graphio](https://github.com/kaiserpreusse/graphio) package.\n \n BioDataGraph currently depends on [py2neo](https://py2neo.org/v4/) and is tightly integrated with its OGM \n system. All elements (`DataSource` and `Parser` objects) are `py2neo.ogm.Node` subclasses. \n \n This does not change their functionality as normal Python objects, i.e. they can be included in applications that \n are independent of py2neo and Neo4j. However, the advantage is that the metadata asociated to the output of the \n `Parser` classes can be persisted in Neo4j.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaiserpreusse/biodatagraph", "keywords": "NEO4J,Biology", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "biodatagraph", "package_url": "https://pypi.org/project/biodatagraph/", "platform": "", "project_url": "https://pypi.org/project/biodatagraph/", "project_urls": {"Homepage": "https://github.com/kaiserpreusse/biodatagraph"}, "release_url": "https://pypi.org/project/biodatagraph/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Download data from biomedical databases and store in Neo4j.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BioDataGraph</h1>\n<p><a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://pypi.org/project/biodatagraph\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f9b85094abfc555fb8e6e22cbdeb2a4dfb5af9c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62696f646174616772617068\"></a>\n<a href=\"https://travis-ci.com/kaiserpreusse/biodatagraph\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d119c672273d2464f3dab72db04b07218dc1cde/68747470733a2f2f7472617669732d63692e636f6d2f6b6169736572707265757373652f62696f6461746167726170682e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>BioDataGraph is a toolset to download data from <strong>biomedical databases</strong>\n(such as ENSEMBL, Refseq and Uniprot) and extract data in a  format that\ncan be stored in the graph databases <strong>Neo4j</strong>. It is a framework that can be used in applications that work\nwith biomedical data and Neo4j.</p>\n<blockquote>\n<p>:warning: <strong>Note:</strong> BioDataGraph is in alpha stage and was published early as part of the <a href=\"https://covidgraph.org\" rel=\"nofollow\">https://covidgraph.org</a> project.</p>\n</blockquote>\n<p>BioDataGraph works standalone now but it was carved out of a larger application. The following issues need to be addressed:</p>\n<ul>\n<li>The application was tightly integrated with Neo4j, thus all objects of BioDataGraph are also <code>py2neo.ogm.GraphObjects</code>.</li>\n<li>You can pass an optional <code>py2neo.Graph</code> instance to most objects. When the <code>py2neo.Graph</code> instance is available the\ndownload and parsing functions persist metadata to Neo4j. It works well without the graph but the code contains a lot\nof checks for an existing <code>py2neo.Graph</code> instance. This should be addressed by refactored architecture.</li>\n<li>Names of <code>Parser</code> and <code>DataSource</code> classes are not stable yet (some names only make\nsense in the context of the previous application)</li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">py2neo</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">biodatagraph.datasources</span> <span class=\"kn\">import</span> <span class=\"n\">NcbiGene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">biodatagraph.parser</span> <span class=\"kn\">import</span> <span class=\"n\">NcbiGeneParser</span>\n\n<span class=\"n\">NEO4J_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'bolt://localhost:7687'</span>\n<span class=\"n\">NEO4J_USER</span> <span class=\"o\">=</span> <span class=\"s1\">'neo4j'</span>\n<span class=\"n\">NEO4J_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n<span class=\"n\">ROOT_DIR</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/dir'</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">py2neo</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">(</span><span class=\"n\">NEO4J_URL</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">NEO4J_USER</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">NEO4J_PASSWORD</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># download datasource</span>\n    <span class=\"n\">ncbigene</span> <span class=\"o\">=</span> <span class=\"n\">NcbiGene</span><span class=\"p\">(</span><span class=\"n\">ROOT_DIR</span><span class=\"p\">)</span>\n    <span class=\"n\">ncbigene</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># run parser</span>\n    <span class=\"n\">ncbigene_parser</span> <span class=\"o\">=</span> <span class=\"n\">NcbiGeneParser</span><span class=\"p\">(</span><span class=\"n\">ROOT_DIR</span><span class=\"p\">)</span>\n    <span class=\"n\">ncbigene_parser</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'9606'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># load data to Neo4j</span>\n    <span class=\"k\">for</span> <span class=\"n\">nodeset</span> <span class=\"ow\">in</span> <span class=\"n\">ncbigene_parser</span><span class=\"o\">.</span><span class=\"n\">nodesets</span><span class=\"p\">:</span>\n        <span class=\"n\">nodeset</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n</pre>\n<h2>Structure</h2>\n<p>BioDataGraph has two main components: <code>DataSource</code> and <code>Parser</code>.</p>\n<h3>DataSource</h3>\n<p>The <code>DataSource</code> classes take care of downloading data from public databases.</p>\n<h3>Parser</h3>\n<p>The <code>Parser</code> classes extract data from the downloaded files and create Neo4j ready data structures.</p>\n<h2>Dependencies</h2>\n<p>BioDataGraph creates Neo4j ready data in <code>NodeSet</code> and <code>RelationshipSet</code> classes from the\n<a href=\"https://github.com/kaiserpreusse/graphio\" rel=\"nofollow\">graphio</a> package.</p>\n<p>BioDataGraph currently depends on <a href=\"https://py2neo.org/v4/\" rel=\"nofollow\">py2neo</a> and is tightly integrated with its OGM\nsystem. All elements (<code>DataSource</code> and <code>Parser</code> objects) are <code>py2neo.ogm.Node</code> subclasses.</p>\n<p>This does not change their functionality as normal Python objects, i.e. they can be included in applications that\nare independent of py2neo and Neo4j. However, the advantage is that the metadata asociated to the output of the\n<code>Parser</code> classes can be persisted in Neo4j.</p>\n\n          </div>"}, "last_serial": 7059290, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d15dfcee8331861cbe2cfba0ef96e34c", "sha256": "230cb2f6cbc192e248d2da1d8695aa72244c6847b4cd1d346ee4fb68fb926c73"}, "downloads": -1, "filename": "biodatagraph-0.0.1-py3.8.egg", "has_sig": false, "md5_digest": "d15dfcee8331861cbe2cfba0ef96e34c", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 164361, "upload_time": "2020-04-06T08:40:21", "upload_time_iso_8601": "2020-04-06T08:40:21.528713Z", "url": "https://files.pythonhosted.org/packages/5f/aa/ee9ce350e32c5080c2653718369ba27e732785b6a27caa773498a59e58d5/biodatagraph-0.0.1-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "56ec8c2f49e9513b70f32b5c5f265cb7", "sha256": "be963e28745098589720aab9368ba97dfe458ed77cca3b96044e8e31766ad813"}, "downloads": -1, "filename": "biodatagraph-0.0.1.tar.gz", "has_sig": false, "md5_digest": "56ec8c2f49e9513b70f32b5c5f265cb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48733, "upload_time": "2020-04-06T08:40:24", "upload_time_iso_8601": "2020-04-06T08:40:24.029984Z", "url": "https://files.pythonhosted.org/packages/19/53/2e4b7d07a510dcaef8b45ca3a6249641a2202ec3911ddf341f8b1e5cfbc3/biodatagraph-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a9faa6d0b9a1596bb943fc96a45aa54e", "sha256": "6094645dff0c5851676148f772bf81f88619408186a3df472e3ea757f3c46ae6"}, "downloads": -1, "filename": "biodatagraph-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a9faa6d0b9a1596bb943fc96a45aa54e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45745, "upload_time": "2020-04-06T08:48:17", "upload_time_iso_8601": "2020-04-06T08:48:17.018673Z", "url": "https://files.pythonhosted.org/packages/bd/f9/c0042ae4fa53f9c36aaaeea5d8c5e9a1b414c17f15e0b5bbe41010319d27/biodatagraph-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1c7124c9f9360a36392bfbdebaa54be7", "sha256": "1b4b9e4c6754dfe245896acb050e215bbc4043b399051e8496d9f193fc94c4c1"}, "downloads": -1, "filename": "biodatagraph-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1c7124c9f9360a36392bfbdebaa54be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47393, "upload_time": "2020-04-16T18:12:20", "upload_time_iso_8601": "2020-04-16T18:12:20.564792Z", "url": "https://files.pythonhosted.org/packages/3b/54/ea82f7843e550e0bd1256a7fc2b78c514302d09dbc47f3fe972710e7cd8b/biodatagraph-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b09b33b46b64931c6441b2b58e761992", "sha256": "6bc6ee3476e857d666da346f74ff5f3f6e41f2f0edf5e6952eda68a6058b1228"}, "downloads": -1, "filename": "biodatagraph-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b09b33b46b64931c6441b2b58e761992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49197, "upload_time": "2020-04-16T18:19:41", "upload_time_iso_8601": "2020-04-16T18:19:41.811446Z", "url": "https://files.pythonhosted.org/packages/26/4f/846a7a93cc35463304b65a72ab228d2eedd72827921156fe22fc65b41d98/biodatagraph-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e8447080d198025705993a9407776f86", "sha256": "dde1de9a5ad5f4f0ffc3b2dbe92592fa4d8437b14512e78e1daa9c8256ea1b66"}, "downloads": -1, "filename": "biodatagraph-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e8447080d198025705993a9407776f86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47774, "upload_time": "2020-04-20T10:11:03", "upload_time_iso_8601": "2020-04-20T10:11:03.932843Z", "url": "https://files.pythonhosted.org/packages/b3/52/f4c7181bbeadd30321cca2e51950ce7a1e29256724a77e2792b0fa93bcff/biodatagraph-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "0fb31119e09c8d204a34dda895422eb7", "sha256": "8fc15cf6d363c6d66de7ebf2f4fd758c56c0501f119e1d8e1458b368ab026a56"}, "downloads": -1, "filename": "biodatagraph-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0fb31119e09c8d204a34dda895422eb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49589, "upload_time": "2020-04-20T11:03:31", "upload_time_iso_8601": "2020-04-20T11:03:31.527474Z", "url": "https://files.pythonhosted.org/packages/6d/02/5bb2c3831231262b4a0c4e3035e6868cc5d487efcb3f1ba4e6810673eb6a/biodatagraph-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fb31119e09c8d204a34dda895422eb7", "sha256": "8fc15cf6d363c6d66de7ebf2f4fd758c56c0501f119e1d8e1458b368ab026a56"}, "downloads": -1, "filename": "biodatagraph-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0fb31119e09c8d204a34dda895422eb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49589, "upload_time": "2020-04-20T11:03:31", "upload_time_iso_8601": "2020-04-20T11:03:31.527474Z", "url": "https://files.pythonhosted.org/packages/6d/02/5bb2c3831231262b4a0c4e3035e6868cc5d487efcb3f1ba4e6810673eb6a/biodatagraph-0.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:26 2020"}