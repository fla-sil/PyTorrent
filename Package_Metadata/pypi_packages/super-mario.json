{"info": {"author": "Ilya Lebedev", "author_email": "melevir@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: Freely Distributable", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Mario\n\n[![Build Status](https://travis-ci.org/best-doctor/Mario.svg?branch=master)](https://travis-ci.org/best-doctor/Mario)\n[![Maintainability](https://api.codeclimate.com/v1/badges/86b3c0549c660bda7f4f/maintainability)](https://codeclimate.com/github/best-doctor/Mario/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/86b3c0549c660bda7f4f/test_coverage)](https://codeclimate.com/github/best-doctor/Mario/test_coverage)\n[![PyPI version](https://badge.fury.io/py/super-mario.svg)](https://badge.fury.io/py/super-mario)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/super-mario)\n\nLibrary for separating data input, output and processing in your business application.\n\n![Mario](https://raw.githubusercontent.com/best-doctor/Mario/master/docs_imgs/mario.png)\n\n**Disclaimer**: the library is sooo pre-alpha.\n\n## Motivation & main idea\n\nYou have tons of business logic.\nYou like clean architecture, but you're sane. \nYou like dynamic structure of Python, but you're tied of runtime errors.\nYou want to break things a little less and keep moving fast.\nYou're is the right place.\n\nMario is a framework for business logic.\nLike Django or Flask for web-services.\n\nIt makes you put logic to pipelines: sets of pipes,\neach pipe does only one thing and only non-complex types\ncan be transferred from pipe to pipe.\n\nEach pipe is one of 3 types: input, output, processing.\nInput and output should be non-complex (like really non-complex,\ncyclomatic complexity ~3), processing pipes should be pure.\n\n## Installation\n\n`pip install super-mario`\n\n## Docs\n[Here they are](https://github.com/best-doctor/Mario/blob/master/docs/index.md).\n\n## Usage example\n\nHere is simple pipeline, that send notifications on new comments in Jira\ntickets to Slack. \n\n```python\nclass JiraCommentsNotificationPipeline(BasePipeline):\n    pipeline = [\n        'fetch_new_comments',\n        'fetch_users_mapping',\n        'generate_slack_message',\n        'send_slack_message',\n    ]\n\n    @input_pipe\n    def fetch_new_comments(jira_ticket_id: str) -> ImmutableContext:\n        return {'new_comments':\n            fetch_jira_comments(\n                ticket_id=jira_ticket_id,\n                date_from=datetime.datetime.now().replace(hours=0, minutes=0, seconds=0, milliseconds=0),\n            ),\n        }\n\n    @input_pipe\n    def fetch_users_mapping(new_comments: List[IssueComment]) -> ImmutableContext:\n        return {\n            'jira_to_slack_id_mapping': dict(User.objects.filter(\n                jira_id__in=[c['user_id'] for c in new_comments],\n            ).values_list('jira_id', 'slack_id'))\n        }\n\n    @process_pipe\n    def generate_slack_message(\n        jira_ticket_id: str,\n        new_comments: List[IssueComment],\n        jira_to_slack_id_mapping: Mapping[str, str],\n    ) -> ImmutableContext:\n        message = '\\n'.join([\n            f'@{jira_to_slack_id_mapping[c[\"user_id\"]]} wrote comment for {jira_ticket_id}: \"{c[\"text\"]}\"'\n            for c in new_comments\n        ])\n        return {'message': message}\n\n    @output_pipe\n    def send_slack_message(message: str) -> None:\n        send_message(\n            destination='slack',\n            channel=COMMENTS_SLACK_CHANNEL_ID,\n            text=message,\n        )\n\n# run pipeline for specific ticket\nJiraCommentsNotificationPipeline().run(jira_ticket_id='TST-12')\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/best-doctor/Mario/", "keywords": "project structure", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "super-mario", "package_url": "https://pypi.org/project/super-mario/", "platform": "", "project_url": "https://pypi.org/project/super-mario/", "project_urls": {"Homepage": "https://github.com/best-doctor/Mario/"}, "release_url": "https://pypi.org/project/super-mario/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Library for separating data input, output and processing in your business application.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mario</h1>\n<p><a href=\"https://travis-ci.org/best-doctor/Mario\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9534eb79bea797069992ee2e31a7874109223f8c/68747470733a2f2f7472617669732d63692e6f72672f626573742d646f63746f722f4d6172696f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/best-doctor/Mario/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78ea43093b19e752dfe8f56d8f84cfe96f493e69/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f38366233633035343963363630626461376634662f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codeclimate.com/github/best-doctor/Mario/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70f908622183b8d14f67ec501302439225f4a738/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f38366233633035343963363630626461376634662f746573745f636f766572616765\"></a>\n<a href=\"https://badge.fury.io/py/super-mario\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a64d9ade6b401c7fbe3f4b252466ac9879249c6/68747470733a2f2f62616467652e667572792e696f2f70792f73757065722d6d6172696f2e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76b4a35e0a4d71212c51cbb68348f37c6307a748/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73757065722d6d6172696f\"></p>\n<p>Library for separating data input, output and processing in your business application.</p>\n<p><img alt=\"Mario\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/997de15cf538525f6b200a01e4b86b25f0632d00/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626573742d646f63746f722f4d6172696f2f6d61737465722f646f63735f696d67732f6d6172696f2e706e67\"></p>\n<p><strong>Disclaimer</strong>: the library is sooo pre-alpha.</p>\n<h2>Motivation &amp; main idea</h2>\n<p>You have tons of business logic.\nYou like clean architecture, but you're sane.\nYou like dynamic structure of Python, but you're tied of runtime errors.\nYou want to break things a little less and keep moving fast.\nYou're is the right place.</p>\n<p>Mario is a framework for business logic.\nLike Django or Flask for web-services.</p>\n<p>It makes you put logic to pipelines: sets of pipes,\neach pipe does only one thing and only non-complex types\ncan be transferred from pipe to pipe.</p>\n<p>Each pipe is one of 3 types: input, output, processing.\nInput and output should be non-complex (like really non-complex,\ncyclomatic complexity ~3), processing pipes should be pure.</p>\n<h2>Installation</h2>\n<p><code>pip install super-mario</code></p>\n<h2>Docs</h2>\n<p><a href=\"https://github.com/best-doctor/Mario/blob/master/docs/index.md\" rel=\"nofollow\">Here they are</a>.</p>\n<h2>Usage example</h2>\n<p>Here is simple pipeline, that send notifications on new comments in Jira\ntickets to Slack.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">JiraCommentsNotificationPipeline</span><span class=\"p\">(</span><span class=\"n\">BasePipeline</span><span class=\"p\">):</span>\n    <span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'fetch_new_comments'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'fetch_users_mapping'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'generate_slack_message'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'send_slack_message'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"nd\">@input_pipe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_new_comments</span><span class=\"p\">(</span><span class=\"n\">jira_ticket_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ImmutableContext</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'new_comments'</span><span class=\"p\">:</span>\n            <span class=\"n\">fetch_jira_comments</span><span class=\"p\">(</span>\n                <span class=\"n\">ticket_id</span><span class=\"o\">=</span><span class=\"n\">jira_ticket_id</span><span class=\"p\">,</span>\n                <span class=\"n\">date_from</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">milliseconds</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@input_pipe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_users_mapping</span><span class=\"p\">(</span><span class=\"n\">new_comments</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">IssueComment</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ImmutableContext</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'jira_to_slack_id_mapping'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                <span class=\"n\">jira_id__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">new_comments</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'jira_id'</span><span class=\"p\">,</span> <span class=\"s1\">'slack_id'</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@process_pipe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">generate_slack_message</span><span class=\"p\">(</span>\n        <span class=\"n\">jira_ticket_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">new_comments</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">IssueComment</span><span class=\"p\">],</span>\n        <span class=\"n\">jira_to_slack_id_mapping</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ImmutableContext</span><span class=\"p\">:</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"sa\">f</span><span class=\"s1\">'@</span><span class=\"si\">{</span><span class=\"n\">jira_to_slack_id_mapping</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">]]</span><span class=\"si\">}</span><span class=\"s1\"> wrote comment for </span><span class=\"si\">{</span><span class=\"n\">jira_ticket_id</span><span class=\"si\">}</span><span class=\"s1\">: \"</span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">\"'</span>\n            <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">new_comments</span>\n        <span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@output_pipe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">send_slack_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">send_message</span><span class=\"p\">(</span>\n            <span class=\"n\">destination</span><span class=\"o\">=</span><span class=\"s1\">'slack'</span><span class=\"p\">,</span>\n            <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"n\">COMMENTS_SLACK_CHANNEL_ID</span><span class=\"p\">,</span>\n            <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># run pipeline for specific ticket</span>\n<span class=\"n\">JiraCommentsNotificationPipeline</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">jira_ticket_id</span><span class=\"o\">=</span><span class=\"s1\">'TST-12'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6337546, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "22508d375e2e5e3b1be547bceef0c77e", "sha256": "83600ac4a645c41f632955b56de30ed288dd2ad0e4360d24c2344909ce699df2"}, "downloads": -1, "filename": "super_mario-0.0.1.tar.gz", "has_sig": false, "md5_digest": "22508d375e2e5e3b1be547bceef0c77e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3598, "upload_time": "2019-12-08T18:07:42", "upload_time_iso_8601": "2019-12-08T18:07:42.035971Z", "url": "https://files.pythonhosted.org/packages/f8/f2/2758569b92cfedc5f599cda672f7edbeef42294906d5f9983d418573ab0c/super_mario-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "758810c1e8dbba85cb093c32571265e5", "sha256": "e810f9e2b41686ecf5dc2a8ccfa6fe2b5f53f98b550ec4d98bf353eefa264bf6"}, "downloads": -1, "filename": "super_mario-0.0.2.tar.gz", "has_sig": false, "md5_digest": "758810c1e8dbba85cb093c32571265e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5369, "upload_time": "2019-12-09T08:41:46", "upload_time_iso_8601": "2019-12-09T08:41:46.358965Z", "url": "https://files.pythonhosted.org/packages/4f/76/a4a94724df0bb27c377a18737c123b3c95ac0aba54a1b495402126b812ae/super_mario-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f327f4bc2f8b482059e5bd6cd5b0b4fc", "sha256": "13b08ffd00566d04d0e783ba254041c51649fd201d7a82a5c09f93519e1bfe5e"}, "downloads": -1, "filename": "super_mario-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f327f4bc2f8b482059e5bd6cd5b0b4fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7128, "upload_time": "2019-12-20T07:35:15", "upload_time_iso_8601": "2019-12-20T07:35:15.921184Z", "url": "https://files.pythonhosted.org/packages/6f/b3/010a92215425aa92f71653e9bffa0754b8869d7a8ce452d14c0d6735b8c9/super_mario-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f327f4bc2f8b482059e5bd6cd5b0b4fc", "sha256": "13b08ffd00566d04d0e783ba254041c51649fd201d7a82a5c09f93519e1bfe5e"}, "downloads": -1, "filename": "super_mario-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f327f4bc2f8b482059e5bd6cd5b0b4fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7128, "upload_time": "2019-12-20T07:35:15", "upload_time_iso_8601": "2019-12-20T07:35:15.921184Z", "url": "https://files.pythonhosted.org/packages/6f/b3/010a92215425aa92f71653e9bffa0754b8869d7a8ce452d14c0d6735b8c9/super_mario-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:13 2020"}