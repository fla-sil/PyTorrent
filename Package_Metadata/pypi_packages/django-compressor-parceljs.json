{"info": {"author": "Ezeudoh Tochukwu", "author_email": "ezeudoh.tochukwu@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "Django Compressor with Parceljs\n=====================================\nDjango-compressor_ with parceljs_ is base on Django-Compressor, which bundles and minifies your typescript, vue, react, scss etc in a Django template into cacheable static files using parceljs and django-compressor.\n\nFor more information visit Django-Compressor_\n\n\nQuickstart\n----------\nInstall django-compress::\n\n    pip install git+https://github.com/eadwinCode/django-compressor.git@develop\n\nInstall parcel-bundler::\n\n    npm install -g parcel-bundler\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'compressor',\n        ...\n    )\n\n    STATICFILES_FINDERS = (\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        # other finders..\n        'compressor.finders.CompressorFinder',\n    )\n\nOther Configurations\n--------------------\n\nTo minify your code for production, you need to set COMPRESS_ENABLED and COMPRESS_OFFLINE to true in settings.py.\n\nIn django-compressor, the value of COMPRESS_ENABLED = !DEBUG is not set in the settings.\n\n.. code-block:: python\n\n    COMPRESS_ENABLED = True\n    COMPRESS_OFFLINE = True\n\nFor more information on django-compressor-settings_\n\nUsage\n-----\nIn your template, load compress ``{% load compress %}``\nthen use ``{% compress parcel %} <script> {% endcompress %}`` to load a script. for example:\n\n.. code-block:: html\n\n    {% load static %} \n    {% load compress %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <title>Vue Django Testing</title>\n      </head>\n      <body>\n        ....\n       {% compress parcel file myts %}\n        <script src=\"{% static 'js/index.ts' %}\"></script>\n       {% endcompress %}\n      </body>\n      ...\n\nVue example\n-----------\nCreate a vue project in your django project root ::\n\n    npm init --yes\n    npm install -D vue-template-compiler, @vue/component-compiler-utils\n    npm install vue\n\nIn your django project app create ::\n\n    static/components/test.vue\n    static/js/index.js\n\nIn static/components/test.vue,\n\n.. code-block:: vue\n\n    <template>\n      <div>\n        <h1>{{ message }}</h1>\n      </div>\n    </template>\n\n    <script>\n        export default {\n          name: \"app\",\n          components: {},\n          data: {\n            message: \"Hello Vue\",\n          },\n          computed: {}\n        };\n        </script>\n\n    <style lang=\"scss\">\n    </style>\nIn static/js/index.js,\n\n.. code-block:: javascript\n\n    import Vue from \"vue\";\n    import test  from \"../components/test.vue\";\n    new Vue(test).$mount(\"#components-demo\");\n\nIn your django template,\n\n.. code-block:: html\n\n    {% load static %} \n    {% load compress %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <title>Vue Django Testing</title>\n      </head>\n      <body>\n        ....\n       <div id=\"components-demo\"></div>\n       {% compress parcel file myjs %}\n         <script src=\"{% static 'js/index.js' %}\"></script>\n       {% endcompress %}\n      </body>\n      ...\n\nRun ``runserver`` ::\n\n    python manage.py runserver\n\nYou have successfully bundled your vue app into your django template.  \n\nUsing Parceljs to bundle SASS, SCSS, LESS\n-----------------------------------------\nIntegrating compilers into django-compressor is quiet very easy. All you need is to provide a COMPRESS_PRECOMPILERS option in django ``settings.py``. For more information visit django-compressor precompilers_\n\n.. code-block:: python\n\n    COMPRESS_PRECOMPILERS = (\n        ('text/coffeescript', 'coffee --compile --stdio'),\n        ('text/less', 'lessc {infile} {outfile}'),\n        ('text/x-sass', 'sass {infile} {outfile}'),\n        ('text/x-scss', 'sass --scss {infile} {outfile}'),\n        ('text/stylus', 'stylus < {infile} > {outfile}'),\n        ('text/foobar', 'path.to.MyPrecompilerFilter'),\n    )\n\nUse ``compressor.filters.parceljs.ParserFilterCSS`` on scss, sass or less in COMPRESS_PRECOMPILERS options as filter. For example: \n\n.. code-block:: python\n\n    COMPRESS_PRECOMPILERS = (\n        # ('text/coffeescript', 'coffee --compile --stdio'),\n        ('text/less', 'compressor.filters.parceljs.ParserFilterCSS'),\n        # ('text/x-sass', 'sass {infile} {outfile}'),\n        ('text/x-scss', 'compressor.filters.parceljs.ParserFilterCSS'),\n        # ('text/stylus', 'stylus < {infile} > {outfile}'),\n        # ('text/foobar', 'path.to.MyPrecompilerFilter'),\n    )\n\nIn your template, \n\n.. code-block:: html\n\n    {% load static %} \n    {% load compress %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <title>Vue Django Testing</title>\n        {% compress css file style %}\n            <link rel=\"stylesheet\" type=\"text/x-scss\"  href=\"{% static 'css/style.scss'%}\">\n        {% endcompress %}\n      </head>\n      <body>\n      .......\n\nAdd the ``type=\"text/x-scss\"`` for django-compressor to use the precompiler options to compile the asset.\n\nThere is alittle drawback with parceljs css url resolver. There is no configuration for parceljs to ignore resolving css url since django will always resolve static urls automatically. Read more this issue_\n\nA solution is to use ``///..`` in the url path followed by ``/static/(filepath)``\n\n.. code-block:: scss\n\n    body{\n        background-color: lightblue;\n        background-image: url(///../static/img/ssd/avatar1.png);\n\n        button{\n            font-size: .8rem;\n        }\n    }\n\nUsing typescript directly in django template\n--------------------------------------------\nAdd lang attribute to the script tag ``<script lang=\"ts\"></script>`` ::\n\n    npm init --yes\n    npm install -D @babel/core, @babel/preset-env, typescript\n\n.. code-block:: ts\n\n    {% load static %} \n    {% load compress %}\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <title>Vue Django Testing</title>\n      </head>\n      <body>\n        ....\n       {% compress parcel file myts %}\n         <script lang=\"ts\">\n            interface IUser {\n                name: string,\n                age: number\n            }\n\n            class User implements IUser{\n                constructor(user:IUser){\n                    this.name = user.name\n                    this.age = user.age\n                }\n                name: string    \n                age: number\n\n                get_name = () => {\n                    return this.name\n                };\n            }\n\n            const Peter = new User({name:'Peter', age:32})\n            console.log(Peter)\n         </script>\n       {% endcompress %}\n      </body>\n      ...\n\n.. _Django-Compressor: https://github.com/django-compressor/django-compressor\n.. _parceljs: https://parceljs.org\n.. _django-compressor-settings: https://django-compressor.readthedocs.io/en/latest/settings/\n.. _precompilers: https://django-compressor.readthedocs.io/en/latest/settings/#django.conf.settings.COMPRESS_PRECOMPILERS\n.. _issue: https://github.com/parcel-bundler/parcel/issues/1186/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://django-compressor-parceljs.readthedocs.io/en/latest/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-compressor-parceljs", "package_url": "https://pypi.org/project/django-compressor-parceljs/", "platform": "", "project_url": "https://pypi.org/project/django-compressor-parceljs/", "project_urls": {"Homepage": "https://django-compressor-parceljs.readthedocs.io/en/latest/"}, "release_url": "https://pypi.org/project/django-compressor-parceljs/2.3.2/", "requires_dist": ["django-appconf (>=1.0)", "rcssmin (==1.0.6)", "rjsmin (==1.1.0)", "six (==1.12.0)"], "requires_python": "", "summary": "Compresses JS, JS frameworks, CSS, SASS, LESS, SCSS into cached files.", "version": "2.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Compressor with Parceljs</h1>\n<p>Django-compressor_ with parceljs_ is base on Django-Compressor, which bundles and minifies your typescript, vue, react, scss etc in a Django template into cacheable static files using parceljs and django-compressor.</p>\n<p>For more information visit Django-Compressor_</p>\n<h2>Quickstart</h2>\n<p>Install django-compress::</p>\n<pre><code>pip install git+https://github.com/eadwinCode/django-compressor.git@develop\n</code></pre>\n<p>Install parcel-bundler::</p>\n<pre><code>npm install -g parcel-bundler\n</code></pre>\n<p>Add it to your <code>INSTALLED_APPS</code>:</p>\n<p>.. code-block:: python</p>\n<pre><code>INSTALLED_APPS = (\n    ...\n    'compressor',\n    ...\n)\n\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    # other finders..\n    'compressor.finders.CompressorFinder',\n)\n</code></pre>\n<h2>Other Configurations</h2>\n<p>To minify your code for production, you need to set COMPRESS_ENABLED and COMPRESS_OFFLINE to true in settings.py.</p>\n<p>In django-compressor, the value of COMPRESS_ENABLED = !DEBUG is not set in the settings.</p>\n<p>.. code-block:: python</p>\n<pre><code>COMPRESS_ENABLED = True\nCOMPRESS_OFFLINE = True\n</code></pre>\n<p>For more information on django-compressor-settings_</p>\n<h2>Usage</h2>\n<p>In your template, load compress <code>{% load compress %}</code>\nthen use <code>{% compress parcel %} &lt;script&gt; {% endcompress %}</code> to load a script. for example:</p>\n<p>.. code-block:: html</p>\n<pre><code>{% load static %} \n{% load compress %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue Django Testing&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    ....\n   {% compress parcel file myts %}\n    &lt;script src=\"{% static 'js/index.ts' %}\"&gt;&lt;/script&gt;\n   {% endcompress %}\n  &lt;/body&gt;\n  ...\n</code></pre>\n<h2>Vue example</h2>\n<p>Create a vue project in your django project root ::</p>\n<pre><code>npm init --yes\nnpm install -D vue-template-compiler, @vue/component-compiler-utils\nnpm install vue\n</code></pre>\n<p>In your django project app create ::</p>\n<pre><code>static/components/test.vue\nstatic/js/index.js\n</code></pre>\n<p>In static/components/test.vue,</p>\n<p>.. code-block:: vue</p>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;{{ message }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    export default {\n      name: \"app\",\n      components: {},\n      data: {\n        message: \"Hello Vue\",\n      },\n      computed: {}\n    };\n    &lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n&lt;/style&gt;\n</code></pre>\n<p>In static/js/index.js,</p>\n<p>.. code-block:: javascript</p>\n<pre><code>import Vue from \"vue\";\nimport test  from \"../components/test.vue\";\nnew Vue(test).$mount(\"#components-demo\");\n</code></pre>\n<p>In your django template,</p>\n<p>.. code-block:: html</p>\n<pre><code>{% load static %} \n{% load compress %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue Django Testing&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    ....\n   &lt;div id=\"components-demo\"&gt;&lt;/div&gt;\n   {% compress parcel file myjs %}\n     &lt;script src=\"{% static 'js/index.js' %}\"&gt;&lt;/script&gt;\n   {% endcompress %}\n  &lt;/body&gt;\n  ...\n</code></pre>\n<p>Run <code>runserver</code> ::</p>\n<pre><code>python manage.py runserver\n</code></pre>\n<p>You have successfully bundled your vue app into your django template.</p>\n<h2>Using Parceljs to bundle SASS, SCSS, LESS</h2>\n<p>Integrating compilers into django-compressor is quiet very easy. All you need is to provide a COMPRESS_PRECOMPILERS option in django <code>settings.py</code>. For more information visit django-compressor precompilers_</p>\n<p>.. code-block:: python</p>\n<pre><code>COMPRESS_PRECOMPILERS = (\n    ('text/coffeescript', 'coffee --compile --stdio'),\n    ('text/less', 'lessc {infile} {outfile}'),\n    ('text/x-sass', 'sass {infile} {outfile}'),\n    ('text/x-scss', 'sass --scss {infile} {outfile}'),\n    ('text/stylus', 'stylus &lt; {infile} &gt; {outfile}'),\n    ('text/foobar', 'path.to.MyPrecompilerFilter'),\n)\n</code></pre>\n<p>Use <code>compressor.filters.parceljs.ParserFilterCSS</code> on scss, sass or less in COMPRESS_PRECOMPILERS options as filter. For example:</p>\n<p>.. code-block:: python</p>\n<pre><code>COMPRESS_PRECOMPILERS = (\n    # ('text/coffeescript', 'coffee --compile --stdio'),\n    ('text/less', 'compressor.filters.parceljs.ParserFilterCSS'),\n    # ('text/x-sass', 'sass {infile} {outfile}'),\n    ('text/x-scss', 'compressor.filters.parceljs.ParserFilterCSS'),\n    # ('text/stylus', 'stylus &lt; {infile} &gt; {outfile}'),\n    # ('text/foobar', 'path.to.MyPrecompilerFilter'),\n)\n</code></pre>\n<p>In your template,</p>\n<p>.. code-block:: html</p>\n<pre><code>{% load static %} \n{% load compress %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue Django Testing&lt;/title&gt;\n    {% compress css file style %}\n        &lt;link rel=\"stylesheet\" type=\"text/x-scss\"  href=\"{% static 'css/style.scss'%}\"&gt;\n    {% endcompress %}\n  &lt;/head&gt;\n  &lt;body&gt;\n  .......\n</code></pre>\n<p>Add the <code>type=\"text/x-scss\"</code> for django-compressor to use the precompiler options to compile the asset.</p>\n<p>There is alittle drawback with parceljs css url resolver. There is no configuration for parceljs to ignore resolving css url since django will always resolve static urls automatically. Read more this issue_</p>\n<p>A solution is to use <code>///..</code> in the url path followed by <code>/static/(filepath)</code></p>\n<p>.. code-block:: scss</p>\n<pre><code>body{\n    background-color: lightblue;\n    background-image: url(///../static/img/ssd/avatar1.png);\n\n    button{\n        font-size: .8rem;\n    }\n}\n</code></pre>\n<h2>Using typescript directly in django template</h2>\n<p>Add lang attribute to the script tag <code>&lt;script lang=\"ts\"&gt;&lt;/script&gt;</code> ::</p>\n<pre><code>npm init --yes\nnpm install -D @babel/core, @babel/preset-env, typescript\n</code></pre>\n<p>.. code-block:: ts</p>\n<pre><code>{% load static %} \n{% load compress %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Vue Django Testing&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    ....\n   {% compress parcel file myts %}\n     &lt;script lang=\"ts\"&gt;\n        interface IUser {\n            name: string,\n            age: number\n        }\n\n        class User implements IUser{\n            constructor(user:IUser){\n                this.name = user.name\n                this.age = user.age\n            }\n            name: string    \n            age: number\n\n            get_name = () =&gt; {\n                return this.name\n            };\n        }\n\n        const Peter = new User({name:'Peter', age:32})\n        console.log(Peter)\n     &lt;/script&gt;\n   {% endcompress %}\n  &lt;/body&gt;\n  ...\n</code></pre>\n<p>.. _Django-Compressor: <a href=\"https://github.com/django-compressor/django-compressor\" rel=\"nofollow\">https://github.com/django-compressor/django-compressor</a>\n.. _parceljs: <a href=\"https://parceljs.org\" rel=\"nofollow\">https://parceljs.org</a>\n.. _django-compressor-settings: <a href=\"https://django-compressor.readthedocs.io/en/latest/settings/\" rel=\"nofollow\">https://django-compressor.readthedocs.io/en/latest/settings/</a>\n.. _precompilers: <a href=\"https://django-compressor.readthedocs.io/en/latest/settings/#django.conf.settings.COMPRESS_PRECOMPILERS\" rel=\"nofollow\">https://django-compressor.readthedocs.io/en/latest/settings/#django.conf.settings.COMPRESS_PRECOMPILERS</a>\n.. _issue: <a href=\"https://github.com/parcel-bundler/parcel/issues/1186/\" rel=\"nofollow\">https://github.com/parcel-bundler/parcel/issues/1186/</a></p>\n\n          </div>"}, "last_serial": 6187477, "releases": {"2.3": [{"comment_text": "", "digests": {"md5": "c2573120819b7cbba0008be0da308369", "sha256": "263c549840469aa2a618bc66ee2ff641702dbd68bdc3398974979149baabc5e2"}, "downloads": -1, "filename": "django_compressor_parceljs-2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2573120819b7cbba0008be0da308369", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 131332, "upload_time": "2019-11-06T19:52:44", "upload_time_iso_8601": "2019-11-06T19:52:44.303561Z", "url": "https://files.pythonhosted.org/packages/1b/ab/ebd9d72d71fecb098bc0fbb6fcfedd6c05a660ec00a35b80a4b5acf50ced/django_compressor_parceljs-2.3-py2.py3-none-any.whl", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "f1aa418e1d60a28e44a81d9240c157cf", "sha256": "b9962bdd8896336b1668f6c688e30e0842cae407ffe8caa955c9cb05d2c6b607"}, "downloads": -1, "filename": "django_compressor_parceljs-2.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f1aa418e1d60a28e44a81d9240c157cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 131494, "upload_time": "2019-11-08T06:13:16", "upload_time_iso_8601": "2019-11-08T06:13:16.384164Z", "url": "https://files.pythonhosted.org/packages/1f/40/a87b515e900bf4ea3becee8cec11f6c9c75f5c81e92b1d9e34d881cdcc90/django_compressor_parceljs-2.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55385d164a1fd04600b01d23ac811f71", "sha256": "2c8f3acb9b7843991d0cee32861cec5cc22ba039e80b344e93b1e1eaa29787a7"}, "downloads": -1, "filename": "django-compressor-parceljs-2.3.1.tar.gz", "has_sig": false, "md5_digest": "55385d164a1fd04600b01d23ac811f71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86031, "upload_time": "2019-11-08T06:13:18", "upload_time_iso_8601": "2019-11-08T06:13:18.690610Z", "url": "https://files.pythonhosted.org/packages/de/13/cf6884700780a5756027c4e059f2bbaf61feab3b0523433b4a42f650bc32/django-compressor-parceljs-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "6346211b3287111a648dfc50cf399b4b", "sha256": "72e7e47223cda9e8441625adf6cc1346465b1e7d2feaffba224265484f500541"}, "downloads": -1, "filename": "django_compressor_parceljs-2.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6346211b3287111a648dfc50cf399b4b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 133625, "upload_time": "2019-11-23T18:38:08", "upload_time_iso_8601": "2019-11-23T18:38:08.714886Z", "url": "https://files.pythonhosted.org/packages/f9/92/bc31b54f3ed7e7370c315c1ad31bb1d65be97a2215434261cd9ea4f9bea4/django_compressor_parceljs-2.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "114371a89af30689afacd613ae77a4de", "sha256": "53c63a0aa1f56a2cee039731087d6f686228ad0555cf13998f1d7a3f4540d112"}, "downloads": -1, "filename": "django-compressor-parceljs-2.3.2.tar.gz", "has_sig": false, "md5_digest": "114371a89af30689afacd613ae77a4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87581, "upload_time": "2019-11-23T18:38:11", "upload_time_iso_8601": "2019-11-23T18:38:11.369576Z", "url": "https://files.pythonhosted.org/packages/5d/4d/df5c3b95f0e5706060dcc363a5f17b4e6581f00f8de914ac90ea21c8d3cd/django-compressor-parceljs-2.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6346211b3287111a648dfc50cf399b4b", "sha256": "72e7e47223cda9e8441625adf6cc1346465b1e7d2feaffba224265484f500541"}, "downloads": -1, "filename": "django_compressor_parceljs-2.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6346211b3287111a648dfc50cf399b4b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 133625, "upload_time": "2019-11-23T18:38:08", "upload_time_iso_8601": "2019-11-23T18:38:08.714886Z", "url": "https://files.pythonhosted.org/packages/f9/92/bc31b54f3ed7e7370c315c1ad31bb1d65be97a2215434261cd9ea4f9bea4/django_compressor_parceljs-2.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "114371a89af30689afacd613ae77a4de", "sha256": "53c63a0aa1f56a2cee039731087d6f686228ad0555cf13998f1d7a3f4540d112"}, "downloads": -1, "filename": "django-compressor-parceljs-2.3.2.tar.gz", "has_sig": false, "md5_digest": "114371a89af30689afacd613ae77a4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87581, "upload_time": "2019-11-23T18:38:11", "upload_time_iso_8601": "2019-11-23T18:38:11.369576Z", "url": "https://files.pythonhosted.org/packages/5d/4d/df5c3b95f0e5706060dcc363a5f17b4e6581f00f8de914ac90ea21c8d3cd/django-compressor-parceljs-2.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:54 2020"}