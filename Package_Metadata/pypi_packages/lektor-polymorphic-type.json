{"info": {"author": "Jeff Dairiki", "author_email": "dairiki@dairiki.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Lektor", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# Lektor Polymorphic Type\n\nThis plugin adds a new polymorphic [lektor][] field type, `polymorphic`.\nThe determination of the actual type implementation of the field value\nis deferred until evaluation time.\n\nA motivating use case is to support having a \u201cbody\u201d field whose\nformatting can be switched between, e.g., `markdown`, and `html` (or\nsome other formatted type, such as [reStructuredText][rst].)\n\n[lektor]: <https://www.getlektor.com/> \"Lektor Static Content Management System\"\n[rst]: <https://pypi.org/project/lektor-rst/> \"The lektor-rst plugin\"\n\n## Installation\n\nAdd lektor-polymorphic-type to your project from command line:\n\n```\nlektor plugins add lektor-polymorphic-type\n```\n\nSee [the Lektor plugin documentation][plugins] for more information.\n\n[plugins]: <https://www.getlektor.com/docs/plugins/>\n\n## How It Works\n\nIf the field has a `polymorphic_type` option set, that value is evaluated\nand the result is interpreted as the name of the final type for the\nfield.\n\nIf no `polymorphic_type` option is set for the field, then we look for a\nfield on the current record whose name is name of the current field\nwith \u201c`_type`\u201d appended.\n\n## Examples\n\n### Simple Example\n\nHere is an example model file for a simple page, with a selectable body format:\n\n```ini\n# page.ini\n\n[model]\nname = Page\nlabel = {{ this.title }}\n\n[fields.title]\nlabel = Title\ntype = string\n\n[fields.body]\nlabel = Body\ntype = polymorphic\n\n[fields.body_type]\nlabel = Body Type\ntype = select\nchoices = markdown, html, text\ndefault = markdown\n```\n\nHere, the value of the `body_type` field on a particular page will\ndetermine whether the `body` field is interpreted as being `markdown`,\n`html` or `text`.\n\n### Contrived Example\n\nHere is a contrived example showing the use of the `polymorphic_type` option:\n\n```ini\n# page.ini\n\n[model]\nname = Page\nlabel = {{ this.title }}\n\n[fields.title]\nlabel = Title\ntype = string\n\n[fields.body]\nlabel = Body\ntype = polymorphic\npolymorphic_type = 'html' if this.body.lstrip().startswith('<') else 'markdown'\n```\n\nIn this case, the `body` field will be interpreted as raw HTML if the\ncontent of that field starts with a \u201c`<`\u201d, otherwise it will be\ninterpreted as _Markdown_ text.\n\n\n## Author\n\nJeff Dairiki <dairiki@dairiki.org>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dairiki/lektor-polymorphic-type", "keywords": "Lektor plugin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lektor-polymorphic-type", "package_url": "https://pypi.org/project/lektor-polymorphic-type/", "platform": "", "project_url": "https://pypi.org/project/lektor-polymorphic-type/", "project_urls": {"Homepage": "https://github.com/dairiki/lektor-polymorphic-type"}, "release_url": "https://pypi.org/project/lektor-polymorphic-type/0.1b1/", "requires_dist": null, "requires_python": "", "summary": "Add polymorphic field type to Lektor", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lektor Polymorphic Type</h1>\n<p>This plugin adds a new polymorphic <a href=\"https://www.getlektor.com/\" rel=\"nofollow\" title=\"Lektor Static Content Management System\">lektor</a> field type, <code>polymorphic</code>.\nThe determination of the actual type implementation of the field value\nis deferred until evaluation time.</p>\n<p>A motivating use case is to support having a \u201cbody\u201d field whose\nformatting can be switched between, e.g., <code>markdown</code>, and <code>html</code> (or\nsome other formatted type, such as <a href=\"https://pypi.org/project/lektor-rst/\" rel=\"nofollow\" title=\"The lektor-rst plugin\">reStructuredText</a>.)</p>\n<h2>Installation</h2>\n<p>Add lektor-polymorphic-type to your project from command line:</p>\n<pre><code>lektor plugins add lektor-polymorphic-type\n</code></pre>\n<p>See <a href=\"https://www.getlektor.com/docs/plugins/\" rel=\"nofollow\">the Lektor plugin documentation</a> for more information.</p>\n<h2>How It Works</h2>\n<p>If the field has a <code>polymorphic_type</code> option set, that value is evaluated\nand the result is interpreted as the name of the final type for the\nfield.</p>\n<p>If no <code>polymorphic_type</code> option is set for the field, then we look for a\nfield on the current record whose name is name of the current field\nwith \u201c<code>_type</code>\u201d appended.</p>\n<h2>Examples</h2>\n<h3>Simple Example</h3>\n<p>Here is an example model file for a simple page, with a selectable body format:</p>\n<pre><span class=\"c1\"># page.ini</span>\n\n<span class=\"k\">[model]</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">Page</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">{{ this.title }}</span>\n\n<span class=\"k\">[fields.title]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Title</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">string</span>\n\n<span class=\"k\">[fields.body]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Body</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">polymorphic</span>\n\n<span class=\"k\">[fields.body_type]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Body Type</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">select</span>\n<span class=\"na\">choices</span> <span class=\"o\">=</span> <span class=\"s\">markdown, html, text</span>\n<span class=\"na\">default</span> <span class=\"o\">=</span> <span class=\"s\">markdown</span>\n</pre>\n<p>Here, the value of the <code>body_type</code> field on a particular page will\ndetermine whether the <code>body</code> field is interpreted as being <code>markdown</code>,\n<code>html</code> or <code>text</code>.</p>\n<h3>Contrived Example</h3>\n<p>Here is a contrived example showing the use of the <code>polymorphic_type</code> option:</p>\n<pre><span class=\"c1\"># page.ini</span>\n\n<span class=\"k\">[model]</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">Page</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">{{ this.title }}</span>\n\n<span class=\"k\">[fields.title]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Title</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">string</span>\n\n<span class=\"k\">[fields.body]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Body</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">polymorphic</span>\n<span class=\"na\">polymorphic_type</span> <span class=\"o\">=</span> <span class=\"s\">'html' if this.body.lstrip().startswith('&lt;') else 'markdown'</span>\n</pre>\n<p>In this case, the <code>body</code> field will be interpreted as raw HTML if the\ncontent of that field starts with a \u201c<code>&lt;</code>\u201d, otherwise it will be\ninterpreted as <em>Markdown</em> text.</p>\n<h2>Author</h2>\n<p>Jeff Dairiki <a href=\"mailto:dairiki@dairiki.org\">dairiki@dairiki.org</a></p>\n\n          </div>"}, "last_serial": 7169531, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "bdac13fd0e95d3dd80f345d88ec1a44a", "sha256": "cdf771b0a383fac6572c50e78f064e0f0ae18d6136c436a427db4dab003b2d9d"}, "downloads": -1, "filename": "lektor_polymorphic_type-0.1b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bdac13fd0e95d3dd80f345d88ec1a44a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5243, "upload_time": "2020-05-05T05:08:30", "upload_time_iso_8601": "2020-05-05T05:08:30.720402Z", "url": "https://files.pythonhosted.org/packages/28/7e/f7d298b3211063c733ddfe7ac87bdcc7dc9d6ce8e26849694330771c2fc6/lektor_polymorphic_type-0.1b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acdd7b6343e7b5f044850b7e62251161", "sha256": "a21cf4731156dbd358aa22dcbbc00dd7f96b590fce6b5fd4378b0935e0837b70"}, "downloads": -1, "filename": "lektor-polymorphic-type-0.1b1.tar.gz", "has_sig": true, "md5_digest": "acdd7b6343e7b5f044850b7e62251161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8132, "upload_time": "2020-05-05T05:08:33", "upload_time_iso_8601": "2020-05-05T05:08:33.314517Z", "url": "https://files.pythonhosted.org/packages/70/a5/95a5b36906f0a8ba694443b4e7894d6c51f71cbfef100377a86e7c28e3d2/lektor-polymorphic-type-0.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdac13fd0e95d3dd80f345d88ec1a44a", "sha256": "cdf771b0a383fac6572c50e78f064e0f0ae18d6136c436a427db4dab003b2d9d"}, "downloads": -1, "filename": "lektor_polymorphic_type-0.1b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bdac13fd0e95d3dd80f345d88ec1a44a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5243, "upload_time": "2020-05-05T05:08:30", "upload_time_iso_8601": "2020-05-05T05:08:30.720402Z", "url": "https://files.pythonhosted.org/packages/28/7e/f7d298b3211063c733ddfe7ac87bdcc7dc9d6ce8e26849694330771c2fc6/lektor_polymorphic_type-0.1b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acdd7b6343e7b5f044850b7e62251161", "sha256": "a21cf4731156dbd358aa22dcbbc00dd7f96b590fce6b5fd4378b0935e0837b70"}, "downloads": -1, "filename": "lektor-polymorphic-type-0.1b1.tar.gz", "has_sig": true, "md5_digest": "acdd7b6343e7b5f044850b7e62251161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8132, "upload_time": "2020-05-05T05:08:33", "upload_time_iso_8601": "2020-05-05T05:08:33.314517Z", "url": "https://files.pythonhosted.org/packages/70/a5/95a5b36906f0a8ba694443b4e7894d6c51f71cbfef100377a86e7c28e3d2/lektor-polymorphic-type-0.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:07 2020"}