{"info": {"author": "Mikhail Krivushin", "author_email": "krivushinme@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "RadishSalad\n~~~~~~~~~~~\n\nRadishsalad is simple lib for work with redis datastore in more pythonic way.\n\n\nBase\n====\n\nIt include String, Hash, List and Set classes, that represent redis datatypes.\nYou need to initialize datatype with key:\n\n    >>> dt.List('main stream').append('Blogger Navalniy discovered new corruption scheme in Russia!')\n    1L\n    >>> list(dt.List('main stream'))\n    ['Blogger Navalniy discovered new corruption scheme in Russia!']\n\n\n    >>> up = dt.Hash('0:user profile')\n    >>> up['name'] = 'deepwalker'\n    >>> dict(up)\n    {'name': 'deepwalker'}\n    >>> 'name' in up\n    True\n\n\n    >>> friends = dt.Set('friends')\n    >>> friends.add(1929340)\n    >>> set(friends)\n    set(['1929340'])\n    >>> 1929340 in friends\n    True\n\n\nModels\n======\n\nRadishsalad has `models` module that is not positioned as Django ORM thing. Its just helper\nfor keys name generation.\nSo you create an model:\n\n    >>> from radishsalad import models as m\n    >>> class User(m.Model):\n    ...      name = m.String()\n    ...      subscribers = m.Set()\n    ...      profile = m.Hash()\n    ...      messages = m.List()\n    ...      read = m.List()\n    ... \n\nAnd for using you need initialize it with key:\n    \n    >>> user = User(1000)\n\nNow you have `user` instance, and you can get keys for it members:\n\n    >>> user.name.get_key()\n    'user:1000:name'\n\nLibrary does not return you a string instead of `String` objects for using in redis.mget:\n\n    >>> from radishsalad.connection import get_redis\n    >>> r = get_redis()\n    >>> r.mset(dict((User(i).name.get_key(), i) for i in xrange(40)))\n    >>> r.mget(User(i).name.get_key() for i in xrange(40))\n    ['0', '1', '2', '3', '4', '5', '6', '7', ... '38', '39']", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Deepwalker/radishsalad/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "radishsalad", "package_url": "https://pypi.org/project/radishsalad/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/radishsalad/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Deepwalker/radishsalad/"}, "release_url": "https://pypi.org/project/radishsalad/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Redis datastore library", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Radishsalad is simple lib for work with redis datastore in more pythonic way.</p>\n<div id=\"base\">\n<h2>Base</h2>\n<p>It include String, Hash, List and Set classes, that represent redis datatypes.\nYou need to initialize datatype with key:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; dt.List('main stream').append('Blogger Navalniy discovered new corruption scheme in Russia!')\n1L\n&gt;&gt;&gt; list(dt.List('main stream'))\n['Blogger Navalniy discovered new corruption scheme in Russia!']\n</pre>\n<pre>&gt;&gt;&gt; up = dt.Hash('0:user profile')\n&gt;&gt;&gt; up['name'] = 'deepwalker'\n&gt;&gt;&gt; dict(up)\n{'name': 'deepwalker'}\n&gt;&gt;&gt; 'name' in up\nTrue\n</pre>\n<pre>&gt;&gt;&gt; friends = dt.Set('friends')\n&gt;&gt;&gt; friends.add(1929340)\n&gt;&gt;&gt; set(friends)\nset(['1929340'])\n&gt;&gt;&gt; 1929340 in friends\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<p>Radishsalad has <cite>models</cite> module that is not positioned as Django ORM thing. Its just helper\nfor keys name generation.\nSo you create an model:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from radishsalad import models as m\n&gt;&gt;&gt; class User(m.Model):\n...      name = m.String()\n...      subscribers = m.Set()\n...      profile = m.Hash()\n...      messages = m.List()\n...      read = m.List()\n...\n</pre>\n</blockquote>\n<p>And for using you need initialize it with key:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; user = User(1000)\n</pre>\n</blockquote>\n<p>Now you have <cite>user</cite> instance, and you can get keys for it members:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; user.name.get_key()\n'user:1000:name'\n</pre>\n</blockquote>\n<p>Library does not return you a string instead of <cite>String</cite> objects for using in redis.mget:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from radishsalad.connection import get_redis\n&gt;&gt;&gt; r = get_redis()\n&gt;&gt;&gt; r.mset(dict((User(i).name.get_key(), i) for i in xrange(40)))\n&gt;&gt;&gt; r.mget(User(i).name.get_key() for i in xrange(40))\n['0', '1', '2', '3', '4', '5', '6', '7', ... '38', '39']\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 798434, "releases": {"0.1.0": [{"comment_text": "built for Linux-2.6.32-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "398f495305781872bd39205bc451e886", "sha256": "1827fee1e28648d0e04f34c710ad56ce865a8469bbb4b8996578d614b228c67b"}, "downloads": -1, "filename": "radishsalad-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "398f495305781872bd39205bc451e886", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 6457, "upload_time": "2011-09-06T14:25:12", "upload_time_iso_8601": "2011-09-06T14:25:12.902632Z", "url": "https://files.pythonhosted.org/packages/8c/56/9ab36d305b35fead440e3c1aa720e7682d33b1d59eb34e83986b398c9d7c/radishsalad-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf8ed995df8ace1cbbc5cc8e4f50dd11", "sha256": "aabbe9fe386f7f9c3d34050940919c86ff5c67f57d0312fef2818889a5e09bd4"}, "downloads": -1, "filename": "radishsalad-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf8ed995df8ace1cbbc5cc8e4f50dd11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3443, "upload_time": "2011-09-06T14:24:43", "upload_time_iso_8601": "2011-09-06T14:24:43.687375Z", "url": "https://files.pythonhosted.org/packages/f6/e1/bfd2a5eba085aba1c1ededeafdf9563626894aa1aade563bbe0edbe691e9/radishsalad-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "built for Linux-2.6.32-32-generic-x86_64-with-glibc2.4", "digests": {"md5": "398f495305781872bd39205bc451e886", "sha256": "1827fee1e28648d0e04f34c710ad56ce865a8469bbb4b8996578d614b228c67b"}, "downloads": -1, "filename": "radishsalad-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "398f495305781872bd39205bc451e886", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 6457, "upload_time": "2011-09-06T14:25:12", "upload_time_iso_8601": "2011-09-06T14:25:12.902632Z", "url": "https://files.pythonhosted.org/packages/8c/56/9ab36d305b35fead440e3c1aa720e7682d33b1d59eb34e83986b398c9d7c/radishsalad-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf8ed995df8ace1cbbc5cc8e4f50dd11", "sha256": "aabbe9fe386f7f9c3d34050940919c86ff5c67f57d0312fef2818889a5e09bd4"}, "downloads": -1, "filename": "radishsalad-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf8ed995df8ace1cbbc5cc8e4f50dd11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3443, "upload_time": "2011-09-06T14:24:43", "upload_time_iso_8601": "2011-09-06T14:24:43.687375Z", "url": "https://files.pythonhosted.org/packages/f6/e1/bfd2a5eba085aba1c1ededeafdf9563626894aa1aade563bbe0edbe691e9/radishsalad-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:58 2020"}