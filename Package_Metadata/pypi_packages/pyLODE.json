{"info": {"author": "Nicholas Car", "author_email": "nicholas.car@surroundaustralia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": ".. image:: img/logo-pyLODE.png\n\n.. image:: https://badge.fury.io/py/pyLODE.svg\n    :target: https://badge.fury.io/py/pyLODE\n\npyLODE\n******\nAn OWL ontology documentation tool using Python and templating, based on\nLODE.\n\nIn addition to making human-readable forms of ontologies/taxonomies, pyLODE encourages ontology annotation *best\npractice* by only producing good results for well documented inputs! pyLODe defines what it considers w'well documented'\nin sections below, such as `Profiles`_ & `What pyLODE understands`_.\n\nContents\n========\n1. `Quick Intro`_\n2. Examples_\n3. Installation_\n4. Use_\n5. `What pyLODE understands`_\n6. `Profiles`_\n7. `Differences from LODE`_\n8. `Releases roadmap`_\n9. License_\n10. Citation_\n11. Collaboration_\n12. Contacts_\n\n\nQuick Intro\n===========\nThe Live OWL Documentation Environment tool\n(`LODE <https://github.com/essepuntato/LODE>`__) is a well-known (in\nSemantic Web circles) Java & XSLT-based tool used to generate\nhuman-readable HTML documents for OWL and RDF ontologies. That tool is\nnow a bit dated (old-style HTML, use of older technologies like XSLT)\nand it's (`online version <https://www.essepuntato.it/lode>`__) is not always\nonline.\n\nThis tool is a complete re-implementation of LODE's functionality using\nPython and Python's RDF manipulation module,\n`rdflib <https://pypi.org/project/rdflib/>`__. An ontology to be\ndocumented is parsed and inspected using rdflib and HTML or Markdown is generated\nusing basic Python scripting and Python's `Jinja2\ntemplating <https://pypi.org/project/Jinja2/>`__.\n\nThe tool can be run as in these ways:\n\n- Python command line\n    - cli.py in the main folder\n- BASH command line\n    - bin/ directory, uses cli.py\n- as-a-service locally\n    - via the popular `Falcon framework <https://falconframework.org/>`__.\n    - see server.py in the main folder\n- as-a-service online\n    - hosted at https://kurrawong.net/pylode-online\n\n\nExamples\n========\npyLODE has been tested with all of the 30+ ontologies in `pylode/examples/ <pylode/examples/>`_ and we are trying to\nensure it captures all of their annotations. For each example, there is the original RDF file and the corresponding\noutput, in HTML & Markdown.\n\nFor example, `Epimorphic's <https://www.epimorphics.com/>`__'s **Registry Ontology** is:\n\n- **agrif.ttl** - source file\n- **agrif.html** - HTML output\n    - see this `rendered online by GitHack <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.html>`__\n    - see `the point-of-truth rendered online <https://linked.data.gov.au/def/agrif>`__\n- **agrif.md** - Markdown output\n    - see this `rendered online by GitHub <https://github.com/RDFLib/pyLODE/blob/master/pylode/examples/agrif.md>`__\n- **agrif.skos.html** - HTMl output, \"skosp\" profile\n    - see this `rendered online by GitHack <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.skosp.html>`__\n\nYou can build all of the example outputs locally by running `pylode/examples/_make_examples.py <pylode/examples/_make_examples.py>`_\nwhich also serves as a good demonstration of calling pyLODE from a Python file.\n\n\nOntologies online using pyLODE:\n-------------------------------\n\n- `Australia's Department of Finance's <https://www.finance.gov.au>`__'s **AGRIF ontology** - http://linked.data.gov.au/def/agrif\n    - see the `Markdown version <https://github.com/AGLDWG/agrif-ont/blob/master/agrif.md>`__\n- `National Archives of Australia <http://www.naa.gov.au>`__'s **Commonwealth Records Series ontology** - http://linked.data.gov.au/def/crs\n    - see the `Markdown version <https://github.com/RDFLib/pyLODE/blob/master/src/pylode/examples/crs.md>`__\n- `CSIRO's <https://www.csiro.au>`__'s **LocI ontology** - http://linked.data.gov.au/def/loci\n-  `Geological Survey of\n   Queensland <https://www.business.qld.gov.au/industries/mining-energy-water/resources/geoscience-information/gsq>`__'s\n   **Boreholes Profile** - http://linked.data.gov.au/def/borehole\n-  `Geoscience Australia <http://www.ga.gov.au/>`__'s **Place Names\n   Profile** - http://linked.data.gov.au/def/placenames\n-  `Epimorphic <https://www.epimorphics.com/>`__'s **Registry Ontology**\n   - https://epimorphics.com/public/vocabulary/Registry.html\n- `Semantic Web for Earth and Environmental Terminology <http://sweetontology.net>`__ (SWEET)\n\nSee pairs of RDF & HTML files in the\n`pylode/examples/ <pylode/examples/>`__ directory for other,\npreprocessed examples.\n\n\nInstallation\n============\nThis tool can be used either as a command line utility (Linux, Mac or Windows, see below) or as a Python module in other Python code. It can also be used via an online API. This repo contains executable files for Mac & Windows (soon Linux!) that you can use without any installation too.\n\nThe most import dependency to get correct when using this as a Python script of a command line program is the package ``rdflib`` which must be v5.0.0 or greater (see requirements.txt).\n\nPython\n------\nDo this to use pyLODE as a Python command line program.\n\nThis tool is available on PyPI, the Python Package Index, at https://pypi.org/project/pyLODE/ and can be installed for use as a Python module via pip:\n\n::\n\n    pip install pylode\n\nFor desktop command line use, just clone this repository and either use ``cli.py`` as per the command line instructions below or use makedocco.py as a Python script directly.\n\n\nUse\n===\npyLODE presents natively as a Python command-line utility,\n`pylode/cli.py <pylode/cli.py>`__ and there are also a BASH, Windows & Mac OS options available for command line use:\n\n* `pylode/bin/pylode.sh <pylode/bin/pylode.sh>`__ - BASH script\n* Linux executable coming soon!\n* `pylode/bin/pylode.app <pylode/bin/pylode.app>`__ - MAC OS command line executable script\n* `pylode/bin/pylode.exe <pylode/bin/pylode.exe>`__ - Windows command line executable\n\nAdditionally, there is a `Falcon framework <https://falconframework.org/>`__ local HTTP server option.\n\nAll use the same command line arguments.\n\nCommand line arguments\n----------------------\nThese are the command line arguments to run pyLODE as a BASH or Python script on Linux, Mac etc. or via the Windows executable:\n\n-  ``-i`` or ``--inputfile``, *required if* ``-u`` *not used*\n    -  The RDF ontology file you wish to generate HTML for Must be in either Turtle, RDF/XML, JSON-LD or N-Triples formats indicated by the file type extensions .rdf, .owl, .ttl, .n3, .nt, .json respectively\n-  ``-u`` or ``--url``, *required if* ``-i`` *not used*\n    -  The RDF ontology you wish to generate HTML for, online. Must be an absolute URL that can be resolved to RDF, preferably via Content Negotiation.\n-  ``-c`` or ``--css``, *optional, default 'false'*\n    -  Whether (true) or not (false) to copy the default CSS file to the output directory.\n-  ``-o`` or ``--outputfile``, *optional*\n    -  A name you wish to assign to the output file. Will be postfixed with .html or .md. If not specified, the name of the input file or last segment of RDF URI will be used, + .html/.md.\n-  ``-f`` or ``--outputformat``, *optional, default 'html'*\n    - The output format of the documentation. 'html' or 'md' accepted.\n-  ``-p`` or ``--profile``, *optional, default 'owl'*\n    - The profile (specification) for ontology documentation used. This has been \"owl\" (for OWL Ontology) only until the recent introduction of \"skos\" (according to the `Simple Knowledge Organization System (SKOS) <https://www.w3.org/TR/skos-reference/>`__). See ``-lp`` for all profiles supported.\n-  ``-lp`` or ``--listprofiles``, *optional, no arguments*\n    - Lists all the profiles (specifications) for ontology documentation supported by pyLODE\n\nExample call\n------------\nThis call to the BASH script in `pylode/bin/ <pylode/bin/>`__ will\ncreate an HTML document for an ontology called ``placenames.html`` and\nsave it with a basic CSS file into\n`pylode/output\\_files/ <pylode/output_files/>`__:\n\n::\n\n    $ ./pylode -i ../example/prof.ttl --css true\n\nOnline API\n----------\nAn online API to access pyLODE is now available in test mode at https://kurrawong.net/pylode-online.\n\nLocal server - Falcon\n---------------------\nYou can run pyLODE using your own, local, HTTP server like this:\n```\ngunicorn server:api\n```\nThen, in another terminal:\n```\ncurl localhost:8000/lode?url=http://sweetontology.net/sweetAll.ttl\n```\n\nWindows - create EXE from source\n--------------------------------\n`Pyinstaller <https://www.pyinstaller.org/>`__ can be \n`used <https://pyinstaller.readthedocs.io/en/stable/usage.html>`__ to create an \nexecutable for Windows that has the same characteristics as the Linux/Mac \nCLI program. \nThe necessary ``.spec`` file is already included in ``pylode-cli.spec``.\nThe ``pylode-cli.spec`` PyInstaller spec file creates a ``.exe`` for the \npyLODE Command Line utility. See above for the pyLODE command line util usage instructions.\n\nSee `the PyInstaller installation guide <https://pyinstaller.readthedocs.io/en/stable/installation.html#installing-in-windows>`__\nfor info on how to install PyInstaller for Windows.\n\nOnce you have pyinstaller, use pyinstaller to generate the ``pyLODE.exe`` CLI file like so:\n\n::\n\n    $ cd src/pylode\n    $ pyinstaller pylode-cli.spec\n\nThis will output ``pylode.exe`` in the ``dist`` directory in ``src/pylode``.\n\nYou can now run the pyLODE Command Line utility via ``pylode.exe``. \nSee above for the pyLODE command line util usage instructions.\n\nMac OS - create APP from source\n-------------------------------\nAs per instructions for PyInstaller use on Windows, just do it on a Mac!\n\nWhat pyLODE understands\n=======================\n\nAnnotations\n-----------\npyLODE understands the following ontology constructs:\n\n-  **ontology metadata**\n    -  *imports* - ``owl:imports``\n    -  *title* - ``rdfs:label`` or ``skos:prefLabel`` or ``dct:title`` or ``dc:title``\n    -  *description* - ``rdfs:comment`` or ``skos:definition`` or ``dct:description`` or ``dc:description``\n        - Markdown is supported\n    -  *historyNote* - ``skos:historyNote``\n        - Markdown is supported\n    -  *version URI* - ``owl:versionIRI`` as a URI\n    -  *version info* - ``owl:versionInfo`` as a string\n        - *preferred namespace prefix* - ``vann:preferredNamespacePrefix`` as a token\n        - *preferred namespace URI* - ``vann:preferredNamespaceUri`` as a URI\n    -  **agents**: *publishers*, *creators*, *contributors*\n        - see **Agent Formatting** below for details\n        - see the `pylode/examples/ <pylode/examples/>`__ directory for examples!\n    -  **dates**: *created*, *modified*, *issued* - ``dct:created`` etc., all as ``xsd:date`` or ``xsd:dateTime`` datatype properties\n    -  **rights**: *license* - ``dct:license`` as a URI & *rights* - ``dct:rights`` as a string\n    -  *code respository* - ``schema:codeRepository`` as a URI\n    -  *source* - ``dcterms:source`` as a URI or text\n-  **classes**\n    -  per ``rdfs:Class`` or ``owl:Class``\n    -  *title* - ``rdfs:label`` or ``skos:prefLabel`` or ``dct:title``\n    -  *description* - ``rdf:comment`` or ``skos:definition`` or ``dct:description`` as a string or using `Markdown <https://daringfireball.net/projects/markdown/>`__ or HTML\n    -  *usage note* - a ``skos:scopeNote`` string\n    -  *example* - a ``skos:example`` string containing RDF\n    -  *super classes* - by declaring a class to be ``owl:subClassOf`` something\n    -  *sub classes* - pyLODE will work these out itself\n    -  *restrictions* - by declaring a class to be ``owl:subClassOf`` of an ``owl:Restriction`` with any of the normal cardinality or property existence etc. restrictions\n    -  *in domain/range of* - pyLODE will auto-calculate these\n-  **properties**\n    -  per ``owl:ObjectProperty``, ``owl:DatatypeProperty`` or ``owl:AnnotationProperty``\n    -  *title* - ``rdfs:label`` or ``skos:prefLabel`` or ``dct:title``\n    -  *description* - ``rdf:comment`` or ``skos:definition`` or ``dct:description``\n    -  *usage note* - a ``skos:scopeNote`` string\n    -  *example* - a ``skos:example`` string containing RDF\n    -  *super properties* - by declaring a class to be ``owl:subPropertyOf`` something\n    -  *sub properties* - pyLODE will work these out itself\n    -  *equivalent properties* - by declaring a class to be ``owl:equivalentProperty`` something\n    -  *inverse of* - by declaring a class to be ``owl:inverseOf`` something\n    -  *domains* - ``rdfs:domain`` or ``schema:domainIncludes``\n    -  *ranges* - ``rdfs:range`` or ``schema:rangeIncludes``\n-  **namespaces**\n    -  pyLODE will honour any namespace prefixes you set and look up others in `http://prefix.cc <http://prefix.cc/>`__\n    -  it will either read your ontology's default/base URI in annotations or guess it using a number of methods\n-  **named individuals**\n    -  *coming!*\n\nAgent Formatting\n&&&&&&&&&&&&&&&&&\n-  Use either the DC versions of properties (``dc:publisher`` etc.) or the DCT versions (``dct:publisher`` etc.)\n-  if using the DC form, the range should just be a string, e.g. ``dc:publisher \"Geoscience Australia\" .`` or ``dc:creator \"Nicholas J. Car\" .``\n-  if using the DCT form, the range should be a ``foaf:Agent`` or ``schema:Person`` Blank Node or URI (if details are given elsewhere in the ontology) with the following properties:\n    - ``foaf:name``/``sdo:name``\n    - ``foaf:mbox``/``sdo:email``\n    - ``foaf:homepage``/``schema:identifier`` / ``sdo:url``\n- Affiliation of people to organisation can be made if schem.aorg is used using ``sdo:member`` or ``sdo:affiliation`` (latter preferred)\n    - e.g.\n\n::\n\n    <ontology_x>\n        dct:creator [\n            sdo:name \"Nicholas J. Car\" ;\n            sdo:identifier <http://orcid.org/0000-0002-8742-7730> ;\n            schema:email <mailto:nicholas.car@surroundaustralia.com> ;\n            sdo:affiliation [\n                sdo:name \"SURROUND Australia Pty Ltd\" ;\n                sdo:url <https://surroundaustralia.com> ;\n            ] ;\n        ] ;\n\nAdditions\n&&&&&&&&&&&&&&&&&\nTo help pyLODE understand more annotations, see **Suggestions** below.\n\n\nschema.org\n&&&&&&&&&&&\nWhen an HTML document is generated, i.e. not Markdown or other format,\n`schema.org <https://schema.org>`__ metadata is added to the HTML\nheader in the form of properties of a ``DigitalDocument`` subject.\nThe schema.org properties catered for are:\n\n- ``name``\n- ``dateCreated``\n- ``dateModified``\n- ``description``\n- ``license``\n- ``copyrightYear``\n- ``repository``\n\nNot yet handled, but will be soon, are:\n\n- ``publisher``\n- ``creator``\n- ``copyrightHolder``\n\nSee `SNIPPETS <SNIPPETS.rst>`__ for detailed examples on what pyLODE knows about Agents Provenance etc.\n\nPlease suggest any more required schema.org annotations!\n\nStyling\n-------\nThis tool generates HTML that is shamelessly similar to LODE's styling.\nThat's because we want things to look familiar and LODE's outputs look\ngreat. The Markdown's pretty vanilla.\n\nAlso, pyLODE generates and uses only static HTML + CSS, no JavaScript,\nlive loading Google Fonts etc. This is to ensure that all you need for\nnice display is within a couple of static, easy to use and maintain,\nfiles. Prevents documentation breaking over time.\n\nFeel free to extend your styling with your own CSS.\n\n\nProfiles\n========\npyLODE can document ontologies and other taxonomies according to different *profiles* which are specifications. The\nbasic, default, profile is pyLODE's OWL Profile, which means documentation is generated according to OWL properties\nand classes and the various annotation properties listed here in the `What pyLODE understands`_ section.\n\npyLODE can tell you what profiles it supports: just run ``~$ pylode -lp`` (\"list profiles\") or, if calling from Python:\n\n::\n\n    m = MakeDocco(input_data_file=\"examples/data-access-rights.ttl\", profile=\"skos\")\n    print(m.list_profiles())\n\n\nSupported Profiles\n------------------\nCurrently pyLODE supports its OWL profile, as described above, and a profile of SKOS. For full details of what the\nprofiles include, see the profiles' definitions at:\n\n========= ==========================================\n**Token** **URI**\n========= ==========================================\nowlp      `<https://w3id.org/profile/pylode-owl>`_\nskosp     `<https://w3id.org/profile/pylode-skos>`_\n========= ==========================================\n\n\nTransformation by Profile\n-------------------------\nYou can, of course, document an OWL ontology using the *owlp* profile or a SKOS taxonomy using the *skosp* profile\nhowever, you can also document an OWL ontology using the *skosp* profile! This is because SKOS is conceptually a subset\nof OWL - whatever you can express in SKOS you can express in OWL.\n\npyLODE performs an OWL > SKOS transformation on OWL ontologies to produce a taxonomy document. The following\nconversions are made:\n\n- ``owl:Ontology`` > ``skos:ConceptScheme``\n    - and all the ontology metadata is used with the ConceptScheme\n- ``owl:Class`` > ``skos:Concept``\n    - and other class annotation properties used with Concept\n- ``owl:subClassOf`` > ``skos:broader``\n   - and the inverses, ``skos:narrower``\n\nTo see the full list of transformations, see the function ``_expand_graph_for_skos()`` in *makedocco.py*.\n\nExamples of a small taxonomies documented using the *skosp* profile are:\n\n- `Data Access Rights <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/data-access-rights.skos.html>`_\n- `ISO 19115-1's RoleCodes <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/iso19115-1-RoleCodes.skos.html>`_\n\nAn example of a large one:\n\n- `Earth Science Data Category <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/earth-science-data-category.skos.html>`_\n\nAn example of a *skosp*-documented OWL ontology and the corresponding *owlp* original is AGRIF:\n\n- `AGRIF as skosp <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.skos.html>`_\n- `AGRIF as owlp <https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.html>`_\n\n\nDifferences from LODE\n=====================\n-  command line access\n\n   -  you can use this on your own desktop so you don't need me to\n      maintain a live service for use\n\n-  use of more modern & simpler HTML\n-  catering for a wider range of ontology options such as:\n\n   -  schema.org ``domainIncludes`` & ``rangeIncludes`` for properties\n\n-  better Agent linking\n\n   -  ``foaf:Agent`` or ``schema:Person`` objects for creators,\n      contributors & publishers\n   -  you can still use simple string peoperties like\n      ``dc:contributor \"Nicholas J. Car\"`` too if you really must!\n\n::\n\n    <ontology_x>\n        dct:creator [\n            sdo:name \"Nicholas J. Car\" ;\n            sdo:identifier <http://orcid.org/0000-0002-8742-7730> ;\n        ] ;\n\n-  smarter CURIES\n\n   -  pyLODE caches and looks up well-known prefixes to make more/better\n      CURIES\n   -  it tries to be smart with CURIE presentation by CURIE-ising all\n      URIs it finds, rather than printing them\n\n-  **active development**\n\n   -  this software is in use and will be improved for the foreseeable\n      future so we will cater for more and more things\n   -  recent ontology documentation initiatives such as the `MOD\n      Ontology <https://github.com/sifrproject/MOD-Ontology>`__ will be\n      handled, if requested\n\n\nReleases Roadmap\n================\npyLODE is under continual and constant development. The current developers have a roadmap for enhancements in mind,\nwhich is given here, however, since this is an open source project, new developers may join the pyLODE dev community\nand change/add development priorities.\n\nThe current release, as of April 2020, is 2.0.\n\n.. csv-table:: **pyLODE Releas Schedule**\n   :header: \"Version\", \"Date\", \"Description\"\n   :widths: 15, 10, 30\n\n   3.0, *June 2020*, \"Will include pre-testing inputs with SHACL\"\n   2.0, 18 Apr 2020, \"Includes multiple profiles - OWP & SKOSP\"\n   1.0, 15 Dec 2019, \"Initial working release\"\n\nRelease notes\n-------------\n\n3.0\n---\nExpected to handle\n\n- pre-documentation graph shape testing using SHACL\n    - you will be able to see what pyLODE-recommended annotation and design patterns your inputs do/don't handle\n- \"modp\", a documentation profile based on the `MOD Ontology <https://github.com/sifrproject/MOD-Ontology>`_\n\n2.0\n---\n- handles Named Individuals in OWL ontologies\n- implements \"owlp\" & \"skosp\" documentation profiles for OWL, SKOS and OWL-as-SKOS results\n\n1.0\n---\nInitial pyLODE release. Generated HTML documentation for OWL ontologies, missed quite a few expected ontology elements,\nsuch as Named Individuals.\n\nLicense\n=======\nThis code is licensed using the GPL v3 licence. See the `LICENSE\nfile <LICENSE>`_ for the deed. Note *Citation* below though for\nattribution.\n\n\nCitation\n========\nIf you use pyLODE, please leave the pyLODE logo with a hyperlink back\nhere in the top left of published HTML pages.\n\n\nCollaboration\n=============\nThe maintainers welcome any collaboration.\n\nIf you have suggestions, please email the contacts below or leave Issues\nin this repository's `Issue tracker <https://github.com/rdflib/pyLODE/issues>`_.\n\nBut the very best thing you could do is create a Pull Request for us to\naction!\n\n\nContacts\n========\n| *Author*:\n| **Nicholas Car**\n| *Data System Architect*\n| `SURROUND Australia Pty Ltd <https://surroundaustralia.com>`_\n| nicholas.car@surroundaustralia.com\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/rdflib/pyLODE/archive/v2.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rdflib/pyLODE", "keywords": "Semantic Web,OWL,ontology,template,Jinja2,documentation", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "pyLODE", "package_url": "https://pypi.org/project/pyLODE/", "platform": "", "project_url": "https://pypi.org/project/pyLODE/", "project_urls": {"Bug Reports": "https://github.com/rdflib/pyLODE/issues", "Download": "https://github.com/rdflib/pyLODE/archive/v2.2.tar.gz", "Homepage": "https://github.com/rdflib/pyLODE", "Source": "https://github.com/rdflib/pyLODE/"}, "release_url": "https://pypi.org/project/pyLODE/2.2/", "requires_dist": ["argparse", "falcon", "gunicorn", "jinja2", "markdown", "pytest", "python-dateutil", "rdflib (>=5.0.0)", "rdflib-jsonld (>=0.5.0)", "requests"], "requires_python": "", "summary": "An OWL ontology documentation tool using Python and templating, based on LODE.", "version": "2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"img/logo-pyLODE.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/843e014f0c834b2c8cd95dd18811299746eec32c/696d672f6c6f676f2d70794c4f44452e706e67\">\n<a href=\"https://badge.fury.io/py/pyLODE\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pyLODE.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8067f841f617813d4f25992e384958d9de19889b/68747470733a2f2f62616467652e667572792e696f2f70792f70794c4f44452e737667\"></a>\n<div id=\"pylode\">\n<h2>pyLODE</h2>\n<p>An OWL ontology documentation tool using Python and templating, based on\nLODE.</p>\n<p>In addition to making human-readable forms of ontologies/taxonomies, pyLODE encourages ontology annotation <em>best\npractice</em> by only producing good results for well documented inputs! pyLODe defines what it considers w\u2019well documented\u2019\nin sections below, such as <a href=\"#profiles\" rel=\"nofollow\">Profiles</a> &amp; <a href=\"#what-pylode-understands\" rel=\"nofollow\">What pyLODE understands</a>.</p>\n<div id=\"contents\">\n<h3>Contents</h3>\n<ol>\n<li><a href=\"#quick-intro\" rel=\"nofollow\">Quick Intro</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#use\" rel=\"nofollow\">Use</a></li>\n<li><a href=\"#what-pylode-understands\" rel=\"nofollow\">What pyLODE understands</a></li>\n<li><a href=\"#profiles\" rel=\"nofollow\">Profiles</a></li>\n<li><a href=\"#differences-from-lode\" rel=\"nofollow\">Differences from LODE</a></li>\n<li><a href=\"#releases-roadmap\" rel=\"nofollow\">Releases roadmap</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#citation\" rel=\"nofollow\">Citation</a></li>\n<li><a href=\"#collaboration\" rel=\"nofollow\">Collaboration</a></li>\n<li><a href=\"#contacts\" rel=\"nofollow\">Contacts</a></li>\n</ol>\n</div>\n<div id=\"quick-intro\">\n<h3>Quick Intro</h3>\n<p>The Live OWL Documentation Environment tool\n(<a href=\"https://github.com/essepuntato/LODE\" rel=\"nofollow\">LODE</a>) is a well-known (in\nSemantic Web circles) Java &amp; XSLT-based tool used to generate\nhuman-readable HTML documents for OWL and RDF ontologies. That tool is\nnow a bit dated (old-style HTML, use of older technologies like XSLT)\nand it\u2019s (<a href=\"https://www.essepuntato.it/lode\" rel=\"nofollow\">online version</a>) is not always\nonline.</p>\n<p>This tool is a complete re-implementation of LODE\u2019s functionality using\nPython and Python\u2019s RDF manipulation module,\n<a href=\"https://pypi.org/project/rdflib/\" rel=\"nofollow\">rdflib</a>. An ontology to be\ndocumented is parsed and inspected using rdflib and HTML or Markdown is generated\nusing basic Python scripting and Python\u2019s <a href=\"https://pypi.org/project/Jinja2/\" rel=\"nofollow\">Jinja2\ntemplating</a>.</p>\n<p>The tool can be run as in these ways:</p>\n<ul>\n<li><dl>\n<dt>Python command line</dt>\n<dd><ul>\n<li>cli.py in the main folder</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>BASH command line</dt>\n<dd><ul>\n<li>bin/ directory, uses cli.py</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>as-a-service locally</dt>\n<dd><ul>\n<li>via the popular <a href=\"https://falconframework.org/\" rel=\"nofollow\">Falcon framework</a>.</li>\n<li>see server.py in the main folder</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>as-a-service online</dt>\n<dd><ul>\n<li>hosted at <a href=\"https://kurrawong.net/pylode-online\" rel=\"nofollow\">https://kurrawong.net/pylode-online</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>pyLODE has been tested with all of the 30+ ontologies in <a href=\"pylode/examples/\" rel=\"nofollow\">pylode/examples/</a> and we are trying to\nensure it captures all of their annotations. For each example, there is the original RDF file and the corresponding\noutput, in HTML &amp; Markdown.</p>\n<p>For example, <a href=\"https://www.epimorphics.com/\" rel=\"nofollow\">Epimorphic\u2019s</a>\u2019s <strong>Registry Ontology</strong> is:</p>\n<ul>\n<li><strong>agrif.ttl</strong> - source file</li>\n<li><dl>\n<dt><strong>agrif.html</strong> - HTML output</dt>\n<dd><ul>\n<li>see this <a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.html\" rel=\"nofollow\">rendered online by GitHack</a></li>\n<li>see <a href=\"https://linked.data.gov.au/def/agrif\" rel=\"nofollow\">the point-of-truth rendered online</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>agrif.md</strong> - Markdown output</dt>\n<dd><ul>\n<li>see this <a href=\"https://github.com/RDFLib/pyLODE/blob/master/pylode/examples/agrif.md\" rel=\"nofollow\">rendered online by GitHub</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>agrif.skos.html</strong> - HTMl output, \u201cskosp\u201d profile</dt>\n<dd><ul>\n<li>see this <a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.skosp.html\" rel=\"nofollow\">rendered online by GitHack</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>You can build all of the example outputs locally by running <a href=\"pylode/examples/_make_examples.py\" rel=\"nofollow\">pylode/examples/_make_examples.py</a>\nwhich also serves as a good demonstration of calling pyLODE from a Python file.</p>\n<div id=\"ontologies-online-using-pylode\">\n<h4>Ontologies online using pyLODE:</h4>\n<ul>\n<li><dl>\n<dt><a href=\"https://www.finance.gov.au\" rel=\"nofollow\">Australia\u2019s Department of Finance\u2019s</a>\u2019s <strong>AGRIF ontology</strong> - <a href=\"http://linked.data.gov.au/def/agrif\" rel=\"nofollow\">http://linked.data.gov.au/def/agrif</a></dt>\n<dd><ul>\n<li>see the <a href=\"https://github.com/AGLDWG/agrif-ont/blob/master/agrif.md\" rel=\"nofollow\">Markdown version</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><a href=\"http://www.naa.gov.au\" rel=\"nofollow\">National Archives of Australia</a>\u2019s <strong>Commonwealth Records Series ontology</strong> - <a href=\"http://linked.data.gov.au/def/crs\" rel=\"nofollow\">http://linked.data.gov.au/def/crs</a></dt>\n<dd><ul>\n<li>see the <a href=\"https://github.com/RDFLib/pyLODE/blob/master/src/pylode/examples/crs.md\" rel=\"nofollow\">Markdown version</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><a href=\"https://www.csiro.au\" rel=\"nofollow\">CSIRO\u2019s</a>\u2019s <strong>LocI ontology</strong> - <a href=\"http://linked.data.gov.au/def/loci\" rel=\"nofollow\">http://linked.data.gov.au/def/loci</a></li>\n<li><a href=\"https://www.business.qld.gov.au/industries/mining-energy-water/resources/geoscience-information/gsq\" rel=\"nofollow\">Geological Survey of\nQueensland</a>\u2019s\n<strong>Boreholes Profile</strong> - <a href=\"http://linked.data.gov.au/def/borehole\" rel=\"nofollow\">http://linked.data.gov.au/def/borehole</a></li>\n<li><a href=\"http://www.ga.gov.au/\" rel=\"nofollow\">Geoscience Australia</a>\u2019s <strong>Place Names\nProfile</strong> - <a href=\"http://linked.data.gov.au/def/placenames\" rel=\"nofollow\">http://linked.data.gov.au/def/placenames</a></li>\n<li><a href=\"https://www.epimorphics.com/\" rel=\"nofollow\">Epimorphic</a>\u2019s <strong>Registry Ontology</strong>\n- <a href=\"https://epimorphics.com/public/vocabulary/Registry.html\" rel=\"nofollow\">https://epimorphics.com/public/vocabulary/Registry.html</a></li>\n<li><a href=\"http://sweetontology.net\" rel=\"nofollow\">Semantic Web for Earth and Environmental Terminology</a> (SWEET)</li>\n</ul>\n<p>See pairs of RDF &amp; HTML files in the\n<a href=\"pylode/examples/\" rel=\"nofollow\">pylode/examples/</a> directory for other,\npreprocessed examples.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>This tool can be used either as a command line utility (Linux, Mac or Windows, see below) or as a Python module in other Python code. It can also be used via an online API. This repo contains executable files for Mac &amp; Windows (soon Linux!) that you can use without any installation too.</p>\n<p>The most import dependency to get correct when using this as a Python script of a command line program is the package <tt>rdflib</tt> which must be v5.0.0 or greater (see requirements.txt).</p>\n<div id=\"python\">\n<h4>Python</h4>\n<p>Do this to use pyLODE as a Python command line program.</p>\n<p>This tool is available on PyPI, the Python Package Index, at <a href=\"https://pypi.org/project/pyLODE/\" rel=\"nofollow\">https://pypi.org/project/pyLODE/</a> and can be installed for use as a Python module via pip:</p>\n<pre>pip install pylode\n</pre>\n<p>For desktop command line use, just clone this repository and either use <tt>cli.py</tt> as per the command line instructions below or use makedocco.py as a Python script directly.</p>\n</div>\n</div>\n<div id=\"use\">\n<h3>Use</h3>\n<p>pyLODE presents natively as a Python command-line utility,\n<a href=\"pylode/cli.py\" rel=\"nofollow\">pylode/cli.py</a> and there are also a BASH, Windows &amp; Mac OS options available for command line use:</p>\n<ul>\n<li><a href=\"pylode/bin/pylode.sh\" rel=\"nofollow\">pylode/bin/pylode.sh</a> - BASH script</li>\n<li>Linux executable coming soon!</li>\n<li><a href=\"pylode/bin/pylode.app\" rel=\"nofollow\">pylode/bin/pylode.app</a> - MAC OS command line executable script</li>\n<li><a href=\"pylode/bin/pylode.exe\" rel=\"nofollow\">pylode/bin/pylode.exe</a> - Windows command line executable</li>\n</ul>\n<p>Additionally, there is a <a href=\"https://falconframework.org/\" rel=\"nofollow\">Falcon framework</a> local HTTP server option.</p>\n<p>All use the same command line arguments.</p>\n<div id=\"command-line-arguments\">\n<h4>Command line arguments</h4>\n<p>These are the command line arguments to run pyLODE as a BASH or Python script on Linux, Mac etc. or via the Windows executable:</p>\n<ul>\n<li><dl>\n<dt><tt><span class=\"pre\">-i</span></tt> or <tt><span class=\"pre\">--inputfile</span></tt>, <em>required if</em> <tt><span class=\"pre\">-u</span></tt> <em>not used</em></dt>\n<dd><ul>\n<li>The RDF ontology file you wish to generate HTML for Must be in either Turtle, RDF/XML, JSON-LD or N-Triples formats indicated by the file type extensions .rdf, .owl, .ttl, .n3, .nt, .json respectively</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-u</span></tt> or <tt><span class=\"pre\">--url</span></tt>, <em>required if</em> <tt><span class=\"pre\">-i</span></tt> <em>not used</em></dt>\n<dd><ul>\n<li>The RDF ontology you wish to generate HTML for, online. Must be an absolute URL that can be resolved to RDF, preferably via Content Negotiation.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-c</span></tt> or <tt><span class=\"pre\">--css</span></tt>, <em>optional, default \u2018false\u2019</em></dt>\n<dd><ul>\n<li>Whether (true) or not (false) to copy the default CSS file to the output directory.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-o</span></tt> or <tt><span class=\"pre\">--outputfile</span></tt>, <em>optional</em></dt>\n<dd><ul>\n<li>A name you wish to assign to the output file. Will be postfixed with .html or .md. If not specified, the name of the input file or last segment of RDF URI will be used, + .html/.md.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-f</span></tt> or <tt><span class=\"pre\">--outputformat</span></tt>, <em>optional, default \u2018html\u2019</em></dt>\n<dd><ul>\n<li>The output format of the documentation. \u2018html\u2019 or \u2018md\u2019 accepted.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-p</span></tt> or <tt><span class=\"pre\">--profile</span></tt>, <em>optional, default \u2018owl\u2019</em></dt>\n<dd><ul>\n<li>The profile (specification) for ontology documentation used. This has been \u201cowl\u201d (for OWL Ontology) only until the recent introduction of \u201cskos\u201d (according to the <a href=\"https://www.w3.org/TR/skos-reference/\" rel=\"nofollow\">Simple Knowledge Organization System (SKOS)</a>). See <tt><span class=\"pre\">-lp</span></tt> for all profiles supported.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">-lp</span></tt> or <tt><span class=\"pre\">--listprofiles</span></tt>, <em>optional, no arguments</em></dt>\n<dd><ul>\n<li>Lists all the profiles (specifications) for ontology documentation supported by pyLODE</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"example-call\">\n<h4>Example call</h4>\n<p>This call to the BASH script in <a href=\"pylode/bin/\" rel=\"nofollow\">pylode/bin/</a> will\ncreate an HTML document for an ontology called <tt>placenames.html</tt> and\nsave it with a basic CSS file into\n<a href=\"pylode/output_files/\" rel=\"nofollow\">pylode/output_files/</a>:</p>\n<pre>$ ./pylode -i ../example/prof.ttl --css true\n</pre>\n</div>\n<div id=\"online-api\">\n<h4>Online API</h4>\n<p>An online API to access pyLODE is now available in test mode at <a href=\"https://kurrawong.net/pylode-online\" rel=\"nofollow\">https://kurrawong.net/pylode-online</a>.</p>\n</div>\n<div id=\"local-server-falcon\">\n<h4>Local server - Falcon</h4>\n<p>You can run pyLODE using your own, local, HTTP server like this:\n<tt>`\ngunicorn server:api\n`</tt>\nThen, in another terminal:\n<tt>`\ncurl <span class=\"pre\">localhost:8000/lode?url=http://sweetontology.net/sweetAll.ttl</span>\n`</tt></p>\n</div>\n<div id=\"windows-create-exe-from-source\">\n<h4>Windows - create EXE from source</h4>\n<p><a href=\"https://www.pyinstaller.org/\" rel=\"nofollow\">Pyinstaller</a> can be\n<a href=\"https://pyinstaller.readthedocs.io/en/stable/usage.html\" rel=\"nofollow\">used</a> to create an\nexecutable for Windows that has the same characteristics as the Linux/Mac\nCLI program.\nThe necessary <tt>.spec</tt> file is already included in <tt><span class=\"pre\">pylode-cli.spec</span></tt>.\nThe <tt><span class=\"pre\">pylode-cli.spec</span></tt> PyInstaller spec file creates a <tt>.exe</tt> for the\npyLODE Command Line utility. See above for the pyLODE command line util usage instructions.</p>\n<p>See <a href=\"https://pyinstaller.readthedocs.io/en/stable/installation.html#installing-in-windows\" rel=\"nofollow\">the PyInstaller installation guide</a>\nfor info on how to install PyInstaller for Windows.</p>\n<p>Once you have pyinstaller, use pyinstaller to generate the <tt>pyLODE.exe</tt> CLI file like so:</p>\n<pre>$ cd src/pylode\n$ pyinstaller pylode-cli.spec\n</pre>\n<p>This will output <tt>pylode.exe</tt> in the <tt>dist</tt> directory in <tt>src/pylode</tt>.</p>\n<p>You can now run the pyLODE Command Line utility via <tt>pylode.exe</tt>.\nSee above for the pyLODE command line util usage instructions.</p>\n</div>\n<div id=\"mac-os-create-app-from-source\">\n<h4>Mac OS - create APP from source</h4>\n<p>As per instructions for PyInstaller use on Windows, just do it on a Mac!</p>\n</div>\n</div>\n<div id=\"what-pylode-understands\">\n<h3>What pyLODE understands</h3>\n<div id=\"annotations\">\n<h4>Annotations</h4>\n<p>pyLODE understands the following ontology constructs:</p>\n<ul>\n<li><dl>\n<dt><strong>ontology metadata</strong></dt>\n<dd><ul>\n<li><em>imports</em> - <tt>owl:imports</tt></li>\n<li><em>title</em> - <tt>rdfs:label</tt> or <tt>skos:prefLabel</tt> or <tt>dct:title</tt> or <tt>dc:title</tt></li>\n<li><dl>\n<dt><em>description</em> - <tt>rdfs:comment</tt> or <tt>skos:definition</tt> or <tt>dct:description</tt> or <tt>dc:description</tt></dt>\n<dd><ul>\n<li>Markdown is supported</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><em>historyNote</em> - <tt>skos:historyNote</tt></dt>\n<dd><ul>\n<li>Markdown is supported</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><em>version URI</em> - <tt>owl:versionIRI</tt> as a URI</li>\n<li><dl>\n<dt><em>version info</em> - <tt>owl:versionInfo</tt> as a string</dt>\n<dd><ul>\n<li><em>preferred namespace prefix</em> - <tt>vann:preferredNamespacePrefix</tt> as a token</li>\n<li><em>preferred namespace URI</em> - <tt>vann:preferredNamespaceUri</tt> as a URI</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>agents</strong>: <em>publishers</em>, <em>creators</em>, <em>contributors</em></dt>\n<dd><ul>\n<li>see <strong>Agent Formatting</strong> below for details</li>\n<li>see the <a href=\"pylode/examples/\" rel=\"nofollow\">pylode/examples/</a> directory for examples!</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><strong>dates</strong>: <em>created</em>, <em>modified</em>, <em>issued</em> - <tt>dct:created</tt> etc., all as <tt>xsd:date</tt> or <tt>xsd:dateTime</tt> datatype properties</li>\n<li><strong>rights</strong>: <em>license</em> - <tt>dct:license</tt> as a URI &amp; <em>rights</em> - <tt>dct:rights</tt> as a string</li>\n<li><em>code respository</em> - <tt>schema:codeRepository</tt> as a URI</li>\n<li><em>source</em> - <tt>dcterms:source</tt> as a URI or text</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>classes</strong></dt>\n<dd><ul>\n<li>per <tt>rdfs:Class</tt> or <tt>owl:Class</tt></li>\n<li><em>title</em> - <tt>rdfs:label</tt> or <tt>skos:prefLabel</tt> or <tt>dct:title</tt></li>\n<li><em>description</em> - <tt>rdf:comment</tt> or <tt>skos:definition</tt> or <tt>dct:description</tt> as a string or using <a href=\"https://daringfireball.net/projects/markdown/\" rel=\"nofollow\">Markdown</a> or HTML</li>\n<li><em>usage note</em> - a <tt>skos:scopeNote</tt> string</li>\n<li><em>example</em> - a <tt>skos:example</tt> string containing RDF</li>\n<li><em>super classes</em> - by declaring a class to be <tt>owl:subClassOf</tt> something</li>\n<li><em>sub classes</em> - pyLODE will work these out itself</li>\n<li><em>restrictions</em> - by declaring a class to be <tt>owl:subClassOf</tt> of an <tt>owl:Restriction</tt> with any of the normal cardinality or property existence etc. restrictions</li>\n<li><em>in domain/range of</em> - pyLODE will auto-calculate these</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>properties</strong></dt>\n<dd><ul>\n<li>per <tt>owl:ObjectProperty</tt>, <tt>owl:DatatypeProperty</tt> or <tt>owl:AnnotationProperty</tt></li>\n<li><em>title</em> - <tt>rdfs:label</tt> or <tt>skos:prefLabel</tt> or <tt>dct:title</tt></li>\n<li><em>description</em> - <tt>rdf:comment</tt> or <tt>skos:definition</tt> or <tt>dct:description</tt></li>\n<li><em>usage note</em> - a <tt>skos:scopeNote</tt> string</li>\n<li><em>example</em> - a <tt>skos:example</tt> string containing RDF</li>\n<li><em>super properties</em> - by declaring a class to be <tt>owl:subPropertyOf</tt> something</li>\n<li><em>sub properties</em> - pyLODE will work these out itself</li>\n<li><em>equivalent properties</em> - by declaring a class to be <tt>owl:equivalentProperty</tt> something</li>\n<li><em>inverse of</em> - by declaring a class to be <tt>owl:inverseOf</tt> something</li>\n<li><em>domains</em> - <tt>rdfs:domain</tt> or <tt>schema:domainIncludes</tt></li>\n<li><em>ranges</em> - <tt>rdfs:range</tt> or <tt>schema:rangeIncludes</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>namespaces</strong></dt>\n<dd><ul>\n<li>pyLODE will honour any namespace prefixes you set and look up others in <a href=\"http://prefix.cc/\" rel=\"nofollow\">http://prefix.cc</a></li>\n<li>it will either read your ontology\u2019s default/base URI in annotations or guess it using a number of methods</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>named individuals</strong></dt>\n<dd><ul>\n<li><em>coming!</em></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<div id=\"agent-formatting\">\n<h5>Agent Formatting</h5>\n<ul>\n<li>Use either the DC versions of properties (<tt>dc:publisher</tt> etc.) or the DCT versions (<tt>dct:publisher</tt> etc.)</li>\n<li>if using the DC form, the range should just be a string, e.g. <tt>dc:publisher \"Geoscience Australia\" .</tt> or <tt>dc:creator \"Nicholas J. Car\" .</tt></li>\n<li><dl>\n<dt>if using the DCT form, the range should be a <tt>foaf:Agent</tt> or <tt>schema:Person</tt> Blank Node or URI (if details are given elsewhere in the ontology) with the following properties:</dt>\n<dd><ul>\n<li><tt>foaf:name</tt>/<tt>sdo:name</tt></li>\n<li><tt>foaf:mbox</tt>/<tt>sdo:email</tt></li>\n<li><tt>foaf:homepage</tt>/<tt>schema:identifier</tt> / <tt>sdo:url</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Affiliation of people to organisation can be made if schem.aorg is used using <tt>sdo:member</tt> or <tt>sdo:affiliation</tt> (latter preferred)</dt>\n<dd><ul>\n<li>e.g.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<pre>&lt;ontology_x&gt;\n    dct:creator [\n        sdo:name \"Nicholas J. Car\" ;\n        sdo:identifier &lt;http://orcid.org/0000-0002-8742-7730&gt; ;\n        schema:email &lt;mailto:nicholas.car@surroundaustralia.com&gt; ;\n        sdo:affiliation [\n            sdo:name \"SURROUND Australia Pty Ltd\" ;\n            sdo:url &lt;https://surroundaustralia.com&gt; ;\n        ] ;\n    ] ;\n</pre>\n</div>\n<div id=\"additions\">\n<h5>Additions</h5>\n<p>To help pyLODE understand more annotations, see <strong>Suggestions</strong> below.</p>\n</div>\n<div id=\"schema-org\">\n<h5>schema.org</h5>\n<p>When an HTML document is generated, i.e. not Markdown or other format,\n<a href=\"https://schema.org\" rel=\"nofollow\">schema.org</a> metadata is added to the HTML\nheader in the form of properties of a <tt>DigitalDocument</tt> subject.\nThe schema.org properties catered for are:</p>\n<ul>\n<li><tt>name</tt></li>\n<li><tt>dateCreated</tt></li>\n<li><tt>dateModified</tt></li>\n<li><tt>description</tt></li>\n<li><tt>license</tt></li>\n<li><tt>copyrightYear</tt></li>\n<li><tt>repository</tt></li>\n</ul>\n<p>Not yet handled, but will be soon, are:</p>\n<ul>\n<li><tt>publisher</tt></li>\n<li><tt>creator</tt></li>\n<li><tt>copyrightHolder</tt></li>\n</ul>\n<p>See <a href=\"SNIPPETS.rst\" rel=\"nofollow\">SNIPPETS</a> for detailed examples on what pyLODE knows about Agents Provenance etc.</p>\n<p>Please suggest any more required schema.org annotations!</p>\n</div>\n</div>\n<div id=\"styling\">\n<h4>Styling</h4>\n<p>This tool generates HTML that is shamelessly similar to LODE\u2019s styling.\nThat\u2019s because we want things to look familiar and LODE\u2019s outputs look\ngreat. The Markdown\u2019s pretty vanilla.</p>\n<p>Also, pyLODE generates and uses only static HTML + CSS, no JavaScript,\nlive loading Google Fonts etc. This is to ensure that all you need for\nnice display is within a couple of static, easy to use and maintain,\nfiles. Prevents documentation breaking over time.</p>\n<p>Feel free to extend your styling with your own CSS.</p>\n</div>\n</div>\n<div id=\"profiles\">\n<h3>Profiles</h3>\n<p>pyLODE can document ontologies and other taxonomies according to different <em>profiles</em> which are specifications. The\nbasic, default, profile is pyLODE\u2019s OWL Profile, which means documentation is generated according to OWL properties\nand classes and the various annotation properties listed here in the <a href=\"#what-pylode-understands\" rel=\"nofollow\">What pyLODE understands</a> section.</p>\n<p>pyLODE can tell you what profiles it supports: just run <tt>~$ pylode <span class=\"pre\">-lp</span></tt> (\u201clist profiles\u201d) or, if calling from Python:</p>\n<pre>m = MakeDocco(input_data_file=\"examples/data-access-rights.ttl\", profile=\"skos\")\nprint(m.list_profiles())\n</pre>\n<div id=\"supported-profiles\">\n<h4>Supported Profiles</h4>\n<p>Currently pyLODE supports its OWL profile, as described above, and a profile of SKOS. For full details of what the\nprofiles include, see the profiles\u2019 definitions at:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th><strong>Token</strong></th>\n<th><strong>URI</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr><td>owlp</td>\n<td><a href=\"https://w3id.org/profile/pylode-owl\" rel=\"nofollow\">https://w3id.org/profile/pylode-owl</a></td>\n</tr>\n<tr><td>skosp</td>\n<td><a href=\"https://w3id.org/profile/pylode-skos\" rel=\"nofollow\">https://w3id.org/profile/pylode-skos</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"transformation-by-profile\">\n<h4>Transformation by Profile</h4>\n<p>You can, of course, document an OWL ontology using the <em>owlp</em> profile or a SKOS taxonomy using the <em>skosp</em> profile\nhowever, you can also document an OWL ontology using the <em>skosp</em> profile! This is because SKOS is conceptually a subset\nof OWL - whatever you can express in SKOS you can express in OWL.</p>\n<p>pyLODE performs an OWL &gt; SKOS transformation on OWL ontologies to produce a taxonomy document. The following\nconversions are made:</p>\n<ul>\n<li><dl>\n<dt><tt>owl:Ontology</tt> &gt; <tt>skos:ConceptScheme</tt></dt>\n<dd><ul>\n<li>and all the ontology metadata is used with the ConceptScheme</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>owl:Class</tt> &gt; <tt>skos:Concept</tt></dt>\n<dd><ul>\n<li>and other class annotation properties used with Concept</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>owl:subClassOf</tt> &gt; <tt>skos:broader</tt></dt>\n<dd><ul>\n<li>and the inverses, <tt>skos:narrower</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>To see the full list of transformations, see the function <tt>_expand_graph_for_skos()</tt> in <em>makedocco.py</em>.</p>\n<p>Examples of a small taxonomies documented using the <em>skosp</em> profile are:</p>\n<ul>\n<li><a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/data-access-rights.skos.html\" rel=\"nofollow\">Data Access Rights</a></li>\n<li><a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/iso19115-1-RoleCodes.skos.html\" rel=\"nofollow\">ISO 19115-1\u2019s RoleCodes</a></li>\n</ul>\n<p>An example of a large one:</p>\n<ul>\n<li><a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/earth-science-data-category.skos.html\" rel=\"nofollow\">Earth Science Data Category</a></li>\n</ul>\n<p>An example of a <em>skosp</em>-documented OWL ontology and the corresponding <em>owlp</em> original is AGRIF:</p>\n<ul>\n<li><a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.skos.html\" rel=\"nofollow\">AGRIF as skosp</a></li>\n<li><a href=\"https://raw.githack.com/RDFLib/pyLODE/master/pylode/examples/agrif.html\" rel=\"nofollow\">AGRIF as owlp</a></li>\n</ul>\n</div>\n</div>\n<div id=\"differences-from-lode\">\n<h3>Differences from LODE</h3>\n<ul>\n<li>command line access<ul>\n<li>you can use this on your own desktop so you don\u2019t need me to\nmaintain a live service for use</li>\n</ul>\n</li>\n<li>use of more modern &amp; simpler HTML</li>\n<li>catering for a wider range of ontology options such as:<ul>\n<li>schema.org <tt>domainIncludes</tt> &amp; <tt>rangeIncludes</tt> for properties</li>\n</ul>\n</li>\n<li>better Agent linking<ul>\n<li><tt>foaf:Agent</tt> or <tt>schema:Person</tt> objects for creators,\ncontributors &amp; publishers</li>\n<li>you can still use simple string peoperties like\n<tt>dc:contributor \"Nicholas J. Car\"</tt> too if you really must!</li>\n</ul>\n</li>\n</ul>\n<pre>&lt;ontology_x&gt;\n    dct:creator [\n        sdo:name \"Nicholas J. Car\" ;\n        sdo:identifier &lt;http://orcid.org/0000-0002-8742-7730&gt; ;\n    ] ;\n</pre>\n<ul>\n<li>smarter CURIES<ul>\n<li>pyLODE caches and looks up well-known prefixes to make more/better\nCURIES</li>\n<li>it tries to be smart with CURIE presentation by CURIE-ising all\nURIs it finds, rather than printing them</li>\n</ul>\n</li>\n<li><strong>active development</strong><ul>\n<li>this software is in use and will be improved for the foreseeable\nfuture so we will cater for more and more things</li>\n<li>recent ontology documentation initiatives such as the <a href=\"https://github.com/sifrproject/MOD-Ontology\" rel=\"nofollow\">MOD\nOntology</a> will be\nhandled, if requested</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"releases-roadmap\">\n<h3>Releases Roadmap</h3>\n<p>pyLODE is under continual and constant development. The current developers have a roadmap for enhancements in mind,\nwhich is given here, however, since this is an open source project, new developers may join the pyLODE dev community\nand change/add development priorities.</p>\n<p>The current release, as of April 2020, is 2.0.</p>\n<table>\n<caption><strong>pyLODE Releas Schedule</strong></caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Version</th>\n<th>Date</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>3.0</td>\n<td><em>June 2020</em></td>\n<td>Will include pre-testing inputs with SHACL</td>\n</tr>\n<tr><td>2.0</td>\n<td>18 Apr 2020</td>\n<td>Includes multiple profiles - OWP &amp; SKOSP</td>\n</tr>\n<tr><td>1.0</td>\n<td>15 Dec 2019</td>\n<td>Initial working release</td>\n</tr>\n</tbody>\n</table>\n<div id=\"release-notes\">\n<h4>Release notes</h4>\n</div>\n<div id=\"id1\">\n<h4>3.0</h4>\n<p>Expected to handle</p>\n<ul>\n<li><dl>\n<dt>pre-documentation graph shape testing using SHACL</dt>\n<dd><ul>\n<li>you will be able to see what pyLODE-recommended annotation and design patterns your inputs do/don\u2019t handle</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>\u201cmodp\u201d, a documentation profile based on the <a href=\"https://github.com/sifrproject/MOD-Ontology\" rel=\"nofollow\">MOD Ontology</a></li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>2.0</h4>\n<ul>\n<li>handles Named Individuals in OWL ontologies</li>\n<li>implements \u201cowlp\u201d &amp; \u201cskosp\u201d documentation profiles for OWL, SKOS and OWL-as-SKOS results</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>1.0</h4>\n<p>Initial pyLODE release. Generated HTML documentation for OWL ontologies, missed quite a few expected ontology elements,\nsuch as Named Individuals.</p>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This code is licensed using the GPL v3 licence. See the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE\nfile</a> for the deed. Note <em>Citation</em> below though for\nattribution.</p>\n</div>\n<div id=\"citation\">\n<h3>Citation</h3>\n<p>If you use pyLODE, please leave the pyLODE logo with a hyperlink back\nhere in the top left of published HTML pages.</p>\n</div>\n<div id=\"collaboration\">\n<h3>Collaboration</h3>\n<p>The maintainers welcome any collaboration.</p>\n<p>If you have suggestions, please email the contacts below or leave Issues\nin this repository\u2019s <a href=\"https://github.com/rdflib/pyLODE/issues\" rel=\"nofollow\">Issue tracker</a>.</p>\n<p>But the very best thing you could do is create a Pull Request for us to\naction!</p>\n</div>\n<div id=\"contacts\">\n<h3>Contacts</h3>\n<div>\n<div><em>Author</em>:</div>\n<div><strong>Nicholas Car</strong></div>\n<div><em>Data System Architect</em></div>\n<div><a href=\"https://surroundaustralia.com\" rel=\"nofollow\">SURROUND Australia Pty Ltd</a></div>\n<div><a href=\"mailto:nicholas.car%40surroundaustralia.com\">nicholas<span>.</span>car<span>@</span>surroundaustralia<span>.</span>com</a></div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7064251, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "6fb63a91b6208c9ec91d5eb2d8a27296", "sha256": "e9f57382d3e34b89f29fde2a42ca749e2b714590ab1b117bc555d812a1dd0bd7"}, "downloads": -1, "filename": "pyLODE-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6fb63a91b6208c9ec91d5eb2d8a27296", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58681, "upload_time": "2019-07-19T10:36:05", "upload_time_iso_8601": "2019-07-19T10:36:05.484167Z", "url": "https://files.pythonhosted.org/packages/69/a6/34cddfbd4629477b73d078d69536e6237495bb1f522ca726615db93f75ba/pyLODE-0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "066893cb2adfaea2a18b5133a6324428", "sha256": "54c3f546a917a60763c09b74fe88c9ceb397d7347c9f741f9617c418889eb14b"}, "downloads": -1, "filename": "pyLODE-0.6.tar.gz", "has_sig": false, "md5_digest": "066893cb2adfaea2a18b5133a6324428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46415, "upload_time": "2019-07-19T10:36:09", "upload_time_iso_8601": "2019-07-19T10:36:09.383545Z", "url": "https://files.pythonhosted.org/packages/5f/e4/1a18b1bf3c45b0e617a0b192e9ee9932352867b5ee3d094d12977d5ecf28/pyLODE-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "1dc66440bdc209af5afdf22373814092", "sha256": "b4ebb8d4c98b91870fa7d502524d4484bcc0123506109415d765eef11cc2fb74"}, "downloads": -1, "filename": "pyLODE-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1dc66440bdc209af5afdf22373814092", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58679, "upload_time": "2019-07-22T12:05:24", "upload_time_iso_8601": "2019-07-22T12:05:24.502050Z", "url": "https://files.pythonhosted.org/packages/f4/87/b799983c441d2c377468d15d01d4735e287f1db134500f649d84de7f10ce/pyLODE-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1fedef77d62073f69f665c5d296b514", "sha256": "ae4cdbd54e152e6ba48ba3f119857972eaf3ed0ee3ad3a0c5b688043b52cdaf6"}, "downloads": -1, "filename": "pyLODE-0.7.tar.gz", "has_sig": false, "md5_digest": "a1fedef77d62073f69f665c5d296b514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46419, "upload_time": "2019-07-22T12:05:26", "upload_time_iso_8601": "2019-07-22T12:05:26.936407Z", "url": "https://files.pythonhosted.org/packages/bf/b2/7d7747a6aa4b59c3d6b15071f2c89f86bda2e28b832d6d715623a55051a6/pyLODE-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "53ddcb0e859e22f590f50d22af156d62", "sha256": "4f70916a9ecea1e6ec527920c91d9176d1788c14008ce059d95877065ace038d"}, "downloads": -1, "filename": "pyLODE-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "53ddcb0e859e22f590f50d22af156d62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58675, "upload_time": "2019-07-22T22:35:49", "upload_time_iso_8601": "2019-07-22T22:35:49.982530Z", "url": "https://files.pythonhosted.org/packages/35/9c/f93b95f459f32859b3d757ae1d098f39f7f7a7ae5489c60cd7f98b67a5c9/pyLODE-0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a41786c5569e4cf0a2c59c297dcdf1fc", "sha256": "f009b87fdde2da75e09c11a8443184dcf60d0b32d385011e67ad21d91a3a54fc"}, "downloads": -1, "filename": "pyLODE-0.8.tar.gz", "has_sig": false, "md5_digest": "a41786c5569e4cf0a2c59c297dcdf1fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49504, "upload_time": "2019-07-22T22:35:52", "upload_time_iso_8601": "2019-07-22T22:35:52.296717Z", "url": "https://files.pythonhosted.org/packages/7a/1b/15a387543b3c386b150d044177b9b15c9788e16f5e54fa4222744d952ae3/pyLODE-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "955c70d66b8bb543b31f78895da7d1c9", "sha256": "582dbea92a0c3b7b21030aab0599037e5b05f0c8b7e90ade916b7a5ce458abcb"}, "downloads": -1, "filename": "pyLODE-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "955c70d66b8bb543b31f78895da7d1c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63035, "upload_time": "2019-07-22T22:57:20", "upload_time_iso_8601": "2019-07-22T22:57:20.449002Z", "url": "https://files.pythonhosted.org/packages/8a/83/cc98aa0116669b5a8dd9aff0eb57ab38fffe8e0fd8aa1cb6e21e6f891641/pyLODE-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f48224adb045f42ae5ca51b614aeb62e", "sha256": "a07197f7c3f8b5ad30f7af8407c94b18fdd9fdf684ba882826a0f6fb605f2b82"}, "downloads": -1, "filename": "pyLODE-0.9.tar.gz", "has_sig": false, "md5_digest": "f48224adb045f42ae5ca51b614aeb62e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48393, "upload_time": "2019-07-22T22:57:23", "upload_time_iso_8601": "2019-07-22T22:57:23.262971Z", "url": "https://files.pythonhosted.org/packages/68/c7/98caef2ceb6a021a2b12615062ea12f48b6210370d62d83b6849047694bd/pyLODE-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "3d076447b9fb07815074e9bf7e584013", "sha256": "302a915653b4b58839899caf9ffeb8f64f09f6043f23d740a53a19b317226c3b"}, "downloads": -1, "filename": "pyLODE-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3d076447b9fb07815074e9bf7e584013", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63213, "upload_time": "2019-07-23T03:30:11", "upload_time_iso_8601": "2019-07-23T03:30:11.312139Z", "url": "https://files.pythonhosted.org/packages/9d/90/89edf224a90d179c62427bc1f87b64ba8297e7ffc35f68652c222250bd78/pyLODE-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1e5b59f0fc40d8ef3191a68e69801cb", "sha256": "b76229dfedc9db9edda7feea01297535195e5519f15d6dc693059e8a017bf509"}, "downloads": -1, "filename": "pyLODE-1.0.tar.gz", "has_sig": false, "md5_digest": "b1e5b59f0fc40d8ef3191a68e69801cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48612, "upload_time": "2019-07-23T03:30:13", "upload_time_iso_8601": "2019-07-23T03:30:13.820460Z", "url": "https://files.pythonhosted.org/packages/73/1f/3c4f2a4dcbc4f461d871ce742e1301acb10c27f62b94f305086fa14fcfee/pyLODE-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a6d32690b4400019ad475af98361ba5b", "sha256": "8d9384bd237994157c39dfaec02f41ce51ff2c0011cd0e3eeae1e268bdb4d3ae"}, "downloads": -1, "filename": "pyLODE-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a6d32690b4400019ad475af98361ba5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63906, "upload_time": "2019-08-04T06:34:18", "upload_time_iso_8601": "2019-08-04T06:34:18.801382Z", "url": "https://files.pythonhosted.org/packages/cc/23/860be5bb5d7c2eb53f3cc6f7b344f48460f590852d8c956a6486901897ea/pyLODE-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e928e7370bcc7a11afd1b18f01ab346d", "sha256": "a79b3238445968cd0c10f1123be8d4d0a78ff2d4484d5df688fb89cdb1150bc8"}, "downloads": -1, "filename": "pyLODE-1.1.tar.gz", "has_sig": false, "md5_digest": "e928e7370bcc7a11afd1b18f01ab346d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49202, "upload_time": "2019-08-04T06:34:20", "upload_time_iso_8601": "2019-08-04T06:34:20.976049Z", "url": "https://files.pythonhosted.org/packages/47/48/000812e12fa03bbeda63004dfe79fd97a7da7ae6d3ee26d48193c7b86ba3/pyLODE-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f68f21738d84b6928e1a710ff117ee88", "sha256": "86465190d647162f04ba61195f4ac7d87d2a0927a6b0c7765479f2490dcea692"}, "downloads": -1, "filename": "pyLODE-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f68f21738d84b6928e1a710ff117ee88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64311, "upload_time": "2019-10-21T12:26:36", "upload_time_iso_8601": "2019-10-21T12:26:36.369891Z", "url": "https://files.pythonhosted.org/packages/5d/96/9426b8c6bd3ea950e276cf73f609783cbf57af042a37080d72e252f13827/pyLODE-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d8957c55aabbd43b13d63974a791017", "sha256": "41b2362d7dc32af425172833061e3cf41d2741f03d5cb4f5b8f111e5ef76b2c6"}, "downloads": -1, "filename": "pyLODE-1.2.tar.gz", "has_sig": false, "md5_digest": "6d8957c55aabbd43b13d63974a791017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49649, "upload_time": "2019-10-21T12:26:40", "upload_time_iso_8601": "2019-10-21T12:26:40.271614Z", "url": "https://files.pythonhosted.org/packages/c8/51/afdd4d96dec6a91cf6f830a8f83d11cc6f7225eeb288b6b2c21c3f28d814/pyLODE-1.2.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "0797f57e5da21ef8262186ce29be45fb", "sha256": "055a56eac8106acb55168b96bcb6f320a5100d4227166cc53cab437b4ed2d0ef"}, "downloads": -1, "filename": "pyLODE-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0797f57e5da21ef8262186ce29be45fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 65440, "upload_time": "2019-11-04T04:20:06", "upload_time_iso_8601": "2019-11-04T04:20:06.009766Z", "url": "https://files.pythonhosted.org/packages/cd/da/76a1f23dce6b9269551b81f0914827ee15395fc836bec19749e9a0d72ad1/pyLODE-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5fb700441f4722cceefe5e05bedb375", "sha256": "8580dc159fdc9d8f6719739ca8d52c8c7012889d189da832f5912a4793fce7d6"}, "downloads": -1, "filename": "pyLODE-1.4.tar.gz", "has_sig": false, "md5_digest": "b5fb700441f4722cceefe5e05bedb375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50812, "upload_time": "2019-11-04T04:20:09", "upload_time_iso_8601": "2019-11-04T04:20:09.200333Z", "url": "https://files.pythonhosted.org/packages/d9/d2/ad7345d4e9d5a4652a0efdf5d6a7c0a3af3f1ed282304d388b4492c054bb/pyLODE-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "e967b9ceaf3b785df7ed8ae8fb00a4ee", "sha256": "0190d4d2c075dd9511ceb6e182ecf0d3121b12806c3009e03a8c26c50091760d"}, "downloads": -1, "filename": "pyLODE-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e967b9ceaf3b785df7ed8ae8fb00a4ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66168, "upload_time": "2019-12-05T00:51:57", "upload_time_iso_8601": "2019-12-05T00:51:57.852953Z", "url": "https://files.pythonhosted.org/packages/71/82/1a8520c840746087b70ae0242b784d08e9523e7dd740062fe2f22e44788f/pyLODE-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09bf1aaf06de374ce8632162a8c2cb1a", "sha256": "9aa30242299db334832e677131ff5f438f7f60dec3775dc4d73094dae1b5b54c"}, "downloads": -1, "filename": "pyLODE-1.5.tar.gz", "has_sig": false, "md5_digest": "09bf1aaf06de374ce8632162a8c2cb1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51624, "upload_time": "2019-12-05T00:52:03", "upload_time_iso_8601": "2019-12-05T00:52:03.073573Z", "url": "https://files.pythonhosted.org/packages/53/7f/518d0620e60827d6b7ecf3e6a86beae249815fa229fc9399f3e1c66a3afd/pyLODE-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "d7d64841a48cad54d58af02bf324fbf9", "sha256": "a0158fbf4edfa99882cd8bdab3cbeec172c5f7326d7824093545bd5aa803e824"}, "downloads": -1, "filename": "pyLODE-1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d7d64841a48cad54d58af02bf324fbf9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66319, "upload_time": "2019-12-07T02:05:27", "upload_time_iso_8601": "2019-12-07T02:05:27.128174Z", "url": "https://files.pythonhosted.org/packages/f1/5c/d7e5483ddbaa6c1692085749d1df918621655b4bfe1cfc6e169692b785b4/pyLODE-1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c7e5ae60041205e2215ed2780a77ce7", "sha256": "f4dcaea0612516b2f6c93f746690210a7ef71ac9c19c6682735f4b93e5dca09f"}, "downloads": -1, "filename": "pyLODE-1.6.tar.gz", "has_sig": false, "md5_digest": "7c7e5ae60041205e2215ed2780a77ce7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53299, "upload_time": "2019-12-07T02:05:30", "upload_time_iso_8601": "2019-12-07T02:05:30.700367Z", "url": "https://files.pythonhosted.org/packages/b0/45/ff6d873597d7dc696244058bda3d92c703dd35ac5f979dffeb6347ad4419/pyLODE-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "951149e665a202eba79cf4f994076007", "sha256": "9e7de471fa2d94a434cb1f063145f57720d978aa197fa95367e54f4dab91b2ed"}, "downloads": -1, "filename": "pyLODE-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "951149e665a202eba79cf4f994076007", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66778, "upload_time": "2020-02-02T05:08:02", "upload_time_iso_8601": "2020-02-02T05:08:02.585660Z", "url": "https://files.pythonhosted.org/packages/ea/88/b1ee292a63b096c419394b1966748feb061f850366f4372b224689050971/pyLODE-1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "653f9e18976f0991485334f3f8b086a5", "sha256": "f19f1c69de682d51bb8438939be44722389ded84a9a769b95c3bbd273b75d9db"}, "downloads": -1, "filename": "pyLODE-1.7.tar.gz", "has_sig": false, "md5_digest": "653f9e18976f0991485334f3f8b086a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53809, "upload_time": "2020-02-02T05:08:05", "upload_time_iso_8601": "2020-02-02T05:08:05.914330Z", "url": "https://files.pythonhosted.org/packages/ee/c8/ad7bc32e497a882d8279fc6289bf9ad31d3e1e33145e1e1ce09c68df311f/pyLODE-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "6455151de6dc2674c8be593ccd1f29eb", "sha256": "8724fc7a4581ed7f8080a381883807a0311654951c0f01d6c4a600e06d36efbc"}, "downloads": -1, "filename": "pyLODE-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6455151de6dc2674c8be593ccd1f29eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 67370, "upload_time": "2020-03-14T12:21:29", "upload_time_iso_8601": "2020-03-14T12:21:29.478665Z", "url": "https://files.pythonhosted.org/packages/91/45/6658632efa2e1d8ef8ad03f64e465c7975854e18d508e04a8ab1d85d1e49/pyLODE-1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aafa065da2a1b0797fcaf478d2cab399", "sha256": "4a8df1bac52b9ba63fbc8c25245a7913e008059e9037682e9df411281fdf3d93"}, "downloads": -1, "filename": "pyLODE-1.8.tar.gz", "has_sig": false, "md5_digest": "aafa065da2a1b0797fcaf478d2cab399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54589, "upload_time": "2020-03-14T12:21:33", "upload_time_iso_8601": "2020-03-14T12:21:33.847586Z", "url": "https://files.pythonhosted.org/packages/5e/c4/d0851dcb39d618a1401d91b3266de13c1503594e8f7b23ecac3d0b00e335/pyLODE-1.8.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "df269b07fc164f08c754f4cb62aee6b9", "sha256": "40a2e59c2b50d0b4f45ecbd86b6ddc2549729db040dbf55ff6e0055e97d8b2ed"}, "downloads": -1, "filename": "pyLODE-1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "df269b07fc164f08c754f4cb62aee6b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 67855, "upload_time": "2020-03-18T12:02:20", "upload_time_iso_8601": "2020-03-18T12:02:20.773395Z", "url": "https://files.pythonhosted.org/packages/15/f1/32dc4d7fa01cbc1e25d01be3690909fa7cf66c240b5dc80b67138657b916/pyLODE-1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c61124045858c7885cd0490655e3c62", "sha256": "153d6800668b450f64f631711e1beb01c59c08f164db74281c7cfeb4481de461"}, "downloads": -1, "filename": "pyLODE-1.9.tar.gz", "has_sig": false, "md5_digest": "1c61124045858c7885cd0490655e3c62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55487, "upload_time": "2020-03-18T12:02:24", "upload_time_iso_8601": "2020-03-18T12:02:24.952248Z", "url": "https://files.pythonhosted.org/packages/df/6e/04ff4454960d8940188e1f12f1fef888e219e693d4102bc28e1cb4b653dd/pyLODE-1.9.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "a999661ce7382e413063027eb5978a19", "sha256": "a54f4deaa7ce43b4e561abad870f1fa5882c240ae5a83c628a6fa5e57624b9fe"}, "downloads": -1, "filename": "pyLODE-2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a999661ce7382e413063027eb5978a19", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 93932, "upload_time": "2020-04-20T00:26:31", "upload_time_iso_8601": "2020-04-20T00:26:31.503121Z", "url": "https://files.pythonhosted.org/packages/56/37/148f448a4b02bd78e02c157eb078a97b32d82c3238e998ae3a11201ca6cf/pyLODE-2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d77d96ead41082c4d802d72508d5c8", "sha256": "4b22771b31a5d47dcd96dfafc07f85cbd9110c7e60f0dd0ba604144b7f241322"}, "downloads": -1, "filename": "pyLODE-2.1.tar.gz", "has_sig": false, "md5_digest": "28d77d96ead41082c4d802d72508d5c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71764, "upload_time": "2020-04-20T00:26:34", "upload_time_iso_8601": "2020-04-20T00:26:34.361896Z", "url": "https://files.pythonhosted.org/packages/b9/f0/5d9ac15d55222d52526ebd374d872d1e15326bc2b2a64f7521d45ebbd1a8/pyLODE-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "939bd384fa909ecfe3da880657b8e810", "sha256": "27202707575a07c8c2c63ec477a1a53397126ee16b3c7cbebb7b5db95b9fef41"}, "downloads": -1, "filename": "pyLODE-2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "939bd384fa909ecfe3da880657b8e810", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 95201, "upload_time": "2020-04-20T23:52:29", "upload_time_iso_8601": "2020-04-20T23:52:29.918501Z", "url": "https://files.pythonhosted.org/packages/27/b1/167b63a21d129602c7d00c590067343f93b346b249c9e997f06799d42c3e/pyLODE-2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f70e7b3dae8ce46570f45881b0e5e489", "sha256": "bab44da7e727fe513ff33dd8733cd17d5c69c8cfaa21af8a681e07fff5a0c22c"}, "downloads": -1, "filename": "pyLODE-2.2.tar.gz", "has_sig": false, "md5_digest": "f70e7b3dae8ce46570f45881b0e5e489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72698, "upload_time": "2020-04-20T23:52:33", "upload_time_iso_8601": "2020-04-20T23:52:33.978415Z", "url": "https://files.pythonhosted.org/packages/fc/00/07adc956b8f9e78f47b4a8f5fc36a5eb6910a292ac8eadb1f1dca4a04f73/pyLODE-2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "939bd384fa909ecfe3da880657b8e810", "sha256": "27202707575a07c8c2c63ec477a1a53397126ee16b3c7cbebb7b5db95b9fef41"}, "downloads": -1, "filename": "pyLODE-2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "939bd384fa909ecfe3da880657b8e810", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 95201, "upload_time": "2020-04-20T23:52:29", "upload_time_iso_8601": "2020-04-20T23:52:29.918501Z", "url": "https://files.pythonhosted.org/packages/27/b1/167b63a21d129602c7d00c590067343f93b346b249c9e997f06799d42c3e/pyLODE-2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f70e7b3dae8ce46570f45881b0e5e489", "sha256": "bab44da7e727fe513ff33dd8733cd17d5c69c8cfaa21af8a681e07fff5a0c22c"}, "downloads": -1, "filename": "pyLODE-2.2.tar.gz", "has_sig": false, "md5_digest": "f70e7b3dae8ce46570f45881b0e5e489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72698, "upload_time": "2020-04-20T23:52:33", "upload_time_iso_8601": "2020-04-20T23:52:33.978415Z", "url": "https://files.pythonhosted.org/packages/fc/00/07adc956b8f9e78f47b4a8f5fc36a5eb6910a292ac8eadb1f1dca4a04f73/pyLODE-2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:52 2020"}