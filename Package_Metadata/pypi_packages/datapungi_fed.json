{"info": {"author": "James Otterson", "author_email": "jjotterson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<!--\nTODO: add explanation of the request part of the vintage.\n-->\n\n[![image](https://img.shields.io/pypi/v/datapungi_fed.svg)](https://pypi.org/project/datapungi_fed/) \n[![build Status](https://travis-ci.com/jjotterson/datapungi_fed.svg?branch=master)](https://travis-ci.com/jjotterson/datapungi_fed)\n[![Downloads](https://pepy.tech/badge/datapungi-fed)](https://pepy.tech/project/datapungi-fed)\n[![image](https://img.shields.io/pypi/pyversions/datapungi_fed.svg)](https://pypi.org/project/datapungi_fed/)\n\ninstall code: pip install datapungi_fed \n\n<h1> datapungi_fed  </h1>\n\n  datapungi_fed is a python package that extracts FRED and GeoFRED data from the Federal Reserve (FED) by connecting to its API.  Overall it:\n  - provides a quick access to a FED's time-series data (just two lines of code away to any time-series!)\n  - provides both a cleaned up output (pandas) and a full request output of any FRED or GeoFRED dataset.\n  - provides code snippets that can be used to access the FED API independently of datapungi_fed     \n  - can read a saved API key (as an environment variables (default) or from json/yaml files) to avoid having a copy of it on a script\n  - can run many tests: check if all database access are working, if the data is being cleaned correctly, and if the code snippet returns the correct data. \n\n\n## Sections\n  -  [Short sample runs](#Sample-runs)\n  -  [Short sample runs of all drivers](#Sample-run-of-all-drivers)\n  -  [Description of a full return](#Full-request-result) \n  -  [Setting up datapungi_fed](#Setting-up-datapungi_fed)\n  -  [Testing the package](#Running-Tests) \n\n## Sample runs\n\n### Short runs:\n\nThere are many datasets available in the FED API, and datapungi_fed connects to them all, but it is specially designed to quickly access the FED's time-series data.  After [setting the package up](#Setting-up-datapungi_fed), a time-series symbol (say 'gdp') can be fetched by typing:\n\n```python\nimport datapungi_fed as dpf\n\ndpf('gdp') \n```\n\nIf in doubt, try the print command on an datapungi_fed object to get information on how to proceed.\n\n```python\n'''Getting Help'''\n\nimport datapungi_fed as dpf\n\nprint(dpf)         #suggests to run data = dpf.data()\n\ndata = dpf.data()\nprint(data)        #list the database groups (eg. geo) and short description of each\n\nprint(data.geo)    #list the databases in the groups, their short descriptions and parameters\nprint(data.categories)    \nprint(data.series)        \n```\n\n\n\nAt a top level, FRED has 5 groups of databases and we group the GeoFRED under the same group (\"geo\"). datapungi_fed includes a 6th group (datasetlist). \n\n\nFRED database group   | description\n----------- | -----------\ndataselist                                              | datapungi_fed metadata of all other (FRED and GeoFRED) databases\n[categories](https://fred.stlouisfed.org/categories/)   | Catagories of datasets - 8 top categories (eg, National Accounts, Prices) that break down into subgroups \n[releases ](https://fred.stlouisfed.org/releases/)      | Release groups of data - about 300 (eg, Western Hemisphere Regional Economic Outlook, Penn World Table)\n[series   ](https://fred.stlouisfed.org/)               | About 600,000 time series provided by various sources\n[sources  ](https://fred.stlouisfed.org/sources/)       | List of data sources - about 90 data providers (eg, IMF and Bank of Mexico)\n[tags     ](https://fred.stlouisfed.org/tags/)          | Tags applied to time series (eg, location, data source, frequency) - about 5,000 tags\n[geo      ](https://research.stlouisfed.org/docs/api/geofred/)  | Harvest data and shape files found in GeoFRED \n\n\nThese groups of databases are broken down into sets of databases.  datapungi_fed access all of them, but \nfor each group it defaults to a specific case (use the \"print\" command as described above to get the name of the default database).  Below is a run sample of each default search.\n\n```python\n'''Sample Query of All Database Groups - Default Databases'''\n\nimport datapungi_fed as dpf\n\ndata = dpf.data() \n\ndata.datasetlist()       \ndata.categories(125)   \ndata.releases()\ndata.series('GDP')\ndata.sources('1')   \ndata.tags(tag_names='monetary+aggregates;weekly')\ndata.geo(series_id='WIPCPI')\n```\nNOTICE: all returned pandas dataframes contain a \"_meta\" attribute with metadata information of dataset.\n\n```python\n'''Returned Metadata'''\n\nimport datapungi_fed as dpf\n\ndpf('gnp')._meta\n```\nNOTICE: \"meta\" is not a pandas official attribute; slight changes to the dataframe (say, merging, or multiplying it by a number) will remove meta.\n\n### Verbose \n\nUse the verbose option to get the full request result, a cleaned version of the dataset, and a string of the code used to get the data.\n\n```python\n'''Verbose Run: Get Full Request Result, Cleaned Data, and Code Snippet'''\n\nimport datapungi_fed as dpf\n\ndata = dpf.data()\nfull = data.series('gnp',verbose=true)  \nfull['dataFrame']           #pandas table, as above\nfull['request']             #full request run, see section below\nfull['code']                #code snippet of a request that reproduces the query. \n\n#to get the request result:\nfull['request'].json()\n```\n \nNotice: By default, datapungi_fed requests data in json format.   \n\n### Sample run of all drivers\n\n\n\n\n```python\n'''Sample Run of All Datasets'''\nimport datapungi_fed as dpf\n\n\ndata = dpf.data()\n\n# Categories data group\nprint(data.categories)\ndata.categories(125)\ndata.categories['category'](125)\ndata.categories['children'](13)\ndata.categories['related'](32073)\ndata.categories['series'](125)\ndata.categories['tags'](125)\ndata.categories['related_tags'](125,tag_names=\"services;quarterly\")\n    \n# Releases data group\nprint(data.releases)\ndata.releases(verbose=True)\ndata.releases['releases'](verbose=True)\ndata.releases['release/dates'](release_id=53,verbose=True)\ndata.releases['release'](release_id=53,verbose=True)\ndata.releases['release/dates'](release_id=53,verbose=True)\ndata.releases['release/series'](release_id=53,verbose=True)\ndata.releases['release/sources'](release_id=53,verbose=True)\ndata.releases['release/tags'](release_id=53,verbose=True)\ndata.releases['release/related_tags'](release_id='86',tag_names='sa;foreign',verbose=True)\ndata.releases['release/tables'](release_id=53,verbose=True)\n    \n# Series data group\nprint(data.series)\ndata.series('gdp',verbose=True) \ndata.series['series']('GDP',verbose=True)\ndata.series['categories']('EXJPUS',verbose=True)\ndata.series['observations']('GNP',verbose=True)\ndata.series['release']('IRA',verbose=True)\ndata.series['search'](search_text='monetary+service+index',verbose=True)\ndata.series['search/tags'](series_search_text='monetary+service+index',verbose=True)\ndata.series['search/related_tags'](series_search_text='mortgage+rate',tag_names='30-year;frb',verbose=True)\ndata.series['tags'](series_id='STLFSI',verbose=True)\ndata.series['categories']('EXJPUS',verbose=True)\ndata.series['updates'](verbose=True)\ndata.series['vintagedates']('GNPCA',verbose=True)\n    \n# Tags data group\nprint(data.tags)\ndata.tags(tag_names='monetary+aggregates;weekly',verbose=True)\ndata.tags['tags'](tag_names='monetary+aggregates;weekly',verbose=True)\ndata.tags['related_tags'](tag_names='monetary+aggregates;weekly',verbose=True)\ndata.tags['tags/series'](tag_names='slovenia;food;oecd',verbose=True)\n\n#Geo data group\nprint(data.geo)\ndata.geo['shapes']('bea')\ndata.geo['meta'](series_id='SMU56000000500000001')\ndata.geo(series_id='WIPCPI',start_date='2012-01-01')\ndata.geo['data'](series_group='882',date='2013-01-01',region_type='state',units='Dollars',frequency='a',season='NSA')\n```\n\n\n\n\n\n## Setting up datapungi_fed \n\nTo use the FED API, **the first step** is to [get an API key from the FED](https://research.stlouisfed.org/docs/api/api_key.html).\n\n### Quick Setup (Suggest Setup)\n\nFor a quick setup, just save your api key as an environment variable called API_KEY_FED by, for example, typing on a termninal:\n\n- windows:\n   ```\n   > setx API_KEY_FED \"your api key\"\n   ```\n- mac:\n  ```\n  $ touch ~/.bash_profile\n  $ open -a TextEdit.app ~/.bash_profile\n  ```\n  add the following text at the end and save it: \n  \n  ```\n  export API_KEY_FED=yourKey \n  ```\n\nClose the terminal (may need to restart the computer) after saving the variable. \n\n\nNotice: searching for an environment variable named 'API_KEY_FED' is the default option.  If changed to some other option and want to return to the default, run:\n\n```python\nimport datapungi_fed as dpf\n\ndpf.utils.setUserSettings('env')  \n```\n\nIf you want to save the url of the API in the environment, call it API_KEY_FED_url. datapungi_fed will use the provided http address instead of the default. \n\n### Other setting up options:\n\nBesides the suggested setup above, there are two main options to pass an api key to datapungi_fed:\n\n#### (Option 1) Pass the key directly:\n```python\nimport datapungi_fed as dpf\n\ndata = dpf.data(\"API KEY\")\n\ndata.series('gdp')\n```\n\n#### (Option 2) Save the key in either a json or yaml file and let datapungi_fed know its location:\n\n sample json file : \n```python\n    {  \n         \"API_KEY_FED\": {\"key\": \"**PLACE YOUR KEY HERE**\", \"url\": \"\"},\n         (...Other API keys...)\n    }\n```\nsample yaml file:\n\n```yaml\nAPI_KEY_FED: \n    key: PLACE API KEY HERE\n    description: FED data\n    url: \napi2:\n    key:\n    description:\n    url:\n```\n\nSave the path to your FED API key on the package's user settings (only need to run the utils once, datapungi_fed will remember it in future runs):\n\n\n```python\nimport datapungi_fed as dpf\n\ndpf.utils.setUserSettings('C:/Path/myKeys.yaml') #or .json\n\ndata = dpf.data()\ndata.series('gdp')\n```\n \n\n### Changing the API key name\n  By default, datapungi_fed searches for an API key called 'FED' (in either json/yaml file or in the environment).  In some cases, it's preferable to call it something else (in conda, use FED_Secret to encript it).  To change the name of the key, run\n\n  ```python\n  import datapungi_fed as dpf\n  \n  dpf.utils.setKeyName('FED_Secret')  #or anyother prefered key name\n  ```\n  When using environment variables, if saving the API url in the environment as well, call it KeyLabel_url (for example, 'FED_Secret_url'). Else, datapungi_fed will use the default one.\n  \n## Running Tests\n\ndatapungi_fed comes with a family of tests to check its access to the API and the quality of the retrieved data.  They check if:\n\n1. the connection to the API is working,\n2. the data cleaning step worked,\n3. the code snippet is executing,\n4. the code snippet produces the same data as the datapungi_fed query.\n\nOther tests check if the data has being updated of if new data is available.  Most of these tests are run every night on python 3.6 and 3.7 (see the code build tag on the top of the document).  However, \nthese test runs are not currently checking the code snippet quality to check if its output is the same as the driver's. To run the tests, including the one \nthat checks code snippet quality, type:\n\n```python\nimport datapungi_fed as dpf\n\ndpf.tests.runTests()\n```\n\nthe results should open on a web browser.  To re-open the last test results, run:\n\n```python\nimport datapungi_fed as dpf\n\ndpf.tests.viewTests()\n```\n\n\n\nTo save the tests in a desired folder, run \n\n```python\nimport datapungi_fed as dpf\n\ndpf.utils.setTestFolder('C:/mytestFolder/')\n```\n\nFuture tests will be saved an html file called datapungi_fed_Tests.html in the path specified.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jjotterson/datapungi_fed", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datapungi_fed", "package_url": "https://pypi.org/project/datapungi_fed/", "platform": "", "project_url": "https://pypi.org/project/datapungi_fed/", "project_urls": {"Homepage": "https://github.com/jjotterson/datapungi_fed"}, "release_url": "https://pypi.org/project/datapungi_fed/0.3.1/", "requires_dist": ["requests", "pandas", "pytest", "pytest-html", "pyperclip", "lxml", "xlrd", "beautifulsoup4", "html5lib", "pyyaml"], "requires_python": "", "summary": "Gets FRED and GeoFRED data from Federal Reserve (FED) by connecting to its API.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/datapungi_fed/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba046eeda7c51330bba0b8a02cf5d383e6f0e290/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6461746170756e67695f6665642e737667\"></a>\n<a href=\"https://travis-ci.com/jjotterson/datapungi_fed\" rel=\"nofollow\"><img alt=\"build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6da99232c02340f552a42aca6ed21fc17b674539/68747470733a2f2f7472617669732d63692e636f6d2f6a6a6f74746572736f6e2f6461746170756e67695f6665642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pepy.tech/project/datapungi-fed\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35afd93ea7c3379df9c7dcbf3c21aad25086e7bd/68747470733a2f2f706570792e746563682f62616467652f6461746170756e67692d666564\"></a>\n<a href=\"https://pypi.org/project/datapungi_fed/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20b15812e45600f0bf7b881e546a671d37d04608/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6461746170756e67695f6665642e737667\"></a></p>\n<p>install code: pip install datapungi_fed</p>\n<h1> datapungi_fed  </h1>\n<p>datapungi_fed is a python package that extracts FRED and GeoFRED data from the Federal Reserve (FED) by connecting to its API.  Overall it:</p>\n<ul>\n<li>provides a quick access to a FED's time-series data (just two lines of code away to any time-series!)</li>\n<li>provides both a cleaned up output (pandas) and a full request output of any FRED or GeoFRED dataset.</li>\n<li>provides code snippets that can be used to access the FED API independently of datapungi_fed</li>\n<li>can read a saved API key (as an environment variables (default) or from json/yaml files) to avoid having a copy of it on a script</li>\n<li>can run many tests: check if all database access are working, if the data is being cleaned correctly, and if the code snippet returns the correct data.</li>\n</ul>\n<h2>Sections</h2>\n<ul>\n<li><a href=\"#Sample-runs\" rel=\"nofollow\">Short sample runs</a></li>\n<li><a href=\"#Sample-run-of-all-drivers\" rel=\"nofollow\">Short sample runs of all drivers</a></li>\n<li><a href=\"#Full-request-result\" rel=\"nofollow\">Description of a full return</a></li>\n<li><a href=\"#Setting-up-datapungi_fed\" rel=\"nofollow\">Setting up datapungi_fed</a></li>\n<li><a href=\"#Running-Tests\" rel=\"nofollow\">Testing the package</a></li>\n</ul>\n<h2>Sample runs</h2>\n<h3>Short runs:</h3>\n<p>There are many datasets available in the FED API, and datapungi_fed connects to them all, but it is specially designed to quickly access the FED's time-series data.  After <a href=\"#Setting-up-datapungi_fed\" rel=\"nofollow\">setting the package up</a>, a time-series symbol (say 'gdp') can be fetched by typing:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"p\">(</span><span class=\"s1\">'gdp'</span><span class=\"p\">)</span> \n</pre>\n<p>If in doubt, try the print command on an datapungi_fed object to get information on how to proceed.</p>\n<pre><span class=\"sd\">'''Getting Help'''</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dpf</span><span class=\"p\">)</span>         <span class=\"c1\">#suggests to run data = dpf.data()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>        <span class=\"c1\">#list the database groups (eg. geo) and short description of each</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">)</span>    <span class=\"c1\">#list the databases in the groups, their short descriptions and parameters</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">)</span>    \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">)</span>        \n</pre>\n<p>At a top level, FRED has 5 groups of databases and we group the GeoFRED under the same group (\"geo\"). datapungi_fed includes a 6th group (datasetlist).</p>\n<table>\n<thead>\n<tr>\n<th>FRED database group</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dataselist</td>\n<td>datapungi_fed metadata of all other (FRED and GeoFRED) databases</td>\n</tr>\n<tr>\n<td><a href=\"https://fred.stlouisfed.org/categories/\" rel=\"nofollow\">categories</a></td>\n<td>Catagories of datasets - 8 top categories (eg, National Accounts, Prices) that break down into subgroups</td>\n</tr>\n<tr>\n<td><a href=\"https://fred.stlouisfed.org/releases/\" rel=\"nofollow\">releases </a></td>\n<td>Release groups of data - about 300 (eg, Western Hemisphere Regional Economic Outlook, Penn World Table)</td>\n</tr>\n<tr>\n<td><a href=\"https://fred.stlouisfed.org/\" rel=\"nofollow\">series   </a></td>\n<td>About 600,000 time series provided by various sources</td>\n</tr>\n<tr>\n<td><a href=\"https://fred.stlouisfed.org/sources/\" rel=\"nofollow\">sources  </a></td>\n<td>List of data sources - about 90 data providers (eg, IMF and Bank of Mexico)</td>\n</tr>\n<tr>\n<td><a href=\"https://fred.stlouisfed.org/tags/\" rel=\"nofollow\">tags     </a></td>\n<td>Tags applied to time series (eg, location, data source, frequency) - about 5,000 tags</td>\n</tr>\n<tr>\n<td><a href=\"https://research.stlouisfed.org/docs/api/geofred/\" rel=\"nofollow\">geo      </a></td>\n<td>Harvest data and shape files found in GeoFRED</td>\n</tr></tbody></table>\n<p>These groups of databases are broken down into sets of databases.  datapungi_fed access all of them, but\nfor each group it defaults to a specific case (use the \"print\" command as described above to get the name of the default database).  Below is a run sample of each default search.</p>\n<pre><span class=\"sd\">'''Sample Query of All Database Groups - Default Databases'''</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span> \n\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">datasetlist</span><span class=\"p\">()</span>       \n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">(</span><span class=\"mi\">125</span><span class=\"p\">)</span>   \n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">()</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"s1\">'GDP'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>   \n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">(</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'monetary+aggregates;weekly'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">(</span><span class=\"n\">series_id</span><span class=\"o\">=</span><span class=\"s1\">'WIPCPI'</span><span class=\"p\">)</span>\n</pre>\n<p>NOTICE: all returned pandas dataframes contain a \"_meta\" attribute with metadata information of dataset.</p>\n<pre><span class=\"sd\">'''Returned Metadata'''</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"p\">(</span><span class=\"s1\">'gnp'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_meta</span>\n</pre>\n<p>NOTICE: \"meta\" is not a pandas official attribute; slight changes to the dataframe (say, merging, or multiplying it by a number) will remove meta.</p>\n<h3>Verbose</h3>\n<p>Use the verbose option to get the full request result, a cleaned version of the dataset, and a string of the code used to get the data.</p>\n<pre><span class=\"sd\">'''Verbose Run: Get Full Request Result, Cleaned Data, and Code Snippet'''</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"s1\">'gnp'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">true</span><span class=\"p\">)</span>  \n<span class=\"n\">full</span><span class=\"p\">[</span><span class=\"s1\">'dataFrame'</span><span class=\"p\">]</span>           <span class=\"c1\">#pandas table, as above</span>\n<span class=\"n\">full</span><span class=\"p\">[</span><span class=\"s1\">'request'</span><span class=\"p\">]</span>             <span class=\"c1\">#full request run, see section below</span>\n<span class=\"n\">full</span><span class=\"p\">[</span><span class=\"s1\">'code'</span><span class=\"p\">]</span>                <span class=\"c1\">#code snippet of a request that reproduces the query. </span>\n\n<span class=\"c1\">#to get the request result:</span>\n<span class=\"n\">full</span><span class=\"p\">[</span><span class=\"s1\">'request'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Notice: By default, datapungi_fed requests data in json format.</p>\n<h3>Sample run of all drivers</h3>\n<pre><span class=\"sd\">'''Sample Run of All Datasets'''</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Categories data group</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">(</span><span class=\"mi\">125</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'category'</span><span class=\"p\">](</span><span class=\"mi\">125</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'children'</span><span class=\"p\">](</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'related'</span><span class=\"p\">](</span><span class=\"mi\">32073</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'series'</span><span class=\"p\">](</span><span class=\"mi\">125</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'tags'</span><span class=\"p\">](</span><span class=\"mi\">125</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">categories</span><span class=\"p\">[</span><span class=\"s1\">'related_tags'</span><span class=\"p\">](</span><span class=\"mi\">125</span><span class=\"p\">,</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s2\">\"services;quarterly\"</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># Releases data group</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'releases'</span><span class=\"p\">](</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/dates'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/dates'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/series'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/sources'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/tags'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/related_tags'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"s1\">'86'</span><span class=\"p\">,</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'sa;foreign'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">releases</span><span class=\"p\">[</span><span class=\"s1\">'release/tables'</span><span class=\"p\">](</span><span class=\"n\">release_id</span><span class=\"o\">=</span><span class=\"mi\">53</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># Series data group</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"s1\">'gdp'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'series'</span><span class=\"p\">](</span><span class=\"s1\">'GDP'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'categories'</span><span class=\"p\">](</span><span class=\"s1\">'EXJPUS'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'observations'</span><span class=\"p\">](</span><span class=\"s1\">'GNP'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'release'</span><span class=\"p\">](</span><span class=\"s1\">'IRA'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'search'</span><span class=\"p\">](</span><span class=\"n\">search_text</span><span class=\"o\">=</span><span class=\"s1\">'monetary+service+index'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'search/tags'</span><span class=\"p\">](</span><span class=\"n\">series_search_text</span><span class=\"o\">=</span><span class=\"s1\">'monetary+service+index'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'search/related_tags'</span><span class=\"p\">](</span><span class=\"n\">series_search_text</span><span class=\"o\">=</span><span class=\"s1\">'mortgage+rate'</span><span class=\"p\">,</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'30-year;frb'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'tags'</span><span class=\"p\">](</span><span class=\"n\">series_id</span><span class=\"o\">=</span><span class=\"s1\">'STLFSI'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'categories'</span><span class=\"p\">](</span><span class=\"s1\">'EXJPUS'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'updates'</span><span class=\"p\">](</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">[</span><span class=\"s1\">'vintagedates'</span><span class=\"p\">](</span><span class=\"s1\">'GNPCA'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># Tags data group</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">(</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'monetary+aggregates;weekly'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"s1\">'tags'</span><span class=\"p\">](</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'monetary+aggregates;weekly'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"s1\">'related_tags'</span><span class=\"p\">](</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'monetary+aggregates;weekly'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"s1\">'tags/series'</span><span class=\"p\">](</span><span class=\"n\">tag_names</span><span class=\"o\">=</span><span class=\"s1\">'slovenia;food;oecd'</span><span class=\"p\">,</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Geo data group</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">[</span><span class=\"s1\">'shapes'</span><span class=\"p\">](</span><span class=\"s1\">'bea'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">[</span><span class=\"s1\">'meta'</span><span class=\"p\">](</span><span class=\"n\">series_id</span><span class=\"o\">=</span><span class=\"s1\">'SMU56000000500000001'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">(</span><span class=\"n\">series_id</span><span class=\"o\">=</span><span class=\"s1\">'WIPCPI'</span><span class=\"p\">,</span><span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">'2012-01-01'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">geo</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">](</span><span class=\"n\">series_group</span><span class=\"o\">=</span><span class=\"s1\">'882'</span><span class=\"p\">,</span><span class=\"n\">date</span><span class=\"o\">=</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">,</span><span class=\"n\">region_type</span><span class=\"o\">=</span><span class=\"s1\">'state'</span><span class=\"p\">,</span><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"s1\">'Dollars'</span><span class=\"p\">,</span><span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"s1\">'NSA'</span><span class=\"p\">)</span>\n</pre>\n<h2>Setting up datapungi_fed</h2>\n<p>To use the FED API, <strong>the first step</strong> is to <a href=\"https://research.stlouisfed.org/docs/api/api_key.html\" rel=\"nofollow\">get an API key from the FED</a>.</p>\n<h3>Quick Setup (Suggest Setup)</h3>\n<p>For a quick setup, just save your api key as an environment variable called API_KEY_FED by, for example, typing on a termninal:</p>\n<ul>\n<li>\n<p>windows:</p>\n<pre><code>&gt; setx API_KEY_FED \"your api key\"\n</code></pre>\n</li>\n<li>\n<p>mac:</p>\n<pre><code>$ touch ~/.bash_profile\n$ open -a TextEdit.app ~/.bash_profile\n</code></pre>\n<p>add the following text at the end and save it:</p>\n<pre><code>export API_KEY_FED=yourKey \n</code></pre>\n</li>\n</ul>\n<p>Close the terminal (may need to restart the computer) after saving the variable.</p>\n<p>Notice: searching for an environment variable named 'API_KEY_FED' is the default option.  If changed to some other option and want to return to the default, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">setUserSettings</span><span class=\"p\">(</span><span class=\"s1\">'env'</span><span class=\"p\">)</span>  \n</pre>\n<p>If you want to save the url of the API in the environment, call it API_KEY_FED_url. datapungi_fed will use the provided http address instead of the default.</p>\n<h3>Other setting up options:</h3>\n<p>Besides the suggested setup above, there are two main options to pass an api key to datapungi_fed:</p>\n<h4>(Option 1) Pass the key directly:</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"s2\">\"API KEY\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"s1\">'gdp'</span><span class=\"p\">)</span>\n</pre>\n<h4>(Option 2) Save the key in either a json or yaml file and let datapungi_fed know its location:</h4>\n<p>sample json file :</p>\n<pre>    <span class=\"p\">{</span>  \n         <span class=\"s2\">\"API_KEY_FED\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"**PLACE YOUR KEY HERE**\"</span><span class=\"p\">,</span> <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">},</span>\n         <span class=\"p\">(</span><span class=\"o\">...</span><span class=\"n\">Other</span> <span class=\"n\">API</span> <span class=\"n\">keys</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>sample yaml file:</p>\n<pre><span class=\"nt\">API_KEY_FED</span><span class=\"p\">:</span> \n    <span class=\"nt\">key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PLACE API KEY HERE</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FED data</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> \n<span class=\"nt\">api2</span><span class=\"p\">:</span>\n    <span class=\"nt\">key</span><span class=\"p\">:</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span>\n</pre>\n<p>Save the path to your FED API key on the package's user settings (only need to run the utils once, datapungi_fed will remember it in future runs):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">setUserSettings</span><span class=\"p\">(</span><span class=\"s1\">'C:/Path/myKeys.yaml'</span><span class=\"p\">)</span> <span class=\"c1\">#or .json</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"s1\">'gdp'</span><span class=\"p\">)</span>\n</pre>\n<h3>Changing the API key name</h3>\n<p>By default, datapungi_fed searches for an API key called 'FED' (in either json/yaml file or in the environment).  In some cases, it's preferable to call it something else (in conda, use FED_Secret to encript it).  To change the name of the key, run</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">setKeyName</span><span class=\"p\">(</span><span class=\"s1\">'FED_Secret'</span><span class=\"p\">)</span>  <span class=\"c1\">#or anyother prefered key name</span>\n</pre>\n<p>When using environment variables, if saving the API url in the environment as well, call it KeyLabel_url (for example, 'FED_Secret_url'). Else, datapungi_fed will use the default one.</p>\n<h2>Running Tests</h2>\n<p>datapungi_fed comes with a family of tests to check its access to the API and the quality of the retrieved data.  They check if:</p>\n<ol>\n<li>the connection to the API is working,</li>\n<li>the data cleaning step worked,</li>\n<li>the code snippet is executing,</li>\n<li>the code snippet produces the same data as the datapungi_fed query.</li>\n</ol>\n<p>Other tests check if the data has being updated of if new data is available.  Most of these tests are run every night on python 3.6 and 3.7 (see the code build tag on the top of the document).  However,\nthese test runs are not currently checking the code snippet quality to check if its output is the same as the driver's. To run the tests, including the one\nthat checks code snippet quality, type:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">runTests</span><span class=\"p\">()</span>\n</pre>\n<p>the results should open on a web browser.  To re-open the last test results, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">viewTests</span><span class=\"p\">()</span>\n</pre>\n<p>To save the tests in a desired folder, run</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datapungi_fed</span> <span class=\"k\">as</span> <span class=\"nn\">dpf</span>\n\n<span class=\"n\">dpf</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">setTestFolder</span><span class=\"p\">(</span><span class=\"s1\">'C:/mytestFolder/'</span><span class=\"p\">)</span>\n</pre>\n<p>Future tests will be saved an html file called datapungi_fed_Tests.html in the path specified.</p>\n\n          </div>"}, "last_serial": 6536210, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "052ce7644bf76440377c58167216c49f", "sha256": "c3633e089a45283b3fdac8121338660cfa4313bb522cc0980a519bf6224cb8c6"}, "downloads": -1, "filename": "datapungi_fed-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "052ce7644bf76440377c58167216c49f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62743, "upload_time": "2019-09-17T05:54:28", "upload_time_iso_8601": "2019-09-17T05:54:28.250782Z", "url": "https://files.pythonhosted.org/packages/b1/d6/25c99c2b5ab55cb818a2e2be0108f1723ec8fb55414b49ffa3ccc5272e23/datapungi_fed-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0033082e8c2847ebfa10e01fd843d432", "sha256": "409896d3a7fa47f9f5f7eb97a50120461b960b49a385cd6ddd981b80dd1cdaa0"}, "downloads": -1, "filename": "datapungi_fed-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0033082e8c2847ebfa10e01fd843d432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18607, "upload_time": "2019-09-17T05:55:29", "upload_time_iso_8601": "2019-09-17T05:55:29.802535Z", "url": "https://files.pythonhosted.org/packages/fa/46/20b8a6b897c5cb8c54e57e67f7e3a1e00eddfa65b117cd61f7d64f266126/datapungi_fed-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f6ac5ef0e4a78cc50c44c0d7267a1e56", "sha256": "b3da230dd07d0288380aef57f2f4c08fd34907be8ba5e2e1ac85d7eec2ff584a"}, "downloads": -1, "filename": "datapungi_fed-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6ac5ef0e4a78cc50c44c0d7267a1e56", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64055, "upload_time": "2019-09-20T03:44:35", "upload_time_iso_8601": "2019-09-20T03:44:35.866331Z", "url": "https://files.pythonhosted.org/packages/83/ec/74c5069fe1ae5b38d94dbb41469f5d10d58d67ddd767cb6efd94205beb0d/datapungi_fed-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4579c0b7970c0fbdaf0d6752703b670", "sha256": "26faf7aec3ab40874e1a3c5699fbce644d3c35b5f0980139a2e3e030c57ffd32"}, "downloads": -1, "filename": "datapungi_fed-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d4579c0b7970c0fbdaf0d6752703b670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19394, "upload_time": "2019-09-20T03:45:29", "upload_time_iso_8601": "2019-09-20T03:45:29.473274Z", "url": "https://files.pythonhosted.org/packages/10/4e/fb3cce72be7fe473dcd65af6bd4c9295d301ac68c5e532094fc9e637dfc6/datapungi_fed-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8c02836e1abea45a00b7fbda97061afd", "sha256": "4895ad4e50a1c77d5abe0396039e7f6597715a6fec7aa18a1a5821f4d57b79c3"}, "downloads": -1, "filename": "datapungi_fed-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c02836e1abea45a00b7fbda97061afd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 75841, "upload_time": "2019-09-28T03:51:15", "upload_time_iso_8601": "2019-09-28T03:51:15.382629Z", "url": "https://files.pythonhosted.org/packages/e8/2e/892f976fcd029b8b9a81250cd6ac9de1315310af2553f75e05225116abf7/datapungi_fed-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5151ebedafea1a4f7c04c2eeaf238ba6", "sha256": "204fd672a448869f7c3dd2aa368f65b568294a60dc3c23fb64232570c607afc8"}, "downloads": -1, "filename": "datapungi_fed-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5151ebedafea1a4f7c04c2eeaf238ba6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19525, "upload_time": "2019-09-28T03:51:26", "upload_time_iso_8601": "2019-09-28T03:51:26.314411Z", "url": "https://files.pythonhosted.org/packages/a8/31/5433e33636908ba5f43014e0c8176dc1c0fff85a07097de6b1d9e81f3c0b/datapungi_fed-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d40cf715722387c12bb2eba9b888d7b1", "sha256": "4e9dd64da10d286416a8481348ea774cdbcce753118dbc691b4151c55174d039"}, "downloads": -1, "filename": "datapungi_fed-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d40cf715722387c12bb2eba9b888d7b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 99711, "upload_time": "2019-09-29T16:15:01", "upload_time_iso_8601": "2019-09-29T16:15:01.053518Z", "url": "https://files.pythonhosted.org/packages/c9/00/6fccfd27ec3ecbab0e16ab06240d58d96589b093b063c27093fe61e24815/datapungi_fed-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "652a06f646cd7d4db5af71ba20a3caae", "sha256": "f46a08549380efe72c8e9ca1128c7684bef1558d5343ec09bad006a26f12f394"}, "downloads": -1, "filename": "datapungi_fed-0.2.0.tar.gz", "has_sig": false, "md5_digest": "652a06f646cd7d4db5af71ba20a3caae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20848, "upload_time": "2019-09-29T16:15:08", "upload_time_iso_8601": "2019-09-29T16:15:08.376935Z", "url": "https://files.pythonhosted.org/packages/66/4a/81432b4957425661c6122d0fc2ff3bd1f47d2778b48dca59adecac4976d3/datapungi_fed-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b85605a9d1fd2720ec79e19095947bce", "sha256": "011642bbf5d20a1607fde2f9a423e628bb22ca014b86cc8d294afa3526ee5b25"}, "downloads": -1, "filename": "datapungi_fed-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b85605a9d1fd2720ec79e19095947bce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 99747, "upload_time": "2020-01-28T07:30:47", "upload_time_iso_8601": "2020-01-28T07:30:47.369043Z", "url": "https://files.pythonhosted.org/packages/3b/42/9f52cb2438ed76354d0191b43f0093c2ffddb5d14f627ff6ef3055dfd478/datapungi_fed-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae23e9f4763c00a48511cf4717c9514", "sha256": "5e220fee9902765fcef589fe28d4424c074683301d859f07b857bdb87b2d9c23"}, "downloads": -1, "filename": "datapungi_fed-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3ae23e9f4763c00a48511cf4717c9514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20794, "upload_time": "2020-01-28T07:30:54", "upload_time_iso_8601": "2020-01-28T07:30:54.773745Z", "url": "https://files.pythonhosted.org/packages/2f/32/35660f7b6db620b311b79a89f9d1524945f466039b6101a1cc1848428d0d/datapungi_fed-0.2.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "fe916c313a5c091badd5fad06119ea9c", "sha256": "b513f621a4f9fe2065dbf58baa66df5a77f7464e0af32d20aadf077fa9c7ae04"}, "downloads": -1, "filename": "datapungi_fed-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe916c313a5c091badd5fad06119ea9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 101081, "upload_time": "2020-01-29T06:08:38", "upload_time_iso_8601": "2020-01-29T06:08:38.388749Z", "url": "https://files.pythonhosted.org/packages/52/0f/e1a30e7d1423ad5ed5381cb866043970778fc30fe50d38e308f28f178b73/datapungi_fed-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f74d70bb00a01a23fa243945b963098", "sha256": "f17d342099854d676bcfa2b8e52188ab284431e55aa8ee844062b165231ba10f"}, "downloads": -1, "filename": "datapungi_fed-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7f74d70bb00a01a23fa243945b963098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21234, "upload_time": "2020-01-29T06:08:44", "upload_time_iso_8601": "2020-01-29T06:08:44.261769Z", "url": "https://files.pythonhosted.org/packages/99/e7/cc096c6494f0da4f7a2bc151cd757651b1069494eeb4c8447eafe5581e9b/datapungi_fed-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe916c313a5c091badd5fad06119ea9c", "sha256": "b513f621a4f9fe2065dbf58baa66df5a77f7464e0af32d20aadf077fa9c7ae04"}, "downloads": -1, "filename": "datapungi_fed-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe916c313a5c091badd5fad06119ea9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 101081, "upload_time": "2020-01-29T06:08:38", "upload_time_iso_8601": "2020-01-29T06:08:38.388749Z", "url": "https://files.pythonhosted.org/packages/52/0f/e1a30e7d1423ad5ed5381cb866043970778fc30fe50d38e308f28f178b73/datapungi_fed-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f74d70bb00a01a23fa243945b963098", "sha256": "f17d342099854d676bcfa2b8e52188ab284431e55aa8ee844062b165231ba10f"}, "downloads": -1, "filename": "datapungi_fed-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7f74d70bb00a01a23fa243945b963098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21234, "upload_time": "2020-01-29T06:08:44", "upload_time_iso_8601": "2020-01-29T06:08:44.261769Z", "url": "https://files.pythonhosted.org/packages/99/e7/cc096c6494f0da4f7a2bc151cd757651b1069494eeb4c8447eafe5581e9b/datapungi_fed-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:15 2020"}