{"info": {"author": "Roman Dobosz", "author_email": "gryf73@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Text Processing :: Linguistic", "Topic :: Text Processing :: Markup", "Topic :: Text Processing :: Markup :: HTML"], "description": "What is Kiroku?\n---------------\n\nKiroku is a tool written in Python for creating and build a fully static blog or\nweb page. That means, no server side language, framework,\n*mod_python*/*mod_wsgi* is needed. To serve such generated content pure web\nserver is more than enough.\n\nSome highlights:\n\n* Almost no external dependencies (only `docutils`_ is required)\n* Works with Python 3\n* Modifiable templates\n* Simple search\n* Generated RSS channel\n* i18n aware\n* Configurable via ``ini`` file\n\nKiroku (\u559c\u516d, in the meaning of putting something into the record; writing\nsomething) name was chosen for this project before I realized, that there\nalready are software projects with the same name. Most of them are inactive, so\nI decided to keep that name.\n\nRequirements\n------------\n\nBesides (obviously) Python 3, there is only one dependency - `docutils`_.\n\nFor proper date time representation, `pytz`_ module is highly recommended,\nunless you are lucky to live in the ``Europe/Warsaw`` or ``UTC`` time zones, or\nyou simply don't care, and stick with local time represented in UTC format.\n\nLast possible dependency is `pygments`_, which *automagically* enables syntax\nhighlight in code blocks.\n\nInstallation\n------------\n\n#. Install globally\n\n   .. code:: shell-session\n\n      root@localhost # pip install kiroku\n\n#. Virtualenv is one option\n\n   .. code:: shell-session\n\n      user@localhost $ virtualenv-python3.2 blog\n      New python executable in py3/bin/python3.2\n      Also creating executable in py3/bin/python\n      Installing distribute...done.\n      Installing pip...done.\n      user@localhost $ cd blog\n      user@localhost blog $ . bin/activate\n      (blog)user@localhost blog $ pip install kiroku\n\n#. Also, it can be download and used directly:\n\n   .. code:: shell-session\n\n      user@localhost $ git clone https://bitbucket.org/gryf/kiroku.git\n      user@localhost $ cd kiroku\n      user@localhost kiroku $ PYTHONPATH=/home/user/kiroku python3 scripts/kiroku --help\n\n   Note, that ``PYTHONPATH`` should be defined correctly.\n\nUsage\n-----\n\nOnce installed, ``kiroku`` command should be available, and can be used for\nbuilding the structure of the blog or web side:\n\n   .. code:: shell-session\n\n      user@localhost $ kiroku init blog\n\nThis command will create default directory structure, under which several items\nwill be available:\n\n- ``articles`` - directory where all articles/posts shall be stored\n- ``.css`` - contents of this directory will be copied into destination\n  ``build`` - directory as ``css``. All modification to the CSS should be done\n  there. File ``/.css/style.css`` is the default (and only) CSS file. Note, that\n  during build every file with extension ``.css`` will be minified.\n- ``.js`` - directory with JavaScript files. Will be copied to ``build/js``\n  during build.\n- ``.templates`` - this directory contains all the templates that Kiroku uses\n  to build the pages.\n\nNow, just change the directory to ``blog`` and issue the command ``build`` to\ngenerate entire site:\n\n   .. code:: shell-session\n\n      user@localhost $ cd blog\n      user@localhost blog $ kiroku build\n\nGenerated HTML files, style, JavaScript files - all of that will be placed in\nthe ``build`` directory.\n\nArticles/pages\n--------------\n\nEvery article, which should be taken into considerations should be placed in\n``articles`` directory. Images should be placed in a subdirectory (``images``,\n``img``, ``graphics``, ``res`` are the common choices). Files can be named in\nany convention, but in two conditions: they must have ``.rst`` extension, and\nthey have to be on the root of the ``articles`` directory. Kiroku will not scan\nthat directory recursively. Articles can have date prefix, just to have them\nchronologically sorted, for example ``2001-12-17_foo.rst``.\n\nThere is one special article file which is treated differently - ``about.rst``.\nIt doesn't have any fields mentioned below; they will not be processed. As the\nname suggest, this is *About me* page.\n\nEach page is a simple reST document. There are two modifications, that are\nimplemented in the kiroku module, which *make difference* from ordinary reST\ndocument:\n\n#. ``More`` comment.\n\n   If the author place the comment ``.. more`` in the article, it will inform\n   the Kiroku, where to cut the page and place the first part (a summary of the\n   article, perhaps) of it on the index page, archive, description fields on RSS\n   and so on. Example:\n\n   .. code:: rest\n\n      Hendrerit sem, eu tempor nisi felis et metus. Etiam gravida sem ut mi.\n\n      .. more\n\n      Vivamus lacus libero, aliquam eget, iaculis quis, tristique adipiscing,\n      diam.  Vivamus nec massa non justo iaculis pellentesque. Aenean accumsan\n      elit sit amet nibh feugiat semper.\n\n   That will make only first line to appear on the front page.\n\n   Placing it on the page is not mandatory, so there is no point to\n   do it on short articles, but it is a good idea to put it on the huge\n   articles, since several huge articles on the front page can annoy readers.\n\n   This idea was taken from blogger platform, but I think, that I saw that on\n   other blog platforms too.\n\n#. Special fields\n\n   `Fields`_ are special elements, which may (or may not) be present on the\n   document itself, but their role is rather to describe reST document, then\n   make significant appearance on that document itself.\n\n   Kiroku use three fields, which will be utilized to describe an article:\n\n   - ``:Title:`` - Field should contain the title of the article. If leaved\n     empty, it will be guessed from the file name.\n   - ``:Datetime:`` - Creation date. If not provided it will inherit the value\n     from article file creation time. Format, as described on `datetime module`_\n     is as follows:\n\n        .. code:: python\n\n           \"%Y-%m-%d %H:%M:%S\"\n           # for example:\n           \"2000-01-24 17:33:31\"\n\n   - ``:Tags:`` - Comma separated labels for the article. Of course, can be\n     unset.\n\n   All of those fields are optional but it's highly recommended to have them on\n   the articles. All fields can be lowrcase or upercase - it does not matter.\n\nArticle example:\n\n.. code:: rest\n\n   :Title: My article\n   :datetime: 2000-01-24 17:33:31\n   :TAGS: Lorem ipsum, blog, cats\n\n   A subsection\n   ------------\n\n   Phasellus eu quam. Quisque interdum cursus purus. In orci. Maecenas vehicula.\n   Sed et mauris. Praesent feugiat viverra lacus. Suspendisse pulvinar lacus ut\n   nunc. Quisque nisi. Suspendisse id risus nec nisi ultrices ornare. Donec eget\n   tellus. Nullam molestie placerat felis. Aenean facilisis. Nunc erat.\n\n   .. more\n\n   Another subsection\n   ------------------\n\n   Luctus et ultrices posuere cubilia Curae; Morbi urna dui, fermentum quis,\n   feugiat imperdiet, imperdiet id, sapien. Phasellus auctor nunc. Vivamus eget\n   augue quis neque vestibulum placerat. Duis placerat. Maecenas accumsan rutrum\n   lacus. Vestibulum lacinia semper nibh. Aenean diam odio, scelerisque at,\n   ullamcorper nec, tincidunt dapibus, quam. Duis vel ante nec tortor porta\n   mollis. Praesent orci. Cras dignissim vulputate metus.\n\nIf `pygments`_ module is present in the system, syntax highlighting for the code\nblocks can be enabled. It is enough to put the appropriate language for such\nblock, for example::\n\n   .. code:: python\n\n      print(\"hi\")\n\nIt will produce:\n\n   .. code:: python\n\n      print(\"hi\")\n\nConfiguration\n-------------\n\nKiroku provides simple configuration via ``config.ini`` file. After the\ninitialization there is an example for the configuration in the file\n``config.ini.example``. It can be renamed to the ``config.ini`` and then edited.\n\nFollowing options under ``[kiroku]`` section are available:\n\n- ``locale`` (default ``C``) - language of the web pages.\n- ``server_name`` (default ``localhost``) - target server name. It'll be used\n  for links in RSS and for `favicon`.\n- ``server_root`` (default ``/``) - The root of the page/blog can be set here.\n  If set to ``foo``, all the full links will be prefixed with it, i.e.\n  ``http://localhost/foo/link.html``.\n- ``server_protocol`` (default ``http``) - It may be changed to ``https``\n- ``site_name`` (default ``Kiroku``) - Site name. It will be displayed at the\n  top of the page.\n- ``site_desc`` (default ``Yet another blog``) - description of the\n  website/blog. By default only seen on the RSS description tag.\n- ``site_footer`` (default ``The footer``) - footer of the page.\n- ``timezone`` (default ``UTC``) - proper name of the time zone the dates should\n  be represent. Without `pytz`_ module, there is only ``Europe/Warsaw`` and\n  ``UTC`` time zones implemented.\n\nBesides configuration, there is possibility to influence the look of the page by\nsimply adjusting the CSS file and the templates, which can be found under\n``.css`` and ``.templates`` directories respectively.\n\nTranslations\n------------\n\nFor now only Polish translation is available. Any help with translation is\nwelcomed :)\n\nDevelopment\n-----------\n\nFor development, `virtualenv`_ is strongly recommended. Following dependencies\nand tools are required. Python packages:\n\n- `coverage`_ - tool for code coverage measurement\n- `slimit`_ - for minifying JavaScript files\n\nAlthough not necessary, but recommended are two additional packages:\n\n- `pep8`_\n- `pylint`_\n\nWhich **should** be used during development.\n\nAll Python dependencies can be installed inside *virtualenv* environment with\n``pip`` command:\n\n.. code:: shell-session\n\n   user@localhost $ virtualenv -p python3 kiroku-ve\n   user@localhost $ cd kiroku-ve\n   user@localhost kiroku-ve $ . bin/activate\n   (kiroku-ve)user@localhost kiroku-ve $ pip install -r dev-requirements.txt\n\nAmong the mentioned above packages it will also (try to) install `docutils`_ and\n`pygments`_ modules.\n\nIf there is a plan for creating new message catalogs, or generating them, there\nwill be also `GNU gettext`_ needed (tools like ``xgettext`` and  ``msgfmt`` in\nparticular).\n\nUsually, for simple tasks automation I've been using ``Makefile`` and ``make``\nutility, or the `paver`_ python task manager. However I've been trying to\ndecrease external dependencies only to the really necessary modules, so I've\nimplemented extra commands to the setup script, so that it can do a bit more\nthan you'll expect from ``setup.py`` :)\n\nThe commands are as follows:\n\n- ``test`` - execute the tests, and display the code coverage for them,\n- ``minify`` - minify JavaScript files (for now it is only one),\n- ``genpot`` - generate ``.pot`` file out of the source files. File\n  ``kiroku.pot`` will be placed under ``kiroku/data/locale`` directory,\n- ``gencat`` - generate message catalogs for every available source ``.po``\n  files.\n\nNote, that during build, message catalogs will (try to) be regenerated,\notherwise the interface will be in English by default, regardless of the\nlanguage in the config.\n\n``test`` command may have two additional parameters:\n\n- ``--verbose`` or ``-v`` - will turn on all of the messages printed out by the\n  modules. This could be useful for debugging with ``pdb``.\n- ``--coverage`` or ``-c`` - will measure and print out the code coverage\n\nEvery command should be executed in the root directory of the Kiroku repository\n(the directory where ``setup.py`` exists).\n\nTODO\n----\n\nThere is still much to do. Here is the list of things I'm planning to do:\n\n#. Module ``kiroku.naive_tzinfo`` should be expanded to support more timezones.\n\n   Timezones are needed because of the ``pubDate`` tag in RSS and ``datetime``\n   attribute in ``<time>`` HTML5 tags. To decrease dependencies I've decided to\n   implement a *na\u00efve* implementation for timezone info object and for now\n   **only** for CET/CEST timezone. The goal is to make it `pytz`_ compatible, so\n   Kiroku can use it if available. Done.\n\n#. Module for comments.\n\n   I'm not decided yet on the way to append comments system (if any). For sure\n   an obvious choice could be adapting the templates to utilize `disqus`_ or\n   similar commenting system, use some self-hosted solution (like `isso`_), or\n   even go with moderated (through the email) solutions, as described in `Matt\n   Palmer blogpost`_.\n\n#. Make the templates use some engine like `jinja`_ or `mako`_. Initially, I\n   have plan to do that, but eventually I've decided to keep Kiroku simple.\n   Maybe, if the interest will be big enough, I'll add it later.\n\nLicense\n-------\n\nThis software is licensed under Simplified BSD License::\n\n    Copyright (c) 2013, Roman Dobosz\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice, this\n       list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright notice,\n       this list of conditions and the following disclaimer in the documentation\n       and/or other materials provided with the distribution.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n.. _docutils: http://docutils.sourceforge.net\n.. _pygments: http://pygments.org\n.. _fields: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists\n.. _datetime module: http://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\n.. _virtualenv: http://www.virtualenv.org\n.. _coverage: http://nedbatchelder.com/code/coverage/\n.. _slimit: https://github.com/rspivak/slimit\n.. _GNU gettext: http://www.gnu.org/software/gettext/\n.. _paver: http://paver.github.io/paver/\n.. _pep8: http://pep8.readthedocs.org/\n.. _pylint: http://www.logilab.org/project/pylint\n.. _pytz: http://pytz.sourceforge.net\n.. _disqus: http://www.disqus.com\n.. _isso: http://posativ.org/isso/\n.. _Matt Palmer blogpost: http://www.hezmatt.org/~mpalmer/blog/2011/07/19/static-comments-in-jekyll.html\n.. _jinja: http://jinja.pocoo.org\n.. _mako: http://www.makotemplates.org", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/gryf/kiroku.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/gryf/kiroku", "keywords": "web,static,generator,blog", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "kiroku", "package_url": "https://pypi.org/project/kiroku/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kiroku/", "project_urls": {"Download": "https://bitbucket.org/gryf/kiroku.git", "Homepage": "https://bitbucket.org/gryf/kiroku"}, "release_url": "https://pypi.org/project/kiroku/0.8.0/", "requires_dist": null, "requires_python": null, "summary": "Static blog generator", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-kiroku\">\n<h2>What is Kiroku?</h2>\n<p>Kiroku is a tool written in Python for creating and build a fully static blog or\nweb page. That means, no server side language, framework,\n<em>mod_python</em>/<em>mod_wsgi</em> is needed. To serve such generated content pure web\nserver is more than enough.</p>\n<p>Some highlights:</p>\n<ul>\n<li>Almost no external dependencies (only <a href=\"http://docutils.sourceforge.net\" rel=\"nofollow\">docutils</a> is required)</li>\n<li>Works with Python 3</li>\n<li>Modifiable templates</li>\n<li>Simple search</li>\n<li>Generated RSS channel</li>\n<li>i18n aware</li>\n<li>Configurable via <tt>ini</tt> file</li>\n</ul>\n<p>Kiroku (\u559c\u516d, in the meaning of putting something into the record; writing\nsomething) name was chosen for this project before I realized, that there\nalready are software projects with the same name. Most of them are inactive, so\nI decided to keep that name.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Besides (obviously) Python 3, there is only one dependency - <a href=\"http://docutils.sourceforge.net\" rel=\"nofollow\">docutils</a>.</p>\n<p>For proper date time representation, <a href=\"http://pytz.sourceforge.net\" rel=\"nofollow\">pytz</a> module is highly recommended,\nunless you are lucky to live in the <tt>Europe/Warsaw</tt> or <tt>UTC</tt> time zones, or\nyou simply don\u2019t care, and stick with local time represented in UTC format.</p>\n<p>Last possible dependency is <a href=\"http://pygments.org\" rel=\"nofollow\">pygments</a>, which <em>automagically</em> enables syntax\nhighlight in code blocks.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install globally</p>\n<pre><span class=\"gp\">root@localhost #</span> pip install kiroku\n</pre>\n</li>\n<li><p>Virtualenv is one option</p>\n<pre><span class=\"gp\">user@localhost $</span> virtualenv-python3.2 blog\n<span class=\"go\">New python executable in py3/bin/python3.2\nAlso creating executable in py3/bin/python\nInstalling distribute...done.\nInstalling pip...done.\n</span><span class=\"gp\">user@localhost $</span> <span class=\"nb\">cd</span> blog\n<span class=\"gp\">user@localhost blog $</span> . bin/activate\n<span class=\"gp-VirtualEnv\">(blog)</span><span class=\"gp\">user@localhost blog $</span> pip install kiroku\n</pre>\n</li>\n<li><p>Also, it can be download and used directly:</p>\n<pre><span class=\"gp\">user@localhost $</span> git clone https://bitbucket.org/gryf/kiroku.git\n<span class=\"gp\">user@localhost $</span> <span class=\"nb\">cd</span> kiroku\n<span class=\"gp\">user@localhost kiroku $</span> <span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>/home/user/kiroku python3 scripts/kiroku --help\n</pre>\n<p>Note, that <tt>PYTHONPATH</tt> should be defined correctly.</p>\n</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Once installed, <tt>kiroku</tt> command should be available, and can be used for\nbuilding the structure of the blog or web side:</p>\n<blockquote>\n<pre><span class=\"gp\">user@localhost $</span> kiroku init blog\n</pre>\n</blockquote>\n<p>This command will create default directory structure, under which several items\nwill be available:</p>\n<ul>\n<li><tt>articles</tt> - directory where all articles/posts shall be stored</li>\n<li><tt>.css</tt> - contents of this directory will be copied into destination\n<tt>build</tt> - directory as <tt>css</tt>. All modification to the CSS should be done\nthere. File <tt>/.css/style.css</tt> is the default (and only) CSS file. Note, that\nduring build every file with extension <tt>.css</tt> will be minified.</li>\n<li><tt>.js</tt> - directory with JavaScript files. Will be copied to <tt>build/js</tt>\nduring build.</li>\n<li><tt>.templates</tt> - this directory contains all the templates that Kiroku uses\nto build the pages.</li>\n</ul>\n<p>Now, just change the directory to <tt>blog</tt> and issue the command <tt>build</tt> to\ngenerate entire site:</p>\n<blockquote>\n<pre><span class=\"gp\">user@localhost $</span> <span class=\"nb\">cd</span> blog\n<span class=\"gp\">user@localhost blog $</span> kiroku build\n</pre>\n</blockquote>\n<p>Generated HTML files, style, JavaScript files - all of that will be placed in\nthe <tt>build</tt> directory.</p>\n</div>\n<div id=\"articles-pages\">\n<h2>Articles/pages</h2>\n<p>Every article, which should be taken into considerations should be placed in\n<tt>articles</tt> directory. Images should be placed in a subdirectory (<tt>images</tt>,\n<tt>img</tt>, <tt>graphics</tt>, <tt>res</tt> are the common choices). Files can be named in\nany convention, but in two conditions: they must have <tt>.rst</tt> extension, and\nthey have to be on the root of the <tt>articles</tt> directory. Kiroku will not scan\nthat directory recursively. Articles can have date prefix, just to have them\nchronologically sorted, for example <tt><span class=\"pre\">2001-12-17_foo.rst</span></tt>.</p>\n<p>There is one special article file which is treated differently - <tt>about.rst</tt>.\nIt doesn\u2019t have any fields mentioned below; they will not be processed. As the\nname suggest, this is <em>About me</em> page.</p>\n<p>Each page is a simple reST document. There are two modifications, that are\nimplemented in the kiroku module, which <em>make difference</em> from ordinary reST\ndocument:</p>\n<ol>\n<li><p><tt>More</tt> comment.</p>\n<p>If the author place the comment <tt>.. more</tt> in the article, it will inform\nthe Kiroku, where to cut the page and place the first part (a summary of the\narticle, perhaps) of it on the index page, archive, description fields on RSS\nand so on. Example:</p>\n<pre>Hendrerit sem, eu tempor nisi felis et metus. Etiam gravida sem ut mi.\n\n<span class=\"cp\">.. more\n\n</span>Vivamus lacus libero, aliquam eget, iaculis quis, tristique adipiscing,\ndiam.  Vivamus nec massa non justo iaculis pellentesque. Aenean accumsan\nelit sit amet nibh feugiat semper.\n</pre>\n<p>That will make only first line to appear on the front page.</p>\n<p>Placing it on the page is not mandatory, so there is no point to\ndo it on short articles, but it is a good idea to put it on the huge\narticles, since several huge articles on the front page can annoy readers.</p>\n<p>This idea was taken from blogger platform, but I think, that I saw that on\nother blog platforms too.</p>\n</li>\n<li><p>Special fields</p>\n<p><a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#field-lists\" rel=\"nofollow\">Fields</a> are special elements, which may (or may not) be present on the\ndocument itself, but their role is rather to describe reST document, then\nmake significant appearance on that document itself.</p>\n<p>Kiroku use three fields, which will be utilized to describe an article:</p>\n<ul>\n<li><p><tt>:Title:</tt> - Field should contain the title of the article. If leaved\nempty, it will be guessed from the file name.</p>\n</li>\n<li><p><tt>:Datetime:</tt> - Creation date. If not provided it will inherit the value\nfrom article file creation time. Format, as described on <a href=\"http://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\" rel=\"nofollow\">datetime module</a>\nis as follows:</p>\n<blockquote>\n<pre><span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:%S\"</span>\n<span class=\"c1\"># for example:</span>\n<span class=\"s2\">\"2000-01-24 17:33:31\"</span>\n</pre>\n</blockquote>\n</li>\n<li><p><tt>:Tags:</tt> - Comma separated labels for the article. Of course, can be\nunset.</p>\n</li>\n</ul>\n<p>All of those fields are optional but it\u2019s highly recommended to have them on\nthe articles. All fields can be lowrcase or upercase - it does not matter.</p>\n</li>\n</ol>\n<p>Article example:</p>\n<pre><span class=\"nc\">:Title:</span> My article\n<span class=\"nc\">:datetime:</span> 2000-01-24 17:33:31\n<span class=\"nc\">:TAGS:</span> Lorem ipsum, blog, cats\n\n<span class=\"gh\">A subsection</span>\n<span class=\"gh\">------------</span>\n\nPhasellus eu quam. Quisque interdum cursus purus. In orci. Maecenas vehicula.\nSed et mauris. Praesent feugiat viverra lacus. Suspendisse pulvinar lacus ut\nnunc. Quisque nisi. Suspendisse id risus nec nisi ultrices ornare. Donec eget\ntellus. Nullam molestie placerat felis. Aenean facilisis. Nunc erat.\n\n<span class=\"cp\">.. more\n\n</span><span class=\"gh\">Another subsection</span>\n<span class=\"gh\">------------------</span>\n\nLuctus et ultrices posuere cubilia Curae; Morbi urna dui, fermentum quis,\nfeugiat imperdiet, imperdiet id, sapien. Phasellus auctor nunc. Vivamus eget\naugue quis neque vestibulum placerat. Duis placerat. Maecenas accumsan rutrum\nlacus. Vestibulum lacinia semper nibh. Aenean diam odio, scelerisque at,\nullamcorper nec, tincidunt dapibus, quam. Duis vel ante nec tortor porta\nmollis. Praesent orci. Cras dignissim vulputate metus.\n</pre>\n<p>If <a href=\"http://pygments.org\" rel=\"nofollow\">pygments</a> module is present in the system, syntax highlighting for the code\nblocks can be enabled. It is enough to put the appropriate language for such\nblock, for example:</p>\n<pre>.. code:: python\n\n   print(\"hi\")\n</pre>\n<p>It will produce:</p>\n<blockquote>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hi\"</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Kiroku provides simple configuration via <tt>config.ini</tt> file. After the\ninitialization there is an example for the configuration in the file\n<tt>config.ini.example</tt>. It can be renamed to the <tt>config.ini</tt> and then edited.</p>\n<p>Following options under <tt>[kiroku]</tt> section are available:</p>\n<ul>\n<li><tt>locale</tt> (default <tt>C</tt>) - language of the web pages.</li>\n<li><tt>server_name</tt> (default <tt>localhost</tt>) - target server name. It\u2019ll be used\nfor links in RSS and for <cite>favicon</cite>.</li>\n<li><tt>server_root</tt> (default <tt>/</tt>) - The root of the page/blog can be set here.\nIf set to <tt>foo</tt>, all the full links will be prefixed with it, i.e.\n<tt><span class=\"pre\">http://localhost/foo/link.html</span></tt>.</li>\n<li><tt>server_protocol</tt> (default <tt>http</tt>) - It may be changed to <tt>https</tt></li>\n<li><tt>site_name</tt> (default <tt>Kiroku</tt>) - Site name. It will be displayed at the\ntop of the page.</li>\n<li><tt>site_desc</tt> (default <tt>Yet another blog</tt>) - description of the\nwebsite/blog. By default only seen on the RSS description tag.</li>\n<li><tt>site_footer</tt> (default <tt>The footer</tt>) - footer of the page.</li>\n<li><tt>timezone</tt> (default <tt>UTC</tt>) - proper name of the time zone the dates should\nbe represent. Without <a href=\"http://pytz.sourceforge.net\" rel=\"nofollow\">pytz</a> module, there is only <tt>Europe/Warsaw</tt> and\n<tt>UTC</tt> time zones implemented.</li>\n</ul>\n<p>Besides configuration, there is possibility to influence the look of the page by\nsimply adjusting the CSS file and the templates, which can be found under\n<tt>.css</tt> and <tt>.templates</tt> directories respectively.</p>\n</div>\n<div id=\"translations\">\n<h2>Translations</h2>\n<p>For now only Polish translation is available. Any help with translation is\nwelcomed :)</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>For development, <a href=\"http://www.virtualenv.org\" rel=\"nofollow\">virtualenv</a> is strongly recommended. Following dependencies\nand tools are required. Python packages:</p>\n<ul>\n<li><a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> - tool for code coverage measurement</li>\n<li><a href=\"https://github.com/rspivak/slimit\" rel=\"nofollow\">slimit</a> - for minifying JavaScript files</li>\n</ul>\n<p>Although not necessary, but recommended are two additional packages:</p>\n<ul>\n<li><a href=\"http://pep8.readthedocs.org/\" rel=\"nofollow\">pep8</a></li>\n<li><a href=\"http://www.logilab.org/project/pylint\" rel=\"nofollow\">pylint</a></li>\n</ul>\n<p>Which <strong>should</strong> be used during development.</p>\n<p>All Python dependencies can be installed inside <em>virtualenv</em> environment with\n<tt>pip</tt> command:</p>\n<pre><span class=\"gp\">user@localhost $</span> virtualenv -p python3 kiroku-ve\n<span class=\"gp\">user@localhost $</span> <span class=\"nb\">cd</span> kiroku-ve\n<span class=\"gp\">user@localhost kiroku-ve $</span> . bin/activate\n<span class=\"gp-VirtualEnv\">(kiroku-ve)</span><span class=\"gp\">user@localhost kiroku-ve $</span> pip install -r dev-requirements.txt\n</pre>\n<p>Among the mentioned above packages it will also (try to) install <a href=\"http://docutils.sourceforge.net\" rel=\"nofollow\">docutils</a> and\n<a href=\"http://pygments.org\" rel=\"nofollow\">pygments</a> modules.</p>\n<p>If there is a plan for creating new message catalogs, or generating them, there\nwill be also <a href=\"http://www.gnu.org/software/gettext/\" rel=\"nofollow\">GNU gettext</a> needed (tools like <tt>xgettext</tt> and  <tt>msgfmt</tt> in\nparticular).</p>\n<p>Usually, for simple tasks automation I\u2019ve been using <tt>Makefile</tt> and <tt>make</tt>\nutility, or the <a href=\"http://paver.github.io/paver/\" rel=\"nofollow\">paver</a> python task manager. However I\u2019ve been trying to\ndecrease external dependencies only to the really necessary modules, so I\u2019ve\nimplemented extra commands to the setup script, so that it can do a bit more\nthan you\u2019ll expect from <tt>setup.py</tt> :)</p>\n<p>The commands are as follows:</p>\n<ul>\n<li><tt>test</tt> - execute the tests, and display the code coverage for them,</li>\n<li><tt>minify</tt> - minify JavaScript files (for now it is only one),</li>\n<li><tt>genpot</tt> - generate <tt>.pot</tt> file out of the source files. File\n<tt>kiroku.pot</tt> will be placed under <tt>kiroku/data/locale</tt> directory,</li>\n<li><tt>gencat</tt> - generate message catalogs for every available source <tt>.po</tt>\nfiles.</li>\n</ul>\n<p>Note, that during build, message catalogs will (try to) be regenerated,\notherwise the interface will be in English by default, regardless of the\nlanguage in the config.</p>\n<p><tt>test</tt> command may have two additional parameters:</p>\n<ul>\n<li><tt><span class=\"pre\">--verbose</span></tt> or <tt><span class=\"pre\">-v</span></tt> - will turn on all of the messages printed out by the\nmodules. This could be useful for debugging with <tt>pdb</tt>.</li>\n<li><tt><span class=\"pre\">--coverage</span></tt> or <tt><span class=\"pre\">-c</span></tt> - will measure and print out the code coverage</li>\n</ul>\n<p>Every command should be executed in the root directory of the Kiroku repository\n(the directory where <tt>setup.py</tt> exists).</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>There is still much to do. Here is the list of things I\u2019m planning to do:</p>\n<ol>\n<li><p>Module <tt>kiroku.naive_tzinfo</tt> should be expanded to support more timezones.</p>\n<p>Timezones are needed because of the <tt>pubDate</tt> tag in RSS and <tt>datetime</tt>\nattribute in <tt>&lt;time&gt;</tt> HTML5 tags. To decrease dependencies I\u2019ve decided to\nimplement a <em>na\u00efve</em> implementation for timezone info object and for now\n<strong>only</strong> for CET/CEST timezone. The goal is to make it <a href=\"http://pytz.sourceforge.net\" rel=\"nofollow\">pytz</a> compatible, so\nKiroku can use it if available. Done.</p>\n</li>\n<li><p>Module for comments.</p>\n<p>I\u2019m not decided yet on the way to append comments system (if any). For sure\nan obvious choice could be adapting the templates to utilize <a href=\"http://www.disqus.com\" rel=\"nofollow\">disqus</a> or\nsimilar commenting system, use some self-hosted solution (like <a href=\"http://posativ.org/isso/\" rel=\"nofollow\">isso</a>), or\neven go with moderated (through the email) solutions, as described in <a href=\"http://www.hezmatt.org/~mpalmer/blog/2011/07/19/static-comments-in-jekyll.html\" rel=\"nofollow\">Matt\nPalmer blogpost</a>.</p>\n</li>\n<li><p>Make the templates use some engine like <a href=\"http://jinja.pocoo.org\" rel=\"nofollow\">jinja</a> or <a href=\"http://www.makotemplates.org\" rel=\"nofollow\">mako</a>. Initially, I\nhave plan to do that, but eventually I\u2019ve decided to keep Kiroku simple.\nMaybe, if the interest will be big enough, I\u2019ll add it later.</p>\n</li>\n</ol>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under Simplified BSD License:</p>\n<pre> Copyright (c) 2013, Roman Dobosz\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 958296, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "698b93decb0d3ff3db9f5c71d8c75156", "sha256": "141f343d0e1e9e4c3d09ea620f25d083405b6d7b647fa16aaf83e6684be4b06d"}, "downloads": -1, "filename": "kiroku-0.8.0.tar.gz", "has_sig": false, "md5_digest": "698b93decb0d3ff3db9f5c71d8c75156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 757384, "upload_time": "2014-01-02T09:24:18", "upload_time_iso_8601": "2014-01-02T09:24:18.493166Z", "url": "https://files.pythonhosted.org/packages/91/1b/512eb8381ba89f8568642f2381ba6c0ef1a01eb2c58a98a4dab753c0a257/kiroku-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "698b93decb0d3ff3db9f5c71d8c75156", "sha256": "141f343d0e1e9e4c3d09ea620f25d083405b6d7b647fa16aaf83e6684be4b06d"}, "downloads": -1, "filename": "kiroku-0.8.0.tar.gz", "has_sig": false, "md5_digest": "698b93decb0d3ff3db9f5c71d8c75156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 757384, "upload_time": "2014-01-02T09:24:18", "upload_time_iso_8601": "2014-01-02T09:24:18.493166Z", "url": "https://files.pythonhosted.org/packages/91/1b/512eb8381ba89f8568642f2381ba6c0ef1a01eb2c58a98a4dab753c0a257/kiroku-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:35 2020"}