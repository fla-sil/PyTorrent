{"info": {"author": "Felix Schwarz, Martin H\u00e4cker, Robert Buchholz", "author_email": "rbu@goodpoint.de, spamfaenger@gmx.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ValueObject |Build Status|\n==========================\n\nLicense: ISC - See LICENSE file\n\n``ValueObject`` is a ``dict``-like object that exposes keys as\nattributes. You can use it like a regular dictionary (in fact, it is a\nsubclass and does not override its ``__init__``). You can use attribute\nor item access to get or set values.\n\n::\n\n    >>> from valueobject import ValueObject\n    >>> vo = ValueObject(key=1)\n    >>> vo['key']\n    1\n    >>> vo.key\n    1\n    >>> vo['key'] += 1\n    >>> vo.key += 1\n    >>> vo['key']\n    3\n    >>> vo.key\n    3\n\nUsability notes:\n----------------\n\n-  If you need to access a key that is not a valid Python identifier\n   (for example, it includes spaces), use regular dict access.\n-  All regular ``object``, ``dict`` and ``ValueObject`` methods will be\n   returned on attribute access. A key such as ``copy`` needs to be\n   accessed via item access syntax (e.g. ``valueobject['copy']``).\n\n.. |Build Status| image:: https://travis-ci.org/rbu/valueobject.svg?branch=master\n   :target: https://travis-ci.org/rbu/valueobject\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rbu/valueobject", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "valueobject", "package_url": "https://pypi.org/project/valueobject/", "platform": "", "project_url": "https://pypi.org/project/valueobject/", "project_urls": {"Homepage": "https://github.com/rbu/valueobject"}, "release_url": "https://pypi.org/project/valueobject/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "ValueObject is a dict-like object that exposes keys as attributes.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>License: ISC - See LICENSE file</p>\n<p><tt>ValueObject</tt> is a <tt>dict</tt>-like object that exposes keys as\nattributes. You can use it like a regular dictionary (in fact, it is a\nsubclass and does not override its <tt>__init__</tt>). You can use attribute\nor item access to get or set values.</p>\n<pre>&gt;&gt;&gt; from valueobject import ValueObject\n&gt;&gt;&gt; vo = ValueObject(key=1)\n&gt;&gt;&gt; vo['key']\n1\n&gt;&gt;&gt; vo.key\n1\n&gt;&gt;&gt; vo['key'] += 1\n&gt;&gt;&gt; vo.key += 1\n&gt;&gt;&gt; vo['key']\n3\n&gt;&gt;&gt; vo.key\n3\n</pre>\n<div id=\"usability-notes\">\n<h2>Usability notes:</h2>\n<ul>\n<li>If you need to access a key that is not a valid Python identifier\n(for example, it includes spaces), use regular dict access.</li>\n<li>All regular <tt>object</tt>, <tt>dict</tt> and <tt>ValueObject</tt> methods will be\nreturned on attribute access. A key such as <tt>copy</tt> needs to be\naccessed via item access syntax (e.g. <tt><span class=\"pre\">valueobject['copy']</span></tt>).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3643657, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3569fc3495f4290fa6f9591634216788", "sha256": "88301b07de0cd51bd90cb82de63cfbc74c395b9a7957e57a487145870168b3ca"}, "downloads": -1, "filename": "valueobject-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3569fc3495f4290fa6f9591634216788", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3409, "upload_time": "2016-09-07T15:32:07", "upload_time_iso_8601": "2016-09-07T15:32:07.667522Z", "url": "https://files.pythonhosted.org/packages/b1/ae/c05f1968a5819cf4ca3956bec43b953d0bdc3bf19c2d33acfa78575d86ef/valueobject-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a7c7e03ef834337db91b3605d40c0871", "sha256": "254684e0801d4bc44ec0563c6b94572e6213eb1a6bb534af89b079f65cb536c8"}, "downloads": -1, "filename": "valueobject-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a7c7e03ef834337db91b3605d40c0871", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3454, "upload_time": "2018-03-06T10:32:50", "upload_time_iso_8601": "2018-03-06T10:32:50.126424Z", "url": "https://files.pythonhosted.org/packages/8f/cc/bfefe88472b19d087da7a2cf9aae1f2fa48c168e9c98c308cd21328eeb9b/valueobject-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "15f17f54b7843365d58d39e5f61b260e", "sha256": "939da1689896b182e4d5be6db736622eb060ae92a804374bce4706790360589c"}, "downloads": -1, "filename": "valueobject-1.0.2.tar.gz", "has_sig": false, "md5_digest": "15f17f54b7843365d58d39e5f61b260e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3451, "upload_time": "2018-03-06T10:56:35", "upload_time_iso_8601": "2018-03-06T10:56:35.597024Z", "url": "https://files.pythonhosted.org/packages/67/a9/85549c9b16f03ffd6205ed5601354764479ce708775827f4d8c12616fd60/valueobject-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15f17f54b7843365d58d39e5f61b260e", "sha256": "939da1689896b182e4d5be6db736622eb060ae92a804374bce4706790360589c"}, "downloads": -1, "filename": "valueobject-1.0.2.tar.gz", "has_sig": false, "md5_digest": "15f17f54b7843365d58d39e5f61b260e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3451, "upload_time": "2018-03-06T10:56:35", "upload_time_iso_8601": "2018-03-06T10:56:35.597024Z", "url": "https://files.pythonhosted.org/packages/67/a9/85549c9b16f03ffd6205ed5601354764479ce708775827f4d8c12616fd60/valueobject-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:59 2020"}