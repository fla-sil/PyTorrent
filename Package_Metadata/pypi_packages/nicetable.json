{"info": {"author": "Ofir Manor", "author_email": "ofir.manor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# nicetable\n* A clean and elegant way to print text tables in Python with minimal boilerplate code.\n* Built with modern Python (including type annotations) and has an extensive test suite. Requires Python 3.6 and up.\n\n## Quickstart\n'NiceTable' object is printable. In its simplest form, you just pass your data object to the constructor:  \n````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [{\"name\": \"Jones Green\", \"height_cm\": 98.8, \"shirt\": \"XL\"},\n         {\"name\": \"Jill\",        \"height_cm\": 175,   \"birth_year\": 1956}]\nprint(NiceTable(input))\n````\nOutput:\n````\n+---------------+-------------+---------+--------------+\n|  name         |  height_cm  |  shirt  |  birth_year  |\n+---------------+-------------+---------+--------------+\n|  Jones Green  |       98.8  |  XL     |        None  |\n|  Jill         |      175.0  |  None   |        1956  |\n+---------------+-------------+---------+--------------+\n````\nNote that:\n1. The input is a list of dicts. A column was generated for each unique key in those dicts.  \n2. String columns are by default left adjusted, and their column width is set automatically by the longest value.  \n3. Numeric columns are nicely well-aligned by the digit to the right (see the height_cm column).  \n\nYou can specify a different layout as the second parameter and pass other   formatting options by name.  \nYou can also use a dot notation to specify column-level options (by column name or column position).  \nFor example, printing as a pipe-delimited CSV, or printing as a regular CSV, without an header line, when None values are printed as 'N/A' only for the 'shirt' column:\n````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [{\"name\": \"Jones Green\", \"height_cm\": 98.8, \"shirt\": \"XL\"},\n         {\"name\": \"Jill\",        \"height_cm\": 175,   \"birth_year\": 1956}]\n\nprint(NiceTable(input, 'csv', sep_vertical='|'))\nprint(NiceTable(input, 'csv', header=False).set_col_options('shirt', none_string='N/A'))\n````\nOutput:\n````\nname|height_cm|shirt|birth_year\nJones Green|167.8|XL|None\nJill|175|None|1956\n\nJones Green,167.8,XL,None\nJill,175,N/A,1956\n````\n### Working with different input types and column names \n#### List of lists / List of tuples\nThese inputs are interpreted as list of rows, each with a list / tuple of columns values. \n* if you *DO NOT* specify column names, they will be assigned automatically, as 'C001', 'C002' etc:\n````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [[1], (1,2,3), [1,3,5,7,9]]\nprint(NiceTable(input))\n````\nOutput:\n````\n+--------+--------+--------+--------+--------+\n|  c001  |  c002  |  c003  |  c004  |  c005  |\n+--------+--------+--------+--------+--------+\n|     1  |  None  |  None  |  None  |  None  |\n|     1  |     2  |     3  |  None  |  None  |\n|     1  |     3  |     5  |     7  |     9  |\n+--------+--------+--------+--------+--------+\n````\n* If you *DO* specify a list of column names, those will be used instead of the auto-generated names.  \nThe next example uses the function `NiceTable.builtin_layouts()` that returns a list of lists:\n````python\nfrom nicetable.nicetable import NiceTable\n\nprint(NiceTable(NiceTable.builtin_layouts(), col_names=['Layout', 'Description']))\n````\nOutput:\n````\n+-----------+------------------------------------------------------------------------------------------------------+\n|  Layout   |  Description                                                                                         |\n+-----------+------------------------------------------------------------------------------------------------------+\n|  csv      |  comma-separated values with a one-line header.                                                      |\n|  default  |  fixed-width table with data auto-alignment.                                                         |\n|  grep     |  tab-separated values with no header. Great for CLI output, easily post-processed by cut, grep etc.  |\n|  md       |  for tables inside Markdown(.md) files, using the GFM table extension. Ex: README.md on github.      |\n|  tsv      |  tab-separated values with a one-line header.                                                        |\n+-----------+------------------------------------------------------------------------------------------------------+\n````\n\n#### List of dicts \nThis input is interpreted as list of rows, each with a dict of {column name : column value} pairs.\n*  If you *DO NOT* specify column names, they will be collected from the input, as in the first example:\n ````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [{\"name\": \"Jones Green\", \"height_cm\": 98.8, \"shirt\": \"XL\"},\n         {\"name\": \"Jill\",        \"height_cm\": 175,   \"birth_year\": 1956}]\nprint(NiceTable(input))\n````\nOutput:\n````\n+---------------+-------------+---------+--------------+\n|  name         |  height_cm  |  shirt  |  birth_year  |\n+---------------+-------------+---------+--------------+\n|  Jones Green  |       98.8  |  XL     |        None  |\n|  Jill         |      175.0  |  None   |        1956  |\n+---------------+-------------+---------+--------------+\n````\n* If you *DO* specify a list of column names, *ONLY THOSE COLUMNS WILL BE COLLECTED*.  \nFor example, collecting only three columns, and setting a specific column order:\n ````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [{\"name\": \"Jones Green\", \"height_cm\": 98.8, \"shirt\": \"XL\"},\n         {\"name\": \"Jill\",        \"height_cm\": 175,   \"birth_year\": 1956}]\nprint(NiceTable(input, col_names=['name', 'birth_year', 'height_cm']))\n````\nOutput:\n````\n+---------------+--------------+-------------+\n|  name         |  birth_year  |  height_cm  |\n+---------------+--------------+-------------+\n|  Jones Green  |        None  |       98.8  |\n|  Jill         |        1956  |      175.0  |\n+---------------+--------------+-------------+\n````\n* If you want to collect all columns, but provide them a new name, use the `rename_columns()` function.\n ````python\nfrom nicetable.nicetable import NiceTable\n\ninput = [{\"name\": \"Jones Green\", \"height_cm\": 98.8, \"shirt\": \"XL\"},\n         {\"name\": \"Jill\",        \"height_cm\": 175,   \"birth_year\": 1956}]\nprint(NiceTable(input).rename_columns(['Name', 'Height(cm)', 'Shirt Size', 'Year of Birth']))\n````\nOutput:\n````\n+---------------+--------------+--------------+-----------------+\n|  Name         |  Height(cm)  |  Shirt Size  |  Year of Birth  |\n+---------------+--------------+--------------+-----------------+\n|  Jones Green  |        98.8  |  XL          |           None  |\n|  Jill         |       175.0  |  None        |           1956  |\n+---------------+--------------+--------------+-----------------+\n````\n\n### Fine-grained NiceTable control        \nInstead of creating a NiceTable object inside a print() statement, you can alternatively:\n1. Create a standalone NiceTable object, specifying a list of column names.  \n2. Populate it iteratively with the append() function, passing a list, a tuple or a dict, representing a new row.\n3. Print it multiple times with different formatting.  \n\nThis example uses the string `NiceTable.SAMPLE_JSON`, parses it as JSON, and chery-pick four columns:  \n````python\nimport json\nfrom nicetable.nicetable import NiceTable\n\nout = NiceTable(col_names=['Name', 'Type', 'Height(cm)', 'Weight(kg)'])\nfor pokemon in json.loads(NiceTable.SAMPLE_JSON):\n    out.append([pokemon['name'], pokemon['type'], pokemon['height'], pokemon['weight']])\n\nprint(out)\nout.layout = 'md'\nprint(out)\n````\nOutput:\n````\n+-------------+----------------+--------------+--------------+\n|  Name       |  Type          |  Height(cm)  |  Weight(kg)  |\n+-------------+----------------+--------------+--------------+\n|  Bulbasaur  |  Grass/Poison  |          70  |       6.901  |\n|  Pikachu    |  Electric      |          40  |       6.100  |\n|  Mewtwo     |  Psychic       |         200  |     122.000  |\n+-------------+----------------+--------------+--------------+\n\n|  Name       |  Type          |  Height(cm)  |  Weight(kg)  |\n|-------------|----------------|--------------|--------------|\n|  Bulbasaur  |  Grass/Poison  |          70  |       6.901  |\n|  Pikachu    |  Electric      |          40  |       6.100  |\n|  Mewtwo     |  Psychic       |         200  |     122.000  |\n````\n\n## Table-level settings\nBelow is the list of the table-level settings, which you can use in the constructor, or set on an existing NiceTable object: \n\n|  Setting                |  Type      |  Default  |  Description                                                                                                                   |\n|-------------------------|------------|-----------|--------------------------------------------------------------------------------------------------------------------------------|\n|  header                 |  bool      |  1        |  whether the table header will be printed                                                                                      |\n|  header_sepline         |  bool      |  1        |  if the header is printed, whether a sepline will be printed after it                                                          |\n|  header_adjust          |  str       |  left     |  adjust of the column names, one of: ['left', 'center', 'right', 'compact']                                                    |\n|  sep_vertical           |  str       |  \\|       |  a vertical separator string                                                                                                   |\n|  sep_horizontal         |  str       |  -        |  a horizontal separator string                                                                                                 |\n|  sep_cross              |  str       |  +        |  a crossing separator string (where vertical and horizontal separators meet)                                                   |\n|  border_top             |  bool      |  1        |  whether the table top border will be printed                                                                                  |\n|  border_bottom          |  bool      |  1        |  whether the table bottom border will be printed                                                                               |\n|  border_left            |  bool      |  1        |  whether the table left border will be printed                                                                                 |\n|  border_right           |  bool      |  1        |  whether the table right border will be printed                                                                                |\n|  cell_adjust            |  str       |  auto     |  adjust of the values, one of: ['auto', 'left', 'center', 'right', 'compact', 'strict_left', 'strict_center', 'strict_right']  |\n|  cell_spacing           |  int       |  2        |  number of spaces to add to each side of a value                                                                               |\n|  value_min_len          |  int       |  1        |  minimal string length of a value. Shorter values will be space-padded                                                         |\n|  value_max_len          |  int       |  9999     |  maximum string length of a value                                                                                              |\n|  value_too_long_policy  |  str       |  wrap     |  handling of a string longer than `value_max_len`, one of: ['truncate', 'wrap']                                                |\n|  value_newline_replace  |  str       |  None     |  if set, replace newlines in string value with this                                                                            |\n|  value_none_string      |  str       |  None     |  string representation of the None value                                                                                       |\n|  value_escape_type      |  str       |  ignore   |  handling of `sep_vertical` inside a value, one of: ['remove', 'replace', 'prefix', 'ignore']                                  |\n|  value_escape_char      |  str       |  \\        |  a string to replace or prefix `sep_vertical`, based on `value_escape_type`                                                    |\n|  value_func             |  function  |  None     |  a function to pre-process the value before any other settings apply                                                          |\n\n*The table above was generated from `NiceTable.FORMATTING_SETTINGS`, using the `md` layout:*\n````python\nfrom nicetable.nicetable import NiceTable\n\nprint(NiceTable(NiceTable.FORMATTING_SETTINGS,\n                'md', \n                ['Setting', 'Type', 'Default', 'Description']))\n````\n\n## Column-level settings\nThe `set_col_options()` function sets allows you to set the following settings at the column-level:\n\n| Parameter       | Meaning                                        |\n| ----------------|------------------------------------------------|\n| adjust          | overrides the table-wide cell_adjust           |\n| max_len         | overrides the table-wide value_max_len         |\n| newline_replace | overrides the table-wide value_newline_replace |\n| none_string     | overrides the table-wide value_none_string     |\n| func            | overrides the table-wide value_func            |\n\nThis function accepts either a column name or a column position for the first parameter. For example:  \n````python\nimport json\nfrom nicetable.nicetable import NiceTable\n\nout = NiceTable(json.loads(NiceTable.SAMPLE_JSON))\nout.rename_columns(['ID','Name', 'Type', 'Height(cm)', ' Weight(kg)'])\n# set the second column options by position (column positions starts from zero)\nout.set_col_options(1, adjust='center')\n# set the third column options by column name\nout.set_col_options('Type',\n                    func=lambda x: x.lower() if x != 'Electric' else None,\n                    none_string='N/A')\nprint(out)\n````\nOutput:\n````\n+-------+-------------+----------------+--------------+---------------+\n|  ID   |  Name       |  Type          |  Height(cm)  |   Weight(kg)  |\n+-------+-------------+----------------+--------------+---------------+\n|  001  |  Bulbasaur  |  grass/poison  |          70  |        6.901  |\n|  025  |   Pikachu   |  N/A           |          40  |        6.100  |\n|  150  |    Mewtwo   |  psychic       |         200  |      122.000  |\n+-------+-------------+----------------+--------------+---------------+\n````\n\n\n## Cell adjustment\n* Cell contents can be adjusted `left`, `center` or `right`, and are space-padded to the width of the longest value in the column (see also next section on wrapping).  \nAlternatively, cell contents can be kept as-is with `compact` adjustment, though it means that the table vertical lines will not align (this is used in some layouts such as `csv`).\n* The default adjustment is `auto`, meaning that numeric columns (those with only numbers or None values) are adjusted `right`, and non-numeric columns are adjusted `left`.  \n* Numeric columns automatically well-aligned, meaning all their ones digit are printed in the same position.  \nTo print them as strings, add a `strict_` prefix to the adjust, like `strict_left`. For example:\n````\n+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n|  standard left  |  standard center  |  standard right  |  strict_left  |  strict_center  |  strict_right  |\n+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n|    6.901        |        6.901      |           6.901  |  6.901        |      6.901      |         6.901  |\n|    6.000        |        6.000      |           6.000  |  6            |        6        |             6  |\n|    1.000        |        1.000      |           1.000  |  1            |        1        |             1  |\n|  122.000        |      122.000      |         122.000  |  122          |       122       |           122  |\n+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n````\n*The example above uses long column names on purpose, otherwise `left`, `center` and `right` would look the same,\nas all the numbers in each column have the same fixed width (based on their longest column value).*\n\n## Text wrapping and newlines\n`NiceTable` supports handling long values and newlines in both column names and cell values.  \n#### Text wrapping\nWhen a value is longer than `value_max_len`, it handled by a `value_too_long_policy` policy.  \nThe default policy is `wrap`, which means the value will be broken to multiple lines every `value_max_len` characters.  \nAlternatively, specify the `truncate` policy to have to values truncated.  \nThe following examples demonstrates the two policies:\n````python\nfrom nicetable.nicetable import NiceTable\n\nout = NiceTable(col_names=['Code', 'Product Description(Long)'])\nout.append([1, 'Boeing 777. Batteries not included. May contain nuts.'])\nout.append([2, 'Sack of sand'])\nprint(out)\nout.value_max_len = 19\nprint(out)\nout.value_too_long_policy = 'truncate'\nprint(out)\n````\nOutput:\n````\n+--------+---------------------------------------------------------+\n|  Code  |  Product Description(Long)                              |\n+--------+---------------------------------------------------------+\n|     1  |  Boeing 777. Batteries not included. May contain nuts.  |\n|     2  |  Sack of sand                                           |\n+--------+---------------------------------------------------------+\n\n+--------+-----------------------+\n|  Code  |  Product Description  |\n|        |  (Long)               |\n+--------+-----------------------+\n|     1  |  Boeing 777. Batteri  |\n|        |  es not included. Ma  |\n|        |  y contain nuts.      |\n|     2  |  Sack of sand         |\n+--------+-----------------------+\n\n+--------+-----------------------+\n|  Code  |  Product Description  |\n+--------+-----------------------+\n|     1  |  Boeing 777. Batteri  |\n|     2  |  Sack of sand         |\n+--------+-----------------------+\n````\n#### Newlines \nWhen newlines are encountered in a column name or a value, they by default cause the text to wrap.  Alternatively, you can ask that newlines will be replaced, by setting `value_newline_replace` to an alternative string (default is `None`).  \nThe following example first shows the default behavior, and than shows replacing newlines with the string `\\n`:\n````python\nfrom nicetable.nicetable import NiceTable\n\nout = NiceTable(col_names=['Code', 'Product Description\\n(Long)']) \\\n    .append([1, 'Boeing 777\\nBatteries not included.\\nMay contain nuts.']) \\\n    .append([2, 'Sack of sand'])\nprint(out)\nout.value_newline_replace = '\\\\n'\nprint(out)\n````\nOutput:\n````\n+--------+---------------------------+\n|  Code  |  Product Description      |\n|        |  (Long)                   |\n+--------+---------------------------+\n|     1  |  Boeing 777               |\n|        |  Batteries not included.  |\n|        |  May contain nuts.        |\n|     2  |  Sack of sand             |\n+--------+---------------------------+\n\n+--------+----------------------------------------------------------+\n|  Code  |  Product Description\\n(Long)                             |\n+--------+----------------------------------------------------------+\n|     1  |  Boeing 777\\nBatteries not included.\\nMay contain nuts.  |\n|     2  |  Sack of sand                                            |\n+--------+----------------------------------------------------------+\n````\n#### Escaping\nThe values in different columns of the same row are separated by the vertical separator string (default is `|`, set by the `sep_vertical` property).  \nWhat happens if the content of a cell contains that string? It might be irrelevant if the output is just viewed by a person, but it might matter if the string output will be processed by another program (for example, for the `CSV` layout).  \nThere are four supported behaviors you can choose from, if the one set by the layout you picked is not appropriate:  \n1. **ignore**: no special handling of the vertical separator in a a cell, it is printed as is. \nThis is the default escaping behavior.\n2. **remove**: the vertical separator is removed.  \nThis is set by the `csv` layout and its derivatives (`tsv` and `grep` layouts).\n3. **prefix**: the vertical separator is prefixed by another string, controlled by `value_escape_char`.  \n This is set by the `md` layout, which uses `\\` as a prefix.\n4. **replace**: the vertical separator is prefixed by another string, controlled by `value_escape_char`.\n\n\n## Others\n**get_column(col)**  \nreturns a `List` of the column values.  \n\n\n## Adding a custom layout\nTo add a custom layout based on the existing options, you can inherit from `NiceTable` \nand define your own layout function.  \nThe description of your function will be incorporated in the `builtin_layouts()` output\n````python\nfrom nicetable.nicetable import NiceTable\n\nclass MyNiceTable(NiceTable):\n    def _layout_as_winter_columns(self) -> None:\n        \"\"\"Table with a winter-themed separator. Quite Ugly.\"\"\"\n        self.sep_vertical = '\u2744\u2602\ud83c\udf27\u2602\u2744'\n        self.sep_cross = '\u2744\u2602\ud83c\udf27\u2602\u2744'\n        self.sep_horizontal = '\u02e3'\n\nprint(MyNiceTable(MyNiceTable.builtin_layouts(),\n                  'winter_columns',\n                  ['Layout', 'Description']))\n````\nOutput:\n````\n\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  Layout          \u2744\u2602\ud83c\udf27\u2602\u2744  Description                                                                                         \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  csv             \u2744\u2602\ud83c\udf27\u2602\u2744  comma-separated values with a one-line header.                                                      \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  default         \u2744\u2602\ud83c\udf27\u2602\u2744  fixed-width table with data auto-alignment.                                                         \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  grep            \u2744\u2602\ud83c\udf27\u2602\u2744  tab-separated values with no header. Great for CLI output, easily post-processed by cut, grep etc.  \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  md              \u2744\u2602\ud83c\udf27\u2602\u2744  for tables inside Markdown(.md) files, using the GFM table extension. Ex: README.md on github.      \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  tsv             \u2744\u2602\ud83c\udf27\u2602\u2744  tab-separated values with a one-line header.                                                        \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  winter_columns  \u2744\u2602\ud83c\udf27\u2602\u2744  Table with a winter-themed separator. Quite Ugly.                                                   \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n````\nNote that the new layout and its description were added the output of `builtin_layouts()` of the new class.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ofirmanor/nicetable", "keywords": "table tabular textual display data formatter ascii", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nicetable", "package_url": "https://pypi.org/project/nicetable/", "platform": "", "project_url": "https://pypi.org/project/nicetable/", "project_urls": {"Homepage": "https://github.com/ofirmanor/nicetable"}, "release_url": "https://pypi.org/project/nicetable/0.7.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A clean and elegant way to print text tables in Python with minimal boilerplate code", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nicetable</h1>\n<ul>\n<li>A clean and elegant way to print text tables in Python with minimal boilerplate code.</li>\n<li>Built with modern Python (including type annotations) and has an extensive test suite. Requires Python 3.6 and up.</li>\n</ul>\n<h2>Quickstart</h2>\n<p>'NiceTable' object is printable. In its simplest form, you just pass your data object to the constructor:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jones Green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mf\">98.8</span><span class=\"p\">,</span> <span class=\"s2\">\"shirt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XL\"</span><span class=\"p\">},</span>\n         <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jill\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>   <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"mi\">1956</span><span class=\"p\">}]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+---------------+-------------+---------+--------------+\n|  name         |  height_cm  |  shirt  |  birth_year  |\n+---------------+-------------+---------+--------------+\n|  Jones Green  |       98.8  |  XL     |        None  |\n|  Jill         |      175.0  |  None   |        1956  |\n+---------------+-------------+---------+--------------+\n</code></pre>\n<p>Note that:</p>\n<ol>\n<li>The input is a list of dicts. A column was generated for each unique key in those dicts.</li>\n<li>String columns are by default left adjusted, and their column width is set automatically by the longest value.</li>\n<li>Numeric columns are nicely well-aligned by the digit to the right (see the height_cm column).</li>\n</ol>\n<p>You can specify a different layout as the second parameter and pass other   formatting options by name.<br>\nYou can also use a dot notation to specify column-level options (by column name or column position).<br>\nFor example, printing as a pipe-delimited CSV, or printing as a regular CSV, without an header line, when None values are printed as 'N/A' only for the 'shirt' column:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jones Green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mf\">98.8</span><span class=\"p\">,</span> <span class=\"s2\">\"shirt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XL\"</span><span class=\"p\">},</span>\n         <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jill\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>   <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"mi\">1956</span><span class=\"p\">}]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">sep_vertical</span><span class=\"o\">=</span><span class=\"s1\">'|'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_col_options</span><span class=\"p\">(</span><span class=\"s1\">'shirt'</span><span class=\"p\">,</span> <span class=\"n\">none_string</span><span class=\"o\">=</span><span class=\"s1\">'N/A'</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>name|height_cm|shirt|birth_year\nJones Green|167.8|XL|None\nJill|175|None|1956\n\nJones Green,167.8,XL,None\nJill,175,N/A,1956\n</code></pre>\n<h3>Working with different input types and column names</h3>\n<h4>List of lists / List of tuples</h4>\n<p>These inputs are interpreted as list of rows, each with a list / tuple of columns values.</p>\n<ul>\n<li>if you <em>DO NOT</em> specify column names, they will be assigned automatically, as 'C001', 'C002' etc:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+--------+--------+--------+--------+--------+\n|  c001  |  c002  |  c003  |  c004  |  c005  |\n+--------+--------+--------+--------+--------+\n|     1  |  None  |  None  |  None  |  None  |\n|     1  |     2  |     3  |  None  |  None  |\n|     1  |     3  |     5  |     7  |     9  |\n+--------+--------+--------+--------+--------+\n</code></pre>\n<ul>\n<li>If you <em>DO</em> specify a list of column names, those will be used instead of the auto-generated names.<br>\nThe next example uses the function <code>NiceTable.builtin_layouts()</code> that returns a list of lists:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"o\">.</span><span class=\"n\">builtin_layouts</span><span class=\"p\">(),</span> <span class=\"n\">col_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Layout'</span><span class=\"p\">,</span> <span class=\"s1\">'Description'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+-----------+------------------------------------------------------------------------------------------------------+\n|  Layout   |  Description                                                                                         |\n+-----------+------------------------------------------------------------------------------------------------------+\n|  csv      |  comma-separated values with a one-line header.                                                      |\n|  default  |  fixed-width table with data auto-alignment.                                                         |\n|  grep     |  tab-separated values with no header. Great for CLI output, easily post-processed by cut, grep etc.  |\n|  md       |  for tables inside Markdown(.md) files, using the GFM table extension. Ex: README.md on github.      |\n|  tsv      |  tab-separated values with a one-line header.                                                        |\n+-----------+------------------------------------------------------------------------------------------------------+\n</code></pre>\n<h4>List of dicts</h4>\n<p>This input is interpreted as list of rows, each with a dict of {column name : column value} pairs.</p>\n<ul>\n<li>If you <em>DO NOT</em> specify column names, they will be collected from the input, as in the first example:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jones Green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mf\">98.8</span><span class=\"p\">,</span> <span class=\"s2\">\"shirt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XL\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jill\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>   <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"mi\">1956</span><span class=\"p\">}]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+---------------+-------------+---------+--------------+\n|  name         |  height_cm  |  shirt  |  birth_year  |\n+---------------+-------------+---------+--------------+\n|  Jones Green  |       98.8  |  XL     |        None  |\n|  Jill         |      175.0  |  None   |        1956  |\n+---------------+-------------+---------+--------------+\n</code></pre>\n<ul>\n<li>If you <em>DO</em> specify a list of column names, <em>ONLY THOSE COLUMNS WILL BE COLLECTED</em>.<br>\nFor example, collecting only three columns, and setting a specific column order:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jones Green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mf\">98.8</span><span class=\"p\">,</span> <span class=\"s2\">\"shirt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XL\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jill\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>   <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"mi\">1956</span><span class=\"p\">}]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">col_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'birth_year'</span><span class=\"p\">,</span> <span class=\"s1\">'height_cm'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+---------------+--------------+-------------+\n|  name         |  birth_year  |  height_cm  |\n+---------------+--------------+-------------+\n|  Jones Green  |        None  |       98.8  |\n|  Jill         |        1956  |      175.0  |\n+---------------+--------------+-------------+\n</code></pre>\n<ul>\n<li>If you want to collect all columns, but provide them a new name, use the <code>rename_columns()</code> function.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jones Green\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mf\">98.8</span><span class=\"p\">,</span> <span class=\"s2\">\"shirt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XL\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Jill\"</span><span class=\"p\">,</span>        <span class=\"s2\">\"height_cm\"</span><span class=\"p\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>   <span class=\"s2\">\"birth_year\"</span><span class=\"p\">:</span> <span class=\"mi\">1956</span><span class=\"p\">}]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rename_columns</span><span class=\"p\">([</span><span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'Height(cm)'</span><span class=\"p\">,</span> <span class=\"s1\">'Shirt Size'</span><span class=\"p\">,</span> <span class=\"s1\">'Year of Birth'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre><code>+---------------+--------------+--------------+-----------------+\n|  Name         |  Height(cm)  |  Shirt Size  |  Year of Birth  |\n+---------------+--------------+--------------+-----------------+\n|  Jones Green  |        98.8  |  XL          |           None  |\n|  Jill         |       175.0  |  None        |           1956  |\n+---------------+--------------+--------------+-----------------+\n</code></pre>\n<h3>Fine-grained NiceTable control</h3>\n<p>Instead of creating a NiceTable object inside a print() statement, you can alternatively:</p>\n<ol>\n<li>Create a standalone NiceTable object, specifying a list of column names.</li>\n<li>Populate it iteratively with the append() function, passing a list, a tuple or a dict, representing a new row.</li>\n<li>Print it multiple times with different formatting.</li>\n</ol>\n<p>This example uses the string <code>NiceTable.SAMPLE_JSON</code>, parses it as JSON, and chery-pick four columns:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">col_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'Type'</span><span class=\"p\">,</span> <span class=\"s1\">'Height(cm)'</span><span class=\"p\">,</span> <span class=\"s1\">'Weight(kg)'</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">pokemon</span> <span class=\"ow\">in</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"o\">.</span><span class=\"n\">SAMPLE_JSON</span><span class=\"p\">):</span>\n    <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">pokemon</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">pokemon</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">],</span> <span class=\"n\">pokemon</span><span class=\"p\">[</span><span class=\"s1\">'height'</span><span class=\"p\">],</span> <span class=\"n\">pokemon</span><span class=\"p\">[</span><span class=\"s1\">'weight'</span><span class=\"p\">]])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"s1\">'md'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>+-------------+----------------+--------------+--------------+\n|  Name       |  Type          |  Height(cm)  |  Weight(kg)  |\n+-------------+----------------+--------------+--------------+\n|  Bulbasaur  |  Grass/Poison  |          70  |       6.901  |\n|  Pikachu    |  Electric      |          40  |       6.100  |\n|  Mewtwo     |  Psychic       |         200  |     122.000  |\n+-------------+----------------+--------------+--------------+\n\n|  Name       |  Type          |  Height(cm)  |  Weight(kg)  |\n|-------------|----------------|--------------|--------------|\n|  Bulbasaur  |  Grass/Poison  |          70  |       6.901  |\n|  Pikachu    |  Electric      |          40  |       6.100  |\n|  Mewtwo     |  Psychic       |         200  |     122.000  |\n</code></pre>\n<h2>Table-level settings</h2>\n<p>Below is the list of the table-level settings, which you can use in the constructor, or set on an existing NiceTable object:</p>\n<table>\n<thead>\n<tr>\n<th>Setting</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>header</td>\n<td>bool</td>\n<td>1</td>\n<td>whether the table header will be printed</td>\n</tr>\n<tr>\n<td>header_sepline</td>\n<td>bool</td>\n<td>1</td>\n<td>if the header is printed, whether a sepline will be printed after it</td>\n</tr>\n<tr>\n<td>header_adjust</td>\n<td>str</td>\n<td>left</td>\n<td>adjust of the column names, one of: ['left', 'center', 'right', 'compact']</td>\n</tr>\n<tr>\n<td>sep_vertical</td>\n<td>str</td>\n<td>|</td>\n<td>a vertical separator string</td>\n</tr>\n<tr>\n<td>sep_horizontal</td>\n<td>str</td>\n<td>-</td>\n<td>a horizontal separator string</td>\n</tr>\n<tr>\n<td>sep_cross</td>\n<td>str</td>\n<td>+</td>\n<td>a crossing separator string (where vertical and horizontal separators meet)</td>\n</tr>\n<tr>\n<td>border_top</td>\n<td>bool</td>\n<td>1</td>\n<td>whether the table top border will be printed</td>\n</tr>\n<tr>\n<td>border_bottom</td>\n<td>bool</td>\n<td>1</td>\n<td>whether the table bottom border will be printed</td>\n</tr>\n<tr>\n<td>border_left</td>\n<td>bool</td>\n<td>1</td>\n<td>whether the table left border will be printed</td>\n</tr>\n<tr>\n<td>border_right</td>\n<td>bool</td>\n<td>1</td>\n<td>whether the table right border will be printed</td>\n</tr>\n<tr>\n<td>cell_adjust</td>\n<td>str</td>\n<td>auto</td>\n<td>adjust of the values, one of: ['auto', 'left', 'center', 'right', 'compact', 'strict_left', 'strict_center', 'strict_right']</td>\n</tr>\n<tr>\n<td>cell_spacing</td>\n<td>int</td>\n<td>2</td>\n<td>number of spaces to add to each side of a value</td>\n</tr>\n<tr>\n<td>value_min_len</td>\n<td>int</td>\n<td>1</td>\n<td>minimal string length of a value. Shorter values will be space-padded</td>\n</tr>\n<tr>\n<td>value_max_len</td>\n<td>int</td>\n<td>9999</td>\n<td>maximum string length of a value</td>\n</tr>\n<tr>\n<td>value_too_long_policy</td>\n<td>str</td>\n<td>wrap</td>\n<td>handling of a string longer than <code>value_max_len</code>, one of: ['truncate', 'wrap']</td>\n</tr>\n<tr>\n<td>value_newline_replace</td>\n<td>str</td>\n<td>None</td>\n<td>if set, replace newlines in string value with this</td>\n</tr>\n<tr>\n<td>value_none_string</td>\n<td>str</td>\n<td>None</td>\n<td>string representation of the None value</td>\n</tr>\n<tr>\n<td>value_escape_type</td>\n<td>str</td>\n<td>ignore</td>\n<td>handling of <code>sep_vertical</code> inside a value, one of: ['remove', 'replace', 'prefix', 'ignore']</td>\n</tr>\n<tr>\n<td>value_escape_char</td>\n<td>str</td>\n<td>\\</td>\n<td>a string to replace or prefix <code>sep_vertical</code>, based on <code>value_escape_type</code></td>\n</tr>\n<tr>\n<td>value_func</td>\n<td>function</td>\n<td>None</td>\n<td>a function to pre-process the value before any other settings apply</td>\n</tr></tbody></table>\n<p><em>The table above was generated from <code>NiceTable.FORMATTING_SETTINGS</code>, using the <code>md</code> layout:</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"o\">.</span><span class=\"n\">FORMATTING_SETTINGS</span><span class=\"p\">,</span>\n                <span class=\"s1\">'md'</span><span class=\"p\">,</span> \n                <span class=\"p\">[</span><span class=\"s1\">'Setting'</span><span class=\"p\">,</span> <span class=\"s1\">'Type'</span><span class=\"p\">,</span> <span class=\"s1\">'Default'</span><span class=\"p\">,</span> <span class=\"s1\">'Description'</span><span class=\"p\">]))</span>\n</pre>\n<h2>Column-level settings</h2>\n<p>The <code>set_col_options()</code> function sets allows you to set the following settings at the column-level:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>adjust</td>\n<td>overrides the table-wide cell_adjust</td>\n</tr>\n<tr>\n<td>max_len</td>\n<td>overrides the table-wide value_max_len</td>\n</tr>\n<tr>\n<td>newline_replace</td>\n<td>overrides the table-wide value_newline_replace</td>\n</tr>\n<tr>\n<td>none_string</td>\n<td>overrides the table-wide value_none_string</td>\n</tr>\n<tr>\n<td>func</td>\n<td>overrides the table-wide value_func</td>\n</tr></tbody></table>\n<p>This function accepts either a column name or a column position for the first parameter. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"o\">.</span><span class=\"n\">SAMPLE_JSON</span><span class=\"p\">))</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">rename_columns</span><span class=\"p\">([</span><span class=\"s1\">'ID'</span><span class=\"p\">,</span><span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'Type'</span><span class=\"p\">,</span> <span class=\"s1\">'Height(cm)'</span><span class=\"p\">,</span> <span class=\"s1\">' Weight(kg)'</span><span class=\"p\">])</span>\n<span class=\"c1\"># set the second column options by position (column positions starts from zero)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">set_col_options</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">adjust</span><span class=\"o\">=</span><span class=\"s1\">'center'</span><span class=\"p\">)</span>\n<span class=\"c1\"># set the third column options by column name</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">set_col_options</span><span class=\"p\">(</span><span class=\"s1\">'Type'</span><span class=\"p\">,</span>\n                    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"s1\">'Electric'</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">none_string</span><span class=\"o\">=</span><span class=\"s1\">'N/A'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>+-------+-------------+----------------+--------------+---------------+\n|  ID   |  Name       |  Type          |  Height(cm)  |   Weight(kg)  |\n+-------+-------------+----------------+--------------+---------------+\n|  001  |  Bulbasaur  |  grass/poison  |          70  |        6.901  |\n|  025  |   Pikachu   |  N/A           |          40  |        6.100  |\n|  150  |    Mewtwo   |  psychic       |         200  |      122.000  |\n+-------+-------------+----------------+--------------+---------------+\n</code></pre>\n<h2>Cell adjustment</h2>\n<ul>\n<li>Cell contents can be adjusted <code>left</code>, <code>center</code> or <code>right</code>, and are space-padded to the width of the longest value in the column (see also next section on wrapping).<br>\nAlternatively, cell contents can be kept as-is with <code>compact</code> adjustment, though it means that the table vertical lines will not align (this is used in some layouts such as <code>csv</code>).</li>\n<li>The default adjustment is <code>auto</code>, meaning that numeric columns (those with only numbers or None values) are adjusted <code>right</code>, and non-numeric columns are adjusted <code>left</code>.</li>\n<li>Numeric columns automatically well-aligned, meaning all their ones digit are printed in the same position.<br>\nTo print them as strings, add a <code>strict_</code> prefix to the adjust, like <code>strict_left</code>. For example:</li>\n</ul>\n<pre><code>+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n|  standard left  |  standard center  |  standard right  |  strict_left  |  strict_center  |  strict_right  |\n+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n|    6.901        |        6.901      |           6.901  |  6.901        |      6.901      |         6.901  |\n|    6.000        |        6.000      |           6.000  |  6            |        6        |             6  |\n|    1.000        |        1.000      |           1.000  |  1            |        1        |             1  |\n|  122.000        |      122.000      |         122.000  |  122          |       122       |           122  |\n+-----------------+-------------------+------------------+---------------+-----------------+----------------+\n</code></pre>\n<p><em>The example above uses long column names on purpose, otherwise <code>left</code>, <code>center</code> and <code>right</code> would look the same,\nas all the numbers in each column have the same fixed width (based on their longest column value).</em></p>\n<h2>Text wrapping and newlines</h2>\n<p><code>NiceTable</code> supports handling long values and newlines in both column names and cell values.</p>\n<h4>Text wrapping</h4>\n<p>When a value is longer than <code>value_max_len</code>, it handled by a <code>value_too_long_policy</code> policy.<br>\nThe default policy is <code>wrap</code>, which means the value will be broken to multiple lines every <code>value_max_len</code> characters.<br>\nAlternatively, specify the <code>truncate</code> policy to have to values truncated.<br>\nThe following examples demonstrates the two policies:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">col_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Code'</span><span class=\"p\">,</span> <span class=\"s1\">'Product Description(Long)'</span><span class=\"p\">])</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Boeing 777. Batteries not included. May contain nuts.'</span><span class=\"p\">])</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'Sack of sand'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">value_max_len</span> <span class=\"o\">=</span> <span class=\"mi\">19</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">value_too_long_policy</span> <span class=\"o\">=</span> <span class=\"s1\">'truncate'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>+--------+---------------------------------------------------------+\n|  Code  |  Product Description(Long)                              |\n+--------+---------------------------------------------------------+\n|     1  |  Boeing 777. Batteries not included. May contain nuts.  |\n|     2  |  Sack of sand                                           |\n+--------+---------------------------------------------------------+\n\n+--------+-----------------------+\n|  Code  |  Product Description  |\n|        |  (Long)               |\n+--------+-----------------------+\n|     1  |  Boeing 777. Batteri  |\n|        |  es not included. Ma  |\n|        |  y contain nuts.      |\n|     2  |  Sack of sand         |\n+--------+-----------------------+\n\n+--------+-----------------------+\n|  Code  |  Product Description  |\n+--------+-----------------------+\n|     1  |  Boeing 777. Batteri  |\n|     2  |  Sack of sand         |\n+--------+-----------------------+\n</code></pre>\n<h4>Newlines</h4>\n<p>When newlines are encountered in a column name or a value, they by default cause the text to wrap.  Alternatively, you can ask that newlines will be replaced, by setting <code>value_newline_replace</code> to an alternative string (default is <code>None</code>).<br>\nThe following example first shows the default behavior, and than shows replacing newlines with the string <code>\\n</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">NiceTable</span><span class=\"p\">(</span><span class=\"n\">col_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Code'</span><span class=\"p\">,</span> <span class=\"s1\">'Product Description</span><span class=\"se\">\\n</span><span class=\"s1\">(Long)'</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Boeing 777</span><span class=\"se\">\\n</span><span class=\"s1\">Batteries not included.</span><span class=\"se\">\\n</span><span class=\"s1\">May contain nuts.'</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'Sack of sand'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">value_newline_replace</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>+--------+---------------------------+\n|  Code  |  Product Description      |\n|        |  (Long)                   |\n+--------+---------------------------+\n|     1  |  Boeing 777               |\n|        |  Batteries not included.  |\n|        |  May contain nuts.        |\n|     2  |  Sack of sand             |\n+--------+---------------------------+\n\n+--------+----------------------------------------------------------+\n|  Code  |  Product Description\\n(Long)                             |\n+--------+----------------------------------------------------------+\n|     1  |  Boeing 777\\nBatteries not included.\\nMay contain nuts.  |\n|     2  |  Sack of sand                                            |\n+--------+----------------------------------------------------------+\n</code></pre>\n<h4>Escaping</h4>\n<p>The values in different columns of the same row are separated by the vertical separator string (default is <code>|</code>, set by the <code>sep_vertical</code> property).<br>\nWhat happens if the content of a cell contains that string? It might be irrelevant if the output is just viewed by a person, but it might matter if the string output will be processed by another program (for example, for the <code>CSV</code> layout).<br>\nThere are four supported behaviors you can choose from, if the one set by the layout you picked is not appropriate:</p>\n<ol>\n<li><strong>ignore</strong>: no special handling of the vertical separator in a a cell, it is printed as is.\nThis is the default escaping behavior.</li>\n<li><strong>remove</strong>: the vertical separator is removed.<br>\nThis is set by the <code>csv</code> layout and its derivatives (<code>tsv</code> and <code>grep</code> layouts).</li>\n<li><strong>prefix</strong>: the vertical separator is prefixed by another string, controlled by <code>value_escape_char</code>.<br>\nThis is set by the <code>md</code> layout, which uses <code>\\</code> as a prefix.</li>\n<li><strong>replace</strong>: the vertical separator is prefixed by another string, controlled by <code>value_escape_char</code>.</li>\n</ol>\n<h2>Others</h2>\n<p><strong>get_column(col)</strong><br>\nreturns a <code>List</code> of the column values.</p>\n<h2>Adding a custom layout</h2>\n<p>To add a custom layout based on the existing options, you can inherit from <code>NiceTable</code>\nand define your own layout function.<br>\nThe description of your function will be incorporated in the <code>builtin_layouts()</code> output</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nicetable.nicetable</span> <span class=\"kn\">import</span> <span class=\"n\">NiceTable</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyNiceTable</span><span class=\"p\">(</span><span class=\"n\">NiceTable</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_layout_as_winter_columns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"Table with a winter-themed separator. Quite Ugly.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep_vertical</span> <span class=\"o\">=</span> <span class=\"s1\">'\u2744\u2602\ud83c\udf27\u2602\u2744'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep_cross</span> <span class=\"o\">=</span> <span class=\"s1\">'\u2744\u2602\ud83c\udf27\u2602\u2744'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep_horizontal</span> <span class=\"o\">=</span> <span class=\"s1\">'\u02e3'</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">MyNiceTable</span><span class=\"p\">(</span><span class=\"n\">MyNiceTable</span><span class=\"o\">.</span><span class=\"n\">builtin_layouts</span><span class=\"p\">(),</span>\n                  <span class=\"s1\">'winter_columns'</span><span class=\"p\">,</span>\n                  <span class=\"p\">[</span><span class=\"s1\">'Layout'</span><span class=\"p\">,</span> <span class=\"s1\">'Description'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre><code>\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  Layout          \u2744\u2602\ud83c\udf27\u2602\u2744  Description                                                                                         \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  csv             \u2744\u2602\ud83c\udf27\u2602\u2744  comma-separated values with a one-line header.                                                      \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  default         \u2744\u2602\ud83c\udf27\u2602\u2744  fixed-width table with data auto-alignment.                                                         \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  grep            \u2744\u2602\ud83c\udf27\u2602\u2744  tab-separated values with no header. Great for CLI output, easily post-processed by cut, grep etc.  \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  md              \u2744\u2602\ud83c\udf27\u2602\u2744  for tables inside Markdown(.md) files, using the GFM table extension. Ex: README.md on github.      \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  tsv             \u2744\u2602\ud83c\udf27\u2602\u2744  tab-separated values with a one-line header.                                                        \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744  winter_columns  \u2744\u2602\ud83c\udf27\u2602\u2744  Table with a winter-themed separator. Quite Ugly.                                                   \u2744\u2602\ud83c\udf27\u2602\u2744\n\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u02e3\u2744\u2602\ud83c\udf27\u2602\u2744\n</code></pre>\n<p>Note that the new layout and its description were added the output of <code>builtin_layouts()</code> of the new class.</p>\n\n          </div>"}, "last_serial": 5468260, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "ae1f24f39a645d8b822090031dfa137c", "sha256": "5c9d5c67b0887a0c8df554c4bd035022f96a6b411fc65dacd680c3174881fa01"}, "downloads": -1, "filename": "nicetable-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ae1f24f39a645d8b822090031dfa137c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14981, "upload_time": "2019-01-06T19:04:23", "upload_time_iso_8601": "2019-01-06T19:04:23.730280Z", "url": "https://files.pythonhosted.org/packages/aa/d8/8035ac9530fe8494e6200cf6c1cf1e703a7ab63e6821b086ef0480726303/nicetable-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "947c0299b285f1e311608f425da9bb39", "sha256": "f011eca682d6e88c99e075ae7f364689eecb87a2bb1398a944be10b559123c03"}, "downloads": -1, "filename": "nicetable-0.5.2.tar.gz", "has_sig": false, "md5_digest": "947c0299b285f1e311608f425da9bb39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15145, "upload_time": "2019-01-06T19:04:26", "upload_time_iso_8601": "2019-01-06T19:04:26.293746Z", "url": "https://files.pythonhosted.org/packages/4d/25/611e08a5f485a574104265a73de727f4b258160d277acd6c4ccb7d301378/nicetable-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "24d0df302f12f32d63e8542f76a4f0ba", "sha256": "3d36dddce0d2856f2640dfe2f2ed2f482625e6ab96058f84b71d7e52467c3cca"}, "downloads": -1, "filename": "nicetable-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24d0df302f12f32d63e8542f76a4f0ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19154, "upload_time": "2019-01-14T13:45:29", "upload_time_iso_8601": "2019-01-14T13:45:29.146613Z", "url": "https://files.pythonhosted.org/packages/b5/b6/5679afb52f98c11c4cfac9e9e0e1ecbdb46d89dd31e087dbf48559ace28c/nicetable-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e6c12f88cc37b3cbdf1a759bc169b93", "sha256": "f47cb05f0b7c962956069fd7273c7da9b5f5c8a2b819615a61d064fca679a928"}, "downloads": -1, "filename": "nicetable-0.6.0.tar.gz", "has_sig": false, "md5_digest": "3e6c12f88cc37b3cbdf1a759bc169b93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20202, "upload_time": "2019-01-14T13:45:30", "upload_time_iso_8601": "2019-01-14T13:45:30.890807Z", "url": "https://files.pythonhosted.org/packages/34/e3/d83dffa67cd77343060250f1edf543178044b0f2d0afeac3851fa72a2456/nicetable-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "c638dfef616f846772003adae8da8887", "sha256": "6152e77b7a06247ef672ecf50d09bf31d88e5958cedd3d880a02dadbf915c258"}, "downloads": -1, "filename": "nicetable-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c638dfef616f846772003adae8da8887", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21056, "upload_time": "2019-06-30T16:06:12", "upload_time_iso_8601": "2019-06-30T16:06:12.058418Z", "url": "https://files.pythonhosted.org/packages/a8/38/5a6117d6565148ced92b7e96edaa824d6c6ee8f1e0cd989dd3bb440fcc2f/nicetable-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e193ae7455cd72648f9e8e726e3edd1", "sha256": "f9851ce69c2e820303bb8265432c85a50b73760faff85d2e8f1fa9be8c833a88"}, "downloads": -1, "filename": "nicetable-0.7.0.tar.gz", "has_sig": false, "md5_digest": "6e193ae7455cd72648f9e8e726e3edd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19365, "upload_time": "2019-06-30T16:06:13", "upload_time_iso_8601": "2019-06-30T16:06:13.858790Z", "url": "https://files.pythonhosted.org/packages/95/8e/56dc71f653d40bd079c8778fb8209008f21853cad6d023217ae785aea424/nicetable-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c638dfef616f846772003adae8da8887", "sha256": "6152e77b7a06247ef672ecf50d09bf31d88e5958cedd3d880a02dadbf915c258"}, "downloads": -1, "filename": "nicetable-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c638dfef616f846772003adae8da8887", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21056, "upload_time": "2019-06-30T16:06:12", "upload_time_iso_8601": "2019-06-30T16:06:12.058418Z", "url": "https://files.pythonhosted.org/packages/a8/38/5a6117d6565148ced92b7e96edaa824d6c6ee8f1e0cd989dd3bb440fcc2f/nicetable-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e193ae7455cd72648f9e8e726e3edd1", "sha256": "f9851ce69c2e820303bb8265432c85a50b73760faff85d2e8f1fa9be8c833a88"}, "downloads": -1, "filename": "nicetable-0.7.0.tar.gz", "has_sig": false, "md5_digest": "6e193ae7455cd72648f9e8e726e3edd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19365, "upload_time": "2019-06-30T16:06:13", "upload_time_iso_8601": "2019-06-30T16:06:13.858790Z", "url": "https://files.pythonhosted.org/packages/95/8e/56dc71f653d40bd079c8778fb8209008f21853cad6d023217ae785aea424/nicetable-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:26 2020"}