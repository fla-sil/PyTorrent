{"info": {"author": "Globus Team", "author_email": "support@globus.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Communications :: File Sharing", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Multiprovider Authentication\n\nMultiprovider Authentication is an easy to setup authentication middleware with support for\n[Django REST Framework][drf] and multiple OAuth2/OIDC Identity Providers that issue opaque\nor JWT access tokens, e.g. [Auth0][auth0], [Globus][globus], etc.\n\n## Rationale\n\nMany authentication middleware packages have been writted for Django REST Framework with\nsupport for OAuth2 opaque or JWT token. Most popular ones are listed with a short description\non [Django REST Framework - Authentication][drf_auth]. But all of them that support opaque tokens\nrequire access to the Identity Provider database to verify the access tokens. Or they cannot be\nstack up with other authentication classes to authenticate a bearer token against multiple\nIdentity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all\nIdentity Providers that issue JWT tokens and [Globus][globus] that issues opaque access tokens. Support\nfor other Identity Providers can easily be added by creating a new backend in `mp_auth/backends`.\nEach backend can be used separately as an Django REST Framework authentication class, or can be a part of\nlist of authentication class that Django REST Framework will go through to authenticate an HTTP request.\n`mp_auth.backend.mp.MultiproviderAuthentication` is a special authentication class that calls all\nauthentication classes configured in `settings.py`.\n\n## Setup\n\nInstall the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)\n```shell\npip install mp-auth\n```\nand in `settings.py` set the following:\n```python\nINSTALLED_APPS [\n    ...\n    'mp_auth',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'mp_auth.backends.mp.MultiproviderAuthentication',\n    )\n}\n\nMULTIPROVIDER_AUTH = {\n    \"BearerTokens\": {\n        \"globus\": {\n            \"scope\": [<scopes>],\n            \"aud\": <audience>\n        }\n    },\n    \"JWT\": {\n        <issuer>\": {\n            \"aud\": <audience>\n        }\n    }\n}\n\nGLOBUS_CLIENT_ID = <OAuth2 client id>\nGLOBUS_CLIENT_SECRET = <OAuth2 client secret>\n```\nThen any view can be protected by `JWTAuthentication` or `GlobusAuthentication`, or, if you want to\nauthenticate an HTTP request against both `JWTAuthentication` or `GlobusAuthentication`, by\n `MultiproviderAuthentication` class.\n```\nfrom mp_auth.backends.mp import MultiproviderAuthentication\n\nclass MyAPIView(APIView):\n    authentication_classes = (MultiproviderAuthentication,)\n    renderer_classes = (JSONRenderer,)\n\n    def get(self, request, format=None):\n        user = request.user\n        return Response({\"username\": user.username})\n```\n\n[drf]: http://www.django-rest-framework.org/\n[auth0]: https://auth0.com/\n[globus]: https://globus.org/\n[drf_auth]: http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "globus,django", "license": "apache 2.0", "maintainer": "", "maintainer_email": "", "name": "mp-auth", "package_url": "https://pypi.org/project/mp-auth/", "platform": "", "project_url": "https://pypi.org/project/mp-auth/", "project_urls": null, "release_url": "https://pypi.org/project/mp-auth/0.3/", "requires_dist": ["cryptography", "PyJWT", "requests", "django", "djangorestframework"], "requires_python": ">=3.0", "summary": "Add Multi-provider auth for various providers", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multiprovider Authentication</h1>\n<p>Multiprovider Authentication is an easy to setup authentication middleware with support for\n<a href=\"http://www.django-rest-framework.org/\" rel=\"nofollow\">Django REST Framework</a> and multiple OAuth2/OIDC Identity Providers that issue opaque\nor JWT access tokens, e.g. <a href=\"https://auth0.com/\" rel=\"nofollow\">Auth0</a>, <a href=\"https://globus.org/\" rel=\"nofollow\">Globus</a>, etc.</p>\n<h2>Rationale</h2>\n<p>Many authentication middleware packages have been writted for Django REST Framework with\nsupport for OAuth2 opaque or JWT token. Most popular ones are listed with a short description\non <a href=\"http://www.django-rest-framework.org/api-guide/authentication/#third-party-packages\" rel=\"nofollow\">Django REST Framework - Authentication</a>. But all of them that support opaque tokens\nrequire access to the Identity Provider database to verify the access tokens. Or they cannot be\nstack up with other authentication classes to authenticate a bearer token against multiple\nIdentity Providers. The Multiprovider Authentication middleware fills up the gap. It supports all\nIdentity Providers that issue JWT tokens and <a href=\"https://globus.org/\" rel=\"nofollow\">Globus</a> that issues opaque access tokens. Support\nfor other Identity Providers can easily be added by creating a new backend in <code>mp_auth/backends</code>.\nEach backend can be used separately as an Django REST Framework authentication class, or can be a part of\nlist of authentication class that Django REST Framework will go through to authenticate an HTTP request.\n<code>mp_auth.backend.mp.MultiproviderAuthentication</code> is a special authentication class that calls all\nauthentication classes configured in <code>settings.py</code>.</p>\n<h2>Setup</h2>\n<p>Install the Multiprovider Authentication middleware for Django REST Framework (Python 3 is required)</p>\n<pre>pip install mp-auth\n</pre>\n<p>and in <code>settings.py</code> set the following:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'mp_auth'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'mp_auth.backends.mp.MultiproviderAuthentication'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">MULTIPROVIDER_AUTH</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"BearerTokens\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"globus\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"scope\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">scopes</span><span class=\"o\">&gt;</span><span class=\"p\">],</span>\n            <span class=\"s2\">\"aud\"</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">audience</span><span class=\"o\">&gt;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"JWT\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">issuer</span><span class=\"o\">&gt;</span><span class=\"s2\">\": {</span>\n            <span class=\"s2\">\"aud\"</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">audience</span><span class=\"o\">&gt;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">GLOBUS_CLIENT_ID</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">OAuth2</span> <span class=\"n\">client</span> <span class=\"nb\">id</span><span class=\"o\">&gt;</span>\n<span class=\"n\">GLOBUS_CLIENT_SECRET</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">OAuth2</span> <span class=\"n\">client</span> <span class=\"n\">secret</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Then any view can be protected by <code>JWTAuthentication</code> or <code>GlobusAuthentication</code>, or, if you want to\nauthenticate an HTTP request against both <code>JWTAuthentication</code> or <code>GlobusAuthentication</code>, by\n<code>MultiproviderAuthentication</code> class.</p>\n<pre><code>from mp_auth.backends.mp import MultiproviderAuthentication\n\nclass MyAPIView(APIView):\n    authentication_classes = (MultiproviderAuthentication,)\n    renderer_classes = (JSONRenderer,)\n\n    def get(self, request, format=None):\n        user = request.user\n        return Response({\"username\": user.username})\n</code></pre>\n\n          </div>"}, "last_serial": 6392698, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "68c1f27c2142f1e34cee820e28bda2d4", "sha256": "c9b562c3e240fcc4f69df062b24f0a1a4c957f83fc01d3bcabdb8dd628d361df"}, "downloads": -1, "filename": "mp_auth-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "68c1f27c2142f1e34cee820e28bda2d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 8208, "upload_time": "2020-01-02T23:52:57", "upload_time_iso_8601": "2020-01-02T23:52:57.773433Z", "url": "https://files.pythonhosted.org/packages/80/d3/f340674b5374786607807001cd8d13acbf9181228ef9023ab51cff027c93/mp_auth-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "268ad66c19d35630c1edf14e73e86869", "sha256": "b1f25bdadd2f24babb2ee2465156b7ddebf4e79f140d743af0506e15dc160cf0"}, "downloads": -1, "filename": "mp_auth-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "268ad66c19d35630c1edf14e73e86869", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 13943, "upload_time": "2020-01-03T21:11:34", "upload_time_iso_8601": "2020-01-03T21:11:34.618477Z", "url": "https://files.pythonhosted.org/packages/12/18/dcaaf1b6987af05641b625ba3117f60ea88733f8304299e092951a862901/mp_auth-0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "268ad66c19d35630c1edf14e73e86869", "sha256": "b1f25bdadd2f24babb2ee2465156b7ddebf4e79f140d743af0506e15dc160cf0"}, "downloads": -1, "filename": "mp_auth-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "268ad66c19d35630c1edf14e73e86869", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 13943, "upload_time": "2020-01-03T21:11:34", "upload_time_iso_8601": "2020-01-03T21:11:34.618477Z", "url": "https://files.pythonhosted.org/packages/12/18/dcaaf1b6987af05641b625ba3117f60ea88733f8304299e092951a862901/mp_auth-0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:20 2020"}