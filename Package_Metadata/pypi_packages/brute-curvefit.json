{"info": {"author": "Anal Kumar", "author_email": "analkumar2@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "This is a simple script which tries to find the global minima using scipy.optimize.curve_fit as well as a parameter search over the parameter space.\nIt first generates ntol random models, then selects ntol*returnnfactor best models and does scipy.optimize.curve_fit on all of them. It then returns the best model of them all.\nThis script improves scipy.optimize.curve_fit in two ways - No need to give initial values and thus getting global minima instead of local minima. And second, it automatically normalize and standardizes the data.\n\nFUTURE:\n1. Parallelize\n2. Use Genetic algorithm instead of brute-force\n\nUSAGE EXAMPLE:\nimport brute_curvefit as bf\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef yourfunc(x, A,B,C):\n\treturn (x-A)/B +C\n\nparams, error = bf.brute_then_scipy(func=yourfunc, x=np.arange(100), y=np.arange(100)**2, restrict=[[-1000,-1000,-1000],[1000,1000,1000]])\nplt.plot(np.arange(100), np.arange(100)**2) #plotting data\nplt.plot(np.arange(100), yourfunc(np.arange(100), *params)) #plotting the fitted function\nplt.show()\n#As simple as that\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/analkumar2/brute_force", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "brute-curvefit", "package_url": "https://pypi.org/project/brute-curvefit/", "platform": "", "project_url": "https://pypi.org/project/brute-curvefit/", "project_urls": {"Homepage": "https://github.com/analkumar2/brute_force"}, "release_url": "https://pypi.org/project/brute-curvefit/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Curve fitting using both brute force and scipy.optimize", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a simple script which tries to find the global minima using scipy.optimize.curve_fit as well as a parameter search over the parameter space.\nIt first generates ntol random models, then selects ntol*returnnfactor best models and does scipy.optimize.curve_fit on all of them. It then returns the best model of them all.\nThis script improves scipy.optimize.curve_fit in two ways - No need to give initial values and thus getting global minima instead of local minima. And second, it automatically normalize and standardizes the data.</p>\n<p>FUTURE:</p>\n<ol>\n<li>Parallelize</li>\n<li>Use Genetic algorithm instead of brute-force</li>\n</ol>\n<p>USAGE EXAMPLE:\nimport brute_curvefit as bf\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef yourfunc(x, A,B,C):\nreturn (x-A)/B +C</p>\n<p>params, error = bf.brute_then_scipy(func=yourfunc, x=np.arange(100), y=np.arange(100)**2, restrict=[[-1000,-1000,-1000],[1000,1000,1000]])\nplt.plot(np.arange(100), np.arange(100)**2) #plotting data\nplt.plot(np.arange(100), yourfunc(np.arange(100), *params)) #plotting the fitted function\nplt.show()\n#As simple as that</p>\n\n          </div>"}, "last_serial": 6416783, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "36073189c9255ad36509ad1a2adb422b", "sha256": "107253c9cbd82f12f53d07676a93a3f6663ebcf7dd6739895b59bbb647cf28dd"}, "downloads": -1, "filename": "brute_curvefit-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "36073189c9255ad36509ad1a2adb422b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4149, "upload_time": "2019-12-17T08:46:42", "upload_time_iso_8601": "2019-12-17T08:46:42.168392Z", "url": "https://files.pythonhosted.org/packages/8e/d8/6fb097835785ccefea5f9a68dbe29fdcfa8c8c43b25eef640eea2c9c2568/brute_curvefit-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "7500fba045c64c9631392b2d4e59ef09", "sha256": "5a35149c7b54ee18c75c4f55df8e2ea3a8ebad5dea4d7a3c686c2f6af2fd4134"}, "downloads": -1, "filename": "brute_curvefit-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7500fba045c64c9631392b2d4e59ef09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4153, "upload_time": "2019-12-17T08:47:41", "upload_time_iso_8601": "2019-12-17T08:47:41.750452Z", "url": "https://files.pythonhosted.org/packages/e7/5c/a22f773609839240f657e3d5baa01f9f4d858529ad54cdecd0ec85c123cc/brute_curvefit-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "508660c49373acd7e6a6377dcf29a5c8", "sha256": "9bb574060f0cdc7dea7b2dbc803f4eddc5ddf3aef6cfd8b401f4ecd5afd5c0a4"}, "downloads": -1, "filename": "brute_curvefit-0.0.3.tar.gz", "has_sig": false, "md5_digest": "508660c49373acd7e6a6377dcf29a5c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2726, "upload_time": "2019-12-17T08:47:43", "upload_time_iso_8601": "2019-12-17T08:47:43.402805Z", "url": "https://files.pythonhosted.org/packages/b0/83/b441869240d58aee0ba7aead82e13264d746bbe839d18b83e361383ba6a7/brute_curvefit-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "06fe44767fcc96889fb4e0d1aaecc04c", "sha256": "42655a40a999d59a8375dc8be95eaea128323e2e70842ec9a22c56d757d5ff3a"}, "downloads": -1, "filename": "brute_curvefit-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "06fe44767fcc96889fb4e0d1aaecc04c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4807, "upload_time": "2020-01-08T18:32:17", "upload_time_iso_8601": "2020-01-08T18:32:17.502664Z", "url": "https://files.pythonhosted.org/packages/62/05/30c424c1ecd16203b35e7201d848a03a30012857fe2808aa23005080526c/brute_curvefit-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39b3021f08513682695b21673f2ffd6e", "sha256": "94124af5acfcc56efbc2d8a262327027218201148636222d63682ae983083f93"}, "downloads": -1, "filename": "brute_curvefit-0.0.4.tar.gz", "has_sig": false, "md5_digest": "39b3021f08513682695b21673f2ffd6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3421, "upload_time": "2020-01-08T18:32:19", "upload_time_iso_8601": "2020-01-08T18:32:19.950779Z", "url": "https://files.pythonhosted.org/packages/85/f2/802424624b4f775cf2208596f536653ced71742121d5ebd505f89142c02d/brute_curvefit-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06fe44767fcc96889fb4e0d1aaecc04c", "sha256": "42655a40a999d59a8375dc8be95eaea128323e2e70842ec9a22c56d757d5ff3a"}, "downloads": -1, "filename": "brute_curvefit-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "06fe44767fcc96889fb4e0d1aaecc04c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4807, "upload_time": "2020-01-08T18:32:17", "upload_time_iso_8601": "2020-01-08T18:32:17.502664Z", "url": "https://files.pythonhosted.org/packages/62/05/30c424c1ecd16203b35e7201d848a03a30012857fe2808aa23005080526c/brute_curvefit-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39b3021f08513682695b21673f2ffd6e", "sha256": "94124af5acfcc56efbc2d8a262327027218201148636222d63682ae983083f93"}, "downloads": -1, "filename": "brute_curvefit-0.0.4.tar.gz", "has_sig": false, "md5_digest": "39b3021f08513682695b21673f2ffd6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3421, "upload_time": "2020-01-08T18:32:19", "upload_time_iso_8601": "2020-01-08T18:32:19.950779Z", "url": "https://files.pythonhosted.org/packages/85/f2/802424624b4f775cf2208596f536653ced71742121d5ebd505f89142c02d/brute_curvefit-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:13 2020"}