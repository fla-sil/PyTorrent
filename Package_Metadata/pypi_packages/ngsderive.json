{"info": {"author": "Clay McLeod", "author_email": "Clay.McLeod@STJUDE.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# ngsderive\n\n[![PyPI Version](https://img.shields.io/pypi/v/ngsderive.svg)](https://pypi.python.org/pypi/ngsderive/)\n[![PyPI Python Versions](https://img.shields.io/pypi/pyversions/ngsderive.svg)](https://pypi.python.org/pypi/ngsderive/)\n[![PyPI Project Status](https://img.shields.io/pypi/status/ngsderive.svg)](https://pypi.python.org/pypi/ngsderive/)\n\n\n[![CI\nstatus](https://github.com/claymcleod/ngsderive/workflows/CI/badge.svg)](https://github.com/claymcleod/ngsderive/actions)\n\n`ngsderive` is a forensic analysis tool useful in backwards computing information \nfrom next-generation sequencing data. Notably, results are provided as a 'best guess' \u2014 the tool does \nnot claim 100% accuracy and results should be considered with that understanding.\n\nNote that this utility only implements commands which were not available at the \ntime of writing in common NGS utilities (e.g. [Picard](https://broadinstitute.github.io/picard/)).\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your\nlocal machine for development and testing purposes. See deployment for notes on\nhow to deploy the project on a live system.\n\n### Installing\n\nTo get started with `ngsderive`, you can install it using pip:\n\n```bash\npip install git+https://github.com/claymcleod/ngsderive.git\n```\n\n### Development\n\nTo get started on a development version of the code, just run the following:\n\n```bash\nconda create -n ngsderive-dev python=3.7 poetry -y\nconda activate ngsderive-dev\ngit clone git@github.com:claymcleod/ngsderive.git\ncd ngsderive\npoetry install\n```\n## Usage\n\n### Illumina machine type\n\nThe `instrument` subcommand will attempt to backward compute the machine that\ngenerated a NGS file using (1) the instrument id(s) and (2) the flowcell id(s). \n\n### Limitations\n\n* This command may not comprehensively detect the correct machines as there is\n  no published catalog of Illumina serial numbers. As we encounter more serial\n  numbers in practice, we update this code.\n\n### Read length calculation\n\nThe `readlen` subcommand can be used to compute the read length used during\nsequencing can be estimated (or reported as inconclusive). At the time of\nwriting, the algorithm used is roughly:\n\n1. Compute distribution of read lengths for the first `--n-samples` reads in a\n   file.\n2. Assuming read length in the file can only decrease from the actual read\n   length (from adapter trimming or similar), the putative maximum read length\n   is considered to be the highest detected read length.\n3. If the percentage of reads that are evidence for the putative maximum read\n   length makes up at least `--majority-vote-cutoff`% of the reads, the putative\n   read length is considered to be confirmed. If not, the consensus read length\n   will be return as -1 (could not determine).\n   1. For example, if 100bp is the maximum read length detected and 85% percent\n      of the reads support that claim, then we considered 100bp as the consensus\n      read length. If only 30% of the reads indicated 100bp, the tool cannot\n      report a consensus).\n\n### Strandedness inference\n\nThe `strandedness` subcommand can be used to determine strandedness of RNA-Seq\nsamples. Note that due to the need to (1) to examine the alignment status of a\nread [not included in FASTQ] and (2) fetch regions using random access [not\navailable with SAM files], only BAM files are currently supported for this\nsubcommand.\n\nStrandedness can estimated by observing the following characteristics of a\nparticular read:\n\n* Whether the read is read 1 or read 2 (\"read ordinal\").\n* Whether the read was aligned to the + or - strand (\"read strand\")\n* Given a gene model, whether a feature of interest (usually a gene) falls on\n  the + or - strand (\"gene strand\").\n\nA shorthand notation for the state of a read can be achieved by simply\nconcatenating the three characteristics above (e.g., `1+-` means that a read 1\nwas aligned to the positive strand and a gene was observed at the same location\non the negative strand).\n\nGiven the notation above, the following lookup table can be used to see whether\na read is evidence for forward-strandedness or reverse-strandedness:\n\n| Patterns                   | Evidence for strandedness type |\n| -------------------------- | ------------------------------ |\n| `1++`, `1--`, `2+-`, `2-+` | Forward                        |\n| `2++`, `2--`, `1+-`, `1-+` | Reverse                        |\n\nBy default, the strandedness check is designed to work with the\n[GENCODE][gencode-website] geneset. Either a GTF or GFF file can be used as the\ngene model \u2014 you can use the following one liner to prepare the latest geneset\nfor hg38.\n\n```bash\n\n# hg38\ncurl ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gff3.gz | gunzip -c | sort -k1,1 -k4,4n -k5,5n | bgzip > gencode.v32.annotation.gff3.gz\ntabix -p gff gencode.v32.annotation.gff3.gz\n```\n\nIf you would like to use the script on hg19, it takes a little more finesse (given the different formats of the attribute column between versions):\n\n```bash\n# hg19\ncurl ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/GRCh37_mapping/gencode.v32lift37.annotation.gtf.gz | gunzip -c | sort -k1,1 -k4,4n -k5,5n | python <(cat \n<<END    \nimport re \nimport sys\n\nfor line in [l.strip() for l in sys.stdin]:\n  if line.startswith(\"#\"):\n    print(line)                     \n  else:                       \n    columns = line.split('\\t')\n    if len(columns) != 9:                                                    \n      raise RuntimeError(\"Unexpected column number: {}\".format(len(columns)))\n    \n    print('\\t'.join(columns[0:8]), end=\"\\t\")\n    \n    attrs_post = []\n    for attr in columns[8].split(\";\"):                        \n      groups = re.match(r\"\\s?(\\S+) (\\S+)\\s?\", attr)\n      if groups:             \n        key = groups.group(1)                    \n        value = groups.group(2).replace(\"\\\"\", \"\").replace(\" \", \",\")\n        attrs_post.append(key + \"=\" + value)\n\n    print(\";\".join(attrs_post))\nEND\n) | sed 's/^chrM/chrMT/g' | sed 's/^chr//g' | bgzip > gencode.v32lift37.annotation.gtf.gz\ntabix -p gff gencode.v32lift37.annotation.gtf.gz\n```\n\nAt the time of writing, the algorithm works roughly like this:\n\n1. The gene model is read in and only `gene` features are retained.\n2. For `--n-genes` times, a randomly sampled gene is selected from the gene\n   model. The gene must pass a quality check. Of particular interest,\n   1. The gene must not be an overlapping feature on the opposite strand which\n      would present ambiguous results.\n   2. *Optionally*, the gene must be a protein coding gene.\n   3. *Optionally*, the gene must have at least `--minimum-reads-per-gene`\n      minimum reads per gene.\n3. All of the reads from that region of the genome are extracted and put through\n   several quality filters including but not limited to:\n   1. The read must not be marked as QC-failed.\n   2. The read must not be marked as a duplicate.\n   3. The read must not be marked as secondary.\n   4. The read must not be unmapped.\n   5. *Optionally*, the read have a minimum MAPQ score.\n4. For all reads that pass the above filters, compute the evidence and tally\n   results.\n\nThis lookup table is used for the classification of strandedness based on the evidence:\n\n| Lookup                            | Value              |\n| --------------------------------- | ------------------ |\n| 40% <= `forward_reads_pct` <= 60% | `Unstranded`       |\n| 80% <= `forward_reads_pct`        | `Stranded-Forward` |\n| 80% <= `reverse_reads_pct`        | `Stranded-Reverse` |\n| Else                              | `Inconclusive`     |\n\nThe tool will repeat the strandedness test at most `--max-tries` times to try to find a\nnon-`Inconclusive`prediction.\n\n### Differences from popular methods\n\nThe most popular strandedness inference tool that the author is aware of is\nRSeQC's\n[infer_experiment.py](http://rseqc.sourceforge.net/#infer-experiment-py). The\nmain difference is that RSeQC starts at the beginning of the BAM file and takes\nthe first `n` reads that match its criteria. If the BAM is coordinate sorted,\nthis would mean its not uncommon to have all of the evidence at the beginning of\n`chr1`. Anecdotally, this method differs in that it is slightly slower than\n`infer_experiment.py` but is expected to be more robust to biases caused by\nwhich reads are sampled.\n\n\n### Limitations\n\n* Does not yet work with single-end data (simply because the author doesn't have\n  any on hand). The tool will throw an error if any unpaired reads are\n  discovered (let us know in the issues if you need this supported).\n* Though hundreds of Unstranded and Stranded-Reverse data has been tested and\n  verified, Stranded-Forward data has not been tested to work with this tool\n  (simply because the author doesn't have on hand). We do not anticipate any\n  issues since Stranded-Reverse is working well.\n\n## Running the tests\n\n```bash\n> py.test\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of\nconduct, and the process for submitting pull requests to us.\n\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags).\n\n## License\n\nThis project is licensed as follows:\n* All code related to the `instrument` subcommand is licensed under the [AGPL\n  v2.0][agpl-v2]. This is not due any strict requirement, but out of deference\n  to some [code][10x-inspiration] I drew inspiration from (and copied patterns\n  from), the decision was made to license this code consistently.\n* The rest of the project is licensed under the MIT License - see the\n  [LICENSE.md](LICENSE.md) file for details.\n\n[10x-inspiration]:\nhttps://github.com/10XGenomics/supernova/blob/master/tenkit/lib/python/tenkit/illumina_instrument.py\n[agpl-v2]: http://www.affero.org/agpl2.html\n[gencode-website]:\nhttps://www.gencodegenes.org/\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/claymcleod/ngsderive", "keywords": "bioinformatics,genomics,sam,bam,fastq", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ngsderive", "package_url": "https://pypi.org/project/ngsderive/", "platform": "", "project_url": "https://pypi.org/project/ngsderive/", "project_urls": {"Homepage": "https://github.com/claymcleod/ngsderive", "Repository": "https://github.com/claymcleod/ngsderive"}, "release_url": "https://pypi.org/project/ngsderive/1.0.2/", "requires_dist": ["colorlog (>=4.0.2,<5.0.0)", "pysam (>=0.15.3,<0.16.0)", "pytabix (>=0.0.2,<0.0.3)", "rstr (>=2.2.6,<3.0.0)"], "requires_python": ">=3.7,<4.0", "summary": "Forensic analysis tool useful in backwards computing information from next-generation sequencing data.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ngsderive</h1>\n<p><a href=\"https://pypi.python.org/pypi/ngsderive/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e7d2b24da07d4fb22f6d4c4309148a5826c0837/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e67736465726976652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/ngsderive/\" rel=\"nofollow\"><img alt=\"PyPI Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cf0f0a79a863de168f1707cb792e7267685a83a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e67736465726976652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/ngsderive/\" rel=\"nofollow\"><img alt=\"PyPI Project Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e545f91980513da53d76333a44e36dfafbab6507/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6e67736465726976652e737667\"></a></p>\n<p><a href=\"https://github.com/claymcleod/ngsderive/actions\" rel=\"nofollow\"><img alt=\"CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3d45ea7467d3d4845515aea139ec1a695b91e3a/68747470733a2f2f6769746875622e636f6d2f636c61796d636c656f642f6e67736465726976652f776f726b666c6f77732f43492f62616467652e737667\"></a></p>\n<p><code>ngsderive</code> is a forensic analysis tool useful in backwards computing information\nfrom next-generation sequencing data. Notably, results are provided as a 'best guess' \u2014 the tool does\nnot claim 100% accuracy and results should be considered with that understanding.</p>\n<p>Note that this utility only implements commands which were not available at the\ntime of writing in common NGS utilities (e.g. <a href=\"https://broadinstitute.github.io/picard/\" rel=\"nofollow\">Picard</a>).</p>\n<h2>Getting Started</h2>\n<p>These instructions will get you a copy of the project up and running on your\nlocal machine for development and testing purposes. See deployment for notes on\nhow to deploy the project on a live system.</p>\n<h3>Installing</h3>\n<p>To get started with <code>ngsderive</code>, you can install it using pip:</p>\n<pre>pip install git+https://github.com/claymcleod/ngsderive.git\n</pre>\n<h3>Development</h3>\n<p>To get started on a development version of the code, just run the following:</p>\n<pre>conda create -n ngsderive-dev <span class=\"nv\">python</span><span class=\"o\">=</span><span class=\"m\">3</span>.7 poetry -y\nconda activate ngsderive-dev\ngit clone git@github.com:claymcleod/ngsderive.git\n<span class=\"nb\">cd</span> ngsderive\npoetry install\n</pre>\n<h2>Usage</h2>\n<h3>Illumina machine type</h3>\n<p>The <code>instrument</code> subcommand will attempt to backward compute the machine that\ngenerated a NGS file using (1) the instrument id(s) and (2) the flowcell id(s).</p>\n<h3>Limitations</h3>\n<ul>\n<li>This command may not comprehensively detect the correct machines as there is\nno published catalog of Illumina serial numbers. As we encounter more serial\nnumbers in practice, we update this code.</li>\n</ul>\n<h3>Read length calculation</h3>\n<p>The <code>readlen</code> subcommand can be used to compute the read length used during\nsequencing can be estimated (or reported as inconclusive). At the time of\nwriting, the algorithm used is roughly:</p>\n<ol>\n<li>Compute distribution of read lengths for the first <code>--n-samples</code> reads in a\nfile.</li>\n<li>Assuming read length in the file can only decrease from the actual read\nlength (from adapter trimming or similar), the putative maximum read length\nis considered to be the highest detected read length.</li>\n<li>If the percentage of reads that are evidence for the putative maximum read\nlength makes up at least <code>--majority-vote-cutoff</code>% of the reads, the putative\nread length is considered to be confirmed. If not, the consensus read length\nwill be return as -1 (could not determine).\n<ol>\n<li>For example, if 100bp is the maximum read length detected and 85% percent\nof the reads support that claim, then we considered 100bp as the consensus\nread length. If only 30% of the reads indicated 100bp, the tool cannot\nreport a consensus).</li>\n</ol>\n</li>\n</ol>\n<h3>Strandedness inference</h3>\n<p>The <code>strandedness</code> subcommand can be used to determine strandedness of RNA-Seq\nsamples. Note that due to the need to (1) to examine the alignment status of a\nread [not included in FASTQ] and (2) fetch regions using random access [not\navailable with SAM files], only BAM files are currently supported for this\nsubcommand.</p>\n<p>Strandedness can estimated by observing the following characteristics of a\nparticular read:</p>\n<ul>\n<li>Whether the read is read 1 or read 2 (\"read ordinal\").</li>\n<li>Whether the read was aligned to the + or - strand (\"read strand\")</li>\n<li>Given a gene model, whether a feature of interest (usually a gene) falls on\nthe + or - strand (\"gene strand\").</li>\n</ul>\n<p>A shorthand notation for the state of a read can be achieved by simply\nconcatenating the three characteristics above (e.g., <code>1+-</code> means that a read 1\nwas aligned to the positive strand and a gene was observed at the same location\non the negative strand).</p>\n<p>Given the notation above, the following lookup table can be used to see whether\na read is evidence for forward-strandedness or reverse-strandedness:</p>\n<table>\n<thead>\n<tr>\n<th>Patterns</th>\n<th>Evidence for strandedness type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>1++</code>, <code>1--</code>, <code>2+-</code>, <code>2-+</code></td>\n<td>Forward</td>\n</tr>\n<tr>\n<td><code>2++</code>, <code>2--</code>, <code>1+-</code>, <code>1-+</code></td>\n<td>Reverse</td>\n</tr></tbody></table>\n<p>By default, the strandedness check is designed to work with the\n<a href=\"https://www.gencodegenes.org/\" rel=\"nofollow\">GENCODE</a> geneset. Either a GTF or GFF file can be used as the\ngene model \u2014 you can use the following one liner to prepare the latest geneset\nfor hg38.</p>\n<pre><span class=\"c1\"># hg38</span>\ncurl ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gff3.gz <span class=\"p\">|</span> gunzip -c <span class=\"p\">|</span> sort -k1,1 -k4,4n -k5,5n <span class=\"p\">|</span> bgzip &gt; gencode.v32.annotation.gff3.gz\ntabix -p gff gencode.v32.annotation.gff3.gz\n</pre>\n<p>If you would like to use the script on hg19, it takes a little more finesse (given the different formats of the attribute column between versions):</p>\n<pre><span class=\"c1\"># hg19</span>\ncurl ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/GRCh37_mapping/gencode.v32lift37.annotation.gtf.gz <span class=\"p\">|</span> gunzip -c <span class=\"p\">|</span> sort -k1,1 -k4,4n -k5,5n <span class=\"p\">|</span> python &lt;<span class=\"o\">(</span>cat \n<span class=\"s\">&lt;&lt;END    </span>\n<span class=\"s\">import re </span>\n<span class=\"s\">import sys</span>\n\n<span class=\"s\">for line in [l.strip() for l in sys.stdin]:</span>\n<span class=\"s\">  if line.startswith(\"#\"):</span>\n<span class=\"s\">    print(line)                     </span>\n<span class=\"s\">  else:                       </span>\n<span class=\"s\">    columns = line.split('\\t')</span>\n<span class=\"s\">    if len(columns) != 9:                                                    </span>\n<span class=\"s\">      raise RuntimeError(\"Unexpected column number: {}\".format(len(columns)))</span>\n<span class=\"s\">    </span>\n<span class=\"s\">    print('\\t'.join(columns[0:8]), end=\"\\t\")</span>\n<span class=\"s\">    </span>\n<span class=\"s\">    attrs_post = []</span>\n<span class=\"s\">    for attr in columns[8].split(\";\"):                        </span>\n<span class=\"s\">      groups = re.match(r\"\\s?(\\S+) (\\S+)\\s?\", attr)</span>\n<span class=\"s\">      if groups:             </span>\n<span class=\"s\">        key = groups.group(1)                    </span>\n<span class=\"s\">        value = groups.group(2).replace(\"\\\"\", \"\").replace(\" \", \",\")</span>\n<span class=\"s\">        attrs_post.append(key + \"=\" + value)</span>\n\n<span class=\"s\">    print(\";\".join(attrs_post))</span>\n<span class=\"s\">END</span>\n<span class=\"o\">)</span> <span class=\"p\">|</span> sed <span class=\"s1\">'s/^chrM/chrMT/g'</span> <span class=\"p\">|</span> sed <span class=\"s1\">'s/^chr//g'</span> <span class=\"p\">|</span> bgzip &gt; gencode.v32lift37.annotation.gtf.gz\ntabix -p gff gencode.v32lift37.annotation.gtf.gz\n</pre>\n<p>At the time of writing, the algorithm works roughly like this:</p>\n<ol>\n<li>The gene model is read in and only <code>gene</code> features are retained.</li>\n<li>For <code>--n-genes</code> times, a randomly sampled gene is selected from the gene\nmodel. The gene must pass a quality check. Of particular interest,\n<ol>\n<li>The gene must not be an overlapping feature on the opposite strand which\nwould present ambiguous results.</li>\n<li><em>Optionally</em>, the gene must be a protein coding gene.</li>\n<li><em>Optionally</em>, the gene must have at least <code>--minimum-reads-per-gene</code>\nminimum reads per gene.</li>\n</ol>\n</li>\n<li>All of the reads from that region of the genome are extracted and put through\nseveral quality filters including but not limited to:\n<ol>\n<li>The read must not be marked as QC-failed.</li>\n<li>The read must not be marked as a duplicate.</li>\n<li>The read must not be marked as secondary.</li>\n<li>The read must not be unmapped.</li>\n<li><em>Optionally</em>, the read have a minimum MAPQ score.</li>\n</ol>\n</li>\n<li>For all reads that pass the above filters, compute the evidence and tally\nresults.</li>\n</ol>\n<p>This lookup table is used for the classification of strandedness based on the evidence:</p>\n<table>\n<thead>\n<tr>\n<th>Lookup</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>40% &lt;= <code>forward_reads_pct</code> &lt;= 60%</td>\n<td><code>Unstranded</code></td>\n</tr>\n<tr>\n<td>80% &lt;= <code>forward_reads_pct</code></td>\n<td><code>Stranded-Forward</code></td>\n</tr>\n<tr>\n<td>80% &lt;= <code>reverse_reads_pct</code></td>\n<td><code>Stranded-Reverse</code></td>\n</tr>\n<tr>\n<td>Else</td>\n<td><code>Inconclusive</code></td>\n</tr></tbody></table>\n<p>The tool will repeat the strandedness test at most <code>--max-tries</code> times to try to find a\nnon-<code>Inconclusive</code>prediction.</p>\n<h3>Differences from popular methods</h3>\n<p>The most popular strandedness inference tool that the author is aware of is\nRSeQC's\n<a href=\"http://rseqc.sourceforge.net/#infer-experiment-py\" rel=\"nofollow\">infer_experiment.py</a>. The\nmain difference is that RSeQC starts at the beginning of the BAM file and takes\nthe first <code>n</code> reads that match its criteria. If the BAM is coordinate sorted,\nthis would mean its not uncommon to have all of the evidence at the beginning of\n<code>chr1</code>. Anecdotally, this method differs in that it is slightly slower than\n<code>infer_experiment.py</code> but is expected to be more robust to biases caused by\nwhich reads are sampled.</p>\n<h3>Limitations</h3>\n<ul>\n<li>Does not yet work with single-end data (simply because the author doesn't have\nany on hand). The tool will throw an error if any unpaired reads are\ndiscovered (let us know in the issues if you need this supported).</li>\n<li>Though hundreds of Unstranded and Stranded-Reverse data has been tested and\nverified, Stranded-Forward data has not been tested to work with this tool\n(simply because the author doesn't have on hand). We do not anticipate any\nissues since Stranded-Reverse is working well.</li>\n</ul>\n<h2>Running the tests</h2>\n<pre>&gt; py.test\n</pre>\n<h2>Contributing</h2>\n<p>Please read <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> for details on our code of\nconduct, and the process for submitting pull requests to us.</p>\n<h2>Versioning</h2>\n<p>We use <a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> for versioning. For the versions available, see the <a href=\"https://github.com/your/project/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h2>License</h2>\n<p>This project is licensed as follows:</p>\n<ul>\n<li>All code related to the <code>instrument</code> subcommand is licensed under the <a href=\"http://www.affero.org/agpl2.html\" rel=\"nofollow\">AGPL\nv2.0</a>. This is not due any strict requirement, but out of deference\nto some <a href=\"https://github.com/10XGenomics/supernova/blob/master/tenkit/lib/python/tenkit/illumina_instrument.py\" rel=\"nofollow\">code</a> I drew inspiration from (and copied patterns\nfrom), the decision was made to license this code consistently.</li>\n<li>The rest of the project is licensed under the MIT License - see the\n<a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details.</li>\n</ul>\n\n          </div>"}, "last_serial": 6744140, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d2fcca452770d02a4fd5478a29d8be53", "sha256": "46600e999dba86865a395069622ae61617728680a5983db57681f785890743d8"}, "downloads": -1, "filename": "ngsderive-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d2fcca452770d02a4fd5478a29d8be53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0, <3.8", "size": 15776, "upload_time": "2019-12-13T00:28:22", "upload_time_iso_8601": "2019-12-13T00:28:22.872514Z", "url": "https://files.pythonhosted.org/packages/c6/1c/fa72cc2b192dee0d076ba8482b396e6c200a08334d3b08742594795b0a58/ngsderive-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c3f985ac79661e367cb3dd7b1dec50b", "sha256": "c386d517fb9ae11d97f85cb76fd00df7f115ccb9c5412007822f504b9ac6849f"}, "downloads": -1, "filename": "ngsderive-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9c3f985ac79661e367cb3dd7b1dec50b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, <3.8", "size": 24204, "upload_time": "2019-12-13T00:28:25", "upload_time_iso_8601": "2019-12-13T00:28:25.473986Z", "url": "https://files.pythonhosted.org/packages/2e/ba/10d6e80a68de675d48c481a441189a5c0aeb47c0b854e37568801cc6ff45/ngsderive-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3c820be356b48ccf7ee6dad84e5ace97", "sha256": "80dce090f607ac1c2d8b6ac62925c22cf06638838282e2671f9b78ff550ed87f"}, "downloads": -1, "filename": "ngsderive-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3c820be356b48ccf7ee6dad84e5ace97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, <3.8", "size": 24961, "upload_time": "2020-01-21T03:05:28", "upload_time_iso_8601": "2020-01-21T03:05:28.871494Z", "url": "https://files.pythonhosted.org/packages/20/a9/7b18cceef64aafaa66b10f3ff315ee0f5f1b9540ea36edd29b4b113a71e6/ngsderive-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e2237e0a582ac148490cb1172aa27098", "sha256": "93b49a0af6e289ab52ef2c164d4525497c127de4e16278166ab4f2a6880d4bb7"}, "downloads": -1, "filename": "ngsderive-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e2237e0a582ac148490cb1172aa27098", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 16451, "upload_time": "2020-03-03T23:50:49", "upload_time_iso_8601": "2020-03-03T23:50:49.645421Z", "url": "https://files.pythonhosted.org/packages/42/14/fbba528b3aa0440a3a3766df176796a35d54de432d7b9a70507fdad14e6f/ngsderive-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98b80c65617612d404fa937d4b3dde88", "sha256": "eb2448c896246787875104f00e00cef215ae4ca73a5e16a279115eb37e355919"}, "downloads": -1, "filename": "ngsderive-1.0.2.tar.gz", "has_sig": false, "md5_digest": "98b80c65617612d404fa937d4b3dde88", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18608, "upload_time": "2020-03-03T23:50:50", "upload_time_iso_8601": "2020-03-03T23:50:50.813671Z", "url": "https://files.pythonhosted.org/packages/8a/b4/203c8ed807b00b92e760057d35b9679735cdc3c18b0586a547e5ecd55cb6/ngsderive-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2237e0a582ac148490cb1172aa27098", "sha256": "93b49a0af6e289ab52ef2c164d4525497c127de4e16278166ab4f2a6880d4bb7"}, "downloads": -1, "filename": "ngsderive-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e2237e0a582ac148490cb1172aa27098", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 16451, "upload_time": "2020-03-03T23:50:49", "upload_time_iso_8601": "2020-03-03T23:50:49.645421Z", "url": "https://files.pythonhosted.org/packages/42/14/fbba528b3aa0440a3a3766df176796a35d54de432d7b9a70507fdad14e6f/ngsderive-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98b80c65617612d404fa937d4b3dde88", "sha256": "eb2448c896246787875104f00e00cef215ae4ca73a5e16a279115eb37e355919"}, "downloads": -1, "filename": "ngsderive-1.0.2.tar.gz", "has_sig": false, "md5_digest": "98b80c65617612d404fa937d4b3dde88", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18608, "upload_time": "2020-03-03T23:50:50", "upload_time_iso_8601": "2020-03-03T23:50:50.813671Z", "url": "https://files.pythonhosted.org/packages/8a/b4/203c8ed807b00b92e760057d35b9679735cdc3c18b0586a547e5ecd55cb6/ngsderive-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:30 2020"}