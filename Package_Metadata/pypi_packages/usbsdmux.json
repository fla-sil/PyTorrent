{"info": {"author": "Chris Fiege", "author_email": "python@pengutronix.de", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Natural Language :: English", "Operating System :: Unix", "Programming Language :: Python :: 3 :: Only"], "description": "Welcome to usbsdmux\n===================\n\n|license|\n\nPurpose\n-------\nThis software is used to control a special piece of hardware called usb-sd-mux from the command line or python.\n\nThe usb-sd-mux is build around a `Microchip USB2642 <http://www.microchip.com/wwwproducts/en/USB2642>`_ card reader. Thus most of this software deals with interfacing this device using Linux ioctls().\n\nThis software is aimed to be used with `Labgrid <https://github.com/labgrid-project/labgrid>`_. But it can also be used stand-alone or in your own applications.\n\nHigh-Level Functions\n--------------------\nusbsdmux provides the following functions:\n\n* Multiplexing the SD-Card to either DUT, Host or disconnect with ``usbsdmux``\n* Writing the Configuration-EEPROM of the USB2642 from the command line to customize the representation of the USB device: ``usbsdmux-configure``\n\n\nLow-Level Functions\n-------------------\nUnder the hood this tool provides interfaces to access the following features of the Microchip USB2642:\n\n* Accessing the auxiliary I2C bus with write and write-read transactions with up to 512 bytes of payload using a simple python interface.\n* Writing an I2C Configuration-EEPROM on the configuration I2C.\n  This is done using an undocumented command that was reverse-engineered from Microchip's freely available EOL-Tools.\n\nQuickstart\n----------\n\nClone the git repository:\n\n.. code-block:: bash\n\n   $ git clone https://github.com/pengutronix/usbsdmux.git\n\nCreate and activate a virtualenv for usbsdmux:\n\n.. code-block:: bash\n\n   $ virtualenv -p python3 venv\n   $ source venv/bin/activate\n\nInstall usbsdmux into the virtualenv:\n\n.. code-block:: bash\n\n   $ python setup.py install\n\nNow you can run ``usbsdmux`` command by giving the appropriate /dev/sg* device,\ne.g.:\n\n.. code-block:: bash\n\n   $ usbsdmux /dev/sg1 dut\n   $ usbsdmux /dev/sg1 host\n\nUsing as root\n-------------\nIf you just want to try the USB-SD-Mux (or maybe if it is just ok for you) you\ncan just use ``usbsdmux`` as root.\n\nIf you have installed this tool inside a virtualenv you can just call the\nshell-wrapper with something like\n``sudo /path/to/virtualenv/bin/usbsdmux /dev/sg1 DUT``.\n\n\nUsing as non-root user\n----------------------\nAccess to /dev/sg* needs the `CAP_SYS_RAWIO <http://man7.org/linux/man-pages/man7/capabilities.7.html>`_. By default all processes created by root gain this capability.\n\nSince you do not want to give this capability to the Python interpreter you\n\n* either need to call the scripts as root\n* or use the systemd-service.\n\nThe systemd-service is intended to be used with socket-activation.\nThe service is present inside ``usbsdmux-service``.\n\nThe systemd-units provided in ``contrib/systemd/`` show an example of how to\nset up the service with systemd and socket-activation.\nYou may adapt and copy them into your machine's local systemd service folder\n``/etc/systemd/system/``\n\nTo start the socket unit and let it create the required socket path\n(requires permissions), run::\n\n  systemctl start usbsdmux.socket\n\nNow you can use the ``usbsdmux`` tool from a non-root user by calling it with\nthe client ``-c`` argument, e.g.::\n\n  usbsdmux -c /dev/sg1 DUT\n\nIf you use a non-standard socket path (i.e. not ``/tmp/sdmux.sock``) you also\nneed to explicitly set the socket path::\n\n  usbsdmux -c -s /path/to/sock.file /dev/sg1 DUT\n\nReliable names for the USB-SD-Mux\n---------------------------------\n\nA USB-SD-Mux comes with a pre-programmed serial that is also printed on the\ndevice itself. With the udev-rule in ``contib/udev/99-usbsdmux.rules``\nthe sg-device for every USB-SD-Mux is linked to a device in\n``/dev/usb-sd-mux/id-*``.\n\nThis makes sure you can access a USB-SD-Mux with the same name - independent\nof the order they are connected or the USB or the USB-topology.\n\nToDo\n----\n\n* Access to /dev/sg* needs the\n  `CAP_SYS_RAWIO <http://man7.org/linux/man-pages/man7/capabilities.7.html>`_.\n  The service should drop all not needed capabilities after it is started.\n\n\n.. |license| image:: https://img.shields.io/badge/license-LGPLv2.1-blue.svg\n    :alt: LGPLv2.1\n    :target: https://raw.githubusercontent.com/pengutronix/usb-sd-mux-ctl/master/LICENSE", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pengutronix/usbsdmux", "keywords": "", "license": "LGPL-2.1-or-later", "maintainer": "", "maintainer_email": "", "name": "usbsdmux", "package_url": "https://pypi.org/project/usbsdmux/", "platform": "", "project_url": "https://pypi.org/project/usbsdmux/", "project_urls": {"Homepage": "https://github.com/pengutronix/usbsdmux"}, "release_url": "https://pypi.org/project/usbsdmux/0.1.8/", "requires_dist": null, "requires_python": "", "summary": "Tool to control an usb-sd-mux from the command line", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://raw.githubusercontent.com/pengutronix/usb-sd-mux-ctl/master/LICENSE\" rel=\"nofollow\"><img alt=\"LGPLv2.1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd2a04e871b07bbc0fe4c319c38e044211a38ab3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4c47504c76322e312d626c75652e737667\"></a></p>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>This software is used to control a special piece of hardware called usb-sd-mux from the command line or python.</p>\n<p>The usb-sd-mux is build around a <a href=\"http://www.microchip.com/wwwproducts/en/USB2642\" rel=\"nofollow\">Microchip USB2642</a> card reader. Thus most of this software deals with interfacing this device using Linux ioctls().</p>\n<p>This software is aimed to be used with <a href=\"https://github.com/labgrid-project/labgrid\" rel=\"nofollow\">Labgrid</a>. But it can also be used stand-alone or in your own applications.</p>\n</div>\n<div id=\"high-level-functions\">\n<h2>High-Level Functions</h2>\n<p>usbsdmux provides the following functions:</p>\n<ul>\n<li>Multiplexing the SD-Card to either DUT, Host or disconnect with <tt>usbsdmux</tt></li>\n<li>Writing the Configuration-EEPROM of the USB2642 from the command line to customize the representation of the USB device: <tt><span class=\"pre\">usbsdmux-configure</span></tt></li>\n</ul>\n</div>\n<div id=\"low-level-functions\">\n<h2>Low-Level Functions</h2>\n<p>Under the hood this tool provides interfaces to access the following features of the Microchip USB2642:</p>\n<ul>\n<li>Accessing the auxiliary I2C bus with write and write-read transactions with up to 512 bytes of payload using a simple python interface.</li>\n<li>Writing an I2C Configuration-EEPROM on the configuration I2C.\nThis is done using an undocumented command that was reverse-engineered from Microchip\u2019s freely available EOL-Tools.</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Clone the git repository:</p>\n<pre>$ git clone https://github.com/pengutronix/usbsdmux.git\n</pre>\n<p>Create and activate a virtualenv for usbsdmux:</p>\n<pre>$ virtualenv -p python3 venv\n$ <span class=\"nb\">source</span> venv/bin/activate\n</pre>\n<p>Install usbsdmux into the virtualenv:</p>\n<pre>$ python setup.py install\n</pre>\n<p>Now you can run <tt>usbsdmux</tt> command by giving the appropriate /dev/sg* device,\ne.g.:</p>\n<pre>$ usbsdmux /dev/sg1 dut\n$ usbsdmux /dev/sg1 host\n</pre>\n</div>\n<div id=\"using-as-root\">\n<h2>Using as root</h2>\n<p>If you just want to try the USB-SD-Mux (or maybe if it is just ok for you) you\ncan just use <tt>usbsdmux</tt> as root.</p>\n<p>If you have installed this tool inside a virtualenv you can just call the\nshell-wrapper with something like\n<tt>sudo /path/to/virtualenv/bin/usbsdmux /dev/sg1 DUT</tt>.</p>\n</div>\n<div id=\"using-as-non-root-user\">\n<h2>Using as non-root user</h2>\n<p>Access to /dev/sg* needs the <a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\" rel=\"nofollow\">CAP_SYS_RAWIO</a>. By default all processes created by root gain this capability.</p>\n<p>Since you do not want to give this capability to the Python interpreter you</p>\n<ul>\n<li>either need to call the scripts as root</li>\n<li>or use the systemd-service.</li>\n</ul>\n<p>The systemd-service is intended to be used with socket-activation.\nThe service is present inside <tt><span class=\"pre\">usbsdmux-service</span></tt>.</p>\n<p>The systemd-units provided in <tt>contrib/systemd/</tt> show an example of how to\nset up the service with systemd and socket-activation.\nYou may adapt and copy them into your machine\u2019s local systemd service folder\n<tt>/etc/systemd/system/</tt></p>\n<p>To start the socket unit and let it create the required socket path\n(requires permissions), run:</p>\n<pre>systemctl start usbsdmux.socket\n</pre>\n<p>Now you can use the <tt>usbsdmux</tt> tool from a non-root user by calling it with\nthe client <tt><span class=\"pre\">-c</span></tt> argument, e.g.:</p>\n<pre>usbsdmux -c /dev/sg1 DUT\n</pre>\n<p>If you use a non-standard socket path (i.e. not <tt>/tmp/sdmux.sock</tt>) you also\nneed to explicitly set the socket path:</p>\n<pre>usbsdmux -c -s /path/to/sock.file /dev/sg1 DUT\n</pre>\n</div>\n<div id=\"reliable-names-for-the-usb-sd-mux\">\n<h2>Reliable names for the USB-SD-Mux</h2>\n<p>A USB-SD-Mux comes with a pre-programmed serial that is also printed on the\ndevice itself. With the udev-rule in <tt><span class=\"pre\">contib/udev/99-usbsdmux.rules</span></tt>\nthe sg-device for every USB-SD-Mux is linked to a device in\n<tt><span class=\"pre\">/dev/usb-sd-mux/id-*</span></tt>.</p>\n<p>This makes sure you can access a USB-SD-Mux with the same name - independent\nof the order they are connected or the USB or the USB-topology.</p>\n</div>\n<div id=\"todo\">\n<h2>ToDo</h2>\n<ul>\n<li>Access to /dev/sg* needs the\n<a href=\"http://man7.org/linux/man-pages/man7/capabilities.7.html\" rel=\"nofollow\">CAP_SYS_RAWIO</a>.\nThe service should drop all not needed capabilities after it is started.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6311753, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "1b8faf63666325b17e841071a5631a15", "sha256": "691dbe8420f0528db490cb8c936192e32ff202436c8dea544e7d03c12e3d2b56"}, "downloads": -1, "filename": "usbsdmux-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1b8faf63666325b17e841071a5631a15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26042, "upload_time": "2019-12-16T14:47:15", "upload_time_iso_8601": "2019-12-16T14:47:15.850777Z", "url": "https://files.pythonhosted.org/packages/25/ec/eb304cd1da4a6316de30e3018891667891a9fccff88f558d2047360005ce/usbsdmux-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "deb9d5c0e5c7897fedbf24d0c4b6a291", "sha256": "f86b69bb2e29fac59b8ac1b000668c0385535214bc28159073ece35d632846f3"}, "downloads": -1, "filename": "usbsdmux-0.1.7.tar.gz", "has_sig": false, "md5_digest": "deb9d5c0e5c7897fedbf24d0c4b6a291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26020, "upload_time": "2019-12-16T14:56:57", "upload_time_iso_8601": "2019-12-16T14:56:57.218485Z", "url": "https://files.pythonhosted.org/packages/d0/9f/2cb02c98522cae406b0b423e2106adc116f92735f6fa036d1c731928de3f/usbsdmux-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "3ee56bebe3a028dda6d793d42ef3f855", "sha256": "2ee59b4c62d0e78c08dbe5ad16583ef691b251abcbbb29b58565179d74066d54"}, "downloads": -1, "filename": "usbsdmux-0.1.8.tar.gz", "has_sig": false, "md5_digest": "3ee56bebe3a028dda6d793d42ef3f855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26582, "upload_time": "2019-12-16T15:02:33", "upload_time_iso_8601": "2019-12-16T15:02:33.991554Z", "url": "https://files.pythonhosted.org/packages/fd/da/15e52b9d47180d7fcd219abf772a1601ab1bc11e64ca03bcede96126ec60/usbsdmux-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ee56bebe3a028dda6d793d42ef3f855", "sha256": "2ee59b4c62d0e78c08dbe5ad16583ef691b251abcbbb29b58565179d74066d54"}, "downloads": -1, "filename": "usbsdmux-0.1.8.tar.gz", "has_sig": false, "md5_digest": "3ee56bebe3a028dda6d793d42ef3f855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26582, "upload_time": "2019-12-16T15:02:33", "upload_time_iso_8601": "2019-12-16T15:02:33.991554Z", "url": "https://files.pythonhosted.org/packages/fd/da/15e52b9d47180d7fcd219abf772a1601ab1bc11e64ca03bcede96126ec60/usbsdmux-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:11 2020"}