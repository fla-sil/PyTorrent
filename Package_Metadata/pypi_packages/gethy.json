{"info": {"author": "CreatCodeBuild@github.com", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "gethy\n------\nGET Hy the Fastest Way!\n\nGetHy?\n==============\nGetHy is pronounced \"Get high\". It stands for \"Get Hypertext Transfer Protocol\". It is one of those awkward word-playing jokes.\n\nGetHy is an application level IO indenpent HTTP/2 library. It can be used in any IO model and is super easy to use.\n\nHTTP was intended to be a stateless protocol. At my best understanding, \nHTTP/2 changes that a little bit at the Session and Presentation level.\n\nTherefore, using HTTP/2 directly is a little bit counter intuitive if you are used to the stateless Request-Response model. \nHowever, HTTP/2 at an Application level is or should be still stateless. It doesn't change the HTTP semantics for application/Web developers.\n\nThis library utilizes the powerful and only Python HTTP/2 library `h2 <https://github.com/python-hyper/hyper-h2>`_.\n\nh2 is not an application level library in terms of that it doesn't provide the GET, POST kind of semantics for the user. \nGetHy builds on top of h2 and provides the user Web level semantics.\n\nLike h2, GetHy does not do IO at all! You are free to use whatever IO model.\n\nOff course you should use coroutines. Because you should check out my Web framework `hyper2web <https://github.com/CreatCodeBuild/hyper2web>`_.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CreatCodeBuild/gethy", "keywords": "HTTP/2", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gethy", "package_url": "https://pypi.org/project/gethy/", "platform": "", "project_url": "https://pypi.org/project/gethy/", "project_urls": {"Homepage": "https://github.com/CreatCodeBuild/gethy"}, "release_url": "https://pypi.org/project/gethy/0.0.0/", "requires_dist": null, "requires_python": "", "summary": "An application level IO independent h2 library", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>GET Hy the Fastest Way!</p>\n<div id=\"id1\">\n<h2>GetHy?</h2>\n<p>GetHy is pronounced \u201cGet high\u201d. It stands for \u201cGet Hypertext Transfer Protocol\u201d. It is one of those awkward word-playing jokes.</p>\n<p>GetHy is an application level IO indenpent HTTP/2 library. It can be used in any IO model and is super easy to use.</p>\n<p>HTTP was intended to be a stateless protocol. At my best understanding,\nHTTP/2 changes that a little bit at the Session and Presentation level.</p>\n<p>Therefore, using HTTP/2 directly is a little bit counter intuitive if you are used to the stateless Request-Response model.\nHowever, HTTP/2 at an Application level is or should be still stateless. It doesn\u2019t change the HTTP semantics for application/Web developers.</p>\n<p>This library utilizes the powerful and only Python HTTP/2 library <a href=\"https://github.com/python-hyper/hyper-h2\" rel=\"nofollow\">h2</a>.</p>\n<p>h2 is not an application level library in terms of that it doesn\u2019t provide the GET, POST kind of semantics for the user.\nGetHy builds on top of h2 and provides the user Web level semantics.</p>\n<p>Like h2, GetHy does not do IO at all! You are free to use whatever IO model.</p>\n<p>Off course you should use coroutines. Because you should check out my Web framework <a href=\"https://github.com/CreatCodeBuild/hyper2web\" rel=\"nofollow\">hyper2web</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3169156, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "08e9a0ca3c346c1816309770cddeb5f7", "sha256": "28aa08a3695997a455bb5807a5f55fdcba2dfe4e22800ea92301236945b557d6"}, "downloads": -1, "filename": "gethy-0.0.0.tar.gz", "has_sig": false, "md5_digest": "08e9a0ca3c346c1816309770cddeb5f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4982, "upload_time": "2017-09-12T22:41:08", "upload_time_iso_8601": "2017-09-12T22:41:08.269468Z", "url": "https://files.pythonhosted.org/packages/a8/cf/fc507c85c7a0d2cfe9d0244ee87adbfee976e49ac84db1339ff0cd581350/gethy-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08e9a0ca3c346c1816309770cddeb5f7", "sha256": "28aa08a3695997a455bb5807a5f55fdcba2dfe4e22800ea92301236945b557d6"}, "downloads": -1, "filename": "gethy-0.0.0.tar.gz", "has_sig": false, "md5_digest": "08e9a0ca3c346c1816309770cddeb5f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4982, "upload_time": "2017-09-12T22:41:08", "upload_time_iso_8601": "2017-09-12T22:41:08.269468Z", "url": "https://files.pythonhosted.org/packages/a8/cf/fc507c85c7a0d2cfe9d0244ee87adbfee976e49ac84db1339ff0cd581350/gethy-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:48 2020"}