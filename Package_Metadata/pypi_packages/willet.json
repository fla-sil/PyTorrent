{"info": {"author": "Abdullah Khan", "author_email": "abbu.1702@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# willet\n\n Contents\n- [Introduction](Introduction)\n- [Installation](Installation)\n- [Example](Example)\n- [Support](Support)\n\n\n#### [Introduction](Introduction)\n\nWillet Framework is a generic open source automation framework for acceptance testing, data drivern testing, and it has designed in such a way that even non techinal person can understand. Tests can be witten in same way what the manual tests flow are(Testcase -> Steps-> Expected and actual).\n\nThe core framework is implemented using Python, Python 3 runs on PyPy. The framework has a rich ecosystem around it consisting of various generic libraries.\n\nWillet Framework project is hosted on GitHub where you can find source code, an issue tracker, and some further documentation. See CONTRIBUTING.rst if you are interested to contribute. Downloads are hosted on PyPI.\n\n#### [Installation](Installation)\n\nIf you already have\t**[Python](https://www.python.org/)**\twith\t**[pip](https://pip.pypa.io/en/stable/)** installed, you can simply run:\n\npip install willet\n\nAlternatively you can get Willet Framework source code by downloading the source distribution from **[PyPI](https://pypi.org/project/willet/#description)** and extracting it, or by cloning the project repository from \t**[GitHub](https://github.com/abdulab/willet)**. After that you can install the framework with:\n\npython setup.py install\n\n#### [Example](Example)\n\nUsing the willet framework is pretty much simple. We can write the scripts in the same way we write Functional Test cases.\n\n###### For Example:\n> In general functional Test case follows pattern like\n1. Test case (with release No. , relates to = Story , Test case Number with description) under the Test case we have Steps\n- Step 1\n- Step 2\n- Step 3\n- ........\n-  And Last Step Verification or Validation of the Test case\n\n> So willet Automation Framework follows the same pattern\n\n###### Creating Test Case in willet Automation Framework:\n\nFirst create method \n```python\n def test():\n\tBrowsers.open(browser_name, url)\n\tTestCase(tc=\"TC001\" relates_to=\"Story No.\", release=\"8.5\")\n\tStep(step_description=\"Step 1\", element=\"someelement\", actions=Action.CLICK)\n\tStep(step_description=\"Step 1\", element=\"someelement\", actions=Action.TYPE, data= data)\n\tStep(step_description=\"\",actual=Verify.title(),expected=\"expected value\")\n```\n> Here someelement is nothing but page object or element to which we want to perform some action like Click or type etc.,\n\n###### Suggestions for maintaining a project tree structure:\n\n- Project Name\n  - modules\n    - Module Name\n      - pageobjects\n      - steps\n      - data\n      - testcases\n\n> Under page objects we can maintain all the page objects related to the particular module\n\nExample:\n```python\n def pageobjectsname():\n   Find.findby(by=BY.XPATH, element_name=\"name of the element\", value = \"//xpath\")\n ```\n> Under the steps folder we can mentain all the steps related to the module\n\nExample :\n```python\n def step_name(self):\n     Step(step_description=\"Click on some element\",element=pageobjectsame(),actions=Action.CLICK)\n     return self\n```\n\n> Under Test cases folder we can mentain all the test cases related the module. Where we an combine all the steps(related steps)to the Test case\n\nExample:\n```python\ndef login_with_system_admin():\n    TestCase(tc=\"TC001\", relates_to=\"Story No.\", release=\"1.0\")\n    step_name()\n```\n#### [Support](Support)\n- [Slack](https://willet.slack.com/open)\n- [willet](abbu.1702@gmail.com) mailing list\n -- abbu.1702@gmail.com\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abdulab/willet.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "willet", "package_url": "https://pypi.org/project/willet/", "platform": "", "project_url": "https://pypi.org/project/willet/", "project_urls": {"Homepage": "https://github.com/abdulab/willet.git"}, "release_url": "https://pypi.org/project/willet/1.5/", "requires_dist": ["willet", "selenium", "openpyxl", "pandas", "PyPDF2", "PyYAML", "requests", "seleniumwrapper", "table-logger", "urllib3", "xlrd", "xlwt", "PyAutoIt"], "requires_python": "", "summary": "Automation Framework", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>willet</h1>\n<p>Contents</p>\n<ul>\n<li><a href=\"Introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"Example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"Support\" rel=\"nofollow\">Support</a></li>\n</ul>\n<h4><a href=\"Introduction\" rel=\"nofollow\">Introduction</a></h4>\n<p>Willet Framework is a generic open source automation framework for acceptance testing, data drivern testing, and it has designed in such a way that even non techinal person can understand. Tests can be witten in same way what the manual tests flow are(Testcase -&gt; Steps-&gt; Expected and actual).</p>\n<p>The core framework is implemented using Python, Python 3 runs on PyPy. The framework has a rich ecosystem around it consisting of various generic libraries.</p>\n<p>Willet Framework project is hosted on GitHub where you can find source code, an issue tracker, and some further documentation. See CONTRIBUTING.rst if you are interested to contribute. Downloads are hosted on PyPI.</p>\n<h4><a href=\"Installation\" rel=\"nofollow\">Installation</a></h4>\n<p>If you already have\t<strong><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a></strong>\twith\t<strong><a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a></strong> installed, you can simply run:</p>\n<p>pip install willet</p>\n<p>Alternatively you can get Willet Framework source code by downloading the source distribution from <strong><a href=\"https://pypi.org/project/willet/#description\" rel=\"nofollow\">PyPI</a></strong> and extracting it, or by cloning the project repository from \t<strong><a href=\"https://github.com/abdulab/willet\" rel=\"nofollow\">GitHub</a></strong>. After that you can install the framework with:</p>\n<p>python setup.py install</p>\n<h4><a href=\"Example\" rel=\"nofollow\">Example</a></h4>\n<p>Using the willet framework is pretty much simple. We can write the scripts in the same way we write Functional Test cases.</p>\n<h6>For Example:</h6>\n<blockquote>\n<p>In general functional Test case follows pattern like</p>\n</blockquote>\n<ol>\n<li>Test case (with release No. , relates to = Story , Test case Number with description) under the Test case we have Steps</li>\n</ol>\n<ul>\n<li>Step 1</li>\n<li>Step 2</li>\n<li>Step 3</li>\n<li>........</li>\n<li>And Last Step Verification or Validation of the Test case</li>\n</ul>\n<blockquote>\n<p>So willet Automation Framework follows the same pattern</p>\n</blockquote>\n<h6>Creating Test Case in willet Automation Framework:</h6>\n<p>First create method</p>\n<pre> <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n\t<span class=\"n\">Browsers</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">browser_name</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n\t<span class=\"n\">TestCase</span><span class=\"p\">(</span><span class=\"n\">tc</span><span class=\"o\">=</span><span class=\"s2\">\"TC001\"</span> <span class=\"n\">relates_to</span><span class=\"o\">=</span><span class=\"s2\">\"Story No.\"</span><span class=\"p\">,</span> <span class=\"n\">release</span><span class=\"o\">=</span><span class=\"s2\">\"8.5\"</span><span class=\"p\">)</span>\n\t<span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">step_description</span><span class=\"o\">=</span><span class=\"s2\">\"Step 1\"</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"o\">=</span><span class=\"s2\">\"someelement\"</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">CLICK</span><span class=\"p\">)</span>\n\t<span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">step_description</span><span class=\"o\">=</span><span class=\"s2\">\"Step 1\"</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"o\">=</span><span class=\"s2\">\"someelement\"</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">TYPE</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\t<span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">step_description</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span><span class=\"n\">actual</span><span class=\"o\">=</span><span class=\"n\">Verify</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(),</span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"s2\">\"expected value\"</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Here someelement is nothing but page object or element to which we want to perform some action like Click or type etc.,</p>\n</blockquote>\n<h6>Suggestions for maintaining a project tree structure:</h6>\n<ul>\n<li>Project Name\n<ul>\n<li>modules\n<ul>\n<li>Module Name\n<ul>\n<li>pageobjects</li>\n<li>steps</li>\n<li>data</li>\n<li>testcases</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Under page objects we can maintain all the page objects related to the particular module</p>\n</blockquote>\n<p>Example:</p>\n<pre> <span class=\"k\">def</span> <span class=\"nf\">pageobjectsname</span><span class=\"p\">():</span>\n   <span class=\"n\">Find</span><span class=\"o\">.</span><span class=\"n\">findby</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"n\">BY</span><span class=\"o\">.</span><span class=\"n\">XPATH</span><span class=\"p\">,</span> <span class=\"n\">element_name</span><span class=\"o\">=</span><span class=\"s2\">\"name of the element\"</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">\"//xpath\"</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Under the steps folder we can mentain all the steps related to the module</p>\n</blockquote>\n<p>Example :</p>\n<pre> <span class=\"k\">def</span> <span class=\"nf\">step_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n     <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">step_description</span><span class=\"o\">=</span><span class=\"s2\">\"Click on some element\"</span><span class=\"p\">,</span><span class=\"n\">element</span><span class=\"o\">=</span><span class=\"n\">pageobjectsame</span><span class=\"p\">(),</span><span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">CLICK</span><span class=\"p\">)</span>\n     <span class=\"k\">return</span> <span class=\"bp\">self</span>\n</pre>\n<blockquote>\n<p>Under Test cases folder we can mentain all the test cases related the module. Where we an combine all the steps(related steps)to the Test case</p>\n</blockquote>\n<p>Example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">login_with_system_admin</span><span class=\"p\">():</span>\n    <span class=\"n\">TestCase</span><span class=\"p\">(</span><span class=\"n\">tc</span><span class=\"o\">=</span><span class=\"s2\">\"TC001\"</span><span class=\"p\">,</span> <span class=\"n\">relates_to</span><span class=\"o\">=</span><span class=\"s2\">\"Story No.\"</span><span class=\"p\">,</span> <span class=\"n\">release</span><span class=\"o\">=</span><span class=\"s2\">\"1.0\"</span><span class=\"p\">)</span>\n    <span class=\"n\">step_name</span><span class=\"p\">()</span>\n</pre>\n<h4><a href=\"Support\" rel=\"nofollow\">Support</a></h4>\n<ul>\n<li><a href=\"https://willet.slack.com/open\" rel=\"nofollow\">Slack</a></li>\n<li><a href=\"abbu.1702@gmail.com\" rel=\"nofollow\">willet</a> mailing list\n-- <a href=\"mailto:abbu.1702@gmail.com\">abbu.1702@gmail.com</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6683842, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "01ce34e02760f532145b4d6dc1ef39af", "sha256": "5ca4497ebf5d036ef76a49c66c3464c07222b429e4948ab178a82a9b6717c7f7"}, "downloads": -1, "filename": "willet-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01ce34e02760f532145b4d6dc1ef39af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9741655, "upload_time": "2019-10-12T16:28:20", "upload_time_iso_8601": "2019-10-12T16:28:20.622796Z", "url": "https://files.pythonhosted.org/packages/da/95/92d4930f7a8ad5a8e5cb6fe786b2220eadbe7d3f6e456527117d331e4990/willet-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ccae7493841a0933f6923110de7e3ec", "sha256": "30dca8ecb0be39d2c600af9541fa8efa99e484135363225e69ad22549ca1f10a"}, "downloads": -1, "filename": "willet-1.1.tar.gz", "has_sig": false, "md5_digest": "0ccae7493841a0933f6923110de7e3ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9706826, "upload_time": "2019-10-12T16:28:29", "upload_time_iso_8601": "2019-10-12T16:28:29.512375Z", "url": "https://files.pythonhosted.org/packages/1b/23/391dbf4f8051933a0cdbc7fb008f7275a5dfef37c156e25552affb8883fd/willet-1.1.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "02508abfdf749c9912dca58a4c773d5f", "sha256": "52551f121d2f5d56c392dfdfc44ed7554b1af4475791a3da87d91b37b27d5ea1"}, "downloads": -1, "filename": "willet-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "02508abfdf749c9912dca58a4c773d5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9466579, "upload_time": "2020-02-23T13:08:16", "upload_time_iso_8601": "2020-02-23T13:08:16.728961Z", "url": "https://files.pythonhosted.org/packages/9a/68/5d7eefdb7392ded3614808f8ab77f1b04efdf1c523a3b0b89d0a69180733/willet-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa4269bb964397d5ef1f8f08df5fdff8", "sha256": "04b1424ba2ff94f2bb89fdd604d6e1e3207d2a876b28c32f57be01b120d53084"}, "downloads": -1, "filename": "willet-1.5.tar.gz", "has_sig": false, "md5_digest": "aa4269bb964397d5ef1f8f08df5fdff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9426267, "upload_time": "2020-02-23T13:08:24", "upload_time_iso_8601": "2020-02-23T13:08:24.628342Z", "url": "https://files.pythonhosted.org/packages/68/e2/ccd16ed96a1b06d796c68391d6ab4983c0fc3662181e8af4a2b0c8761161/willet-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02508abfdf749c9912dca58a4c773d5f", "sha256": "52551f121d2f5d56c392dfdfc44ed7554b1af4475791a3da87d91b37b27d5ea1"}, "downloads": -1, "filename": "willet-1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "02508abfdf749c9912dca58a4c773d5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9466579, "upload_time": "2020-02-23T13:08:16", "upload_time_iso_8601": "2020-02-23T13:08:16.728961Z", "url": "https://files.pythonhosted.org/packages/9a/68/5d7eefdb7392ded3614808f8ab77f1b04efdf1c523a3b0b89d0a69180733/willet-1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa4269bb964397d5ef1f8f08df5fdff8", "sha256": "04b1424ba2ff94f2bb89fdd604d6e1e3207d2a876b28c32f57be01b120d53084"}, "downloads": -1, "filename": "willet-1.5.tar.gz", "has_sig": false, "md5_digest": "aa4269bb964397d5ef1f8f08df5fdff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9426267, "upload_time": "2020-02-23T13:08:24", "upload_time_iso_8601": "2020-02-23T13:08:24.628342Z", "url": "https://files.pythonhosted.org/packages/68/e2/ccd16ed96a1b06d796c68391d6ab4983c0fc3662181e8af4a2b0c8761161/willet-1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:05 2020"}