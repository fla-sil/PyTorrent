{"info": {"author": "Janne R\u00f6nkk\u00f6", "author_email": "janne.ronkko@iki.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "=================\nUnit Test Helpers\n=================\n\nAbout\n=====\n\nUnit Test Helpers (*uth*) is a simple library for Python containing some helper methods for unit testing.\n\nI found myself writing a lot of setup code using *unittest.mock.patch* and *unittest.TestCase.addCleanup*:\n\n.. code:: python\n\n  class MyTestCase(unittest.TestCase):\n      def setUp(self):\n          patcher = unittest.mock.patch('module.function')\n          patcher.start()\n          self.addCleanup(patcher.stop)\n\n          # Or if there was many functions and/or objects to patch\n          # something like:\n          for patcher in (\n              unittest.mock.patch('function_a'),\n              unittest.mock.patch('function_b'),\n          ):\n              patcher.start()\n              self.addCleanup(patcher.stop)\n\nAdding helper methods to TestCase classes (via mixin class) allows easier patching:\n\n.. code:: python\n\n  import unittest\n  import unittest.mock\n\n  import uth\n\n\n  def function_a():\n      return None\n\n\n  class MyTestCase(unittest.TestCase, uth.MockMixin):\n      def setUp(self):\n          # The function function_a is immediately patched and patching is stopped\n          # automatically after the test has run (using unittest.TestCase.addCleanup).\n          mock = self.patched('{}.function_a'.format(__name__), return_value=self.sentinel.retval)\n\n      def test_function_a(self):\n          self.assertEqual(function_a(), self.sentinel.retval)\n\n      def test_sentinel(self):\n          self.assertEqual(self.sentinel.value, unittest.mock.sentinel.value)\n\n      def test_mock(self):\n          mock = self.mock(return_value=self.sentinel.retval)\n          self.assertIsInstance(mock, unittest.mock.Mock)\n\nThe *patched* method is the only one that actually provides functionality not directly present in *unittest.mock*. The\nmembers *mock*, *patch* and *sentinel* are provided for convenience; you don't need to import *unittest.mock* and you\ncan access mock related functionality through *self*.\n\nAPI\n===\n\nuth.MockMixin\n-------------\n\nA mixin class for *unittest.TestCase* (or any other class from which you want to use Mock, sentinel and/or patch).\n\nThe following members are added:\n\n* **ANY**\n\n  unittest.mock.ANY\n\n* **sentinel** (property)\n\n  Access to *unittest.mock.sentinel*\n\n* **call(*args, \\*\\*kwargs)**\n\n  *unittest.mock.call*\n\n* **mock(*args, \\*\\*kwargs)**\n\n  Calls *unittest.mock.Mock* with given arguments\n\n* **magic_mock(*args, \\*\\*kwargs)**\n\n  Calls *unittest.mock.MagicMock* with given arguments\n\n* **patch(*args, \\*\\*kwargs)**\n\n  Calls *unittest.mock.patch* with given arguments\n\n* **patched(*args, \\*\\*kwargs)**\n\n  Calls *unittest.mock.patch* with given arguments, starts the returned patcher, registers stopping the patcher\n  using *self.addCleanup* and returns the return value of *patcher.start* (the *Mock* object).\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janneronkko/uth", "keywords": "unittest mock patch", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "uth", "package_url": "https://pypi.org/project/uth/", "platform": "", "project_url": "https://pypi.org/project/uth/", "project_urls": {"Homepage": "https://github.com/janneronkko/uth"}, "release_url": "https://pypi.org/project/uth/1.1.1/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Unit test helpers", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>Unit Test Helpers (<em>uth</em>) is a simple library for Python containing some helper methods for unit testing.</p>\n<p>I found myself writing a lot of setup code using <em>unittest.mock.patch</em> and <em>unittest.TestCase.addCleanup</em>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">patcher</span> <span class=\"o\">=</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'module.function'</span><span class=\"p\">)</span>\n        <span class=\"n\">patcher</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">addCleanup</span><span class=\"p\">(</span><span class=\"n\">patcher</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Or if there was many functions and/or objects to patch</span>\n        <span class=\"c1\"># something like:</span>\n        <span class=\"k\">for</span> <span class=\"n\">patcher</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n            <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'function_a'</span><span class=\"p\">),</span>\n            <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s1\">'function_b'</span><span class=\"p\">),</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">patcher</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">addCleanup</span><span class=\"p\">(</span><span class=\"n\">patcher</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n</pre>\n<p>Adding helper methods to TestCase classes (via mixin class) allows easier patching:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest.mock</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">uth</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">function_a</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">uth</span><span class=\"o\">.</span><span class=\"n\">MockMixin</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The function function_a is immediately patched and patching is stopped</span>\n        <span class=\"c1\"># automatically after the test has run (using unittest.TestCase.addCleanup).</span>\n        <span class=\"n\">mock</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">patched</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.function_a'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">),</span> <span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sentinel</span><span class=\"o\">.</span><span class=\"n\">retval</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_function_a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">function_a</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sentinel</span><span class=\"o\">.</span><span class=\"n\">retval</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_sentinel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sentinel</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">sentinel</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_mock</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">mock</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">return_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sentinel</span><span class=\"o\">.</span><span class=\"n\">retval</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">mock</span><span class=\"p\">,</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">Mock</span><span class=\"p\">)</span>\n</pre>\n<p>The <em>patched</em> method is the only one that actually provides functionality not directly present in <em>unittest.mock</em>. The\nmembers <em>mock</em>, <em>patch</em> and <em>sentinel</em> are provided for convenience; you don\u2019t need to import <em>unittest.mock</em> and you\ncan access mock related functionality through <em>self</em>.</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<h2 id=\"uth-mockmixin\"><span class=\"section-subtitle\">uth.MockMixin</span></h2>\n<p>A mixin class for <em>unittest.TestCase</em> (or any other class from which you want to use Mock, sentinel and/or patch).</p>\n<p>The following members are added:</p>\n<ul>\n<li><p><strong>ANY</strong></p>\n<p>unittest.mock.ANY</p>\n</li>\n<li><p><strong>sentinel</strong> (property)</p>\n<p>Access to <em>unittest.mock.sentinel</em></p>\n</li>\n<li><p><strong>call(*args, **kwargs)</strong></p>\n<p><em>unittest.mock.call</em></p>\n</li>\n<li><p><strong>mock(*args, **kwargs)</strong></p>\n<p>Calls <em>unittest.mock.Mock</em> with given arguments</p>\n</li>\n<li><p><strong>magic_mock(*args, **kwargs)</strong></p>\n<p>Calls <em>unittest.mock.MagicMock</em> with given arguments</p>\n</li>\n<li><p><strong>patch(*args, **kwargs)</strong></p>\n<p>Calls <em>unittest.mock.patch</em> with given arguments</p>\n</li>\n<li><p><strong>patched(*args, **kwargs)</strong></p>\n<p>Calls <em>unittest.mock.patch</em> with given arguments, starts the returned patcher, registers stopping the patcher\nusing <em>self.addCleanup</em> and returns the return value of <em>patcher.start</em> (the <em>Mock</em> object).</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6990592, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3ba7d7e65e6d6c9020df0d70850a2835", "sha256": "bc2b178f2e7ef06b2b2d73764e13af71501ab867843d0ad39816ff34ee6f26ef"}, "downloads": -1, "filename": "uth-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3ba7d7e65e6d6c9020df0d70850a2835", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 2384, "upload_time": "2017-08-31T11:45:35", "upload_time_iso_8601": "2017-08-31T11:45:35.586918Z", "url": "https://files.pythonhosted.org/packages/62/bb/663f1c3e0652b75ac16c4dd4a29ea2d22efb94a19b9fa5d6adfe95c7054d/uth-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e1726989a7f0075b957fc4f705f0b23", "sha256": "87138db0dff0a9a000b9465535c98e6bbe2dd5f1ef46cf305af2287cd8816157"}, "downloads": -1, "filename": "uth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3e1726989a7f0075b957fc4f705f0b23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2110, "upload_time": "2017-08-31T11:45:37", "upload_time_iso_8601": "2017-08-31T11:45:37.123468Z", "url": "https://files.pythonhosted.org/packages/d9/a4/3e82fa5c7e8d0b08732334ea15ac55c91b395662211f2d8df3428cdfffab/uth-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "eefea0c6f9894cd107c5aa09cb8093be", "sha256": "be74458cef81f35bba05a9b3b86be6f3fbb4a9b8c7016e71c620744fd6cb5194"}, "downloads": -1, "filename": "uth-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eefea0c6f9894cd107c5aa09cb8093be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 2449, "upload_time": "2017-12-08T16:02:05", "upload_time_iso_8601": "2017-12-08T16:02:05.937128Z", "url": "https://files.pythonhosted.org/packages/ff/b2/fac9c1b65dbfe1f665e75169c3e7e3922d680cad86a99d8ea6b32d8bc833/uth-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86b53c1913383fde67f7f43ef5797512", "sha256": "3adf77b998253935755241df2e806a79be8843ca384ed1b036072ef44c08a2a4"}, "downloads": -1, "filename": "uth-1.1.0.tar.gz", "has_sig": false, "md5_digest": "86b53c1913383fde67f7f43ef5797512", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2174, "upload_time": "2017-12-08T16:02:07", "upload_time_iso_8601": "2017-12-08T16:02:07.465822Z", "url": "https://files.pythonhosted.org/packages/c9/c5/5b790f2ebda07a0dccc115c349d284564cfdaa66318b49eeab3cb12df4da/uth-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "802df6f2c6db71ba6c6e70f898539043", "sha256": "8d6093162159ee7fa8b36584d84f3b827acfcfa726cc7ba8a30c85292cc9e17c"}, "downloads": -1, "filename": "uth-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "802df6f2c6db71ba6c6e70f898539043", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 3368, "upload_time": "2020-04-10T03:45:23", "upload_time_iso_8601": "2020-04-10T03:45:23.621908Z", "url": "https://files.pythonhosted.org/packages/72/bd/12206ceec2564d1043559678454ba4da848c9850744a954ec48aabdc03ef/uth-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b3085aa0443bc151993f2a2d3eb9cd6", "sha256": "c62f952edcc6d6c321917ba9e2cfebed42a7dc2a71f9da740be2aa4c2c08a48d"}, "downloads": -1, "filename": "uth-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3b3085aa0443bc151993f2a2d3eb9cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2744, "upload_time": "2020-04-10T03:45:24", "upload_time_iso_8601": "2020-04-10T03:45:24.940572Z", "url": "https://files.pythonhosted.org/packages/df/f7/1ac0b2ee17699ad2efa12747ece1c9838b83901d2641d3dd2f8d9282f9b8/uth-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "802df6f2c6db71ba6c6e70f898539043", "sha256": "8d6093162159ee7fa8b36584d84f3b827acfcfa726cc7ba8a30c85292cc9e17c"}, "downloads": -1, "filename": "uth-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "802df6f2c6db71ba6c6e70f898539043", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 3368, "upload_time": "2020-04-10T03:45:23", "upload_time_iso_8601": "2020-04-10T03:45:23.621908Z", "url": "https://files.pythonhosted.org/packages/72/bd/12206ceec2564d1043559678454ba4da848c9850744a954ec48aabdc03ef/uth-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b3085aa0443bc151993f2a2d3eb9cd6", "sha256": "c62f952edcc6d6c321917ba9e2cfebed42a7dc2a71f9da740be2aa4c2c08a48d"}, "downloads": -1, "filename": "uth-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3b3085aa0443bc151993f2a2d3eb9cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2744, "upload_time": "2020-04-10T03:45:24", "upload_time_iso_8601": "2020-04-10T03:45:24.940572Z", "url": "https://files.pythonhosted.org/packages/df/f7/1ac0b2ee17699ad2efa12747ece1c9838b83901d2641d3dd2f8d9282f9b8/uth-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:51 2020"}