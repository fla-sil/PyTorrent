{"info": {"author": "SDSLabs", "author_email": "contact@sdslabs.co.in", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bruter\n\nA rule based string bruteforcer. Similar to [brute](https://pypi.org/project/brute/) but more versatile.\n\n## Overview\n\nBruter provides a callback based bruteforce interface. Mainly a single function `brute` is exported:\n\n```python\nbrute(fmt, callback=None, symbols={})\n```\n\n- `fmt`: The string to be plugged variables into\n- `callback`: This is the function which will be called for every terminal value\n- `symbols`: This is a `dict` which maps symbols (which are strings) to a list of values\n\n## Example\n\n```python\nfrom bruter import brute\n\ndef printer(x):\n\tprint(x)\n\nsymbols = {\n\t'H': ['a', 'b', 'c'],\n\t'L': ['x', 'y'],\n\t'X': ['1', '2']\n}\n\nbrute(\"hello <H> <L> <X>\", printer, symbols)\n\n```\n\nThis one gives you output --\n\n```\nhello a x 1\nhello a x 2\nhello a y 1\nhello a y 2\nhello b x 1\nhello b x 2\nhello b y 1\nhello b y 2\nhello c x 1\nhello c x 2\nhello c y 1\nhello c y 2\n```\n\nYou can also use the predefined strings inside the `string` module in Python 3 for defining symbols\n\n```python\nfrom bruter import brute\nimport string\n\ndef printer(x):\n\tprint(x)\n\nsymbols = {\n\t'H': string.ascii_lowercase\n}\n\nbrute(\"hello <H>\", printer, symbols)\n\n```\nwhich gives output --\n\n```\nhello a\nhello b\nhello c\nhello d\nhello e\nhello f\nhello g\nhello h\nhello i\nhello j\nhello k\nhello l\nhello m\nhello n\nhello o\nhello p\nhello q\nhello r\nhello s\nhello t\nhello u\nhello v\nhello w\nhello x\nhello y\nhello z\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdslabs/bruter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bruter", "package_url": "https://pypi.org/project/bruter/", "platform": "", "project_url": "https://pypi.org/project/bruter/", "project_urls": {"Homepage": "https://github.com/sdslabs/bruter"}, "release_url": "https://pypi.org/project/bruter/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "String bruteforcer", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bruter</h1>\n<p>A rule based string bruteforcer. Similar to <a href=\"https://pypi.org/project/brute/\" rel=\"nofollow\">brute</a> but more versatile.</p>\n<h2>Overview</h2>\n<p>Bruter provides a callback based bruteforce interface. Mainly a single function <code>brute</code> is exported:</p>\n<pre><span class=\"n\">brute</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n</pre>\n<ul>\n<li><code>fmt</code>: The string to be plugged variables into</li>\n<li><code>callback</code>: This is the function which will be called for every terminal value</li>\n<li><code>symbols</code>: This is a <code>dict</code> which maps symbols (which are strings) to a list of values</li>\n</ul>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bruter</span> <span class=\"kn\">import</span> <span class=\"n\">brute</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">printer</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">symbols</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'H'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">],</span>\n\t<span class=\"s1\">'L'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">],</span>\n\t<span class=\"s1\">'X'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">brute</span><span class=\"p\">(</span><span class=\"s2\">\"hello &lt;H&gt; &lt;L&gt; &lt;X&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">printer</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"p\">)</span>\n</pre>\n<p>This one gives you output --</p>\n<pre><code>hello a x 1\nhello a x 2\nhello a y 1\nhello a y 2\nhello b x 1\nhello b x 2\nhello b y 1\nhello b y 2\nhello c x 1\nhello c x 2\nhello c y 1\nhello c y 2\n</code></pre>\n<p>You can also use the predefined strings inside the <code>string</code> module in Python 3 for defining symbols</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bruter</span> <span class=\"kn\">import</span> <span class=\"n\">brute</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">printer</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">symbols</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'H'</span><span class=\"p\">:</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">brute</span><span class=\"p\">(</span><span class=\"s2\">\"hello &lt;H&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">printer</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"p\">)</span>\n</pre>\n<p>which gives output --</p>\n<pre><code>hello a\nhello b\nhello c\nhello d\nhello e\nhello f\nhello g\nhello h\nhello i\nhello j\nhello k\nhello l\nhello m\nhello n\nhello o\nhello p\nhello q\nhello r\nhello s\nhello t\nhello u\nhello v\nhello w\nhello x\nhello y\nhello z\n</code></pre>\n\n          </div>"}, "last_serial": 6691939, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "e307d9dd9ab770890e71dc4c94f97316", "sha256": "3f0d196da2e196388cde485b215b26664f6d1084f63789ca10f99552ae366000"}, "downloads": -1, "filename": "bruter-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e307d9dd9ab770890e71dc4c94f97316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3071, "upload_time": "2020-02-24T20:43:22", "upload_time_iso_8601": "2020-02-24T20:43:22.975341Z", "url": "https://files.pythonhosted.org/packages/3b/90/a798670357dacf042cdd05b65f994f282fef01dffc5f9fce71d6d66ce7f8/bruter-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df3a86aa9e427286bd5be518b1ce10b7", "sha256": "766a8e1f92310feaafd41a55f6cb296e8515f61a45f1ffa7702c9fd6c821c5bc"}, "downloads": -1, "filename": "bruter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "df3a86aa9e427286bd5be518b1ce10b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2349, "upload_time": "2020-02-24T20:43:24", "upload_time_iso_8601": "2020-02-24T20:43:24.877295Z", "url": "https://files.pythonhosted.org/packages/da/ef/31913c285f28401a2c6aca109070a10b361529fb7a4903dfb49ecb4b6dcb/bruter-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e307d9dd9ab770890e71dc4c94f97316", "sha256": "3f0d196da2e196388cde485b215b26664f6d1084f63789ca10f99552ae366000"}, "downloads": -1, "filename": "bruter-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e307d9dd9ab770890e71dc4c94f97316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3071, "upload_time": "2020-02-24T20:43:22", "upload_time_iso_8601": "2020-02-24T20:43:22.975341Z", "url": "https://files.pythonhosted.org/packages/3b/90/a798670357dacf042cdd05b65f994f282fef01dffc5f9fce71d6d66ce7f8/bruter-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df3a86aa9e427286bd5be518b1ce10b7", "sha256": "766a8e1f92310feaafd41a55f6cb296e8515f61a45f1ffa7702c9fd6c821c5bc"}, "downloads": -1, "filename": "bruter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "df3a86aa9e427286bd5be518b1ce10b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2349, "upload_time": "2020-02-24T20:43:24", "upload_time_iso_8601": "2020-02-24T20:43:24.877295Z", "url": "https://files.pythonhosted.org/packages/da/ef/31913c285f28401a2c6aca109070a10b361529fb7a4903dfb49ecb4b6dcb/bruter-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:13 2020"}