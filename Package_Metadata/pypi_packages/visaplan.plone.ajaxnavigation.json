{"info": {"author": "Tobias Herp", "author_email": "tobias.herp@visaplan.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Natural Language :: German", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": ".. This README is meant for consumption by humans and pypi. Pypi can render rst files so please do not use Sphinx features.\n   If you want to learn more about writing documentation, please check out: http://docs.plone.org/about/documentation_styleguide.html\n   This text does not appear on pypi or github. It is a comment.\n\n=============================\nvisaplan.plone.ajaxnavigation\n=============================\n\nAdd AJAX navigation to a Plone site.\n\nThis is probably not the most advanced or state-of-the-art way to add AJAX\nnavigation; for Plone 5, I was told about `plone.patternslib`_, based on\n`patternslib`_.\n\nFor `Volto`_ sites, the whole jQuery-based handling might be obsolete because\nof the use of `React.js`_.\n\nAt the time of this writing, those were no options for me since I was still on\nPlone 4.3.  Thus, I needed a working solution.\nDepending on the quality, I'll switch to some Plone-5-ish solution when doing\nthe leap, or I'll stick with my own.\n\nThe general idea is:\n\n- Catch the ``click`` event for every ``a`` element on the page.\n\n- For some links, a special check will tell to proceed with the standard\n  behaviour, i.e. load the target the standard way; this includes:\n\n  - Link targets outside of the current site (another hostname is given)\n  - Management pages (e.g. starting with ``manage_``)\n  - Other pages which don't load the navigation links etc. anyway,\n    or wouldn't work when loaded via AJAX\n  - Anchor elements with certain attributes (``data-fullpage-only=\"true\"``)\n  - Views for contexts which don't have a suitable embedable view yet.\n\n  For such link targets, this function will simply return *true*,\n  and the page is loaded in the standard way.\n\n- If that check function concludes, \"let's load the target via AJAX\",\n  it will send a request to an ``.../@@ajax-nav`` address which will return\n  all necessary JSON data; using the result,\n  it will look for certain elements on the page and try to update them:\n\n  - ``#content`` (the target for ``content`` as of the default configuration)\n\n  and, optionally:\n\n  - breadcrumbs\n  - other page elements, like context specific search forms.\n\n  It will also set the page url and title accordingly\n  (from the ``@url`` and ``@title`` keys of the JSON reply, respectively),\n  allowing for the browser history.\n\n- If the tried URLs fail to return a usable JSON answer,\n  or if the target URL is inappropriate for other reasons\n  (e.g. page-local, or leaving the current site),\n  the target page is loaded the normal, non-AJAX way\n  (i.e., loading the whole page).\n\n- All hyperlinks will *continue* to work with Javascript switched off;\n  of course, pages will load faster when switched on.\n\n\nFeatures\n--------\n\n- Tries up to two URLs for each ``a`` element (only one, if the target URL ends\n  with \"``/``\", or if the final path element can be considered a view method\n  name rather than an object id)\n- Can be configured using the Plone registry:\n\n  - ``target`` attributes of ``a`` elements are regarded *by default*,\n    following the `Principle of Least Surprise`_.\n    However, you are encouraged to disregard them, since the use of this\n    attribute is not recommended.\n  - By default, ``a[target]`` elements are secured by adding to them a ``rel``\n    value of noopener_.\n\n\nTo do\n-----\n\n- Use a `web worker`_.\n- Make this package RequireJS_-aware.\n- Provide support for additional search configurations.\n- Pick values from contents to be replaced, and re-insert them\n  (e.g. search expressions in context specific search forms).\n\n\nExamples\n--------\n\nThis add-on is currently under development and not yet used on public internet\nsites.\n\n\nDocumentation\n-------------\n\nFull documentation for end users can be found in the \"docs\" folder.\n\n\nInstallation\n------------\n\nInstall visaplan.plone.ajaxnavigation_ by adding it to your buildout::\n\n    [buildout]\n\n    ...\n\n    eggs =\n        visaplan.plone.ajaxnavigation\n\n\nand then running ``bin/buildout``.\n\nOr, more likely:\n\nAdd it to the dependencies of your package, e.g. in your ``setup.py`` file.\n\nYou'll need to provide ``@@embed`` views for your content types;\nideally, you can use your already-existing ``BrowserView`` classes.\nUsually it will be sufficient to make a copy of your ``view`` template\nand inject an ``ajax_load=1`` request variable.\n\n\nQuestions\n---------\n\n\"Why don't you simply inject that ``ajax_load`` variable\nautomatically per BrowserView code?\"\n\nYes, we do so already.\n\nThere is a simple ``.views.AjaxLoadBrowserView`` class which takes care of\nthis, and a few subclasses.\n\n\"Why don't you drop that ``embed`` view name, and simply use ``view``,\nwith ``ajax_load=1`` injected?\n\nWe do so as a fallback option.\nBut some of our pages simply don't work this way\n(e.g. because some necessary scripts are loaded in a METAL slot\nwhich is dropped if ``ajax_load`` is found true),\nso we need to be able to be explicit.\n\nThus, an ``..._embed`` view is used, if present, and then the standard view\njumps in as a fallback.\n\nThe visaplan.plone.ajaxnavigation package was developed as a drop-in solution\nfor sites which might not do everything right already.\nIf your site works fine with ``ajax_load`` injected, you'll need to do less\ncustomization work to make it run.\n\nQuite probably there are several things which could be done better.\nContributions are welcome.\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/visaplan/plone.ajaxnavigation/issues\n- Source Code: https://github.com/visaplan/plone.ajaxnavigation\n\n\nSupport\n-------\n\nIf you are having issues, please let us know;\nplease use the `issue tracker`_ mentioned above.\n\n\nLicense\n-------\n\nThe project is licensed under the GPLv2 (or later).\n\n.. _`Volto`: https://volto.kitconcept.com/\n.. _`React.js`: https://reactjs.org/\n.. _`patternslib`: https://patternslib.com/\n.. _`plone.patternslib`: https://pypi.org/project/plone.patternslib/\n.. _`issue tracker`: https://github.com/visaplan/plone.ajaxnavigation/issues\n.. _`web worker`: https://html.spec.whatwg.org/multipage/workers.html#workers\n.. _RequireJS: https://requirejs.org/\n.. _visaplan.plone.ajaxnavigation: https://pypi.org/project/visaplan.plone.ajaxnavigation\n.. _`Principle of Least Surprise`: https://en.wikipedia.org/wiki/Principle_of_least_astonishment\n.. _noopener: https://mathiasbynens.github.io/rel-noopener/\n\n.. vim: tw=79 cc=+1 sw=4 sts=4 si et\n\n\nContributors\n============\n\n- Tobias Herp, tobias.herp@visaplan.com\n\n\nChangelog\n=========\n\n\n1.0.0.3 (2020-03-06)\n--------------------\n\n- Hotfixes due to customization problems\n  (for internal use).\n\n[tobiasherp]\n\n\n1.0.0 (2020-03-06)\n------------------\n\n- Initial release.\n  [tobiasherp]", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "GPL version 2+", "maintainer": "", "maintainer_email": "", "name": "visaplan.plone.ajaxnavigation", "package_url": "https://pypi.org/project/visaplan.plone.ajaxnavigation/", "platform": "", "project_url": "https://pypi.org/project/visaplan.plone.ajaxnavigation/", "project_urls": {"Documentation": "https://pypi.org/project/visaplan.plone.ajaxnavigation", "Source": "https://github.com/visaplan/plone.ajaxnavigation", "Tracker": "https://github.com/visaplan/plone.ajaxnavigation/issues"}, "release_url": "https://pypi.org/project/visaplan.plone.ajaxnavigation/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Plone add-on to add AJAX navigation", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Add AJAX navigation to a Plone site.</p>\n<p>This is probably not the most advanced or state-of-the-art way to add AJAX\nnavigation; for Plone 5, I was told about <a href=\"https://pypi.org/project/plone.patternslib/\" rel=\"nofollow\">plone.patternslib</a>, based on\n<a href=\"https://patternslib.com/\" rel=\"nofollow\">patternslib</a>.</p>\n<p>For <a href=\"https://volto.kitconcept.com/\" rel=\"nofollow\">Volto</a> sites, the whole jQuery-based handling might be obsolete because\nof the use of <a href=\"https://reactjs.org/\" rel=\"nofollow\">React.js</a>.</p>\n<p>At the time of this writing, those were no options for me since I was still on\nPlone 4.3.  Thus, I needed a working solution.\nDepending on the quality, I\u2019ll switch to some Plone-5-ish solution when doing\nthe leap, or I\u2019ll stick with my own.</p>\n<p>The general idea is:</p>\n<ul>\n<li><p>Catch the <tt>click</tt> event for every <tt>a</tt> element on the page.</p>\n</li>\n<li><p>For some links, a special check will tell to proceed with the standard\nbehaviour, i.e. load the target the standard way; this includes:</p>\n<ul>\n<li>Link targets outside of the current site (another hostname is given)</li>\n<li>Management pages (e.g. starting with <tt>manage_</tt>)</li>\n<li>Other pages which don\u2019t load the navigation links etc. anyway,\nor wouldn\u2019t work when loaded via AJAX</li>\n<li>Anchor elements with certain attributes (<tt><span class=\"pre\">data-fullpage-only=\"true\"</span></tt>)</li>\n<li>Views for contexts which don\u2019t have a suitable embedable view yet.</li>\n</ul>\n<p>For such link targets, this function will simply return <em>true</em>,\nand the page is loaded in the standard way.</p>\n</li>\n<li><p>If that check function concludes, \u201clet\u2019s load the target via AJAX\u201d,\nit will send a request to an <tt><span class=\"pre\">.../@@ajax-nav</span></tt> address which will return\nall necessary JSON data; using the result,\nit will look for certain elements on the page and try to update them:</p>\n<ul>\n<li><tt>#content</tt> (the target for <tt>content</tt> as of the default configuration)</li>\n</ul>\n<p>and, optionally:</p>\n<ul>\n<li>breadcrumbs</li>\n<li>other page elements, like context specific search forms.</li>\n</ul>\n<p>It will also set the page url and title accordingly\n(from the <tt>@url</tt> and <tt>@title</tt> keys of the JSON reply, respectively),\nallowing for the browser history.</p>\n</li>\n<li><p>If the tried URLs fail to return a usable JSON answer,\nor if the target URL is inappropriate for other reasons\n(e.g. page-local, or leaving the current site),\nthe target page is loaded the normal, non-AJAX way\n(i.e., loading the whole page).</p>\n</li>\n<li><p>All hyperlinks will <em>continue</em> to work with Javascript switched off;\nof course, pages will load faster when switched on.</p>\n</li>\n</ul>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Tries up to two URLs for each <tt>a</tt> element (only one, if the target URL ends\nwith \u201c<tt>/</tt>\u201d, or if the final path element can be considered a view method\nname rather than an object id)</li>\n<li>Can be configured using the Plone registry:<ul>\n<li><tt>target</tt> attributes of <tt>a</tt> elements are regarded <em>by default</em>,\nfollowing the <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_astonishment\" rel=\"nofollow\">Principle of Least Surprise</a>.\nHowever, you are encouraged to disregard them, since the use of this\nattribute is not recommended.</li>\n<li>By default, <tt>a[target]</tt> elements are secured by adding to them a <tt>rel</tt>\nvalue of <a href=\"https://mathiasbynens.github.io/rel-noopener/\" rel=\"nofollow\">noopener</a>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"to-do\">\n<h2>To do</h2>\n<ul>\n<li>Use a <a href=\"https://html.spec.whatwg.org/multipage/workers.html#workers\" rel=\"nofollow\">web worker</a>.</li>\n<li>Make this package <a href=\"https://requirejs.org/\" rel=\"nofollow\">RequireJS</a>-aware.</li>\n<li>Provide support for additional search configurations.</li>\n<li>Pick values from contents to be replaced, and re-insert them\n(e.g. search expressions in context specific search forms).</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>This add-on is currently under development and not yet used on public internet\nsites.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Full documentation for end users can be found in the \u201cdocs\u201d folder.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install <a href=\"https://pypi.org/project/visaplan.plone.ajaxnavigation\" rel=\"nofollow\">visaplan.plone.ajaxnavigation</a> by adding it to your buildout:</p>\n<pre>[buildout]\n\n...\n\neggs =\n    visaplan.plone.ajaxnavigation\n</pre>\n<p>and then running <tt>bin/buildout</tt>.</p>\n<p>Or, more likely:</p>\n<p>Add it to the dependencies of your package, e.g. in your <tt>setup.py</tt> file.</p>\n<p>You\u2019ll need to provide <tt>@@embed</tt> views for your content types;\nideally, you can use your already-existing <tt>BrowserView</tt> classes.\nUsually it will be sufficient to make a copy of your <tt>view</tt> template\nand inject an <tt>ajax_load=1</tt> request variable.</p>\n</div>\n<div id=\"questions\">\n<h2>Questions</h2>\n<p>\u201cWhy don\u2019t you simply inject that <tt>ajax_load</tt> variable\nautomatically per BrowserView code?\u201d</p>\n<p>Yes, we do so already.</p>\n<p>There is a simple <tt>.views.AjaxLoadBrowserView</tt> class which takes care of\nthis, and a few subclasses.</p>\n<p>\u201cWhy don\u2019t you drop that <tt>embed</tt> view name, and simply use <tt>view</tt>,\nwith <tt>ajax_load=1</tt> injected?</p>\n<p>We do so as a fallback option.\nBut some of our pages simply don\u2019t work this way\n(e.g. because some necessary scripts are loaded in a METAL slot\nwhich is dropped if <tt>ajax_load</tt> is found true),\nso we need to be able to be explicit.</p>\n<p>Thus, an <tt><span class=\"pre\">..._embed</span></tt> view is used, if present, and then the standard view\njumps in as a fallback.</p>\n<p>The visaplan.plone.ajaxnavigation package was developed as a drop-in solution\nfor sites which might not do everything right already.\nIf your site works fine with <tt>ajax_load</tt> injected, you\u2019ll need to do less\ncustomization work to make it run.</p>\n<p>Quite probably there are several things which could be done better.\nContributions are welcome.</p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<ul>\n<li>Issue Tracker: <a href=\"https://github.com/visaplan/plone.ajaxnavigation/issues\" rel=\"nofollow\">https://github.com/visaplan/plone.ajaxnavigation/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/visaplan/plone.ajaxnavigation\" rel=\"nofollow\">https://github.com/visaplan/plone.ajaxnavigation</a></li>\n</ul>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>If you are having issues, please let us know;\nplease use the <a href=\"https://github.com/visaplan/plone.ajaxnavigation/issues\" rel=\"nofollow\">issue tracker</a> mentioned above.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The project is licensed under the GPLv2 (or later).</p>\n<div id=\"contributors\">\n<h3>Contributors</h3>\n<ul>\n<li>Tobias Herp, <a href=\"mailto:tobias.herp%40visaplan.com\">tobias<span>.</span>herp<span>@</span>visaplan<span>.</span>com</a></li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"id2\">\n<h2>1.0.0.3 (2020-03-06)</h2>\n<ul>\n<li>Hotfixes due to customization problems\n(for internal use).</li>\n</ul>\n<p>[tobiasherp]</p>\n</div>\n<div id=\"id3\">\n<h2>1.0.0 (2020-03-06)</h2>\n<ul>\n<li>Initial release.\n[tobiasherp]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6764748, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0e0f06fa2cd802e00426d8087b07adc1", "sha256": "928eebd3d01bd5654e204c40f1d23562aef5cce14ff8085e84887966a9847b4d"}, "downloads": -1, "filename": "visaplan.plone.ajaxnavigation-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0e0f06fa2cd802e00426d8087b07adc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92138, "upload_time": "2020-03-06T21:18:18", "upload_time_iso_8601": "2020-03-06T21:18:18.084861Z", "url": "https://files.pythonhosted.org/packages/a1/66/aec2117c3a9591bb2a0d5ddf19c672b68d82201500798cfcf9e246249287/visaplan.plone.ajaxnavigation-1.0.0.tar.gz", "yanked": false}], "1.0.dev12": [{"comment_text": "", "digests": {"md5": "41c02a2b7eb4580dacdefb69c97384e5", "sha256": "19d16a13b3355031bad76cf0d099c8afd8237104f59747d503755571a8100fc5"}, "downloads": -1, "filename": "visaplan.plone.ajaxnavigation-1.0.dev12.tar.gz", "has_sig": false, "md5_digest": "41c02a2b7eb4580dacdefb69c97384e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46956, "upload_time": "2020-01-16T12:00:59", "upload_time_iso_8601": "2020-01-16T12:00:59.034382Z", "url": "https://files.pythonhosted.org/packages/55/36/30d9d3ba3b3252734814af1d8b540b98c48c16b8943a51373d63830a6389/visaplan.plone.ajaxnavigation-1.0.dev12.tar.gz", "yanked": false}], "1.0.dev4": [{"comment_text": "", "digests": {"md5": "659c6abc79df61f9fed6d51c59bd6845", "sha256": "1ec6adc774f41ecd5e97e552683d50adfddf805fd0f6567a8997a6e77660713a"}, "downloads": -1, "filename": "visaplan.plone.ajaxnavigation-1.0.dev4.tar.gz", "has_sig": false, "md5_digest": "659c6abc79df61f9fed6d51c59bd6845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30707, "upload_time": "2019-07-11T16:38:10", "upload_time_iso_8601": "2019-07-11T16:38:10.143979Z", "url": "https://files.pythonhosted.org/packages/8f/15/d1f79ff4f28be37df5da66925354226a9e75554e07db8c887b84f4e01905/visaplan.plone.ajaxnavigation-1.0.dev4.tar.gz", "yanked": false}], "1.0.dev6": [{"comment_text": "", "digests": {"md5": "e3e2289f3feb547dbd653e9b7015b665", "sha256": "31fb6d9742419632fb8ba99830c7979b594b792be34aa5a4bcc621f937cb09a8"}, "downloads": -1, "filename": "visaplan.plone.ajaxnavigation-1.0.dev6.tar.gz", "has_sig": false, "md5_digest": "e3e2289f3feb547dbd653e9b7015b665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39602, "upload_time": "2019-08-22T12:33:35", "upload_time_iso_8601": "2019-08-22T12:33:35.450291Z", "url": "https://files.pythonhosted.org/packages/a4/8f/9174d6dae519b425ebfe1d204f0d17ba0b4ef1797568336900ecf9ec57b6/visaplan.plone.ajaxnavigation-1.0.dev6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e0f06fa2cd802e00426d8087b07adc1", "sha256": "928eebd3d01bd5654e204c40f1d23562aef5cce14ff8085e84887966a9847b4d"}, "downloads": -1, "filename": "visaplan.plone.ajaxnavigation-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0e0f06fa2cd802e00426d8087b07adc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92138, "upload_time": "2020-03-06T21:18:18", "upload_time_iso_8601": "2020-03-06T21:18:18.084861Z", "url": "https://files.pythonhosted.org/packages/a1/66/aec2117c3a9591bb2a0d5ddf19c672b68d82201500798cfcf9e246249287/visaplan.plone.ajaxnavigation-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:35:23 2020"}