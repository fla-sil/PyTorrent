{"info": {"author": "Christophe de Vienne", "author_email": "christophe@unlish.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: CubicWeb", "Programming Language :: JavaScript", "Programming Language :: Python"], "description": "===============\nCubicWeb Celery\n===============\n\nCelery integration with CubicWeb\n\nGetting Started\n---------------\n\nEnable the 'celery' cube in your ``myapp`` cubicweb instance::\n  \n  $ cubicweb-ctl shell myapp\n  entering the migration python shell\n  just type migration commands or arbitrary python code and type ENTER to execute it\n  type \"exit\" or Ctrl-D to quit the shell and resume operation\n  >>> add_cube('celery')\n  >>> ^D\n\nIf needed, configure the broker_url in ``all-in-one.conf``. By\ndefault, and only when using a postgresql database, the trunk_\ntransport will be used for the broker; make sure it is installed.\n\n.. _trunk: https://github.com/cyberdelia/trunk\n\n\nWrite a task::\n\n  from cubicweb_celery import app\n\n  @app.cwtask\n  def ping(self):\n      return 'pong'\n\n  @app.cwtask\n  def users(self):\n      return [str(x[0]) for x in self.cw_cnx.execute('String L WHERE U login L')]\n\n\nor as a class::\n\n    from cubicweb_celery import app\n\n    class MyTask(app.Task):\n        need_cnx = True  # if false (the default), self.cw_cnx will not be set\n                         # before running the task\n\n        def run(self):\n            self.cw_cnx.execute('Any X WHERE ...')\n\n.. Note:: In order to have the task automatically available by the\n          celery worker, you must ensure that it is in a\n          Python file that is automatically loaded by CubicWeb, best\n          candidate being the ``sobjects`` module of a cube (see the\n          `CubicWeb's regitry documentation`_).\n\n\nThen start a celery worker::\n\n    celery -A cubicweb_celery -i INSTANCE_NAME worker [ --beat ]\n\n\nThen you can make the worker execute a task by calling it, eg. from\nan Operation_. You may also run a task from a ``cubicweb-ctl shell``::\n\n  $ cubicweb-ctl shell myapp\n  >>> from cubes.myapp.sobjects import ping, users\n  >>> print ping.delay().wait()\n  'pong'\n  >>> print users.delay().wait()\n  ['anon', 'admin']\n\n\n.. _`CubicWeb's regitry documentation`: https://docs.cubicweb.org/book/intro/concepts.html#the-registry\n.. _Operation: https://docs.cubicweb.org/book/devrepo/repo/hooks.html#operations", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.cubicweb.org/project/cubicweb-celery", "keywords": "", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "cubicweb-celery", "package_url": "https://pypi.org/project/cubicweb-celery/", "platform": "", "project_url": "https://pypi.org/project/cubicweb-celery/", "project_urls": {"Homepage": "http://www.cubicweb.org/project/cubicweb-celery"}, "release_url": "https://pypi.org/project/cubicweb-celery/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Celery cube", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Celery integration with CubicWeb</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Enable the \u2018celery\u2019 cube in your <tt>myapp</tt> cubicweb instance:</p>\n<pre>$ cubicweb-ctl shell myapp\nentering the migration python shell\njust type migration commands or arbitrary python code and type ENTER to execute it\ntype \"exit\" or Ctrl-D to quit the shell and resume operation\n&gt;&gt;&gt; add_cube('celery')\n&gt;&gt;&gt; ^D\n</pre>\n<p>If needed, configure the broker_url in <tt><span class=\"pre\">all-in-one.conf</span></tt>. By\ndefault, and only when using a postgresql database, the <a href=\"https://github.com/cyberdelia/trunk\" rel=\"nofollow\">trunk</a>\ntransport will be used for the broker; make sure it is installed.</p>\n<p>Write a task:</p>\n<pre>from cubicweb_celery import app\n\n@app.cwtask\ndef ping(self):\n    return 'pong'\n\n@app.cwtask\ndef users(self):\n    return [str(x[0]) for x in self.cw_cnx.execute('String L WHERE U login L')]\n</pre>\n<p>or as a class:</p>\n<pre>from cubicweb_celery import app\n\nclass MyTask(app.Task):\n    need_cnx = True  # if false (the default), self.cw_cnx will not be set\n                     # before running the task\n\n    def run(self):\n        self.cw_cnx.execute('Any X WHERE ...')\n</pre>\n<div>\n<p>Note</p>\n<p>In order to have the task automatically available by the\ncelery worker, you must ensure that it is in a\nPython file that is automatically loaded by CubicWeb, best\ncandidate being the <tt>sobjects</tt> module of a cube (see the\n<a href=\"https://docs.cubicweb.org/book/intro/concepts.html#the-registry\" rel=\"nofollow\">CubicWeb\u2019s regitry documentation</a>).</p>\n</div>\n<p>Then start a celery worker:</p>\n<pre>celery -A cubicweb_celery -i INSTANCE_NAME worker [ --beat ]\n</pre>\n<p>Then you can make the worker execute a task by calling it, eg. from\nan <a href=\"https://docs.cubicweb.org/book/devrepo/repo/hooks.html#operations\" rel=\"nofollow\">Operation</a>. You may also run a task from a <tt><span class=\"pre\">cubicweb-ctl</span> shell</tt>:</p>\n<pre>$ cubicweb-ctl shell myapp\n&gt;&gt;&gt; from cubes.myapp.sobjects import ping, users\n&gt;&gt;&gt; print ping.delay().wait()\n'pong'\n&gt;&gt;&gt; print users.delay().wait()\n['anon', 'admin']\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4791134, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "73ba5707067640f740378c8818a2865c", "sha256": "a5612ea4c0a58e4b8f666f30887bd573f11ad625ac3287c16bd2b14c3d1d5c3a"}, "downloads": -1, "filename": "cubicweb-celery-0.1.0.tar.gz", "has_sig": false, "md5_digest": "73ba5707067640f740378c8818a2865c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7409, "upload_time": "2016-04-12T12:59:47", "upload_time_iso_8601": "2016-04-12T12:59:47.275233Z", "url": "https://files.pythonhosted.org/packages/3e/35/d2f6556279957af2cd9973e55fc9bb2012023078d777de6738bdc32d6b6e/cubicweb-celery-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "35cd7c3875c95aeaae76d8672518fcae", "sha256": "bcc04fe1cfb8f227b38e767df7be62f7e4eceaa8e9a765d0b88a89af5293760f"}, "downloads": -1, "filename": "cubicweb-celery-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35cd7c3875c95aeaae76d8672518fcae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5389, "upload_time": "2016-10-11T09:40:05", "upload_time_iso_8601": "2016-10-11T09:40:05.405284Z", "url": "https://files.pythonhosted.org/packages/bd/e9/f923c8b4f7042ca3dbfc9d676f8cde5aba747b202a4bc3d716f9d2c9cea6/cubicweb-celery-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b0f2d72196322da674b1eacebaa71a59", "sha256": "8a8beb05c3c9bdb2091f1cb6af53298198db2fca92ba0807ec772b7a3e6d3e69"}, "downloads": -1, "filename": "cubicweb-celery-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b0f2d72196322da674b1eacebaa71a59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9146, "upload_time": "2016-12-14T22:23:32", "upload_time_iso_8601": "2016-12-14T22:23:32.200901Z", "url": "https://files.pythonhosted.org/packages/ca/90/8e76dbd2ff17a897e1a6d82820a12be198072f71ff1e80d711dd502e5aa3/cubicweb-celery-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "073aadd4f2992c3d8d3abfcdad5df391", "sha256": "c5a32f34a7860f777eb9369d00588fa65c1dab068980e6a46d12a09f53a5e1d2"}, "downloads": -1, "filename": "cubicweb-celery-0.3.1.tar.gz", "has_sig": false, "md5_digest": "073aadd4f2992c3d8d3abfcdad5df391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9234, "upload_time": "2017-05-30T08:31:47", "upload_time_iso_8601": "2017-05-30T08:31:47.032019Z", "url": "https://files.pythonhosted.org/packages/11/42/7a4f479ff3476dbb231fb1d9cd2960b36bc05bb9b38f5e185523607cb8c6/cubicweb-celery-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "dd480823b13dc31b2c90805bfae8ffd4", "sha256": "099e09b4ea376ef4735c135fe67297259f444bb96d5178583690a7457b7798f8"}, "downloads": -1, "filename": "cubicweb-celery-0.4.0.tar.gz", "has_sig": false, "md5_digest": "dd480823b13dc31b2c90805bfae8ffd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9260, "upload_time": "2019-02-07T14:09:20", "upload_time_iso_8601": "2019-02-07T14:09:20.730056Z", "url": "https://files.pythonhosted.org/packages/0e/1b/db886b416ed3240a11d58aaf6100d62beacfa1823c5fe16311ff433ba6d6/cubicweb-celery-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd480823b13dc31b2c90805bfae8ffd4", "sha256": "099e09b4ea376ef4735c135fe67297259f444bb96d5178583690a7457b7798f8"}, "downloads": -1, "filename": "cubicweb-celery-0.4.0.tar.gz", "has_sig": false, "md5_digest": "dd480823b13dc31b2c90805bfae8ffd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9260, "upload_time": "2019-02-07T14:09:20", "upload_time_iso_8601": "2019-02-07T14:09:20.730056Z", "url": "https://files.pythonhosted.org/packages/0e/1b/db886b416ed3240a11d58aaf6100d62beacfa1823c5fe16311ff433ba6d6/cubicweb-celery-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:30 2020"}