{"info": {"author": "Nic Wolff", "author_email": "nwolff@hearst.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# xml_from_seq\n\nGenerate XML from a Python data structure.\n\n## Examples\n\nThe `XML()` function renders a Python list or tuple to an XML element. The first item is the\nelement name, the second item\u00a0\u2013 if it's a dict \u2013\u00a0is the attributes, and the rest of the items\nare either text or nested elements.\n```py\nfrom xml_from_seq import XML\n\nitem = ['item', {'attr1': 123, 'attr2': 'other value'}, 'This is the content of the item.']\nassert XML(item) == '<item attr1=\"123\" attr2=\"other value\">This is the content of the item.</item>'\n\nitem = [\n    'item',\n    'This is some content of the item.'\n    ['sub', 'This is the content of a subelement.']\n]\nprint(XML(item))\n```\n```xml\n <item>\n    This is some content of the item.\n    <sub>\n        This is the content of a subelement.\n    </sub>\n</item>\n```\n\nIf a element's name is `None` its contents will appear in its place. If an attribute's value is\n`None` it will be omitted.\n\nIf an element's name is a list or tuple, it will be inserted into the XML as-is \u2013\u00a0so you can inclue\nalready-rendered XML by double-bracketing it:\n```py\nprint(XML([['<foo>123</foo>']]))\n```\n```xml\n<foo>123</foo>\n```\n\n### Indentation and line breaks\n\nIf the first item in an element (not counting an attribute dict) is `xml_from_seq.INLINE`, that\nelement's contents won't be indented on separate lines from the element's start and end tags.\n```py\nfrom xml_from_seq import INLINE, XML\n\nitem = [\n    'item',\n    'This is some content of the item.'\n    ['sub', INLINE, 'This is the content of a subelement.']\n]\nprint(XML(item))\n```\n```xml\n <item>\n    This is some content of the item.\n    <sub>This is the content of a subelement.</sub>\n</item>\n```\n\nYou can pass an integer `indent` parameter to the `XML()` function to indent the output XML by\nthat many tabs.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nicwolff/xml_from_seq", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xml-from-seq", "package_url": "https://pypi.org/project/xml-from-seq/", "platform": "", "project_url": "https://pypi.org/project/xml-from-seq/", "project_urls": {"Homepage": "https://github.com/nicwolff/xml_from_seq"}, "release_url": "https://pypi.org/project/xml-from-seq/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Generate XML from Python data structure", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>xml_from_seq</h1>\n<p>Generate XML from a Python data structure.</p>\n<h2>Examples</h2>\n<p>The <code>XML()</code> function renders a Python list or tuple to an XML element. The first item is the\nelement name, the second item\u00a0\u2013 if it's a dict \u2013\u00a0is the attributes, and the rest of the items\nare either text or nested elements.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xml_from_seq</span> <span class=\"kn\">import</span> <span class=\"n\">XML</span>\n\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'item'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'attr1'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'attr2'</span><span class=\"p\">:</span> <span class=\"s1\">'other value'</span><span class=\"p\">},</span> <span class=\"s1\">'This is the content of the item.'</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">XML</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'&lt;item attr1=\"123\" attr2=\"other value\"&gt;This is the content of the item.&lt;/item&gt;'</span>\n\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'item'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'This is some content of the item.'</span>\n    <span class=\"p\">[</span><span class=\"s1\">'sub'</span><span class=\"p\">,</span> <span class=\"s1\">'This is the content of a subelement.'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">XML</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n</pre>\n<pre> <span class=\"nt\">&lt;item&gt;</span>\n    This is some content of the item.\n    <span class=\"nt\">&lt;sub&gt;</span>\n        This is the content of a subelement.\n    <span class=\"nt\">&lt;/sub&gt;</span>\n<span class=\"nt\">&lt;/item&gt;</span>\n</pre>\n<p>If a element's name is <code>None</code> its contents will appear in its place. If an attribute's value is\n<code>None</code> it will be omitted.</p>\n<p>If an element's name is a list or tuple, it will be inserted into the XML as-is \u2013\u00a0so you can inclue\nalready-rendered XML by double-bracketing it:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">XML</span><span class=\"p\">([[</span><span class=\"s1\">'&lt;foo&gt;123&lt;/foo&gt;'</span><span class=\"p\">]]))</span>\n</pre>\n<pre><span class=\"nt\">&lt;foo&gt;</span>123<span class=\"nt\">&lt;/foo&gt;</span>\n</pre>\n<h3>Indentation and line breaks</h3>\n<p>If the first item in an element (not counting an attribute dict) is <code>xml_from_seq.INLINE</code>, that\nelement's contents won't be indented on separate lines from the element's start and end tags.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xml_from_seq</span> <span class=\"kn\">import</span> <span class=\"n\">INLINE</span><span class=\"p\">,</span> <span class=\"n\">XML</span>\n\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'item'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'This is some content of the item.'</span>\n    <span class=\"p\">[</span><span class=\"s1\">'sub'</span><span class=\"p\">,</span> <span class=\"n\">INLINE</span><span class=\"p\">,</span> <span class=\"s1\">'This is the content of a subelement.'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">XML</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n</pre>\n<pre> <span class=\"nt\">&lt;item&gt;</span>\n    This is some content of the item.\n    <span class=\"nt\">&lt;sub&gt;</span>This is the content of a subelement.<span class=\"nt\">&lt;/sub&gt;</span>\n<span class=\"nt\">&lt;/item&gt;</span>\n</pre>\n<p>You can pass an integer <code>indent</code> parameter to the <code>XML()</code> function to indent the output XML by\nthat many tabs.</p>\n\n          </div>"}, "last_serial": 6916318, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "92692dfbeb2d5424d9e01d9ffa218b63", "sha256": "a6c40ed9658308c52149bbd785e3bdaa26a5b9b2d9955b0286925c9ab81b0608"}, "downloads": -1, "filename": "xml_from_seq-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92692dfbeb2d5424d9e01d9ffa218b63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2714, "upload_time": "2020-02-23T20:32:57", "upload_time_iso_8601": "2020-02-23T20:32:57.931815Z", "url": "https://files.pythonhosted.org/packages/63/a8/03579552a51d10ed8012c82c32de4acd056d1e7b223d873ab579d5dbd648/xml_from_seq-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5dbd31cdcc6b49f977f962787d7ceb7d", "sha256": "bcc9ddb193a7953ffe9f5af460f02ff7ee518977ab034036be56f73449002eef"}, "downloads": -1, "filename": "xml_from_seq-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5dbd31cdcc6b49f977f962787d7ceb7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2556, "upload_time": "2020-02-23T20:33:00", "upload_time_iso_8601": "2020-02-23T20:33:00.186854Z", "url": "https://files.pythonhosted.org/packages/c8/ae/4dbfd4741bd31a81adb7726b6a1898ea7bcfbd4ef65cc489ee50b5976955/xml_from_seq-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a6b00e7edf58bc56aa5421398fc5dfb2", "sha256": "e9e381651e8bccfb119eddb4deca8dbae4c3c73f2dadb544a65c72af7dbe0903"}, "downloads": -1, "filename": "xml_from_seq-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a6b00e7edf58bc56aa5421398fc5dfb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2852, "upload_time": "2020-02-29T05:59:00", "upload_time_iso_8601": "2020-02-29T05:59:00.962880Z", "url": "https://files.pythonhosted.org/packages/cc/8d/9c617101062dee739e4035beea0ec9e5de90e0b8e3cb2f5c31133fe4f548/xml_from_seq-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "56351317ce11908c60178895ff77f326", "sha256": "abffce453dc676a6232097a11940e626576623597ec5611963e40ddf832b7d59"}, "downloads": -1, "filename": "xml_from_seq-0.3.0.tar.gz", "has_sig": false, "md5_digest": "56351317ce11908c60178895ff77f326", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2851, "upload_time": "2020-03-30T21:37:27", "upload_time_iso_8601": "2020-03-30T21:37:27.795173Z", "url": "https://files.pythonhosted.org/packages/ed/6d/86e270cf87b969ae57ac359129c265fa8639108ec4959604dbbb7326912e/xml_from_seq-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56351317ce11908c60178895ff77f326", "sha256": "abffce453dc676a6232097a11940e626576623597ec5611963e40ddf832b7d59"}, "downloads": -1, "filename": "xml_from_seq-0.3.0.tar.gz", "has_sig": false, "md5_digest": "56351317ce11908c60178895ff77f326", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2851, "upload_time": "2020-03-30T21:37:27", "upload_time_iso_8601": "2020-03-30T21:37:27.795173Z", "url": "https://files.pythonhosted.org/packages/ed/6d/86e270cf87b969ae57ac359129c265fa8639108ec4959604dbbb7326912e/xml_from_seq-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:00 2020"}