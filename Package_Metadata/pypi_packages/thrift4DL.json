{"info": {"author": "congvm", "author_email": "congvm.it@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Thrift4DL\n=========\n\nWhat is it?\n-----------\n\n``thrift4DL`` is appreviation of Thrift for Deep Learning which is built\nto be batching server in production\n\nHighlights\n----------\n\n-  Easy to use: require a little bit knowledge and skills to start a\n   Deep Learning server in production mode\n\n-  Scalable: scale easily on multiple GPU and multiple clients without\n   worrying about concurrency\n\nInstallation\n------------\n\nYou can install the package from Pypi: ``pip install thrift4DL``\n\nor from source:\n\n::\n\n   git clone https://github.com/vocong25/thrift4DL.git\n\n   python setup.py install\n\nExamples\n--------\n\nBefore you go further, please take a look at ``example`` folder.\n\nServer Side\n^^^^^^^^^^^\n\n::\n\n   class ServerHandler(VisionHandler):\n       def get_env(self, gpu_id, mem_fraction):\n           \"\"\" \n           This is function to initialize environments, import packages, ...\n           Parameters:\n           ----------\n           gpu_id: int or str\n               GPU ID in int or str format\n           mem_fraction: float\n               Memory fraction to occupy in GPU\n           \"\"\"\n           os.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"\n           os.environ['CUDA_VISIBLE_DEVICES'] = str(gpu_id)\n           import tensorflow as tf\n           return tf\n\n       def get_model(self, model_path, env_params):\n           tf = env_params\n           model = MnistModel(tf, model_path)\n           return model\n\n       def preprocess(self, model, input):\n           \"\"\"Preprocess for an input\"\"\"\n           input = json.loads(input)\n           input = decode_image(input['image'])\n           input = model.preprocessing(input)\n           assert input.shape == (1, 28, 28, 1), ValueError(\"Wrong input shape\")\n           return input\n\n       def predict(self, model, input):\n           \"\"\"Given a batch of input to predict\"\"\"\n           input = np.vstack(input)\n           result = model.predict(input)\n           results = []\n           for val in result:\n               pred_num = np.argmax(val)\n               pred_score = np.max(val)\n               results.append({\"pred_num\": int(pred_num),\n                               \"pred_score\": float(pred_score)})\n           return results\n\n\n   NUM_MODELS = 1\n   server = TModelPoolServer(host='0.0.0.0', port='9090',\n                             handler_cls=ServerHandler,\n                             model_path='mnist.pb', gpu_ids=[6]*NUM_MODELS,\n                             mem_fractions=[0.1]*NUM_MODELS,\n                             batch_infer_size=100, batch_group_timeout=1,\n                             http_port='8100')\n   server.serve()\n\nClients\n^^^^^^^\n\nThe framework supports 2 ways to request to the server.\n\n-  Using RESTFul API:\n\n::\n\n   import requests\n   import numpy as np\n   import json\n\n   def test_api(image_hex, host, port):\n       url = 'http://0.0.0.0:8181/v1/predict/'\n       js = {\"image\": image_hex}\n       response = requests.post(url, json=js)\n       return response\n\n-  TCP/IP:\n\nYou can use ``thrift`` to gen your code in your required languages by\nusing thrift_file in ``thrift4DL/thrift_file/service3.thrift`` and use\nit as usual.\n\nOr if you use ``python``, there are available client class written in\n``example`` folder.\n\n::\n\n   from thrift4DL.client import VisionClient\n   import numpy as np\n   from zaailabcorelib.ztools import encode_image, load_image\n\n   # Initialize a client\n   client = VisionClient(host='127.0.0.1', port='9090')\n\n   # Load and encode image to hex\n   img_arr = load_image('../example/mnist/num5.png')\n   img_hex = encode_image(img_arr)\n\n   # Request to server\n   js = json.dumps({\"image\": img_hex})\n   result = client.predict(js)\n\nContributors\n------------\n\n-  [ 1 ] congvm - congvm.it@gmail.com\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vocong25/thrift4DL", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "thrift4DL", "package_url": "https://pypi.org/project/thrift4DL/", "platform": "", "project_url": "https://pypi.org/project/thrift4DL/", "project_urls": {"Homepage": "https://github.com/vocong25/thrift4DL"}, "release_url": "https://pypi.org/project/thrift4DL/3.2.0/", "requires_dist": null, "requires_python": "", "summary": "Thrift for Deep Learning", "version": "3.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p><tt>thrift4DL</tt> is appreviation of Thrift for Deep Learning which is built\nto be batching server in production</p>\n</div>\n<div id=\"highlights\">\n<h2>Highlights</h2>\n<ul>\n<li>Easy to use: require a little bit knowledge and skills to start a\nDeep Learning server in production mode</li>\n<li>Scalable: scale easily on multiple GPU and multiple clients without\nworrying about concurrency</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install the package from Pypi: <tt>pip install thrift4DL</tt></p>\n<p>or from source:</p>\n<pre>git clone https://github.com/vocong25/thrift4DL.git\n\npython setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Before you go further, please take a look at <tt>example</tt> folder.</p>\n<div id=\"server-side\">\n<h3>Server Side</h3>\n<pre>class ServerHandler(VisionHandler):\n    def get_env(self, gpu_id, mem_fraction):\n        \"\"\"\n        This is function to initialize environments, import packages, ...\n        Parameters:\n        ----------\n        gpu_id: int or str\n            GPU ID in int or str format\n        mem_fraction: float\n            Memory fraction to occupy in GPU\n        \"\"\"\n        os.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"\n        os.environ['CUDA_VISIBLE_DEVICES'] = str(gpu_id)\n        import tensorflow as tf\n        return tf\n\n    def get_model(self, model_path, env_params):\n        tf = env_params\n        model = MnistModel(tf, model_path)\n        return model\n\n    def preprocess(self, model, input):\n        \"\"\"Preprocess for an input\"\"\"\n        input = json.loads(input)\n        input = decode_image(input['image'])\n        input = model.preprocessing(input)\n        assert input.shape == (1, 28, 28, 1), ValueError(\"Wrong input shape\")\n        return input\n\n    def predict(self, model, input):\n        \"\"\"Given a batch of input to predict\"\"\"\n        input = np.vstack(input)\n        result = model.predict(input)\n        results = []\n        for val in result:\n            pred_num = np.argmax(val)\n            pred_score = np.max(val)\n            results.append({\"pred_num\": int(pred_num),\n                            \"pred_score\": float(pred_score)})\n        return results\n\n\nNUM_MODELS = 1\nserver = TModelPoolServer(host='0.0.0.0', port='9090',\n                          handler_cls=ServerHandler,\n                          model_path='mnist.pb', gpu_ids=[6]*NUM_MODELS,\n                          mem_fractions=[0.1]*NUM_MODELS,\n                          batch_infer_size=100, batch_group_timeout=1,\n                          http_port='8100')\nserver.serve()\n</pre>\n</div>\n<div id=\"clients\">\n<h3>Clients</h3>\n<p>The framework supports 2 ways to request to the server.</p>\n<ul>\n<li>Using RESTFul API:</li>\n</ul>\n<pre>import requests\nimport numpy as np\nimport json\n\ndef test_api(image_hex, host, port):\n    url = 'http://0.0.0.0:8181/v1/predict/'\n    js = {\"image\": image_hex}\n    response = requests.post(url, json=js)\n    return response\n</pre>\n<ul>\n<li>TCP/IP:</li>\n</ul>\n<p>You can use <tt>thrift</tt> to gen your code in your required languages by\nusing thrift_file in <tt>thrift4DL/thrift_file/service3.thrift</tt> and use\nit as usual.</p>\n<p>Or if you use <tt>python</tt>, there are available client class written in\n<tt>example</tt> folder.</p>\n<pre>from thrift4DL.client import VisionClient\nimport numpy as np\nfrom zaailabcorelib.ztools import encode_image, load_image\n\n# Initialize a client\nclient = VisionClient(host='127.0.0.1', port='9090')\n\n# Load and encode image to hex\nimg_arr = load_image('../example/mnist/num5.png')\nimg_hex = encode_image(img_arr)\n\n# Request to server\njs = json.dumps({\"image\": img_hex})\nresult = client.predict(js)\n</pre>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>[ 1 ] congvm - <a href=\"mailto:congvm.it%40gmail.com\">congvm<span>.</span>it<span>@</span>gmail<span>.</span>com</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6471308, "releases": {"3.1.1": [{"comment_text": "", "digests": {"md5": "0ffc3a0025e7ae502c777dc7973e9bb6", "sha256": "5f30fc95bc6f62fac61e556b4a8df8102a0bfe7a99cbf37cc1568115e4de8f8e"}, "downloads": -1, "filename": "thrift4DL-3.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ffc3a0025e7ae502c777dc7973e9bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20036, "upload_time": "2020-01-12T14:43:15", "upload_time_iso_8601": "2020-01-12T14:43:15.145252Z", "url": "https://files.pythonhosted.org/packages/ee/07/c3e0c948c1f9f3c597cc40e45171d483af4f05310450a960b0307a8fdffa/thrift4DL-3.1.1-py3-none-any.whl", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "c52d162eb841991e0ed5762fd7fed5b9", "sha256": "9faa3c6a1ab080250884e6d049ff745cd8d6c0f65e3c3800391a42b3eb0454be"}, "downloads": -1, "filename": "thrift4DL-3.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c52d162eb841991e0ed5762fd7fed5b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20118, "upload_time": "2020-01-13T02:42:27", "upload_time_iso_8601": "2020-01-13T02:42:27.812976Z", "url": "https://files.pythonhosted.org/packages/a7/b7/cafc378538e036439ea6bcc50ea83e17d3135c81f0c15254bc5faf569d53/thrift4DL-3.1.2-py3-none-any.whl", "yanked": false}], "3.1.3": [{"comment_text": "", "digests": {"md5": "99e39a804210e1521845727b06ca4b2c", "sha256": "547782cd317b17368bf0b44306e1afa23c2d66b23bc23aebfccaf5c906d44de6"}, "downloads": -1, "filename": "thrift4DL-3.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "99e39a804210e1521845727b06ca4b2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20149, "upload_time": "2020-01-13T06:57:41", "upload_time_iso_8601": "2020-01-13T06:57:41.853401Z", "url": "https://files.pythonhosted.org/packages/d7/01/468299c60ec03f2057ccf158cd2b8e99971fae925b0104dff111eb414365/thrift4DL-3.1.3-py3-none-any.whl", "yanked": false}], "3.1.4": [{"comment_text": "", "digests": {"md5": "95958256a37a32b7cac0579a99f09cf6", "sha256": "b52a90bb919982f2f5a4c43554eab02c995537411e3ee5dca09837319f09a359"}, "downloads": -1, "filename": "thrift4DL-3.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "95958256a37a32b7cac0579a99f09cf6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20129, "upload_time": "2020-01-13T07:04:26", "upload_time_iso_8601": "2020-01-13T07:04:26.334405Z", "url": "https://files.pythonhosted.org/packages/94/c5/1aed28cc65b5ba0aa459e069be63cac8c5bb49b8101dc9a27447e7e46823/thrift4DL-3.1.4-py3-none-any.whl", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "6890e7b6ee598cfc17397f75abca48c8", "sha256": "eb5cc3c9e05a0a3a33f87d00fe2e500bd8637c92ec40210c47d813726165a002"}, "downloads": -1, "filename": "thrift4DL-3.2.0-py3.6.egg", "has_sig": false, "md5_digest": "6890e7b6ee598cfc17397f75abca48c8", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 46775, "upload_time": "2020-01-17T07:32:17", "upload_time_iso_8601": "2020-01-17T07:32:17.910781Z", "url": "https://files.pythonhosted.org/packages/34/a9/7fa7ae76d04bcf31352a4cc7442d05edc78dbfe612f740f403b4065fa6f1/thrift4DL-3.2.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cd7464e9777b1700f65755a13494d9", "sha256": "d759535a00336be0af6b0e67df77d37a2cd1bf05a60910034388bae1f7ca2a0f"}, "downloads": -1, "filename": "thrift4DL-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47cd7464e9777b1700f65755a13494d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20555, "upload_time": "2020-01-17T07:32:16", "upload_time_iso_8601": "2020-01-17T07:32:16.017248Z", "url": "https://files.pythonhosted.org/packages/be/8b/eeb72c7cb081ceedb51cf532cf51c88c362a6f17149b17a0636fc561a03f/thrift4DL-3.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6890e7b6ee598cfc17397f75abca48c8", "sha256": "eb5cc3c9e05a0a3a33f87d00fe2e500bd8637c92ec40210c47d813726165a002"}, "downloads": -1, "filename": "thrift4DL-3.2.0-py3.6.egg", "has_sig": false, "md5_digest": "6890e7b6ee598cfc17397f75abca48c8", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 46775, "upload_time": "2020-01-17T07:32:17", "upload_time_iso_8601": "2020-01-17T07:32:17.910781Z", "url": "https://files.pythonhosted.org/packages/34/a9/7fa7ae76d04bcf31352a4cc7442d05edc78dbfe612f740f403b4065fa6f1/thrift4DL-3.2.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cd7464e9777b1700f65755a13494d9", "sha256": "d759535a00336be0af6b0e67df77d37a2cd1bf05a60910034388bae1f7ca2a0f"}, "downloads": -1, "filename": "thrift4DL-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47cd7464e9777b1700f65755a13494d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20555, "upload_time": "2020-01-17T07:32:16", "upload_time_iso_8601": "2020-01-17T07:32:16.017248Z", "url": "https://files.pythonhosted.org/packages/be/8b/eeb72c7cb081ceedb51cf532cf51c88c362a6f17149b17a0636fc561a03f/thrift4DL-3.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:53:41 2020"}