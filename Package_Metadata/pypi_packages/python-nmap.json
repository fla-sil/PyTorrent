{"info": {"author": "Alexandre Norman", "author_email": "norman@xael.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: System :: Monitoring", "Topic :: System :: Networking", "Topic :: System :: Networking :: Firewalls", "Topic :: System :: Networking :: Monitoring"], "description": "===========\npython-nmap\n===========\n\npython-nmap is a python library which helps in using nmap port scanner.\nIt allows to easilly manipulate nmap scan results and will be a perfect\ntool for systems administrators who want to automatize scanning task\nand reports. It also supports nmap script outputs.\n\nTypical usage looks like:: \n\n    #!/usr/bin/env python\n    import nmap                         # import nmap.py module\n    nm = nmap.PortScanner()             # instantiate nmap.PortScanner object\n    nm.scan('127.0.0.1', '22-443')      # scan host 127.0.0.1, ports from 22 to 443\n    nm.command_line()                   # get command line used for the scan : nmap -oX - -p 22-443 127.0.0.1\n    nm.scaninfo()                       # get nmap scan informations {'tcp': {'services': '22-443', 'method': 'connect'}}\n    nm.all_hosts()                      # get all hosts that were scanned\n    nm['127.0.0.1'].hostname()          # get one hostname for host 127.0.0.1, usualy the user record\n    nm['127.0.0.1'].hostnames()         # get list of hostnames for host 127.0.0.1 as a list of dict\n                                        # [{'name':'hostname1', 'type':'PTR'}, {'name':'hostname2', 'type':'user'}]\n    nm['127.0.0.1'].hostname()          # get hostname for host 127.0.0.1\n    nm['127.0.0.1'].state()             # get state of host 127.0.0.1 (up|down|unknown|skipped) \n    nm['127.0.0.1'].all_protocols()     # get all scanned protocols ['tcp', 'udp'] in (ip|tcp|udp|sctp)\n    nm['127.0.0.1']['tcp'].keys()       # get all ports for tcp protocol\n    nm['127.0.0.1'].all_tcp()           # get all ports for tcp protocol (sorted version)\n    nm['127.0.0.1'].all_udp()           # get all ports for udp protocol (sorted version)\n    nm['127.0.0.1'].all_ip()            # get all ports for ip protocol (sorted version)\n    nm['127.0.0.1'].all_sctp()          # get all ports for sctp protocol (sorted version)\n    nm['127.0.0.1'].has_tcp(22)         # is there any information for port 22/tcp on host 127.0.0.1\n    nm['127.0.0.1']['tcp'][22]          # get infos about port 22 in tcp on host 127.0.0.1\n    nm['127.0.0.1'].tcp(22)             # get infos about port 22 in tcp on host 127.0.0.1\n    nm['127.0.0.1']['tcp'][22]['state'] # get state of port 22/tcp on host 127.0.0.1 (open\n\n\n    # a more usefull example :\n    for host in nm.all_hosts():\n        print('----------------------------------------------------')\n        print('Host : %s (%s)' % (host, nm[host].hostname()))\n        print('State : %s' % nm[host].state())\n\n        for proto in nm[host].all_protocols():\n            print('----------')\n            print('Protocol : %s' % proto)\n\n            lport = nm[host][proto].keys()\n            lport.sort()\n            for port in lport:\n                print('port : %s\\tstate : %s' % (port, nm[host][proto][port]['state']))\n\n    print('----------------------------------------------------')\n    # print result as CSV\n    print(nm.csv())\n\n\n    print('----------------------------------------------------')\n    # If you want to do a pingsweep on network 192.168.1.0/24:\n    nm.scan(hosts='192.168.1.0/24', arguments='-n -sP -PE -PA21,23,80,3389')\n    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]\n    for host, status in hosts_list:\n        print('{0}:{1}'.format(host, status))\n\n\n   print '----------------------------------------------------'\n   # Asynchronous usage of PortScannerAsync\n   nma = nmap.PortScannerAsync()\n   def callback_result(host, scan_result):\n       print '------------------'\n       print host, scan_result\n   nma.scan(hosts='192.168.1.0/30', arguments='-sP', callback=callback_result)\n   while nma.still_scanning():\n       print(\"Waiting ...\")\n       nma.wait(2)   # you can do whatever you want but I choose to wait after the end of the scan\n\n\nHomepage\n========\n\nhttp://xael.org/norman/python/python-nmap/\n\n\nChangelog\n=========\n\n2016/07/29 (v0.6.1)\n - Fix bug #22 UnboundLocalError in scan_progressive\n - Fix bug #23 Scanning fails on nmap warnings\n - Fix bug #20: Fix for empty <hostnames> values which results in blank CSV output\n - Fix bug #18: print(nm.csv()) does not return any results\n - Fix bug #19: nmap program was not found in path\n - Fix bug #17: hostname is no longer reported\n\n\n2016/03/15 (v0.6.0)\n - Add information about Nmap special licence\n - Licence precision for distributing python-nmap along with nmap\n\n2016/03/15 (v0.5.2)\n - add hostname to csv export\n\n2015/12/05 (v0.5.0-1)\n - updating example.py\n\n2015/11/18 (v0.5.0)\n - Closes bugs :\n   - #11 Display only one osclass/osmatch instead of multiple\n\n - Change in data structure :\n   - osmatch is a list of osclass\t\n   - osclass is a list of dictionnary\n   - added cpe which is a list of string\n   - added portused which is a list of dictionnary\n\n   Data structure for a host looks like :\n```python\t\n      {'addresses': {'ipv4': '127.0.0.1'},\n       'hostnames': [],\n       'osmatch': [{'accuracy': '98',\n                    'line': '36241',\n                    'name': 'Juniper SA4000 SSL VPN gateway (IVE OS 7.0)',\n                    'osclass': [{'accuracy': '98',\n                                 'cpe': ['cpe:/h:juniper:sa4000',\n                                         'cpe:/o:juniper:ive_os:7'],\n                                 'osfamily': 'IVE OS',\n                                 'osgen': '7.X',\n                                 'type': 'firewall',\n                                 'vendor': 'Juniper'}]},\n                   {'accuracy': '91',\n                    'line': '17374',\n                    'name': 'Citrix Access Gateway VPN gateway',\n                    'osclass': [{'accuracy': '91',\n                                 'cpe': [],\n                                 'osfamily': 'embedded',\n                                 'osgen': None,\n                                 'type': 'proxy server',\n                                 'vendor': 'Citrix'}]}],\n       'portused': [{'portid': '443', 'proto': 'tcp', 'state': 'open'},\n                    {'portid': '113', 'proto': 'tcp', 'state': 'closed'}],\n       'status': {'reason': 'syn-ack', 'state': 'up'},\n       'tcp': {113: {'conf': '3',\n                     'cpe': '',\n                     'extrainfo': '',\n                     'name': 'ident',\n                     'product': '',\n                     'reason': 'conn-refused',\n                     'state': 'closed',\n                     'version': ''},\n               443: {'conf': '10',\n                     'cpe': '',\n                     'extrainfo': '',\n                     'name': 'http',\n                     'product': 'Juniper SA2000 or SA4000 VPN gateway http config',\n                     'reason': 'syn-ack',\n                     'state': 'open',\n                     'version': ''}},\n       'vendor': {}}\n```\n\n2015/11/17 (v0.4.7)\n - Closes bugs :\n   - #10 Error when trying to parse 'osclass' , 'osmatch'\n     removed addresses, hostnames, status, vendor, osclass, uptime, osmatch\n     from all_protocols()\n - Changed shebang line from python3 to python as it works with python2\n\n2015/11/13 (v0.4.6)\n - Closes bugs :\n   - #10 Error when trying to parse 'osclass' , 'osmatch'\n\n2015/10/25 (v0.4.5)\n - Closes bugs :\n   - #9 Can not pass ports with unicode string at scan function\n\n2015/10/17 (v0.4.4)\n - Closes bugs :\n   - #8 IPv6 Async scanner doesn't work\n\n2015/09/11 (v0.4.3)\n - Change in url for __get_last_online_version\n\n2015/09/11 (v0.4.2)\n - Closes bugs :\n   - #7: Error with empty hostname\n   - #6: Windows support of close_fds if you redirect stdin/stdout/stderr\n\n2015/08/21 (v0.4.1)\n - Closes bugs :\n   - #5: only one hostname stored per host\n - Add hostnames() method which return the list of hostnames as a list of\n   dict [{'name':'hostname1', 'type':'PTR'}, {'name':'hostname2', 'type':'user'}]\n\n2015/08/01 (v0.4.0)\n - Closes bugs :\n   - #2: use close_fds in subprocess.Popen\n   - #3: memory leak parsing xml using xml.dom.minidom\n - Corrects a bug in parsing osclass\n - Add nosetests for case testing\n - Removed test case in docstring\n\n2015/05/08 (v0.3.7)\n - adding sudo parameter for scanning (idea from scupython)\n\n2015/05/08 (v0.3.6)\n - correcting issue 7 : Issues under windows\n\n2015/05/08 (v0.3.5)\n - correcting a bug in all_protocols()\n - correcting issue 8 : PortScannerAsync Doesn't work in windows...\n\n2014/06/22 (v0.3.4)\n - adding PortScannerYield class with generator\n   >>> nm = nmap.PortScannerYield()\n   >>> for i in nm.scan('127.0.0.1/24', '22-25'):\n   >>>     print(i)\n\n2014/03/13 (v0.3.3)\n - moving file example.py\n - adding function convert_nmap_output_to_encoding\n - adding vendor for mac address\n\n2013/09/23 (v0.3.2)\n - adding acces to CPE values under [host][proto][port]['cpe'] key\n\n2013/07/27 (v0.3.1)\n - Bug correction on callback's assert in PortScannerAsync.scan\n   proposed by Robert Bost\n\n2013/06/23 (v0.3.0)\n - added support for NMAP SCRIPT ENGINE\n   >>> r=nm.scan(hosts='127.0.0.1', ports='139', arguments=\"-sC \")\n   >>> print(nm._scan_result['scan']['127.0.0.1']['hostscript'])\n\n2013/02/24 (v0.2.7)\n - added an address block in host scan result which contains ipv4, mac and other addresses :\n   nm = nmap.PortScanner()\n   r = nm.scan(arguments='-sS -p T:22', hosts='192.168.1.3')\n   print r['scan']['192.168.1.3']['addresses']\n   {u'mac': u'02:50:43:F4:02:B1', u'ipv4': u'192.168.1.3'}\n - Adding a CSV scan output as a string.\n - Changes examples.py to make it python3 compliant\n\n2012/12/13 (v0.2.6)\n - patch from lundberg.johan\n - bug correction : when nmap doesn't work displays stderr instead of stdout\n\n2012/11/23 (v0.2.5)\n - corrected : Issue 2: \"map.nmap.PortScannerError: 'nmap program was not found in path'\" on CentOS\n - corrected : Issue 3: nmap.scan() short-circuits prematurely\n\n2011/11/09 (v0.2.4)\n - implemented a request from Santhosh Edukulla <santhosh.edukulla@gmail.com> :\n   parse OS scanning output\n - Error with multiple host specifications :\n   bug and patch from old.schepperhand@gmail.com \n\n2011/11/04\n - bug in example.py : if no tcp port was open between 22-443\n\n2010/12/17 (v0.2.3)\n - adding __get_last_online_version to check if current version is the last published\n\n2010/12/17 (v0.2.2)\n - bug in handling nmap_error output (returned value was bin, string was expected)\n - removed test strings form __init__.py file.\n\n2010/12/15 (v0.2.1)\n - corrected bug in __init__.py about scope problem\n - try to find nmap executable in known directories\n - raise AssertionError when trying to call command_line, scaninfo, scanstats, has_host before scanning\n\n2010/12/14 (v0.2.0)\n - Make python-nmap works with Python 3.x\n - Contribution from Brian Bustin <brian at bustin.us>\n\n2010/06/07 (v0.1.4)\n - Patches from Steve 'Ashcrow' Milner <steve at gnulinux.net>\n - remove shebang from __init__.py as it is not a runnable script\n - allow use with ALPHA and BETA nmap releases\n - .has_key() is deprecated, replaced instances with in\n - move to using the print function for python2 and 3 usage\n\n2010/06/04\n - adding PortScanner.listscan\n - PortScanner.scan now returns scan_result\n - adding class PortScannerAsync (idea from Steve 'Ashcrow' Milner <steve at gnulinux.net>)\n\n2010/06/03\n - Import on google code\n   svn checkout https://python-nmap.googlecode.com/svn/trunk/ python-nmap --username  XXXXX\n - added PortScanner.scanstats method\n - updated example.py and documentation for pingsweep\n - updated Makefile for generating documentation\n\n2010/03/09\n - Modified packaging. v0.1.1 [norman]\n\n2010/03/08\n - Initial release. v0.1.0 [norman]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://xael.org/pages/python-nmap-en.html", "keywords": "nmap,portscanner,network,sysadmin", "license": "gpl-3.0.txt", "maintainer": null, "maintainer_email": null, "name": "python-nmap", "package_url": "https://pypi.org/project/python-nmap/", "platform": "Operating System :: OS Independent", "project_url": "https://pypi.org/project/python-nmap/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://xael.org/pages/python-nmap-en.html"}, "release_url": "https://pypi.org/project/python-nmap/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "This is a python class to use nmap and access scan results from python3", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========<br>python-nmap<br>===========<br><br>python-nmap is a python library which helps in using nmap port scanner.<br>It allows to easilly manipulate nmap scan results and will be a perfect<br>tool for systems administrators who want to automatize scanning task<br>and reports. It also supports nmap script outputs.<br><br>Typical usage looks like:: <br><br>    #!/usr/bin/env python<br>    import nmap                         # import nmap.py module<br>    nm = nmap.PortScanner()             # instantiate nmap.PortScanner object<br>    nm.scan('127.0.0.1', '22-443')      # scan host 127.0.0.1, ports from 22 to 443<br>    nm.command_line()                   # get command line used for the scan : nmap -oX - -p 22-443 127.0.0.1<br>    nm.scaninfo()                       # get nmap scan informations {'tcp': {'services': '22-443', 'method': 'connect'}}<br>    nm.all_hosts()                      # get all hosts that were scanned<br>    nm['127.0.0.1'].hostname()          # get one hostname for host 127.0.0.1, usualy the user record<br>    nm['127.0.0.1'].hostnames()         # get list of hostnames for host 127.0.0.1 as a list of dict<br>                                        # [{'name':'hostname1', 'type':'PTR'}, {'name':'hostname2', 'type':'user'}]<br>    nm['127.0.0.1'].hostname()          # get hostname for host 127.0.0.1<br>    nm['127.0.0.1'].state()             # get state of host 127.0.0.1 (up|down|unknown|skipped) <br>    nm['127.0.0.1'].all_protocols()     # get all scanned protocols ['tcp', 'udp'] in (ip|tcp|udp|sctp)<br>    nm['127.0.0.1']['tcp'].keys()       # get all ports for tcp protocol<br>    nm['127.0.0.1'].all_tcp()           # get all ports for tcp protocol (sorted version)<br>    nm['127.0.0.1'].all_udp()           # get all ports for udp protocol (sorted version)<br>    nm['127.0.0.1'].all_ip()            # get all ports for ip protocol (sorted version)<br>    nm['127.0.0.1'].all_sctp()          # get all ports for sctp protocol (sorted version)<br>    nm['127.0.0.1'].has_tcp(22)         # is there any information for port 22/tcp on host 127.0.0.1<br>    nm['127.0.0.1']['tcp'][22]          # get infos about port 22 in tcp on host 127.0.0.1<br>    nm['127.0.0.1'].tcp(22)             # get infos about port 22 in tcp on host 127.0.0.1<br>    nm['127.0.0.1']['tcp'][22]['state'] # get state of port 22/tcp on host 127.0.0.1 (open<br><br><br>    # a more usefull example :<br>    for host in nm.all_hosts():<br>        print('----------------------------------------------------')<br>        print('Host : %s (%s)' % (host, nm[host].hostname()))<br>        print('State : %s' % nm[host].state())<br><br>        for proto in nm[host].all_protocols():<br>            print('----------')<br>            print('Protocol : %s' % proto)<br><br>            lport = nm[host][proto].keys()<br>            lport.sort()<br>            for port in lport:<br>                print('port : %s\\tstate : %s' % (port, nm[host][proto][port]['state']))<br><br>    print('----------------------------------------------------')<br>    # print result as CSV<br>    print(nm.csv())<br><br><br>    print('----------------------------------------------------')<br>    # If you want to do a pingsweep on network 192.168.1.0/24:<br>    nm.scan(hosts='192.168.1.0/24', arguments='-n -sP -PE -PA21,23,80,3389')<br>    hosts_list = [(x, nm[x]['status']['state']) for x in nm.all_hosts()]<br>    for host, status in hosts_list:<br>        print('{0}:{1}'.format(host, status))<br><br><br>   print '----------------------------------------------------'<br>   # Asynchronous usage of PortScannerAsync<br>   nma = nmap.PortScannerAsync()<br>   def callback_result(host, scan_result):<br>       print '------------------'<br>       print host, scan_result<br>   nma.scan(hosts='192.168.1.0/30', arguments='-sP', callback=callback_result)<br>   while nma.still_scanning():<br>       print(\"Waiting ...\")<br>       nma.wait(2)   # you can do whatever you want but I choose to wait after the end of the scan<br><br><br>Homepage<br>========<br><br>http://xael.org/norman/python/python-nmap/<br><br><br>Changelog<br>=========<br><br>2016/07/29 (v0.6.1)<br> - Fix bug #22 UnboundLocalError in scan_progressive<br> - Fix bug #23 Scanning fails on nmap warnings<br> - Fix bug #20: Fix for empty &lt;hostnames&gt; values which results in blank CSV output<br> - Fix bug #18: print(nm.csv()) does not return any results<br> - Fix bug #19: nmap program was not found in path<br> - Fix bug #17: hostname is no longer reported<br><br><br>2016/03/15 (v0.6.0)<br> - Add information about Nmap special licence<br> - Licence precision for distributing python-nmap along with nmap<br><br>2016/03/15 (v0.5.2)<br> - add hostname to csv export<br><br>2015/12/05 (v0.5.0-1)<br> - updating example.py<br><br>2015/11/18 (v0.5.0)<br> - Closes bugs :<br>   - #11 Display only one osclass/osmatch instead of multiple<br><br> - Change in data structure :<br>   - osmatch is a list of osclass\t<br>   - osclass is a list of dictionnary<br>   - added cpe which is a list of string<br>   - added portused which is a list of dictionnary<br><br>   Data structure for a host looks like :<br>```python\t<br>      {'addresses': {'ipv4': '127.0.0.1'},<br>       'hostnames': [],<br>       'osmatch': [{'accuracy': '98',<br>                    'line': '36241',<br>                    'name': 'Juniper SA4000 SSL VPN gateway (IVE OS 7.0)',<br>                    'osclass': [{'accuracy': '98',<br>                                 'cpe': ['cpe:/h:juniper:sa4000',<br>                                         'cpe:/o:juniper:ive_os:7'],<br>                                 'osfamily': 'IVE OS',<br>                                 'osgen': '7.X',<br>                                 'type': 'firewall',<br>                                 'vendor': 'Juniper'}]},<br>                   {'accuracy': '91',<br>                    'line': '17374',<br>                    'name': 'Citrix Access Gateway VPN gateway',<br>                    'osclass': [{'accuracy': '91',<br>                                 'cpe': [],<br>                                 'osfamily': 'embedded',<br>                                 'osgen': None,<br>                                 'type': 'proxy server',<br>                                 'vendor': 'Citrix'}]}],<br>       'portused': [{'portid': '443', 'proto': 'tcp', 'state': 'open'},<br>                    {'portid': '113', 'proto': 'tcp', 'state': 'closed'}],<br>       'status': {'reason': 'syn-ack', 'state': 'up'},<br>       'tcp': {113: {'conf': '3',<br>                     'cpe': '',<br>                     'extrainfo': '',<br>                     'name': 'ident',<br>                     'product': '',<br>                     'reason': 'conn-refused',<br>                     'state': 'closed',<br>                     'version': ''},<br>               443: {'conf': '10',<br>                     'cpe': '',<br>                     'extrainfo': '',<br>                     'name': 'http',<br>                     'product': 'Juniper SA2000 or SA4000 VPN gateway http config',<br>                     'reason': 'syn-ack',<br>                     'state': 'open',<br>                     'version': ''}},<br>       'vendor': {}}<br>```<br><br>2015/11/17 (v0.4.7)<br> - Closes bugs :<br>   - #10 Error when trying to parse 'osclass' , 'osmatch'<br>     removed addresses, hostnames, status, vendor, osclass, uptime, osmatch<br>     from all_protocols()<br> - Changed shebang line from python3 to python as it works with python2<br><br>2015/11/13 (v0.4.6)<br> - Closes bugs :<br>   - #10 Error when trying to parse 'osclass' , 'osmatch'<br><br>2015/10/25 (v0.4.5)<br> - Closes bugs :<br>   - #9 Can not pass ports with unicode string at scan function<br><br>2015/10/17 (v0.4.4)<br> - Closes bugs :<br>   - #8 IPv6 Async scanner doesn't work<br><br>2015/09/11 (v0.4.3)<br> - Change in url for __get_last_online_version<br><br>2015/09/11 (v0.4.2)<br> - Closes bugs :<br>   - #7: Error with empty hostname<br>   - #6: Windows support of close_fds if you redirect stdin/stdout/stderr<br><br>2015/08/21 (v0.4.1)<br> - Closes bugs :<br>   - #5: only one hostname stored per host<br> - Add hostnames() method which return the list of hostnames as a list of<br>   dict [{'name':'hostname1', 'type':'PTR'}, {'name':'hostname2', 'type':'user'}]<br><br>2015/08/01 (v0.4.0)<br> - Closes bugs :<br>   - #2: use close_fds in subprocess.Popen<br>   - #3: memory leak parsing xml using xml.dom.minidom<br> - Corrects a bug in parsing osclass<br> - Add nosetests for case testing<br> - Removed test case in docstring<br><br>2015/05/08 (v0.3.7)<br> - adding sudo parameter for scanning (idea from scupython)<br><br>2015/05/08 (v0.3.6)<br> - correcting issue 7 : Issues under windows<br><br>2015/05/08 (v0.3.5)<br> - correcting a bug in all_protocols()<br> - correcting issue 8 : PortScannerAsync Doesn't work in windows...<br><br>2014/06/22 (v0.3.4)<br> - adding PortScannerYield class with generator<br>   &gt;&gt;&gt; nm = nmap.PortScannerYield()<br>   &gt;&gt;&gt; for i in nm.scan('127.0.0.1/24', '22-25'):<br>   &gt;&gt;&gt;     print(i)<br><br>2014/03/13 (v0.3.3)<br> - moving file example.py<br> - adding function convert_nmap_output_to_encoding<br> - adding vendor for mac address<br><br>2013/09/23 (v0.3.2)<br> - adding acces to CPE values under [host][proto][port]['cpe'] key<br><br>2013/07/27 (v0.3.1)<br> - Bug correction on callback's assert in PortScannerAsync.scan<br>   proposed by Robert Bost<br><br>2013/06/23 (v0.3.0)<br> - added support for NMAP SCRIPT ENGINE<br>   &gt;&gt;&gt; r=nm.scan(hosts='127.0.0.1', ports='139', arguments=\"-sC \")<br>   &gt;&gt;&gt; print(nm._scan_result['scan']['127.0.0.1']['hostscript'])<br><br>2013/02/24 (v0.2.7)<br> - added an address block in host scan result which contains ipv4, mac and other addresses :<br>   nm = nmap.PortScanner()<br>   r = nm.scan(arguments='-sS -p T:22', hosts='192.168.1.3')<br>   print r['scan']['192.168.1.3']['addresses']<br>   {u'mac': u'02:50:43:F4:02:B1', u'ipv4': u'192.168.1.3'}<br> - Adding a CSV scan output as a string.<br> - Changes examples.py to make it python3 compliant<br><br>2012/12/13 (v0.2.6)<br> - patch from lundberg.johan<br> - bug correction : when nmap doesn't work displays stderr instead of stdout<br><br>2012/11/23 (v0.2.5)<br> - corrected : Issue 2: \"map.nmap.PortScannerError: 'nmap program was not found in path'\" on CentOS<br> - corrected : Issue 3: nmap.scan() short-circuits prematurely<br><br>2011/11/09 (v0.2.4)<br> - implemented a request from Santhosh Edukulla &lt;santhosh.edukulla@gmail.com&gt; :<br>   parse OS scanning output<br> - Error with multiple host specifications :<br>   bug and patch from old.schepperhand@gmail.com <br><br>2011/11/04<br> - bug in example.py : if no tcp port was open between 22-443<br><br>2010/12/17 (v0.2.3)<br> - adding __get_last_online_version to check if current version is the last published<br><br>2010/12/17 (v0.2.2)<br> - bug in handling nmap_error output (returned value was bin, string was expected)<br> - removed test strings form __init__.py file.<br><br>2010/12/15 (v0.2.1)<br> - corrected bug in __init__.py about scope problem<br> - try to find nmap executable in known directories<br> - raise AssertionError when trying to call command_line, scaninfo, scanstats, has_host before scanning<br><br>2010/12/14 (v0.2.0)<br> - Make python-nmap works with Python 3.x<br> - Contribution from Brian Bustin &lt;brian at bustin.us&gt;<br><br>2010/06/07 (v0.1.4)<br> - Patches from Steve 'Ashcrow' Milner &lt;steve at gnulinux.net&gt;<br> - remove shebang from __init__.py as it is not a runnable script<br> - allow use with ALPHA and BETA nmap releases<br> - .has_key() is deprecated, replaced instances with in<br> - move to using the print function for python2 and 3 usage<br><br>2010/06/04<br> - adding PortScanner.listscan<br> - PortScanner.scan now returns scan_result<br> - adding class PortScannerAsync (idea from Steve 'Ashcrow' Milner &lt;steve at gnulinux.net&gt;)<br><br>2010/06/03<br> - Import on google code<br>   svn checkout https://python-nmap.googlecode.com/svn/trunk/ python-nmap --username  XXXXX<br> - added PortScanner.scanstats method<br> - updated example.py and documentation for pingsweep<br> - updated Makefile for generating documentation<br><br>2010/03/09<br> - Modified packaging. v0.1.1 [norman]<br><br>2010/03/08<br> - Initial release. v0.1.0 [norman]\n          </div>"}, "last_serial": 2252140, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "83b5cfe6d0ecce314921fc65d04919e4", "sha256": "12a3ef81348a8c8e655e1d427a2b5b64ecc86ed0b4b80ea4bdc57051ed16cca1"}, "downloads": -1, "filename": "python-nmap-0.1.1.tar.gz", "has_sig": false, "md5_digest": "83b5cfe6d0ecce314921fc65d04919e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18042, "upload_time": "2010-03-08T23:58:13", "upload_time_iso_8601": "2010-03-08T23:58:13.087280Z", "url": "https://files.pythonhosted.org/packages/f8/9e/85c3ddd471e83b03d763184a875d41c874fa6db1f679e3b4158db07bfb7e/python-nmap-0.1.1.tar.gz", "yanked": false}], "0.1.2": [], "0.1.3": [], "0.1.4": [], "0.2.0": [], "0.2.1": [], "0.2.2": [], "0.2.4": [], "0.2.6": [], "0.2.7": [], "0.3.1": [], "0.3.3": [], "0.3.4": [{"comment_text": "", "digests": {"md5": "785306ecaf88c037b52a203f2927e3b6", "sha256": "90af95b9ce997e68dfc1c4ca8cd1cd462cdf8ebff69124fc360bd0e5f0e56c2f"}, "downloads": -1, "filename": "python-nmap-0.3.4.tar.gz", "has_sig": false, "md5_digest": "785306ecaf88c037b52a203f2927e3b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40307, "upload_time": "2014-06-23T20:44:06", "upload_time_iso_8601": "2014-06-23T20:44:06.169353Z", "url": "https://files.pythonhosted.org/packages/b7/86/c453084f9a0ca664da657d92c97125780159bd401b954f02265232edc0a6/python-nmap-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "9651bfb4d8d5e4301fe8a9743411b7b8", "sha256": "16970d6ad31f249916a75c65aedee433ebe151e91f9efb7d2b7506f94022edec"}, "downloads": -1, "filename": "python-nmap-0.3.5.tar.gz", "has_sig": false, "md5_digest": "9651bfb4d8d5e4301fe8a9743411b7b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40459, "upload_time": "2015-05-08T16:13:44", "upload_time_iso_8601": "2015-05-08T16:13:44.519300Z", "url": "https://files.pythonhosted.org/packages/fd/74/a4249999d63a6f8ea794dadac4e62eebf91853354430e1d1a85cdaf85f29/python-nmap-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "be1b9b9c4d383c5fb90d662cb769b78c", "sha256": "3eb6df050f1d22d8251517bb5bf06163b0e53d1be1251302e150ba263a5f20f0"}, "downloads": -1, "filename": "python-nmap-0.3.6.tar.gz", "has_sig": false, "md5_digest": "be1b9b9c4d383c5fb90d662cb769b78c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40436, "upload_time": "2015-05-08T16:50:39", "upload_time_iso_8601": "2015-05-08T16:50:39.610306Z", "url": "https://files.pythonhosted.org/packages/d0/89/62637fc87bdfe39c94b717a5f65b2e8c92a93fb9bc0edbc1467acabd284d/python-nmap-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "3ed35d4093a04b2ad2b3a6447dd0588e", "sha256": "f4678bf1a18178e607b784e968474ed548d5350ae2dbf8a85b411de23820adf1"}, "downloads": -1, "filename": "python-nmap-0.3.7.tar.gz", "has_sig": false, "md5_digest": "3ed35d4093a04b2ad2b3a6447dd0588e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40509, "upload_time": "2015-05-08T17:27:10", "upload_time_iso_8601": "2015-05-08T17:27:10.130883Z", "url": "https://files.pythonhosted.org/packages/0b/57/f7b1434dcffe7b20de1b65402c67bef92e7048f655eb65646b37b79ea564/python-nmap-0.3.7.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2046fa63e969ae77b68e91664e97876b", "sha256": "cee43d5eaa2d2257dbddd4c0be585d5f8f0d81be727b10b13342f37d8ebaae75"}, "downloads": -1, "filename": "python-nmap-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2046fa63e969ae77b68e91664e97876b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45862, "upload_time": "2015-07-31T22:20:55", "upload_time_iso_8601": "2015-07-31T22:20:55.318385Z", "url": "https://files.pythonhosted.org/packages/9e/9d/815e1a250b85becd9f5489094e65bb6fe34730e4a093de7db6adfb4e544e/python-nmap-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b466e4b2ef30a0b9c0cb80aac215fb79", "sha256": "4a99ffd9e954f5d140e72e62ae4d4a1d4aef62fd4d71769159e9183f951d47d9"}, "downloads": -1, "filename": "python-nmap-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b466e4b2ef30a0b9c0cb80aac215fb79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46990, "upload_time": "2015-08-21T16:43:56", "upload_time_iso_8601": "2015-08-21T16:43:56.874874Z", "url": "https://files.pythonhosted.org/packages/ee/31/b3bda0b005d1b151017e6046adb612c937dfb722d2749f70fc99cfae124c/python-nmap-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "73cf2a36940a6b1dd91bbc719c38cf7e", "sha256": "a27435256c3b6ce846af1c3781d2baf38183043f5b5024154b5584c7ee008393"}, "downloads": -1, "filename": "python-nmap-0.4.2.tar.gz", "has_sig": false, "md5_digest": "73cf2a36940a6b1dd91bbc719c38cf7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47340, "upload_time": "2015-09-11T19:13:38", "upload_time_iso_8601": "2015-09-11T19:13:38.807554Z", "url": "https://files.pythonhosted.org/packages/61/48/f0f42eb26008b0dd195139fe8946c1ebca988e5add9d8e60d6e81d61476d/python-nmap-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "b535202ea1d52bacd11b321cad5819f5", "sha256": "557dfbcc61bad3e791d4c8e297024bf2eaf1413dd2c6199d0da5147bc5fac5c1"}, "downloads": -1, "filename": "python-nmap-0.4.3.tar.gz", "has_sig": false, "md5_digest": "b535202ea1d52bacd11b321cad5819f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47432, "upload_time": "2015-09-11T20:16:50", "upload_time_iso_8601": "2015-09-11T20:16:50.817807Z", "url": "https://files.pythonhosted.org/packages/fd/50/207f162c6c87d709e66a1ca146566d83845327871c9e6909ebbdedc13524/python-nmap-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "ed1f456d1a77974a5402d5e860f0df7d", "sha256": "c30a881b5162b6f339b2798f32ce35b95a9cfd530a420a0c95d2f9f30d6d8b4f"}, "downloads": -1, "filename": "python-nmap-0.4.4.tar.gz", "has_sig": false, "md5_digest": "ed1f456d1a77974a5402d5e860f0df7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37558, "upload_time": "2015-10-16T22:38:12", "upload_time_iso_8601": "2015-10-16T22:38:12.086818Z", "url": "https://files.pythonhosted.org/packages/ac/a1/abee7474703d0e530d64e837e40e25750cf1317c339dbc42a28a763009c4/python-nmap-0.4.4.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "236cf72905edf916d9c769b11f72bf81", "sha256": "d6428b9a3c3215d1dbb6e18003be8b97646e1ae6b6a531494c1460c4db7f761a"}, "downloads": -1, "filename": "python-nmap-0.4.6.tar.gz", "has_sig": false, "md5_digest": "236cf72905edf916d9c769b11f72bf81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37914, "upload_time": "2015-11-13T20:44:13", "upload_time_iso_8601": "2015-11-13T20:44:13.182326Z", "url": "https://files.pythonhosted.org/packages/53/22/21e0d6ae772d1d63d2fb4f9fd658abfa028b2a233f86373f3ac457fd09d9/python-nmap-0.4.6.tar.gz", "yanked": false}], "0.4.7": [{"comment_text": "", "digests": {"md5": "0e9ef7111aac7a6ea80fb106acac0047", "sha256": "f60413abb7146a57be664ad108b83af804ca03d6ffc6a3d4770b7180de6b34b9"}, "downloads": -1, "filename": "python-nmap-0.4.7.tar.gz", "has_sig": false, "md5_digest": "0e9ef7111aac7a6ea80fb106acac0047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38220, "upload_time": "2015-11-16T23:17:13", "upload_time_iso_8601": "2015-11-16T23:17:13.804422Z", "url": "https://files.pythonhosted.org/packages/5c/3e/71a8982632d41050230f1d31a6a8c3cbb4b4d0e741fd6e51ff72ebe1c06b/python-nmap-0.4.7.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "34d32d0d9973b87bc132531317d21d5b", "sha256": "ec110d0b86b32ca8d18867a2a0fb9caa84e61a0b46f6cd5d611c31dd0a9234e9"}, "downloads": -1, "filename": "python-nmap-0.5.0.tar.gz", "has_sig": false, "md5_digest": "34d32d0d9973b87bc132531317d21d5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39836, "upload_time": "2015-11-18T22:49:57", "upload_time_iso_8601": "2015-11-18T22:49:57.090890Z", "url": "https://files.pythonhosted.org/packages/4c/fe/5cde9d9bc3319dc825085b3ad590e2399f08768d540d4a434914824684b6/python-nmap-0.5.0.tar.gz", "yanked": false}], "0.5.0-1": [{"comment_text": "", "digests": {"md5": "1f6f47237b851c6134a82f5d50332298", "sha256": "3184bfa564736b6fdf6970cb1d9ad4cdc5caab4d9d93bd7b861a48a05cc72798"}, "downloads": -1, "filename": "python-nmap-0.5.0-1.tar.gz", "has_sig": false, "md5_digest": "1f6f47237b851c6134a82f5d50332298", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40440, "upload_time": "2015-12-05T09:42:49", "upload_time_iso_8601": "2015-12-05T09:42:49.869734Z", "url": "https://files.pythonhosted.org/packages/c0/c5/cd0e51e2666e8bc0ada4cee7c891973be01f3f90ec622af2d6d0f48601b7/python-nmap-0.5.0-1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c3996b1e8dfb944fa30fb37d3fc43a67", "sha256": "233ee39da05aac3f0f22e480dcb0e9b1b707cac3518859aaa1a016f6f88bf250"}, "downloads": -1, "filename": "python-nmap-0.6.0.tar.gz", "has_sig": false, "md5_digest": "c3996b1e8dfb944fa30fb37d3fc43a67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41415, "upload_time": "2016-03-15T21:23:31", "upload_time_iso_8601": "2016-03-15T21:23:31.961648Z", "url": "https://files.pythonhosted.org/packages/c6/f9/98a1b0f012b11027e59daf4b1da99215c2e1cc56cf7de7564e8d6a1a7fd8/python-nmap-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "2795bfcbc05cbbbccfcf4df59facaab1", "sha256": "80ba0eb10a52283a54a633f40b5baa9c2ff08675d6621dd089ead942852f5bd3"}, "downloads": -1, "filename": "python-nmap-0.6.1.tar.gz", "has_sig": false, "md5_digest": "2795bfcbc05cbbbccfcf4df59facaab1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41953, "upload_time": "2016-07-29T22:08:53", "upload_time_iso_8601": "2016-07-29T22:08:53.280566Z", "url": "https://files.pythonhosted.org/packages/dc/f2/9e1a2953d4d824e183ac033e3d223055e40e695fa6db2cb3e94a864eaa84/python-nmap-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2795bfcbc05cbbbccfcf4df59facaab1", "sha256": "80ba0eb10a52283a54a633f40b5baa9c2ff08675d6621dd089ead942852f5bd3"}, "downloads": -1, "filename": "python-nmap-0.6.1.tar.gz", "has_sig": false, "md5_digest": "2795bfcbc05cbbbccfcf4df59facaab1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41953, "upload_time": "2016-07-29T22:08:53", "upload_time_iso_8601": "2016-07-29T22:08:53.280566Z", "url": "https://files.pythonhosted.org/packages/dc/f2/9e1a2953d4d824e183ac033e3d223055e40e695fa6db2cb3e94a864eaa84/python-nmap-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:21 2020"}