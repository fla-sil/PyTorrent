{"info": {"author": "Jeremy Epstein", "author_email": "jazepstein@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "s3-saver\n========\n\nUtility class in Python for finding, saving, and deleting files that are either on Amazon S3, or on the local filesystem.\n\nThe idea behind this, is that you can pass exactly the same data (in particular, the same file path) irrespective of whether you're working with a local or S3-based file. All you have to do, on each call, is to specify 's3' for S3, or None for local.\n\nThis is great for apps where all files are stored on the local filesystem in one environment (e.g. development), and on S3 in another environment (e.g. production). The only thing you have to work out at run-time, is whether to specify 's3' or None - the rest of your file-handling code stays the same.\n\n\nExample\n-------\n\nFor a complete, working Flask app that demonstrates s3-saver in action, have a look at `flask-s3-save-example <https://github.com/Jaza/flask-s3-save-example>`_.\n\n\nUsage\n-----\n\n.. code:: python\n\n    from io import BytesIO\n    import os\n    from s3_saver import S3Saver\n\n    bucket_name = 's3-test-foobar-whizbang'\n\n    # Absolute path to your project's root\n    static_root_parent = '/home/mrfoo/pyprojectfoo'\n\n    # Absolute path to dir where file gets saved\n    base_path = os.path.join(static_root_parent, 'static/uploads')\n\n    # For a dummy object that attributes can get saved to.\n    # In most real-life cases, this would be an ORM model\n    # (e.g. inherited from django.db.models.Model for Django, or\n    # sqlalchemy.ext.declarative.declarative_base() for SQLAlchemy).\n    class Thingy(object):\n        pass\n\n    # Load a sample file into a temp object\n    filename = 'whizbang.jpg'\n    filepath = os.path.join(base_path, filename)\n    thingy = Thingy()\n    temp_file = BytesIO()\n\n    # Read a local file into a BytesIO object.\n    # For most real-life cases, you'd instead load a file uploaded\n    # in a HTTP POST request into a BytesIO. E.g. in a Flask route:\n    # from flask import request\n    # request.files['thingy_image'].save(temp_file)\n    f = open('/home/mrfoo/photos/hobbies/whizbang.jpg', 'rb')\n    f.seek(0)\n    one_mb = 1024*1024\n\n    t = f.read(one_mb)\n    while t:\n        temp_file.write(t)\n        t = f.read(one_mb)\n\n    f.close()\n\n    # Initialize the saver\n    image_saver = S3Saver(\n        storage_type='s3',\n        bucket_name=bucket_name,\n        access_key_id='XXXXX',\n        access_key_secret='YYYYY',\n        field_name='image',\n        storage_type_field='image_storage_type',\n        bucket_name_field='image_storage_bucket_name',\n        filesize_field='image_filesize',\n        base_path=base_path,\n        static_root_parent=static_root_parent)\n\n    # Save the file to S3, in the specified bucket,\n    # at 'static/uploads/whizbang.jpg'\n    image_saver.save(temp_file, filename, thingy)\n\n    print(thingy.image) # 'whizbang.jpg'\n    print(thingy.image_storage_type) # 's3'\n    print(thingy.image_storage_bucket_name) # 's3-test-foobar-whizbang'\n\n    # In most real-life cases, you'd persist the 'thingy' object\n    # at this point. E.g. in SQLAlchemy:\n    # db.session.add(thingy)\n    # db.session.commit()\n\n    # Now save the file locally,\n    # at '/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg'\n    image_saver.storage_type = None\n    image_saver.save(temp_file, filename, thingy)\n\n    print(thingy.image) # 'whizbang.jpg'\n    print(thingy.image_storage_type) # ''\n    print(thingy.image_storage_bucket_name) # ''\n\n    # Find files on S3, searching by key prefix.\n    # Prints:\n    # [u'static/uploads/whizbang.jpg']\n    print([k.name for k in image_saver.find_by_path(\n        '/home/mrfoo/pyprojectfoo/static/uploads/whizb',\n        storage_type='s3',\n        bucket_name=bucket_name)])\n\n    # Find files locally, searching by glob.\n    # Prints:\n    # ['/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg']\n    print([k for k in image_saver.find_by_path(\n        '/home/mrfoo/pyprojectfoo/static/uploads/whizb',\n        storage_type=None,\n        bucket_name=bucket_name)])\n\n    # Delete the file on S3.\n    image_saver.delete(\n        '/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg',\n        storage_type='s3',\n        bucket_name=bucket_name)\n\n    # Delete the file locally.\n    image_saver.delete(\n        '/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg',\n        storage_type=None,\n        bucket_name=bucket_name)", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jaza/s3-saver", "keywords": null, "license": null, "maintainer": null, "maintainer_email": null, "name": "s3-saver", "package_url": "https://pypi.org/project/s3-saver/", "platform": "any", "project_url": "https://pypi.org/project/s3-saver/", "project_urls": {"Homepage": "https://github.com/Jaza/s3-saver"}, "release_url": "https://pypi.org/project/s3-saver/0.1.4/", "requires_dist": ["boto"], "requires_python": null, "summary": "Utility class in Python for finding, saving, and deleting files that are either on Amazon S3, or on the local filesystem.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Utility class in Python for finding, saving, and deleting files that are either on Amazon S3, or on the local filesystem.</p>\n<p>The idea behind this, is that you can pass exactly the same data (in particular, the same file path) irrespective of whether you\u2019re working with a local or S3-based file. All you have to do, on each call, is to specify \u2018s3\u2019 for S3, or None for local.</p>\n<p>This is great for apps where all files are stored on the local filesystem in one environment (e.g. development), and on S3 in another environment (e.g. production). The only thing you have to work out at run-time, is whether to specify \u2018s3\u2019 or None - the rest of your file-handling code stays the same.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>For a complete, working Flask app that demonstrates s3-saver in action, have a look at <a href=\"https://github.com/Jaza/flask-s3-save-example\" rel=\"nofollow\">flask-s3-save-example</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">s3_saver</span> <span class=\"kn\">import</span> <span class=\"n\">S3Saver</span>\n\n<span class=\"n\">bucket_name</span> <span class=\"o\">=</span> <span class=\"s1\">'s3-test-foobar-whizbang'</span>\n\n<span class=\"c1\"># Absolute path to your project's root</span>\n<span class=\"n\">static_root_parent</span> <span class=\"o\">=</span> <span class=\"s1\">'/home/mrfoo/pyprojectfoo'</span>\n\n<span class=\"c1\"># Absolute path to dir where file gets saved</span>\n<span class=\"n\">base_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">static_root_parent</span><span class=\"p\">,</span> <span class=\"s1\">'static/uploads'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For a dummy object that attributes can get saved to.</span>\n<span class=\"c1\"># In most real-life cases, this would be an ORM model</span>\n<span class=\"c1\"># (e.g. inherited from django.db.models.Model for Django, or</span>\n<span class=\"c1\"># sqlalchemy.ext.declarative.declarative_base() for SQLAlchemy).</span>\n<span class=\"k\">class</span> <span class=\"nc\">Thingy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Load a sample file into a temp object</span>\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'whizbang.jpg'</span>\n<span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">base_path</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n<span class=\"n\">thingy</span> <span class=\"o\">=</span> <span class=\"n\">Thingy</span><span class=\"p\">()</span>\n<span class=\"n\">temp_file</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Read a local file into a BytesIO object.</span>\n<span class=\"c1\"># For most real-life cases, you'd instead load a file uploaded</span>\n<span class=\"c1\"># in a HTTP POST request into a BytesIO. E.g. in a Flask route:</span>\n<span class=\"c1\"># from flask import request</span>\n<span class=\"c1\"># request.files['thingy_image'].save(temp_file)</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/home/mrfoo/photos/hobbies/whizbang.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">one_mb</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"o\">*</span><span class=\"mi\">1024</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">one_mb</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"n\">temp_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">one_mb</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Initialize the saver</span>\n<span class=\"n\">image_saver</span> <span class=\"o\">=</span> <span class=\"n\">S3Saver</span><span class=\"p\">(</span>\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"s1\">'s3'</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">bucket_name</span><span class=\"p\">,</span>\n    <span class=\"n\">access_key_id</span><span class=\"o\">=</span><span class=\"s1\">'XXXXX'</span><span class=\"p\">,</span>\n    <span class=\"n\">access_key_secret</span><span class=\"o\">=</span><span class=\"s1\">'YYYYY'</span><span class=\"p\">,</span>\n    <span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s1\">'image'</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_type_field</span><span class=\"o\">=</span><span class=\"s1\">'image_storage_type'</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name_field</span><span class=\"o\">=</span><span class=\"s1\">'image_storage_bucket_name'</span><span class=\"p\">,</span>\n    <span class=\"n\">filesize_field</span><span class=\"o\">=</span><span class=\"s1\">'image_filesize'</span><span class=\"p\">,</span>\n    <span class=\"n\">base_path</span><span class=\"o\">=</span><span class=\"n\">base_path</span><span class=\"p\">,</span>\n    <span class=\"n\">static_root_parent</span><span class=\"o\">=</span><span class=\"n\">static_root_parent</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save the file to S3, in the specified bucket,</span>\n<span class=\"c1\"># at 'static/uploads/whizbang.jpg'</span>\n<span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">temp_file</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">thingy</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span> <span class=\"c1\"># 'whizbang.jpg'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image_storage_type</span><span class=\"p\">)</span> <span class=\"c1\"># 's3'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image_storage_bucket_name</span><span class=\"p\">)</span> <span class=\"c1\"># 's3-test-foobar-whizbang'</span>\n\n<span class=\"c1\"># In most real-life cases, you'd persist the 'thingy' object</span>\n<span class=\"c1\"># at this point. E.g. in SQLAlchemy:</span>\n<span class=\"c1\"># db.session.add(thingy)</span>\n<span class=\"c1\"># db.session.commit()</span>\n\n<span class=\"c1\"># Now save the file locally,</span>\n<span class=\"c1\"># at '/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg'</span>\n<span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">storage_type</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">temp_file</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">thingy</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span> <span class=\"c1\"># 'whizbang.jpg'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image_storage_type</span><span class=\"p\">)</span> <span class=\"c1\"># ''</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">thingy</span><span class=\"o\">.</span><span class=\"n\">image_storage_bucket_name</span><span class=\"p\">)</span> <span class=\"c1\"># ''</span>\n\n<span class=\"c1\"># Find files on S3, searching by key prefix.</span>\n<span class=\"c1\"># Prints:</span>\n<span class=\"c1\"># [u'static/uploads/whizbang.jpg']</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">find_by_path</span><span class=\"p\">(</span>\n    <span class=\"s1\">'/home/mrfoo/pyprojectfoo/static/uploads/whizb'</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"s1\">'s3'</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">bucket_name</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># Find files locally, searching by glob.</span>\n<span class=\"c1\"># Prints:</span>\n<span class=\"c1\"># ['/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg']</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">find_by_path</span><span class=\"p\">(</span>\n    <span class=\"s1\">'/home/mrfoo/pyprojectfoo/static/uploads/whizb'</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">bucket_name</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># Delete the file on S3.</span>\n<span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span>\n    <span class=\"s1\">'/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg'</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"s1\">'s3'</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">bucket_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete the file locally.</span>\n<span class=\"n\">image_saver</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span>\n    <span class=\"s1\">'/home/mrfoo/pyprojectfoo/static/uploads/whizbang.jpg'</span><span class=\"p\">,</span>\n    <span class=\"n\">storage_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">bucket_name</span><span class=\"o\">=</span><span class=\"n\">bucket_name</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1697276, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ba229e1a39d78c3ca96dbf1297bf1102", "sha256": "36463980585a63dbb0599c12ef61fa8d913981d34e985df9350f843f6ff153be"}, "downloads": -1, "filename": "s3_saver-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba229e1a39d78c3ca96dbf1297bf1102", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3655, "upload_time": "2015-04-10T01:48:18", "upload_time_iso_8601": "2015-04-10T01:48:18.457648Z", "url": "https://files.pythonhosted.org/packages/c3/c0/45deee1cfcfb26f06151adf0d80a75cce4ea99cc7554d79257bc91b83838/s3_saver-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5e286e148656ab1420cd6c92604bdd6c", "sha256": "f7fa4d5ae4e7d2a52bda9d9723520ac56d36cf0a8ee1ff0c44b165636b712d09"}, "downloads": -1, "filename": "s3_saver-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e286e148656ab1420cd6c92604bdd6c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3658, "upload_time": "2015-04-10T01:53:43", "upload_time_iso_8601": "2015-04-10T01:53:43.563157Z", "url": "https://files.pythonhosted.org/packages/e5/12/4b1469ba91dc79b2bc5ba85b3af9316d07f39cbc77d29038ac78b05889fb/s3_saver-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "18561fb7b110b8ee662dade316c793f6", "sha256": "3aa55c7306c11be3d56730a289f59f761ebebf0c24dd95fb79194db3630aa7dc"}, "downloads": -1, "filename": "s3_saver-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18561fb7b110b8ee662dade316c793f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3693, "upload_time": "2015-04-10T03:25:02", "upload_time_iso_8601": "2015-04-10T03:25:02.474735Z", "url": "https://files.pythonhosted.org/packages/ff/21/e576af4b4f4205bad57934528fa2eaec1354fc5c098e048390657ea344d0/s3_saver-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "11ac058a09ca8c125d09d40a24b59080", "sha256": "2c576ec6e01536ccad733f72bfeaf16de41f745af1a4dfaf1a51af9a3c89eefc"}, "downloads": -1, "filename": "s3_saver-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11ac058a09ca8c125d09d40a24b59080", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6448, "upload_time": "2015-04-16T02:07:37", "upload_time_iso_8601": "2015-04-16T02:07:37.195200Z", "url": "https://files.pythonhosted.org/packages/01/39/37d97864f30e0abdadd24ee0cb992f27f3f93bea066196b65a54ad3d512c/s3_saver-0.1.3-py2.py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f62c4f4aafc6230fd42910bb9a4f6c48", "sha256": "73a57c1bc514dd82806a848d4726447416a68f998a49545703b379ec488b6fc0"}, "downloads": -1, "filename": "s3_saver-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f62c4f4aafc6230fd42910bb9a4f6c48", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6602, "upload_time": "2015-08-28T00:15:32", "upload_time_iso_8601": "2015-08-28T00:15:32.914478Z", "url": "https://files.pythonhosted.org/packages/9b/71/0a13948ca085486bea6c14b52ac9070de1a4bc4e192dd4e2bd2ee809b816/s3_saver-0.1.4-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f62c4f4aafc6230fd42910bb9a4f6c48", "sha256": "73a57c1bc514dd82806a848d4726447416a68f998a49545703b379ec488b6fc0"}, "downloads": -1, "filename": "s3_saver-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f62c4f4aafc6230fd42910bb9a4f6c48", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6602, "upload_time": "2015-08-28T00:15:32", "upload_time_iso_8601": "2015-08-28T00:15:32.914478Z", "url": "https://files.pythonhosted.org/packages/9b/71/0a13948ca085486bea6c14b52ac9070de1a4bc4e192dd4e2bd2ee809b816/s3_saver-0.1.4-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:59:35 2020"}