{"info": {"author": "Sergei S.", "author_email": "s@makeitwork.cz", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Text Processing :: Markup :: HTML", "Topic :: Utilities"], "description": "Cloud FancyIndex\n================\n\nI like NGINX fancyindex module\n(https://www.nginx.com/resources/wiki/modules/fancy_index/). With a good theme\nit can make your auto-indexed file trash look like solid SP500 company's Website\nwith a few directives in web server config.\n\nBut future is coming and we are moving to cloud storages.\n\n* Pros: you'll have built-in scalability, speed, and multi-zones for your files.\n* Cons: these cloud buckets have no indexes (or they don't look so cool as old\n  good NGINX fancyindex themes).\n\nOf course you can make an application which gets bucket contents and displays\nto to user in a nice way. But for what, if the files are static? Let's build\nstatic indexes! And let's add fancyindex themes for them!\n\nUploading\n---------\n\n* To upload files to Google Cloud Storage, you need to be logged in with local\n  *gcloud* app. cs-index-upload.sh actually calls *gsutil rsync*\n\n* To upload to Amazon S3 or compatible, install and configure *s3cmd*\n\nInstallation\n------------\n\n```\npip3 install cloud-fancyindex\n```\n\nYou also need to install [cloudindex](https://github.com/divi255/cloudindex)\npackage as well.\n\nUsage\n-----\n\n* cloud-fancyindex-generator CLI tool - generates index.html files (by default\n  in ./\\_build/html )\n\n* You must also download some fancy index theme, e.g.\n  https://github.com/TheInsomniac/Nginx-Fancyindex-Theme. Actually it's\n  compatible with almost all themes you can find or create.\n\nNote: theme is placed in /fancyindex bucket directory. In case theme loads any\nstuff (css/js etc.) from other directory, correct paths in its header / footer.\n\n* You may download also my cs-index-upload.sh script - uploads output directory\n  to cloud storage\n\n* tpl.html - template file for the primary table. This is jinja2 template so\n  you can use all functions it has. Example: https://github.com/divi255/cloud-fancyindex/blob/master/tpl.html\n\n* sha256.tpl.html - template example with sha256 checksums. Example: https://github.com/divi255/cloud-fancyindex/blob/master/sha256.tpl.html\n\n* template can include any additional object meta data.\n\n* docker-compose.yml - just a test stuff, ignore it\n\nNote: you need to rebuild index (at least partial one) every time you upload new\nfile to bucket. Sad, but true.\n\nExample:\n\n```\ncloud-index [options] <bucket> | cloud-fancyindex-generator -t <template> -F <themepath> -D <output>\n```\n\nUsage in real life\n------------------\n\nE.g. you have a cool build script which makes your project tarball and uploads\nit to */releases/${VERSION}/blahblahblah* path into cloud bucket. To re-index\nthe path, put the following string in your script after upload command:\n\n    cd /path/to/cloud-fancyindex && make prefix=/releases/${VERSION} pub\n\nNuts and bolts\n--------------\n\n* Unfortunately it's impossible to implement sorting, as it called a server\n  request with a query string only NGINX can understand. Maybe I'll do sorting\n  with JS, some day.\n\n* But a bonus - now you can easily display sizes of folders (or directories (or\n  bucket paths (etc)))\n\n* S3 actually has real \"folders\" (at least emulates them), so index generation\n  can be more optimal. But then we'll lose unification.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/divi255/cloud-fancyindex", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloud-fancyindex", "package_url": "https://pypi.org/project/cloud-fancyindex/", "platform": "", "project_url": "https://pypi.org/project/cloud-fancyindex/", "project_urls": {"Homepage": "https://github.com/divi255/cloud-fancyindex"}, "release_url": "https://pypi.org/project/cloud-fancyindex/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Generates indexes for cloud buckets from NGINX Fancyindex themes", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cloud FancyIndex</h1>\n<p>I like NGINX fancyindex module\n(<a href=\"https://www.nginx.com/resources/wiki/modules/fancy_index/\" rel=\"nofollow\">https://www.nginx.com/resources/wiki/modules/fancy_index/</a>). With a good theme\nit can make your auto-indexed file trash look like solid SP500 company's Website\nwith a few directives in web server config.</p>\n<p>But future is coming and we are moving to cloud storages.</p>\n<ul>\n<li>Pros: you'll have built-in scalability, speed, and multi-zones for your files.</li>\n<li>Cons: these cloud buckets have no indexes (or they don't look so cool as old\ngood NGINX fancyindex themes).</li>\n</ul>\n<p>Of course you can make an application which gets bucket contents and displays\nto to user in a nice way. But for what, if the files are static? Let's build\nstatic indexes! And let's add fancyindex themes for them!</p>\n<h2>Uploading</h2>\n<ul>\n<li>\n<p>To upload files to Google Cloud Storage, you need to be logged in with local\n<em>gcloud</em> app. cs-index-upload.sh actually calls <em>gsutil rsync</em></p>\n</li>\n<li>\n<p>To upload to Amazon S3 or compatible, install and configure <em>s3cmd</em></p>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip3 install cloud-fancyindex\n</code></pre>\n<p>You also need to install <a href=\"https://github.com/divi255/cloudindex\" rel=\"nofollow\">cloudindex</a>\npackage as well.</p>\n<h2>Usage</h2>\n<ul>\n<li>\n<p>cloud-fancyindex-generator CLI tool - generates index.html files (by default\nin ./_build/html )</p>\n</li>\n<li>\n<p>You must also download some fancy index theme, e.g.\n<a href=\"https://github.com/TheInsomniac/Nginx-Fancyindex-Theme\" rel=\"nofollow\">https://github.com/TheInsomniac/Nginx-Fancyindex-Theme</a>. Actually it's\ncompatible with almost all themes you can find or create.</p>\n</li>\n</ul>\n<p>Note: theme is placed in /fancyindex bucket directory. In case theme loads any\nstuff (css/js etc.) from other directory, correct paths in its header / footer.</p>\n<ul>\n<li>\n<p>You may download also my cs-index-upload.sh script - uploads output directory\nto cloud storage</p>\n</li>\n<li>\n<p>tpl.html - template file for the primary table. This is jinja2 template so\nyou can use all functions it has. Example: <a href=\"https://github.com/divi255/cloud-fancyindex/blob/master/tpl.html\" rel=\"nofollow\">https://github.com/divi255/cloud-fancyindex/blob/master/tpl.html</a></p>\n</li>\n<li>\n<p>sha256.tpl.html - template example with sha256 checksums. Example: <a href=\"https://github.com/divi255/cloud-fancyindex/blob/master/sha256.tpl.html\" rel=\"nofollow\">https://github.com/divi255/cloud-fancyindex/blob/master/sha256.tpl.html</a></p>\n</li>\n<li>\n<p>template can include any additional object meta data.</p>\n</li>\n<li>\n<p>docker-compose.yml - just a test stuff, ignore it</p>\n</li>\n</ul>\n<p>Note: you need to rebuild index (at least partial one) every time you upload new\nfile to bucket. Sad, but true.</p>\n<p>Example:</p>\n<pre><code>cloud-index [options] &lt;bucket&gt; | cloud-fancyindex-generator -t &lt;template&gt; -F &lt;themepath&gt; -D &lt;output&gt;\n</code></pre>\n<h2>Usage in real life</h2>\n<p>E.g. you have a cool build script which makes your project tarball and uploads\nit to <em>/releases/${VERSION}/blahblahblah</em> path into cloud bucket. To re-index\nthe path, put the following string in your script after upload command:</p>\n<pre><code>cd /path/to/cloud-fancyindex &amp;&amp; make prefix=/releases/${VERSION} pub\n</code></pre>\n<h2>Nuts and bolts</h2>\n<ul>\n<li>\n<p>Unfortunately it's impossible to implement sorting, as it called a server\nrequest with a query string only NGINX can understand. Maybe I'll do sorting\nwith JS, some day.</p>\n</li>\n<li>\n<p>But a bonus - now you can easily display sizes of folders (or directories (or\nbucket paths (etc)))</p>\n</li>\n<li>\n<p>S3 actually has real \"folders\" (at least emulates them), so index generation\ncan be more optimal. But then we'll lose unification.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6731188, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "aee1e7de1c8612cf9ae61029ebf4f6df", "sha256": "5e824f08ba011ee18cb61bcf2171ec19019226738244d76a8224bb11401968c6"}, "downloads": -1, "filename": "cloud-fancyindex-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aee1e7de1c8612cf9ae61029ebf4f6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3697, "upload_time": "2020-03-02T03:57:53", "upload_time_iso_8601": "2020-03-02T03:57:53.715762Z", "url": "https://files.pythonhosted.org/packages/41/a4/5ff84086045c6cec3b92630f388ea1fad2dbf44ef0f422407f3a2ffad497/cloud-fancyindex-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aee1e7de1c8612cf9ae61029ebf4f6df", "sha256": "5e824f08ba011ee18cb61bcf2171ec19019226738244d76a8224bb11401968c6"}, "downloads": -1, "filename": "cloud-fancyindex-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aee1e7de1c8612cf9ae61029ebf4f6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3697, "upload_time": "2020-03-02T03:57:53", "upload_time_iso_8601": "2020-03-02T03:57:53.715762Z", "url": "https://files.pythonhosted.org/packages/41/a4/5ff84086045c6cec3b92630f388ea1fad2dbf44ef0f422407f3a2ffad497/cloud-fancyindex-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:51 2020"}