{"info": {"author": "Selwin Ong", "author_email": "selwin.ong@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: HTML"], "description": "=====================\nDjango HTML Sanitizer\n=====================\n\nDjango HTML Sanitizer provides a set of utilities to easily sanitize/escape/clean\nHTML inputs in django. This app is built on top of `bleach <http://github.com/jsocol/bleach>`_,\nthe excellent Python HTML sanitizer.\n\n\nDependencies\n============\n\n- `django <http://djangoproject.com/>`_: http://djangoproject.com/\n- `bleach <http://github.com/jsocol/bleach>`_: http://github.com/jsocol/bleach\n\n\nInstallation\n============\n\nYou'll first need to install the package (or download manually from\n`pypi <http://pypi.python.org/pypi/django-html_sanitizer>`_)::\n    \n    pip install django-html_sanitizer\n\nAnd then add ``sanitizer`` to your INSTALLED_APPS in django's ``settings.py``::\n    \n    INSTALLED_APPS = (\n        # other apps\n        \"sanitizer\",\n    )\n\n\nModel Usage\n===========\n\nSimilar to bleach, django sanitizer is a whitelist (only allows specified tags \nand attributes) based HTML sanitizer. Django sanitizer provides two model fields\nthat automatically sanitizes text values; ``SanitizedCharField`` and \n``SanitizedTextField``.\n\nThese fields accept extra arguments:\n\n* allowed_tags: a list of allowed HTML tags\n* allowed_attributes: a list of allowed HTML attributes, or a dictionary of\n  tag keys with atttribute list for each key\n* allowed_styles: a list of allowed styles if \"style\" is one of the allowed \n  attributes\n* strip: a boolean indicating whether offending tags/attributes should be escaped or stripped\n\nHere's how to use it in django models::\n    \n    from django.db import models\n    from sanitizer.models import SanitizedCharField, SanitizedTextField\n\n    class MyModel(models.Model):\n        # Allow only <a>, <p>, <img> tags and \"href\" and \"src\" attributes\n        foo = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes=['href', 'src'], strip=False)\n        bar = SanitizedTextField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes=['href', 'src'], strip=False)\n        foo2 = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes={'img':['src', 'style']}, \n                                 allowed_styles=['width', 'height'], strip=False)\n\n\nForm Usage\n==========\n\nUsing django HTML sanitizer in django forms is very similar to model usage::\n    \n    from django import forms\n    from sanitizer.forms import SanitizedCharField\n\n    class MyForm(forms.Form):\n        # Allow only <a>, <p>, <img> tags and \"href\" and \"src\" attributes\n        foo = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes=['href', 'src'], strip=False)\n        bar = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes=['href', 'src'], strip=False, widget=forms.Textarea)\n        foo2 = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'], \n                                 allowed_attributes={'img':['src', 'style']}, \n                                 allowed_styles=['width', 'height'], strip=False)\n\n\nTemplate Usage\n==============\n\nDjango sanitizer provides a few differents ways of cleaning HTML in templates.\n\n``escape_html`` Template Tag\n----------------------------\n\nExample usage::\n    \n    {% load sanitizer %}\n    {% escape_html post.content \"a, p, img\" \"href, src, style\" \"width\"%}\n\nAssuming ``post.content`` contains the string\n'<a href =\"#\" style=\"width:200px; height=\"400px\">Example</a><script>alert(\"x\")</script>', the above tag will\noutput::\n\n    '<a href =\"#\" style=\"width:200px;\">Example</a>&lt;script&gt;alert(\"x\")&lt;/script&gt;'\n\nOn django 1.4 you could also use keyword arguments::\n\n    {% escape_html '<a href=\"\">bar</a>' allowed_tags=\"a,img\" allowed_attributes=\"href,src\" allowed_styles=\"width\" %}\n\n\n``strip_html`` Template Tag\n---------------------------\n\nExample usage::\n    \n    {% load sanitizer %}\n    {% strip_html post.content \"a, p, img\" \"href, src\" %}\n\nIf ``post.content`` contains the string\n'<a href =\"#\">Example</a><script>alert(\"x\")</script>', this will give you::\n\n    '<a href =\"#\">Example</a>alert(\"x\")'\n\n\n``escape_html`` Filter\n----------------------\n\nEscapes HTML tags from string based on settings. To use this filter you need to\nput these variables on settings.py:\n\n* ``SANITIZER_ALLOWED_TAGS`` - a list of allowed tags (defaults to an empty list)\n* ``SANITIZER_ALLOWED_ATTRIBUTES`` - a list of allowed attributes (defaults to an empty list)\n* ``SANITIZER_ALLOWED_STYLES`` - a list of allowed styles if the style attribute is set (defaults to an empty list)\n\nFor example if we have ``SANITIZER_ALLOWED_TAGS = ['a']``, \n``SANITIZER_ALLOWED_ATTRIBUTES = ['href']``, \n``SANITIZER_ALLOWED_STYLES = ['width']`` in settings.py, doing::\n    \n    {% load sanitizer %}\n    {{ post.content|escape_html }}\n\nIf ``post.content`` contains the string\n'<a href =\"#\" style=\"width:200px; height:400px\">Example</a><script>alert(\"x\")</script>', it will give you::\n\n    '<a href =\"#\" style=\"width=200px;\">Example</a>&lt;script&gt;alert(\"x\")&lt;/script&gt;'\n\n\n``strip_html`` Filter\n---------------------\n\nSimilar to ``escape_html`` filter, except it strips out offending HTML tags.\n\nFor example if we have ``SANITIZER_ALLOWED_TAGS = ['a']``, \n``SANITIZER_ALLOWED_ATTRIBUTES = ['href']`` in settings.py, doing::\n    \n    {% load sanitizer %}\n    {{ post.content|strip_html }}\n\nIf ``post.content`` contains the string\n'<a href =\"#\">Example</a><script>alert(\"x\")</script>', we will get::\n\n    '<a href =\"#\">Example</a>alert(\"x\")'\n\n\n\nChangelog\n=========\n\nVersion 0.1.5\n-------------\n\n* Fixes for smart_unicode and basestring (python 3.x support)\n\nVersion 0.1.4\n-------------\n\n* ``CharField``, ``TextField``, ``strip_html`` and ``escape_html`` now support\n  ``allowed_styles`` (thanks `cltrudeau <https://github.com/cltrudeau)>`_, \n* Added an example of template tag usage using kwargs now that Django 1.4 is out\n\nVersion 0.1.2\n-------------\n\n* ``allowed_tags`` and ``allowed_attributes`` in CharField and TextField now default to []", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ui/django-html_sanitizer", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-html_sanitizer", "package_url": "https://pypi.org/project/django-html_sanitizer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-html_sanitizer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ui/django-html_sanitizer"}, "release_url": "https://pypi.org/project/django-html_sanitizer/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "Provides a set of HTML cleaning utilities for django models, forms and templates.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django HTML Sanitizer provides a set of utilities to easily sanitize/escape/clean\nHTML inputs in django. This app is built on top of <a href=\"http://github.com/jsocol/bleach\" rel=\"nofollow\">bleach</a>,\nthe excellent Python HTML sanitizer.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"http://djangoproject.com/\" rel=\"nofollow\">django</a>: <a href=\"http://djangoproject.com/\" rel=\"nofollow\">http://djangoproject.com/</a></li>\n<li><a href=\"http://github.com/jsocol/bleach\" rel=\"nofollow\">bleach</a>: <a href=\"http://github.com/jsocol/bleach\" rel=\"nofollow\">http://github.com/jsocol/bleach</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You\u2019ll first need to install the package (or download manually from\n<a href=\"http://pypi.python.org/pypi/django-html_sanitizer\" rel=\"nofollow\">pypi</a>):</p>\n<pre>pip install django-html_sanitizer\n</pre>\n<p>And then add <tt>sanitizer</tt> to your INSTALLED_APPS in django\u2019s <tt>settings.py</tt>:</p>\n<pre>INSTALLED_APPS = (\n    # other apps\n    \"sanitizer\",\n)\n</pre>\n</div>\n<div id=\"model-usage\">\n<h2>Model Usage</h2>\n<p>Similar to bleach, django sanitizer is a whitelist (only allows specified tags\nand attributes) based HTML sanitizer. Django sanitizer provides two model fields\nthat automatically sanitizes text values; <tt>SanitizedCharField</tt> and\n<tt>SanitizedTextField</tt>.</p>\n<p>These fields accept extra arguments:</p>\n<ul>\n<li>allowed_tags: a list of allowed HTML tags</li>\n<li>allowed_attributes: a list of allowed HTML attributes, or a dictionary of\ntag keys with atttribute list for each key</li>\n<li>allowed_styles: a list of allowed styles if \u201cstyle\u201d is one of the allowed\nattributes</li>\n<li>strip: a boolean indicating whether offending tags/attributes should be escaped or stripped</li>\n</ul>\n<p>Here\u2019s how to use it in django models:</p>\n<pre>from django.db import models\nfrom sanitizer.models import SanitizedCharField, SanitizedTextField\n\nclass MyModel(models.Model):\n    # Allow only &lt;a&gt;, &lt;p&gt;, &lt;img&gt; tags and \"href\" and \"src\" attributes\n    foo = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes=['href', 'src'], strip=False)\n    bar = SanitizedTextField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes=['href', 'src'], strip=False)\n    foo2 = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes={'img':['src', 'style']},\n                             allowed_styles=['width', 'height'], strip=False)\n</pre>\n</div>\n<div id=\"form-usage\">\n<h2>Form Usage</h2>\n<p>Using django HTML sanitizer in django forms is very similar to model usage:</p>\n<pre>from django import forms\nfrom sanitizer.forms import SanitizedCharField\n\nclass MyForm(forms.Form):\n    # Allow only &lt;a&gt;, &lt;p&gt;, &lt;img&gt; tags and \"href\" and \"src\" attributes\n    foo = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes=['href', 'src'], strip=False)\n    bar = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes=['href', 'src'], strip=False, widget=forms.Textarea)\n    foo2 = SanitizedCharField(max_length=255, allowed_tags=['a', 'p', 'img'],\n                             allowed_attributes={'img':['src', 'style']},\n                             allowed_styles=['width', 'height'], strip=False)\n</pre>\n</div>\n<div id=\"template-usage\">\n<h2>Template Usage</h2>\n<p>Django sanitizer provides a few differents ways of cleaning HTML in templates.</p>\n<div id=\"escape-html-template-tag\">\n<h3><tt>escape_html</tt> Template Tag</h3>\n<p>Example usage:</p>\n<pre>{% load sanitizer %}\n{% escape_html post.content \"a, p, img\" \"href, src, style\" \"width\"%}\n</pre>\n<p>Assuming <tt>post.content</tt> contains the string\n\u2018&lt;a href =\u201d#\u201d style=\u201dwidth:200px; height=\u201d400px\u201d&gt;Example&lt;/a&gt;&lt;script&gt;alert(\u201cx\u201d)&lt;/script&gt;\u2019, the above tag will\noutput:</p>\n<pre>'&lt;a href =\"#\" style=\"width:200px;\"&gt;Example&lt;/a&gt;&amp;lt;script&amp;gt;alert(\"x\")&amp;lt;/script&amp;gt;'\n</pre>\n<p>On django 1.4 you could also use keyword arguments:</p>\n<pre>{% escape_html '&lt;a href=\"\"&gt;bar&lt;/a&gt;' allowed_tags=\"a,img\" allowed_attributes=\"href,src\" allowed_styles=\"width\" %}\n</pre>\n</div>\n<div id=\"strip-html-template-tag\">\n<h3><tt>strip_html</tt> Template Tag</h3>\n<p>Example usage:</p>\n<pre>{% load sanitizer %}\n{% strip_html post.content \"a, p, img\" \"href, src\" %}\n</pre>\n<p>If <tt>post.content</tt> contains the string\n\u2018&lt;a href =\u201d#\u201d&gt;Example&lt;/a&gt;&lt;script&gt;alert(\u201cx\u201d)&lt;/script&gt;\u2019, this will give you:</p>\n<pre>'&lt;a href =\"#\"&gt;Example&lt;/a&gt;alert(\"x\")'\n</pre>\n</div>\n<div id=\"escape-html-filter\">\n<h3><tt>escape_html</tt> Filter</h3>\n<p>Escapes HTML tags from string based on settings. To use this filter you need to\nput these variables on settings.py:</p>\n<ul>\n<li><tt>SANITIZER_ALLOWED_TAGS</tt> - a list of allowed tags (defaults to an empty list)</li>\n<li><tt>SANITIZER_ALLOWED_ATTRIBUTES</tt> - a list of allowed attributes (defaults to an empty list)</li>\n<li><tt>SANITIZER_ALLOWED_STYLES</tt> - a list of allowed styles if the style attribute is set (defaults to an empty list)</li>\n</ul>\n<p>For example if we have <tt>SANITIZER_ALLOWED_TAGS = ['a']</tt>,\n<tt>SANITIZER_ALLOWED_ATTRIBUTES = ['href']</tt>,\n<tt>SANITIZER_ALLOWED_STYLES = ['width']</tt> in settings.py, doing:</p>\n<pre>{% load sanitizer %}\n{{ post.content|escape_html }}\n</pre>\n<p>If <tt>post.content</tt> contains the string\n\u2018&lt;a href =\u201d#\u201d style=\u201dwidth:200px; height:400px\u201d&gt;Example&lt;/a&gt;&lt;script&gt;alert(\u201cx\u201d)&lt;/script&gt;\u2019, it will give you:</p>\n<pre>'&lt;a href =\"#\" style=\"width=200px;\"&gt;Example&lt;/a&gt;&amp;lt;script&amp;gt;alert(\"x\")&amp;lt;/script&amp;gt;'\n</pre>\n</div>\n<div id=\"strip-html-filter\">\n<h3><tt>strip_html</tt> Filter</h3>\n<p>Similar to <tt>escape_html</tt> filter, except it strips out offending HTML tags.</p>\n<p>For example if we have <tt>SANITIZER_ALLOWED_TAGS = ['a']</tt>,\n<tt>SANITIZER_ALLOWED_ATTRIBUTES = ['href']</tt> in settings.py, doing:</p>\n<pre>{% load sanitizer %}\n{{ post.content|strip_html }}\n</pre>\n<p>If <tt>post.content</tt> contains the string\n\u2018&lt;a href =\u201d#\u201d&gt;Example&lt;/a&gt;&lt;script&gt;alert(\u201cx\u201d)&lt;/script&gt;\u2019, we will get:</p>\n<pre>'&lt;a href =\"#\"&gt;Example&lt;/a&gt;alert(\"x\")'\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"version-0-1-5\">\n<h3>Version 0.1.5</h3>\n<ul>\n<li>Fixes for smart_unicode and basestring (python 3.x support)</li>\n</ul>\n</div>\n<div id=\"version-0-1-4\">\n<h3>Version 0.1.4</h3>\n<ul>\n<li><tt>CharField</tt>, <tt>TextField</tt>, <tt>strip_html</tt> and <tt>escape_html</tt> now support\n<tt>allowed_styles</tt> (thanks <a href=\"https://github.com/cltrudeau)\" rel=\"nofollow\">cltrudeau</a>,</li>\n<li>Added an example of template tag usage using kwargs now that Django 1.4 is out</li>\n</ul>\n</div>\n<div id=\"version-0-1-2\">\n<h3>Version 0.1.2</h3>\n<ul>\n<li><tt>allowed_tags</tt> and <tt>allowed_attributes</tt> in CharField and TextField now default to []</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1901865, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "18445fe519a0920d5057d3440eca3226", "sha256": "5652127eb9d04f107fb3cf847b5087c077630b08bd0f5d72b667eb02f70043a4"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "18445fe519a0920d5057d3440eca3226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4570, "upload_time": "2012-05-02T18:51:00", "upload_time_iso_8601": "2012-05-02T18:51:00.211479Z", "url": "https://files.pythonhosted.org/packages/0d/c7/d7f6dbaf7e8f013b5ad6f44240663850abab91c8e6e330e549191413771d/django-html_sanitizer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "410f237fd479a7e61be8f81b1199ef08", "sha256": "9072f8ca5a7d07996d636c373b3d511ca9978d7f7f37524fa446846a0e57c7b5"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "410f237fd479a7e61be8f81b1199ef08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4742, "upload_time": "2012-08-18T10:17:46", "upload_time_iso_8601": "2012-08-18T10:17:46.656379Z", "url": "https://files.pythonhosted.org/packages/82/73/fcfce9056a694e3a5e6b783b8eb1753fb7793044e63667cbd77400cba146/django-html_sanitizer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fce2d177407d4d35b978361f93e181a2", "sha256": "319cf6001ec63f2b39f81d54ae329c620bbf358adcb2cc65d48942324ea005fb"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fce2d177407d4d35b978361f93e181a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5478, "upload_time": "2012-08-21T15:37:00", "upload_time_iso_8601": "2012-08-21T15:37:00.239608Z", "url": "https://files.pythonhosted.org/packages/f6/d4/54aca9d2171a13a628aaff5d9f6a53cd3c5ed77d7d351000095f7ee7ce1b/django-html_sanitizer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "660f1162bacdea045e8145b190f4248c", "sha256": "2bc4e70889c852479d42ed98b78e5da753f65d9ea8dd1faebf644e2298f52990"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "660f1162bacdea045e8145b190f4248c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6066, "upload_time": "2012-11-11T10:13:19", "upload_time_iso_8601": "2012-11-11T10:13:19.792273Z", "url": "https://files.pythonhosted.org/packages/70/c8/c0f88f2ba0bbd8dd5b82a17cc6c42ed5db6192bd58792136eb668e5f1b9d/django-html_sanitizer-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0fc42e2314f687484e9e236d9e842283", "sha256": "5820ad3ac6bebdc8dc95d8401194a921248852e4ba32ba1d22d0ddaefd649873"}, "downloads": -1, "filename": "django_html_sanitizer-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fc42e2314f687484e9e236d9e842283", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10606, "upload_time": "2016-01-13T01:28:37", "upload_time_iso_8601": "2016-01-13T01:28:37.810294Z", "url": "https://files.pythonhosted.org/packages/0a/4c/f4c7364126273ddb86bdf52a0824bb49273e2d4f2ce2968b766359256654/django_html_sanitizer-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350dd3b75420fad351fb7c3818e46714", "sha256": "407079629e472bd4d9998b6a050c18949d3e88e38ceb985d30ea2b05128e32d4"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.5.tar.gz", "has_sig": false, "md5_digest": "350dd3b75420fad351fb7c3818e46714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5977, "upload_time": "2016-01-13T01:28:32", "upload_time_iso_8601": "2016-01-13T01:28:32.697180Z", "url": "https://files.pythonhosted.org/packages/3a/0f/a877623d3692ee9e0b1e2be9c460e21f88028b1ffe7e49de2912cc946490/django-html_sanitizer-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fc42e2314f687484e9e236d9e842283", "sha256": "5820ad3ac6bebdc8dc95d8401194a921248852e4ba32ba1d22d0ddaefd649873"}, "downloads": -1, "filename": "django_html_sanitizer-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fc42e2314f687484e9e236d9e842283", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10606, "upload_time": "2016-01-13T01:28:37", "upload_time_iso_8601": "2016-01-13T01:28:37.810294Z", "url": "https://files.pythonhosted.org/packages/0a/4c/f4c7364126273ddb86bdf52a0824bb49273e2d4f2ce2968b766359256654/django_html_sanitizer-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350dd3b75420fad351fb7c3818e46714", "sha256": "407079629e472bd4d9998b6a050c18949d3e88e38ceb985d30ea2b05128e32d4"}, "downloads": -1, "filename": "django-html_sanitizer-0.1.5.tar.gz", "has_sig": false, "md5_digest": "350dd3b75420fad351fb7c3818e46714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5977, "upload_time": "2016-01-13T01:28:32", "upload_time_iso_8601": "2016-01-13T01:28:32.697180Z", "url": "https://files.pythonhosted.org/packages/3a/0f/a877623d3692ee9e0b1e2be9c460e21f88028b1ffe7e49de2912cc946490/django-html_sanitizer-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:41 2020"}