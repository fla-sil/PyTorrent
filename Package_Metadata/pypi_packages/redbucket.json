{"info": {"author": "Nicholas Gaya", "author_email": "nicholasgaya+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Red Bucket\n\nPython rate limiting library using Redis for shared state.\n\n## Installation\n\nTo install the latest released version:\n\n    pip install redbucket\n\nTo install the current development version from the master branch on GitHub:\n\n    pip install -U git+https://github.com/nickgaya/redbucket.git\n\n## Usage\n\nThe following snippet configures a rate limiter with two rate limiting zones:\n\n```python3\nfrom redbucket import RedisRateLimiter, RateLimit, Zone\nfrom redis import Redis\n\n\n# Accept up to 5 requests per user per second.\n# Allow bursts of up to 10 requests.\nuser_zone = Zone('user', rate=5)\nuser_limit = RateLimit(user_zone, burst=10)\n\n# Accept up to 20 requests per IP per second.\n# Allow up to 10 excess requests with a delay.\nip_zone = Zone('ip', rate=20)\nip_limit = RateLimit(ip_zone, delay=10)\n\nredis = Redis()\nrate_limiter = RedisRateLimiter(redis)\nrate_limiter.configure(user=user_limit, ip=ip_limit)\n```\n\nWe can now use the rate limiter as follows:\n\n```python3\ndef example_operation(user, ip_address):\n    response = rate_limiter.request(user=user, ip=ip_address)\n    if not response.accepted:\n        raise Exception(\"Rate limit exceeded\")  # Reject request\n    if response.delay > 0:\n        sleep(response.delay)  # Wait for delay seconds\n    ...  # Perform operation\n```\n\nNote that we don't have to specify a key for every zone. For example, we could\nexclude certain IP addresses from IP rate limiting while still applying the\nuser rate limit, as follows:\n\n```python3\ndef example_operation(user, ip_address):\n    if is_whitelisted(ip_address):\n        response = rate_limiter.acquire(user=user)\n    else:\n        response = rate_limiter.acquire(user=user, ip=ip_address)\n    ...\n```\n\n### Implementations\n\nThe default `RedisRateLimiter` uses Redis's Lua script engine to atomically\nupdate rate limiter state. This implementation requires Redis 3.2 or greater.\nFor older Redis versions, you can use the `RedisTransactionalRateLimiter`.\n\nWhere supported, the script-based implementation is recommended as it handles\neach rate limiting request in a single round-trip to the Redis server, whereas\nthe transactional implementation performs several consecutive Redis commands\nper request.\n\n### State encoding\n\nBy default, rate limiter state is stored in Redis using a packed binary\nrepresentation. You can switch to JSON for a less efficient but more\nhuman-readable encoding.\n\n    rate_limiter = RedisRateLimiter(redis, codec='json')\n\n## Rate limiting model\n\nRed Bucket uses a rate limiting model inspired by [Nginx][rate-limiting-nginx].\nRate limiting state is stored in one or more **zones**. Each zone has a name\nand a base **rate**. A zone represents a namespace of rate limiting **keys**. A\n**rate limit** references a zone along with two parameters, **burst** and\n**delay**. A **rate limiter** references one or more rate limits.\n\nTo apply rate limiting to an operation, the application makes a **request** to\nthe rate limiter by specifying a key for each desired rate limit. The rate\nlimiter evaluates each rate limit to determine whether to reject, delay, or\nimmediately accept the request. If using multiple rate limits, the most\nrestrictive outcome will be applied.\n\nFor a rate limit with base rate <i>r</i>, burst value <i>b</i>, and delay value\n<i>d</i>, the rate limiter maintains a virtual counter for each key that\ncontinuously increases at a rate of <i>r</i> requests per second up to a\nmaximum value of\n<span style=\"white-space: nowrap;\"><i>b</i> + 1</span>. When a request arrives,\nthe rate limiter checks the current value of the counter <i>v</i>. If\n<span style=\"white-space: nowrap;\"><i>v</i> &minus; 1 &ge; 0</span>, the rate\nlimiter decrements the counter by 1 and accepts the request immediately. If\n<span style=\"white-space: nowrap;\"><i>v</i> &minus; 1 &ge; &minus;<i>d</i></span>,\nthe rate limiter decrements the counter by 1 and accepts the request after a\ndelay of\n<span style=\"white-space: nowrap;\">(<i>v</i> &minus; 1) / <i>r</i></span>\nseconds. Otherwise, *i.e.* if\n<span style=\"white-space: nowrap;\"><i>v</i> &minus; 1 &lt; &minus;<i>d</i></span>,\nthe rate limiter rejects the request.\n\nIn practice, this means that from an initial idle state for a given key, the\nrate limiter will allow a burst of\n<span style=\"white-space: nowrap;\"><i>b</i> + 1</span> requests immediately,\nthrottle the next <i>d</i> requests to the desired rate, and reject any further\nrequests past the limit.\n\n[rate-limiting-nginx]: https://www.nginx.com/blog/rate-limiting-nginx/ \"Rate Limiting with NGINX\"\n\n### Comparison with Nginx\n\nAs noted above, Red Bucket's rate limiting model is inspired by Nginx and\nuses a similar algorithm. However, the way burst and delay are specified is a\nlittle different. The following configuration examples illustrate the\ndifference.\n\n* Basic rate limiting\n\n    ```nginx\n    # nginx\n    limit_req zone=mylimit;\n    ```\n    ```python3\n    # redbucket\n    RateLimit(zone=mylimit)\n    ```\n\n* Burst with delay\n\n    ```nginx\n    # nginx\n    limit_req zone=mylimit burst=20;\n    ```\n    ```python3\n    # redbucket\n    RateLimit(zone=mylimit, delay=20)\n    ```\n\n* Burst with no delay\n\n    ```nginx\n    # nginx\n    limit_req zone=mylimit burst=20 nodelay;\n    ```\n    ```python3\n    # redbucket\n    RateLimit(zone=mylimit, burst=20)\n    ```\n\n* Two-stage rate limiting\n\n    ```nginx\n    # nginx\n    limit_req zone=ip burst=12 delay=8;\n    ```\n    ```python3\n    # redbucket\n    RateLimit(zone=mylimit, burst=8, delay=4)\n    ```\n\n## Development\n\nThis project uses Tox to manage virtual environments for unit tests and other\nchecks. Unit tests are written using the Pytest framework.\n\nThe unit tests require a Redis instance. By default, the tests attempt to\nconnect to port 6379 of localhost. This can be overridden by setting the\n`REDIS_URL` environment variable.\n\n    export REDIS_URL=redis://localhost:6379\n\nTo start a Redis Docker container for running the tests, you can use the\n*docker_redis.sh* script. For example, to run the tests against a Docker redis\ninstance, you can run:\n\n    ./docker_redis.sh tox\n\nYou can also run the script without a command and execute output to set\nenvironment variables in your current shell.\n\n    eval \"$(./docker_redis.sh)\"\n\nBy default, the script uses the `redis:alpine` image. You can supply a\ndifferent tag for the `redis` image with the `-t` flag, or a different image\nname with `-i`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nickgaya/redbucket", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "redbucket", "package_url": "https://pypi.org/project/redbucket/", "platform": "", "project_url": "https://pypi.org/project/redbucket/", "project_urls": {"Homepage": "https://github.com/nickgaya/redbucket"}, "release_url": "https://pypi.org/project/redbucket/0.1.0/", "requires_dist": ["redis (~=3.0)"], "requires_python": "~=3.6", "summary": "Python rate limiting library using Redis for shared state.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Red Bucket</h1>\n<p>Python rate limiting library using Redis for shared state.</p>\n<h2>Installation</h2>\n<p>To install the latest released version:</p>\n<pre><code>pip install redbucket\n</code></pre>\n<p>To install the current development version from the master branch on GitHub:</p>\n<pre><code>pip install -U git+https://github.com/nickgaya/redbucket.git\n</code></pre>\n<h2>Usage</h2>\n<p>The following snippet configures a rate limiter with two rate limiting zones:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redbucket</span> <span class=\"kn\">import</span> <span class=\"n\">RedisRateLimiter</span><span class=\"p\">,</span> <span class=\"n\">RateLimit</span><span class=\"p\">,</span> <span class=\"n\">Zone</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n\n\n<span class=\"c1\"># Accept up to 5 requests per user per second.</span>\n<span class=\"c1\"># Allow bursts of up to 10 requests.</span>\n<span class=\"n\">user_zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">user_limit</span> <span class=\"o\">=</span> <span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">user_zone</span><span class=\"p\">,</span> <span class=\"n\">burst</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accept up to 20 requests per IP per second.</span>\n<span class=\"c1\"># Allow up to 10 excess requests with a delay.</span>\n<span class=\"n\">ip_zone</span> <span class=\"o\">=</span> <span class=\"n\">Zone</span><span class=\"p\">(</span><span class=\"s1\">'ip'</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">ip_limit</span> <span class=\"o\">=</span> <span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">ip_zone</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">redis</span> <span class=\"o\">=</span> <span class=\"n\">Redis</span><span class=\"p\">()</span>\n<span class=\"n\">rate_limiter</span> <span class=\"o\">=</span> <span class=\"n\">RedisRateLimiter</span><span class=\"p\">(</span><span class=\"n\">redis</span><span class=\"p\">)</span>\n<span class=\"n\">rate_limiter</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user_limit</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"n\">ip_limit</span><span class=\"p\">)</span>\n</pre>\n<p>We can now use the rate limiter as follows:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">example_operation</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">ip_address</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">rate_limiter</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"n\">ip_address</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">accepted</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Rate limit exceeded\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Reject request</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">delay</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">)</span>  <span class=\"c1\"># Wait for delay seconds</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># Perform operation</span>\n</pre>\n<p>Note that we don't have to specify a key for every zone. For example, we could\nexclude certain IP addresses from IP rate limiting while still applying the\nuser rate limit, as follows:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">example_operation</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">ip_address</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_whitelisted</span><span class=\"p\">(</span><span class=\"n\">ip_address</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">rate_limiter</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">rate_limiter</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"o\">=</span><span class=\"n\">ip_address</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Implementations</h3>\n<p>The default <code>RedisRateLimiter</code> uses Redis's Lua script engine to atomically\nupdate rate limiter state. This implementation requires Redis 3.2 or greater.\nFor older Redis versions, you can use the <code>RedisTransactionalRateLimiter</code>.</p>\n<p>Where supported, the script-based implementation is recommended as it handles\neach rate limiting request in a single round-trip to the Redis server, whereas\nthe transactional implementation performs several consecutive Redis commands\nper request.</p>\n<h3>State encoding</h3>\n<p>By default, rate limiter state is stored in Redis using a packed binary\nrepresentation. You can switch to JSON for a less efficient but more\nhuman-readable encoding.</p>\n<pre><code>rate_limiter = RedisRateLimiter(redis, codec='json')\n</code></pre>\n<h2>Rate limiting model</h2>\n<p>Red Bucket uses a rate limiting model inspired by <a href=\"https://www.nginx.com/blog/rate-limiting-nginx/\" rel=\"nofollow\" title=\"Rate Limiting with NGINX\">Nginx</a>.\nRate limiting state is stored in one or more <strong>zones</strong>. Each zone has a name\nand a base <strong>rate</strong>. A zone represents a namespace of rate limiting <strong>keys</strong>. A\n<strong>rate limit</strong> references a zone along with two parameters, <strong>burst</strong> and\n<strong>delay</strong>. A <strong>rate limiter</strong> references one or more rate limits.</p>\n<p>To apply rate limiting to an operation, the application makes a <strong>request</strong> to\nthe rate limiter by specifying a key for each desired rate limit. The rate\nlimiter evaluates each rate limit to determine whether to reject, delay, or\nimmediately accept the request. If using multiple rate limits, the most\nrestrictive outcome will be applied.</p>\n<p>For a rate limit with base rate <i>r</i>, burst value <i>b</i>, and delay value\n<i>d</i>, the rate limiter maintains a virtual counter for each key that\ncontinuously increases at a rate of <i>r</i> requests per second up to a\nmaximum value of\n<span><i>b</i> + 1</span>. When a request arrives,\nthe rate limiter checks the current value of the counter <i>v</i>. If\n<span><i>v</i> \u2212 1 \u2265 0</span>, the rate\nlimiter decrements the counter by 1 and accepts the request immediately. If\n<span><i>v</i> \u2212 1 \u2265 \u2212<i>d</i></span>,\nthe rate limiter decrements the counter by 1 and accepts the request after a\ndelay of\n<span>(<i>v</i> \u2212 1) / <i>r</i></span>\nseconds. Otherwise, <em>i.e.</em> if\n<span><i>v</i> \u2212 1 &lt; \u2212<i>d</i></span>,\nthe rate limiter rejects the request.</p>\n<p>In practice, this means that from an initial idle state for a given key, the\nrate limiter will allow a burst of\n<span><i>b</i> + 1</span> requests immediately,\nthrottle the next <i>d</i> requests to the desired rate, and reject any further\nrequests past the limit.</p>\n<h3>Comparison with Nginx</h3>\n<p>As noted above, Red Bucket's rate limiting model is inspired by Nginx and\nuses a similar algorithm. However, the way burst and delay are specified is a\nlittle different. The following configuration examples illustrate the\ndifference.</p>\n<ul>\n<li>\n<p>Basic rate limiting</p>\n<pre><span class=\"c1\"># nginx</span>\n<span class=\"k\">limit_req</span> <span class=\"s\">zone=mylimit</span><span class=\"p\">;</span>\n</pre>\n<pre><span class=\"c1\"># redbucket</span>\n<span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"o\">=</span><span class=\"n\">mylimit</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Burst with delay</p>\n<pre><span class=\"c1\"># nginx</span>\n<span class=\"k\">limit_req</span> <span class=\"s\">zone=mylimit</span> <span class=\"s\">burst=20</span><span class=\"p\">;</span>\n</pre>\n<pre><span class=\"c1\"># redbucket</span>\n<span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"o\">=</span><span class=\"n\">mylimit</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Burst with no delay</p>\n<pre><span class=\"c1\"># nginx</span>\n<span class=\"k\">limit_req</span> <span class=\"s\">zone=mylimit</span> <span class=\"s\">burst=20</span> <span class=\"s\">nodelay</span><span class=\"p\">;</span>\n</pre>\n<pre><span class=\"c1\"># redbucket</span>\n<span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"o\">=</span><span class=\"n\">mylimit</span><span class=\"p\">,</span> <span class=\"n\">burst</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Two-stage rate limiting</p>\n<pre><span class=\"c1\"># nginx</span>\n<span class=\"k\">limit_req</span> <span class=\"s\">zone=ip</span> <span class=\"s\">burst=12</span> <span class=\"s\">delay=8</span><span class=\"p\">;</span>\n</pre>\n<pre><span class=\"c1\"># redbucket</span>\n<span class=\"n\">RateLimit</span><span class=\"p\">(</span><span class=\"n\">zone</span><span class=\"o\">=</span><span class=\"n\">mylimit</span><span class=\"p\">,</span> <span class=\"n\">burst</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Development</h2>\n<p>This project uses Tox to manage virtual environments for unit tests and other\nchecks. Unit tests are written using the Pytest framework.</p>\n<p>The unit tests require a Redis instance. By default, the tests attempt to\nconnect to port 6379 of localhost. This can be overridden by setting the\n<code>REDIS_URL</code> environment variable.</p>\n<pre><code>export REDIS_URL=redis://localhost:6379\n</code></pre>\n<p>To start a Redis Docker container for running the tests, you can use the\n<em>docker_redis.sh</em> script. For example, to run the tests against a Docker redis\ninstance, you can run:</p>\n<pre><code>./docker_redis.sh tox\n</code></pre>\n<p>You can also run the script without a command and execute output to set\nenvironment variables in your current shell.</p>\n<pre><code>eval \"$(./docker_redis.sh)\"\n</code></pre>\n<p>By default, the script uses the <code>redis:alpine</code> image. You can supply a\ndifferent tag for the <code>redis</code> image with the <code>-t</code> flag, or a different image\nname with <code>-i</code>.</p>\n\n          </div>"}, "last_serial": 6775253, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8c51ff15abf0b818e9323e37e03cbc8f", "sha256": "daf3f4e32b556f03d4e74dab776f90b8bfe0bcd3a31cb93df257ffa193808a5d"}, "downloads": -1, "filename": "redbucket-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c51ff15abf0b818e9323e37e03cbc8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 12949, "upload_time": "2020-03-09T07:42:33", "upload_time_iso_8601": "2020-03-09T07:42:33.964601Z", "url": "https://files.pythonhosted.org/packages/2b/11/65783e9de9ac95ba550ce21a3cbe9139c689566ad826b7d5151dfecbb9fe/redbucket-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc0e755b81523a955060f453d194502d", "sha256": "3b7a5d617b322beb45ce114e95a59260db2643f2855bae18ce930232d9b11711"}, "downloads": -1, "filename": "redbucket-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dc0e755b81523a955060f453d194502d", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 21143, "upload_time": "2020-03-09T07:42:35", "upload_time_iso_8601": "2020-03-09T07:42:35.857544Z", "url": "https://files.pythonhosted.org/packages/eb/3d/09095e84c3ab29fb02d1de042948301d8b58eb439b511085243cfffff710/redbucket-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c51ff15abf0b818e9323e37e03cbc8f", "sha256": "daf3f4e32b556f03d4e74dab776f90b8bfe0bcd3a31cb93df257ffa193808a5d"}, "downloads": -1, "filename": "redbucket-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c51ff15abf0b818e9323e37e03cbc8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 12949, "upload_time": "2020-03-09T07:42:33", "upload_time_iso_8601": "2020-03-09T07:42:33.964601Z", "url": "https://files.pythonhosted.org/packages/2b/11/65783e9de9ac95ba550ce21a3cbe9139c689566ad826b7d5151dfecbb9fe/redbucket-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc0e755b81523a955060f453d194502d", "sha256": "3b7a5d617b322beb45ce114e95a59260db2643f2855bae18ce930232d9b11711"}, "downloads": -1, "filename": "redbucket-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dc0e755b81523a955060f453d194502d", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 21143, "upload_time": "2020-03-09T07:42:35", "upload_time_iso_8601": "2020-03-09T07:42:35.857544Z", "url": "https://files.pythonhosted.org/packages/eb/3d/09095e84c3ab29fb02d1de042948301d8b58eb439b511085243cfffff710/redbucket-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:00 2020"}