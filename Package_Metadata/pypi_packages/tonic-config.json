{"info": {"author": "Nathan Michlo", "author_email": "NathanJMichlo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Utilities"], "description": "# tonic-config ![Tests Status](https://img.shields.io/github/workflow/status/nmichlo/tonic-config/Tests?label=tests&style=flat-square) ![License](https://img.shields.io/github/license/nmichlo/tonic-config?style=flat-square) ![Version](https://img.shields.io/pypi/v/tonic-config?style=flat-square) ![Python Versions](https://img.shields.io/pypi/pyversions/tonic-config?style=flat-square)\n\n\ud83d\udcdc Tonic is a lightweight configuration framework and experiment manager for Python, combining the most notable aspects of Gin and Sacred.\n\n## Why?\n\n- Gin-config is designed around their own configuration files and syntax, and is difficult to work with programatically.\n\n- Sacred has a larger yet familiar featureset, but the configuration syntax is very different. The additional advantage of tonic-config is that it has the concept of global variables.\n\n## Getting Started\n\n### 1. Minimal Example\n\nConfigurations are handled via annotating functions.\nWith tonic, only default parameters of functions can be configured.\n\nThe most simple tonic example looks as follows:\n```python\nimport tonic\n\n@tonic.config\ndef foobar(foo, bar=None):\n    print(foo, bar)\n\n# no configuration used for call\nfoobar(1000)\n\n# set configuration and reconfigure registered functions\n# tonic.config.reset() resets configuration\n# tonic.config.update() merges the given configuration with the previous, overwriting values.\ntonic.config.set({\n    'foobar.bar': 1337 \n})\n\n# call functions with new configuration\nfoobar(1000)\nfoobar(1000, bar='bar')\n```\n\nWhen run, the above will output:\n```\n>>> 1000 None\n>>> 1000 1337\n>>> 1000 bar\n```\n\nNotice in the above example even if a function has been configured, manually\nspecifing the named values when calling the function takes priority.\n\n\n### 2. Configuring Classes\n\nIf a class is annotated, the configuration will apply to parameters of the __init__ method.\n\nOther methods within the class also need to be annotated separately.\n\n```python\nimport tonic\n\n@tonic.config\nclass Fizz(object):\n    def __init__(self, foo=None):\n        print(foo)\n\n    @tonic.config\n    def buzz(bar=None):\n        print(bar)\n\nFizz().buzz()\n\ntonic.config.set({\n    'Fizz.foo': 1,\n    'Fizz.buzz.bar': 100,\n})\n\nFizz().buzz()\n```\n\nThe output of the above will be:\n```\n>>> None\n>>> None\n>>> 1\n>>> 100\n```\n\n### 3. Namespaces\n\nTonic groups parameters of registered functions under their\nown namespace by default, corresponding to the hierarchy of\nobjects within the file to that function.\n\nIf you manually specify the namespace of a configured function, any\nother configured function with the same namespace will also share the same\nconfigurations for parameters.\n\nBut can no longer access the function under the default name.\n**this condition might be relaxed in future versions**\n\n```python\nimport tonic\n\n@tonic.config('fizz.buzz')\ndef foobar1(foo=1, bar=None):\n    print(foo, bar)\n\n@tonic.config('fizz.buzz')\ndef foobar2(foo=2, bar=None):\n    print(foo, bar)\n\ntonic.config.set({\n    'fizz.buzz.bar': 'bar'\n})\n\nfoobar1()\nfoobar2()\n```\n\nOutputs:\n```\n>>> 1 bar\n>>> 2 bar\n```\n\n\n### 4. Global Configurations\n\nTonic also supports global parameter configurations by using the `*` namespace.\n\nAny function with a parameter that matches the global namespace will be configured.\n\nExplicit configuration of a namespace with matching parameters will take priority.\n\n```python\nimport tonic\n\n@tonic.config\ndef foobar(foo=None, bar=None, buzz=None):\n    print(foo, bar, buzz)\n\n@tonic.config\ndef fizzbang(fizz=None, bang=None, buzz=None):\n    print(fizz, bang, buzz)\n\ntonic.config.set({\n    '*.buzz': 'global',\n    # configure foobar\n    'foobar.foo': 'foo',\n    'foobar.bar': 'bar',\n    # configure fizzbang\n    'fizzbang.fizz': 'fizz',\n    'fizzbang.bang': 'bang',\n})\n\nfoobar()\nfizzbang()\n\n# merge the given config with the previous\n# reset config instead with tonic.config.reset()\ntonic.config.update({\n    'fizzbang.buzz': 'overwritten'\n})\n\nfoobar()\nfizzbang()\n```\n\nThe above will output:\n```\n>>> foo bar global\n>>> fizz bang global\n>>> foo bar global\n>>> fizz bang overwritten\n```\n\n### 5. Instanced Values\n\nprefixing any key in the configuration with an `@` marks the\ncorresponding value as an instanced value.\n\nThe requirement for a value that is instanced, is that it is an already\nregistered/configured class or function.\n\nMarking a parameter as instanced means that the function/class\nis called on every function with a matching parameter, with the\nresulting value from the call taking its place.\n\nEvery time the configuration is updated, these instanced\nvalues are lazily recomputed.\n\n\n```python\nimport tonic\n\nCOUNT = 0\n\n@tonic.config\ndef counter(step_size=1):\n    global COUNT\n    COUNT += step_size\n    return COUNT\n\n@tonic.config\ndef print_count(count=None):\n    print(count)\n\nprint_count()\nprint_count()\n\ntonic.config.set({\n    'counter.step_size': 2,\n    '@print_count.count': 'counter'\n})\n\nprint_count()\nprint_count()\n\ntonic.config.update({\n    'counter.step_size': 5,\n})\n\nprint_count()\nprint_count()\n```\n\nThe above will output the following:\n```\n>>> None\n>>> None\n>>> 2\n>>> 2\n>>> 7\n>>> 7\n```\n\n### 6. Saving/Loading Configurations\n\nSave and load your configurations using `tonic.config.save('file.toml')` and `tonic.config.load('file.toml')`\n\n\n### 7. Multiple Configurations\n\n`tonic.config` is an instance of `tonic.Config()`\n\nyou can instantiate your own version for example: `my_config = tonic.Config()`\nand use `my_config` instead of `tonic.config`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nmichlo/tonic-config", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tonic-config", "package_url": "https://pypi.org/project/tonic-config/", "platform": "", "project_url": "https://pypi.org/project/tonic-config/", "project_urls": {"Homepage": "https://github.com/nmichlo/tonic-config"}, "release_url": "https://pypi.org/project/tonic-config/0.1.7/", "requires_dist": ["toml", "cached-property"], "requires_python": ">=3.6", "summary": "Lightweight configuration framework for Python, combining the most notable aspects of Gin and Sacred.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tonic-config <img alt=\"Tests Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76016311523951408c4d78c66638fbf0d2bf720c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6e6d6963686c6f2f746f6e69632d636f6e6669672f54657374733f6c6162656c3d7465737473267374796c653d666c61742d737175617265\"> <img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5ebd965e3fd2aa28565658047312b89d5eb3965/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e6d6963686c6f2f746f6e69632d636f6e6669673f7374796c653d666c61742d737175617265\"> <img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c11114d565c37a40b7fa6f249326261f95d63ee/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f746f6e69632d636f6e6669673f7374796c653d666c61742d737175617265\"> <img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4971b880e0887285d52385b901ecaa0d9a85deb2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f746f6e69632d636f6e6669673f7374796c653d666c61742d737175617265\"></h1>\n<p>\ud83d\udcdc Tonic is a lightweight configuration framework and experiment manager for Python, combining the most notable aspects of Gin and Sacred.</p>\n<h2>Why?</h2>\n<ul>\n<li>\n<p>Gin-config is designed around their own configuration files and syntax, and is difficult to work with programatically.</p>\n</li>\n<li>\n<p>Sacred has a larger yet familiar featureset, but the configuration syntax is very different. The additional advantage of tonic-config is that it has the concept of global variables.</p>\n</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>1. Minimal Example</h3>\n<p>Configurations are handled via annotating functions.\nWith tonic, only default parameters of functions can be configured.</p>\n<p>The most simple tonic example looks as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tonic</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">def</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># no configuration used for call</span>\n<span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set configuration and reconfigure registered functions</span>\n<span class=\"c1\"># tonic.config.reset() resets configuration</span>\n<span class=\"c1\"># tonic.config.update() merges the given configuration with the previous, overwriting values.</span>\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n    <span class=\"s1\">'foobar.bar'</span><span class=\"p\">:</span> <span class=\"mi\">1337</span> \n<span class=\"p\">})</span>\n\n<span class=\"c1\"># call functions with new configuration</span>\n<span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">foobar</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n</pre>\n<p>When run, the above will output:</p>\n<pre><code>&gt;&gt;&gt; 1000 None\n&gt;&gt;&gt; 1000 1337\n&gt;&gt;&gt; 1000 bar\n</code></pre>\n<p>Notice in the above example even if a function has been configured, manually\nspecifing the named values when calling the function takes priority.</p>\n<h3>2. Configuring Classes</h3>\n<p>If a class is annotated, the configuration will apply to parameters of the <strong>init</strong> method.</p>\n<p>Other methods within the class also need to be annotated separately.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tonic</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">Fizz</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n    <span class=\"k\">def</span> <span class=\"nf\">buzz</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n\n<span class=\"n\">Fizz</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buzz</span><span class=\"p\">()</span>\n\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n    <span class=\"s1\">'Fizz.foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Fizz.buzz.bar'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">Fizz</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">buzz</span><span class=\"p\">()</span>\n</pre>\n<p>The output of the above will be:</p>\n<pre><code>&gt;&gt;&gt; None\n&gt;&gt;&gt; None\n&gt;&gt;&gt; 1\n&gt;&gt;&gt; 100\n</code></pre>\n<h3>3. Namespaces</h3>\n<p>Tonic groups parameters of registered functions under their\nown namespace by default, corresponding to the hierarchy of\nobjects within the file to that function.</p>\n<p>If you manually specify the namespace of a configured function, any\nother configured function with the same namespace will also share the same\nconfigurations for parameters.</p>\n<p>But can no longer access the function under the default name.\n<strong>this condition might be relaxed in future versions</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tonic</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'fizz.buzz'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foobar1</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'fizz.buzz'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foobar2</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n    <span class=\"s1\">'fizz.buzz.bar'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">foobar1</span><span class=\"p\">()</span>\n<span class=\"n\">foobar2</span><span class=\"p\">()</span>\n</pre>\n<p>Outputs:</p>\n<pre><code>&gt;&gt;&gt; 1 bar\n&gt;&gt;&gt; 2 bar\n</code></pre>\n<h3>4. Global Configurations</h3>\n<p>Tonic also supports global parameter configurations by using the <code>*</code> namespace.</p>\n<p>Any function with a parameter that matches the global namespace will be configured.</p>\n<p>Explicit configuration of a namespace with matching parameters will take priority.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tonic</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">def</span> <span class=\"nf\">foobar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">buzz</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">buzz</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">def</span> <span class=\"nf\">fizzbang</span><span class=\"p\">(</span><span class=\"n\">fizz</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">bang</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">buzz</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fizz</span><span class=\"p\">,</span> <span class=\"n\">bang</span><span class=\"p\">,</span> <span class=\"n\">buzz</span><span class=\"p\">)</span>\n\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n    <span class=\"s1\">'*.buzz'</span><span class=\"p\">:</span> <span class=\"s1\">'global'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># configure foobar</span>\n    <span class=\"s1\">'foobar.foo'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'foobar.bar'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># configure fizzbang</span>\n    <span class=\"s1\">'fizzbang.fizz'</span><span class=\"p\">:</span> <span class=\"s1\">'fizz'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fizzbang.bang'</span><span class=\"p\">:</span> <span class=\"s1\">'bang'</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">foobar</span><span class=\"p\">()</span>\n<span class=\"n\">fizzbang</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># merge the given config with the previous</span>\n<span class=\"c1\"># reset config instead with tonic.config.reset()</span>\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'fizzbang.buzz'</span><span class=\"p\">:</span> <span class=\"s1\">'overwritten'</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">foobar</span><span class=\"p\">()</span>\n<span class=\"n\">fizzbang</span><span class=\"p\">()</span>\n</pre>\n<p>The above will output:</p>\n<pre><code>&gt;&gt;&gt; foo bar global\n&gt;&gt;&gt; fizz bang global\n&gt;&gt;&gt; foo bar global\n&gt;&gt;&gt; fizz bang overwritten\n</code></pre>\n<h3>5. Instanced Values</h3>\n<p>prefixing any key in the configuration with an <code>@</code> marks the\ncorresponding value as an instanced value.</p>\n<p>The requirement for a value that is instanced, is that it is an already\nregistered/configured class or function.</p>\n<p>Marking a parameter as instanced means that the function/class\nis called on every function with a matching parameter, with the\nresulting value from the call taking its place.</p>\n<p>Every time the configuration is updated, these instanced\nvalues are lazily recomputed.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tonic</span>\n\n<span class=\"n\">COUNT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">def</span> <span class=\"nf\">counter</span><span class=\"p\">(</span><span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">global</span> <span class=\"n\">COUNT</span>\n    <span class=\"n\">COUNT</span> <span class=\"o\">+=</span> <span class=\"n\">step_size</span>\n    <span class=\"k\">return</span> <span class=\"n\">COUNT</span>\n\n<span class=\"nd\">@tonic</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_count</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n    <span class=\"s1\">'counter.step_size'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'@print_count.count'</span><span class=\"p\">:</span> <span class=\"s1\">'counter'</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n\n<span class=\"n\">tonic</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'counter.step_size'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n<span class=\"n\">print_count</span><span class=\"p\">()</span>\n</pre>\n<p>The above will output the following:</p>\n<pre><code>&gt;&gt;&gt; None\n&gt;&gt;&gt; None\n&gt;&gt;&gt; 2\n&gt;&gt;&gt; 2\n&gt;&gt;&gt; 7\n&gt;&gt;&gt; 7\n</code></pre>\n<h3>6. Saving/Loading Configurations</h3>\n<p>Save and load your configurations using <code>tonic.config.save('file.toml')</code> and <code>tonic.config.load('file.toml')</code></p>\n<h3>7. Multiple Configurations</h3>\n<p><code>tonic.config</code> is an instance of <code>tonic.Config()</code></p>\n<p>you can instantiate your own version for example: <code>my_config = tonic.Config()</code>\nand use <code>my_config</code> instead of <code>tonic.config</code></p>\n\n          </div>"}, "last_serial": 7171666, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dbde2c45c06246e6fe3edb43d520fe2c", "sha256": "0556e5449df0ca800d32ecba3d11883d0bdffd05a7fdd2cdfebd89b4c382e964"}, "downloads": -1, "filename": "tonic-config-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dbde2c45c06246e6fe3edb43d520fe2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3597, "upload_time": "2020-05-04T10:26:25", "upload_time_iso_8601": "2020-05-04T10:26:25.740011Z", "url": "https://files.pythonhosted.org/packages/5b/62/400f13b5bab69ddb74d2e7d07511a673b0d67b96c116fbe98b210121f6de/tonic-config-0.1.0.tar.gz", "yanked": true}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fac82f6973fecf726b8eb3d441a5a4e4", "sha256": "d12f490b1e803498d817d36ed3fabea7efe0dc492944c424f48287776b5dd6ce"}, "downloads": -1, "filename": "tonic-config-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fac82f6973fecf726b8eb3d441a5a4e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3968, "upload_time": "2020-05-04T10:54:12", "upload_time_iso_8601": "2020-05-04T10:54:12.946197Z", "url": "https://files.pythonhosted.org/packages/ed/8b/3f52086e05245f03c16ce5a43afe8a6156441ae90ef29f855b7691006084/tonic-config-0.1.1.tar.gz", "yanked": true}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a0a52c9c7b751f422c899e00aa04f8f6", "sha256": "e73a4b706c16a0b8e71b56e290a4ffe65458f789f7ec0d9ac923a3ddb1092cd0"}, "downloads": -1, "filename": "tonic_config-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a0a52c9c7b751f422c899e00aa04f8f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3811, "upload_time": "2020-05-04T12:31:06", "upload_time_iso_8601": "2020-05-04T12:31:06.121593Z", "url": "https://files.pythonhosted.org/packages/a2/20/e2f010c334ff20fa612945c4df5cdb3e52df5cb6eb14b1742c4b20e4988b/tonic_config-0.1.4-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "40e3e6bca925db3ca5e55c58f83fe55a", "sha256": "775411086e38dbf2d65c40f6145d399cf1ae797eb9b5f0a60c5ba5a070d66196"}, "downloads": -1, "filename": "tonic-config-0.1.4.tar.gz", "has_sig": false, "md5_digest": "40e3e6bca925db3ca5e55c58f83fe55a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3855, "upload_time": "2020-05-04T12:31:06", "upload_time_iso_8601": "2020-05-04T12:31:06.984314Z", "url": "https://files.pythonhosted.org/packages/71/cd/9293fe2cfc81f455ec25fe34cb4aa30c8da1c557a6cd0ed7db933567813b/tonic-config-0.1.4.tar.gz", "yanked": true}], "0.1.5": [{"comment_text": "", "digests": {"md5": "338b6639ee2a624bd80f6997b873cdd1", "sha256": "feabc143f88842e480d8bff370ef5b29117ea19015b94315ea9e81e03026b167"}, "downloads": -1, "filename": "tonic_config-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "338b6639ee2a624bd80f6997b873cdd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3812, "upload_time": "2020-05-04T12:59:44", "upload_time_iso_8601": "2020-05-04T12:59:44.244690Z", "url": "https://files.pythonhosted.org/packages/31/68/ece5bf2f1ec0145bc0c5fb2d6234093a2d35b84942b3b26d93874e4b9dd8/tonic_config-0.1.5-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "d0608d6df52a8ceb811b25ea6e7767e3", "sha256": "e52f3e1bc9c8c02200b3ca21af8ee797124616ca5ab567f559a170f905c2a8ed"}, "downloads": -1, "filename": "tonic-config-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d0608d6df52a8ceb811b25ea6e7767e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3784, "upload_time": "2020-05-04T12:59:44", "upload_time_iso_8601": "2020-05-04T12:59:44.988455Z", "url": "https://files.pythonhosted.org/packages/85/0e/6eda0ac3c652c304d3a5833badd3ce92784cfaa7b92bd027148d88639f71/tonic-config-0.1.5.tar.gz", "yanked": true}], "0.1.6": [{"comment_text": "", "digests": {"md5": "2deedec63199439851204c3af5f3aed9", "sha256": "bacbee5f5d0bc2e75ab034d8ec67931ff6643ab83188e6db52f96a6124a6f9d0"}, "downloads": -1, "filename": "tonic_config-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "2deedec63199439851204c3af5f3aed9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3967, "upload_time": "2020-05-04T13:22:15", "upload_time_iso_8601": "2020-05-04T13:22:15.092144Z", "url": "https://files.pythonhosted.org/packages/e2/08/cf01e2d71803b39212f31e22ea36cd1f23c2d0be351fc37d030704fda104/tonic_config-0.1.6-py3-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "8a045d369de3ed5260769b9865deb477", "sha256": "77f7d06b5b5b28236d37d85eadf452456378aab020816b5f0802869d3397ff56"}, "downloads": -1, "filename": "tonic-config-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8a045d369de3ed5260769b9865deb477", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4071, "upload_time": "2020-05-04T13:22:15", "upload_time_iso_8601": "2020-05-04T13:22:15.903087Z", "url": "https://files.pythonhosted.org/packages/de/30/57d2579567d9429ebd2bf0ab7b159a6748245002446bb38c6660d63c6093/tonic-config-0.1.6.tar.gz", "yanked": true}], "0.1.7": [{"comment_text": "", "digests": {"md5": "cf58ea45582bbd87553f13207d257271", "sha256": "1aec0b72b02676718130121b66117ac6b5b7c2f2d5800726b86f62fe6fe4ccb8"}, "downloads": -1, "filename": "tonic_config-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "cf58ea45582bbd87553f13207d257271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9869, "upload_time": "2020-05-05T12:35:59", "upload_time_iso_8601": "2020-05-05T12:35:59.837821Z", "url": "https://files.pythonhosted.org/packages/ea/2e/e9020579c8bc3a785f927e54abe1796b3d865c819f018cb64f6db586a08a/tonic_config-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b012dd38c8cc9cb6c8c9b04af9df713a", "sha256": "f8fde1f4d0e1c07d1b9f56c6d80f88ca6bea1c12d912f270c201d683cc62a503"}, "downloads": -1, "filename": "tonic-config-0.1.7.tar.gz", "has_sig": false, "md5_digest": "b012dd38c8cc9cb6c8c9b04af9df713a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11549, "upload_time": "2020-05-05T12:36:00", "upload_time_iso_8601": "2020-05-05T12:36:00.848124Z", "url": "https://files.pythonhosted.org/packages/1d/92/2a47a1aade9b61b56b3e227b0d31810e6be133c216ca261b69665744d288/tonic-config-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf58ea45582bbd87553f13207d257271", "sha256": "1aec0b72b02676718130121b66117ac6b5b7c2f2d5800726b86f62fe6fe4ccb8"}, "downloads": -1, "filename": "tonic_config-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "cf58ea45582bbd87553f13207d257271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9869, "upload_time": "2020-05-05T12:35:59", "upload_time_iso_8601": "2020-05-05T12:35:59.837821Z", "url": "https://files.pythonhosted.org/packages/ea/2e/e9020579c8bc3a785f927e54abe1796b3d865c819f018cb64f6db586a08a/tonic_config-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b012dd38c8cc9cb6c8c9b04af9df713a", "sha256": "f8fde1f4d0e1c07d1b9f56c6d80f88ca6bea1c12d912f270c201d683cc62a503"}, "downloads": -1, "filename": "tonic-config-0.1.7.tar.gz", "has_sig": false, "md5_digest": "b012dd38c8cc9cb6c8c9b04af9df713a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11549, "upload_time": "2020-05-05T12:36:00", "upload_time_iso_8601": "2020-05-05T12:36:00.848124Z", "url": "https://files.pythonhosted.org/packages/1d/92/2a47a1aade9b61b56b3e227b0d31810e6be133c216ca261b69665744d288/tonic-config-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:09 2020"}