{"info": {"author": "Micha den Heijer", "author_email": "micha@michadenheijer.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only"], "description": "# pynytimes\n\n[<img src=\"https://raw.githubusercontent.com/michadenheijer/pynytimes/master/.github/poweredby_nytimes.png\" height=\"20px\">](https://developer.nytimes.com/) [![Build Status](https://travis-ci.com/michadenheijer/pynytimes.svg?token=8nhCHVYqgufX65p8PRDx&branch=master)](https://travis-ci.com/michadenheijer/pynytimes) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n\nUse all (actually most) New York Times APIs, get all the data you need from the Times!\n\nThis project is not made by anyone from the New York Times, nor is it affiliated with the New York Times.\n\n## Installation\n\nThere are multiple options to install pynytimes, but the easiest is by just installing it using pip (or pip3).\n\n```bash\npip install pynytimes\n```\n\n### Advanced (not better, just different)\n\nYou can also install pynytimes manually from GitHub itself. This can be done by cloning this repository first, and then installing it using Python.\n\n```bash\ngit clone https://github.com/michadenheijer/pynytimes.git\ncd pynytimes\npython setup.py install\n```\n\n## Usage\n\nYou can easily import this library using:\n\n```python\nfrom pynytimes import NYTAPI\n```\n\nThen you can simply add your API key (get your API key from [The New York Times Dev Portal](https://developer.nytimes.com/)):\n\n```python\nnyt = NYTAPI(\"Your API key\")\n```\n\nWhen you have imported this library you can use the following features from the New York Times API.\n- [Top stories](#top-stories)\n- [Most viewed articles](#most-viewed-articles)\n- [Most shared articles](#most-shared-articles)\n- [Article search](#article-search-beta)\n- [Book reviews](#book-reviews)\n- [Movie reviews](#movie-reviews)\n- [Best sellers lists](#best-sellers-lists)\n- [Article metadata (Times Wire)](#article-metadata)\n- [Tag query (TimesTags)](#tag-query)\n- [Archive metadata](#archive-metadata)\n\n### Top stories\n\nYou can request the top stories from the New York Times. You can also get the top stories from a specific section.\n\n```python\ntop_stories = nyt.top_stories()\n\n# Get all the top stories from a specific category\ntop_science_stories = nyt.top_stories(section = \"science\")\n```\n\nThe possible sections are: arts, automobiles, books, business, fashion, food, health, home, insider, magazine, movies, national, nyregion, obituaries, opinion, politics, realestate, science, sports, sundayreview, technology, theater, tmagazine, travel, upshot, and world.\n\n### Most viewed articles\n\nThe New York Times API can provide the most popular articles from the last day, week or month.\n\n```python\nmost_viewed = nyt.most_viewed()\n\n# Get most viewed articles of last 7 or 30 days\nmost_viewed = nyt.most_viewed(days = 7)\nmost_viewed = nyt.most_viewed(days = 30)\n```\n\n### Most shared articles\n\nNot only can you request the most viewed articles from the New York Times API, you can also request the most shared articles. You can even request the articles that are most shared by email, Facebook and Twitter. You can get the most shared articles per day, week or month.\n\n```python\nmost_shared = nyt.most_shared()\n\n# Get most emaild articles of the last day\nmost_shared = myt.most_shared(\n    days = 1,\n    method = \"email\"\n)\n\n# Get most shared articles to Facebook of the last 7 days\nmost_shared = nyt.most_shared(\n    days = 7,\n    method = \"facebook\"    \n)\n\n# Get most shared articles to Facebook of the last 30 days\nmost_shared = nyt.most_shared(\n    days = 30,\n    method = \"facebook\"\n)\n```\n\n### Article search (beta)\n\nYou can also search all New York Times articles. You can also define which sources you want to include. (Not all functions are implemented)\n\n```python\nimport datetime\n\narticles = nyt.article_search(\n    query = \"Obama\",\n    results = 30,\n    dates = {\n        \"begin\": datetime.datetime(2019, 1, 31),\n        \"end\": datetime.datetime(2019, 2, 28)\n    }\n    options = {\n        sources = [\n            \"New York Times\",\n            \"AP\",\n            \"Reuters\",\n            \"International Herald Tribune\"\n        ]\n    }\n)\n```\n\n### Book reviews\n\nYou can easily find book reviews for every book you've read. You can find those reviews by searching for the author, ISBN or title of the book.\n\n```python\n# Get reviews by author (first and last name)\nreviews = nyt.book_reviews(author = \"George Orwell\")\n\n# Get reviews by ISBN\nreviews = nyt.book_reviews(isbn = 9780062963673)\n\n# Get book reviews by title\nreviews = nyt.book_reviews(title = \"Becoming\")\n```\n\n### Movie reviews\n\nYou can not only get the book reviews, but the movie reviews too.\n\n```python\nimport datetime\n\nreviews = nyt.movie_reviews(\n    keyword = \"Green Book\",\n    options = {\n        \"order\": \"by-opening-date\",\n        \"reviewer\": \"A.O. Scott\",\n        \"critics_pick\": False\n    },\n    dates = {\n        \"opening_date_start\": datetime.datetime(2017, 1, 1),\n        \"opening_date_end\": datetime.datetime(2019, 1, 1),\n        \"publication_date_start\": datetime.datetime(2017, 1, 1),\n        \"publication_date_end\": datetime.datetime(2019, 1, 1)\n})\n```\n\n### Best sellers lists\n\nThe New York Times has multiple best sellers lists. You can easily request those lists using this library.\n\n```python\n# Get all the available New York Times best sellers lists\nlists = nyt.best_sellers_lists()\n\n# Get fiction best sellers list\nbooks = nyt.best_sellers_list()\n\n# Get non-fiction best sellers list\nbooks = nyt.best_sellers_list(\n    name = \"combined-print-and-e-book-nonfiction\"\n)\n\n# Get best sellers lists from other date\nimport datetime\n\nbooks = nyt.best_sellers_list(\n    name = \"combined-print-and-e-book-nonfiction\",\n    date = datetime.datetime(2019, 1, 1)\n)\n```\n\n### Article metadata\n\nWith an URL from a New York Times article you can easily get all the metadata you need from it.\n\n```python\nmetadata = nyt.article_metadata(\n    url = \"https://www.nytimes.com/2019/10/20/world/middleeast/erdogan-turkey-nuclear-weapons-trump.html\"\n)\n```\n\n### Tag query\n\nThe New York Times has their own tags library. You can query this library with this API.\n\n```python\ntags = nyt.tag_query(\n    \"pentagon\",\n    max_results = 20\n)\n```\n\n### Archive metadata\n\nIf you want to load all the metadata from a specific month, then this API makes that possible. Be aware you'll download a big JSON file (about 20 Mb), so it can take a while.\n\n```python\nimport datetime\n\ndata = nyt.archive_metadata(\n    date = datetime.datetime(2019, 1, 1)\n)\n```\n\n## License\n\n[MIT](LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michadenheijer/pynytimes", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pynytimes", "package_url": "https://pypi.org/project/pynytimes/", "platform": "", "project_url": "https://pypi.org/project/pynytimes/", "project_urls": {"Homepage": "https://github.com/michadenheijer/pynytimes"}, "release_url": "https://pypi.org/project/pynytimes/0.2.1/", "requires_dist": ["requests (==2.22.0)"], "requires_python": "~=3.5", "summary": "A Python wrapper for (most) New York Times APIs", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pynytimes</h1>\n<p><a href=\"https://developer.nytimes.com/\" rel=\"nofollow\"><img height=\"20px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67612e7e2effc738fbb0cf6d7372319a0b365a43/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d6963686164656e6865696a65722f70796e7974696d65732f6d61737465722f2e6769746875622f706f776572656462795f6e7974696d65732e706e67\"></a> <a href=\"https://travis-ci.com/michadenheijer/pynytimes\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef4926b9141a4a28f3eab425d21b9cbebd4686ec/68747470733a2f2f7472617669732d63692e636f6d2f6d6963686164656e6865696a65722f70796e7974696d65732e7376673f746f6b656e3d386e684348565971677566583635703850524478266272616e63683d6d6173746572\"></a> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Use all (actually most) New York Times APIs, get all the data you need from the Times!</p>\n<p>This project is not made by anyone from the New York Times, nor is it affiliated with the New York Times.</p>\n<h2>Installation</h2>\n<p>There are multiple options to install pynytimes, but the easiest is by just installing it using pip (or pip3).</p>\n<pre>pip install pynytimes\n</pre>\n<h3>Advanced (not better, just different)</h3>\n<p>You can also install pynytimes manually from GitHub itself. This can be done by cloning this repository first, and then installing it using Python.</p>\n<pre>git clone https://github.com/michadenheijer/pynytimes.git\n<span class=\"nb\">cd</span> pynytimes\npython setup.py install\n</pre>\n<h2>Usage</h2>\n<p>You can easily import this library using:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynytimes</span> <span class=\"kn\">import</span> <span class=\"n\">NYTAPI</span>\n</pre>\n<p>Then you can simply add your API key (get your API key from <a href=\"https://developer.nytimes.com/\" rel=\"nofollow\">The New York Times Dev Portal</a>):</p>\n<pre><span class=\"n\">nyt</span> <span class=\"o\">=</span> <span class=\"n\">NYTAPI</span><span class=\"p\">(</span><span class=\"s2\">\"Your API key\"</span><span class=\"p\">)</span>\n</pre>\n<p>When you have imported this library you can use the following features from the New York Times API.</p>\n<ul>\n<li><a href=\"#top-stories\" rel=\"nofollow\">Top stories</a></li>\n<li><a href=\"#most-viewed-articles\" rel=\"nofollow\">Most viewed articles</a></li>\n<li><a href=\"#most-shared-articles\" rel=\"nofollow\">Most shared articles</a></li>\n<li><a href=\"#article-search-beta\" rel=\"nofollow\">Article search</a></li>\n<li><a href=\"#book-reviews\" rel=\"nofollow\">Book reviews</a></li>\n<li><a href=\"#movie-reviews\" rel=\"nofollow\">Movie reviews</a></li>\n<li><a href=\"#best-sellers-lists\" rel=\"nofollow\">Best sellers lists</a></li>\n<li><a href=\"#article-metadata\" rel=\"nofollow\">Article metadata (Times Wire)</a></li>\n<li><a href=\"#tag-query\" rel=\"nofollow\">Tag query (TimesTags)</a></li>\n<li><a href=\"#archive-metadata\" rel=\"nofollow\">Archive metadata</a></li>\n</ul>\n<h3>Top stories</h3>\n<p>You can request the top stories from the New York Times. You can also get the top stories from a specific section.</p>\n<pre><span class=\"n\">top_stories</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">top_stories</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get all the top stories from a specific category</span>\n<span class=\"n\">top_science_stories</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">top_stories</span><span class=\"p\">(</span><span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"s2\">\"science\"</span><span class=\"p\">)</span>\n</pre>\n<p>The possible sections are: arts, automobiles, books, business, fashion, food, health, home, insider, magazine, movies, national, nyregion, obituaries, opinion, politics, realestate, science, sports, sundayreview, technology, theater, tmagazine, travel, upshot, and world.</p>\n<h3>Most viewed articles</h3>\n<p>The New York Times API can provide the most popular articles from the last day, week or month.</p>\n<pre><span class=\"n\">most_viewed</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_viewed</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get most viewed articles of last 7 or 30 days</span>\n<span class=\"n\">most_viewed</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_viewed</span><span class=\"p\">(</span><span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">most_viewed</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_viewed</span><span class=\"p\">(</span><span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<h3>Most shared articles</h3>\n<p>Not only can you request the most viewed articles from the New York Times API, you can also request the most shared articles. You can even request the articles that are most shared by email, Facebook and Twitter. You can get the most shared articles per day, week or month.</p>\n<pre><span class=\"n\">most_shared</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_shared</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get most emaild articles of the last day</span>\n<span class=\"n\">most_shared</span> <span class=\"o\">=</span> <span class=\"n\">myt</span><span class=\"o\">.</span><span class=\"n\">most_shared</span><span class=\"p\">(</span>\n    <span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s2\">\"email\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Get most shared articles to Facebook of the last 7 days</span>\n<span class=\"n\">most_shared</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_shared</span><span class=\"p\">(</span>\n    <span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s2\">\"facebook\"</span>    \n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Get most shared articles to Facebook of the last 30 days</span>\n<span class=\"n\">most_shared</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">most_shared</span><span class=\"p\">(</span>\n    <span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s2\">\"facebook\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Article search (beta)</h3>\n<p>You can also search all New York Times articles. You can also define which sources you want to include. (Not all functions are implemented)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">article_search</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"Obama\"</span><span class=\"p\">,</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"begin\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"end\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"New York Times\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"AP\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"Reuters\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"International Herald Tribune\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Book reviews</h3>\n<p>You can easily find book reviews for every book you've read. You can find those reviews by searching for the author, ISBN or title of the book.</p>\n<pre><span class=\"c1\"># Get reviews by author (first and last name)</span>\n<span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">book_reviews</span><span class=\"p\">(</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s2\">\"George Orwell\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get reviews by ISBN</span>\n<span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">book_reviews</span><span class=\"p\">(</span><span class=\"n\">isbn</span> <span class=\"o\">=</span> <span class=\"mi\">9780062963673</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get book reviews by title</span>\n<span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">book_reviews</span><span class=\"p\">(</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">\"Becoming\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Movie reviews</h3>\n<p>You can not only get the book reviews, but the movie reviews too.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">reviews</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">movie_reviews</span><span class=\"p\">(</span>\n    <span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s2\">\"Green Book\"</span><span class=\"p\">,</span>\n    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"order\"</span><span class=\"p\">:</span> <span class=\"s2\">\"by-opening-date\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"reviewer\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A.O. Scott\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"critics_pick\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"opening_date_start\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"opening_date_end\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"publication_date_start\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"publication_date_end\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Best sellers lists</h3>\n<p>The New York Times has multiple best sellers lists. You can easily request those lists using this library.</p>\n<pre><span class=\"c1\"># Get all the available New York Times best sellers lists</span>\n<span class=\"n\">lists</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">best_sellers_lists</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get fiction best sellers list</span>\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">best_sellers_list</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get non-fiction best sellers list</span>\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">best_sellers_list</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"combined-print-and-e-book-nonfiction\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Get best sellers lists from other date</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">best_sellers_list</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"combined-print-and-e-book-nonfiction\"</span><span class=\"p\">,</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Article metadata</h3>\n<p>With an URL from a New York Times article you can easily get all the metadata you need from it.</p>\n<pre><span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">article_metadata</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://www.nytimes.com/2019/10/20/world/middleeast/erdogan-turkey-nuclear-weapons-trump.html\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Tag query</h3>\n<p>The New York Times has their own tags library. You can query this library with this API.</p>\n<pre><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">tag_query</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"pentagon\"</span><span class=\"p\">,</span>\n    <span class=\"n\">max_results</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Archive metadata</h3>\n<p>If you want to load all the metadata from a specific month, then this API makes that possible. Be aware you'll download a big JSON file (about 20 Mb), so it can take a while.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">nyt</span><span class=\"o\">.</span><span class=\"n\">archive_metadata</span><span class=\"p\">(</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6889893, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e13d4deb8393b4ba240ea45153a2d2b6", "sha256": "7f55688c14b8e6ad3ae94e40e6f4f907b0fd0cd52ddf13a718ed562d432ca3a1"}, "downloads": -1, "filename": "pynytimes-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e13d4deb8393b4ba240ea45153a2d2b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7413, "upload_time": "2019-10-21T22:05:26", "upload_time_iso_8601": "2019-10-21T22:05:26.993830Z", "url": "https://files.pythonhosted.org/packages/f5/42/6043dd0b75ba9049b65559d904a27f466333d33a75a0b01e46b295e4f746/pynytimes-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34935219eaa19f74ec73f15b1c51c4d3", "sha256": "aafc2d44a28b824e97c5806bc91efeecc5e31aa50de2e0496476ebaf08404a5f"}, "downloads": -1, "filename": "pynytimes-0.1.1.tar.gz", "has_sig": false, "md5_digest": "34935219eaa19f74ec73f15b1c51c4d3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 8625, "upload_time": "2019-10-21T22:05:28", "upload_time_iso_8601": "2019-10-21T22:05:28.652670Z", "url": "https://files.pythonhosted.org/packages/0e/46/bc75b0d8effd1e0889d9fe04e3f2fc7f650a8abdd7bdb9adc56675f907f9/pynytimes-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "50191dfa062cd96b9cc02a1cdcd542f7", "sha256": "e8d264c7aad1014f9279d35ae16671c215d4db62daac2d323fbbc7498788f108"}, "downloads": -1, "filename": "pynytimes-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "50191dfa062cd96b9cc02a1cdcd542f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7706, "upload_time": "2019-10-23T16:53:27", "upload_time_iso_8601": "2019-10-23T16:53:27.945134Z", "url": "https://files.pythonhosted.org/packages/f2/42/2650fd978f97bac2919bc7fcfbb56d678379b00730b838f0fced24451e93/pynytimes-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f36cffb9b416ebf0175c33d62a473974", "sha256": "e158b3c88efcce0218f8aea52988a3b7a758eb9d01dcf8c99879032373476a6e"}, "downloads": -1, "filename": "pynytimes-0.2.tar.gz", "has_sig": false, "md5_digest": "f36cffb9b416ebf0175c33d62a473974", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 9011, "upload_time": "2019-10-23T16:53:30", "upload_time_iso_8601": "2019-10-23T16:53:30.647701Z", "url": "https://files.pythonhosted.org/packages/d2/07/fd0ec85ce62ca1b6c8fcf68855f259a19b03f610de7e8788d27500164f90/pynytimes-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "aa9d02454fa072a63e472505f4a7f6a7", "sha256": "9828b7c3856be248de629edd9d448407a066ce09c3c4777433ca53623418469d"}, "downloads": -1, "filename": "pynytimes-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa9d02454fa072a63e472505f4a7f6a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7739, "upload_time": "2020-03-26T17:34:24", "upload_time_iso_8601": "2020-03-26T17:34:24.942138Z", "url": "https://files.pythonhosted.org/packages/00/c8/fb7424c167735633dac2ad408ce723f4e1e33505621e4dc56b3a578d732d/pynytimes-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7216f840fc63f0c8b1c3a2771068b4cb", "sha256": "e39ca8227702e7616089e7a08848e997d6c28f2ac9861396ce36e9109410526b"}, "downloads": -1, "filename": "pynytimes-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7216f840fc63f0c8b1c3a2771068b4cb", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 9771, "upload_time": "2020-03-26T17:34:26", "upload_time_iso_8601": "2020-03-26T17:34:26.745416Z", "url": "https://files.pythonhosted.org/packages/b6/f3/c24879d551e03d11fbab550a201b415c2a4b7362bc1b882c2c64aeb13c3c/pynytimes-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa9d02454fa072a63e472505f4a7f6a7", "sha256": "9828b7c3856be248de629edd9d448407a066ce09c3c4777433ca53623418469d"}, "downloads": -1, "filename": "pynytimes-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa9d02454fa072a63e472505f4a7f6a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 7739, "upload_time": "2020-03-26T17:34:24", "upload_time_iso_8601": "2020-03-26T17:34:24.942138Z", "url": "https://files.pythonhosted.org/packages/00/c8/fb7424c167735633dac2ad408ce723f4e1e33505621e4dc56b3a578d732d/pynytimes-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7216f840fc63f0c8b1c3a2771068b4cb", "sha256": "e39ca8227702e7616089e7a08848e997d6c28f2ac9861396ce36e9109410526b"}, "downloads": -1, "filename": "pynytimes-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7216f840fc63f0c8b1c3a2771068b4cb", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 9771, "upload_time": "2020-03-26T17:34:26", "upload_time_iso_8601": "2020-03-26T17:34:26.745416Z", "url": "https://files.pythonhosted.org/packages/b6/f3/c24879d551e03d11fbab550a201b415c2a4b7362bc1b882c2c64aeb13c3c/pynytimes-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:55 2020"}