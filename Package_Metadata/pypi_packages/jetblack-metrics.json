{"info": {"author": "Rob Blackbourn", "author_email": "rob.blackbourn@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# jetblack-metrics\n\nGeneric metric classes and context based monitoring.\n\n## Installation\n\nInstall from the pie store.\n\n```bash\npip install jetblack-metrics\n```\n\n## Usage\n\nFirst you need to implement a metric which interacts with an actual\ninstrumentation implementation. The following provides an HTTP request\nmetric using Prometheus to gather the metrics and the `TimedMetric` to\nprovide a latency metric.\n\n```python\nfrom jetblack_metrics import monitor, TimedMetric\nfrom prometheus_client import Counter, Gauge, Histogram\n\nclass HttpRequestMetric(TimedMetric):\n    \"\"\"\n    A metric which holds HTTP information.\n    \"\"\"\n\n    def __init__(self, name: str, method: str, path: str) -> None:\n        super().__init__()\n        self.name = name\n        self.scope = method\n        self.info = path\n        self.status = 500\n\n    REQUEST_COUNT = Counter(\n        \"http_request_count\",\n        \"Number of requests received\",\n        [\"name\", \"method\", \"path\", \"status\"]\n    )\n    REQUEST_LATENCY = Histogram(\n        \"http_request_latency\",\n        \"Elapsed time per request\",\n        [\"name\", \"method\", \"path\"]\n    )\n    REQUEST_IN_PROGRESS = Gauge(\n        \"http_requests_in_progress\",\n        \"Requests in progress\",\n        [\"name\", \"method\", \"path\"]\n    )\n\n    def on_enter(self):\n        super().on_enter()\n        self.REQUEST_IN_PROGRESS.labels(\n            self.name,\n            self.scope['method'],\n            self.scope['path']\n        ).inc()\n\n    def on_exit(self) -> None:\n        super().on_exit()\n        self.REQUEST_COUNT.labels(\n            self.name,\n            self.scope['method'],\n            self.scope['path'],\n            self.status\n        ).inc()\n        self.REQUEST_LATENCY.labels(\n            self.name,\n            self.scope['method'],\n            self.scope['path']\n        ).observe(self.elapsed)\n        self.REQUEST_IN_PROGRESS.labels(\n            self.name,\n            self.scope['method'],\n            self.scope['path']\n        ).dec()\n```\n\nOnce we have the metric we can use the `monitor` function to manage the process\nof gathering the statistics.\n\n```python\ndef some_http_middleware(request, next_handler):\n    \"\"\"Some kind of HTTP middleware function\"\"\"\n    with monitor(HttpRequestMetric('MyApp', request.method, request.path)) as metric:\n        # Call the request handler\n        response = next_handler(request)\n        metric.status = response.status\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rob-blackbourn/jetblack-metrics", "keywords": "", "license": "Apache-2.0", "maintainer": "Rob Blackbourn", "maintainer_email": "rob.blackbourn@gmail.com", "name": "jetblack-metrics", "package_url": "https://pypi.org/project/jetblack-metrics/", "platform": "", "project_url": "https://pypi.org/project/jetblack-metrics/", "project_urls": {"Homepage": "https://github.com/rob-blackbourn/jetblack-metrics", "Repository": "https://github.com/rob-blackbourn/jetblack-metrics"}, "release_url": "https://pypi.org/project/jetblack-metrics/1.0.0/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "Generic metrics and context bases monitoring", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jetblack-metrics</h1>\n<p>Generic metric classes and context based monitoring.</p>\n<h2>Installation</h2>\n<p>Install from the pie store.</p>\n<pre>pip install jetblack-metrics\n</pre>\n<h2>Usage</h2>\n<p>First you need to implement a metric which interacts with an actual\ninstrumentation implementation. The following provides an HTTP request\nmetric using Prometheus to gather the metrics and the <code>TimedMetric</code> to\nprovide a latency metric.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jetblack_metrics</span> <span class=\"kn\">import</span> <span class=\"n\">monitor</span><span class=\"p\">,</span> <span class=\"n\">TimedMetric</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prometheus_client</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span><span class=\"p\">,</span> <span class=\"n\">Gauge</span><span class=\"p\">,</span> <span class=\"n\">Histogram</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HttpRequestMetric</span><span class=\"p\">(</span><span class=\"n\">TimedMetric</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A metric which holds HTTP information.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span> <span class=\"o\">=</span> <span class=\"n\">method</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n\n    <span class=\"n\">REQUEST_COUNT</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"http_request_count\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Number of requests received\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">,</span> <span class=\"s2\">\"status\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">REQUEST_LATENCY</span> <span class=\"o\">=</span> <span class=\"n\">Histogram</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"http_request_latency\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Elapsed time per request\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">REQUEST_IN_PROGRESS</span> <span class=\"o\">=</span> <span class=\"n\">Gauge</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"http_requests_in_progress\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Requests in progress\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"method\"</span><span class=\"p\">,</span> <span class=\"s2\">\"path\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_enter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">on_enter</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_IN_PROGRESS</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'method'</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_exit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">on_exit</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_COUNT</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'method'</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_LATENCY</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'method'</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">observe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">elapsed</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">REQUEST_IN_PROGRESS</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'method'</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dec</span><span class=\"p\">()</span>\n</pre>\n<p>Once we have the metric we can use the <code>monitor</code> function to manage the process\nof gathering the statistics.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">some_http_middleware</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">next_handler</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Some kind of HTTP middleware function\"\"\"</span>\n    <span class=\"k\">with</span> <span class=\"n\">monitor</span><span class=\"p\">(</span><span class=\"n\">HttpRequestMetric</span><span class=\"p\">(</span><span class=\"s1\">'MyApp'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">metric</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Call the request handler</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">next_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span>\n</pre>\n\n          </div>"}, "last_serial": 5990286, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cb24ee8c95dc7efe0c44d5b3ca3e94f2", "sha256": "70a7b5e3bb57e1d7e5fb0a97d411cdfc641cc26541dfa4a44e893a227350b93f"}, "downloads": -1, "filename": "jetblack_metrics-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb24ee8c95dc7efe0c44d5b3ca3e94f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7853, "upload_time": "2019-10-17T15:02:01", "upload_time_iso_8601": "2019-10-17T15:02:01.942994Z", "url": "https://files.pythonhosted.org/packages/38/ad/db7dc5fdfc678c20dde4fe2cefb9dd0b4c881cc2a500b35b9989b1aece40/jetblack_metrics-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a22f1ef7e118f97a8852fe9e84530e04", "sha256": "f7d9dacef6420ec34e3602c277745d5b946d4d76660861eafc7048d292ceffd1"}, "downloads": -1, "filename": "jetblack-metrics-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a22f1ef7e118f97a8852fe9e84530e04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6941, "upload_time": "2019-10-17T15:01:56", "upload_time_iso_8601": "2019-10-17T15:01:56.626611Z", "url": "https://files.pythonhosted.org/packages/63/05/7ede9e10f8953f9f152b3639e918161369b97ba04e62b99906379cd8919e/jetblack-metrics-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb24ee8c95dc7efe0c44d5b3ca3e94f2", "sha256": "70a7b5e3bb57e1d7e5fb0a97d411cdfc641cc26541dfa4a44e893a227350b93f"}, "downloads": -1, "filename": "jetblack_metrics-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb24ee8c95dc7efe0c44d5b3ca3e94f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7853, "upload_time": "2019-10-17T15:02:01", "upload_time_iso_8601": "2019-10-17T15:02:01.942994Z", "url": "https://files.pythonhosted.org/packages/38/ad/db7dc5fdfc678c20dde4fe2cefb9dd0b4c881cc2a500b35b9989b1aece40/jetblack_metrics-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a22f1ef7e118f97a8852fe9e84530e04", "sha256": "f7d9dacef6420ec34e3602c277745d5b946d4d76660861eafc7048d292ceffd1"}, "downloads": -1, "filename": "jetblack-metrics-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a22f1ef7e118f97a8852fe9e84530e04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 6941, "upload_time": "2019-10-17T15:01:56", "upload_time_iso_8601": "2019-10-17T15:01:56.626611Z", "url": "https://files.pythonhosted.org/packages/63/05/7ede9e10f8953f9f152b3639e918161369b97ba04e62b99906379cd8919e/jetblack-metrics-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:49 2020"}