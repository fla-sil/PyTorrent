{"info": {"author": "Amanda Bienz", "author_email": "bienz2@illinois.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## PyFancyPlots\nDoes your advisor enjoy fancy plots?  Is his name Luke?  Then this plotting script is for you!\n\n## Overview\nPython plotting tool with default options to make plots easy to read.  This\nscript uses matplotlib and Seaborn.  \n\n## Testimonials\n\"That plot looks great.\" -- Luke\n\n## Plotting Examples\nImport `plot.py' for default plotting parameters to be set.  A few important\nmethods:\n    - The method add_anchored_legend will add a multicolumn legend above your\n      plot.  Examples of this are in the plots below.\n    - The method save_plot will save your figure with settings preferred by Luke\n    - The methods stacked_barblot and partially_stacked_barplot create Seaborn\n      barplots by stacking your data (or some of it for you).  \n\n## Example Line Plot\nDefault and Luke-recommended settings are displayed in a simple line and scatter\nplot below.  Make sure to call add_luke_options() and save_plot(...) to add\nthese settings to your figures. \n![](figures/line_plot.png)\n\n## Standard and Stacked BarPlots\nThe standard and stacked bar plots (available in methods barplot(...) and\nstacked_barplot(...)) take a typical list of x_data and either a\nsingle list or list of lists for y_data.  If y_data is a list of lists, a list\nof corresponding labels is also required.  Each list of y_data will be plotted\nat all x_data positions, as shown below.\n![](figures/barplot.png)\n![](figures/stacked_barplot.png)\n\n## Partially Stacked BarPlot\nThe previous standard and stacked barplots can also be combined with method\npartially_stacked_barplot(...).  This method takes x_data as usual, and then a\nlist of y_data.  The list for y_data contains both y_data lists and lists of\nlists.  E.g. y_data = [y0, y1, [y2, y3], y4, [y5, y6]] will plot y0, y1, and y4\nas normal barplots, while y3 will be stacked on top of y2, and y6 will also be\nstacked on y5.  Correpsonding labels should be in the same format as y_data.\n![](figures/partially_stacked_barplot.png)\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bienz2/PyFancyPlots", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyfancyplots", "package_url": "https://pypi.org/project/pyfancyplots/", "platform": "", "project_url": "https://pypi.org/project/pyfancyplots/", "project_urls": {"Homepage": "https://github.com/bienz2/PyFancyPlots"}, "release_url": "https://pypi.org/project/pyfancyplots/0.1/", "requires_dist": null, "requires_python": "", "summary": "A python plotting script containing Luke Olson's styling preferences", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ## PyFancyPlots<br>Does your advisor enjoy fancy plots?  Is his name Luke?  Then this plotting script is for you!<br><br>## Overview<br>Python plotting tool with default options to make plots easy to read.  This<br>script uses matplotlib and Seaborn.  <br><br>## Testimonials<br>\"That plot looks great.\" -- Luke<br><br>## Plotting Examples<br>Import `plot.py' for default plotting parameters to be set.  A few important<br>methods:<br>    - The method add_anchored_legend will add a multicolumn legend above your<br>      plot.  Examples of this are in the plots below.<br>    - The method save_plot will save your figure with settings preferred by Luke<br>    - The methods stacked_barblot and partially_stacked_barplot create Seaborn<br>      barplots by stacking your data (or some of it for you).  <br><br>## Example Line Plot<br>Default and Luke-recommended settings are displayed in a simple line and scatter<br>plot below.  Make sure to call add_luke_options() and save_plot(...) to add<br>these settings to your figures. <br>![](figures/line_plot.png)<br><br>## Standard and Stacked BarPlots<br>The standard and stacked bar plots (available in methods barplot(...) and<br>stacked_barplot(...)) take a typical list of x_data and either a<br>single list or list of lists for y_data.  If y_data is a list of lists, a list<br>of corresponding labels is also required.  Each list of y_data will be plotted<br>at all x_data positions, as shown below.<br>![](figures/barplot.png)<br>![](figures/stacked_barplot.png)<br><br>## Partially Stacked BarPlot<br>The previous standard and stacked barplots can also be combined with method<br>partially_stacked_barplot(...).  This method takes x_data as usual, and then a<br>list of y_data.  The list for y_data contains both y_data lists and lists of<br>lists.  E.g. y_data = [y0, y1, [y2, y3], y4, [y5, y6]] will plot y0, y1, and y4<br>as normal barplots, while y3 will be stacked on top of y2, and y6 will also be<br>stacked on y5.  Correpsonding labels should be in the same format as y_data.<br>![](figures/partially_stacked_barplot.png)<br><br><br><br><br>\n          </div>"}, "last_serial": 5248401, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bec12f1f35fb560fc090058e2f5cde77", "sha256": "ad6b74daa02fcf28aac6dfc3947d568e1bf9b5a2c9aa5783ce06b783b1c626e1"}, "downloads": -1, "filename": "pyfancyplots-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bec12f1f35fb560fc090058e2f5cde77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8700, "upload_time": "2019-05-09T17:02:50", "upload_time_iso_8601": "2019-05-09T17:02:50.201724Z", "url": "https://files.pythonhosted.org/packages/68/23/978463ff05762eebfe1f5d700008e113cd59bb65c24ff723f4abff798626/pyfancyplots-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e7a8007cef4eab29f94951fd2928420", "sha256": "c2f2fb58f9408f1223e213358e0e5e9cf48de81f43343cc49c99b35578014bc0"}, "downloads": -1, "filename": "pyfancyplots-0.1.tar.gz", "has_sig": false, "md5_digest": "6e7a8007cef4eab29f94951fd2928420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6698, "upload_time": "2019-05-09T17:02:52", "upload_time_iso_8601": "2019-05-09T17:02:52.234471Z", "url": "https://files.pythonhosted.org/packages/80/7b/b2e44b66fc13040fa3551f05fa4639ca454322e3e1698080afb4d06d6ae8/pyfancyplots-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bec12f1f35fb560fc090058e2f5cde77", "sha256": "ad6b74daa02fcf28aac6dfc3947d568e1bf9b5a2c9aa5783ce06b783b1c626e1"}, "downloads": -1, "filename": "pyfancyplots-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bec12f1f35fb560fc090058e2f5cde77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8700, "upload_time": "2019-05-09T17:02:50", "upload_time_iso_8601": "2019-05-09T17:02:50.201724Z", "url": "https://files.pythonhosted.org/packages/68/23/978463ff05762eebfe1f5d700008e113cd59bb65c24ff723f4abff798626/pyfancyplots-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e7a8007cef4eab29f94951fd2928420", "sha256": "c2f2fb58f9408f1223e213358e0e5e9cf48de81f43343cc49c99b35578014bc0"}, "downloads": -1, "filename": "pyfancyplots-0.1.tar.gz", "has_sig": false, "md5_digest": "6e7a8007cef4eab29f94951fd2928420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6698, "upload_time": "2019-05-09T17:02:52", "upload_time_iso_8601": "2019-05-09T17:02:52.234471Z", "url": "https://files.pythonhosted.org/packages/80/7b/b2e44b66fc13040fa3551f05fa4639ca454322e3e1698080afb4d06d6ae8/pyfancyplots-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:01 2020"}