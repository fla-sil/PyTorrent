{"info": {"author": "Giuseppe De Marco", "author_email": "giuseppe.demarco@unical.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "pyMultiLDAP\n-----\n\npyMultiLDAP can gather data from multiple LDAP servers, can do data aggregation and manipulation with rewrite rules.\npyMultiLDAP can act also as a proxy server, behind openldap's slapd-sock backend or any custom implementation.\n\n### Features\n\n- LDAP client to many servers as a single one;\n- Custom functions to manipulate returning data (rewrite rules);\n- Export data in python dictionary, json or ldiff format;\n- Proxy Server, exposing a server daemon usable with [slapd-sock backend](https://www.openldap.org/software/man.cgi?query=slapd-sock).\n\npyMultiLDAP doesn't write to LDAP servers, it just handle readonly data.\nIt's also used to automate smart data processing on-the-fly.\n\nSee `example/settings.py.example` and `multildap/attr_rewrite.py` to understand how to configure and extend it.\n\n### Tested on\n\n- Debian9;\n- Debian10.\n\n### Setup\nConfigure multiple connections and search paramenters in `settings.py`.\n\nInstall\n````\ngit clone https://github.com/peppelinux/pyMultiLDAP.git\ncd pyMultiLDAP\npip install -r requirements\npython3 setup.py install\n````\n\nor use pipy [WIP]\n\n````\npip install pyMultiLDAP\n````\n\n#### LdapClient Class usage\n````\nfrom multildap.client import LdapClient\nfrom settings import LDAP_CONNECTIONS\n\nlc = LdapClient(LDAP_CONNECTIONS['SAMVICE'])\n\n# get all the results\nlc.get()\n\n# apply a filter\nlc.get(search=\"(&(sn=de marco)(schacPersonalUniqueId=*DMRGPP83*))\")\n````\n\n##### Search and get\n\nSee `examples/run_test.py`.\n\nDifference between `.search` and `.get`:\n- *search* relyies on connection configuration and returns result as it come (raw);\n- *get* handles custom search filter and retrieve result as dictionary, json, ldif or python object format. It also apply rewrite rules.\n\n````\nimport copy\n\nfrom multildap.client import LdapClient\nfrom settings import LDAP_CONNECTIONS\n\nlc = LdapClient(LDAP_CONNECTIONS['DEFAULT'])\n\nkwargs = copy.copy(lc.conf)\nkwargs['search']['search_filter'] = \"(&(sn=de medici)(givenName=aurora))\"\nr = lc.search(**kwargs['search'])\n````\n\n#### Results in json format\n````\nfrom multildap.client import LdapClient\nfrom . settings import LDAP_CONNECTIONS\n\n\nfor i in LDAP_CONNECTIONS:\n    lc = LdapClient(LDAP_CONNECTIONS[i])\n    print('# Results from: {} ...'.format(lc))\n\n    # get all as defined search_filter configured in settings connection\n    # but in json format\n    r = lc.get(format='json')\n    print(r)\n\n    # set a custom search as method argument\n    r = lc.get(search=\"(&(sn=de marco)(schacPersonalUniqueId=*DMRGPP345tg86H))\", format='json')\n    print(r)\n\n    print('# End {}'.format(i))\n````\n\n#### Run the server\n\nNetwork address\n````\nmultildapd.py -conf settings.py -port 1234\n````\n\nUnix domain socket (for slapd-sock backend)\n````\nmultildapd.py -conf ./settings.py -loglevel \"DEBUG\" -socket /var/run/multildap.sock -pid /var/run/multildap.pid -uid openldap\n````\n\nDummy test without any ldap client connection configured, just to test slapd-sock:\n````\nmultildapd.py -conf ./settings.py -dummy -loglevel \"DEBUG\" -socket /var/run/multildap.sock -pid /var/run/multildap.pid\n````\n\nTest Unix domain socket from cli\n````\nnc -U /tmp/multildap.sock\n````\n\n#### Interfacing it with OpenLDAP slapd-sock\n\nThe  [Slapd-sock](https://www.openldap.org/software/man.cgi?query=slapd-sock)\n backend  to  slapd  uses  an external program to handle\n queries. This makes it\n possible to have a pool of processes, which persist  between  requests.\n This  allows  multithreaded operation and a higher level of efficiency.\n Multildapd  listens  on  a  Unix  domain  socket and it must have  been  started  independently;\n\nThis  module  may  also  be  used  as  an  overlay on top of some other\n database.  Use as an overlay allows external actions to be triggered in\n response to operations on the main database.\n\n#### Configure slapd-sock as database\n\nAdd the module.\n````\nldapadd -Y EXTERNAL -H ldapi:/// <<EOF\ndn: cn=module,cn=config\nobjectClass: olcModuleList\ncn: module\nolcModuleLoad: back_sock.la\nEOF\n````\n\nCreate the database.\n````\nldapadd -Y EXTERNAL -H ldapi:/// <<EOF\ndn: olcDatabase={4}sock,cn=config\nobjectClass: olcDbSocketConfig\nolcDatabase: {4}sock\nolcDbSocketPath: /var/run/multildap.sock\nolcSuffix: dc=proxy,dc=testunical,dc=it\nolcDbSocketExtensions: binddn peername ssf\nEOF\n````\n\nAdd an Overlay if you want to wrap an existing backend\n````\nldapmodify -H ldapi:// -Y EXTERNAL <<EOF\ndn: olcOverlay=sock,olcDatabase={1}mdb,cn=config\nchangetype: add\nobjectClass: olcConfig\nobjectClass: olcOverlayConfig\nobjectClass: olcOvSocketConfig\nolcOverlay: sock\nolcDbSocketPath: /var/run/multildap/multildap.sock\nolcOvSocketOps: bind unbind search\nolcOvSocketResps: search\nEOF\n````\n\nRemember to configure an ACL otherwise only `ldapsearch -H ldapi:// -Y EXTERNAL` as root would fetch ldif.\nRemember to add a space char `' '` after every olaAccess line, otherwise you'll get `Implementation specific error(80)`.\n\n````\nexport BASEDC=\"dc=testunical,dc=it\"\n\nldapadd -Y EXTERNAL -H ldapi:/// <<EOF\ndn: olcDatabase={4}sock,cn=config\nchangeType: modify\nreplace: olcAccess\nolcAccess: to *\n by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage\n by * break\n# the following permits self BIND by users\nolcAccess: to dn.subtree=\"dc=proxy,$BASEDC\"\n by self read\n by * break\n# the following two permits SEARCH by idp and foreign auth system\nolcAccess: to dn.subtree=\"ou=people,$BASEDC\"\n by dn.children=\"ou=auth,$BASEDC\" read\n by self read\n by * break\nolcAccess: to dn.subtree=\"ou=people,$BASEDC\"\n by dn.children=\"ou=idp,$BASEDC\" read\n by self read\n by * break\nolcAccess: to *\n by anonymous auth\n by * break\nEOF\n````\n\nAuthentication  (BIND) on top of the multildapd must be configured with attribute\n`rewrite_dn_to` regarding every connections in the settings.py. If abstent the specified connection will be excluded from authentication.\nTODO: _adopt openldap proxy authz statements_.\n\n````\nldapsearch -H ldap://localhost:389 -D \"uid=peppe,dc=proxy,dc=testunical,dc=it\" -w thatsecret -b 'uid=peppe,dc=proxy,dc=unical,dc=it'\n````\n\n#### Hints\n\nSee databases currently installed:\n- `ldapsearch -Y EXTERNAL -H ldapi:/// -b 'cn=config' -LLL  \"olcDatabase=*\"`;\n- Use `client_strategy = RESTARTABLE` instead of `REUSABLE` in your settings.py for better performances;\n- A Backend can not be deleted via ldapdelete/modify until OpenLDAP 2.5 will be released;\n- Changing the socket path\n````\nldapmodify -Y EXTERNAL -H ldapi:/// <<EOF\ndn: olcDatabase={4}sock,cn=config\nchangetype: modify\nreplace: olcDbSocketPath\nolcDbSocketPath: /var/run/multildap.sock\nEOF\n````\n- Deploy a dummy socket listener with socat, just to debug incoming connection from slapd-sock.\n\n````\nsocat -s UNIX-LISTEN:/tmp/slapd-sock,umask=000,fork EXEC:\"$your_command\"\n````\n\n#### Other slapd-sock resources:\n\n- [slapsock](https://build.opensuse.org/package/show/home:stroeder:AE-DIR/python-slapdsock)\n- [slapd-trigger](https://github.com/jclain/slapd-trigger)\n- [ldap.h search scopes](https://github.com/openldap/openldap/blob/master/include/ldap.h#L581)\n- [slapd-sock in OpenLDAP ML](https://www.openldap.org/cgi-bin/wilma_glimpse/openldap-technical?query=slapd-sock&Search=Search&errors=0&maxfiles=50&maxlines=10&.cgifields=lineonly&.cgifields=restricttofiles&.cgifields=filelist&.cgifields=partial&.cgifields=case)\n\n\n#### Todo\n\n- Example configuration with slapd's Proxy Authorization Rules (authzTo: dn.regex:^uid=[^,]*,dc=example,dc=com$);\n- Only SEARCH, BIND and UNBIND is usable, other LDAP methods should be implemented;\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peppelinux/multildap", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "multildap", "package_url": "https://pypi.org/project/multildap/", "platform": "", "project_url": "https://pypi.org/project/multildap/", "project_urls": {"Homepage": "https://github.com/peppelinux/multildap"}, "release_url": "https://pypi.org/project/multildap/0.3/", "requires_dist": ["ldap3", "gevent"], "requires_python": "", "summary": "LDAP client or proxy to multiple LDAP server", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>pyMultiLDAP</h2>\n<p>pyMultiLDAP can gather data from multiple LDAP servers, can do data aggregation and manipulation with rewrite rules.\npyMultiLDAP can act also as a proxy server, behind openldap's slapd-sock backend or any custom implementation.</p>\n<h3>Features</h3>\n<ul>\n<li>LDAP client to many servers as a single one;</li>\n<li>Custom functions to manipulate returning data (rewrite rules);</li>\n<li>Export data in python dictionary, json or ldiff format;</li>\n<li>Proxy Server, exposing a server daemon usable with <a href=\"https://www.openldap.org/software/man.cgi?query=slapd-sock\" rel=\"nofollow\">slapd-sock backend</a>.</li>\n</ul>\n<p>pyMultiLDAP doesn't write to LDAP servers, it just handle readonly data.\nIt's also used to automate smart data processing on-the-fly.</p>\n<p>See <code>example/settings.py.example</code> and <code>multildap/attr_rewrite.py</code> to understand how to configure and extend it.</p>\n<h3>Tested on</h3>\n<ul>\n<li>Debian9;</li>\n<li>Debian10.</li>\n</ul>\n<h3>Setup</h3>\n<p>Configure multiple connections and search paramenters in <code>settings.py</code>.</p>\n<p>Install</p>\n<pre><code>git clone https://github.com/peppelinux/pyMultiLDAP.git\ncd pyMultiLDAP\npip install -r requirements\npython3 setup.py install\n</code></pre>\n<p>or use pipy [WIP]</p>\n<pre><code>pip install pyMultiLDAP\n</code></pre>\n<h4>LdapClient Class usage</h4>\n<pre><code>from multildap.client import LdapClient\nfrom settings import LDAP_CONNECTIONS\n\nlc = LdapClient(LDAP_CONNECTIONS['SAMVICE'])\n\n# get all the results\nlc.get()\n\n# apply a filter\nlc.get(search=\"(&amp;(sn=de marco)(schacPersonalUniqueId=*DMRGPP83*))\")\n</code></pre>\n<h5>Search and get</h5>\n<p>See <code>examples/run_test.py</code>.</p>\n<p>Difference between <code>.search</code> and <code>.get</code>:</p>\n<ul>\n<li><em>search</em> relyies on connection configuration and returns result as it come (raw);</li>\n<li><em>get</em> handles custom search filter and retrieve result as dictionary, json, ldif or python object format. It also apply rewrite rules.</li>\n</ul>\n<pre><code>import copy\n\nfrom multildap.client import LdapClient\nfrom settings import LDAP_CONNECTIONS\n\nlc = LdapClient(LDAP_CONNECTIONS['DEFAULT'])\n\nkwargs = copy.copy(lc.conf)\nkwargs['search']['search_filter'] = \"(&amp;(sn=de medici)(givenName=aurora))\"\nr = lc.search(**kwargs['search'])\n</code></pre>\n<h4>Results in json format</h4>\n<pre><code>from multildap.client import LdapClient\nfrom . settings import LDAP_CONNECTIONS\n\n\nfor i in LDAP_CONNECTIONS:\n    lc = LdapClient(LDAP_CONNECTIONS[i])\n    print('# Results from: {} ...'.format(lc))\n\n    # get all as defined search_filter configured in settings connection\n    # but in json format\n    r = lc.get(format='json')\n    print(r)\n\n    # set a custom search as method argument\n    r = lc.get(search=\"(&amp;(sn=de marco)(schacPersonalUniqueId=*DMRGPP345tg86H))\", format='json')\n    print(r)\n\n    print('# End {}'.format(i))\n</code></pre>\n<h4>Run the server</h4>\n<p>Network address</p>\n<pre><code>multildapd.py -conf settings.py -port 1234\n</code></pre>\n<p>Unix domain socket (for slapd-sock backend)</p>\n<pre><code>multildapd.py -conf ./settings.py -loglevel \"DEBUG\" -socket /var/run/multildap.sock -pid /var/run/multildap.pid -uid openldap\n</code></pre>\n<p>Dummy test without any ldap client connection configured, just to test slapd-sock:</p>\n<pre><code>multildapd.py -conf ./settings.py -dummy -loglevel \"DEBUG\" -socket /var/run/multildap.sock -pid /var/run/multildap.pid\n</code></pre>\n<p>Test Unix domain socket from cli</p>\n<pre><code>nc -U /tmp/multildap.sock\n</code></pre>\n<h4>Interfacing it with OpenLDAP slapd-sock</h4>\n<p>The  <a href=\"https://www.openldap.org/software/man.cgi?query=slapd-sock\" rel=\"nofollow\">Slapd-sock</a>\nbackend  to  slapd  uses  an external program to handle\nqueries. This makes it\npossible to have a pool of processes, which persist  between  requests.\nThis  allows  multithreaded operation and a higher level of efficiency.\nMultildapd  listens  on  a  Unix  domain  socket and it must have  been  started  independently;</p>\n<p>This  module  may  also  be  used  as  an  overlay on top of some other\ndatabase.  Use as an overlay allows external actions to be triggered in\nresponse to operations on the main database.</p>\n<h4>Configure slapd-sock as database</h4>\n<p>Add the module.</p>\n<pre><code>ldapadd -Y EXTERNAL -H ldapi:/// &lt;&lt;EOF\ndn: cn=module,cn=config\nobjectClass: olcModuleList\ncn: module\nolcModuleLoad: back_sock.la\nEOF\n</code></pre>\n<p>Create the database.</p>\n<pre><code>ldapadd -Y EXTERNAL -H ldapi:/// &lt;&lt;EOF\ndn: olcDatabase={4}sock,cn=config\nobjectClass: olcDbSocketConfig\nolcDatabase: {4}sock\nolcDbSocketPath: /var/run/multildap.sock\nolcSuffix: dc=proxy,dc=testunical,dc=it\nolcDbSocketExtensions: binddn peername ssf\nEOF\n</code></pre>\n<p>Add an Overlay if you want to wrap an existing backend</p>\n<pre><code>ldapmodify -H ldapi:// -Y EXTERNAL &lt;&lt;EOF\ndn: olcOverlay=sock,olcDatabase={1}mdb,cn=config\nchangetype: add\nobjectClass: olcConfig\nobjectClass: olcOverlayConfig\nobjectClass: olcOvSocketConfig\nolcOverlay: sock\nolcDbSocketPath: /var/run/multildap/multildap.sock\nolcOvSocketOps: bind unbind search\nolcOvSocketResps: search\nEOF\n</code></pre>\n<p>Remember to configure an ACL otherwise only <code>ldapsearch -H ldapi:// -Y EXTERNAL</code> as root would fetch ldif.\nRemember to add a space char <code>' '</code> after every olaAccess line, otherwise you'll get <code>Implementation specific error(80)</code>.</p>\n<pre><code>export BASEDC=\"dc=testunical,dc=it\"\n\nldapadd -Y EXTERNAL -H ldapi:/// &lt;&lt;EOF\ndn: olcDatabase={4}sock,cn=config\nchangeType: modify\nreplace: olcAccess\nolcAccess: to *\n by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage\n by * break\n# the following permits self BIND by users\nolcAccess: to dn.subtree=\"dc=proxy,$BASEDC\"\n by self read\n by * break\n# the following two permits SEARCH by idp and foreign auth system\nolcAccess: to dn.subtree=\"ou=people,$BASEDC\"\n by dn.children=\"ou=auth,$BASEDC\" read\n by self read\n by * break\nolcAccess: to dn.subtree=\"ou=people,$BASEDC\"\n by dn.children=\"ou=idp,$BASEDC\" read\n by self read\n by * break\nolcAccess: to *\n by anonymous auth\n by * break\nEOF\n</code></pre>\n<p>Authentication  (BIND) on top of the multildapd must be configured with attribute\n<code>rewrite_dn_to</code> regarding every connections in the settings.py. If abstent the specified connection will be excluded from authentication.\nTODO: <em>adopt openldap proxy authz statements</em>.</p>\n<pre><code>ldapsearch -H ldap://localhost:389 -D \"uid=peppe,dc=proxy,dc=testunical,dc=it\" -w thatsecret -b 'uid=peppe,dc=proxy,dc=unical,dc=it'\n</code></pre>\n<h4>Hints</h4>\n<p>See databases currently installed:</p>\n<ul>\n<li><code>ldapsearch -Y EXTERNAL -H ldapi:/// -b 'cn=config' -LLL \"olcDatabase=*\"</code>;</li>\n<li>Use <code>client_strategy = RESTARTABLE</code> instead of <code>REUSABLE</code> in your settings.py for better performances;</li>\n<li>A Backend can not be deleted via ldapdelete/modify until OpenLDAP 2.5 will be released;</li>\n<li>Changing the socket path</li>\n</ul>\n<pre><code>ldapmodify -Y EXTERNAL -H ldapi:/// &lt;&lt;EOF\ndn: olcDatabase={4}sock,cn=config\nchangetype: modify\nreplace: olcDbSocketPath\nolcDbSocketPath: /var/run/multildap.sock\nEOF\n</code></pre>\n<ul>\n<li>Deploy a dummy socket listener with socat, just to debug incoming connection from slapd-sock.</li>\n</ul>\n<pre><code>socat -s UNIX-LISTEN:/tmp/slapd-sock,umask=000,fork EXEC:\"$your_command\"\n</code></pre>\n<h4>Other slapd-sock resources:</h4>\n<ul>\n<li><a href=\"https://build.opensuse.org/package/show/home:stroeder:AE-DIR/python-slapdsock\" rel=\"nofollow\">slapsock</a></li>\n<li><a href=\"https://github.com/jclain/slapd-trigger\" rel=\"nofollow\">slapd-trigger</a></li>\n<li><a href=\"https://github.com/openldap/openldap/blob/master/include/ldap.h#L581\" rel=\"nofollow\">ldap.h search scopes</a></li>\n<li><a href=\"https://www.openldap.org/cgi-bin/wilma_glimpse/openldap-technical?query=slapd-sock&amp;Search=Search&amp;errors=0&amp;maxfiles=50&amp;maxlines=10&amp;.cgifields=lineonly&amp;.cgifields=restricttofiles&amp;.cgifields=filelist&amp;.cgifields=partial&amp;.cgifields=case\" rel=\"nofollow\">slapd-sock in OpenLDAP ML</a></li>\n</ul>\n<h4>Todo</h4>\n<ul>\n<li>Example configuration with slapd's Proxy Authorization Rules (authzTo: dn.regex:^uid=[^,]*,dc=example,dc=com$);</li>\n<li>Only SEARCH, BIND and UNBIND is usable, other LDAP methods should be implemented;</li>\n</ul>\n\n          </div>"}, "last_serial": 6892034, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "6f5ce59c30d9eb0e155584e313218f9b", "sha256": "2c95c42600f45459d120237c40cf8c9e1bbacb1fb9a69e5a5ba58baf4849c123"}, "downloads": -1, "filename": "multildap-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f5ce59c30d9eb0e155584e313218f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16187, "upload_time": "2020-03-04T17:50:08", "upload_time_iso_8601": "2020-03-04T17:50:08.958828Z", "url": "https://files.pythonhosted.org/packages/97/22/5a66ce9cbb7df53e008744cdfde00b31b438001ae3e74ed93ce6b328762f/multildap-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7369a2c7fef17fafe68ce0b80e9bdb44", "sha256": "9ca89a755a859fb20b8cbaf491058927c0984526e852beb21d4571b985d1fbf9"}, "downloads": -1, "filename": "multildap-0.2.tar.gz", "has_sig": false, "md5_digest": "7369a2c7fef17fafe68ce0b80e9bdb44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11949, "upload_time": "2020-03-04T17:50:10", "upload_time_iso_8601": "2020-03-04T17:50:10.724905Z", "url": "https://files.pythonhosted.org/packages/65/3b/0393b2a9e04771d4096c93847a4543707c21684315a6b6722ae164f5b541/multildap-0.2.tar.gz", "yanked": false}], "0.2rc0": [{"comment_text": "", "digests": {"md5": "4703c550b4f8d206ef6577a58b51c8b8", "sha256": "1a4e0e8b2cd810853b9b591e3139073566fc203eae954cf85da79468d0b0f0a8"}, "downloads": -1, "filename": "multildap-0.2rc0.tar.gz", "has_sig": false, "md5_digest": "4703c550b4f8d206ef6577a58b51c8b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11964, "upload_time": "2019-07-31T12:04:48", "upload_time_iso_8601": "2019-07-31T12:04:48.367666Z", "url": "https://files.pythonhosted.org/packages/f5/3e/8c84d86ab0dadaf306c4665e3916e07f76a93396942e887dc95d11ad5de8/multildap-0.2rc0.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "42fb2bb5bf79ebfd30d37def6e7c8243", "sha256": "b068f438e7455a1240f0582d44cd3e665cb361d6b6383ed2b771224e964876ef"}, "downloads": -1, "filename": "multildap-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "42fb2bb5bf79ebfd30d37def6e7c8243", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18532, "upload_time": "2020-03-26T21:30:25", "upload_time_iso_8601": "2020-03-26T21:30:25.821883Z", "url": "https://files.pythonhosted.org/packages/85/bb/d2168903f7580e2e75b8e0dbf853cd8e930b9cc3e2856fb1327f3ebe9fa4/multildap-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93189d3095103ea1e5467a5890140675", "sha256": "72ba262cd69cba481f9fea23adb26ddd12ef3d0859fcff77d44cc683a27e23aa"}, "downloads": -1, "filename": "multildap-0.3.tar.gz", "has_sig": false, "md5_digest": "93189d3095103ea1e5467a5890140675", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12896, "upload_time": "2020-03-26T21:30:27", "upload_time_iso_8601": "2020-03-26T21:30:27.567158Z", "url": "https://files.pythonhosted.org/packages/e3/31/35999a4508b23b334eb30bf32827d1628e2054e6d9fe37d667e7f2b3bb44/multildap-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42fb2bb5bf79ebfd30d37def6e7c8243", "sha256": "b068f438e7455a1240f0582d44cd3e665cb361d6b6383ed2b771224e964876ef"}, "downloads": -1, "filename": "multildap-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "42fb2bb5bf79ebfd30d37def6e7c8243", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18532, "upload_time": "2020-03-26T21:30:25", "upload_time_iso_8601": "2020-03-26T21:30:25.821883Z", "url": "https://files.pythonhosted.org/packages/85/bb/d2168903f7580e2e75b8e0dbf853cd8e930b9cc3e2856fb1327f3ebe9fa4/multildap-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93189d3095103ea1e5467a5890140675", "sha256": "72ba262cd69cba481f9fea23adb26ddd12ef3d0859fcff77d44cc683a27e23aa"}, "downloads": -1, "filename": "multildap-0.3.tar.gz", "has_sig": false, "md5_digest": "93189d3095103ea1e5467a5890140675", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12896, "upload_time": "2020-03-26T21:30:27", "upload_time_iso_8601": "2020-03-26T21:30:27.567158Z", "url": "https://files.pythonhosted.org/packages/e3/31/35999a4508b23b334eb30bf32827d1628e2054e6d9fe37d667e7f2b3bb44/multildap-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:25 2020"}