{"info": {"author": "Radim Rehurek", "author_email": "me@radimrehurek.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database :: Front-Ends", "Topic :: System :: Distributed Computing"], "description": "======================================================\nsmart_open \u2014 utils for streaming large files in Python\n======================================================\n\n\n|License|_ |Travis|_ |Appveyor|_ |Coveralls|_ |Downloads|_\n\n.. |License| image:: https://img.shields.io/pypi/l/smart_open.svg\n.. |Travis| image:: https://travis-ci.org/RaRe-Technologies/smart_open.svg?branch=develop\n.. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/47py3gwhmt9tr74w/branch/develop?svg=true\n.. |Coveralls| image:: https://coveralls.io/repos/github/RaRe-Technologies/smart_open/badge.svg?branch=develop\n.. |Downloads| image:: https://pepy.tech/badge/smart-open/month\n.. _License: https://github.com/RaRe-Technologies/smart_open/blob/master/LICENSE\n.. _Travis: https://travis-ci.org/RaRe-Technologies/smart_open\n.. _Appveyor: https://ci.appveyor.com/project/piskvorky/smart-open\n.. _Coveralls: https://coveralls.io/github/RaRe-Technologies/smart_open?branch=HEAD\n.. _Downloads: https://pypi.org/project/smart-open/\n\n\nWhat?\n=====\n\n``smart_open`` is a Python 3 library for **efficient streaming of very large files** from/to storages such as S3, GCS, HDFS, WebHDFS, HTTP, HTTPS, SFTP, or local filesystem. It supports transparent, on-the-fly (de-)compression for a variety of different formats.\n\n``smart_open`` is a drop-in replacement for Python's built-in ``open()``: it can do anything ``open`` can (100% compatible, falls back to native ``open`` wherever possible), plus lots of nifty extra stuff on top.\n\n**Python 2.7 is no longer supported. If you need Python 2.7, please use** `smart_open 1.10.1 <https://github.com/RaRe-Technologies/smart_open/releases/tag/1.10.0>`_, **the last version to support Python 2.**\n\nWhy?\n====\n\nWorking with large remote files, for example using Amazon's `boto <http://docs.pythonboto.org/en/latest/>`_ and `boto3 <https://boto3.readthedocs.io/en/latest/>`_ Python library, is a pain.\n``boto``'s ``key.set_contents_from_string()`` and ``key.get_contents_as_string()`` methods only work for small files, because they're loaded fully into RAM, no streaming.\nThere are nasty hidden gotchas when using ``boto``'s multipart upload functionality that is needed for large files, and a lot of boilerplate.\n\n``smart_open`` shields you from that. It builds on boto3 and other remote storage libraries, but offers a **clean unified Pythonic API**. The result is less code for you to write and fewer bugs to make.\n\n\nHow?\n=====\n\n``smart_open`` is well-tested, well-documented, and has a simple Pythonic API:\n\n\n.. _doctools_before_examples:\n\n.. code-block:: python\n\n  >>> from smart_open import open\n  >>>\n  >>> # stream lines from an S3 object\n  >>> for line in open('s3://commoncrawl/robots.txt'):\n  ...    print(repr(line))\n  ...    break\n  'User-Agent: *\\n'\n\n  >>> # stream from/to compressed files, with transparent (de)compression:\n  >>> for line in open('smart_open/tests/test_data/1984.txt.gz', encoding='utf-8'):\n  ...    print(repr(line))\n  'It was a bright cold day in April, and the clocks were striking thirteen.\\n'\n  'Winston Smith, his chin nuzzled into his breast in an effort to escape the vile\\n'\n  'wind, slipped quickly through the glass doors of Victory Mansions, though not\\n'\n  'quickly enough to prevent a swirl of gritty dust from entering along with him.\\n'\n\n  >>> # can use context managers too:\n  >>> with open('smart_open/tests/test_data/1984.txt.gz') as fin:\n  ...    with open('smart_open/tests/test_data/1984.txt.bz2', 'w') as fout:\n  ...        for line in fin:\n  ...           fout.write(line)\n\n  >>> # can use any IOBase operations, like seek\n  >>> with open('s3://commoncrawl/robots.txt', 'rb') as fin:\n  ...     for line in fin:\n  ...         print(repr(line.decode('utf-8')))\n  ...         break\n  ...     offset = fin.seek(0)  # seek to the beginning\n  ...     print(fin.read(4))\n  'User-Agent: *\\n'\n  b'User'\n\n  >>> # stream from HTTP\n  >>> for line in open('http://example.com/index.html'):\n  ...     print(repr(line))\n  ...     break\n  '<!doctype html>\\n'\n\n.. _doctools_after_examples:\n\nOther examples of URLs that ``smart_open`` accepts::\n\n    s3://my_bucket/my_key\n    s3://my_key:my_secret@my_bucket/my_key\n    s3://my_key:my_secret@my_server:my_port@my_bucket/my_key\n    gs://my_bucket/my_blob\n    hdfs:///path/file\n    hdfs://path/file\n    webhdfs://host:port/path/file\n    ./local/path/file\n    ~/local/path/file\n    local/path/file\n    ./local/path/file.gz\n    file:///home/user/file\n    file:///home/user/file.bz2\n    [ssh|scp|sftp]://username@host//path/file\n    [ssh|scp|sftp]://username@host/path/file\n    [ssh|scp|sftp]://username:password@host/path/file\n\n\nDocumentation\n=============\n\nInstallation\n------------\n::\n\n    pip install smart_open  // Install with no cloud dependencies\n    pip install smart_open[aws] // Install AWS deps\n    pip install smart_open[gcp] // Install GCP deps\n    pip install smart_open[all] // Installs all cloud dependencies\n\nOr, if you prefer to install from the `source tar.gz <http://pypi.python.org/pypi/smart_open>`_::\n\n    python setup.py test  # run unit tests\n    python setup.py install\n\nTo run the unit tests (optional), you'll also need to install some other dependencies: see setup.py or run `pip install .[test]`.\nThe tests are also run automatically with `Travis CI <https://travis-ci.org/RaRe-Technologies/smart_open>`_ on every commit push & pull request.\n\nIf you're upgrading from ``smart_open`` versions 1.8.0 and below, please check out the `Migration Guide <MIGRATING_FROM_OLDER_VERSIONS.rst>`_.\n\nVersion ``2.0`` will introduce a backwards incompatible installation method with regards to the cloud dependencies. A migration path to minimize breaking\nwas introduced in version ``x.x.x``. If you want to maintain backwards compatibility (installing all dependencies) install this package via ``smart_open[all]`` now\nand once the change is made you should not have any issues. If all you care about is AWS dependencies for example you can install via ``smart_open[aws]`` and\nonce the dependency change is made you will simply drop the unwanted dependencies. You can read more about the motivations `here <https://github.com/RaRe-Technologies/smart_open/issues/443>`_\n\n\nBuilt-in help\n-------------\n\nFor detailed API info, see the online help:\n\n.. code-block:: python\n\n    help('smart_open')\n\nor click `here <https://github.com/RaRe-Technologies/smart_open/blob/master/help.txt>`__ to view the help in your browser.\n\nMore examples\n-------------\n\n.. code-block:: python\n\n    >>> import os, boto3\n    >>>\n    >>> # stream content *into* S3 (write mode) using a custom session\n    >>> session = boto3.Session(\n    ...     aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],\n    ...     aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_KEY'],\n    ... )\n    >>> url = 's3://smart-open-py37-benchmark-results/test.txt'\n    >>> with open(url, 'wb', transport_params={'session': session}) as fout:\n    ...     bytes_written = fout.write(b'hello world!')\n    ...     print(bytes_written)\n    12\n\n.. code-block:: python\n\n    # stream from HDFS\n    for line in open('hdfs://user/hadoop/my_file.txt', encoding='utf8'):\n        print(line)\n\n    # stream from WebHDFS\n    for line in open('webhdfs://host:port/user/hadoop/my_file.txt'):\n        print(line)\n\n    # stream content *into* HDFS (write mode):\n    with open('hdfs://host:port/user/hadoop/my_file.txt', 'wb') as fout:\n        fout.write(b'hello world')\n\n    # stream content *into* WebHDFS (write mode):\n    with open('webhdfs://host:port/user/hadoop/my_file.txt', 'wb') as fout:\n        fout.write(b'hello world')\n\n    # stream from a completely custom s3 server, like s3proxy:\n    for line in open('s3u://user:secret@host:port@mybucket/mykey.txt'):\n        print(line)\n\n    # Stream to Digital Ocean Spaces bucket providing credentials from boto3 profile\n    transport_params = {\n        'session': boto3.Session(profile_name='digitalocean'),\n        'resource_kwargs': {\n            'endpoint_url': 'https://ams3.digitaloceanspaces.com',\n        }\n    }\n    with open('s3://bucket/key.txt', 'wb', transport_params=transport_params) as fout:\n        fout.write(b'here we stand')\n\n    # stream from GCS\n    for line in open('gs://my_bucket/my_file.txt'):\n        print(line)\n\n    # stream content *into* GCS (write mode):\n    with open('gs://my_bucket/my_file.txt', 'wb') as fout:\n        fout.write(b'hello world')\n\nSupported Compression Formats\n-----------------------------\n\n``smart_open`` allows reading and writing gzip and bzip2 files.\nThey are transparently handled over HTTP, S3, and other protocols, too, based on the extension of the file being opened.\nYou can easily add support for other file extensions and compression formats.\nFor example, to open xz-compressed files:\n\n.. code-block:: python\n\n    >>> import lzma, os\n    >>> from smart_open import open, register_compressor\n\n    >>> def _handle_xz(file_obj, mode):\n    ...      return lzma.LZMAFile(filename=file_obj, mode=mode, format=lzma.FORMAT_XZ)\n\n    >>> register_compressor('.xz', _handle_xz)\n\n    >>> with open('smart_open/tests/test_data/crime-and-punishment.txt.xz') as fin:\n    ...     text = fin.read()\n    >>> print(len(text))\n    1696\n\n``lzma`` is in the standard library in Python 3.3 and greater.\nFor 2.7, use `backports.lzma`_.\n\n.. _backports.lzma: https://pypi.org/project/backports.lzma/\n\n\nTransport-specific Options\n--------------------------\n\n``smart_open`` supports a wide range of transport options out of the box, including:\n\n- S3\n- HTTP, HTTPS (read-only)\n- SSH, SCP and SFTP\n- WebHDFS\n- GCS\n\nEach option involves setting up its own set of parameters.\nFor example, for accessing S3, you often need to set up authentication, like API keys or a profile name.\n``smart_open``'s ``open`` function accepts a keyword argument ``transport_params`` which accepts additional parameters for the transport layer.\nHere are some examples of using this parameter:\n\n.. code-block:: python\n\n  >>> import boto3\n  >>> fin = open('s3://commoncrawl/robots.txt', transport_params=dict(session=boto3.Session()))\n  >>> fin = open('s3://commoncrawl/robots.txt', transport_params=dict(buffer_size=1024))\n\nFor the full list of keyword arguments supported by each transport option, see the documentation:\n\n.. code-block:: python\n\n  help('smart_open.open')\n\nS3 Credentials\n--------------\n\n``smart_open`` uses the ``boto3`` library to talk to S3.\n``boto3`` has several `mechanisms <https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html>`__ for determining the credentials to use.\nBy default, ``smart_open`` will defer to ``boto3`` and let the latter take care of the credentials.\nThere are several ways to override this behavior.\n\nThe first is to pass a ``boto3.Session`` object as a transport parameter to the ``open`` function.\nYou can customize the credentials when constructing the session.\n``smart_open`` will then use the session when talking to S3.\n\n.. code-block:: python\n\n    session = boto3.Session(\n        aws_access_key_id=ACCESS_KEY,\n        aws_secret_access_key=SECRET_KEY,\n        aws_session_token=SESSION_TOKEN,\n    )\n    fin = open('s3://bucket/key', transport_params=dict(session=session), ...)\n\nYour second option is to specify the credentials within the S3 URL itself:\n\n.. code-block:: python\n\n    fin = open('s3://aws_access_key_id:aws_secret_access_key@bucket/key', ...)\n\n*Important*: The two methods above are **mutually exclusive**. If you pass an AWS session *and* the URL contains credentials, ``smart_open`` will ignore the latter.\n\n*Important*: ``smart_open`` ignores configuration files from the older ``boto`` library.\nPort your old ``boto`` settings to ``boto3`` in order to use them with ``smart_open``.\n\nIterating Over an S3 Bucket's Contents\n--------------------------------------\n\nSince going over all (or select) keys in an S3 bucket is a very common operation, there's also an extra function ``smart_open.s3_iter_bucket()`` that does this efficiently, **processing the bucket keys in parallel** (using multiprocessing):\n\n.. code-block:: python\n\n  >>> from smart_open import s3_iter_bucket\n  >>> # get data corresponding to 2010 and later under \"silo-open-data/annual/monthly_rain\"\n  >>> # we use workers=1 for reproducibility; you should use as many workers as you have cores\n  >>> bucket = 'silo-open-data'\n  >>> prefix = 'annual/monthly_rain/'\n  >>> for key, content in s3_iter_bucket(bucket, prefix=prefix, accept_key=lambda key: '/201' in key, workers=1, key_limit=3):\n  ...     print(key, round(len(content) / 2**20))\n  annual/monthly_rain/2010.monthly_rain.nc 13\n  annual/monthly_rain/2011.monthly_rain.nc 13\n  annual/monthly_rain/2012.monthly_rain.nc 13\n\nSpecific S3 object version\n--------------------------\n\nThe ``version_id`` transport parameter enables you to get the desired version of the object from an S3 bucket.\n\n.. Important::\n    S3 disables version control by default.\n    Before using the ``version_id`` parameter, you must explicitly enable version control for your S3 bucket.\n    Read https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html for details.\n\n.. code-block:: python\n\n  >>> # Read previous versions of an object in a versioned bucket\n  >>> bucket, key = 'smart-open-versioned', 'demo.txt'\n  >>> versions = [v.id for v in boto3.resource('s3').Bucket(bucket).object_versions.filter(Prefix=key)]\n  >>> for v in versions:\n  ...     with open('s3://%s/%s' % (bucket, key), transport_params={'version_id': v}) as fin:\n  ...         print(v, repr(fin.read()))\n  KiQpZPsKI5Dm2oJZy_RzskTOtl2snjBg 'second version\\n'\n  N0GJcE3TQCKtkaS.gF.MUBZS85Gs3hzn 'first version\\n'\n\n  >>> # If you don't specify a version, smart_open will read the most recent one\n  >>> with open('s3://%s/%s' % (bucket, key)) as fin:\n  ...     print(repr(fin.read()))\n  'second version\\n'\n\nGCS Credentials\n---------------\n``smart_open`` uses the ``google-cloud-storage`` library to talk to GCS.\n``google-cloud-storage`` uses the ``google-cloud`` package under the hood to handle authentication.\nThere are several `options <https://google-cloud-python.readthedocs.io/en/0.32.0/core/auth.html>`__ to provide\ncredentials.\nBy default, ``smart_open`` will defer to ``google-cloud-storage`` and let it take care of the credentials.\n\nTo override this behavior, pass a ``google.cloud.storage.Client`` object as a transport parameter to the ``open`` function.\nYou can `customize the credentials <https://google-cloud-python.readthedocs.io/en/0.32.0/core/client.html>`__\nwhen constructing the client. ``smart_open`` will then use the client when talking to GCS. To follow allow with\nthe example below, `refer to Google's guide <https://cloud.google.com/storage/docs/reference/libraries#setting_up_authentication>`__\nto setting up GCS authentication with a service account.\n\n.. code-block:: python\n\n    import os\n    from google.cloud.storage import Client\n    service_account_path = os.environ['GOOGLE_APPLICATION_CREDENTIALS']\n    client = Client.from_service_account_json(service_account_path)\n    fin = open('gs://gcp-public-data-landsat/index.csv.gz', transport_params=dict(client=client))\n\nIf you need more credential options, you can create an explicit ``google.auth.credentials.Credentials`` object\nand pass it to the Client. To create an API token for use in the example below, refer to the\n`GCS authentication guide <https://cloud.google.com/storage/docs/authentication#apiauth>`__.\n\n.. code-block:: python\n\n\timport os\n\tfrom google.auth.credentials import Credentials\n\tfrom google.cloud.storage import Client\n\ttoken = os.environ['GOOGLE_API_TOKEN']\n\tcredentials = Credentials(token=token)\n\tclient = Client(credentials=credentials)\n\tfin = open('gs://gcp-public-data-landsat/index.csv.gz', transport_params=dict(client=client))\n\nFile-like Binary Streams\n------------------------\n\nThe ``open`` function also accepts file-like objects.\nThis is useful when you already have a `binary file <https://docs.python.org/3/glossary.html#term-binary-file>`_ open, and would like to wrap it with transparent decompression:\n\n\n.. code-block:: python\n\n    >>> import io, gzip\n    >>>\n    >>> # Prepare some gzipped binary data in memory, as an example.\n    >>> # Any binary file will do; we're using BytesIO here for simplicity.\n    >>> buf = io.BytesIO()\n    >>> with gzip.GzipFile(fileobj=buf, mode='w') as fout:\n    ...     _ = fout.write(b'this is a bytestring')\n    >>> _ = buf.seek(0)\n    >>>\n    >>> # Use case starts here.\n    >>> buf.name = 'file.gz'  # add a .name attribute so smart_open knows what compressor to use\n    >>> import smart_open\n    >>> smart_open.open(buf, 'rb').read()  # will gzip-decompress transparently!\n    b'this is a bytestring'\n\n\nIn this case, ``smart_open`` relied on the ``.name`` attribute of our `binary I/O stream <https://docs.python.org/3/library/io.html#binary-i-o>`_ ``buf`` object to determine which decompressor to use.\nIf your file object doesn't have one, set the ``.name`` attribute to an appropriate value.\nFurthermore, that value has to end with a **known** file extension (see the ``register_compressor`` function).\nOtherwise, the transparent decompression will not occur.\n\nDrop-in replacement of ``pathlib.Path.open``\n--------------------------------------------\n\n``smart_open.open`` can also be used with ``Path`` objects.\nThe built-in `Path.open()` is not able to read text from compressed files, so use ``patch_pathlib`` to replace it with `smart_open.open()` instead.\nThis can be helpful when e.g. working with compressed files.\n\n.. code-block:: python\n\n    >>> from pathlib import Path\n    >>> from smart_open.smart_open_lib import patch_pathlib\n    >>>\n    >>> _ = patch_pathlib()  # replace `Path.open` with `smart_open.open`\n    >>>\n    >>> path = Path(\"smart_open/tests/test_data/crime-and-punishment.txt.gz\")\n    >>>\n    >>> with path.open(\"r\") as infile:\n    ...     print(infile.readline()[:41])\n    \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438\u044e\u043b\u044f, \u0432 \u0447\u0440\u0435\u0437\u0432\u044b\u0447\u0430\u0439\u043d\u043e \u0436\u0430\u0440\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\n\nExtending ``smart_open``\n========================\n\nSee `this document <extending.md>`__.\n\nComments, bug reports\n=====================\n\n``smart_open`` lives on `Github <https://github.com/RaRe-Technologies/smart_open>`_. You can file\nissues or pull requests there. Suggestions, pull requests and improvements welcome!\n\n----------------\n\n``smart_open`` is open source software released under the `MIT license <https://github.com/piskvorky/smart_open/blob/master/LICENSE>`_.\nCopyright (c) 2015-now `Radim \u0158eh\u016f\u0159ek <https://radimrehurek.com>`_.", "description_content_type": "", "docs_url": null, "download_url": "http://pypi.python.org/pypi/smart_open", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/piskvorky/smart_open", "keywords": "file streaming,s3,hdfs,gcs", "license": "MIT", "maintainer": "Radim Rehurek", "maintainer_email": "me@radimrehurek.com", "name": "smart-open", "package_url": "https://pypi.org/project/smart-open/", "platform": "any", "project_url": "https://pypi.org/project/smart-open/", "project_urls": {"Download": "http://pypi.python.org/pypi/smart_open", "Homepage": "https://github.com/piskvorky/smart_open"}, "release_url": "https://pypi.org/project/smart-open/2.0.0/", "requires_dist": null, "requires_python": ">=3.5.*", "summary": "Utils for streaming large files (S3, HDFS, GCS, gzip, bz2...)", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/RaRe-Technologies/smart_open/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f5a150d137e0213d8d04d0e788650145f14216a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f736d6172745f6f70656e2e737667\"></a> <a href=\"https://travis-ci.org/RaRe-Technologies/smart_open\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1e7c6072e3049ed497a0a431cb34b9ef067559a/68747470733a2f2f7472617669732d63692e6f72672f526152652d546563686e6f6c6f676965732f736d6172745f6f70656e2e7376673f6272616e63683d646576656c6f70\"></a> <a href=\"https://ci.appveyor.com/project/piskvorky/smart-open\" rel=\"nofollow\"><img alt=\"Appveyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ab070df5e33e416ebdcd4472376a2cb20a02f5c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f34377079336777686d743974723734772f6272616e63682f646576656c6f703f7376673d74727565\"></a> <a href=\"https://coveralls.io/github/RaRe-Technologies/smart_open?branch=HEAD\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b43fb7f214d94841e1cde2bbe5946d6ecb7dce/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f526152652d546563686e6f6c6f676965732f736d6172745f6f70656e2f62616467652e7376673f6272616e63683d646576656c6f70\"></a> <a href=\"https://pypi.org/project/smart-open/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/001badcaa8e42ec4bbfa6336887d4f92265c97cd/68747470733a2f2f706570792e746563682f62616467652f736d6172742d6f70656e2f6d6f6e7468\"></a></p>\n<div id=\"what\">\n<h2>What?</h2>\n<p><tt>smart_open</tt> is a Python 3 library for <strong>efficient streaming of very large files</strong> from/to storages such as S3, GCS, HDFS, WebHDFS, HTTP, HTTPS, SFTP, or local filesystem. It supports transparent, on-the-fly (de-)compression for a variety of different formats.</p>\n<p><tt>smart_open</tt> is a drop-in replacement for Python\u2019s built-in <tt>open()</tt>: it can do anything <tt>open</tt> can (100% compatible, falls back to native <tt>open</tt> wherever possible), plus lots of nifty extra stuff on top.</p>\n<p><strong>Python 2.7 is no longer supported. If you need Python 2.7, please use</strong> <a href=\"https://github.com/RaRe-Technologies/smart_open/releases/tag/1.10.0\" rel=\"nofollow\">smart_open 1.10.1</a>, <strong>the last version to support Python 2.</strong></p>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>Working with large remote files, for example using Amazon\u2019s <a href=\"http://docs.pythonboto.org/en/latest/\" rel=\"nofollow\">boto</a> and <a href=\"https://boto3.readthedocs.io/en/latest/\" rel=\"nofollow\">boto3</a> Python library, is a pain.\n<tt>boto</tt>\u2019s <tt>key.set_contents_from_string()</tt> and <tt>key.get_contents_as_string()</tt> methods only work for small files, because they\u2019re loaded fully into RAM, no streaming.\nThere are nasty hidden gotchas when using <tt>boto</tt>\u2019s multipart upload functionality that is needed for large files, and a lot of boilerplate.</p>\n<p><tt>smart_open</tt> shields you from that. It builds on boto3 and other remote storage libraries, but offers a <strong>clean unified Pythonic API</strong>. The result is less code for you to write and fewer bugs to make.</p>\n</div>\n<div id=\"how\">\n<h2>How?</h2>\n<p><tt>smart_open</tt> is well-tested, well-documented, and has a simple Pythonic API:</p>\n<pre id=\"doctools-before-examples\"><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">smart_open</span> <span class=\"kn\">import</span> <span class=\"nb\">open</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># stream lines from an S3 object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://commoncrawl/robots.txt'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>    <span class=\"k\">break</span>\n<span class=\"s1\">'User-Agent: *</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># stream from/to compressed files, with transparent (de)compression:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'smart_open/tests/test_data/1984.txt.gz'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n<span class=\"s1\">'It was a bright cold day in April, and the clocks were striking thirteen.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"s1\">'Winston Smith, his chin nuzzled into his breast in an effort to escape the vile</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"s1\">'wind, slipped quickly through the glass doors of Victory Mansions, though not</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"s1\">'quickly enough to prevent a swirl of gritty dust from entering along with him.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># can use context managers too:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'smart_open/tests/test_data/1984.txt.gz'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'smart_open/tests/test_data/1984.txt.bz2'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>           <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># can use any IOBase operations, like seek</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://commoncrawl/robots.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n<span class=\"o\">...</span>         <span class=\"k\">break</span>\n<span class=\"o\">...</span>     <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># seek to the beginning</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"s1\">'User-Agent: *</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"sa\">b</span><span class=\"s1\">'User'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># stream from HTTP</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com/index.html'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">break</span>\n<span class=\"s1\">'&lt;!doctype html&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n<p id=\"doctools-after-examples\">Other examples of URLs that <tt>smart_open</tt> accepts:</p>\n<pre>s3://my_bucket/my_key\ns3://my_key:my_secret@my_bucket/my_key\ns3://my_key:my_secret@my_server:my_port@my_bucket/my_key\ngs://my_bucket/my_blob\nhdfs:///path/file\nhdfs://path/file\nwebhdfs://host:port/path/file\n./local/path/file\n~/local/path/file\nlocal/path/file\n./local/path/file.gz\nfile:///home/user/file\nfile:///home/user/file.bz2\n[ssh|scp|sftp]://username@host//path/file\n[ssh|scp|sftp]://username@host/path/file\n[ssh|scp|sftp]://username:password@host/path/file\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install smart_open  // Install with no cloud dependencies\npip install smart_open[aws] // Install AWS deps\npip install smart_open[gcp] // Install GCP deps\npip install smart_open[all] // Installs all cloud dependencies\n</pre>\n<p>Or, if you prefer to install from the <a href=\"http://pypi.python.org/pypi/smart_open\" rel=\"nofollow\">source tar.gz</a>:</p>\n<pre>python setup.py test  # run unit tests\npython setup.py install\n</pre>\n<p>To run the unit tests (optional), you\u2019ll also need to install some other dependencies: see setup.py or run <cite>pip install .[test]</cite>.\nThe tests are also run automatically with <a href=\"https://travis-ci.org/RaRe-Technologies/smart_open\" rel=\"nofollow\">Travis CI</a> on every commit push &amp; pull request.</p>\n<p>If you\u2019re upgrading from <tt>smart_open</tt> versions 1.8.0 and below, please check out the <a href=\"MIGRATING_FROM_OLDER_VERSIONS.rst\" rel=\"nofollow\">Migration Guide</a>.</p>\n<p>Version <tt>2.0</tt> will introduce a backwards incompatible installation method with regards to the cloud dependencies. A migration path to minimize breaking\nwas introduced in version <tt>x.x.x</tt>. If you want to maintain backwards compatibility (installing all dependencies) install this package via <tt>smart_open[all]</tt> now\nand once the change is made you should not have any issues. If all you care about is AWS dependencies for example you can install via <tt>smart_open[aws]</tt> and\nonce the dependency change is made you will simply drop the unwanted dependencies. You can read more about the motivations <a href=\"https://github.com/RaRe-Technologies/smart_open/issues/443\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"built-in-help\">\n<h3>Built-in help</h3>\n<p>For detailed API info, see the online help:</p>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"s1\">'smart_open'</span><span class=\"p\">)</span>\n</pre>\n<p>or click <a href=\"https://github.com/RaRe-Technologies/smart_open/blob/master/help.txt\" rel=\"nofollow\">here</a> to view the help in your browser.</p>\n</div>\n<div id=\"more-examples\">\n<h3>More examples</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">boto3</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># stream content *into* S3 (write mode) using a custom session</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'AWS_ACCESS_KEY_ID'</span><span class=\"p\">],</span>\n<span class=\"o\">...</span>     <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'AWS_SECRET_ACCESS_KEY'</span><span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'s3://smart-open-py37-benchmark-results/test.txt'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'session'</span><span class=\"p\">:</span> <span class=\"n\">session</span><span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bytes_written</span> <span class=\"o\">=</span> <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world!'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">bytes_written</span><span class=\"p\">)</span>\n<span class=\"mi\">12</span>\n</pre>\n<pre><span class=\"c1\"># stream from HDFS</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'hdfs://user/hadoop/my_file.txt'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream from WebHDFS</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'webhdfs://host:port/user/hadoop/my_file.txt'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream content *into* HDFS (write mode):</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'hdfs://host:port/user/hadoop/my_file.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n    <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream content *into* WebHDFS (write mode):</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'webhdfs://host:port/user/hadoop/my_file.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n    <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream from a completely custom s3 server, like s3proxy:</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3u://user:secret@host:port@mybucket/mykey.txt'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Stream to Digital Ocean Spaces bucket providing credentials from boto3 profile</span>\n<span class=\"n\">transport_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'session'</span><span class=\"p\">:</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">profile_name</span><span class=\"o\">=</span><span class=\"s1\">'digitalocean'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'resource_kwargs'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'endpoint_url'</span><span class=\"p\">:</span> <span class=\"s1\">'https://ams3.digitaloceanspaces.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://bucket/key.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"n\">transport_params</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n    <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'here we stand'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream from GCS</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'gs://my_bucket/my_file.txt'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stream content *into* GCS (write mode):</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'gs://my_bucket/my_file.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n    <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'hello world'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"supported-compression-formats\">\n<h3>Supported Compression Formats</h3>\n<p><tt>smart_open</tt> allows reading and writing gzip and bzip2 files.\nThey are transparently handled over HTTP, S3, and other protocols, too, based on the extension of the file being opened.\nYou can easily add support for other file extensions and compression formats.\nFor example, to open xz-compressed files:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">lzma</span><span class=\"o\">,</span> <span class=\"nn\">os</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">smart_open</span> <span class=\"kn\">import</span> <span class=\"nb\">open</span><span class=\"p\">,</span> <span class=\"n\">register_compressor</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">_handle_xz</span><span class=\"p\">(</span><span class=\"n\">file_obj</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>      <span class=\"k\">return</span> <span class=\"n\">lzma</span><span class=\"o\">.</span><span class=\"n\">LZMAFile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"n\">file_obj</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">lzma</span><span class=\"o\">.</span><span class=\"n\">FORMAT_XZ</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">register_compressor</span><span class=\"p\">(</span><span class=\"s1\">'.xz'</span><span class=\"p\">,</span> <span class=\"n\">_handle_xz</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'smart_open/tests/test_data/crime-and-punishment.txt.xz'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n<span class=\"mi\">1696</span>\n</pre>\n<p><tt>lzma</tt> is in the standard library in Python 3.3 and greater.\nFor 2.7, use <a href=\"https://pypi.org/project/backports.lzma/\" rel=\"nofollow\">backports.lzma</a>.</p>\n</div>\n<div id=\"transport-specific-options\">\n<h3>Transport-specific Options</h3>\n<p><tt>smart_open</tt> supports a wide range of transport options out of the box, including:</p>\n<ul>\n<li>S3</li>\n<li>HTTP, HTTPS (read-only)</li>\n<li>SSH, SCP and SFTP</li>\n<li>WebHDFS</li>\n<li>GCS</li>\n</ul>\n<p>Each option involves setting up its own set of parameters.\nFor example, for accessing S3, you often need to set up authentication, like API keys or a profile name.\n<tt>smart_open</tt>\u2019s <tt>open</tt> function accepts a keyword argument <tt>transport_params</tt> which accepts additional parameters for the transport layer.\nHere are some examples of using this parameter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://commoncrawl/robots.txt'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://commoncrawl/robots.txt'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">buffer_size</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">))</span>\n</pre>\n<p>For the full list of keyword arguments supported by each transport option, see the documentation:</p>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"s1\">'smart_open.open'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"s3-credentials\">\n<h3>S3 Credentials</h3>\n<p><tt>smart_open</tt> uses the <tt>boto3</tt> library to talk to S3.\n<tt>boto3</tt> has several <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html\" rel=\"nofollow\">mechanisms</a> for determining the credentials to use.\nBy default, <tt>smart_open</tt> will defer to <tt>boto3</tt> and let the latter take care of the credentials.\nThere are several ways to override this behavior.</p>\n<p>The first is to pass a <tt>boto3.Session</tt> object as a transport parameter to the <tt>open</tt> function.\nYou can customize the credentials when constructing the session.\n<tt>smart_open</tt> will then use the session when talking to S3.</p>\n<pre><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span>\n    <span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"n\">ACCESS_KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"n\">SECRET_KEY</span><span class=\"p\">,</span>\n    <span class=\"n\">aws_session_token</span><span class=\"o\">=</span><span class=\"n\">SESSION_TOKEN</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://bucket/key'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">session</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Your second option is to specify the credentials within the S3 URL itself:</p>\n<pre><span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://aws_access_key_id:aws_secret_access_key@bucket/key'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><em>Important</em>: The two methods above are <strong>mutually exclusive</strong>. If you pass an AWS session <em>and</em> the URL contains credentials, <tt>smart_open</tt> will ignore the latter.</p>\n<p><em>Important</em>: <tt>smart_open</tt> ignores configuration files from the older <tt>boto</tt> library.\nPort your old <tt>boto</tt> settings to <tt>boto3</tt> in order to use them with <tt>smart_open</tt>.</p>\n</div>\n<div id=\"iterating-over-an-s3-bucket-s-contents\">\n<h3>Iterating Over an S3 Bucket\u2019s Contents</h3>\n<p>Since going over all (or select) keys in an S3 bucket is a very common operation, there\u2019s also an extra function <tt>smart_open.s3_iter_bucket()</tt> that does this efficiently, <strong>processing the bucket keys in parallel</strong> (using multiprocessing):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">smart_open</span> <span class=\"kn\">import</span> <span class=\"n\">s3_iter_bucket</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># get data corresponding to 2010 and later under \"silo-open-data/annual/monthly_rain\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># we use workers=1 for reproducibility; you should use as many workers as you have cores</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s1\">'silo-open-data'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'annual/monthly_rain/'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">s3_iter_bucket</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">accept_key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">'/201'</span> <span class=\"ow\">in</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">key_limit</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"n\">annual</span><span class=\"o\">/</span><span class=\"n\">monthly_rain</span><span class=\"o\">/</span><span class=\"mf\">2010.</span><span class=\"n\">monthly_rain</span><span class=\"o\">.</span><span class=\"n\">nc</span> <span class=\"mi\">13</span>\n<span class=\"n\">annual</span><span class=\"o\">/</span><span class=\"n\">monthly_rain</span><span class=\"o\">/</span><span class=\"mf\">2011.</span><span class=\"n\">monthly_rain</span><span class=\"o\">.</span><span class=\"n\">nc</span> <span class=\"mi\">13</span>\n<span class=\"n\">annual</span><span class=\"o\">/</span><span class=\"n\">monthly_rain</span><span class=\"o\">/</span><span class=\"mf\">2012.</span><span class=\"n\">monthly_rain</span><span class=\"o\">.</span><span class=\"n\">nc</span> <span class=\"mi\">13</span>\n</pre>\n</div>\n<div id=\"specific-s3-object-version\">\n<h3>Specific S3 object version</h3>\n<p>The <tt>version_id</tt> transport parameter enables you to get the desired version of the object from an S3 bucket.</p>\n<div>\n<p>Important</p>\n<p>S3 disables version control by default.\nBefore using the <tt>version_id</tt> parameter, you must explicitly enable version control for your S3 bucket.\nRead <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html\" rel=\"nofollow\">https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html</a> for details.</p>\n</div>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Read previous versions of an object in a versioned bucket</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">'smart-open-versioned'</span><span class=\"p\">,</span> <span class=\"s1\">'demo.txt'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">versions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'s3'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Bucket</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">object_versions</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Prefix</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">versions</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'version_id'</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()))</span>\n<span class=\"n\">KiQpZPsKI5Dm2oJZy_RzskTOtl2snjBg</span> <span class=\"s1\">'second version</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"n\">N0GJcE3TQCKtkaS</span><span class=\"o\">.</span><span class=\"n\">gF</span><span class=\"o\">.</span><span class=\"n\">MUBZS85Gs3hzn</span> <span class=\"s1\">'first version</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If you don't specify a version, smart_open will read the most recent one</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'s3://</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()))</span>\n<span class=\"s1\">'second version</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n</div>\n<div id=\"gcs-credentials\">\n<h3>GCS Credentials</h3>\n<p><tt>smart_open</tt> uses the <tt><span class=\"pre\">google-cloud-storage</span></tt> library to talk to GCS.\n<tt><span class=\"pre\">google-cloud-storage</span></tt> uses the <tt><span class=\"pre\">google-cloud</span></tt> package under the hood to handle authentication.\nThere are several <a href=\"https://google-cloud-python.readthedocs.io/en/0.32.0/core/auth.html\" rel=\"nofollow\">options</a> to provide\ncredentials.\nBy default, <tt>smart_open</tt> will defer to <tt><span class=\"pre\">google-cloud-storage</span></tt> and let it take care of the credentials.</p>\n<p>To override this behavior, pass a <tt>google.cloud.storage.Client</tt> object as a transport parameter to the <tt>open</tt> function.\nYou can <a href=\"https://google-cloud-python.readthedocs.io/en/0.32.0/core/client.html\" rel=\"nofollow\">customize the credentials</a>\nwhen constructing the client. <tt>smart_open</tt> will then use the client when talking to GCS. To follow allow with\nthe example below, <a href=\"https://cloud.google.com/storage/docs/reference/libraries#setting_up_authentication\" rel=\"nofollow\">refer to Google\u2019s guide</a>\nto setting up GCS authentication with a service account.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.cloud.storage</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"n\">service_account_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'GOOGLE_APPLICATION_CREDENTIALS'</span><span class=\"p\">]</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"o\">.</span><span class=\"n\">from_service_account_json</span><span class=\"p\">(</span><span class=\"n\">service_account_path</span><span class=\"p\">)</span>\n<span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'gs://gcp-public-data-landsat/index.csv.gz'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">))</span>\n</pre>\n<p>If you need more credential options, you can create an explicit <tt>google.auth.credentials.Credentials</tt> object\nand pass it to the Client. To create an API token for use in the example below, refer to the\n<a href=\"https://cloud.google.com/storage/docs/authentication#apiauth\" rel=\"nofollow\">GCS authentication guide</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.auth.credentials</span> <span class=\"kn\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">google.cloud.storage</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'GOOGLE_API_TOKEN'</span><span class=\"p\">]</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n<span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'gs://gcp-public-data-landsat/index.csv.gz'</span><span class=\"p\">,</span> <span class=\"n\">transport_params</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"file-like-binary-streams\">\n<h3>File-like Binary Streams</h3>\n<p>The <tt>open</tt> function also accepts file-like objects.\nThis is useful when you already have a <a href=\"https://docs.python.org/3/glossary.html#term-binary-file\" rel=\"nofollow\">binary file</a> open, and would like to wrap it with transparent decompression:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">io</span><span class=\"o\">,</span> <span class=\"nn\">gzip</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Prepare some gzipped binary data in memory, as an example.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Any binary file will do; we're using BytesIO here for simplicity.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">GzipFile</span><span class=\"p\">(</span><span class=\"n\">fileobj</span><span class=\"o\">=</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'this is a bytestring'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Use case starts here.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'file.gz'</span>  <span class=\"c1\"># add a .name attribute so smart_open knows what compressor to use</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">smart_open</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">smart_open</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>  <span class=\"c1\"># will gzip-decompress transparently!</span>\n<span class=\"sa\">b</span><span class=\"s1\">'this is a bytestring'</span>\n</pre>\n<p>In this case, <tt>smart_open</tt> relied on the <tt>.name</tt> attribute of our <a href=\"https://docs.python.org/3/library/io.html#binary-i-o\" rel=\"nofollow\">binary I/O stream</a> <tt>buf</tt> object to determine which decompressor to use.\nIf your file object doesn\u2019t have one, set the <tt>.name</tt> attribute to an appropriate value.\nFurthermore, that value has to end with a <strong>known</strong> file extension (see the <tt>register_compressor</tt> function).\nOtherwise, the transparent decompression will not occur.</p>\n</div>\n<div id=\"drop-in-replacement-of-pathlib-path-open\">\n<h3>Drop-in replacement of <tt>pathlib.Path.open</tt></h3>\n<p><tt>smart_open.open</tt> can also be used with <tt>Path</tt> objects.\nThe built-in <cite>Path.open()</cite> is not able to read text from compressed files, so use <tt>patch_pathlib</tt> to replace it with <cite>smart_open.open()</cite> instead.\nThis can be helpful when e.g. working with compressed files.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">smart_open.smart_open_lib</span> <span class=\"kn\">import</span> <span class=\"n\">patch_pathlib</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">patch_pathlib</span><span class=\"p\">()</span>  <span class=\"c1\"># replace `Path.open` with `smart_open.open`</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"smart_open/tests/test_data/crime-and-punishment.txt.gz\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">infile</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">infile</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">()[:</span><span class=\"mi\">41</span><span class=\"p\">])</span>\n<span class=\"n\">\u0412</span> <span class=\"n\">\u043d\u0430\u0447\u0430\u043b\u0435</span> <span class=\"n\">\u0438\u044e\u043b\u044f</span><span class=\"p\">,</span> <span class=\"n\">\u0432</span> <span class=\"n\">\u0447\u0440\u0435\u0437\u0432\u044b\u0447\u0430\u0439\u043d\u043e</span> <span class=\"n\">\u0436\u0430\u0440\u043a\u043e\u0435</span> <span class=\"n\">\u0432\u0440\u0435\u043c\u044f</span>\n</pre>\n</div>\n</div>\n<div id=\"extending-smart-open\">\n<h2>Extending <tt>smart_open</tt></h2>\n<p>See <a href=\"extending.md\" rel=\"nofollow\">this document</a>.</p>\n</div>\n<div id=\"comments-bug-reports\">\n<h2>Comments, bug reports</h2>\n<p><tt>smart_open</tt> lives on <a href=\"https://github.com/RaRe-Technologies/smart_open\" rel=\"nofollow\">Github</a>. You can file\nissues or pull requests there. Suggestions, pull requests and improvements welcome!</p>\n<hr class=\"docutils\">\n<p><tt>smart_open</tt> is open source software released under the <a href=\"https://github.com/piskvorky/smart_open/blob/master/LICENSE\" rel=\"nofollow\">MIT license</a>.\nCopyright (c) 2015-now <a href=\"https://radimrehurek.com\" rel=\"nofollow\">Radim \u0158eh\u016f\u0159ek</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7116399, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fed3c95d8a462b9b219a191575ce5c0a", "sha256": "9032a6ef33b6db95a1e5ecd3a3ae84b3c8060795aec34b984dd5c0e666acc00c"}, "downloads": -1, "filename": "smart_open-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fed3c95d8a462b9b219a191575ce5c0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10712, "upload_time": "2015-01-20T18:12:29", "upload_time_iso_8601": "2015-01-20T18:12:29.617663Z", "url": "https://files.pythonhosted.org/packages/0b/eb/519d2557939dc24692ec99b5111e9755d6ca68e9a96f5d9e99fea2ccb492/smart_open-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4d908a9e2fb02f488b53c4006c0b8d18", "sha256": "6992b41b8d8e5108944e5a8452f3dbc2a2660b574d79f0963acc91edf359e63e"}, "downloads": -1, "filename": "smart_open-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4d908a9e2fb02f488b53c4006c0b8d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11238, "upload_time": "2015-01-24T15:54:45", "upload_time_iso_8601": "2015-01-24T15:54:45.931722Z", "url": "https://files.pythonhosted.org/packages/af/fb/490c361d1b5244fb78f3d2bcebe965b66c6cf706b38176e84fc9e5a87370/smart_open-0.1.1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a2936eb0f3bd5835f756beb58d130fe5", "sha256": "7bb58d8ddecbf7151f6d0d9c4938bc209d9b90a124914e05f46ada3edc6b40a2"}, "downloads": -1, "filename": "smart_open-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a2936eb0f3bd5835f756beb58d130fe5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13303, "upload_time": "2015-01-25T14:28:25", "upload_time_iso_8601": "2015-01-25T14:28:25.402229Z", "url": "https://files.pythonhosted.org/packages/53/88/b4c537201880f938af04424fb4e8e68c56487df5fb5c453ce7599dd1d58e/smart_open-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3fdf751f6f9165defa7bb93d6c3a7a22", "sha256": "e6c111cd2e5288c0badcd86ee43570cfa0db0cb83ae03d056a06abd391d82ab6"}, "downloads": -1, "filename": "smart_open-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3fdf751f6f9165defa7bb93d6c3a7a22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13333, "upload_time": "2015-01-25T21:50:45", "upload_time_iso_8601": "2015-01-25T21:50:45.610994Z", "url": "https://files.pythonhosted.org/packages/f5/52/e31f2814073d85bff0742121ef84e5f64a0ec1a97e7e8f585d485ab1c18e/smart_open-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e10b2e93b1396812d598541fc7d2d221", "sha256": "dc8f53c4f9d358fe4ca226ca28a24e9ca414485a52450f69d90f309c78a8ab3d"}, "downloads": -1, "filename": "smart_open-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e10b2e93b1396812d598541fc7d2d221", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13095, "upload_time": "2015-02-01T12:35:37", "upload_time_iso_8601": "2015-02-01T12:35:37.157837Z", "url": "https://files.pythonhosted.org/packages/cf/88/15db25dc09a752ec9e6a2ea1043f1cac91a9e3e2297cd1ac8bd6df2baf6e/smart_open-1.1.0.tar.gz", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "15b4546d84c4efdc2c869a436bd2520f", "sha256": "bea5624c0c2e49987c227bdf3596573157eccd96fd1d53198856c8d53948fa2c"}, "downloads": -1, "filename": "smart_open-1.10.0.tar.gz", "has_sig": false, "md5_digest": "15b4546d84c4efdc2c869a436bd2520f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99188, "upload_time": "2020-03-16T11:59:37", "upload_time_iso_8601": "2020-03-16T11:59:37.006236Z", "url": "https://files.pythonhosted.org/packages/6e/14/47cf88d290e4681be35f3b6e8889ba26ed809a0ba14336dc8ae46ffcfda8/smart_open-1.10.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "b36e34bd777c771695dc64ea1c92973e", "sha256": "c1a65a9b59e2d76626d81c483180733feb763570224239e4ea9ffd836651b131"}, "downloads": -1, "filename": "smart_open-1.10.1.tar.gz", "has_sig": false, "md5_digest": "b36e34bd777c771695dc64ea1c92973e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92788, "upload_time": "2020-04-26T04:57:08", "upload_time_iso_8601": "2020-04-26T04:57:08.107069Z", "url": "https://files.pythonhosted.org/packages/62/56/f7ce76c281a8a0dd8a8f5fcfeadcde1b817f80bc85ad903f1264dbdf38ad/smart_open-1.10.1.tar.gz", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "f7fe41bcb8cc773111dcae10e4c88e9d", "sha256": "813ec7fe54a0f6589699ffee105b04940c49dc5a8b06cf14a8b52f6924802299"}, "downloads": -1, "filename": "smart_open-1.11.0.tar.gz", "has_sig": false, "md5_digest": "f7fe41bcb8cc773111dcae10e4c88e9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101823, "upload_time": "2020-04-08T10:04:27", "upload_time_iso_8601": "2020-04-08T10:04:27.162624Z", "url": "https://files.pythonhosted.org/packages/cb/87/04d1d7ad81a4084741505416e1ac4891f703a2b766a7846b795f215a23c1/smart_open-1.11.0.tar.gz", "yanked": false}], "1.11.1": [{"comment_text": "", "digests": {"md5": "c485f3f2ae1ece45abdd09db7c891d62", "sha256": "221cc08ae926af6ad72d141f208d228e1e801b1ee9b15f3e466eecf89d931002"}, "downloads": -1, "filename": "smart_open-1.11.1.tar.gz", "has_sig": false, "md5_digest": "c485f3f2ae1ece45abdd09db7c891d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105305, "upload_time": "2020-04-08T13:32:35", "upload_time_iso_8601": "2020-04-08T13:32:35.570377Z", "url": "https://files.pythonhosted.org/packages/5d/13/a2db017db801d0157fdc41814658396e6ae398d06adf69d73df1c8175b5d/smart_open-1.11.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4335e8243d6ecad7508b7397c796eb36", "sha256": "65dfac1c3c0323169720027cd3c92f73e15c282a04abe9c0e558f6c56cca9d4f"}, "downloads": -1, "filename": "smart_open-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4335e8243d6ecad7508b7397c796eb36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14924, "upload_time": "2015-04-09T22:11:49", "upload_time_iso_8601": "2015-04-09T22:11:49.715658Z", "url": "https://files.pythonhosted.org/packages/14/57/20dce68819f9434b75447d6ba5cbae17338dab1b04186cbfe4cea6d05fd1/smart_open-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "34827a5211a777ce584d2fe73f5cb28d", "sha256": "9b075374de5c51b03603d764e53b987cd532287e219da7b67dce5e3eebfdcc22"}, "downloads": -1, "filename": "smart_open-1.2.1.tar.gz", "has_sig": false, "md5_digest": "34827a5211a777ce584d2fe73f5cb28d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15031, "upload_time": "2015-04-10T20:52:28", "upload_time_iso_8601": "2015-04-10T20:52:28.315413Z", "url": "https://files.pythonhosted.org/packages/e2/68/085829bfdc82e47ecb26216a6a95294775dc0252ca2acd0993d83d1b49a3/smart_open-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "76d7a73c2117aa6065562d0f1df91fb8", "sha256": "e667fbfe210e8e0bab6309ae12622fcc359fbc57c231419ddf13be383472b4c1"}, "downloads": -1, "filename": "smart_open-1.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "76d7a73c2117aa6065562d0f1df91fb8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 18979, "upload_time": "2015-09-19T09:53:00", "upload_time_iso_8601": "2015-09-19T09:53:00.896044Z", "url": "https://files.pythonhosted.org/packages/2e/f1/695725cce6a5ded3117294f6c9cbbce29ecca328a1507435c91fa2689d10/smart_open-1.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8716ba58063e9a6b259b9280b8106ddc", "sha256": "5d5d54de6330c52b71dff09a8845661013da6ff2c7acb722a0d4fc52bfd940d5"}, "downloads": -1, "filename": "smart_open-1.3.0.tar.gz", "has_sig": false, "md5_digest": "8716ba58063e9a6b259b9280b8106ddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14795, "upload_time": "2015-09-19T09:52:54", "upload_time_iso_8601": "2015-09-19T09:52:54.826174Z", "url": "https://files.pythonhosted.org/packages/3c/9d/df3bfe8bfb9b58b3cf21a90017b1dc1e488075d0a38cf89755091b30575a/smart_open-1.3.0.tar.gz", "yanked": false}], "1.3.0rc1": [{"comment_text": "", "digests": {"md5": "36fc3d7b68c3b818f0261ded7dc52a5e", "sha256": "2c9c738599a58331ba7b6536521872629ba941869eb1039acfcd3c407f7759b1"}, "downloads": -1, "filename": "smart_open-1.3.0rc1-py2-none-any.whl", "has_sig": false, "md5_digest": "36fc3d7b68c3b818f0261ded7dc52a5e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 19338, "upload_time": "2015-09-17T04:25:16", "upload_time_iso_8601": "2015-09-17T04:25:16.009500Z", "url": "https://files.pythonhosted.org/packages/6e/aa/9bea760a1ceea95528c9334f3f445ad4d5b7f54059ccf689bb6c57b88045/smart_open-1.3.0rc1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79e9f52df050fc4401c4cc8b0fe3a604", "sha256": "5bb5bc74e9906a9bfe69675ec38a2729d1b76c7e8d6e22a5395e409744da80ef"}, "downloads": -1, "filename": "smart_open-1.3.0rc1.tar.gz", "has_sig": false, "md5_digest": "79e9f52df050fc4401c4cc8b0fe3a604", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16853, "upload_time": "2015-09-17T04:25:11", "upload_time_iso_8601": "2015-09-17T04:25:11.533203Z", "url": "https://files.pythonhosted.org/packages/bc/4b/3c844856f311996e9d91f720cc0e4288a14b2b14d6450d00e8aa792c756c/smart_open-1.3.0rc1.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "17984f84557a845dd8eec67e943ed813", "sha256": "1fcd40c6c91c2933cff1189a7432d086ce968fa6b2f86e3bb7a4568afaa7482c"}, "downloads": -1, "filename": "smart_open-1.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "17984f84557a845dd8eec67e943ed813", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 19479, "upload_time": "2015-12-18T05:34:52", "upload_time_iso_8601": "2015-12-18T05:34:52.985679Z", "url": "https://files.pythonhosted.org/packages/02/82/7c701423ae56631794680e5bb80d372205f260be5376b8cbd333d18baf3b/smart_open-1.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8f3b5e5da9122f3b697b59706089fae", "sha256": "bc5229277b4cd400387252d5c77ed6df7b842245006c1207fd7a864a1410200c"}, "downloads": -1, "filename": "smart_open-1.3.1.tar.gz", "has_sig": false, "md5_digest": "d8f3b5e5da9122f3b697b59706089fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15271, "upload_time": "2015-12-18T05:34:46", "upload_time_iso_8601": "2015-12-18T05:34:46.164122Z", "url": "https://files.pythonhosted.org/packages/6e/27/803fe094415ffad16a648e76585ead6c9368e5eb1982f8bbec6a72abb741/smart_open-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "460dce8c67a991449106d71436b3bdac", "sha256": "4a4eb3b37c55913a2b1039105661eb8019a0f053d356a498261beb0a113661ae"}, "downloads": -1, "filename": "smart_open-1.3.2-py2-none-any.whl", "has_sig": false, "md5_digest": "460dce8c67a991449106d71436b3bdac", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 19633, "upload_time": "2016-01-03T20:54:22", "upload_time_iso_8601": "2016-01-03T20:54:22.904484Z", "url": "https://files.pythonhosted.org/packages/0b/c6/fede91b20d8eceb3e8d3dfe00b637f05eebf521d9cd695f41e9b229725e3/smart_open-1.3.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "616e154b4d6e4c9826639a762541817a", "sha256": "b4cc3cb314b783f39e6b7948a296bddae69607f20727170d3157f639e24e796d"}, "downloads": -1, "filename": "smart_open-1.3.2.tar.gz", "has_sig": false, "md5_digest": "616e154b4d6e4c9826639a762541817a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15332, "upload_time": "2016-01-03T20:54:17", "upload_time_iso_8601": "2016-01-03T20:54:17.190182Z", "url": "https://files.pythonhosted.org/packages/2c/c5/63ec74644fecec1be3452ed5de68fd9307c29947f7b4f3060787be4bb398/smart_open-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "7e836c504ad49ce29f260d8fd562ea12", "sha256": "ac4d36bcfd066749df13263b57bb52eabe4f7b6bb147ee761faf8d3b8d8c0a19"}, "downloads": -1, "filename": "smart_open-1.3.3.tar.gz", "has_sig": false, "md5_digest": "7e836c504ad49ce29f260d8fd562ea12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15768, "upload_time": "2016-05-16T06:19:58", "upload_time_iso_8601": "2016-05-16T06:19:58.222830Z", "url": "https://files.pythonhosted.org/packages/29/9b/a49e646d1ab4b7e7d1005ce5cf7089ad97f80587db438279eb9bedb9c071/smart_open-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "6639ac1464960a932aafbe1bed7a76b1", "sha256": "f38f87af7d2361a41a030e1ed56c7904a920b9c78e8cb2c07156b984b424e877"}, "downloads": -1, "filename": "smart_open-1.3.4.tar.gz", "has_sig": false, "md5_digest": "6639ac1464960a932aafbe1bed7a76b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19288, "upload_time": "2016-08-26T16:31:35", "upload_time_iso_8601": "2016-08-26T16:31:35.378430Z", "url": "https://files.pythonhosted.org/packages/f2/0a/8f5d4643f8c11935b5465d1418bcae47456857ba9ccad6032015b06cc343/smart_open-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "2d1fa810944f460771c18a4c5f9e9f9d", "sha256": "379bec2c08c518a30fe58e781abcae8d4e58bc0024c950f13d55ebcc899e3aba"}, "downloads": -1, "filename": "smart_open-1.3.5.tar.gz", "has_sig": false, "md5_digest": "2d1fa810944f460771c18a4c5f9e9f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21134, "upload_time": "2016-10-05T14:23:36", "upload_time_iso_8601": "2016-10-05T14:23:36.077043Z", "url": "https://files.pythonhosted.org/packages/31/c6/8cd458232efffabc2b53c4f53beec04b02368d7d4724f6c88da27d1bbc91/smart_open-1.3.5.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "369e129872a09c59a1b688774fe77f96", "sha256": "fefd5af9be72ffc29d2819521afcc317aebaf33a1b43d0c3d715ab43ac745030"}, "downloads": -1, "filename": "smart_open-1.4.0.tar.gz", "has_sig": false, "md5_digest": "369e129872a09c59a1b688774fe77f96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25986, "upload_time": "2017-02-13T23:46:08", "upload_time_iso_8601": "2017-02-13T23:46:08.650875Z", "url": "https://files.pythonhosted.org/packages/5a/2b/31ab8a2ded303c5278948fdfe0fa53b4da73ed920dd9f802762319314277/smart_open-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "7321479fdb62c34f3d41ea00ce2ce1d3", "sha256": "56939e34ea23b9065a11151d26d48a45d63b395c55d91c510dc785ea36004610"}, "downloads": -1, "filename": "smart_open-1.5.0.tar.gz", "has_sig": false, "md5_digest": "7321479fdb62c34f3d41ea00ce2ce1d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27394, "upload_time": "2017-03-14T17:56:43", "upload_time_iso_8601": "2017-03-14T17:56:43.207431Z", "url": "https://files.pythonhosted.org/packages/b2/74/cc033d0d62cbb691f7d1f224779ae30c9f936209b4c2f744b02ecfc032f6/smart_open-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "1b266e15a90d94556fe82e0e33f8c5c3", "sha256": "c5d43f71c5a8cae146bbfdd186d0a29c1cd4286cb69902e0cd3b1cd2aa7bf0b9"}, "downloads": -1, "filename": "smart_open-1.5.1.tar.gz", "has_sig": false, "md5_digest": "1b266e15a90d94556fe82e0e33f8c5c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27835, "upload_time": "2017-03-17T00:22:59", "upload_time_iso_8601": "2017-03-17T00:22:59.661735Z", "url": "https://files.pythonhosted.org/packages/0b/ef/4712cf0bfefa155cf1e270569834fae1c8c6ddec8331eceffcd0ee035bea/smart_open-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "1ae4eae45c13eed4336a60ba24192578", "sha256": "231ed7aa30d077c6a2d373fce2858d496db18f1d4b6b2403e875551953347cda"}, "downloads": -1, "filename": "smart_open-1.5.2.tar.gz", "has_sig": false, "md5_digest": "1ae4eae45c13eed4336a60ba24192578", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28391, "upload_time": "2017-04-12T12:24:36", "upload_time_iso_8601": "2017-04-12T12:24:36.352910Z", "url": "https://files.pythonhosted.org/packages/b3/f4/17b0a41471ee8e9009c260f214b66cf166dc2d7f18ddb82450e09724f663/smart_open-1.5.2.tar.gz", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "bab309ed64bed9e5e9dcd4f6940dd26e", "sha256": "fad4669acc2e6eb290b87265813cdb767e455e5f60f34af609da0c775c38b254"}, "downloads": -1, "filename": "smart_open-1.5.3.tar.gz", "has_sig": false, "md5_digest": "bab309ed64bed9e5e9dcd4f6940dd26e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29689, "upload_time": "2017-05-18T18:51:15", "upload_time_iso_8601": "2017-05-18T18:51:15.436767Z", "url": "https://files.pythonhosted.org/packages/26/2b/d04b2ca735d731b13af9fdf4203c4c335e67fb39367ae2ecfd916e04776d/smart_open-1.5.3.tar.gz", "yanked": false}], "1.5.4": [{"comment_text": "", "digests": {"md5": "ad485f743c637369e49d2389a0e5391e", "sha256": "62511deb86115d14b02e940c070513bfb96798bf703a5b01261b2a8052462ff3"}, "downloads": -1, "filename": "smart_open-1.5.4.tar.gz", "has_sig": false, "md5_digest": "ad485f743c637369e49d2389a0e5391e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32550, "upload_time": "2017-11-30T11:29:47", "upload_time_iso_8601": "2017-11-30T11:29:47.102007Z", "url": "https://files.pythonhosted.org/packages/83/aa/b9fa1bddaff92e63df3b4e8d56f2844e34b73b98c2dd933021115574da6b/smart_open-1.5.4.tar.gz", "yanked": false}], "1.5.5": [{"comment_text": "", "digests": {"md5": "a19a828e58fa78e7d60a40df51ae2804", "sha256": "9e2591241e92f552cf4225b1b70bbaeace0122fd9068bfc769567aeb947e1a4e"}, "downloads": -1, "filename": "smart_open-1.5.5.tar.gz", "has_sig": false, "md5_digest": "a19a828e58fa78e7d60a40df51ae2804", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31980, "upload_time": "2017-12-06T10:24:20", "upload_time_iso_8601": "2017-12-06T10:24:20.896195Z", "url": "https://files.pythonhosted.org/packages/fb/c9/fa4099bf0818edc38fcb04db7b905227d5bbffccfce71e90bc42e52d56e7/smart_open-1.5.5.tar.gz", "yanked": false}], "1.5.6": [{"comment_text": "", "digests": {"md5": "a0fa44a3904613d32bc5be5743761a0b", "sha256": "8fd2de1c359bd0074bd6d334a5b9820ae1c5b6ba563970b95052bace4b71baeb"}, "downloads": -1, "filename": "smart_open-1.5.6.tar.gz", "has_sig": false, "md5_digest": "a0fa44a3904613d32bc5be5743761a0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32352, "upload_time": "2017-12-28T07:18:50", "upload_time_iso_8601": "2017-12-28T07:18:50.914384Z", "url": "https://files.pythonhosted.org/packages/26/48/c0049103ab16beef1ccb673df930e1e3807424a4d4392e0ef8138eb1cd90/smart_open-1.5.6.tar.gz", "yanked": false}], "1.5.7": [{"comment_text": "", "digests": {"md5": "164333feaf4e47dfb03095e6d12f28a2", "sha256": "f7b48789ffbbb73108fa3bf5f5431958611c752a56bc93ab9ffdf5de6e122c78"}, "downloads": -1, "filename": "smart_open-1.5.7.tar.gz", "has_sig": false, "md5_digest": "164333feaf4e47dfb03095e6d12f28a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32390, "upload_time": "2018-03-18T10:28:20", "upload_time_iso_8601": "2018-03-18T10:28:20.213316Z", "url": "https://files.pythonhosted.org/packages/4b/69/c92661a333f733510628f28b8282698b62cdead37291c8491f3271677c02/smart_open-1.5.7.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "5c0ad91adc863bd5d81b6aa869b41b66", "sha256": "c2c2b44125a03d6e96efdf3e53e28be99e1f548e8a4fa8035f8fab448bbdbbda"}, "downloads": -1, "filename": "smart_open-1.6.0.tar.gz", "has_sig": false, "md5_digest": "5c0ad91adc863bd5d81b6aa869b41b66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37047, "upload_time": "2018-06-29T13:46:09", "upload_time_iso_8601": "2018-06-29T13:46:09.627840Z", "url": "https://files.pythonhosted.org/packages/cf/3d/5f3a9a296d0ba8e00e263a8dee76762076b9eb5ddc254ccaa834651c8d65/smart_open-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "da0096607dbf792572661aede18b10ad", "sha256": "783cfb1248019596081f12fd6af63c1132fdd4bdb72630092a63ba08b1a9ba94"}, "downloads": -1, "filename": "smart_open-1.7.0.tar.gz", "has_sig": false, "md5_digest": "da0096607dbf792572661aede18b10ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38185, "upload_time": "2018-09-19T02:49:08", "upload_time_iso_8601": "2018-09-19T02:49:08.471213Z", "url": "https://files.pythonhosted.org/packages/02/d7/119c281f6a3c4da8228228d7a9b220fdab5318fd4223d84303c8077b443f/smart_open-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "440cf8216b7f03ff38e6c57ada4730c5", "sha256": "57c568d104c37dbdf5598c41e94b5b143c38dd275bc2856242b8597cfede9453"}, "downloads": -1, "filename": "smart_open-1.7.1.tar.gz", "has_sig": false, "md5_digest": "440cf8216b7f03ff38e6c57ada4730c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38198, "upload_time": "2018-09-19T16:19:54", "upload_time_iso_8601": "2018-09-19T16:19:54.502475Z", "url": "https://files.pythonhosted.org/packages/4b/1f/6f27e3682124de63ac97a0a5876da6186de6c19410feab66c1543afab055/smart_open-1.7.1.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "43415e6bb245e679cdd04097a62eb288", "sha256": "a52206bb69c38c5f08709ec2ee5704b0f86fc0a770935b5dad9b5841bfd5f502"}, "downloads": -1, "filename": "smart_open-1.8.0.tar.gz", "has_sig": false, "md5_digest": "43415e6bb245e679cdd04097a62eb288", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40713, "upload_time": "2019-01-17T08:37:32", "upload_time_iso_8601": "2019-01-17T08:37:32.656143Z", "url": "https://files.pythonhosted.org/packages/ff/c8/de7dcf34d4b5f2ae94fe1055e0d6418fb97a63c9dc3428edd264704983a2/smart_open-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "8c247f86ae7150b4dce06768a5d0b4db", "sha256": "b154d2118b7493935f9ede71b6b48fd3bfcb94f7e423877e57b48af429af6828"}, "downloads": -1, "filename": "smart_open-1.8.1.tar.gz", "has_sig": false, "md5_digest": "8c247f86ae7150b4dce06768a5d0b4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48083, "upload_time": "2019-04-09T13:22:20", "upload_time_iso_8601": "2019-04-09T13:22:20.398781Z", "url": "https://files.pythonhosted.org/packages/27/90/39f18b9258cd76e98df581213a2b7a393b426821e920f1e820e525f54ed4/smart_open-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "d748752e64d62775a0fb4d4edde38b57", "sha256": "d3c16477ad7e8f94ab033630ea31993670ad21153172367db1acb143077d501c"}, "downloads": -1, "filename": "smart_open-1.8.2.tar.gz", "has_sig": false, "md5_digest": "d748752e64d62775a0fb4d4edde38b57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57091, "upload_time": "2019-04-17T12:01:05", "upload_time_iso_8601": "2019-04-17T12:01:05.210870Z", "url": "https://files.pythonhosted.org/packages/ce/ae/6aca9384ac0b47acc6f74dc429bd425fb75ff5d6d7f9179698f111dc0631/smart_open-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "ee19f8354af3657dafddb8dbea3e20ff", "sha256": "305aee26b4fcc68f6ef8a8a851f27335b8b81bb9f2f030fd2574276cb4052b09"}, "downloads": -1, "filename": "smart_open-1.8.3.tar.gz", "has_sig": false, "md5_digest": "ee19f8354af3657dafddb8dbea3e20ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60936, "upload_time": "2019-04-26T07:25:44", "upload_time_iso_8601": "2019-04-26T07:25:44.879363Z", "url": "https://files.pythonhosted.org/packages/bf/ba/7eaf3c0dbe601c43d88e449dcd7b61d385fe07c0167163f63f58ece7c1b5/smart_open-1.8.3.tar.gz", "yanked": false}], "1.8.4": [{"comment_text": "", "digests": {"md5": "acb30ea7e709cc3a76423c017ee078a9", "sha256": "788e07f035defcbb62e3c1e313329a70b0976f4f65406ee767db73ad5d2d04f9"}, "downloads": -1, "filename": "smart_open-1.8.4.tar.gz", "has_sig": false, "md5_digest": "acb30ea7e709cc3a76423c017ee078a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63648, "upload_time": "2019-06-02T09:53:19", "upload_time_iso_8601": "2019-06-02T09:53:19.723423Z", "url": "https://files.pythonhosted.org/packages/37/c0/25d19badc495428dec6a4bf7782de617ee0246a9211af75b302a2681dea7/smart_open-1.8.4.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "dc32bddfc012f580f1035d32a1d4d772", "sha256": "e64c2b5e62a452fa7fc4d21aecbada826ca21097bbe117841f8f4fc53dbab676"}, "downloads": -1, "filename": "smart_open-1.9.0.tar.gz", "has_sig": false, "md5_digest": "dc32bddfc012f580f1035d32a1d4d772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70582, "upload_time": "2019-11-03T07:53:06", "upload_time_iso_8601": "2019-11-03T07:53:06.201718Z", "url": "https://files.pythonhosted.org/packages/0c/09/735f2786dfac9bbf39d244ce75c0313d27d4962e71e0774750dc809f2395/smart_open-1.9.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "3887584a42ad3f411220f8097ef10713", "sha256": "555962abf982faff8a8aeb65e0695474e3091f604826055782beffa8400e4e4e"}, "downloads": -1, "filename": "smart_open-2.0.0.tar.gz", "has_sig": false, "md5_digest": "3887584a42ad3f411220f8097ef10713", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.*", "size": 103982, "upload_time": "2020-04-28T01:42:58", "upload_time_iso_8601": "2020-04-28T01:42:58.236356Z", "url": "https://files.pythonhosted.org/packages/74/77/744c79da6e66691e3500b6dffff29bdd787015eae817d594791edc7b719b/smart_open-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3887584a42ad3f411220f8097ef10713", "sha256": "555962abf982faff8a8aeb65e0695474e3091f604826055782beffa8400e4e4e"}, "downloads": -1, "filename": "smart_open-2.0.0.tar.gz", "has_sig": false, "md5_digest": "3887584a42ad3f411220f8097ef10713", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.*", "size": 103982, "upload_time": "2020-04-28T01:42:58", "upload_time_iso_8601": "2020-04-28T01:42:58.236356Z", "url": "https://files.pythonhosted.org/packages/74/77/744c79da6e66691e3500b6dffff29bdd787015eae817d594791edc7b719b/smart_open-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:01 2020"}