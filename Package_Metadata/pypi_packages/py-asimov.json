{"info": {"author": "The Asimov Foundation", "author_email": "ericsgy@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## Introduction\n\nThis document describes how to develop python script to test and deploy contracts on Asimov using high level Python API.\n\n## Dependency\n\n### Install Python Environment\n\nBefore running python script, you need to install python and set up your virtual environment. \nFollow instructions on [python.org](https://www.python.org/) and [pyenv](https://github.com/pyenv/pyenv) to finish the installation.\n<br>\nAsimov Python SDK has been fully tested on Python 3.7+.\n\n### Install secp256k1\nIt is an optimized C library for EC operations on curve secp256k1.\nFollow instructions on [specp256k1](https://github.com/bitcoin-core/secp256k1) to finish the installation. \n\n> You need to install automake on MacOS to run the scripts in secp256k1. Run `brew install automake`.\n\n> Note: If you see the error message like `Cannot import secp256k1: libsecp256k1.so.0: cannot open shared object file...`\n> when execute `pip install py-asimov`. You can add `LIBDIR` to the `LD_LIBRARY_PATH` environment variable like\n> `export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib` on Fedora/CentOS/RHEL. (Let's assume `LIBDIR` is `/usr/local/lib` in this case).\n\n### Install gmp for fastecdsa\nPy-Asimov use [fastecdsa](https://pypi.org/project/fastecdsa/) library for fast elliptic curve crypto.\nNote that you need to have a C compiler. You also need to have [GMP](https://gmplib.org/) on your system as the underlying C code in this package includes the `gmp.h` header (and links against gmp via the `-lgmp` flag). You can install all dependencies as follows:\n\n#### apt\n```shell script\n$ apt-get install python-dev libgmp3-dev\n```\n\n#### yum\n```shell script\n$ yum install python-devel gmp-devel\n```\n\n#### mac\n```shell script\n$ brew install gmp\n```\n\n### Install Asimov Python SDK\n\n```sh\npip install -i https://pypi.python.org/simple/ py-asimov\n```\n\nWe provide high level Python API through Python SDK. Please visit [Python API](https://doc.asimov.network/python/) to read api specifications.\n\n\n### Install Asimov Smart Contract Compiler\n\nFollow instructions on [Asimov](https://asimov.network) to finish the installation.\n\n\n## Tutorial\n\nWe provide a [tutorial.py](./examples/tutorial.py) to cover the most used functions in Python SDK, \nincluding ***submit template***, ***deploy contract***, ***execute/vote on contract methods***, \n***read contract states*** and ***check transaction status*** and so on.\n\nThe smart contract test against in the above script is [tutorial.sol](./examples/contracts/tutorial.sol). \n\n### Initialize Node Instance\n\n```python\nfrom asimov import Node\n\nnode = Node() \n```\n\n### Setup RPC Server and Private Key\n\n```python\n# set rpc server\nnode.set_rpc_server(\"http://seed.asimov.tech\")\n\n# set private key\nnode.set_private_key(\"your private key\")\n```\n\n### Submit Template\n```python\nfrom asimov import Template\nfrom asimov.constant import SUCCESS\n\n# initialize template instance\nt = Template(node)\n\n# submit a contract template to Asimov blockchain\ntx = t.submit(\"./contracts/tutorial.sol\", \"template_name\", 'Tutorial')\n\n# make sure the transaction is confirmed on chain before moving on to next step\nassert tx.check() is SUCCESS\n```\n\n### Deploy Contract\n\n```python\nfrom asimov import Contract\n\n# deploy a contract instance to Asimov blockchain\ndeploy_tx, contract_address = t.deploy_contract(tx.id)\n\n# make sure the transaction is confirmed on chain before moving on to next step\nassert tx.check() is SUCCESS\n\n# initialize contract instance\ncontract = Contract(node, contract_address)\n```\n\n### Execute Contract Methods\n\n```python\nfrom asimov import constant\n\n# mint asset\ntx = contract.execute(\"mint\", [10000 * constant.COIN])\n\n# make sure the transaction is confirmed on chain and the contract execution is successful\nassert tx.check() is constant.SUCCESS\n\n# call contract's read only function.We get new asset type and convert to string type.\nasset_type = Asset.asset2str(contract.read(\"assettype\"))\n\n# transfer asset\nassert contract.execute(\"transfer\", [node.address, 100 * constant.COIN]).check() is constant.SUCCESS\n\n```\n\n### Vote Contract Methods \n\n```python\n# call the vote method to vote using the utxo asset mint in the above step\nassert contract.vote(\"vote\", [88], 1, asset_type).check() is constant.SUCCESS\n```\n\n\n## Developer Setup\n\nIf you would like to hack on py-asimov, please follow these steps:\n\n- Testing\n- Pull Requests\n- Code Style\n- Documentation\n\n### Development Environment Setup\n\nYou can set up your dev environment with:\n\n```sh\ngit clone git@gitlab.asimov.work:asimov/asimov-python-sdk.git\ncd pyasimov\npyenv virtualenv 3.7.3 env-asimov\npyenv activate env-asimov\npip install -e .[dev]\n\n# If you're using zsh you need to escape square brackets: \npip install -e .\\[extra\\]\n```\n\n### Testing Setup\n\nDuring development, you might like to have tests run on every file save.\n\n```sh\n# in the project root:\nmake test\n```\n\n### Release setup\n\nTo release a new version:\n\n```sh\nmake release bump=$$VERSION_PART_TO_BUMP$$\n```\n\n#### How to bumpversion\n\nThe version format for this repo is `{major}.{minor}.{patch}` for stable\n\nTo issue the next version in line, specify which part to bump,\nlike `make release bump=minor` or `make release bump=patch`. This is typically done from the\nmaster branch. To include changes made with each release, update \"docs/releases.rst\" with the changes, \nand apply commit directly to master before release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.asimov.work/asimov/asimov-python-sdk", "keywords": "asimov", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "py-asimov", "package_url": "https://pypi.org/project/py-asimov/", "platform": "", "project_url": "https://pypi.org/project/py-asimov/", "project_urls": {"Homepage": "https://gitlab.asimov.work/asimov/asimov-python-sdk"}, "release_url": "https://pypi.org/project/py-asimov/0.3.0/", "requires_dist": ["fastecdsa (<2,>=1.7.4)", "web3 (<5,>=4.9.0)", "python-bitcointx (<2,>=1.0.1)", "requests (<3,>=2.22.0)", "py-solc (<4,>=3.2.0)", "pytest-watch (<5,>=4.2.0) ; extra == 'dev'", "ipython ; extra == 'dev'", "wheel ; extra == 'dev'", "twine ; extra == 'dev'", "bumpversion (<1,>=0.5.3) ; extra == 'dev'", "pytest (<6,>=5.2.2) ; extra == 'dev'", "pytest-cov (<3,>=2.8.1) ; extra == 'dev'", "tox (<4,>=3.15.0) ; extra == 'dev'", "Sphinx (<2,>=1.8.5) ; extra == 'dev'", "sphinx-rtd-theme (<1,>=0.4.3) ; extra == 'dev'", "Sphinx (<2,>=1.8.5) ; extra == 'doc'", "sphinx-rtd-theme (<1,>=0.4.3) ; extra == 'doc'", "pytest (<6,>=5.2.2) ; extra == 'test'", "pytest-cov (<3,>=2.8.1) ; extra == 'test'", "tox (<4,>=3.15.0) ; extra == 'test'"], "requires_python": ">=3.6, <4", "summary": "sdk for asimov chain", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Introduction</h2>\n<p>This document describes how to develop python script to test and deploy contracts on Asimov using high level Python API.</p>\n<h2>Dependency</h2>\n<h3>Install Python Environment</h3>\n<p>Before running python script, you need to install python and set up your virtual environment.\nFollow instructions on <a href=\"https://www.python.org/\" rel=\"nofollow\">python.org</a> and <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a> to finish the installation.\n<br>\nAsimov Python SDK has been fully tested on Python 3.7+.</p>\n<h3>Install secp256k1</h3>\n<p>It is an optimized C library for EC operations on curve secp256k1.\nFollow instructions on <a href=\"https://github.com/bitcoin-core/secp256k1\" rel=\"nofollow\">specp256k1</a> to finish the installation.</p>\n<blockquote>\n<p>You need to install automake on MacOS to run the scripts in secp256k1. Run <code>brew install automake</code>.</p>\n</blockquote>\n<blockquote>\n<p>Note: If you see the error message like <code>Cannot import secp256k1: libsecp256k1.so.0: cannot open shared object file...</code>\nwhen execute <code>pip install py-asimov</code>. You can add <code>LIBDIR</code> to the <code>LD_LIBRARY_PATH</code> environment variable like\n<code>export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib</code> on Fedora/CentOS/RHEL. (Let's assume <code>LIBDIR</code> is <code>/usr/local/lib</code> in this case).</p>\n</blockquote>\n<h3>Install gmp for fastecdsa</h3>\n<p>Py-Asimov use <a href=\"https://pypi.org/project/fastecdsa/\" rel=\"nofollow\">fastecdsa</a> library for fast elliptic curve crypto.\nNote that you need to have a C compiler. You also need to have <a href=\"https://gmplib.org/\" rel=\"nofollow\">GMP</a> on your system as the underlying C code in this package includes the <code>gmp.h</code> header (and links against gmp via the <code>-lgmp</code> flag). You can install all dependencies as follows:</p>\n<h4>apt</h4>\n<pre>$ apt-get install python-dev libgmp3-dev\n</pre>\n<h4>yum</h4>\n<pre>$ yum install python-devel gmp-devel\n</pre>\n<h4>mac</h4>\n<pre>$ brew install gmp\n</pre>\n<h3>Install Asimov Python SDK</h3>\n<pre>pip install -i https://pypi.python.org/simple/ py-asimov\n</pre>\n<p>We provide high level Python API through Python SDK. Please visit <a href=\"https://doc.asimov.network/python/\" rel=\"nofollow\">Python API</a> to read api specifications.</p>\n<h3>Install Asimov Smart Contract Compiler</h3>\n<p>Follow instructions on <a href=\"https://asimov.network\" rel=\"nofollow\">Asimov</a> to finish the installation.</p>\n<h2>Tutorial</h2>\n<p>We provide a <a href=\"./examples/tutorial.py\" rel=\"nofollow\">tutorial.py</a> to cover the most used functions in Python SDK,\nincluding <em><strong>submit template</strong></em>, <em><strong>deploy contract</strong></em>, <em><strong>execute/vote on contract methods</strong></em>,\n<em><strong>read contract states</strong></em> and <em><strong>check transaction status</strong></em> and so on.</p>\n<p>The smart contract test against in the above script is <a href=\"./examples/contracts/tutorial.sol\" rel=\"nofollow\">tutorial.sol</a>.</p>\n<h3>Initialize Node Instance</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asimov</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">()</span> \n</pre>\n<h3>Setup RPC Server and Private Key</h3>\n<pre><span class=\"c1\"># set rpc server</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">set_rpc_server</span><span class=\"p\">(</span><span class=\"s2\">\"http://seed.asimov.tech\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set private key</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">set_private_key</span><span class=\"p\">(</span><span class=\"s2\">\"your private key\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Submit Template</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asimov</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asimov.constant</span> <span class=\"kn\">import</span> <span class=\"n\">SUCCESS</span>\n\n<span class=\"c1\"># initialize template instance</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># submit a contract template to Asimov blockchain</span>\n<span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"s2\">\"./contracts/tutorial.sol\"</span><span class=\"p\">,</span> <span class=\"s2\">\"template_name\"</span><span class=\"p\">,</span> <span class=\"s1\">'Tutorial'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make sure the transaction is confirmed on chain before moving on to next step</span>\n<span class=\"k\">assert</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"n\">SUCCESS</span>\n</pre>\n<h3>Deploy Contract</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asimov</span> <span class=\"kn\">import</span> <span class=\"n\">Contract</span>\n\n<span class=\"c1\"># deploy a contract instance to Asimov blockchain</span>\n<span class=\"n\">deploy_tx</span><span class=\"p\">,</span> <span class=\"n\">contract_address</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">deploy_contract</span><span class=\"p\">(</span><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make sure the transaction is confirmed on chain before moving on to next step</span>\n<span class=\"k\">assert</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"n\">SUCCESS</span>\n\n<span class=\"c1\"># initialize contract instance</span>\n<span class=\"n\">contract</span> <span class=\"o\">=</span> <span class=\"n\">Contract</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">contract_address</span><span class=\"p\">)</span>\n</pre>\n<h3>Execute Contract Methods</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asimov</span> <span class=\"kn\">import</span> <span class=\"n\">constant</span>\n\n<span class=\"c1\"># mint asset</span>\n<span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">contract</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"mint\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10000</span> <span class=\"o\">*</span> <span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">COIN</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># make sure the transaction is confirmed on chain and the contract execution is successful</span>\n<span class=\"k\">assert</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span>\n\n<span class=\"c1\"># call contract's read only function.We get new asset type and convert to string type.</span>\n<span class=\"n\">asset_type</span> <span class=\"o\">=</span> <span class=\"n\">Asset</span><span class=\"o\">.</span><span class=\"n\">asset2str</span><span class=\"p\">(</span><span class=\"n\">contract</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"assettype\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># transfer asset</span>\n<span class=\"k\">assert</span> <span class=\"n\">contract</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"transfer\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">COIN</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span>\n</pre>\n<h3>Vote Contract Methods</h3>\n<pre><span class=\"c1\"># call the vote method to vote using the utxo asset mint in the above step</span>\n<span class=\"k\">assert</span> <span class=\"n\">contract</span><span class=\"o\">.</span><span class=\"n\">vote</span><span class=\"p\">(</span><span class=\"s2\">\"vote\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">88</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">asset_type</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"n\">constant</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span>\n</pre>\n<h2>Developer Setup</h2>\n<p>If you would like to hack on py-asimov, please follow these steps:</p>\n<ul>\n<li>Testing</li>\n<li>Pull Requests</li>\n<li>Code Style</li>\n<li>Documentation</li>\n</ul>\n<h3>Development Environment Setup</h3>\n<p>You can set up your dev environment with:</p>\n<pre>git clone git@gitlab.asimov.work:asimov/asimov-python-sdk.git\n<span class=\"nb\">cd</span> pyasimov\npyenv virtualenv <span class=\"m\">3</span>.7.3 env-asimov\npyenv activate env-asimov\npip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n\n<span class=\"c1\"># If you're using zsh you need to escape square brackets: </span>\npip install -e .<span class=\"se\">\\[</span>extra<span class=\"se\">\\]</span>\n</pre>\n<h3>Testing Setup</h3>\n<p>During development, you might like to have tests run on every file save.</p>\n<pre><span class=\"c1\"># in the project root:</span>\nmake <span class=\"nb\">test</span>\n</pre>\n<h3>Release setup</h3>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <code>{major}.{minor}.{patch}</code> for stable</p>\n<p>To issue the next version in line, specify which part to bump,\nlike <code>make release bump=minor</code> or <code>make release bump=patch</code>. This is typically done from the\nmaster branch. To include changes made with each release, update \"docs/releases.rst\" with the changes,\nand apply commit directly to master before release.</p>\n\n          </div>"}, "last_serial": 7189890, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "d53c8cecfda951ef851f4fb40599655c", "sha256": "4091ed253aa2764efce683946b591cfe36b9c00b323b0e02a8d52f12becd1614"}, "downloads": -1, "filename": "py_asimov-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d53c8cecfda951ef851f4fb40599655c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3, <4", "size": 21670, "upload_time": "2019-11-22T09:33:19", "upload_time_iso_8601": "2019-11-22T09:33:19.381131Z", "url": "https://files.pythonhosted.org/packages/48/58/36e6e60c4516df0129732dde1b4fe3c49ebee7235aa4e30ed86c686e07ee/py_asimov-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d6cfe257add0ce2adc61559036d4057", "sha256": "0e0ee56e6c9d15ef3f809bc3044280dfa346fe8ad5d303ed07e70abb27337d9f"}, "downloads": -1, "filename": "py-asimov-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2d6cfe257add0ce2adc61559036d4057", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3, <4", "size": 21334, "upload_time": "2019-11-22T09:33:21", "upload_time_iso_8601": "2019-11-22T09:33:21.734856Z", "url": "https://files.pythonhosted.org/packages/90/cb/15e11c8abb1111839fc1d5c1e65b3f6cf5e1f0e976d479a01573c5298709/py-asimov-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "672cebf4ff986386325c91d8fafb2f24", "sha256": "fe379d07ad4665473374eacf0596ac0ba2508a7c5d90c22cf4cabe0b82c2cb7e"}, "downloads": -1, "filename": "py_asimov-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "672cebf4ff986386325c91d8fafb2f24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7, <4", "size": 23401, "upload_time": "2019-12-05T09:18:13", "upload_time_iso_8601": "2019-12-05T09:18:13.866780Z", "url": "https://files.pythonhosted.org/packages/1d/cb/24c8790089d9caf6997a5a67f743c616e2e3d15b3379e19332e0fdaea616/py_asimov-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee909af49ad6488b8ddd9329849244d6", "sha256": "d4487e2fdfb2d6a9b581cb536cc4fb361fcb167b0b8c0b736915fafed4b761ad"}, "downloads": -1, "filename": "py-asimov-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ee909af49ad6488b8ddd9329849244d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 19653, "upload_time": "2019-12-05T09:18:16", "upload_time_iso_8601": "2019-12-05T09:18:16.359962Z", "url": "https://files.pythonhosted.org/packages/9e/16/7fdebca09e7ee626a23d5dacc43d87fab6cc37b6f2c463a8db647e21dd73/py-asimov-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "15bdc799a6ed79c91fd697a3357677b9", "sha256": "07803a7a3bf13112de6f97de58a982046aab2e253c9a39585827969a1d4c744a"}, "downloads": -1, "filename": "py_asimov-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15bdc799a6ed79c91fd697a3357677b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7, <4", "size": 25427, "upload_time": "2020-04-16T15:43:59", "upload_time_iso_8601": "2020-04-16T15:43:59.259322Z", "url": "https://files.pythonhosted.org/packages/53/3d/7a8695dc5fff1223e947698f957c7cf3d4330b3969d5709b754d57806283/py_asimov-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89945de6867b051ca8d6c7f0cbea9811", "sha256": "0903415bcb24a41347863ee5b238504f96399454af47377fda3b4124382e355e"}, "downloads": -1, "filename": "py-asimov-0.1.0.tar.gz", "has_sig": false, "md5_digest": "89945de6867b051ca8d6c7f0cbea9811", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7, <4", "size": 22704, "upload_time": "2020-04-16T15:44:05", "upload_time_iso_8601": "2020-04-16T15:44:05.092759Z", "url": "https://files.pythonhosted.org/packages/71/b9/fe9667a0cba1c91b9a2fc6b678d68309cf526b481507a7867df9c3774281/py-asimov-0.1.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "33a2a4ed5eea6a1d51deb1fccd1942b1", "sha256": "a9670be3b9d7f913be9b7e2de96e63064cda77677c58a311ff0602ed551f20d7"}, "downloads": -1, "filename": "py_asimov-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "33a2a4ed5eea6a1d51deb1fccd1942b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 25131, "upload_time": "2020-05-07T16:23:15", "upload_time_iso_8601": "2020-05-07T16:23:15.891628Z", "url": "https://files.pythonhosted.org/packages/9c/46/192a792788905f799740a3aa936ed8852901aa52f726679427bb7705af02/py_asimov-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4cb69005eabfd307988a4b433d62af", "sha256": "6ca1d0b49bcbdaac35ae10f727e01f8f35abfa3cfcbb35cfe5f78700f6f0a1c2"}, "downloads": -1, "filename": "py-asimov-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1e4cb69005eabfd307988a4b433d62af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 22349, "upload_time": "2020-05-07T16:23:17", "upload_time_iso_8601": "2020-05-07T16:23:17.610770Z", "url": "https://files.pythonhosted.org/packages/9a/f6/2a48eab3bad529957b0d83bee57ca8e0826d27ec9705155d507f5804c778/py-asimov-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33a2a4ed5eea6a1d51deb1fccd1942b1", "sha256": "a9670be3b9d7f913be9b7e2de96e63064cda77677c58a311ff0602ed551f20d7"}, "downloads": -1, "filename": "py_asimov-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "33a2a4ed5eea6a1d51deb1fccd1942b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 25131, "upload_time": "2020-05-07T16:23:15", "upload_time_iso_8601": "2020-05-07T16:23:15.891628Z", "url": "https://files.pythonhosted.org/packages/9c/46/192a792788905f799740a3aa936ed8852901aa52f726679427bb7705af02/py_asimov-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4cb69005eabfd307988a4b433d62af", "sha256": "6ca1d0b49bcbdaac35ae10f727e01f8f35abfa3cfcbb35cfe5f78700f6f0a1c2"}, "downloads": -1, "filename": "py-asimov-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1e4cb69005eabfd307988a4b433d62af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 22349, "upload_time": "2020-05-07T16:23:17", "upload_time_iso_8601": "2020-05-07T16:23:17.610770Z", "url": "https://files.pythonhosted.org/packages/9a/f6/2a48eab3bad529957b0d83bee57ca8e0826d27ec9705155d507f5804c778/py-asimov-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:11 2020"}