{"info": {"author": "Alexey Firsov", "author_email": "virmir49@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Database", "Topic :: Database :: Front-Ends"], "description": "aiovalidator\n============\n.. image:: https://travis-ci.org/vir-mir/aiovalidator.svg?branch=master\n    :target: https://travis-ci.org/vir-mir/aiovalidator\n.. image:: https://codecov.io/gh/vir-mir/aiovalidator/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/vir-mir/aiovalidator\n\nWraps aiophtt, for validation and rapid construction of micro-services.\npros:\n- Easy integration without affecting the operation of the entire project\n- Declarative description of the input parameters\n- The ability to validate asynchronously\n- Availability of methods for http\n\n\nExample\n-------\n\n.. code-block:: python\n\n    import asyncio\n\n    from aiohttp import web\n\n    from aiovalidator import (\n        validator_factory,\n        middleware_exception,\n        IntegerField\n    )\n\n\n    async def foo_validator(value):\n        await asyncio.sleep(1)\n        return value\n\n\n    def foo_default(value):\n        async def default():\n            return value\n\n        return default\n\n\n    class Hello(web.View):\n        class Field:\n            field1 = IntegerField()\n            field2 = IntegerField(required=False, methods={'GET'},\n                                  verbose_name='Field method get')\n            field3 = IntegerField(validator=foo_validator, )\n            field4 = IntegerField(default=foo_default)\n\n        @asyncio.coroutine\n        def get(self):\n            fields = self.request['fields']\n            print(fields)\n            return web.json_response()\n\n\n    app = web.Application(middlewares=[validator_factory(), middleware_exception])\n    app.router.add_get('/{user_id}/', Hello)\n    web.run_app(app, port=8000)\n\n\nMy fields example\n-----------------\n\n.. code-block:: python\n\n    import phonenumbers\n    from aiovalidator import StrField, abort\n\n\n    class PhoneField(StrField):\n        def get_value(self, value):\n            value = super().get_value(value)\n            try:\n                value = phonenumbers.parse(value, 'RU')\n                region = phonenumbers.region_code_for_number(value)\n                regions = phonenumbers.COUNTRY_CODE_TO_REGION_CODE[7]\n                if not phonenumbers.is_valid_number(value):\n                    raise abort(status=400,\n                          text='Field {} not format phone'.format(self.name))\n                if region not in regions:\n                    raise abort(status=400,\n                          text='Field {} not format phone'.format(self.name))\n                value = phonenumbers.format_number(\n                    value, phonenumbers.PhoneNumberFormat.E164\n                )[1:]\n\n                return value\n            except phonenumbers.NumberParseException:\n                raise abort(status=400, text='Field {} not valid'.format(self.name))", "description_content_type": null, "docs_url": "https://pythonhosted.org/aiovalidator/", "download_url": "https://pypi.python.org/pypi/aiovalidator", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vir-mir", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "aiovalidator", "package_url": "https://pypi.org/project/aiovalidator/", "platform": "POSIX", "project_url": "https://pypi.org/project/aiovalidator/", "project_urls": {"Download": "https://pypi.python.org/pypi/aiovalidator", "Homepage": "https://github.com/vir-mir"}, "release_url": "https://pypi.org/project/aiovalidator/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "rest, restful validator aiohttp", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/vir-mir/aiovalidator\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/vir-mir/aiovalidator.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a014d8d39fa759a2d51630d6008dbfda663c1ba/68747470733a2f2f7472617669732d63692e6f72672f7669722d6d69722f61696f76616c696461746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/vir-mir/aiovalidator\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/vir-mir/aiovalidator/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5a231c439ad545d76f363cddf4deb24f67880f0/68747470733a2f2f636f6465636f762e696f2f67682f7669722d6d69722f61696f76616c696461746f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>Wraps aiophtt, for validation and rapid construction of micro-services.\npros:\n- Easy integration without affecting the operation of the entire project\n- Declarative description of the input parameters\n- The ability to validate asynchronously\n- Availability of methods for http</p>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiovalidator</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">validator_factory</span><span class=\"p\">,</span>\n    <span class=\"n\">middleware_exception</span><span class=\"p\">,</span>\n    <span class=\"n\">IntegerField</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo_validator</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo_default</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">default</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Hello</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Field</span><span class=\"p\">:</span>\n        <span class=\"n\">field1</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n        <span class=\"n\">field2</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'GET'</span><span class=\"p\">},</span>\n                              <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s1\">'Field method get'</span><span class=\"p\">)</span>\n        <span class=\"n\">field3</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">foo_validator</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"n\">field4</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">foo_default</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s1\">'fields'</span><span class=\"p\">]</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validator_factory</span><span class=\"p\">(),</span> <span class=\"n\">middleware_exception</span><span class=\"p\">])</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{user_id}</span><span class=\"s1\">/'</span><span class=\"p\">,</span> <span class=\"n\">Hello</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"my-fields-example\">\n<h2>My fields example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">phonenumbers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiovalidator</span> <span class=\"kn\">import</span> <span class=\"n\">StrField</span><span class=\"p\">,</span> <span class=\"n\">abort</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PhoneField</span><span class=\"p\">(</span><span class=\"n\">StrField</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s1\">'RU'</span><span class=\"p\">)</span>\n            <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">region_code_for_number</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"n\">regions</span> <span class=\"o\">=</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">COUNTRY_CODE_TO_REGION_CODE</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">is_valid_number</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">abort</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>\n                      <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'Field </span><span class=\"si\">{}</span><span class=\"s1\"> not format phone'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">region</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">regions</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">abort</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span>\n                      <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'Field </span><span class=\"si\">{}</span><span class=\"s1\"> not format phone'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">format_number</span><span class=\"p\">(</span>\n                <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">PhoneNumberFormat</span><span class=\"o\">.</span><span class=\"n\">E164</span>\n            <span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">except</span> <span class=\"n\">phonenumbers</span><span class=\"o\">.</span><span class=\"n\">NumberParseException</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">abort</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'Field </span><span class=\"si\">{}</span><span class=\"s1\"> not valid'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2579421, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "58a3a6947fcbe4c904168b8ffeda2ab0", "sha256": "42f078036dd6c28a3463bcd3cf4c003c800562061d2998d417b57cae778c5f58"}, "downloads": -1, "filename": "aiovalidator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "58a3a6947fcbe4c904168b8ffeda2ab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4712, "upload_time": "2016-12-06T17:00:25", "upload_time_iso_8601": "2016-12-06T17:00:25.873268Z", "url": "https://files.pythonhosted.org/packages/a1/50/28d3a140a85af83e393a4e0f4cccb23801ecfc31cb7bc598a01d8cd26d10/aiovalidator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3a24c662764ae8d309db048a33cb9368", "sha256": "6a5819437382e3aae7cd315ae45e37737a08046c818c6ac780e87a55c18cda8a"}, "downloads": -1, "filename": "aiovalidator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3a24c662764ae8d309db048a33cb9368", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4949, "upload_time": "2016-12-06T17:59:41", "upload_time_iso_8601": "2016-12-06T17:59:41.846749Z", "url": "https://files.pythonhosted.org/packages/0a/6f/74071f15da8d2d2a6e2e4c2a411821f953aed86c73cadeec1483ddde3d18/aiovalidator-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4bceec83b8f3c07c4208e349c6538f75", "sha256": "ed81d4968854f177d58af32be4eef0cc6f5b66206f9d715eeef4e5ac1c5952e0"}, "downloads": -1, "filename": "aiovalidator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4bceec83b8f3c07c4208e349c6538f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5128, "upload_time": "2017-01-17T11:18:46", "upload_time_iso_8601": "2017-01-17T11:18:46.295109Z", "url": "https://files.pythonhosted.org/packages/7d/97/6106cacd1f38acf796c778d96c5d95747181ac178adcd9ceedfe5052476a/aiovalidator-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bceec83b8f3c07c4208e349c6538f75", "sha256": "ed81d4968854f177d58af32be4eef0cc6f5b66206f9d715eeef4e5ac1c5952e0"}, "downloads": -1, "filename": "aiovalidator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4bceec83b8f3c07c4208e349c6538f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5128, "upload_time": "2017-01-17T11:18:46", "upload_time_iso_8601": "2017-01-17T11:18:46.295109Z", "url": "https://files.pythonhosted.org/packages/7d/97/6106cacd1f38acf796c778d96c5d95747181ac178adcd9ceedfe5052476a/aiovalidator-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:38 2020"}