{"info": {"author": "Brian Muller, Rashad Alston", "author_email": "bamuller@gmail.com, rashadalston@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Liaa \n\n## A Python-based Distributed Hash Table\n[!This is a fork of bmuller's original repo!](https://github.com/bmuller/kademlia)\n\n[![Build Status](https://secure.travis-ci.org/ralston3/liaa.png?branch=master)](https://travis-ci.org/ralston3/liaa)\n[![Python version](https://img.shields.io/pypi/pyversions/liaa)](https://pypi.org/project/liaa/)\n![Codecov branch](https://img.shields.io/codecov/c/github/ralston3/liaa/master?color=purple)\n![GitHub issues](https://img.shields.io/github/issues/ralston3/liaa?color=red)\n![Repo Size](https://img.shields.io/github/repo-size/ralston3/liaa)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/w/ralston3/liaa)\n![GitHub](https://img.shields.io/github/license/ralston3/liaa)\n\nThis library is an asynchronous Python implementation of the [Kademlia distributed hash table](http://en.wikipedia.org/wiki/Kademlia).  It uses the [asyncio library](https://docs.python.org/3/library/asyncio.html) in Python 3 to provide asynchronous communication.  The nodes communicate using [RPC over UDP]() to communiate, meaning that it is capable of working behind a [NAT](http://en.wikipedia.org/wiki/Network_address_translation).\n\nThis library aims to be as close to a reference implementation of the [Kademlia paper](http://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf) as possible.\n\n## Installation\n\n```\npip install kademlia\n```\n\n## Usage\n*This assumes you have a working familiarity with [asyncio](https://docs.python.org/3/library/asyncio.html).*\n\nAssuming you want to connect to an existing network:\n\n```python\nimport asyncio\nfrom liaa.network import Server\n\nloop = asyncio.get_event_loop()\n\n# Create a node and start listening on port 5678\nnode = Server()\nloop.run_until_complete(node.listen(5678))\n\n# Bootstrap the node by connecting to other known nodes, in this case\n# replace 123.123.123.123 with the IP of another node and optionally\n# give as many ip/port combos as you can for other nodes.\nloop.run_until_complete(node.bootstrap([(\"123.123.123.123\", 5678)]))\n\n# set a value for the key \"my-key\" on the network\nloop.run_until_complete(node.set(\"my-key\", \"my awesome value\"))\n\n# get the value associated with \"my-key\" from the network\nresult = loop.run_until_complete(node.get(\"my-key\"))\nprint(result)\n```\n\n## Initializing a Network\nIf you're starting a new network from scratch, just omit the `node.bootstrap` call in the example above.  Then, bootstrap other nodes by connecting to the first node you started.\n\nSee the examples folder for a first node example that other nodes can bootstrap connect to and some code that gets and sets a key/value.\n\n## Logging\nThis library uses the standard [Python logging library](https://docs.python.org/3/library/logging.html).  To see debut output printed to STDOUT, for instance, use:\n\n```python\nimport logging\n\nlog = logging.getLogger('liaa')\nlog.setLevel(logging.DEBUG)\nlog.addHandler(logging.StreamHandler())\n```\n\n## Running Tests\nTo run tests:\n\n```\npip install -r dev-requirements.txt\npython -m unittest\n```\n\n## Reporting Issues\nPlease report all issues [on github](https://github.com/bmuller/kademlia/issues).\n\n## Fidelity to Original Paper\nThe current implementation should be an accurate implementation of all aspects of the paper save one - in Section 2.3 there is the requirement that the original publisher of a key/value republish it every 24 hours.  This library does not do this (though you can easily do this manually).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ralston3/liaa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "liaa", "package_url": "https://pypi.org/project/liaa/", "platform": "", "project_url": "https://pypi.org/project/liaa/", "project_urls": {"Homepage": "http://github.com/ralston3/liaa"}, "release_url": "https://pypi.org/project/liaa/1.1.2/", "requires_dist": ["u-msgpack-python"], "requires_python": "", "summary": "Liaa is a distributed hash table for decentralized peer-to-peer computer networks.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Liaa</h1>\n<h2>A Python-based Distributed Hash Table</h2>\n<p><a href=\"https://github.com/bmuller/kademlia\" rel=\"nofollow\">!This is a fork of bmuller's original repo!</a></p>\n<p><a href=\"https://travis-ci.org/ralston3/liaa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/363173dae82e82be85715f9f9f207a8d94c3922b/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f72616c73746f6e332f6c6961612e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/liaa/\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc609952e71ef8e2ccc6f00cc1dc75f52746cd1b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c696161\"></a>\n<img alt=\"Codecov branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/605a16977d23a1d88a97fb1bc9bc7c73a56c9128/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f72616c73746f6e332f6c6961612f6d61737465723f636f6c6f723d707572706c65\">\n<img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ea533082d9c922cf0e6734bcbc2a83e2bc51a28/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f72616c73746f6e332f6c6961613f636f6c6f723d726564\">\n<img alt=\"Repo Size\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cd12563ba6c505f04499bbd58a2622b5accccec/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f72616c73746f6e332f6c696161\">\n<img alt=\"GitHub commit activity\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9b449c392a75912fc8d9091760c709a4ed6b577/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f772f72616c73746f6e332f6c696161\">\n<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f984d4c0514cd623991b019a0bb7c435223d1f1a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f72616c73746f6e332f6c696161\"></p>\n<p>This library is an asynchronous Python implementation of the <a href=\"http://en.wikipedia.org/wiki/Kademlia\" rel=\"nofollow\">Kademlia distributed hash table</a>.  It uses the <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio library</a> in Python 3 to provide asynchronous communication.  The nodes communicate using <a href=\"\" rel=\"nofollow\">RPC over UDP</a> to communiate, meaning that it is capable of working behind a <a href=\"http://en.wikipedia.org/wiki/Network_address_translation\" rel=\"nofollow\">NAT</a>.</p>\n<p>This library aims to be as close to a reference implementation of the <a href=\"http://pdos.csail.mit.edu/%7Epetar/papers/maymounkov-kademlia-lncs.pdf\" rel=\"nofollow\">Kademlia paper</a> as possible.</p>\n<h2>Installation</h2>\n<pre><code>pip install kademlia\n</code></pre>\n<h2>Usage</h2>\n<p><em>This assumes you have a working familiarity with <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a>.</em></p>\n<p>Assuming you want to connect to an existing network:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">liaa.network</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a node and start listening on port 5678</span>\n<span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5678</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Bootstrap the node by connecting to other known nodes, in this case</span>\n<span class=\"c1\"># replace 123.123.123.123 with the IP of another node and optionally</span>\n<span class=\"c1\"># give as many ip/port combos as you can for other nodes.</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">bootstrap</span><span class=\"p\">([(</span><span class=\"s2\">\"123.123.123.123\"</span><span class=\"p\">,</span> <span class=\"mi\">5678</span><span class=\"p\">)]))</span>\n\n<span class=\"c1\"># set a value for the key \"my-key\" on the network</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"my-key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my awesome value\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># get the value associated with \"my-key\" from the network</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"my-key\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h2>Initializing a Network</h2>\n<p>If you're starting a new network from scratch, just omit the <code>node.bootstrap</code> call in the example above.  Then, bootstrap other nodes by connecting to the first node you started.</p>\n<p>See the examples folder for a first node example that other nodes can bootstrap connect to and some code that gets and sets a key/value.</p>\n<h2>Logging</h2>\n<p>This library uses the standard <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">Python logging library</a>.  To see debut output printed to STDOUT, for instance, use:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'liaa'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n</pre>\n<h2>Running Tests</h2>\n<p>To run tests:</p>\n<pre><code>pip install -r dev-requirements.txt\npython -m unittest\n</code></pre>\n<h2>Reporting Issues</h2>\n<p>Please report all issues <a href=\"https://github.com/bmuller/kademlia/issues\" rel=\"nofollow\">on github</a>.</p>\n<h2>Fidelity to Original Paper</h2>\n<p>The current implementation should be an accurate implementation of all aspects of the paper save one - in Section 2.3 there is the requirement that the original publisher of a key/value republish it every 24 hours.  This library does not do this (though you can easily do this manually).</p>\n\n          </div>"}, "last_serial": 6426843, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "f4381783500f4c7d91b6c186eb1ff3e6", "sha256": "573233ca4caf67805cc0438a4955d03ae702e2d19379c3b0e4d5c99a0d2d7cfb"}, "downloads": -1, "filename": "liaa-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f4381783500f4c7d91b6c186eb1ff3e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36270, "upload_time": "2020-01-10T02:33:00", "upload_time_iso_8601": "2020-01-10T02:33:00.923616Z", "url": "https://files.pythonhosted.org/packages/ed/83/deb56e2b6760702d45188220b81c347bf47a5a454670006193e09b116734/liaa-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f6fae88a501771f4f90e2be232dde95", "sha256": "6fd8c63d6d12cc82262829a38fb6d444caea197b945bfab9c9d6edd9ead061bd"}, "downloads": -1, "filename": "liaa-1.1.2.tar.gz", "has_sig": false, "md5_digest": "4f6fae88a501771f4f90e2be232dde95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29903, "upload_time": "2020-01-10T02:33:02", "upload_time_iso_8601": "2020-01-10T02:33:02.755480Z", "url": "https://files.pythonhosted.org/packages/cf/18/8fd3640c4b4eb7a3fcf49feb196a7648ea6bd74169fc9499fb0a0e63fa17/liaa-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4381783500f4c7d91b6c186eb1ff3e6", "sha256": "573233ca4caf67805cc0438a4955d03ae702e2d19379c3b0e4d5c99a0d2d7cfb"}, "downloads": -1, "filename": "liaa-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f4381783500f4c7d91b6c186eb1ff3e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36270, "upload_time": "2020-01-10T02:33:00", "upload_time_iso_8601": "2020-01-10T02:33:00.923616Z", "url": "https://files.pythonhosted.org/packages/ed/83/deb56e2b6760702d45188220b81c347bf47a5a454670006193e09b116734/liaa-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f6fae88a501771f4f90e2be232dde95", "sha256": "6fd8c63d6d12cc82262829a38fb6d444caea197b945bfab9c9d6edd9ead061bd"}, "downloads": -1, "filename": "liaa-1.1.2.tar.gz", "has_sig": false, "md5_digest": "4f6fae88a501771f4f90e2be232dde95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29903, "upload_time": "2020-01-10T02:33:02", "upload_time_iso_8601": "2020-01-10T02:33:02.755480Z", "url": "https://files.pythonhosted.org/packages/cf/18/8fd3640c4b4eb7a3fcf49feb196a7648ea6bd74169fc9499fb0a0e63fa17/liaa-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:43 2020"}