{"info": {"author": "Orzo Cogorzo", "author_email": "orzocogorzo@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Hydrology"], "description": "# MFD Floods\nA python script to model hidrologic behavior of downstream drainpaths. With a DTM cover of your study area you can define longitude and latitude (in the DTM distance unit) as a start point and an income flow to see how the water will flood the territory.\n\n## Installation\nWith pip ```pip install mfdfloods```\n\nFrom source ```python setup.py install```\n\n## Dependencies\nThe script requires GDAL installed on your system and python-gdal as a python dependency.\n\nTo install GDAL execute `apt install gdal-bin libgdal-dev`.\n\nTo install python-gdal execute `pip install \"GDAL==$(osgeo-config --version)\"`.\n\n## Test\nExecute test.py from inside the folder to test the algorithm.\n\nThe test.py is a script that call the class MFD and execute its modelization with the datasource from the `data/` folder. There you have to place your GeoJSON files with the modelized line geometry.\n\n`python test.py <area::string> <X::float> <Y::float> <break_flow::int> <base_flow::int> <break_time::int> [cellsize::int]{5} [radius::int]{2000}`\n\nArguments:\n\n1. **Area** is the file on the `data/` folder with your DTM in GeoTiff format.\n2. **X** is the longitude in your reference dtm distance units.\n3. **Y** is the latitude in your reference dtm distance units.\n4. **break_flow** is the start income flow.\n5. **base_flow** is the base income flow after the initial pic.\n6. **break_time** is the time that has to pass in seconds to go from the break_flow to the base_flow.\n7. **cellsize** is the size of your DTM cellsize.\n8. **radius** is the maximum extension of the output flood in your dtm distance units.\n\nThe output will be placed in your `data/` floder as three files with the name *drainpaths_{x}-{y}_(draft|flood|speed).tif*.\n\n## Use\n\nInclude mfdfloods as a module on your scripts with `from mfd import MFD` then instantiate the class MFD to execute its drainpaths method.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orzocogorzo/mfdfloods", "keywords": "mfdfloods mfd flood drainpaths hidrology downstreams multiple flow direction", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mfdfloods", "package_url": "https://pypi.org/project/mfdfloods/", "platform": "", "project_url": "https://pypi.org/project/mfdfloods/", "project_urls": {"Homepage": "https://github.com/orzocogorzo/mfdfloods"}, "release_url": "https://pypi.org/project/mfdfloods/0.1.5/", "requires_dist": ["numpy (==1.18.2)", "richdem (==0.3.4)"], "requires_python": "", "summary": "A python script to modelate hidrologic behavior of downstream drainpaths", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MFD Floods</h1>\n<p>A python script to model hidrologic behavior of downstream drainpaths. With a DTM cover of your study area you can define longitude and latitude (in the DTM distance unit) as a start point and an income flow to see how the water will flood the territory.</p>\n<h2>Installation</h2>\n<p>With pip <code>pip install mfdfloods</code></p>\n<p>From source <code>python setup.py install</code></p>\n<h2>Dependencies</h2>\n<p>The script requires GDAL installed on your system and python-gdal as a python dependency.</p>\n<p>To install GDAL execute <code>apt install gdal-bin libgdal-dev</code>.</p>\n<p>To install python-gdal execute <code>pip install \"GDAL==$(osgeo-config --version)\"</code>.</p>\n<h2>Test</h2>\n<p>Execute test.py from inside the folder to test the algorithm.</p>\n<p>The test.py is a script that call the class MFD and execute its modelization with the datasource from the <code>data/</code> folder. There you have to place your GeoJSON files with the modelized line geometry.</p>\n<p><code>python test.py &lt;area::string&gt; &lt;X::float&gt; &lt;Y::float&gt; &lt;break_flow::int&gt; &lt;base_flow::int&gt; &lt;break_time::int&gt; [cellsize::int]{5} [radius::int]{2000}</code></p>\n<p>Arguments:</p>\n<ol>\n<li><strong>Area</strong> is the file on the <code>data/</code> folder with your DTM in GeoTiff format.</li>\n<li><strong>X</strong> is the longitude in your reference dtm distance units.</li>\n<li><strong>Y</strong> is the latitude in your reference dtm distance units.</li>\n<li><strong>break_flow</strong> is the start income flow.</li>\n<li><strong>base_flow</strong> is the base income flow after the initial pic.</li>\n<li><strong>break_time</strong> is the time that has to pass in seconds to go from the break_flow to the base_flow.</li>\n<li><strong>cellsize</strong> is the size of your DTM cellsize.</li>\n<li><strong>radius</strong> is the maximum extension of the output flood in your dtm distance units.</li>\n</ol>\n<p>The output will be placed in your <code>data/</code> floder as three files with the name <em>drainpaths_{x}-{y}_(draft|flood|speed).tif</em>.</p>\n<h2>Use</h2>\n<p>Include mfdfloods as a module on your scripts with <code>from mfd import MFD</code> then instantiate the class MFD to execute its drainpaths method.</p>\n\n          </div>"}, "last_serial": 6971151, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "d4996e697d3d14d3ec543261b917c01f", "sha256": "4358e37c47a3d479f95dcf9d38087c007403d9a3870284585c4394c19d4ccef6"}, "downloads": -1, "filename": "mfdfloods-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d4996e697d3d14d3ec543261b917c01f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11622, "upload_time": "2020-04-07T14:10:01", "upload_time_iso_8601": "2020-04-07T14:10:01.271015Z", "url": "https://files.pythonhosted.org/packages/df/ac/69b5772b2dc5d22bf0c5d196bdddb1c06d345c25b48411ae08094c3bc967/mfdfloods-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81d1e0c5f21e715f9131a6cfd5d1b9b7", "sha256": "d4445b4176ea1b295dc7f1f8c29fae268e6a2ac786e561aed4100fcf5226f226"}, "downloads": -1, "filename": "mfdfloods-0.1.3.tar.gz", "has_sig": false, "md5_digest": "81d1e0c5f21e715f9131a6cfd5d1b9b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6039, "upload_time": "2020-04-07T14:10:03", "upload_time_iso_8601": "2020-04-07T14:10:03.543243Z", "url": "https://files.pythonhosted.org/packages/65/4b/b02fac12555423184d0e49bd9726474a68cf9a617f12e9d5482cccb5d17b/mfdfloods-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "cae280dcb4f3813ccb5b8f37d67b2282", "sha256": "4ccf5001d4c904948af13ff92af4ff2e986891fcb8a8907d1061ca505b5d8e92"}, "downloads": -1, "filename": "mfdfloods-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cae280dcb4f3813ccb5b8f37d67b2282", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10525, "upload_time": "2020-04-07T16:17:01", "upload_time_iso_8601": "2020-04-07T16:17:01.617884Z", "url": "https://files.pythonhosted.org/packages/ad/19/b43d7b38d36b4d85350d78d43a6f56f47b1187bf2abfed7d807be703fb25/mfdfloods-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eca2b8b3f2279a58424badfb850be65", "sha256": "904935a78ea1cbee360c0c52e9f3ccc32f73f23044034cc9f56b60bd841a6f68"}, "downloads": -1, "filename": "mfdfloods-0.1.5.tar.gz", "has_sig": false, "md5_digest": "1eca2b8b3f2279a58424badfb850be65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6434, "upload_time": "2020-04-07T16:17:02", "upload_time_iso_8601": "2020-04-07T16:17:02.750550Z", "url": "https://files.pythonhosted.org/packages/20/98/627ea4dcef7927a2d08a9c090958a0399ce80c454e06ea4db5ec8fde5916/mfdfloods-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cae280dcb4f3813ccb5b8f37d67b2282", "sha256": "4ccf5001d4c904948af13ff92af4ff2e986891fcb8a8907d1061ca505b5d8e92"}, "downloads": -1, "filename": "mfdfloods-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cae280dcb4f3813ccb5b8f37d67b2282", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10525, "upload_time": "2020-04-07T16:17:01", "upload_time_iso_8601": "2020-04-07T16:17:01.617884Z", "url": "https://files.pythonhosted.org/packages/ad/19/b43d7b38d36b4d85350d78d43a6f56f47b1187bf2abfed7d807be703fb25/mfdfloods-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eca2b8b3f2279a58424badfb850be65", "sha256": "904935a78ea1cbee360c0c52e9f3ccc32f73f23044034cc9f56b60bd841a6f68"}, "downloads": -1, "filename": "mfdfloods-0.1.5.tar.gz", "has_sig": false, "md5_digest": "1eca2b8b3f2279a58424badfb850be65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6434, "upload_time": "2020-04-07T16:17:02", "upload_time_iso_8601": "2020-04-07T16:17:02.750550Z", "url": "https://files.pythonhosted.org/packages/20/98/627ea4dcef7927a2d08a9c090958a0399ce80c454e06ea4db5ec8fde5916/mfdfloods-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:30 2020"}