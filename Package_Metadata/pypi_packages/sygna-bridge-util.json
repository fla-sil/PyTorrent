{"info": {"author": "kunming.liu", "author_email": "kunming@coolbitx.com", "bugtrack_url": null, "classifiers": [], "description": "# Python Sygna Bridge Util\n\nThis is a Python library to help you build servers/servies within Sygna Bridge Ecosystem. For more detail information, please see [Sygna Bridge](https://www.sygna.io/).\n\n## Installation\n\n\n```shell\npip install sygna-bridge-util\n```\n\n## Crypto\n\nDealing with encoding, decoding, signing and verifying in Sygna Bridge.\n\n### ECIES Encoding an Decoding\n\nDuring the communication of VASPs, there are some private information that must be encrypted. We use ECIES(Elliptic Curve Integrated Encryption Scheme) to securely encrypt these private data so that they can only be accessed by the recipient.\n\n```python\nsensitive_data = {\n    \"originator\": {\n        \"name\": \"Antoine Griezmann\",# required and must be in English\n        \"date_of_birth\":\"1991-03-21\"\n    },\n    \"beneficiary\":{\n        \"name\": \"Leo Messi\"\n    }\n}\n\nprivate_info = sygna_bridge_util.crypto.sygna_encrypt_private_data(\n    sensitive_data, \n    recipient_public_key\n)\ndecoded_priv_info = sygna_bridge_util.crypto.sygna_decrypt_private_data(\n    private_info, \n    recipient_privte_key\n)\n\n```\n\n### Sign and Verify\n\nIn Sygna Bridge, we use secp256k1 ECDSA over sha256 of utf-8 json string to create signature on every API call. Since you need to provide the identical utf-8 string during verfication, the order of key-value pair you put into the object is important.\n\nThe following example is the snippet of originator's signing process of `premissionRequest` API call. If you put the key `transaction` before `private_info` in the object, the verification will fail in the central server.\n\n```python\ntransaction = {\n    \"originator_vasp_code\":\"10000\",\n    \"originator_addrs\":[\"3KvJ1uHPShhEAWyqsBEzhfXyeh1TXKAd7D\"],\n    \"beneficiary_vasp_code\":\"10001\",\n    \"beneficiary_addrs\":[\"3F4ReDwiMLu8LrAiXwwD2DhH8U9xMrUzUf\"],\n    \"transaction_currency\":\"0x80000000\",\n    \"amount\": 0.973\n}\n\ndata_dt = \"2019-07-29T06:28:00Z\"\n\n# using sign_data to get a valid signed object (with signature attached)\n\ndata_to_sign = {\n    \"private_info\":private_info,\n    \"transaction\":transaction,\n    \"data_dt\":data_dt\n}\n\nsygna_bridge_util.crypto.sign_data(data_to_sign, originator_private_key)\n\nvalid = sygna_bridge_util.crypto.verify_data(obj, originator_public_Key)\n\n# or you can use the method that's built for `transfer` request:\nsigned_data = sygna_bridge_util.crypto.sign_permission_request(\n    data_to_sign, \n    originator_private_key\n)\n\nvalid = sygna_bridge_util.crypto.verify_data(\n    signed_data, \n    originator_public_Key\n)\n\n```\n\nWe provide different methods like `sign_permission_request`, `sign_callback()` to sign different objects(or parameters) we specified in our api doc. You can also find more examples in the following section.\n\n## API\n\nAPI calls to communicate with Sygna Bridge server.\n\nWe use **baisc auth** with all the API calls. To simplify the process, we provide a API class to deal with authentication and post/ get request format.\n\n```python=\nsb_server = \"https://apis.sygna.io/sb/\"\nsb_api_instance = sygna_bridge_util.API(\"api-key\", sb_server)\n```\n\nAfter you create the `API` instance, you can use it to make any API call to communicate with Sygna Bridge central server.\n\n### Get VASP Information\n\n```python\n# Get List of VASPs associated with public keys.\nverify = True # set verify to true to verify the signature attached with api response automatically.\nvasps = sb_api_instance.get_vasp_list(verify)\n\n# Or call use get_vasp_public_key() to directly get public key for a specific VASP.\npublic_key =  sb_api_instance.get_vasp_public_key(\"10298\", verify)\n```\n\n### For Originator\n\nThere are two API calls from **transaction originator** to Sygna Bridge Server defined in the protocol, which are `post_permission_request` and `post_transaction_id`. \n\nThe full logic of originator would be like the following:\n\n```python\n# originator.py\n\nprivate_sender_info = { \n    \"originator\": { \n        \"name\": \"Antoine Griezmann\",  \n        \"date_of_birth\":\"1991-03-21\" \n    }, \n    \"beneficiary\":{\n        \"name\":\"Leo Messi\"\n    } \n}\nrecipient_public_key = sb_api_instance.get_vasp_public_key(\"10298\")\nprivate_info = sygna_bridge_util.crypto.sygna_encrypt_private_data(\n    private_sender_info, \n    recipient_public_key\n)\n\ntransaction = {\n    \"originator_vasp_code\":\"10000\",\n    \"originator_addrs\": [\"3KvJ1uHPShhEAWyqsBEzhfXyeh1TXKAd7D\"],\n    \"beneficiary_vasp_code\":\"10298\",\n    \"beneficiary_addrs\": [\"3CHgkx946yyueucCMiJhyH2Vg5kBBvfSGH\"],\n    \"transaction_currency\":\"0x80000000\",\n    \"amount\": 0.973\n}\ndata_dt = \"2019-07-29T07:29:80Z\"\n\ndata_to_sign = {\n    \"private_info\":private_info,\n    \"transaction\":transaction,\n    \"data_dt\":data_dt\n}\n\ntransfer_data = sygna_bridge_util.crypto.sign_permission_request(\n    data_to_sign, \n    sender_privKey\n)\n\ncallback_url = \"https://81f7d956.ngrok.io/api/v1/originator/transaction/premission\"\ncallback_data = sygna_bridge_util.crypto.sign_callback(\n    {\n        \"callback_url\":callback_url\n    }, \n    sender_privKey\n)\n\nresponse = sb_api_instance.post_permission_request(\n    {\n        \"data\":transfer_data,\n        \"callback\":callback_data\n    }\n)\n\n# Boradcast your transaction to blockchain after got and api reponse at your api server.\ntxid = \"1a0c9bef489a136f7e05671f7f7fada2b9d96ac9f44598e1bcaa4779ac564dcd\"\n\n# Inform Sygna Bridge that a specific transfer is successfully broadcasted to the blockchain.\n\nsend_tx_id_data = sygna_bridge_util.crypto.sign_transaction_id(\n    {\n        \"transfer_id\":response[\"transfer_id\"], \n        \"txid\":txid\n    }, \n    sender_privKey\n)\npost_tx_id_response = sb_api_instance.post_transaction_id(send_tx_id_data)\n\n```\n\n### For Beneficiary\n\nThere is only one api for Beneficiary VASP to call, which is `post_permission`. After the beneficiary server confirm thet legitemacy of a transfer request, they will sign `{ transfer_id, permission_status }` using `sign_permission()` function, and send the result with signature to Sygna Bridge Central Server.\n\n```Python\n\npermission_status = \"ACCEPTED\" # or \"REJECTED\"\npermission_data = sygna_bridge_util.crypto.sign_permission(\n    {\n        \"transfer_id\":response[\"transfer_id\"],         \n        \"permission_status\":permission_status\n    }, \n    beneficiary_private_key\n)\nfinalresult = sb_api_instance.post_permission(permission_data)\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CoolBitX-Technology/sygna-bridge-util-py", "keywords": "sygna-bridge-util sygna bridge sygna-bridge ecosystem", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sygna-bridge-util", "package_url": "https://pypi.org/project/sygna-bridge-util/", "platform": "", "project_url": "https://pypi.org/project/sygna-bridge-util/", "project_urls": {"Homepage": "https://github.com/CoolBitX-Technology/sygna-bridge-util-py"}, "release_url": "https://pypi.org/project/sygna-bridge-util/0.0.11/", "requires_dist": ["asn1crypto (==1.3.0)", "attrs (==19.3.0)", "certifi (==2019.11.28)", "cffi (==1.14.0)", "chardet (==3.0.4)", "coincurve (==13.0.0)", "ecdsa (==0.15)", "eciespy (==0.3.4)", "eth-hash (==0.2.0)", "eth-keys (==0.3.1)", "eth-typing (==2.2.1)", "eth-utils (==1.8.4)", "idna (==2.9)", "jsonschema (==3.2.0)", "pycparser (==2.19)", "pycryptodome (==3.9.7)", "pyrsistent (==0.15.7)", "requests (==2.23.0)", "rfc3339-validator (==0.1.2)", "rfc3986-validator (==0.1.1)", "six (==1.14.0)", "toolz (==0.10.0)", "urllib3 (==1.25.8)", "cytoolz (==0.10.1) ; implementation_name == \"cpython\""], "requires_python": ">=3.7", "summary": "This is a Python library to help you build servers/services within Sygna Bridge Ecosystem.", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Sygna Bridge Util</h1>\n<p>This is a Python library to help you build servers/servies within Sygna Bridge Ecosystem. For more detail information, please see <a href=\"https://www.sygna.io/\" rel=\"nofollow\">Sygna Bridge</a>.</p>\n<h2>Installation</h2>\n<pre>pip install sygna-bridge-util\n</pre>\n<h2>Crypto</h2>\n<p>Dealing with encoding, decoding, signing and verifying in Sygna Bridge.</p>\n<h3>ECIES Encoding an Decoding</h3>\n<p>During the communication of VASPs, there are some private information that must be encrypted. We use ECIES(Elliptic Curve Integrated Encryption Scheme) to securely encrypt these private data so that they can only be accessed by the recipient.</p>\n<pre><span class=\"n\">sensitive_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"originator\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Antoine Griezmann\"</span><span class=\"p\">,</span><span class=\"c1\"># required and must be in English</span>\n        <span class=\"s2\">\"date_of_birth\"</span><span class=\"p\">:</span><span class=\"s2\">\"1991-03-21\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"beneficiary\"</span><span class=\"p\">:{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Leo Messi\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">private_info</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sygna_encrypt_private_data</span><span class=\"p\">(</span>\n    <span class=\"n\">sensitive_data</span><span class=\"p\">,</span> \n    <span class=\"n\">recipient_public_key</span>\n<span class=\"p\">)</span>\n<span class=\"n\">decoded_priv_info</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sygna_decrypt_private_data</span><span class=\"p\">(</span>\n    <span class=\"n\">private_info</span><span class=\"p\">,</span> \n    <span class=\"n\">recipient_privte_key</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Sign and Verify</h3>\n<p>In Sygna Bridge, we use secp256k1 ECDSA over sha256 of utf-8 json string to create signature on every API call. Since you need to provide the identical utf-8 string during verfication, the order of key-value pair you put into the object is important.</p>\n<p>The following example is the snippet of originator's signing process of <code>premissionRequest</code> API call. If you put the key <code>transaction</code> before <code>private_info</code> in the object, the verification will fail in the central server.</p>\n<pre><span class=\"n\">transaction</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"originator_vasp_code\"</span><span class=\"p\">:</span><span class=\"s2\">\"10000\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"originator_addrs\"</span><span class=\"p\">:[</span><span class=\"s2\">\"3KvJ1uHPShhEAWyqsBEzhfXyeh1TXKAd7D\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"beneficiary_vasp_code\"</span><span class=\"p\">:</span><span class=\"s2\">\"10001\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"beneficiary_addrs\"</span><span class=\"p\">:[</span><span class=\"s2\">\"3F4ReDwiMLu8LrAiXwwD2DhH8U9xMrUzUf\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"transaction_currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"0x80000000\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mf\">0.973</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">data_dt</span> <span class=\"o\">=</span> <span class=\"s2\">\"2019-07-29T06:28:00Z\"</span>\n\n<span class=\"c1\"># using sign_data to get a valid signed object (with signature attached)</span>\n\n<span class=\"n\">data_to_sign</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"private_info\"</span><span class=\"p\">:</span><span class=\"n\">private_info</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transaction\"</span><span class=\"p\">:</span><span class=\"n\">transaction</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"data_dt\"</span><span class=\"p\">:</span><span class=\"n\">data_dt</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_data</span><span class=\"p\">(</span><span class=\"n\">data_to_sign</span><span class=\"p\">,</span> <span class=\"n\">originator_private_key</span><span class=\"p\">)</span>\n\n<span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">verify_data</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">originator_public_Key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or you can use the method that's built for `transfer` request:</span>\n<span class=\"n\">signed_data</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_permission_request</span><span class=\"p\">(</span>\n    <span class=\"n\">data_to_sign</span><span class=\"p\">,</span> \n    <span class=\"n\">originator_private_key</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">verify_data</span><span class=\"p\">(</span>\n    <span class=\"n\">signed_data</span><span class=\"p\">,</span> \n    <span class=\"n\">originator_public_Key</span>\n<span class=\"p\">)</span>\n</pre>\n<p>We provide different methods like <code>sign_permission_request</code>, <code>sign_callback()</code> to sign different objects(or parameters) we specified in our api doc. You can also find more examples in the following section.</p>\n<h2>API</h2>\n<p>API calls to communicate with Sygna Bridge server.</p>\n<p>We use <strong>baisc auth</strong> with all the API calls. To simplify the process, we provide a API class to deal with authentication and post/ get request format.</p>\n<pre>sb_server = \"https://apis.sygna.io/sb/\"\nsb_api_instance = sygna_bridge_util.API(\"api-key\", sb_server)\n</pre>\n<p>After you create the <code>API</code> instance, you can use it to make any API call to communicate with Sygna Bridge central server.</p>\n<h3>Get VASP Information</h3>\n<pre><span class=\"c1\"># Get List of VASPs associated with public keys.</span>\n<span class=\"n\">verify</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># set verify to true to verify the signature attached with api response automatically.</span>\n<span class=\"n\">vasps</span> <span class=\"o\">=</span> <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">get_vasp_list</span><span class=\"p\">(</span><span class=\"n\">verify</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or call use get_vasp_public_key() to directly get public key for a specific VASP.</span>\n<span class=\"n\">public_key</span> <span class=\"o\">=</span>  <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">get_vasp_public_key</span><span class=\"p\">(</span><span class=\"s2\">\"10298\"</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">)</span>\n</pre>\n<h3>For Originator</h3>\n<p>There are two API calls from <strong>transaction originator</strong> to Sygna Bridge Server defined in the protocol, which are <code>post_permission_request</code> and <code>post_transaction_id</code>.</p>\n<p>The full logic of originator would be like the following:</p>\n<pre><span class=\"c1\"># originator.py</span>\n\n<span class=\"n\">private_sender_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span> \n    <span class=\"s2\">\"originator\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Antoine Griezmann\"</span><span class=\"p\">,</span>  \n        <span class=\"s2\">\"date_of_birth\"</span><span class=\"p\">:</span><span class=\"s2\">\"1991-03-21\"</span> \n    <span class=\"p\">},</span> \n    <span class=\"s2\">\"beneficiary\"</span><span class=\"p\">:{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"Leo Messi\"</span>\n    <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n<span class=\"n\">recipient_public_key</span> <span class=\"o\">=</span> <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">get_vasp_public_key</span><span class=\"p\">(</span><span class=\"s2\">\"10298\"</span><span class=\"p\">)</span>\n<span class=\"n\">private_info</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sygna_encrypt_private_data</span><span class=\"p\">(</span>\n    <span class=\"n\">private_sender_info</span><span class=\"p\">,</span> \n    <span class=\"n\">recipient_public_key</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">transaction</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"originator_vasp_code\"</span><span class=\"p\">:</span><span class=\"s2\">\"10000\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"originator_addrs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"3KvJ1uHPShhEAWyqsBEzhfXyeh1TXKAd7D\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"beneficiary_vasp_code\"</span><span class=\"p\">:</span><span class=\"s2\">\"10298\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"beneficiary_addrs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"3CHgkx946yyueucCMiJhyH2Vg5kBBvfSGH\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"transaction_currency\"</span><span class=\"p\">:</span><span class=\"s2\">\"0x80000000\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mf\">0.973</span>\n<span class=\"p\">}</span>\n<span class=\"n\">data_dt</span> <span class=\"o\">=</span> <span class=\"s2\">\"2019-07-29T07:29:80Z\"</span>\n\n<span class=\"n\">data_to_sign</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"private_info\"</span><span class=\"p\">:</span><span class=\"n\">private_info</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transaction\"</span><span class=\"p\">:</span><span class=\"n\">transaction</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"data_dt\"</span><span class=\"p\">:</span><span class=\"n\">data_dt</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">transfer_data</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_permission_request</span><span class=\"p\">(</span>\n    <span class=\"n\">data_to_sign</span><span class=\"p\">,</span> \n    <span class=\"n\">sender_privKey</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">callback_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://81f7d956.ngrok.io/api/v1/originator/transaction/premission\"</span>\n<span class=\"n\">callback_data</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_callback</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"callback_url\"</span><span class=\"p\">:</span><span class=\"n\">callback_url</span>\n    <span class=\"p\">},</span> \n    <span class=\"n\">sender_privKey</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">post_permission_request</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span><span class=\"n\">transfer_data</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"callback\"</span><span class=\"p\">:</span><span class=\"n\">callback_data</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Boradcast your transaction to blockchain after got and api reponse at your api server.</span>\n<span class=\"n\">txid</span> <span class=\"o\">=</span> <span class=\"s2\">\"1a0c9bef489a136f7e05671f7f7fada2b9d96ac9f44598e1bcaa4779ac564dcd\"</span>\n\n<span class=\"c1\"># Inform Sygna Bridge that a specific transfer is successfully broadcasted to the blockchain.</span>\n\n<span class=\"n\">send_tx_id_data</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_transaction_id</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"transfer_id\"</span><span class=\"p\">:</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">\"transfer_id\"</span><span class=\"p\">],</span> \n        <span class=\"s2\">\"txid\"</span><span class=\"p\">:</span><span class=\"n\">txid</span>\n    <span class=\"p\">},</span> \n    <span class=\"n\">sender_privKey</span>\n<span class=\"p\">)</span>\n<span class=\"n\">post_tx_id_response</span> <span class=\"o\">=</span> <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">post_transaction_id</span><span class=\"p\">(</span><span class=\"n\">send_tx_id_data</span><span class=\"p\">)</span>\n</pre>\n<h3>For Beneficiary</h3>\n<p>There is only one api for Beneficiary VASP to call, which is <code>post_permission</code>. After the beneficiary server confirm thet legitemacy of a transfer request, they will sign <code>{ transfer_id, permission_status }</code> using <code>sign_permission()</code> function, and send the result with signature to Sygna Bridge Central Server.</p>\n<pre><span class=\"n\">permission_status</span> <span class=\"o\">=</span> <span class=\"s2\">\"ACCEPTED\"</span> <span class=\"c1\"># or \"REJECTED\"</span>\n<span class=\"n\">permission_data</span> <span class=\"o\">=</span> <span class=\"n\">sygna_bridge_util</span><span class=\"o\">.</span><span class=\"n\">crypto</span><span class=\"o\">.</span><span class=\"n\">sign_permission</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"transfer_id\"</span><span class=\"p\">:</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">\"transfer_id\"</span><span class=\"p\">],</span>         \n        <span class=\"s2\">\"permission_status\"</span><span class=\"p\">:</span><span class=\"n\">permission_status</span>\n    <span class=\"p\">},</span> \n    <span class=\"n\">beneficiary_private_key</span>\n<span class=\"p\">)</span>\n<span class=\"n\">finalresult</span> <span class=\"o\">=</span> <span class=\"n\">sb_api_instance</span><span class=\"o\">.</span><span class=\"n\">post_permission</span><span class=\"p\">(</span><span class=\"n\">permission_data</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7135978, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "6cafcca54ef0192a786e697704f9d258", "sha256": "e003750d2986753c0773b87a7c7d8a154268c83d36857477be179cf1a1795ec2"}, "downloads": -1, "filename": "sygna_bridge_util-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "6cafcca54ef0192a786e697704f9d258", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 21084, "upload_time": "2020-04-02T10:42:22", "upload_time_iso_8601": "2020-04-02T10:42:22.627737Z", "url": "https://files.pythonhosted.org/packages/ef/c4/8ca26338f6d5759d9f5fb2c44809f64b16b81a415e4c9f03154b862af571/sygna_bridge_util-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "257f0102eba1116ede170d63634f2e49", "sha256": "522b12580ea6baeaf49fed4807b1dee6342de6212aae93f8a4fd2227095900ba"}, "downloads": -1, "filename": "sygna-bridge-util-0.0.10.tar.gz", "has_sig": false, "md5_digest": "257f0102eba1116ede170d63634f2e49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32614, "upload_time": "2020-04-02T10:42:24", "upload_time_iso_8601": "2020-04-02T10:42:24.363201Z", "url": "https://files.pythonhosted.org/packages/1e/5d/8613b1f9c0707140a7542e3575840a05b8197a7cf6eba338e0ba79964c62/sygna-bridge-util-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "5c1df0eafc62243a791b95f4fd002a7a", "sha256": "b497af399f8d769c429df28b99a2e119032c45d069a5cc21aac6bccc49754f68"}, "downloads": -1, "filename": "sygna_bridge_util-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "5c1df0eafc62243a791b95f4fd002a7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22563, "upload_time": "2020-04-30T09:00:33", "upload_time_iso_8601": "2020-04-30T09:00:33.965423Z", "url": "https://files.pythonhosted.org/packages/77/de/9ea3939041e2db0e5eb2916f908265b8475c7de9681957d231841442b45e/sygna_bridge_util-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eade96448cf54d051b78faa9082beda", "sha256": "7227effea0e1e713a1c0af121496dad47eaaedf23e084d2ad2661a460780bf6d"}, "downloads": -1, "filename": "sygna-bridge-util-0.0.11.tar.gz", "has_sig": false, "md5_digest": "7eade96448cf54d051b78faa9082beda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34930, "upload_time": "2020-04-30T09:00:35", "upload_time_iso_8601": "2020-04-30T09:00:35.667342Z", "url": "https://files.pythonhosted.org/packages/ee/f6/b0011cc8a915996ececb2ab63eddb7dd027dd9a8c53f8b9d8c2f74a01de8/sygna-bridge-util-0.0.11.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "0ef66788e57c13f6a35a60b015c22c64", "sha256": "a99ff79cfcfeebc38f76e96d7f0fa4f412a87af1b1b6a9fd2da2e31f15c02476"}, "downloads": -1, "filename": "sygna_bridge_util-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "0ef66788e57c13f6a35a60b015c22c64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 20876, "upload_time": "2020-03-27T10:50:08", "upload_time_iso_8601": "2020-03-27T10:50:08.690781Z", "url": "https://files.pythonhosted.org/packages/f6/c6/d5c17501b2c6099d17d01fcdb790e85e3ab4486d96a12852497680131a16/sygna_bridge_util-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8572879873f833291d221d8af07b393", "sha256": "f28c4196b63fcbc0ed44d1b65814c5c53e6e11449b56943ba66ab059b3f3f68d"}, "downloads": -1, "filename": "sygna-bridge-util-0.0.8.tar.gz", "has_sig": false, "md5_digest": "d8572879873f833291d221d8af07b393", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32075, "upload_time": "2020-03-27T10:50:10", "upload_time_iso_8601": "2020-03-27T10:50:10.903991Z", "url": "https://files.pythonhosted.org/packages/5f/0b/03cfd0d6952ec5982d259829999931d9c7a701b3bace2486173b8197d154/sygna-bridge-util-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "2eb1754da38594b712372e6a92efa21c", "sha256": "78ae5f98272156031f0328fe1c995b888557b65f75822466e2ea5ab8fbce48ac"}, "downloads": -1, "filename": "sygna_bridge_util-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2eb1754da38594b712372e6a92efa21c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 20880, "upload_time": "2020-03-27T11:07:20", "upload_time_iso_8601": "2020-03-27T11:07:20.111942Z", "url": "https://files.pythonhosted.org/packages/c2/e9/33607d7958627662f265a213e3a169c00f4f37af7eaf850636b487fdd33b/sygna_bridge_util-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "270202cb90623f809d8708c00ebcc099", "sha256": "870269c964b02d2d429715968baf0c6fd7ee681b3eb5221ba9e3d80c28d5275f"}, "downloads": -1, "filename": "sygna-bridge-util-0.0.9.tar.gz", "has_sig": false, "md5_digest": "270202cb90623f809d8708c00ebcc099", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 32071, "upload_time": "2020-03-27T11:07:22", "upload_time_iso_8601": "2020-03-27T11:07:22.377622Z", "url": "https://files.pythonhosted.org/packages/e0/75/256eec9a27b231686f6efe1c347dd4d1075bfa9c1577014862f0403ec10b/sygna-bridge-util-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c1df0eafc62243a791b95f4fd002a7a", "sha256": "b497af399f8d769c429df28b99a2e119032c45d069a5cc21aac6bccc49754f68"}, "downloads": -1, "filename": "sygna_bridge_util-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "5c1df0eafc62243a791b95f4fd002a7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22563, "upload_time": "2020-04-30T09:00:33", "upload_time_iso_8601": "2020-04-30T09:00:33.965423Z", "url": "https://files.pythonhosted.org/packages/77/de/9ea3939041e2db0e5eb2916f908265b8475c7de9681957d231841442b45e/sygna_bridge_util-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eade96448cf54d051b78faa9082beda", "sha256": "7227effea0e1e713a1c0af121496dad47eaaedf23e084d2ad2661a460780bf6d"}, "downloads": -1, "filename": "sygna-bridge-util-0.0.11.tar.gz", "has_sig": false, "md5_digest": "7eade96448cf54d051b78faa9082beda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 34930, "upload_time": "2020-04-30T09:00:35", "upload_time_iso_8601": "2020-04-30T09:00:35.667342Z", "url": "https://files.pythonhosted.org/packages/ee/f6/b0011cc8a915996ececb2ab63eddb7dd027dd9a8c53f8b9d8c2f74a01de8/sygna-bridge-util-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:15 2020"}