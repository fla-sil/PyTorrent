{"info": {"author": "Akuli", "author_email": "akuviljanen17@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Teek\n\n[![Build Status](https://travis-ci.org/Akuli/teek.svg?branch=master)](https://travis-ci.org/Akuli/teek)\n[![Documentation Status](https://readthedocs.org/projects/teek/badge/?version=latest)](https://teek.readthedocs.io/en/latest/?badge=latest)\n[![Coverage Status](https://coveralls.io/repos/github/Akuli/teek/badge.svg?branch=master)](https://coveralls.io/github/Akuli/teek?branch=master)\n\nTeek is a pythonic and user-friendly alternative to tkinter. It doesn't come\nwith Python so you need to install it yourself, but it's nice and light-weight.\n\nDocumentation: https://teek.rtfd.org/\n\n\n## Teek is Pythonic\n\nIf you have worked with tkinter a lot, you know that it's kind of annoying.\nAlmost everything is represented as strings in Tcl. Tkinter is dumb and it\ndoesn't try to do things like they would be usually done in Python; instead,\ntkinter users need to deal with many inconveniences themselves. On the other\nhand, Teek is *pythonic*; it does things like they are best done in Python,\nnot how they are done in Tcl.\n\n\n### Ttk\n\nNever heard of Ttk before? Shame on you. Ttk is the new way to write GUIs in\nTk, and you should be already using it in tkinter. Ttk GUIs look a *lot* better\nthan non-Ttk GUIs on most platforms. For example, this GUI has a Ttk button and\na non-Ttk button. Guess which is which:\n\n[comment]: # (this must be a full url to make it work in pypi description)\n\n![good and bad button](https://github.com/Akuli/teek/raw/master/tk-ttk.png)\n\nThe problem is that Tk's windows (in tkinter, `tkinter.Toplevel` and\n`tkinter.Tk`) are *not* Ttk widgets. If you add Ttk widgets into them, the GUI\nlooks messy on some systems, like my linux system with MATE desktop. The\nsolution is to add a big Ttk frame that fills the window, and then add all\nwidgets into that frame.\n\n**Tkinter:**\n\n```python3\n# this is a well-done hello world, and tbh, most people don't use tkinter \"well\"\nimport tkinter\nfrom tkinter import ttk\n\nroot = tkinter.Tk()\nbig_frame = ttk.Frame(root)\nbig_frame.pack(fill='both', expand=True)   # make sure it fills the root window\nttk.Label(big_frame, text=\"Hello World!\").pack()\nroot.mainloop()\n```\n\n**Teek:**\n\n```python3\nimport teek\n\nwindow = teek.Window(\"Hello\")\nteek.Label(window, \"Hello World!\").pack()\nwindow.on_delete_window.connect(teek.quit)\nteek.run()\n```\n\nAll teek widgets are Ttk, so you don't need to do a separate import to use\nttk widgets. Also, when you create a teek `Window`, the big ttk frame is\ncreated and packed automatically for you, and you don't need to think about it\nat all; you just create a `Window` and add stuff into it.\n\n\n### Threads\n\nHere `time.sleep`s represent blocking things. In real life you could e.g. do\nnetwork requests, run a subprocess or perform CPU-sensitive computations in the\nthread.\n\n**Tkinter:**\n\n```python3\nimport queue\nimport threading\nimport time\nimport tkinter\n\nroot = tkinter.Tk()\nroot.title(\"Thread Demo\")\ntext = tkinter.Text(root)\ntext.pack()\n\nmessage_queue = queue.Queue()\n\ndef queue_poller():\n    while True:\n        try:\n            message = message_queue.get(block=False)\n        except queue.Empty:\n            break\n        text.insert('end', message)\n\n    root.after(50, queue_poller)\n\ndef thread_target():\n    message_queue.put('doing things...\\n')\n    time.sleep(1)\n    message_queue.put('doing more things...\\n')\n    time.sleep(2)\n    message_queue.put('done')\n\nthreading.Thread(target=thread_target).start()\nqueue_poller()\nroot.mainloop()\n```\n\n**Teek:**\n\n```python3\nimport threading\nimport time\nimport teek\n\ntext = teek.Text(teek.Window(\"Thread Demo\"))\ntext.pack()\n\ndef thread_target():\n    text.insert(text.end, 'doing things...\\n')\n    time.sleep(1)\n    text.insert(text.end, 'doing more things...\\n')\n    time.sleep(2)\n    text.insert(text.end, 'done')\n\nteek.init_threads()\nthreading.Thread(target=thread_target).start()\nwindow.on_delete_window.connect(teek.quit)\nteek.run()\n```\n\nThis is not a joke. Using threads with tkinter is a horrible mess, but teek\nworks with threads nicely. All you need is `teek.init_threads()`, and then you\ncan do teek things from threads. See [concurrency docs] for details.\n\n[concurrency docs]: https://teek.readthedocs.io/en/latest/concurrency.html\n\n\n### Debuggability\n\n**Tkinter:**\n\n```python3\nlabel = ttk.Label(some_widget, text=\"hello world\")\nprint(label)        # prints something like '.140269016152776', which is confusing\nprint(repr(label))  # somewhat better: <tkinter.ttk.Label object .140269016152776>\n```\n\n**Teek:**\n\n```python3\nlabel = teek.Label(some_widget, \"hello world\")\nprint(label)    # <teek.Label widget: text='hello world'>\n```\n\n\n### Text Widget Indexes\n\nThe 4th character of the 3rd line of a text widget is the string `'3.4'` in\nTcl and tkinter. This is not only confusing because `3.4` looks like a float\neven though treating it as a float messes things up, but this makes code look\nmessy.\n\n**Tkinter:**\n\n```python3\n# figure out where the cursor is\nline, column = textwidget.index('insert').split('.')\nline = int(line)\ncolumn = int(column)\n\n# same thing, more concise\nline, column = map(int, textwidget.index('insert').split('.'))\n```\n\n**Teek:**\n\n```python3\nline, column = textwidget.marks['insert']\n```\n\n`textwidget.marks` is a dictionary-like object with mark names as keys and text\nindex namedtuples as values. Teek represents text indexes as namedtuples\nthat have `line` and `column` attributes, which is useful if you only need the\nline. In tkinter, you need to parse the `'line.column'` string with\n`.split('.')` and take the first element of the split result.\n\n**Tkinter:**\n\n```python3\ncursor_lineno = int(textwidget.index('insert').split('.')[0])\n```\n\n**Teek:**\n\n```python3\ncursor_lineno = textwidget.marks['insert'].line\n```\n\nIn tkinter you also need to construct the `'line.column'` strings yourself, but\nin teek you can use `(line, column)` tuples.\n\n**Tkinter:**\n\n```python3\ntextwidget.mark_set('insert', '{}.{}'.format(new_cursor_line, new_cursor_column))\n```\n\n**Teek:**\n\n```python3\ntextwidget.marks['insert'] = (new_cursor_line, new_cursor_column)\n```\n\nTcl uses strings like `3.4 + 5 chars` to denote the position that is 5\ncharacters after the position `3.4`. Teek's text position namedtuples have a\npythonic `forward()` method that returns a new text position.\n\n**Tkinter:**\n\n```python3\n# textwidget.index always returns the position as 'line.column'\nnew_position = textwidget.index('{}.{} + 5 chars - 1 line'.format(line, column))\n# now new_position is a string, and you may need to parse it back to\n# separate line and column\n```\n\n**Teek:**\n\n```python3\nnew_position = textwidget.index(line, column).forward(chars=5).back(lines=1)\n# new_position is now a text position namedtuple\n```\n\n\n### Timeouts\n\nIn tkinter, `any_widget.after(1000, func)` runs `func()` after 1 second, and\nthe `any_widget` can be any tkinter widget. That's right, you need a widget for\nscheduling timeouts. This can be a problem in library code. But what if during\nthat 1 second of waiting time, you decide that you don't want to run the\ntimeout after all? You can cancel the timeout, but as usual, teek makes it\neasier.\n\n**Tkinter:**\n\n```python3\nwidget = get_some_widget_from_somewhere()\ntimeout_id = widget.after(1000, my_function)\n...\n# debugging\nprint(timeout_id)       # prints 'after#0'... very useful, eh??\n...\nif we_actually_dont_want_to_timeout():\n    widget.after_cancel(timeout_id)\n    print(timeout_id)   # still prints 'after#0'\n```\n\n**Teek:**\n\n```python3\ntimeout_object = teek.after(1000, my_function)\n...\n# debugging\nprint(timeout_object)   # prints <pending 'my_function' timeout 'after#0'>\n...\nif we_actually_dont_want_to_timeout():\n    timeout.cancel()\n    print(timeout)      # prints <cancelled 'my_function' timeout 'after#0'>\n```\n\n\n## Developing teek\n\nThis section contains the commands I use when working on teek. If you\nuse windows, replace `python3` with `py`.\n\n- `python3 -m pip install --user sphinx pytest pytest-cov flit` installs\n  everything you need for developing teek.\n- `python3 -m pytest` runs tests (they are in the `tests` subdirectory). It is\n  normal to get lots of tiny windows on the screen while running the tests. I\n  use these pytest options:\n    - `--skipslow` makes the tests run faster by skipping tests that are\n      decorated with `@pytest.mark.slow`.\n    - `--durations=10` prints the list of 10 slowest tests at the end of the\n      test run. This is a good way to figure out which tests to mark slow.\n    - `--cov=teek` runs the tests under coverage. Run\n      `python3 -m coverage html` and open `htmlcov/index.html` to view the\n      results. Coverage results from travis builds go to [coveralls].\n- `cd docs` followed by `py -m sphinx . _build` builds documentation locally.\n  You can view it by opening `docs/_build/index.html` in your browser.\n  [readthedocs builds the docs] when you push to master, but it's best to make\n  sure that everything's fine first.\n- Sphinx seems to only build parts of the documentation if you change some of\n  it, but sometimes it doesn't detect your changes. Run `cd docs` followed by\n  `rm -r _build` to make it build everything next time.\n- I don't usually lint the files on my system. I push to GitHub (to any\n  branch), and if [the travis build] fails, I know I did something badly. If\n  you want to lint things yourself, find the correct command from\n  `.travis.yml`.\n- `flit publish` uploads to PyPI. You can ask me to run this after I have\n  merged something to master.\n\n[readthedocs builds the docs]: https://readthedocs.org/projects/teek/builds/\n[the travis build]: https://travis-ci.org/Akuli/teek\n[coveralls]: https://coveralls.io/github/Akuli/teek\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Akuli/teek", "keywords": "pythonic tk tcl tkinter gui beginner", "license": "", "maintainer": "", "maintainer_email": "", "name": "teek", "package_url": "https://pypi.org/project/teek/", "platform": "", "project_url": "https://pypi.org/project/teek/", "project_urls": {"Homepage": "https://github.com/Akuli/teek"}, "release_url": "https://pypi.org/project/teek/0.5/", "requires_dist": ["pillow; extra == \"image_loader\"", "reportlab; extra == \"image_loader\"", "svglib; extra == \"image_loader\"", "lxml; extra == \"image_loader\"", "beautifulsoup4; extra == \"soup_viewer\"", "lxml; extra == \"soup_viewer\""], "requires_python": ">=3.4", "summary": "Teek is a pythonic alternative to tkinter.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Teek</h1>\n<p><a href=\"https://travis-ci.org/Akuli/teek\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca89c92ec8831e40d5d5e339d06c75c7eb2643b7/68747470733a2f2f7472617669732d63692e6f72672f416b756c692f7465656b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://teek.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8e034d6ee2879516e474b3823dfe83e0a63492f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7465656b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/github/Akuli/teek?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95d95492c47bc29663e04adbe9468935f316d68b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f416b756c692f7465656b2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Teek is a pythonic and user-friendly alternative to tkinter. It doesn't come\nwith Python so you need to install it yourself, but it's nice and light-weight.</p>\n<p>Documentation: <a href=\"https://teek.rtfd.org/\" rel=\"nofollow\">https://teek.rtfd.org/</a></p>\n<h2>Teek is Pythonic</h2>\n<p>If you have worked with tkinter a lot, you know that it's kind of annoying.\nAlmost everything is represented as strings in Tcl. Tkinter is dumb and it\ndoesn't try to do things like they would be usually done in Python; instead,\ntkinter users need to deal with many inconveniences themselves. On the other\nhand, Teek is <em>pythonic</em>; it does things like they are best done in Python,\nnot how they are done in Tcl.</p>\n<h3>Ttk</h3>\n<p>Never heard of Ttk before? Shame on you. Ttk is the new way to write GUIs in\nTk, and you should be already using it in tkinter. Ttk GUIs look a <em>lot</em> better\nthan non-Ttk GUIs on most platforms. For example, this GUI has a Ttk button and\na non-Ttk button. Guess which is which:</p>\n<p><img alt=\"good and bad button\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b56059fae14a046b3e24449e77fb0e00920c2aba/68747470733a2f2f6769746875622e636f6d2f416b756c692f7465656b2f7261772f6d61737465722f746b2d74746b2e706e67\"></p>\n<p>The problem is that Tk's windows (in tkinter, <code>tkinter.Toplevel</code> and\n<code>tkinter.Tk</code>) are <em>not</em> Ttk widgets. If you add Ttk widgets into them, the GUI\nlooks messy on some systems, like my linux system with MATE desktop. The\nsolution is to add a big Ttk frame that fills the window, and then add all\nwidgets into that frame.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"c1\"># this is a well-done hello world, and tbh, most people don't use tkinter \"well\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tkinter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tkinter</span> <span class=\"kn\">import</span> <span class=\"n\">ttk</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span><span class=\"p\">()</span>\n<span class=\"n\">big_frame</span> <span class=\"o\">=</span> <span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Frame</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"n\">big_frame</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"s1\">'both'</span><span class=\"p\">,</span> <span class=\"n\">expand</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>   <span class=\"c1\"># make sure it fills the root window</span>\n<span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"n\">big_frame</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Hello World!\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">mainloop</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">teek</span>\n\n<span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">Window</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n<span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">on_delete_window</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n<span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>All teek widgets are Ttk, so you don't need to do a separate import to use\nttk widgets. Also, when you create a teek <code>Window</code>, the big ttk frame is\ncreated and packed automatically for you, and you don't need to think about it\nat all; you just create a <code>Window</code> and add stuff into it.</p>\n<h3>Threads</h3>\n<p>Here <code>time.sleep</code>s represent blocking things. In real life you could e.g. do\nnetwork requests, run a subprocess or perform CPU-sensitive computations in the\nthread.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">queue</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tkinter</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">\"Thread Demo\"</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n\n<span class=\"n\">message_queue</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">queue_poller</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message_queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">queue_poller</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">thread_target</span><span class=\"p\">():</span>\n    <span class=\"n\">message_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'doing things...</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">message_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'doing more things...</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">message_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n\n<span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">thread_target</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">queue_poller</span><span class=\"p\">()</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">mainloop</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">teek</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">Window</span><span class=\"p\">(</span><span class=\"s2\">\"Thread Demo\"</span><span class=\"p\">))</span>\n<span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">thread_target</span><span class=\"p\">():</span>\n    <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"s1\">'doing things...</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"s1\">'doing more things...</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"s1\">'done'</span><span class=\"p\">)</span>\n\n<span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">init_threads</span><span class=\"p\">()</span>\n<span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">thread_target</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">on_delete_window</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n<span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>This is not a joke. Using threads with tkinter is a horrible mess, but teek\nworks with threads nicely. All you need is <code>teek.init_threads()</code>, and then you\ncan do teek things from threads. See <a href=\"https://teek.readthedocs.io/en/latest/concurrency.html\" rel=\"nofollow\">concurrency docs</a> for details.</p>\n<h3>Debuggability</h3>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"n\">some_widget</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>        <span class=\"c1\"># prints something like '.140269016152776', which is confusing</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">))</span>  <span class=\"c1\"># somewhat better: &lt;tkinter.ttk.Label object .140269016152776&gt;</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">Label</span><span class=\"p\">(</span><span class=\"n\">some_widget</span><span class=\"p\">,</span> <span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>    <span class=\"c1\"># &lt;teek.Label widget: text='hello world'&gt;</span>\n</pre>\n<h3>Text Widget Indexes</h3>\n<p>The 4th character of the 3rd line of a text widget is the string <code>'3.4'</code> in\nTcl and tkinter. This is not only confusing because <code>3.4</code> looks like a float\neven though treating it as a float messes things up, but this makes code look\nmessy.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"c1\"># figure out where the cursor is</span>\n<span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'insert'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># same thing, more concise</span>\n<span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'insert'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">marks</span><span class=\"p\">[</span><span class=\"s1\">'insert'</span><span class=\"p\">]</span>\n</pre>\n<p><code>textwidget.marks</code> is a dictionary-like object with mark names as keys and text\nindex namedtuples as values. Teek represents text indexes as namedtuples\nthat have <code>line</code> and <code>column</code> attributes, which is useful if you only need the\nline. In tkinter, you need to parse the <code>'line.column'</code> string with\n<code>.split('.')</code> and take the first element of the split result.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"n\">cursor_lineno</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'insert'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">cursor_lineno</span> <span class=\"o\">=</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">marks</span><span class=\"p\">[</span><span class=\"s1\">'insert'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">line</span>\n</pre>\n<p>In tkinter you also need to construct the <code>'line.column'</code> strings yourself, but\nin teek you can use <code>(line, column)</code> tuples.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">mark_set</span><span class=\"p\">(</span><span class=\"s1\">'insert'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">new_cursor_line</span><span class=\"p\">,</span> <span class=\"n\">new_cursor_column</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">marks</span><span class=\"p\">[</span><span class=\"s1\">'insert'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">new_cursor_line</span><span class=\"p\">,</span> <span class=\"n\">new_cursor_column</span><span class=\"p\">)</span>\n</pre>\n<p>Tcl uses strings like <code>3.4 + 5 chars</code> to denote the position that is 5\ncharacters after the position <code>3.4</code>. Teek's text position namedtuples have a\npythonic <code>forward()</code> method that returns a new text position.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"c1\"># textwidget.index always returns the position as 'line.column'</span>\n<span class=\"n\">new_position</span> <span class=\"o\">=</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\"> + 5 chars - 1 line'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">))</span>\n<span class=\"c1\"># now new_position is a string, and you may need to parse it back to</span>\n<span class=\"c1\"># separate line and column</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">new_position</span> <span class=\"o\">=</span> <span class=\"n\">textwidget</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span><span class=\"n\">chars</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">back</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># new_position is now a text position namedtuple</span>\n</pre>\n<h3>Timeouts</h3>\n<p>In tkinter, <code>any_widget.after(1000, func)</code> runs <code>func()</code> after 1 second, and\nthe <code>any_widget</code> can be any tkinter widget. That's right, you need a widget for\nscheduling timeouts. This can be a problem in library code. But what if during\nthat 1 second of waiting time, you decide that you don't want to run the\ntimeout after all? You can cancel the timeout, but as usual, teek makes it\neasier.</p>\n<p><strong>Tkinter:</strong></p>\n<pre><span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">get_some_widget_from_somewhere</span><span class=\"p\">()</span>\n<span class=\"n\">timeout_id</span> <span class=\"o\">=</span> <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">my_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"c1\"># debugging</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeout_id</span><span class=\"p\">)</span>       <span class=\"c1\"># prints 'after#0'... very useful, eh??</span>\n<span class=\"o\">...</span>\n<span class=\"k\">if</span> <span class=\"n\">we_actually_dont_want_to_timeout</span><span class=\"p\">():</span>\n    <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">after_cancel</span><span class=\"p\">(</span><span class=\"n\">timeout_id</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeout_id</span><span class=\"p\">)</span>   <span class=\"c1\"># still prints 'after#0'</span>\n</pre>\n<p><strong>Teek:</strong></p>\n<pre><span class=\"n\">timeout_object</span> <span class=\"o\">=</span> <span class=\"n\">teek</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">my_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"c1\"># debugging</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeout_object</span><span class=\"p\">)</span>   <span class=\"c1\"># prints &lt;pending 'my_function' timeout 'after#0'&gt;</span>\n<span class=\"o\">...</span>\n<span class=\"k\">if</span> <span class=\"n\">we_actually_dont_want_to_timeout</span><span class=\"p\">():</span>\n    <span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>      <span class=\"c1\"># prints &lt;cancelled 'my_function' timeout 'after#0'&gt;</span>\n</pre>\n<h2>Developing teek</h2>\n<p>This section contains the commands I use when working on teek. If you\nuse windows, replace <code>python3</code> with <code>py</code>.</p>\n<ul>\n<li><code>python3 -m pip install --user sphinx pytest pytest-cov flit</code> installs\neverything you need for developing teek.</li>\n<li><code>python3 -m pytest</code> runs tests (they are in the <code>tests</code> subdirectory). It is\nnormal to get lots of tiny windows on the screen while running the tests. I\nuse these pytest options:\n<ul>\n<li><code>--skipslow</code> makes the tests run faster by skipping tests that are\ndecorated with <code>@pytest.mark.slow</code>.</li>\n<li><code>--durations=10</code> prints the list of 10 slowest tests at the end of the\ntest run. This is a good way to figure out which tests to mark slow.</li>\n<li><code>--cov=teek</code> runs the tests under coverage. Run\n<code>python3 -m coverage html</code> and open <code>htmlcov/index.html</code> to view the\nresults. Coverage results from travis builds go to <a href=\"https://coveralls.io/github/Akuli/teek\" rel=\"nofollow\">coveralls</a>.</li>\n</ul>\n</li>\n<li><code>cd docs</code> followed by <code>py -m sphinx . _build</code> builds documentation locally.\nYou can view it by opening <code>docs/_build/index.html</code> in your browser.\n<a href=\"https://readthedocs.org/projects/teek/builds/\" rel=\"nofollow\">readthedocs builds the docs</a> when you push to master, but it's best to make\nsure that everything's fine first.</li>\n<li>Sphinx seems to only build parts of the documentation if you change some of\nit, but sometimes it doesn't detect your changes. Run <code>cd docs</code> followed by\n<code>rm -r _build</code> to make it build everything next time.</li>\n<li>I don't usually lint the files on my system. I push to GitHub (to any\nbranch), and if <a href=\"https://travis-ci.org/Akuli/teek\" rel=\"nofollow\">the travis build</a> fails, I know I did something badly. If\nyou want to lint things yourself, find the correct command from\n<code>.travis.yml</code>.</li>\n<li><code>flit publish</code> uploads to PyPI. You can ask me to run this after I have\nmerged something to master.</li>\n</ul>\n\n          </div>"}, "last_serial": 5262571, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "08eebdca0640de5f3db3de2504cc53c9", "sha256": "dc77fa6e6fdfa1fb9c43d199de58166d0c3b1f39b96c6f2b5a3595ad7ee61198"}, "downloads": -1, "filename": "teek-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "08eebdca0640de5f3db3de2504cc53c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 181174, "upload_time": "2019-01-13T19:53:06", "upload_time_iso_8601": "2019-01-13T19:53:06.356664Z", "url": "https://files.pythonhosted.org/packages/d5/33/d67e6e652f7ffae84f9900ed3954fd61748a225e25a352b426b98fda3a78/teek-0.3-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "cc43e755a188b291122738bec783c02c", "sha256": "80d5074d793504482167d42f91137d3d434edbaba22cabdd659dbfb6b32eb110"}, "downloads": -1, "filename": "teek-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cc43e755a188b291122738bec783c02c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 198947, "upload_time": "2019-03-11T21:00:44", "upload_time_iso_8601": "2019-03-11T21:00:44.349140Z", "url": "https://files.pythonhosted.org/packages/09/f7/7a5a851188590f0786aa48c62cf2107d0a1e2f7a4ed738f471b1f9b3a49a/teek-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5728ce78f6d41df6367d00934812214", "sha256": "ecbf8eb329c03be2f8f04653454821e0b935b3c474adcbbfaba13a9cb147c3c9"}, "downloads": -1, "filename": "teek-0.4.tar.gz", "has_sig": false, "md5_digest": "a5728ce78f6d41df6367d00934812214", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 154350, "upload_time": "2019-03-11T21:01:26", "upload_time_iso_8601": "2019-03-11T21:01:26.005230Z", "url": "https://files.pythonhosted.org/packages/2f/83/f236703c23858b82e2552cc18b325604f2a63f9335d00a1e8de8d6767c48/teek-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "49fd38821a94fe6260985f443522ffc0", "sha256": "273cb18d6cc4cddd448bfd680a7cc3482fb08725325d0bb7339f0c101ec87daf"}, "downloads": -1, "filename": "teek-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "49fd38821a94fe6260985f443522ffc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 207481, "upload_time": "2019-05-13T14:26:42", "upload_time_iso_8601": "2019-05-13T14:26:42.833019Z", "url": "https://files.pythonhosted.org/packages/83/0a/7598d39a5b21b19f3f5ba37b1d79bf603676107bf6f4836a0cf8ae797a65/teek-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "344248b7af74b18dc378cd0d320ed6ba", "sha256": "8750f0cc875065648f1fafb96bc21b97bdacab90c8777b21165c6f0a91074dfe"}, "downloads": -1, "filename": "teek-0.5.tar.gz", "has_sig": false, "md5_digest": "344248b7af74b18dc378cd0d320ed6ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 158558, "upload_time": "2019-05-13T14:26:55", "upload_time_iso_8601": "2019-05-13T14:26:55.385758Z", "url": "https://files.pythonhosted.org/packages/73/47/d91d56ca961ce70f7ebe39ea9d3395bc6b8f9a7af56795b0cab62bbb7b53/teek-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49fd38821a94fe6260985f443522ffc0", "sha256": "273cb18d6cc4cddd448bfd680a7cc3482fb08725325d0bb7339f0c101ec87daf"}, "downloads": -1, "filename": "teek-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "49fd38821a94fe6260985f443522ffc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 207481, "upload_time": "2019-05-13T14:26:42", "upload_time_iso_8601": "2019-05-13T14:26:42.833019Z", "url": "https://files.pythonhosted.org/packages/83/0a/7598d39a5b21b19f3f5ba37b1d79bf603676107bf6f4836a0cf8ae797a65/teek-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "344248b7af74b18dc378cd0d320ed6ba", "sha256": "8750f0cc875065648f1fafb96bc21b97bdacab90c8777b21165c6f0a91074dfe"}, "downloads": -1, "filename": "teek-0.5.tar.gz", "has_sig": false, "md5_digest": "344248b7af74b18dc378cd0d320ed6ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 158558, "upload_time": "2019-05-13T14:26:55", "upload_time_iso_8601": "2019-05-13T14:26:55.385758Z", "url": "https://files.pythonhosted.org/packages/73/47/d91d56ca961ce70f7ebe39ea9d3395bc6b8f9a7af56795b0cab62bbb7b53/teek-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:01 2020"}