{"info": {"author": "Antony Lee", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: System :: Software Distribution"], "description": "PyPI2PKGBUILD\n=============\n\nConvert PyPI packages to Arch Linux packages, inspired from pip2arch_.\n\n.. _pip2arch: https://github.com/bluepeppers/pip2arch\n\nHandles packages of all sizes, from the simplest (pure Python, no dependencies)\nto the most complex (C-level dependencies, external C libraries, etc., e.g.\nmost of the scientific Python stack, or GUI toolkits such as PyGObject and\nwxPython) [#]_.\n\n.. [#] ... with a bit of help.\n\n.. contents:: :local:\n\nDependencies and installation\n-----------------------------\n\n``pypi2pkgbuild.py`` depends on the Arch Linux packages namcap_, pkgfile_, and\npython-pip_ [#]_.\n\n.. _namcap: https://wiki.archlinux.org/index.php/Namcap\n.. _pkgfile: https://wiki.archlinux.org/index.php/Pkgfile\n.. _python-pip: https://wiki.archlinux.org/index.php/Python#Package_management\n\n.. [#] Officially, only the latest releases of pacman and pip are supported.\n   In practice, the hard requirements that I am aware of are pacman\u22655.1\n   (which changed the behavior of ``makepkg --printsrcinfo``) and pip\u226510\n   (which changed the default format of ``pip --list``).\n\nThe script can be installed with ``pip install [--user] .``, or can also be run\ndirectly.\n\nOne can even run ``pypi2pkgbuild.py`` on itself to create a proper Arch package\n(``pypi2pkgbuild.py git+https://github.com/anntzer/pypi2pkgbuild``).\n\nA minimal test suite (checking that ``pypi2pkgbuild.py`` can indeed package\nitself) can by run with ``pytest`` (``pytest -s`` to keep the output to the\nterminal).\n\nUsage\n-----\n\n``pypi2pkgbuild.py PYPINAME`` creates a PKGBUILD for the latest version of the\ngiven PyPI package and the current version of the Python interpreter (Python 3\nonly).  Prereleases are considered if the ``--pre`` flag is passed.  Because\nPyPI's dependency information is somewhat unreliable, it installs the package\nin a venv to figure out the dependencies.  Note that thanks to ``pip``'s wheel\ncache, the build is later reused; i.e. the procedure entails very little extra\nwork.\n\nA ``-git`` package can be built with ``pypi2pkbguild.py git+https://...``.\n\nThe package is then built and verified with ``namcap``.\n\nThe goal is to make this tool as automated as possible: if all the information\nto build a package is (reasonably) accessible, this tool should be able to\nbuild it.\n\nIn order to provide additional information to ``makepkg``, edit\n``PKGBUILD_EXTRAS`` (which can also be done with the ``--pkgbuild-extras``\nflag).  This file is sourced at the *end* of ``PKGBUILD``.  For ease of\npatching, the ``build``, ``package``, and, where applicable, ``pkgver``\nfunctions are defined by forwarding to ``_build``, ``_package``, and\n``_pkgver``.  A ``_check`` function is also available, but not used (due to the\nlack of standard testing CLI).  Some useful examples of ``PKGBUILD_EXTRAS`` are\nlisted in the ``pkgbuild-extras`` folder.\n\nUsage notes\n```````````\n\n- It is suggested to create an alias with standard options set, e.g.\n\n.. code-block:: sh\n\n   alias pypi2pkgbuild.py='PKGEXT=.pkg.tar pypi2pkgbuild.py -g cython -b /tmp/pypi2pkgbuild/ -f'\n\n- By default, the ``pkgrel`` of (standard) packages is set to ``00``.  This\n  allows automatic upgrading into official packages (and AUR ones, if an AUR\n  helper is used) whenever the repositories are updated.  Additionally, the use\n  of ``00`` rather than ``0`` serves as a (weak) marker that the package was\n  automatically generated by this tool.  In order to prevent such an upgrade,\n  one can use the ``--pkgrel`` flag to set ``pkgrel`` to, e.g., ``99``.\n\n- If one wishes to completely bypass AUR Python packages while maintaining the\n  use of an AUR helper for non-Python packages, one can define a shell function\n  that excludes ``pypi2pkgbuild.py``-generated packages that do not appear in\n  the official repositories, e.g., for ``pacaur``:\n\n  .. code-block:: sh\n\n     pacaur() {\n        if [[ \"$1\" = \"-Syu\" ]]; then\n           # Update, in case some packages moved in or out of the official repos.\n           sudo pacman -Sy\n           # Upgrade everything except python packages with pkgver=00 or 99.\n           PKGEXT=.pkg.tar command pacaur -Su --ignore \\\n                 \"$(pacman -Qm | grep '^python-.*-\\(00\\|99\\)$' | cut -d' ' -f1 | paste -sd,)\"\n        else\n           command pacaur \"$@\"\n        fi\n     }\n\n  This function will not bypass Python packages explicitly installed from the\n  AUR, as the user may have done so to bypass some incorrect packaging by\n  ``pypi2pkgbuild.py``.  It is recommended to use the ``-i`` flag to calls\n  to ``pypi2pkgbuild.py`` (e.g. in an alias) to exclude packages that are\n  mishandled by ``pypi2pkgbuild.py`` (see `mispackaged packages`_).  The ``-i``\n  flag can be passed multiple times; passing an empty argument to it will clear\n  the ignore list defined so far.\n\n  .. _mispackaged packages: TODO.rst#mispackaged-packages\n\n- In order to package a locally available git repository, use\n\n  .. code-block:: sh\n\n     $ pypi2pkgbuild.py git+file://$absolute_path_to_repo  # (e.g. file:///home/...)\n\n  In order to package a locally available sdist or wheel, use\n\n  .. code-block:: sh\n\n     $ pypi2pkgbuild.py file://$absolute_path_to_file  # (e.g. file:///home/...)\n\n  Note that in both cases *absolute* paths are necessary.\n\n  Building packages from local repos or wheels needs to be done in topological\n  order of the dependencies (so that ``pypi2pkgbuild.py`` can find that\n  the dependencies are actually present), or by passing the ``-d`` flag\n  (\"do not build dependencies\"); if it is used, the Arch package may\n  not use the correct dependency names (if they are not of the form\n  ``python-pep503-normalized-name``).\n\n- By default, ``pypi2pkgbuild.py`` ignores ``pip`` config files such as\n  ``~/.config/pip/pip.conf``.  An explicitly set ``PIP_CONFIG_FILE`` will be\n  respected, but may cause ``pypi2pkgbuild.py`` to fail as some ``pip`` calls\n  will be unexpectedly modified.\n\n  Likewise, user-site packages are ignored unless ``PYTHONNOUSERSITE`` is\n  explicitly set to an empty value.\n\nBuild-time dependencies of packages\n-----------------------------------\n\n``pypi2pkgbuild.py`` attempts to guess whether ``Cython`` and ``SWIG`` are\nbuild-time dependencies by checking for the presence of ``.pyx`` and ``.i``\nfiles, respectively.  If this is not desired, set the ``--guess-makedepends``\noption accordingly.\n\n``pypi2pkgbuild.py`` guesses whether ``numpy`` is a build-time dependency by\nattempting a build without ``numpy``, then, in case of failure, a build with\n``numpy``.\n\nAdditional Python build-time dependencies (i.e., ``setup_requires``) can be\nspecified (as PyPI names) using the ``--setup-requires`` flag, or just as\nnormal entries using ``--pkgbuild-extras`` (they will be installed into the\nbuild virtualenv).\n\nAdditional non-Python build-time dependencies can be set as ``makedepends``\nusing ``--pkgbuild-extras``; they will be installed *before*\n``pypi2pkgbuild.py`` attempts to build a wheel for the package.\n\nVendored packages\n-----------------\n\nSome Arch packages (e.g. ``ipython``) include a number of smaller PyPI\npackages.\n\nBecause it is not possible to assign a meaningful version automatically,\n``pypi2pkgbuild.py`` instead creates an independent Arch package for each of\nthe PyPI packages (with two dashes in the name, to prevent name conflicts) and\na master package that depends on all of them.  The ``pkgrel`` of the master\npackage is set to ``$official_pkgrel.99``, so that the package appears more\nrecent than the current official version but older than any future official\nversion.  All these packages ``conflict`` with all versions of the official\npackage (except the newly created package), so upgrading should work fine when\nthe official package is actually updated.\n\nHowever, dependencies are still expressed using the master package (to avoid\nbreakage on upgrade into an official package), so internal dependencies will\nappear be circular.\n\nAll the packages are placed in a subfolder named ``meta:$pkgname``, so one can\neasily install everything by ``cd``'ing there and running\n\n.. code-block:: sh\n\n   $ sudo pacman -U --asdeps **/*.xz\n   $ sudo pacman -D --asexplicit $pkgname/$pkgname.tar.xz\n\nHandling Python upgrades\n------------------------\n\nWhen the Python minor version (``x`` in ``3.x``) is upgraded, it is necessary\nto regenerate all self-built packages.  This can be done e.g. with\n\n.. code-block:: sh\n\n   $ pypi2pkgbuild.py $(\n        ls /usr/lib/python3.$oldver/site-packages |\n        grep -Po '.*(?=-.*.dist-info)'\n     )\n\nComparison with other tools\n---------------------------\n\nComparison with pip2arch\n````````````````````````\n\n``pypi2pkgbuild.py`` includes many improvements over ``pip2arch``:\n\n- Supports wheels (the default is to prefer ``any``-platform wheels, then\n  ``sdist``\\s, then ``manylinux1`` wheels, but this can be changed using\n  ``--pkgtypes``).\n- Resolves Python dependencies via installation in a temporary virtualenv, and\n  also creates PKGBUILDs for those that are not available as official packages.\n- Resolves binary dependencies via ``namcap`` and adds them to the ``depends``\n  array if they are installed (thus, it is suggested to first install\n  them as ``--asdeps`` and then let the generated PKGBUILD pick them up as\n  dependencies).  Note that some packages are distributed with a copy of the\n  required libraries; in this case, ``pypi2pkgbuild.py``\u2019s behavior will depend\n  on whether the package defaults to using the system-wide library or its own\n  copy.\n- Automatically tries to fetch a missing license file from Github, if\n  applicable.\n- Automatically builds the package (with options given in ``--makepkg=...``)\n  and run ``namcap``.\n- Automatically builds all outdated dependencies via ``-u``.\n\nComparison with fpm\n```````````````````\n\nAnother tool for converting PyPI packages to Arch Linux packages is the generic\nconverter fpm_; however, it seems to be incompatible with recent versions of\n``pip``.\n\n.. _fpm: https://github.com/jordansissel/fpm\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anntzer/pypi2pkgbuild", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pypi2pkgbuild", "package_url": "https://pypi.org/project/pypi2pkgbuild/", "platform": "", "project_url": "https://pypi.org/project/pypi2pkgbuild/", "project_urls": {"Homepage": "https://github.com/anntzer/pypi2pkgbuild"}, "release_url": "https://pypi.org/project/pypi2pkgbuild/0.2/", "requires_dist": ["pip (>=10)", "setuptools", "wheel"], "requires_python": ">=3.6", "summary": "A PyPI to PKGBUILD converter.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Convert PyPI packages to Arch Linux packages, inspired from <a href=\"https://github.com/bluepeppers/pip2arch\" rel=\"nofollow\">pip2arch</a>.</p>\n<p>Handles packages of all sizes, from the simplest (pure Python, no dependencies)\nto the most complex (C-level dependencies, external C libraries, etc., e.g.\nmost of the scientific Python stack, or GUI toolkits such as PyGObject and\nwxPython) <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>\u2026 with a bit of help.</td></tr>\n</tbody>\n</table>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#dependencies-and-installation\" id=\"id5\" rel=\"nofollow\">Dependencies and installation</a></li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#usage-notes\" id=\"id7\" rel=\"nofollow\">Usage notes</a></li>\n</ul>\n</li>\n<li><a href=\"#build-time-dependencies-of-packages\" id=\"id8\" rel=\"nofollow\">Build-time dependencies of packages</a></li>\n<li><a href=\"#vendored-packages\" id=\"id9\" rel=\"nofollow\">Vendored packages</a></li>\n<li><a href=\"#handling-python-upgrades\" id=\"id10\" rel=\"nofollow\">Handling Python upgrades</a></li>\n<li><a href=\"#comparison-with-other-tools\" id=\"id11\" rel=\"nofollow\">Comparison with other tools</a><ul>\n<li><a href=\"#comparison-with-pip2arch\" id=\"id12\" rel=\"nofollow\">Comparison with pip2arch</a></li>\n<li><a href=\"#comparison-with-fpm\" id=\"id13\" rel=\"nofollow\">Comparison with fpm</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"dependencies-and-installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Dependencies and installation</a></h2>\n<p><tt>pypi2pkgbuild.py</tt> depends on the Arch Linux packages <a href=\"https://wiki.archlinux.org/index.php/Namcap\" rel=\"nofollow\">namcap</a>, <a href=\"https://wiki.archlinux.org/index.php/Pkgfile\" rel=\"nofollow\">pkgfile</a>, and\n<a href=\"https://wiki.archlinux.org/index.php/Python#Package_management\" rel=\"nofollow\">python-pip</a> <a href=\"#id4\" id=\"id3\" rel=\"nofollow\">[2]</a>.</p>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[2]</a></td><td>Officially, only the latest releases of pacman and pip are supported.\nIn practice, the hard requirements that I am aware of are pacman\u22655.1\n(which changed the behavior of <tt>makepkg <span class=\"pre\">--printsrcinfo</span></tt>) and pip\u226510\n(which changed the default format of <tt>pip <span class=\"pre\">--list</span></tt>).</td></tr>\n</tbody>\n</table>\n<p>The script can be installed with <tt>pip install <span class=\"pre\">[--user]</span> .</tt>, or can also be run\ndirectly.</p>\n<p>One can even run <tt>pypi2pkgbuild.py</tt> on itself to create a proper Arch package\n(<tt>pypi2pkgbuild.py <span class=\"pre\">git+https://github.com/anntzer/pypi2pkgbuild</span></tt>).</p>\n<p>A minimal test suite (checking that <tt>pypi2pkgbuild.py</tt> can indeed package\nitself) can by run with <tt>pytest</tt> (<tt>pytest <span class=\"pre\">-s</span></tt> to keep the output to the\nterminal).</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<p><tt>pypi2pkgbuild.py PYPINAME</tt> creates a PKGBUILD for the latest version of the\ngiven PyPI package and the current version of the Python interpreter (Python 3\nonly).  Prereleases are considered if the <tt><span class=\"pre\">--pre</span></tt> flag is passed.  Because\nPyPI\u2019s dependency information is somewhat unreliable, it installs the package\nin a venv to figure out the dependencies.  Note that thanks to <tt>pip</tt>\u2019s wheel\ncache, the build is later reused; i.e. the procedure entails very little extra\nwork.</p>\n<p>A <tt><span class=\"pre\">-git</span></tt> package can be built with <tt>pypi2pkbguild.py <span class=\"pre\">git+https://...</span></tt>.</p>\n<p>The package is then built and verified with <tt>namcap</tt>.</p>\n<p>The goal is to make this tool as automated as possible: if all the information\nto build a package is (reasonably) accessible, this tool should be able to\nbuild it.</p>\n<p>In order to provide additional information to <tt>makepkg</tt>, edit\n<tt>PKGBUILD_EXTRAS</tt> (which can also be done with the <tt><span class=\"pre\">--pkgbuild-extras</span></tt>\nflag).  This file is sourced at the <em>end</em> of <tt>PKGBUILD</tt>.  For ease of\npatching, the <tt>build</tt>, <tt>package</tt>, and, where applicable, <tt>pkgver</tt>\nfunctions are defined by forwarding to <tt>_build</tt>, <tt>_package</tt>, and\n<tt>_pkgver</tt>.  A <tt>_check</tt> function is also available, but not used (due to the\nlack of standard testing CLI).  Some useful examples of <tt>PKGBUILD_EXTRAS</tt> are\nlisted in the <tt><span class=\"pre\">pkgbuild-extras</span></tt> folder.</p>\n<div id=\"usage-notes\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Usage notes</a></h3>\n<ul>\n<li>It is suggested to create an alias with standard options set, e.g.</li>\n</ul>\n<pre><span class=\"nb\">alias</span> pypi2pkgbuild.py<span class=\"o\">=</span><span class=\"s1\">'PKGEXT=.pkg.tar pypi2pkgbuild.py -g cython -b /tmp/pypi2pkgbuild/ -f'</span>\n</pre>\n<ul>\n<li><p>By default, the <tt>pkgrel</tt> of (standard) packages is set to <tt>00</tt>.  This\nallows automatic upgrading into official packages (and AUR ones, if an AUR\nhelper is used) whenever the repositories are updated.  Additionally, the use\nof <tt>00</tt> rather than <tt>0</tt> serves as a (weak) marker that the package was\nautomatically generated by this tool.  In order to prevent such an upgrade,\none can use the <tt><span class=\"pre\">--pkgrel</span></tt> flag to set <tt>pkgrel</tt> to, e.g., <tt>99</tt>.</p>\n</li>\n<li><p>If one wishes to completely bypass AUR Python packages while maintaining the\nuse of an AUR helper for non-Python packages, one can define a shell function\nthat excludes <tt>pypi2pkgbuild.py</tt>-generated packages that do not appear in\nthe official repositories, e.g., for <tt>pacaur</tt>:</p>\n<pre>pacaur<span class=\"o\">()</span> <span class=\"o\">{</span>\n   <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"-Syu\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n      <span class=\"c1\"># Update, in case some packages moved in or out of the official repos.\n</span>      sudo pacman -Sy\n      <span class=\"c1\"># Upgrade everything except python packages with pkgver=00 or 99.\n</span>      <span class=\"nv\">PKGEXT</span><span class=\"o\">=</span>.pkg.tar <span class=\"nb\">command</span> pacaur -Su --ignore <span class=\"se\">\\\n</span>            <span class=\"s2\">\"</span><span class=\"k\">$(</span>pacman -Qm <span class=\"p\">|</span> grep <span class=\"s1\">'^python-.*-\\(00\\|99\\)$'</span> <span class=\"p\">|</span> cut -d<span class=\"s1\">' '</span> -f1 <span class=\"p\">|</span> paste -sd,<span class=\"k\">)</span><span class=\"s2\">\"</span>\n   <span class=\"k\">else</span>\n      <span class=\"nb\">command</span> pacaur <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span>\n   <span class=\"k\">fi</span>\n<span class=\"o\">}</span>\n</pre>\n<p>This function will not bypass Python packages explicitly installed from the\nAUR, as the user may have done so to bypass some incorrect packaging by\n<tt>pypi2pkgbuild.py</tt>.  It is recommended to use the <tt><span class=\"pre\">-i</span></tt> flag to calls\nto <tt>pypi2pkgbuild.py</tt> (e.g. in an alias) to exclude packages that are\nmishandled by <tt>pypi2pkgbuild.py</tt> (see <a href=\"TODO.rst#mispackaged-packages\" rel=\"nofollow\">mispackaged packages</a>).  The <tt><span class=\"pre\">-i</span></tt>\nflag can be passed multiple times; passing an empty argument to it will clear\nthe ignore list defined so far.</p>\n</li>\n<li><p>In order to package a locally available git repository, use</p>\n<pre>$ pypi2pkgbuild.py git+file://<span class=\"nv\">$absolute_path_to_repo</span>  <span class=\"c1\"># (e.g. file:///home/...)</span>\n</pre>\n<p>In order to package a locally available sdist or wheel, use</p>\n<pre>$ pypi2pkgbuild.py file://<span class=\"nv\">$absolute_path_to_file</span>  <span class=\"c1\"># (e.g. file:///home/...)</span>\n</pre>\n<p>Note that in both cases <em>absolute</em> paths are necessary.</p>\n<p>Building packages from local repos or wheels needs to be done in topological\norder of the dependencies (so that <tt>pypi2pkgbuild.py</tt> can find that\nthe dependencies are actually present), or by passing the <tt><span class=\"pre\">-d</span></tt> flag\n(\u201cdo not build dependencies\u201d); if it is used, the Arch package may\nnot use the correct dependency names (if they are not of the form\n<tt><span class=\"pre\">python-pep503-normalized-name</span></tt>).</p>\n</li>\n<li><p>By default, <tt>pypi2pkgbuild.py</tt> ignores <tt>pip</tt> config files such as\n<tt><span class=\"pre\">~/.config/pip/pip.conf</span></tt>.  An explicitly set <tt>PIP_CONFIG_FILE</tt> will be\nrespected, but may cause <tt>pypi2pkgbuild.py</tt> to fail as some <tt>pip</tt> calls\nwill be unexpectedly modified.</p>\n<p>Likewise, user-site packages are ignored unless <tt>PYTHONNOUSERSITE</tt> is\nexplicitly set to an empty value.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"build-time-dependencies-of-packages\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Build-time dependencies of packages</a></h2>\n<p><tt>pypi2pkgbuild.py</tt> attempts to guess whether <tt>Cython</tt> and <tt>SWIG</tt> are\nbuild-time dependencies by checking for the presence of <tt>.pyx</tt> and <tt>.i</tt>\nfiles, respectively.  If this is not desired, set the <tt><span class=\"pre\">--guess-makedepends</span></tt>\noption accordingly.</p>\n<p><tt>pypi2pkgbuild.py</tt> guesses whether <tt>numpy</tt> is a build-time dependency by\nattempting a build without <tt>numpy</tt>, then, in case of failure, a build with\n<tt>numpy</tt>.</p>\n<p>Additional Python build-time dependencies (i.e., <tt>setup_requires</tt>) can be\nspecified (as PyPI names) using the <tt><span class=\"pre\">--setup-requires</span></tt> flag, or just as\nnormal entries using <tt><span class=\"pre\">--pkgbuild-extras</span></tt> (they will be installed into the\nbuild virtualenv).</p>\n<p>Additional non-Python build-time dependencies can be set as <tt>makedepends</tt>\nusing <tt><span class=\"pre\">--pkgbuild-extras</span></tt>; they will be installed <em>before</em>\n<tt>pypi2pkgbuild.py</tt> attempts to build a wheel for the package.</p>\n</div>\n<div id=\"vendored-packages\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Vendored packages</a></h2>\n<p>Some Arch packages (e.g. <tt>ipython</tt>) include a number of smaller PyPI\npackages.</p>\n<p>Because it is not possible to assign a meaningful version automatically,\n<tt>pypi2pkgbuild.py</tt> instead creates an independent Arch package for each of\nthe PyPI packages (with two dashes in the name, to prevent name conflicts) and\na master package that depends on all of them.  The <tt>pkgrel</tt> of the master\npackage is set to <tt>$official_pkgrel.99</tt>, so that the package appears more\nrecent than the current official version but older than any future official\nversion.  All these packages <tt>conflict</tt> with all versions of the official\npackage (except the newly created package), so upgrading should work fine when\nthe official package is actually updated.</p>\n<p>However, dependencies are still expressed using the master package (to avoid\nbreakage on upgrade into an official package), so internal dependencies will\nappear be circular.</p>\n<p>All the packages are placed in a subfolder named <tt><span class=\"pre\">meta:$pkgname</span></tt>, so one can\neasily install everything by <tt>cd</tt>\u2019ing there and running</p>\n<pre>$ sudo pacman -U --asdeps **/*.xz\n$ sudo pacman -D --asexplicit <span class=\"nv\">$pkgname</span>/<span class=\"nv\">$pkgname</span>.tar.xz\n</pre>\n</div>\n<div id=\"handling-python-upgrades\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Handling Python upgrades</a></h2>\n<p>When the Python minor version (<tt>x</tt> in <tt>3.x</tt>) is upgraded, it is necessary\nto regenerate all self-built packages.  This can be done e.g. with</p>\n<pre>$ pypi2pkgbuild.py <span class=\"k\">$(</span>\n     ls /usr/lib/python3.<span class=\"nv\">$oldver</span>/site-packages <span class=\"p\">|</span>\n     grep -Po <span class=\"s1\">'.*(?=-.*.dist-info)'</span>\n  <span class=\"k\">)</span>\n</pre>\n</div>\n<div id=\"comparison-with-other-tools\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Comparison with other tools</a></h2>\n<div id=\"comparison-with-pip2arch\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Comparison with pip2arch</a></h3>\n<p><tt>pypi2pkgbuild.py</tt> includes many improvements over <tt>pip2arch</tt>:</p>\n<ul>\n<li>Supports wheels (the default is to prefer <tt>any</tt>-platform wheels, then\n<tt>sdist</tt>s, then <tt>manylinux1</tt> wheels, but this can be changed using\n<tt><span class=\"pre\">--pkgtypes</span></tt>).</li>\n<li>Resolves Python dependencies via installation in a temporary virtualenv, and\nalso creates PKGBUILDs for those that are not available as official packages.</li>\n<li>Resolves binary dependencies via <tt>namcap</tt> and adds them to the <tt>depends</tt>\narray if they are installed (thus, it is suggested to first install\nthem as <tt><span class=\"pre\">--asdeps</span></tt> and then let the generated PKGBUILD pick them up as\ndependencies).  Note that some packages are distributed with a copy of the\nrequired libraries; in this case, <tt>pypi2pkgbuild.py</tt>\u2019s behavior will depend\non whether the package defaults to using the system-wide library or its own\ncopy.</li>\n<li>Automatically tries to fetch a missing license file from Github, if\napplicable.</li>\n<li>Automatically builds the package (with options given in <tt><span class=\"pre\">--makepkg=...</span></tt>)\nand run <tt>namcap</tt>.</li>\n<li>Automatically builds all outdated dependencies via <tt><span class=\"pre\">-u</span></tt>.</li>\n</ul>\n</div>\n<div id=\"comparison-with-fpm\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Comparison with fpm</a></h3>\n<p>Another tool for converting PyPI packages to Arch Linux packages is the generic\nconverter <a href=\"https://github.com/jordansissel/fpm\" rel=\"nofollow\">fpm</a>; however, it seems to be incompatible with recent versions of\n<tt>pip</tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4217871, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e156ff45f44aeb8c8075ccd80eda8bde", "sha256": "9b29e7192746732cfa6a446bed048a3f73c004d06332379bcc6c49c638ba0225"}, "downloads": -1, "filename": "pypi2pkgbuild-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e156ff45f44aeb8c8075ccd80eda8bde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23268, "upload_time": "2017-04-12T08:09:26", "upload_time_iso_8601": "2017-04-12T08:09:26.147712Z", "url": "https://files.pythonhosted.org/packages/c6/e3/57d9b15ff4d697da87dce2b8adb27d735e54bb3fe2076d0041abd527286a/pypi2pkgbuild-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5a2e99d0f613fff7723ee16929a3c031", "sha256": "01eea9b773d2d8504157ed5a33024cf3f1cf33d58bb416f4705efd5774ea879a"}, "downloads": -1, "filename": "pypi2pkgbuild-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5a2e99d0f613fff7723ee16929a3c031", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22991, "upload_time": "2018-08-29T06:42:38", "upload_time_iso_8601": "2018-08-29T06:42:38.053260Z", "url": "https://files.pythonhosted.org/packages/04/3d/64a31fdc05c775fbbc0fa36066c6271cfa58367ac4e2493b208393747c22/pypi2pkgbuild-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fe22c32c784b441c48bbb205bc9a3e9", "sha256": "3387180d2864f09e67429eeaa41d3b9fba95ec1dd5badaae54a550003db70f98"}, "downloads": -1, "filename": "pypi2pkgbuild-0.2.tar.gz", "has_sig": false, "md5_digest": "2fe22c32c784b441c48bbb205bc9a3e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 57102, "upload_time": "2018-08-29T06:42:40", "upload_time_iso_8601": "2018-08-29T06:42:40.118268Z", "url": "https://files.pythonhosted.org/packages/6d/e9/f3352cd3f27f66a6de2b5fd6878adf10c0b52eee72bdfaef73f33b1b26d9/pypi2pkgbuild-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a2e99d0f613fff7723ee16929a3c031", "sha256": "01eea9b773d2d8504157ed5a33024cf3f1cf33d58bb416f4705efd5774ea879a"}, "downloads": -1, "filename": "pypi2pkgbuild-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5a2e99d0f613fff7723ee16929a3c031", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22991, "upload_time": "2018-08-29T06:42:38", "upload_time_iso_8601": "2018-08-29T06:42:38.053260Z", "url": "https://files.pythonhosted.org/packages/04/3d/64a31fdc05c775fbbc0fa36066c6271cfa58367ac4e2493b208393747c22/pypi2pkgbuild-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fe22c32c784b441c48bbb205bc9a3e9", "sha256": "3387180d2864f09e67429eeaa41d3b9fba95ec1dd5badaae54a550003db70f98"}, "downloads": -1, "filename": "pypi2pkgbuild-0.2.tar.gz", "has_sig": false, "md5_digest": "2fe22c32c784b441c48bbb205bc9a3e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 57102, "upload_time": "2018-08-29T06:42:40", "upload_time_iso_8601": "2018-08-29T06:42:40.118268Z", "url": "https://files.pythonhosted.org/packages/6d/e9/f3352cd3f27f66a6de2b5fd6878adf10c0b52eee72bdfaef73f33b1b26d9/pypi2pkgbuild-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:38 2020"}