{"info": {"author": "Johan Herland", "author_email": "johan@herland.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# partiell\n\nPartial argument application using `...`.\n\n## Description\n\nAn enhanced version of [`functools.partial()`](\nhttps://docs.python.org/3/library/functools.html#functools.partial) that\nallows partially applying positional arguments from both the left and right\nsides of the argument list.\n\nWe use `...` (the _Ellipsis_ object) as a placeholder in the argument list for\nthe arguments that are **not** yet supplied. The object returned from `partial()`\nalso supports being called with `...` for further partial application.\n\nUse `partial` as a function decorator (`@partial`) to make a function\nautomatically support partial argument application with `...`.\n\n## Usage\n\nAs a drop-in replacement for `functools.partial()`:\n\n```python\n>>> from partiell import partial\n>>> from operator import mul, truediv\n\n>>> double = partial(mul, 2)  # same as functools.partial()\n>>> double(5)\n10\n\n>>> halve = partial(truediv, ..., 2)  # functools.partial() cannot do this\n>>> halve(3)\n1.5\n```\n\nAs a function decorator to enable smoother partial function application:\n\n```python\n>>> @partial\n... def f(x, y, z):\n...    return x * 100 + y * 10 + z\n```\n\n`f()` can now be called with `...` for partial function application:\n\n```python\n>>> g = f(1, ...)  # Supply first argument only (x)\n>>> g(2, 3)  # Supply the two remaining arguments (y, z)\n123\n```\n\nFunctions derived from `f()` automatically support `...` themselves:\n\n```python\n>>> h = g(2, ...)  # Supply g's first argument (y)\n>>> h(3)  # Supply the final argument (z)\n123\n```\n\nUsing the `...` placeholder also allows supplying arguments right-to-left:\n\n```python\n>>> i = f(..., 3)  # Supply last argument only (z)\n>>> i(1, 2)  # Supply the remaining arguments (x, y)\n123\n```\n\nWe can even supply arguments from both ends simultaneously:\n\n```python\n>>> j = f(1, ..., 3)  # Supply first and last argument (x, z)\n>>> j(2)  # Supply the remaining argument (y)\n123\n```\n\n## Discussion\n\nUsing `...` as a placeholder for future function arguments allows for a\n\"functional light\" programming style that is somewhere between the verbosity\nof invoking partial() explicitly and the implicit currying provided by e.g.\nthe `@curry` decorator in [PyMonad](https://pypi.org/project/PyMonad/).\n\n## Installation\n\nRun the following to install:\n\n```bash\n$ pip install partiell\n```\n\n## Development\n\nTo work on partiell, clone [this repo](https://github.com/jherland/partiell/),\nand run the following (in a virtualenv) to get everything you need to develop\nand run tests:\n\n```bash\n$ pip install -e .[dev]\n```\n\nAlternatively, if you are using Nix, simply use the bundled `shell.nix` to get\na development environment:\n\n```bash\n$ nix-shell\n```\n\nUse the `run_tests.sh` script to run all tests:\n\n```bash\n$ ./run_tests.sh\n```\n\n## Contributing\n\nMain development happens at <https://github.com/jherland/partiell/>.\nPost issues and PRs there.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jherland/partiell", "keywords": "functools partial ellipsis functional currying", "license": "", "maintainer": "", "maintainer_email": "", "name": "partiell", "package_url": "https://pypi.org/project/partiell/", "platform": "", "project_url": "https://pypi.org/project/partiell/", "project_urls": {"Homepage": "https://github.com/jherland/partiell"}, "release_url": "https://pypi.org/project/partiell/0.0.1/", "requires_dist": ["black ; extra == 'dev'", "check-manifest ; extra == 'dev'", "twine ; extra == 'dev'"], "requires_python": ">=3.8", "summary": "Partial function application with '...'", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>partiell</h1>\n<p>Partial argument application using <code>...</code>.</p>\n<h2>Description</h2>\n<p>An enhanced version of <a href=\"https://docs.python.org/3/library/functools.html#functools.partial\" rel=\"nofollow\"><code>functools.partial()</code></a> that\nallows partially applying positional arguments from both the left and right\nsides of the argument list.</p>\n<p>We use <code>...</code> (the <em>Ellipsis</em> object) as a placeholder in the argument list for\nthe arguments that are <strong>not</strong> yet supplied. The object returned from <code>partial()</code>\nalso supports being called with <code>...</code> for further partial application.</p>\n<p>Use <code>partial</code> as a function decorator (<code>@partial</code>) to make a function\nautomatically support partial argument application with <code>...</code>.</p>\n<h2>Usage</h2>\n<p>As a drop-in replacement for <code>functools.partial()</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">partiell</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"n\">truediv</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">double</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># same as functools.partial()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">double</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"mi\">10</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">halve</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">truediv</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># functools.partial() cannot do this</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">halve</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mf\">1.5</span>\n</pre>\n<p>As a function decorator to enable smoother partial function application:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@partial</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">100</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">z</span>\n</pre>\n<p><code>f()</code> can now be called with <code>...</code> for partial function application:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply first argument only (x)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply the two remaining arguments (y, z)</span>\n<span class=\"mi\">123</span>\n</pre>\n<p>Functions derived from <code>f()</code> automatically support <code>...</code> themselves:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply g's first argument (y)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">h</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply the final argument (z)</span>\n<span class=\"mi\">123</span>\n</pre>\n<p>Using the <code>...</code> placeholder also allows supplying arguments right-to-left:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply last argument only (z)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply the remaining arguments (x, y)</span>\n<span class=\"mi\">123</span>\n</pre>\n<p>We can even supply arguments from both ends simultaneously:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply first and last argument (x, z)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">j</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Supply the remaining argument (y)</span>\n<span class=\"mi\">123</span>\n</pre>\n<h2>Discussion</h2>\n<p>Using <code>...</code> as a placeholder for future function arguments allows for a\n\"functional light\" programming style that is somewhere between the verbosity\nof invoking partial() explicitly and the implicit currying provided by e.g.\nthe <code>@curry</code> decorator in <a href=\"https://pypi.org/project/PyMonad/\" rel=\"nofollow\">PyMonad</a>.</p>\n<h2>Installation</h2>\n<p>Run the following to install:</p>\n<pre>$ pip install partiell\n</pre>\n<h2>Development</h2>\n<p>To work on partiell, clone <a href=\"https://github.com/jherland/partiell/\" rel=\"nofollow\">this repo</a>,\nand run the following (in a virtualenv) to get everything you need to develop\nand run tests:</p>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>Alternatively, if you are using Nix, simply use the bundled <code>shell.nix</code> to get\na development environment:</p>\n<pre>$ nix-shell\n</pre>\n<p>Use the <code>run_tests.sh</code> script to run all tests:</p>\n<pre>$ ./run_tests.sh\n</pre>\n<h2>Contributing</h2>\n<p>Main development happens at <a href=\"https://github.com/jherland/partiell/\" rel=\"nofollow\">https://github.com/jherland/partiell/</a>.\nPost issues and PRs there.</p>\n\n          </div>"}, "last_serial": 6419517, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "15e5075fb3626d62a68ff57a7c96da6a", "sha256": "68f133049ab283867f02113e1ab6fd5317dd9d959aa24d61d0fd5cb5403361bf"}, "downloads": -1, "filename": "partiell-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "15e5075fb3626d62a68ff57a7c96da6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8773, "upload_time": "2020-01-09T01:10:39", "upload_time_iso_8601": "2020-01-09T01:10:39.767686Z", "url": "https://files.pythonhosted.org/packages/0d/dd/ec86988f0cf118f2b7700e55b0da049bb261b7df3cfe2874dfdfa80ce0f1/partiell-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07e3ce68972e90781fc32e292272b1ec", "sha256": "99d09abd28eb030f608de23044a1b6c5bdce5c2965aaf6dc685444a04f24c21c"}, "downloads": -1, "filename": "partiell-0.0.1.tar.gz", "has_sig": false, "md5_digest": "07e3ce68972e90781fc32e292272b1ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 11778, "upload_time": "2020-01-09T01:10:42", "upload_time_iso_8601": "2020-01-09T01:10:42.271728Z", "url": "https://files.pythonhosted.org/packages/e2/75/e698c3fa583855afd6d2717401b312c5b1bdfe3999c2522bc87a18cd7052/partiell-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15e5075fb3626d62a68ff57a7c96da6a", "sha256": "68f133049ab283867f02113e1ab6fd5317dd9d959aa24d61d0fd5cb5403361bf"}, "downloads": -1, "filename": "partiell-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "15e5075fb3626d62a68ff57a7c96da6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8773, "upload_time": "2020-01-09T01:10:39", "upload_time_iso_8601": "2020-01-09T01:10:39.767686Z", "url": "https://files.pythonhosted.org/packages/0d/dd/ec86988f0cf118f2b7700e55b0da049bb261b7df3cfe2874dfdfa80ce0f1/partiell-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07e3ce68972e90781fc32e292272b1ec", "sha256": "99d09abd28eb030f608de23044a1b6c5bdce5c2965aaf6dc685444a04f24c21c"}, "downloads": -1, "filename": "partiell-0.0.1.tar.gz", "has_sig": false, "md5_digest": "07e3ce68972e90781fc32e292272b1ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 11778, "upload_time": "2020-01-09T01:10:42", "upload_time_iso_8601": "2020-01-09T01:10:42.271728Z", "url": "https://files.pythonhosted.org/packages/e2/75/e698c3fa583855afd6d2717401b312c5b1bdfe3999c2522bc87a18cd7052/partiell-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:12 2020"}