{"info": {"author": "Matan Drory Retwitzer", "author_email": "matandro@post.bgu.ac.il", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# RNAfbinv 2.0\n\nRNAfbinv is a fragment based RNA design tool. It uses a simulated annealing process to optimize a 2D RNA structure.<br/>\nThe similarity is based on fragment based design. A tree alignment is done based on nodes (structural motifs).<br/>\nNodes are comparable if they are both bounded motifs (stems) or unbounded motifs (multi loop, interior loops, bulges ect...).<br/>\nEach iteration the target motif tree will be aligned to the current candidate tree.<br/>\nThe best alignment with the addition of other valuable features will generate a design score.<br/>\nDesign score of 0 is exact fit but even higher scores can generate a good candidate.<br/><br/>\nRNAfbinv 2.0 can be easily installed as it is available on pypi (python 3 compatible). To install it simply run ```pip install rnafbinv```.\n\n<br/>\nIf you use the tool please cite:<br/> \nDrory Retwitzer, M., Reinharz, V., Churkin, A., Ponty, Y., Waldisp\u05b3\u00bchl, J., & Barash, D. (2019) \nincaRNAfbinv 2.0 - A webserver and software with motif control for fragment-based design of RNAs. Bioinformatics, accepted.\n\n## Attaching Vienna RNA\n\n[Vienna RNA package](https://www.tbi.univie.ac.at/RNA/ \"Vienna RNA home\") is required for RNAfbinv to work. This must be installed separately.<br/>\nCurrent version was tested with Vienna 2.4 and above. RNAfbinv will identify Vienna package if it's bin directory is in PATH.<br/>\nIf you wish to link a specific installation of Vienna set the VIENNA_PATH environment variable to the correct bin directory.\n\nYou can set Vienna location in python\n```python\nimport os\nos.environ['VIENNA_PATH'] = \"VIENNA_BIN_DIR_PATH\"\n```\n\nor directly via the vienna script\n```python\nfrom rnafbinv import vienna\nvienna.set_vienna_path(\"VIENNA_BIN_DIR_PATH\")\n```\n\n## Usage\n\nThe design process can be ran using the following code:\n```python\nfrom rnafbinv import RNAfbinvCL\nRNAfbinvCL.main(command_line_arguments)\n```\n\nTo generate a tree for a specific sequence / structure:<br/>\nStructure is a dot bracket notation structure and sequence is an IUPAC string with the same length\n```python\nfrom rnafbinv import shapiro_tree_aligner\nshapiro_tree_aligner.get_tree(sructure, sequence)\n```\n\nTo compare two trees and score them:\nalignment_rules has a default value and is optional\n```python\nfrom rnafbinv import shapiro_tree_aligner\nshapiro_tree_aligner.align_trees(source_tree, tree_target, alignment_rules)\n```\n\n## GUI / Command line\n\nYou can download the RNAfbinv wrapper from [RNAfbinv2.0 git repository](https://github.com/matandro/RNAsfbinv/)<br/>\nThe main folder includes python code to run the GUI / command line and a configuration file:\n* RNAfbinv.py - A GUI wrapper for RNAfbinv2.0\n* RNAfbinvCL.py - A command line wrapper for RNAfbinv2.0\n* **Required** varna_generator.py - Used to generate images based on [VARNA](http://varna.lri.fr/ \"VARNA rna homepage\")\n* **Required** config.ini - Configuration file with paths to required software (information below).\n* **Required** img folder with NoImage.png - used in GUI as a placeholder\n\nIf you remove the VARNA jar or do not have java installed, images will not be generated but the design process will proceed normally.<br/><br/>\n\nTo specify [vienna package](https://www.tbi.univie.ac.at/RNA/ \"The ViennaRNA Package homepage\") binary folder please update the 'VIENNA' parameter in config.ini (or set VIENNA_PATH environment variable)<br/>\nTo specify Java binary folder please update the 'JAVA' parameter in config.ini (or set JAVA_PATH environment variable)<br/>\nTo specify [VARNA](http://varna.lri.fr/ \"VARNA rna homepage\")'s jar file please update the 'VARNA' parameter in config.ini (or set VARNA_PATH environment variable)<br/>\nNote that if the java or vienna package binaries are in your environment variables you may leave it empty.\n\nExample to a valid config.ini file which has java installed and within the system's path:\n```\n[PATH]\nVIENNA=~/ViennaRNA/bin/\n#JAVA=\nVARNA=~/VARNA/VARNAv3-93.jar\n```\n\n### Command line arguments:\n\n```\nusage: RNAfbinvCL.py [-h] [-l LOG_OUTPUT] [--verbose | --debug]\n                     [-p {MFE,centroid}] [-i ITERATIONS] [--seed SEED]\n                     [-t LOOK_AHEAD] [--reduced_bi REDUCED_BI] [-e]\n                     [--seq_motif] [-m MOTIF_LIST] [-s STARTING_SEQUENCE | -r]\n                     [--length LENGTH] [-f INPUT_FILE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LOG_OUTPUT, --log_output LOG_OUTPUT\n                        Path to output log file. (default: None)\n  --verbose             Increase output verbosity. (default: False)\n  --debug               Debug level logging. (default: False)\n  -p {MFE,centroid}, --structure_type {MFE,centroid}\n                        uses RNAfold centroid or MFE folding. (default: MFE)\n  -i ITERATIONS, --iterations ITERATIONS\n                        Sets the number of simulated annealing iterations.\n                        (default: 100)\n  --seed SEED           Random seed used in the random number generator.\n                        (default: None)\n  -t LOOK_AHEAD, --look_ahead LOOK_AHEAD\n                        Number of look head mutation attempts for each\n                        iteration. (default: 4)\n  --reduced_bi REDUCED_BI\n                        Remove extra penalty for removal or addition of bulges\n                        and interior loops under the given size. Alignment\n                        penalties still occur. (default: 0)\n  -e, --circular        Designs a circular RNA. (default: False)\n  --seq_motif           Enables increased penalty for insertion or deletions\n                        within marked regions (lower case characters in\n                        sequence constraint). The feature was added to control\n                        multi base sequence constraints (sequence motifs).\n                        Only valid within a specific structural motif.\n                        (default: False)\n  -m MOTIF_LIST, --motif_list MOTIF_LIST\n                        A comma separated list of motifs that are targeted for\n                        preservation with size.Single motif format: <motif\n                        No>[M|H|E|I|S|B]<motif No of bases>. Use\n                        rnafbinv.ListMotifs.list_motifs(structure) to retrieve\n                        a list of legal motifs for a given structure.\n                        (default: [])\n  -s STARTING_SEQUENCE, --starting_sequence STARTING_SEQUENCE\n                        The initial sequence for the simulated annealing\n                        process in IUPAC nucleotide codes. (default: None)\n  -r, --random_start    Start simulated annealing with a random sequence.\n                        (default: False)\n  --length LENGTH       Maximum variation in result length compared to target\n                        structure. (default: 0)\n  -f INPUT_FILE         Path of ini file that includes mandatory information.\n                        Some options can also be set via file. command line\n                        options take precedence. (default: None)\n```\n\n### Input file format (the '-f' parameter):\n\n```\n# mandatory\nTARGET_STRUCTURE=<target structure>\nTARGET_SEQUENCE=<target sequence>\n# optional\nTARGET_ENERGY=<target energy>\nTARGET_MR=<target mutational robustness>\nSEED=<random seed>\nSTARTING_SEQUENCE=<starting sequence>\nITERATION=<number of simulated annealing iterations>\n```\n\n## Webserver\n\nRNAfbinv2.0 can be found in a web server combined with incaRNAtion. The webserver generates starting seeds using incaRNAtion global sampling algorithm.<br/>\nTe seed sequences are then sent to RNAfbinv2.0 for design. [incaRNAfbinv web server](https://www.cs.bgu.ac.il/incaRNAfbinv/ \"incaRNAtion & RNAfbinv\")\n\n## The Tree class\n\nThe tree alignment was written in an object oriented pattern (found in tree_aligner.py) . \nThe `Tree` class generates the best alignment between two trees based on\na dynamic programming algorithm based on the classic classic Jiang-Wang-Zhang solution. The `TreeValue` class is expended to solve the fragment-based comparison of two \"shapiro trees\" \nbut it can solve multiple problems based on the user needs.<br/>\nTo use the code one must define a `TreeValue` class the specifies the value of a single node in the tree.\nTo align the trees the user must implement an `AlignmentObject` class which is a container \nthat holds four functions:<br/>\n* minmax_func - Function that receives two floating value and returns the best of the two (example: min, max)\n* delete_func - Function that receives a `TreeValue` and a boolean stating if the value is from the target of source tree and returns a score \nrepresenting the value of the deletion and an optional `AlignmentResult` object that includes a description of the deletion  \n* cmp_func - Function that receives two `TreeValue` objects and compares them, it returns a score and an optional `AlignmentResult` object that \nincludes the description of the comparison\n* merge_func - Function the receives two `TreeValue` objects returns a new `TreeValue` representing the merge between the two.\n<br/>\nA reference implementation can be found in the file: shapiro_tree_aligner.py\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matandro/RNAsfbinv", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rnafbinv", "package_url": "https://pypi.org/project/rnafbinv/", "platform": "", "project_url": "https://pypi.org/project/rnafbinv/", "project_urls": {"Homepage": "https://github.com/matandro/RNAsfbinv"}, "release_url": "https://pypi.org/project/rnafbinv/2.0.4/", "requires_dist": null, "requires_python": "", "summary": "Fragment based RNA designer", "version": "2.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RNAfbinv 2.0</h1>\n<p>RNAfbinv is a fragment based RNA design tool. It uses a simulated annealing process to optimize a 2D RNA structure.<br>\nThe similarity is based on fragment based design. A tree alignment is done based on nodes (structural motifs).<br>\nNodes are comparable if they are both bounded motifs (stems) or unbounded motifs (multi loop, interior loops, bulges ect...).<br>\nEach iteration the target motif tree will be aligned to the current candidate tree.<br>\nThe best alignment with the addition of other valuable features will generate a design score.<br>\nDesign score of 0 is exact fit but even higher scores can generate a good candidate.<br><br>\nRNAfbinv 2.0 can be easily installed as it is available on pypi (python 3 compatible). To install it simply run <code>pip install rnafbinv</code>.</p>\n<br>\nIf you use the tool please cite:<br> \nDrory Retwitzer, M., Reinharz, V., Churkin, A., Ponty, Y., Waldisp\u05b3\u00bchl, J., &amp; Barash, D. (2019) \nincaRNAfbinv 2.0 - A webserver and software with motif control for fragment-based design of RNAs. Bioinformatics, accepted.\n<h2>Attaching Vienna RNA</h2>\n<p><a href=\"https://www.tbi.univie.ac.at/RNA/\" rel=\"nofollow\" title=\"Vienna RNA home\">Vienna RNA package</a> is required for RNAfbinv to work. This must be installed separately.<br>\nCurrent version was tested with Vienna 2.4 and above. RNAfbinv will identify Vienna package if it's bin directory is in PATH.<br>\nIf you wish to link a specific installation of Vienna set the VIENNA_PATH environment variable to the correct bin directory.</p>\n<p>You can set Vienna location in python</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'VIENNA_PATH'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"VIENNA_BIN_DIR_PATH\"</span>\n</pre>\n<p>or directly via the vienna script</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnafbinv</span> <span class=\"kn\">import</span> <span class=\"n\">vienna</span>\n<span class=\"n\">vienna</span><span class=\"o\">.</span><span class=\"n\">set_vienna_path</span><span class=\"p\">(</span><span class=\"s2\">\"VIENNA_BIN_DIR_PATH\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>The design process can be ran using the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnafbinv</span> <span class=\"kn\">import</span> <span class=\"n\">RNAfbinvCL</span>\n<span class=\"n\">RNAfbinvCL</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">command_line_arguments</span><span class=\"p\">)</span>\n</pre>\n<p>To generate a tree for a specific sequence / structure:<br>\nStructure is a dot bracket notation structure and sequence is an IUPAC string with the same length</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnafbinv</span> <span class=\"kn\">import</span> <span class=\"n\">shapiro_tree_aligner</span>\n<span class=\"n\">shapiro_tree_aligner</span><span class=\"o\">.</span><span class=\"n\">get_tree</span><span class=\"p\">(</span><span class=\"n\">sructure</span><span class=\"p\">,</span> <span class=\"n\">sequence</span><span class=\"p\">)</span>\n</pre>\n<p>To compare two trees and score them:\nalignment_rules has a default value and is optional</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rnafbinv</span> <span class=\"kn\">import</span> <span class=\"n\">shapiro_tree_aligner</span>\n<span class=\"n\">shapiro_tree_aligner</span><span class=\"o\">.</span><span class=\"n\">align_trees</span><span class=\"p\">(</span><span class=\"n\">source_tree</span><span class=\"p\">,</span> <span class=\"n\">tree_target</span><span class=\"p\">,</span> <span class=\"n\">alignment_rules</span><span class=\"p\">)</span>\n</pre>\n<h2>GUI / Command line</h2>\n<p>You can download the RNAfbinv wrapper from <a href=\"https://github.com/matandro/RNAsfbinv/\" rel=\"nofollow\">RNAfbinv2.0 git repository</a><br>\nThe main folder includes python code to run the GUI / command line and a configuration file:</p>\n<ul>\n<li>RNAfbinv.py - A GUI wrapper for RNAfbinv2.0</li>\n<li>RNAfbinvCL.py - A command line wrapper for RNAfbinv2.0</li>\n<li><strong>Required</strong> varna_generator.py - Used to generate images based on <a href=\"http://varna.lri.fr/\" rel=\"nofollow\" title=\"VARNA rna homepage\">VARNA</a></li>\n<li><strong>Required</strong> config.ini - Configuration file with paths to required software (information below).</li>\n<li><strong>Required</strong> img folder with NoImage.png - used in GUI as a placeholder</li>\n</ul>\n<p>If you remove the VARNA jar or do not have java installed, images will not be generated but the design process will proceed normally.<br><br></p>\n<p>To specify <a href=\"https://www.tbi.univie.ac.at/RNA/\" rel=\"nofollow\" title=\"The ViennaRNA Package homepage\">vienna package</a> binary folder please update the 'VIENNA' parameter in config.ini (or set VIENNA_PATH environment variable)<br>\nTo specify Java binary folder please update the 'JAVA' parameter in config.ini (or set JAVA_PATH environment variable)<br>\nTo specify <a href=\"http://varna.lri.fr/\" rel=\"nofollow\" title=\"VARNA rna homepage\">VARNA</a>'s jar file please update the 'VARNA' parameter in config.ini (or set VARNA_PATH environment variable)<br>\nNote that if the java or vienna package binaries are in your environment variables you may leave it empty.</p>\n<p>Example to a valid config.ini file which has java installed and within the system's path:</p>\n<pre><code>[PATH]\nVIENNA=~/ViennaRNA/bin/\n#JAVA=\nVARNA=~/VARNA/VARNAv3-93.jar\n</code></pre>\n<h3>Command line arguments:</h3>\n<pre><code>usage: RNAfbinvCL.py [-h] [-l LOG_OUTPUT] [--verbose | --debug]\n                     [-p {MFE,centroid}] [-i ITERATIONS] [--seed SEED]\n                     [-t LOOK_AHEAD] [--reduced_bi REDUCED_BI] [-e]\n                     [--seq_motif] [-m MOTIF_LIST] [-s STARTING_SEQUENCE | -r]\n                     [--length LENGTH] [-f INPUT_FILE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l LOG_OUTPUT, --log_output LOG_OUTPUT\n                        Path to output log file. (default: None)\n  --verbose             Increase output verbosity. (default: False)\n  --debug               Debug level logging. (default: False)\n  -p {MFE,centroid}, --structure_type {MFE,centroid}\n                        uses RNAfold centroid or MFE folding. (default: MFE)\n  -i ITERATIONS, --iterations ITERATIONS\n                        Sets the number of simulated annealing iterations.\n                        (default: 100)\n  --seed SEED           Random seed used in the random number generator.\n                        (default: None)\n  -t LOOK_AHEAD, --look_ahead LOOK_AHEAD\n                        Number of look head mutation attempts for each\n                        iteration. (default: 4)\n  --reduced_bi REDUCED_BI\n                        Remove extra penalty for removal or addition of bulges\n                        and interior loops under the given size. Alignment\n                        penalties still occur. (default: 0)\n  -e, --circular        Designs a circular RNA. (default: False)\n  --seq_motif           Enables increased penalty for insertion or deletions\n                        within marked regions (lower case characters in\n                        sequence constraint). The feature was added to control\n                        multi base sequence constraints (sequence motifs).\n                        Only valid within a specific structural motif.\n                        (default: False)\n  -m MOTIF_LIST, --motif_list MOTIF_LIST\n                        A comma separated list of motifs that are targeted for\n                        preservation with size.Single motif format: &lt;motif\n                        No&gt;[M|H|E|I|S|B]&lt;motif No of bases&gt;. Use\n                        rnafbinv.ListMotifs.list_motifs(structure) to retrieve\n                        a list of legal motifs for a given structure.\n                        (default: [])\n  -s STARTING_SEQUENCE, --starting_sequence STARTING_SEQUENCE\n                        The initial sequence for the simulated annealing\n                        process in IUPAC nucleotide codes. (default: None)\n  -r, --random_start    Start simulated annealing with a random sequence.\n                        (default: False)\n  --length LENGTH       Maximum variation in result length compared to target\n                        structure. (default: 0)\n  -f INPUT_FILE         Path of ini file that includes mandatory information.\n                        Some options can also be set via file. command line\n                        options take precedence. (default: None)\n</code></pre>\n<h3>Input file format (the '-f' parameter):</h3>\n<pre><code># mandatory\nTARGET_STRUCTURE=&lt;target structure&gt;\nTARGET_SEQUENCE=&lt;target sequence&gt;\n# optional\nTARGET_ENERGY=&lt;target energy&gt;\nTARGET_MR=&lt;target mutational robustness&gt;\nSEED=&lt;random seed&gt;\nSTARTING_SEQUENCE=&lt;starting sequence&gt;\nITERATION=&lt;number of simulated annealing iterations&gt;\n</code></pre>\n<h2>Webserver</h2>\n<p>RNAfbinv2.0 can be found in a web server combined with incaRNAtion. The webserver generates starting seeds using incaRNAtion global sampling algorithm.<br>\nTe seed sequences are then sent to RNAfbinv2.0 for design. <a href=\"https://www.cs.bgu.ac.il/incaRNAfbinv/\" rel=\"nofollow\" title=\"incaRNAtion &amp; RNAfbinv\">incaRNAfbinv web server</a></p>\n<h2>The Tree class</h2>\n<p>The tree alignment was written in an object oriented pattern (found in tree_aligner.py) .\nThe <code>Tree</code> class generates the best alignment between two trees based on\na dynamic programming algorithm based on the classic classic Jiang-Wang-Zhang solution. The <code>TreeValue</code> class is expended to solve the fragment-based comparison of two \"shapiro trees\"\nbut it can solve multiple problems based on the user needs.<br>\nTo use the code one must define a <code>TreeValue</code> class the specifies the value of a single node in the tree.\nTo align the trees the user must implement an <code>AlignmentObject</code> class which is a container\nthat holds four functions:<br></p>\n<ul>\n<li>minmax_func - Function that receives two floating value and returns the best of the two (example: min, max)</li>\n<li>delete_func - Function that receives a <code>TreeValue</code> and a boolean stating if the value is from the target of source tree and returns a score\nrepresenting the value of the deletion and an optional <code>AlignmentResult</code> object that includes a description of the deletion</li>\n<li>cmp_func - Function that receives two <code>TreeValue</code> objects and compares them, it returns a score and an optional <code>AlignmentResult</code> object that\nincludes the description of the comparison</li>\n<li>merge_func - Function the receives two <code>TreeValue</code> objects returns a new <code>TreeValue</code> representing the merge between the two.</li>\n</ul>\n<br>\nA reference implementation can be found in the file: shapiro_tree_aligner.py\n\n          </div>"}, "last_serial": 6354921, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "964706449db32a4f27cee6bb21cc79a8", "sha256": "6540543e1ea247009e4f9fa0d7a8657dc133c40df1c6948e593065af28b633f5"}, "downloads": -1, "filename": "rnafbinv-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "964706449db32a4f27cee6bb21cc79a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29846, "upload_time": "2019-11-13T11:28:04", "upload_time_iso_8601": "2019-11-13T11:28:04.861294Z", "url": "https://files.pythonhosted.org/packages/8e/1e/d213a23d4c59222912a967352370cf2307f46afe6ed28a339d6710420c63/rnafbinv-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7da09f8b7684e62bf79c8e2c764ebcb", "sha256": "7a6e847dd850e1d1db9eb3844ce0c48ba4bb3b7df24521d8b9aa4a424bdcafa2"}, "downloads": -1, "filename": "rnafbinv-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d7da09f8b7684e62bf79c8e2c764ebcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28177, "upload_time": "2019-11-13T11:28:07", "upload_time_iso_8601": "2019-11-13T11:28:07.642094Z", "url": "https://files.pythonhosted.org/packages/e6/47/0043c5e829a5c5cd929cfc2f39e9a8776f3e36974875b0cddbdd8bc8a316/rnafbinv-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "9e9b0bd3ff995b3d6d2e1e3f37801e0d", "sha256": "7cf7af39c5882276830bdd2292094e5c3a7da77dd54ee5957dc3b5ad6eb50f3f"}, "downloads": -1, "filename": "rnafbinv-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e9b0bd3ff995b3d6d2e1e3f37801e0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29895, "upload_time": "2019-11-13T13:07:44", "upload_time_iso_8601": "2019-11-13T13:07:44.383579Z", "url": "https://files.pythonhosted.org/packages/56/24/6bd550fa4139fe66813097361db3123ada9da0bed66d2dd4d187993aa7ba/rnafbinv-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b82e06fe37f263c29cd2231403032cf", "sha256": "7e2518f9a1f52ad19914e1788c4c488c6e40338907df2c62739d5b7ff7c6fbc6"}, "downloads": -1, "filename": "rnafbinv-2.0.1.tar.gz", "has_sig": false, "md5_digest": "5b82e06fe37f263c29cd2231403032cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28276, "upload_time": "2019-11-13T13:07:46", "upload_time_iso_8601": "2019-11-13T13:07:46.134109Z", "url": "https://files.pythonhosted.org/packages/14/b1/4b48659e7ae9378cc4a524148350827843ea8fe1cc0c856db4e8663d0740/rnafbinv-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "024bb0d9750a063ec1f9b0df0c51447f", "sha256": "f69ea1333b69d43b60747a5142d698634cb9d37189270b1b5730d859a400a248"}, "downloads": -1, "filename": "rnafbinv-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "024bb0d9750a063ec1f9b0df0c51447f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30647, "upload_time": "2019-11-22T13:56:58", "upload_time_iso_8601": "2019-11-22T13:56:58.087946Z", "url": "https://files.pythonhosted.org/packages/61/4a/91a90717a5ee73ec0b760981ca8f33a234e1381f747a0d46a04308eb7cb2/rnafbinv-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f3fc1fdfdbfa4db2bc29d357def3907", "sha256": "dc1de402cc21ec66c6f5f7fcee76151abd3a303ce9c403a9f08ce9da8638da62"}, "downloads": -1, "filename": "rnafbinv-2.0.2.tar.gz", "has_sig": false, "md5_digest": "0f3fc1fdfdbfa4db2bc29d357def3907", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29043, "upload_time": "2019-11-22T13:56:59", "upload_time_iso_8601": "2019-11-22T13:56:59.680589Z", "url": "https://files.pythonhosted.org/packages/91/30/19fbe3afa8d092b45c6c2ec642e11bafbdfcb46abf82ab2ea1ec6620fce8/rnafbinv-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "08b2dbd1cb3723b7c8a60df93eb0d30b", "sha256": "478d12e46d8a44dc1b7c40b6287fe1f68978b7ada8d0fcfeb6df1b5adedf22f5"}, "downloads": -1, "filename": "rnafbinv-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "08b2dbd1cb3723b7c8a60df93eb0d30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30646, "upload_time": "2019-11-22T14:02:39", "upload_time_iso_8601": "2019-11-22T14:02:39.109389Z", "url": "https://files.pythonhosted.org/packages/c8/77/d1e19d3fc290a7961c8af3590f5e466fd161e04c7c519793dadaceccc0ed/rnafbinv-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d71d6cfe574148d77064f3c4086e7eb4", "sha256": "b080e4a2cf635a465a1893c59073d2a56eff8ea990ddc87731b8f59fbf20b143"}, "downloads": -1, "filename": "rnafbinv-2.0.3.tar.gz", "has_sig": false, "md5_digest": "d71d6cfe574148d77064f3c4086e7eb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29064, "upload_time": "2019-11-22T14:02:40", "upload_time_iso_8601": "2019-11-22T14:02:40.908919Z", "url": "https://files.pythonhosted.org/packages/ee/75/4d196981c1f71f0376a59374764daea88b376dba094516cfc6b429385d42/rnafbinv-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "1527487202bb1f919859c0699fbf9547", "sha256": "7630e915aed9fe913a0733aba804f7e579a3326646c3188dae63fb6ebc74b51d"}, "downloads": -1, "filename": "rnafbinv-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1527487202bb1f919859c0699fbf9547", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31342, "upload_time": "2019-12-24T11:05:57", "upload_time_iso_8601": "2019-12-24T11:05:57.557451Z", "url": "https://files.pythonhosted.org/packages/3c/13/d587ab068d41056db3f6946ad52d7aedbbd4af377c6ba4b0654982d039ce/rnafbinv-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61b8a3b15f7799a3a450147eb9a583ee", "sha256": "c3344e02b4394b159d28007ae39ee01d2f84477ffd377d7ac656f0d4681108a8"}, "downloads": -1, "filename": "rnafbinv-2.0.4.tar.gz", "has_sig": false, "md5_digest": "61b8a3b15f7799a3a450147eb9a583ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30506, "upload_time": "2019-12-24T11:05:58", "upload_time_iso_8601": "2019-12-24T11:05:58.882027Z", "url": "https://files.pythonhosted.org/packages/ca/84/ac4e15fe11a39c1d508cdef236de5849e588945b0c322a7ddddfba5cbe22/rnafbinv-2.0.4.tar.gz", "yanked": false}], "2.0b20": [{"comment_text": "", "digests": {"md5": "5f6fe833500130cd55ba63eed9a76d39", "sha256": "440dd7fe0d9d0d773173d2ee254b8d26198cd3ca80eb803d70a21393b9839428"}, "downloads": -1, "filename": "rnafbinv-2.0b20-py3-none-any.whl", "has_sig": false, "md5_digest": "5f6fe833500130cd55ba63eed9a76d39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27433, "upload_time": "2019-03-21T12:07:11", "upload_time_iso_8601": "2019-03-21T12:07:11.661960Z", "url": "https://files.pythonhosted.org/packages/92/4a/4d65c1d7c76911cc159726e087f13ed0077166eeb3ddc275dfab560f7d9a/rnafbinv-2.0b20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d086ba57a8df41266172a54fb0cd34b2", "sha256": "7da27bb6f98b8f07046e72b61d2e8d2fcd51eedd853b310c4120f128f779144f"}, "downloads": -1, "filename": "rnafbinv-2.0b20.tar.gz", "has_sig": false, "md5_digest": "d086ba57a8df41266172a54fb0cd34b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25123, "upload_time": "2019-03-21T12:07:13", "upload_time_iso_8601": "2019-03-21T12:07:13.059089Z", "url": "https://files.pythonhosted.org/packages/01/65/6ebca50b742806add4b9d638e5ba97388dc4ee0eede23f5a4be0132aa657/rnafbinv-2.0b20.tar.gz", "yanked": false}], "2.0b21": [{"comment_text": "", "digests": {"md5": "a53993fa38f5c73125d85f300b2d3871", "sha256": "dcdd019661d7d07f9402af0241a6fcd6523f5447bde1acb896750a4d974e52e0"}, "downloads": -1, "filename": "rnafbinv-2.0b21-py3-none-any.whl", "has_sig": false, "md5_digest": "a53993fa38f5c73125d85f300b2d3871", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27859, "upload_time": "2019-03-23T22:35:51", "upload_time_iso_8601": "2019-03-23T22:35:51.225680Z", "url": "https://files.pythonhosted.org/packages/53/46/bccebc0f202dc9e8bb5831cb4cbead1ec9a593a884a02dcade673a78fc5d/rnafbinv-2.0b21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49e4fb6f9efc1f0c2be50a5658f0fd43", "sha256": "afff3e4112a4ea2a0c84594f1cf4991771f34b0a94a920fd79fc02fbae2d0e71"}, "downloads": -1, "filename": "rnafbinv-2.0b21.tar.gz", "has_sig": false, "md5_digest": "49e4fb6f9efc1f0c2be50a5658f0fd43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25436, "upload_time": "2019-03-23T22:35:52", "upload_time_iso_8601": "2019-03-23T22:35:52.828622Z", "url": "https://files.pythonhosted.org/packages/a5/d7/3d389e11b9862c4b6793c289fdd229d2e2d167748a0cfe3db2dcc8ea9cdd/rnafbinv-2.0b21.tar.gz", "yanked": false}], "2.0b22": [{"comment_text": "", "digests": {"md5": "48d461362fc61e1b6d8949db66b01660", "sha256": "4519998c01b7566e330d9eaaf83d1528f4d854a5d2af30b18bcd90b8aab6c5a7"}, "downloads": -1, "filename": "rnafbinv-2.0b22-py3-none-any.whl", "has_sig": false, "md5_digest": "48d461362fc61e1b6d8949db66b01660", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27848, "upload_time": "2019-05-28T15:11:59", "upload_time_iso_8601": "2019-05-28T15:11:59.943446Z", "url": "https://files.pythonhosted.org/packages/8c/cc/5200d0b3039482424499c6367e32d5fbfce25d553211717ddd8805d6ac66/rnafbinv-2.0b22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4b4ed871270e86c2de598dad73e8f82", "sha256": "1fd134b49bbef264eddc5e9cad57950806a72b579819cd3cff7d66d8bb69ee73"}, "downloads": -1, "filename": "rnafbinv-2.0b22.tar.gz", "has_sig": false, "md5_digest": "c4b4ed871270e86c2de598dad73e8f82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25459, "upload_time": "2019-05-28T15:12:01", "upload_time_iso_8601": "2019-05-28T15:12:01.494805Z", "url": "https://files.pythonhosted.org/packages/7f/72/3d715079cf3f25131aa14332949a55cd951cf2b2b6f1f9b8ff1842c1dc09/rnafbinv-2.0b22.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1527487202bb1f919859c0699fbf9547", "sha256": "7630e915aed9fe913a0733aba804f7e579a3326646c3188dae63fb6ebc74b51d"}, "downloads": -1, "filename": "rnafbinv-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1527487202bb1f919859c0699fbf9547", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31342, "upload_time": "2019-12-24T11:05:57", "upload_time_iso_8601": "2019-12-24T11:05:57.557451Z", "url": "https://files.pythonhosted.org/packages/3c/13/d587ab068d41056db3f6946ad52d7aedbbd4af377c6ba4b0654982d039ce/rnafbinv-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61b8a3b15f7799a3a450147eb9a583ee", "sha256": "c3344e02b4394b159d28007ae39ee01d2f84477ffd377d7ac656f0d4681108a8"}, "downloads": -1, "filename": "rnafbinv-2.0.4.tar.gz", "has_sig": false, "md5_digest": "61b8a3b15f7799a3a450147eb9a583ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30506, "upload_time": "2019-12-24T11:05:58", "upload_time_iso_8601": "2019-12-24T11:05:58.882027Z", "url": "https://files.pythonhosted.org/packages/ca/84/ac4e15fe11a39c1d508cdef236de5849e588945b0c322a7ddddfba5cbe22/rnafbinv-2.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:10 2020"}