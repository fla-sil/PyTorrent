{"info": {"author": "Charles-Abner DADI @Ekimetrics", "author_email": "charles-abner.dadi@ekimetrics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved", "Natural Language :: French", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Communications"], "description": "##EkiNetworkX  - Custom functions to compute networkX graph\n\n\n========================================================\n### INSTALL\nInstall with pip:\n\n    pip install ekiNx\n\nExample of usage:\n\n    >>> from ekiNx import core\n    >>> core.proclamer()\n========================================================\n\n### This module provides complement functions for lib NetworkX\n_Function to  compute bipartite graph and project to one set of nodes_\n#### __FromDataFrame__ :\n* _INPUT:_\n\n    * data is a pandas dataframe\n    * u is the name of column  for node 'projected'\n    * v is the name of column for node to project\n    * w is the name of column for weight\n    * alpha is a threshold to map or not a edge    \n* _OUTPUT:_\n\n\t* compute numpy array  (dim 2 N) \n\t* U: are nodes projected\n\t* V: are node to project\n\t* E: edges with weight attributes if weight columns filled \n\n#### __mapBipartite__ :\n- create biGraph and map nodes/edges\n* _INPUT:_\n    * U nodes 'projected'\n    * V nodes to project\n    * E: edges with weight attributes if weight columns filled \n* _OUTPUT:_\n    * g: networkX biGraph \n\n#### __projectGraph__ :\n- create biGraph and map nodes/edges\n* _INPUT:_\n    * U    biGraph a bigraph networkX object \n    * V is the set on\n\t* weight_function  to compute edges weight ( for instance jaccard)\n* _OUTPUT:_\n    * g: networkX object representing a undirected graph\n\n\n\n#### __graphFromPandasAdjancyMatrix__ :\n- map nodes and edges from adjancy matrix:\n* _INPUT:_\n    * data is a pandas object representing an adjacency matrix\n* _OUTPUT:_\n    * g: anetworkX object representing a undirected graph\n        each node contain is label with column label\n\n========================================================\n\nCe code est sous licence WTFPL.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/charlesDADI/ekiNx", "keywords": null, "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "ekiNx", "package_url": "https://pypi.org/project/ekiNx/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ekiNx/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/charlesDADI/ekiNx"}, "release_url": "https://pypi.org/project/ekiNx/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "This module provides complement functions for lib NetworkX", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            ##EkiNetworkX  - Custom functions to compute networkX graph<br><br><br>========================================================<br>### INSTALL<br>Install with pip:<br><br>    pip install ekiNx<br><br>Example of usage:<br><br>    &gt;&gt;&gt; from ekiNx import core<br>    &gt;&gt;&gt; core.proclamer()<br>========================================================<br><br>### This module provides complement functions for lib NetworkX<br>_Function to  compute bipartite graph and project to one set of nodes_<br>#### __FromDataFrame__ :<br>* _INPUT:_<br><br>    * data is a pandas dataframe<br>    * u is the name of column  for node 'projected'<br>    * v is the name of column for node to project<br>    * w is the name of column for weight<br>    * alpha is a threshold to map or not a edge    <br>* _OUTPUT:_<br><br>\t* compute numpy array  (dim 2 N) <br>\t* U: are nodes projected<br>\t* V: are node to project<br>\t* E: edges with weight attributes if weight columns filled <br><br>#### __mapBipartite__ :<br>- create biGraph and map nodes/edges<br>* _INPUT:_<br>    * U nodes 'projected'<br>    * V nodes to project<br>    * E: edges with weight attributes if weight columns filled <br>* _OUTPUT:_<br>    * g: networkX biGraph <br><br>#### __projectGraph__ :<br>- create biGraph and map nodes/edges<br>* _INPUT:_<br>    * U    biGraph a bigraph networkX object <br>    * V is the set on<br>\t* weight_function  to compute edges weight ( for instance jaccard)<br>* _OUTPUT:_<br>    * g: networkX object representing a undirected graph<br><br><br><br>#### __graphFromPandasAdjancyMatrix__ :<br>- map nodes and edges from adjancy matrix:<br>* _INPUT:_<br>    * data is a pandas object representing an adjacency matrix<br>* _OUTPUT:_<br>    * g: anetworkX object representing a undirected graph<br>        each node contain is label with column label<br><br>========================================================<br><br>Ce code est sous licence WTFPL.\n          </div>"}, "last_serial": 1375469, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fb63f5090925b159d7bba476e32e144c", "sha256": "6fb64132c76d1fe771ccae71310f2ba005a02da84f50845c30a3ae2223b1cf88"}, "downloads": -1, "filename": "ekiNx-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fb63f5090925b159d7bba476e32e144c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5446, "upload_time": "2015-01-08T14:18:40", "upload_time_iso_8601": "2015-01-08T14:18:40.580929Z", "url": "https://files.pythonhosted.org/packages/5e/0c/a7f467d8a99e9b55ffce4d09ffa7caf211b45ef32e5d95d4f550f3f1e5bc/ekiNx-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5d25971de883675fb3a2971ef7a674b5", "sha256": "ad3dd902b394d372e00099a2dcd820d0407ab34ca9211998a6773b00eaf8261e"}, "downloads": -1, "filename": "ekiNx-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5d25971de883675fb3a2971ef7a674b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5444, "upload_time": "2015-01-08T14:19:15", "upload_time_iso_8601": "2015-01-08T14:19:15.205381Z", "url": "https://files.pythonhosted.org/packages/09/3b/f05204478da312d9f5971adca7f99bbb35f6d2e84fca4a08dee783cddbc6/ekiNx-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8ffc07ff66d3b6be0067814635ad9c4c", "sha256": "1016d4b2d99a958a9102443eea4e31a49afcd3992e5a0484a824400b6517ebda"}, "downloads": -1, "filename": "ekiNx-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8ffc07ff66d3b6be0067814635ad9c4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5468, "upload_time": "2015-01-08T14:21:52", "upload_time_iso_8601": "2015-01-08T14:21:52.497406Z", "url": "https://files.pythonhosted.org/packages/87/e1/fcdf61a4a7f693152b03f3354ff7a4540f381c75edae024d1be034e7465e/ekiNx-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c58f91e60c2efc0c9b56d96cf29f30e7", "sha256": "02871a75e9a2c43d6355dec3375412dba433ec15249e1760b80848e405d63526"}, "downloads": -1, "filename": "ekiNx-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c58f91e60c2efc0c9b56d96cf29f30e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5472, "upload_time": "2015-01-08T14:23:49", "upload_time_iso_8601": "2015-01-08T14:23:49.074858Z", "url": "https://files.pythonhosted.org/packages/6b/62/86d7313b740e8c07d18b7fcbded54da6a669f992afbfd4a48e44b7461386/ekiNx-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c58f91e60c2efc0c9b56d96cf29f30e7", "sha256": "02871a75e9a2c43d6355dec3375412dba433ec15249e1760b80848e405d63526"}, "downloads": -1, "filename": "ekiNx-0.0.4.tar.gz", "has_sig": false, "md5_digest": "c58f91e60c2efc0c9b56d96cf29f30e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5472, "upload_time": "2015-01-08T14:23:49", "upload_time_iso_8601": "2015-01-08T14:23:49.074858Z", "url": "https://files.pythonhosted.org/packages/6b/62/86d7313b740e8c07d18b7fcbded54da6a669f992afbfd4a48e44b7461386/ekiNx-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:10 2020"}