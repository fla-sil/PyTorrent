{"info": {"author": "Marwan Kilani", "author_email": "kilani.edu@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# EgyVoc : an Automatic Vocalizer for Ancient Egyptian\n\nVersion: 0.0.11\n\nRelease date: 08.01.2020\n\n#### Authors\n\n* **Marwan Kilani** - Swiss National Science Foundation (Mobility Grant) - Freie Universit\u00e4t Berlin (2019-2020)\n\n#### How to cite\n\nKilani Marwan, 2019, EgyVoc 0.0.11 : an Automatic Vocalizer for Ancient Egyptian, https://github.com/MKilani/EgyVoc\n\n## Introduction\n\nEgyVoc uses Coptic forms and Group Writing spelling to automatically reconstructs the Early New Kingdom vocalization of Ancient Egyptian words.\n\nEgyVoc can reconstruct the vocalization on the basis of various combinations of data, namely:\n\n* Sahidic form\n* Sahidic form and Egyptian consonantal root (for a more accurate reconstruction of the consonants)\n* Group Writing spellings (with attestations from at least one period)\n* Sahidic form and Group Writing Spellings (and Egyptian consonantal root)\n\nAs a general rule, the more data are provided, the more accurate the reconstruction will be. However, in some cases a complete reconstruction can be obtained just on the basis of the Sahidic form, or of just one Group Writing spellings, while in others it will not be possible to obtain a full, precise reconstruction even when all the data are available. Each word is different, and each case needs to be considered individually.\n\nThe format of the input and of the output is discussed here below.\n\nThe algorithm is able to recognize irregularities in the correspondences between the forms - in that case, an error message is output instead of the reconstruction.\n\nThe possibility to use also data from other Coptic dialects and from W-orthography spellings (see [Kilani 2017](references/bibliography.md)) will also be included in future releases.\n\nThe vocalization is reconstructed according to mainstream models (see E.g. Loprieno 1995), and the Group Writing spellings are distributed into 4 periods and they are read and analysed according to [Kilani 2019](http://widmaier-verlag.de/index.php?content=issue&isbn=978-3-943955-20-0).\n\nUnstressed vowels are reduced to /\u0259/ during Period 2, or even earlier.\n\n\n## Getting Started\n\n### Prerequisites\n\nYou need Python 3.\n\n### Installing\n\nThe python package can be installed through pip:\n\n```shell\npip3 install EgyVoc\n```\n\nTwo commands need to be called. First, one needs to initialize the FAAL aligning algorithm (for FAAL, see [Kilani 2020](references/bibliography.md) and my GitHub repository at [FAAL](https://github.com/MKilani/FAAL)). Then EgyVoc can be called. Here a minimal working example:\n\n```python\nfrom EgyVoc import EgyVoc\nfrom EgyVoc import initializeFAAL\n\ninitializeFAAL()\n\nresults = EgyVoc(SahidicWord = \"\u03e9\u2c93\u2c83\u2cb1\u2c93\", verbose = True )\n\nprint(\"Results as a Python Dictionary:\")\nprint (results)\n```\n\n## Input\n\nThe algorithm can takes a series of arguments as input, namely:\n\n* SahidicForm\n* EgyptianRoot\n* GW_Period_1\n* GW_Period_2\n* GW_Period_3\n* GW_Period_4\n* verbose\n\nAll the arguments are optional.\nThe argument \"verbose\" is a Boolean that indicates if the algorithm should output data while performing the calculations or not.\nIt can be omitted, in which case it is set by default to True.\n\n### Input - Sahidic Form\n\nThe Sahidic Form needs to be input as a Unicode string, e.g.:\n\n```python\nSahidicForm = \"\u2ca5\u2cb1\u2ca7\u2c99\"\n```\n\n### Input - Egyptian Root\n\nThe Egyptian Root needs to be input as a Unicode string. The Unicode characters \ua723, \ua725, \u1e6f, \u1e0f, \u1e25, \u1e2b, \u1e96, \u0161, q (not \u1e33) must be used. \ud80c\uddcb is transliterated as j, \ud80c\uddcb\ud80c\uddcb as y. The character \ud80c\udfed should not be transcribed, as it is usually a diacritic, not a consonant (see [Kilani 2019](references/bibliography.md)). In the case of late Egyptian spellings with extra final w (i.e. w-orthography spellings), the w should be ignored and not transcribed, as it does not indicate a consonant (see [Kilani 2019](references/bibliography.md)). Final consonants in weak verbs should be transcribed as j and w.\n\n```python\nEgyptianRoot = \"s\u1e0fm\"\n```\n\n### Input - Group Writing\n\nGroup Writing spellings should be organized chronologically according to their periods of attestations (see [Kilani 2019](references/bibliography.md)), namely:\n\n18th dyn. - Ramses II (included) = Period 1\nAfter Ramses II - 20th dyn (included) = Period 2\n21st dyn - 22nd dyn (included) = Period 3\nAfter 22nd dyn = Period 4\n\nThey must be input as Unicode strings and transliterated according to the system suggested in [Kilani 2019](references/bibliography.md). In particular:\n\n* Cw groups should be transliterated as CU (where C = any consonant, also below)\n* C\ua723 groups should be transliterated as CA\n* the sign \ud80c\udfed should be transliterated as \u02b8\n* the group \ud80c\udc93\ud80c\udfe4 should be transliterated as kU\n* the group \ud80c\udca7\ud80c\udfed should be transliterated as dU\n* the group \ud80c\udd53\ud80c\udc9d should be transliterated as mA\n* the group \ud80c\udfed\ud80c\udc8b\ud80c\udfe4 should be transliterated as \u02b8r\n* the group \ud80c\ude16\ud80c\udfe5 should be transliterated as n-\n\n\n```python\nGW_Period_1 = \"yA.mA\"\nGW_Period_2 = \"yA.mA\"\nGW_Period_3 = \"yU.mA\"\nGW_Period_4 = \"yU.mA\"\n```\n\n## Output\n\nThe Output is a Python dictionary with the following structure. If any of the main entries ('ProtoCoptic', 'GroupWriting_Voc', 'Reconstructed_Voc_Matrix', 'Reconstructed_Vocalization') is not present, it is set to None .\n\n```python\n{\n\t'ProtoCoptic': {\n\t\t'CopticForm': 'string', \n\t\t'Phonemes': 'string', \n\t\t'PhonemeClasses': 'string', \n\t\t'Stress': 'string', \n\t\t'VowelLength': 'string'\n\t\t'EgyptianRoot': 'string', \n\t\t'PhonemesIPA': 'string'\n\t}, \n\t'GroupWriting_Voc': {\n\t\t'Regular': boolean, \n\t\t'Earlier_Cons': [list_of_strings], \n\t\t'Reconstr_Vow': [list_of_strings], \n\t\t'Aligned_Forms': {\n\t\t\t1: {\n\t\t\t\t'ID': int, \n\t\t\t\t'Irregularities': 'string (False or True)', \n\t\t\t\t'Form': [list_of_strings], \n\t\t\t\t'Consonants': [list_of_strings], \n\t\t\t\t'IPA_Cons': [list_of_strings], \n\t\t\t\t'VocClass': [list_of_strings], \n\t\t\t\t'VocClassEdit': [list_of_strings], \n\t\t\t\t'VocRec': [list_of_strings], \n\t\t\t\t'VocCat': ['#', ints , '$']\n\t\t\t}, \n\t\t\t2: {\n\t\t\t\t'ID': int, \n\t\t\t\t'Irregularities': 'string (False or True)', \n\t\t\t\t'Form': [list_of_strings], \n\t\t\t\t'Consonants': [list_of_strings], \n\t\t\t\t'IPA_Cons': [list_of_strings], \n\t\t\t\t'VocClass': [list_of_strings], \n\t\t\t\t'VocClassEdit': [list_of_strings], \n\t\t\t\t'VocRec': [list_of_strings], \n\t\t\t\t'VocCat': ['#', ints , '$']\n\t\t\t}, \n\t\t\t3: {\n\t\t\t\t'ID': int, \n\t\t\t\t'Irregularities': 'string (False or True)', \n\t\t\t\t'Form': [list_of_strings], \n\t\t\t\t'Consonants': [list_of_strings], \n\t\t\t\t'IPA_Cons': [list_of_strings], \n\t\t\t\t'VocClass': [list_of_strings], \n\t\t\t\t'VocClassEdit': [list_of_strings], \n\t\t\t\t'VocRec': [list_of_strings], \n\t\t\t\t'VocCat': ['#', ints , '$']\n\t\t\t}, \n\t\t\t4: {\n\t\t\t\t'ID': int, \n\t\t\t\t'Irregularities': 'string (False or True)', \n\t\t\t\t'Form': [list_of_strings], \n\t\t\t\t'Consonants': [list_of_strings], \n\t\t\t\t'IPA_Cons': [list_of_strings], \n\t\t\t\t'VocClass': [list_of_strings], \n\t\t\t\t'VocClassEdit': [list_of_strings], \n\t\t\t\t'VocRec': [list_of_strings], \n\t\t\t\t'VocCat': ['#', ints , '$']\n\t\t\t}\n\t\t}, \n\t\t'Reconstructed_Form': [list_of_strings], \n\t\t'Phonemes': 'string', \n\t\t'PhonemesIPA': 'string',\n\t\t'PhonemeClasses': 'string', \n\t\t'Stress': 'string', \n\t\t'VowelLength': 'string', \n\t\t'Earliest_Form': 'string', \n\t\t'PeriodEarliestForm': int\n\t}, \n\t'Reconstructed_Voc_Matrix': {\n\t\t'Phonemes': 'string',\n\t\t'PhonemesIPA': 'string',\n\t\t'PhonemeClasses': 'string', \n\t\t'Stress': 'string', \n\t\t'VowelLength': 'string'\n\t}, \n\t'Reconstructed_VocalizationIPA': 'string',\n\t'Reconstructed_Vocalization': 'string'\n}\n```\n\nMore in particular:\n\n* **'ProtoCoptic': { }** - Reconstruction of the vocalization on the basis of the Coptic (for now only Sahidic) data.\n* **'GroupWriting_Voc': { }** - Reconstruction of the vocalization on the basis of the Spellings in Group Writing.\n* **'Reconstructed_Voc_Matrix': { }** - Data on the reconstruction of the vocalization combining the Coptic and Group Writing evidence.\n* **'Reconstructed_Vocalization': 'string'** - Final vocalized form.\n* **'Reconstructed_VocalizationIPA': 'string'** - Final vocalized form in IPA.\n\n* **'CopticForm': 'string'** - Coptic forms used in reconstructing the Proto-Coptic vocalization - each form is separated by a comma ,\n* **'Phonemes': 'string'** - Phonemes composing the reconstructed forms - see [Sahidic Orthographic Profile](https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic).\n* **'PhonemesIPA': 'string'** - Phonemes composing the reconstructed forms in IPA\n* **'PhonemeClasses': 'string'** - Classes of the phonemes composing the reconstructed forms - see [Sahidic Orthographic Profile](https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic).\n* **'Stress': 'string'** - Stress patterns of the reconstructed forms - see [Sahidic Orthographic Profile](https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic).\n* **'VowelLength': 'string'** - Length of the vowels composing the reconstructed forms - see [Sahidic Orthographic Profile](https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic).\n* **'EgyptianRoot': 'string'** - Egyptian form - consonantal root.\n\n\n* **'Regular': boolean** - It indicates if the algorithm has identified any irregularity in the forms of the input.\n* **'Earlier_Cons': [list_of_strings]** - Earliest version of the consonants that can be reconstructed on the basis of the Group Writing spellings. List of strings where each conosnantla phoneme is an item, with '#' as first item and '$' as last item.\n* **'Reconstr_Vow': [list_of_strings]** - Vowels that can be reconstructed on the basis of the Group Writing spellings - see below: Group Writing Vocalization.\n* **'Aligned_Forms': { }** - Python dictionary collecting the data for the reconstructions of the Group Writing spellings for the 4 periods.\n* **'ID': int** - ID of the Period of the attestation (1 = Period 1, 2 = Period 2, and so on).\n* **'Irregularities': 'string (False or True)'** - It indicates if the algorithm has identified any irregularity in the forms of the input.\n* **'Form': [list_of_strings]** - Form of the Group Writing spelling for the relative period.\n* **'Consonants': [list_of_strings]** - Consonants of the Group Writing spelling for the relative period.\n* **'IPA_Cons': [list_of_strings]** - Consonants of the Group Writing spelling for the relative period transcribed in IPA.\n* **'VocClass': [list_of_strings]** - Classes of the vowels in the Group Writing spellings - see below: Group Writing Vocalization.\n* **'VocClassEdit': [list_of_strings]** - Classes of the vowels in the Group Writing spellings - see below: Group Writing Vocalization.\n* **'VocRec': [list_of_strings]** - Vowels reconstructed on the basis of the Group Writing spellings - see below: Group Writing Vocalization.\n* **'VocCat': ['#', ints , '$']** - Organization of the vowels of the Group Writing spellings - see below: Group Writing Vocalization.\n* **'Reconstructed_Form': [list_of_strings]** - Vocalized form reconstructed on the basis of the Group Writing spellings.\n* **'Earliest_Form': 'string'**\t- Earliest attested form spelled in Group Writing.\n* **'PeriodEarliestForm': int**\t- Period in which the earliest form is attested.\n\n### Group Writing Vocalization\n\nThe following conventions are employed in the fields of the output relating to Group Writing spellings.\n\n* \u0265 = used as IPA transcription of \ud80c\uddcb\ud80c\uddcb = <y>, to distinguish it from \ud80c\uddcb = j \n\n* \u01012 = vowel /\u0101/ next to k, may be spelled with U already in Period 1 (see Kilani 2019)\n* a2 = vowel /a/ next to k, may be spelled with U already in Period 1 and 2 (see Kilani 2019)\n* a3 = vowel /a/ next to \u0295 and etymological pharyngeals, it does not undergo the shift /a/ > /o/\n\n* U = back vowel, spelled with w (see [Kilani 2019](references/bibliography.md))\n* A = non-back vowel or no vowel, spelled with \ua723 or with nothing (see [Kilani 2019](references/bibliography.md))\n* \u0186 = A after /k/, possibly realized as a back vowel (see [Kilani 2019](references/bibliography.md))\n\n* [ = the vowel must be read after the associated consonant.\n* ] = the vowel must be read before the associated consonant.\n* \\> ... < = the vowel must be read either before (marked with > ) or after (marked with < ) the associated consonants, but not in both places.\n\n* \\# = beginning of the word\n* $ = end of the word\n* | = phoneme separator\n* \u292b = no vowel after the associated consonant\n* 0 = empty slot\n* a2 = vowel /a/ after /k/, possibly realized as a back vowel (see [Kilani 2019](references/bibliography.md))\n* \u01012 = vowel /\u0101/ after /k/, possibly realized as a back vowel (see [Kilani 2019](references/bibliography.md))\n\n* VocCat: each number indicates a distinct vowel in a given position, the first slot being after the first consonant. The presence of the same number in more than one slot indicates that the corresponding vowel may be read and either of the slots (but not in both).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MKilani/EgyVoc", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "EgyVoc", "package_url": "https://pypi.org/project/EgyVoc/", "platform": "", "project_url": "https://pypi.org/project/EgyVoc/", "project_urls": {"Homepage": "https://github.com/MKilani/EgyVoc"}, "release_url": "https://pypi.org/project/EgyVoc/0.0.11/", "requires_dist": ["py4j"], "requires_python": ">=3.0", "summary": "Vocalizer for Ancient Egyptian", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EgyVoc : an Automatic Vocalizer for Ancient Egyptian</h1>\n<p>Version: 0.0.11</p>\n<p>Release date: 08.01.2020</p>\n<h4>Authors</h4>\n<ul>\n<li><strong>Marwan Kilani</strong> - Swiss National Science Foundation (Mobility Grant) - Freie Universit\u00e4t Berlin (2019-2020)</li>\n</ul>\n<h4>How to cite</h4>\n<p>Kilani Marwan, 2019, EgyVoc 0.0.11 : an Automatic Vocalizer for Ancient Egyptian, <a href=\"https://github.com/MKilani/EgyVoc\" rel=\"nofollow\">https://github.com/MKilani/EgyVoc</a></p>\n<h2>Introduction</h2>\n<p>EgyVoc uses Coptic forms and Group Writing spelling to automatically reconstructs the Early New Kingdom vocalization of Ancient Egyptian words.</p>\n<p>EgyVoc can reconstruct the vocalization on the basis of various combinations of data, namely:</p>\n<ul>\n<li>Sahidic form</li>\n<li>Sahidic form and Egyptian consonantal root (for a more accurate reconstruction of the consonants)</li>\n<li>Group Writing spellings (with attestations from at least one period)</li>\n<li>Sahidic form and Group Writing Spellings (and Egyptian consonantal root)</li>\n</ul>\n<p>As a general rule, the more data are provided, the more accurate the reconstruction will be. However, in some cases a complete reconstruction can be obtained just on the basis of the Sahidic form, or of just one Group Writing spellings, while in others it will not be possible to obtain a full, precise reconstruction even when all the data are available. Each word is different, and each case needs to be considered individually.</p>\n<p>The format of the input and of the output is discussed here below.</p>\n<p>The algorithm is able to recognize irregularities in the correspondences between the forms - in that case, an error message is output instead of the reconstruction.</p>\n<p>The possibility to use also data from other Coptic dialects and from W-orthography spellings (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2017</a>) will also be included in future releases.</p>\n<p>The vocalization is reconstructed according to mainstream models (see E.g. Loprieno 1995), and the Group Writing spellings are distributed into 4 periods and they are read and analysed according to <a href=\"http://widmaier-verlag.de/index.php?content=issue&amp;isbn=978-3-943955-20-0\" rel=\"nofollow\">Kilani 2019</a>.</p>\n<p>Unstressed vowels are reduced to /\u0259/ during Period 2, or even earlier.</p>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<p>You need Python 3.</p>\n<h3>Installing</h3>\n<p>The python package can be installed through pip:</p>\n<pre>pip3 install EgyVoc\n</pre>\n<p>Two commands need to be called. First, one needs to initialize the FAAL aligning algorithm (for FAAL, see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2020</a> and my GitHub repository at <a href=\"https://github.com/MKilani/FAAL\" rel=\"nofollow\">FAAL</a>). Then EgyVoc can be called. Here a minimal working example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">EgyVoc</span> <span class=\"kn\">import</span> <span class=\"n\">EgyVoc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">EgyVoc</span> <span class=\"kn\">import</span> <span class=\"n\">initializeFAAL</span>\n\n<span class=\"n\">initializeFAAL</span><span class=\"p\">()</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">EgyVoc</span><span class=\"p\">(</span><span class=\"n\">SahidicWord</span> <span class=\"o\">=</span> <span class=\"s2\">\"\u03e9\u2c93\u2c83\u2cb1\u2c93\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Results as a Python Dictionary:\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<h2>Input</h2>\n<p>The algorithm can takes a series of arguments as input, namely:</p>\n<ul>\n<li>SahidicForm</li>\n<li>EgyptianRoot</li>\n<li>GW_Period_1</li>\n<li>GW_Period_2</li>\n<li>GW_Period_3</li>\n<li>GW_Period_4</li>\n<li>verbose</li>\n</ul>\n<p>All the arguments are optional.\nThe argument \"verbose\" is a Boolean that indicates if the algorithm should output data while performing the calculations or not.\nIt can be omitted, in which case it is set by default to True.</p>\n<h3>Input - Sahidic Form</h3>\n<p>The Sahidic Form needs to be input as a Unicode string, e.g.:</p>\n<pre><span class=\"n\">SahidicForm</span> <span class=\"o\">=</span> <span class=\"s2\">\"\u2ca5\u2cb1\u2ca7\u2c99\"</span>\n</pre>\n<h3>Input - Egyptian Root</h3>\n<p>The Egyptian Root needs to be input as a Unicode string. The Unicode characters \ua723, \ua725, \u1e6f, \u1e0f, \u1e25, \u1e2b, \u1e96, \u0161, q (not \u1e33) must be used. \ud80c\uddcb is transliterated as j, \ud80c\uddcb\ud80c\uddcb as y. The character \ud80c\udfed should not be transcribed, as it is usually a diacritic, not a consonant (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>). In the case of late Egyptian spellings with extra final w (i.e. w-orthography spellings), the w should be ignored and not transcribed, as it does not indicate a consonant (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>). Final consonants in weak verbs should be transcribed as j and w.</p>\n<pre><span class=\"n\">EgyptianRoot</span> <span class=\"o\">=</span> <span class=\"s2\">\"s\u1e0fm\"</span>\n</pre>\n<h3>Input - Group Writing</h3>\n<p>Group Writing spellings should be organized chronologically according to their periods of attestations (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>), namely:</p>\n<p>18th dyn. - Ramses II (included) = Period 1\nAfter Ramses II - 20th dyn (included) = Period 2\n21st dyn - 22nd dyn (included) = Period 3\nAfter 22nd dyn = Period 4</p>\n<p>They must be input as Unicode strings and transliterated according to the system suggested in <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>. In particular:</p>\n<ul>\n<li>Cw groups should be transliterated as CU (where C = any consonant, also below)</li>\n<li>C\ua723 groups should be transliterated as CA</li>\n<li>the sign \ud80c\udfed should be transliterated as \u02b8</li>\n<li>the group \ud80c\udc93\ud80c\udfe4 should be transliterated as kU</li>\n<li>the group \ud80c\udca7\ud80c\udfed should be transliterated as dU</li>\n<li>the group \ud80c\udd53\ud80c\udc9d should be transliterated as mA</li>\n<li>the group \ud80c\udfed\ud80c\udc8b\ud80c\udfe4 should be transliterated as \u02b8r</li>\n<li>the group \ud80c\ude16\ud80c\udfe5 should be transliterated as n-</li>\n</ul>\n<pre><span class=\"n\">GW_Period_1</span> <span class=\"o\">=</span> <span class=\"s2\">\"yA.mA\"</span>\n<span class=\"n\">GW_Period_2</span> <span class=\"o\">=</span> <span class=\"s2\">\"yA.mA\"</span>\n<span class=\"n\">GW_Period_3</span> <span class=\"o\">=</span> <span class=\"s2\">\"yU.mA\"</span>\n<span class=\"n\">GW_Period_4</span> <span class=\"o\">=</span> <span class=\"s2\">\"yU.mA\"</span>\n</pre>\n<h2>Output</h2>\n<p>The Output is a Python dictionary with the following structure. If any of the main entries ('ProtoCoptic', 'GroupWriting_Voc', 'Reconstructed_Voc_Matrix', 'Reconstructed_Vocalization') is not present, it is set to None .</p>\n<pre><span class=\"p\">{</span>\n\t<span class=\"s1\">'ProtoCoptic'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'CopticForm'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Phonemes'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'PhonemeClasses'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Stress'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'VowelLength'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n\t\t<span class=\"s1\">'EgyptianRoot'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'PhonemesIPA'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n\t<span class=\"p\">},</span> \n\t<span class=\"s1\">'GroupWriting_Voc'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'Regular'</span><span class=\"p\">:</span> <span class=\"n\">boolean</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Earlier_Cons'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t<span class=\"s1\">'Reconstr_Vow'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t<span class=\"s1\">'Aligned_Forms'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Irregularities'</span><span class=\"p\">:</span> <span class=\"s1\">'string (False or True)'</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Form'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'Consonants'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'IPA_Cons'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClass'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClassEdit'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocRec'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocCat'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">]</span>\n\t\t\t<span class=\"p\">},</span> \n\t\t\t<span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Irregularities'</span><span class=\"p\">:</span> <span class=\"s1\">'string (False or True)'</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Form'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'Consonants'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'IPA_Cons'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClass'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClassEdit'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocRec'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocCat'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">]</span>\n\t\t\t<span class=\"p\">},</span> \n\t\t\t<span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Irregularities'</span><span class=\"p\">:</span> <span class=\"s1\">'string (False or True)'</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Form'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'Consonants'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'IPA_Cons'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClass'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClassEdit'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocRec'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocCat'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">]</span>\n\t\t\t<span class=\"p\">},</span> \n\t\t\t<span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t\t<span class=\"s1\">'ID'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Irregularities'</span><span class=\"p\">:</span> <span class=\"s1\">'string (False or True)'</span><span class=\"p\">,</span> \n\t\t\t\t<span class=\"s1\">'Form'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'Consonants'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'IPA_Cons'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClass'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocClassEdit'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocRec'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t\t\t<span class=\"s1\">'VocCat'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'#'</span><span class=\"p\">,</span> <span class=\"n\">ints</span> <span class=\"p\">,</span> <span class=\"s1\">'$'</span><span class=\"p\">]</span>\n\t\t\t<span class=\"p\">}</span>\n\t\t<span class=\"p\">},</span> \n\t\t<span class=\"s1\">'Reconstructed_Form'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">list_of_strings</span><span class=\"p\">],</span> \n\t\t<span class=\"s1\">'Phonemes'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'PhonemesIPA'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'PhonemeClasses'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Stress'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'VowelLength'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Earliest_Form'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'PeriodEarliestForm'</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\t<span class=\"p\">},</span> \n\t<span class=\"s1\">'Reconstructed_Voc_Matrix'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'Phonemes'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'PhonemesIPA'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'PhonemeClasses'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'Stress'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'VowelLength'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n\t<span class=\"p\">},</span> \n\t<span class=\"s1\">'Reconstructed_VocalizationIPA'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'Reconstructed_Vocalization'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>More in particular:</p>\n<ul>\n<li>\n<p><strong>'ProtoCoptic': { }</strong> - Reconstruction of the vocalization on the basis of the Coptic (for now only Sahidic) data.</p>\n</li>\n<li>\n<p><strong>'GroupWriting_Voc': { }</strong> - Reconstruction of the vocalization on the basis of the Spellings in Group Writing.</p>\n</li>\n<li>\n<p><strong>'Reconstructed_Voc_Matrix': { }</strong> - Data on the reconstruction of the vocalization combining the Coptic and Group Writing evidence.</p>\n</li>\n<li>\n<p><strong>'Reconstructed_Vocalization': 'string'</strong> - Final vocalized form.</p>\n</li>\n<li>\n<p><strong>'Reconstructed_VocalizationIPA': 'string'</strong> - Final vocalized form in IPA.</p>\n</li>\n<li>\n<p><strong>'CopticForm': 'string'</strong> - Coptic forms used in reconstructing the Proto-Coptic vocalization - each form is separated by a comma ,</p>\n</li>\n<li>\n<p><strong>'Phonemes': 'string'</strong> - Phonemes composing the reconstructed forms - see <a href=\"https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic\" rel=\"nofollow\">Sahidic Orthographic Profile</a>.</p>\n</li>\n<li>\n<p><strong>'PhonemesIPA': 'string'</strong> - Phonemes composing the reconstructed forms in IPA</p>\n</li>\n<li>\n<p><strong>'PhonemeClasses': 'string'</strong> - Classes of the phonemes composing the reconstructed forms - see <a href=\"https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic\" rel=\"nofollow\">Sahidic Orthographic Profile</a>.</p>\n</li>\n<li>\n<p><strong>'Stress': 'string'</strong> - Stress patterns of the reconstructed forms - see <a href=\"https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic\" rel=\"nofollow\">Sahidic Orthographic Profile</a>.</p>\n</li>\n<li>\n<p><strong>'VowelLength': 'string'</strong> - Length of the vowels composing the reconstructed forms - see <a href=\"https://github.com/MKilani/Coptic_Orthographic_Profiles/tree/master/parsers/Sahidic\" rel=\"nofollow\">Sahidic Orthographic Profile</a>.</p>\n</li>\n<li>\n<p><strong>'EgyptianRoot': 'string'</strong> - Egyptian form - consonantal root.</p>\n</li>\n<li>\n<p><strong>'Regular': boolean</strong> - It indicates if the algorithm has identified any irregularity in the forms of the input.</p>\n</li>\n<li>\n<p><strong>'Earlier_Cons': [list_of_strings]</strong> - Earliest version of the consonants that can be reconstructed on the basis of the Group Writing spellings. List of strings where each conosnantla phoneme is an item, with '#' as first item and '$' as last item.</p>\n</li>\n<li>\n<p><strong>'Reconstr_Vow': [list_of_strings]</strong> - Vowels that can be reconstructed on the basis of the Group Writing spellings - see below: Group Writing Vocalization.</p>\n</li>\n<li>\n<p><strong>'Aligned_Forms': { }</strong> - Python dictionary collecting the data for the reconstructions of the Group Writing spellings for the 4 periods.</p>\n</li>\n<li>\n<p><strong>'ID': int</strong> - ID of the Period of the attestation (1 = Period 1, 2 = Period 2, and so on).</p>\n</li>\n<li>\n<p><strong>'Irregularities': 'string (False or True)'</strong> - It indicates if the algorithm has identified any irregularity in the forms of the input.</p>\n</li>\n<li>\n<p><strong>'Form': [list_of_strings]</strong> - Form of the Group Writing spelling for the relative period.</p>\n</li>\n<li>\n<p><strong>'Consonants': [list_of_strings]</strong> - Consonants of the Group Writing spelling for the relative period.</p>\n</li>\n<li>\n<p><strong>'IPA_Cons': [list_of_strings]</strong> - Consonants of the Group Writing spelling for the relative period transcribed in IPA.</p>\n</li>\n<li>\n<p><strong>'VocClass': [list_of_strings]</strong> - Classes of the vowels in the Group Writing spellings - see below: Group Writing Vocalization.</p>\n</li>\n<li>\n<p><strong>'VocClassEdit': [list_of_strings]</strong> - Classes of the vowels in the Group Writing spellings - see below: Group Writing Vocalization.</p>\n</li>\n<li>\n<p><strong>'VocRec': [list_of_strings]</strong> - Vowels reconstructed on the basis of the Group Writing spellings - see below: Group Writing Vocalization.</p>\n</li>\n<li>\n<p><strong>'VocCat': ['#', ints , '$']</strong> - Organization of the vowels of the Group Writing spellings - see below: Group Writing Vocalization.</p>\n</li>\n<li>\n<p><strong>'Reconstructed_Form': [list_of_strings]</strong> - Vocalized form reconstructed on the basis of the Group Writing spellings.</p>\n</li>\n<li>\n<p><strong>'Earliest_Form': 'string'</strong>\t- Earliest attested form spelled in Group Writing.</p>\n</li>\n<li>\n<p><strong>'PeriodEarliestForm': int</strong>\t- Period in which the earliest form is attested.</p>\n</li>\n</ul>\n<h3>Group Writing Vocalization</h3>\n<p>The following conventions are employed in the fields of the output relating to Group Writing spellings.</p>\n<ul>\n<li>\n<p>\u0265 = used as IPA transcription of \ud80c\uddcb\ud80c\uddcb = &lt;y&gt;, to distinguish it from \ud80c\uddcb = j</p>\n</li>\n<li>\n<p>\u01012 = vowel /\u0101/ next to k, may be spelled with U already in Period 1 (see Kilani 2019)</p>\n</li>\n<li>\n<p>a2 = vowel /a/ next to k, may be spelled with U already in Period 1 and 2 (see Kilani 2019)</p>\n</li>\n<li>\n<p>a3 = vowel /a/ next to \u0295 and etymological pharyngeals, it does not undergo the shift /a/ &gt; /o/</p>\n</li>\n<li>\n<p>U = back vowel, spelled with w (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>)</p>\n</li>\n<li>\n<p>A = non-back vowel or no vowel, spelled with \ua723 or with nothing (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>)</p>\n</li>\n<li>\n<p>\u0186 = A after /k/, possibly realized as a back vowel (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>)</p>\n</li>\n<li>\n<p>[ = the vowel must be read after the associated consonant.</p>\n</li>\n<li>\n<p>] = the vowel must be read before the associated consonant.</p>\n</li>\n<li>\n<p>&gt; ... &lt; = the vowel must be read either before (marked with &gt; ) or after (marked with &lt; ) the associated consonants, but not in both places.</p>\n</li>\n<li>\n<p># = beginning of the word</p>\n</li>\n<li>\n<p>$ = end of the word</p>\n</li>\n<li>\n<p>| = phoneme separator</p>\n</li>\n<li>\n<p>\u292b = no vowel after the associated consonant</p>\n</li>\n<li>\n<p>0 = empty slot</p>\n</li>\n<li>\n<p>a2 = vowel /a/ after /k/, possibly realized as a back vowel (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>)</p>\n</li>\n<li>\n<p>\u01012 = vowel /\u0101/ after /k/, possibly realized as a back vowel (see <a href=\"references/bibliography.md\" rel=\"nofollow\">Kilani 2019</a>)</p>\n</li>\n<li>\n<p>VocCat: each number indicates a distinct vowel in a given position, the first slot being after the first consonant. The presence of the same number in more than one slot indicates that the corresponding vowel may be read and either of the slots (but not in both).</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6557059, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "e9683a7b36f56809d51e4796f8073748", "sha256": "487998e574f101859cb33699203176097973edeea678137e697a2ec4c333464a"}, "downloads": -1, "filename": "EgyVoc-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "e9683a7b36f56809d51e4796f8073748", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 364375, "upload_time": "2020-01-21T15:55:10", "upload_time_iso_8601": "2020-01-21T15:55:10.885456Z", "url": "https://files.pythonhosted.org/packages/94/52/1016ee016621cbdf0a0cc212df0960407d87b6f6c924c52914cd1f6d05d9/EgyVoc-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ff6c0241aaf8b4c1578f62ed5edf2af", "sha256": "60bb471bc227b379163688bb39370057fec220d3a032e361bcb9fdb10e53385a"}, "downloads": -1, "filename": "EgyVoc-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0ff6c0241aaf8b4c1578f62ed5edf2af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 350101, "upload_time": "2020-01-21T15:55:20", "upload_time_iso_8601": "2020-01-21T15:55:20.920680Z", "url": "https://files.pythonhosted.org/packages/f7/52/3310e7944d9a31f6bbff9e4481f4663e485b2d495981b1a6b7a509428f37/EgyVoc-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "372d8832cb9b6a15dd28505ac41cb6d6", "sha256": "f0b7d559e3a896d78eacc43ef59af4b98c81fa6b6f85845eee480ac9217b049f"}, "downloads": -1, "filename": "EgyVoc-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "372d8832cb9b6a15dd28505ac41cb6d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 364374, "upload_time": "2020-02-02T07:30:57", "upload_time_iso_8601": "2020-02-02T07:30:57.219383Z", "url": "https://files.pythonhosted.org/packages/1d/fc/f16f568fac6ff49450195bfb9d71d550599f52e162cab176d9a428d4cd7c/EgyVoc-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11bb402207b62e57d496f86f0e04c1c9", "sha256": "a6a54d35f43ecd2b9233ca84c25b1c2a901c687d55e881346634f9d6539b2f84"}, "downloads": -1, "filename": "EgyVoc-0.0.11.tar.gz", "has_sig": false, "md5_digest": "11bb402207b62e57d496f86f0e04c1c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 350104, "upload_time": "2020-02-02T07:31:00", "upload_time_iso_8601": "2020-02-02T07:31:00.201897Z", "url": "https://files.pythonhosted.org/packages/d6/6b/fc463fc8e867446b5165e0ab330c64e9406674266d45f4ef4fd91a420375/EgyVoc-0.0.11.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c4a17c553f62dc087024194b0631304b", "sha256": "4511002b0b68065fe2f01bd53514aabeb82ddf1b2fc55449549b746ffd36e749"}, "downloads": -1, "filename": "EgyVoc-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4a17c553f62dc087024194b0631304b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 31100, "upload_time": "2020-01-18T21:09:00", "upload_time_iso_8601": "2020-01-18T21:09:00.242436Z", "url": "https://files.pythonhosted.org/packages/1c/92/0f21183b8c4b10676947c69d8d5eaee495004061da37f74b666dcf6a492c/EgyVoc-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a71112a01e81509a9fe573c55d110608", "sha256": "4a89d6bccf4536760a2e52484c1096c263822dc831bf6ee22695e43cc9a5f708"}, "downloads": -1, "filename": "EgyVoc-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a71112a01e81509a9fe573c55d110608", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 350101, "upload_time": "2020-01-18T21:09:07", "upload_time_iso_8601": "2020-01-18T21:09:07.833889Z", "url": "https://files.pythonhosted.org/packages/08/25/9b0bf41a0ad589aaf8dcedfb363426dab1921531672788909af590ebb6c4/EgyVoc-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "52271c3c1d9636623eda4a527da3bf7f", "sha256": "712b59b8e913b92117f042fa05f87b8dd557c64991ba1823c4e0bcfc87d0f6f8"}, "downloads": -1, "filename": "EgyVoc-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "52271c3c1d9636623eda4a527da3bf7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 30980, "upload_time": "2020-01-18T21:12:40", "upload_time_iso_8601": "2020-01-18T21:12:40.687726Z", "url": "https://files.pythonhosted.org/packages/bc/2e/e3cc544d97d3b661a2a9b16f360d865de39af15b35651c862ea0b2effb00/EgyVoc-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0b7aeb2b806e5cb5bbc4dfcec647d92", "sha256": "aa31e6e35fee737d0b675c37c9d9cfcfe2084c787bfc31c297b178411f765f0c"}, "downloads": -1, "filename": "EgyVoc-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f0b7aeb2b806e5cb5bbc4dfcec647d92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 349959, "upload_time": "2020-01-18T21:12:55", "upload_time_iso_8601": "2020-01-18T21:12:55.623206Z", "url": "https://files.pythonhosted.org/packages/f8/c7/a6bd218658aeb5dd3a7df8d2e225b4a15ec2b146b4c07a4294954e6046d7/EgyVoc-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "1c9988d6c07d18145e0141c99268f409", "sha256": "b0fa1477ed9a95f014a28bb02169b45e00eb862a1d4404875fb966d50858be13"}, "downloads": -1, "filename": "EgyVoc-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9988d6c07d18145e0141c99268f409", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 30978, "upload_time": "2020-01-18T21:14:26", "upload_time_iso_8601": "2020-01-18T21:14:26.419717Z", "url": "https://files.pythonhosted.org/packages/9b/18/2b563da42148e50f2b2805914c12678d98743bbf6b6674d3f7176acb97bd/EgyVoc-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "690917dd2f78c9b04b0ff281b4781a50", "sha256": "62c188401ec4173a358e42ace0d63f98ff5c12aa98dde0bd7716ee05656cbc63"}, "downloads": -1, "filename": "EgyVoc-0.0.5.tar.gz", "has_sig": false, "md5_digest": "690917dd2f78c9b04b0ff281b4781a50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 349954, "upload_time": "2020-01-18T21:14:34", "upload_time_iso_8601": "2020-01-18T21:14:34.485815Z", "url": "https://files.pythonhosted.org/packages/2a/1e/f78ccc2246c08945fd5fc8234e02d6ba9c340a84bfdab5178c97cb4c460c/EgyVoc-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "4c4f751a697351b2e00ed3fff618d983", "sha256": "0b751495d0ccbbcc6807ad8edaa7f43dea6372a108e68b26f958697ef4c106bc"}, "downloads": -1, "filename": "EgyVoc-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4c4f751a697351b2e00ed3fff618d983", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 364366, "upload_time": "2020-01-18T21:30:40", "upload_time_iso_8601": "2020-01-18T21:30:40.335021Z", "url": "https://files.pythonhosted.org/packages/d1/ec/0075e766bc515a8689683250d759df8eb0d2ccfa151f3d19294559e1a051/EgyVoc-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2572908a8facf694c29658da6585ea9", "sha256": "94181b64ebf96a68e540c67d4f52768bc94c48c8dce05c71a2802cd0e76bca2d"}, "downloads": -1, "filename": "EgyVoc-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a2572908a8facf694c29658da6585ea9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 349989, "upload_time": "2020-01-18T21:30:48", "upload_time_iso_8601": "2020-01-18T21:30:48.373810Z", "url": "https://files.pythonhosted.org/packages/84/ba/763f03c201d03de8c6001a942628666ef96aa7b8ab4f4f405e3a2f464dbd/EgyVoc-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "86decbcb170dc6295bb1b30ebf385c46", "sha256": "329e95f85a1c94beacfa4c663ee752218d4458385e36df1487facab0992f85a6"}, "downloads": -1, "filename": "EgyVoc-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "86decbcb170dc6295bb1b30ebf385c46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 364362, "upload_time": "2020-01-18T21:34:00", "upload_time_iso_8601": "2020-01-18T21:34:00.739568Z", "url": "https://files.pythonhosted.org/packages/70/0a/ca18ce4b12d79d219a3c9795fec822c8458b1b08722d85b8570e3422d5ee/EgyVoc-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8347cd229d779cb8f3ce9d60945af31", "sha256": "dd993a8256383d781f7fb6645a29c401f7c80f239e7569fa150f7d0ab87416bb"}, "downloads": -1, "filename": "EgyVoc-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e8347cd229d779cb8f3ce9d60945af31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 349966, "upload_time": "2020-01-18T21:34:08", "upload_time_iso_8601": "2020-01-18T21:34:08.435989Z", "url": "https://files.pythonhosted.org/packages/71/9c/65f6a397ef4fd5cf0c1d526d860e2c029a5f66230ad6a7cb7863673b2965/EgyVoc-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "f1d2f89ec04c31f934b8c9c9a18bf935", "sha256": "555e796f0a28355d483c89803bf265a6a3da41eeee18dffc6fe8239cdaeb3267"}, "downloads": -1, "filename": "EgyVoc-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f1d2f89ec04c31f934b8c9c9a18bf935", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 364373, "upload_time": "2020-01-19T09:24:06", "upload_time_iso_8601": "2020-01-19T09:24:06.153373Z", "url": "https://files.pythonhosted.org/packages/dc/42/1b8aea05800b184d5ae7765a80e541855ca42710e8a9fd799a6259112893/EgyVoc-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98fb228645405c6f08b07b00c27ebffe", "sha256": "2ccf629ba8112bc46df59b96f76029ab44ac9886973dc7ac6d47e7ca10909f90"}, "downloads": -1, "filename": "EgyVoc-0.0.8.tar.gz", "has_sig": false, "md5_digest": "98fb228645405c6f08b07b00c27ebffe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 350069, "upload_time": "2020-01-19T09:24:19", "upload_time_iso_8601": "2020-01-19T09:24:19.745603Z", "url": "https://files.pythonhosted.org/packages/6e/f5/83e37c32736a877c19185faa24e6f3bd8855debbd8a258e2331213b203f1/EgyVoc-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "340daa79d80d8f7f4c99ebb02a20d7e2", "sha256": "75a7a158b06c33ff686c22444691798c6bee37622d64d5b4a5ea214f7bc8ac60"}, "downloads": -1, "filename": "EgyVoc-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "340daa79d80d8f7f4c99ebb02a20d7e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.", "size": 364370, "upload_time": "2020-01-20T17:24:13", "upload_time_iso_8601": "2020-01-20T17:24:13.703550Z", "url": "https://files.pythonhosted.org/packages/47/4b/8f0b07ba6beca9c317b5f77b64a13b388b031ce13d335f219d409e32a7fc/EgyVoc-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c23a066066aae107e99e71a785f1cb5d", "sha256": "4b5c30a67781c0bb60f11ba946296c2fbe4ad803ae0327bf40dbf3afd6852cb7"}, "downloads": -1, "filename": "EgyVoc-0.0.9.tar.gz", "has_sig": false, "md5_digest": "c23a066066aae107e99e71a785f1cb5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.", "size": 350076, "upload_time": "2020-01-20T17:24:25", "upload_time_iso_8601": "2020-01-20T17:24:25.199888Z", "url": "https://files.pythonhosted.org/packages/66/7b/2dce3dbe53ec0bbd798ef6aabd3874ee69480aae78a5f1a2157687e96f37/EgyVoc-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "372d8832cb9b6a15dd28505ac41cb6d6", "sha256": "f0b7d559e3a896d78eacc43ef59af4b98c81fa6b6f85845eee480ac9217b049f"}, "downloads": -1, "filename": "EgyVoc-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "372d8832cb9b6a15dd28505ac41cb6d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 364374, "upload_time": "2020-02-02T07:30:57", "upload_time_iso_8601": "2020-02-02T07:30:57.219383Z", "url": "https://files.pythonhosted.org/packages/1d/fc/f16f568fac6ff49450195bfb9d71d550599f52e162cab176d9a428d4cd7c/EgyVoc-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11bb402207b62e57d496f86f0e04c1c9", "sha256": "a6a54d35f43ecd2b9233ca84c25b1c2a901c687d55e881346634f9d6539b2f84"}, "downloads": -1, "filename": "EgyVoc-0.0.11.tar.gz", "has_sig": false, "md5_digest": "11bb402207b62e57d496f86f0e04c1c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 350104, "upload_time": "2020-02-02T07:31:00", "upload_time_iso_8601": "2020-02-02T07:31:00.201897Z", "url": "https://files.pythonhosted.org/packages/d6/6b/fc463fc8e867446b5165e0ab330c64e9406674266d45f4ef4fd91a420375/EgyVoc-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:17 2020"}