{"info": {"author": "Xianghu Zhao", "author_email": "xianghuzhao@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# paradag\n\n[![PyPI](https://badge.fury.io/py/paradag.svg)](https://pypi.org/project/paradag/)\n[![Travis CI Status](https://travis-ci.org/xianghuzhao/paradag.svg?branch=master)](https://travis-ci.org/xianghuzhao/paradag)\n[![Code Climate](https://codeclimate.com/github/xianghuzhao/paradag/badges/gpa.svg)](https://codeclimate.com/github/xianghuzhao/paradag)\n\n`paradag` a robust DAG package for easy parallel execution.\n`paradag` is implemented in pure python and totally independent of any\nthird party packages.\n\n[Directed acyclic graph (DAG)](https://en.wikipedia.org/wiki/Directed_acyclic_graph)\nis commonly used as a dependency graph. It could be used to describe the\ndependencies of tasks.\nThe order of task executions must comply with the dependencies,\nwhere tasks with direct or indirect path must run in sequence,\nand tasks without any connection could run in parallel.\n\n\n## Installation\n\n```shell\n$ pip install paradag\n```\n\n\n## Create a DAG\n\nBefore running tasks, first create a DAG,\nwith each vertex representing a task.\nThe vertex of DAG instance could be any\n[hashable object](https://docs.python.org/3/glossary.html#term-hashable),\nlike integer, string, tuple of hashable objects, instance of\nuser-defined class, etc.\n\n```python\nfrom paradag import DAG\n\nclass Vtx(object):\n    def __init__(self, v):\n        self.__value = v\n\nvtx = Vtx(999)\n\ndag = DAG()\ndag.add_vertex(123, 'abcde', 'xyz', ('a', 'b', 3), vtx)\n\ndag.add_edge(123, 'abcde')                  # 123 -> 'abcde'\ndag.add_edge('abcde', ('a', 'b', 3), vtx)   # 'abcde' -> ('a', 'b', 3), 'abcde' -> vtx\n```\n\n`add_edge` accepts one starting vertex and one or more ending vertices.\nPlease pay attention not to make a cycle with `add_edge`,\nwhich will raise a `DAGCycleError`.\n\nThe common DAG properties are accessible:\n\n```python\nprint(dag.vertex_size())\nprint(dag.edge_size())\n\nprint(dag.successors('abcde'))\nprint(dag.predecessors(vtx))\n\nprint(dag.all_starts())\nprint(dag.all_terminals())\n```\n\n\n## Run tasks in sequence\n\nWrite your executor and optionally a selector.\nThe executor handles the real execution for each vertex.\n\n```python\nfrom paradag import dag_run\nfrom paradag import SequentialProcessor\n\nclass CustomExecutor:\n    def param(self, vertex):\n        return vertex\n\n    def execute(self, param):\n        print('Executing:', param)\n\nprint(dag_run(dag, processor=SequentialProcessor(), executor=CustomExecutor()))\n```\n\n`dag_run` is the core function for task scheduling.\n\n\n## Run tasks in parallel\n\nRun tasks in parallel is quite similar, while only change the processor\nto `MultiThreadProcessor`.\n\n```python\nfrom paradag import MultiThreadProcessor\n\ndag_run(dag, processor=MultiThreadProcessor(), executor=CustomExecutor())\n```\n\nThe default selector `FullSelector` will try to find as many tasks\nas possible which could run in parallel.\nThis could be adjusted with custom selector.\nThe following selector will only allow at most 4 tasks running in parallel.\n\n```python\nclass CustomSelector(object):\n    def select(self, running, idle):\n        task_number = max(0, 4-len(running))\n        return list(idle)[:task_number]\n\ndag_run(dag, processor=MultiThreadProcessor(), selector=CustomSelector(), executor=CustomExecutor())\n```\n\nOnce you are using `MultiThreadProcessor`, great attentions must be\npaid that `execute` of executor could run in parallel. Try not to modify\nany variables outside the `execute` function, and all parameters should\nbe passed by the `param` argument. Also make sure that the return values\ngenerated from `param` function are independent.\n\n\n## Get task running status\n\nThe executor could also implement the optional methods which could get\nthe task running status.\n\n```python\nclass CustomExecutor:\n    def param(self, vertex):\n        return vertex\n\n    def execute(self, param):\n        print('Executing:', param)\n\n    def report_start(self, vertices):\n        print('Start to run:', vertices)\n\n    def report_running(self, vertices):\n        print('Current running:', vertices)\n\n    def report_finish(self, vertices_result):\n        for vertex, result in vertices_result:\n            print('Finished running {0} with result: {1}'.format(vertex, result))\n\ndag_run(dag, processor=MultiThreadProcessor(), executor=CustomExecutor())\n```\n\n\n## Deliver result to descendants\n\nIn case the result for one task should be used for its descendants,\n`deliver` method could be implemented in executor.\n\n```python\nclass CustomExecutor:\n    def __init__(self):\n        self.__level = {}\n\n    def param(self, vertex):\n        return self.__level.get(vertex, 0)\n\n    def execute(self, param):\n        return param + 1\n\n    def report_finish(self, vertices_result):\n        for vertex, result in vertices_result:\n            print('Vertex {0} finished, level: {1}'.format(vertex, result))\n\n    def deliver(self, vertex, result):\n        self.__level[vertex] = result\n```\n\nThe result from parent will be delivered to the vertex before execution.\n\n\n## Topological sorting\n\n[Topological sorting](https://en.wikipedia.org/wiki/Topological_sorting)\ncould also be done by `paradag.dag_run` function.\nThe return value of `dag_run` could be considered as\nthe result of topological sorting.\n\nA simple topological sorting without any execution:\n\n```python\nfrom paradag import SingleSelector, RandomSelector, ShuffleSelector\n\ndag = DAG()\ndag.add_vertex(1, 2, 3, 4, 5)\ndag.add_edge(1, 4)\ndag.add_edge(4, 2, 5)\n\nprint(dag_run(dag))\nprint(dag_run(dag, selector=SingleSelector()))\nprint(dag_run(dag, selector=RandomSelector()))\nprint(dag_run(dag, selector=ShuffleSelector()))\n```\n\nThe solution for topological sorting is not necessarily unique,\nand the final orders may vary with different selectors.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xianghuzhao/paradag", "keywords": "DAG,parallel programming", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "paradag", "package_url": "https://pypi.org/project/paradag/", "platform": "", "project_url": "https://pypi.org/project/paradag/", "project_urls": {"Homepage": "https://github.com/xianghuzhao/paradag"}, "release_url": "https://pypi.org/project/paradag/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A robust DAG implementation for parallel programming", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>paradag</h1>\n<p><a href=\"https://pypi.org/project/paradag/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9779b52cefe4f4462f93f817f3c3225c7c2e19d2/68747470733a2f2f62616467652e667572792e696f2f70792f706172616461672e737667\"></a>\n<a href=\"https://travis-ci.org/xianghuzhao/paradag\" rel=\"nofollow\"><img alt=\"Travis CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ce91bdce4449c3ae886e193b0002d3cb0655761/68747470733a2f2f7472617669732d63692e6f72672f7869616e6768757a68616f2f706172616461672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/xianghuzhao/paradag\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce6384a8ddebc1f16e5e37934c7669dedfeb93b9/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f7869616e6768757a68616f2f706172616461672f6261646765732f6770612e737667\"></a></p>\n<p><code>paradag</code> a robust DAG package for easy parallel execution.\n<code>paradag</code> is implemented in pure python and totally independent of any\nthird party packages.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\" rel=\"nofollow\">Directed acyclic graph (DAG)</a>\nis commonly used as a dependency graph. It could be used to describe the\ndependencies of tasks.\nThe order of task executions must comply with the dependencies,\nwhere tasks with direct or indirect path must run in sequence,\nand tasks without any connection could run in parallel.</p>\n<h2>Installation</h2>\n<pre>$ pip install paradag\n</pre>\n<h2>Create a DAG</h2>\n<p>Before running tasks, first create a DAG,\nwith each vertex representing a task.\nThe vertex of DAG instance could be any\n<a href=\"https://docs.python.org/3/glossary.html#term-hashable\" rel=\"nofollow\">hashable object</a>,\nlike integer, string, tuple of hashable objects, instance of\nuser-defined class, etc.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">paradag</span> <span class=\"kn\">import</span> <span class=\"n\">DAG</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Vtx</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__value</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n\n<span class=\"n\">vtx</span> <span class=\"o\">=</span> <span class=\"n\">Vtx</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">)</span>\n\n<span class=\"n\">dag</span> <span class=\"o\">=</span> <span class=\"n\">DAG</span><span class=\"p\">()</span>\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"s1\">'xyz'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">vtx</span><span class=\"p\">)</span>\n\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s1\">'abcde'</span><span class=\"p\">)</span>                  <span class=\"c1\"># 123 -&gt; 'abcde'</span>\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s1\">'abcde'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">vtx</span><span class=\"p\">)</span>   <span class=\"c1\"># 'abcde' -&gt; ('a', 'b', 3), 'abcde' -&gt; vtx</span>\n</pre>\n<p><code>add_edge</code> accepts one starting vertex and one or more ending vertices.\nPlease pay attention not to make a cycle with <code>add_edge</code>,\nwhich will raise a <code>DAGCycleError</code>.</p>\n<p>The common DAG properties are accessible:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">vertex_size</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">edge_size</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">successors</span><span class=\"p\">(</span><span class=\"s1\">'abcde'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">predecessors</span><span class=\"p\">(</span><span class=\"n\">vtx</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">all_starts</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">all_terminals</span><span class=\"p\">())</span>\n</pre>\n<h2>Run tasks in sequence</h2>\n<p>Write your executor and optionally a selector.\nThe executor handles the real execution for each vertex.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">paradag</span> <span class=\"kn\">import</span> <span class=\"n\">dag_run</span>\n<span class=\"kn\">from</span> <span class=\"nn\">paradag</span> <span class=\"kn\">import</span> <span class=\"n\">SequentialProcessor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomExecutor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">param</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertex</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">vertex</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Executing:'</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">SequentialProcessor</span><span class=\"p\">(),</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">CustomExecutor</span><span class=\"p\">()))</span>\n</pre>\n<p><code>dag_run</code> is the core function for task scheduling.</p>\n<h2>Run tasks in parallel</h2>\n<p>Run tasks in parallel is quite similar, while only change the processor\nto <code>MultiThreadProcessor</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">paradag</span> <span class=\"kn\">import</span> <span class=\"n\">MultiThreadProcessor</span>\n\n<span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">MultiThreadProcessor</span><span class=\"p\">(),</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">CustomExecutor</span><span class=\"p\">())</span>\n</pre>\n<p>The default selector <code>FullSelector</code> will try to find as many tasks\nas possible which could run in parallel.\nThis could be adjusted with custom selector.\nThe following selector will only allow at most 4 tasks running in parallel.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomSelector</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">running</span><span class=\"p\">,</span> <span class=\"n\">idle</span><span class=\"p\">):</span>\n        <span class=\"n\">task_number</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">running</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">idle</span><span class=\"p\">)[:</span><span class=\"n\">task_number</span><span class=\"p\">]</span>\n\n<span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">MultiThreadProcessor</span><span class=\"p\">(),</span> <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"n\">CustomSelector</span><span class=\"p\">(),</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">CustomExecutor</span><span class=\"p\">())</span>\n</pre>\n<p>Once you are using <code>MultiThreadProcessor</code>, great attentions must be\npaid that <code>execute</code> of executor could run in parallel. Try not to modify\nany variables outside the <code>execute</code> function, and all parameters should\nbe passed by the <code>param</code> argument. Also make sure that the return values\ngenerated from <code>param</code> function are independent.</p>\n<h2>Get task running status</h2>\n<p>The executor could also implement the optional methods which could get\nthe task running status.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomExecutor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">param</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertex</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">vertex</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Executing:'</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">report_start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertices</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Start to run:'</span><span class=\"p\">,</span> <span class=\"n\">vertices</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">report_running</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertices</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Current running:'</span><span class=\"p\">,</span> <span class=\"n\">vertices</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">report_finish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertices_result</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">vertices_result</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Finished running </span><span class=\"si\">{0}</span><span class=\"s1\"> with result: </span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">))</span>\n\n<span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">processor</span><span class=\"o\">=</span><span class=\"n\">MultiThreadProcessor</span><span class=\"p\">(),</span> <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">CustomExecutor</span><span class=\"p\">())</span>\n</pre>\n<h2>Deliver result to descendants</h2>\n<p>In case the result for one task should be used for its descendants,\n<code>deliver</code> method could be implemented in executor.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomExecutor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__level</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">param</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertex</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__level</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">param</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">report_finish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertices_result</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">vertices_result</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Vertex </span><span class=\"si\">{0}</span><span class=\"s1\"> finished, level: </span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deliver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vertex</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__level</span><span class=\"p\">[</span><span class=\"n\">vertex</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n</pre>\n<p>The result from parent will be delivered to the vertex before execution.</p>\n<h2>Topological sorting</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Topological_sorting\" rel=\"nofollow\">Topological sorting</a>\ncould also be done by <code>paradag.dag_run</code> function.\nThe return value of <code>dag_run</code> could be considered as\nthe result of topological sorting.</p>\n<p>A simple topological sorting without any execution:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">paradag</span> <span class=\"kn\">import</span> <span class=\"n\">SingleSelector</span><span class=\"p\">,</span> <span class=\"n\">RandomSelector</span><span class=\"p\">,</span> <span class=\"n\">ShuffleSelector</span>\n\n<span class=\"n\">dag</span> <span class=\"o\">=</span> <span class=\"n\">DAG</span><span class=\"p\">()</span>\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">dag</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"n\">SingleSelector</span><span class=\"p\">()))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"n\">RandomSelector</span><span class=\"p\">()))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dag_run</span><span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"n\">ShuffleSelector</span><span class=\"p\">()))</span>\n</pre>\n<p>The solution for topological sorting is not necessarily unique,\nand the final orders may vary with different selectors.</p>\n\n          </div>"}, "last_serial": 7178698, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "267b1991e2c10b8b98721b36730f8f14", "sha256": "a774be6cca614df98e1c5671d4b2cd8aefc2881a27ddefae68f0844eefa68581"}, "downloads": -1, "filename": "paradag-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "267b1991e2c10b8b98721b36730f8f14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5688, "upload_time": "2017-09-04T07:06:34", "upload_time_iso_8601": "2017-09-04T07:06:34.611867Z", "url": "https://files.pythonhosted.org/packages/50/ae/8fbb836e568f85153a9f4cb61106a88cf229debb99e970ed7f48de94339e/paradag-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12fc0f9b885b11551f6937eaa8fdf282", "sha256": "42381d87ba4bca088aa60c357bd9eb629c578ad3423124b6281835e431c94097"}, "downloads": -1, "filename": "paradag-0.1.0.tar.gz", "has_sig": false, "md5_digest": "12fc0f9b885b11551f6937eaa8fdf282", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3502, "upload_time": "2017-09-04T07:06:36", "upload_time_iso_8601": "2017-09-04T07:06:36.073575Z", "url": "https://files.pythonhosted.org/packages/41/19/657cf6e38386d627406ce0e6f3ca092ae3c244d9be2ef7dce6f82346deeb/paradag-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "46e39c6249ae41fe671e2f1586322d37", "sha256": "7958cc132372e4747541857d264df14102de5707f57ccf41e70fd79456a8c466"}, "downloads": -1, "filename": "paradag-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46e39c6249ae41fe671e2f1586322d37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5970, "upload_time": "2017-09-15T04:35:02", "upload_time_iso_8601": "2017-09-15T04:35:02.584125Z", "url": "https://files.pythonhosted.org/packages/45/bf/a5f461659c2beb429a9420dd07a91e158a217a103d608b0fbe5938d92164/paradag-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eed164dd74d0340063ef7d3f10d35eb5", "sha256": "393d27c831ae520483501f1c6c694a7288b6e7fa76d205ba23da200b371870f4"}, "downloads": -1, "filename": "paradag-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eed164dd74d0340063ef7d3f10d35eb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3702, "upload_time": "2017-09-15T04:35:03", "upload_time_iso_8601": "2017-09-15T04:35:03.611097Z", "url": "https://files.pythonhosted.org/packages/85/18/66743bbd0468449b8855a76f5a7b908c775785912b82724ef8d6e65ba6bd/paradag-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4d2f4f2f5d703a8a1ee4c65278ae92e1", "sha256": "ec0074af265e46616941e9a0ba25681d142de46db49c7f82d737e5d59e437782"}, "downloads": -1, "filename": "paradag-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4d2f4f2f5d703a8a1ee4c65278ae92e1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7870, "upload_time": "2020-03-24T13:31:55", "upload_time_iso_8601": "2020-03-24T13:31:55.023776Z", "url": "https://files.pythonhosted.org/packages/fe/52/a264913583a7f41520669ff17e6547d6ff34c0c766ea5dd8fdfff56dd23e/paradag-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce68cfcf8bfa6152522f719c5514750d", "sha256": "8734aaecd688e3b5c434e1d1791b68692c98ff10489bf83b70d244ce2b778e9f"}, "downloads": -1, "filename": "paradag-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ce68cfcf8bfa6152522f719c5514750d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7591, "upload_time": "2020-03-24T13:31:56", "upload_time_iso_8601": "2020-03-24T13:31:56.983515Z", "url": "https://files.pythonhosted.org/packages/bc/a6/f565b64d37ea97cf9e5fb2518c7ba4ae196d864f57720f41cdc2b0d2791a/paradag-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bfe99a42cc2b5b07bfe23d79811d1938", "sha256": "d78ad8582353bfe8016dc1914cbf6cff8fd508ec591c370d587663bafc634014"}, "downloads": -1, "filename": "paradag-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bfe99a42cc2b5b07bfe23d79811d1938", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7895, "upload_time": "2020-03-24T14:54:11", "upload_time_iso_8601": "2020-03-24T14:54:11.763339Z", "url": "https://files.pythonhosted.org/packages/2e/dd/498929dbce5dd120729363fea00c9352847b47f261ddc788af81cf60b143/paradag-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fe7b431382240c0a80f3ccd3a989cec", "sha256": "58c4a6f863f8a2bc9fa9cd49f843dcc765428c785512631be18e2d204fef5d56"}, "downloads": -1, "filename": "paradag-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8fe7b431382240c0a80f3ccd3a989cec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7805, "upload_time": "2020-03-24T14:54:13", "upload_time_iso_8601": "2020-03-24T14:54:13.600831Z", "url": "https://files.pythonhosted.org/packages/bd/cd/d2561a0a71b5e151ea0c71494746328a1935c4426c2140787c7844b34b03/paradag-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "54780c4fd7097629f45b435891cf76c7", "sha256": "adf3223442eb4a2f9b26a9c1255503003d703a962a683db9da92fed004d36b93"}, "downloads": -1, "filename": "paradag-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54780c4fd7097629f45b435891cf76c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8195, "upload_time": "2020-03-26T02:48:05", "upload_time_iso_8601": "2020-03-26T02:48:05.543298Z", "url": "https://files.pythonhosted.org/packages/73/f6/adeae57453f270e4e82f577f4da471e4321b9c48dfba7302e711e6bec4e9/paradag-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "518e35289220b56bcc9b7d217d68bb98", "sha256": "88a7f798f7ac59ec535153735bcb135b48c391c89000489182f037463a992939"}, "downloads": -1, "filename": "paradag-1.1.0.tar.gz", "has_sig": false, "md5_digest": "518e35289220b56bcc9b7d217d68bb98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8794, "upload_time": "2020-03-26T02:48:07", "upload_time_iso_8601": "2020-03-26T02:48:07.337942Z", "url": "https://files.pythonhosted.org/packages/0f/53/d0e39f651f30e2b2d01a23e154f5a36f37a10ef5c5d7f48268356f0c0668/paradag-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ed033dbac206f7eb07b7f6ad436e7caa", "sha256": "dbd57185a1553970877c452aedf961912eb7825a9a25e8a71010e84660710c42"}, "downloads": -1, "filename": "paradag-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed033dbac206f7eb07b7f6ad436e7caa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8213, "upload_time": "2020-05-06T08:48:33", "upload_time_iso_8601": "2020-05-06T08:48:33.718761Z", "url": "https://files.pythonhosted.org/packages/16/4e/11febcb72e37437442c8b0dd9cff9e5c2676d120d8d5355a5b4b3e4384ed/paradag-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2285f54b7905eae8bc9876822fccc1d", "sha256": "3d2977892de62bd111c517c25f4c75750259c94c9711a190094b942723697ab7"}, "downloads": -1, "filename": "paradag-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d2285f54b7905eae8bc9876822fccc1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6545, "upload_time": "2020-05-06T08:48:34", "upload_time_iso_8601": "2020-05-06T08:48:34.944574Z", "url": "https://files.pythonhosted.org/packages/59/f0/9aa8f1b14c60a25554a12c40c0eda1d3402d86e7a0cb0e7e80063ecf07cd/paradag-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed033dbac206f7eb07b7f6ad436e7caa", "sha256": "dbd57185a1553970877c452aedf961912eb7825a9a25e8a71010e84660710c42"}, "downloads": -1, "filename": "paradag-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed033dbac206f7eb07b7f6ad436e7caa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8213, "upload_time": "2020-05-06T08:48:33", "upload_time_iso_8601": "2020-05-06T08:48:33.718761Z", "url": "https://files.pythonhosted.org/packages/16/4e/11febcb72e37437442c8b0dd9cff9e5c2676d120d8d5355a5b4b3e4384ed/paradag-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2285f54b7905eae8bc9876822fccc1d", "sha256": "3d2977892de62bd111c517c25f4c75750259c94c9711a190094b942723697ab7"}, "downloads": -1, "filename": "paradag-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d2285f54b7905eae8bc9876822fccc1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6545, "upload_time": "2020-05-06T08:48:34", "upload_time_iso_8601": "2020-05-06T08:48:34.944574Z", "url": "https://files.pythonhosted.org/packages/59/f0/9aa8f1b14c60a25554a12c40c0eda1d3402d86e7a0cb0e7e80063ecf07cd/paradag-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:42 2020"}