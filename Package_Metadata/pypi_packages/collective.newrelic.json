{"info": {"author": "Douwe van der Meij, Peter Uittenbroek", "author_email": "support@gw20e.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": "Introduction\n------------\n\nThis package offers instrumentation for NewRelic ( http://www.newrelic.com ). Currently the catalog-tool, transformchains and zope-events are instrumented. A transform is included to support RUM (Real-User-Monitoring): it inserts small snippets of javascript at the top and bottom of the rendered pages. RUM does not work in the ZMI (Zope Management Interface).\n\nInstallation\n------------\n\nYou can add this egg 'collective.newrelic' to your eggs and it will pull in the 'newrelic' egg too.  ::\n\n    [buildout]\n    \n    # either pin versions as shown below...  \n    versions=versions\n    \n    [versions]\n    newrelic = 2.6.0.5\n    repoze.xmliter = 0.5\n    # update to 1.0.9 on next release:\n    collective.newrelic = 1.0.8 \n\n    # ...or allow picked versions and risk breakage on product updates\n    #allow-picked-versions = true\n    \n    parts +=\n        newrelic    \n\n    [newrelic]\n    recipe = zc.recipe.egg:scripts\n    eggs = newrelic\n    \n    [instance]\n    eggs +=\n        collective.newrelic\n    \n    # make sure newrelic itself is enabled and set the path to your newrelic.ini file\n    environment-vars +=\n        NEW_RELIC_ENABLED true\n        NEW_RELIC_CONFIG_FILE ${buildout:directory}/newrelic.ini\n        NEW_RELIC_ENVIRONMENT development\n    \n    # when using supervisor, setting environment variables is slightly different:\n    #[supervisor]\n    #supervisord-environment=NEW_RELIC_ENABLED=true,NEW_RELIC_CONFIG_FILE=${buildout:directory}/newrelic.ini,NEW_RELIC_ENVIRONMENT=development\n\nA number of additional settings can optionally be configured using environment variables, see http://docs.newrelic.com/docs/python/python-agent-configuration#environment-variables for details.\nCustomizing your newrelic.ini file is more advised though, see below.\n\nThe NEW_RELIC_ENABLED and NEW_RELIC_CONFIG_FILE variables need to be set for the newrelic agent to work though. \n\nOmitting NEW_RELIC_ENVIRONMENT variable will mean the [newrelic] part is loaded without additional [newrelic:YOURENVNAME] settings.\n\nPlease note: the newrelic package needs python >= 2.5. This package will not work on Plone 3.\n\nUse\n---\n\nTo enable the logging to newrelic.com, create an account at newrelic.com and get your license key. Create a 'newrelic.ini' file in the root of your project. Either by copying the template from this package or the newrelic package or run ::\n\n    $ bin/newrelic-admin generate-config YOUR-LICENSE-KEY newrelic.ini\n\nThis will create a newrelic.ini file in the current directory.\n\nYou might want to validate your generated file using ``newrelic-admin validate-config newrelic.ini``\n\nThe default profile is 'staging', this can be changed in the `__init__.py` in the patches directory. You can change the default name of 'Python Application (Staging)' in the newrelic.ini file. To get sensible database-traces change ::\n\n    transaction_tracer.record_sql = obfuscated\n\nto ::\n\n    transaction_tracer.record_sql = raw\n \n\nExample usage\n=============\nIn utils you find a few helper functions to wrap (parts) of your products and/or plone and/or any python module.\nFor example you could make a simple egg called myproduct.newrelic with only an `__init__.py`.\nWithin that file you have a '''initialize''' function, therein you use the helper functions for further wrapping.\n\nFull class+function wrapping of an entire module\n------------------------------------------------\n::\n\n    from plone.app import viewletmanager as plone_viewletmanager\n    from collective.newrelic.utils import wrap_module_classes_functions\n    class_function_modules = [plone_viewletmanager, ]\n    wrapped_methods = wrap_module_classes_functions(class_function_modules)\n    print len(wrapped_methods)\n\nSingle class wrapping \n---------------------\n:: \n\n    from zope.tal.talinterpreter import TALInterpreter\n    from collective.newrelic.utils import wrap_class_found_functions\n    wrapped_methods = wrap_class_found_functions(TALInterpreter)\n    print len(wrapped_methods)\n\nPin point precision wrapping of single class function\n-----------------------------------------------------\n::\n\n    from zope.tal.talinterpreter import TALInterpreter\n    from collective.newrelic.utils import wrap_class_function\n    wrapped_methods = wrap_class_function(TALInterpreter, TALInterpreter.__call__)\n    print wrapped_methods\n    \"TALInterpreter.__call__\"\n\n\nTroubleshooting\n===============\n\nIf you see a message ``The Python Agent is not enabled.`` in the Zope instance log, first check if ``NEW_RELIC_ENABLED`` environment variable was set correctly. \n\nIf this is ok, check your ``newrelic.ini`` file and make sure the profile you are using (eg ``[newrelic:staging]``) has ``monitor_mode = true``.\n\nIt can also mean that the newrelic.ini cannot be found. Make sure the path to your newrelic.ini file is correctly set using the ``NEW_RELIC_CONFIG_FILE`` environment variable.  \n\nIf you see a message ``A valid account license key cannot be found.``, check that you have a valid license key and make sure it is correctly set in the ``newrelic.ini`` file.\n\nReferences\n==========\n\n http://www.newrelic.com\n\n http://newrelic.com/docs/python/python-agent-installation\n\n http://docs.newrelic.com/docs/python/testing-the-python-agent\n\n\nChange history\n==============\n\n1.0.9 (2014-01-02)\n-------------------\n\n - Introduce and explain NEW_RELIC_ENABLED and NEW_RELIC_CONFIG_FILE enviroment variables  [fiterbek]\n - Fix documentation formatting [fiterbek]\n - Print nicer info message [fiterbek]\n - Update documentation for NEW_RELIC_ENVIRONMENT enviroment variables [puittenbroek]\n\n1.0.8 (2013-10-02)\n-------------------\n\n - Fix: TALInterpreter patch fails when PageTemplate is made by value instead of file [puittenbroek]\n - Added dependency on repoze.xmliter [fiterbek]\n\n1.0.7 (2013-07-11)\n-------------------\n\n - Documentation typos [khink]\n - Documentation checking for pypi release [puittenbroek]\n - Patch cron4plone tick (if present) to make it a backgroundtask [puittenbroek]\n - Improve hook logic to worker properly in ZMI [puittenbroek]\n\n1.0.6 - unreleased\n-------------------\n\n - Changed naming of transactions, now based on view/templates being used [puittenbroek]\n - Ignore transactions for resource files (js, css, kss(?)) [puittenbroek]\n\n\n1.0.5 - unreleased\n-------------------\n\n - First production test version\n\nprior 1.0.5 \n-------------------\n - Inital code implemtation and testing", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/collective.newrelic", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.newrelic", "package_url": "https://pypi.org/project/collective.newrelic/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.newrelic/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/collective.newrelic"}, "release_url": "https://pypi.org/project/collective.newrelic/1.0.9/", "requires_dist": null, "requires_python": null, "summary": "Zope/Plone Newrelic instrumentation", "version": "1.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package offers instrumentation for NewRelic ( <a href=\"http://www.newrelic.com\" rel=\"nofollow\">http://www.newrelic.com</a> ). Currently the catalog-tool, transformchains and zope-events are instrumented. A transform is included to support RUM (Real-User-Monitoring): it inserts small snippets of javascript at the top and bottom of the rendered pages. RUM does not work in the ZMI (Zope Management Interface).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can add this egg \u2018collective.newrelic\u2019 to your eggs and it will pull in the \u2018newrelic\u2019 egg too.</p>\n<pre>[buildout]\n\n# either pin versions as shown below...\nversions=versions\n\n[versions]\nnewrelic = 2.6.0.5\nrepoze.xmliter = 0.5\n# update to 1.0.9 on next release:\ncollective.newrelic = 1.0.8\n\n# ...or allow picked versions and risk breakage on product updates\n#allow-picked-versions = true\n\nparts +=\n    newrelic\n\n[newrelic]\nrecipe = zc.recipe.egg:scripts\neggs = newrelic\n\n[instance]\neggs +=\n    collective.newrelic\n\n# make sure newrelic itself is enabled and set the path to your newrelic.ini file\nenvironment-vars +=\n    NEW_RELIC_ENABLED true\n    NEW_RELIC_CONFIG_FILE ${buildout:directory}/newrelic.ini\n    NEW_RELIC_ENVIRONMENT development\n\n# when using supervisor, setting environment variables is slightly different:\n#[supervisor]\n#supervisord-environment=NEW_RELIC_ENABLED=true,NEW_RELIC_CONFIG_FILE=${buildout:directory}/newrelic.ini,NEW_RELIC_ENVIRONMENT=development\n</pre>\n<p>A number of additional settings can optionally be configured using environment variables, see <a href=\"http://docs.newrelic.com/docs/python/python-agent-configuration#environment-variables\" rel=\"nofollow\">http://docs.newrelic.com/docs/python/python-agent-configuration#environment-variables</a> for details.\nCustomizing your newrelic.ini file is more advised though, see below.</p>\n<p>The NEW_RELIC_ENABLED and NEW_RELIC_CONFIG_FILE variables need to be set for the newrelic agent to work though.</p>\n<p>Omitting NEW_RELIC_ENVIRONMENT variable will mean the [newrelic] part is loaded without additional [newrelic:YOURENVNAME] settings.</p>\n<p>Please note: the newrelic package needs python &gt;= 2.5. This package will not work on Plone 3.</p>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>To enable the logging to newrelic.com, create an account at newrelic.com and get your license key. Create a \u2018newrelic.ini\u2019 file in the root of your project. Either by copying the template from this package or the newrelic package or run</p>\n<pre>$ bin/newrelic-admin generate-config YOUR-LICENSE-KEY newrelic.ini\n</pre>\n<p>This will create a newrelic.ini file in the current directory.</p>\n<p>You might want to validate your generated file using <tt><span class=\"pre\">newrelic-admin</span> <span class=\"pre\">validate-config</span> newrelic.ini</tt></p>\n<p>The default profile is \u2018staging\u2019, this can be changed in the <cite>__init__.py</cite> in the patches directory. You can change the default name of \u2018Python Application (Staging)\u2019 in the newrelic.ini file. To get sensible database-traces change</p>\n<pre>transaction_tracer.record_sql = obfuscated\n</pre>\n<p>to</p>\n<pre>transaction_tracer.record_sql = raw\n</pre>\n<div id=\"example-usage\">\n<h3>Example usage</h3>\n<p>In utils you find a few helper functions to wrap (parts) of your products and/or plone and/or any python module.\nFor example you could make a simple egg called myproduct.newrelic with only an <cite>__init__.py</cite>.\nWithin that file you have a \u2018\u2019\u2019initialize\u2019\u2019\u2019 function, therein you use the helper functions for further wrapping.</p>\n</div>\n</div>\n<div id=\"full-class-function-wrapping-of-an-entire-module\">\n<h2>Full class+function wrapping of an entire module</h2>\n<pre>from plone.app import viewletmanager as plone_viewletmanager\nfrom collective.newrelic.utils import wrap_module_classes_functions\nclass_function_modules = [plone_viewletmanager, ]\nwrapped_methods = wrap_module_classes_functions(class_function_modules)\nprint len(wrapped_methods)\n</pre>\n</div>\n<div id=\"single-class-wrapping\">\n<h2>Single class wrapping</h2>\n<pre>from zope.tal.talinterpreter import TALInterpreter\nfrom collective.newrelic.utils import wrap_class_found_functions\nwrapped_methods = wrap_class_found_functions(TALInterpreter)\nprint len(wrapped_methods)\n</pre>\n</div>\n<div id=\"pin-point-precision-wrapping-of-single-class-function\">\n<h2>Pin point precision wrapping of single class function</h2>\n<pre>from zope.tal.talinterpreter import TALInterpreter\nfrom collective.newrelic.utils import wrap_class_function\nwrapped_methods = wrap_class_function(TALInterpreter, TALInterpreter.__call__)\nprint wrapped_methods\n\"TALInterpreter.__call__\"\n</pre>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<p>If you see a message <tt>The Python Agent is not enabled.</tt> in the Zope instance log, first check if <tt>NEW_RELIC_ENABLED</tt> environment variable was set correctly.</p>\n<p>If this is ok, check your <tt>newrelic.ini</tt> file and make sure the profile you are using (eg <tt>[newrelic:staging]</tt>) has <tt>monitor_mode = true</tt>.</p>\n<p>It can also mean that the newrelic.ini cannot be found. Make sure the path to your newrelic.ini file is correctly set using the <tt>NEW_RELIC_CONFIG_FILE</tt> environment variable.</p>\n<p>If you see a message <tt>A valid account license key cannot be found.</tt>, check that you have a valid license key and make sure it is correctly set in the <tt>newrelic.ini</tt> file.</p>\n</div>\n<div id=\"references\">\n<h3>References</h3>\n<blockquote>\n<p><a href=\"http://www.newrelic.com\" rel=\"nofollow\">http://www.newrelic.com</a></p>\n<p><a href=\"http://newrelic.com/docs/python/python-agent-installation\" rel=\"nofollow\">http://newrelic.com/docs/python/python-agent-installation</a></p>\n<p><a href=\"http://docs.newrelic.com/docs/python/testing-the-python-agent\" rel=\"nofollow\">http://docs.newrelic.com/docs/python/testing-the-python-agent</a></p>\n</blockquote>\n</div>\n<div id=\"change-history\">\n<h3>Change history</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>1.0.9 (2014-01-02)</h2>\n<blockquote>\n<ul>\n<li>Introduce and explain NEW_RELIC_ENABLED and NEW_RELIC_CONFIG_FILE enviroment variables  [fiterbek]</li>\n<li>Fix documentation formatting [fiterbek]</li>\n<li>Print nicer info message [fiterbek]</li>\n<li>Update documentation for NEW_RELIC_ENVIRONMENT enviroment variables [puittenbroek]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h2>1.0.8 (2013-10-02)</h2>\n<blockquote>\n<ul>\n<li>Fix: TALInterpreter patch fails when PageTemplate is made by value instead of file [puittenbroek]</li>\n<li>Added dependency on repoze.xmliter [fiterbek]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h2>1.0.7 (2013-07-11)</h2>\n<blockquote>\n<ul>\n<li>Documentation typos [khink]</li>\n<li>Documentation checking for pypi release [puittenbroek]</li>\n<li>Patch cron4plone tick (if present) to make it a backgroundtask [puittenbroek]</li>\n<li>Improve hook logic to worker properly in ZMI [puittenbroek]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"unreleased\">\n<h2>1.0.6 - unreleased</h2>\n<blockquote>\n<ul>\n<li>Changed naming of transactions, now based on view/templates being used [puittenbroek]</li>\n<li>Ignore transactions for resource files (js, css, kss(?)) [puittenbroek]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h2>1.0.5 - unreleased</h2>\n<blockquote>\n<ul>\n<li>First production test version</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"prior-1-0-5\">\n<h2>prior 1.0.5</h2>\n<blockquote>\n<ul>\n<li>Inital code implemtation and testing</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 958316, "releases": {"1.0.7": [{"comment_text": "", "digests": {"md5": "0acf388d3cbcde74c7d9043bb32f6fde", "sha256": "d35aa00499937b42749cdb0f5c42cadca9318d2689ce56576b5202453ac4bab8"}, "downloads": -1, "filename": "collective.newrelic-1.0.7.zip", "has_sig": false, "md5_digest": "0acf388d3cbcde74c7d9043bb32f6fde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22912, "upload_time": "2013-07-11T12:17:11", "upload_time_iso_8601": "2013-07-11T12:17:11.598629Z", "url": "https://files.pythonhosted.org/packages/3e/d1/8a9a3cca6fda1de7596fd66cb461ea5e913538fb3ef864763b0fb992f73f/collective.newrelic-1.0.7.zip", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "73fa74875305f43b4d09c8324a286b58", "sha256": "1ae4efa15cc027064278b456f4bcdf217f6dd0c8eda6feed93065e4797932b58"}, "downloads": -1, "filename": "collective.newrelic-1.0.8.zip", "has_sig": false, "md5_digest": "73fa74875305f43b4d09c8324a286b58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36494, "upload_time": "2013-10-02T12:19:44", "upload_time_iso_8601": "2013-10-02T12:19:44.754479Z", "url": "https://files.pythonhosted.org/packages/82/29/8f196c0a3788c7ccd03edebd5dfbf6510fd64ea3c4d2ee0e190574a04eb1/collective.newrelic-1.0.8.zip", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "695c50cf95c5ecd4928bbfb42383cd8f", "sha256": "bbd525d324ff85fb56b40a4e7e3a808ab81548af9f4ef1bc78dba5cf0997f32a"}, "downloads": -1, "filename": "collective.newrelic-1.0.9.zip", "has_sig": false, "md5_digest": "695c50cf95c5ecd4928bbfb42383cd8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38748, "upload_time": "2014-01-02T11:07:09", "upload_time_iso_8601": "2014-01-02T11:07:09.211017Z", "url": "https://files.pythonhosted.org/packages/bc/9e/082b74bad9092f38d83abfe17fb58119f6709e9e677e9536a88795e16b34/collective.newrelic-1.0.9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "695c50cf95c5ecd4928bbfb42383cd8f", "sha256": "bbd525d324ff85fb56b40a4e7e3a808ab81548af9f4ef1bc78dba5cf0997f32a"}, "downloads": -1, "filename": "collective.newrelic-1.0.9.zip", "has_sig": false, "md5_digest": "695c50cf95c5ecd4928bbfb42383cd8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38748, "upload_time": "2014-01-02T11:07:09", "upload_time_iso_8601": "2014-01-02T11:07:09.211017Z", "url": "https://files.pythonhosted.org/packages/bc/9e/082b74bad9092f38d83abfe17fb58119f6709e9e677e9536a88795e16b34/collective.newrelic-1.0.9.zip", "yanked": false}], "timestamp": "Fri May  8 00:45:05 2020"}