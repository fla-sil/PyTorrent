{"info": {"author": "Joseph Marsilla", "author_email": "joseph.marsilla@mail.utoronto.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python :: 3.6", "Topic :: Education", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "\npyGemPick: Open Source Gold Particle Picker for Immunogold Diagnostics\n======================================================================\n\nThis is the official installation guide for the PyGemPick module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPyGemPick is the cummulation of `Joseph\nMarsilla's <https://github.com/jmarsil>`__ research project under Dr.\nAvi Chakrabartty. This module contains functions that enable filtering,\ndetection, and modeling of immunogold particles on TEM micrographs.\n\nThe main project goal was to greate an open source batch gold particle\npicking module built in python that could detect gold particles\nregardless of the amount of counterstaining present in the IGEM\n(Immunogold Electron Microscopy) micrograph.\n\npyGemPick has three main dependencies that are needed before usage\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    1. [OpenCV (cv2)](https://opencv.org/) \n    2. [Pandas (pd)](https://pandas.pydata.org/)\n    3. [Numpy  (np)](http://www.numpy.org/) \n\nI would suggest installing a new anaconda environment using\n`anaconda <https://conda.io/docs/user-guide/getting-started.html>`__\nterminal into which you can import all the required modules for your\nproject. Having trouble installing OpenCv, use the solution outlined\nhere: `(install using\nconda) <https://stackoverflow.com/questions/23119413/how-do-i-install-python-opencv-through-conda>`__.\nPandas and Numpy can also be installed through any terminal using ***pip\ninstall pandas, numpy***\n\nThe project will be updated in the upcoming weeks with tutorials on how\nto use the functions given within\n`pygempick <https://pypi.org/project/pygempick/>`__. This module was\nbuilt to help researchers that are building therasnotic solutions\n(therapy based as well as diagnostic innovations) to help pateints with\nrare protein misfolding diseases like ATTR amyloidosis , `Alzheimer's\nDisease\n(AD) <https://www.alz.org/alzheimers_disease_what_is_alzheimers.asp>`__,\n`Frontotemporal Dementia\n(FTD) <https://www.theaftd.org/what-is-ftd/disease-overview/>`__ and\n`Amyotrophic Lateral Sclerosis (also known as ALS or Lou Gehrig's\ndisease) <https://www.als.ca/about-als/what-is-als/>`__ using novel\nImmunogold diagnostic techniques.\n\n***NEW:*** This update contains supplementary 11 supplementary documents\nthat will help you use the module. We cover image compression, image\npicking with singular and duplicate filtering, statistical analysis,\nseparation & efficiency tests to test the algorithm's useability.\n\n**Sample Image Data will be provided and shall be located in the DATA\nfolder**\n\nInstallation\n------------\n\n::\n\n    pip install pygempick\n\n    > import pygempick.core as py\n    > import pygempick.modeling as mod\n    > import pygempick.spatialstats as spa\n\nNote numpy, pandas and opencv modules dependencies are needed prior installation.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**NEW:** This update contains supplementary 11 supplementary documents\nthat will help you use the module. We cover image compression, image\npicking with singular and duplicate filtering, statistical analysis,\nseparation & efficiency tests to test the algorithm's fairness.\n\nFor more information visit the github!\n\nFunctions:\n----------\n\n-  ***py.compress(orig-img)***\n\n   -  a function that takes an original large scale electron micrograph\n      image and compresses it such that 1px = aproximately one\n      nanometer. the exact pixle dimentions for a 3.1x compression are\n      given below.\n\n-  ***py.back\\_eq(image)***\n\n   -  background equalization provided by solution presented\n      `here <https://stackoverflow.com/questions/39231534/get-darker-lines-of-an-image-using-opencv>`__\n\n-  ***py.hclap\\_filt(p,image, noise)***\n\n   -  New High Contrast Laplace Filter.\n   -  Applies a `HCLAP\n      Kernel <https://en.wikipedia.org/wiki/Discrete_Laplace_operator>`__\n   -  Takes odd scaling parameter p > 5 with a regular compressed image\n   -  if noise == 'yes' will add median blur after filter applied.\n\n-  ***py.hlog\\_filt(p, image, noise)***\n\n   -  New High-Contrast Laplace of Gaussian Filter.\n   -  Applies a `HCLOG\n      Kernel <http://fourier.eng.hmc.edu/e161/lectures/gradient/node8.html>`__\n      to each image to produce a single binary image as an output.\n   -  Takes odd and even scaling # parameters 18+\n   -  input image is regular py.compress image output,\n   -  if noise == 'yes' will add median blur after filter applied.\n\n-  ***py.dog\\_filt(p, image)***\n\n   -  `Difference of Gaussian\n      Filter <http://www.tjscientific.com/2017/01/31/using-python-and-opencv-to-create-a-difference-of-gaussian-filter/>`__.\n      Input is an odd number p to determine size of DOG kernel,\n   -  input is an py.compress output image,\n   -  if noise == 'yes' will add median blur after filter applied.\n\n-  ***py.bin\\_filt(p, image)***\n\n   -  Smart Binary Filtering. Uses the average gray pixel intensity\n      values to determing the starting `threshold\n      position <https://docs.opencv.org/2.4/doc/tutorials/imgproc/threshold/threshold.html>`__.\n   -  Takes odd scaling parameter p, input image is a py.compress output\n      image\n\n   ***Note:*** TEM migrograph filtering using simple binary thresholding\n   was first completed in 2003 with one of the first gold particle\n   picking algorithms\n   `GoldFinder <https://www.sciencedirect.com/science/article/pii/S104784770200624X>`__.\n\n-  ***New: key\\_filt(keypoints1, keypoints2)***\n\n-  Allows you to scandetected keypoints and eliminate duplicates! Allows\n   you to detect partciles with more than one filter. Returns updated\n   keypoints 1 with the removed keypoints and number of duplicate(s)\n   detected.\n\n-  ***py.pick(image, minAREA, minCIRC, minCONV, minINER, minTHRESH)***\n\n   -  Input image is a binary image from one of the above filters, next\n      have to set the parameters to optimize `OpenCv's Simple Blob\n      Detector <https://www.learnopencv.com/blob-detection-using-opencv-python-c/>`__\n   -  Detects immunogold particles on filtered binary image by\n      optimizing picking across 4 main paramaters using OpenCv's simple\n      blob detector.\n   -  Have to optimize picking for each set separately on a per class or\n      per trial basis.\n\n   .. rubric:: Gold Particle Picking Parameters\n      :name: gold-particle-picking-parameters\n\n   ::\n\n       1. minArea = lowest area in pixels of a detected gold particle (20 px**2)\n       2. minCirc = lowest circularity value of a detected gold particle [.78 is square]\n       3. minConv = lowest convextivity parameter which is  Convexity is defined as the (Area of the gold particle / Area of it\u2019s convex hull)\n       4. minINER = minimum inertial ratio (filters gold particles based on  eliptical properties, 1 is a complete circle)\n\n-  ***py.snapshots(folder, keypoints, gray\\_img, i)***\n\n   -  folder = folder location where snapshots will be saved, keypoints\n      = the detected keypoints from py.pick function , gray\\_img =\n      compressed grayscale image, i = image number.\n\n   -  Takes an compressed grayscale image and uses the detected\n      keypoints as a marker to take a snapshot of within a 100px radius\n      of that gold particle's position. *Researchers use this to analyze\n      the morphological properties of protein aggregates*\n\n-  ***mod.draw(n, test\\_number, noise, images)***\n\nfunction to draws test micrograph sets that will be used in subsequent\nefficiency or separation tests.\n\n::\n\n    1. Test number 1 is draw only circles, 2 is draw both circles and ellipses. \n    2. Noise if == 'yes' then, randomly distibuted gaussian noise will be drawn \n        according to mu1, sig1. \n    3. images are the number of images in the set - used with n which is number of \n       particles detected in the actual set to calulate the particle density of model \n       set.\n       \n\n-  ***mod.imgclass(inv\\_img)***\n\n   -  Uses a compressed grayscale image from\n      `cv2.cvt\\_color(RGB2GRAY) <https://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html>`__\n      and returns the intensity histogram and related bins position w/\n      im\\_class.\n\n-  ***mod.septest(p,image)***\n\n   -  Let p be a range of integers ranging from [1, x], let image be a\n      grayscale image produced after original image compression and\n      conversion to grayscale using OpenCv's function\n      cv2.cvtColor(orig\\_img, cv2.COLOR\\_RGB2GRAY).\n\n   -  Completes separation test for single filter comparrison.\n\n-  ***New mod.septest2(p, image, hlogkey)***\n\n   -  let p be a range of integers ranging from [1, x] , let image be a\n      grayscale image produced after original image compression and\n      conversion to grayscale using OpenCv's function\n      cv2.cvtColor(orig\\_img, cv2.COLOR\\_RGB2GRAY).\n\n   -  hlogkey = the keypoints of detected image fitered with HLOG filter\n      - this ensures faster particle detection since we aren't running\n      the same filtering step more than once!\n\n   -  Completes separation test for ***dual high-contrase filter\n      comparrison***.\n\n-  ***mod.fitpcf(data)***\n\n   -  Data is the input from a csv created by sta.bin2csv\n   -  file is in format of pcf-dr#-error.csv'.\n   -  Function initially created to plot graphs for image set with\n      varrying concentrations of AB aggregates in solution\n\n   | **Output:** built to produce one graph, with fitted curve for\n     positive control(s).\n   | Equation fitted to probability distribution for Complete Spatial\n     Randomness of the distribution of IGEM particles across EM\n     micrographs.\n\n-  ***spa.gamma(a,b,r)***\n\n   -  a = width of image in pixels\n   -  b = height of the image in pixels\n   -  r is the diatance of the donut from which correlation was\n      calculated.\n\n   Function taken from work by `Philemonenko et al\n   2000 <http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf>`__\n   that was used as a window covariogram to correct `Ripley's K\n   function <http://wiki.landscapetoolbox.org/doku.php/spatial_analysis_methods:ripley_s_k_and_pair_correlation_function>`__\n   for boundary conditions.\n\n-  ***spa.pcf(r, N, p0, p1)***\n\n   -  r is the radius of the donut taken with bin width dr.\n   -  N is the degree PCF (Pair Correlation Function) is the probability\n      distribution of a CSR related process that we will used to fit our\n      normalized version of\n\n   -  This is a python based solution to `Philmoneko's Statistical\n      Evaluation of Colocalization Patterns in Immunogold Labeling\n      Experiments <http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf>`__.\n      The PCF distribution for calculating the colocolization of\n      immunogold particles on transmission electorn microgrpahs is\n      represented here.\n\n-  ***spa.record\\_kp(i, keypoints, data)***\n\n   -  i is the image number counter\n   -  keypoints is the list of keypoints of Gold particles detected by\n      py.pick\n   -  data is an empty pandas dataframe.\n\n   This function recods the x,y positions of the keypoints detected in\n   each image. Run in for loop to add results for each image to\n   dataframe which can be then exported into a csv for easy access.\n   (completed in spa.bin2csv )\n\n-  ***spa.bin2csv(images)***\n\n-  function takes a list of filelocations from glob.glob (asks for the\n   filtering parameters) then it outputs a csv of the x and y\n   coordinates of keypoints for every image in images. (For example, row\n   1 contains the x coordinate of the keypoints in image 1 and row 2\n   contains the y coordinates in image 1 ect...)\n\n-  ***spa.bin2df(images)***\n\n   -  images is a set of images from folder using glob.glob() function,\n\n   -  Output records the keypoint positions found in each image and\n      outputs a pandas df with detected keypoint centers in (x,y) pixel\n      coordinates.\n\n-  ***spa.csv2pcf(data, dr)***\n\n   -  takes the filename ``data`` from a csv produced by bin2csv() and\n      outputs non-normalized scale invarient k (cross-corelation) and\n      pcf (pair-correlation) statisticaldata from the spatial\n      distribution of the paticles on each micrograph. (determines\n      wheter the nul-hypothesis of CSR `Complete Spatial\n      Randomness <https://en.wikipedia.org/wiki/Complete_spatial_randomness>`__\n      is upheld or voided...). Analyzed by bin2csv. Example output\n      provided in docs.\n\n   -  dr is the donut width as defined by philmonenko et al, 2000\n\n-  ***spa.keypoints2pcf(data\\_set, dr)***\n\n   -  Input folder with CSV files of keypoints for different tests Need\n      to know Image number and average particles detected in each set\n      (**example**: data\\_set =\n      glob.glob('/home/joseph/Documents/PHY479/Data/anto/\\*.csv'))\n\n   -  dr is the donut width as defined by `philmonenko et al, 2000\n      article <http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf>`__\n      on immunogold particle colocolization and spatial statistcs.\n\n   -  **output:** pcf-dr{}-error.csv - columns dr (sampling radius), pcf\n      (`pair correlation\n      coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`__),\n      dpcf (propogated uncertainty in pcf)\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jmarsil/pygempick", "keywords": "immunogold batch gold particle picker EM micrograph processing correlation       analysis IGEM diagnostics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pygempick", "package_url": "https://pypi.org/project/pygempick/", "platform": "", "project_url": "https://pypi.org/project/pygempick/", "project_urls": {"Homepage": "https://github.com/jmarsil/pygempick"}, "release_url": "https://pypi.org/project/pygempick/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "Open Source Batch Gold Particle Picking & Procesing for Immunogold Diagnostics", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyGemPick is the cummulation of <a href=\"https://github.com/jmarsil\" rel=\"nofollow\">Joseph\nMarsilla\u2019s</a> research project under Dr.\nAvi Chakrabartty. This module contains functions that enable filtering,\ndetection, and modeling of immunogold particles on TEM micrographs.</p>\n<p>The main project goal was to greate an open source batch gold particle\npicking module built in python that could detect gold particles\nregardless of the amount of counterstaining present in the IGEM\n(Immunogold Electron Microscopy) micrograph.</p>\n<div id=\"pygempick-has-three-main-dependencies-that-are-needed-before-usage\">\n<h2>pyGemPick has three main dependencies that are needed before usage</h2>\n<pre>1. [OpenCV (cv2)](https://opencv.org/)\n2. [Pandas (pd)](https://pandas.pydata.org/)\n3. [Numpy  (np)](http://www.numpy.org/)\n</pre>\n<p>I would suggest installing a new anaconda environment using\n<a href=\"https://conda.io/docs/user-guide/getting-started.html\" rel=\"nofollow\">anaconda</a>\nterminal into which you can import all the required modules for your\nproject. Having trouble installing OpenCv, use the solution outlined\nhere: <a href=\"https://stackoverflow.com/questions/23119413/how-do-i-install-python-opencv-through-conda\" rel=\"nofollow\">(install using\nconda)</a>.\nPandas and Numpy can also be installed through any terminal using <strong>*pip\ninstall pandas, numpy*</strong></p>\n<p>The project will be updated in the upcoming weeks with tutorials on how\nto use the functions given within\n<a href=\"https://pypi.org/project/pygempick/\" rel=\"nofollow\">pygempick</a>. This module was\nbuilt to help researchers that are building therasnotic solutions\n(therapy based as well as diagnostic innovations) to help pateints with\nrare protein misfolding diseases like ATTR amyloidosis , <a href=\"https://www.alz.org/alzheimers_disease_what_is_alzheimers.asp\" rel=\"nofollow\">Alzheimer\u2019s\nDisease\n(AD)</a>,\n<a href=\"https://www.theaftd.org/what-is-ftd/disease-overview/\" rel=\"nofollow\">Frontotemporal Dementia\n(FTD)</a> and\n<a href=\"https://www.als.ca/about-als/what-is-als/\" rel=\"nofollow\">Amyotrophic Lateral Sclerosis (also known as ALS or Lou Gehrig\u2019s\ndisease)</a> using novel\nImmunogold diagnostic techniques.</p>\n<p><strong>*NEW:*</strong> This update contains supplementary 11 supplementary documents\nthat will help you use the module. We cover image compression, image\npicking with singular and duplicate filtering, statistical analysis,\nseparation &amp; efficiency tests to test the algorithm\u2019s useability.</p>\n<p><strong>Sample Image Data will be provided and shall be located in the DATA\nfolder</strong></p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install pygempick\n\n&gt; import pygempick.core as py\n&gt; import pygempick.modeling as mod\n&gt; import pygempick.spatialstats as spa\n</pre>\n</div>\n</div>\n<div id=\"note-numpy-pandas-and-opencv-modules-dependencies-are-needed-prior-installation\">\n<h2>Note numpy, pandas and opencv modules dependencies are needed prior installation.</h2>\n<p><strong>NEW:</strong> This update contains supplementary 11 supplementary documents\nthat will help you use the module. We cover image compression, image\npicking with singular and duplicate filtering, statistical analysis,\nseparation &amp; efficiency tests to test the algorithm\u2019s fairness.</p>\n<p>For more information visit the github!</p>\n<div id=\"functions\">\n<h3>Functions:</h3>\n<ul>\n<li><p><strong>*py.compress(orig-img)*</strong></p>\n<ul>\n<li>a function that takes an original large scale electron micrograph\nimage and compresses it such that 1px = aproximately one\nnanometer. the exact pixle dimentions for a 3.1x compression are\ngiven below.</li>\n</ul>\n</li>\n<li><p><strong>*py.back_eq(image)*</strong></p>\n<ul>\n<li>background equalization provided by solution presented\n<a href=\"https://stackoverflow.com/questions/39231534/get-darker-lines-of-an-image-using-opencv\" rel=\"nofollow\">here</a></li>\n</ul>\n</li>\n<li><p><strong>*py.hclap_filt(p,image, noise)*</strong></p>\n<ul>\n<li>New High Contrast Laplace Filter.</li>\n<li>Applies a <a href=\"https://en.wikipedia.org/wiki/Discrete_Laplace_operator\" rel=\"nofollow\">HCLAP\nKernel</a></li>\n<li>Takes odd scaling parameter p &gt; 5 with a regular compressed image</li>\n<li>if noise == \u2018yes\u2019 will add median blur after filter applied.</li>\n</ul>\n</li>\n<li><p><strong>*py.hlog_filt(p, image, noise)*</strong></p>\n<ul>\n<li>New High-Contrast Laplace of Gaussian Filter.</li>\n<li>Applies a <a href=\"http://fourier.eng.hmc.edu/e161/lectures/gradient/node8.html\" rel=\"nofollow\">HCLOG\nKernel</a>\nto each image to produce a single binary image as an output.</li>\n<li>Takes odd and even scaling # parameters 18+</li>\n<li>input image is regular py.compress image output,</li>\n<li>if noise == \u2018yes\u2019 will add median blur after filter applied.</li>\n</ul>\n</li>\n<li><p><strong>*py.dog_filt(p, image)*</strong></p>\n<ul>\n<li><a href=\"http://www.tjscientific.com/2017/01/31/using-python-and-opencv-to-create-a-difference-of-gaussian-filter/\" rel=\"nofollow\">Difference of Gaussian\nFilter</a>.\nInput is an odd number p to determine size of DOG kernel,</li>\n<li>input is an py.compress output image,</li>\n<li>if noise == \u2018yes\u2019 will add median blur after filter applied.</li>\n</ul>\n</li>\n<li><p><strong>*py.bin_filt(p, image)*</strong></p>\n<ul>\n<li>Smart Binary Filtering. Uses the average gray pixel intensity\nvalues to determing the starting <a href=\"https://docs.opencv.org/2.4/doc/tutorials/imgproc/threshold/threshold.html\" rel=\"nofollow\">threshold\nposition</a>.</li>\n<li>Takes odd scaling parameter p, input image is a py.compress output\nimage</li>\n</ul>\n<p><strong>*Note:*</strong> TEM migrograph filtering using simple binary thresholding\nwas first completed in 2003 with one of the first gold particle\npicking algorithms\n<a href=\"https://www.sciencedirect.com/science/article/pii/S104784770200624X\" rel=\"nofollow\">GoldFinder</a>.</p>\n</li>\n<li><p><strong>*New: key_filt(keypoints1, keypoints2)*</strong></p>\n</li>\n<li><p>Allows you to scandetected keypoints and eliminate duplicates! Allows\nyou to detect partciles with more than one filter. Returns updated\nkeypoints 1 with the removed keypoints and number of duplicate(s)\ndetected.</p>\n</li>\n<li><p><strong>*py.pick(image, minAREA, minCIRC, minCONV, minINER, minTHRESH)*</strong></p>\n<ul>\n<li>Input image is a binary image from one of the above filters, next\nhave to set the parameters to optimize <a href=\"https://www.learnopencv.com/blob-detection-using-opencv-python-c/\" rel=\"nofollow\">OpenCv\u2019s Simple Blob\nDetector</a></li>\n<li>Detects immunogold particles on filtered binary image by\noptimizing picking across 4 main paramaters using OpenCv\u2019s simple\nblob detector.</li>\n<li>Have to optimize picking for each set separately on a per class or\nper trial basis.</li>\n</ul>\n<p id=\"gold-particle-picking-parameters\">Gold Particle Picking Parameters</p>\n<pre>1. minArea = lowest area in pixels of a detected gold particle (20 px**2)\n2. minCirc = lowest circularity value of a detected gold particle [.78 is square]\n3. minConv = lowest convextivity parameter which is  Convexity is defined as the (Area of the gold particle / Area of it\u2019s convex hull)\n4. minINER = minimum inertial ratio (filters gold particles based on  eliptical properties, 1 is a complete circle)\n</pre>\n</li>\n<li><p><strong>*py.snapshots(folder, keypoints, gray_img, i)*</strong></p>\n<ul>\n<li>folder = folder location where snapshots will be saved, keypoints\n= the detected keypoints from py.pick function , gray_img =\ncompressed grayscale image, i = image number.</li>\n<li>Takes an compressed grayscale image and uses the detected\nkeypoints as a marker to take a snapshot of within a 100px radius\nof that gold particle\u2019s position. <em>Researchers use this to analyze\nthe morphological properties of protein aggregates</em></li>\n</ul>\n</li>\n<li><p><strong>*mod.draw(n, test_number, noise, images)*</strong></p>\n</li>\n</ul>\n<p>function to draws test micrograph sets that will be used in subsequent\nefficiency or separation tests.</p>\n<pre>1. Test number 1 is draw only circles, 2 is draw both circles and ellipses.\n2. Noise if == 'yes' then, randomly distibuted gaussian noise will be drawn\n    according to mu1, sig1.\n3. images are the number of images in the set - used with n which is number of\n   particles detected in the actual set to calulate the particle density of model\n   set.\n</pre>\n<ul>\n<li><p><strong>*mod.imgclass(inv_img)*</strong></p>\n<ul>\n<li>Uses a compressed grayscale image from\n<a href=\"https://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html\" rel=\"nofollow\">cv2.cvt_color(RGB2GRAY)</a>\nand returns the intensity histogram and related bins position w/\nim_class.</li>\n</ul>\n</li>\n<li><p><strong>*mod.septest(p,image)*</strong></p>\n<ul>\n<li>Let p be a range of integers ranging from [1, x], let image be a\ngrayscale image produced after original image compression and\nconversion to grayscale using OpenCv\u2019s function\ncv2.cvtColor(orig_img, cv2.COLOR_RGB2GRAY).</li>\n<li>Completes separation test for single filter comparrison.</li>\n</ul>\n</li>\n<li><p><strong>*New mod.septest2(p, image, hlogkey)*</strong></p>\n<ul>\n<li>let p be a range of integers ranging from [1, x] , let image be a\ngrayscale image produced after original image compression and\nconversion to grayscale using OpenCv\u2019s function\ncv2.cvtColor(orig_img, cv2.COLOR_RGB2GRAY).</li>\n<li>hlogkey = the keypoints of detected image fitered with HLOG filter\n- this ensures faster particle detection since we aren\u2019t running\nthe same filtering step more than once!</li>\n<li>Completes separation test for <strong>*dual high-contrase filter\ncomparrison*</strong>.</li>\n</ul>\n</li>\n<li><p><strong>*mod.fitpcf(data)*</strong></p>\n<ul>\n<li>Data is the input from a csv created by sta.bin2csv</li>\n<li>file is in format of pcf-dr#-error.csv\u2019.</li>\n<li>Function initially created to plot graphs for image set with\nvarrying concentrations of AB aggregates in solution</li>\n</ul>\n<div>\n<div><strong>Output:</strong> built to produce one graph, with fitted curve for\npositive control(s).</div>\n<div>Equation fitted to probability distribution for Complete Spatial\nRandomness of the distribution of IGEM particles across EM\nmicrographs.</div>\n</div>\n</li>\n<li><p><strong>*spa.gamma(a,b,r)*</strong></p>\n<ul>\n<li>a = width of image in pixels</li>\n<li>b = height of the image in pixels</li>\n<li>r is the diatance of the donut from which correlation was\ncalculated.</li>\n</ul>\n<p>Function taken from work by <a href=\"http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf\" rel=\"nofollow\">Philemonenko et al\n2000</a>\nthat was used as a window covariogram to correct <a href=\"http://wiki.landscapetoolbox.org/doku.php/spatial_analysis_methods:ripley_s_k_and_pair_correlation_function\" rel=\"nofollow\">Ripley\u2019s K\nfunction</a>\nfor boundary conditions.</p>\n</li>\n<li><p><strong>*spa.pcf(r, N, p0, p1)*</strong></p>\n<ul>\n<li>r is the radius of the donut taken with bin width dr.</li>\n<li>N is the degree PCF (Pair Correlation Function) is the probability\ndistribution of a CSR related process that we will used to fit our\nnormalized version of</li>\n<li>This is a python based solution to <a href=\"http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf\" rel=\"nofollow\">Philmoneko\u2019s Statistical\nEvaluation of Colocalization Patterns in Immunogold Labeling\nExperiments</a>.\nThe PCF distribution for calculating the colocolization of\nimmunogold particles on transmission electorn microgrpahs is\nrepresented here.</li>\n</ul>\n</li>\n<li><p><strong>*spa.record_kp(i, keypoints, data)*</strong></p>\n<ul>\n<li>i is the image number counter</li>\n<li>keypoints is the list of keypoints of Gold particles detected by\npy.pick</li>\n<li>data is an empty pandas dataframe.</li>\n</ul>\n<p>This function recods the x,y positions of the keypoints detected in\neach image. Run in for loop to add results for each image to\ndataframe which can be then exported into a csv for easy access.\n(completed in spa.bin2csv )</p>\n</li>\n<li><p><strong>*spa.bin2csv(images)*</strong></p>\n</li>\n<li><p>function takes a list of filelocations from glob.glob (asks for the\nfiltering parameters) then it outputs a csv of the x and y\ncoordinates of keypoints for every image in images. (For example, row\n1 contains the x coordinate of the keypoints in image 1 and row 2\ncontains the y coordinates in image 1 ect\u2026)</p>\n</li>\n<li><p><strong>*spa.bin2df(images)*</strong></p>\n<ul>\n<li>images is a set of images from folder using glob.glob() function,</li>\n<li>Output records the keypoint positions found in each image and\noutputs a pandas df with detected keypoint centers in (x,y) pixel\ncoordinates.</li>\n</ul>\n</li>\n<li><p><strong>*spa.csv2pcf(data, dr)*</strong></p>\n<ul>\n<li>takes the filename <tt>data</tt> from a csv produced by bin2csv() and\noutputs non-normalized scale invarient k (cross-corelation) and\npcf (pair-correlation) statisticaldata from the spatial\ndistribution of the paticles on each micrograph. (determines\nwheter the nul-hypothesis of CSR <a href=\"https://en.wikipedia.org/wiki/Complete_spatial_randomness\" rel=\"nofollow\">Complete Spatial\nRandomness</a>\nis upheld or voided\u2026). Analyzed by bin2csv. Example output\nprovided in docs.</li>\n<li>dr is the donut width as defined by philmonenko et al, 2000</li>\n</ul>\n</li>\n<li><p><strong>*spa.keypoints2pcf(data_set, dr)*</strong></p>\n<ul>\n<li>Input folder with CSV files of keypoints for different tests Need\nto know Image number and average particles detected in each set\n(<strong>example</strong>: data_set =\nglob.glob(\u2018/home/joseph/Documents/PHY479/Data/anto/*.csv\u2019))</li>\n<li>dr is the donut width as defined by <a href=\"http://nucleus.img.cas.cz/pdf_publications/PHI_Statistical%20evaluation%20of%20Colocalization%20Patterns_01.pdf\" rel=\"nofollow\">philmonenko et al, 2000\narticle</a>\non immunogold particle colocolization and spatial statistcs.</li>\n<li><strong>output:</strong> pcf-dr{}-error.csv - columns dr (sampling radius), pcf\n(<a href=\"https://en.wikipedia.org/wiki/Pearson_correlation_coefficient\" rel=\"nofollow\">pair correlation\ncoefficient</a>),\ndpcf (propogated uncertainty in pcf)</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4082940, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "25f7000667abe23b71767ee65ce4ef84", "sha256": "4907d7b3a7b95a1d4857898c6f0e7ad3e1e6a31a3da98ea28e187f3e8ed42498"}, "downloads": -1, "filename": "pygempick-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25f7000667abe23b71767ee65ce4ef84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8936, "upload_time": "2018-05-09T19:49:26", "upload_time_iso_8601": "2018-05-09T19:49:26.042916Z", "url": "https://files.pythonhosted.org/packages/d6/b4/0aa086e52572906bec2501a6beb908389546fc9d783ed20d1ac108dd3344/pygempick-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b56a0b33124b151ea07cbf66008324c", "sha256": "3b2a8060e63c834606945308719f77bba6571f3c5f32305a9b0e288476b73daf"}, "downloads": -1, "filename": "pygempick-1.0.tar.gz", "has_sig": false, "md5_digest": "2b56a0b33124b151ea07cbf66008324c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9744, "upload_time": "2018-05-09T19:49:27", "upload_time_iso_8601": "2018-05-09T19:49:27.320239Z", "url": "https://files.pythonhosted.org/packages/22/80/bc5ec4bb28e9cb690d34f83183cea83f80cf1531d6a682444dcd20ba935c/pygempick-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ba31c4e48d6c2b8cad8e6a9290a5dc89", "sha256": "2c3f3ff129913ff2931fe686b8a528eef0d144ad23a3d38d8aa98d450fc0c638"}, "downloads": -1, "filename": "pygempick-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba31c4e48d6c2b8cad8e6a9290a5dc89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17096, "upload_time": "2018-05-10T18:13:30", "upload_time_iso_8601": "2018-05-10T18:13:30.524729Z", "url": "https://files.pythonhosted.org/packages/a3/ab/e0a4df9e418028a7ad7d5683843d2f37db4ad20bcfcc6ad3b76afb9ad62b/pygempick-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61880527393e4470c763503a2a39730e", "sha256": "2fbadbb4a1919aa5b88d4fecb003c95bae9e8973bf4ed142b2ea577b01e523d8"}, "downloads": -1, "filename": "pygempick-1.1.tar.gz", "has_sig": false, "md5_digest": "61880527393e4470c763503a2a39730e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19608, "upload_time": "2018-05-10T18:13:31", "upload_time_iso_8601": "2018-05-10T18:13:31.852451Z", "url": "https://files.pythonhosted.org/packages/d4/f9/4d8d1801bd57abede143c77a9f323d16f165d11ddcca60a8872660d5ee4d/pygempick-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "31cb61616f01e9ee796d5b67a937bc3c", "sha256": "f61e591fc6dc4c6067297b5f0a07d97f7b4a9e6647a0acecdb3718aada459898"}, "downloads": -1, "filename": "pygempick-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31cb61616f01e9ee796d5b67a937bc3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17144, "upload_time": "2018-05-12T14:02:29", "upload_time_iso_8601": "2018-05-12T14:02:29.982592Z", "url": "https://files.pythonhosted.org/packages/e2/09/d06a934412c08c74b9f5ec6c94c1de293ee8b498b25aab70267d5855cab5/pygempick-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29d178852ad064828ed48be6922f252a", "sha256": "02a6feeed704cf702083e9e36ac3ccf4e337806165be231dd74e6a7e0df85b98"}, "downloads": -1, "filename": "pygempick-1.1.1.tar.gz", "has_sig": false, "md5_digest": "29d178852ad064828ed48be6922f252a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19623, "upload_time": "2018-05-12T14:02:31", "upload_time_iso_8601": "2018-05-12T14:02:31.577892Z", "url": "https://files.pythonhosted.org/packages/90/d2/ca617852c747cb42a3b14a8a6844c1f02aa902f97deb9dd250793a7e6b76/pygempick-1.1.1.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "13352609a1944d8121a990f4fd3c0d12", "sha256": "09505aafc701c1a0031d323117c4fda0ebae69863aaac8e0607adf7d3febc9af"}, "downloads": -1, "filename": "pygempick-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "13352609a1944d8121a990f4fd3c0d12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19139, "upload_time": "2018-05-29T14:45:45", "upload_time_iso_8601": "2018-05-29T14:45:45.498470Z", "url": "https://files.pythonhosted.org/packages/de/5c/33d4c303dfce05fb7f590a6d5d721c65aaa3e9eabd95117718e47df0a857/pygempick-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b98dec1597dce3f506ff9c933977889", "sha256": "6a538e4713b591ee687b13237c9b15a5bcf22ff58a77c8f6f12604d33e0fd8a7"}, "downloads": -1, "filename": "pygempick-1.1.3.tar.gz", "has_sig": false, "md5_digest": "2b98dec1597dce3f506ff9c933977889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23160, "upload_time": "2018-05-29T14:45:46", "upload_time_iso_8601": "2018-05-29T14:45:46.732468Z", "url": "https://files.pythonhosted.org/packages/c1/4b/a36af941c139698158167c424ef31540c214ac892eeb2d0b960b2592d960/pygempick-1.1.3.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "1ec30ddb772287565289d912b59dfd6d", "sha256": "a248c99148e61fcb5faa671bc16ee59f79f0133853dedf72259e75c78bb6742e"}, "downloads": -1, "filename": "pygempick-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1ec30ddb772287565289d912b59dfd6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23091, "upload_time": "2018-06-07T21:38:11", "upload_time_iso_8601": "2018-06-07T21:38:11.063569Z", "url": "https://files.pythonhosted.org/packages/1b/16/0b636768f53f612cf51d2b55cdc0a4bb569e6eed2f7f3f6c7161d29f3bbd/pygempick-1.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7eb1a660063dc6caf07a0f14422c6c", "sha256": "9bdf31032028c0e3b879a9e87ec898489b7076c76bcacb1745f83b8195736447"}, "downloads": -1, "filename": "pygempick-1.1.6.tar.gz", "has_sig": false, "md5_digest": "3d7eb1a660063dc6caf07a0f14422c6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25536, "upload_time": "2018-06-07T21:38:12", "upload_time_iso_8601": "2018-06-07T21:38:12.417343Z", "url": "https://files.pythonhosted.org/packages/06/1e/1f437169934a3bba7354446ba8beac565cec7d1d508c2541c0bd9ed5c87c/pygempick-1.1.6.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "1990da78fab1f04ef8497951bc73e3c1", "sha256": "1c3c935b49efcaad6356b063aee64b8226ab8503f51b7f301e683c7a070fae06"}, "downloads": -1, "filename": "pygempick-1.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "1990da78fab1f04ef8497951bc73e3c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24079, "upload_time": "2018-06-08T21:41:02", "upload_time_iso_8601": "2018-06-08T21:41:02.070422Z", "url": "https://files.pythonhosted.org/packages/0f/87/6fa800771cd34bd637305ed591783350be21667fb29f57763452b322e612/pygempick-1.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50e1d77a46ca5c05a72015e24eb8cdf8", "sha256": "74fbb71b880738c0751b375164a1ef9322b00f3b57c820c4cbba0f93aab5a7f9"}, "downloads": -1, "filename": "pygempick-1.1.9.tar.gz", "has_sig": false, "md5_digest": "50e1d77a46ca5c05a72015e24eb8cdf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22550, "upload_time": "2018-06-08T21:41:03", "upload_time_iso_8601": "2018-06-08T21:41:03.957107Z", "url": "https://files.pythonhosted.org/packages/40/17/7aaca8f1249b27f6124096b927664714a6b66b314bd24b747e736c1175a1/pygempick-1.1.9.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "82cefc55d95d285c0a099fac5708ba44", "sha256": "88e37c436b777f092662765f68cbf5a011433e90350631c6664452560d6c5ad0"}, "downloads": -1, "filename": "pygempick-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82cefc55d95d285c0a099fac5708ba44", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 24324, "upload_time": "2018-07-19T16:35:19", "upload_time_iso_8601": "2018-07-19T16:35:19.007016Z", "url": "https://files.pythonhosted.org/packages/ce/4c/bc2c4d51e12252a03d6149076502c57a6b72aa0c49c3095358ff3a0990c8/pygempick-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51f586b7f9143e8fafbfb3ac44dbc104", "sha256": "4e4926579db4be65059c6a37be2cb6bfcf4a0ed736ad403f97ccd3f9134e8e97"}, "downloads": -1, "filename": "pygempick-1.2.0.tar.gz", "has_sig": false, "md5_digest": "51f586b7f9143e8fafbfb3ac44dbc104", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22886, "upload_time": "2018-07-19T16:35:02", "upload_time_iso_8601": "2018-07-19T16:35:02.846211Z", "url": "https://files.pythonhosted.org/packages/68/f5/33a7a0844889d10a3b737981a08c65f38b7b4b6ffd436202f97e47be656a/pygempick-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82cefc55d95d285c0a099fac5708ba44", "sha256": "88e37c436b777f092662765f68cbf5a011433e90350631c6664452560d6c5ad0"}, "downloads": -1, "filename": "pygempick-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82cefc55d95d285c0a099fac5708ba44", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 24324, "upload_time": "2018-07-19T16:35:19", "upload_time_iso_8601": "2018-07-19T16:35:19.007016Z", "url": "https://files.pythonhosted.org/packages/ce/4c/bc2c4d51e12252a03d6149076502c57a6b72aa0c49c3095358ff3a0990c8/pygempick-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51f586b7f9143e8fafbfb3ac44dbc104", "sha256": "4e4926579db4be65059c6a37be2cb6bfcf4a0ed736ad403f97ccd3f9134e8e97"}, "downloads": -1, "filename": "pygempick-1.2.0.tar.gz", "has_sig": false, "md5_digest": "51f586b7f9143e8fafbfb3ac44dbc104", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22886, "upload_time": "2018-07-19T16:35:02", "upload_time_iso_8601": "2018-07-19T16:35:02.846211Z", "url": "https://files.pythonhosted.org/packages/68/f5/33a7a0844889d10a3b737981a08c65f38b7b4b6ffd436202f97e47be656a/pygempick-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:11 2020"}