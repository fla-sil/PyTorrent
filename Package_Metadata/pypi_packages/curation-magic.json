{"info": {"author": "Jonathan Laserson", "author_email": "jonil@zebra-med.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Curation Magic\n> Automagically curate test sets based on user given constraints\n\n\nDid you ever need to sub-sample a pool of samples according to a strict set of conditions? Perhaps when designing a test set for an experiment?  This package provides an easy way to sub-sample a dataframe.\n\nThe user provides two dataframes: the first has the sample pool, and the second has queries over these samples, with the specification of the intended amount of samples that should satisfy each query in the curated set.\n\n## Install\n\n`pip install curation_magic`\n\n## Instructions\nOur goal is to curate a subset from a general pool of samples, that will satisfy a list of conditions as close as possible.\n\nThe pool of samples is given in a dataframe, which we'll call *df_samples*, it has one row per sample, and the columns represent all sort of meta data and features of the samples.\n\nLet's see an example:\n\n```python\n# Load dataframe from file.\nimport pandas as pd\n\ndf_samples = pd.read_csv('csvs/curation_pool.csv', \n                         converters={'age':int, 'birad':int})\ndf_samples = df_samples.set_index('study_id')\ndf_samples.sample(7)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>exists</th>\n      <th>data_source</th>\n      <th>age</th>\n      <th>density</th>\n      <th>birad</th>\n      <th>lesion_type</th>\n      <th>largest_mass</th>\n      <th>is_pos</th>\n    </tr>\n    <tr>\n      <th>study_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1036</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>60</td>\n      <td>2</td>\n      <td>0</td>\n      <td>calcification</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>240</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>49</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>16.66</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>740</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>61</td>\n      <td>1</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>15.26</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1241</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>69</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>82</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>11.42</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1432</th>\n      <td>1</td>\n      <td>imh</td>\n      <td>49</td>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>825</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>68</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>25.69</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThe conditions are given in a second dataframe, *df_cond_abs*. \nEach row of *df_cond_abs* is indexed by a *query* that can be applied to the df_samples (i.e. by using df_samples.query(query_string)). For each query the user specifies constraints supplied, regarding how many samples in the curated subset should satisfy the query. The constraints are given as a lower-bound and upper bound (ignore the *index_ref* column).\n\n```python\n# Get absolute numbers constraints \ndf_cond_abs = pd.read_csv('csvs/curation_conditions_abs.csv').set_index('query')\ndf_cond_abs\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>min</th>\n      <th>max</th>\n      <th>index_ref</th>\n    </tr>\n    <tr>\n      <th>query</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>270</td>\n      <td>300</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>110</td>\n      <td>140</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>300</td>\n      <td>320</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>80</td>\n      <td>100</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>30</td>\n      <td>40</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>140</td>\n      <td>180</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>75</td>\n      <td>110</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>200</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>216</td>\n      <td>264</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>176</td>\n      <td>208</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>120</td>\n      <td>160</td>\n      <td>-1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThe function *get_query_features_df* applies all the queries on the *df_samples* dataframe, and we obtain df_bool, a boolean dataframe which has the samples as rows and the queries as columns. *df_bool* indicates which sample matches which query.\n\n```python\ndf_bool = curator.get_query_features_df(df_samples, df_cond_abs.index)\ndf_bool.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>is_pos == \"1\"</th>\n      <th>is_pos == \"0\"</th>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <th>age&lt;50</th>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <th>age&gt;=70</th>\n    </tr>\n    <tr>\n      <th>study_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nWe can use this table to quickly see how many samples in our pool satisfy each query:\n\n```python\ndf_bool.sum()\n```\n\n\n\n\n    is_pos == \"1\"                                                 811\n    is_pos == \"0\"                                                 655\n    data_source == \"optimam\" & is_pos == \"0\"                      301\n    data_source == \"imh\" & is_pos == \"0\"                          354\n    data_source == \"optimam\" & is_pos == \"1\"                      653\n    data_source == \"imh\" & is_pos == \"1\"                          158\n    lesion_type == \"mass\" & is_pos == \"1\"                         556\n    lesion_type == \"calcification\" & is_pos == \"1\"                188\n    birad == \"1\" & is_pos == \"0\"                                  399\n    birad == \"2\" & is_pos == \"0\"                                  195\n    lesion_type == \"mass\" & largest_mass<=10                       58\n    lesion_type == \"mass\" & largest_mass>10 & largest_mass<=20    310\n    lesion_type == \"mass\" & largest_mass>20 & largest_mass<=50    178\n    age<50                                                        256\n    age<60 & age>=50                                              489\n    age<70 & age>=60                                              520\n    age>=70                                                       201\n    dtype: int64\n\n\n\n### Curate a subset using absolute bounds\nLet's use the *AbsBoundariesCurator* to build a curated set that satisfies all the conditions as much as possible:\n\n```python\nabc = curator.AbsBoundariesCurator(df_samples, df_cond_abs)\n\n# Note, we are using here the interior-point solver which is\n# faster but less accurate than the default simplex solver.\nincluded, summary = abc.run(method='interior-point')\n\n# The summary shows how many were included from every query,\n# and the total number of violations.\nsummary\n```\n\n    Theoretical violations: 4.000000001349921\n    included: 799\n    actual violations: 5\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cnt</th>\n      <th>min</th>\n      <th>max</th>\n      <th>violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>399</td>\n      <td>400</td>\n      <td>400</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>400</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>161</td>\n      <td>160</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>239</td>\n      <td>160</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>241</td>\n      <td>160</td>\n      <td>240</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>158</td>\n      <td>160</td>\n      <td>240</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>269</td>\n      <td>270</td>\n      <td>300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>111</td>\n      <td>110</td>\n      <td>140</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>303</td>\n      <td>300</td>\n      <td>320</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>85</td>\n      <td>80</td>\n      <td>100</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>34</td>\n      <td>30</td>\n      <td>40</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>147</td>\n      <td>140</td>\n      <td>180</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>84</td>\n      <td>75</td>\n      <td>110</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>212</td>\n      <td>200</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>249</td>\n      <td>216</td>\n      <td>264</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>198</td>\n      <td>176</td>\n      <td>208</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>140</td>\n      <td>120</td>\n      <td>160</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nAs you can see above, the linear solver had 4 violations, but after we decoded the solution (round the $x_j$ values and decide which samples to include), there were 5 violations in total. The optimal LP target value is always going to be a lower bound on the *integer* progam target.  \n\nOur curated set has 799 members instead of 800, specifically one extra positive. Also, we have one extra positive study from optimam, and 2 too few studies from imh.\n\nNow we can go back to the original samples dataframe, and generate the new set.\n\n\n```python\ndf_subset = df_samples[included]\nprint(len(df_subset))\n```\n\n    799\n\n\n### Curate a subset using relative bounds\n\nThe fact that the condition boundaties are given in absolute integer numbers is actually a limitation:\nSay we are willing to have some flexibility with regard to the number of negatives we curate (i.e. anything in the range 320-480 is fine), but within the chosen set of negatives, we would like at most 25% to be with birad=2. Since we don't know how many negatives we'll turn up with, there is no way to put a tight upper bound (in absolute numbers) on the number of birad=2 samples.\n\nWhat we want is to be able to bound a query relative to the (yet unknown) number of samples that satisfy a previous query.  So an alternative way to provide boundaries is in the form of a *fraction* relative to the resulting set satisfying a different query.\n\n\n```python\n# Get relative fraction constraints\ndf_cond_rel = pd.read_csv('csvs/curation_conditions_rel.csv').set_index('query')\ndf_cond_rel.reset_index()\n\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>query</th>\n      <th>min</th>\n      <th>max</th>\n      <th>index_ref</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>exists == \"1\"</td>\n      <td>800.00</td>\n      <td>800.00</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>data_source == \"optimam\" &amp; is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>data_source == \"imh\" &amp; is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>data_source == \"optimam\" &amp; is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>data_source == \"imh\" &amp; is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>lesion_type == \"mass\" &amp; is_pos == \"1\"</td>\n      <td>0.65</td>\n      <td>0.70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>lesion_type == \"calcification\" &amp; is_pos == \"1\"</td>\n      <td>0.30</td>\n      <td>0.35</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>birad == \"1\" &amp; is_pos == \"0\"</td>\n      <td>0.75</td>\n      <td>0.80</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>birad == \"2\" &amp; is_pos == \"0\"</td>\n      <td>0.20</td>\n      <td>0.25</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&lt;=10</td>\n      <td>0.10</td>\n      <td>0.15</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; larg...</td>\n      <td>0.50</td>\n      <td>0.60</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; larg...</td>\n      <td>0.25</td>\n      <td>0.30</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>age&lt;50</td>\n      <td>0.25</td>\n      <td>0.30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>age&lt;60 &amp; age&gt;=50</td>\n      <td>0.27</td>\n      <td>0.33</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>age&lt;70 &amp; age&gt;=60</td>\n      <td>0.22</td>\n      <td>0.26</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>age&gt;=70</td>\n      <td>0.15</td>\n      <td>0.20</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nHere, in line 10, we ask that the number of samples satisfying the query [*birad == \"2\" & is_pos == \"0\"*] would be at least 20% and no more than 25% of the samples satisfying query 2 [*is_pos == \"0\"*], as indicated by the column *index_ref*. This is how we were able to define a condition relevant to the negative set without knowing how many negative we'll have at the end!\n\nWe still have to ground the solution in some absolute number of desired sample, so we used integer boundaries for the first query above, simply by setting *index_ref=-1* (otherwise the solution is not well defined and the LP solver might not converge).\n\nLet's run the *RelBoundariesCurator* to solve this (here with the simplex method):\n\n```python\ncc = curator.RelBoundariesCurator(df_samples, df_cond_rel)\nincluded, summary = cc.run()\nsummary\n```\n\n    Theoretical violations: 1.7763568394002505e-15\n    included: 800\n    actual violations: 0\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cnt</th>\n      <th>min</th>\n      <th>max</th>\n      <th>violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>exists == \"1\"</th>\n      <td>800</td>\n      <td>800</td>\n      <td>800</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>395</td>\n      <td>320</td>\n      <td>480</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>405</td>\n      <td>320</td>\n      <td>480</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>184</td>\n      <td>162</td>\n      <td>243</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>221</td>\n      <td>162</td>\n      <td>243</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>237</td>\n      <td>158</td>\n      <td>237</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>158</td>\n      <td>158</td>\n      <td>237</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>259</td>\n      <td>257</td>\n      <td>276</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>119</td>\n      <td>118</td>\n      <td>138</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>304</td>\n      <td>304</td>\n      <td>324</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>81</td>\n      <td>81</td>\n      <td>101</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>29</td>\n      <td>26</td>\n      <td>39</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>155</td>\n      <td>130</td>\n      <td>155</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>65</td>\n      <td>65</td>\n      <td>78</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>200</td>\n      <td>200</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>264</td>\n      <td>216</td>\n      <td>264</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>176</td>\n      <td>176</td>\n      <td>208</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>160</td>\n      <td>120</td>\n      <td>160</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nAnd we reached an optimal solution! \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jonilaserson/curation_magic", "keywords": "LP curation", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "curation-magic", "package_url": "https://pypi.org/project/curation-magic/", "platform": "", "project_url": "https://pypi.org/project/curation-magic/", "project_urls": {"Homepage": "https://github.com/jonilaserson/curation_magic"}, "release_url": "https://pypi.org/project/curation-magic/0.0.6/", "requires_dist": null, "requires_python": ">=3.6", "summary": "\"A tool to curate a test set from a set of constraints\"", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Curation Magic</h1>\n<blockquote>\n<p>Automagically curate test sets based on user given constraints</p>\n</blockquote>\n<p>Did you ever need to sub-sample a pool of samples according to a strict set of conditions? Perhaps when designing a test set for an experiment?  This package provides an easy way to sub-sample a dataframe.</p>\n<p>The user provides two dataframes: the first has the sample pool, and the second has queries over these samples, with the specification of the intended amount of samples that should satisfy each query in the curated set.</p>\n<h2>Install</h2>\n<p><code>pip install curation_magic</code></p>\n<h2>Instructions</h2>\n<p>Our goal is to curate a subset from a general pool of samples, that will satisfy a list of conditions as close as possible.</p>\n<p>The pool of samples is given in a dataframe, which we'll call <em>df_samples</em>, it has one row per sample, and the columns represent all sort of meta data and features of the samples.</p>\n<p>Let's see an example:</p>\n<pre><span class=\"c1\"># Load dataframe from file.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df_samples</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'csvs/curation_pool.csv'</span><span class=\"p\">,</span> \n                         <span class=\"n\">converters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'age'</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">'birad'</span><span class=\"p\">:</span><span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"n\">df_samples</span> <span class=\"o\">=</span> <span class=\"n\">df_samples</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'study_id'</span><span class=\"p\">)</span>\n<span class=\"n\">df_samples</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>exists</th>\n      <th>data_source</th>\n      <th>age</th>\n      <th>density</th>\n      <th>birad</th>\n      <th>lesion_type</th>\n      <th>largest_mass</th>\n      <th>is_pos</th>\n    </tr>\n    <tr>\n      <th>study_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1036</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>60</td>\n      <td>2</td>\n      <td>0</td>\n      <td>calcification</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>240</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>49</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>16.66</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>740</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>61</td>\n      <td>1</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>15.26</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1241</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>69</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>145</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>82</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>11.42</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1432</th>\n      <td>1</td>\n      <td>imh</td>\n      <td>49</td>\n      <td>2</td>\n      <td>2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>825</th>\n      <td>1</td>\n      <td>optimam</td>\n      <td>68</td>\n      <td>3</td>\n      <td>0</td>\n      <td>mass</td>\n      <td>25.69</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>The conditions are given in a second dataframe, <em>df_cond_abs</em>.\nEach row of <em>df_cond_abs</em> is indexed by a <em>query</em> that can be applied to the df_samples (i.e. by using df_samples.query(query_string)). For each query the user specifies constraints supplied, regarding how many samples in the curated subset should satisfy the query. The constraints are given as a lower-bound and upper bound (ignore the <em>index_ref</em> column).</p>\n<pre><span class=\"c1\"># Get absolute numbers constraints </span>\n<span class=\"n\">df_cond_abs</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'csvs/curation_conditions_abs.csv'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'query'</span><span class=\"p\">)</span>\n<span class=\"n\">df_cond_abs</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>min</th>\n      <th>max</th>\n      <th>index_ref</th>\n    </tr>\n    <tr>\n      <th>query</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>160</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>270</td>\n      <td>300</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>110</td>\n      <td>140</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>300</td>\n      <td>320</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>80</td>\n      <td>100</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>30</td>\n      <td>40</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>140</td>\n      <td>180</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>75</td>\n      <td>110</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>200</td>\n      <td>240</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>216</td>\n      <td>264</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>176</td>\n      <td>208</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>120</td>\n      <td>160</td>\n      <td>-1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>The function <em>get_query_features_df</em> applies all the queries on the <em>df_samples</em> dataframe, and we obtain df_bool, a boolean dataframe which has the samples as rows and the queries as columns. <em>df_bool</em> indicates which sample matches which query.</p>\n<pre><span class=\"n\">df_bool</span> <span class=\"o\">=</span> <span class=\"n\">curator</span><span class=\"o\">.</span><span class=\"n\">get_query_features_df</span><span class=\"p\">(</span><span class=\"n\">df_samples</span><span class=\"p\">,</span> <span class=\"n\">df_cond_abs</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"n\">df_bool</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>is_pos == \"1\"</th>\n      <th>is_pos == \"0\"</th>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <th>age&lt;50</th>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <th>age&gt;=70</th>\n    </tr>\n    <tr>\n      <th>study_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>We can use this table to quickly see how many samples in our pool satisfy each query:</p>\n<pre><span class=\"n\">df_bool</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n</pre>\n<pre><code>is_pos == \"1\"                                                 811\nis_pos == \"0\"                                                 655\ndata_source == \"optimam\" &amp; is_pos == \"0\"                      301\ndata_source == \"imh\" &amp; is_pos == \"0\"                          354\ndata_source == \"optimam\" &amp; is_pos == \"1\"                      653\ndata_source == \"imh\" &amp; is_pos == \"1\"                          158\nlesion_type == \"mass\" &amp; is_pos == \"1\"                         556\nlesion_type == \"calcification\" &amp; is_pos == \"1\"                188\nbirad == \"1\" &amp; is_pos == \"0\"                                  399\nbirad == \"2\" &amp; is_pos == \"0\"                                  195\nlesion_type == \"mass\" &amp; largest_mass&lt;=10                       58\nlesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20    310\nlesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50    178\nage&lt;50                                                        256\nage&lt;60 &amp; age&gt;=50                                              489\nage&lt;70 &amp; age&gt;=60                                              520\nage&gt;=70                                                       201\ndtype: int64\n</code></pre>\n<h3>Curate a subset using absolute bounds</h3>\n<p>Let's use the <em>AbsBoundariesCurator</em> to build a curated set that satisfies all the conditions as much as possible:</p>\n<pre><span class=\"n\">abc</span> <span class=\"o\">=</span> <span class=\"n\">curator</span><span class=\"o\">.</span><span class=\"n\">AbsBoundariesCurator</span><span class=\"p\">(</span><span class=\"n\">df_samples</span><span class=\"p\">,</span> <span class=\"n\">df_cond_abs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Note, we are using here the interior-point solver which is</span>\n<span class=\"c1\"># faster but less accurate than the default simplex solver.</span>\n<span class=\"n\">included</span><span class=\"p\">,</span> <span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'interior-point'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The summary shows how many were included from every query,</span>\n<span class=\"c1\"># and the total number of violations.</span>\n<span class=\"n\">summary</span>\n</pre>\n<pre><code>Theoretical violations: 4.000000001349921\nincluded: 799\nactual violations: 5\n</code></pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>cnt</th>\n      <th>min</th>\n      <th>max</th>\n      <th>violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>399</td>\n      <td>400</td>\n      <td>400</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>400</td>\n      <td>400</td>\n      <td>400</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>161</td>\n      <td>160</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>239</td>\n      <td>160</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>241</td>\n      <td>160</td>\n      <td>240</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>158</td>\n      <td>160</td>\n      <td>240</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>269</td>\n      <td>270</td>\n      <td>300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>111</td>\n      <td>110</td>\n      <td>140</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>303</td>\n      <td>300</td>\n      <td>320</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>85</td>\n      <td>80</td>\n      <td>100</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>34</td>\n      <td>30</td>\n      <td>40</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>147</td>\n      <td>140</td>\n      <td>180</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>84</td>\n      <td>75</td>\n      <td>110</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>212</td>\n      <td>200</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>249</td>\n      <td>216</td>\n      <td>264</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>198</td>\n      <td>176</td>\n      <td>208</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>140</td>\n      <td>120</td>\n      <td>160</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>As you can see above, the linear solver had 4 violations, but after we decoded the solution (round the $x_j$ values and decide which samples to include), there were 5 violations in total. The optimal LP target value is always going to be a lower bound on the <em>integer</em> progam target.</p>\n<p>Our curated set has 799 members instead of 800, specifically one extra positive. Also, we have one extra positive study from optimam, and 2 too few studies from imh.</p>\n<p>Now we can go back to the original samples dataframe, and generate the new set.</p>\n<pre><span class=\"n\">df_subset</span> <span class=\"o\">=</span> <span class=\"n\">df_samples</span><span class=\"p\">[</span><span class=\"n\">included</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df_subset</span><span class=\"p\">))</span>\n</pre>\n<pre><code>799\n</code></pre>\n<h3>Curate a subset using relative bounds</h3>\n<p>The fact that the condition boundaties are given in absolute integer numbers is actually a limitation:\nSay we are willing to have some flexibility with regard to the number of negatives we curate (i.e. anything in the range 320-480 is fine), but within the chosen set of negatives, we would like at most 25% to be with birad=2. Since we don't know how many negatives we'll turn up with, there is no way to put a tight upper bound (in absolute numbers) on the number of birad=2 samples.</p>\n<p>What we want is to be able to bound a query relative to the (yet unknown) number of samples that satisfy a previous query.  So an alternative way to provide boundaries is in the form of a <em>fraction</em> relative to the resulting set satisfying a different query.</p>\n<pre><span class=\"c1\"># Get relative fraction constraints</span>\n<span class=\"n\">df_cond_rel</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'csvs/curation_conditions_rel.csv'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">'query'</span><span class=\"p\">)</span>\n<span class=\"n\">df_cond_rel</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n</pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>query</th>\n      <th>min</th>\n      <th>max</th>\n      <th>index_ref</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>exists == \"1\"</td>\n      <td>800.00</td>\n      <td>800.00</td>\n      <td>-1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>data_source == \"optimam\" &amp; is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>data_source == \"imh\" &amp; is_pos == \"0\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>data_source == \"optimam\" &amp; is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>data_source == \"imh\" &amp; is_pos == \"1\"</td>\n      <td>0.40</td>\n      <td>0.60</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>lesion_type == \"mass\" &amp; is_pos == \"1\"</td>\n      <td>0.65</td>\n      <td>0.70</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>lesion_type == \"calcification\" &amp; is_pos == \"1\"</td>\n      <td>0.30</td>\n      <td>0.35</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>birad == \"1\" &amp; is_pos == \"0\"</td>\n      <td>0.75</td>\n      <td>0.80</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>birad == \"2\" &amp; is_pos == \"0\"</td>\n      <td>0.20</td>\n      <td>0.25</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&lt;=10</td>\n      <td>0.10</td>\n      <td>0.15</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; larg...</td>\n      <td>0.50</td>\n      <td>0.60</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; larg...</td>\n      <td>0.25</td>\n      <td>0.30</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>age&lt;50</td>\n      <td>0.25</td>\n      <td>0.30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>age&lt;60 &amp; age&gt;=50</td>\n      <td>0.27</td>\n      <td>0.33</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>age&lt;70 &amp; age&gt;=60</td>\n      <td>0.22</td>\n      <td>0.26</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>age&gt;=70</td>\n      <td>0.15</td>\n      <td>0.20</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>Here, in line 10, we ask that the number of samples satisfying the query [<em>birad == \"2\" &amp; is_pos == \"0\"</em>] would be at least 20% and no more than 25% of the samples satisfying query 2 [<em>is_pos == \"0\"</em>], as indicated by the column <em>index_ref</em>. This is how we were able to define a condition relevant to the negative set without knowing how many negative we'll have at the end!</p>\n<p>We still have to ground the solution in some absolute number of desired sample, so we used integer boundaries for the first query above, simply by setting <em>index_ref=-1</em> (otherwise the solution is not well defined and the LP solver might not converge).</p>\n<p>Let's run the <em>RelBoundariesCurator</em> to solve this (here with the simplex method):</p>\n<pre><span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">curator</span><span class=\"o\">.</span><span class=\"n\">RelBoundariesCurator</span><span class=\"p\">(</span><span class=\"n\">df_samples</span><span class=\"p\">,</span> <span class=\"n\">df_cond_rel</span><span class=\"p\">)</span>\n<span class=\"n\">included</span><span class=\"p\">,</span> <span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"n\">summary</span>\n</pre>\n<pre><code>Theoretical violations: 1.7763568394002505e-15\nincluded: 800\nactual violations: 0\n</code></pre>\n<div>\n&lt;style scoped&gt;\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<pre><code>.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n</code></pre>\n&lt;/style&gt;\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>cnt</th>\n      <th>min</th>\n      <th>max</th>\n      <th>violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>exists == \"1\"</th>\n      <td>800</td>\n      <td>800</td>\n      <td>800</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"1\"</th>\n      <td>395</td>\n      <td>320</td>\n      <td>480</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>is_pos == \"0\"</th>\n      <td>405</td>\n      <td>320</td>\n      <td>480</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"0\"</th>\n      <td>184</td>\n      <td>162</td>\n      <td>243</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"0\"</th>\n      <td>221</td>\n      <td>162</td>\n      <td>243</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"optimam\" &amp; is_pos == \"1\"</th>\n      <td>237</td>\n      <td>158</td>\n      <td>237</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>data_source == \"imh\" &amp; is_pos == \"1\"</th>\n      <td>158</td>\n      <td>158</td>\n      <td>237</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; is_pos == \"1\"</th>\n      <td>259</td>\n      <td>257</td>\n      <td>276</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"calcification\" &amp; is_pos == \"1\"</th>\n      <td>119</td>\n      <td>118</td>\n      <td>138</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"1\" &amp; is_pos == \"0\"</th>\n      <td>304</td>\n      <td>304</td>\n      <td>324</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>birad == \"2\" &amp; is_pos == \"0\"</th>\n      <td>81</td>\n      <td>81</td>\n      <td>101</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&lt;=10</th>\n      <td>29</td>\n      <td>26</td>\n      <td>39</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;10 &amp; largest_mass&lt;=20</th>\n      <td>155</td>\n      <td>130</td>\n      <td>155</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>lesion_type == \"mass\" &amp; largest_mass&gt;20 &amp; largest_mass&lt;=50</th>\n      <td>65</td>\n      <td>65</td>\n      <td>78</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;50</th>\n      <td>200</td>\n      <td>200</td>\n      <td>240</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;60 &amp; age&gt;=50</th>\n      <td>264</td>\n      <td>216</td>\n      <td>264</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&lt;70 &amp; age&gt;=60</th>\n      <td>176</td>\n      <td>176</td>\n      <td>208</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>age&gt;=70</th>\n      <td>160</td>\n      <td>120</td>\n      <td>160</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<p>And we reached an optimal solution!</p>\n\n          </div>"}, "last_serial": 6933977, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "0e1ef3dc8d219f4b627078b59a2c0f65", "sha256": "ff78706b91f162de198530cd120f99eee327744aafea422acea1eafc9fbba232"}, "downloads": -1, "filename": "curation_magic-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1ef3dc8d219f4b627078b59a2c0f65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13070, "upload_time": "2020-03-31T11:02:12", "upload_time_iso_8601": "2020-03-31T11:02:12.339562Z", "url": "https://files.pythonhosted.org/packages/3a/9a/a17102c07272d8631917dea2638d34e498bb8ec5857493d0047fc68d1946/curation_magic-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bc66746cd417a4527c3c324d80058f0", "sha256": "974e02eb33796c384bbb97ffcddbce14af7c85586f8e9b61406c1c61f11167f7"}, "downloads": -1, "filename": "curation_magic-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1bc66746cd417a4527c3c324d80058f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18651, "upload_time": "2020-03-31T11:02:15", "upload_time_iso_8601": "2020-03-31T11:02:15.178456Z", "url": "https://files.pythonhosted.org/packages/e0/8d/b7a5ce7174109f867a4490b9e3b9991b22ea460cf3b824bf10a619e95f63/curation_magic-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4a02a6921c80d5a62757d583d1b32965", "sha256": "d9f711709620c011e78eb08d408c88d5609671101bdf3225eebaf862c29562a0"}, "downloads": -1, "filename": "curation_magic-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4a02a6921c80d5a62757d583d1b32965", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13509, "upload_time": "2020-03-31T17:30:08", "upload_time_iso_8601": "2020-03-31T17:30:08.331342Z", "url": "https://files.pythonhosted.org/packages/40/c7/6684343ec03484bfaa410b6894aec27b92f44bbb903fefe06ee02b8e863b/curation_magic-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a010a950104eea9b5a61fe68196e383", "sha256": "77d0c6f62c3b985df8ea4fe10aa2a7f60dbf3cc7d8f1d02c1916544e98a5b389"}, "downloads": -1, "filename": "curation_magic-0.0.5.tar.gz", "has_sig": false, "md5_digest": "3a010a950104eea9b5a61fe68196e383", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20320, "upload_time": "2020-03-31T17:30:10", "upload_time_iso_8601": "2020-03-31T17:30:10.101056Z", "url": "https://files.pythonhosted.org/packages/6c/e2/69d812606309a8c5b4679c092d11c5681f2a1b235b5bbb33634bc9d127d1/curation_magic-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "76ae0be6b376b077e067c904f4ff9d7d", "sha256": "0336cd0080fc6a2b3fb93ffff8d803efd3560a955d4b7902cef8a446620034b6"}, "downloads": -1, "filename": "curation_magic-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "76ae0be6b376b077e067c904f4ff9d7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13525, "upload_time": "2020-04-02T08:21:10", "upload_time_iso_8601": "2020-04-02T08:21:10.436031Z", "url": "https://files.pythonhosted.org/packages/26/2f/6c6e167c060b0cc3fcb6f8e85832352ccf1e19809369ab71ca725b71a950/curation_magic-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3907cd5abf5405cfd3ef399252fdae53", "sha256": "91c1dbc28239a0df7679ae8644ff8e7d3970ea800569ce043ce986332fb83450"}, "downloads": -1, "filename": "curation_magic-0.0.6.tar.gz", "has_sig": false, "md5_digest": "3907cd5abf5405cfd3ef399252fdae53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20244, "upload_time": "2020-04-02T08:21:12", "upload_time_iso_8601": "2020-04-02T08:21:12.604274Z", "url": "https://files.pythonhosted.org/packages/ac/0a/d8ab602e066e7e7b441767f1930da727ebc48327bc2d46243b1dd859787c/curation_magic-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76ae0be6b376b077e067c904f4ff9d7d", "sha256": "0336cd0080fc6a2b3fb93ffff8d803efd3560a955d4b7902cef8a446620034b6"}, "downloads": -1, "filename": "curation_magic-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "76ae0be6b376b077e067c904f4ff9d7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13525, "upload_time": "2020-04-02T08:21:10", "upload_time_iso_8601": "2020-04-02T08:21:10.436031Z", "url": "https://files.pythonhosted.org/packages/26/2f/6c6e167c060b0cc3fcb6f8e85832352ccf1e19809369ab71ca725b71a950/curation_magic-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3907cd5abf5405cfd3ef399252fdae53", "sha256": "91c1dbc28239a0df7679ae8644ff8e7d3970ea800569ce043ce986332fb83450"}, "downloads": -1, "filename": "curation_magic-0.0.6.tar.gz", "has_sig": false, "md5_digest": "3907cd5abf5405cfd3ef399252fdae53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20244, "upload_time": "2020-04-02T08:21:12", "upload_time_iso_8601": "2020-04-02T08:21:12.604274Z", "url": "https://files.pythonhosted.org/packages/ac/0a/d8ab602e066e7e7b441767f1930da727ebc48327bc2d46243b1dd859787c/curation_magic-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:22 2020"}