{"info": {"author": "Roy Wright", "author_email": "roy@wright.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development"], "description": "Versio\n======\n\nLatin\n\n    Noun\n    1. a turning, change, version\n\n\nVersio is a generic version class that supports comparison and version bumping (incrementing by part, for example\nyou may bump the minor part of '1.2.3' yielding '1.3.0').\n\nFour version schemes are included:\n\n    * **Simple3VersionScheme** which supports 3 numerical part versions (A.B.C where A, B, and C are integers)\n    * **Simple4VersionScheme** which supports 4 numerical part versions (A.B.C.D where A, B, C, and D are integers)\n    * **Pep440VersionScheme** which supports PEP 440 (http://www.python.org/dev/peps/pep-0440/) versions\n      (N[.N]+[{a|b|c|rc}N][.postN][.devN][+local])\n    * **PerlVersionScheme** which supports 2 numerical part versions where the second part is at least two digits\n      (A.BB where A and B are integers and B is zero padded on the left.  For example:  1.02, 1.34, 1.567)\n\nIf you don't specify which version scheme the version instance uses, then it will use the first scheme from the\n**SupportedVersionSchemes** list that successfully parses the version string\n\nBy default, **Pep440VersionScheme** is the supported scheme.  To change to a different list of schemes, use the\n**Version.set_supported_version_schemes(schemes)**.  For example::\n\n    from versio.version_scheme import Simple3VersionScheme, PerlVersionScheme\n    Version.set_supported_version_schemes([Simple3VersionScheme, PerlVersionScheme])\n\nIn addition, you may define your own version scheme by creating a new VersionScheme instance.\n\nThe VersionScheme class defines the version scheme.\n\nA version scheme consists of:\n\n    * a name,\n    * a regular expression used to parse the version string,\n    * the regular expression flags to use (mainly to allow verbose regexes),\n    * a format string used to reassemble the parsed version into a string,\n    * an optional list of field types (if not specified, assumes all fields are strings),\n    * a list of field names used for accessing the components of the version.\n    * an optional subfield dictionary with the key being a field name and the value being a list of sub field names.\n      For example, in the **Pep440VersionScheme**, the \"Release\" field may contain multiple parts, so we use\n      subfield names for the parts.  Say we have a version of \"1.2.3rc1\", the \"1.2.3\" is the release field, then\n      \"1\" is the \"major\" subfield, \"2\" is the \"minor\" subfield, and \"3\" is the \"tiny\" subfield.\n    * a \"clear\" value used to set the field values to the right of the field being bumped,\n    * a sequence dictionary where the keys are the field names and the values are a list of allowed values.\n      The list must be in bump order.  Bumping the last value in the list has no effect.\n\nNote, you need to manually maintain consistency between the regular expression,\nthe format string, the optional field types, and the fields list.  For example,\nif your version scheme has N parts, then the regular expression should match\ninto N groups, the format string should expect N arguments to the str.format()\nmethod, and there must be N unique names in the fields list.\n\nInstallation\n============\n\nFrom pypi::\n\n    pip install Versio\n\n\nUsage\n=====\n\nFirst let's just play with the comparing and bumping versions::\n\n    >>> from versio.version import Version\n    >>> from versio.version_scheme import Pep440VersionScheme\n    >>> v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n    >>> v2 = Version('1.2.3rc4.post5.dev7', scheme=Pep440VersionScheme)\n    >>> v1 == v2\n    False\n    >>> v1 < v2\n    True\n    >>> v1.bump('dev')\n    True\n    >>> str(v1)\n    '1.2.3rc4.post5.dev7'\n    >>> v1 == v2\n    True\n    >>> v1.bump('pre')\n    True\n\nNow let's look in the PEP 440 scheme::\n\n    >>> Pep440VersionScheme.fields\n    ['release', 'pre', 'post', 'dev', 'local']\n    >>> Pep440VersionScheme.format_str\n    '{0}{1}{2}{3}{4}'\n\nThe fields are used by the **bump(field)** method in the above example.  We skipped bumping the release above so let's\ndo it here::\n\n    >>> v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n    >>> str(v1)\n    '1.2.3rc4.post5.dev6'\n    >>> v1.bump('release')\n    True\n    >>> str(v1)\n    '1.2.4'\n\nFor PEP 440, the release part is defined as \"N[.N]+\".  We can bump specific parts of the release by using an\nindex like::\n\n    >>> v1.bump('release', 2)\n    True\n    >>> str(v1)\n    '1.2.5'\n    >>> v1.bump('release', 1)\n    True\n    >>> str(v1)\n    '1.3.0'\n    >>> v1.bump('release', 0)\n    True\n    >>> str(v1)\n    '2.0.0'\n\nTo use a name directly, we use the concept of subfields which are mapped to a field/index pair::\n\n    >>> Pep440VersionScheme.subfields\n    {'tiny2': ['Release', 3], 'major': ['Release', 0], 'tiny': ['Release', 2], 'minor': ['Release', 1]}\n\n    >>> v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n    >>> str(v1)\n    '1.2.3rc4.post5.dev6'\n    >>> v1.bump('tiny')\n    True\n    >>> str(v1)\n    '1.2.4'\n    >>> v1.bump('minor')\n    True\n    >>> str(v1)\n    '1.3.0'\n    >>> v1.bump('major')\n    True\n    >>> str(v1)\n    '2.0.0'\n\nNow that you've seen the version scheme in action, let's take a look at how it is defined::\n\n    Pep440VersionScheme = VersionScheme(name=\"pep440\",\n                                        parse_regex=r\"\"\"\n                                        ^\n                                        (\\d[\\.\\d]*(?<= \\d))\n                                        ((?:[abc]|rc)\\d+)?\n                                        (?:(\\.post\\d+))?\n                                        (?:(\\.dev\\d+))?\n                                        (?:(\\+(?![.])[a-zA-Z0-9\\.]*[a-zA-Z0-9]))?\n                                        $\n                                        \"\"\",\n                                        compare_order=[0, 1, 2, 3, 4],\n                                        compare_fill=['~', '~', '', '~', ''],\n                                        parse_flags=re.VERBOSE,\n                                        clear_value=None,\n                                        format_str='{0}{1}{2}{3}{4}',\n                                        fields=['Release', 'Pre', 'Post', 'Dev', 'Local'],\n                                        subfields={'Release': ['Major', 'Minor', 'Tiny', 'Tiny2']},\n                                        sequences={'Pre': ['a', 'b', 'c', 'rc'],\n                                                   'Post': ['.post'],\n                                                   'Dev': ['.dev'],\n                                                   'Local': ['+']},\n                                        description=dedent(\"\"\"\\\n                                            PEP 440\n                                            Public version identifiers MUST comply with the following scheme:\n\n                                            N[.N]+[{a|b|c|rc}N][.postN][.devN][+local]\n\n                                            Public version identifiers MUST NOT include leading or trailing whitespace.\n\n                                            Public version identifiers MUST be unique within a given distribution.\n\n                                            Public version identifiers are separated into up to five segments:\n\n                                                Release segment: N[.N]+\n                                                Pre-release segment: {a|b|c|rc}N\n                                                Post-release segment: .postN\n                                                Development release segment: .devN\n                                                Local release segment: +local\n\n                                            The local version labels MUST be limited to the following set of permitted\n                                            characters:\n\n                                                ASCII letters ( [a-zA-Z] )\n                                                ASCII digits ( [0-9] )\n                                                periods ( . )\n\n                                            Local version labels MUST start and end with an ASCII letter or digit.\n                                        \"\"\"))\n\nThe **parse_regex** and **parse_flags** do what you think by parsing a string into a list containing regex groups,\nexcept the group list is zero indexed to the first matching group.\n\nThe **format_str** and **format_types** control how the version is converted to a string in **__str__()**.  Basically\n**format_str.format(*args)** is called where the args is a list built by casting each of the version's groups using\nthe corresponding type from the  **format_types** list.  If you don't specify a **format_types**, then each group\nis cast as a str.\n\nThe **clear_value** typically should be '0' for numeric versions and None for non-numeric.  Basically it specifies\nwhat to put in the groups to the right of the group being bumped.\n\nThe **sequences** dictionary maps text to prepend to a group when formatting.  The dictionary keys must be in the\n**fields** list.  To progress thru the sequence, bump the field with an index of 0.  An index of 1 bumps the numeric\npart of the group.  For example::\n\n    >>> v1 = Version('1.2.3a4.post5.dev6', scheme=Pep440VersionScheme)\n    >>> str(v1)\n    '1.2.3a4.post5.dev6'\n    >>> v1.bump('pre', 0)\n    True\n    >>> str(v1)\n    '1.2.3b1'\n    >>> v1.bump('pre', 1)\n    True\n    >>> str(v1)\n    '1.2.3b2'\n    >>> v1.bump('pre', 0)\n    True\n    >>> str(v1)\n    '1.2.3c1'\n    >>> v1.bump('pre', 0)\n    True\n    >>> str(v1)\n    '1.2.3rc1'\n    >>> v1.bump('pre', 0)\n    False\n    >>> str(v1)\n    '1.2.3rc1'\n\nNotice that bumping fails at the end of the sequence and the version is not changed.  You can override this behavior\nby setting the promote argument to True, resulting in the field being removed at the end of the field's sequence.\nFor example:\n\n\n    >>> v1 = Version('1.2.3rc1', scheme=Pep440VersionScheme)\n    >>> str(v1)\n    '1.2.3rc1'\n    >>> v1.bump('pre', 0)\n    False\n    >>> str(v1)\n    '1.2.3rc1'\n    >>> v1.bump('pre', 0, promote=True)\n    True\n    >>> str(v1)\n    '1.2.3'\n\nThat's it.\n\nThere are more examples in *tests/version_test.py*.  You may test directly with *py.test* or against multiple\npython versions with *tox*.\n\nEnjoy!", "description_content_type": "", "docs_url": "https://pythonhosted.org/Versio/", "download_url": "https://github.com/royw/Versio/archive/versio-0.4.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/royw/Versio", "keywords": "version,PEP 440", "license": "license.txt", "maintainer": "", "maintainer_email": "", "name": "Versio", "package_url": "https://pypi.org/project/Versio/", "platform": "", "project_url": "https://pypi.org/project/Versio/", "project_urls": {"Download": "https://github.com/royw/Versio/archive/versio-0.4.0.tar.gz", "Homepage": "https://github.com/royw/Versio"}, "release_url": "https://pypi.org/project/Versio/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Version manipulation library.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"versio\">\n<h2>Versio</h2>\n<p>Latin</p>\n<blockquote>\nNoun\n1. a turning, change, version</blockquote>\n<p>Versio is a generic version class that supports comparison and version bumping (incrementing by part, for example\nyou may bump the minor part of \u20181.2.3\u2019 yielding \u20181.3.0\u2019).</p>\n<p>Four version schemes are included:</p>\n<blockquote>\n<ul>\n<li><strong>Simple3VersionScheme</strong> which supports 3 numerical part versions (A.B.C where A, B, and C are integers)</li>\n<li><strong>Simple4VersionScheme</strong> which supports 4 numerical part versions (A.B.C.D where A, B, C, and D are integers)</li>\n<li><strong>Pep440VersionScheme</strong> which supports PEP 440 (<a href=\"http://www.python.org/dev/peps/pep-0440/\" rel=\"nofollow\">http://www.python.org/dev/peps/pep-0440/</a>) versions\n(N[.N]+[{a|b|c|rc}N][.postN][.devN][+local])</li>\n<li><strong>PerlVersionScheme</strong> which supports 2 numerical part versions where the second part is at least two digits\n(A.BB where A and B are integers and B is zero padded on the left.  For example:  1.02, 1.34, 1.567)</li>\n</ul>\n</blockquote>\n<p>If you don\u2019t specify which version scheme the version instance uses, then it will use the first scheme from the\n<strong>SupportedVersionSchemes</strong> list that successfully parses the version string</p>\n<p>By default, <strong>Pep440VersionScheme</strong> is the supported scheme.  To change to a different list of schemes, use the\n<strong>Version.set_supported_version_schemes(schemes)</strong>.  For example:</p>\n<pre>from versio.version_scheme import Simple3VersionScheme, PerlVersionScheme\nVersion.set_supported_version_schemes([Simple3VersionScheme, PerlVersionScheme])\n</pre>\n<p>In addition, you may define your own version scheme by creating a new VersionScheme instance.</p>\n<p>The VersionScheme class defines the version scheme.</p>\n<p>A version scheme consists of:</p>\n<blockquote>\n<ul>\n<li>a name,</li>\n<li>a regular expression used to parse the version string,</li>\n<li>the regular expression flags to use (mainly to allow verbose regexes),</li>\n<li>a format string used to reassemble the parsed version into a string,</li>\n<li>an optional list of field types (if not specified, assumes all fields are strings),</li>\n<li>a list of field names used for accessing the components of the version.</li>\n<li>an optional subfield dictionary with the key being a field name and the value being a list of sub field names.\nFor example, in the <strong>Pep440VersionScheme</strong>, the \u201cRelease\u201d field may contain multiple parts, so we use\nsubfield names for the parts.  Say we have a version of \u201c1.2.3rc1\u201d, the \u201c1.2.3\u201d is the release field, then\n\u201c1\u201d is the \u201cmajor\u201d subfield, \u201c2\u201d is the \u201cminor\u201d subfield, and \u201c3\u201d is the \u201ctiny\u201d subfield.</li>\n<li>a \u201cclear\u201d value used to set the field values to the right of the field being bumped,</li>\n<li>a sequence dictionary where the keys are the field names and the values are a list of allowed values.\nThe list must be in bump order.  Bumping the last value in the list has no effect.</li>\n</ul>\n</blockquote>\n<p>Note, you need to manually maintain consistency between the regular expression,\nthe format string, the optional field types, and the fields list.  For example,\nif your version scheme has N parts, then the regular expression should match\ninto N groups, the format string should expect N arguments to the str.format()\nmethod, and there must be N unique names in the fields list.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From pypi:</p>\n<pre>pip install Versio\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First let\u2019s just play with the comparing and bumping versions:</p>\n<pre>&gt;&gt;&gt; from versio.version import Version\n&gt;&gt;&gt; from versio.version_scheme import Pep440VersionScheme\n&gt;&gt;&gt; v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; v2 = Version('1.2.3rc4.post5.dev7', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; v1 == v2\nFalse\n&gt;&gt;&gt; v1 &lt; v2\nTrue\n&gt;&gt;&gt; v1.bump('dev')\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3rc4.post5.dev7'\n&gt;&gt;&gt; v1 == v2\nTrue\n&gt;&gt;&gt; v1.bump('pre')\nTrue\n</pre>\n<p>Now let\u2019s look in the PEP 440 scheme:</p>\n<pre>&gt;&gt;&gt; Pep440VersionScheme.fields\n['release', 'pre', 'post', 'dev', 'local']\n&gt;&gt;&gt; Pep440VersionScheme.format_str\n'{0}{1}{2}{3}{4}'\n</pre>\n<p>The fields are used by the <strong>bump(field)</strong> method in the above example.  We skipped bumping the release above so let\u2019s\ndo it here:</p>\n<pre>&gt;&gt;&gt; v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; str(v1)\n'1.2.3rc4.post5.dev6'\n&gt;&gt;&gt; v1.bump('release')\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.4'\n</pre>\n<p>For PEP 440, the release part is defined as \u201cN[.N]+\u201d.  We can bump specific parts of the release by using an\nindex like:</p>\n<pre>&gt;&gt;&gt; v1.bump('release', 2)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.5'\n&gt;&gt;&gt; v1.bump('release', 1)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.3.0'\n&gt;&gt;&gt; v1.bump('release', 0)\nTrue\n&gt;&gt;&gt; str(v1)\n'2.0.0'\n</pre>\n<p>To use a name directly, we use the concept of subfields which are mapped to a field/index pair:</p>\n<pre>&gt;&gt;&gt; Pep440VersionScheme.subfields\n{'tiny2': ['Release', 3], 'major': ['Release', 0], 'tiny': ['Release', 2], 'minor': ['Release', 1]}\n\n&gt;&gt;&gt; v1 = Version('1.2.3rc4.post5.dev6', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; str(v1)\n'1.2.3rc4.post5.dev6'\n&gt;&gt;&gt; v1.bump('tiny')\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.4'\n&gt;&gt;&gt; v1.bump('minor')\nTrue\n&gt;&gt;&gt; str(v1)\n'1.3.0'\n&gt;&gt;&gt; v1.bump('major')\nTrue\n&gt;&gt;&gt; str(v1)\n'2.0.0'\n</pre>\n<p>Now that you\u2019ve seen the version scheme in action, let\u2019s take a look at how it is defined:</p>\n<pre>Pep440VersionScheme = VersionScheme(name=\"pep440\",\n                                    parse_regex=r\"\"\"\n                                    ^\n                                    (\\d[\\.\\d]*(?&lt;= \\d))\n                                    ((?:[abc]|rc)\\d+)?\n                                    (?:(\\.post\\d+))?\n                                    (?:(\\.dev\\d+))?\n                                    (?:(\\+(?![.])[a-zA-Z0-9\\.]*[a-zA-Z0-9]))?\n                                    $\n                                    \"\"\",\n                                    compare_order=[0, 1, 2, 3, 4],\n                                    compare_fill=['~', '~', '', '~', ''],\n                                    parse_flags=re.VERBOSE,\n                                    clear_value=None,\n                                    format_str='{0}{1}{2}{3}{4}',\n                                    fields=['Release', 'Pre', 'Post', 'Dev', 'Local'],\n                                    subfields={'Release': ['Major', 'Minor', 'Tiny', 'Tiny2']},\n                                    sequences={'Pre': ['a', 'b', 'c', 'rc'],\n                                               'Post': ['.post'],\n                                               'Dev': ['.dev'],\n                                               'Local': ['+']},\n                                    description=dedent(\"\"\"\\\n                                        PEP 440\n                                        Public version identifiers MUST comply with the following scheme:\n\n                                        N[.N]+[{a|b|c|rc}N][.postN][.devN][+local]\n\n                                        Public version identifiers MUST NOT include leading or trailing whitespace.\n\n                                        Public version identifiers MUST be unique within a given distribution.\n\n                                        Public version identifiers are separated into up to five segments:\n\n                                            Release segment: N[.N]+\n                                            Pre-release segment: {a|b|c|rc}N\n                                            Post-release segment: .postN\n                                            Development release segment: .devN\n                                            Local release segment: +local\n\n                                        The local version labels MUST be limited to the following set of permitted\n                                        characters:\n\n                                            ASCII letters ( [a-zA-Z] )\n                                            ASCII digits ( [0-9] )\n                                            periods ( . )\n\n                                        Local version labels MUST start and end with an ASCII letter or digit.\n                                    \"\"\"))\n</pre>\n<p>The <strong>parse_regex</strong> and <strong>parse_flags</strong> do what you think by parsing a string into a list containing regex groups,\nexcept the group list is zero indexed to the first matching group.</p>\n<p>The <strong>format_str</strong> and <strong>format_types</strong> control how the version is converted to a string in <strong>__str__()</strong>.  Basically\n<strong>format_str.format(*args)</strong> is called where the args is a list built by casting each of the version\u2019s groups using\nthe corresponding type from the  <strong>format_types</strong> list.  If you don\u2019t specify a <strong>format_types</strong>, then each group\nis cast as a str.</p>\n<p>The <strong>clear_value</strong> typically should be \u20180\u2019 for numeric versions and None for non-numeric.  Basically it specifies\nwhat to put in the groups to the right of the group being bumped.</p>\n<p>The <strong>sequences</strong> dictionary maps text to prepend to a group when formatting.  The dictionary keys must be in the\n<strong>fields</strong> list.  To progress thru the sequence, bump the field with an index of 0.  An index of 1 bumps the numeric\npart of the group.  For example:</p>\n<pre>&gt;&gt;&gt; v1 = Version('1.2.3a4.post5.dev6', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; str(v1)\n'1.2.3a4.post5.dev6'\n&gt;&gt;&gt; v1.bump('pre', 0)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3b1'\n&gt;&gt;&gt; v1.bump('pre', 1)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3b2'\n&gt;&gt;&gt; v1.bump('pre', 0)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3c1'\n&gt;&gt;&gt; v1.bump('pre', 0)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3rc1'\n&gt;&gt;&gt; v1.bump('pre', 0)\nFalse\n&gt;&gt;&gt; str(v1)\n'1.2.3rc1'\n</pre>\n<p>Notice that bumping fails at the end of the sequence and the version is not changed.  You can override this behavior\nby setting the promote argument to True, resulting in the field being removed at the end of the field\u2019s sequence.\nFor example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; v1 = Version('1.2.3rc1', scheme=Pep440VersionScheme)\n&gt;&gt;&gt; str(v1)\n'1.2.3rc1'\n&gt;&gt;&gt; v1.bump('pre', 0)\nFalse\n&gt;&gt;&gt; str(v1)\n'1.2.3rc1'\n&gt;&gt;&gt; v1.bump('pre', 0, promote=True)\nTrue\n&gt;&gt;&gt; str(v1)\n'1.2.3'\n</pre>\n</blockquote>\n<p>That\u2019s it.</p>\n<p>There are more examples in <em>tests/version_test.py</em>.  You may test directly with <em>py.test</em> or against multiple\npython versions with <em>tox</em>.</p>\n<p>Enjoy!</p>\n</div>\n\n          </div>"}, "last_serial": 4454254, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f5c4e25f91a945c52148f405cd927f97", "sha256": "8b622f994fa0544cea6a368ea01164bd1e4e81fe0b868c5a11e233d19d953f99"}, "downloads": -1, "filename": "Versio-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f5c4e25f91a945c52148f405cd927f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32711, "upload_time": "2013-12-23T21:38:57", "upload_time_iso_8601": "2013-12-23T21:38:57.778058Z", "url": "https://files.pythonhosted.org/packages/a9/26/38a4b0c16a02f94cf3c2514da8ddc20420b557a64b52b46e327ac80db9bd/Versio-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5b119ffc94cf0fc65ef5b4e1d407c4db", "sha256": "8b44694f53a5783fe17cac20690a83269d88ca8b3c51022426c7a45146e7ee2c"}, "downloads": -1, "filename": "Versio-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5b119ffc94cf0fc65ef5b4e1d407c4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13649, "upload_time": "2014-01-03T21:38:33", "upload_time_iso_8601": "2014-01-03T21:38:33.213865Z", "url": "https://files.pythonhosted.org/packages/01/2d/8e82ade9a7f5be62a834703204978639b3df52bad4d425bfb293647cc3ad/Versio-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7a4e4cf95ac269a8d936a3ba2f05efa3", "sha256": "2d15bb39cf91a79a4a84664e0fc728122840249459597948c037a14a76407ced"}, "downloads": -1, "filename": "Versio-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7a4e4cf95ac269a8d936a3ba2f05efa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60243, "upload_time": "2015-02-25T21:09:22", "upload_time_iso_8601": "2015-02-25T21:09:22.820959Z", "url": "https://files.pythonhosted.org/packages/ce/92/2a7a3640ca670b3f043ed9498c2a32785341592f18c116a85d58d86b2f12/Versio-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ff51f6b5e8b8240aa1a3630ffef44fff", "sha256": "42952f94ef23f610da65e7814066cd0f424d6b141e5b68a7f9735adc92769bd7"}, "downloads": -1, "filename": "Versio-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ff51f6b5e8b8240aa1a3630ffef44fff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75685, "upload_time": "2015-07-02T22:39:46", "upload_time_iso_8601": "2015-07-02T22:39:46.967451Z", "url": "https://files.pythonhosted.org/packages/d3/30/8830f21794dff2d32daed44415ed2a69a136e39b7be7f318f772e935b48a/Versio-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "8b333fb427b223e76c290f4e33d25805", "sha256": "7a7346d81ad0a0186bfc846736296a3381b728d322c1e47763c111608e9426d4"}, "downloads": -1, "filename": "Versio-0.4.0.tar.gz", "has_sig": false, "md5_digest": "8b333fb427b223e76c290f4e33d25805", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21799, "upload_time": "2018-11-05T19:15:01", "upload_time_iso_8601": "2018-11-05T19:15:01.101736Z", "url": "https://files.pythonhosted.org/packages/4d/e7/1cb8dc3215202e13f70b49b3be216184e611c8bdb7609e05fa29dcea054a/Versio-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b333fb427b223e76c290f4e33d25805", "sha256": "7a7346d81ad0a0186bfc846736296a3381b728d322c1e47763c111608e9426d4"}, "downloads": -1, "filename": "Versio-0.4.0.tar.gz", "has_sig": false, "md5_digest": "8b333fb427b223e76c290f4e33d25805", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21799, "upload_time": "2018-11-05T19:15:01", "upload_time_iso_8601": "2018-11-05T19:15:01.101736Z", "url": "https://files.pythonhosted.org/packages/4d/e7/1cb8dc3215202e13f70b49b3be216184e611c8bdb7609e05fa29dcea054a/Versio-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:42 2020"}