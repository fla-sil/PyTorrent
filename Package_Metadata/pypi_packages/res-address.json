{"info": {"author": "Mariano Ruiz", "author_email": "mrsarm@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database", "Topic :: System :: Networking"], "description": "Simple Resource Address Parser\n==============================\n\nPython module to parse simple network resource addresses, like the ones\nused in many database systems to represent a database URI.\n\n``res_address`` will be used by `Mongotail <https://github.com/mrsarm/mongotail>`_\nto parse the address passed through command line (migration in progress), but can be used\nby any other Python application that needs to parse a MongoDB database address,\nor any other network resource like ``[[HOST OR IP][:PORT]/]RESOURCE``.\n\nUsage:\n\n.. code:: python\n\n   >>> from res_address import get_res_address\n   >>> host, port, resource = get_res_address(\"localhost:27017/test\")\n   >>> print(host, port, resource)\n   localhost 27017 test\n   >>> host, port, resource = get_res_address(\"my_db\")\n   >>> print(host, port, resource)\n   None None my_db\n   >>> ipv6, port, resource = get_res_address(\"[::1]:9999/foo\")\n   >>> print(ipv6, port, resource)\n   [::1] 9999 foo\n\n\n\nThe address can be:\n\n+----------------------+-------------------------------------------------------------+\n| foo                  | foo resource on local machine (IPv4 connection)             |\n+----------------------+-------------------------------------------------------------+\n| 192.169.0.5/foo      | foo resource on 192.168.0.5 machine                         |\n+----------------------+-------------------------------------------------------------+\n| remotehost/foo       | foo resource on *remotehost* machine                        |\n+----------------------+-------------------------------------------------------------+\n| 192.169.0.5:9999/foo | foo resource on 192.168.0.5 machine on port 9999            |\n+----------------------+-------------------------------------------------------------+\n| \"[::1]:9999/foo\"     | foo resource on ::1 machine on port 9999 (IPv6 connection)  |\n+----------------------+-------------------------------------------------------------+\n| :1234/foo            | foo resource on port 1234                                   |\n+----------------------+-------------------------------------------------------------+\n\nSome validations are performed over the host, port and resource strings, and an\nexception is launched if some of the checks fails, but take into account that\ninvalid range IPs or incompatible resource names may pass:\n\n.. code:: python\n\n   >>> host, port, resource = get_res_address(\"localhost:INVALIDport/test\")\n   Traceback (most recent call last):\n     File \"<stdin>\", line 1, in <module>\n     File \"res_address/__init__.py\", line 74, in get_res_address\n       raise InvalidPortError('Invalid port number \"%s\"' % port, address, port)\n   res_address.InvalidPortError: Invalid port number \"INVALIDport\"\n\nAll the validation exceptions inherit from ``AddressError``:\n\n* ``InvalidHostError``\n* ``InvalidPortError``\n* ``InvalidResourceError``\n* ``NotResourceProvidedError``\n\n\nRun the test\n------------\n\nJust execute (Python 2 or 3)::\n\n   $ python setup.py test\n\n\nOr::\n\n   $ python -m unittest -v tests\n\n\nAbout\n-----\n\nProject: https://github.com/mrsarm/python-res-address\n\nAuthors: (2018-2019) Mariano Ruiz <mrsarm@gmail.cm>\n\nLicense: LGPL-3", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/mrsarm/python-res-address/tarball/1.0.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrsarm/python-res-address", "keywords": "", "license": "LGPL-3", "maintainer": "", "maintainer_email": "", "name": "res-address", "package_url": "https://pypi.org/project/res-address/", "platform": "any", "project_url": "https://pypi.org/project/res-address/", "project_urls": {"Download": "https://github.com/mrsarm/python-res-address/tarball/1.0.0", "Homepage": "https://github.com/mrsarm/python-res-address"}, "release_url": "https://pypi.org/project/res-address/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Simple Resource Address Parser.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python module to parse simple network resource addresses, like the ones\nused in many database systems to represent a database URI.</p>\n<p><tt>res_address</tt> will be used by <a href=\"https://github.com/mrsarm/mongotail\" rel=\"nofollow\">Mongotail</a>\nto parse the address passed through command line (migration in progress), but can be used\nby any other Python application that needs to parse a MongoDB database address,\nor any other network resource like <tt>[[HOST OR <span class=\"pre\">IP][:PORT]/]RESOURCE</span></tt>.</p>\n<p>Usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">res_address</span> <span class=\"kn\">import</span> <span class=\"n\">get_res_address</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">get_res_address</span><span class=\"p\">(</span><span class=\"s2\">\"localhost:27017/test\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">)</span>\n<span class=\"n\">localhost</span> <span class=\"mi\">27017</span> <span class=\"n\">test</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">get_res_address</span><span class=\"p\">(</span><span class=\"s2\">\"my_db\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">)</span>\n<span class=\"kc\">None</span> <span class=\"kc\">None</span> <span class=\"n\">my_db</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipv6</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">get_res_address</span><span class=\"p\">(</span><span class=\"s2\">\"[::1]:9999/foo\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ipv6</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">)</span>\n<span class=\"p\">[::</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"mi\">9999</span> <span class=\"n\">foo</span>\n</pre>\n<p>The address can be:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>foo</td>\n<td>foo resource on local machine (IPv4 connection)</td>\n</tr>\n<tr><td>192.169.0.5/foo</td>\n<td>foo resource on 192.168.0.5 machine</td>\n</tr>\n<tr><td>remotehost/foo</td>\n<td>foo resource on <em>remotehost</em> machine</td>\n</tr>\n<tr><td>192.169.0.5:9999/foo</td>\n<td>foo resource on 192.168.0.5 machine on port 9999</td>\n</tr>\n<tr><td>\u201c[::1]:9999/foo\u201d</td>\n<td>foo resource on ::1 machine on port 9999 (IPv6 connection)</td>\n</tr>\n<tr><td>:1234/foo</td>\n<td>foo resource on port 1234</td>\n</tr>\n</tbody>\n</table>\n<p>Some validations are performed over the host, port and resource strings, and an\nexception is launched if some of the checks fails, but take into account that\ninvalid range IPs or incompatible resource names may pass:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">get_res_address</span><span class=\"p\">(</span><span class=\"s2\">\"localhost:INVALIDport/test\"</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"res_address/__init__.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">get_res_address</span>\n    <span class=\"k\">raise</span> <span class=\"n\">InvalidPortError</span><span class=\"p\">(</span><span class=\"s1\">'Invalid port number \"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"n\">res_address</span><span class=\"o\">.</span><span class=\"n\">InvalidPortError</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">port</span> <span class=\"n\">number</span> <span class=\"s2\">\"INVALIDport\"</span>\n</pre>\n<p>All the validation exceptions inherit from <tt>AddressError</tt>:</p>\n<ul>\n<li><tt>InvalidHostError</tt></li>\n<li><tt>InvalidPortError</tt></li>\n<li><tt>InvalidResourceError</tt></li>\n<li><tt>NotResourceProvidedError</tt></li>\n</ul>\n<div id=\"run-the-test\">\n<h2>Run the test</h2>\n<p>Just execute (Python 2 or 3):</p>\n<pre>$ python setup.py test\n</pre>\n<p>Or:</p>\n<pre>$ python -m unittest -v tests\n</pre>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>Project: <a href=\"https://github.com/mrsarm/python-res-address\" rel=\"nofollow\">https://github.com/mrsarm/python-res-address</a></p>\n<p>Authors: (2018-2019) Mariano Ruiz &lt;<a href=\"mailto:mrsarm%40gmail.cm\">mrsarm<span>@</span>gmail<span>.</span>cm</a>&gt;</p>\n<p>License: LGPL-3</p>\n</div>\n\n          </div>"}, "last_serial": 4889952, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a5390b2793aa4ff5975a968e8dedaae6", "sha256": "96bf2bd32a51fb2238b0752876c44979b5ab6eeecbae5a31d52a3d8f9800e56a"}, "downloads": -1, "filename": "res-address-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a5390b2793aa4ff5975a968e8dedaae6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17414, "upload_time": "2019-03-03T04:51:09", "upload_time_iso_8601": "2019-03-03T04:51:09.952563Z", "url": "https://files.pythonhosted.org/packages/40/8c/0efffb1414b6e664e8aaf1b73c3ae1c259788f45ec7c4db1c26d41b78bb7/res-address-1.0.0.tar.gz", "yanked": false}], "1.0.0b2": [{"comment_text": "", "digests": {"md5": "3e872bac48011255351516886f47c62c", "sha256": "b9cf61d84be9cbebedc427c5c912952491515dc690be00a71dadcf0092d22ef4"}, "downloads": -1, "filename": "res_address-1.0.0b2-py3.6.egg", "has_sig": false, "md5_digest": "3e872bac48011255351516886f47c62c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 5610, "upload_time": "2019-03-03T04:51:06", "upload_time_iso_8601": "2019-03-03T04:51:06.217282Z", "url": "https://files.pythonhosted.org/packages/b1/99/ccf1a633fe067c3b513b30a81bdd487d804d046d76cd356897fb962fb89a/res_address-1.0.0b2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "50eedac540a1e9805278412f38200a09", "sha256": "fbaba03122f3b08d3b7d77781083b96dd3acde175e25cdf02b56ae3ac99237fb"}, "downloads": -1, "filename": "res-address-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "50eedac540a1e9805278412f38200a09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17421, "upload_time": "2019-03-03T04:51:08", "upload_time_iso_8601": "2019-03-03T04:51:08.480889Z", "url": "https://files.pythonhosted.org/packages/e1/f3/3a7503eb588188c37f1fc21157141c7c5e706ea7b6c26d2e5114ee08ea47/res-address-1.0.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5390b2793aa4ff5975a968e8dedaae6", "sha256": "96bf2bd32a51fb2238b0752876c44979b5ab6eeecbae5a31d52a3d8f9800e56a"}, "downloads": -1, "filename": "res-address-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a5390b2793aa4ff5975a968e8dedaae6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17414, "upload_time": "2019-03-03T04:51:09", "upload_time_iso_8601": "2019-03-03T04:51:09.952563Z", "url": "https://files.pythonhosted.org/packages/40/8c/0efffb1414b6e664e8aaf1b73c3ae1c259788f45ec7c4db1c26d41b78bb7/res-address-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:55 2020"}