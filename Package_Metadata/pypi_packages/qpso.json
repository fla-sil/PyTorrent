{"info": {"author": "Chun Nien", "author_email": "contact@chunnien.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# qpso\nA Python implementation of quantum particle swarm optimization (QPSO).\n\n    pip install qpso\n\nThis is a black-box optimization package built upon the quantum paricle swarm\noptimization [1].\n\n## Quickstart\nThe usage of this package is very simple.\nFor example, the following code shows how to solve a 10-dimensional opmitzation\nproblem by using QPSO with Delta potential well (QDPSO) proposed in [1].\n\n```python\nimport numpy as np\nfrom qpso import QDPSO\n\n\ndef sphere(args):\n    f = sum([np.power(x, 2.) for x in args])\n    return f\n\n\ndef log(s):\n    best_value = [p.best_value for p in s.particles()]\n    best_value_avg = np.mean(best_value)\n    best_value_std = np.std(best_value)\n    print(\"{0: >5}  {1: >9}  {2: >9}  {3: >9}\".format(\"Iters.\", \"Best\", \"Best(Mean)\", \"Best(STD)\"))\n    print(\"{0: >5}  {1: >9.3E}  {2: >9.3E}  {3: >9.3E}\".format(s.iters, s.gbest_value, best_value_avg, best_value_std))\n\n\nNParticle = 40\nMaxIters = 1000\nNDim = 10\nbounds = [(-2.56, 5.12) for i in range(0, NDim)]\ng = 0.96\ns = QDPSO(sphere, NParticle, NDim, bounds, MaxIters, g)\ns.update(callback=log, interval=100)\nprint(\"Found best position: {0}\".format(s.gbest))\n```\n\n## Bibliography \n\n[1] Jun Sun, Bin Feng and Wenbo Xu, \"Particle swarm optimization with particles having quantum behavior,\" Proceedings of the 2004 Congress on Evolutionary Computation (IEEE Cat. No.04TH8753), Portland, OR, USA, 2004, pp. 325-331 Vol.1.\ndoi: 10.1109/CEC.2004.1330875\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ngroup/qpso", "keywords": "optimization qpso swarm", "license": "", "maintainer": "", "maintainer_email": "", "name": "qpso", "package_url": "https://pypi.org/project/qpso/", "platform": "", "project_url": "https://pypi.org/project/qpso/", "project_urls": {"Homepage": "https://github.com/ngroup/qpso"}, "release_url": "https://pypi.org/project/qpso/0.0.1/", "requires_dist": ["numpy"], "requires_python": "", "summary": "A Python implementation of quantum particle swarm optimization (QPSO).", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>qpso</h1>\n<p>A Python implementation of quantum particle swarm optimization (QPSO).</p>\n<pre><code>pip install qpso\n</code></pre>\n<p>This is a black-box optimization package built upon the quantum paricle swarm\noptimization [1].</p>\n<h2>Quickstart</h2>\n<p>The usage of this package is very simple.\nFor example, the following code shows how to solve a 10-dimensional opmitzation\nproblem by using QPSO with Delta potential well (QDPSO) proposed in [1].</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qpso</span> <span class=\"kn\">import</span> <span class=\"n\">QDPSO</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sphere</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">power</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">best_value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">best_value</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">particles</span><span class=\"p\">()]</span>\n    <span class=\"n\">best_value_avg</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">best_value</span><span class=\"p\">)</span>\n    <span class=\"n\">best_value_std</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">(</span><span class=\"n\">best_value</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{0: &gt;5}</span><span class=\"s2\">  </span><span class=\"si\">{1: &gt;9}</span><span class=\"s2\">  </span><span class=\"si\">{2: &gt;9}</span><span class=\"s2\">  </span><span class=\"si\">{3: &gt;9}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Iters.\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Best\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Best(Mean)\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Best(STD)\"</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{0: &gt;5}</span><span class=\"s2\">  </span><span class=\"si\">{1: &gt;9.3E}</span><span class=\"s2\">  </span><span class=\"si\">{2: &gt;9.3E}</span><span class=\"s2\">  </span><span class=\"si\">{3: &gt;9.3E}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iters</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">gbest_value</span><span class=\"p\">,</span> <span class=\"n\">best_value_avg</span><span class=\"p\">,</span> <span class=\"n\">best_value_std</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">NParticle</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>\n<span class=\"n\">MaxIters</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">NDim</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"o\">-</span><span class=\"mf\">2.56</span><span class=\"p\">,</span> <span class=\"mf\">5.12</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">NDim</span><span class=\"p\">)]</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"mf\">0.96</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">QDPSO</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">NParticle</span><span class=\"p\">,</span> <span class=\"n\">NDim</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"n\">MaxIters</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found best position: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">gbest</span><span class=\"p\">))</span>\n</pre>\n<h2>Bibliography</h2>\n<p>[1] Jun Sun, Bin Feng and Wenbo Xu, \"Particle swarm optimization with particles having quantum behavior,\" Proceedings of the 2004 Congress on Evolutionary Computation (IEEE Cat. No.04TH8753), Portland, OR, USA, 2004, pp. 325-331 Vol.1.\ndoi: 10.1109/CEC.2004.1330875</p>\n\n          </div>"}, "last_serial": 4648298, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "91f38864957db6703e5acffb006d8866", "sha256": "4c9cd1162335d1fedcfec8132c2813c88c81f8d4507128a25d1f4cb31f76dab3"}, "downloads": -1, "filename": "qpso-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91f38864957db6703e5acffb006d8866", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4056, "upload_time": "2018-12-31T15:20:36", "upload_time_iso_8601": "2018-12-31T15:20:36.317414Z", "url": "https://files.pythonhosted.org/packages/c7/9f/b3f491c02b35d6109c623363c397c689702c7b3678044c122b7ef5db620d/qpso-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00ad57a1a18c9d1a83fa20e9cb93eb28", "sha256": "ec94246bfce5c1d7679ddd1b28c5170a8fb5d0b630605683e571cbcf0e2c88c5"}, "downloads": -1, "filename": "qpso-0.0.1.tar.gz", "has_sig": false, "md5_digest": "00ad57a1a18c9d1a83fa20e9cb93eb28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3249, "upload_time": "2018-12-31T15:20:41", "upload_time_iso_8601": "2018-12-31T15:20:41.538960Z", "url": "https://files.pythonhosted.org/packages/2e/0d/bb91d3d5b142873f011bbb9afff1683a0ea83ecb3f7e080d680003e28f50/qpso-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91f38864957db6703e5acffb006d8866", "sha256": "4c9cd1162335d1fedcfec8132c2813c88c81f8d4507128a25d1f4cb31f76dab3"}, "downloads": -1, "filename": "qpso-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91f38864957db6703e5acffb006d8866", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4056, "upload_time": "2018-12-31T15:20:36", "upload_time_iso_8601": "2018-12-31T15:20:36.317414Z", "url": "https://files.pythonhosted.org/packages/c7/9f/b3f491c02b35d6109c623363c397c689702c7b3678044c122b7ef5db620d/qpso-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00ad57a1a18c9d1a83fa20e9cb93eb28", "sha256": "ec94246bfce5c1d7679ddd1b28c5170a8fb5d0b630605683e571cbcf0e2c88c5"}, "downloads": -1, "filename": "qpso-0.0.1.tar.gz", "has_sig": false, "md5_digest": "00ad57a1a18c9d1a83fa20e9cb93eb28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3249, "upload_time": "2018-12-31T15:20:41", "upload_time_iso_8601": "2018-12-31T15:20:41.538960Z", "url": "https://files.pythonhosted.org/packages/2e/0d/bb91d3d5b142873f011bbb9afff1683a0ea83ecb3f7e080d680003e28f50/qpso-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:19 2020"}