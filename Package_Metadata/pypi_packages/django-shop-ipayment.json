{"info": {"author": "Jacob Rief", "author_email": "jacob.rief@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "====================\ndjango-shop-ipayment\n====================\n\nThis module is a payment backend module for django-SHOP, using IPayment \n(https://ipayment.de) from the 1und1 company in Germany. It can be used for\ncredit card and other kind of payments.\n\nCurrently only IPayment's silent CGI mode is implemented, which does not require\na PCI DSS certification (https://www.pcisecuritystandards.org/) for your shop,\nbecause your software never \"sees\" the credit card numbers. With this module\nyour customer never visibly \"leaves\" your shop to enter his credit card numbers.\nYou are therefore in full control over all design aspects of the payment\nprocess, something which for instance is not possible with PayPal.\n\nInstallation\n============\nClone this module from github::\n\n    git clone git@github.com:jrief/django-shop-ipayment.git\n\nand move the sub-directory 'ipayment' into your projects path.\n\nConfiguration\n=============\n\nIn settings.py\n\n* Add \u2018ipayment\u2019 to INSTALLED_APPS.\n* Add 'ipayment.offsite_backend.OffsiteIPaymentBackend' to SHOP_PAYMENT_BACKENDS.\n* Add the one of the IPAYMENT configuration dictionaries, see below.\n* Test your application using the sandbox.\n* Then close a deal with http://ipayment.de , and populate your configurations\n  according to the given settings.\n\nWith this configuration, all sensible data is passed to IPayment within the\nsubmission form as hidden fields, but visible to the customer. In order to\ndetect data manipulations, a check-sum is built using some of the sensible fields\n(``trxUserId``, ``trxPassword`` and more) together with the given ``securityKey``.\nUse this configuration, whenever your shop is not able to speak HTTPS to the \noutside world. Many administrators of datacenters inhibit HTTPS traffic from\ninside to the Internet. In these situations, use this configuration::\n\n    IPAYMENT = {\n        'accountId': 99999,\n        'trxUserId': 99998,\n        'trxType': 'preauth', # details in ipayment_Technik-Handbuch_2010-03.pdf (Seite 13-15)\n        'trxPassword': '0',\n        'trxCurrency': 'EUR',\n        'trxPaymentType': 'cc', # payment type credit card\n        'adminActionPassword': '5cfgRT34xsdedtFLdfHxj7tfwx24fe',\n        'useSessionId': False,\n        'securityKey': 'testtest',\n        'invoiceText': 'Example-Shop Invoice: %s', # The text shown on the customers credit card roll\n    }\n\nWith this configuration, all sensible data (``trxUserId``, ``trxPassword`` and\nmore) are passed to IPayment using a separate SOAP call, invoked from the shop's\nweb-application. This method requires that your shop can speak HTTPS to the\noutside world. Whenever possible, use this configuration, because it is\nsafer::\n\n    IPAYMENT = {\n        'accountId': 99999,\n        'trxUserId': 99999,\n        'trxType': 'preauth', # details in ipayment_Technik-Handbuch_2010-03.pdf (Seite 13-15)\n        'trxPassword': '0',\n        'trxCurrency': 'EUR',\n        'trxPaymentType': 'cc', # payment type credit card\n        'adminActionPassword': '5cfgRT34xsdedtFLdfHxj7tfwx24fe',\n        'useSessionId': True,\n        'invoiceText': 'Example-Shop Invoice: %s', # The text shown on the customers credit card roll\n    }\n\n\nAll the given values from these sample configurations work on the IPayment's\nsandbox. Thus these values are immediately suitable to check functionality\nwithout the need of setting up an account at IPayment. If you register for\nIPayment, you get access to a configuration interface and other values\nwill be assigned to your shop.\n\nFor your reference, you can use the following test credit card numbers:\n\n* Visa Test Card: 4012888888881881\n* Master Test Card: 5105105105105100\n* The expiration date must be set to the present date or later.\n* As Credit Card Checkcode use any three digits.\n\n\nTesting\n=======\n\nCompared to other unit tests, this test suite is rather tricky to setup. The\nreason for this is that the module has to contact the servers of your PSP, which\nthemselves contact your testing environment through HTTP (to confirm the\npayment).\nTherefore during testing make sure, that your testing environment is reachable\nfrom the Internet with a name resolvable by DNS. You might have to configure\nyour firewall, so that your workstation is reachable on port 80.\nIf you do not have a domain name which resolves onto your external IP address,\nuse a dynamic DNS service, as listed here http://dnslookup.me/dynamic-dns/.\n\nSet the host name of your environment in tests/testapp/settings.py::\n\n    HOST_NAME = 'ipayment.example.net'\n\nThe unit test must start a web service which listens on port 80 of your testing\nenvironment. This feature is available in Django-1.4 or later. To run the\ntest on its own, invoke::\n\n   cd tests/testapp\n   python manage.py test --liveserver 0.0.0.0:80 \n\nIf you run Django behind a proxy, such as Apache or nginx, run:: \n\n   cd tests/testapp\n   python manage.py test --liveserver 127.0.0.1:8080\n\nand change your proxy settings so, that incoming HTTP requests are passed\nthrough to 127.0.0.1:8080. These values of course depend on your testing\nenvironment.\n\nIf you have trouble running these tests, try to reach the shop using a browser,\nwhile the test suite is running, which is about 20 seconds. This artificial\ndelay is required to wait for all external events to have finished.\n\nBefore repeating a test, wait at least one minute, since IPayment otherwise may\nreject the transaction with the message::\n\n    This transaction is currently already in process.\n    Do you have started the transaction twice?\n\n\nTODO\n====\n\nIPayment offers a lot of different payment options, some of which require a PCI\nDSS certification and communicate using SOAP. Currently I have no plans to\nsupport these.\n\nCHANGES\n=======\n\n0.1.0\nAll unit tests have been adopted and rechecked in a real environment.\n\n0.0.5\nUnit tests have been written to check for both kind of payment methods.\n\n0.0.4\nFixed the update of the correct status in table order.\n\n0.0.3\ndjango-shop-ipayment is able to pass sensible data to IPayment and gets a\nsession key on return.\nThis key then is used in the customers payment form, instead of passing sensible\ndata.\n\nSecurity\n========\n\nIf using a proxy, disable forwarding the X_HTTP_FORWARD header, but make sure,\nthat the proxy sets the X_HTTP_FORWARD header with the IP address of the client.\nThis header is used to assure that payment notifications originate from\nIPayment. If you have trouble with your proxy settings, disable this security\nfeature in settings.py ::\n   IPAYMENT = {\n      ...\n       'checkOriginatingIP': False,\n      ...\n   }\n\nContributing\n============\n\nFeel free to post any comment or suggestion for this project on the django-shop\nmailing list at https://groups.google.com/forum/#!forum/django-shop\n\nHave fun!\nJacob", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jrief/django-shop-ipayment", "keywords": "django,django-shop,ipayment", "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-shop-ipayment", "package_url": "https://pypi.org/project/django-shop-ipayment/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-shop-ipayment/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jrief/django-shop-ipayment"}, "release_url": "https://pypi.org/project/django-shop-ipayment/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A payment backend module for django-SHOP, using IPayment (https://ipayment.de) from the 1und1 company in Germany.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ====================<br>django-shop-ipayment<br>====================<br><br>This module is a payment backend module for django-SHOP, using IPayment <br>(https://ipayment.de) from the 1und1 company in Germany. It can be used for<br>credit card and other kind of payments.<br><br>Currently only IPayment's silent CGI mode is implemented, which does not require<br>a PCI DSS certification (https://www.pcisecuritystandards.org/) for your shop,<br>because your software never \"sees\" the credit card numbers. With this module<br>your customer never visibly \"leaves\" your shop to enter his credit card numbers.<br>You are therefore in full control over all design aspects of the payment<br>process, something which for instance is not possible with PayPal.<br><br>Installation<br>============<br>Clone this module from github::<br><br>    git clone git@github.com:jrief/django-shop-ipayment.git<br><br>and move the sub-directory 'ipayment' into your projects path.<br><br>Configuration<br>=============<br><br>In settings.py<br><br>* Add \u2018ipayment\u2019 to INSTALLED_APPS.<br>* Add 'ipayment.offsite_backend.OffsiteIPaymentBackend' to SHOP_PAYMENT_BACKENDS.<br>* Add the one of the IPAYMENT configuration dictionaries, see below.<br>* Test your application using the sandbox.<br>* Then close a deal with http://ipayment.de , and populate your configurations<br>  according to the given settings.<br><br>With this configuration, all sensible data is passed to IPayment within the<br>submission form as hidden fields, but visible to the customer. In order to<br>detect data manipulations, a check-sum is built using some of the sensible fields<br>(``trxUserId``, ``trxPassword`` and more) together with the given ``securityKey``.<br>Use this configuration, whenever your shop is not able to speak HTTPS to the <br>outside world. Many administrators of datacenters inhibit HTTPS traffic from<br>inside to the Internet. In these situations, use this configuration::<br><br>    IPAYMENT = {<br>        'accountId': 99999,<br>        'trxUserId': 99998,<br>        'trxType': 'preauth', # details in ipayment_Technik-Handbuch_2010-03.pdf (Seite 13-15)<br>        'trxPassword': '0',<br>        'trxCurrency': 'EUR',<br>        'trxPaymentType': 'cc', # payment type credit card<br>        'adminActionPassword': '5cfgRT34xsdedtFLdfHxj7tfwx24fe',<br>        'useSessionId': False,<br>        'securityKey': 'testtest',<br>        'invoiceText': 'Example-Shop Invoice: %s', # The text shown on the customers credit card roll<br>    }<br><br>With this configuration, all sensible data (``trxUserId``, ``trxPassword`` and<br>more) are passed to IPayment using a separate SOAP call, invoked from the shop's<br>web-application. This method requires that your shop can speak HTTPS to the<br>outside world. Whenever possible, use this configuration, because it is<br>safer::<br><br>    IPAYMENT = {<br>        'accountId': 99999,<br>        'trxUserId': 99999,<br>        'trxType': 'preauth', # details in ipayment_Technik-Handbuch_2010-03.pdf (Seite 13-15)<br>        'trxPassword': '0',<br>        'trxCurrency': 'EUR',<br>        'trxPaymentType': 'cc', # payment type credit card<br>        'adminActionPassword': '5cfgRT34xsdedtFLdfHxj7tfwx24fe',<br>        'useSessionId': True,<br>        'invoiceText': 'Example-Shop Invoice: %s', # The text shown on the customers credit card roll<br>    }<br><br><br>All the given values from these sample configurations work on the IPayment's<br>sandbox. Thus these values are immediately suitable to check functionality<br>without the need of setting up an account at IPayment. If you register for<br>IPayment, you get access to a configuration interface and other values<br>will be assigned to your shop.<br><br>For your reference, you can use the following test credit card numbers:<br><br>* Visa Test Card: 4012888888881881<br>* Master Test Card: 5105105105105100<br>* The expiration date must be set to the present date or later.<br>* As Credit Card Checkcode use any three digits.<br><br><br>Testing<br>=======<br><br>Compared to other unit tests, this test suite is rather tricky to setup. The<br>reason for this is that the module has to contact the servers of your PSP, which<br>themselves contact your testing environment through HTTP (to confirm the<br>payment).<br>Therefore during testing make sure, that your testing environment is reachable<br>from the Internet with a name resolvable by DNS. You might have to configure<br>your firewall, so that your workstation is reachable on port 80.<br>If you do not have a domain name which resolves onto your external IP address,<br>use a dynamic DNS service, as listed here http://dnslookup.me/dynamic-dns/.<br><br>Set the host name of your environment in tests/testapp/settings.py::<br><br>    HOST_NAME = 'ipayment.example.net'<br><br>The unit test must start a web service which listens on port 80 of your testing<br>environment. This feature is available in Django-1.4 or later. To run the<br>test on its own, invoke::<br><br>   cd tests/testapp<br>   python manage.py test --liveserver 0.0.0.0:80 <br><br>If you run Django behind a proxy, such as Apache or nginx, run:: <br><br>   cd tests/testapp<br>   python manage.py test --liveserver 127.0.0.1:8080<br><br>and change your proxy settings so, that incoming HTTP requests are passed<br>through to 127.0.0.1:8080. These values of course depend on your testing<br>environment.<br><br>If you have trouble running these tests, try to reach the shop using a browser,<br>while the test suite is running, which is about 20 seconds. This artificial<br>delay is required to wait for all external events to have finished.<br><br>Before repeating a test, wait at least one minute, since IPayment otherwise may<br>reject the transaction with the message::<br><br>    This transaction is currently already in process.<br>    Do you have started the transaction twice?<br><br><br>TODO<br>====<br><br>IPayment offers a lot of different payment options, some of which require a PCI<br>DSS certification and communicate using SOAP. Currently I have no plans to<br>support these.<br><br>CHANGES<br>=======<br><br>0.1.0<br>All unit tests have been adopted and rechecked in a real environment.<br><br>0.0.5<br>Unit tests have been written to check for both kind of payment methods.<br><br>0.0.4<br>Fixed the update of the correct status in table order.<br><br>0.0.3<br>django-shop-ipayment is able to pass sensible data to IPayment and gets a<br>session key on return.<br>This key then is used in the customers payment form, instead of passing sensible<br>data.<br><br>Security<br>========<br><br>If using a proxy, disable forwarding the X_HTTP_FORWARD header, but make sure,<br>that the proxy sets the X_HTTP_FORWARD header with the IP address of the client.<br>This header is used to assure that payment notifications originate from<br>IPayment. If you have trouble with your proxy settings, disable this security<br>feature in settings.py ::<br>   IPAYMENT = {<br>      ...<br>       'checkOriginatingIP': False,<br>      ...<br>   }<br><br>Contributing<br>============<br><br>Feel free to post any comment or suggestion for this project on the django-shop<br>mailing list at https://groups.google.com/forum/#!forum/django-shop<br><br>Have fun!<br>Jacob\n          </div>"}, "last_serial": 790603, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "ed885e30eedcf5a0a93f0f38038c6688", "sha256": "d8365be33bbecf5cf66802b6a98eeb47708e06bbc8544ca38c36400e929326a6"}, "downloads": -1, "filename": "django-shop-ipayment-0.0.2.tar.gz", "has_sig": true, "md5_digest": "ed885e30eedcf5a0a93f0f38038c6688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7031, "upload_time": "2011-10-20T16:05:09", "upload_time_iso_8601": "2011-10-20T16:05:09.903074Z", "url": "https://files.pythonhosted.org/packages/f1/4e/f111638f554f91825a43251bfa31171873dcbd5ab2e74313f3ca27e3db46/django-shop-ipayment-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2f20bd61c80508df65193ac6d65fe004", "sha256": "8830cc0b2c12548e6b42db34c159ff5f959757be0f7477f2912330fc6ecf1974"}, "downloads": -1, "filename": "django-shop-ipayment-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2f20bd61c80508df65193ac6d65fe004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11384, "upload_time": "2011-11-01T12:09:49", "upload_time_iso_8601": "2011-11-01T12:09:49.750177Z", "url": "https://files.pythonhosted.org/packages/ee/9d/d09bb4b1540d80fa1ffd4222b46c95315dd0063318dbad43d2ff662acbe1/django-shop-ipayment-0.0.3.tar.gz", "yanked": false}], "0.0.5": [], "0.1.0": []}, "urls": [], "timestamp": "Fri May  8 00:53:30 2020"}