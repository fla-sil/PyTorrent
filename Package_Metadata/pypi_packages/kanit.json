{"info": {"author": "Clay Dowling", "author_email": "clay@lazarusid.com", "bugtrack_url": null, "classifiers": [], "description": "=====\nKANIT\n=====\n\nKanban board management system by Clay Dowling <clay@lazarusid.com>\n\nInstalling\n==========\n\nThe easiest way to install kanit is to run the easy_install program::\n\n\tsudo easy_install kanit\n\nIf you prefer the latest and greatest, you can download the zip archive\nfrom the source repository, and run the install tool::\n\n\twget https://github.com/LazarusID/kanit/archive/master.zip\n\tcd kanit-master\n\tsudo python setup.py install\n\n\nPurpose\n=======\n\nA good task tracking system for a project is important if the project\nhas any complexity at all.  If you're a one-person project, a real\nkanban board with post it notes is probably sufficient for the task.\nEven if you're a multi-person project, as long as you all work in the\nsame space, the post it notes are probably sufficient.\n\nThat all goes to heck if you're a multi-person, multi-site project,\ne.g. if you and your buddies are working on a skunkworks project\nfrom your homes.  Even if you're a single person project, sometimes\nyou need the whiteboard where you're tracking progress to sketch out\nan idea.\n\nThat's where Kanit comes in.  You manage your project by writing a\nbunch of text files, all in the same folder, one for each task.  You\nkeep your task backlog in a separate folder, and move them into your\ncurrent sprint by copying the files into the task folder.  When the \nsprint is done, the files are moved into another folder and archived.\n\nStories\n=======\n\nFirst, a bit of terminology: when I say \"story\", that's interchangable\nwith \"task.\"  Right now, Kanit only has one unit of measurement: the\nfile.  In future versions, you'll be able to establish parent-child\nrelationships between these files, so you can have a full hierarchy\nof features, stories and tasks.  Or whatever you want to call them.  The\nsystem just won't care.\n\nTo create a story, just create a text file (in the folder you're using\nfor your project management files).  Kanit assumes that these text files\nare proper ReStructured Text files, which can be processed by the python\ndocutils suite.  You should give the text file a name that is \ndescriptive of what it contains.\n\nIn the file, you should have a proper title, using '===' style bars\nabove and below.\n\nKanit will make use of two fields if they are available: status and points.\n\nStatus is the task's current status.  You can use whatever set of stati\nis appropriate to your situation.  I use \"Not Started,\" \"In Process,\"\nand \"Done,\" but your workflow might need to accomodate a QA team or \nsignoff by a stakeholder.  The important thing is to establish a standard\nfor what you and your team should be using.\n\n\nUsing Kanit\n===========\n\nKanit is incredibly simple to use::\n\n\tkanity.py tasks\n\nThis assumes that your task list lives in a folder called \"tasks\" under\nyour current folder.\n\nIn a multi-person project the task folder is probably under source\ncontrol (it should be if it isn't).  Let me suggest a couple of best\npractices:\n\n1. Before changing the status of a task, update your local checkout.\n\n2. After changing anything in a task file, especially a status, commit\n   your changes.\n\nOf course this is no substitute for good communication within your team.\nYou should talk to them via whatever communications mechanism you have\nset up and make sure that you aren't grabbing a task somebody else is\nworking on.  Mentioning that you are taking a task may also prompt some\nimportant discussion.  Things that they may have realized about the task\nthat they didn't know when the task was written.\n\nStatus Ordering\n---------------\n\nEach story is displayed in a list, with the lists organized by their\nstatus.  By default this list is sorted alphabetically.  If in the\nfolder there is a file \"kanit.conf\" this file will be read for\ninformation about the sort order you would prefer for the status.\n\nkanit.conf is a JSON file.  If you would like to control the sort order,\ncreate a dictionary in this file with a key of \"status.order\", and\nassign it a list of the values you would like to use for status, in the\norder you would like to see them.  Any status that does not appear in\nthis list will appear after the listed stati sorted in alphabetical\norder.\n\nThe file I use in my own development looks something like this::\n\n\t{\n\t\t\"status.order\": [\"Not Started\", \"In Process\", \"Done\"]\n\t}\n\nDirectory Structure\n-------------------\n\nAllow me to suggest the following directory structure::\n\n\ttasks \n\t\t|\n\t\t+-backlog\n\t\t|\n\t\t+-archive\n\nThe backlog folder will contain stories which you have written, but\nhaven't yet pulled into a sprint to work on.  It may also happen that in\nthe course of working on a story, you decide to defer action on it.  I\ntypically give it a status of \"Deferred\" so that it is easier to spot,\nthen move it to the backlog folder.\n\nThe archive folder is where I store old sprints.  I zip up everything\nwith a \"Done\" status in the sprint folder into an appropriate named\nfile, such as `archive\\sprint-01.zip`  After confirming that the files\nreally are in the archive, I then delete them from the tasks folder.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LazarusID/kanit", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "kanit", "package_url": "https://pypi.org/project/kanit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kanit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/LazarusID/kanit"}, "release_url": "https://pypi.org/project/kanit/0.7/", "requires_dist": null, "requires_python": null, "summary": "Kanit kanban tool", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Kanban board management system by Clay Dowling &lt;<a href=\"mailto:clay%40lazarusid.com\">clay<span>@</span>lazarusid<span>.</span>com</a>&gt;</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>The easiest way to install kanit is to run the easy_install program:</p>\n<pre>sudo easy_install kanit\n</pre>\n<p>If you prefer the latest and greatest, you can download the zip archive\nfrom the source repository, and run the install tool:</p>\n<pre>wget https://github.com/LazarusID/kanit/archive/master.zip\ncd kanit-master\nsudo python setup.py install\n</pre>\n</div>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>A good task tracking system for a project is important if the project\nhas any complexity at all.  If you\u2019re a one-person project, a real\nkanban board with post it notes is probably sufficient for the task.\nEven if you\u2019re a multi-person project, as long as you all work in the\nsame space, the post it notes are probably sufficient.</p>\n<p>That all goes to heck if you\u2019re a multi-person, multi-site project,\ne.g. if you and your buddies are working on a skunkworks project\nfrom your homes.  Even if you\u2019re a single person project, sometimes\nyou need the whiteboard where you\u2019re tracking progress to sketch out\nan idea.</p>\n<p>That\u2019s where Kanit comes in.  You manage your project by writing a\nbunch of text files, all in the same folder, one for each task.  You\nkeep your task backlog in a separate folder, and move them into your\ncurrent sprint by copying the files into the task folder.  When the\nsprint is done, the files are moved into another folder and archived.</p>\n</div>\n<div id=\"stories\">\n<h2>Stories</h2>\n<p>First, a bit of terminology: when I say \u201cstory\u201d, that\u2019s interchangable\nwith \u201ctask.\u201d  Right now, Kanit only has one unit of measurement: the\nfile.  In future versions, you\u2019ll be able to establish parent-child\nrelationships between these files, so you can have a full hierarchy\nof features, stories and tasks.  Or whatever you want to call them.  The\nsystem just won\u2019t care.</p>\n<p>To create a story, just create a text file (in the folder you\u2019re using\nfor your project management files).  Kanit assumes that these text files\nare proper ReStructured Text files, which can be processed by the python\ndocutils suite.  You should give the text file a name that is\ndescriptive of what it contains.</p>\n<p>In the file, you should have a proper title, using \u2018===\u2019 style bars\nabove and below.</p>\n<p>Kanit will make use of two fields if they are available: status and points.</p>\n<p>Status is the task\u2019s current status.  You can use whatever set of stati\nis appropriate to your situation.  I use \u201cNot Started,\u201d \u201cIn Process,\u201d\nand \u201cDone,\u201d but your workflow might need to accomodate a QA team or\nsignoff by a stakeholder.  The important thing is to establish a standard\nfor what you and your team should be using.</p>\n</div>\n<div id=\"using-kanit\">\n<h2>Using Kanit</h2>\n<p>Kanit is incredibly simple to use:</p>\n<pre>kanity.py tasks\n</pre>\n<p>This assumes that your task list lives in a folder called \u201ctasks\u201d under\nyour current folder.</p>\n<p>In a multi-person project the task folder is probably under source\ncontrol (it should be if it isn\u2019t).  Let me suggest a couple of best\npractices:</p>\n<ol>\n<li>Before changing the status of a task, update your local checkout.</li>\n<li>After changing anything in a task file, especially a status, commit\nyour changes.</li>\n</ol>\n<p>Of course this is no substitute for good communication within your team.\nYou should talk to them via whatever communications mechanism you have\nset up and make sure that you aren\u2019t grabbing a task somebody else is\nworking on.  Mentioning that you are taking a task may also prompt some\nimportant discussion.  Things that they may have realized about the task\nthat they didn\u2019t know when the task was written.</p>\n<div id=\"status-ordering\">\n<h3>Status Ordering</h3>\n<p>Each story is displayed in a list, with the lists organized by their\nstatus.  By default this list is sorted alphabetically.  If in the\nfolder there is a file \u201ckanit.conf\u201d this file will be read for\ninformation about the sort order you would prefer for the status.</p>\n<p>kanit.conf is a JSON file.  If you would like to control the sort order,\ncreate a dictionary in this file with a key of \u201cstatus.order\u201d, and\nassign it a list of the values you would like to use for status, in the\norder you would like to see them.  Any status that does not appear in\nthis list will appear after the listed stati sorted in alphabetical\norder.</p>\n<p>The file I use in my own development looks something like this:</p>\n<pre>{\n        \"status.order\": [\"Not Started\", \"In Process\", \"Done\"]\n}\n</pre>\n</div>\n<div id=\"directory-structure\">\n<h3>Directory Structure</h3>\n<p>Allow me to suggest the following directory structure:</p>\n<pre>tasks\n        |\n        +-backlog\n        |\n        +-archive\n</pre>\n<p>The backlog folder will contain stories which you have written, but\nhaven\u2019t yet pulled into a sprint to work on.  It may also happen that in\nthe course of working on a story, you decide to defer action on it.  I\ntypically give it a status of \u201cDeferred\u201d so that it is easier to spot,\nthen move it to the backlog folder.</p>\n<p>The archive folder is where I store old sprints.  I zip up everything\nwith a \u201cDone\u201d status in the sprint folder into an appropriate named\nfile, such as <cite>archivesprint-01.zip</cite>  After confirming that the files\nreally are in the archive, I then delete them from the tasks folder.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1362132, "releases": {"0.5": [], "0.6": [{"comment_text": "built for Linux-3.13.0-35-generic-x86_64-with-glibc2.4", "digests": {"md5": "dddb6db25cb9a2d74d08e432d3916d12", "sha256": "8cc53a9350a51472575fc19f43bde607b0e56ec4a5e2545afd93caaed01eac3d"}, "downloads": -1, "filename": "kanit-0.6.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "dddb6db25cb9a2d74d08e432d3916d12", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 7078, "upload_time": "2014-09-24T04:57:49", "upload_time_iso_8601": "2014-09-24T04:57:49.715993Z", "url": "https://files.pythonhosted.org/packages/c4/b3/d8a432eab3898a3193a8683f52a0ec90b81ea0d29c78344df0812735e7e6/kanit-0.6.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "e58c93f392a7797d0d7495f4c8b78f19", "sha256": "8dfa82bc5c66d859692503df6cb53596a93038bdbcec779a592a3c641ea9b2e9"}, "downloads": -1, "filename": "kanit-0.6.tar.gz", "has_sig": false, "md5_digest": "e58c93f392a7797d0d7495f4c8b78f19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6594, "upload_time": "2014-09-24T04:58:17", "upload_time_iso_8601": "2014-09-24T04:58:17.721736Z", "url": "https://files.pythonhosted.org/packages/23/c5/c046b72bc5f3ccc56e59e8104e72d0258a7ac3df7898733021f9c838e641/kanit-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "ffd597434728f414ec9cf25451eee1a7", "sha256": "1be5a6998ffd78a238211f07abdeabb3d115dbeab49db269c36fc17422f54376"}, "downloads": -1, "filename": "kanit-0.7.tar.gz", "has_sig": false, "md5_digest": "ffd597434728f414ec9cf25451eee1a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6625, "upload_time": "2014-12-27T16:56:17", "upload_time_iso_8601": "2014-12-27T16:56:17.419704Z", "url": "https://files.pythonhosted.org/packages/bc/03/31b83061d6a5a30b03c14b1ccb6d867e8d72aeaf6cd2cd1b2888089c3a08/kanit-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffd597434728f414ec9cf25451eee1a7", "sha256": "1be5a6998ffd78a238211f07abdeabb3d115dbeab49db269c36fc17422f54376"}, "downloads": -1, "filename": "kanit-0.7.tar.gz", "has_sig": false, "md5_digest": "ffd597434728f414ec9cf25451eee1a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6625, "upload_time": "2014-12-27T16:56:17", "upload_time_iso_8601": "2014-12-27T16:56:17.419704Z", "url": "https://files.pythonhosted.org/packages/bc/03/31b83061d6a5a30b03c14b1ccb6d867e8d72aeaf6cd2cd1b2888089c3a08/kanit-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:41 2020"}