{"info": {"author": "Body Labs", "author_email": "alex@bodylabs.com, paul.melnikow@bodylabs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "metabaiji-pod\n=============\n\n|pip install| |version| |python versions| |build status| |last commit|\n|open pull requests|\n\nThis is an active fork of\n`baiji-pod <https://github.com/bodylabs/baiji-pod>`__, Body Labs\u2019 asset\ncache for S3 using `baiji <https://github.com/bodylabs/baiji>`__.\n\nThe fork\u2019s goals are modest:\n\n-  Keep the library working in current versions of Python and other\n   tools.\n-  Make bug fixes.\n-  Provide API stability and backward compatibility with the upstream\n   version.\n-  Respond to community contributions.\n\nIt\u2019s used by related forks such as\n`lace <https://github.com/metabolize/lace>`__.\n\nInstallation\n------------\n\nInstall the fork:\n\n.. code:: sh\n\n   pip install metabaiji-pod\n\nAnd import it just like the upstream library:\n\n.. code:: py\n\n   from baiji.pod import AssetCache\n   from baiji.pod import Config\n   from baiji.pod import VersionedCache\n\nOverview\n--------\n\nVersioned-tracked assets and a low-level asset cache for Amazon S3,\nusing `baiji <https://github.com/bodylabs/baiji>`__.\n\nFeatures\n--------\n\n-  Versioned cache for version-tracked assets\n\n   -  Creates a new file each time it changes\n   -  Using a checked-in manifest, each revision of the code is pinned\n      to a given version of the file\n   -  Convenient CLI for pushing updates\n\n-  Low-level asset cache, for any S3 path\n\n   -  Assets are stored locally, and revalidated after a timeout\n\n-  Prefill tool populates the caches with a list of needed assets\n-  Supports Python 2.7\n-  Supports OS X, Linux, and Windows\n\n   -  A few dev features only work on OS X\n\n-  Tested and production-hardened\n\nThe versioned cache\n~~~~~~~~~~~~~~~~~~~\n\nThe versioned cache provides access to a repository of files. The\nchanges to those files are tracked and identified with to a semver-like\nversion number.\n\nTo use the versioned cache, you need a copy of a manifest file, which\nlists all the versioned paths and the latest version of each one. When\nyou request a file from the cache, it consults this manifest file to\ndetermine the correct version. The versioned cache delegates loading to\nthe underlying asset cache.\n\nThe versioned cache was designed for compute assets: chunks of data\nwhich are used in code. When the manifest is checked in with the code,\nit pins the version of each asset. If the asset is subsequently updated,\nthat revision of the code will continue to get the version it\u2019s\nexpecting.\n\nThe bucket containing the versioned assets is intended to be immutable.\nNothing there should ever be changed or deleted. Only new versions\nadded.\n\nThe manifest looks like this:\n\n.. code:: json\n\n   {\n       \"/foo/bar.csv\": \"1.2.5\",\n       \"/foo/bar.json\": \"0.1.6\"\n   }\n\nTo load a versioned asset:\n\n::\n\n   import json\n   from baiji.pod import AssetCache\n   from baiji.pod import Config\n   from baiji.pod import VersionedCache\n\n   config = Config()\n   # Improve performance by assuming the bucket is immutable.\n   config.IMMUTABLE_BUCKETS = ['my-versioned-assets']\n\n   vc = VersionedCache(\n       cache=AssetCache(config),\n       manifest_path='versioned_assets.json',\n       bucket='my-versioned-assets')\n\n   with open(vc('/foo/bar.json'), 'r') as f:\n       data = json.load(f)\n\nOr, with\n```baiji-serialization`` <https://github.com/bodylabs/baiji-serialization>`__:\n\n::\n\n   from baiji.serialization import json\n   data = json.load(vc('s3://example-bucket/example.json'))\n\nTo add a new versioned path, or update an existing one, use the ``vc``\ncommand-line tool:\n\n::\n\n   vc add /foo/bar.csv ~/Desktop/bar.csv\n   vc update --major /foo/bar.csv ~/Desktop/new_bar.csv\n   vc update --minor /foo/bar.csv ~/Desktop/new_bar.csv\n   vc update --patch /foo/bar.csv ~/Desktop/new_bar.csv\n\nA VersionedCache object is specific to a manifest file and a bucket.\n\nThough the version number uses semver-like semantics, the cache ignores\nversion semantics. The manifest pins an exact version number.\n\nThe asset cache\n~~~~~~~~~~~~~~~\n\nThe asset cache works at a lower level of abstraction. It holds local\ncopies of arbitrary S3 assets. Calling the ``cache()`` function with an\nS3 path ensures that the file is available locally, and then returns a\nvalid, local path.\n\nOn a cache miss, the file is downloaded to the cache and then its local\npath is returned. Subsequent calls will return the same local path.\nAfter a timeout, which defaults to one day, the validity of the local\nfile is checked by comparing a local MD5 hash with the remote etag. This\ncheck is repeated once per day.\n\nTo gain a performance boost, you can configure immutable buckets, whose\ncontents are never revalidated after download. The versioned cache uses\nthis feature.\n\n::\n\n   import json\n   from baiji.pod import AssetCache\n\n   cache = AssetCache.create_default()\n\n   with open(cache('s3://example-bucket/example.json'), 'r') as f:\n       data = json.load(f)\n\nOr, with\n```baiji-serialization`` <https://github.com/bodylabs/baiji-serialization>`__:\n\n::\n\n   from baiji.serialization import json\n   data = json.load(cache('s3://example-bucket/example.json'))\n\nIt is safe to call ``cache`` multiple times: ``cache(cache('path'))``\nwill behave correctly.\n\nTips\n----\n\nWhen you\u2019re developing, you often want to try out variations on a file\nbefore committing to a particular one. Rather than incrementing the\npatch level over and over, you can set ``manifest.json`` to include an\nabsolute path:\n\n::\n\n       \"/foo/bar.csv\": \"/Users/me/Desktop/foo.obj\",\n\nThis can be either a local or an s3 path; use local if you\u2019re iterating\nby yourself, and s3 to iterate with other developers or in CI.\n\nDevelopment\n-----------\n\n.. code:: sh\n\n   pip install -r requirements_dev.txt\n   rake unittest\n   rake lint\n\nTODO\n----\n\n-  Add vc config to config\n\n   -  Explain or clean up the weird default_bucket config logic in\n      prefill_runner. e.g.\u00a0This logic is so that we can have a\n      customized script in core that doesn\u2019t require these arguments.\n\n-  Use config without subclassing. Pass overries to init\n-  Configure using an importable config path instead of injecting. Or,\n   possibly, allow ~/.aws/baiji_config to change defaults.\n-  Rework baiji.pod.util.reachability and perhaps\n   baiji.util.reachability as well.\n-  Restore CDN publish functionality in core\n-  Avoid using actual versioned assets. Perhaps write some (smaller!)\n   files to a test bucket and use those?\n-  Remove suffixes support in vc.uri, used only for CDNPublisher\n-  Move yaml.dump and json.\\* to baiji. Possibly do a\n   ``try: from baiji.serialization.json import load, dump; except ImportError: def load(...``\n   Or at least have a comment to the effect of \u201cdon\u2019t use this, use\n   baiji.serialization.json\u201d\n-  Use consistent argparse pattern in the runners.\n-  I think it would be better if the CacheFile didn\u2019t need to know about\n   the AssetCache, to avoid this bi-directional dependency. It\u2019s only\n   required in the constructor, but that could live on the AssetCache,\n   e.g. create_cache_file(path, bucket=None).\n\nContribute\n----------\n\n-  Issue Tracker: https://github.com/metabolize/baiji-pod/issues\n-  Source Code: https://github.com/metabolize/baiji-pod\n\nPull requests welcome!\n\nSupport\n-------\n\nIf you are having issues, please let us know.\n\nAcknowledgements\n----------------\n\nbaiji-pod was developed at Body Labs, primarily by `Alex\nWeiss <https://github.com/algrs>`__ and `Paul\nMelnikow <https://github.com/paulmelnikow>`__.\n\nLicense\n-------\n\nThe project is licensed under the Apache license, version 2.0.\n\n.. |pip install| image:: https://img.shields.io/badge/pip%20install-metabaiji--pod-f441b8.svg?style=flat-square\n   :target: https://pypi.org/project/metabaiji-pod/\n.. |version| image:: https://img.shields.io/pypi/v/metabaiji-pod.svg?style=flat-square\n   :target: https://pypi.org/project/metabaiji-pod/\n.. |python versions| image:: https://img.shields.io/pypi/pyversions/metabaiji-pod.svg?style=flat-square\n   :target: https://pypi.org/project/metabaiji-pod/\n.. |build status| image:: https://img.shields.io/circleci/project/github/metabolize/baiji-pod/master.svg?style=flat-square\n   :target: https://circleci.com/gh/metabolize/baiji-pod\n.. |last commit| image:: https://img.shields.io/github/last-commit/metabolize/baiji-pod.svg?style=flat-square\n   :target: https://github.com/metabolize/baiji-pod/commits/master\n.. |open pull requests| image:: https://img.shields.io/github/issues-pr/metabolize/baiji-pod.svg?style=flat-square\n   :target: https://github.com/metabolize/baiji-pod/pulls", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/metabolize/baiji-pod", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "metabaiji-pod", "package_url": "https://pypi.org/project/metabaiji-pod/", "platform": "", "project_url": "https://pypi.org/project/metabaiji-pod/", "project_urls": {"Homepage": "https://github.com/metabolize/baiji-pod"}, "release_url": "https://pypi.org/project/metabaiji-pod/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Active fork of baiji-pod, Body Labs' asset cache for S3 using baiji", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/metabaiji-pod/\" rel=\"nofollow\"><img alt=\"pip install\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c6c7786a090927d21b3caac1cc17837dd6bafcf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706970253230696e7374616c6c2d6d6574616261696a692d2d706f642d6634343162382e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.org/project/metabaiji-pod/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edc2e5646faf2b2a3dd2573636e0015c7ad17867/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6574616261696a692d706f642e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.org/project/metabaiji-pod/\" rel=\"nofollow\"><img alt=\"python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a66f8e1f2687a34f343e23f6389a8bfb9fdd48d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6574616261696a692d706f642e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://circleci.com/gh/metabolize/baiji-pod\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55ec60fc3b3eb65f8cd450783d5995b9fd9fc09b/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6d657461626f6c697a652f6261696a692d706f642f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://github.com/metabolize/baiji-pod/commits/master\" rel=\"nofollow\"><img alt=\"last commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d112371371972ad1bb8f27020df8b863822f2a92/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6d657461626f6c697a652f6261696a692d706f642e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/metabolize/baiji-pod/pulls\" rel=\"nofollow\"><img alt=\"open pull requests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2435bc91c306c25753d2a55be315eb4b8d01a719/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6d657461626f6c697a652f6261696a692d706f642e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>This is an active fork of\n<a href=\"https://github.com/bodylabs/baiji-pod\" rel=\"nofollow\">baiji-pod</a>, Body Labs\u2019 asset\ncache for S3 using <a href=\"https://github.com/bodylabs/baiji\" rel=\"nofollow\">baiji</a>.</p>\n<p>The fork\u2019s goals are modest:</p>\n<ul>\n<li>Keep the library working in current versions of Python and other\ntools.</li>\n<li>Make bug fixes.</li>\n<li>Provide API stability and backward compatibility with the upstream\nversion.</li>\n<li>Respond to community contributions.</li>\n</ul>\n<p>It\u2019s used by related forks such as\n<a href=\"https://github.com/metabolize/lace\" rel=\"nofollow\">lace</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the fork:</p>\n<pre>pip install metabaiji-pod\n</pre>\n<p>And import it just like the upstream library:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baiji.pod</span> <span class=\"kn\">import</span> <span class=\"n\">AssetCache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baiji.pod</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baiji.pod</span> <span class=\"kn\">import</span> <span class=\"n\">VersionedCache</span>\n</pre>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>Versioned-tracked assets and a low-level asset cache for Amazon S3,\nusing <a href=\"https://github.com/bodylabs/baiji\" rel=\"nofollow\">baiji</a>.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Versioned cache for version-tracked assets<ul>\n<li>Creates a new file each time it changes</li>\n<li>Using a checked-in manifest, each revision of the code is pinned\nto a given version of the file</li>\n<li>Convenient CLI for pushing updates</li>\n</ul>\n</li>\n<li>Low-level asset cache, for any S3 path<ul>\n<li>Assets are stored locally, and revalidated after a timeout</li>\n</ul>\n</li>\n<li>Prefill tool populates the caches with a list of needed assets</li>\n<li>Supports Python 2.7</li>\n<li>Supports OS X, Linux, and Windows<ul>\n<li>A few dev features only work on OS X</li>\n</ul>\n</li>\n<li>Tested and production-hardened</li>\n</ul>\n<div id=\"the-versioned-cache\">\n<h3>The versioned cache</h3>\n<p>The versioned cache provides access to a repository of files. The\nchanges to those files are tracked and identified with to a semver-like\nversion number.</p>\n<p>To use the versioned cache, you need a copy of a manifest file, which\nlists all the versioned paths and the latest version of each one. When\nyou request a file from the cache, it consults this manifest file to\ndetermine the correct version. The versioned cache delegates loading to\nthe underlying asset cache.</p>\n<p>The versioned cache was designed for compute assets: chunks of data\nwhich are used in code. When the manifest is checked in with the code,\nit pins the version of each asset. If the asset is subsequently updated,\nthat revision of the code will continue to get the version it\u2019s\nexpecting.</p>\n<p>The bucket containing the versioned assets is intended to be immutable.\nNothing there should ever be changed or deleted. Only new versions\nadded.</p>\n<p>The manifest looks like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"/foo/bar.csv\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.2.5\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"/foo/bar.json\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.1.6\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To load a versioned asset:</p>\n<pre>import json\nfrom baiji.pod import AssetCache\nfrom baiji.pod import Config\nfrom baiji.pod import VersionedCache\n\nconfig = Config()\n# Improve performance by assuming the bucket is immutable.\nconfig.IMMUTABLE_BUCKETS = ['my-versioned-assets']\n\nvc = VersionedCache(\n    cache=AssetCache(config),\n    manifest_path='versioned_assets.json',\n    bucket='my-versioned-assets')\n\nwith open(vc('/foo/bar.json'), 'r') as f:\n    data = json.load(f)\n</pre>\n<p>Or, with\n<tt><span class=\"pre\">`baiji-serialization</span></tt> &lt;<a href=\"https://github.com/bodylabs/baiji-serialization\" rel=\"nofollow\">https://github.com/bodylabs/baiji-serialization</a>&gt;`__:</p>\n<pre>from baiji.serialization import json\ndata = json.load(vc('s3://example-bucket/example.json'))\n</pre>\n<p>To add a new versioned path, or update an existing one, use the <tt>vc</tt>\ncommand-line tool:</p>\n<pre>vc add /foo/bar.csv ~/Desktop/bar.csv\nvc update --major /foo/bar.csv ~/Desktop/new_bar.csv\nvc update --minor /foo/bar.csv ~/Desktop/new_bar.csv\nvc update --patch /foo/bar.csv ~/Desktop/new_bar.csv\n</pre>\n<p>A VersionedCache object is specific to a manifest file and a bucket.</p>\n<p>Though the version number uses semver-like semantics, the cache ignores\nversion semantics. The manifest pins an exact version number.</p>\n</div>\n<div id=\"the-asset-cache\">\n<h3>The asset cache</h3>\n<p>The asset cache works at a lower level of abstraction. It holds local\ncopies of arbitrary S3 assets. Calling the <tt>cache()</tt> function with an\nS3 path ensures that the file is available locally, and then returns a\nvalid, local path.</p>\n<p>On a cache miss, the file is downloaded to the cache and then its local\npath is returned. Subsequent calls will return the same local path.\nAfter a timeout, which defaults to one day, the validity of the local\nfile is checked by comparing a local MD5 hash with the remote etag. This\ncheck is repeated once per day.</p>\n<p>To gain a performance boost, you can configure immutable buckets, whose\ncontents are never revalidated after download. The versioned cache uses\nthis feature.</p>\n<pre>import json\nfrom baiji.pod import AssetCache\n\ncache = AssetCache.create_default()\n\nwith open(cache('s3://example-bucket/example.json'), 'r') as f:\n    data = json.load(f)\n</pre>\n<p>Or, with\n<tt><span class=\"pre\">`baiji-serialization</span></tt> &lt;<a href=\"https://github.com/bodylabs/baiji-serialization\" rel=\"nofollow\">https://github.com/bodylabs/baiji-serialization</a>&gt;`__:</p>\n<pre>from baiji.serialization import json\ndata = json.load(cache('s3://example-bucket/example.json'))\n</pre>\n<p>It is safe to call <tt>cache</tt> multiple times: <tt><span class=\"pre\">cache(cache('path'))</span></tt>\nwill behave correctly.</p>\n</div>\n</div>\n<div id=\"tips\">\n<h2>Tips</h2>\n<p>When you\u2019re developing, you often want to try out variations on a file\nbefore committing to a particular one. Rather than incrementing the\npatch level over and over, you can set <tt>manifest.json</tt> to include an\nabsolute path:</p>\n<pre>\"/foo/bar.csv\": \"/Users/me/Desktop/foo.obj\",\n</pre>\n<p>This can be either a local or an s3 path; use local if you\u2019re iterating\nby yourself, and s3 to iterate with other developers or in CI.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<pre>pip install -r requirements_dev.txt\nrake unittest\nrake lint\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Add vc config to config<ul>\n<li>Explain or clean up the weird default_bucket config logic in\nprefill_runner. e.g.\u00a0This logic is so that we can have a\ncustomized script in core that doesn\u2019t require these arguments.</li>\n</ul>\n</li>\n<li>Use config without subclassing. Pass overries to init</li>\n<li>Configure using an importable config path instead of injecting. Or,\npossibly, allow ~/.aws/baiji_config to change defaults.</li>\n<li>Rework baiji.pod.util.reachability and perhaps\nbaiji.util.reachability as well.</li>\n<li>Restore CDN publish functionality in core</li>\n<li>Avoid using actual versioned assets. Perhaps write some (smaller!)\nfiles to a test bucket and use those?</li>\n<li>Remove suffixes support in vc.uri, used only for CDNPublisher</li>\n<li>Move yaml.dump and json.* to baiji. Possibly do a\n<tt>try: from baiji.serialization.json import load, dump; except ImportError: def <span class=\"pre\">load(...</span></tt>\nOr at least have a comment to the effect of \u201cdon\u2019t use this, use\nbaiji.serialization.json\u201d</li>\n<li>Use consistent argparse pattern in the runners.</li>\n<li>I think it would be better if the CacheFile didn\u2019t need to know about\nthe AssetCache, to avoid this bi-directional dependency. It\u2019s only\nrequired in the constructor, but that could live on the AssetCache,\ne.g. create_cache_file(path, bucket=None).</li>\n</ul>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<ul>\n<li>Issue Tracker: <a href=\"https://github.com/metabolize/baiji-pod/issues\" rel=\"nofollow\">https://github.com/metabolize/baiji-pod/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/metabolize/baiji-pod\" rel=\"nofollow\">https://github.com/metabolize/baiji-pod</a></li>\n</ul>\n<p>Pull requests welcome!</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>If you are having issues, please let us know.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>baiji-pod was developed at Body Labs, primarily by <a href=\"https://github.com/algrs\" rel=\"nofollow\">Alex\nWeiss</a> and <a href=\"https://github.com/paulmelnikow\" rel=\"nofollow\">Paul\nMelnikow</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The project is licensed under the Apache license, version 2.0.</p>\n</div>\n\n          </div>"}, "last_serial": 5744048, "releases": {"1.0.7.post1": [{"comment_text": "", "digests": {"md5": "929282b125d737cd6ff0fc3fabf04482", "sha256": "0bd9151c8fabb34efaa8261fbc6223c201a06c599264ef977e966b928a4316e2"}, "downloads": -1, "filename": "metabaiji-pod-1.0.7.post1.tar.gz", "has_sig": false, "md5_digest": "929282b125d737cd6ff0fc3fabf04482", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24481, "upload_time": "2018-09-09T01:47:25", "upload_time_iso_8601": "2018-09-09T01:47:25.089165Z", "url": "https://files.pythonhosted.org/packages/56/93/76d6ae5b04dc65be16d0c832ea837744c4850747cc8f05a58cee2463ef76/metabaiji-pod-1.0.7.post1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8704aa3b8a7f88955b326c5555cb0800", "sha256": "23f94a1e1c958f93c484b7881bd77df1dbaa5edb9d61290d4dbafa4cb1c39664"}, "downloads": -1, "filename": "metabaiji-pod-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8704aa3b8a7f88955b326c5555cb0800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24548, "upload_time": "2019-08-28T17:14:04", "upload_time_iso_8601": "2019-08-28T17:14:04.460414Z", "url": "https://files.pythonhosted.org/packages/fc/9f/3f584cf5df480d99bed691d5caba1f4e25d4866906ee95ba534d0cc1ef11/metabaiji-pod-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7f7faf83b736033ef68fe96750b12c79", "sha256": "5758345d5e817c71db26e2e394b2e3b8f10feb457c9b0cf69cba9d478109bb7a"}, "downloads": -1, "filename": "metabaiji-pod-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7f7faf83b736033ef68fe96750b12c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24549, "upload_time": "2019-08-28T17:19:49", "upload_time_iso_8601": "2019-08-28T17:19:49.179657Z", "url": "https://files.pythonhosted.org/packages/09/b9/378eb55b06b7fdcff5e91fdc2f973382d39587cae63412975f12480a6e55/metabaiji-pod-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f7faf83b736033ef68fe96750b12c79", "sha256": "5758345d5e817c71db26e2e394b2e3b8f10feb457c9b0cf69cba9d478109bb7a"}, "downloads": -1, "filename": "metabaiji-pod-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7f7faf83b736033ef68fe96750b12c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24549, "upload_time": "2019-08-28T17:19:49", "upload_time_iso_8601": "2019-08-28T17:19:49.179657Z", "url": "https://files.pythonhosted.org/packages/09/b9/378eb55b06b7fdcff5e91fdc2f973382d39587cae63412975f12480a6e55/metabaiji-pod-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:00 2020"}