{"info": {"author": "Marko Ristin", "author_email": "marko.ristin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "sphinx-icontract\n================\n\n.. image:: https://api.travis-ci.com/Parquery/sphinx-icontract.svg?branch=master\n    :target: https://api.travis-ci.com/Parquery/sphinx-icontract.svg?branch=master\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/Parquery/sphinx-icontract/badge.svg?branch=master\n    :target: https://coveralls.io/github/Parquery/sphinx-icontract?branch=master\n    :alt: Coverage\n\n.. image:: https://badge.fury.io/py/sphinx-icontract.svg\n    :target: https://pypi.org/project/sphinx-icontract/\n    :alt: PyPi\n\n.. image:: https://img.shields.io/pypi/pyversions/sphinx-icontract.svg\n    :alt: PyPI - Python Version\n\nSphinx-icontract extends Sphinx to include icontracts of classes and functions in the documentation.\n\nUsage\n=====\nSphinx-icontract is based on the `sphinx.ext.autodoc` module. You need to specify both modules in\n``extensions`` of your Sphinx configuration file (``conf.py``).\n\nHere is an example excerpt:\n\n.. code-block:: python\n\n    # Add any Sphinx extension module names here, as strings. They can be\n    # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n    # ones.\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinx_icontract'\n    ]\n\nImplications\n------------\nSphinx-icontract tries to infer the implications from the conditions and render them as implication (``... \u21d2 ...``).\nWe implemented a rule-based matching that covers most of the practical use cases:\n\n* ``not A or B`` is translated to ``A \u21d2 B``.\n* Expressions are negated, so ``x < y or B`` is translated to ``x >= y \u21d2 B``. More general expressions are negated with\n  ``not``: from ``x.y() or B`` to ``not x.y() \u21d2 B``.\n* If-Expressions are translated from ``B if A else True`` to ``A \u21d2 B``.\n\nWe found implications in form of if-expressions to be confusing when read in source code and encourage programmers\nto use disjunction form instead.\n\nCustom Errors\n-------------\nIf you specify custom errors in the contract, sphinx-icontract will try to include the error in the documentation.\n\nThe error type will be inferred from the contract's ``error`` argument. If the error message is given\nas a string literal and there is no contract description, the error message will be used to describe the contract\nso that you do not have to specify the description twice (once in the description of the contract and once\nin the error message).\n\nFor example:\n\n.. code-block:: python\n\n        @icontract.pre(lambda x: x > 0, error=lambda: ValueError(\"x positive\"))\n        def some_func(x: int) -> None:\n            pass\n\nwill be documented as:\n\n.. code-block:: reStructuredText\n\n    :requires:\n                            * :code:`x > 0` (x positive; raise :py:class:`ValueError`)\n\nIf both the description and the error message are given, only the description will be included:\n\n.. code-block:: python\n\n        @icontract.pre(lambda x: x > 0, description=\"x must be positive\", error=lambda: ValueError(\"x positive\"))\n        def some_func(x: int) -> None:\n            pass\n\nwill be rendered as:\n\n.. code-block:: reStructuredText\n\n    :requires:\n        * :code:`x > 0` (x must be positive; raise :py:class:`ValueError`)\n\n.. danger::\n    Be careful when you write contracts with custom errors which are included in the documentation. This might\n    lead the caller to (ab)use the contracts as a control flow mechanism.\n\n    In that case, the user will expect that the contract is *always* enabled and not only during debug or test.\n    (For example, whenever you run `python` interpreter with ``-O`` or ``-OO``, ``__debug__`` will be `False`.\n    If you passed ``__debug__`` to your contract's ``enabled`` argument, the contract will *not* be verified in\n    ``-O`` mode.)\n\nInstallation\n============\n\n* Install sphinx-icontract with pip:\n\n.. code-block:: bash\n\n    pip3 install sphinx-icontract\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\nWe use tox for testing and packaging the distribution:\n\n.. code-block:: bash\n\n    tox\n\nPre-commit Checks\n-----------------\nWe provide a set of pre-commit checks that lint and check code for formatting.\n\nNamely, we use:\n\n* `yapf <https://github.com/google/yapf>`_ to check the formatting.\n* The style of the docstrings is checked with `pydocstyle <https://github.com/PyCQA/pydocstyle>`_.\n* Static type analysis is performed with `mypy <http://mypy-lang.org/>`_.\n* Various linter checks are done with `pylint <https://www.pylint.org/>`_.\n* Contracts are linted with `pyicontract-lint <https://github.com/Parquery/pyicontract-lint>`_.\n* Doctests are executed using the Python `doctest module <https://docs.python.org/3.5/library/doctest.html>`_.\n\nRun the pre-commit checks locally from an activated virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/sphinx-icontract", "keywords": "contracts sphinx extension icontract design-by-contract", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "sphinx-icontract", "package_url": "https://pypi.org/project/sphinx-icontract/", "platform": "", "project_url": "https://pypi.org/project/sphinx-icontract/", "project_urls": {"Homepage": "https://github.com/Parquery/sphinx-icontract"}, "release_url": "https://pypi.org/project/sphinx-icontract/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "Extend sphinx to include icontracts.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"sphinx-icontract\">\n<h2>sphinx-icontract</h2>\n<a href=\"https://api.travis-ci.com/Parquery/sphinx-icontract.svg?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f55955fb930fdc3ff09eee2a7c4c65fee25000e6/68747470733a2f2f6170692e7472617669732d63692e636f6d2f50617271756572792f737068696e782d69636f6e74726163742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Parquery/sphinx-icontract?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/617392b8ed80cbd0b8d27c82c6a50107571188ca/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50617271756572792f737068696e782d69636f6e74726163742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/sphinx-icontract/\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e60a27eb022b0c772bc0b2d02c8e8af273d50bee/68747470733a2f2f62616467652e667572792e696f2f70792f737068696e782d69636f6e74726163742e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26b023f09f746a86b9e49e9ab625959de96823fe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f737068696e782d69636f6e74726163742e737667\">\n<p>Sphinx-icontract extends Sphinx to include icontracts of classes and functions in the documentation.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Sphinx-icontract is based on the <cite>sphinx.ext.autodoc</cite> module. You need to specify both modules in\n<tt>extensions</tt> of your Sphinx configuration file (<tt>conf.py</tt>).</p>\n<p>Here is an example excerpt:</p>\n<pre><span class=\"c1\"># Add any Sphinx extension module names here, as strings. They can be</span>\n<span class=\"c1\"># extensions coming with Sphinx (named 'sphinx.ext.*') or your custom</span>\n<span class=\"c1\"># ones.</span>\n<span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'sphinx.ext.autodoc'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sphinx_icontract'</span>\n<span class=\"p\">]</span>\n</pre>\n<div id=\"implications\">\n<h3>Implications</h3>\n<p>Sphinx-icontract tries to infer the implications from the conditions and render them as implication (<tt>... \u21d2 ...</tt>).\nWe implemented a rule-based matching that covers most of the practical use cases:</p>\n<ul>\n<li><tt>not A or B</tt> is translated to <tt>A \u21d2 B</tt>.</li>\n<li>Expressions are negated, so <tt>x &lt; y or B</tt> is translated to <tt>x &gt;= y \u21d2 B</tt>. More general expressions are negated with\n<tt>not</tt>: from <tt>x.y() or B</tt> to <tt>not x.y() \u21d2 B</tt>.</li>\n<li>If-Expressions are translated from <tt>B if A else True</tt> to <tt>A \u21d2 B</tt>.</li>\n</ul>\n<p>We found implications in form of if-expressions to be confusing when read in source code and encourage programmers\nto use disjunction form instead.</p>\n</div>\n<div id=\"custom-errors\">\n<h3>Custom Errors</h3>\n<p>If you specify custom errors in the contract, sphinx-icontract will try to include the error in the documentation.</p>\n<p>The error type will be inferred from the contract\u2019s <tt>error</tt> argument. If the error message is given\nas a string literal and there is no contract description, the error message will be used to describe the contract\nso that you do not have to specify the description twice (once in the description of the contract and once\nin the error message).</p>\n<p>For example:</p>\n<pre><span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">pre</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"x positive\"</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>will be documented as:</p>\n<pre><span class=\"nc\">:requires:</span>\n                        <span class=\"m\">*</span> <span class=\"na\">:code:</span><span class=\"nv\">`x &gt; 0`</span> (x positive; raise <span class=\"na\">:py:class:</span><span class=\"nv\">`ValueError`</span>)\n</pre>\n<p>If both the description and the error message are given, only the description will be included:</p>\n<pre><span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">pre</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"x must be positive\"</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"x positive\"</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>will be rendered as:</p>\n<pre><span class=\"nc\">:requires:</span>\n    <span class=\"m\">*</span> <span class=\"na\">:code:</span><span class=\"nv\">`x &gt; 0`</span> (x must be positive; raise <span class=\"na\">:py:class:</span><span class=\"nv\">`ValueError`</span>)\n</pre>\n<div>\n<p>!DANGER!</p>\n<p>Be careful when you write contracts with custom errors which are included in the documentation. This might\nlead the caller to (ab)use the contracts as a control flow mechanism.</p>\n<p>In that case, the user will expect that the contract is <em>always</em> enabled and not only during debug or test.\n(For example, whenever you run <cite>python</cite> interpreter with <tt><span class=\"pre\">-O</span></tt> or <tt><span class=\"pre\">-OO</span></tt>, <tt>__debug__</tt> will be <cite>False</cite>.\nIf you passed <tt>__debug__</tt> to your contract\u2019s <tt>enabled</tt> argument, the contract will <em>not</em> be verified in\n<tt><span class=\"pre\">-O</span></tt> mode.)</p>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Install sphinx-icontract with pip:</li>\n</ul>\n<pre>pip3 install sphinx-icontract\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>We use tox for testing and packaging the distribution:</p>\n<pre>tox\n</pre>\n<div id=\"pre-commit-checks\">\n<h3>Pre-commit Checks</h3>\n<p>We provide a set of pre-commit checks that lint and check code for formatting.</p>\n<p>Namely, we use:</p>\n<ul>\n<li><a href=\"https://github.com/google/yapf\" rel=\"nofollow\">yapf</a> to check the formatting.</li>\n<li>The style of the docstrings is checked with <a href=\"https://github.com/PyCQA/pydocstyle\" rel=\"nofollow\">pydocstyle</a>.</li>\n<li>Static type analysis is performed with <a href=\"http://mypy-lang.org/\" rel=\"nofollow\">mypy</a>.</li>\n<li>Various linter checks are done with <a href=\"https://www.pylint.org/\" rel=\"nofollow\">pylint</a>.</li>\n<li>Contracts are linted with <a href=\"https://github.com/Parquery/pyicontract-lint\" rel=\"nofollow\">pyicontract-lint</a>.</li>\n<li>Doctests are executed using the Python <a href=\"https://docs.python.org/3.5/library/doctest.html\" rel=\"nofollow\">doctest module</a>.</li>\n</ul>\n<p>Run the pre-commit checks locally from an activated virtual environment with development dependencies:</p>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548189, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5f7030d83490a46433467d3649b64ae8", "sha256": "c056c940b0453d03d281b29035124da9921de6b7768be181e38ce0a4c757249f"}, "downloads": -1, "filename": "sphinx-icontract-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5f7030d83490a46433467d3649b64ae8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4346, "upload_time": "2018-09-22T07:59:25", "upload_time_iso_8601": "2018-09-22T07:59:25.398779Z", "url": "https://files.pythonhosted.org/packages/39/bf/0a008c118593a7e7ca9391f44519db8d206bc945b8ac3d82b652ed82fdf2/sphinx-icontract-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7b93ae5f641489e89b38dc2873f03217", "sha256": "2c59c67854ca5f5fa0a20f4bdf412f536ab136a6485bd59d270f956cc15e3ed2"}, "downloads": -1, "filename": "sphinx-icontract-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7b93ae5f641489e89b38dc2873f03217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4349, "upload_time": "2018-09-22T08:22:49", "upload_time_iso_8601": "2018-09-22T08:22:49.822612Z", "url": "https://files.pythonhosted.org/packages/79/54/e2a4f335321a712b99385bd046afbe7e11dfea417162707f501cdd624ffb/sphinx-icontract-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "83493389fe28cc3a0223441efd93e13f", "sha256": "7fe7b510ca74c58c1d65464b7ecbeb35d7cf9604212e534f070a74377cf24f3c"}, "downloads": -1, "filename": "sphinx-icontract-1.1.0.tar.gz", "has_sig": false, "md5_digest": "83493389fe28cc3a0223441efd93e13f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5084, "upload_time": "2018-09-27T21:32:40", "upload_time_iso_8601": "2018-09-27T21:32:40.117613Z", "url": "https://files.pythonhosted.org/packages/ac/10/fef39c82aeb6d38a76375de8e89570e2ad6efa79296fd5a4e1ebb78105b6/sphinx-icontract-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0d9799870d01c2dc49fca131cfea3021", "sha256": "b6854458bced75e26e4fafe1803759ae64b88a56640a0632459bfdf60ab753b5"}, "downloads": -1, "filename": "sphinx-icontract-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0d9799870d01c2dc49fca131cfea3021", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5084, "upload_time": "2018-10-10T05:44:12", "upload_time_iso_8601": "2018-10-10T05:44:12.249883Z", "url": "https://files.pythonhosted.org/packages/5d/ad/95059b24cb52b04ff63601c682c924d2b3b0b51f86e2a517386346d02e44/sphinx-icontract-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "793485e4a9092671a0e5e2fb61d475c9", "sha256": "72ada9b54ee69a4e1138b01512d92a1bab8ce5ef50d456f8dd544f5afa7d5c06"}, "downloads": -1, "filename": "sphinx-icontract-1.2.0.tar.gz", "has_sig": false, "md5_digest": "793485e4a9092671a0e5e2fb61d475c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6105, "upload_time": "2018-10-18T07:07:24", "upload_time_iso_8601": "2018-10-18T07:07:24.659346Z", "url": "https://files.pythonhosted.org/packages/0e/e6/796f45877d7ef0e00ae90e502b886fb5692516e840a4013b4bf6646471b0/sphinx-icontract-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "0fedefabcf305ee6399d577127200be0", "sha256": "aca72303e386e4ea56aeb57732ed2fff86360752ddad6645685f963a13bdf151"}, "downloads": -1, "filename": "sphinx-icontract-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0fedefabcf305ee6399d577127200be0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6926, "upload_time": "2018-10-20T06:59:50", "upload_time_iso_8601": "2018-10-20T06:59:50.120952Z", "url": "https://files.pythonhosted.org/packages/e3/2b/1e490f241a17aeb4f556055d4fa51bb459b482aff958a6aa257961ccfcd0/sphinx-icontract-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "677a75f28f93da82083577475a7d316e", "sha256": "27274377bf844eb12de0701e37320d405fea5c0d98bf39ab4ff2b25452198428"}, "downloads": -1, "filename": "sphinx-icontract-1.3.1.tar.gz", "has_sig": false, "md5_digest": "677a75f28f93da82083577475a7d316e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6954, "upload_time": "2018-10-21T05:51:12", "upload_time_iso_8601": "2018-10-21T05:51:12.387742Z", "url": "https://files.pythonhosted.org/packages/08/b0/84cde2c493dbc115f499f62f7fc3448d09f5aa1c780f85279801e8a2a37a/sphinx-icontract-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "eea3e261381087d73e8af381c9894ed7", "sha256": "c8315afb84174fe462e229334cffb89bb6838050ef5a1c0a452818c620692a24"}, "downloads": -1, "filename": "sphinx-icontract-1.4.0.tar.gz", "has_sig": false, "md5_digest": "eea3e261381087d73e8af381c9894ed7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8627, "upload_time": "2018-10-23T06:06:40", "upload_time_iso_8601": "2018-10-23T06:06:40.225191Z", "url": "https://files.pythonhosted.org/packages/63/9b/9704e468b18b18d0192acbc28a8ae9b9d230055208414f90d2088ae71ce9/sphinx-icontract-1.4.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "8b41edd5dd2180e3768b890670a245ba", "sha256": "cd5e672de20eabce152cd99c86e0f20addb8899b6eb564f580fd92ad1fa5353c"}, "downloads": -1, "filename": "sphinx-icontract-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8b41edd5dd2180e3768b890670a245ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8625, "upload_time": "2018-10-24T05:30:40", "upload_time_iso_8601": "2018-10-24T05:30:40.997013Z", "url": "https://files.pythonhosted.org/packages/28/e0/e839cfed8759daa8a31a1ec74212f21a27d4ece34e340c020dd7a539c089/sphinx-icontract-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b41edd5dd2180e3768b890670a245ba", "sha256": "cd5e672de20eabce152cd99c86e0f20addb8899b6eb564f580fd92ad1fa5353c"}, "downloads": -1, "filename": "sphinx-icontract-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8b41edd5dd2180e3768b890670a245ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8625, "upload_time": "2018-10-24T05:30:40", "upload_time_iso_8601": "2018-10-24T05:30:40.997013Z", "url": "https://files.pythonhosted.org/packages/28/e0/e839cfed8759daa8a31a1ec74212f21a27d4ece34e340c020dd7a539c089/sphinx-icontract-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:05 2020"}