{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: Freeware", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Education", "Topic :: Software Development", "Topic :: Software Development :: Testing"], "description": "vpltest\r\n=======\r\n\r\nBackground\r\n----------\r\nVPL (http://vpl.dis.ulpgc.es/) allows customizing evaluation process with custom execution files. This can be used for testing students' submissions with professional testing frameworks. ``vpltest`` makes this easier for Python assignments by translating output from `nose <https://nose.readthedocs.org>`_ or `pytest <http://pytest.org>`_ to the format required by VPL. \r\n\r\n.. note::\r\n\r\n    You may want to use ``vpltest`` together with `edutest <http://edutest.readthedocs.org>`_.\r\n\r\nBasic usage\r\n-----------\r\n1. Write normal `unittest <https://docs.python.org/3/library/unittest.html>`_, `nose <https://nose.readthedocs.org>`_ or `pytest <http://pytest.org>`_ tests without worrying about VPL.\r\n2. Test your tests without worrying about VPL. \r\n3. Create a VPL activity and upload your test files under *Advanced settings => Execution files*.\r\n4. Upload also *vpltest.py*\r\n5. To *vpl_execution.sh* write following lines:\r\n\r\n\r\n.. sourcecode:: bash\r\n    \r\n    #!/bin/bash\r\n    python3 vpltest.py\r\n\r\n\r\nReplace ``python3`` with ``python`` if you're using Python 2.\r\n\r\n\r\nCommand line arguments\r\n----------------------\r\nYou can tweak ``vpltest`` with following command line arguments:\r\n\r\n* ``--nose`` and ``--pytest`` select the framework for collecting and running the tests. If neither flag is present, ``vpltest`` uses the one which happens to be installed. It prefers nose if both are installed;\r\n* ``--show-grade`` makes ``vpltest`` propose a grade based on how big part of the tests passed;\r\n* ``--show-stacktrace`` includes stacktraces in the reports;\r\n* ``--allow-deletion`` (see \"Automatically keeping all execution files available\");\r\n* all other arguments are passed on to the testing framework.\r\n\r\nExample. If you want ``vpltest`` to compute the grade, run your tests with pytest and make pytest run also doctests, then your *vpl_evaluation.sh* should be \r\n\r\n.. sourcecode:: bash\r\n    \r\n    #!/bin/bash\r\n    python3 vpltest.py --show-grade --pytest --doctest-modules\r\n\r\n\r\n\r\nTest discovery\r\n--------------\r\nBy default all execution files matching *\\*test\\*.py* (except *vpltest.py*) are considered to be test files and are passed on to testing framework. You can override this by specifying test files in *vpl_evaluation.sh*, eg:\r\n\r\n.. sourcecode:: bash\r\n    \r\n    #!/bin/bash\r\n    python3 vpltest.py --show-grade --pytest basic_tests.py style_checks.py\r\n\r\n\r\n\r\nTest discovery inside the modules are up to chosen framework.\r\n\r\nInstalling to server\r\n--------------------\r\nIf you use ``vpltest`` a lot, then it makes sense to install it into your testing server so that you don't need to upload it every time. It can be installed with ``pip``, eg. ``sudo pip3 install pytest``.\r\n\r\nNote that now ``python3 vpltest.py`` in your *vpl_execution.sh* won't do as there won't be *vpltest.py* in testing directory anymore. Use ``python3 -m vpltest`` instead.\r\n\r\nAutomatically creating *vpl_execution*\r\n--------------------------------------\r\nVPL is designed so that *vpl_execution.sh* is not meant for running the tests but for executing the compilation phase, which includes preparing *vpl_execution*, which will be used to run the tests. This design makes sense with compiled languages, but with Python the compilation phase is just a nuisance. ``vpltest`` tries to make its usage experience smoother, by taking care of creating *vpl_execution* if necessary. That's why you need to write only 2 lines into *vpl_execution.sh*.\r\n\r\nAutomatically keeping all execution files available\r\n---------------------------------------------------\r\nAfter compilation phase, VPL by default deletes all original execution files, unless you tick them under *Advanced settings => Files to keep when running*.\r\n\r\n``vpltest`` needs original test files to be present when running, but you don't need remember it, because it uses a trick which makes originals always available. If you don't like this, then run it with ``--allow-deletion``.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/plas/vpltest", "keywords": "pytest nose VPL", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "vpltest", "package_url": "https://pypi.org/project/vpltest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vpltest/", "project_urls": {"Homepage": "https://bitbucket.org/plas/vpltest"}, "release_url": "https://pypi.org/project/vpltest/0.6/", "requires_dist": null, "requires_python": "", "summary": "Allows running Python tests (unittest, nose, pytest) in the context of VPL Moodle plugin (http://vpl.dis.ulpgc.es/)", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"background\">\n<h2>Background</h2>\n<p>VPL (<a href=\"http://vpl.dis.ulpgc.es/\" rel=\"nofollow\">http://vpl.dis.ulpgc.es/</a>) allows customizing evaluation process with custom execution files. This can be used for testing students\u2019 submissions with professional testing frameworks. <tt>vpltest</tt> makes this easier for Python assignments by translating output from <a href=\"https://nose.readthedocs.org\" rel=\"nofollow\">nose</a> or <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a> to the format required by VPL.</p>\n<div>\n<p>Note</p>\n<p>You may want to use <tt>vpltest</tt> together with <a href=\"http://edutest.readthedocs.org\" rel=\"nofollow\">edutest</a>.</p>\n</div>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<ol>\n<li>Write normal <a href=\"https://docs.python.org/3/library/unittest.html\" rel=\"nofollow\">unittest</a>, <a href=\"https://nose.readthedocs.org\" rel=\"nofollow\">nose</a> or <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a> tests without worrying about VPL.</li>\n<li>Test your tests without worrying about VPL.</li>\n<li>Create a VPL activity and upload your test files under <em>Advanced settings =&gt; Execution files</em>.</li>\n<li>Upload also <em>vpltest.py</em></li>\n<li>To <em>vpl_execution.sh</em> write following lines:</li>\n</ol>\n<pre><span class=\"ch\">#!/bin/bash\n</span>python3 vpltest.py\n</pre>\n<p>Replace <tt>python3</tt> with <tt>python</tt> if you\u2019re using Python 2.</p>\n</div>\n<div id=\"command-line-arguments\">\n<h2>Command line arguments</h2>\n<p>You can tweak <tt>vpltest</tt> with following command line arguments:</p>\n<ul>\n<li><tt><span class=\"pre\">--nose</span></tt> and <tt><span class=\"pre\">--pytest</span></tt> select the framework for collecting and running the tests. If neither flag is present, <tt>vpltest</tt> uses the one which happens to be installed. It prefers nose if both are installed;</li>\n<li><tt><span class=\"pre\">--show-grade</span></tt> makes <tt>vpltest</tt> propose a grade based on how big part of the tests passed;</li>\n<li><tt><span class=\"pre\">--show-stacktrace</span></tt> includes stacktraces in the reports;</li>\n<li><tt><span class=\"pre\">--allow-deletion</span></tt> (see \u201cAutomatically keeping all execution files available\u201d);</li>\n<li>all other arguments are passed on to the testing framework.</li>\n</ul>\n<p>Example. If you want <tt>vpltest</tt> to compute the grade, run your tests with pytest and make pytest run also doctests, then your <em>vpl_evaluation.sh</em> should be</p>\n<pre><span class=\"ch\">#!/bin/bash\n</span>python3 vpltest.py --show-grade --pytest --doctest-modules\n</pre>\n</div>\n<div id=\"test-discovery\">\n<h2>Test discovery</h2>\n<p>By default all execution files matching <em>*test*.py</em> (except <em>vpltest.py</em>) are considered to be test files and are passed on to testing framework. You can override this by specifying test files in <em>vpl_evaluation.sh</em>, eg:</p>\n<pre><span class=\"ch\">#!/bin/bash\n</span>python3 vpltest.py --show-grade --pytest basic_tests.py style_checks.py\n</pre>\n<p>Test discovery inside the modules are up to chosen framework.</p>\n</div>\n<div id=\"installing-to-server\">\n<h2>Installing to server</h2>\n<p>If you use <tt>vpltest</tt> a lot, then it makes sense to install it into your testing server so that you don\u2019t need to upload it every time. It can be installed with <tt>pip</tt>, eg. <tt>sudo pip3 install pytest</tt>.</p>\n<p>Note that now <tt>python3 vpltest.py</tt> in your <em>vpl_execution.sh</em> won\u2019t do as there won\u2019t be <em>vpltest.py</em> in testing directory anymore. Use <tt>python3 <span class=\"pre\">-m</span> vpltest</tt> instead.</p>\n</div>\n<div id=\"automatically-creating-vpl-execution\">\n<h2>Automatically creating <em>vpl_execution</em></h2>\n<p>VPL is designed so that <em>vpl_execution.sh</em> is not meant for running the tests but for executing the compilation phase, which includes preparing <em>vpl_execution</em>, which will be used to run the tests. This design makes sense with compiled languages, but with Python the compilation phase is just a nuisance. <tt>vpltest</tt> tries to make its usage experience smoother, by taking care of creating <em>vpl_execution</em> if necessary. That\u2019s why you need to write only 2 lines into <em>vpl_execution.sh</em>.</p>\n</div>\n<div id=\"automatically-keeping-all-execution-files-available\">\n<h2>Automatically keeping all execution files available</h2>\n<p>After compilation phase, VPL by default deletes all original execution files, unless you tick them under <em>Advanced settings =&gt; Files to keep when running</em>.</p>\n<p><tt>vpltest</tt> needs original test files to be present when running, but you don\u2019t need remember it, because it uses a trick which makes originals always available. If you don\u2019t like this, then run it with <tt><span class=\"pre\">--allow-deletion</span></tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 1929305, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "1384af218ae089b13eb9c5733be7972a", "sha256": "7a08cf56c6c8fcdcea83f83b529cce60caae93481d702142d243f4c408236073"}, "downloads": -1, "filename": "vpltest-0.4.zip", "has_sig": false, "md5_digest": "1384af218ae089b13eb9c5733be7972a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6888, "upload_time": "2015-12-04T16:38:46", "upload_time_iso_8601": "2015-12-04T16:38:46.866960Z", "url": "https://files.pythonhosted.org/packages/5b/e2/c392892a7435a90e0bf47d48d0bc859a7dbb2a96ec306256b3bee84af9be/vpltest-0.4.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "46472dcb102295e0a5f00a031d330a41", "sha256": "89e95fb4f4eaf7d478db791834d0c1aa656401bb33f7574f06ab76c31110b60b"}, "downloads": -1, "filename": "vpltest-0.5.zip", "has_sig": false, "md5_digest": "46472dcb102295e0a5f00a031d330a41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7145, "upload_time": "2016-01-29T12:13:55", "upload_time_iso_8601": "2016-01-29T12:13:55.290180Z", "url": "https://files.pythonhosted.org/packages/8e/20/d8816c1c413ce22700941c8942a0b75cecc4e6d0c39f2a37eb998f173070/vpltest-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "f77ea65129fb419b1d08e6c612e12033", "sha256": "2c7bd09f57b19ce47a4f986bdd64af10888c59d62ebd297833f4bf298ac3ecbd"}, "downloads": -1, "filename": "vpltest-0.6.zip", "has_sig": false, "md5_digest": "f77ea65129fb419b1d08e6c612e12033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7128, "upload_time": "2016-01-29T13:26:37", "upload_time_iso_8601": "2016-01-29T13:26:37.108612Z", "url": "https://files.pythonhosted.org/packages/17/c0/c8a501169037e278cdd7b10784ffeb82bab9c931e6ec9950ea719c300c2f/vpltest-0.6.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f77ea65129fb419b1d08e6c612e12033", "sha256": "2c7bd09f57b19ce47a4f986bdd64af10888c59d62ebd297833f4bf298ac3ecbd"}, "downloads": -1, "filename": "vpltest-0.6.zip", "has_sig": false, "md5_digest": "f77ea65129fb419b1d08e6c612e12033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7128, "upload_time": "2016-01-29T13:26:37", "upload_time_iso_8601": "2016-01-29T13:26:37.108612Z", "url": "https://files.pythonhosted.org/packages/17/c0/c8a501169037e278cdd7b10784ffeb82bab9c931e6ec9950ea719c300c2f/vpltest-0.6.zip", "yanked": false}], "timestamp": "Fri May  8 03:34:14 2020"}