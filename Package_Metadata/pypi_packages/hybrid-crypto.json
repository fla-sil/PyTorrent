{"info": {"author": "Tomaz Muraus", "author_email": "tomaz+pypi@tomaz.me", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Python Hybrid Crypto\n====================\n\nPython module which exposes a simple hybrid cryptography abstraction on\ntop of KeyCzar and pycrypto.\n\n.. note::\n\n    This module has NOT been extensively tested or audited so general usage is\n    strongly discouraged at this point.\n\nHow it works\n------------\n\nKey encapsulation scheme\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nKey encapsulation scheme uses RSA-OAEP public-key cryptography with 2048 bit\nkey.\n\nThis functionality heavily relies on public-key cryptography functionality\nexposed by KeyCzar.\n\nData encapsulation scheme\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nData encapsulation scheme uses AES in CBC mode with 256 bit key.\n\nThis release on primitives and functionality provided by pycrypto.\n\nExample Usage\n-------------\n\nTBW.\n\nQuestions and Answers\n---------------------\n\nWhy do I need this, can't I just use keyczar directly?\n------------------------------------------------------\n\nKeyCzar exposes a higher level, safe and easy to use interface for handling\nboth, asymmetric and symmetric encryption, but it doesn't provide a higher\nlevel interface for handling `hybrid cryptography`_ (well, that's not 100%\naccurate, because there is some support, but it's experimental and only\navailable in Java).\n\n.. _`hybrid cryptography`: http://en.wikipedia.org/wiki/Hybrid_cryptosystem\n\n\nChangelog\n=========", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kami/python-hybrid-crypto/", "keywords": null, "license": "Apache License (2.0)", "maintainer": null, "maintainer_email": null, "name": "hybrid-crypto", "package_url": "https://pypi.org/project/hybrid-crypto/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hybrid-crypto/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Kami/python-hybrid-crypto/"}, "release_url": "https://pypi.org/project/hybrid-crypto/0.1.0-dev/", "requires_dist": null, "requires_python": null, "summary": "Python module which exposes a simple hybrid cryptography abstraction on top of KeyCzar and pycrypto.", "version": "0.1.0-dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-hybrid-crypto\">\n<h2>Python Hybrid Crypto</h2>\n<p>Python module which exposes a simple hybrid cryptography abstraction on\ntop of KeyCzar and pycrypto.</p>\n<div>\n<p>Note</p>\n<p>This module has NOT been extensively tested or audited so general usage is\nstrongly discouraged at this point.</p>\n</div>\n<div id=\"how-it-works\">\n<h3>How it works</h3>\n<div id=\"key-encapsulation-scheme\">\n<h4>Key encapsulation scheme</h4>\n<p>Key encapsulation scheme uses RSA-OAEP public-key cryptography with 2048 bit\nkey.</p>\n<p>This functionality heavily relies on public-key cryptography functionality\nexposed by KeyCzar.</p>\n</div>\n<div id=\"data-encapsulation-scheme\">\n<h4>Data encapsulation scheme</h4>\n<p>Data encapsulation scheme uses AES in CBC mode with 256 bit key.</p>\n<p>This release on primitives and functionality provided by pycrypto.</p>\n</div>\n</div>\n<div id=\"example-usage\">\n<h3>Example Usage</h3>\n<p>TBW.</p>\n</div>\n<div id=\"questions-and-answers\">\n<h3>Questions and Answers</h3>\n</div>\n<div id=\"why-do-i-need-this-can-t-i-just-use-keyczar-directly\">\n<h3>Why do I need this, can\u2019t I just use keyczar directly?</h3>\n<p>KeyCzar exposes a higher level, safe and easy to use interface for handling\nboth, asymmetric and symmetric encryption, but it doesn\u2019t provide a higher\nlevel interface for handling <a href=\"http://en.wikipedia.org/wiki/Hybrid_cryptosystem\" rel=\"nofollow\">hybrid cryptography</a> (well, that\u2019s not 100%\naccurate, because there is some support, but it\u2019s experimental and only\navailable in Java).</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n</div>\n\n          </div>"}, "last_serial": 1086805, "releases": {"0.1.0-dev": [{"comment_text": "", "digests": {"md5": "2c407f0c67e95503458017b2f021565c", "sha256": "d6182d5476047157520effb1b7d9062f096d6d3e7f0aa689fc3d7b2c3089b123"}, "downloads": -1, "filename": "hybrid-crypto-0.1.0-dev.tar.gz", "has_sig": false, "md5_digest": "2c407f0c67e95503458017b2f021565c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4799, "upload_time": "2014-05-09T13:39:22", "upload_time_iso_8601": "2014-05-09T13:39:22.438501Z", "url": "https://files.pythonhosted.org/packages/b0/33/87cb008e9bee0bdf124bddb082c8be8be287c76c25880217125147065806/hybrid-crypto-0.1.0-dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c407f0c67e95503458017b2f021565c", "sha256": "d6182d5476047157520effb1b7d9062f096d6d3e7f0aa689fc3d7b2c3089b123"}, "downloads": -1, "filename": "hybrid-crypto-0.1.0-dev.tar.gz", "has_sig": false, "md5_digest": "2c407f0c67e95503458017b2f021565c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4799, "upload_time": "2014-05-09T13:39:22", "upload_time_iso_8601": "2014-05-09T13:39:22.438501Z", "url": "https://files.pythonhosted.org/packages/b0/33/87cb008e9bee0bdf124bddb082c8be8be287c76c25880217125147065806/hybrid-crypto-0.1.0-dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:41 2020"}