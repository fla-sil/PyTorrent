{"info": {"author": "Kevin Noel", "author_email": "brookm291@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n\n\n\n# mlmodels \n\n\nThis repository is the ***Model ZOO for Pytorch, Tensorflow, Keras, Gluon, LightGBM, Keras, Sklearn models etc*** with Lightweight Functional interface to wrap access to Recent and State of Art Deep Learning, ML models and Hyper-Parameter Search, cross platforms that follows the logic of sklearn, such as fit, predict, transform, metrics, save, load etc. \nNow,  recent models are available across those fields : \n* Time Series, \n* Text classification, \n* Vision, \n* Image Generation,Text generation, \n* Gradient Boosting, Automatic Machine Learning tuning, \n* Hyper-parameter search.\n\nWith the goal to transform Script/Research code into re-usable batch/code with minimal code change, we used functional interface instead of pure OOP. This is because functional reduces the amount of code needed which is good to scientific computing. Thus, we can focus on the computing part than design. Also, it is easy to maintain for medium size project. \n\nA collection of Deep Learning and Machine Learning research papers is available in this repository.\n\n\n![alt text](docs/mxnetf.png) ![alt text](docs/pytorch.PNG) ![alt text](docs/tenserflow.PNG)\n\n## Benefits :\n\nHaving a standard framework for both machine learning models and deep learning models, \nallows a step towards automatic Machine Learning. The collection of models, model zoo in Pytorch, Tensorflow, Keras\nallows removing dependency on one specific framework, and enable richer possibilities in model benchmarking and re-usage.\nUnique and simple interface, zero boilerplate code (!), and recent state of art models/frameworks are the main strength \nof MLMODELS. Emphasis is on traditional machine learning algorithms but recent state of art Deep Learning algorithms. \nProcessing of high-dimensional data is considered very useful using Deep Learning. For different applications, such as computer vision, natural language processing, object detection, facial recognition and speech recognition, deep learning created significant improvements and outstanding results.\n\n\nHere you can find usages [guide](https://github.com/arita37/mlmodels/blob/dev/mlmodels/example/README_usage.md)\n\n## Model List :\n* [Time Series](#Time-series)\n* [NLP](#NLP)\n* [TABULAR](#TABULAR)\n* [VISION](#VISION)\n\n\n\n### Time Series:\n\n1. MILA, Nbeats: 2019, Advanced interpretable Time Series Neural Network, [[Link](https://arxiv.org/abs/1905.10437)]\n\n2. Amazon Deep AR: 2019, Multi-variate Time Series NNetwork, [[Link](https://ieeexplore.ieee.org/abstract/document/487783)]\n\n3. Facebook Prophet 2017, Time Series prediction [[Link]](http://www.macs.hw.ac.uk/~dwcorne/RSR/00279188.pdf)\n\n4. ARMDN, Advanced Multi-variate Time series Prediction : 2019, Associative and Recurrent Mixture Density Networks for time series. [[Link]](https://arxiv.org/pdf/1803.03800)\n\n5. LSTM Neural Network prediction : Stacked Bidirectional and Unidirectional LSTM Recurrent Neural Network for Network-wide Traffic Speed Prediction [[Link]](https://arxiv.org/ftp/arxiv/papers/1801/1801.02143.pdf)\n\n\n### NLP:\n\n1. Sentence Transformers : 2019, Embedding of full sentences using BERT, [[Link](https://arxiv.org/pdf/1908.10084.pdf)]\n\n2. Transformers Classifier : Using Transformer for Text Classification, [[Link](https://arxiv.org/abs/1905.05583)]\n\n3. TextCNN Pytorch : 2016, Text CNN Classifier, [[Link](https://arxiv.org/abs/1801.06287)]\n\n4. TextCNN Keras : 2016, Text CNN Classifier, [[Link](https://arxiv.org/abs/1801.06287)]\n\n5. Bi-directionnal Conditional Random Field LSTM for Name Entiryt Recognition,  [[Link](https://www.aclweb.org/anthology/Y18-1061.pdf)]\n\n5. DRMM:  Deep Relevance Matching Model for Ad-hoc Retrieval.[[Link](https://dl.acm.org/doi/pdf/10.1145/2983323.2983769?download=true)]\n\n6. DRMMTKS:  Deep Top-K Relevance Matching Model for Ad-hoc Retrieval. [[Link](https://link.springer.com/chapter/10.1007/978-3-030-01012-6_2)]\n\n7. ARC-I:  Convolutional Neural Network Architectures for Matching Natural Language Sentences\n[[Link](http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf)]\n\n8. ARC-II:  Convolutional Neural Network Architectures for Matching Natural Language Sentences\n[[Link](http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf)]\n\n\n### TABULAR:\n\n#### LightGBM  : Light Gradient Boosting\n\n#### AutoML Gluon  :  2020, AutoML in Gluon, MxNet using LightGBM, CatBoost\n\n#### Auto-Keras  :  2020, Automatic Keras model selection\n\n\n#### All sklearn models :\n\nlinear_model.ElasticNetlinear_model.ElasticNetCVlinear_model.Larslinear_model.LarsCVlinear_model.Lassolinear_model.LassoCVlinear_model.LassoLarslinear_model.LassoLarsCVlinear_model.LassoLarsIClinear_model.OrthogonalMatchingPursuitlinear_model.OrthogonalMatchingPursuitCV\n\n\nsvm.LinearSVCsvm.LinearSVRsvm.NuSVCsvm.NuSVRsvm.OneClassSVMsvm.SVCsvm.SVRsvm.l1_min_c\n\n\nneighbors.KNeighborsClassifierneighbors.KNeighborsRegressorneighbors.KNeighborsTransformer\n\n#### Binary Neural Prediction from tabular data:\n\n\n\n\n### VISION:\n\n\n1. Vision Models (pre-trained) :  \nalexnet: SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and <0.5MB model size\n[[Link](https://arxiv.org/pdf/1602.07360)]\n\n2. densenet121: Adversarial Perturbations Prevail in the Y-Channel of the YCbCr Color Space\n[[Link](https://arxiv.org/pdf/2003.00883.pdf)]\n\n3. densenet169: Classification of TrashNet Dataset Based on Deep Learning Models\n[[Link](https://ieeexplore.ieee.org/abstract/document/8622212)]\n\n4. densenet201: Utilization of DenseNet201 for diagnosis of breast abnormality\n[[Link](https://link.springer.com/article/10.1007/s00138-019-01042-8)]\n\n5. densenet161: Automated classification of histopathology images using transfer learning\n[[Link](https://doi.org/10.1016/j.artmed.2019.101743)]\n\n6. inception_v3: Menfish Classification Based on Inception_V3 Convolutional Neural Network\n[[Link](https://iopscience.iop.org/article/10.1088/1757-899X/677/5/052099/pdf )]\n\n7. resnet18: Leveraging the VTA-TVM Hardware-Software Stack for FPGA Acceleration of 8-bit ResNet-18 Inference\n[[Link](https://dl.acm.org/doi/pdf/10.1145/3229762.3229766)]\n\n8. resnet34: Automated Pavement Crack Segmentation Using Fully Convolutional U-Net with a Pretrained ResNet-34 Encoder\n[[Link](https://arxiv.org/pdf/2001.01912)]\n\n9. resnet50: Extremely Large Minibatch SGD: Training ResNet-50 on ImageNet in 15 Minutes\n[[Link](https://arxiv.org/pdf/1711.04325)]\n\n10. resnet101: Classification of Cervical MR Images using ResNet101\n[[Link](https://www.ijresm.com/Vol.2_2019/Vol2_Iss6_June19/IJRESM_V2_I6_69.pdf)]\n\n11. resnet152: Deep neural networks show an equivalent and often superior performance to dermatologists in onychomycosis diagnosis: Automatic construction of onychomycosis datasets by region-based convolutional deep neural network\n[[Link](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5774804/pdf/pone.0191493.pdf)]\n\n\n***More resources are available [here](https://github.com/arita37/mlmodels/blob/dev/README_model_list.md)***\n\n######################################################################################\n\n### \u2460 Installation Guide:\n\n### (A) Using pre-installed Setup (one click) :\n\n[Read-more](https://github.com/arita37/mlmodels/issues/101)\n\n\n\n### (C) Using Colab :\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage.md)\n\n\n### Initialize template and Tests\nWill copy template, dataset, example to your folder\n```bash\nml_models --init  /yourworkingFolder/\n```\n\n\n\n##### To test Hyper-parameter search:\n```bash\nml_optim\n```\n\n\n##### To test model fitting\n```bash\nml_models\n```\n\n\n\n#### Actual test runs\n\n[Read-more](https://github.com/arita37/mlmodels/actions)\n\n![test_fast_linux](https://github.com/arita37/mlmodels/workflows/test_fast_linux/badge.svg)\n\n![test_fast_windows](https://github.com/arita37/mlmodels/workflows/test_fast_windows/badge.svg?branch=dev)\n\n![ All model testing (Linux) ](https://github.com/arita37/mlmodels/workflows/code_structure_linux/badge.svg)\n\n_______________________________________________________________________________________\n\n## Usage in Jupyter/Colab\n\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage.md)\n\n_______________________________________________________________________________________\n\n## Command Line tools:\n\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_usage_CLI.md)\n\n\n\n_______________________________________________________________________________________\n\n## Model List\n\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_model_list.md)\n\n_______________________________________________________________________________________\n\n## How to add a new model\n\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_addmodel.md)\n\n_______________________________________________________________________________________\n\n## Index of functions/methods\n\n[Read-more](https://github.com/arita37/mlmodels/blob/dev/README_index_doc.py)\n\n_______________________________________________________________________________________\n\n\n\n### LSTM example in TensorFlow ([Example notebook](mlmodels/example/1_lstm.ipynb))\n\n#### Define model and data definitions\n```python\n# import library\nimport mlmodels\n\n\nmodel_uri    = \"model_tf.1_lstm.py\"\nmodel_pars   =  {  \"num_layers\": 1,\n                  \"size\": ncol_input, \"size_layer\": 128, \"output_size\": ncol_output, \"timestep\": 4,\n                }\ndata_pars    =  {\"data_path\": \"/folder/myfile.csv\"  , \"data_type\": \"pandas\" }\ncompute_pars =  { \"learning_rate\": 0.001, }\n\nout_pars     =  { \"path\": \"ztest_1lstm/\", \"model_path\" : \"ztest_1lstm/model/\"}\nsave_pars = { \"path\" : \"ztest_1lstm/model/\" }\nload_pars = { \"path\" : \"ztest_1lstm/model/\" }\n\n\n#### Load Parameters and Train\nfrom mlmodels.models import module_load\n\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)\n\n\n#### Inference\nmetrics_val   =  module.fit_metrics( model, sess, data_pars, compute_pars, out_pars) # get stats\nypred         = module.predict(model, sess,  data_pars, compute_pars, out_pars)     # predict pipeline\n```\n\n\n---\n\n### AutoML example in Gluon ([Example notebook](mlmodels/example/gluon_automl.ipynb))\n```python\n# import library\nimport mlmodels\nimport autogluon as ag\n\n#### Define model and data definitions\nmodel_uri = \"model_gluon.gluon_automl.py\"\ndata_pars = {\"train\": True, \"uri_type\": \"amazon_aws\", \"dt_name\": \"Inc\"}\n\nmodel_pars = {\"model_type\": \"tabular\",\n              \"learning_rate\": ag.space.Real(1e-4, 1e-2, default=5e-4, log=True),\n              \"activation\": ag.space.Categorical(*tuple([\"relu\", \"softrelu\", \"tanh\"])),\n              \"layers\": ag.space.Categorical(\n                          *tuple([[100], [1000], [200, 100], [300, 200, 100]])),\n              'dropout_prob': ag.space.Real(0.0, 0.5, default=0.1),\n              'num_boost_round': 10,\n              'num_leaves': ag.space.Int(lower=26, upper=30, default=36)\n             }\n\ncompute_pars = {\n    \"hp_tune\": True,\n    \"num_epochs\": 10,\n    \"time_limits\": 120,\n    \"num_trials\": 5,\n    \"search_strategy\": \"skopt\"\n}\n\nout_pars = {\n    \"out_path\": \"dataset/\"\n}\n\n\n\n#### Load Parameters and Train\nfrom mlmodels.models import module_load\n\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\nmodel         =  module.Model(model_pars=model_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, model_pars=model_pars, compute_pars=compute_pars, out_pars=out_pars)      \n\n\n#### Inference\nypred       = module.predict(model, data_pars, compute_pars, out_pars)     # predict pipeline\n\n\n```\n\n---\n\n### RandomForest example in Scikit-learn ([Example notebook](mlmodels/example/sklearn.ipynb))\n```\n# import library\nimport mlmodels\n\n#### Define model and data definitions\nmodel_uri    = \"model_sklearn.sklearn.py\"\n\nmodel_pars   = {\"model_name\":  \"RandomForestClassifier\", \"max_depth\" : 4 , \"random_state\":0}\n\ndata_pars    = {'mode': 'test', 'path': \"../mlmodels/dataset\", 'data_type' : 'pandas' }\n\ncompute_pars = {'return_pred_not': False}\n\nout_pars    = {'path' : \"../ztest\"}\n\n\n#### Load Parameters and Train\nfrom mlmodels.models import module_load\n\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n\n#### Inference\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\n```\n\n\n---\n\n### TextCNN example in keras ([Example notebook](example/textcnn.ipynb))\n\n```python\n# import library\nimport mlmodels\n\n#### Define model and data definitions\nmodel_uri    = \"model_keras.textcnn.py\"\n\ndata_pars    = {\"path\" : \"../mlmodels/dataset/text/imdb.csv\", \"train\": 1, \"maxlen\":400, \"max_features\": 10}\n\nmodel_pars   = {\"maxlen\":400, \"max_features\": 10, \"embedding_dims\":50}\n\ncompute_pars = {\"engine\": \"adam\", \"loss\": \"binary_crossentropy\", \"metrics\": [\"accuracy\"] ,\n                        \"batch_size\": 32, \"epochs\":1, 'return_pred_not':False}\n\nout_pars     = {\"path\": \"ztest/model_keras/textcnn/\"}\n\n\n\n#### Load Parameters and Train\nfrom mlmodels.models import module_load\n\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodule.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n\n#### Inference\ndata_pars['train'] = 0\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)\n```\n\n---\n\n### Using json config file for input ([Example notebook](example/1_lstm_json.ipynb), [JSON file](mlmodels/mlmodels/example/1_lstm.json))\n\n#### Import library and functions\n```python\n# import library\nimport mlmodels\n\n#### Load model and data definitions from json\nfrom mlmodels.models import module_load\nfrom mlmodels.util import load_config\n\nmodel_uri    = \"model_tf.1_lstm.py\"\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\n\nmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={\n    'choice':'json',\n    'config_mode':'test',\n    'data_path':'../mlmodels/example/1_lstm.json'\n})\n\n#### Load parameters and train\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n#### Check inference\nypred       = module.predict(model, sess=sess,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\n\n\n```\n\n---\n\n### Using Scikit-learn's SVM for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_svm.ipynb), [JSON file](mlmodels/example/sklearn_titanic_svm.json))\n\n#### Import library and functions\n```python\n# import library\nimport mlmodels\n\n#### Load model and data definitions from json\nfrom mlmodels.models import module_load\nfrom mlmodels.util import load_config\n\nmodel_uri    = \"model_sklearn.sklearn.py\"\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\n\nmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={\n    'choice':'json',\n    'config_mode':'test',\n    'data_path':'../mlmodels/example/sklearn_titanic_svm.json'\n})\n\n#### Load Parameters and Train\n\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n\n#### Inference\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\nypred\n\n\n#### Check metrics\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\n\ny = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].values\nroc_auc_score(y, ypred)\n\n\n```\n\n---\n\n### Using Scikit-learn's Random Forest for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_randomForest.ipynb), [JSON file](mlmodels/example/sklearn_titanic_randomForest.json))\n\n#### Import library and functions\n```python\n# import library\nimport mlmodels\n\n#### Load model and data definitions from json\nfrom mlmodels.models import module_load\nfrom mlmodels.util import load_config\n\nmodel_uri    = \"model_sklearn.sklearn.py\"\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\n\nmodel_pars, data_pars, compute_pars, out_pars = module.get_params(param_pars={\n    'choice':'json',\n    'config_mode':'test',\n    'data_path':'../mlmodels/example/sklearn_titanic_randomForest.json'\n})\n\n\n#### Load Parameters and Train\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n\n#### Inference\n\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\nypred\n\n#### Check metrics\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\n\ny = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].values\nroc_auc_score(y, ypred)\n\n```\n\n---\n\n### Using Autogluon for Titanic Problem from json file ([Example notebook](mlmodels/example/gluon_automl_titanic.ipynb), [JSON file](mlmodels/example/gluon_automl.json))\n\n#### Import library and functions\n```python\n# import library\nimport mlmodels\n\n#### Load model and data definitions from json\nfrom mlmodels.models import module_load\nfrom mlmodels.util import load_config\n\nmodel_uri    = \"model_gluon.gluon_automl.py\"\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\n\nmodel_pars, data_pars, compute_pars, out_pars = module.get_params(\n    choice='json',\n    config_mode= 'test',\n    data_path= '../mlmodels/example/gluon_automl.json'\n)\n\n\n#### Load Parameters and Train\nmodel         =  module.Model(model_pars=model_pars, compute_pars=compute_pars)             # Create Model instance\nmodel   =  module.fit(model, model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\nmodel.model.fit_summary()\n\n\n#### Check inference\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\n\n#### Check metrics\nmodel.model.model_performance\n\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\n\ny = pd.read_csv('../mlmodels/dataset/tabular/titanic_train_preprocessed.csv')['Survived'].values\nroc_auc_score(y, ypred)\n\n\n```\n\n---\n---\n\n### Using hyper-params (optuna) for Titanic Problem from json file ([Example notebook](mlmodels/example/sklearn_titanic_randomForest_example2.ipynb), [JSON file](mlmodels/example/hyper_titanic_randomForest.json))\n\n#### Import library and functions\n```python\n# import library\nfrom mlmodels.models import module_load\nfrom mlmodels.optim import optim\nfrom mlmodels.util import params_json_load\n\n\n#### Load model and data definitions from json\n\n###  hypermodel_pars, model_pars, ....\nmodel_uri   = \"model_sklearn.sklearn.py\"\nconfig_path = path_norm( 'example/hyper_titanic_randomForest.json'  )\nconfig_mode = \"test\"  ### test/prod\n\n\n\n#### Model Parameters\nhypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)\nprint( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)\n\n\nmodule            =  module_load( model_uri= model_uri )                      \nmodel_pars_update = optim(\n    model_uri       = model_uri,\n    hypermodel_pars = hypermodel_pars,\n    model_pars      = model_pars,\n    data_pars       = data_pars,\n    compute_pars    = compute_pars,\n    out_pars        = out_pars\n)\n\n\n#### Load Parameters and Train\nmodel         =  module.Model(model_pars=model_pars_update, data_pars=data_pars, compute_pars=compute_pars)y\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)\n\n#### Check inference\nypred         = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\nypred\n\n\n#### Check metrics\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\n\ny = pd.read_csv( path_norm('dataset/tabular/titanic_train_preprocessed.csv') )\ny = y['Survived'].values\nroc_auc_score(y, ypred)\n```\n\n\n---\n\n### Using LightGBM for Titanic Problem from json file ([Example notebook](mlmodels/example/model_lightgbm.ipynb), [JSON file](mlmodels/example/lightgbm_titanic.json))\n\n#### Import library and functions\n```python\n# import library\nimport mlmodels\nfrom mlmodels.models import module_load\nfrom mlmodels.util import path_norm_dict, path_norm\nimport json\n\n#### Load model and data definitions from json\n# Model defination\nmodel_uri    = \"model_sklearn.model_lightgbm.py\"\nmodule        =  module_load( model_uri= model_uri)\n\n# Path to JSON\ndata_path = '../dataset/json/lightgbm_titanic.json'  \n\n# Model Parameters\npars = json.load(open( data_path , mode='r'))\nfor key, pdict in  pars.items() :\n  globals()[key] = path_norm_dict( pdict   )   ###Normalize path\n\n#### Load Parameters and Train\nmodel = module.Model(model_pars, data_pars, compute_pars) # create model instance\nmodel, session = module.fit(model, data_pars, compute_pars, out_pars) # fit model\n\n\n#### Check inference\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # get predictions\nypred\n\n\n#### Check metrics\nmetrics_val = module.fit_metrics(model, data_pars, compute_pars, out_pars)\nmetrics_val \n\n```\n\n---\n\n\n### Using Vision CNN RESNET18 for MNIST dataset  ([Example notebook](mlmodels/example/model_restnet18.ipynb), [JSON file](mlmodels/model_tch/torchhub_cnn.json))\n\n```python\n# import library\nimport mlmodels\nfrom mlmodels.models import module_load\nfrom mlmodels.util import path_norm_dict, path_norm, params_json_load\nimport json\n\n\n#### Model URI and Config JSON\nmodel_uri   = \"model_tch.torchhub.py\"\nconfig_path = path_norm( 'model_tch/torchhub_cnn.json'  )\nconfig_mode = \"test\"  ### test/prod\n\n\n#### Model Parameters\nhypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)\nprint( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)\n\n\n#### Setup Model \nmodule         = module_load( model_uri)\nmodel          = module.Model(model_pars, data_pars, compute_pars) \n`\n#### Fit\nmodel, session = module.fit(model, data_pars, compute_pars, out_pars)           #### fit model\nmetrics_val    = module.fit_metrics(model, data_pars, compute_pars, out_pars)   #### Check fit metrics\nprint(metrics_val)\n\n\n#### Inference\nypred          = module.predict(model, session, data_pars, compute_pars, out_pars)   \nprint(ypred)\n\n\n\n\n```\n---\n\n### Using ARMDN Time Series   ([Example notebook](mlmodels/example/model_timeseries_armdn.ipynb), [JSON file](mlmodels/model_keras/armdn.json))\n\n\n\n```python\n# import library\nimport mlmodels\nfrom mlmodels.models import module_load\nfrom mlmodels.util import path_norm_dict, path_norm, params_json_load\nimport json\n\n\n#### Model URI and Config JSON\nmodel_uri   = \"model_keras.ardmn.py\"\nconfig_path = path_norm( 'model_keras/ardmn.json'  )\nconfig_mode = \"test\"  ### test/prod\n\n\n\n\n#### Model Parameters\nhypermodel_pars, model_pars, data_pars, compute_pars, out_pars = params_json_load(config_path, config_mode= config_mode)\nprint( hypermodel_pars, model_pars, data_pars, compute_pars, out_pars)\n\n\n#### Setup Model \nmodule         = module_load( model_uri)\nmodel          = module.Model(model_pars, data_pars, compute_pars) \n`\n#### Fit\nmodel, session = module.fit(model, data_pars, compute_pars, out_pars)           #### fit model\nmetrics_val    = module.fit_metrics(model, data_pars, compute_pars, out_pars)   #### Check fit metrics\nprint(metrics_val)\n\n\n#### Inference\nypred          = module.predict(model, session, data_pars, compute_pars, out_pars)   \nprint(ypred)\n\n\n\n#### Save/Load\nmodule.save(model, save_pars ={ 'path': out_pars['path'] +\"/model/\"})\n\nmodel2 = module.load(load_pars ={ 'path': out_pars['path'] +\"/model/\"})\n\n```\n---\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/arita37/mlmodels", "keywords": "Machine Learning Interface library", "license": "", "maintainer": "", "maintainer_email": "", "name": "mlmodels", "package_url": "https://pypi.org/project/mlmodels/", "platform": "", "project_url": "https://pypi.org/project/mlmodels/", "project_urls": {"Homepage": "https://github.com/arita37/mlmodels"}, "release_url": "https://pypi.org/project/mlmodels/0.38.1/", "requires_dist": ["numpy (>=1.16.4)", "pandas (>=0.24.2)", "scipy (>=1.3.0)", "scikit-learn (>=0.21.2)", "numexpr (>=2.6.8)", "sqlalchemy (>=1.3.8)", "tensorflow (>=1.14.0)", "pytorch (>=0.4.0)", "optuna", "lightgbm", "mlflow"], "requires_python": ">=3.6", "summary": "Generic model API, Model Zoo in Tensorflow, Keras, Pytorch, Hyperparamter search", "version": "0.38.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mlmodels</h1>\n<p>This repository is the <em><strong>Model ZOO for Pytorch, Tensorflow, Keras, Gluon, LightGBM, Keras, Sklearn models etc</strong></em> with Lightweight Functional interface to wrap access to Recent and State of Art Deep Learning, ML models and Hyper-Parameter Search, cross platforms that follows the logic of sklearn, such as fit, predict, transform, metrics, save, load etc.\nNow,  recent models are available across those fields :</p>\n<ul>\n<li>Time Series,</li>\n<li>Text classification,</li>\n<li>Vision,</li>\n<li>Image Generation,Text generation,</li>\n<li>Gradient Boosting, Automatic Machine Learning tuning,</li>\n<li>Hyper-parameter search.</li>\n</ul>\n<p>With the goal to transform Script/Research code into re-usable batch/code with minimal code change, we used functional interface instead of pure OOP. This is because functional reduces the amount of code needed which is good to scientific computing. Thus, we can focus on the computing part than design. Also, it is easy to maintain for medium size project.</p>\n<p>A collection of Deep Learning and Machine Learning research papers is available in this repository.</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6f50fe65b9c35f8614ae9bb24dce0954d1b0868/646f63732f6d786e6574662e706e67\"> <img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efa9156cfdd4b2202ac8767c07adcbf8f01dfb51/646f63732f7079746f7263682e504e47\"> <img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5baeadc031169f94734e3ed69b44b5dd467cac49/646f63732f74656e736572666c6f772e504e47\"></p>\n<h2>Benefits :</h2>\n<p>Having a standard framework for both machine learning models and deep learning models,\nallows a step towards automatic Machine Learning. The collection of models, model zoo in Pytorch, Tensorflow, Keras\nallows removing dependency on one specific framework, and enable richer possibilities in model benchmarking and re-usage.\nUnique and simple interface, zero boilerplate code (!), and recent state of art models/frameworks are the main strength\nof MLMODELS. Emphasis is on traditional machine learning algorithms but recent state of art Deep Learning algorithms.\nProcessing of high-dimensional data is considered very useful using Deep Learning. For different applications, such as computer vision, natural language processing, object detection, facial recognition and speech recognition, deep learning created significant improvements and outstanding results.</p>\n<p>Here you can find usages <a href=\"https://github.com/arita37/mlmodels/blob/dev/mlmodels/example/README_usage.md\" rel=\"nofollow\">guide</a></p>\n<h2>Model List :</h2>\n<ul>\n<li><a href=\"#Time-series\" rel=\"nofollow\">Time Series</a></li>\n<li><a href=\"#NLP\" rel=\"nofollow\">NLP</a></li>\n<li><a href=\"#TABULAR\" rel=\"nofollow\">TABULAR</a></li>\n<li><a href=\"#VISION\" rel=\"nofollow\">VISION</a></li>\n</ul>\n<h3>Time Series:</h3>\n<ol>\n<li>\n<p>MILA, Nbeats: 2019, Advanced interpretable Time Series Neural Network, [<a href=\"https://arxiv.org/abs/1905.10437\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>Amazon Deep AR: 2019, Multi-variate Time Series NNetwork, [<a href=\"https://ieeexplore.ieee.org/abstract/document/487783\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>Facebook Prophet 2017, Time Series prediction <a href=\"http://www.macs.hw.ac.uk/%7Edwcorne/RSR/00279188.pdf\" rel=\"nofollow\">[Link]</a></p>\n</li>\n<li>\n<p>ARMDN, Advanced Multi-variate Time series Prediction : 2019, Associative and Recurrent Mixture Density Networks for time series. <a href=\"https://arxiv.org/pdf/1803.03800\" rel=\"nofollow\">[Link]</a></p>\n</li>\n<li>\n<p>LSTM Neural Network prediction : Stacked Bidirectional and Unidirectional LSTM Recurrent Neural Network for Network-wide Traffic Speed Prediction <a href=\"https://arxiv.org/ftp/arxiv/papers/1801/1801.02143.pdf\" rel=\"nofollow\">[Link]</a></p>\n</li>\n</ol>\n<h3>NLP:</h3>\n<ol>\n<li>\n<p>Sentence Transformers : 2019, Embedding of full sentences using BERT, [<a href=\"https://arxiv.org/pdf/1908.10084.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>Transformers Classifier : Using Transformer for Text Classification, [<a href=\"https://arxiv.org/abs/1905.05583\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>TextCNN Pytorch : 2016, Text CNN Classifier, [<a href=\"https://arxiv.org/abs/1801.06287\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>TextCNN Keras : 2016, Text CNN Classifier, [<a href=\"https://arxiv.org/abs/1801.06287\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>Bi-directionnal Conditional Random Field LSTM for Name Entiryt Recognition,  [<a href=\"https://www.aclweb.org/anthology/Y18-1061.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>DRMM:  Deep Relevance Matching Model for Ad-hoc Retrieval.[<a href=\"https://dl.acm.org/doi/pdf/10.1145/2983323.2983769?download=true\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>DRMMTKS:  Deep Top-K Relevance Matching Model for Ad-hoc Retrieval. [<a href=\"https://link.springer.com/chapter/10.1007/978-3-030-01012-6_2\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>ARC-I:  Convolutional Neural Network Architectures for Matching Natural Language Sentences\n[<a href=\"http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>ARC-II:  Convolutional Neural Network Architectures for Matching Natural Language Sentences\n[<a href=\"http://papers.nips.cc/paper/5550-convolutional-neural-network-architectures-for-matching-natural-language-sentences.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n</ol>\n<h3>TABULAR:</h3>\n<h4>LightGBM  : Light Gradient Boosting</h4>\n<h4>AutoML Gluon  :  2020, AutoML in Gluon, MxNet using LightGBM, CatBoost</h4>\n<h4>Auto-Keras  :  2020, Automatic Keras model selection</h4>\n<h4>All sklearn models :</h4>\n<p>linear_model.ElasticNetlinear_model.ElasticNetCVlinear_model.Larslinear_model.LarsCVlinear_model.Lassolinear_model.LassoCVlinear_model.LassoLarslinear_model.LassoLarsCVlinear_model.LassoLarsIClinear_model.OrthogonalMatchingPursuitlinear_model.OrthogonalMatchingPursuitCV</p>\n<p>svm.LinearSVCsvm.LinearSVRsvm.NuSVCsvm.NuSVRsvm.OneClassSVMsvm.SVCsvm.SVRsvm.l1_min_c</p>\n<p>neighbors.KNeighborsClassifierneighbors.KNeighborsRegressorneighbors.KNeighborsTransformer</p>\n<h4>Binary Neural Prediction from tabular data:</h4>\n<h3>VISION:</h3>\n<ol>\n<li>\n<p>Vision Models (pre-trained) :<br>\nalexnet: SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and &lt;0.5MB model size\n[<a href=\"https://arxiv.org/pdf/1602.07360\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>densenet121: Adversarial Perturbations Prevail in the Y-Channel of the YCbCr Color Space\n[<a href=\"https://arxiv.org/pdf/2003.00883.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>densenet169: Classification of TrashNet Dataset Based on Deep Learning Models\n[<a href=\"https://ieeexplore.ieee.org/abstract/document/8622212\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>densenet201: Utilization of DenseNet201 for diagnosis of breast abnormality\n[<a href=\"https://link.springer.com/article/10.1007/s00138-019-01042-8\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>densenet161: Automated classification of histopathology images using transfer learning\n[<a href=\"https://doi.org/10.1016/j.artmed.2019.101743\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>inception_v3: Menfish Classification Based on Inception_V3 Convolutional Neural Network\n[<a href=\"https://iopscience.iop.org/article/10.1088/1757-899X/677/5/052099/pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>resnet18: Leveraging the VTA-TVM Hardware-Software Stack for FPGA Acceleration of 8-bit ResNet-18 Inference\n[<a href=\"https://dl.acm.org/doi/pdf/10.1145/3229762.3229766\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>resnet34: Automated Pavement Crack Segmentation Using Fully Convolutional U-Net with a Pretrained ResNet-34 Encoder\n[<a href=\"https://arxiv.org/pdf/2001.01912\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>resnet50: Extremely Large Minibatch SGD: Training ResNet-50 on ImageNet in 15 Minutes\n[<a href=\"https://arxiv.org/pdf/1711.04325\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>resnet101: Classification of Cervical MR Images using ResNet101\n[<a href=\"https://www.ijresm.com/Vol.2_2019/Vol2_Iss6_June19/IJRESM_V2_I6_69.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n<li>\n<p>resnet152: Deep neural networks show an equivalent and often superior performance to dermatologists in onychomycosis diagnosis: Automatic construction of onychomycosis datasets by region-based convolutional deep neural network\n[<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5774804/pdf/pone.0191493.pdf\" rel=\"nofollow\">Link</a>]</p>\n</li>\n</ol>\n<p><em><strong>More resources are available <a href=\"https://github.com/arita37/mlmodels/blob/dev/README_model_list.md\" rel=\"nofollow\">here</a></strong></em></p>\n<p>######################################################################################</p>\n<h3>\u2460 Installation Guide:</h3>\n<h3>(A) Using pre-installed Setup (one click) :</h3>\n<p><a href=\"https://github.com/arita37/mlmodels/issues/101\" rel=\"nofollow\">Read-more</a></p>\n<h3>(C) Using Colab :</h3>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_usage.md\" rel=\"nofollow\">Read-more</a></p>\n<h3>Initialize template and Tests</h3>\n<p>Will copy template, dataset, example to your folder</p>\n<pre>ml_models --init  /yourworkingFolder/\n</pre>\n<h5>To test Hyper-parameter search:</h5>\n<pre>ml_optim\n</pre>\n<h5>To test model fitting</h5>\n<pre>ml_models\n</pre>\n<h4>Actual test runs</h4>\n<p><a href=\"https://github.com/arita37/mlmodels/actions\" rel=\"nofollow\">Read-more</a></p>\n<p><img alt=\"test_fast_linux\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/25a7ab59e628638908626d8374995b1d1ff346f2/68747470733a2f2f6769746875622e636f6d2f617269746133372f6d6c6d6f64656c732f776f726b666c6f77732f746573745f666173745f6c696e75782f62616467652e737667\"></p>\n<p><img alt=\"test_fast_windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eb13a13fad181288a37d63bd1b053fe023eeb27/68747470733a2f2f6769746875622e636f6d2f617269746133372f6d6c6d6f64656c732f776f726b666c6f77732f746573745f666173745f77696e646f77732f62616467652e7376673f6272616e63683d646576\"></p>\n<p><img alt=\" All model testing (Linux) \" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43092875869853ae95a5456f463f3346a576d329/68747470733a2f2f6769746875622e636f6d2f617269746133372f6d6c6d6f64656c732f776f726b666c6f77732f636f64655f7374727563747572655f6c696e75782f62616467652e737667\"></p>\n<hr>\n<h2>Usage in Jupyter/Colab</h2>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_usage.md\" rel=\"nofollow\">Read-more</a></p>\n<hr>\n<h2>Command Line tools:</h2>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_usage_CLI.md\" rel=\"nofollow\">Read-more</a></p>\n<hr>\n<h2>Model List</h2>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_model_list.md\" rel=\"nofollow\">Read-more</a></p>\n<hr>\n<h2>How to add a new model</h2>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_addmodel.md\" rel=\"nofollow\">Read-more</a></p>\n<hr>\n<h2>Index of functions/methods</h2>\n<p><a href=\"https://github.com/arita37/mlmodels/blob/dev/README_index_doc.py\" rel=\"nofollow\">Read-more</a></p>\n<hr>\n<h3>LSTM example in TensorFlow (<a href=\"mlmodels/example/1_lstm.ipynb\" rel=\"nofollow\">Example notebook</a>)</h3>\n<h4>Define model and data definitions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_tf.1_lstm.py\"</span>\n<span class=\"n\">model_pars</span>   <span class=\"o\">=</span>  <span class=\"p\">{</span>  <span class=\"s2\">\"num_layers\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"size\"</span><span class=\"p\">:</span> <span class=\"n\">ncol_input</span><span class=\"p\">,</span> <span class=\"s2\">\"size_layer\"</span><span class=\"p\">:</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"s2\">\"output_size\"</span><span class=\"p\">:</span> <span class=\"n\">ncol_output</span><span class=\"p\">,</span> <span class=\"s2\">\"timestep\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n<span class=\"n\">data_pars</span>    <span class=\"o\">=</span>  <span class=\"p\">{</span><span class=\"s2\">\"data_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/folder/myfile.csv\"</span>  <span class=\"p\">,</span> <span class=\"s2\">\"data_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pandas\"</span> <span class=\"p\">}</span>\n<span class=\"n\">compute_pars</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"s2\">\"learning_rate\"</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"p\">}</span>\n\n<span class=\"n\">out_pars</span>     <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ztest_1lstm/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"model_path\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"ztest_1lstm/model/\"</span><span class=\"p\">}</span>\n<span class=\"n\">save_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"path\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"ztest_1lstm/model/\"</span> <span class=\"p\">}</span>\n<span class=\"n\">load_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"path\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"ztest_1lstm/model/\"</span> <span class=\"p\">}</span>\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">metrics_val</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit_metrics</span><span class=\"p\">(</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span> <span class=\"c1\"># get stats</span>\n<span class=\"n\">ypred</span>         <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n</pre>\n<hr>\n<h3>AutoML example in Gluon (<a href=\"mlmodels/example/gluon_automl.ipynb\" rel=\"nofollow\">Example notebook</a>)</h3>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n<span class=\"kn\">import</span> <span class=\"nn\">autogluon</span> <span class=\"k\">as</span> <span class=\"nn\">ag</span>\n\n<span class=\"c1\">#### Define model and data definitions</span>\n<span class=\"n\">model_uri</span> <span class=\"o\">=</span> <span class=\"s2\">\"model_gluon.gluon_automl.py\"</span>\n<span class=\"n\">data_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"train\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"uri_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"amazon_aws\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dt_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Inc\"</span><span class=\"p\">}</span>\n\n<span class=\"n\">model_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"model_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tabular\"</span><span class=\"p\">,</span>\n              <span class=\"s2\">\"learning_rate\"</span><span class=\"p\">:</span> <span class=\"n\">ag</span><span class=\"o\">.</span><span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">(</span><span class=\"mf\">1e-4</span><span class=\"p\">,</span> <span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">5e-4</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n              <span class=\"s2\">\"activation\"</span><span class=\"p\">:</span> <span class=\"n\">ag</span><span class=\"o\">.</span><span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">Categorical</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">tuple</span><span class=\"p\">([</span><span class=\"s2\">\"relu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"softrelu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tanh\"</span><span class=\"p\">])),</span>\n              <span class=\"s2\">\"layers\"</span><span class=\"p\">:</span> <span class=\"n\">ag</span><span class=\"o\">.</span><span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">Categorical</span><span class=\"p\">(</span>\n                          <span class=\"o\">*</span><span class=\"nb\">tuple</span><span class=\"p\">([[</span><span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]])),</span>\n              <span class=\"s1\">'dropout_prob'</span><span class=\"p\">:</span> <span class=\"n\">ag</span><span class=\"o\">.</span><span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">Real</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">),</span>\n              <span class=\"s1\">'num_boost_round'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n              <span class=\"s1\">'num_leaves'</span><span class=\"p\">:</span> <span class=\"n\">ag</span><span class=\"o\">.</span><span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">)</span>\n             <span class=\"p\">}</span>\n\n<span class=\"n\">compute_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"hp_tune\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"num_epochs\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"time_limits\"</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"num_trials\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"search_strategy\"</span><span class=\"p\">:</span> <span class=\"s2\">\"skopt\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"out_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dataset/\"</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>      \n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n</pre>\n<hr>\n<h3>RandomForest example in Scikit-learn (<a href=\"mlmodels/example/sklearn.ipynb\" rel=\"nofollow\">Example notebook</a>)</h3>\n<pre><code># import library\nimport mlmodels\n\n#### Define model and data definitions\nmodel_uri    = \"model_sklearn.sklearn.py\"\n\nmodel_pars   = {\"model_name\":  \"RandomForestClassifier\", \"max_depth\" : 4 , \"random_state\":0}\n\ndata_pars    = {'mode': 'test', 'path': \"../mlmodels/dataset\", 'data_type' : 'pandas' }\n\ncompute_pars = {'return_pred_not': False}\n\nout_pars    = {'path' : \"../ztest\"}\n\n\n#### Load Parameters and Train\nfrom mlmodels.models import module_load\n\nmodule        =  module_load( model_uri= model_uri )                           # Load file definition\nmodel         =  module.Model(model_pars=model_pars, data_pars=data_pars, compute_pars=compute_pars)             # Create Model instance\nmodel, sess   =  module.fit(model, data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)          # fit the model\n\n\n#### Inference\nypred       = module.predict(model,  data_pars=data_pars, compute_pars=compute_pars, out_pars=out_pars)     # predict pipeline\n</code></pre>\n<hr>\n<h3>TextCNN example in keras (<a href=\"example/textcnn.ipynb\" rel=\"nofollow\">Example notebook</a>)</h3>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n<span class=\"c1\">#### Define model and data definitions</span>\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_keras.textcnn.py\"</span>\n\n<span class=\"n\">data_pars</span>    <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"path\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"../mlmodels/dataset/text/imdb.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"train\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"maxlen\"</span><span class=\"p\">:</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s2\">\"max_features\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n\n<span class=\"n\">model_pars</span>   <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"maxlen\"</span><span class=\"p\">:</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s2\">\"max_features\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">\"embedding_dims\"</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">}</span>\n\n<span class=\"n\">compute_pars</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"engine\"</span><span class=\"p\">:</span> <span class=\"s2\">\"adam\"</span><span class=\"p\">,</span> <span class=\"s2\">\"loss\"</span><span class=\"p\">:</span> <span class=\"s2\">\"binary_crossentropy\"</span><span class=\"p\">,</span> <span class=\"s2\">\"metrics\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"accuracy\"</span><span class=\"p\">]</span> <span class=\"p\">,</span>\n                        <span class=\"s2\">\"batch_size\"</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s2\">\"epochs\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'return_pred_not'</span><span class=\"p\">:</span><span class=\"kc\">False</span><span class=\"p\">}</span>\n\n<span class=\"n\">out_pars</span>     <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ztest/model_keras/textcnn/\"</span><span class=\"p\">}</span>\n\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>          <span class=\"c1\"># fit the model</span>\n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">data_pars</span><span class=\"p\">[</span><span class=\"s1\">'train'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Using json config file for input (<a href=\"example/1_lstm_json.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/mlmodels/example/1_lstm.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span>\n\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_tf.1_lstm.py\"</span>\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n\n<span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">(</span><span class=\"n\">param_pars</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'choice'</span><span class=\"p\">:</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'config_mode'</span><span class=\"p\">:</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'data_path'</span><span class=\"p\">:</span><span class=\"s1\">'../mlmodels/example/1_lstm.json'</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">#### Load parameters and train</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>          <span class=\"c1\"># fit the model</span>\n\n<span class=\"c1\">#### Check inference</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span><span class=\"o\">=</span><span class=\"n\">sess</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n</pre>\n<hr>\n<h3>Using Scikit-learn's SVM for Titanic Problem from json file (<a href=\"mlmodels/example/sklearn_titanic_svm.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/example/sklearn_titanic_svm.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span>\n\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_sklearn.sklearn.py\"</span>\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n\n<span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">(</span><span class=\"n\">param_pars</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'choice'</span><span class=\"p\">:</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'config_mode'</span><span class=\"p\">:</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'data_path'</span><span class=\"p\">:</span><span class=\"s1\">'../mlmodels/example/sklearn_titanic_svm.json'</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>          <span class=\"c1\"># fit the model</span>\n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n<span class=\"n\">ypred</span>\n\n\n<span class=\"c1\">#### Check metrics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">roc_auc_score</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'../mlmodels/dataset/tabular/titanic_train_preprocessed.csv'</span><span class=\"p\">)[</span><span class=\"s1\">'Survived'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"n\">roc_auc_score</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Using Scikit-learn's Random Forest for Titanic Problem from json file (<a href=\"mlmodels/example/sklearn_titanic_randomForest.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/example/sklearn_titanic_randomForest.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span>\n\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_sklearn.sklearn.py\"</span>\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n\n<span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">(</span><span class=\"n\">param_pars</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'choice'</span><span class=\"p\">:</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'config_mode'</span><span class=\"p\">:</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'data_path'</span><span class=\"p\">:</span><span class=\"s1\">'../mlmodels/example/sklearn_titanic_randomForest.json'</span>\n<span class=\"p\">})</span>\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>          <span class=\"c1\"># fit the model</span>\n\n\n<span class=\"c1\">#### Inference</span>\n\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n<span class=\"n\">ypred</span>\n\n<span class=\"c1\">#### Check metrics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">roc_auc_score</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'../mlmodels/dataset/tabular/titanic_train_preprocessed.csv'</span><span class=\"p\">)[</span><span class=\"s1\">'Survived'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"n\">roc_auc_score</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Using Autogluon for Titanic Problem from json file (<a href=\"mlmodels/example/gluon_automl_titanic.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/example/gluon_automl.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span>\n\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_gluon.gluon_automl.py\"</span>\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                           <span class=\"c1\"># Load file definition</span>\n\n<span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">(</span>\n    <span class=\"n\">choice</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n    <span class=\"n\">config_mode</span><span class=\"o\">=</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span>\n    <span class=\"n\">data_path</span><span class=\"o\">=</span> <span class=\"s1\">'../mlmodels/example/gluon_automl.json'</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span>             <span class=\"c1\"># Create Model instance</span>\n<span class=\"n\">model</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>          <span class=\"c1\"># fit the model</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_summary</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#### Check inference</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n\n<span class=\"c1\">#### Check metrics</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_performance</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">roc_auc_score</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'../mlmodels/dataset/tabular/titanic_train_preprocessed.csv'</span><span class=\"p\">)[</span><span class=\"s1\">'Survived'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"n\">roc_auc_score</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<hr>\n<h3>Using hyper-params (optuna) for Titanic Problem from json file (<a href=\"mlmodels/example/sklearn_titanic_randomForest_example2.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/example/hyper_titanic_randomForest.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.optim</span> <span class=\"kn\">import</span> <span class=\"n\">optim</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">params_json_load</span>\n\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n\n<span class=\"c1\">###  hypermodel_pars, model_pars, ....</span>\n<span class=\"n\">model_uri</span>   <span class=\"o\">=</span> <span class=\"s2\">\"model_sklearn.sklearn.py\"</span>\n<span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">path_norm</span><span class=\"p\">(</span> <span class=\"s1\">'example/hyper_titanic_randomForest.json'</span>  <span class=\"p\">)</span>\n<span class=\"n\">config_mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>  <span class=\"c1\">### test/prod</span>\n\n\n\n<span class=\"c1\">#### Model Parameters</span>\n<span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">params_json_load</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">config_mode</span><span class=\"o\">=</span> <span class=\"n\">config_mode</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">module</span>            <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span> <span class=\"p\">)</span>                      \n<span class=\"n\">model_pars_update</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"p\">(</span>\n    <span class=\"n\">model_uri</span>       <span class=\"o\">=</span> <span class=\"n\">model_uri</span><span class=\"p\">,</span>\n    <span class=\"n\">hypermodel_pars</span> <span class=\"o\">=</span> <span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span>\n    <span class=\"n\">model_pars</span>      <span class=\"o\">=</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span>\n    <span class=\"n\">data_pars</span>       <span class=\"o\">=</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span>\n    <span class=\"n\">compute_pars</span>    <span class=\"o\">=</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span>\n    <span class=\"n\">out_pars</span>        <span class=\"o\">=</span> <span class=\"n\">out_pars</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"n\">model</span>         <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"o\">=</span><span class=\"n\">model_pars_update</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">)</span><span class=\"n\">y</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">sess</span>   <span class=\"o\">=</span>  <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#### Check inference</span>\n<span class=\"n\">ypred</span>         <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># predict pipeline</span>\n<span class=\"n\">ypred</span>\n\n\n<span class=\"c1\">#### Check metrics</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">roc_auc_score</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span> <span class=\"n\">path_norm</span><span class=\"p\">(</span><span class=\"s1\">'dataset/tabular/titanic_train_preprocessed.csv'</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"s1\">'Survived'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"n\">roc_auc_score</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">ypred</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Using LightGBM for Titanic Problem from json file (<a href=\"mlmodels/example/model_lightgbm.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/example/lightgbm_titanic.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<h4>Import library and functions</h4>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">path_norm_dict</span><span class=\"p\">,</span> <span class=\"n\">path_norm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\">#### Load model and data definitions from json</span>\n<span class=\"c1\"># Model defination</span>\n<span class=\"n\">model_uri</span>    <span class=\"o\">=</span> <span class=\"s2\">\"model_sklearn.model_lightgbm.py\"</span>\n<span class=\"n\">module</span>        <span class=\"o\">=</span>  <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"o\">=</span> <span class=\"n\">model_uri</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Path to JSON</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s1\">'../dataset/json/lightgbm_titanic.json'</span>  \n\n<span class=\"c1\"># Model Parameters</span>\n<span class=\"n\">pars</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span> <span class=\"n\">data_path</span> <span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">pdict</span> <span class=\"ow\">in</span>  <span class=\"n\">pars</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"p\">:</span>\n  <span class=\"nb\">globals</span><span class=\"p\">()[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path_norm_dict</span><span class=\"p\">(</span> <span class=\"n\">pdict</span>   <span class=\"p\">)</span>   <span class=\"c1\">###Normalize path</span>\n\n<span class=\"c1\">#### Load Parameters and Train</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">)</span> <span class=\"c1\"># create model instance</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span> <span class=\"c1\"># fit model</span>\n\n\n<span class=\"c1\">#### Check inference</span>\n<span class=\"n\">ypred</span>       <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span>  <span class=\"n\">data_pars</span><span class=\"o\">=</span><span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"o\">=</span><span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"o\">=</span><span class=\"n\">out_pars</span><span class=\"p\">)</span>     <span class=\"c1\"># get predictions</span>\n<span class=\"n\">ypred</span>\n\n\n<span class=\"c1\">#### Check metrics</span>\n<span class=\"n\">metrics_val</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit_metrics</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>\n<span class=\"n\">metrics_val</span> \n</pre>\n<hr>\n<h3>Using Vision CNN RESNET18 for MNIST dataset  (<a href=\"mlmodels/example/model_restnet18.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/model_tch/torchhub_cnn.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">path_norm_dict</span><span class=\"p\">,</span> <span class=\"n\">path_norm</span><span class=\"p\">,</span> <span class=\"n\">params_json_load</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n\n<span class=\"c1\">#### Model URI and Config JSON</span>\n<span class=\"n\">model_uri</span>   <span class=\"o\">=</span> <span class=\"s2\">\"model_tch.torchhub.py\"</span>\n<span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">path_norm</span><span class=\"p\">(</span> <span class=\"s1\">'model_tch/torchhub_cnn.json'</span>  <span class=\"p\">)</span>\n<span class=\"n\">config_mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>  <span class=\"c1\">### test/prod</span>\n\n\n<span class=\"c1\">#### Model Parameters</span>\n<span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">params_json_load</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">config_mode</span><span class=\"o\">=</span> <span class=\"n\">config_mode</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Setup Model </span>\n<span class=\"n\">module</span>         <span class=\"o\">=</span> <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"p\">)</span>\n<span class=\"n\">model</span>          <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">)</span> \n<span class=\"err\">`</span>\n<span class=\"c1\">#### Fit</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>           <span class=\"c1\">#### fit model</span>\n<span class=\"n\">metrics_val</span>    <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit_metrics</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>   <span class=\"c1\">#### Check fit metrics</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics_val</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">ypred</span>          <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>   \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ypred</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Using ARMDN Time Series   (<a href=\"mlmodels/example/model_timeseries_armdn.ipynb\" rel=\"nofollow\">Example notebook</a>, <a href=\"mlmodels/model_keras/armdn.json\" rel=\"nofollow\">JSON file</a>)</h3>\n<pre><span class=\"c1\"># import library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlmodels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.models</span> <span class=\"kn\">import</span> <span class=\"n\">module_load</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlmodels.util</span> <span class=\"kn\">import</span> <span class=\"n\">path_norm_dict</span><span class=\"p\">,</span> <span class=\"n\">path_norm</span><span class=\"p\">,</span> <span class=\"n\">params_json_load</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n\n<span class=\"c1\">#### Model URI and Config JSON</span>\n<span class=\"n\">model_uri</span>   <span class=\"o\">=</span> <span class=\"s2\">\"model_keras.ardmn.py\"</span>\n<span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">path_norm</span><span class=\"p\">(</span> <span class=\"s1\">'model_keras/ardmn.json'</span>  <span class=\"p\">)</span>\n<span class=\"n\">config_mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>  <span class=\"c1\">### test/prod</span>\n\n\n\n\n<span class=\"c1\">#### Model Parameters</span>\n<span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span> <span class=\"o\">=</span> <span class=\"n\">params_json_load</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"p\">,</span> <span class=\"n\">config_mode</span><span class=\"o\">=</span> <span class=\"n\">config_mode</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">hypermodel_pars</span><span class=\"p\">,</span> <span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Setup Model </span>\n<span class=\"n\">module</span>         <span class=\"o\">=</span> <span class=\"n\">module_load</span><span class=\"p\">(</span> <span class=\"n\">model_uri</span><span class=\"p\">)</span>\n<span class=\"n\">model</span>          <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">model_pars</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">)</span> \n<span class=\"err\">`</span>\n<span class=\"c1\">#### Fit</span>\n<span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>           <span class=\"c1\">#### fit model</span>\n<span class=\"n\">metrics_val</span>    <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">fit_metrics</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>   <span class=\"c1\">#### Check fit metrics</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics_val</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#### Inference</span>\n<span class=\"n\">ypred</span>          <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">data_pars</span><span class=\"p\">,</span> <span class=\"n\">compute_pars</span><span class=\"p\">,</span> <span class=\"n\">out_pars</span><span class=\"p\">)</span>   \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ypred</span><span class=\"p\">)</span>\n\n\n\n<span class=\"c1\">#### Save/Load</span>\n<span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">save_pars</span> <span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">out_pars</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span> <span class=\"o\">+</span><span class=\"s2\">\"/model/\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">load_pars</span> <span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">out_pars</span><span class=\"p\">[</span><span class=\"s1\">'path'</span><span class=\"p\">]</span> <span class=\"o\">+</span><span class=\"s2\">\"/model/\"</span><span class=\"p\">})</span>\n</pre>\n<hr>\n\n          </div>"}, "last_serial": 7128001, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a47df1fe0cdadae6b0e7bffa43a32536", "sha256": "f3157bfdc2061fa75617b3396022cbb06387214642bff7523387e6674f7d32b8"}, "downloads": -1, "filename": "mlmodels-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a47df1fe0cdadae6b0e7bffa43a32536", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12786, "upload_time": "2019-11-03T12:58:18", "upload_time_iso_8601": "2019-11-03T12:58:18.304358Z", "url": "https://files.pythonhosted.org/packages/f3/e4/81750ad80d3ba4556415d072bcefd8f0aa47f54cf065a78bad7574401013/mlmodels-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a13a314668923b93f23fbb305ad5e7ad", "sha256": "12c6c1c76588b69df59560c20790e3685d382290a4ce1b3aeae3c23e09963f84"}, "downloads": -1, "filename": "mlmodels-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a13a314668923b93f23fbb305ad5e7ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12451, "upload_time": "2019-11-03T12:58:20", "upload_time_iso_8601": "2019-11-03T12:58:20.480830Z", "url": "https://files.pythonhosted.org/packages/1d/c8/7bf80e76143e67b3abf6da6ed105fbd860afa795527a6e8da0103e778fcb/mlmodels-0.1.1.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "77696a299bf1eafc147438b85ffe492f", "sha256": "d01f083d08cd87b427f9403885b5d6840d201b7606b8f30043fc550763a59422"}, "downloads": -1, "filename": "mlmodels-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "77696a299bf1eafc147438b85ffe492f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55327, "upload_time": "2019-11-24T15:20:23", "upload_time_iso_8601": "2019-11-24T15:20:23.575040Z", "url": "https://files.pythonhosted.org/packages/09/39/802a18467422d5029fb14f125d3f2393bdcc51286c6ddd6a5aaf1efb091f/mlmodels-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a7017cf9fc6706947c66b659a839531", "sha256": "521acd1b6a3603261a6f91fa20992850b011b75dd1c0d78cdebf4d7b992d21cd"}, "downloads": -1, "filename": "mlmodels-0.10.1.tar.gz", "has_sig": false, "md5_digest": "7a7017cf9fc6706947c66b659a839531", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37688, "upload_time": "2019-11-24T15:20:24", "upload_time_iso_8601": "2019-11-24T15:20:24.735741Z", "url": "https://files.pythonhosted.org/packages/98/3c/28149762d1b6122ebd04662526061b3f2908944d783aa7a3687a33d55e3e/mlmodels-0.10.1.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "0c8cd68db4a085314c9acce83ddf40c4", "sha256": "4d2c632b9ec78fdb452e10f1ff464f5f02ff4ef92e82313293c60e5153181830"}, "downloads": -1, "filename": "mlmodels-0.11.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c8cd68db4a085314c9acce83ddf40c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55324, "upload_time": "2019-11-24T15:22:00", "upload_time_iso_8601": "2019-11-24T15:22:00.395259Z", "url": "https://files.pythonhosted.org/packages/37/3e/1dee087ca949379501c19f0796ef00964e85c903e1b8e97b6c901b994e1c/mlmodels-0.11.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d55528083c82c08443b18a40912b01da", "sha256": "0fa058751d230af52633bd5a8e690ea8bedba32d34d786ddd1af633ee2cd9392"}, "downloads": -1, "filename": "mlmodels-0.11.1.tar.gz", "has_sig": false, "md5_digest": "d55528083c82c08443b18a40912b01da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37688, "upload_time": "2019-11-24T15:22:02", "upload_time_iso_8601": "2019-11-24T15:22:02.554985Z", "url": "https://files.pythonhosted.org/packages/5a/0b/61b70967df77ed8b8b8e4b5f0d4cab2d700c5da10a675c73ff88a43d0ec6/mlmodels-0.11.1.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "67a6409c1d4d6984fe4e72c89a55c662", "sha256": "75dc66b75b222841066874bf7ee27084e0fd7cd42f27d69c7448c4f0d874bd17"}, "downloads": -1, "filename": "mlmodels-0.12.1-py3-none-any.whl", "has_sig": false, "md5_digest": "67a6409c1d4d6984fe4e72c89a55c662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238669, "upload_time": "2020-01-04T16:48:37", "upload_time_iso_8601": "2020-01-04T16:48:37.314777Z", "url": "https://files.pythonhosted.org/packages/e8/4e/aa6da41e565da2ce2d386e72c588ee240b6e92ff7f0f719152970a026ead/mlmodels-0.12.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3918f667dcd6d275a456bb16ce8f1f50", "sha256": "bc7c27b9e69a544d093e006d8470949ddf31989f002212b8b70403caa0d0e3cd"}, "downloads": -1, "filename": "mlmodels-0.12.1.tar.gz", "has_sig": false, "md5_digest": "3918f667dcd6d275a456bb16ce8f1f50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103739, "upload_time": "2020-01-04T16:48:47", "upload_time_iso_8601": "2020-01-04T16:48:47.898158Z", "url": "https://files.pythonhosted.org/packages/23/e6/80f6108dcffa83da1590620029f1852fde2d151018f3ed7afb388ef59f28/mlmodels-0.12.1.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "ebc79dadbc2e0fb1e5cb5bda4785e4b3", "sha256": "bdf76468360f4e556632fed185e1fcbcf835b57e0a37ed009e9c7d723343932b"}, "downloads": -1, "filename": "mlmodels-0.13.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ebc79dadbc2e0fb1e5cb5bda4785e4b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238669, "upload_time": "2020-01-04T16:48:38", "upload_time_iso_8601": "2020-01-04T16:48:38.797390Z", "url": "https://files.pythonhosted.org/packages/d9/a2/2a65c0a26eb62b9e99045ff8d2e009eac98e8e3d6e58662a4197b2b27a34/mlmodels-0.13.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5c3800fa527611a2d18251217e15a0f", "sha256": "b0ece5865b5e9082594e93c6877943c579c4c9779f3b1e0060d1e9cc6ee1ef8d"}, "downloads": -1, "filename": "mlmodels-0.13.1.tar.gz", "has_sig": false, "md5_digest": "e5c3800fa527611a2d18251217e15a0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103742, "upload_time": "2020-01-04T16:48:49", "upload_time_iso_8601": "2020-01-04T16:48:49.233612Z", "url": "https://files.pythonhosted.org/packages/cf/29/6e55d06d975e06b1d6c59014886214d4a91094f1685a165322198b0b99f9/mlmodels-0.13.1.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "840079c77344469af805104a5d8906c1", "sha256": "fd789afd28dc8742f0eff49ea24d19678f79b2c7d1a8c79e63d3947e84d17642"}, "downloads": -1, "filename": "mlmodels-0.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "840079c77344469af805104a5d8906c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238670, "upload_time": "2020-01-04T16:48:40", "upload_time_iso_8601": "2020-01-04T16:48:40.312316Z", "url": "https://files.pythonhosted.org/packages/93/a5/356704311b047022f4f12c6b3341aa8762cb38d0077e8e8b2d1a60b72875/mlmodels-0.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9225797e79269bd8c6dd1d7e2f5852da", "sha256": "13cad6117d87f9d18c9863f76fd437a8c5556dc76beb9f475213758d1f465f73"}, "downloads": -1, "filename": "mlmodels-0.14.1.tar.gz", "has_sig": false, "md5_digest": "9225797e79269bd8c6dd1d7e2f5852da", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103737, "upload_time": "2020-01-04T16:48:50", "upload_time_iso_8601": "2020-01-04T16:48:50.602393Z", "url": "https://files.pythonhosted.org/packages/90/88/b66538921c8686096b82ac23e399d33268e94404830868bc702f963c83af/mlmodels-0.14.1.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "1c61b15d287d8aa9e84550375e833150", "sha256": "b9c58479ea4b7490be93a27b45486950383d13eadbf8b0871161c00196fcdaa3"}, "downloads": -1, "filename": "mlmodels-0.15.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c61b15d287d8aa9e84550375e833150", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238671, "upload_time": "2020-01-04T16:48:41", "upload_time_iso_8601": "2020-01-04T16:48:41.773676Z", "url": "https://files.pythonhosted.org/packages/14/a8/a26d32e801ade9768f7758946e5e157d87e55be121eed593e7813cec6920/mlmodels-0.15.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ac1d4b9295a7954526e55e2c51464fb", "sha256": "12c934bc9f3955b0846a6f671caba264f372e5e101fbfc0fb0202f73e4537752"}, "downloads": -1, "filename": "mlmodels-0.15.1.tar.gz", "has_sig": false, "md5_digest": "1ac1d4b9295a7954526e55e2c51464fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103741, "upload_time": "2020-01-04T16:48:52", "upload_time_iso_8601": "2020-01-04T16:48:52.200011Z", "url": "https://files.pythonhosted.org/packages/32/0d/445b6bbe16f4729fbd7fc2fc6d46a8a63b2e20ce6ed07e5b0a581f06c5e0/mlmodels-0.15.1.tar.gz", "yanked": false}], "0.16.1": [{"comment_text": "", "digests": {"md5": "a046e32d70684ef6b715d08dcb73ef9c", "sha256": "b422e2f7806d79672eb649c53054073b0e3ad817da7c1327f373c5f53ad6cb00"}, "downloads": -1, "filename": "mlmodels-0.16.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a046e32d70684ef6b715d08dcb73ef9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238669, "upload_time": "2020-01-04T16:48:43", "upload_time_iso_8601": "2020-01-04T16:48:43.288608Z", "url": "https://files.pythonhosted.org/packages/2a/6a/a3d3e9a00887903898432e730c4b12fe257a1124adc1cd295dc164801b8b/mlmodels-0.16.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09da76f5405842151fee5f3d68dac40f", "sha256": "f0f114eccaa9b426e5b5164960955136d007ee34e6deec2bc355d50546fabb2d"}, "downloads": -1, "filename": "mlmodels-0.16.1.tar.gz", "has_sig": false, "md5_digest": "09da76f5405842151fee5f3d68dac40f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103812, "upload_time": "2020-01-04T16:48:53", "upload_time_iso_8601": "2020-01-04T16:48:53.534781Z", "url": "https://files.pythonhosted.org/packages/e1/2b/9a686da759b68f9dedfa55f6e6be4bf9b272d4db2363345607cbbd164986/mlmodels-0.16.1.tar.gz", "yanked": false}], "0.17.1": [{"comment_text": "", "digests": {"md5": "fdb090b67ef9a73e453e3f327dadd609", "sha256": "bfbbf11a05d45b73ab81c15c0c7dfbd53cea7d7e35fe59e849108e2d8ac60c86"}, "downloads": -1, "filename": "mlmodels-0.17.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fdb090b67ef9a73e453e3f327dadd609", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238669, "upload_time": "2020-01-04T16:48:45", "upload_time_iso_8601": "2020-01-04T16:48:45.027124Z", "url": "https://files.pythonhosted.org/packages/c4/58/c80fb052ff6222ef6d34c0acb957878e15ed717dcbc907eabf9cee131bc4/mlmodels-0.17.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d49101e4f925937756f855a902e1058", "sha256": "a74fbac013fde872bf3661a8da5269ca2eeb244a210d33de4e4c9326ef80e559"}, "downloads": -1, "filename": "mlmodels-0.17.1.tar.gz", "has_sig": false, "md5_digest": "2d49101e4f925937756f855a902e1058", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103800, "upload_time": "2020-01-04T16:48:54", "upload_time_iso_8601": "2020-01-04T16:48:54.960805Z", "url": "https://files.pythonhosted.org/packages/29/d9/b92b0c76a9e0439a7a5e3efce65b53610c2b643420df1fe4380d62acdaa4/mlmodels-0.17.1.tar.gz", "yanked": false}], "0.18.1": [{"comment_text": "", "digests": {"md5": "843936381079cf9fdf9aac68330f7f8e", "sha256": "9abec92208f24b475ca7a006b9781eadf53f4dfb88422932d77bcaa3519356f6"}, "downloads": -1, "filename": "mlmodels-0.18.1-py3-none-any.whl", "has_sig": false, "md5_digest": "843936381079cf9fdf9aac68330f7f8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 238768, "upload_time": "2020-01-04T16:54:15", "upload_time_iso_8601": "2020-01-04T16:54:15.220204Z", "url": "https://files.pythonhosted.org/packages/86/30/34cf185ec1db67d5b7963319f915236eb1e1537d95f64ff15cc397980486/mlmodels-0.18.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e04aeb6ae00b75080e7417196d79813", "sha256": "49ded96696c7415c702d55554b9e876e9f4baf6cd77088cb66f6a45322aa335c"}, "downloads": -1, "filename": "mlmodels-0.18.1.tar.gz", "has_sig": false, "md5_digest": "8e04aeb6ae00b75080e7417196d79813", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 103928, "upload_time": "2020-01-04T16:54:16", "upload_time_iso_8601": "2020-01-04T16:54:16.664497Z", "url": "https://files.pythonhosted.org/packages/a0/8b/c6793601a34a23cb45a64c11e17b9025f1860a5e9ff15cf08c04f0b46e9e/mlmodels-0.18.1.tar.gz", "yanked": false}], "0.19.1": [{"comment_text": "", "digests": {"md5": "0bcd9ce9068e23116ff782c4b5498153", "sha256": "c9a6888975ddc3795c9841050c49f1ddfe1d553401651f199277b36c87a24789"}, "downloads": -1, "filename": "mlmodels-0.19.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0bcd9ce9068e23116ff782c4b5498153", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 239158, "upload_time": "2020-01-05T07:30:31", "upload_time_iso_8601": "2020-01-05T07:30:31.985648Z", "url": "https://files.pythonhosted.org/packages/56/a9/b515d67e749e444224f55a0bc8a19cdc097af7ac0cf0a6c16f5d9cb50cfa/mlmodels-0.19.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abc79d9d030656f5726bbe407094bdc5", "sha256": "a1f6e6fc5aa96c86ca423cc505b39188411879cf2afe77ab8b8a0c97250de2f3"}, "downloads": -1, "filename": "mlmodels-0.19.1.tar.gz", "has_sig": false, "md5_digest": "abc79d9d030656f5726bbe407094bdc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 104437, "upload_time": "2020-01-05T07:30:34", "upload_time_iso_8601": "2020-01-05T07:30:34.245126Z", "url": "https://files.pythonhosted.org/packages/77/d0/e614d0ca8b26020658e4d55d39ec8f358ceee4104dd44527c3e013926e05/mlmodels-0.19.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "74c1373bc0e32a88043c6f13bf20e2d0", "sha256": "13bd59da92131da6cd5371834802cac60ef566a8c76a3a4a014dfb6d26627b4c"}, "downloads": -1, "filename": "mlmodels-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "74c1373bc0e32a88043c6f13bf20e2d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12901, "upload_time": "2019-11-03T13:43:56", "upload_time_iso_8601": "2019-11-03T13:43:56.187532Z", "url": "https://files.pythonhosted.org/packages/5d/e5/9800c9693d2b399572cbc3ff442bd412c88855fb8288e95a42bd7f1e1f38/mlmodels-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8cde98ea03913c68f24362ff423812b", "sha256": "0c5bb02d9891fd25170de33b060943c90bd1782ffeeeb6bfbfb1f79d3dbcbb11"}, "downloads": -1, "filename": "mlmodels-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f8cde98ea03913c68f24362ff423812b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12537, "upload_time": "2019-11-03T13:43:57", "upload_time_iso_8601": "2019-11-03T13:43:57.628228Z", "url": "https://files.pythonhosted.org/packages/a0/b2/5b82b7d16cdc0f81d630b59fcc04580d8e05b105ade897432a45bf2233a3/mlmodels-0.2.1.tar.gz", "yanked": false}], "0.20.1": [{"comment_text": "", "digests": {"md5": "dfa692fc52afa1934f268dc7c5c521cf", "sha256": "0038b4b43d1426b89c41dcb3138a8153e0a74782ed2cd7f373d9d33c94836862"}, "downloads": -1, "filename": "mlmodels-0.20.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dfa692fc52afa1934f268dc7c5c521cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1022348, "upload_time": "2020-02-18T07:03:05", "upload_time_iso_8601": "2020-02-18T07:03:05.165728Z", "url": "https://files.pythonhosted.org/packages/74/47/fac14e1c46ce6e931d83279a8c6803f993b7c56b7e4784652b012d623aa6/mlmodels-0.20.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "627078c4d3212983bc20dca9ceca3459", "sha256": "28e90b8df235e28716fecfaf45495b1ba8ea18947d58861e9e7f76f87673d324"}, "downloads": -1, "filename": "mlmodels-0.20.1.tar.gz", "has_sig": false, "md5_digest": "627078c4d3212983bc20dca9ceca3459", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 821753, "upload_time": "2020-02-18T07:03:07", "upload_time_iso_8601": "2020-02-18T07:03:07.042782Z", "url": "https://files.pythonhosted.org/packages/b3/0e/6fdf4b7b302f487a97e29f0e10733b117a0a3adfdbef1c296b0e03a1d05c/mlmodels-0.20.1.tar.gz", "yanked": false}], "0.21.1": [{"comment_text": "", "digests": {"md5": "778bd65726d7461be7611fd4f2b56457", "sha256": "4265b163b91c853ff2b09de0c73bc3cac99dad70f092d0d8c476ba09007f51fd"}, "downloads": -1, "filename": "mlmodels-0.21.1-py3-none-any.whl", "has_sig": false, "md5_digest": "778bd65726d7461be7611fd4f2b56457", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1035145, "upload_time": "2020-02-24T08:33:14", "upload_time_iso_8601": "2020-02-24T08:33:14.565281Z", "url": "https://files.pythonhosted.org/packages/d3/cb/d64223f5875c4ba649c5dfcd501254ec340599e733b5fa14a33a86acdedb/mlmodels-0.21.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18045bd4397c05117dec99171ec25684", "sha256": "1e1d7f0959cc68d531167bb0a1b84e05817b29acbbaeb2ea6a9f2f59ac7514c7"}, "downloads": -1, "filename": "mlmodels-0.21.1.tar.gz", "has_sig": false, "md5_digest": "18045bd4397c05117dec99171ec25684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 830215, "upload_time": "2020-02-24T08:33:17", "upload_time_iso_8601": "2020-02-24T08:33:17.400881Z", "url": "https://files.pythonhosted.org/packages/28/6d/a206aa5fdc0f934f86183c9be70e4cc15acd508c522f16dbf007aebb5bd5/mlmodels-0.21.1.tar.gz", "yanked": false}], "0.22.1": [{"comment_text": "", "digests": {"md5": "71ecc07df7e8a23a2d191cbeaa60666a", "sha256": "f40cf1e9455d09ca5ea52c7877adad5fe1bbb065006963f41687c17cebec18df"}, "downloads": -1, "filename": "mlmodels-0.22.1-py3-none-any.whl", "has_sig": false, "md5_digest": "71ecc07df7e8a23a2d191cbeaa60666a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1037232, "upload_time": "2020-02-24T16:27:31", "upload_time_iso_8601": "2020-02-24T16:27:31.335127Z", "url": "https://files.pythonhosted.org/packages/5d/25/13962e5fd930962d3c8969b2eb39b594612da514282a27e65cac16066dca/mlmodels-0.22.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db9ea1fe6e27ca6c18ecf4f48184559a", "sha256": "cbf573eba8fb1bae371e6145ce482b05ecab47c8d0430dabe0998af9ecc6ac97"}, "downloads": -1, "filename": "mlmodels-0.22.1.tar.gz", "has_sig": false, "md5_digest": "db9ea1fe6e27ca6c18ecf4f48184559a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 830209, "upload_time": "2020-02-24T16:27:32", "upload_time_iso_8601": "2020-02-24T16:27:32.895958Z", "url": "https://files.pythonhosted.org/packages/2d/19/99314f68bd3a4b33ba4f5896b78e2074d411ed3765fc76d707cd33b4797d/mlmodels-0.22.1.tar.gz", "yanked": false}], "0.23.1": [{"comment_text": "", "digests": {"md5": "593c53df8492dd9ce48c4ec04d6d72ee", "sha256": "d983ddc252ca3a4d498baafef2beb7a243c319ac43a3538c5193bca5e695ca50"}, "downloads": -1, "filename": "mlmodels-0.23.1-py3-none-any.whl", "has_sig": false, "md5_digest": "593c53df8492dd9ce48c4ec04d6d72ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1047971, "upload_time": "2020-02-29T16:47:38", "upload_time_iso_8601": "2020-02-29T16:47:38.721293Z", "url": "https://files.pythonhosted.org/packages/a8/da/7c673a16baf146270435252e5af56c1fc1835241dcce60aa51b15f16b040/mlmodels-0.23.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271a8ed5a54ed2362ffa84784ed75e98", "sha256": "df2bb4fc00d7a900b8f72b28c7804caef2b4ca05f4bf06d51071e1af61fa4d1b"}, "downloads": -1, "filename": "mlmodels-0.23.1.tar.gz", "has_sig": false, "md5_digest": "271a8ed5a54ed2362ffa84784ed75e98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 841858, "upload_time": "2020-02-29T16:47:41", "upload_time_iso_8601": "2020-02-29T16:47:41.370655Z", "url": "https://files.pythonhosted.org/packages/4f/28/0ed699f685c6b1d15b800751816c844aa8f0eb2335b24a99530112eb2330/mlmodels-0.23.1.tar.gz", "yanked": false}], "0.24.1": [{"comment_text": "", "digests": {"md5": "5b47a1f6c3c14516d1fd0840dcfe81ac", "sha256": "946f0a51abe66095550af4fd733b9d8acdf71a818dee862a99294978689a04e4"}, "downloads": -1, "filename": "mlmodels-0.24.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5b47a1f6c3c14516d1fd0840dcfe81ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1090434, "upload_time": "2020-03-03T02:09:09", "upload_time_iso_8601": "2020-03-03T02:09:09.741052Z", "url": "https://files.pythonhosted.org/packages/21/10/a77ed8e0a26e715d2c9dc94a844b898a6bcfcdbd97e0eec00640455da7db/mlmodels-0.24.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1217e91ea1bc2613292a5d6bd34c1358", "sha256": "d33c4f31399a7c9a0cba9807106b2f5cd61466c1c5e0aa076a6a44ceec63cd2c"}, "downloads": -1, "filename": "mlmodels-0.24.1.tar.gz", "has_sig": false, "md5_digest": "1217e91ea1bc2613292a5d6bd34c1358", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 877797, "upload_time": "2020-03-03T02:09:12", "upload_time_iso_8601": "2020-03-03T02:09:12.775096Z", "url": "https://files.pythonhosted.org/packages/5a/28/da9dacc772b93dd6f7712b1a59aa8ff95468c323265f50cd653e746c3c8f/mlmodels-0.24.1.tar.gz", "yanked": false}], "0.25.1": [{"comment_text": "", "digests": {"md5": "139618d157fc4624fdeaf0e02d8526e2", "sha256": "7aec7da88826d3bbe8d087449bd88bac167d8535f3b39f9f7482027e02413249"}, "downloads": -1, "filename": "mlmodels-0.25.1-py3-none-any.whl", "has_sig": false, "md5_digest": "139618d157fc4624fdeaf0e02d8526e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28203170, "upload_time": "2020-03-08T01:26:13", "upload_time_iso_8601": "2020-03-08T01:26:13.765476Z", "url": "https://files.pythonhosted.org/packages/67/96/bdb6f7d576c43d3edb54b5597078b177e1e2560f6d01273593451cc515bd/mlmodels-0.25.1-py3-none-any.whl", "yanked": false}], "0.26.1": [{"comment_text": "", "digests": {"md5": "4c28847c8a81e550067243340f70335a", "sha256": "8ab4f06d1f726c7bda91394e1acb9bff183f499a353bd98f5d69127c8286d05c"}, "downloads": -1, "filename": "mlmodels-0.26.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4c28847c8a81e550067243340f70335a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28208305, "upload_time": "2020-03-08T23:08:35", "upload_time_iso_8601": "2020-03-08T23:08:35.738780Z", "url": "https://files.pythonhosted.org/packages/1e/ea/e2913619883ab3019ad212a137fb77677e3cb03092cfdd0730eced53f7c9/mlmodels-0.26.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32e3d82681235d8090ac95fd30948a4c", "sha256": "bd629acaa790a3ac2139a8db05cb59b647ad4f2dd83680db228f51cc5ece2715"}, "downloads": -1, "filename": "mlmodels-0.26.1.tar.gz", "has_sig": false, "md5_digest": "32e3d82681235d8090ac95fd30948a4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27890765, "upload_time": "2020-03-08T23:08:43", "upload_time_iso_8601": "2020-03-08T23:08:43.333527Z", "url": "https://files.pythonhosted.org/packages/f2/49/e666d2002fd1d5f3cce4109d6f21e368e7adb3e98a1e6d5befcd246eacaf/mlmodels-0.26.1.tar.gz", "yanked": false}], "0.27.1": [{"comment_text": "", "digests": {"md5": "0838ca3162948f7aa208d17ce62d09ee", "sha256": "406961fa9019fa462f5a0c201b3d6b90b4b8155f67b85d55fd6f18e4edf45e77"}, "downloads": -1, "filename": "mlmodels-0.27.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0838ca3162948f7aa208d17ce62d09ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28355474, "upload_time": "2020-03-10T16:52:28", "upload_time_iso_8601": "2020-03-10T16:52:28.417525Z", "url": "https://files.pythonhosted.org/packages/b8/a2/1ba02b59085c150b5a24540ffe23e342265ed3004347e263d5d962032471/mlmodels-0.27.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18aa21db4fa6b820adbb876393d0bd6f", "sha256": "60ddab7d94bd3e021c223310e6440b68cc90ecaeec203fcb49740fae3ac593b7"}, "downloads": -1, "filename": "mlmodels-0.27.1.tar.gz", "has_sig": false, "md5_digest": "18aa21db4fa6b820adbb876393d0bd6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27904524, "upload_time": "2020-03-10T16:52:41", "upload_time_iso_8601": "2020-03-10T16:52:41.403351Z", "url": "https://files.pythonhosted.org/packages/aa/c8/505296f5f0bc568a09ecfcbbf6e8c00538c88f03147e22b2ddec415f3a25/mlmodels-0.27.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "721a23fd566ccf3a7b64b925501b99bc", "sha256": "c2f5af610ce166513988289b7558e50951968459e34c69bf4e7763bf293bfa86"}, "downloads": -1, "filename": "mlmodels-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "721a23fd566ccf3a7b64b925501b99bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13173, "upload_time": "2019-11-04T03:30:55", "upload_time_iso_8601": "2019-11-04T03:30:55.034270Z", "url": "https://files.pythonhosted.org/packages/92/24/72f0c23fc5d5664d43e399e3a60871338c993ec58465d7cadca3f7a553c6/mlmodels-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6399c999f82462a885c9d0b092ada61b", "sha256": "57c8ca95d0a5525d465a13991088437df151d69a141c924e7bbf32b65139c2d7"}, "downloads": -1, "filename": "mlmodels-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6399c999f82462a885c9d0b092ada61b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12760, "upload_time": "2019-11-04T03:30:56", "upload_time_iso_8601": "2019-11-04T03:30:56.295539Z", "url": "https://files.pythonhosted.org/packages/dc/84/64497645ebc58ccc678ecf7e5fff3bafafd8f3dba8955ca3d9557334901d/mlmodels-0.3.1.tar.gz", "yanked": false}], "0.34.1": [{"comment_text": "", "digests": {"md5": "42f92f001b28d7479fbfc5c179e603aa", "sha256": "50a98b157c3e0491d6b6882d4f8524784772c812f694e76bcd087f6d7df4e5ad"}, "downloads": -1, "filename": "mlmodels-0.34.1-py3-none-any.whl", "has_sig": false, "md5_digest": "42f92f001b28d7479fbfc5c179e603aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4277576, "upload_time": "2020-04-29T10:09:58", "upload_time_iso_8601": "2020-04-29T10:09:58.380388Z", "url": "https://files.pythonhosted.org/packages/c6/b0/2dbbde63bb819543ea0f6a670d31c6f13fa742e9bf32dc8ed0bc1aa5b262/mlmodels-0.34.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a4a3af76fffae20e14fccfd4add385e", "sha256": "49f069407a6cee56649ff79193d784ce7e6d46445c6fcb4f98ccad66636a983b"}, "downloads": -1, "filename": "mlmodels-0.34.1.tar.gz", "has_sig": false, "md5_digest": "3a4a3af76fffae20e14fccfd4add385e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5137288, "upload_time": "2020-04-29T10:10:00", "upload_time_iso_8601": "2020-04-29T10:10:00.409728Z", "url": "https://files.pythonhosted.org/packages/0f/6c/22cf1a3ca18237dc304d7e005d7864a50c96f6c69eced49f9885485bc7e5/mlmodels-0.34.1.tar.gz", "yanked": false}], "0.35.1": [{"comment_text": "", "digests": {"md5": "33d82ba572e2c028394276d6363d36a5", "sha256": "7b689d85d044b33c4fc32cb305d0b9155ca230e542e50b76068a27215a7daa92"}, "downloads": -1, "filename": "mlmodels-0.35.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33d82ba572e2c028394276d6363d36a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4277604, "upload_time": "2020-04-29T10:13:31", "upload_time_iso_8601": "2020-04-29T10:13:31.331711Z", "url": "https://files.pythonhosted.org/packages/8d/f2/fc6d30521a913820ec1d185449db37e65d3a73d723156da12d2df6dcca89/mlmodels-0.35.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13750ab51164fd524f0746a03ab3ff97", "sha256": "8b400b5ca55c6e5e310f6fca9457d249ed821df4029f306cbf4afc876ed7e74f"}, "downloads": -1, "filename": "mlmodels-0.35.1.tar.gz", "has_sig": false, "md5_digest": "13750ab51164fd524f0746a03ab3ff97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5137285, "upload_time": "2020-04-29T10:13:35", "upload_time_iso_8601": "2020-04-29T10:13:35.301204Z", "url": "https://files.pythonhosted.org/packages/f2/a2/95597df91f916fe1289a3ecf28e43692bbd7eac332933a555e2fa7164a1e/mlmodels-0.35.1.tar.gz", "yanked": false}], "0.36.1": [{"comment_text": "", "digests": {"md5": "0de0695b17929cefbfc8067de529e1d5", "sha256": "26bbf7e5029303a4016608e1c10facb2949fd9f63da42eda86dfc8dd4f0c7636"}, "downloads": -1, "filename": "mlmodels-0.36.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0de0695b17929cefbfc8067de529e1d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4277618, "upload_time": "2020-04-29T10:16:18", "upload_time_iso_8601": "2020-04-29T10:16:18.256884Z", "url": "https://files.pythonhosted.org/packages/e3/65/d8103b3424f5e5951de743b1ac00ccd1bfc305bfcb067f72a8cbc814c213/mlmodels-0.36.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a5a6263a01ad07169e8878e8d6b1f76", "sha256": "bfe73f0e1b4304c9441d49ff9b76763afab05f8da40510231e2fda9128b9b2d7"}, "downloads": -1, "filename": "mlmodels-0.36.1.tar.gz", "has_sig": false, "md5_digest": "7a5a6263a01ad07169e8878e8d6b1f76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5137339, "upload_time": "2020-04-29T10:16:21", "upload_time_iso_8601": "2020-04-29T10:16:21.618964Z", "url": "https://files.pythonhosted.org/packages/59/8d/4ac61b45c4bdcd3023680e4a1ad3dcf56cb7c459e6a3eed6f03e7b2cd7ae/mlmodels-0.36.1.tar.gz", "yanked": false}], "0.37.1": [{"comment_text": "", "digests": {"md5": "1612304a6d512e78dd9a4ce4eec5ddd0", "sha256": "77bded31ac178c8c7d7cc1294694b6e482555d3c4821b4da321501e4882e77a4"}, "downloads": -1, "filename": "mlmodels-0.37.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1612304a6d512e78dd9a4ce4eec5ddd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4282587, "upload_time": "2020-04-29T11:14:47", "upload_time_iso_8601": "2020-04-29T11:14:47.465832Z", "url": "https://files.pythonhosted.org/packages/ca/a7/4f7f10e11c1853e7ef1708426f77f07ee81d372f836815f4ac7e28dac01c/mlmodels-0.37.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "674868b79aa7931567db69fe810f8a4d", "sha256": "8695d780ed8097c407fc7ec7e4155ea60cdab0b9213652026f41b629dbab7938"}, "downloads": -1, "filename": "mlmodels-0.37.1.tar.gz", "has_sig": false, "md5_digest": "674868b79aa7931567db69fe810f8a4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5153469, "upload_time": "2020-04-29T11:14:50", "upload_time_iso_8601": "2020-04-29T11:14:50.878883Z", "url": "https://files.pythonhosted.org/packages/0c/74/9b46ac8201d2fe6631084bcc327d14342e0d7f070e391b9349d36816de1e/mlmodels-0.37.1.tar.gz", "yanked": false}], "0.38.1": [{"comment_text": "", "digests": {"md5": "5c94017bce3bd077e560ec9268bf4a6e", "sha256": "e63e67edd3df5e9ee5ddcc4e14ffe61419f87e5ce6c4411ebc9b0f8c527bf09e"}, "downloads": -1, "filename": "mlmodels-0.38.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c94017bce3bd077e560ec9268bf4a6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4282477, "upload_time": "2020-04-29T11:17:15", "upload_time_iso_8601": "2020-04-29T11:17:15.615279Z", "url": "https://files.pythonhosted.org/packages/27/81/b48e400d7d0e6c97fb7566a6a48ec31882c1ec918f360e243b88d7147ea4/mlmodels-0.38.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f545272393d79fa38c62f5d030d9dc85", "sha256": "34fa60bb3aaa4997ac28c9e2e64176ce05f39351d8d314b4d8a5d3194d0d74cc"}, "downloads": -1, "filename": "mlmodels-0.38.1.tar.gz", "has_sig": false, "md5_digest": "f545272393d79fa38c62f5d030d9dc85", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5153213, "upload_time": "2020-04-29T11:17:18", "upload_time_iso_8601": "2020-04-29T11:17:18.174827Z", "url": "https://files.pythonhosted.org/packages/8a/69/23f54dc4af5166b555115d1f50b460c2f87462ab44df92d1debfcc3051d7/mlmodels-0.38.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4f085d65fcd2c712ccf215d685617496", "sha256": "318ca8b7fda7cd678dfa1a244caab824de4856c55df412e3358d0cfc8504afc2"}, "downloads": -1, "filename": "mlmodels-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f085d65fcd2c712ccf215d685617496", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14591, "upload_time": "2019-11-04T16:37:11", "upload_time_iso_8601": "2019-11-04T16:37:11.231975Z", "url": "https://files.pythonhosted.org/packages/fd/b8/18e8308c62b5437506e18120750ab98a09ca4e30f5edce4a90854f141ad5/mlmodels-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72ae976b08fbc596c1d7f16c10608e32", "sha256": "26e6082336f1bfa92aebeee6261dc9e1ce9a3053e35eade0e921f1bb7ee9572b"}, "downloads": -1, "filename": "mlmodels-0.4.1.tar.gz", "has_sig": false, "md5_digest": "72ae976b08fbc596c1d7f16c10608e32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13618, "upload_time": "2019-11-04T16:37:13", "upload_time_iso_8601": "2019-11-04T16:37:13.369617Z", "url": "https://files.pythonhosted.org/packages/02/d7/4c03958db81a9257e5a5aa38b98062a72477c9f10b4643299bc93dec38a1/mlmodels-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a2dc0af04810436828d35a5e4fdde1e9", "sha256": "1cab586bdaa896a770c64624378a8175c2175add6a149dd4470095cf6e41b107"}, "downloads": -1, "filename": "mlmodels-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a2dc0af04810436828d35a5e4fdde1e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14004, "upload_time": "2019-11-09T17:26:33", "upload_time_iso_8601": "2019-11-09T17:26:33.554476Z", "url": "https://files.pythonhosted.org/packages/01/12/3a3f9a0f827a7903291bebe80884a38c1c6a1016f3016e4b0bff83968dea/mlmodels-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2a52bf6a6ad79930c8aa1f735e2c8eb", "sha256": "a416414ba7444ee14bf6a571c796efd2e44debbc5107464e82840dd6d76f377c"}, "downloads": -1, "filename": "mlmodels-0.5.1.tar.gz", "has_sig": false, "md5_digest": "b2a52bf6a6ad79930c8aa1f735e2c8eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14000, "upload_time": "2019-11-09T17:26:34", "upload_time_iso_8601": "2019-11-09T17:26:34.939282Z", "url": "https://files.pythonhosted.org/packages/79/1a/bf8582409fe226c75ba89ff8757b9317de16c573459fe3c886ed4402a188/mlmodels-0.5.1.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "4a475cae34bd7a880e094628dda58ffb", "sha256": "7452a00d294bdcf77f08929fdd3d4a73e4479b3556a6b4fdb7c7a39388f09336"}, "downloads": -1, "filename": "mlmodels-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a475cae34bd7a880e094628dda58ffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14012, "upload_time": "2019-11-09T17:28:12", "upload_time_iso_8601": "2019-11-09T17:28:12.319801Z", "url": "https://files.pythonhosted.org/packages/81/71/ee90c0d91eb93bf78528f1754975aa8664a636ba95815dbc598b7a8e94d5/mlmodels-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7b8fd2ff8e7525cd6412bf5a1c348e3", "sha256": "89f2835468097c2e8da79b5713833ee5820a53308340f6d4e0c515a6d7057f31"}, "downloads": -1, "filename": "mlmodels-0.6.1.tar.gz", "has_sig": false, "md5_digest": "c7b8fd2ff8e7525cd6412bf5a1c348e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14011, "upload_time": "2019-11-09T17:28:14", "upload_time_iso_8601": "2019-11-09T17:28:14.394929Z", "url": "https://files.pythonhosted.org/packages/c4/ef/64f9f2eb9bf4567e0365240db52c832337623efb8112453bfb60b0fe58ca/mlmodels-0.6.1.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "c67e1006dbec305f48293049b4abbafe", "sha256": "1421213d4e5c9efd0f6413dfe6085a8a1252918251ab66b6109d478938d33eed"}, "downloads": -1, "filename": "mlmodels-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c67e1006dbec305f48293049b4abbafe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26249, "upload_time": "2019-11-23T14:46:30", "upload_time_iso_8601": "2019-11-23T14:46:30.894222Z", "url": "https://files.pythonhosted.org/packages/b7/73/c0b135004b31f3fcf5597ea2b8b9f112a12675bb8718352d5d1213aa80b3/mlmodels-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "852ffda2b0ce823ced80ff30cd4dfcd5", "sha256": "0b824f9229275995411b981ba05da8887f10d9058dab045c858dce2f969b34cf"}, "downloads": -1, "filename": "mlmodels-0.7.1.tar.gz", "has_sig": false, "md5_digest": "852ffda2b0ce823ced80ff30cd4dfcd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15228, "upload_time": "2019-11-23T14:46:33", "upload_time_iso_8601": "2019-11-23T14:46:33.266783Z", "url": "https://files.pythonhosted.org/packages/f0/fe/1f8c40768e34204d908c57126f770271c4b9d2dc5dd5759fac59f4567a0a/mlmodels-0.7.1.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "17b542402f3b47c4008db3478ebe0986", "sha256": "6a1f805f790f59d475803e9380407197c0be4bdd74638e583d85eb9400b51d77"}, "downloads": -1, "filename": "mlmodels-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17b542402f3b47c4008db3478ebe0986", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28185, "upload_time": "2019-11-24T15:05:17", "upload_time_iso_8601": "2019-11-24T15:05:17.099104Z", "url": "https://files.pythonhosted.org/packages/a1/e2/26af12237c63d5ca71471935a7f1126d1fefc308d37fc9afada0cb8097f7/mlmodels-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ae73a33ec4e7bf403d08be92c29f6a5", "sha256": "af3b4a9f56132fe4fb1de3643002083118e1915fe791b12ae4cdad7b40129217"}, "downloads": -1, "filename": "mlmodels-0.8.1.tar.gz", "has_sig": false, "md5_digest": "2ae73a33ec4e7bf403d08be92c29f6a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16517, "upload_time": "2019-11-24T15:05:19", "upload_time_iso_8601": "2019-11-24T15:05:19.984106Z", "url": "https://files.pythonhosted.org/packages/2d/8b/7f281d7e22c87e68d90f8afbf350b2d580763f4f0e638bf12fa17e407d94/mlmodels-0.8.1.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "4485123fb694f9086b8e6119a6e760b7", "sha256": "9869bcd608cb4b42d4aed3c266fd831856bbc3b2940971082524c6006598bfdd"}, "downloads": -1, "filename": "mlmodels-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4485123fb694f9086b8e6119a6e760b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50615, "upload_time": "2019-11-24T15:10:37", "upload_time_iso_8601": "2019-11-24T15:10:37.741077Z", "url": "https://files.pythonhosted.org/packages/af/3e/c52b15ce22a8652112872d32f7d8b062c420515653d54c1d4e9e378d8e06/mlmodels-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edf107ca4e9cac6aa7034a58ae419eb3", "sha256": "226067b2079c0f6f74172de051fb36fa6bebd7418d7b20058fb5da77d885a526"}, "downloads": -1, "filename": "mlmodels-0.9.1.tar.gz", "has_sig": false, "md5_digest": "edf107ca4e9cac6aa7034a58ae419eb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35943, "upload_time": "2019-11-24T15:10:41", "upload_time_iso_8601": "2019-11-24T15:10:41.414696Z", "url": "https://files.pythonhosted.org/packages/57/1e/50712161ffbe4762b3a385f1ae5b6c0730baa29367bf24b3256448024118/mlmodels-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c94017bce3bd077e560ec9268bf4a6e", "sha256": "e63e67edd3df5e9ee5ddcc4e14ffe61419f87e5ce6c4411ebc9b0f8c527bf09e"}, "downloads": -1, "filename": "mlmodels-0.38.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c94017bce3bd077e560ec9268bf4a6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4282477, "upload_time": "2020-04-29T11:17:15", "upload_time_iso_8601": "2020-04-29T11:17:15.615279Z", "url": "https://files.pythonhosted.org/packages/27/81/b48e400d7d0e6c97fb7566a6a48ec31882c1ec918f360e243b88d7147ea4/mlmodels-0.38.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f545272393d79fa38c62f5d030d9dc85", "sha256": "34fa60bb3aaa4997ac28c9e2e64176ce05f39351d8d314b4d8a5d3194d0d74cc"}, "downloads": -1, "filename": "mlmodels-0.38.1.tar.gz", "has_sig": false, "md5_digest": "f545272393d79fa38c62f5d030d9dc85", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5153213, "upload_time": "2020-04-29T11:17:18", "upload_time_iso_8601": "2020-04-29T11:17:18.174827Z", "url": "https://files.pythonhosted.org/packages/8a/69/23f54dc4af5166b555115d1f50b460c2f87462ab44df92d1debfcc3051d7/mlmodels-0.38.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:27 2020"}