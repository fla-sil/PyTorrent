{"info": {"author": "Somshubra Majumdar", "author_email": "titu1994@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n# EfficientNets in Keras\n[![Build Status](https://travis-ci.org/titu1994/keras-efficientnets.svg?branch=master)](https://travis-ci.org/titu1994/keras-efficientnets)\n\nKeras implementation of EfficientNets from the paper [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](https://arxiv.org/abs/1905.11946).\n\nContains code to build the EfficientNets B0-B7 from the paper, and includes weights for configurations B0-B3. B4-B7 weights will be ported when made available from the Tensorflow repository.\n\nSupports building any other configuration model of efficient nets as well, other than the B0-B7 variants.\n\n# Efficient Nets and Compound Coefficeint Scaling \nThe core idea about Efficient Nets is the use of compound scaling - using a weighted scale of three inter-connected hyper parameters of the model - Resolution of the input, Depth of the Network and Width of the Network.\n\n<p align=\"center\">\n<img src=\"https://latex.codecogs.com/png.latex?\\inline&space;\\dpi{300}&space;\\bg_white&space;\\begin{align*}&space;depth:&&space;d&space;=&space;\\alpha&space;^&space;\\phi&space;\\\\&space;width:&&space;w&space;=&space;\\beta&space;^&space;\\phi&space;\\\\&space;resolution:&&space;r&space;=&space;\\gamma&space;^&space;\\phi&space;\\end{align*}\" title=\"\\begin{align*} depth:& d = \\alpha ^ \\phi \\\\ width:& w = \\beta ^ \\phi \\\\ resolution:& r = \\gamma ^ \\phi \\end{align*}\" height=25% width=25%/>\n</p>\n\nWhen `phi`, the compound coefficient, is initially set to 1, we get the base configuration - in this case `EfficientNetB0`. We then use this configuration in a grid search to find the coefficients `alpha`, `beta` and `gamma` which optimize the following objective under the constraint:\n\n<p align=\"center\">\n<img src=\"https://latex.codecogs.com/png.latex?\\inline&space;\\dpi{300}&space;\\begin{align*}&space;\\alpha&space;\\cdot&space;\\beta&space;^&space;2&space;\\cdot&space;\\gamma&space;^&space;2&space;&\\approx&space;2&space;\\\\&space;\\alpha&space;\\ge&space;1,&space;\\beta&space;\\ge&space;&1,&space;\\gamma&space;\\ge&space;1&space;\\end{align*}\" title=\"\\begin{align*} \\alpha \\cdot \\beta ^ 2 \\cdot \\gamma ^ 2 &\\approx 2 \\\\ \\alpha \\ge 1, \\beta \\ge &1, \\gamma \\ge 1 \\end{align*}\" height=25% width=25%/>\n</p>\n\nOnce these coefficients for `alpha`, `beta` and `gamma` are found, then simply scale `phi`, the compound coeffieints by different amounts to get a family of models with more capacity and possibly better performance.\n\n-----\n\nIn doing so, and using Neural Architecture Search to get the base configuration as well as great coefficients for the above, the paper generates EfficientNets, which outperform much larger and much deeper models while using less resources during both training and evaluation.\n\n<img src=\"https://raw.githubusercontent.com/tensorflow/tpu/master/models/official/efficientnet/g3doc/params.png\" height=100% width=49%> <img src=\"https://raw.githubusercontent.com/tensorflow/tpu/master/models/official/efficientnet/g3doc/flops.png\" height=100% width=49%>\n\n# Installation\n\n## From PyPI:\n\n```$ pip install keras_efficientnets```\n\n## From Master branch:\n\n```\npip install git+https://github.com/titu1994/keras-efficientnets.git\n\nOR\n\ngit clone https://github.com/titu1994/keras-efficientnets.git\ncd keras-efficientnets\npip install .\n```\n\n# Usage\nSimply import `keras_efficientnets` and call either the model builder `EfficientNet` or the pre-built versions `EfficientNetBX` where `X` ranger from 0 to 7.\n\n```python\nfrom keras_efficientnets import EfficientNetB0\n\nmodel = EfficientNetB0(input_size, classes=1000, include_top=True, weights='imagenet')\n```\n\nTo construct custom EfficientNets, use the `EfficientNet` builder. The `EfficientNet` builder code requires a list of `BlockArgs`\nas input to define the structure of each block in model. A default set of `BlockArgs` are provided in `keras_efficientnets.config`.\n\n```python\nfrom keras_efficientnets import EfficientNet, BlockArgs\n\nblock_args_list = [\n    # First number is `input_channels`, second is `output_channels`.\n    BlockArgs(32, 16, kernel_size=3, strides=(1, 1), num_repeat=1, se_ratio=0.25, expand_ratio=1),\n    BlockArgs(16, 24, kernel_size=3, strides=(2, 2), num_repeat=2, se_ratio=0.25, expand_ratio=6),\n    ...\n]\n\nmodel = EfficientNet(input_shape, block_args_list, ...)\n```\n\n# Computing Valid Compound Coefficients\nIn the paper, compound coefficients are obtained via simple grid search to find optimal values of `alpha`,\n`beta` and `gamma` while keeping `phi` as 1.\n\nThis library provides a utility function to compute valid candidates that satisfy a user defined criterion\nfunction (the one from the paper is provided as the default cost function), and quickly computes\nthe set of hyper parameters that closely satisfy the cost function (here, MSE between the value and max cost permissible).\n\nAn example is shown below which uses the default parameters from the paper. The user can change the number of coefficients\nas well as the cost function itself in order to get different values of the compound coefficients.\n\n```python\nfrom keras_efficientnets.optimize import optimize_coefficients\nfrom keras_efficientnets.optimize import get_compound_coeff_func\n\nresults = optimize_coefficients(phi=1., max_cost=2.0, search_per_coeff=10)\ncost_func = get_compound_coeff_func(phi=1.0, max_cost=2.0)\n\nprint(\"Num unique configs = \", len(results))\nfor i in range(10):  # print just the first 10 results out of 1000 results\n    print(i + 1, results[i], \"Cost :\", cost_func(results[i]))\n```\n\nIncrease the number of search scopes using `search_per_coeff` to some larger int value. You could also combine this\nwith `tol` to compute a vast set of coefficients, and then select only those that have a cost value lower than the\nspecified tolerance.\n\n```python\nfrom keras_efficientnets.optimize import optimize_coefficients\nfrom keras_efficientnets.optimize import get_compound_coeff_func\n\nresults = optimize_coefficients(phi=1., max_cost=2.0, search_per_coeff=10, tol=1e-10)\ncost_func = get_compound_coeff_func(phi=1.0, max_cost=2.0)\n\nprint(\"Num unique configs = \", len(results))\nfor i in range(10):  # print just the first 10 results out of 125 results\n    print(i + 1, results[i], \"Cost :\", cost_func(results[i]))\n```\n\n# Requirements\n- Tensorflow 1.13+ (CPU or GPU version must be installed *before* installation of this library)\n- Keras 2.2.4+\n\n# References\n```\n[1] Mingxing Tan and Quoc V. Le. EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks. ICML 2019. Arxiv link: https://arxiv.org/abs/1905.11946.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/titu1994/keras-efficientnets", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/titu1994/keras-efficientnets", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keras-efficientnets", "package_url": "https://pypi.org/project/keras-efficientnets/", "platform": "", "project_url": "https://pypi.org/project/keras-efficientnets/", "project_urls": {"Download": "https://github.com/titu1994/keras-efficientnets", "Homepage": "https://github.com/titu1994/keras-efficientnets"}, "release_url": "https://pypi.org/project/keras-efficientnets/0.1.7/", "requires_dist": ["keras (>=2.2.4)", "scipy (>=1.1.0)", "scikit-learn (>=0.21.2)", "pytest ; extra == 'test'", "pillow ; extra == 'test'"], "requires_python": ">=3.0.0", "summary": "Keras implementation of EfficientNets of any configuration.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EfficientNets in Keras</h1>\n<p><a href=\"https://travis-ci.org/titu1994/keras-efficientnets\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ebfcb375cb7d2d82a43ac3461bf625e862f045f/68747470733a2f2f7472617669732d63692e6f72672f74697475313939342f6b657261732d656666696369656e746e6574732e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Keras implementation of EfficientNets from the paper <a href=\"https://arxiv.org/abs/1905.11946\" rel=\"nofollow\">EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks</a>.</p>\n<p>Contains code to build the EfficientNets B0-B7 from the paper, and includes weights for configurations B0-B3. B4-B7 weights will be ported when made available from the Tensorflow repository.</p>\n<p>Supports building any other configuration model of efficient nets as well, other than the B0-B7 variants.</p>\n<h1>Efficient Nets and Compound Coefficeint Scaling</h1>\n<p>The core idea about Efficient Nets is the use of compound scaling - using a weighted scale of three inter-connected hyper parameters of the model - Resolution of the input, Depth of the Network and Width of the Network.</p>\n<p align=\"center\">\n<img height=\"25%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe998467d67d4e76b3f0c81fd7d52db053735d7c/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f5c696e6c696e652673706163653b5c6470697b3330307d2673706163653b5c62675f77686974652673706163653b5c626567696e7b616c69676e2a7d2673706163653b64657074683a262673706163653b642673706163653b3d2673706163653b5c616c7068612673706163653b5e2673706163653b5c7068692673706163653b5c5c2673706163653b77696474683a262673706163653b772673706163653b3d2673706163653b5c626574612673706163653b5e2673706163653b5c7068692673706163653b5c5c2673706163653b7265736f6c7574696f6e3a262673706163653b722673706163653b3d2673706163653b5c67616d6d612673706163653b5e2673706163653b5c7068692673706163653b5c656e647b616c69676e2a7d\" width=\"25%/\">\n</p>\n<p>When <code>phi</code>, the compound coefficient, is initially set to 1, we get the base configuration - in this case <code>EfficientNetB0</code>. We then use this configuration in a grid search to find the coefficients <code>alpha</code>, <code>beta</code> and <code>gamma</code> which optimize the following objective under the constraint:</p>\n<p align=\"center\">\n<img height=\"25%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc03bbc347eef78c683053ad5e24f5e348c5562b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f5c696e6c696e652673706163653b5c6470697b3330307d2673706163653b5c626567696e7b616c69676e2a7d2673706163653b5c616c7068612673706163653b5c63646f742673706163653b5c626574612673706163653b5e2673706163653b322673706163653b5c63646f742673706163653b5c67616d6d612673706163653b5e2673706163653b322673706163653b265c617070726f782673706163653b322673706163653b5c5c2673706163653b5c616c7068612673706163653b5c67652673706163653b312c2673706163653b5c626574612673706163653b5c67652673706163653b26312c2673706163653b5c67616d6d612673706163653b5c67652673706163653b312673706163653b5c656e647b616c69676e2a7d\" width=\"25%/\">\n</p>\n<p>Once these coefficients for <code>alpha</code>, <code>beta</code> and <code>gamma</code> are found, then simply scale <code>phi</code>, the compound coeffieints by different amounts to get a family of models with more capacity and possibly better performance.</p>\n<hr>\n<p>In doing so, and using Neural Architecture Search to get the base configuration as well as great coefficients for the above, the paper generates EfficientNets, which outperform much larger and much deeper models while using less resources during both training and evaluation.</p>\n<p><img height=\"100%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acfb05f8a49eb76db65cf17ac4455aa800f1ab37/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74656e736f72666c6f772f7470752f6d61737465722f6d6f64656c732f6f6666696369616c2f656666696369656e746e65742f6733646f632f706172616d732e706e67\" width=\"49%\"> <img height=\"100%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02731be4faa16b3d9288be054750067e2621f31a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74656e736f72666c6f772f7470752f6d61737465722f6d6f64656c732f6f6666696369616c2f656666696369656e746e65742f6733646f632f666c6f70732e706e67\" width=\"49%\"></p>\n<h1>Installation</h1>\n<h2>From PyPI:</h2>\n<p><code>$ pip install keras_efficientnets</code></p>\n<h2>From Master branch:</h2>\n<pre><code>pip install git+https://github.com/titu1994/keras-efficientnets.git\n\nOR\n\ngit clone https://github.com/titu1994/keras-efficientnets.git\ncd keras-efficientnets\npip install .\n</code></pre>\n<h1>Usage</h1>\n<p>Simply import <code>keras_efficientnets</code> and call either the model builder <code>EfficientNet</code> or the pre-built versions <code>EfficientNetBX</code> where <code>X</code> ranger from 0 to 7.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets</span> <span class=\"kn\">import</span> <span class=\"n\">EfficientNetB0</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">EfficientNetB0</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">include_top</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"s1\">'imagenet'</span><span class=\"p\">)</span>\n</pre>\n<p>To construct custom EfficientNets, use the <code>EfficientNet</code> builder. The <code>EfficientNet</code> builder code requires a list of <code>BlockArgs</code>\nas input to define the structure of each block in model. A default set of <code>BlockArgs</code> are provided in <code>keras_efficientnets.config</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets</span> <span class=\"kn\">import</span> <span class=\"n\">EfficientNet</span><span class=\"p\">,</span> <span class=\"n\">BlockArgs</span>\n\n<span class=\"n\">block_args_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># First number is `input_channels`, second is `output_channels`.</span>\n    <span class=\"n\">BlockArgs</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">num_repeat</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">se_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"n\">expand_ratio</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">BlockArgs</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strides</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">num_repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">se_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"n\">expand_ratio</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">EfficientNet</span><span class=\"p\">(</span><span class=\"n\">input_shape</span><span class=\"p\">,</span> <span class=\"n\">block_args_list</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h1>Computing Valid Compound Coefficients</h1>\n<p>In the paper, compound coefficients are obtained via simple grid search to find optimal values of <code>alpha</code>,\n<code>beta</code> and <code>gamma</code> while keeping <code>phi</code> as 1.</p>\n<p>This library provides a utility function to compute valid candidates that satisfy a user defined criterion\nfunction (the one from the paper is provided as the default cost function), and quickly computes\nthe set of hyper parameters that closely satisfy the cost function (here, MSE between the value and max cost permissible).</p>\n<p>An example is shown below which uses the default parameters from the paper. The user can change the number of coefficients\nas well as the cost function itself in order to get different values of the compound coefficients.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">optimize_coefficients</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">get_compound_coeff_func</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">optimize_coefficients</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">max_cost</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">search_per_coeff</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">cost_func</span> <span class=\"o\">=</span> <span class=\"n\">get_compound_coeff_func</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">max_cost</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Num unique configs = \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>  <span class=\"c1\"># print just the first 10 results out of 1000 results</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"s2\">\"Cost :\"</span><span class=\"p\">,</span> <span class=\"n\">cost_func</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n</pre>\n<p>Increase the number of search scopes using <code>search_per_coeff</code> to some larger int value. You could also combine this\nwith <code>tol</code> to compute a vast set of coefficients, and then select only those that have a cost value lower than the\nspecified tolerance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">optimize_coefficients</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_efficientnets.optimize</span> <span class=\"kn\">import</span> <span class=\"n\">get_compound_coeff_func</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">optimize_coefficients</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"n\">max_cost</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">search_per_coeff</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span><span class=\"p\">)</span>\n<span class=\"n\">cost_func</span> <span class=\"o\">=</span> <span class=\"n\">get_compound_coeff_func</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">max_cost</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Num unique configs = \"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>  <span class=\"c1\"># print just the first 10 results out of 125 results</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"s2\">\"Cost :\"</span><span class=\"p\">,</span> <span class=\"n\">cost_func</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n</pre>\n<h1>Requirements</h1>\n<ul>\n<li>Tensorflow 1.13+ (CPU or GPU version must be installed <em>before</em> installation of this library)</li>\n<li>Keras 2.2.4+</li>\n</ul>\n<h1>References</h1>\n<pre><code>[1] Mingxing Tan and Quoc V. Le. EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks. ICML 2019. Arxiv link: https://arxiv.org/abs/1905.11946.\n</code></pre>\n\n          </div>"}, "last_serial": 5947681, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8273d670adbca58c183f3cac10980754", "sha256": "83e7a9030084c5c5d0cc71722bdbfbd44bb88e8cdfbc796334b5e2b8b11a9ef8"}, "downloads": -1, "filename": "keras_efficientnets-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8273d670adbca58c183f3cac10980754", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12637, "upload_time": "2019-06-02T16:18:39", "upload_time_iso_8601": "2019-06-02T16:18:39.153729Z", "url": "https://files.pythonhosted.org/packages/2c/ef/4100ab1ba51252784edc9f29c7f4295941797f9d67bb2e80cad08f4d914c/keras_efficientnets-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4dc1de8019807800aef60604ad2061ab", "sha256": "1eecb1b559f04fcab2bf110ef8feea693cfaa024d5d09f4190804d2fe04a88c6"}, "downloads": -1, "filename": "keras_efficientnets-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4dc1de8019807800aef60604ad2061ab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12698, "upload_time": "2019-06-02T23:17:49", "upload_time_iso_8601": "2019-06-02T23:17:49.594670Z", "url": "https://files.pythonhosted.org/packages/6e/37/f131a1a397d43b7ad559e9be1fbaab8e72c4bc9bcd0e994fdb48b86edd23/keras_efficientnets-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "62bea5139b188c7d73204267a401c212", "sha256": "a92db779f79c722de7e259217775d0a4474fa64807fec57b74c5fee1a5e8926d"}, "downloads": -1, "filename": "keras_efficientnets-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "62bea5139b188c7d73204267a401c212", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12703, "upload_time": "2019-06-04T03:03:04", "upload_time_iso_8601": "2019-06-04T03:03:04.517229Z", "url": "https://files.pythonhosted.org/packages/6c/a7/10ec291e0d392307e6d1a914a76112e249b52faab5a511964365046ac713/keras_efficientnets-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "59750eb69124f59ccdf64c0d80939864", "sha256": "2f7ca5967319e61b8573221d345ecf73b18b9df0991a62b320f4adac7e33166b"}, "downloads": -1, "filename": "keras_efficientnets-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "59750eb69124f59ccdf64c0d80939864", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12700, "upload_time": "2019-06-05T01:32:53", "upload_time_iso_8601": "2019-06-05T01:32:53.960808Z", "url": "https://files.pythonhosted.org/packages/57/e2/dcea60d66e2cad56f4ac10b12e57dabe22b9eb5d17c0851664afb75782e5/keras_efficientnets-0.1.3-py2.py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b500a087c43ff915ed4527c038dd76c0", "sha256": "a01a7259790645d76d7aef31655386c8753d27a8e43f26733acc367b749100ae"}, "downloads": -1, "filename": "keras_efficientnets-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b500a087c43ff915ed4527c038dd76c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12691, "upload_time": "2019-06-19T02:58:34", "upload_time_iso_8601": "2019-06-19T02:58:34.674798Z", "url": "https://files.pythonhosted.org/packages/d7/58/53f5ad28afd1ed746e3d337fb39d3202bf521638a8cd2f3a49ac8042965e/keras_efficientnets-0.1.4-py2.py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b09153cdd132e7304cd4f3cbc7e4408f", "sha256": "b89e91792527afc71072fd77e623de783b6cf359d0668011085f772caf90c187"}, "downloads": -1, "filename": "keras_efficientnets-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b09153cdd132e7304cd4f3cbc7e4408f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 12712, "upload_time": "2019-06-28T23:25:46", "upload_time_iso_8601": "2019-06-28T23:25:46.836431Z", "url": "https://files.pythonhosted.org/packages/6d/11/82d7dde9b976a58826de24847405c9a71eb890bb82d01c1315107b0e0470/keras_efficientnets-0.1.5-py2.py3-none-any.whl", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "75dcb384780964f03b991696ed8f684f", "sha256": "a6cd012c0f24e6516337ef5420d0d7ba40c463516c1aaf2796369258dbfe3791"}, "downloads": -1, "filename": "keras_efficientnets-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "75dcb384780964f03b991696ed8f684f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 15416, "upload_time": "2019-07-11T04:05:29", "upload_time_iso_8601": "2019-07-11T04:05:29.031358Z", "url": "https://files.pythonhosted.org/packages/6d/da/afc4bbb39749a80d516c2808b9f3adb8dbfd2707159b8488ad4affa7ff34/keras_efficientnets-0.1.6-py2.py3-none-any.whl", "yanked": false}], "0.1.6.1": [{"comment_text": "", "digests": {"md5": "777d1e5582e886ce4c161f41aec57529", "sha256": "f302832d0002418e032335f87d25f2fc3991f0c99cb992beb21ccc2dc030dbe0"}, "downloads": -1, "filename": "keras_efficientnets-0.1.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "777d1e5582e886ce4c161f41aec57529", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 15434, "upload_time": "2019-07-11T04:20:08", "upload_time_iso_8601": "2019-07-11T04:20:08.639540Z", "url": "https://files.pythonhosted.org/packages/cd/6e/657c05e837c80e9c2652f019715ec9c86bd0b6579c6801ca1742d65497b3/keras_efficientnets-0.1.6.1-py2.py3-none-any.whl", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "879d72d41218c32686e1fab3eb855f06", "sha256": "44230997e89ade54adc26c647b0e2817b055a0e257052a61c9fe582e8c56339d"}, "downloads": -1, "filename": "keras_efficientnets-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "879d72d41218c32686e1fab3eb855f06", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 15408, "upload_time": "2019-10-09T04:09:54", "upload_time_iso_8601": "2019-10-09T04:09:54.597317Z", "url": "https://files.pythonhosted.org/packages/3a/41/4dce4e88042b4934003b2b51cfb6a99fc446d375d5fc1ffb2fdf8e069d36/keras_efficientnets-0.1.7-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "879d72d41218c32686e1fab3eb855f06", "sha256": "44230997e89ade54adc26c647b0e2817b055a0e257052a61c9fe582e8c56339d"}, "downloads": -1, "filename": "keras_efficientnets-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "879d72d41218c32686e1fab3eb855f06", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0.0", "size": 15408, "upload_time": "2019-10-09T04:09:54", "upload_time_iso_8601": "2019-10-09T04:09:54.597317Z", "url": "https://files.pythonhosted.org/packages/3a/41/4dce4e88042b4934003b2b51cfb6a99fc446d375d5fc1ffb2fdf8e069d36/keras_efficientnets-0.1.7-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:12 2020"}