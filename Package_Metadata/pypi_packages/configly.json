{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "![CircleCI](https://img.shields.io/circleci/build/gh/schireson/configly/master) [![codecov](https://codecov.io/gh/schireson/configly/branch/master/graph/badge.svg)](https://codecov.io/gh/schireson/configly) [![Documentation Status](https://readthedocs.org/projects/configly/badge/?version=latest)](https://configly.readthedocs.io/en/latest/?badge=latest)\n\n## TL;DR\n\n```yaml\n# config.yml\nfoo:\n    bar: <% ENV[REQUIRED] %>\n    baz: <% ENV[OPTIONAL, true] %>\nlist_of_stuff:\n    - fun<% ENV[NICE, dament] %>al\n    - fun<% ENV[AGH, er] %>al\n```\n\n```python\n# app.py\nconfig = Config.from_yaml('config.yml')\n\nprint(config.foo.bar)\nprint(config.foo['baz'])\nfor item in config.list_of_stuff:\n    print(item)\n```\n\n```bash\npip install configly[yaml]\n```\n\n## Introduction\n\nLoading configuration is done in every (application) project, and yet it is often\noverlooked and condidered too easy or straightforward to bother using a library\nto manage doing it.\n\nTherefore, we often see code like this:\n\n```python\n# config.py\nimport os\n\n# Maybe it's following 12factor and loading all the config from the environment.\nconfig = {\n    'log_level': os.getenv('LOG_LEVEL'),\n    'database': {\n        # At least here, I can nest values if I want to organize things.\n        'password': os.environ['DATABASE_PASSWORD'],\n        'port': int(os.environ['DATABASE_PORT']),\n    }\n}\n```\n\nor this\n\n```python\n# config.py\nimport os\n\nclass Config:\n    log_level = os.getenv('LOG_LEVEL')\n\n    # Here it's not so easy to namespace\n    database_password = os.environ['DATABASE_PASSWORD']\n    database_port = int(os.environ['DATABASE_PORT'])\n\n\n# Oh goodness!\nclass DevConfig(Config):\n    environment = 'dev'\n```\n\nor this\n\n```python\nimport configparser\n# ...\ud83e\udd22... Okay I dont even want to get into this one.\n```\n\nAnd this is all assuming that everyone is loading configuration at the outermost entrypoint!\nThe two worst possible outcomes in configuration are:\n\n* You are loading configuration lazily and/or deeply within your application, such that it\n  hits a critical failure after having seemingly successfully started up.\n* There is not a singular location at which you can go to see all configuration your app might\n  possibly be reading from.\n\n\n## The pitch\n\n`Configly` asserts configuration should:\n* Be centralized\n  * One should be able to look at one file to see all (env vars, files, etc) which must exist for the\n    application to function.\n* Be comprehensive\n  * One should not find configuration being loaded secretly elsewhere\n* Be declarative/static\n  * code-execution (e.g. the class above) in the definition of the config inevitably makes it\n    hard to interpret, as the config becomes more complex.\n* Be namespacable\n  * One should not have to prepend `foo_` namespaces to all `foo` related config names\n* Be loaded, once, at app startup\n  * (At least the _definition_ of the configuration you're loading)\n* (Ideally) have structured output\n  * If something is an `int`, ideally it would be read as an int.\n\nTo that end, the `configly.Config` class exposes a series of classmethods from which your config\ncan be loaded. It's largely unimportant what the input format is, but we started with formats\nthat deserialize into at least `str`, `float`, `int`, `bool` and `None` types.\n\n```python\n# Currently supported input formats.\nconfig = Config.from_yaml('config.yml')\nconfig = Config.from_json('config.json')\nconfig = Config.from_toml('config.toml')\n```\n\nGiven an input `config.yml` file:\n\n```yaml\n# config.yml\nfoo:\n    bar: <% ENV[REQUIRED] %>\n    baz: <% ENV[OPTIONAL, true] %>\nlist_of_stuff:\n    - fun<% ENV[NICE, dament] %>al\n    - fun<% ENV[AGH, er] %>al\n```\n\nA couple of things jump out:\n* Most importantly, whatever the configuration value is, it's intreted as a literal value in the\n  format of the file which loads it. I.E. loading `\"true\"` from the evironment in a yaml file\n  will yield a python `True`. Ditto `\"1\"`, or `\"null\"`.\n* Each `<% ... %>` section indicates a variable\n* `ENV` is an \"interpolator\" which knows how to obtain environment variables\n* `[VAR]` Will raise an error if that piece of config is not found\n* `[VAR, true]` Will `VAR` to the value after the comma\n* The interpolation can be a sub-portion of a key (`fun<% ENV[NICE, dament] %>al` interpolates\n  to \"fundamental\"). Another example being `'<% ENV[X, 3] %>'` interpolates to `'1'` instead of `1`\n\n\nNow that you've loaded the above configuration:\n\n```python\n# app.py\nconfig = Config.from_yaml('config.yml')\n\n# You can access namespaced config using dot access\nprint(config.foo.bar)\n\n# You have use index syntax for dynamic, or non-attribute-safe key values.\nprint(config.foo['baz'])\n\n# You can iterate over lists\nfor item in config.list_of_stuff:\n    print(item)\n\n# You can *generally* treat key-value maps as dicts\nfor key, value in config.foo.items():\n    print(key, value)\n\n# You can *actually* turn key-value maps into dicts\ndict(config.foo) == config.foo.to_dict()\n```\n\n## Installing\n\n```bash\n# Basic installation\npip install configly\n\n# To use the yaml config loader\npip install configly[yaml]\n\n# To use the toml config loader\npip install configly[toml]\n\n# To use the vault config loader\npip install configly[vault]\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/schireson/configly", "keywords": "config,yaml,toml,env", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "configly", "package_url": "https://pypi.org/project/configly/", "platform": "", "project_url": "https://pypi.org/project/configly/", "project_urls": {"Homepage": "https://github.com/schireson/configly", "Repository": "https://github.com/schireson/configly"}, "release_url": "https://pypi.org/project/configly/0.2.0/", "requires_dist": ["ruamel.yaml; extra == \"yaml\"", "toml; extra == \"toml\"", "hvac; extra == \"vault\""], "requires_python": ">=3.6,<4", "summary": "", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0696b57f61dc01cb90cd722c7c0ae4ea4faf400/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f67682f736368697265736f6e2f636f6e6669676c792f6d6173746572\"> <a href=\"https://codecov.io/gh/schireson/configly\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43e8cebef198b449d1bd0b42be8a3eef0744b2fa/68747470733a2f2f636f6465636f762e696f2f67682f736368697265736f6e2f636f6e6669676c792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://configly.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5475af151cb6f58cbd526151c502ceab35523cd1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6e6669676c792f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h2>TL;DR</h2>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">foo</span><span class=\"p\">:</span>\n    <span class=\"nt\">bar</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;% ENV[REQUIRED] %&gt;</span>\n    <span class=\"nt\">baz</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;% ENV[OPTIONAL, true] %&gt;</span>\n<span class=\"nt\">list_of_stuff</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fun&lt;% ENV[NICE, dament] %&gt;al</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fun&lt;% ENV[AGH, er] %&gt;al</span>\n</pre>\n<pre><span class=\"c1\"># app.py</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s1\">'config.yml'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">])</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">list_of_stuff</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<pre>pip install configly<span class=\"o\">[</span>yaml<span class=\"o\">]</span>\n</pre>\n<h2>Introduction</h2>\n<p>Loading configuration is done in every (application) project, and yet it is often\noverlooked and condidered too easy or straightforward to bother using a library\nto manage doing it.</p>\n<p>Therefore, we often see code like this:</p>\n<pre><span class=\"c1\"># config.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># Maybe it's following 12factor and loading all the config from the environment.</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'log_level'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'LOG_LEVEL'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># At least here, I can nest values if I want to organize things.</span>\n        <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'DATABASE_PASSWORD'</span><span class=\"p\">],</span>\n        <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'DATABASE_PORT'</span><span class=\"p\">]),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>or this</p>\n<pre><span class=\"c1\"># config.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n    <span class=\"n\">log_level</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'LOG_LEVEL'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Here it's not so easy to namespace</span>\n    <span class=\"n\">database_password</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'DATABASE_PASSWORD'</span><span class=\"p\">]</span>\n    <span class=\"n\">database_port</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'DATABASE_PORT'</span><span class=\"p\">])</span>\n\n\n<span class=\"c1\"># Oh goodness!</span>\n<span class=\"k\">class</span> <span class=\"nc\">DevConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">environment</span> <span class=\"o\">=</span> <span class=\"s1\">'dev'</span>\n</pre>\n<p>or this</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">configparser</span>\n<span class=\"c1\"># ...\ud83e\udd22... Okay I dont even want to get into this one.</span>\n</pre>\n<p>And this is all assuming that everyone is loading configuration at the outermost entrypoint!\nThe two worst possible outcomes in configuration are:</p>\n<ul>\n<li>You are loading configuration lazily and/or deeply within your application, such that it\nhits a critical failure after having seemingly successfully started up.</li>\n<li>There is not a singular location at which you can go to see all configuration your app might\npossibly be reading from.</li>\n</ul>\n<h2>The pitch</h2>\n<p><code>Configly</code> asserts configuration should:</p>\n<ul>\n<li>Be centralized\n<ul>\n<li>One should be able to look at one file to see all (env vars, files, etc) which must exist for the\napplication to function.</li>\n</ul>\n</li>\n<li>Be comprehensive\n<ul>\n<li>One should not find configuration being loaded secretly elsewhere</li>\n</ul>\n</li>\n<li>Be declarative/static\n<ul>\n<li>code-execution (e.g. the class above) in the definition of the config inevitably makes it\nhard to interpret, as the config becomes more complex.</li>\n</ul>\n</li>\n<li>Be namespacable\n<ul>\n<li>One should not have to prepend <code>foo_</code> namespaces to all <code>foo</code> related config names</li>\n</ul>\n</li>\n<li>Be loaded, once, at app startup\n<ul>\n<li>(At least the <em>definition</em> of the configuration you're loading)</li>\n</ul>\n</li>\n<li>(Ideally) have structured output\n<ul>\n<li>If something is an <code>int</code>, ideally it would be read as an int.</li>\n</ul>\n</li>\n</ul>\n<p>To that end, the <code>configly.Config</code> class exposes a series of classmethods from which your config\ncan be loaded. It's largely unimportant what the input format is, but we started with formats\nthat deserialize into at least <code>str</code>, <code>float</code>, <code>int</code>, <code>bool</code> and <code>None</code> types.</p>\n<pre><span class=\"c1\"># Currently supported input formats.</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s1\">'config.yml'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"s1\">'config.json'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">from_toml</span><span class=\"p\">(</span><span class=\"s1\">'config.toml'</span><span class=\"p\">)</span>\n</pre>\n<p>Given an input <code>config.yml</code> file:</p>\n<pre><span class=\"c1\"># config.yml</span>\n<span class=\"nt\">foo</span><span class=\"p\">:</span>\n    <span class=\"nt\">bar</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;% ENV[REQUIRED] %&gt;</span>\n    <span class=\"nt\">baz</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;% ENV[OPTIONAL, true] %&gt;</span>\n<span class=\"nt\">list_of_stuff</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fun&lt;% ENV[NICE, dament] %&gt;al</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fun&lt;% ENV[AGH, er] %&gt;al</span>\n</pre>\n<p>A couple of things jump out:</p>\n<ul>\n<li>Most importantly, whatever the configuration value is, it's intreted as a literal value in the\nformat of the file which loads it. I.E. loading <code>\"true\"</code> from the evironment in a yaml file\nwill yield a python <code>True</code>. Ditto <code>\"1\"</code>, or <code>\"null\"</code>.</li>\n<li>Each <code>&lt;% ... %&gt;</code> section indicates a variable</li>\n<li><code>ENV</code> is an \"interpolator\" which knows how to obtain environment variables</li>\n<li><code>[VAR]</code> Will raise an error if that piece of config is not found</li>\n<li><code>[VAR, true]</code> Will <code>VAR</code> to the value after the comma</li>\n<li>The interpolation can be a sub-portion of a key (<code>fun&lt;% ENV[NICE, dament] %&gt;al</code> interpolates\nto \"fundamental\"). Another example being <code>'&lt;% ENV[X, 3] %&gt;'</code> interpolates to <code>'1'</code> instead of <code>1</code></li>\n</ul>\n<p>Now that you've loaded the above configuration:</p>\n<pre><span class=\"c1\"># app.py</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"s1\">'config.yml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can access namespaced config using dot access</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You have use index syntax for dynamic, or non-attribute-safe key values.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># You can iterate over lists</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">list_of_stuff</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can *generally* treat key-value maps as dicts</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can *actually* turn key-value maps into dicts</span>\n<span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n<h2>Installing</h2>\n<pre><span class=\"c1\"># Basic installation</span>\npip install configly\n\n<span class=\"c1\"># To use the yaml config loader</span>\npip install configly<span class=\"o\">[</span>yaml<span class=\"o\">]</span>\n\n<span class=\"c1\"># To use the toml config loader</span>\npip install configly<span class=\"o\">[</span>toml<span class=\"o\">]</span>\n\n<span class=\"c1\"># To use the vault config loader</span>\npip install configly<span class=\"o\">[</span>vault<span class=\"o\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6823283, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3335bd4be4a3961475c54926f08e08e1", "sha256": "d9f70f87bbaf0ef2b62ed047fb51badf3a10c084d341875652cf2d4c3ed330b9"}, "downloads": -1, "filename": "configly-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3335bd4be4a3961475c54926f08e08e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 11788, "upload_time": "2020-03-16T19:30:46", "upload_time_iso_8601": "2020-03-16T19:30:46.975547Z", "url": "https://files.pythonhosted.org/packages/97/1b/c816f7a6c5461343d3cc1d7fbdecd9507c5dd89c9a51800acf1464f00821/configly-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20f9d2d570c42841a27a5ae5d34a6f38", "sha256": "a31095fb0e32d77d26d3f76d5f32a81f9a2a82a7e2bbcae7043912b66e2a9fb3"}, "downloads": -1, "filename": "configly-0.2.0.tar.gz", "has_sig": false, "md5_digest": "20f9d2d570c42841a27a5ae5d34a6f38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 10281, "upload_time": "2020-03-16T19:30:49", "upload_time_iso_8601": "2020-03-16T19:30:49.186787Z", "url": "https://files.pythonhosted.org/packages/18/f8/2f428653ea11231a8c5b260ff0fbd928984e141bfd3fdf02fb8f9d474178/configly-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3335bd4be4a3961475c54926f08e08e1", "sha256": "d9f70f87bbaf0ef2b62ed047fb51badf3a10c084d341875652cf2d4c3ed330b9"}, "downloads": -1, "filename": "configly-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3335bd4be4a3961475c54926f08e08e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 11788, "upload_time": "2020-03-16T19:30:46", "upload_time_iso_8601": "2020-03-16T19:30:46.975547Z", "url": "https://files.pythonhosted.org/packages/97/1b/c816f7a6c5461343d3cc1d7fbdecd9507c5dd89c9a51800acf1464f00821/configly-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20f9d2d570c42841a27a5ae5d34a6f38", "sha256": "a31095fb0e32d77d26d3f76d5f32a81f9a2a82a7e2bbcae7043912b66e2a9fb3"}, "downloads": -1, "filename": "configly-0.2.0.tar.gz", "has_sig": false, "md5_digest": "20f9d2d570c42841a27a5ae5d34a6f38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 10281, "upload_time": "2020-03-16T19:30:49", "upload_time_iso_8601": "2020-03-16T19:30:49.186787Z", "url": "https://files.pythonhosted.org/packages/18/f8/2f428653ea11231a8c5b260ff0fbd928984e141bfd3fdf02fb8f9d474178/configly-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:55 2020"}