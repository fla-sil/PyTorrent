{"info": {"author": "Wim Glenn", "author_email": "hey@wimglenn.com", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "|pypi|_ |pyversions|_ |travis|_\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pytest-raisin.svg\n.. _pypi: https://pypi.org/project/pytest-raisin\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/pytest-raisin.svg\n.. _pyversions:\n\n.. |travis| image:: https://img.shields.io/travis/wimglenn/pytest-raisin.svg?branch=master\n.. _travis: https://travis-ci.com/wimglenn/pytest-raisin\n\n\n.. image:: https://user-images.githubusercontent.com/6615374/50065259-46af2780-017b-11e9-8af3-38f340f11df1.png\n\n\npytest-raisin\n=============\n\nPlugin putting a higher-level interface to `pytest.raises <https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions>`_.\nIt allows to use an exception *instance* as the expected value, which would be compared with the actual exception (if any) based upon the type and the ``args`` attribute.\n\n.. code-block:: bash\n\n   # Old-skool:\n   with pytest.raises(SystemExit) as cm:\n       sys.exit(1)\n   assert cm.value.args == (1,)\n\n   # New hotness:\n   with pytest.raises(SystemExit(1)):\n       sys.exit(1)\n\n\nMore sophisticated comparisons can be registered for user-defined error subclasses if necessary (see `Advanced Usage`_).\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n   pip install pytest-raisin\n\n\nBasic Usage\n-----------\n\nUsage in your tests looks like this\n\n.. code-block:: python\n\n   >>> currant_exchange_rates = {\n   ...     \"sultana\": 50,\n   ...     \"raisins\": 100,\n   ... }\n   >>> with pytest.raises(KeyError(\"grape\")):\n   ...     currant_exchange_rates[\"grape\"]\n   ...\n   >>> with pytest.raises(KeyError(\"sultanas\")):\n   ...     currant_exchange_rates[\"prunes\"]\n   ...\n   AssertionError: KeyError args do not match!\n       Actual:   ('prunes',)\n       Expected: ('sultanas',)\n\n   >>> with pytest.raises(KeyError(\"Carlos Sultana\")):\n   ...     currant_exchange_rates[\"sultana\"]\n   Failed: DID NOT RAISE KeyError('Carlos Sultana')\n\n\nThe plugin is enabled by default: ``pytest.raises`` is monkeypatched with the new functionality directly. To temporarily execute without the new stuff, use ``pytest -p no:pytest-raisin``.\n\nThe various legacy forms of ``pytest.raises`` will continue to work, falling back to the original implementation.\n\n\nAdvanced Usage\n--------------\n\nIn most use-cases, the default behaviour of considering exceptions to be equivalent if the `args` attributes have matching tuples should be satisfactory.\nHowever, some 3rd-party exception classes have additional logic inside them (e.g. Django's ``ValidationError``) and you might want to provide a more custom assertion here.\n\nPlugin users may register their own errors/callables via pytest-raisin's decorator factory:\n\n\n.. code-block:: python\n\n   @pytest.register_exception_compare(MyError)\n   def my_error_compare(exc_actual, exc_expected):\n       ...\n\nYour comparison function will be called with the arguments ``exc_actual`` and ``exc_expected``, which will *both* be directly instances of ``MyError`` (the test will have failed earlier if the type was not an exact match). This function should inspect the instances and raise an ``AssertionError`` with useful context message should they be considered not to match. It should do nothing (i.e. return ``None``) if the exceptions should be considered equivalent.\n\n**Note:** An instance of a subclass is *not* permitted when using an exception instance as the argument to ``pytest.raises``. If you want to allow subclassing, use the original syntax of passing the type.\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wimglenn/pytest-raisin", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytest-raisin", "package_url": "https://pypi.org/project/pytest-raisin/", "platform": "", "project_url": "https://pypi.org/project/pytest-raisin/", "project_urls": {"Homepage": "https://github.com/wimglenn/pytest-raisin"}, "release_url": "https://pypi.org/project/pytest-raisin/0.3/", "requires_dist": ["pytest"], "requires_python": "", "summary": "Plugin enabling the use of exception instances with pytest.raises", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/pytest-raisin\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f81ad50825b77c9923b41b60359a4b8fe4555430/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d72616973696e2e737667\"></a> <a href=\"#pyversions\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b523dad78c63ccea7ef02a8b533a3b4edfc892f8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d72616973696e2e737667\"></a> <a href=\"https://travis-ci.com/wimglenn/pytest-raisin\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f52c0da797bf855472c8252995b64c6b24aa956/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f77696d676c656e6e2f7079746573742d72616973696e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<span class=\"target\" id=\"pyversions\"></span><img alt=\"https://user-images.githubusercontent.com/6615374/50065259-46af2780-017b-11e9-8af3-38f340f11df1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f5b2bbbf83fae39c531ee45d8d4b357037c3ac6/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363631353337342f35303036353235392d34366166323738302d303137622d313165392d386166332d3338663334306631316466312e706e67\">\n<div id=\"pytest-raisin\">\n<h2>pytest-raisin</h2>\n<p>Plugin putting a higher-level interface to <a href=\"https://docs.pytest.org/en/latest/assert.html#assertions-about-expected-exceptions\" rel=\"nofollow\">pytest.raises</a>.\nIt allows to use an exception <em>instance</em> as the expected value, which would be compared with the actual exception (if any) based upon the type and the <tt>args</tt> attribute.</p>\n<pre><span class=\"c1\"># Old-skool:\n</span>with pytest.raises<span class=\"o\">(</span>SystemExit<span class=\"o\">)</span> as cm:\n    sys.exit<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>\nassert cm.value.args <span class=\"o\">==</span> <span class=\"o\">(</span><span class=\"m\">1</span>,<span class=\"o\">)</span>\n\n<span class=\"c1\"># New hotness:\n</span>with pytest.raises<span class=\"o\">(</span>SystemExit<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">))</span>:\n    sys.exit<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>\n</pre>\n<p>More sophisticated comparisons can be registered for user-defined error subclasses if necessary (see <a href=\"#advanced-usage\" rel=\"nofollow\">Advanced Usage</a>).</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install pytest-raisin\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>Usage in your tests looks like this</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">currant_exchange_rates</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"sultana\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"raisins\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s2\">\"grape\"</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>     <span class=\"n\">currant_exchange_rates</span><span class=\"p\">[</span><span class=\"s2\">\"grape\"</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s2\">\"sultanas\"</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>     <span class=\"n\">currant_exchange_rates</span><span class=\"p\">[</span><span class=\"s2\">\"prunes\"</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">AssertionError</span><span class=\"p\">:</span> <span class=\"ne\">KeyError</span> <span class=\"n\">args</span> <span class=\"n\">do</span> <span class=\"ow\">not</span> <span class=\"n\">match</span><span class=\"err\">!</span>\n    <span class=\"n\">Actual</span><span class=\"p\">:</span>   <span class=\"p\">(</span><span class=\"s1\">'prunes'</span><span class=\"p\">,)</span>\n    <span class=\"n\">Expected</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'sultanas'</span><span class=\"p\">,)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s2\">\"Carlos Sultana\"</span><span class=\"p\">)):</span>\n<span class=\"o\">...</span>     <span class=\"n\">currant_exchange_rates</span><span class=\"p\">[</span><span class=\"s2\">\"sultana\"</span><span class=\"p\">]</span>\n<span class=\"n\">Failed</span><span class=\"p\">:</span> <span class=\"n\">DID</span> <span class=\"n\">NOT</span> <span class=\"n\">RAISE</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span><span class=\"s1\">'Carlos Sultana'</span><span class=\"p\">)</span>\n</pre>\n<p>The plugin is enabled by default: <tt>pytest.raises</tt> is monkeypatched with the new functionality directly. To temporarily execute without the new stuff, use <tt>pytest <span class=\"pre\">-p</span> <span class=\"pre\">no:pytest-raisin</span></tt>.</p>\n<p>The various legacy forms of <tt>pytest.raises</tt> will continue to work, falling back to the original implementation.</p>\n</div>\n<div id=\"advanced-usage\">\n<h3>Advanced Usage</h3>\n<p>In most use-cases, the default behaviour of considering exceptions to be equivalent if the <cite>args</cite> attributes have matching tuples should be satisfactory.\nHowever, some 3rd-party exception classes have additional logic inside them (e.g. Django\u2019s <tt>ValidationError</tt>) and you might want to provide a more custom assertion here.</p>\n<p>Plugin users may register their own errors/callables via pytest-raisin\u2019s decorator factory:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">register_exception_compare</span><span class=\"p\">(</span><span class=\"n\">MyError</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_error_compare</span><span class=\"p\">(</span><span class=\"n\">exc_actual</span><span class=\"p\">,</span> <span class=\"n\">exc_expected</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Your comparison function will be called with the arguments <tt>exc_actual</tt> and <tt>exc_expected</tt>, which will <em>both</em> be directly instances of <tt>MyError</tt> (the test will have failed earlier if the type was not an exact match). This function should inspect the instances and raise an <tt>AssertionError</tt> with useful context message should they be considered not to match. It should do nothing (i.e. return <tt>None</tt>) if the exceptions should be considered equivalent.</p>\n<p><strong>Note:</strong> An instance of a subclass is <em>not</em> permitted when using an exception instance as the argument to <tt>pytest.raises</tt>. If you want to allow subclassing, use the original syntax of passing the type.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5094897, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dc2390ed3b778faa35b02368b9ca016a", "sha256": "e0849a81f263b6b682af00e379812b05a40fcdd383ace07386c5fbbf23508b7c"}, "downloads": -1, "filename": "pytest_raisin-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc2390ed3b778faa35b02368b9ca016a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6320, "upload_time": "2018-12-17T03:56:31", "upload_time_iso_8601": "2018-12-17T03:56:31.731898Z", "url": "https://files.pythonhosted.org/packages/53/ae/e46a62ac3604299467edd944fbbe16c7779b20df1883cf5584d274ccb5b3/pytest_raisin-0.1-py2.py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "432271a0a85aa62e6ce87e70615d9c09", "sha256": "d94f2ca6e381a163097bba513396c60f812c2bccedb202a47f20566d7fe1da4b"}, "downloads": -1, "filename": "pytest_raisin-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "432271a0a85aa62e6ce87e70615d9c09", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8134, "upload_time": "2019-02-12T01:57:33", "upload_time_iso_8601": "2019-02-12T01:57:33.043175Z", "url": "https://files.pythonhosted.org/packages/01/d9/24180177db358bf18f44c07a579edceb1cacede66622cc65688ee8a835e2/pytest_raisin-0.2-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2dc41531fc989fdfccb07ef705c3dc8e", "sha256": "2d95864a580098f5a203f0330e9af6b95a5e53f6f431e3a9171d42b8c70e6599"}, "downloads": -1, "filename": "pytest_raisin-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dc41531fc989fdfccb07ef705c3dc8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7206, "upload_time": "2019-04-04T06:13:43", "upload_time_iso_8601": "2019-04-04T06:13:43.658243Z", "url": "https://files.pythonhosted.org/packages/bb/2a/ce0703f1242b8ce2992e24132baedf8e1c99a8ccdd8fcbb0e81904f93931/pytest_raisin-0.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2dc41531fc989fdfccb07ef705c3dc8e", "sha256": "2d95864a580098f5a203f0330e9af6b95a5e53f6f431e3a9171d42b8c70e6599"}, "downloads": -1, "filename": "pytest_raisin-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dc41531fc989fdfccb07ef705c3dc8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7206, "upload_time": "2019-04-04T06:13:43", "upload_time_iso_8601": "2019-04-04T06:13:43.658243Z", "url": "https://files.pythonhosted.org/packages/bb/2a/ce0703f1242b8ce2992e24132baedf8e1c99a8ccdd8fcbb0e81904f93931/pytest_raisin-0.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:48 2020"}