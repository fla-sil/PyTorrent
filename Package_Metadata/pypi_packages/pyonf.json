{"info": {"author": "simfu", "author_email": "simfu@free.fr", "bugtrack_url": null, "classifiers": [], "description": "Pyonf\n=====\n\nEasy configuration parsing for your Python script, using command line argument or YAML file.\n--------------------------------------------------------------------------------------------\n\n### Quickstart\n\nContent of `myapp.py`:\n\n```\n#!/usr/bin/env python\nfrom pyonf import pyonf\n\ndefault_configuration = {\n    'user': 'foo',\n    'password': 'changeme',\n    'debug': False\n}\nconf = pyonf(default_configuration)\nprint(conf)\n```\n\nSet configuration from command line:\n```\n$ ./myapp.py --user simfu -d\n{'debug': True, 'password': 'changeme', 'user': 'simfu'}\n```\n\nOr from YAML configuration file `myconfig.yml`:\n```\nuser: simfu\npassword: secretpass\n```\n\ngives:\n```\n$ ./myapp.py myconfig.yml\n{'debug': False, 'password': 'secretpass', 'user': 'simfu'}\n```\n\nGet script usage:\n```\n$ ./myapp.py --help\nusage: myapp.py [-h] [--debug] [--password PASSWORD] [--user USER] [conf_file]\n\nConfiguration file:\n  conf_file             Path to YAML configuration file (optional)\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug, -d           turn on \"debug\"\n  --password PASSWORD, -p PASSWORD\n                        set \"password\" value, as str (default is changeme)\n  --user USER, -u USER  set \"user\" value, as str (default is foo)\n```\n\n\n### Features\n\n-   Automatically build a command line or configuration file parser by\n    providing a default configuration\n-   Support for complex configuration schemes (e.g.: lists, dict of dict\n    of \\...), mandatory options\n-   Default configuration can be provided as Python dict object, YAML\n    string or YAML file\n-   Compatible with Python 2 & 3\n\n\n### More Examples\n\nAutomatic argparsing: help message, short and long parameters\n\n```\n$ ./myapp.py --help\nusage: myapp.py [-h] [--debug] [--password PASSWORD] [--user USER] [conf_file]\n\nConfiguration file:\n  conf_file             Path to YAML configuration file (optional)\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug, -d           turn on \"debug\"\n  --password PASSWORD, -p PASSWORD\n                        set \"password\" value, as str (default is changeme)\n  --user USER, -u USER  set \"user\" value, as str (default is foo)\n\n$ ./myapp.py -u simfu\n{'debug': False, 'password': 'changeme', 'user': 'simfu'}\n\n$ ./myapp.py --user simfu\n{'debug': False, 'password': 'changeme', 'user': 'simfu'}\n```\n\nUse both configuration file and command line argument (the latter takes\nprecedence)\n```\n$ ./myapp.py myconfig.yml -d\n{'debug': True, 'password': 'secretpass', 'user': 'simfu'}\n```\n\nMultiple input for default configuration\n```\n# Using a dict\ndefault_configuration = {\n    'user': 'foo',\n    'password': 'changeme',\n    'debug': False\n}\n\n# Using a YAML String\ndefault_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n\n# Using a YAML file\ndefault_configuration = \"/etc/myapp.conf\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n```\n\nSmart parsing of option type\n```\ndefault_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\nlevel: 3\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n```\n\ni.e.:\n```\n./myapp.py -l 4  # OK\n./myapp.py -l quatre  # Will not work, level needs to be an integer\n\n# Boolean option does not need argument, its value will be switched\n./myapp.py -d\n```\n\nComplex configuration scheme\n```\ndefault_configuration = \"\"\"\nuser: foo\npassword: changeme\nsuboptions:\n  param1: value1\n  param2: value2\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n```\n\nset \"sub-keys\" with:\n```\n$ ./myapp.py --suboptions-param1 my_new_value\n```\n\nMandatory options:\n```\ndefault_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\nlevel: 3\n\"\"\"\nconf = pyonf(defaulf_configuration, mandatory_opts = ['user', 'password'])\nprint(conf)\n```\n\nyou have to define user and password option:\n```\n$ ./my_app.py\nError: \"user\" option is not set\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/simfu/pyonf", "keywords": "configuration option argparse yaml command line argument", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "pyonf", "package_url": "https://pypi.org/project/pyonf/", "platform": "", "project_url": "https://pypi.org/project/pyonf/", "project_urls": {"Homepage": "http://github.com/simfu/pyonf"}, "release_url": "https://pypi.org/project/pyonf/0.2/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "Easy configuration from command line or YAML file", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pyonf</h1>\n<h2>Easy configuration parsing for your Python script, using command line argument or YAML file.</h2>\n<h3>Quickstart</h3>\n<p>Content of <code>myapp.py</code>:</p>\n<pre><code>#!/usr/bin/env python\nfrom pyonf import pyonf\n\ndefault_configuration = {\n    'user': 'foo',\n    'password': 'changeme',\n    'debug': False\n}\nconf = pyonf(default_configuration)\nprint(conf)\n</code></pre>\n<p>Set configuration from command line:</p>\n<pre><code>$ ./myapp.py --user simfu -d\n{'debug': True, 'password': 'changeme', 'user': 'simfu'}\n</code></pre>\n<p>Or from YAML configuration file <code>myconfig.yml</code>:</p>\n<pre><code>user: simfu\npassword: secretpass\n</code></pre>\n<p>gives:</p>\n<pre><code>$ ./myapp.py myconfig.yml\n{'debug': False, 'password': 'secretpass', 'user': 'simfu'}\n</code></pre>\n<p>Get script usage:</p>\n<pre><code>$ ./myapp.py --help\nusage: myapp.py [-h] [--debug] [--password PASSWORD] [--user USER] [conf_file]\n\nConfiguration file:\n  conf_file             Path to YAML configuration file (optional)\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug, -d           turn on \"debug\"\n  --password PASSWORD, -p PASSWORD\n                        set \"password\" value, as str (default is changeme)\n  --user USER, -u USER  set \"user\" value, as str (default is foo)\n</code></pre>\n<h3>Features</h3>\n<ul>\n<li>Automatically build a command line or configuration file parser by\nproviding a default configuration</li>\n<li>Support for complex configuration schemes (e.g.: lists, dict of dict\nof ...), mandatory options</li>\n<li>Default configuration can be provided as Python dict object, YAML\nstring or YAML file</li>\n<li>Compatible with Python 2 &amp; 3</li>\n</ul>\n<h3>More Examples</h3>\n<p>Automatic argparsing: help message, short and long parameters</p>\n<pre><code>$ ./myapp.py --help\nusage: myapp.py [-h] [--debug] [--password PASSWORD] [--user USER] [conf_file]\n\nConfiguration file:\n  conf_file             Path to YAML configuration file (optional)\n\nOptions:\n  -h, --help            show this help message and exit\n  --debug, -d           turn on \"debug\"\n  --password PASSWORD, -p PASSWORD\n                        set \"password\" value, as str (default is changeme)\n  --user USER, -u USER  set \"user\" value, as str (default is foo)\n\n$ ./myapp.py -u simfu\n{'debug': False, 'password': 'changeme', 'user': 'simfu'}\n\n$ ./myapp.py --user simfu\n{'debug': False, 'password': 'changeme', 'user': 'simfu'}\n</code></pre>\n<p>Use both configuration file and command line argument (the latter takes\nprecedence)</p>\n<pre><code>$ ./myapp.py myconfig.yml -d\n{'debug': True, 'password': 'secretpass', 'user': 'simfu'}\n</code></pre>\n<p>Multiple input for default configuration</p>\n<pre><code># Using a dict\ndefault_configuration = {\n    'user': 'foo',\n    'password': 'changeme',\n    'debug': False\n}\n\n# Using a YAML String\ndefault_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n\n# Using a YAML file\ndefault_configuration = \"/etc/myapp.conf\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n</code></pre>\n<p>Smart parsing of option type</p>\n<pre><code>default_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\nlevel: 3\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n</code></pre>\n<p>i.e.:</p>\n<pre><code>./myapp.py -l 4  # OK\n./myapp.py -l quatre  # Will not work, level needs to be an integer\n\n# Boolean option does not need argument, its value will be switched\n./myapp.py -d\n</code></pre>\n<p>Complex configuration scheme</p>\n<pre><code>default_configuration = \"\"\"\nuser: foo\npassword: changeme\nsuboptions:\n  param1: value1\n  param2: value2\n\"\"\"\nconf = pyonf(defaulf_configuration)\nprint(conf)\n</code></pre>\n<p>set \"sub-keys\" with:</p>\n<pre><code>$ ./myapp.py --suboptions-param1 my_new_value\n</code></pre>\n<p>Mandatory options:</p>\n<pre><code>default_configuration = \"\"\"\nuser: foo\npassword: changeme\ndebug: false\nlevel: 3\n\"\"\"\nconf = pyonf(defaulf_configuration, mandatory_opts = ['user', 'password'])\nprint(conf)\n</code></pre>\n<p>you have to define user and password option:</p>\n<pre><code>$ ./my_app.py\nError: \"user\" option is not set\n</code></pre>\n\n          </div>"}, "last_serial": 6182548, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "da95fe4ccb8537cac3be4abc8f0f0515", "sha256": "500b48ee8d56a762d37a4f2c62cd019ff2cdaff9787e3ee3da982b69f15e6c8b"}, "downloads": -1, "filename": "pyonf-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da95fe4ccb8537cac3be4abc8f0f0515", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6304, "upload_time": "2016-05-28T08:52:08", "upload_time_iso_8601": "2016-05-28T08:52:08.354232Z", "url": "https://files.pythonhosted.org/packages/95/44/7e83013aa6dba4d2b1a5305bb7d276b1d4c710c4d35c5de5071bf3c3c871/pyonf-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "379836a4743d878fbde6059ef31cd88f", "sha256": "ad973485d55cae8f8110f517a35c9b02677d144225a26c77d08efa1796c8b357"}, "downloads": -1, "filename": "pyonf-0.1.tar.gz", "has_sig": false, "md5_digest": "379836a4743d878fbde6059ef31cd88f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4673, "upload_time": "2016-05-28T08:52:13", "upload_time_iso_8601": "2016-05-28T08:52:13.466107Z", "url": "https://files.pythonhosted.org/packages/2e/11/798843053f241bef4e960467533eef483f44b113343559c5cc240c995a60/pyonf-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fec8219b20390a9fd2ee143ab1ef2d86", "sha256": "eead7127c9b6fb3288a0f14af0cb0b025a2a14ee63236874328ba6655551da1f"}, "downloads": -1, "filename": "pyonf-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fec8219b20390a9fd2ee143ab1ef2d86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4509, "upload_time": "2019-11-22T17:25:12", "upload_time_iso_8601": "2019-11-22T17:25:12.565445Z", "url": "https://files.pythonhosted.org/packages/12/c0/82fe9f5a6ef50e965623654d43b51744cb3540ba735632f341033302eb2f/pyonf-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1da61d8d0a9f2ab952e2b8b59a08727", "sha256": "48d6dfb1022b827b42ee2ecc0527860be95690ebc841707d0827f11c0cd0bd59"}, "downloads": -1, "filename": "pyonf-0.2.tar.gz", "has_sig": false, "md5_digest": "f1da61d8d0a9f2ab952e2b8b59a08727", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4681, "upload_time": "2019-11-22T17:25:13", "upload_time_iso_8601": "2019-11-22T17:25:13.700201Z", "url": "https://files.pythonhosted.org/packages/1f/01/f6db263fff12add6cf75a74049895a9291eeee5e58045b71c9c2f7b33027/pyonf-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fec8219b20390a9fd2ee143ab1ef2d86", "sha256": "eead7127c9b6fb3288a0f14af0cb0b025a2a14ee63236874328ba6655551da1f"}, "downloads": -1, "filename": "pyonf-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fec8219b20390a9fd2ee143ab1ef2d86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4509, "upload_time": "2019-11-22T17:25:12", "upload_time_iso_8601": "2019-11-22T17:25:12.565445Z", "url": "https://files.pythonhosted.org/packages/12/c0/82fe9f5a6ef50e965623654d43b51744cb3540ba735632f341033302eb2f/pyonf-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1da61d8d0a9f2ab952e2b8b59a08727", "sha256": "48d6dfb1022b827b42ee2ecc0527860be95690ebc841707d0827f11c0cd0bd59"}, "downloads": -1, "filename": "pyonf-0.2.tar.gz", "has_sig": false, "md5_digest": "f1da61d8d0a9f2ab952e2b8b59a08727", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4681, "upload_time": "2019-11-22T17:25:13", "upload_time_iso_8601": "2019-11-22T17:25:13.700201Z", "url": "https://files.pythonhosted.org/packages/1f/01/f6db263fff12add6cf75a74049895a9291eeee5e58045b71c9c2f7b33027/pyonf-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:15 2020"}