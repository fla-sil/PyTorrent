{"info": {"author": "Eduardo Cuducos", "author_email": "cuducos@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development", "Topic :: Utilities"], "description": "# Createnv \n\n[![GitHub Actions: Tests](https://github.com/cuducos/createnv/workflows/Tests/badge.svg)]()\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/createnv)](https://pypi.org/project/createnv/)\n[![PyPI](https://img.shields.io/pypi/v/createnv)](https://pypi.org/project/createnv/)\n\nA simple CLI to create `.env` files.\n\n## Motivation\n\nI use `.env` file to decouple configuration from application in many projects, and I see that many newcomers might struggle in creating this file.\n\nThus, I created this package to offer a better user interface for creating configuration files in the format of `.env`.\n\n## Example\n\nUsing the sample `.env.sample` in this repository:\n\n[![asciicast](https://asciinema.org/a/311482.svg)](https://asciinema.org/a/311482)\n\nYou can now experiment by yourself, or try more advanced `.env.sample` such as the `tests/.env.sample` or [Bot Followers's `.env.sample`]\n\n## Install\n\nCreatenv requires [Python](https://python.org) 3.7 or newer:\n\n```console\n$ pip install createnv\n```\n\n## Usage\n\nTo use the default values (reads the sample from `.env.sample` and write the result into `.env`):\n\n```console\n$ createnv\n```\n\n### Options\n\n| Option | Default | Description |\n|---|---|---|\n| `--target` | `.env` | File to write the result |\n| `--source` | `.env.sample` | File to use as a sample |\n| `--overwrite` and `--no-overwrite` | `--no-overwrite` | Whether to ask before overwriting files\n| `--use-default` or `--no-use-default` | `--no-use-default` | Whether to ask for input on fields that have a default value set |\n| `--chars-for-random-string` | All ASCII letters, numbers and a few extra characters (`!@#$%^&*(-_=+)`) | Characters used to create random strings |\n\n## Format of sample files\n\nCreatenv reads the sample file and separate lines in blocks, splitting at empty lines. It follows a few rules:\n\n1. The first line is required to be a **title**\n2. The second line might be a **description** or a **variable**\n3. The remaining lines should be **variables**\n\n### Title\n\nThe first line of the block should start with a `#` character, followed by a space. The title value is the remaining text after the `#` and space.\n\nFor example:\n\n```\n# Hell Yeah!\n```\n\nIn this case, the title is _Hell yeah!_ (not _# Hell yeah!_).\n\n### Description (_optional_)\n\nIf the second line follows the syntax of a _title_ line, it's text (without the `# `) is considered a _description_ and is used to give more information to the user about the variables from this block.\n\n### Variables\n\nThere are three types of variables:\n\n#### Regular\n\nEach block might one or more variable lines. The syntax requires a _name of variable_ using only capital letters, numbers, or underscore, followed by an equal sign.\n\nWhat comes after the equal sign is _optinal_. This text is considered the default value of this variable.\n\nThe human description of this variable is also _optional_. You can create one by using comment at the end of the line.  That is to say, any text after a sequence of two spaces, followed by the `#` sign and one extra space, is the human description of that variable.\n\nFor example:\n\n```\nNAME=\n```\n\nThis is a valid variable line. It has a name (_NAME_), no default value, and no human description. We can add a default value:\n\n```\nNAME=Cuducos\n```\n\nThis is still a valid variable line. It has a name(_NAME_), and a default value (_Cuducos_). Yet, we can add a human description:\n\n```\nNAME=Cuducos  # What is your name?\n```\n\nNow it's a complete variable with a name (_NAME_), a default value (_Cuducos_), and a human description (_What is your name?_)\n\n#### Random values\n\nIf you want to have a variable with a random value, you can set its default value to `<random>` and Createnv will take care of it. Optionally you can specify how long this variable should be with `:int`.\n\nFor example:\n\n```\nSECRET_KEY=<random>\nTOKEN=<random:32>\n```\n\nThe first line will create a `SECRET_VALUE` with random characters and random length (starting at 64 chars).\n\nThe second line will create a `TOKEN` with random value and with exactly 32 characters.\n\nYou can use the [`--chars-for-random-string` option](#options) to specify which characters to be used.\n\n#### Auto generated\n\nFinally, you can combine existing variables _within the same block_ to create a new variable (without prompting your user to combine them).\n\nFor example, let's say you want to greet someone:\n\n```\nNAME=  # What is your name?\nPERIOD=  # Is it morning, afternoon, or evening?\nGREETING=Good {PERIOD}, {NAME}!\n```\n\nIn this case, Createnv only asks the user for `NAME` and `PERIOD`, and creates `GREETING` automagically.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cuducos/createnv", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "createnv", "package_url": "https://pypi.org/project/createnv/", "platform": "", "project_url": "https://pypi.org/project/createnv/", "project_urls": {"Homepage": "https://github.com/cuducos/createnv", "Repository": "https://github.com/cuducos/createnv"}, "release_url": "https://pypi.org/project/createnv/0.0.1/", "requires_dist": ["typer[all] (>=0.0.10,<0.0.11)"], "requires_python": ">=3.7,<4.0", "summary": "CLI to create .env files with environment variables.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Createnv</h1>\n<p><a href=\"\" rel=\"nofollow\"><img alt=\"GitHub Actions: Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b2e28ee1b41899dd12e174776cafe677e8449fd/68747470733a2f2f6769746875622e636f6d2f63756475636f732f6372656174656e762f776f726b666c6f77732f54657374732f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/createnv/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66dae7ca88bc96f0779bf824a74b24e41a9952fe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6372656174656e76\"></a>\n<a href=\"https://pypi.org/project/createnv/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e01a79f8ea60c551fc03b07111b932878bf16a1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6372656174656e76\"></a></p>\n<p>A simple CLI to create <code>.env</code> files.</p>\n<h2>Motivation</h2>\n<p>I use <code>.env</code> file to decouple configuration from application in many projects, and I see that many newcomers might struggle in creating this file.</p>\n<p>Thus, I created this package to offer a better user interface for creating configuration files in the format of <code>.env</code>.</p>\n<h2>Example</h2>\n<p>Using the sample <code>.env.sample</code> in this repository:</p>\n<p><a href=\"https://asciinema.org/a/311482\" rel=\"nofollow\"><img alt=\"asciicast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35de0c5ec3793e4dd0e8a6bb12962f7046b883eb/68747470733a2f2f61736369696e656d612e6f72672f612f3331313438322e737667\"></a></p>\n<p>You can now experiment by yourself, or try more advanced <code>.env.sample</code> such as the <code>tests/.env.sample</code> or [Bot Followers's <code>.env.sample</code>]</p>\n<h2>Install</h2>\n<p>Createnv requires <a href=\"https://python.org\" rel=\"nofollow\">Python</a> 3.7 or newer:</p>\n<pre><span class=\"gp\">$</span> pip install createnv\n</pre>\n<h2>Usage</h2>\n<p>To use the default values (reads the sample from <code>.env.sample</code> and write the result into <code>.env</code>):</p>\n<pre><span class=\"gp\">$</span> createnv\n</pre>\n<h3>Options</h3>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--target</code></td>\n<td><code>.env</code></td>\n<td>File to write the result</td>\n</tr>\n<tr>\n<td><code>--source</code></td>\n<td><code>.env.sample</code></td>\n<td>File to use as a sample</td>\n</tr>\n<tr>\n<td><code>--overwrite</code> and <code>--no-overwrite</code></td>\n<td><code>--no-overwrite</code></td>\n<td>Whether to ask before overwriting files</td>\n</tr>\n<tr>\n<td><code>--use-default</code> or <code>--no-use-default</code></td>\n<td><code>--no-use-default</code></td>\n<td>Whether to ask for input on fields that have a default value set</td>\n</tr>\n<tr>\n<td><code>--chars-for-random-string</code></td>\n<td>All ASCII letters, numbers and a few extra characters (<code>!@#$%^&amp;*(-_=+)</code>)</td>\n<td>Characters used to create random strings</td>\n</tr></tbody></table>\n<h2>Format of sample files</h2>\n<p>Createnv reads the sample file and separate lines in blocks, splitting at empty lines. It follows a few rules:</p>\n<ol>\n<li>The first line is required to be a <strong>title</strong></li>\n<li>The second line might be a <strong>description</strong> or a <strong>variable</strong></li>\n<li>The remaining lines should be <strong>variables</strong></li>\n</ol>\n<h3>Title</h3>\n<p>The first line of the block should start with a <code>#</code> character, followed by a space. The title value is the remaining text after the <code>#</code> and space.</p>\n<p>For example:</p>\n<pre><code># Hell Yeah!\n</code></pre>\n<p>In this case, the title is <em>Hell yeah!</em> (not <em># Hell yeah!</em>).</p>\n<h3>Description (<em>optional</em>)</h3>\n<p>If the second line follows the syntax of a <em>title</em> line, it's text (without the <code>#</code>) is considered a <em>description</em> and is used to give more information to the user about the variables from this block.</p>\n<h3>Variables</h3>\n<p>There are three types of variables:</p>\n<h4>Regular</h4>\n<p>Each block might one or more variable lines. The syntax requires a <em>name of variable</em> using only capital letters, numbers, or underscore, followed by an equal sign.</p>\n<p>What comes after the equal sign is <em>optinal</em>. This text is considered the default value of this variable.</p>\n<p>The human description of this variable is also <em>optional</em>. You can create one by using comment at the end of the line.  That is to say, any text after a sequence of two spaces, followed by the <code>#</code> sign and one extra space, is the human description of that variable.</p>\n<p>For example:</p>\n<pre><code>NAME=\n</code></pre>\n<p>This is a valid variable line. It has a name (<em>NAME</em>), no default value, and no human description. We can add a default value:</p>\n<pre><code>NAME=Cuducos\n</code></pre>\n<p>This is still a valid variable line. It has a name(<em>NAME</em>), and a default value (<em>Cuducos</em>). Yet, we can add a human description:</p>\n<pre><code>NAME=Cuducos  # What is your name?\n</code></pre>\n<p>Now it's a complete variable with a name (<em>NAME</em>), a default value (<em>Cuducos</em>), and a human description (<em>What is your name?</em>)</p>\n<h4>Random values</h4>\n<p>If you want to have a variable with a random value, you can set its default value to <code>&lt;random&gt;</code> and Createnv will take care of it. Optionally you can specify how long this variable should be with <code>:int</code>.</p>\n<p>For example:</p>\n<pre><code>SECRET_KEY=&lt;random&gt;\nTOKEN=&lt;random:32&gt;\n</code></pre>\n<p>The first line will create a <code>SECRET_VALUE</code> with random characters and random length (starting at 64 chars).</p>\n<p>The second line will create a <code>TOKEN</code> with random value and with exactly 32 characters.</p>\n<p>You can use the <a href=\"#options\" rel=\"nofollow\"><code>--chars-for-random-string</code> option</a> to specify which characters to be used.</p>\n<h4>Auto generated</h4>\n<p>Finally, you can combine existing variables <em>within the same block</em> to create a new variable (without prompting your user to combine them).</p>\n<p>For example, let's say you want to greet someone:</p>\n<pre><code>NAME=  # What is your name?\nPERIOD=  # Is it morning, afternoon, or evening?\nGREETING=Good {PERIOD}, {NAME}!\n</code></pre>\n<p>In this case, Createnv only asks the user for <code>NAME</code> and <code>PERIOD</code>, and creates <code>GREETING</code> automagically.</p>\n\n          </div>"}, "last_serial": 6839296, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c1512b7f4534b40203c4f2c545dd180d", "sha256": "3127c654032cb94442d93572937494d31865c7b3b45dacae415d5e6f418b00c5"}, "downloads": -1, "filename": "createnv-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1512b7f4534b40203c4f2c545dd180d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8806, "upload_time": "2020-03-18T20:17:08", "upload_time_iso_8601": "2020-03-18T20:17:08.631274Z", "url": "https://files.pythonhosted.org/packages/a1/8b/320881a9768bc8aff43a27456c661e5755485f631101d04e6049e6069d82/createnv-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f33aefb8c25e1eb75c076214873878", "sha256": "28dcad8827fe1a2a7e836a86ae0fdfcc4724d7cc6e4ba21536df2fc847516775"}, "downloads": -1, "filename": "createnv-0.0.1.tar.gz", "has_sig": false, "md5_digest": "63f33aefb8c25e1eb75c076214873878", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8035, "upload_time": "2020-03-18T20:17:10", "upload_time_iso_8601": "2020-03-18T20:17:10.523467Z", "url": "https://files.pythonhosted.org/packages/cd/82/272219814bcfdb4813237152d043cd7f21ddc9d28edea2846480c82450b4/createnv-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1512b7f4534b40203c4f2c545dd180d", "sha256": "3127c654032cb94442d93572937494d31865c7b3b45dacae415d5e6f418b00c5"}, "downloads": -1, "filename": "createnv-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1512b7f4534b40203c4f2c545dd180d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8806, "upload_time": "2020-03-18T20:17:08", "upload_time_iso_8601": "2020-03-18T20:17:08.631274Z", "url": "https://files.pythonhosted.org/packages/a1/8b/320881a9768bc8aff43a27456c661e5755485f631101d04e6049e6069d82/createnv-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63f33aefb8c25e1eb75c076214873878", "sha256": "28dcad8827fe1a2a7e836a86ae0fdfcc4724d7cc6e4ba21536df2fc847516775"}, "downloads": -1, "filename": "createnv-0.0.1.tar.gz", "has_sig": false, "md5_digest": "63f33aefb8c25e1eb75c076214873878", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8035, "upload_time": "2020-03-18T20:17:10", "upload_time_iso_8601": "2020-03-18T20:17:10.523467Z", "url": "https://files.pythonhosted.org/packages/cd/82/272219814bcfdb4813237152d043cd7f21ddc9d28edea2846480c82450b4/createnv-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:23 2020"}