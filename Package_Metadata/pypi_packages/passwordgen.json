{"info": {"author": "Noah Krim", "author_email": "nkrim62@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Security", "Topic :: Utilities"], "description": "passwordgen\n###########\nA generator for safe and random passwords defined by a user-defined pattern. The pattern allows for sequences of random digits, symbols, and characters, as well as whole words, with a multitude of options to customize the generated password.\n\nInstallation\n============\n.. code-block:: console\n\n  $ pip install passwordgen\n\nOptions\n=======\n-h, --help  Display help menu\n-c, --copy  Whenever a password is succesfully generated (in either singlue-use mode or interactive mode), the string will be copied to your clipboard (may require external libraries, depending on platform) \n-i, --interactive  Launches in interactive mode, where passwords of the given pattern are continuously printed after each input, and if a valid pattern is given as input at any time, then the new pattern will be used going forward (enter ``q`` to exit)\n-w file, --worddict=file  Sets the ``words.txt`` file that is used as the dictionary for the generator when generating whole words. The parser goes line by line, using non-word characters to separate each word (this excludes hyphens and apostrophes, which are removed prior to parsing and the two sides of the word are merged) and a new, formatted ``words.txt`` file will be created (the previous version will be copied to ``words.txt.old``)\n-l file, --language=file  Attempts to use a pre-made words file (made from the dictionary of the specified language) and replaces the current words.txt file using that language's words file, if it exists (if there is no default file for your language, please consider making your own file for your language and forking this project to include your language's dictionary; go to `https://github.com/nkrim/passwordgen` for more info)\n-R, --revert  Reverts the worddict file at ``words.txt`` with the backup file at ``words.txt.old``, if there is one. This is performed before a new ``words.txt`` file is generated if the ``-w`` command is used with this\n\nHow to Use\n==========\nPattern Basics\n--------------\nA full pattern is comprised of one or more signifier expressions.  A signifier expression is composed of three parts, one or more **signifiers**, zero or more **flags**, and zero or one **length specifier**.  All signifier expressions follows this basic pattern ``%'sig''flags'['length']`` (more complex examples will be shown after the following definitions).  All signifiers and flags are singular characters, while the length specifier can be defined as ``[n]`` where ``n > 0`` or ``[n-N]`` where ``n >= 0`` and ``N > 0`` and ``N >= n``.\n\nSignifiers\n----------\nSignifiers can appear alone, to represent one character (or one word) from it's respective pool of possibilities. Every signifier expression must contain at least one signifier, preceeded by a ``%`` character.\n\nMultiple Signifiers\n-------------------\nIf multiple signifiers are used for the same expression, they must be wrapped by curly-brackets along with their flags (but not their length specifier), for example: ``%{'sig1''sig2''sigN''flags'}['length']``. When multiple signifiers are used, each character in the expression's sequence is picked randomly from the pool of all available characters defined by the union of the sets of characters each signifier represents (therefore a ``c`` signifier used in a multiple signifier expression is redundant, as ``c`` is defined as including all charaters from the other signifier pools, unless used with the ``~`` flag to include the chance of using the pool of all characters).  \n\n**Note:** The ``W`` signifier **cannot** be included in an expression with multiple signifiers unless the ``~`` flag is present (raises an error).\n\n+-----------+---------------------------------------------------------------------------------------+\n| Character | Definition                                                                            |\n+===========+=======================================================================================+\n| ``d``     | Random digit(s)                                                                       |\n+-----------+---------------------------------------------------------------------------------------+\n| ``s``     | Random symbol(s)                                                                      |\n+-----------+---------------------------------------------------------------------------------------+\n| ``w``     | Random word character (``[a-z]``)                                                     |\n+-----------+---------------------------------------------------------------------------------------+                            \n| ``W``     | Random word (from dictionary, defaults to lowercase)                                  |\n+-----------+---------------------------------------------------------------------------------------+                  \n| ``c``     | Random character (excluding whitespace; word characters are of random capitalization) |\n+-----------+---------------------------------------------------------------------------------------+\n\nFlags\n-----\nFlags are ways to manipulate the default action of each signifier. Certain flags can only interact with certain signifiers. If a flag is present but no signifiers that it can interact with are present, then it produces no effect.\n\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n| Character       | Relevant Signifiers | Definition                                                                                         |\n+=================+=====================+====================================================================================================+\n| ``~``           | *any*               | When used in an expresion with multiple signifiers, one signifier from the given set is randomly   |\n|                 |                     | chosen (without bias) to represent the sole signifier of the entire expression                     |\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n| ``=``           | ``d``, ``s``,       | Expression will produce a sequence of a single random character repeated a number of times         |\n|                 | ``w``, ``c``        | (defined by it's length specifier) from it's pool of characters (defined by it's signifiers)       |\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n| ``+``           | ``w``, ``W``        | Word characters will be upper-case instead of their default of lowercase                           |\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n| ``^``           | ``w``, ``W``        | One word character of the sequence will be uppercase (equivalent to ``+`` if ``=`` flag is present)|\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n| ``+`` and ``^`` | ``w``, ``W``        | Word character capitalization is randomized (this does not double the chance of getting a          |\n|                 |                     | character when using the ``c`` signifier or a multiple signifier expression; when the ``=`` flag   |\n|                 |                     | is present there is a 50/50 chance between the whole sequence being lowercase or uppercase)        |\n+-----------------+---------------------+----------------------------------------------------------------------------------------------------+\n\nLength Specifier\n----------------\nThe length specifier represents the length of the character sequence the signifier expression will produce. A length specifier can represent an explicit number, an inclusive range of numbers, or it can be absent. The length specifier, if present, is always surrounded by square brackets. The explicit specifier must satisfy ``n > 0`` where ``n`` is the explicit length given, and the range specifier must satisfy ``n >= 0`` and ``N > 0`` and ``N >= n`` where ``n`` is the lower bound of the range and ``N`` is the upper bound of the range. If any of these conditions are not satisfied, an error is raised and the program is terminated.\n\nLength Specifiers With the ``W`` Signifier\n------------------------------------------\nThe generator *does not* pick the length randomly and then finds a random word of that length, but rather it groups up all words of acceptable length and picks randomly from that set, so whichever word-length is most frequent from that range, that would be the most probable result of the length of the word. Therefore, if part of the range exceeds the maximum word length, it is merely disregarded and the set to choose from is constructed from all available words with minimum length equal to the lower bound of the given range. If no words can be found satisfying the specified length (explicitly or via a range) a warning will be issued and the generator will choose a random word disregarding length.\n\n+-----------+---------------------------------------------------------------------------------------------------------------------+\n| Form      | Definition                                                                                                          |\n+===========+=====================================================================================================================+\n| ``[n]``   | The sequence will be explicitly of length ``n``                                                                     |\n+-----------+---------------------------------------------------------------------------------------------------------------------+\n| ``[n-N]`` | The length of the sequence will fall between the range of ``n`` and ``N``, inclusively                              |\n+-----------+---------------------------------------------------------------------------------------------------------------------+\n| (absent)  | The sequence will be either a single character, or, for the ``W`` signifier, will be a single word of random length |\n+-----------+---------------------------------------------------------------------------------------------------------------------+\n\nSignifier Expression Examples\n=============================\n* A single random digit\n\n  .. code-block:: console\n\n      $ passwordgen %d\n      6\n\n* A single random lowercase word\n\n  .. code-block:: console\n\n\t  $ passwordgen %W\n\t  password\n\n* A sequence of random lowercase word characters\n\n  .. code-block:: console\n\n\t  $ passwordgen %w[4]\n\t  dvzv\n\n* A random lowercase word of length 5\n\n  .. code-block:: console\n\n\t  $ passwordgen %W[5]\n\t  cakes\n\n* A sequence of random symbols with a length between 2 and 6\n\n  .. code-block:: console\n\n\t  $ passwordgen %s[2-6]\n\t  @$$#\n\n* A sequence of a singular random digit, repeated between 4 and 6 times\n\n  .. code-block:: console\n\n\t  $ passwordgen %d=[4-6]\n\t  22222\n\n* A random uppercase word\n\n  .. code-block:: console\n\n\t  $ passwordgen %W+\n\t  GENERATOR\n\n* A sequence of a singular random lowercase or uppercase character, repeated 3 times\n\n  .. code-block:: console\n\n\t  $ passwordgen %w=^+[3]\n\t  fff\n\n* A random word with a length between 2 and 4, with one uppercase letter (the `=` flag has no effect)\n\n  .. code-block:: console\n\n\t  $ passwordgen %W=^[2-4]\n\t  gRip\n\n* A random sequence of characters of length 8, with random capitalization\n\n  .. code-block:: console\n\n\t  $ passwordgen %c+^[8]\n\t  0es#V4uB\n\n* A random sequence of digits and symbols of length 4\n\n  .. code-block:: console\n\n\t  $ passwordgen %{ds}[4]\n\t  1##8\n\n* A random sequence of length 5 consisting entirely of either of word characters or digits\n\n  .. code-block:: console\n\n\t  $ passwordgen %{wd~}[5]\n\t  82535\n\n* A sequence of a singular random lowercase or uppercase word character or symbol, repeated 7 times\n\n  .. code-block:: console\n\n\t  $ passwordgen %{ws=^+}[7]\n\t  GGGGGGG\n\n* Same as above, except the chance between choosing a word character and a symbol is now equal because of the `~` flag, where previously the chance was weighted by the number of word characters vs the number of symbols\n\n  .. code-block:: console\n\n\t  $ passwordgen %{ws=^+~}[7]\n\t  $$$$$$$\n\nContributing\n============\nAdding languages' dictionaries\n------------------------------\nIf you could not find a particular language in the list of default language dictionaries (which can be used as presets word files for generating random words by using the ``-l`` flag with a valid language name) you can contribue to this project by adding your favorite languages! Please note though that, in it's current form, passwordgen only supports basic alpha-numeric characters, so whichever language you wish to add should be able to be properly represented by this alphabet. \n\nYou can contribute your language's dictionary by following these steps:\n\n1. Fork this project's github repository (https://github.com/nkrim/passwordgen)\n2. Find or create a file (with any formatting) with all (or as many as makes practical sense) of words from the language you wish to add (ensure that all characters in the words are basic alphabetic characters with no accents, aka '\u00e7' should be changed to 'c' and '\u00e9' to '\u00e9', though hyphens and apostrophes are removed prior to parsing by the program so those can be left in)\n3. Pre-format the file so it can be quickly loaded in at the user's request. If you have passwordgen installed you can do this by running ``python -c \"from passwordgen.worddict import WordDictionary; print(WordDictionary.parse('<path_to_your_source_file>'))\" > <path_to_your_output_file>`` with the appropriate subsititions, or if you do not have passwordgen installed, you can do the same command from the root directory of this project by replacing ``passwordgen`` with ``src``\n4. Move the formatted dictionary file into the directory ``src/words/defaults`` within this project, and ensure that the file's name is the ``<language_name>.txt`` where ``<language_name>`` is *lowercase* and is the name of the language within its own language (i.e. \"deutsch\" instead of \"german\", or \"francais\" intead of \"french\")\n5. Push your new language file(s) to your fork, and make a pull requst so that it can be reviewed and hopefully added to the project\n6. Thank you for contributing n_n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nkrim/passwordgen", "keywords": "passwordgen password generator safe random pattern", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "passwordgen", "package_url": "https://pypi.org/project/passwordgen/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/passwordgen/", "project_urls": {"Homepage": "https://github.com/nkrim/passwordgen"}, "release_url": "https://pypi.org/project/passwordgen/0.2/", "requires_dist": ["pyperclip (>=1.5.27)"], "requires_python": "", "summary": "A generator for safe and random passwords defined by a user-defined pattern", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A generator for safe and random passwords defined by a user-defined pattern. The pattern allows for sequences of random digits, symbols, and characters, as well as whole words, with a multitude of options to customize the generated password.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"gp\">$</span> pip install passwordgen\n</pre>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>Display help menu</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c</span>, <span class=\"option\">--copy</span></kbd></td>\n<td>Whenever a password is succesfully generated (in either singlue-use mode or interactive mode), the string will be copied to your clipboard (may require external libraries, depending on platform)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--interactive</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Launches in interactive mode, where passwords of the given pattern are continuously printed after each input, and if a valid pattern is given as input at any time, then the new pattern will be used going forward (enter <tt>q</tt> to exit)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-w <var>file</var></span>, <span class=\"option\">--worddict=<var>file</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Sets the <tt>words.txt</tt> file that is used as the dictionary for the generator when generating whole words. The parser goes line by line, using non-word characters to separate each word (this excludes hyphens and apostrophes, which are removed prior to parsing and the two sides of the word are merged) and a new, formatted <tt>words.txt</tt> file will be created (the previous version will be copied to <tt>words.txt.old</tt>)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-l <var>file</var></span>, <span class=\"option\">--language=<var>file</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Attempts to use a pre-made words file (made from the dictionary of the specified language) and replaces the current words.txt file using that language\u2019s words file, if it exists (if there is no default file for your language, please consider making your own file for your language and forking this project to include your language\u2019s dictionary; go to <cite>https://github.com/nkrim/passwordgen</cite> for more info)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-R</span>, <span class=\"option\">--revert</span></kbd></td>\n<td>Reverts the worddict file at <tt>words.txt</tt> with the backup file at <tt>words.txt.old</tt>, if there is one. This is performed before a new <tt>words.txt</tt> file is generated if the <tt><span class=\"pre\">-w</span></tt> command is used with this</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<div id=\"pattern-basics\">\n<h3>Pattern Basics</h3>\n<p>A full pattern is comprised of one or more signifier expressions.  A signifier expression is composed of three parts, one or more <strong>signifiers</strong>, zero or more <strong>flags</strong>, and zero or one <strong>length specifier</strong>.  All signifier expressions follows this basic pattern <tt><span class=\"pre\">%'sig''flags'['length']</span></tt> (more complex examples will be shown after the following definitions).  All signifiers and flags are singular characters, while the length specifier can be defined as <tt>[n]</tt> where <tt>n &gt; 0</tt> or <tt><span class=\"pre\">[n-N]</span></tt> where <tt>n &gt;= 0</tt> and <tt>N &gt; 0</tt> and <tt>N &gt;= n</tt>.</p>\n</div>\n<div id=\"signifiers\">\n<h3>Signifiers</h3>\n<p>Signifiers can appear alone, to represent one character (or one word) from it\u2019s respective pool of possibilities. Every signifier expression must contain at least one signifier, preceeded by a <tt>%</tt> character.</p>\n</div>\n<div id=\"multiple-signifiers\">\n<h3>Multiple Signifiers</h3>\n<p>If multiple signifiers are used for the same expression, they must be wrapped by curly-brackets along with their flags (but not their length specifier), for example: <tt><span class=\"pre\">%{'sig1''sig2''sigN''flags'}['length']</span></tt>. When multiple signifiers are used, each character in the expression\u2019s sequence is picked randomly from the pool of all available characters defined by the union of the sets of characters each signifier represents (therefore a <tt>c</tt> signifier used in a multiple signifier expression is redundant, as <tt>c</tt> is defined as including all charaters from the other signifier pools, unless used with the <tt>~</tt> flag to include the chance of using the pool of all characters).</p>\n<p><strong>Note:</strong> The <tt>W</tt> signifier <strong>cannot</strong> be included in an expression with multiple signifiers unless the <tt>~</tt> flag is present (raises an error).</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Character</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>d</tt></td>\n<td>Random digit(s)</td>\n</tr>\n<tr><td><tt>s</tt></td>\n<td>Random symbol(s)</td>\n</tr>\n<tr><td><tt>w</tt></td>\n<td>Random word character (<tt><span class=\"pre\">[a-z]</span></tt>)</td>\n</tr>\n<tr><td><tt>W</tt></td>\n<td>Random word (from dictionary, defaults to lowercase)</td>\n</tr>\n<tr><td><tt>c</tt></td>\n<td>Random character (excluding whitespace; word characters are of random capitalization)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"flags\">\n<h3>Flags</h3>\n<p>Flags are ways to manipulate the default action of each signifier. Certain flags can only interact with certain signifiers. If a flag is present but no signifiers that it can interact with are present, then it produces no effect.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Character</th>\n<th>Relevant Signifiers</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>~</tt></td>\n<td><em>any</em></td>\n<td>When used in an expresion with multiple signifiers, one signifier from the given set is randomly\nchosen (without bias) to represent the sole signifier of the entire expression</td>\n</tr>\n<tr><td><tt>=</tt></td>\n<td><tt>d</tt>, <tt>s</tt>,\n<tt>w</tt>, <tt>c</tt></td>\n<td>Expression will produce a sequence of a single random character repeated a number of times\n(defined by it\u2019s length specifier) from it\u2019s pool of characters (defined by it\u2019s signifiers)</td>\n</tr>\n<tr><td><tt>+</tt></td>\n<td><tt>w</tt>, <tt>W</tt></td>\n<td>Word characters will be upper-case instead of their default of lowercase</td>\n</tr>\n<tr><td><tt>^</tt></td>\n<td><tt>w</tt>, <tt>W</tt></td>\n<td>One word character of the sequence will be uppercase (equivalent to <tt>+</tt> if <tt>=</tt> flag is present)</td>\n</tr>\n<tr><td><tt>+</tt> and <tt>^</tt></td>\n<td><tt>w</tt>, <tt>W</tt></td>\n<td>Word character capitalization is randomized (this does not double the chance of getting a\ncharacter when using the <tt>c</tt> signifier or a multiple signifier expression; when the <tt>=</tt> flag\nis present there is a 50/50 chance between the whole sequence being lowercase or uppercase)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"length-specifier\">\n<h3>Length Specifier</h3>\n<p>The length specifier represents the length of the character sequence the signifier expression will produce. A length specifier can represent an explicit number, an inclusive range of numbers, or it can be absent. The length specifier, if present, is always surrounded by square brackets. The explicit specifier must satisfy <tt>n &gt; 0</tt> where <tt>n</tt> is the explicit length given, and the range specifier must satisfy <tt>n &gt;= 0</tt> and <tt>N &gt; 0</tt> and <tt>N &gt;= n</tt> where <tt>n</tt> is the lower bound of the range and <tt>N</tt> is the upper bound of the range. If any of these conditions are not satisfied, an error is raised and the program is terminated.</p>\n</div>\n<div id=\"length-specifiers-with-the-w-signifier\">\n<h3>Length Specifiers With the <tt>W</tt> Signifier</h3>\n<p>The generator <em>does not</em> pick the length randomly and then finds a random word of that length, but rather it groups up all words of acceptable length and picks randomly from that set, so whichever word-length is most frequent from that range, that would be the most probable result of the length of the word. Therefore, if part of the range exceeds the maximum word length, it is merely disregarded and the set to choose from is constructed from all available words with minimum length equal to the lower bound of the given range. If no words can be found satisfying the specified length (explicitly or via a range) a warning will be issued and the generator will choose a random word disregarding length.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Form</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>[n]</tt></td>\n<td>The sequence will be explicitly of length <tt>n</tt></td>\n</tr>\n<tr><td><tt><span class=\"pre\">[n-N]</span></tt></td>\n<td>The length of the sequence will fall between the range of <tt>n</tt> and <tt>N</tt>, inclusively</td>\n</tr>\n<tr><td>(absent)</td>\n<td>The sequence will be either a single character, or, for the <tt>W</tt> signifier, will be a single word of random length</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"signifier-expression-examples\">\n<h2>Signifier Expression Examples</h2>\n<ul>\n<li><p>A single random digit</p>\n<pre><span class=\"gp\">$</span> passwordgen %d\n<span class=\"go\">6</span>\n</pre>\n</li>\n<li><p>A single random lowercase word</p>\n<pre><span class=\"gp\">$</span> passwordgen %W\n<span class=\"go\">password</span>\n</pre>\n</li>\n<li><p>A sequence of random lowercase word characters</p>\n<pre><span class=\"gp\">$</span> passwordgen %w<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"go\">dvzv</span>\n</pre>\n</li>\n<li><p>A random lowercase word of length 5</p>\n<pre><span class=\"gp\">$</span> passwordgen %W<span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"go\">cakes</span>\n</pre>\n</li>\n<li><p>A sequence of random symbols with a length between 2 and 6</p>\n<pre><span class=\"gp\">$</span> passwordgen %s<span class=\"o\">[</span><span class=\"m\">2</span>-6<span class=\"o\">]</span>\n<span class=\"go\">@$$#</span>\n</pre>\n</li>\n<li><p>A sequence of a singular random digit, repeated between 4 and 6 times</p>\n<pre><span class=\"gp\">$</span> passwordgen %d<span class=\"o\">=[</span><span class=\"m\">4</span>-6<span class=\"o\">]</span>\n<span class=\"go\">22222</span>\n</pre>\n</li>\n<li><p>A random uppercase word</p>\n<pre><span class=\"gp\">$</span> passwordgen %W+\n<span class=\"go\">GENERATOR</span>\n</pre>\n</li>\n<li><p>A sequence of a singular random lowercase or uppercase character, repeated 3 times</p>\n<pre><span class=\"gp\">$</span> passwordgen %w<span class=\"o\">=</span>^+<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span>\n<span class=\"go\">fff</span>\n</pre>\n</li>\n<li><p>A random word with a length between 2 and 4, with one uppercase letter (the <cite>=</cite> flag has no effect)</p>\n<pre><span class=\"gp\">$</span> passwordgen %W<span class=\"o\">=</span>^<span class=\"o\">[</span><span class=\"m\">2</span>-4<span class=\"o\">]</span>\n<span class=\"go\">gRip</span>\n</pre>\n</li>\n<li><p>A random sequence of characters of length 8, with random capitalization</p>\n<pre><span class=\"gp\">$</span> passwordgen %c+^<span class=\"o\">[</span><span class=\"m\">8</span><span class=\"o\">]</span>\n<span class=\"go\">0es#V4uB</span>\n</pre>\n</li>\n<li><p>A random sequence of digits and symbols of length 4</p>\n<pre><span class=\"gp\">$</span> passwordgen %<span class=\"o\">{</span>ds<span class=\"o\">}[</span><span class=\"m\">4</span><span class=\"o\">]</span>\n<span class=\"go\">1##8</span>\n</pre>\n</li>\n<li><p>A random sequence of length 5 consisting entirely of either of word characters or digits</p>\n<pre><span class=\"gp\">$</span> passwordgen %<span class=\"o\">{</span>wd~<span class=\"o\">}[</span><span class=\"m\">5</span><span class=\"o\">]</span>\n<span class=\"go\">82535</span>\n</pre>\n</li>\n<li><p>A sequence of a singular random lowercase or uppercase word character or symbol, repeated 7 times</p>\n<pre><span class=\"gp\">$</span> passwordgen %<span class=\"o\">{</span><span class=\"nv\">ws</span><span class=\"o\">=</span>^+<span class=\"o\">}[</span><span class=\"m\">7</span><span class=\"o\">]</span>\n<span class=\"go\">GGGGGGG</span>\n</pre>\n</li>\n<li><p>Same as above, except the chance between choosing a word character and a symbol is now equal because of the <cite>~</cite> flag, where previously the chance was weighted by the number of word characters vs the number of symbols</p>\n<pre><span class=\"gp\">$</span> passwordgen %<span class=\"o\">{</span><span class=\"nv\">ws</span><span class=\"o\">=</span>^+~<span class=\"o\">}[</span><span class=\"m\">7</span><span class=\"o\">]</span>\n<span class=\"gp\">$</span><span class=\"nv\">$$$$$$</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<h2 id=\"adding-languages-dictionaries\"><span class=\"section-subtitle\">Adding languages\u2019 dictionaries</span></h2>\n<p>If you could not find a particular language in the list of default language dictionaries (which can be used as presets word files for generating random words by using the <tt><span class=\"pre\">-l</span></tt> flag with a valid language name) you can contribue to this project by adding your favorite languages! Please note though that, in it\u2019s current form, passwordgen only supports basic alpha-numeric characters, so whichever language you wish to add should be able to be properly represented by this alphabet.</p>\n<p>You can contribute your language\u2019s dictionary by following these steps:</p>\n<ol>\n<li>Fork this project\u2019s github repository (<a href=\"https://github.com/nkrim/passwordgen\" rel=\"nofollow\">https://github.com/nkrim/passwordgen</a>)</li>\n<li>Find or create a file (with any formatting) with all (or as many as makes practical sense) of words from the language you wish to add (ensure that all characters in the words are basic alphabetic characters with no accents, aka \u2018\u00e7\u2019 should be changed to \u2018c\u2019 and \u2018\u00e9\u2019 to \u2018\u00e9\u2019, though hyphens and apostrophes are removed prior to parsing by the program so those can be left in)</li>\n<li>Pre-format the file so it can be quickly loaded in at the user\u2019s request. If you have passwordgen installed you can do this by running <tt>python <span class=\"pre\">-c</span> \"from passwordgen.worddict import WordDictionary; <span class=\"pre\">print(WordDictionary.parse('&lt;path_to_your_source_file&gt;'))\"</span> &gt; &lt;path_to_your_output_file&gt;</tt> with the appropriate subsititions, or if you do not have passwordgen installed, you can do the same command from the root directory of this project by replacing <tt>passwordgen</tt> with <tt>src</tt></li>\n<li>Move the formatted dictionary file into the directory <tt>src/words/defaults</tt> within this project, and ensure that the file\u2019s name is the <tt><span class=\"pre\">&lt;language_name&gt;.txt</span></tt> where <tt>&lt;language_name&gt;</tt> is <em>lowercase</em> and is the name of the language within its own language (i.e. \u201cdeutsch\u201d instead of \u201cgerman\u201d, or \u201cfrancais\u201d intead of \u201cfrench\u201d)</li>\n<li>Push your new language file(s) to your fork, and make a pull requst so that it can be reviewed and hopefully added to the project</li>\n<li>Thank you for contributing n_n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 2983805, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6a95dbf7b446f1097ccf37f6914e4e0a", "sha256": "b79a594c9f2744cebf796d9ce0d491fd3de1606fe033e2c4506b2d32c04a6af2"}, "downloads": -1, "filename": "passwordgen-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6a95dbf7b446f1097ccf37f6914e4e0a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4640993, "upload_time": "2016-11-15T02:32:58", "upload_time_iso_8601": "2016-11-15T02:32:58.017366Z", "url": "https://files.pythonhosted.org/packages/a3/1d/0b855286a5260c3a5954a2eb41a84e3e267b3884138770312e7151c6bed6/passwordgen-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43d716de029a976c6bd74769766fc263", "sha256": "7068b723a279582b2718176c9073ae20e805b5796f74d62761595dd763097c89"}, "downloads": -1, "filename": "passwordgen-0.1.tar.gz", "has_sig": false, "md5_digest": "43d716de029a976c6bd74769766fc263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840005, "upload_time": "2016-11-15T02:33:03", "upload_time_iso_8601": "2016-11-15T02:33:03.057461Z", "url": "https://files.pythonhosted.org/packages/56/6c/6f04ccbc28c40b007e8a7e43896f2ad950389df4edb22299b0e1b1b81a8f/passwordgen-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1090e82d1585f9e54028063456a7d609", "sha256": "56db11e486ab25e7ee848968416d8a563479745b06826f9dac642ed435aee211"}, "downloads": -1, "filename": "passwordgen-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1090e82d1585f9e54028063456a7d609", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4641052, "upload_time": "2016-11-15T02:36:09", "upload_time_iso_8601": "2016-11-15T02:36:09.685472Z", "url": "https://files.pythonhosted.org/packages/46/9e/0c7f9ddf39903bcc67074d6ff82838e403b5bc83580a3f4c5d946085bc39/passwordgen-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a247b15fdd78507c2952b695758104b0", "sha256": "a4ff4bce0d23df1ab24ac6346bde12b6860f887da6f5dcfd982d1f69524a962e"}, "downloads": -1, "filename": "passwordgen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a247b15fdd78507c2952b695758104b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840016, "upload_time": "2016-11-15T02:36:14", "upload_time_iso_8601": "2016-11-15T02:36:14.953150Z", "url": "https://files.pythonhosted.org/packages/7c/86/b40836d198dfdddc7c461978648799e4a1b1a79c1c865405e750a7a8712b/passwordgen-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c79aa54bc8b01c2d3be3a65325ee7edf", "sha256": "8068883c7552b50dd9e6d8958165b1c5b475c51d60b0c84daf5871f36b4ca2bf"}, "downloads": -1, "filename": "passwordgen-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c79aa54bc8b01c2d3be3a65325ee7edf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4641054, "upload_time": "2016-11-15T02:53:59", "upload_time_iso_8601": "2016-11-15T02:53:59.560794Z", "url": "https://files.pythonhosted.org/packages/e3/f9/69055ad840191eda6d08929ad25403a7a4c6c501ee3a249100f550e657ea/passwordgen-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3c2128b9387b96a415029bf0c539636", "sha256": "924a224a05039c9c1a96db37cb6ce67ff8361eaee86d16cf5f1696fb48289512"}, "downloads": -1, "filename": "passwordgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d3c2128b9387b96a415029bf0c539636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840016, "upload_time": "2016-11-15T02:54:05", "upload_time_iso_8601": "2016-11-15T02:54:05.041262Z", "url": "https://files.pythonhosted.org/packages/b8/01/ab13b0317afe7a0f956533ac6614b91258c899218dcbb8838f0bfbbac543/passwordgen-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "95bed930b7bbbc9a109c17d8095fa916", "sha256": "977eea5e61ec1eac1b1a4082088c028e8267a3ae21fbf0b37c15a7e62f763a7b"}, "downloads": -1, "filename": "passwordgen-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95bed930b7bbbc9a109c17d8095fa916", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4641479, "upload_time": "2016-11-15T23:35:21", "upload_time_iso_8601": "2016-11-15T23:35:21.976626Z", "url": "https://files.pythonhosted.org/packages/96/cf/512a7bf51323110a24fcdc5e3ee0324451d3707862aae7b75675426f02fc/passwordgen-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9877e409ac59a4f6f4673d5df0fae7b", "sha256": "1ea8a7ffba34adca5271511df8647bf4a50a75dc9a834f9e4ac03875bc15b355"}, "downloads": -1, "filename": "passwordgen-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f9877e409ac59a4f6f4673d5df0fae7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840791, "upload_time": "2016-11-15T23:35:26", "upload_time_iso_8601": "2016-11-15T23:35:26.928927Z", "url": "https://files.pythonhosted.org/packages/7b/bc/3482c08e1a11dd64dcc73b1b91a66f9a1099367eb0bbaaad3426ab54e98e/passwordgen-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "58fda4188706bda201776c97dc18f5e6", "sha256": "68b23de867d387ab8fc35494c6a3430092f28586972bf31fe0ba05650f367fdc"}, "downloads": -1, "filename": "passwordgen-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "58fda4188706bda201776c97dc18f5e6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4641660, "upload_time": "2016-11-16T00:54:48", "upload_time_iso_8601": "2016-11-16T00:54:48.176512Z", "url": "https://files.pythonhosted.org/packages/ae/b7/13eb7a23df800d9ae3fe1ec68d0c6ced3be1f07a4ee26716d9fcbc0a9af4/passwordgen-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2003bb67ee3773e9eadd43bdc05c7c68", "sha256": "ccad261e8d4b0ed33a40afb61c5b6e0696e5058933845f634423af356262b93b"}, "downloads": -1, "filename": "passwordgen-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2003bb67ee3773e9eadd43bdc05c7c68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840344, "upload_time": "2016-11-16T00:54:52", "upload_time_iso_8601": "2016-11-16T00:54:52.158862Z", "url": "https://files.pythonhosted.org/packages/ec/75/b1d47c79f5c76089e0fadee988e05072bb333b3534a19d4b1886e7a8bc4c/passwordgen-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "dbb6b7631ac8f35d44228bc84b7c68a0", "sha256": "17a48761446441df09b0df3dae03cb7df55e97b7f45f188c736f8d98ebfe5c98"}, "downloads": -1, "filename": "passwordgen-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbb6b7631ac8f35d44228bc84b7c68a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4641661, "upload_time": "2016-11-16T00:58:05", "upload_time_iso_8601": "2016-11-16T00:58:05.105429Z", "url": "https://files.pythonhosted.org/packages/f7/53/af2abe3461361ea38732ec74b03c1d52f100c09275d9183e1abde7efcc44/passwordgen-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b21f9a36663b4af4ac0e989db65da266", "sha256": "dd679a663d2c47c54f4cf9d47e86c3e2b8a8923987e01515a72d5905c3e0443c"}, "downloads": -1, "filename": "passwordgen-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b21f9a36663b4af4ac0e989db65da266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2840344, "upload_time": "2016-11-16T00:58:10", "upload_time_iso_8601": "2016-11-16T00:58:10.127312Z", "url": "https://files.pythonhosted.org/packages/b9/00/5bbef7b6db80995193d3da6ad9c5fe58d14d513133c1cc0c6c1584ae2f30/passwordgen-0.1.5.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c2ac423eda0fdf28c0d92b2278fc0868", "sha256": "24be16293962db34f77ab159170e0eeda746abe40ab94c412b328376396bfdca"}, "downloads": -1, "filename": "passwordgen-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2ac423eda0fdf28c0d92b2278fc0868", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5356394, "upload_time": "2017-06-28T04:37:17", "upload_time_iso_8601": "2017-06-28T04:37:17.465493Z", "url": "https://files.pythonhosted.org/packages/a0/e7/c89f67e63f05b0557f1b8194ff8f31372a394feb849d9fe864f25442e13d/passwordgen-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23bb1ad42dc56307bf773bd87e5fe28e", "sha256": "f27acfdc5517e4bfc3fe8d0ce62dbec8bd4db4c76cda3a0a2a615c3973be45b0"}, "downloads": -1, "filename": "passwordgen-0.2.tar.gz", "has_sig": false, "md5_digest": "23bb1ad42dc56307bf773bd87e5fe28e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2516638, "upload_time": "2017-06-28T04:37:21", "upload_time_iso_8601": "2017-06-28T04:37:21.508137Z", "url": "https://files.pythonhosted.org/packages/91/92/0fcda78f050f1239b07f785074536b0fad7e20f05ba456425560e0a5badd/passwordgen-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2ac423eda0fdf28c0d92b2278fc0868", "sha256": "24be16293962db34f77ab159170e0eeda746abe40ab94c412b328376396bfdca"}, "downloads": -1, "filename": "passwordgen-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2ac423eda0fdf28c0d92b2278fc0868", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5356394, "upload_time": "2017-06-28T04:37:17", "upload_time_iso_8601": "2017-06-28T04:37:17.465493Z", "url": "https://files.pythonhosted.org/packages/a0/e7/c89f67e63f05b0557f1b8194ff8f31372a394feb849d9fe864f25442e13d/passwordgen-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23bb1ad42dc56307bf773bd87e5fe28e", "sha256": "f27acfdc5517e4bfc3fe8d0ce62dbec8bd4db4c76cda3a0a2a615c3973be45b0"}, "downloads": -1, "filename": "passwordgen-0.2.tar.gz", "has_sig": false, "md5_digest": "23bb1ad42dc56307bf773bd87e5fe28e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2516638, "upload_time": "2017-06-28T04:37:21", "upload_time_iso_8601": "2017-06-28T04:37:21.508137Z", "url": "https://files.pythonhosted.org/packages/91/92/0fcda78f050f1239b07f785074536b0fad7e20f05ba456425560e0a5badd/passwordgen-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:03 2020"}