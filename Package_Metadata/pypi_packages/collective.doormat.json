{"info": {"author": "Christian Ledermann", "author_email": "christian.ledermann@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.0", "Framework :: Plone :: 4.1", "License :: OSI Approved :: GNU General Public License (GPL)"], "description": "Introduction\n        =============\n        \n        \n        A doormat is a couple of links which are presented in a structured way.\n        One example is the current plone.org, where the div#sitemap at the\n        bottom consists of some ordered bundles of internal and external links,\n        with sections called \"Downloads\", \"Documentation\", \"Developers\",\n        \"Plone foundation\" and \"Support\".\n        \n        This product adds a control panel in which you can design your doormat\n        with a WYSIWYG editor. No contenttypes are added.\n        \n        \n        - Code repository: https://svn.plone.org/svn/collective/collective.doormat/trunk\n        - Report bugs at http://plone.org/products/collective.doormat/issues\n        \n        \n        Change history\n        **************\n        \n        Changelog\n        =========\n        \n        0.1 (2011/12/15)\n        ----------------\n        \n        - initial release\n        - Created recipe with ZopeSkel\n          [Christian Ledermann]\n        \n        Detailed Documentation\n        **********************\n        \n        Introduction\n        ============\n        \n        This is a full-blown functional test. The emphasis here is on testing what\n        the user may input and see, and the system is largely tested as a black box.\n        We use PloneTestCase to set up this test as well, so we have a full Plone site\n        to play with. We *can* inspect the state of the portal, e.g. using \n        self.portal and self.folder, but it is often frowned upon since you are not\n        treating the system as a black box. Also, if you, for example, log in or set\n        roles using calls like self.setRoles(), these are not reflected in the test\n        browser, which runs as a separate session.\n        \n        Being a doctest, we can tell a story here.\n        \n        First, we must perform some setup. We use the testbrowser that is shipped\n        with Five, as this provides proper Zope 2 integration. Most of the \n        documentation, though, is in the underlying zope.testbrower package.\n        \n            >>> from Products.Five.testbrowser import Browser\n            >>> browser = Browser()\n            >>> portal_url = self.portal.absolute_url()\n        \n        The following is useful when writing and debugging testbrowser tests. It lets\n        us see all error messages in the error_log.\n        \n            >>> self.portal.error_log._ignored_exceptions = ()\n        \n        With that in place, we can go to the portal front page and log in. We will\n        do this using the default user from PloneTestCase:\n        \n            >>> from Products.PloneTestCase.setup import portal_owner, default_password\n        \n        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  \n        \n            >>> browser.open(portal_url + '/login_form')\n            >>> browser.getControl(name='__ac_name').value = portal_owner\n            >>> browser.getControl(name='__ac_password').value = default_password\n            >>> browser.getControl(name='submit').click()\n        \n        Here, we set the value of the fields on the login form and then simulate a\n        submit click.  We then ensure that we get the friendly logged-in message:\n        \n            >>> \"You are now logged in\" in browser.contents\n            True\n        \n        Finally, let's return to the front page of our site before continuing\n        \n            >>> browser.open(portal_url)\n        \n        -*- extra stuff goes here -*-\n        \n        \n        Contributors\n        ************\n        \n        Christian Ledermann, Author\n        \n        \n        Download\n        ********", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://plone.org/products/collective.doormat", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.doormat", "package_url": "https://pypi.org/project/collective.doormat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.doormat/", "project_urls": {"Homepage": "http://plone.org/products/collective.doormat"}, "release_url": "https://pypi.org/project/collective.doormat/0.1/", "requires_dist": null, "requires_python": null, "summary": "Adds a doormat viewlet and installs it in the Plone\n      footer. The links and text in the doormat are manageable in the\n      control panel", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>        =============<br>        <br>        <br>        A doormat is a couple of links which are presented in a structured way.<br>        One example is the current plone.org, where the div#sitemap at the<br>        bottom consists of some ordered bundles of internal and external links,<br>        with sections called \"Downloads\", \"Documentation\", \"Developers\",<br>        \"Plone foundation\" and \"Support\".<br>        <br>        This product adds a control panel in which you can design your doormat<br>        with a WYSIWYG editor. No contenttypes are added.<br>        <br>        <br>        - Code repository: https://svn.plone.org/svn/collective/collective.doormat/trunk<br>        - Report bugs at http://plone.org/products/collective.doormat/issues<br>        <br>        <br>        Change history<br>        **************<br>        <br>        Changelog<br>        =========<br>        <br>        0.1 (2011/12/15)<br>        ----------------<br>        <br>        - initial release<br>        - Created recipe with ZopeSkel<br>          [Christian Ledermann]<br>        <br>        Detailed Documentation<br>        **********************<br>        <br>        Introduction<br>        ============<br>        <br>        This is a full-blown functional test. The emphasis here is on testing what<br>        the user may input and see, and the system is largely tested as a black box.<br>        We use PloneTestCase to set up this test as well, so we have a full Plone site<br>        to play with. We *can* inspect the state of the portal, e.g. using <br>        self.portal and self.folder, but it is often frowned upon since you are not<br>        treating the system as a black box. Also, if you, for example, log in or set<br>        roles using calls like self.setRoles(), these are not reflected in the test<br>        browser, which runs as a separate session.<br>        <br>        Being a doctest, we can tell a story here.<br>        <br>        First, we must perform some setup. We use the testbrowser that is shipped<br>        with Five, as this provides proper Zope 2 integration. Most of the <br>        documentation, though, is in the underlying zope.testbrower package.<br>        <br>            &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>            &gt;&gt;&gt; browser = Browser()<br>            &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br>        <br>        The following is useful when writing and debugging testbrowser tests. It lets<br>        us see all error messages in the error_log.<br>        <br>            &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br>        <br>        With that in place, we can go to the portal front page and log in. We will<br>        do this using the default user from PloneTestCase:<br>        <br>            &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br>        <br>        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  <br>        <br>            &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>            &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>            &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>            &gt;&gt;&gt; browser.getControl(name='submit').click()<br>        <br>        Here, we set the value of the fields on the login form and then simulate a<br>        submit click.  We then ensure that we get the friendly logged-in message:<br>        <br>            &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>            True<br>        <br>        Finally, let's return to the front page of our site before continuing<br>        <br>            &gt;&gt;&gt; browser.open(portal_url)<br>        <br>        -*- extra stuff goes here -*-<br>        <br>        <br>        Contributors<br>        ************<br>        <br>        Christian Ledermann, Author<br>        <br>        <br>        Download<br>        ********\n          </div>"}, "last_serial": 724318, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0ae0d0aa0659b4d898b7c7e39584b6b2", "sha256": "6ef702db0da2ace8fff917c9d24e6f54bc33c9cd384bcc975402a00ea0dbc386"}, "downloads": -1, "filename": "collective.doormat-0.1.tar.gz", "has_sig": false, "md5_digest": "0ae0d0aa0659b4d898b7c7e39584b6b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18540, "upload_time": "2011-12-15T13:09:14", "upload_time_iso_8601": "2011-12-15T13:09:14.917271Z", "url": "https://files.pythonhosted.org/packages/cd/dc/d2e02a571a19f416678ac8877b935bf68428deef8ba814c11408cea3fd1f/collective.doormat-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ae0d0aa0659b4d898b7c7e39584b6b2", "sha256": "6ef702db0da2ace8fff917c9d24e6f54bc33c9cd384bcc975402a00ea0dbc386"}, "downloads": -1, "filename": "collective.doormat-0.1.tar.gz", "has_sig": false, "md5_digest": "0ae0d0aa0659b4d898b7c7e39584b6b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18540, "upload_time": "2011-12-15T13:09:14", "upload_time_iso_8601": "2011-12-15T13:09:14.917271Z", "url": "https://files.pythonhosted.org/packages/cd/dc/d2e02a571a19f416678ac8877b935bf68428deef8ba814c11408cea3fd1f/collective.doormat-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:17:56 2020"}