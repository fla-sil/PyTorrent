{"info": {"author": "potykion", "author_email": "potykion@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# repka\n\n![ci](https://travis-ci.org/potykion/repka.svg?branch=master)\n\nRepository pattern implementation - isolate db manipulation from domain models\n\nVersion: **1.0.0**\n\n## Installation\n\nVia pip:\n\n```\npip install repka\n```\n\nVia poetry:\n\n```\npoetry add repka\n```\n\n## Usage\n\n### repka.api.BaseRepository\n\nBaseRepository used to execute sql-queries (via [aiopg & sqlalchemy](https://github.com/aio-libs/aiopg)) and convert sql-rows to/from [pydantic](https://github.com/samuelcolvin/pydantic) models\n\n```python\nimport sqlalchemy as sa\nfrom repka.api import AiopgRepository, IdModel\nfrom repka.utils import create_async_db_connection\n\n# Define pydantic model\n# It should inherit repka.api.IdModel \n#   to set id on entity insert, to update entity with id and more\n# IdModel inherits pydantic.BaseModel and defines int id field\nclass Task(IdModel):\n    title: str\n\n# Define sqlachemy table with same model columns\nmetadata = sa.MetaData()\ntasks_table = sa.Table(\n    \"tasks\", metadata,\n    sa.Column(\"id\", sa.Integer, primary_key=True, autoincrement=True),\n    sa.Column(\"title\", sa.String)\n)\n\n# Define repository\n# You should inherit repka.api.BaseRepository and \n#   set sqlalchemy-table via table property \n# Kwargs is sql-row data returned by sqlalchemy  \nclass TaskRepo(AiopgRepository[Task]):\n    table = tasks_table\n\n# To use the repository you should instantiate it with async sqlalchemy-connection\ndb_url = \"postgresql://postgres@localhost/test\"\nasync with create_async_db_connection(db_url) as conn:\n    repo = TaskRepo(conn)\n\n    # Now you can use the repo\n    # Here we select first task with matching title\n    task = await repo.first(tasks_table.c.title == \"My first task\")\n```\n\n#### BaseRepository methods\n\n>`T` means generic type passed to BaseRepository (e.g. `BaseRepository[Task]` means that type of `T` is `Task`)\n\n##### Select methods\n\n- `repo.first(*filters: BinaryExpression, orders: Optional[Columns])` - get first entity matching sqlalchemy {filters} and {orders}; if no entity matches {filters} then `None` is returned\n    \n    > Example of {filters}: `table.c.title == 'test task'` - equals to sql where clause: `where title = 'test task'` \n \n    > Example of {orders}: `table.c.title` - equals to sql order by clause: `order by title`\n \n- `repo.get_by_ids(entity_ids: List[int])` - get all entities whose id in {entity_ids} (same as sql `where id in ({entity_ids})`)\n- `repo.get_by_id(entity_id: int)` - get entity with id = {entity_id}\n- `repo.get_or_create(filters: Optional[List[BinaryExpression]], defaults: Optional[Dict])` - get entity that matches {filters} if no entity found create new entity with {defaults}; return tuple of entity and entity existence flag\n- `repo.get_all(filters: Optional[List[BinaryExpression]], orders: Optional[Columns])` - return all entities matching {filters} and {orders}\n- `repo.get_all_ids(filters: Optional[List[BinaryExpression]], orders: Optional[Columns])` - return ids of entites matching {filters} and {orders}\n- `repo.exists(*filters: BinaryExpression)` - check that entity matching {filters} exists using sql `count` statement\n\n##### Insert methods\n\n- `repo.insert(entity: T)` - insert entity to db table and set id field to the entity\n- `repo.insert_many(entities: List[T])` - insert multiple entities and set ids to them in single transaction\n\n##### Update methods\n\n- `repo.update(entity: T)` - updates entity in db\n- `repo.update_partial(entity: T, **updated_values)` - update entity fields via kwargs and update entity fields in db\n- `repo.update_many(entities: List[T])` - update multiple entities in single transaction\n\n##### Delete methods\n\n- `repo.delete(*filters: BinaryExpression)` - delete entities matching {filters} via sql `delete` statement\n\n    > To delete all entities pass `None` as an arg: `repo.delete(None)`   \n\n- `repo.delete_by_id(entity_id: int)` - delete entity with {entity_id}\n- `repo.delete_by_ids(entity_ids: List[int])` - delete entities whose id in {entity_ids}\n\n##### Other methods & properties\n\n- `repo.serialize(entity: T)` - convert {entity} to dict (e.g. in `insert` and `update` methods)  \n- `repo.deserialize(**kwargs)` - convert {kwargs} to entity (e.g. in `first` and `get_all` methods)\n- `repo.execute_in_transaction()` - context manager that allows execute multiple queries in transaction \n\n    Example: delete all old entities and insert new one in single transaction:\n    \n    ```python\n    async with repo.execute_in_transaction():\n      await repo.delete()\n      await repo.insert(Task(title=\"New task\"))\n    ``` \n  \n- `repo.ignore_insert` - list of entity fields that will be ignored on insert and set after insert, useful for auto incrementing / default fields like dates or sequence numbers\n\n#### ContextVar support\n\nYou can create lazy-connection repositories with context vars\n\n```python\nfrom contextvars import ContextVar\nfrom repka.utils import create_async_db_connection\n\n# Create context var and instantiate repository\ndb_connection = ContextVar(\"db_connection\")\nrepo = TaskRepo(db_connection)\n\n# Now you should set the context var somewhere (e.g. in middleware)\n#   And start using the repository\nasync with create_async_db_connection(db_url) as conn:\n    db_connection.set(conn)\n\n    await repo.insert(Task(title=\"New task\"))\n```\n\n### repka.json_.DictJsonRepo\n\nThis kind of repository used to save/load json objects from file:\n\n```python\nfrom repka.json_ import DictJsonRepo\n\nsongs = [\n    {\"artist\": \"Pig Destroyer\", \"title\": \"Thumbsucker\"}, \n    {\"artist\": \"Da Menace\", \"title\": \"Bag of Funk\"}\n]\n\nrepo = DictJsonRepo()\n\nrepo.write(songs, \"songs.json\")\n\nassert repo.read(\"songs.json\") == songs\n```\n\n#### DictJsonRepo methods\n\n- `repo.read(filename: str)` - read json file with {filename}, return its content as json primitive (list, dict, str, etc.)\n\n- `repo.write(data: T, filename: str)` - serialize json primitive {data} and save it to file with {filename}\n\n- `repo.read_or_write_default(filename: str, default_factory: Callable[[], T])` - check file with {filename} exists, read its content if exists, execute {default_factory} and write it to file with {filename} otherwise\n    \n    - Example: read data from `test.json` or create `test.json` with `[{\"field\": \"value\"}]` if no such file: \n    \n        ```python\n        repo = DictJsonRepo()\n        repo.read_or_write_default(\"test.json\", lambda: [{\"field\": \"value\"}])\n        ```\n\n#### DictJsonRepo constructor\n\n- `DictJsonRepo(directory: str)` - set directory where files will be read / written; if not set current working directory will be used  \n\n    - Example: read files from `data/` dir: \n    \n        ```python\n        repo = DictJsonRepo(\"data\")\n        repo.read(\"test.json\") # will read \"./data/test.json\"\n        ``` \n    \n## Development and contribution\n\n### Dependencies \n\nInstall production and development dependencies via poetry:\n\n```\npoetry install\n```\n\n### Tests \n\nTo run tests:\n\n1. Setup [database url](https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls) via `DB_URL` environment variable (e.g. via .env file)\n\n**WARNING:** Every test run will drop all tables from the db\n\n2. Run tests via `pytest`\n\n### Contribution\n\n1. Create fork/branch for new feature/fix/whatever\n\n2. [Optional] Install pre-commit hooks: `pre-commit install` (for manual pre-commit run use`pre-commit run -a`)\n\n3. When you done create pull request and wait for approval\n\n### Deploy\n\nTo deploy new version you need to increment version via bump2version and publish it to PyPI via poetry:\n\n```\nbump2version major/minor/patch\npoetry publish --build\n``` \n\nDon't forget to fill the CHANGELOG.md before release ", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/potykion/repka", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "repka", "package_url": "https://pypi.org/project/repka/", "platform": "", "project_url": "https://pypi.org/project/repka/", "project_urls": {"Homepage": "https://github.com/potykion/repka", "Repository": "https://github.com/potykion/repka"}, "release_url": "https://pypi.org/project/repka/1.0.0/", "requires_dist": ["pydantic (>=0.31,<1.2)", "sqlalchemy (>=1.3,<2.0)", "aiopg (>=0.16.0,<0.17.0)", "typing_inspect (>=0.5.0,<0.6.0)", "databases (>=0.2.6,<0.3.0)", "asyncpg (>=0.20.1,<0.21.0)"], "requires_python": ">=3.7,<4.0", "summary": "Python repository pattern implementation", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>repka</h1>\n<p><img alt=\"ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89c320943d6a354333d4bb6a67f1946fae8c8623/68747470733a2f2f7472617669732d63692e6f72672f706f74796b696f6e2f7265706b612e7376673f6272616e63683d6d6173746572\"></p>\n<p>Repository pattern implementation - isolate db manipulation from domain models</p>\n<p>Version: <strong>1.0.0</strong></p>\n<h2>Installation</h2>\n<p>Via pip:</p>\n<pre><code>pip install repka\n</code></pre>\n<p>Via poetry:</p>\n<pre><code>poetry add repka\n</code></pre>\n<h2>Usage</h2>\n<h3>repka.api.BaseRepository</h3>\n<p>BaseRepository used to execute sql-queries (via <a href=\"https://github.com/aio-libs/aiopg\" rel=\"nofollow\">aiopg &amp; sqlalchemy</a>) and convert sql-rows to/from <a href=\"https://github.com/samuelcolvin/pydantic\" rel=\"nofollow\">pydantic</a> models</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">repka.api</span> <span class=\"kn\">import</span> <span class=\"n\">AiopgRepository</span><span class=\"p\">,</span> <span class=\"n\">IdModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">repka.utils</span> <span class=\"kn\">import</span> <span class=\"n\">create_async_db_connection</span>\n\n<span class=\"c1\"># Define pydantic model</span>\n<span class=\"c1\"># It should inherit repka.api.IdModel </span>\n<span class=\"c1\">#   to set id on entity insert, to update entity with id and more</span>\n<span class=\"c1\"># IdModel inherits pydantic.BaseModel and defines int id field</span>\n<span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">IdModel</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"c1\"># Define sqlachemy table with same model columns</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">()</span>\n<span class=\"n\">tasks_table</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"tasks\"</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span>\n    <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">autoincrement</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Define repository</span>\n<span class=\"c1\"># You should inherit repka.api.BaseRepository and </span>\n<span class=\"c1\">#   set sqlalchemy-table via table property </span>\n<span class=\"c1\"># Kwargs is sql-row data returned by sqlalchemy  </span>\n<span class=\"k\">class</span> <span class=\"nc\">TaskRepo</span><span class=\"p\">(</span><span class=\"n\">AiopgRepository</span><span class=\"p\">[</span><span class=\"n\">Task</span><span class=\"p\">]):</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">tasks_table</span>\n\n<span class=\"c1\"># To use the repository you should instantiate it with async sqlalchemy-connection</span>\n<span class=\"n\">db_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"postgresql://postgres@localhost/test\"</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">create_async_db_connection</span><span class=\"p\">(</span><span class=\"n\">db_url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">TaskRepo</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Now you can use the repo</span>\n    <span class=\"c1\"># Here we select first task with matching title</span>\n    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"n\">tasks_table</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">==</span> <span class=\"s2\">\"My first task\"</span><span class=\"p\">)</span>\n</pre>\n<h4>BaseRepository methods</h4>\n<blockquote>\n<p><code>T</code> means generic type passed to BaseRepository (e.g. <code>BaseRepository[Task]</code> means that type of <code>T</code> is <code>Task</code>)</p>\n</blockquote>\n<h5>Select methods</h5>\n<ul>\n<li>\n<p><code>repo.first(*filters: BinaryExpression, orders: Optional[Columns])</code> - get first entity matching sqlalchemy {filters} and {orders}; if no entity matches {filters} then <code>None</code> is returned</p>\n<blockquote>\n<p>Example of {filters}: <code>table.c.title == 'test task'</code> - equals to sql where clause: <code>where title = 'test task'</code></p>\n</blockquote>\n<blockquote>\n<p>Example of {orders}: <code>table.c.title</code> - equals to sql order by clause: <code>order by title</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>repo.get_by_ids(entity_ids: List[int])</code> - get all entities whose id in {entity_ids} (same as sql <code>where id in ({entity_ids})</code>)</p>\n</li>\n<li>\n<p><code>repo.get_by_id(entity_id: int)</code> - get entity with id = {entity_id}</p>\n</li>\n<li>\n<p><code>repo.get_or_create(filters: Optional[List[BinaryExpression]], defaults: Optional[Dict])</code> - get entity that matches {filters} if no entity found create new entity with {defaults}; return tuple of entity and entity existence flag</p>\n</li>\n<li>\n<p><code>repo.get_all(filters: Optional[List[BinaryExpression]], orders: Optional[Columns])</code> - return all entities matching {filters} and {orders}</p>\n</li>\n<li>\n<p><code>repo.get_all_ids(filters: Optional[List[BinaryExpression]], orders: Optional[Columns])</code> - return ids of entites matching {filters} and {orders}</p>\n</li>\n<li>\n<p><code>repo.exists(*filters: BinaryExpression)</code> - check that entity matching {filters} exists using sql <code>count</code> statement</p>\n</li>\n</ul>\n<h5>Insert methods</h5>\n<ul>\n<li><code>repo.insert(entity: T)</code> - insert entity to db table and set id field to the entity</li>\n<li><code>repo.insert_many(entities: List[T])</code> - insert multiple entities and set ids to them in single transaction</li>\n</ul>\n<h5>Update methods</h5>\n<ul>\n<li><code>repo.update(entity: T)</code> - updates entity in db</li>\n<li><code>repo.update_partial(entity: T, **updated_values)</code> - update entity fields via kwargs and update entity fields in db</li>\n<li><code>repo.update_many(entities: List[T])</code> - update multiple entities in single transaction</li>\n</ul>\n<h5>Delete methods</h5>\n<ul>\n<li>\n<p><code>repo.delete(*filters: BinaryExpression)</code> - delete entities matching {filters} via sql <code>delete</code> statement</p>\n<blockquote>\n<p>To delete all entities pass <code>None</code> as an arg: <code>repo.delete(None)</code></p>\n</blockquote>\n</li>\n<li>\n<p><code>repo.delete_by_id(entity_id: int)</code> - delete entity with {entity_id}</p>\n</li>\n<li>\n<p><code>repo.delete_by_ids(entity_ids: List[int])</code> - delete entities whose id in {entity_ids}</p>\n</li>\n</ul>\n<h5>Other methods &amp; properties</h5>\n<ul>\n<li>\n<p><code>repo.serialize(entity: T)</code> - convert {entity} to dict (e.g. in <code>insert</code> and <code>update</code> methods)</p>\n</li>\n<li>\n<p><code>repo.deserialize(**kwargs)</code> - convert {kwargs} to entity (e.g. in <code>first</code> and <code>get_all</code> methods)</p>\n</li>\n<li>\n<p><code>repo.execute_in_transaction()</code> - context manager that allows execute multiple queries in transaction</p>\n<p>Example: delete all old entities and insert new one in single transaction:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">execute_in_transaction</span><span class=\"p\">():</span>\n  <span class=\"k\">await</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n  <span class=\"k\">await</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"New task\"</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p><code>repo.ignore_insert</code> - list of entity fields that will be ignored on insert and set after insert, useful for auto incrementing / default fields like dates or sequence numbers</p>\n</li>\n</ul>\n<h4>ContextVar support</h4>\n<p>You can create lazy-connection repositories with context vars</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">contextvars</span> <span class=\"kn\">import</span> <span class=\"n\">ContextVar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">repka.utils</span> <span class=\"kn\">import</span> <span class=\"n\">create_async_db_connection</span>\n\n<span class=\"c1\"># Create context var and instantiate repository</span>\n<span class=\"n\">db_connection</span> <span class=\"o\">=</span> <span class=\"n\">ContextVar</span><span class=\"p\">(</span><span class=\"s2\">\"db_connection\"</span><span class=\"p\">)</span>\n<span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">TaskRepo</span><span class=\"p\">(</span><span class=\"n\">db_connection</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now you should set the context var somewhere (e.g. in middleware)</span>\n<span class=\"c1\">#   And start using the repository</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">create_async_db_connection</span><span class=\"p\">(</span><span class=\"n\">db_url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">db_connection</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"New task\"</span><span class=\"p\">))</span>\n</pre>\n<h3>repka.json_.DictJsonRepo</h3>\n<p>This kind of repository used to save/load json objects from file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">repka.json_</span> <span class=\"kn\">import</span> <span class=\"n\">DictJsonRepo</span>\n\n<span class=\"n\">songs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"artist\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pig Destroyer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Thumbsucker\"</span><span class=\"p\">},</span> \n    <span class=\"p\">{</span><span class=\"s2\">\"artist\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Da Menace\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bag of Funk\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">DictJsonRepo</span><span class=\"p\">()</span>\n\n<span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">songs</span><span class=\"p\">,</span> <span class=\"s2\">\"songs.json\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"songs.json\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">songs</span>\n</pre>\n<h4>DictJsonRepo methods</h4>\n<ul>\n<li>\n<p><code>repo.read(filename: str)</code> - read json file with {filename}, return its content as json primitive (list, dict, str, etc.)</p>\n</li>\n<li>\n<p><code>repo.write(data: T, filename: str)</code> - serialize json primitive {data} and save it to file with {filename}</p>\n</li>\n<li>\n<p><code>repo.read_or_write_default(filename: str, default_factory: Callable[[], T])</code> - check file with {filename} exists, read its content if exists, execute {default_factory} and write it to file with {filename} otherwise</p>\n<ul>\n<li>\n<p>Example: read data from <code>test.json</code> or create <code>test.json</code> with <code>[{\"field\": \"value\"}]</code> if no such file:</p>\n<pre><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">DictJsonRepo</span><span class=\"p\">()</span>\n<span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">read_or_write_default</span><span class=\"p\">(</span><span class=\"s2\">\"test.json\"</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">}])</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4>DictJsonRepo constructor</h4>\n<ul>\n<li>\n<p><code>DictJsonRepo(directory: str)</code> - set directory where files will be read / written; if not set current working directory will be used</p>\n<ul>\n<li>\n<p>Example: read files from <code>data/</code> dir:</p>\n<pre><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">DictJsonRepo</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span>\n<span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"test.json\"</span><span class=\"p\">)</span> <span class=\"c1\"># will read \"./data/test.json\"</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Development and contribution</h2>\n<h3>Dependencies</h3>\n<p>Install production and development dependencies via poetry:</p>\n<pre><code>poetry install\n</code></pre>\n<h3>Tests</h3>\n<p>To run tests:</p>\n<ol>\n<li>Setup <a href=\"https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls\" rel=\"nofollow\">database url</a> via <code>DB_URL</code> environment variable (e.g. via .env file)</li>\n</ol>\n<p><strong>WARNING:</strong> Every test run will drop all tables from the db</p>\n<ol>\n<li>Run tests via <code>pytest</code></li>\n</ol>\n<h3>Contribution</h3>\n<ol>\n<li>\n<p>Create fork/branch for new feature/fix/whatever</p>\n</li>\n<li>\n<p>[Optional] Install pre-commit hooks: <code>pre-commit install</code> (for manual pre-commit run use<code>pre-commit run -a</code>)</p>\n</li>\n<li>\n<p>When you done create pull request and wait for approval</p>\n</li>\n</ol>\n<h3>Deploy</h3>\n<p>To deploy new version you need to increment version via bump2version and publish it to PyPI via poetry:</p>\n<pre><code>bump2version major/minor/patch\npoetry publish --build\n</code></pre>\n<p>Don't forget to fill the CHANGELOG.md before release</p>\n\n          </div>"}, "last_serial": 6728683, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "187d490c257a9275e1bd1185313be819", "sha256": "17a40b92a636908b596b05d0ba0c108b4a0341703bec69afe72d118b82e6e7eb"}, "downloads": -1, "filename": "repka-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "187d490c257a9275e1bd1185313be819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5325, "upload_time": "2019-07-02T13:17:07", "upload_time_iso_8601": "2019-07-02T13:17:07.840367Z", "url": "https://files.pythonhosted.org/packages/e5/05/a543cd8714e43279509876481d45fd8a23333b0b56b98fece3b640d65da5/repka-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d52e070a14f525a4a280d6da31a06842", "sha256": "eb4ebe07aca7cfe1eb50541de13825823594c7dc8139fd0f8df6decd226d4453"}, "downloads": -1, "filename": "repka-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d52e070a14f525a4a280d6da31a06842", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 2706, "upload_time": "2019-07-02T13:17:09", "upload_time_iso_8601": "2019-07-02T13:17:09.983633Z", "url": "https://files.pythonhosted.org/packages/fb/82/de3d98047c8c2632ee0eb74c4c3b349ad1067f8c05f0bdcc7e17cc623526/repka-0.1.0.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "3b76b55efce99c02bb4884f23552fb2e", "sha256": "e99975af34a16d98abfe15da960017f14bbc6493da7b58e62322ab871a61bbf9"}, "downloads": -1, "filename": "repka-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b76b55efce99c02bb4884f23552fb2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 15776, "upload_time": "2020-01-08T16:37:08", "upload_time_iso_8601": "2020-01-08T16:37:08.266788Z", "url": "https://files.pythonhosted.org/packages/19/ef/a4d37d62bb48442cb0fdf6cc1e66c7d50df42c601c2739a6133cf7c9c5d9/repka-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2941d446e2c37236479b3f43fc5559ee", "sha256": "624291cb9186611eccb52057de090225c6eaccf859de790ef40055839e55c089"}, "downloads": -1, "filename": "repka-0.10.0.tar.gz", "has_sig": false, "md5_digest": "2941d446e2c37236479b3f43fc5559ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 7671, "upload_time": "2020-01-08T16:37:09", "upload_time_iso_8601": "2020-01-08T16:37:09.579895Z", "url": "https://files.pythonhosted.org/packages/d3/a0/8f744c96f2eb501db81d1bc8380e807824d8a299ce8acfdc506c51687f1c/repka-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "948f61a0849e95efd39e9c71a5100285", "sha256": "af61eb0c845767482c94b8e061e449cf3e41bff3d053cc83467d743039f84c0b"}, "downloads": -1, "filename": "repka-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "948f61a0849e95efd39e9c71a5100285", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 7847, "upload_time": "2020-02-11T20:02:43", "upload_time_iso_8601": "2020-02-11T20:02:43.620631Z", "url": "https://files.pythonhosted.org/packages/c2/95/01c58c5aeec33b81e85a50a6493999d4356a4d517d3ef30eb72c41796ee3/repka-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afc36fd69988c4e64b64b6f108edcc2c", "sha256": "fea1b73257e5a1456878c2d86adcc27deffddcaee7ed59fc365df93f78183f4b"}, "downloads": -1, "filename": "repka-0.10.1.tar.gz", "has_sig": false, "md5_digest": "afc36fd69988c4e64b64b6f108edcc2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8463, "upload_time": "2020-02-11T20:02:45", "upload_time_iso_8601": "2020-02-11T20:02:45.132407Z", "url": "https://files.pythonhosted.org/packages/af/0d/1f08d0a17b2536ab8c442e3a032063c59abfa2dfb2c437162f1d32314751/repka-0.10.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "102d91f2318033a49326e45c8eac63f1", "sha256": "0791341d51420f3a76ebb08d1e3d246a1d4b66d6e8bdf1501926eb2c4a10b6e6"}, "downloads": -1, "filename": "repka-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "102d91f2318033a49326e45c8eac63f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6386, "upload_time": "2019-07-18T15:17:03", "upload_time_iso_8601": "2019-07-18T15:17:03.365399Z", "url": "https://files.pythonhosted.org/packages/66/aa/eac9b93d776b1c42f149b060699d7691245b68dc28e03d9147645d335501/repka-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc7488e94f1b184e8badc26d1dae470a", "sha256": "91b8df05be19a5fdd2aca3b1ee555dd6694b339155ec1d05db4dc6239e4bd9ed"}, "downloads": -1, "filename": "repka-0.2.0.tar.gz", "has_sig": false, "md5_digest": "dc7488e94f1b184e8badc26d1dae470a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3441, "upload_time": "2019-07-18T15:17:05", "upload_time_iso_8601": "2019-07-18T15:17:05.170972Z", "url": "https://files.pythonhosted.org/packages/62/36/3cfee08db0d7b72e57eb97bfa7d1b5ed96ffea5ede549b8e41a827d067e7/repka-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c2dc2a67a53aa5a84b42b742352b3377", "sha256": "005d74fbf5ec849fbd5624be670431d1e9bdad50716d3ed0862decfd5ad74cf9"}, "downloads": -1, "filename": "repka-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c2dc2a67a53aa5a84b42b742352b3377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 6931, "upload_time": "2019-07-27T18:07:43", "upload_time_iso_8601": "2019-07-27T18:07:43.915658Z", "url": "https://files.pythonhosted.org/packages/86/19/4626ff2f290f01b613f8b395ad0fab4f5378ca7e8dc4895c12c8417e2224/repka-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b409e8df8991f121ccda2c4300dad508", "sha256": "dd5d9412da01c5fe1d66b9c8237cfd01cb0104545abd0480f2045a702c8baf8b"}, "downloads": -1, "filename": "repka-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b409e8df8991f121ccda2c4300dad508", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3526, "upload_time": "2019-07-27T18:07:45", "upload_time_iso_8601": "2019-07-27T18:07:45.492934Z", "url": "https://files.pythonhosted.org/packages/80/b9/55391585dfab5a99264c71e3c994d0067a3381f84e41a7bb0e3e5fa75693/repka-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a5d468d5d7a7ba5c962963e9441141e5", "sha256": "ec05840512b16e9a3ebb5e73a692434e21e86b1357d1d6a616d3b2111e4ce8b2"}, "downloads": -1, "filename": "repka-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a5d468d5d7a7ba5c962963e9441141e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8102, "upload_time": "2019-08-08T13:56:51", "upload_time_iso_8601": "2019-08-08T13:56:51.169593Z", "url": "https://files.pythonhosted.org/packages/4e/f0/5d8f2d2e3d7711df17ac16a0bcf575e065228af01cc49893b5cc9eea18b8/repka-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adb94cdc6c2e8810fa9f8ba473b25ab3", "sha256": "d2b4277a0934c2315d90354641ed6737ea90b548c39e81bf94b3a0a538edb327"}, "downloads": -1, "filename": "repka-0.4.0.tar.gz", "has_sig": false, "md5_digest": "adb94cdc6c2e8810fa9f8ba473b25ab3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3843, "upload_time": "2019-08-08T13:56:53", "upload_time_iso_8601": "2019-08-08T13:56:53.077660Z", "url": "https://files.pythonhosted.org/packages/a2/04/5a87b7bb5f78913b68b12cf805f60a3d6c69be27701ecba5e6636e1f400c/repka-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "32e8c4976aaf683af7a6463c9a4dfa80", "sha256": "8fa9f72d9d68456e9d681cdd867698244967dac15d9b0d82af1a0127089cb7f0"}, "downloads": -1, "filename": "repka-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "32e8c4976aaf683af7a6463c9a4dfa80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8702, "upload_time": "2019-08-26T13:25:45", "upload_time_iso_8601": "2019-08-26T13:25:45.901233Z", "url": "https://files.pythonhosted.org/packages/05/a0/f27632c7c7651ad59be7019bc52e36cef3cbf5276f1f0b0d36afd99c205d/repka-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8ebd359fd79849bcaa996e64d4f6c65", "sha256": "cca67d81f3094b23c0f3a39bd28f588a5cb7f516df1a8464015fc9508807ae5a"}, "downloads": -1, "filename": "repka-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b8ebd359fd79849bcaa996e64d4f6c65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3959, "upload_time": "2019-08-26T13:25:47", "upload_time_iso_8601": "2019-08-26T13:25:47.484912Z", "url": "https://files.pythonhosted.org/packages/a5/bc/5aeaee606b70a0d224087a5f8c03f30cd580c396c22f35fefb4d0ed848a3/repka-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2d2747a663a7b18b4b8b608bd42bfac6", "sha256": "4a659d6ac518f4014432c7253320dbb4c727b6ed1913bbfc0588626ed413171e"}, "downloads": -1, "filename": "repka-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d2747a663a7b18b4b8b608bd42bfac6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8907, "upload_time": "2019-10-04T17:31:40", "upload_time_iso_8601": "2019-10-04T17:31:40.376045Z", "url": "https://files.pythonhosted.org/packages/0b/c5/2b2c6d710a8a0aa1c716cc4b7d7b39936b25a86d0d6e6cedce3619b1625b/repka-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94d8befc7d7ef957a8ff5f1957307478", "sha256": "7953d8ffe718b429c356cae2316182c2b9961ec5f56a2ac966d7fa0abe3455e8"}, "downloads": -1, "filename": "repka-0.6.0.tar.gz", "has_sig": false, "md5_digest": "94d8befc7d7ef957a8ff5f1957307478", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3964, "upload_time": "2019-10-04T17:31:42", "upload_time_iso_8601": "2019-10-04T17:31:42.122663Z", "url": "https://files.pythonhosted.org/packages/66/da/07fb2597e532bdbfcf09f379c91e871b7fae0c1cfe3d434a8943edd43058/repka-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "0221851d42dd309b98b57027d7fdac04", "sha256": "11a13353c0cff44440d674fe336787a8a18ec9d3d9417a96b7ebebbcdad8a450"}, "downloads": -1, "filename": "repka-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0221851d42dd309b98b57027d7fdac04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10015, "upload_time": "2019-10-14T13:27:54", "upload_time_iso_8601": "2019-10-14T13:27:54.326166Z", "url": "https://files.pythonhosted.org/packages/98/38/e0fb6cba427161ed52dd28c4ef4da672b558c53fff06b5d1e775d5a9c3c3/repka-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e0f51693cb0ed4aebb09c4deea528a7", "sha256": "977f8797ac374eddfef36572e144e742d6e4a48882eca6c9a648e7f5cc78b139"}, "downloads": -1, "filename": "repka-0.7.0.tar.gz", "has_sig": false, "md5_digest": "6e0f51693cb0ed4aebb09c4deea528a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4261, "upload_time": "2019-10-14T13:27:55", "upload_time_iso_8601": "2019-10-14T13:27:55.658705Z", "url": "https://files.pythonhosted.org/packages/46/40/bba13a04e522d67daf8c698b1d191a167721ea8e4032ade69aa5c1af4f43/repka-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "05ce3c5f8681ea5df5bcf3fd15e65bf0", "sha256": "57f79b6f058fc1f04ad94bfb89def8f0cd68949c51c0c3ef0da60ee8fe9d50c8"}, "downloads": -1, "filename": "repka-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "05ce3c5f8681ea5df5bcf3fd15e65bf0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10201, "upload_time": "2019-11-12T09:45:23", "upload_time_iso_8601": "2019-11-12T09:45:23.118518Z", "url": "https://files.pythonhosted.org/packages/bc/2d/47d47ea337fef6a930cfcb1a5f15ff9d90aa78f2fbd3985f77db5472f578/repka-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63a0d38a14acd34d0bf159dee7ff67bc", "sha256": "1b156336af19220bfde8b5930e29614bed8fc641540e2c0f4c343e9d02ccf8ef"}, "downloads": -1, "filename": "repka-0.7.1.tar.gz", "has_sig": false, "md5_digest": "63a0d38a14acd34d0bf159dee7ff67bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4558, "upload_time": "2019-11-12T09:45:25", "upload_time_iso_8601": "2019-11-12T09:45:25.166850Z", "url": "https://files.pythonhosted.org/packages/c4/68/dfb84a262af18e8e766e6c0f7c1c7802a66d4c63eb67123437b3a7c2e825/repka-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "0153a0f3153273aa1730ff7dcf6e8b97", "sha256": "907876207b5de80fe154c1d697d378d5f46285b02c96c6d025dbcbfb88e1e528"}, "downloads": -1, "filename": "repka-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0153a0f3153273aa1730ff7dcf6e8b97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10205, "upload_time": "2019-11-20T13:59:33", "upload_time_iso_8601": "2019-11-20T13:59:33.018267Z", "url": "https://files.pythonhosted.org/packages/1c/60/2be42ba015943151c64f142a3c6ef6c81ee676697c9317f22454479de1b2/repka-0.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdd5bfa085640499ee5b37486070a8b8", "sha256": "9bdfad57f8d434f3da69285c15fbb37d7466f033d8c17a8c1f3bea8fae5eefdd"}, "downloads": -1, "filename": "repka-0.7.2.tar.gz", "has_sig": false, "md5_digest": "bdd5bfa085640499ee5b37486070a8b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4567, "upload_time": "2019-11-20T13:59:34", "upload_time_iso_8601": "2019-11-20T13:59:34.624806Z", "url": "https://files.pythonhosted.org/packages/fe/59/938c83c5475a01ec4dbd730be60ac3fe9d9aa79718492fc9686e6cfabf82/repka-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "9bc22ce6c83988b0ea33aba080cd3957", "sha256": "8939f54e41f07ff941f9cb5507d18a8d341a9dc9d333fa8d5c308cf77ded79fb"}, "downloads": -1, "filename": "repka-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bc22ce6c83988b0ea33aba080cd3957", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11204, "upload_time": "2019-12-22T20:34:17", "upload_time_iso_8601": "2019-12-22T20:34:17.898938Z", "url": "https://files.pythonhosted.org/packages/16/e7/03d90779f67197c79442cdc63b846bafbfe023d9dcd2100add6c342ff987/repka-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2dbe06d6e8510287f764ea9904872ea", "sha256": "fe3fb074cb9f50252c059fd05b4d9e033604398e92ce635c7bec0ac7dbb0cf90"}, "downloads": -1, "filename": "repka-0.8.0.tar.gz", "has_sig": false, "md5_digest": "e2dbe06d6e8510287f764ea9904872ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 4866, "upload_time": "2019-12-22T20:34:19", "upload_time_iso_8601": "2019-12-22T20:34:19.548185Z", "url": "https://files.pythonhosted.org/packages/0c/f5/f911840a636b8c3d7e84b0076a011bd4ade3e05a763fc617059d5bb4ac21/repka-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "8f29da7c8a081c7b96ef8a7466f89cdb", "sha256": "2c7696232352c7135c7a229fc47d679fbf893c7b33430c71de6780ea7ca78532"}, "downloads": -1, "filename": "repka-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8f29da7c8a081c7b96ef8a7466f89cdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12848, "upload_time": "2020-01-04T14:36:59", "upload_time_iso_8601": "2020-01-04T14:36:59.160369Z", "url": "https://files.pythonhosted.org/packages/e4/80/b8b9955d870b63b8daa20bb7e43cbad3aa7f737a5a1c5907527290ed3052/repka-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2563a314f9b593a7720254a7728ae71e", "sha256": "ce63a16e91da81154dabda5d4b5ef0e08ca61fe48a95d4d69a47249b097136ed"}, "downloads": -1, "filename": "repka-0.9.0.tar.gz", "has_sig": false, "md5_digest": "2563a314f9b593a7720254a7728ae71e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5209, "upload_time": "2020-01-04T14:37:00", "upload_time_iso_8601": "2020-01-04T14:37:00.891168Z", "url": "https://files.pythonhosted.org/packages/f9/68/4c9626b10830df3be6fb0a68dfe5f6e0978e8970c4a67d1c32a5bbad7e71/repka-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4ffb15de168838dbbeab53caee615700", "sha256": "2c17206002f8b1966ad68e0061f9e35886f6b2f5ba52f404f970aeacee341876"}, "downloads": -1, "filename": "repka-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ffb15de168838dbbeab53caee615700", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11630, "upload_time": "2020-03-01T15:00:26", "upload_time_iso_8601": "2020-03-01T15:00:26.108959Z", "url": "https://files.pythonhosted.org/packages/21/ca/4c48ba302e97bfc0006c7653ff865a2a9b23a6c20ceabd05fd8ea2bcc573/repka-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae84b87aeb0dfc8f5667415b20994d28", "sha256": "e5cbdd6f6b0caa385f694f1dd3876c6a417e83dd3741876b185a0c5d4f7dafd4"}, "downloads": -1, "filename": "repka-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae84b87aeb0dfc8f5667415b20994d28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11957, "upload_time": "2020-03-01T15:00:27", "upload_time_iso_8601": "2020-03-01T15:00:27.345931Z", "url": "https://files.pythonhosted.org/packages/fe/5d/e3c1b464542f8670737e78df3ea9d0007c2a96a91d33962050123af94be3/repka-1.0.0.tar.gz", "yanked": false}], "1.0.0a0": [{"comment_text": "", "digests": {"md5": "34bfeec6de128b3c8c81b7c4250d86ae", "sha256": "904c3aa3a6ad749482e9aab12e6cac8d6823468aec3a6da7d152e146cb223164"}, "downloads": -1, "filename": "repka-1.0.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "34bfeec6de128b3c8c81b7c4250d86ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 10184, "upload_time": "2020-01-26T18:23:03", "upload_time_iso_8601": "2020-01-26T18:23:03.480733Z", "url": "https://files.pythonhosted.org/packages/46/cb/241c40f822de2000742d6050d2745dd1eabe86a80f4fc2bdeb06cdb22de7/repka-1.0.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ed49a9734fdda73af102af13d20a23a", "sha256": "606ce7466e17af8ff95ba4b8804d23cc2db56e511eca3408c9e25bd23e0d2588"}, "downloads": -1, "filename": "repka-1.0.0a0.tar.gz", "has_sig": false, "md5_digest": "2ed49a9734fdda73af102af13d20a23a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11753, "upload_time": "2020-01-26T18:23:04", "upload_time_iso_8601": "2020-01-26T18:23:04.815345Z", "url": "https://files.pythonhosted.org/packages/a8/04/b3a943878d7d5d66a39e4c58b6e4c0d2b322422b60cd827030a758f00f3e/repka-1.0.0a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ffb15de168838dbbeab53caee615700", "sha256": "2c17206002f8b1966ad68e0061f9e35886f6b2f5ba52f404f970aeacee341876"}, "downloads": -1, "filename": "repka-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4ffb15de168838dbbeab53caee615700", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 11630, "upload_time": "2020-03-01T15:00:26", "upload_time_iso_8601": "2020-03-01T15:00:26.108959Z", "url": "https://files.pythonhosted.org/packages/21/ca/4c48ba302e97bfc0006c7653ff865a2a9b23a6c20ceabd05fd8ea2bcc573/repka-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae84b87aeb0dfc8f5667415b20994d28", "sha256": "e5cbdd6f6b0caa385f694f1dd3876c6a417e83dd3741876b185a0c5d4f7dafd4"}, "downloads": -1, "filename": "repka-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae84b87aeb0dfc8f5667415b20994d28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 11957, "upload_time": "2020-03-01T15:00:27", "upload_time_iso_8601": "2020-03-01T15:00:27.345931Z", "url": "https://files.pythonhosted.org/packages/fe/5d/e3c1b464542f8670737e78df3ea9d0007c2a96a91d33962050123af94be3/repka-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:40 2020"}