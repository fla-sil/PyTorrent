{"info": {"author": "Craig Gidney", "author_email": "craig.gidney@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Python CHP Stabilizer Simulator\n-------------------------------\n\nA simple reference python implementation of Scott Aaronson and Daniel Gottesman's CHP simulator\nas defined in\n`their 2004 paper \"Improved Simulation of Stabilizer Circuits\" <https://arxiv.org/abs/quant-ph/0406196>`__.\nThis simulator is capable of simulating quantum stabilizer circuits in polynomial time and space.\nSpecifically, it uses ``O(q^2*m + q*c)`` time and ``O(q^2)`` space where\n``q`` is the number of qubits,\n``m`` is the number of measurements,\nand ``c`` is the number of Hadamard/CNOT/Phase gates.\n\nInstallation\n------------\n\nThe ``chp_sim`` package is available on pypi and can be installed using ``pip``:\n\n.. code-block:: bash\n\n    python -m pip install chp_sim\n\nAlternatively, you can just copy paste the ``chp_sim`` directory of the github\nrepository into your project.\nThe only runtime dependency is ``numpy``.\n\nUsage\n-----\n\nHere is an example of simulating\n`a circuit <https://algassert.com/quirk#circuit=%7B%22cols%22%3A%5B%5B1%2C1%2C%22H%22%5D%2C%5B%22X%22%2C1%2C%22%E2%80%A2%22%5D%2C%5B1%2C%22X%22%2C%22%E2%80%A2%22%5D%2C%5B%22Z%5E%C2%BD%22%2C%22Z%5E%C2%BD%22%5D%2C%5B%22H%22%2C%22H%22%2C%22H%22%5D%2C%5B%22Measure%22%2C%22Measure%22%2C%22Measure%22%5D%2C%5B%22Chance3%22%5D%5D%7D>`__:\n\n.. code-block:: python\n\n    import chp_sim\n    sim = chp_sim.ChpSimulator(num_qubits=3)\n\n    # Desired circuit:\n    # 0: -------X-------S---H---M---\n    #           |\n    # 1: -------|---X---S---H---M---\n    #           |   |\n    # 2: ---H---@---@-------H---M---\n\n    sim.hadamard(2)\n    sim.cnot(2, 0)\n    sim.cnot(2, 1)\n    sim.phase(0)\n    sim.phase(1)\n    sim.hadamard(0)\n    sim.hadamard(1)\n    sim.hadamard(2)\n\n    # Show internal simulator state.\n    print(sim, '\\n')\n    # prints:\n    #   -Y..\n    #   -.Y.\n    #   +..X\n    #   ----\n    #   +X.X\n    #   +.XX\n    #   +YYZ\n\n    # Perform measurements\n    v0 = sim.measure(0)\n    v1 = sim.measure(1)\n    v2 = sim.measure(2)\n    print(v0)\n    print(v1)\n    print(v2)\n    # prints [note: one of four possible results for this circuit]:\n    #   True (random)\n    #   False (random)\n    #   False (determined)\n\n    # Check pattern the outputs should satisfy.\n    assert not v0.determined\n    assert not v1.determined\n    assert v2.determined\n    assert bool(v0) ^ bool(v1) ^ bool(v2)\n\n\nPackaging\n---------\n\n(Notes to self on how to release a new version.)\n\n1. Edit the source code as needed and run tests.\n\n    .. code-block:: bash\n\n        pytest\n\n2. Build the wheel.\n\n    .. code-block:: bash\n\n        python3 setup.py -q bdist_wheel\n        ls dist\n\n3. Upload to test pypi.\n\n    .. code-block:: bash\n\n        twine upload dist/*.whl --repository-url=https://test.pypi.org/legacy/ --username=\"${TEST_TWINE_USERNAME}\" --password=\"${TEST_TWINE_PASSWORD}\"\n\n4. Verify the test package works.\n\n    .. code-block:: bash\n\n        mkvirtualenv test --python=/usr/bin/python3\n        pip install numpy\n        pip install chp_sim --index-url=https://test.pypi.org/simple/\n        python -c \"import chp_sim; print(chp_sim.__version__); print(chp_sim.ChpSimulator(4))\"\n\n5. Upload to prod pypi.\n\n    .. code-block:: bash\n\n        twine upload dist/*.whl --username=\"${PROD_TWINE_USERNAME}\" --password=\"${PROD_TWINE_PASSWORD}\"\n\n6. Verify the prod package works.\n\n    .. code-block:: bash\n\n        mkvirtualenv test --python=/usr/bin/python3\n        pip install chp_sim\n        python -c \"import chp_sim; print(chp_sim.__version__); print(chp_sim.ChpSimulator(4))\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Strilanc/python-chp-stabilizer-simulator", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "chp-sim", "package_url": "https://pypi.org/project/chp-sim/", "platform": "", "project_url": "https://pypi.org/project/chp-sim/", "project_urls": {"Homepage": "https://github.com/Strilanc/python-chp-stabilizer-simulator"}, "release_url": "https://pypi.org/project/chp-sim/0.1.1/", "requires_dist": ["numpy"], "requires_python": ">=3.6.0", "summary": "A reference implementation of Aaronson et al's CHP simulator for efficiently simulating quantum stabilizer circuits.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-chp-stabilizer-simulator\">\n<h2>Python CHP Stabilizer Simulator</h2>\n<p>A simple reference python implementation of Scott Aaronson and Daniel Gottesman\u2019s CHP simulator\nas defined in\n<a href=\"https://arxiv.org/abs/quant-ph/0406196\" rel=\"nofollow\">their 2004 paper \u201cImproved Simulation of Stabilizer Circuits\u201d</a>.\nThis simulator is capable of simulating quantum stabilizer circuits in polynomial time and space.\nSpecifically, it uses <tt>O(q^2*m + q*c)</tt> time and <tt>O(q^2)</tt> space where\n<tt>q</tt> is the number of qubits,\n<tt>m</tt> is the number of measurements,\nand <tt>c</tt> is the number of Hadamard/CNOT/Phase gates.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The <tt>chp_sim</tt> package is available on pypi and can be installed using <tt>pip</tt>:</p>\n<pre>python -m pip install chp_sim\n</pre>\n<p>Alternatively, you can just copy paste the <tt>chp_sim</tt> directory of the github\nrepository into your project.\nThe only runtime dependency is <tt>numpy</tt>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Here is an example of simulating\n<a href=\"https://algassert.com/quirk#circuit=%7B%22cols%22%3A%5B%5B1%2C1%2C%22H%22%5D%2C%5B%22X%22%2C1%2C%22%E2%80%A2%22%5D%2C%5B1%2C%22X%22%2C%22%E2%80%A2%22%5D%2C%5B%22Z%5E%C2%BD%22%2C%22Z%5E%C2%BD%22%5D%2C%5B%22H%22%2C%22H%22%2C%22H%22%5D%2C%5B%22Measure%22%2C%22Measure%22%2C%22Measure%22%5D%2C%5B%22Chance3%22%5D%5D%7D\" rel=\"nofollow\">a circuit</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">chp_sim</span>\n<span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">chp_sim</span><span class=\"o\">.</span><span class=\"n\">ChpSimulator</span><span class=\"p\">(</span><span class=\"n\">num_qubits</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Desired circuit:</span>\n<span class=\"c1\"># 0: -------X-------S---H---M---</span>\n<span class=\"c1\">#           |</span>\n<span class=\"c1\"># 1: -------|---X---S---H---M---</span>\n<span class=\"c1\">#           |   |</span>\n<span class=\"c1\"># 2: ---H---@---@-------H---M---</span>\n\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">hadamard</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">cnot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">cnot</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">phase</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">hadamard</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">hadamard</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">hadamard</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show internal simulator state.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints:</span>\n<span class=\"c1\">#   -Y..</span>\n<span class=\"c1\">#   -.Y.</span>\n<span class=\"c1\">#   +..X</span>\n<span class=\"c1\">#   ----</span>\n<span class=\"c1\">#   +X.X</span>\n<span class=\"c1\">#   +.XX</span>\n<span class=\"c1\">#   +YYZ</span>\n\n<span class=\"c1\"># Perform measurements</span>\n<span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints [note: one of four possible results for this circuit]:</span>\n<span class=\"c1\">#   True (random)</span>\n<span class=\"c1\">#   False (random)</span>\n<span class=\"c1\">#   False (determined)</span>\n\n<span class=\"c1\"># Check pattern the outputs should satisfy.</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"n\">determined</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">determined</span>\n<span class=\"k\">assert</span> <span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">determined</span>\n<span class=\"k\">assert</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"packaging\">\n<h2>Packaging</h2>\n<p>(Notes to self on how to release a new version.)</p>\n<ol>\n<li><p>Edit the source code as needed and run tests.</p>\n<blockquote>\n<pre>pytest\n</pre>\n</blockquote>\n</li>\n<li><p>Build the wheel.</p>\n<blockquote>\n<pre>python3 setup.py -q bdist_wheel\nls dist\n</pre>\n</blockquote>\n</li>\n<li><p>Upload to test pypi.</p>\n<blockquote>\n<pre>twine upload dist/*.whl --repository-url<span class=\"o\">=</span>https://test.pypi.org/legacy/ --username<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">TEST_TWINE_USERNAME</span><span class=\"si\">}</span><span class=\"s2\">\"</span> --password<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">TEST_TWINE_PASSWORD</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Verify the test package works.</p>\n<blockquote>\n<pre>mkvirtualenv <span class=\"nb\">test</span> --python<span class=\"o\">=</span>/usr/bin/python3\npip install numpy\npip install chp_sim --index-url<span class=\"o\">=</span>https://test.pypi.org/simple/\npython -c <span class=\"s2\">\"import chp_sim; print(chp_sim.__version__); print(chp_sim.ChpSimulator(4))\"</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Upload to prod pypi.</p>\n<blockquote>\n<pre>twine upload dist/*.whl --username<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PROD_TWINE_USERNAME</span><span class=\"si\">}</span><span class=\"s2\">\"</span> --password<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PROD_TWINE_PASSWORD</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Verify the prod package works.</p>\n<blockquote>\n<pre>mkvirtualenv <span class=\"nb\">test</span> --python<span class=\"o\">=</span>/usr/bin/python3\npip install chp_sim\npython -c <span class=\"s2\">\"import chp_sim; print(chp_sim.__version__); print(chp_sim.ChpSimulator(4))\"</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 5483713, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "dfbe3574b5273bf9fbe8ff8c9a206870", "sha256": "760cbab16cbd6d96923d2a1db790158b0d9f23ceacf1ae56220492b1b5941524"}, "downloads": -1, "filename": "chp_sim-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dfbe3574b5273bf9fbe8ff8c9a206870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 11172, "upload_time": "2019-07-03T22:04:49", "upload_time_iso_8601": "2019-07-03T22:04:49.178508Z", "url": "https://files.pythonhosted.org/packages/30/7c/8cd37f6f0bf0eae8c63b4366eddf84a7df230930fd5594da538c42810557/chp_sim-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfbe3574b5273bf9fbe8ff8c9a206870", "sha256": "760cbab16cbd6d96923d2a1db790158b0d9f23ceacf1ae56220492b1b5941524"}, "downloads": -1, "filename": "chp_sim-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dfbe3574b5273bf9fbe8ff8c9a206870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 11172, "upload_time": "2019-07-03T22:04:49", "upload_time_iso_8601": "2019-07-03T22:04:49.178508Z", "url": "https://files.pythonhosted.org/packages/30/7c/8cd37f6f0bf0eae8c63b4366eddf84a7df230930fd5594da538c42810557/chp_sim-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:19:30 2020"}