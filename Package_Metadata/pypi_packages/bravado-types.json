{"info": {"author": "Nicholas Gaya", "author_email": "nickgaya@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Code Generators", "Typing :: Typed"], "description": "# bravado-types\n\nTool to generate MyPy type stubs for Bravado-generated classes to support\nstatic type checking.\n\n## Motivation\n\n[Bravado](https://github.com/Yelp/Bravado) is a Python client library for\ninteracting with APIs defined by Swagger 2.0 schemas. Bravado parses a given\nAPI schema at runtime and dynamically generates classes to represent the data\ntypes defined by the schema. This is a nice Pythonic approach, but it means\nthat static type-checking tools like MyPy have limited ability to type-check\ncode that uses Bravado since the attributes and method signatures of objects\ngenerated by Bravado are not known until runtime.\n\nBravado-types addresses this problem by pre-generating type information about\nthe generated data for a given schema at build time. Using the generated type\nstubs, MyPy can statically detect errors such as calling a nonexistent\noperation method on a resource, failing to specify a required operation\nparameter, or assigning a wrongly-typed value to a model attribute. This allows\nfor a much higher level of confidence in the correctness of code that uses\nBravado clients than would otherwise be possible.\n\nThe validity of this approach relies on the assumption that the same version of\nthe schema is used during code generation as at runtime.  Without this\nassumption it is nearly impossible to make any useful assertions about the\nruntime behavior of generated clients.\n\n## Installation\n\n    pip install bravado-types\n\nTo install the latest master version directly from GitHub:\n\n    pip install -U git+https://github.com/nickgaya/bravado-types.git\n\n## Usage\n\n### Code generation\n\nTo start using bravado-types, invoke the CLI against your Swagger schema of\nchoice:\n\n    bravado-types --url 'https://petstore.swagger.io/v2/swagger.json' \\\n        --name PetStore --path petstore.py\n\nThis command will download the PetStore example schema and generate a Python 3\nmodule, *petstore.py*, along with a MyPy stub file *petstore.pyi*, for that\nschema. The generated module and stub file can then be used in your package.\nThe generated code only depends on bravado, not on bravado-types, so you do not\nneed to include the latter as a runtime package dependency.\n\nCode generation can also be done programmatically.\n\n    from bravado import SwaggerClient\n    from bravado_types import Config, generate_module\n\n    client = SwaggerClient.from_url(\n        \"https://petstore.swagger.io/v2/swagger.json\")\n    config = Config(name='PetStore', path='petstore.py')\n    generate_module(client, config)\n\nBravado-types supports several optional parameters to customize code\ngeneration. See the `bravado_types.config.Config` docstring or the CLI help\noutput (`bravado-types --help`) for details.\n\n### Using the generated module\n\nTo create a type-aware client, import the relevant name from the generated\nmodule and use its `from_url()` or `from_spec()` method to create an instance.\n\n    from petstore import PetStoreSwaggerClient\n\n    client = PetStoreSwaggerClient.from_url(\n        \"https://petstore.swagger.io/v2/swagger.json\")\n    reveal_type(client)  # petstore.PetStoreSwaggerClient\n\nYou can use the client like a regular Bravado client to instantiate model\nobjects and make API calls with them.\n\n    Pet = client.get_model('Pet')\n    reveal_type(Pet)  # Type[petstore.PetModel]\n\n    frank = Pet(name='Frank', photoUrls=[])\n    reveal_type(frank)  # petstore.PetModel\n\n    pet123 = client.pet.getPetById(id=123).response().result\n    reveal_type(pet123)  # petstore.PetModel\n\nThe generated module also provides importable model, resource, and operation\ntypes for use in type annotations.\n\n    from petstore import PetModel\n\n    def get_name(pet: PetModel) -> str:\n        reveal_type(pet)  # petstore.PetModel\n        return pet.name\n\nGenerated model, resource, and operation types are only used for static type\nchecking and must not be used for runtime interactions.\n\n    # Placeholder for static type-checking\n    from petstore import PetModel\n\n    # Use placeholder for type annotations and casts\n    pet: PetModel = ...\n    pet2 = typing.cast(PetModel, ...)\n\n    # Runtime model class\n    Pet = client.get_model('Pet')\n\n    # Use runtime class for model instantiation and runtime type checks\n    pet = Pet(name='Boots', photoUrls=[])\n    assert isinstance(pet, Pet)\n\n## Usage notes\n\n### Operation response types\n\nOperations often have multiple different response schemas for different status\ncodes, which presents an obstacle to static type analysis.  Bravado-types\noffers three different options for response type annotations, specified by the\n`response_types` configuration parameter.\n\n* `'success'`: The response type will be declared as the union of all response\n  types with 2xx status. This is unsound, but may be useful if you are primarily\n  concerned with responses when the request was successful.\n\n* `'all'`: The response type will be declared as the union of all response\n  types defined in the schema. This is probably the most correct but is\n  cumbersome, as the developer must perform manual type checks or casts to\n  obtain a useable type.\n\n* `'any'`: The response type will be declared as `Any`. This gives maximum\n  flexibility but requires the developer to manually add type hints if they\n  want any type checking on the result of an operation.\n\nBy default, bravado-types uses the `'success'` option as it is felt to be the\nmost pragmatic option, although the least sound.\n\n### Array types\n\nBravado accepts either lists or tuples when marshaling values with\n`type: array` in the Swagger schema, and creates lists when unmarshaling. There\nare a few ways we could represent this in the type annotations:\n\n* The most precise description would be `Union[List[T], Tuple[T, ...]]` but\nthis is rather verbose and awkward.\n\n* A less precise but more concise alternative is to use `Sequence[T]`. This has\nthe downside that MyPy considers `str` a subtype of `Sequence[str]`, which can\nlead to buggy code that passes type-checking but fails schema validation at\nruntime.\n\n* A third alternative is to use only `List[T]` and forbid the use of tuples.\nThis is overly restrictive, but leads to simpler annotated types.\n\nBy default, we use `List[T]` to represent array types, but this behavior can be\noverridden via the `array_types` configuration parameter.\n\n### User-defined formats\n\nIf using Bravado's [user-defined\nformats](https://bravado-core.readthedocs.io/en/latest/formats.html) feature,\nuse the `custom_formats` configuration parameter to specify the python type for\neach user-defined format value in the schema, as well as any extra package\nimports required to resolve the type annotation.\n\nFor example, if you define a `bravado_core.formatter.SwaggerFormat` which\nconverts values with `type: string` and `format: ipv4` to\n`ipaddress.IPv4Address` objects, you should supply the following CLI flags to\n`bravado-types` to ensure the correct type annotations:\n\n    --custom-format string:ipv4:ipaddress.IPv4Address\n    --custom-format-package ipaddress\n\nBravado-types will emit warnings for unknown formats encountered while\nprocessing the schema.\n\n### Model inheritance\n\nSwagger allows composing model definitions with the `allOf` schema property.\nThis can be interpreted as a subclass relationship between models. Bravado\nimplements this to some extent in its model metaclass,\n`bravado_core.model.ModelMeta`.\n\nBy default, bravado-types does not mirror this implied type hierarchy in its\ngenerated types.  To enable this functionality, set the `model_inheritance`\nconfiguration parameter to `True`.\n\n### Additional model properties\n\nBravado-types does not currently support accessing or setting additional\nproperties as attributes of model instances. If you need to set or access\nadditional properties, you can use dict-like syntax instead.\n\nFor example, given this model schema...\n\n    x-model: APExample\n    type: object\n    additionalProperties:\n      type: int\n\n...you can add a property called \"something\" to a model instance like this:\n\n    model: APExampleModel\n    model['something'] = 123\n\nMyPy will not type-check additional properties.\n\n### File parameters and responses\n\nBravado's handling of parameters and responses with `type: file` is\ncomplicated.  This tool simply annotates such values with the `Any` type.\n\n## Development\n\nThis project uses Tox to manage virtual environments for unit tests and other\nself-checks.  Unit tests are written with the Pytest framework.\n\n**Note:** This project is not affiliated with Yelp or the Bravado project.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nickgaya/bravado-types", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "bravado-types", "package_url": "https://pypi.org/project/bravado-types/", "platform": "", "project_url": "https://pypi.org/project/bravado-types/", "project_urls": {"Homepage": "https://github.com/nickgaya/bravado-types"}, "release_url": "https://pypi.org/project/bravado-types/1.0.1/", "requires_dist": ["bravado (>=10.3.0)", "bravado-core (>=5.14.0)", "mako", "setuptools"], "requires_python": "", "summary": "Tool to generate MyPy type stubs for Bravado-generated classes to support static type checking.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bravado-types</h1>\n<p>Tool to generate MyPy type stubs for Bravado-generated classes to support\nstatic type checking.</p>\n<h2>Motivation</h2>\n<p><a href=\"https://github.com/Yelp/Bravado\" rel=\"nofollow\">Bravado</a> is a Python client library for\ninteracting with APIs defined by Swagger 2.0 schemas. Bravado parses a given\nAPI schema at runtime and dynamically generates classes to represent the data\ntypes defined by the schema. This is a nice Pythonic approach, but it means\nthat static type-checking tools like MyPy have limited ability to type-check\ncode that uses Bravado since the attributes and method signatures of objects\ngenerated by Bravado are not known until runtime.</p>\n<p>Bravado-types addresses this problem by pre-generating type information about\nthe generated data for a given schema at build time. Using the generated type\nstubs, MyPy can statically detect errors such as calling a nonexistent\noperation method on a resource, failing to specify a required operation\nparameter, or assigning a wrongly-typed value to a model attribute. This allows\nfor a much higher level of confidence in the correctness of code that uses\nBravado clients than would otherwise be possible.</p>\n<p>The validity of this approach relies on the assumption that the same version of\nthe schema is used during code generation as at runtime.  Without this\nassumption it is nearly impossible to make any useful assertions about the\nruntime behavior of generated clients.</p>\n<h2>Installation</h2>\n<pre><code>pip install bravado-types\n</code></pre>\n<p>To install the latest master version directly from GitHub:</p>\n<pre><code>pip install -U git+https://github.com/nickgaya/bravado-types.git\n</code></pre>\n<h2>Usage</h2>\n<h3>Code generation</h3>\n<p>To start using bravado-types, invoke the CLI against your Swagger schema of\nchoice:</p>\n<pre><code>bravado-types --url 'https://petstore.swagger.io/v2/swagger.json' \\\n    --name PetStore --path petstore.py\n</code></pre>\n<p>This command will download the PetStore example schema and generate a Python 3\nmodule, <em>petstore.py</em>, along with a MyPy stub file <em>petstore.pyi</em>, for that\nschema. The generated module and stub file can then be used in your package.\nThe generated code only depends on bravado, not on bravado-types, so you do not\nneed to include the latter as a runtime package dependency.</p>\n<p>Code generation can also be done programmatically.</p>\n<pre><code>from bravado import SwaggerClient\nfrom bravado_types import Config, generate_module\n\nclient = SwaggerClient.from_url(\n    \"https://petstore.swagger.io/v2/swagger.json\")\nconfig = Config(name='PetStore', path='petstore.py')\ngenerate_module(client, config)\n</code></pre>\n<p>Bravado-types supports several optional parameters to customize code\ngeneration. See the <code>bravado_types.config.Config</code> docstring or the CLI help\noutput (<code>bravado-types --help</code>) for details.</p>\n<h3>Using the generated module</h3>\n<p>To create a type-aware client, import the relevant name from the generated\nmodule and use its <code>from_url()</code> or <code>from_spec()</code> method to create an instance.</p>\n<pre><code>from petstore import PetStoreSwaggerClient\n\nclient = PetStoreSwaggerClient.from_url(\n    \"https://petstore.swagger.io/v2/swagger.json\")\nreveal_type(client)  # petstore.PetStoreSwaggerClient\n</code></pre>\n<p>You can use the client like a regular Bravado client to instantiate model\nobjects and make API calls with them.</p>\n<pre><code>Pet = client.get_model('Pet')\nreveal_type(Pet)  # Type[petstore.PetModel]\n\nfrank = Pet(name='Frank', photoUrls=[])\nreveal_type(frank)  # petstore.PetModel\n\npet123 = client.pet.getPetById(id=123).response().result\nreveal_type(pet123)  # petstore.PetModel\n</code></pre>\n<p>The generated module also provides importable model, resource, and operation\ntypes for use in type annotations.</p>\n<pre><code>from petstore import PetModel\n\ndef get_name(pet: PetModel) -&gt; str:\n    reveal_type(pet)  # petstore.PetModel\n    return pet.name\n</code></pre>\n<p>Generated model, resource, and operation types are only used for static type\nchecking and must not be used for runtime interactions.</p>\n<pre><code># Placeholder for static type-checking\nfrom petstore import PetModel\n\n# Use placeholder for type annotations and casts\npet: PetModel = ...\npet2 = typing.cast(PetModel, ...)\n\n# Runtime model class\nPet = client.get_model('Pet')\n\n# Use runtime class for model instantiation and runtime type checks\npet = Pet(name='Boots', photoUrls=[])\nassert isinstance(pet, Pet)\n</code></pre>\n<h2>Usage notes</h2>\n<h3>Operation response types</h3>\n<p>Operations often have multiple different response schemas for different status\ncodes, which presents an obstacle to static type analysis.  Bravado-types\noffers three different options for response type annotations, specified by the\n<code>response_types</code> configuration parameter.</p>\n<ul>\n<li>\n<p><code>'success'</code>: The response type will be declared as the union of all response\ntypes with 2xx status. This is unsound, but may be useful if you are primarily\nconcerned with responses when the request was successful.</p>\n</li>\n<li>\n<p><code>'all'</code>: The response type will be declared as the union of all response\ntypes defined in the schema. This is probably the most correct but is\ncumbersome, as the developer must perform manual type checks or casts to\nobtain a useable type.</p>\n</li>\n<li>\n<p><code>'any'</code>: The response type will be declared as <code>Any</code>. This gives maximum\nflexibility but requires the developer to manually add type hints if they\nwant any type checking on the result of an operation.</p>\n</li>\n</ul>\n<p>By default, bravado-types uses the <code>'success'</code> option as it is felt to be the\nmost pragmatic option, although the least sound.</p>\n<h3>Array types</h3>\n<p>Bravado accepts either lists or tuples when marshaling values with\n<code>type: array</code> in the Swagger schema, and creates lists when unmarshaling. There\nare a few ways we could represent this in the type annotations:</p>\n<ul>\n<li>\n<p>The most precise description would be <code>Union[List[T], Tuple[T, ...]]</code> but\nthis is rather verbose and awkward.</p>\n</li>\n<li>\n<p>A less precise but more concise alternative is to use <code>Sequence[T]</code>. This has\nthe downside that MyPy considers <code>str</code> a subtype of <code>Sequence[str]</code>, which can\nlead to buggy code that passes type-checking but fails schema validation at\nruntime.</p>\n</li>\n<li>\n<p>A third alternative is to use only <code>List[T]</code> and forbid the use of tuples.\nThis is overly restrictive, but leads to simpler annotated types.</p>\n</li>\n</ul>\n<p>By default, we use <code>List[T]</code> to represent array types, but this behavior can be\noverridden via the <code>array_types</code> configuration parameter.</p>\n<h3>User-defined formats</h3>\n<p>If using Bravado's <a href=\"https://bravado-core.readthedocs.io/en/latest/formats.html\" rel=\"nofollow\">user-defined\nformats</a> feature,\nuse the <code>custom_formats</code> configuration parameter to specify the python type for\neach user-defined format value in the schema, as well as any extra package\nimports required to resolve the type annotation.</p>\n<p>For example, if you define a <code>bravado_core.formatter.SwaggerFormat</code> which\nconverts values with <code>type: string</code> and <code>format: ipv4</code> to\n<code>ipaddress.IPv4Address</code> objects, you should supply the following CLI flags to\n<code>bravado-types</code> to ensure the correct type annotations:</p>\n<pre><code>--custom-format string:ipv4:ipaddress.IPv4Address\n--custom-format-package ipaddress\n</code></pre>\n<p>Bravado-types will emit warnings for unknown formats encountered while\nprocessing the schema.</p>\n<h3>Model inheritance</h3>\n<p>Swagger allows composing model definitions with the <code>allOf</code> schema property.\nThis can be interpreted as a subclass relationship between models. Bravado\nimplements this to some extent in its model metaclass,\n<code>bravado_core.model.ModelMeta</code>.</p>\n<p>By default, bravado-types does not mirror this implied type hierarchy in its\ngenerated types.  To enable this functionality, set the <code>model_inheritance</code>\nconfiguration parameter to <code>True</code>.</p>\n<h3>Additional model properties</h3>\n<p>Bravado-types does not currently support accessing or setting additional\nproperties as attributes of model instances. If you need to set or access\nadditional properties, you can use dict-like syntax instead.</p>\n<p>For example, given this model schema...</p>\n<pre><code>x-model: APExample\ntype: object\nadditionalProperties:\n  type: int\n</code></pre>\n<p>...you can add a property called \"something\" to a model instance like this:</p>\n<pre><code>model: APExampleModel\nmodel['something'] = 123\n</code></pre>\n<p>MyPy will not type-check additional properties.</p>\n<h3>File parameters and responses</h3>\n<p>Bravado's handling of parameters and responses with <code>type: file</code> is\ncomplicated.  This tool simply annotates such values with the <code>Any</code> type.</p>\n<h2>Development</h2>\n<p>This project uses Tox to manage virtual environments for unit tests and other\nself-checks.  Unit tests are written with the Pytest framework.</p>\n<p><strong>Note:</strong> This project is not affiliated with Yelp or the Bravado project.</p>\n\n          </div>"}, "last_serial": 6146006, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5c4a165c8021217933e19eb99614c844", "sha256": "bc24caa1d4f9a8b52446d6ba7c19d791b1a42468024f1f9992cbaaba3b9598f9"}, "downloads": -1, "filename": "bravado_types-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c4a165c8021217933e19eb99614c844", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15163, "upload_time": "2019-11-06T10:39:42", "upload_time_iso_8601": "2019-11-06T10:39:42.004858Z", "url": "https://files.pythonhosted.org/packages/b1/0b/22d3eda1bfff49a0b8489a0e43e49c3be23a2fbf72802fc6759369c9e35a/bravado_types-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f90a10269afaabc70466a76c6bde2832", "sha256": "7404bbbd252568c5866936af83c4164fe064befd35dbc52ce0725a5e10d6dbfc"}, "downloads": -1, "filename": "bravado-types-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f90a10269afaabc70466a76c6bde2832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25098, "upload_time": "2019-11-06T10:39:44", "upload_time_iso_8601": "2019-11-06T10:39:44.078411Z", "url": "https://files.pythonhosted.org/packages/fc/fd/870c6026b6c0bf5c33f1f07d29b214ffc7e54153585cf2a23ad8ae4a8edc/bravado-types-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd9007049b44268ad2276e9a94568b9b", "sha256": "2bc11da00fef6abb0044dbc6711a95ee600987befdbaf3751b7c5ba29d8fd48a"}, "downloads": -1, "filename": "bravado_types-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fd9007049b44268ad2276e9a94568b9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16765, "upload_time": "2019-11-08T09:54:53", "upload_time_iso_8601": "2019-11-08T09:54:53.564711Z", "url": "https://files.pythonhosted.org/packages/3a/5c/959446cc0313085f4ec523764f843f4b2b652e9e6c914ce88c1792c924d2/bravado_types-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f918ffa412d2f86d46ffa4aecd8c8d6d", "sha256": "8f216bb8d2b6dd40fbc1b1229a42f7b382b3fbfc1a753c74f58e573ef0ec33b3"}, "downloads": -1, "filename": "bravado-types-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f918ffa412d2f86d46ffa4aecd8c8d6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28510, "upload_time": "2019-11-08T09:54:55", "upload_time_iso_8601": "2019-11-08T09:54:55.293960Z", "url": "https://files.pythonhosted.org/packages/c2/e6/4885b43a3fe8dd6d5f23cc8d16ef4025d5dad937e979fc3200685bc910e1/bravado-types-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "aa71a4f76ebb178e8950101674d81bde", "sha256": "e1d941ba088594ebfade219cf13933b613f7e25d89a34c3d3e817bdc336686e2"}, "downloads": -1, "filename": "bravado_types-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa71a4f76ebb178e8950101674d81bde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17011, "upload_time": "2019-11-12T05:12:09", "upload_time_iso_8601": "2019-11-12T05:12:09.026284Z", "url": "https://files.pythonhosted.org/packages/21/8e/d26bf75a7d8b89d48ff16ba1ee025a23ad9363f3864639660db7a9f5b695/bravado_types-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f05aba140124b086d0ab03474acd55ec", "sha256": "dc94da21872bd187905583dd9470d589b35be38d41db3fb9c7b0417d73535b92"}, "downloads": -1, "filename": "bravado-types-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f05aba140124b086d0ab03474acd55ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32191, "upload_time": "2019-11-12T05:12:11", "upload_time_iso_8601": "2019-11-12T05:12:11.007337Z", "url": "https://files.pythonhosted.org/packages/48/05/16f8b709b0ee64dc9728301a5b26201401e7d6cb2244b42c11511c7f70f6/bravado-types-0.3.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "dc387d729712f5bd7c65a15d671daa55", "sha256": "9fb8f6b2888d179ce84d3a33f640c94c96aa5aa87b03bd2a605ab3a43b37801a"}, "downloads": -1, "filename": "bravado_types-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dc387d729712f5bd7c65a15d671daa55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17993, "upload_time": "2019-11-16T05:43:49", "upload_time_iso_8601": "2019-11-16T05:43:49.387840Z", "url": "https://files.pythonhosted.org/packages/c2/fa/a84fee907cabfd561dd6cf092d277e706458698177795faba5109e25d37a/bravado_types-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "379918266e53b10a1e6dbb214a95b9ca", "sha256": "f02b712bc6b5445097182ec1dc0556f00318fd5e47481bd09f106dc6e0789d01"}, "downloads": -1, "filename": "bravado-types-1.0.1.tar.gz", "has_sig": false, "md5_digest": "379918266e53b10a1e6dbb214a95b9ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33332, "upload_time": "2019-11-16T05:43:52", "upload_time_iso_8601": "2019-11-16T05:43:52.244832Z", "url": "https://files.pythonhosted.org/packages/26/fd/6582c9d1bd0f469604cba08839814756147f6586428624b7c7185a80e954/bravado-types-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc387d729712f5bd7c65a15d671daa55", "sha256": "9fb8f6b2888d179ce84d3a33f640c94c96aa5aa87b03bd2a605ab3a43b37801a"}, "downloads": -1, "filename": "bravado_types-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dc387d729712f5bd7c65a15d671daa55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17993, "upload_time": "2019-11-16T05:43:49", "upload_time_iso_8601": "2019-11-16T05:43:49.387840Z", "url": "https://files.pythonhosted.org/packages/c2/fa/a84fee907cabfd561dd6cf092d277e706458698177795faba5109e25d37a/bravado_types-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "379918266e53b10a1e6dbb214a95b9ca", "sha256": "f02b712bc6b5445097182ec1dc0556f00318fd5e47481bd09f106dc6e0789d01"}, "downloads": -1, "filename": "bravado-types-1.0.1.tar.gz", "has_sig": false, "md5_digest": "379918266e53b10a1e6dbb214a95b9ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33332, "upload_time": "2019-11-16T05:43:52", "upload_time_iso_8601": "2019-11-16T05:43:52.244832Z", "url": "https://files.pythonhosted.org/packages/26/fd/6582c9d1bd0f469604cba08839814756147f6586428624b7c7185a80e954/bravado-types-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:22 2020"}