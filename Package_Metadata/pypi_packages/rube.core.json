{"info": {"author": "Ralph Bean", "author_email": "rbean@redhat.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Traffic Generation"], "description": "::\n\n                _\n     _ __ _   _| |__   ___\n    | '__| | | | '_ \\ / _ \\\n    | |  | |_| | |_) |  __/\n    |_|   \\__,_|_.__/ \\___|.core\n\n\n`rube.core <https://pypi.python.org/pypi/rube.core>`_ is a convenience layer\non top of selenium; the idea was to make it easier to write new integration\ntests for our staging infrastructure in a way that looked like normal old\nunit tests.\n\nRube is developed by the `Fedora Infrastructure team\n<http://fedoraproject.org/wiki/Infrastructure>`_.  You can find the tests for\n*our* infrastructure in the `rube.fedora\n<https://pypi.python.org/pypi/rube.fedora>`_.  Please feel free to re-use\n``rube.core`` as you see fit.\n\nIf you are interested in *running the Fedora Infrastructure test suite*, please\nsee the ``rube.fedora`` `README\n<https://github.com/fedora-infra/rube/blob/develop/rube.fedora/README.rst>`_.\n\nFeatures\n--------\n\nrube.core provides a number of useful decorators for your tests.\n\n- ``@rube.core.tolerant(n=3)`` tries to run your test.  If it succeeds, it does\n  nothing more.  If your test fails, it tries again and again (up to ``n``\n  times, by default 3 times).  If it fails all ``n`` times, the failure is\n  reported in the test.  This is useful if your connection is flaky, or you\n  know that one app is sometimes on the fritz.\n\n- ``@rube.core.skip_logout()`` perhaps somewhat obviously will add your test to\n  a hidden ``_no_teardown`` list.  The ``tearDown`` method will skip it when\n  the time comes.\n\n- ``@rube.core.expects_zmqmsg(topic, timeout=20000)`` will cause rube to start\n  up a background thread with a ``zmq.SUB`` socket.  It will connect to\n  whatever endpoint you have listed in ``setup.cfg`` like this::\n\n    [zeromq]\n    tcp://stg.fedoraproject.org:9940\n\n  If a message does not arrive with the specified multipart prefix before the\n  timeout has elapsed, then that test will fail.  In Fedora Infrastructure, we\n  use this to ensure that actions triggered on webapps by rube cause `fedmsg\n  <http://fedmsg.com>`_ messages to be published on our staging gateway.\n\n- ``@rube.core.ensures_after(callable)`` will invoke ``callable`` after your\n  test has run, giving it a chance to raise an exception.\n\n  The common use case is to define a callable that executes a shell\n  command.  For instance, you could have a selenium test that goes to an\n  account system and applies for a dummy user's membership in a group.  After\n  that test has run, your callable could use paramiko to ssh to a machine and\n  ensure that that user now has shell access (or something).\n\n- ``@rube.core.collect_har`` will collect HAR performance data on your\n  websites.  You have to do a little extra work (including setting up\n  browsermob-proxy) in order to get this work.  See below.\n\n----\n\nRunning the tests will open up Firefox in X which is a bit of a pain\nsometimes.  If you want, you can run the tests in headless mode by setting\n``headless=1`` in setup.cfg.  Doing so will require that you have\n``xorg-x11-server-Xvfb`` installed via yum, however.\n\n----\n\nCollecting HAR files for performance metrics.\n\nRube will output harfile data into a ``harfiles/`` directory if you turn on\n``collect-har`` and specify a ``path`` to `browsermob-proxy\n<http://bmp.lightbody.net>`_ in the ``[browsermob]`` section of your setup.cfg\nfile.\n\nYou'll also need to manually ``pip install browsermob-proxy`` into your\nvirtualenv.  Note that `this patch\n<https://github.com/AutomatedTester/browsermob-proxy-py/pull/13>`_ is required\nto collect HAR files from https sites (such as our entire infrastructure).\n\nAuthors\n-------\n\n- `Ralph Bean <http://threebean.org>`_\n- `Remy DeCausemaker <http://decausemaker.org>`_\n- `Luke Macken <http://lewk.org>`_\n- `Ricky Elrod <http://elrod.me>`_\n- `Greg Jurman <https://github.com/gregjurman>`_\n\nLicense\n-------\nRube is free software: you can redistribute it and/or modify it under the terms\nof the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.\n\nRube is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith Rube. If not, see `gnu.org/licenses <http://www.gnu.org/licenses/>`_.\n\n.. image:: https://www.gnu.org/graphics/gplv3-127x51.png\n   :target: https://www.gnu.org/licenses/gpl.txt", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/fedora-infra/rube/", "keywords": null, "license": "GPLv3+", "maintainer": null, "maintainer_email": null, "name": "rube.core", "package_url": "https://pypi.org/project/rube.core/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rube.core/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/fedora-infra/rube/"}, "release_url": "https://pypi.org/project/rube.core/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "A convenience layer on top of selenium", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>            _\n _ __ _   _| |__   ___\n| '__| | | | '_ \\ / _ \\\n| |  | |_| | |_) |  __/\n|_|   \\__,_|_.__/ \\___|.core\n</pre>\n<p><a href=\"https://pypi.python.org/pypi/rube.core\" rel=\"nofollow\">rube.core</a> is a convenience layer\non top of selenium; the idea was to make it easier to write new integration\ntests for our staging infrastructure in a way that looked like normal old\nunit tests.</p>\n<p>Rube is developed by the <a href=\"http://fedoraproject.org/wiki/Infrastructure\" rel=\"nofollow\">Fedora Infrastructure team</a>.  You can find the tests for\n<em>our</em> infrastructure in the <a href=\"https://pypi.python.org/pypi/rube.fedora\" rel=\"nofollow\">rube.fedora</a>.  Please feel free to re-use\n<tt>rube.core</tt> as you see fit.</p>\n<p>If you are interested in <em>running the Fedora Infrastructure test suite</em>, please\nsee the <tt>rube.fedora</tt> <a href=\"https://github.com/fedora-infra/rube/blob/develop/rube.fedora/README.rst\" rel=\"nofollow\">README</a>.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p>rube.core provides a number of useful decorators for your tests.</p>\n<ul>\n<li><p><tt>@rube.core.tolerant(n=3)</tt> tries to run your test.  If it succeeds, it does\nnothing more.  If your test fails, it tries again and again (up to <tt>n</tt>\ntimes, by default 3 times).  If it fails all <tt>n</tt> times, the failure is\nreported in the test.  This is useful if your connection is flaky, or you\nknow that one app is sometimes on the fritz.</p>\n</li>\n<li><p><tt>@rube.core.skip_logout()</tt> perhaps somewhat obviously will add your test to\na hidden <tt>_no_teardown</tt> list.  The <tt>tearDown</tt> method will skip it when\nthe time comes.</p>\n</li>\n<li><p><tt>@rube.core.expects_zmqmsg(topic, timeout=20000)</tt> will cause rube to start\nup a background thread with a <tt>zmq.SUB</tt> socket.  It will connect to\nwhatever endpoint you have listed in <tt>setup.cfg</tt> like this:</p>\n<pre>[zeromq]\ntcp://stg.fedoraproject.org:9940\n</pre>\n<p>If a message does not arrive with the specified multipart prefix before the\ntimeout has elapsed, then that test will fail.  In Fedora Infrastructure, we\nuse this to ensure that actions triggered on webapps by rube cause <a href=\"http://fedmsg.com\" rel=\"nofollow\">fedmsg</a> messages to be published on our staging gateway.</p>\n</li>\n<li><p><tt>@rube.core.ensures_after(callable)</tt> will invoke <tt>callable</tt> after your\ntest has run, giving it a chance to raise an exception.</p>\n<p>The common use case is to define a callable that executes a shell\ncommand.  For instance, you could have a selenium test that goes to an\naccount system and applies for a dummy user\u2019s membership in a group.  After\nthat test has run, your callable could use paramiko to ssh to a machine and\nensure that that user now has shell access (or something).</p>\n</li>\n<li><p><tt>@rube.core.collect_har</tt> will collect HAR performance data on your\nwebsites.  You have to do a little extra work (including setting up\nbrowsermob-proxy) in order to get this work.  See below.</p>\n</li>\n</ul>\n<hr class=\"docutils\">\n<p>Running the tests will open up Firefox in X which is a bit of a pain\nsometimes.  If you want, you can run the tests in headless mode by setting\n<tt>headless=1</tt> in setup.cfg.  Doing so will require that you have\n<tt><span class=\"pre\">xorg-x11-server-Xvfb</span></tt> installed via yum, however.</p>\n<hr class=\"docutils\">\n<p>Collecting HAR files for performance metrics.</p>\n<p>Rube will output harfile data into a <tt>harfiles/</tt> directory if you turn on\n<tt><span class=\"pre\">collect-har</span></tt> and specify a <tt>path</tt> to <a href=\"http://bmp.lightbody.net\" rel=\"nofollow\">browsermob-proxy</a> in the <tt>[browsermob]</tt> section of your setup.cfg\nfile.</p>\n<p>You\u2019ll also need to manually <tt>pip install <span class=\"pre\">browsermob-proxy</span></tt> into your\nvirtualenv.  Note that <a href=\"https://github.com/AutomatedTester/browsermob-proxy-py/pull/13\" rel=\"nofollow\">this patch</a> is required\nto collect HAR files from https sites (such as our entire infrastructure).</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li><a href=\"http://threebean.org\" rel=\"nofollow\">Ralph Bean</a></li>\n<li><a href=\"http://decausemaker.org\" rel=\"nofollow\">Remy DeCausemaker</a></li>\n<li><a href=\"http://lewk.org\" rel=\"nofollow\">Luke Macken</a></li>\n<li><a href=\"http://elrod.me\" rel=\"nofollow\">Ricky Elrod</a></li>\n<li><a href=\"https://github.com/gregjurman\" rel=\"nofollow\">Greg Jurman</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Rube is free software: you can redistribute it and/or modify it under the terms\nof the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion.</p>\n<p>Rube is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License along\nwith Rube. If not, see <a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">gnu.org/licenses</a>.</p>\n<a href=\"https://www.gnu.org/licenses/gpl.txt\" rel=\"nofollow\"><img alt=\"https://www.gnu.org/graphics/gplv3-127x51.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff0b412be9babb49389f28f9445ba76e076adf0e/68747470733a2f2f7777772e676e752e6f72672f67726170686963732f67706c76332d3132377835312e706e67\"></a>\n</div>\n\n          </div>"}, "last_serial": 2045491, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "92b8b19e65c1a538c342219afd58092e", "sha256": "35409828c576245b7c8917be0c3d139d49108af3fa0f3d89834fa0a6ece80479"}, "downloads": -1, "filename": "rube.core-0.1.0.tar.gz", "has_sig": true, "md5_digest": "92b8b19e65c1a538c342219afd58092e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18347, "upload_time": "2013-04-03T20:45:13", "upload_time_iso_8601": "2013-04-03T20:45:13.387487Z", "url": "https://files.pythonhosted.org/packages/6f/b9/d805a1763acf6782875daae5be7532f711d96703f2e812c3eac91df7f915/rube.core-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b43c314b3ff00f0e59d099802cba4510", "sha256": "f42a8c36798fb0352c0902a954e2c682d2d36cc3ec43b49d5fd68f8c2ba7d46e"}, "downloads": -1, "filename": "rube.core-0.1.1.tar.gz", "has_sig": true, "md5_digest": "b43c314b3ff00f0e59d099802cba4510", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18401, "upload_time": "2013-04-04T13:38:58", "upload_time_iso_8601": "2013-04-04T13:38:58.964267Z", "url": "https://files.pythonhosted.org/packages/73/fa/b22d59ec7266a80a95644bc937a7491ba20543ceebf9aeb2bdc9374903e6/rube.core-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "18ed8585535d2da8527520c00b464bba", "sha256": "6fef534ea10762052917183c92ed7bddfb2c1a37633408d8143d74a96ed6acaf"}, "downloads": -1, "filename": "rube.core-0.1.2.tar.gz", "has_sig": true, "md5_digest": "18ed8585535d2da8527520c00b464bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21310, "upload_time": "2013-10-21T15:06:21", "upload_time_iso_8601": "2013-10-21T15:06:21.080047Z", "url": "https://files.pythonhosted.org/packages/34/87/1cbb4fa460e9a6ab97ee2c64426c992c7d49da79e5a7da9f785d5052340c/rube.core-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18ed8585535d2da8527520c00b464bba", "sha256": "6fef534ea10762052917183c92ed7bddfb2c1a37633408d8143d74a96ed6acaf"}, "downloads": -1, "filename": "rube.core-0.1.2.tar.gz", "has_sig": true, "md5_digest": "18ed8585535d2da8527520c00b464bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21310, "upload_time": "2013-10-21T15:06:21", "upload_time_iso_8601": "2013-10-21T15:06:21.080047Z", "url": "https://files.pythonhosted.org/packages/34/87/1cbb4fa460e9a6ab97ee2c64426c992c7d49da79e5a7da9f785d5052340c/rube.core-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:12 2020"}