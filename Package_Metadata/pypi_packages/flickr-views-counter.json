{"info": {"author": "Jordan Jozwiak", "author_email": "support@jozapps.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python"], "description": "flickr-views-counter\n====================\n\nPython script to count the total number of views across all of a user's photos.  Flickr's API doesn't give a total photo count anymore, so this script makes use of [this very helpful library](http://stuvel.eu/flickrapi) to add up the counts for each photo and output the total number of views for a user.\n\n##Steps to setup script\n1. Get a [**Non-commercial** Flickr API key](https://www.flickr.com/services/apps/create/noncommercial/?).\n  - Fill out the form\n  - Keep the page with your new *key* and *secret* open, you'll need them in a moment\n1. Install [Python](https://www.python.org/downloads/), if you don't have it\n1. Use pip to install the **flickr-views-counter** package\n\n  ```bash\n  pip install flickr-views-counter\n  ```\n\n##Running the script\nRun the script with your **user id**.  For example, my user id is `26119226@N04`, which is the last part of the url for my photostream [https://www.flickr.com/photos/26119226@N04/](https://www.flickr.com/photos/26119226@N04/). \n\nSo, I would run (replacing the Xs with my API key and the Ys with my API secret):\n```bash\nflickr-views-counter 26119226@N04 --key XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX --secret YYYYYYYYYYYYYYYYYYYYYYY\n```\n###Storing API key and secret\nIf you don't want to use your key and secret every time you run the script, you can store them in environment variables.  Make sure you use **FLICKR_API_KEY** to store the key and **FLICKR_API_SECRET** to store the secret.  [This guide](http://www.schrodinger.com/kb/1842) may be helpful for setting environment variables.\n\n\n###Saving detailed data\n\nIf you want to save the data for your photos in csv format, then add an output file name. For example:\n```bash\nflickr-views-counter 26119226@N04 --output photo-views.csv\n```\n###Get daily stats\nIf you're familiar with crontab, you can set the script up to save your daily photo statistics.  Here is an example that would run at noon every day, write the csv output to a folder with the date stamp, and log the total counts.  The actual implementation would vary slightly based on your paths, and, of course, your user id.\n\n```bash\n00 12 * * * flickr-views-counter 26119226@N04 --output ~/Desktop/flickr-counts/count-views-$(date +%F).csv >> ~/Desktop/flickr-counts/flickr-counts-log.txt\n```\n\n### Options\n\n#### -h, --help\nPrints help message.\n\n#### --output\nName of the output csv file to save photo data. Like, `photo-views.csv`\n\n#### --key\nYour [Flickr API](https://www.flickr.com/services/apps/create/noncommercial/?) key\n\n#### --secret\nYour [Flickr API](https://www.flickr.com/services/apps/create/noncommercial/?) secret\n\n## FAQ\n**Q:  why isn't there a website to do this for me?**\n*A: The FlickrApi is [rate limited](https://developer.yahoo.com/forum/YQL/What-is-the-maximum-flickr-API/1361494903655-6a1e3a51-cd41-411e-86a9-dc2dee898ab5/) to 3600 queries per house, so a single API key wouldn't be able to handle requests for a large number of users*\n\nCHANGES\n=======\n\n\n0.1.0 (2015-06-02)\n------------------\n\n-  Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jordanjoz1/flickr-views-counter", "keywords": "flickr photos views favorites", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "flickr-views-counter", "package_url": "https://pypi.org/project/flickr-views-counter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/flickr-views-counter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jordanjoz1/flickr-views-counter"}, "release_url": "https://pypi.org/project/flickr-views-counter/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Get view counts, favorites, and other data for each picture in a user's photostream", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            flickr-views-counter<br>====================<br><br>Python script to count the total number of views across all of a user's photos.  Flickr's API doesn't give a total photo count anymore, so this script makes use of [this very helpful library](http://stuvel.eu/flickrapi) to add up the counts for each photo and output the total number of views for a user.<br><br>##Steps to setup script<br>1. Get a [**Non-commercial** Flickr API key](https://www.flickr.com/services/apps/create/noncommercial/?).<br>  - Fill out the form<br>  - Keep the page with your new *key* and *secret* open, you'll need them in a moment<br>1. Install [Python](https://www.python.org/downloads/), if you don't have it<br>1. Use pip to install the **flickr-views-counter** package<br><br>  ```bash<br>  pip install flickr-views-counter<br>  ```<br><br>##Running the script<br>Run the script with your **user id**.  For example, my user id is `26119226@N04`, which is the last part of the url for my photostream [https://www.flickr.com/photos/26119226@N04/](https://www.flickr.com/photos/26119226@N04/). <br><br>So, I would run (replacing the Xs with my API key and the Ys with my API secret):<br>```bash<br>flickr-views-counter 26119226@N04 --key XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX --secret YYYYYYYYYYYYYYYYYYYYYYY<br>```<br>###Storing API key and secret<br>If you don't want to use your key and secret every time you run the script, you can store them in environment variables.  Make sure you use **FLICKR_API_KEY** to store the key and **FLICKR_API_SECRET** to store the secret.  [This guide](http://www.schrodinger.com/kb/1842) may be helpful for setting environment variables.<br><br><br>###Saving detailed data<br><br>If you want to save the data for your photos in csv format, then add an output file name. For example:<br>```bash<br>flickr-views-counter 26119226@N04 --output photo-views.csv<br>```<br>###Get daily stats<br>If you're familiar with crontab, you can set the script up to save your daily photo statistics.  Here is an example that would run at noon every day, write the csv output to a folder with the date stamp, and log the total counts.  The actual implementation would vary slightly based on your paths, and, of course, your user id.<br><br>```bash<br>00 12 * * * flickr-views-counter 26119226@N04 --output ~/Desktop/flickr-counts/count-views-$(date +%F).csv &gt;&gt; ~/Desktop/flickr-counts/flickr-counts-log.txt<br>```<br><br>### Options<br><br>#### -h, --help<br>Prints help message.<br><br>#### --output<br>Name of the output csv file to save photo data. Like, `photo-views.csv`<br><br>#### --key<br>Your [Flickr API](https://www.flickr.com/services/apps/create/noncommercial/?) key<br><br>#### --secret<br>Your [Flickr API](https://www.flickr.com/services/apps/create/noncommercial/?) secret<br><br>## FAQ<br>**Q:  why isn't there a website to do this for me?**<br>*A: The FlickrApi is [rate limited](https://developer.yahoo.com/forum/YQL/What-is-the-maximum-flickr-API/1361494903655-6a1e3a51-cd41-411e-86a9-dc2dee898ab5/) to 3600 queries per house, so a single API key wouldn't be able to handle requests for a large number of users*<br><br>CHANGES<br>=======<br><br><br>0.1.0 (2015-06-02)<br>------------------<br><br>-  Initial release.\n          </div>"}, "last_serial": 1574363, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9e1dc642c8a50629ecd83d25f1823636", "sha256": "7df5f2ea1666b00fb6ed461893c765c61d200c41c197925399e8eab0a449077f"}, "downloads": -1, "filename": "flickr_views_counter-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e1dc642c8a50629ecd83d25f1823636", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7288, "upload_time": "2015-06-02T06:43:16", "upload_time_iso_8601": "2015-06-02T06:43:16.273305Z", "url": "https://files.pythonhosted.org/packages/dc/d4/1190682afe1bf5ab550ff89542d65ffbbe82d983716a0b42f496c6cc7966/flickr_views_counter-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "388cca47443366ac2a1c0a1b4d856782", "sha256": "24eeec8ed815ed4016ce058a56b545061d7b4e86877530345b666bc36fcb8529"}, "downloads": -1, "filename": "flickr-views-counter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "388cca47443366ac2a1c0a1b4d856782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4234, "upload_time": "2015-06-02T06:43:12", "upload_time_iso_8601": "2015-06-02T06:43:12.906624Z", "url": "https://files.pythonhosted.org/packages/df/02/91a3fb81290cbabff6217acdfac41335d04cf432508e8429bf8020589157/flickr-views-counter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e1dc642c8a50629ecd83d25f1823636", "sha256": "7df5f2ea1666b00fb6ed461893c765c61d200c41c197925399e8eab0a449077f"}, "downloads": -1, "filename": "flickr_views_counter-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9e1dc642c8a50629ecd83d25f1823636", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7288, "upload_time": "2015-06-02T06:43:16", "upload_time_iso_8601": "2015-06-02T06:43:16.273305Z", "url": "https://files.pythonhosted.org/packages/dc/d4/1190682afe1bf5ab550ff89542d65ffbbe82d983716a0b42f496c6cc7966/flickr_views_counter-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "388cca47443366ac2a1c0a1b4d856782", "sha256": "24eeec8ed815ed4016ce058a56b545061d7b4e86877530345b666bc36fcb8529"}, "downloads": -1, "filename": "flickr-views-counter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "388cca47443366ac2a1c0a1b4d856782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4234, "upload_time": "2015-06-02T06:43:12", "upload_time_iso_8601": "2015-06-02T06:43:12.906624Z", "url": "https://files.pythonhosted.org/packages/df/02/91a3fb81290cbabff6217acdfac41335d04cf432508e8429bf8020589157/flickr-views-counter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:52 2020"}