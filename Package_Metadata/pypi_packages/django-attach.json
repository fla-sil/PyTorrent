{"info": {"author": "Peter Kuma", "author_email": "peterkuma@waveland.org", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "django-attach\n=============\n\ndjango-attach is a django admin plugin for attaching files to model instances\nwith multiple file selection support. Its main feature is a custom admin inline\nform. Requires a modern browser supporting HTML5 and XMLHttpRequest2,\nbut falls back to the plain django inline form when these are not available.\n\n### Features:\n\n* Mutiple file selection.\n* Files are not uploaded or deleted until the form is submitted.\n* Properly handles both editing existing model instances, and adding new\n  model instances (incl. validation errors, when uploaded files remain\n  associated with a temporary object until the errors are corrected,\n  and the instance can be saved).\n* Reports upload progress.\n* Reports any errors in asynchronous requests if they occur.\n\nInstallation\n------------\n\nInstall from PyPI or with `setup.py`:\n\n    pip install django-attach\n\n    # Alternatively:\n    python setup.py install\n\nAdd the application to `settings.py`:\n\n    INSTALLED_APPS = (\n        ...\n        'django_attach',\n        # You apps follow here.\n        ...\n    )\n\nInitialize database tables and copy static files:\n\n    python manage.py syncdb\n    python manage.py collectstatic\n\nAdd a generic relation field to your model:\n\n    from django_attach.models import Attachment\n    from django.contrib.contenttypes.generic import GenericRelation\n    ...\n\n    class MyModel(models.Model):\n        ....\n        attachments = GenericRelation(Attachment)\n\nThis is how you can access attachments in your program.\n\nIn `admin.py` of your application, add **AttachmentInline** to the list of\ninlines:\n\n    from django_attach.forms import AttachmentInline\n    ...\n\n    class MyModelAdmin(admin.ModelAdmin):\n        inlines = (AttachmentInline,)\n\nIn the admin, you should be able to see the attachment inline under the\nchange and add pages of your model. You should also see a new application\nDjango_Attach, where you can edit the raw attachments and temporary objects\n(described below) if you ever need to.\n\nIt is up to you to implement a meaningful way in which the attachments are\nused. One possible use is to allow text fields (e.g. article HTML content)\nof the model to reference them directly. You then have to supply a view\nwhich serves the files (e.g. via HTTP redirect) under the appropriate URL.\nYou may also need to pipe the HTML content through a filter which modifies\nthe relative links to absolute links (if you display multiple models\nunder one URL).\n\nBrowser support\n---------------\n\nThis is an early release of django-attach. As such, it has not been tested\nthoroughly on many browsers.\n\n**Known to work:**\n\n* Firefox 23\n* Chromium 27\n\n**Partial:**\n\n* Safari 6 on Mountain Lion (allows selection of only 1 file at a time)\n\n**Fallback to classic formset inline:**\n\n* IE7\n* IE8\n* IE9\n\n**Broken:**\n\n* IE10\n\nExample\n-------\n\nDirectory [example_project](example_project) contains an example\ndjango project demonstrating the use of django-attach.\nPlease see `example_project/README.md` for more information.\n\nReference\n---------\n\n### class Attachment(Model)\n\nAttachment objects hold individual files. They are associated with arbitrary\nmodel instances via the\n[contenttypes](https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/)\nframework.\n\n**Fields**:\n\n- **file** - attachment file.\n- **content_object** - object associated with the attachment.\n- **content_type** - ID of ContentType of the associated model.\n- **object_id** - primary key of the associated model.\n- **created** - datetime when attachment was created.\n- **modified** - datatime when attachment was last modified.\n\nYou should not rely on file, content\\_object, content\\_type and object\\_id\nnot being null.\n\n### class Temporary(Model)\n\nTemporary objects. Files attached to instances yet to be saved are associated\nwith temporary objects. They are removed once the instance is saved.\n\n**Fields**:\n\n- **attachments** - attachments associated with the temporary object.\n- **created** - datetime when temporary object was created.\n- **modified** - datetime when temporary object was last modified.\n\n### Settings\n\n#### ATTACHMENT_ROOT\n\nDefault: 'attachment'\n\nPath where attachments are stored (relative to `MEDIA_ROOT`).\n\nHow it works\n------------\n\nFile selection upon clicking Attach button is implemented using a hidden\n`<input type=\"file\" multiple=\"true\">`. Files are uploaded asynchronously\nwhen the model form is submitted. If the instance is yet to be created,\nthey are associated with a new Temporary object. Once the model instance\nis saved, they are re-attached to the instance, and moved in the file storage\nto the appropriate location (`MEDIA_ROOT/attachment/<model>/<id>/`).\nFile deletion is implemented using the ordinary hidden *-DELETE fields\nas in inline formset, submitted synchronously on model form submission.\n\nKnown issues\n------------\n\n* Stale files (uploaded via the add page of your model, but whose associated\nmodel instance was not eventually saved) need to be removed manually in the\nDjango_Attach application in the admin. This can be done by removing the old\nTemporary objects they are attached to.\n* django-attach is not yet fully translatable.\n\nSecurity considerations\n-----------------------\n\n* django-attach is bundled with minified versions of JavaScript libraries\n  [d3.js](http://d3js.org/) and [queue](https://github.com/mbostock/queue)\n  downloaded from [github.com/mbostock](https://github.com/mbostock).\n* django-attach has not yet been well tested with respect to honoring\n  django admin model permissions.\n\nLicense\n-------\n\ndjango-attach is released under the BSD License.\nSee `LICENSE` and `LICENSE.third-party` for details.\n\nScreenshots\n-----------\n\nAttachmentInline displays a list of attachments on a model change page.\nAttachments can be added by clicking the `Attach file` button, and removed\nby clicking a cross next to a file name.\n\n![](https://github.com/peterkuma/django-attach/raw/master/screenshots/1.png)\n\nNew attachments are uploaded asynchronously when form is submitted. Upload\nprogress is shown.\n\n![](https://github.com/peterkuma/django-attach/raw/master/screenshots/2.png)\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peterkuma/django-attach/", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-attach", "package_url": "https://pypi.org/project/django-attach/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-attach/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/peterkuma/django-attach/"}, "release_url": "https://pypi.org/project/django-attach/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Django admin plugin for attaching files to model instances with multiple file selection support", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-attach<br>=============<br><br>django-attach is a django admin plugin for attaching files to model instances<br>with multiple file selection support. Its main feature is a custom admin inline<br>form. Requires a modern browser supporting HTML5 and XMLHttpRequest2,<br>but falls back to the plain django inline form when these are not available.<br><br>### Features:<br><br>* Mutiple file selection.<br>* Files are not uploaded or deleted until the form is submitted.<br>* Properly handles both editing existing model instances, and adding new<br>  model instances (incl. validation errors, when uploaded files remain<br>  associated with a temporary object until the errors are corrected,<br>  and the instance can be saved).<br>* Reports upload progress.<br>* Reports any errors in asynchronous requests if they occur.<br><br>Installation<br>------------<br><br>Install from PyPI or with `setup.py`:<br><br>    pip install django-attach<br><br>    # Alternatively:<br>    python setup.py install<br><br>Add the application to `settings.py`:<br><br>    INSTALLED_APPS = (<br>        ...<br>        'django_attach',<br>        # You apps follow here.<br>        ...<br>    )<br><br>Initialize database tables and copy static files:<br><br>    python manage.py syncdb<br>    python manage.py collectstatic<br><br>Add a generic relation field to your model:<br><br>    from django_attach.models import Attachment<br>    from django.contrib.contenttypes.generic import GenericRelation<br>    ...<br><br>    class MyModel(models.Model):<br>        ....<br>        attachments = GenericRelation(Attachment)<br><br>This is how you can access attachments in your program.<br><br>In `admin.py` of your application, add **AttachmentInline** to the list of<br>inlines:<br><br>    from django_attach.forms import AttachmentInline<br>    ...<br><br>    class MyModelAdmin(admin.ModelAdmin):<br>        inlines = (AttachmentInline,)<br><br>In the admin, you should be able to see the attachment inline under the<br>change and add pages of your model. You should also see a new application<br>Django_Attach, where you can edit the raw attachments and temporary objects<br>(described below) if you ever need to.<br><br>It is up to you to implement a meaningful way in which the attachments are<br>used. One possible use is to allow text fields (e.g. article HTML content)<br>of the model to reference them directly. You then have to supply a view<br>which serves the files (e.g. via HTTP redirect) under the appropriate URL.<br>You may also need to pipe the HTML content through a filter which modifies<br>the relative links to absolute links (if you display multiple models<br>under one URL).<br><br>Browser support<br>---------------<br><br>This is an early release of django-attach. As such, it has not been tested<br>thoroughly on many browsers.<br><br>**Known to work:**<br><br>* Firefox 23<br>* Chromium 27<br><br>**Partial:**<br><br>* Safari 6 on Mountain Lion (allows selection of only 1 file at a time)<br><br>**Fallback to classic formset inline:**<br><br>* IE7<br>* IE8<br>* IE9<br><br>**Broken:**<br><br>* IE10<br><br>Example<br>-------<br><br>Directory [example_project](example_project) contains an example<br>django project demonstrating the use of django-attach.<br>Please see `example_project/README.md` for more information.<br><br>Reference<br>---------<br><br>### class Attachment(Model)<br><br>Attachment objects hold individual files. They are associated with arbitrary<br>model instances via the<br>[contenttypes](https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/)<br>framework.<br><br>**Fields**:<br><br>- **file** - attachment file.<br>- **content_object** - object associated with the attachment.<br>- **content_type** - ID of ContentType of the associated model.<br>- **object_id** - primary key of the associated model.<br>- **created** - datetime when attachment was created.<br>- **modified** - datatime when attachment was last modified.<br><br>You should not rely on file, content\\_object, content\\_type and object\\_id<br>not being null.<br><br>### class Temporary(Model)<br><br>Temporary objects. Files attached to instances yet to be saved are associated<br>with temporary objects. They are removed once the instance is saved.<br><br>**Fields**:<br><br>- **attachments** - attachments associated with the temporary object.<br>- **created** - datetime when temporary object was created.<br>- **modified** - datetime when temporary object was last modified.<br><br>### Settings<br><br>#### ATTACHMENT_ROOT<br><br>Default: 'attachment'<br><br>Path where attachments are stored (relative to `MEDIA_ROOT`).<br><br>How it works<br>------------<br><br>File selection upon clicking Attach button is implemented using a hidden<br>`&lt;input type=\"file\" multiple=\"true\"&gt;`. Files are uploaded asynchronously<br>when the model form is submitted. If the instance is yet to be created,<br>they are associated with a new Temporary object. Once the model instance<br>is saved, they are re-attached to the instance, and moved in the file storage<br>to the appropriate location (`MEDIA_ROOT/attachment/&lt;model&gt;/&lt;id&gt;/`).<br>File deletion is implemented using the ordinary hidden *-DELETE fields<br>as in inline formset, submitted synchronously on model form submission.<br><br>Known issues<br>------------<br><br>* Stale files (uploaded via the add page of your model, but whose associated<br>model instance was not eventually saved) need to be removed manually in the<br>Django_Attach application in the admin. This can be done by removing the old<br>Temporary objects they are attached to.<br>* django-attach is not yet fully translatable.<br><br>Security considerations<br>-----------------------<br><br>* django-attach is bundled with minified versions of JavaScript libraries<br>  [d3.js](http://d3js.org/) and [queue](https://github.com/mbostock/queue)<br>  downloaded from [github.com/mbostock](https://github.com/mbostock).<br>* django-attach has not yet been well tested with respect to honoring<br>  django admin model permissions.<br><br>License<br>-------<br><br>django-attach is released under the BSD License.<br>See `LICENSE` and `LICENSE.third-party` for details.<br><br>Screenshots<br>-----------<br><br>AttachmentInline displays a list of attachments on a model change page.<br>Attachments can be added by clicking the `Attach file` button, and removed<br>by clicking a cross next to a file name.<br><br>![](https://github.com/peterkuma/django-attach/raw/master/screenshots/1.png)<br><br>New attachments are uploaded asynchronously when form is submitted. Upload<br>progress is shown.<br><br>![](https://github.com/peterkuma/django-attach/raw/master/screenshots/2.png)<br>\n          </div>"}, "last_serial": 862936, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "45891de427558bc61d4735667d24f4e9", "sha256": "351678d54d7ca26c0e868201a8442c901962ded43774bc93ff96b5efa423d27a"}, "downloads": -1, "filename": "django-attach-0.1.tar.gz", "has_sig": false, "md5_digest": "45891de427558bc61d4735667d24f4e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60304, "upload_time": "2013-09-06T11:04:59", "upload_time_iso_8601": "2013-09-06T11:04:59.527055Z", "url": "https://files.pythonhosted.org/packages/40/73/48a88ff035b1997fc89dd3202d35ca4c017d1bd34a3bcc126759605a8489/django-attach-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "31608d537803094a5d692140c1f28cc9", "sha256": "450d39460474d45ad82e4ca07b038c9ae3658e1bf2cf37ef12bdf9266ce1ca51"}, "downloads": -1, "filename": "django-attach-0.1.1.tar.gz", "has_sig": true, "md5_digest": "31608d537803094a5d692140c1f28cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 170169, "upload_time": "2013-09-06T11:10:40", "upload_time_iso_8601": "2013-09-06T11:10:40.226004Z", "url": "https://files.pythonhosted.org/packages/22/5e/d2e8a691ece56618113610f0e51e46c412f2970165377ad5492f0bc3447b/django-attach-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ce975ed376413efa0563294b9af3c35f", "sha256": "8afe88499f78ac73487a9aaeb806d2217d81cd325fd2403588104ab8198912bc"}, "downloads": -1, "filename": "django-attach-0.1.2.tar.gz", "has_sig": true, "md5_digest": "ce975ed376413efa0563294b9af3c35f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 170268, "upload_time": "2013-09-06T18:35:12", "upload_time_iso_8601": "2013-09-06T18:35:12.465341Z", "url": "https://files.pythonhosted.org/packages/52/7e/0115a691c0ce545720b3b0e14eed86995224f2ae3ca467cf5beb73e3c4b2/django-attach-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "183ce6a1fbcd9b53d4bc829ad34f55dd", "sha256": "5dc2db32d28a0f44bf8d15b59874ff80caa9912c89d79f3a03337285ecf2cfe9"}, "downloads": -1, "filename": "django-attach-0.1.3.tar.gz", "has_sig": false, "md5_digest": "183ce6a1fbcd9b53d4bc829ad34f55dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166443, "upload_time": "2013-09-11T17:44:58", "upload_time_iso_8601": "2013-09-11T17:44:58.210408Z", "url": "https://files.pythonhosted.org/packages/ea/0b/44bb89a652507dc2c5e77219a85805b57a58d4f81caf5dd56b162cd04d6b/django-attach-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "183ce6a1fbcd9b53d4bc829ad34f55dd", "sha256": "5dc2db32d28a0f44bf8d15b59874ff80caa9912c89d79f3a03337285ecf2cfe9"}, "downloads": -1, "filename": "django-attach-0.1.3.tar.gz", "has_sig": false, "md5_digest": "183ce6a1fbcd9b53d4bc829ad34f55dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166443, "upload_time": "2013-09-11T17:44:58", "upload_time_iso_8601": "2013-09-11T17:44:58.210408Z", "url": "https://files.pythonhosted.org/packages/ea/0b/44bb89a652507dc2c5e77219a85805b57a58d4f81caf5dd56b162cd04d6b/django-attach-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:35 2020"}