{"info": {"author": "Griffin Teller", "author_email": "griffinteller@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# abrconnection\nAn interface between Python and Autonomous Battle Royale\n<br>\n<br>\nDocumentation (ABR v0.0.3): <br><br>\n\n* Coordinate system is left-handed, with x being east, y being upwards, and z being north.\n\n* `RobotConnection()`: class which handles connection to the game. Should be instantiated at beginning of script, and method `connect()` should be called immediately after. `disconnect()` ends connection.  \n\n* `RobotConnection.set_tire_torque(tire_name, torque)`: sets torque of tire `tire_name` to `torque`. Current tire names are \"BackLeft\", \"BackRight\", \"FrontLeft\", and \"FrontRight.\"  \n\n* `RobotConnection.set_tire_steering(tire_name, bering)`: sets tire `tire_name` to `bering`. All angles/berings are clockwise off of vertical (unity's coordinate system is left-handed).\n\n* `RobotConnection.state_dict`: Dictionary/Hashtable containing information about the state of the robot.  \n\n  * Vectors are stored as dictionaries with keys `\"x\"`, `\"y\"`, and `\"z\"`.\n\n  * `state_dict[\"gps\"]`: Sensor containing position information of the robot.\n\n    * `state_dict[\"gps\"][\"position\"]`: Vector containing current position of robot relative to starting point.\n\n  * `state_dict[\"gyroscope\"]`: Sensor containing rotation information of the robot:\n\n    * `state_dict[\"gyroscope\"][\"right\"]`: Unit vector pointing right RELATIVE to the robot. For example, if the robot was facing in the default direction, its right vector would be <1, 0, 0> because its right direction is east. If the robot turned 90 degees counterclockwise, its right vector would be <0, 0, 1>. If the robot was facing a bering of 45 degrees and was climbing a 20 degree grade, its right vector would be <cos(45), sin(20), sin(45)> / sqrt(cos(45)^2 + sin(20)^2 + sin(45)^2).\n\n    * `state_dict[\"gyroscope\"][\"up\"]`: Unit vector pointing up RELATIVE to the robot. Same idea as before.\n\n    * `state_dict[\"gyroscope\"][\"forward\"]`: Unit vector pointing up RELATIVE to the robot. Same idea as before.\n\n  * `state_dict[\"lidar\"]`: Array containing distance to any object at 1 degree increments. `state_dict[\"lidar\"][0]` would describe how many meters of clearance the robot has in front of itself, `state_dict[\"lidar\"][90]` would describe its clearance to the right, and so on. If the robot has more than 100 meters of clearance in a particular direction, the value will capped at 100. In future updates, lidar upgrades might include an increase in range or density for in-game currency. Vertical FOV will be coming soon.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/griffinteller/abrconnection", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "abrconnection", "package_url": "https://pypi.org/project/abrconnection/", "platform": "", "project_url": "https://pypi.org/project/abrconnection/", "project_urls": {"Homepage": "https://github.com/griffinteller/abrconnection"}, "release_url": "https://pypi.org/project/abrconnection/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "An interface between Python and Autonomous Battle Royale", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># abrconnection\nAn interface between Python and Autonomous Battle Royale\n&lt;br&gt;\n&lt;br&gt;\nDocumentation (ABR v0.0.3): &lt;br&gt;&lt;br&gt;</p>\n<ul>\n<li>Coordinate system is left-handed, with x being east, y being upwards, and z being north.</li>\n<li><cite>RobotConnection()</cite>: class which handles connection to the game. Should be instantiated at beginning of script, and method <cite>connect()</cite> should be called immediately after. <cite>disconnect()</cite> ends connection.</li>\n<li><cite>RobotConnection.set_tire_torque(tire_name, torque)</cite>: sets torque of tire <cite>tire_name</cite> to <cite>torque</cite>. Current tire names are \u201cBackLeft\u201d, \u201cBackRight\u201d, \u201cFrontLeft\u201d, and \u201cFrontRight.\u201d</li>\n<li><cite>RobotConnection.set_tire_steering(tire_name, bering)</cite>: sets tire <cite>tire_name</cite> to <cite>bering</cite>. All angles/berings are clockwise off of vertical (unity\u2019s coordinate system is left-handed).</li>\n<li><cite>RobotConnection.state_dict</cite>: Dictionary/Hashtable containing information about the state of the robot.<ul>\n<li>Vectors are stored as dictionaries with keys <cite>\u201cx\u201d</cite>, <cite>\u201cy\u201d</cite>, and <cite>\u201cz\u201d</cite>.</li>\n<li><cite>state_dict[\u201cgps\u201d]</cite>: Sensor containing position information of the robot.<ul>\n<li><cite>state_dict[\u201cgps\u201d][\u201cposition\u201d]</cite>: Vector containing current position of robot relative to starting point.</li>\n</ul>\n</li>\n<li><cite>state_dict[\u201cgyroscope\u201d]</cite>: Sensor containing rotation information of the robot:<ul>\n<li><cite>state_dict[\u201cgyroscope\u201d][\u201cright\u201d]</cite>: Unit vector pointing right RELATIVE to the robot. For example, if the robot was facing in the default direction, its right vector would be &lt;1, 0, 0&gt; because its right direction is east. If the robot turned 90 degees counterclockwise, its right vector would be &lt;0, 0, 1&gt;. If the robot was facing a bering of 45 degrees and was climbing a 20 degree grade, its right vector would be &lt;cos(45), sin(20), sin(45)&gt; / sqrt(cos(45)^2 + sin(20)^2 + sin(45)^2).</li>\n<li><cite>state_dict[\u201cgyroscope\u201d][\u201cup\u201d]</cite>: Unit vector pointing up RELATIVE to the robot. Same idea as before.</li>\n<li><cite>state_dict[\u201cgyroscope\u201d][\u201cforward\u201d]</cite>: Unit vector pointing up RELATIVE to the robot. Same idea as before.</li>\n</ul>\n</li>\n<li><cite>state_dict[\u201clidar\u201d]</cite>: Array containing distance to any object at 1 degree increments. <cite>state_dict[\u201clidar\u201d][0]</cite> would describe how many meters of clearance the robot has in front of itself, <cite>state_dict[\u201clidar\u201d][90]</cite> would describe its clearance to the right, and so on. If the robot has more than 100 meters of clearance in a particular direction, the value will capped at 100. In future updates, lidar upgrades might include an increase in range or density for in-game currency. Vertical FOV will be coming soon.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6990230, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6e497f1286344de91c406e3afba96365", "sha256": "37268d8806ad470f6f5cf828f79eb49b3b22b762b0f2642e90a4c6b60f6b870d"}, "downloads": -1, "filename": "abrconnection-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6e497f1286344de91c406e3afba96365", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4488, "upload_time": "2020-04-06T04:43:24", "upload_time_iso_8601": "2020-04-06T04:43:24.271402Z", "url": "https://files.pythonhosted.org/packages/bc/70/e746ed1e36218602b8a6521aed846239004ba8edf88b53634a6ba1e4c3d7/abrconnection-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6009503ef0de2fb9939a1c65940a897c", "sha256": "8e53def21bc5d14d9d35edefcfe1391cc7b24b52b86521eab47d8d476060dfae"}, "downloads": -1, "filename": "abrconnection-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6009503ef0de2fb9939a1c65940a897c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3440, "upload_time": "2020-04-06T04:43:26", "upload_time_iso_8601": "2020-04-06T04:43:26.476273Z", "url": "https://files.pythonhosted.org/packages/9c/c1/cef7176159c3d6d6e5d1458d9dce133f1a132a3b45621dcfe384921dea64/abrconnection-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7b2080d15f4451d94764272ed4daacb1", "sha256": "5369981a9f527ee67542a60b42cfb9c2ed7df30c8c4471dc46af9312ca743f08"}, "downloads": -1, "filename": "abrconnection-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7b2080d15f4451d94764272ed4daacb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4489, "upload_time": "2020-04-06T04:57:47", "upload_time_iso_8601": "2020-04-06T04:57:47.192621Z", "url": "https://files.pythonhosted.org/packages/d3/16/5f592ee82abfaaaf2f842c716f4d2780a408906fdf10e04343bedb4febec/abrconnection-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfd39926e0a079639b07fd79939adcbc", "sha256": "888339700aca7af1ad597c6956553137d84564a6d260bcf33d1503321c20c878"}, "downloads": -1, "filename": "abrconnection-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bfd39926e0a079639b07fd79939adcbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3437, "upload_time": "2020-04-06T04:57:48", "upload_time_iso_8601": "2020-04-06T04:57:48.094886Z", "url": "https://files.pythonhosted.org/packages/f5/cb/4bbb0263623ad1b9d810d164ac8868ea72c16920c4e393bffe90691ff6ad/abrconnection-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a4181a7104825532b221502674b1b90f", "sha256": "9eb7d89917ee6e6dbbca28fbdcf9ae43ab33df4f354410e003b63277b91a5d16"}, "downloads": -1, "filename": "abrconnection-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a4181a7104825532b221502674b1b90f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4516, "upload_time": "2020-04-06T22:36:40", "upload_time_iso_8601": "2020-04-06T22:36:40.275049Z", "url": "https://files.pythonhosted.org/packages/2f/11/a09a889751435afca81adb70d006248a9d87bf4650903087a20066c7afe3/abrconnection-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82a85debc751a1ccf638f763f54b8859", "sha256": "98f4d9e462adf321f9eb7716639690abae5bb51835d8b4f501d27b59f6d15914"}, "downloads": -1, "filename": "abrconnection-0.0.3.tar.gz", "has_sig": false, "md5_digest": "82a85debc751a1ccf638f763f54b8859", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3460, "upload_time": "2020-04-06T22:36:41", "upload_time_iso_8601": "2020-04-06T22:36:41.200851Z", "url": "https://files.pythonhosted.org/packages/55/0a/eb644e064e8c372eecd19610a80083146c5752fbc5648f2fd383cd0a69f8/abrconnection-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "77a1f7393def99f4265ab4591afa922a", "sha256": "3830b9dc228267366e8642c75dce62d5e861ab695ba4cec190a8f5fea2d4691d"}, "downloads": -1, "filename": "abrconnection-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "77a1f7393def99f4265ab4591afa922a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4520, "upload_time": "2020-04-10T01:51:30", "upload_time_iso_8601": "2020-04-10T01:51:30.544193Z", "url": "https://files.pythonhosted.org/packages/95/b9/bda6da730a969662e6400009988cd35b43d063db20d4aa5cb75d251c4d29/abrconnection-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "676a9096aedd3950369e1371480b94b2", "sha256": "f2da952b58d50e2c7c9ef69d57a1bfdd8b21a49d03239314f414d54ae6e44876"}, "downloads": -1, "filename": "abrconnection-0.1.0.tar.gz", "has_sig": false, "md5_digest": "676a9096aedd3950369e1371480b94b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3483, "upload_time": "2020-04-10T01:51:31", "upload_time_iso_8601": "2020-04-10T01:51:31.971804Z", "url": "https://files.pythonhosted.org/packages/df/8a/6f60b17499ae8b06cb07b1f764ab22f606348d6b06dea0edb756655d8b06/abrconnection-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77a1f7393def99f4265ab4591afa922a", "sha256": "3830b9dc228267366e8642c75dce62d5e861ab695ba4cec190a8f5fea2d4691d"}, "downloads": -1, "filename": "abrconnection-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "77a1f7393def99f4265ab4591afa922a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4520, "upload_time": "2020-04-10T01:51:30", "upload_time_iso_8601": "2020-04-10T01:51:30.544193Z", "url": "https://files.pythonhosted.org/packages/95/b9/bda6da730a969662e6400009988cd35b43d063db20d4aa5cb75d251c4d29/abrconnection-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "676a9096aedd3950369e1371480b94b2", "sha256": "f2da952b58d50e2c7c9ef69d57a1bfdd8b21a49d03239314f414d54ae6e44876"}, "downloads": -1, "filename": "abrconnection-0.1.0.tar.gz", "has_sig": false, "md5_digest": "676a9096aedd3950369e1371480b94b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3483, "upload_time": "2020-04-10T01:51:31", "upload_time_iso_8601": "2020-04-10T01:51:31.971804Z", "url": "https://files.pythonhosted.org/packages/df/8a/6f60b17499ae8b06cb07b1f764ab22f606348d6b06dea0edb756655d8b06/abrconnection-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:58 2020"}