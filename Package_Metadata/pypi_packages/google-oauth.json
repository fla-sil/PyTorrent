{"info": {"author": "Dominik Miedzi\u0144ski", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Internet"], "description": "Google OAuth Service\n********************\n\n.. image:: https://img.shields.io/travis/miedzinski/google-oauth.svg\n    :target: https://travis-ci.org/miedzinski/google-oauth/builds\n.. image:: https://img.shields.io/codecov/c/github/miedzinski/google-oauth.svg\n    :target: https://codecov.io/github/miedzinski/google-oauth\n\n``google-oauth`` aims to implement Google OAuth2.\n\nInstallation\n============\n\nRequires Python 2.7 or 3.3+.\n\nUse ``pip``:\n\n    $ pip install google-oauth\n\nOr download code rom GitHub and install it manually with ``setuptools``:\n\n    $ git clone https://github.com/miedzinski/google-oauth2-service.git\n    $ cd google-oauth\n    $ python setup.py install\n\nIn case of ``pyOpenSSL`` build failing, install openssl headers.\nOn Debian based distributions:\n\n    $ apt-get install libssl-dev\n\nUsage\n=====\n\nAt this moment, there is only `Server to Server` flow implemented.\n\nOAuth2 for service accounts\n---------------------------\n\nFirst, create ``ServiceAccount`` object. The best way to achieve this\nis using one of two classmethods:\n\n    - ServiceAccount.from_json\n    - ServiceAccount.from_pkcs12\n\nGoogle recommends JSON key format, so we will use it.\nBoth methods are documented in source code.\n\n    >>> key = json.load(open('/path/to/credentials.json'))\n    >>> auth = ServiceAccount.from_json(key=key, scopes=scope)\n    >>> auth.access_token\n\nAnd that's it - OAuth2 access token is available as ``access_token`` property.\nIf you think token's lifetime will be longer than object's, you can cache it\nin file or database of your choice.\nOtherwise, you can use a ``GoogleService.authorized_request``, which is\na handy shortcut to ``requests.request`` with proper ``Authorization`` header.\nSubsequent calls to this method won't request new access tokens unless\nprevious one expired.\n\nLet's search for Guuido van Rossum on Google+\n\n    >>> scope = 'https://www.googleapis.com/auth/plus.login'\n    >>> url = 'https://www.googleapis.com/plus/v1/people' \\\n    >>>         '?query=Guuido+van+Rossum'\n    >>> resp = auth.authorized_request(method='get', url=url)\n\n``resp`` is now an instance of ``requests.Response``, from which we can\nextract all the data we need.\n\nDocumentation\n=============\n\nSource code is fully documented with docstrings.\n\nTODO\n====\n\n- Implement three-legged OAuth2 (for web server applications).\n\nContributing\n============\n\nAll contributors are welcome! Make sure the tests pass and don't forget\nto write your own tests if you code new stuff.\nIf you want to submit a patch, use GitHub pull requests.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miedzinski/google-oauth", "keywords": "google oauth oauth2 api service jwt", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "google-oauth", "package_url": "https://pypi.org/project/google-oauth/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/google-oauth/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/miedzinski/google-oauth"}, "release_url": "https://pypi.org/project/google-oauth/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "OAuth2 for Google APIs", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/miedzinski/google-oauth/builds\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/miedzinski/google-oauth.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67f66779508cc820306d2e8702cfc209f6f08c39/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6965647a696e736b692f676f6f676c652d6f617574682e737667\"></a>\n<a href=\"https://codecov.io/github/miedzinski/google-oauth\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/miedzinski/google-oauth.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca279438f8ca7498d11635931d221aa511158266/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6965647a696e736b692f676f6f676c652d6f617574682e737667\"></a>\n<p><tt><span class=\"pre\">google-oauth</span></tt> aims to implement Google OAuth2.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Requires Python 2.7 or 3.3+.</p>\n<p>Use <tt>pip</tt>:</p>\n<blockquote>\n$ pip install google-oauth</blockquote>\n<p>Or download code rom GitHub and install it manually with <tt>setuptools</tt>:</p>\n<blockquote>\n$ git clone <a href=\"https://github.com/miedzinski/google-oauth2-service.git\" rel=\"nofollow\">https://github.com/miedzinski/google-oauth2-service.git</a>\n$ cd google-oauth\n$ python setup.py install</blockquote>\n<p>In case of <tt>pyOpenSSL</tt> build failing, install openssl headers.\nOn Debian based distributions:</p>\n<blockquote>\n$ apt-get install libssl-dev</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>At this moment, there is only <cite>Server to Server</cite> flow implemented.</p>\n<div id=\"oauth2-for-service-accounts\">\n<h3>OAuth2 for service accounts</h3>\n<p>First, create <tt>ServiceAccount</tt> object. The best way to achieve this\nis using one of two classmethods:</p>\n<blockquote>\n<ul>\n<li>ServiceAccount.from_json</li>\n<li>ServiceAccount.from_pkcs12</li>\n</ul>\n</blockquote>\n<p>Google recommends JSON key format, so we will use it.\nBoth methods are documented in source code.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; key = json.load(open('/path/to/credentials.json'))\n&gt;&gt;&gt; auth = ServiceAccount.from_json(key=key, scopes=scope)\n&gt;&gt;&gt; auth.access_token\n</pre>\n</blockquote>\n<p>And that\u2019s it - OAuth2 access token is available as <tt>access_token</tt> property.\nIf you think token\u2019s lifetime will be longer than object\u2019s, you can cache it\nin file or database of your choice.\nOtherwise, you can use a <tt>GoogleService.authorized_request</tt>, which is\na handy shortcut to <tt>requests.request</tt> with proper <tt>Authorization</tt> header.\nSubsequent calls to this method won\u2019t request new access tokens unless\nprevious one expired.</p>\n<p>Let\u2019s search for Guuido van Rossum on Google+</p>\n<blockquote>\n<pre>&gt;&gt;&gt; scope = 'https://www.googleapis.com/auth/plus.login'\n&gt;&gt;&gt; url = 'https://www.googleapis.com/plus/v1/people' \\\n&gt;&gt;&gt;         '?query=Guuido+van+Rossum'\n&gt;&gt;&gt; resp = auth.authorized_request(method='get', url=url)\n</pre>\n</blockquote>\n<p><tt>resp</tt> is now an instance of <tt>requests.Response</tt>, from which we can\nextract all the data we need.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Source code is fully documented with docstrings.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Implement three-legged OAuth2 (for web server applications).</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>All contributors are welcome! Make sure the tests pass and don\u2019t forget\nto write your own tests if you code new stuff.\nIf you want to submit a patch, use GitHub pull requests.</p>\n</div>\n\n          </div>"}, "last_serial": 2034771, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3eceabd50edfa0d9f223cd25c13b02ae", "sha256": "08ec0808701e43b9520510722c5b812e7bffbc5f4c2a4a19008b650e4da5ffa8"}, "downloads": -1, "filename": "google-oauth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3eceabd50edfa0d9f223cd25c13b02ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5674, "upload_time": "2016-03-28T20:46:22", "upload_time_iso_8601": "2016-03-28T20:46:22.208115Z", "url": "https://files.pythonhosted.org/packages/03/1a/60e91ec9c5576cd9f72626c6102785aaa6df4599cb9dc8abf4fc993ab9ac/google-oauth-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "433fd30d6e15c0e315accf9b4e3d8c21", "sha256": "5d26c0d995aafd5f4884424159146c81569b9762ed9516d9fd13c7d6c11cc5aa"}, "downloads": -1, "filename": "google-oauth-1.0.1.tar.gz", "has_sig": false, "md5_digest": "433fd30d6e15c0e315accf9b4e3d8c21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5622, "upload_time": "2016-03-28T21:01:26", "upload_time_iso_8601": "2016-03-28T21:01:26.163015Z", "url": "https://files.pythonhosted.org/packages/f9/4d/bbf432c241095672133a4f22363c0e3937520e480f9e7bd6a3e330526c0f/google-oauth-1.0.1.tar.gz", "yanked": false}], "1.0.1": []}, "urls": [], "timestamp": "Fri May  8 00:55:35 2020"}