{"info": {"author": "Count Technologies LTD", "author_email": "hello@count.co", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Count API Documentation\n\nHarness the exploration, collaboration, and visualisation capabilities of the [count.co](https://count.co) web service in your workflow with the *Count API* package for Python.\n\nThis project contains an API client for the [count.co](https://count.co) web service, providing methods for authentication, data upload, and data visualisation. \n\n# Requirements\n\nPython 2 or 3\n\nOptimised for Jupyter Notebook environment\n\nPackages installed as dependencies:\n\n- [requests](http://docs.python-requests.org/en/master/)\n- [protobuf](https://pypi.org/project/protobuf/)\n\n# Supported versions\n\nPython 2.7, 3.4, 3.5, 3.6.0, 3.6\n\n# Access\n\nIn order to use the Count API module, you need to generate a token in your accounts page on [count.co](https://count.co). \n\n# Installation\n\nIn your terminal, you can use pip to install count: \n\n  - `pip install count_api`\n  - `pip3 install count_api`\n\n## Import\n\n    from count_api import CountAPI\n\n## Initialise\n```python\ntoken = \"TOKEN GENERATED FROM COUNT.CO ADMIN PAGE\"\ncount = CountAPI()\ncount.set_api_token(token)\n```\n\n# Load data to Count\n\n## Tables\n\nIn the Count API, tables are objects that represent the data you are sending to Count.\n\n```python\n#Upload a File (.csv or .txt)\npath = 'Users/me/Downloads/norweiganCarSales.csv'\ntable = count.upload(path=path, name='MyTableName')\n\n#Upload a dataframe\ndf = pd.read_csv('norweiganCarSales.csv')\ntable = count.upload(data=df, name='MyTableName')\n\n#Upload raw data\ntable = count.upload(data='Column1,Column2,Column3\\n1,10,100\\n2,20,200', name='MyTableName')\n```\n\n## Previewing table contents\nThe first rows of a table can be printed to screen by using the `table.head(rows,columns)` method, e.g.\n```python\ntable.head()\n```\n\nThe last rows of a table can be printed to screen by using the `table.tail(rows,columns)` method, e.g.\n```python\ntable.tail()\n```\n\nYou can also find the number of rows in a column via \n```python\ntable.size()\n```\nwhich returns a tuple of ints `(number_of_rows, number_of_columns)`.\n## Generate Count URL\n\nIf you want to visualise your table in Count, you'll need the URL. See the example scripts on examples of how to best use this URL to distribute to your team, and visualise for yourself. \n\n```python\nurl = table.url()\n```\n\n# Create a Visual\n\n## Visuals\n\nLike Table objects, Visual objects are created to represent a visual you have created with the `table.upload_visual` method. The `table.upload_visual` method contains the following parameters;\n\n- `x`, `y`, `size`, `color`: specify which column to plot on each axis, via the name of the column or the column object itself\n- `aggregates`: a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the aggregate to perform on each column. For example, for performing a `sum` on a column named 'ColumnName1' and an 'avg' on a column named `ColumnName2`, you can use `{'ColumnName1' : 'sum', 'ColumnName2' : 'avg'}`\n- `groupings`: a tuple/list of tuples/dict of the groupings to apply to a column. For example, to group a `datetime` column by month you can use `{'ColumnName1': 'month'}`\n- `filters`: a tuple/list of tuples/dict of the filters to apply to a column. For example, for filtering on a `datetime` colum named 'Year' for values between the year 2007 and 2012, you can use `[('Year', '>=', (2007,)), ('Year', '<=', (2012,)]\n- `chart_options`: a dict of chart options allowing specification of axis-scale e.g. `{'x_type' : 'linear', 'y_type': 'log'}`; chart type  `{'type' : 'circle'}`.\n\nA full example snippet is shown below:\n\n```python\nvisual = table.upload_visual(x = 'Year',\n                             y = 'Quantity',\n                             color = 'Type',\n                             filters=[('Year', '>=', (2007,1,1)), ('Year', '<=', (2012,1))]\n                             aggregates = {'Quantity', 'sum'},\n                             chart_options = {'y_type': 'linear', 'chart_type': 'line'}\n                            )\n```\n\n## Selecting columns\n\nTo create a visual, you will need to reference the columns in the Table object. Column references are used for selecting axes `x`,`y`,`color`,`size`, constructing the `filters`, selecting `aggregates` and `groupings`.\n\nCountAPI provides several ways to reference a column in the table.\n\n```python\nq_columns = table.columns('Quantity') # List of Column objects for columns with title matching string 'Quantity'\nq_column  = table['Quantity']         # Column object of first column with title matching string 'Quantity'\ncol_type = table.column('Type')       # Column object of first column with title matching string 'Type'\nfirst_column = table[0]               # Column object of first column in table\nfirst_column = table.column(0)        # Column object of first column in table\n```\n\nYou can also use the column name directly in the `upload_visual` signature itself, as shown in the example in the [link](#Visuals) section. Referencing columns directly via their names is equivalent to using the `table['ColumnName']` form shown above.\n\n## Axes\n\nVisuals on [count.co](https://count.co) can have the following axes: `x`, `y`, `size`, `color`. \n\n## Filters\n\nFilters can be represented as a tuple, a lists of tuples, or a dict object. The syntax has been designed to give as much flexibility to the user as possible. The `filters` parameter is typically formed of a singular or repeated units of column reference, comparator string, and value.\n\n### Comparators\n\nAvailable comparator strings are\n- For strings:\n    - 'IN', 'NOT_IN'\n- For numbers:\n    - '>', '>=', '<', '<=', '!=', '=', 'IN', 'NOT_IN'\n\nNote that\n- For a single column, each of '>'/'>=' or '<'/'<=' can only appear once\n- '='/'!=' can only appear once for each column. Consider using 'IN'/'NOT_IN' for multiple equalities/inequalities\n- Only '>'/'>=' and '<'/'<=' operators can be combined in 'OR' operations\n\n### Datetime values\n\nColumns of type `'datetime'` have extra flexibilty with regards to values in filters. Values in \na datetime column can of types:\n- `datetime` objects from the python [datetime](https://docs.python.org/3/library/datetime.html) module\n- tuples of 1-3 integers: `(year,)`, `(year, month,)`, `(year, month, day)`\n- integer miliseconds since the [epoch](https://en.wikipedia.org/wiki/Unix_time) 01/01/1970\n\n### Tuple syntax\n\nThe below examples are all equivalent\n```python\nfrom datetime import datetime \n...\nfilters=('Year', '>', datetime(2016,1,1))\n...\nfilters=('Year', '>', (2016,1,1))\n...\nfilters=(table['Year'], '>', (2016,1,1))\n```\n\n### List of tuples syntax\n\nThe below examples are all equivalent\n```python\nfilters=[('NumberColumn1', '<=', 10), ('NumberColumn1', '>=', 5)]\n...\nfilters=[('NumberColumn1', '<=', 10, 'AND', '>=', 5)]\n```\n\nFurther examples include filters on multiple columns\n```python\nfilters=[('NumberColumn1', '<=', 10), ('StringColumn1', 'IN', ['blah', 'foo'])]\n```\n\n### Dict syntax\n\n```python\nfilters={'NumberColumn1': [('<=', 10), ('>=', 5)], table['StringColumn1']: ('IN', ['blah', 'foo'])}\n```\n\n### AND and OR\n\nFilters can be combined via 'OR' or 'AND'. Filters specied via a list of tuples (see above) are combined by 'AND' by default. To use 'OR', the following syntax is accepted\n```python\n...\nfilters=[('NumberColumn1', '<=', 10, 'OR', '>=', 5)]\n```\n\nNote that 'OR' can only be used once per column and cannot be combined with 'AND' on the same column.\n\n## Aggregates\n\nAggregates can be selected for a particular column using the `aggregates` parameter. The `aggregates` parameter accepts a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the aggregate to perform on each column. \n\nFor example the following are equivalent\n```python\naggregates = ('ColumnName1', 'sum')\n...\naggregates = (table['ColumnName1'], 'sum')\n...\naggregates = [('ColumnName1', 'sum')]\n...\naggregates = {'ColumnName1' : 'sum'}\n```\n\nAggregate options (case insensitive):\n\n- For `string` type columns: 'number', 'distinct', 'min', 'max'\n- For `int`, `double` and `datetime` type columns: 'number', 'distinct', 'min', 'max', 'med', 'sum', 'avg', 'med'\n\nNote that you cannot use both grouping and aggregate on a column.\n\n## Groupings\n\nGroupings can be selected for a particular column using the `groupings` parameter. The `groupings` parameter accepts a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the grouping to perform on each column. \n\nGrouping options (case insensitive):\n- For `int`, `double` type columns: 'auto'\n- For `datetime` type columns: 'year', 'month', 'week', 'day', 'hour', 'minute', 'second'\n\nNote that you cannot use both grouping and aggregate on a column.\n\n## Set chart options\nChart options can be set using the `chart_options` dict parameter. Options that can be set include\n- `x_type`, `y_type`, `size_type`, `color_type`: set scale of the axis to be either `linear` or `log` e.g. `{'x_type' : 'linear'}`. Note that this cannot be set for an axis representing a 'string' or 'datetime' column. Default is `linear` for number columns.\n- `type`: set chart type to be one of `line`,`bar`,`circle`,`area`, `auto` e.g `{'type' : 'circle'}`\n\n## Embedding a visual\nOnce a Visual object has been created, it can be embedded within a Jupyter notebook with the \n```python\nvisual.embed()\n```\nmethod, which returns an IFrame of the embedded representation of the chart on [count.co](https://count.co).\n\n## Chart sharing\nA visual can be shared by using the\n```python\nvisual.url()\n```\nmethod. This returns a string url of the full visual url on [count.co](https://count.co).\n\n# Manage your data in Count\n\n## Overwrite an existing table\n\n```python\ntable = count.upload(data=pd, name = 'MyTableName', overwrite_key = 'TwPhiNcdxc7')\n```\n\nor if the Table object is still in memory,\n\n```python\ntable = table.overwite(data=pd, name = 'MyTableName')\n```\n\n## Append to an existing table\n\n```python\ntable = count.upload(data=pd, name = 'MyTableName', append_key = 'TwPhiNcdxc7')\n```\n\nor if the Table object is still in memory,\n\n```python\ntable = table.append(data=pd, name = 'MyTableName')\n```\n\nNote that the new data being appended\n- must have a header row\n- must have the same number of columns as the original table\n- must have the same column types as the original column\n\n## Column types\n\nColumn types of a data file/blob are automatically interpreted on upload to [count.co](http://count.co). Possible column types are\n\n- `int`: column of integer values\n- `double`: column of floating point values\n- `datetime`: column of datetime values\n- `string`: column of words\n\nShould you wish to force a column to be of a particular type, it is possible to do this by specifying the `column_types` list parameter on `count.upload` or `table.overwrite`, for example to specify the first 4 column types of a dataset with more than 4 columns:\n\n```python\ntable = count.upload(data=pd, name = 'MyTableName', column_types=['int', 'double', 'double', 'datetime'])\n```\n\nNote that\n- `column_types` parameter cannot be used in conjunction with append methods\n- columns that cannot be interpreted as either `int`, `double`, or `datetime` will be interpreted as `string` columns\n- if used in conjunction with `column_names` parameter, the length of both lists must be the same\n\n## Column names\n\nDefault column names are taken from the first header of the of the file/data uploaded. Column names can be overridden by specifying the `column_names` list parameter on `count.upload` or `table.overwrite`, for example to specify the first 4 column names of a dataset with more than 4 columns:\n\n```python\ntable = count.upload(data=pd, name = 'MyTableName', column_types=['MyColumn1', 'MyColumn2', 'MyColumn3', 'MyColumn4'])\n```\n\nNote that\n- `column_names` parameter cannot be used in conjunction with append methods\n- if used in conjunction with `column_names` parameter, the length of both lists must be the same\n\n## Delete a table\n\nThis deletes a table on [count.co](http://count.co). As such, any operations on a deleted table will throw error with 404 status code \n```python\ntable.delete()\ncount.delete_table('TwPhiNcdxc7')\n```\n---\n# A Full Example:\n```python\nimport pandas as pd\nfrom count_api import CountAPI\n\ntoken = \"Use token generated from Count Admin page\"\ncount = CountAPI()\ncount.set_api_token(token)\n\n#Upload a dataframe\ndf = pd.read_csv('norweiganCarSales.csv')\ntable = count.upload(data=df,name = 'Car Sales in Norway')\n\n#You can view the table and create your own visuals in Count using the table.url() method\nurl = table.url()\n\n#Preview first 10 lines of table\ntable.head()\n\n#Get size of table\ntable.size()\n\n# Create visual of chart of SUM('Quantity') vs 'Year' separated by color for 'Type'\n# for year between 2007 and end of 2016\n# with linear scale for y-axis, and line chart type\nvisual = table.upload_visual(x = 'Year',\n                             y = 'Quantity',\n                             color = 'Type',\n                             aggregates = {'Quantity' : 'sum'},\n                             filters=[('Year','>=',(2007,)),('Year','<=',(2016,))]\n                             chart_options = {'y_type':'linear', 'chart_type': 'line'}\n                            )\n\n\n# Get visual url\nvisual.url()\n\n#If using Jupyter notebook, you can also embed a chart via\nvisual.embed()\n\n#Delete table on count.co if no longer needed\ntable.delete()\n\n```\n---\n\n# Technical Documentation\n\n## CountAPI\nCountAPI class containing the following methods:\n- `set_api_token(api_token)`\n  - Sets API token obtained from [count.co](https://count.co).\n  - `api_token`: String API token \n- `upload(path = None, name = None, data = None, overwrite_key = None)`\n  - Uploads csv file from path or csv data from str (keyword arg only method).\n  - `path`: String filepath to the .csv or .xls(x). Cannot be used in conjunction with `path`.\n  - `data`: String csv data to upload. Cannot be used in conjunction with `path`.\n  - `name`: String name of table.\n  - `overwrite_key`: String key of the table for which you would like to replace the data.\n  - `append_key`: String key of the table to which you would like to append data.\n  - `column_types`: List of strings of column types. Acceptable types of column type are 'string', 'int', 'double', and 'datetime'.\n  - `column_names`: List of strings of column names.\n  - if `column_names`/`column_types` have length greater than the number of columns in the table, the extra enties are ignored.\n  - `column_names`: and `column_types` must have same length if both are set.\n  - `column_names` and `column_types` cannot be used in conjuction with `append_key`\n  - `Return`: Table object.\n- `delete_table(table_key)`:\n    - Deletes specified table from [count.co](https://count.co) server.\n    - `table_key`: String table key.\n- `table(table_key)`:\n    - Get a table object from an existing table key.\n    - `table_key`: String table key.\n    - `Return`: Table Object.\n\n## Table\nTable class containing the following methods:\n- `[index]`:\n  - Get Column object from column index.\n  - `index`: Integer index of column\n  - `Return`: Column Object.\n- `[name]`:\n  - Get Column object from column name. Returns first column found with header matching name.\n  - `name`: String column name.\n  - `Return`: Column Object.\n- `append(path = None, data = None)`:\n  - Appends csv file from path or csv data from str (keyword arg only method) to existing table. New table must match column types of existing table.\n  - `path`: String filepath to the .csv or .xls(x). Cannot be used in conjunction with `path`.\n  - `data`: String csv data to upload. Cannot be used in conjunction with `path`.\n  - `Return`: Self.\n- `column(index)`:\n  - Get Column object from column index.\n  - `index`: Integer index of column\n  - `Return`: Column Object.\n- `column(name)`:\n  - Get Column object from column name. Returns first column found with header matching name.\n  - `name`: String column name.\n  - `Return`: Column Object.\n- `columns(name = None)`:\n  - Get list of Column objects with headers matching name parameter. If name is defaulted, returns all columns in table.\n  - `Return`: List of Column Objects.\n- `delete()`:\n  - Deletes table from [count.co](https://count.co) server. Future references to this Table will be undefined.\n- `head(rows=10,columns=10)`:\n  - Prints first n rows of table\n  - `rows`: Integer number of rows requested. Max 100. Default 10.\n  - `columns`: Integer number of columns requested. Max 20. Default 10.\n- `tail(rows=10,columns=10)`:\n  - Prints last n rows of table\n  - `rows`: Integer number of rows requested. Max 100. Default 10.\n  - `columns`: Integer number of columns requested. Max 20. Default 10.\n- `overwrite(path = None, name = None, data = None, column_types = None, column_names = None)`:\n  - Uploads csv file from path or csv data from str (keyword arg only method), overwriting existing table. New table must match column types of existing table.\n  - `path`: String filepath to the .csv or .xls(x). Cannot be used in conjunction with `path`.\n  - `data`: String csv data to upload. Cannot be used in conjunction with `path`.\n  - `name`: String name of table.\n  - `column_types`: List of strings of column types. Acceptable types of column type are 'string', 'int', 'double', and 'datetime'.\n  - `column_names`: List of strings of column names.\n  - if `column_names`/`column_types` have length greater than the number of columns in the table, the extra enties are ignored.\n  - `column_names`: and `column_types` must have same length if both are set.\n  - `Return`: Self.\n- `size()`:\n  - Size of table as a tuple of ints (column_extent, row_extent)\n  - `Return`: Tuple (int, int)\n- `upload_visual(x = None, y = None, color = None, size = None, label = None, aggregates = None, filters = None, groupings = None, chart_options = None)`:\n  - Uploads chart visual to [count.co](https://count.co).\n  - `x`: Column object/string column name to be used for x-axis\n  - `y`: Column object/string column name to be used for y-axis\n  - `color`: Column object/string column name to be used for color-axis\n  - `size`: Column object/string column name to be used for size-axis           \n  - `label`: Column object/string column name to be used for label-axis\n  - `aggregates`: Tuple/list of tuples/dictionary of aggregates to be applied to columns.\n  - `filters`: Tuple/list of tuples/dictionary of filters to be applied to columns.\n  - `groupings`: Tuple/list of tuples/dictionary of groupings to be applied to columns.\n  - `chart_options`: Dictionary of chart options to be applied. Accepted dict keys:values:\n    - `type`: `line`,`bar`,`circle`,`area`, `auto`\n    - `x_type`: `linear`, `log`\n    - `y_type`: `linear`, `log`\n    - `size_type`: `linear`, `log`\n    - `color_type`: `linear`, `log`\n  - `Return`: Visual object.\n- `url()`:\n  - Get url to table view on count.co.\n  - `Return`: String of URL.\n\n## Visual\nVisual class containing the following methods:\n- `embed()`:\n  - Returns IFrame to current visual. For use with interactive environments, e.g Jupyter notebooks.\n  - `Return` IFrame.\n- `download_csv()`:\n  - Download csv of visual on [count.co](https://count.co).\n  - Downloads to Downloads folder if path is defaulted.\n  - path: str download path.\n- `download_preview()`:\n  - Download png of visual on [count.co](https://count.co).\n  - Downloads to Downloads folder if path is defaulted.\n  - path: str download path.\n  - height: int pixels.\n  - width: int pixels.\n- `preview_url()`:\n  - Returns url to preview view on [count.co](https://count.co).\n  - `Return`: String.\n- `set_chart_options(dict: chart_option)`:\n  - Set chart options.\n  - `chart_options`: Dictionary of chart options to be applied. Accepted dict keys:values:\n    - `type`: `line`,`bar`,`circle`,`area`, `auto`\n    - `x_type`: `linear`, `log`\n    - `y_type`: `linear`, `log`\n    - `size_type`: `linear`, `log`\n    - `color_type`: `linear`, `log`\n  - `Return`: Self.\n- `url()`:\n  - Returns url to visual view on [count.co](https://count.co).\n  - `Return`: String.\n- `url_embed()`:\n  - Returns url to visual view on [count.co](https://count.co) suitable for embedding\n  - `Return`: String.\n\n## Column\nColumn class containing the following methods:\n\n- `aggregate(aggregate)`:\n  - Add aggregate function to Column object. Note: cannot perform both group_by and aggregate on the same Column object.\n  - `aggregate`: String aggregate\n      - str: ['DISTINCT', 'MIN', 'MAX', 'MED']\n      - other: ['DISTINCT', 'MIN', 'MAX', 'MED', 'SUM', 'AVG', 'STD', 'VAR', 'MED']\n  - `Return`: self\n- `filter(comparator, str or int or float or datetime: value)`:\n  - Returns Filter object with specified comparator and value\n  - `comparator`: String comparator. Available comparators are:\n    str: ['IN']\n    other : ['>', '>=', '<', '<=']\n  - `value`: string/integer/float/datetime value to compare against\n  - `Return`: self\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://count.co", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "count-api", "package_url": "https://pypi.org/project/count-api/", "platform": "", "project_url": "https://pypi.org/project/count-api/", "project_urls": {"Homepage": "https://count.co"}, "release_url": "https://pypi.org/project/count-api/3.1.9/", "requires_dist": ["requests", "protobuf (==3.5.1)", "future", "pyhamcrest", "six"], "requires_python": "", "summary": "API client for count.co", "version": "3.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Count API Documentation</h1>\n<p>Harness the exploration, collaboration, and visualisation capabilities of the <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> web service in your workflow with the <em>Count API</em> package for Python.</p>\n<p>This project contains an API client for the <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> web service, providing methods for authentication, data upload, and data visualisation.</p>\n<h1>Requirements</h1>\n<p>Python 2 or 3</p>\n<p>Optimised for Jupyter Notebook environment</p>\n<p>Packages installed as dependencies:</p>\n<ul>\n<li><a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">requests</a></li>\n<li><a href=\"https://pypi.org/project/protobuf/\" rel=\"nofollow\">protobuf</a></li>\n</ul>\n<h1>Supported versions</h1>\n<p>Python 2.7, 3.4, 3.5, 3.6.0, 3.6</p>\n<h1>Access</h1>\n<p>In order to use the Count API module, you need to generate a token in your accounts page on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</p>\n<h1>Installation</h1>\n<p>In your terminal, you can use pip to install count:</p>\n<ul>\n<li><code>pip install count_api</code></li>\n<li><code>pip3 install count_api</code></li>\n</ul>\n<h2>Import</h2>\n<pre><code>from count_api import CountAPI\n</code></pre>\n<h2>Initialise</h2>\n<pre><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s2\">\"TOKEN GENERATED FROM COUNT.CO ADMIN PAGE\"</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">CountAPI</span><span class=\"p\">()</span>\n<span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">set_api_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n</pre>\n<h1>Load data to Count</h1>\n<h2>Tables</h2>\n<p>In the Count API, tables are objects that represent the data you are sending to Count.</p>\n<pre><span class=\"c1\">#Upload a File (.csv or .txt)</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'Users/me/Downloads/norweiganCarSales.csv'</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'MyTableName'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Upload a dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'norweiganCarSales.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'MyTableName'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Upload raw data</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s1\">'Column1,Column2,Column3</span><span class=\"se\">\\n</span><span class=\"s1\">1,10,100</span><span class=\"se\">\\n</span><span class=\"s1\">2,20,200'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'MyTableName'</span><span class=\"p\">)</span>\n</pre>\n<h2>Previewing table contents</h2>\n<p>The first rows of a table can be printed to screen by using the <code>table.head(rows,columns)</code> method, e.g.</p>\n<pre><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<p>The last rows of a table can be printed to screen by using the <code>table.tail(rows,columns)</code> method, e.g.</p>\n<pre><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">()</span>\n</pre>\n<p>You can also find the number of rows in a column via</p>\n<pre><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n</pre>\n<p>which returns a tuple of ints <code>(number_of_rows, number_of_columns)</code>.</p>\n<h2>Generate Count URL</h2>\n<p>If you want to visualise your table in Count, you'll need the URL. See the example scripts on examples of how to best use this URL to distribute to your team, and visualise for yourself.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">()</span>\n</pre>\n<h1>Create a Visual</h1>\n<h2>Visuals</h2>\n<p>Like Table objects, Visual objects are created to represent a visual you have created with the <code>table.upload_visual</code> method. The <code>table.upload_visual</code> method contains the following parameters;</p>\n<ul>\n<li><code>x</code>, <code>y</code>, <code>size</code>, <code>color</code>: specify which column to plot on each axis, via the name of the column or the column object itself</li>\n<li><code>aggregates</code>: a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the aggregate to perform on each column. For example, for performing a <code>sum</code> on a column named 'ColumnName1' and an 'avg' on a column named <code>ColumnName2</code>, you can use <code>{'ColumnName1' : 'sum', 'ColumnName2' : 'avg'}</code></li>\n<li><code>groupings</code>: a tuple/list of tuples/dict of the groupings to apply to a column. For example, to group a <code>datetime</code> column by month you can use <code>{'ColumnName1': 'month'}</code></li>\n<li><code>filters</code>: a tuple/list of tuples/dict of the filters to apply to a column. For example, for filtering on a <code>datetime</code> colum named 'Year' for values between the year 2007 and 2012, you can use `[('Year', '&gt;=', (2007,)), ('Year', '&lt;=', (2012,)]</li>\n<li><code>chart_options</code>: a dict of chart options allowing specification of axis-scale e.g. <code>{'x_type' : 'linear', 'y_type': 'log'}</code>; chart type  <code>{'type' : 'circle'}</code>.</li>\n</ul>\n<p>A full example snippet is shown below:</p>\n<pre><span class=\"n\">visual</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">upload_visual</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s1\">'Year'</span><span class=\"p\">,</span>\n                             <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s1\">'Quantity'</span><span class=\"p\">,</span>\n                             <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">'Type'</span><span class=\"p\">,</span>\n                             <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2007</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2012</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))]</span>\n                             <span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Quantity'</span><span class=\"p\">,</span> <span class=\"s1\">'sum'</span><span class=\"p\">},</span>\n                             <span class=\"n\">chart_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'y_type'</span><span class=\"p\">:</span> <span class=\"s1\">'linear'</span><span class=\"p\">,</span> <span class=\"s1\">'chart_type'</span><span class=\"p\">:</span> <span class=\"s1\">'line'</span><span class=\"p\">}</span>\n                            <span class=\"p\">)</span>\n</pre>\n<h2>Selecting columns</h2>\n<p>To create a visual, you will need to reference the columns in the Table object. Column references are used for selecting axes <code>x</code>,<code>y</code>,<code>color</code>,<code>size</code>, constructing the <code>filters</code>, selecting <code>aggregates</code> and <code>groupings</code>.</p>\n<p>CountAPI provides several ways to reference a column in the table.</p>\n<pre><span class=\"n\">q_columns</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">(</span><span class=\"s1\">'Quantity'</span><span class=\"p\">)</span> <span class=\"c1\"># List of Column objects for columns with title matching string 'Quantity'</span>\n<span class=\"n\">q_column</span>  <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s1\">'Quantity'</span><span class=\"p\">]</span>         <span class=\"c1\"># Column object of first column with title matching string 'Quantity'</span>\n<span class=\"n\">col_type</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'Type'</span><span class=\"p\">)</span>       <span class=\"c1\"># Column object of first column with title matching string 'Type'</span>\n<span class=\"n\">first_column</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>               <span class=\"c1\"># Column object of first column in table</span>\n<span class=\"n\">first_column</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>        <span class=\"c1\"># Column object of first column in table</span>\n</pre>\n<p>You can also use the column name directly in the <code>upload_visual</code> signature itself, as shown in the example in the <a href=\"#Visuals\" rel=\"nofollow\">link</a> section. Referencing columns directly via their names is equivalent to using the <code>table['ColumnName']</code> form shown above.</p>\n<h2>Axes</h2>\n<p>Visuals on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> can have the following axes: <code>x</code>, <code>y</code>, <code>size</code>, <code>color</code>.</p>\n<h2>Filters</h2>\n<p>Filters can be represented as a tuple, a lists of tuples, or a dict object. The syntax has been designed to give as much flexibility to the user as possible. The <code>filters</code> parameter is typically formed of a singular or repeated units of column reference, comparator string, and value.</p>\n<h3>Comparators</h3>\n<p>Available comparator strings are</p>\n<ul>\n<li>For strings:\n<ul>\n<li>'IN', 'NOT_IN'</li>\n</ul>\n</li>\n<li>For numbers:\n<ul>\n<li>'&gt;', '&gt;=', '&lt;', '&lt;=', '!=', '=', 'IN', 'NOT_IN'</li>\n</ul>\n</li>\n</ul>\n<p>Note that</p>\n<ul>\n<li>For a single column, each of '&gt;'/'&gt;=' or '&lt;'/'&lt;=' can only appear once</li>\n<li>'='/'!=' can only appear once for each column. Consider using 'IN'/'NOT_IN' for multiple equalities/inequalities</li>\n<li>Only '&gt;'/'&gt;=' and '&lt;'/'&lt;=' operators can be combined in 'OR' operations</li>\n</ul>\n<h3>Datetime values</h3>\n<p>Columns of type <code>'datetime'</code> have extra flexibilty with regards to values in filters. Values in\na datetime column can of types:</p>\n<ul>\n<li><code>datetime</code> objects from the python <a href=\"https://docs.python.org/3/library/datetime.html\" rel=\"nofollow\">datetime</a> module</li>\n<li>tuples of 1-3 integers: <code>(year,)</code>, <code>(year, month,)</code>, <code>(year, month, day)</code></li>\n<li>integer miliseconds since the <a href=\"https://en.wikipedia.org/wiki/Unix_time\" rel=\"nofollow\">epoch</a> 01/01/1970</li>\n</ul>\n<h3>Tuple syntax</h3>\n<p>The below examples are all equivalent</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span> \n<span class=\"o\">...</span>\n<span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s1\">'Year'</span><span class=\"p\">],</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<h3>List of tuples syntax</h3>\n<p>The below examples are all equivalent</p>\n<pre><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n<span class=\"o\">...</span>\n<span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'AND'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n<p>Further examples include filters on multiple columns</p>\n<pre><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'StringColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'IN'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">])]</span>\n</pre>\n<h3>Dict syntax</h3>\n<pre><span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)],</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s1\">'StringColumn1'</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"s1\">'IN'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">])}</span>\n</pre>\n<h3>AND and OR</h3>\n<p>Filters can be combined via 'OR' or 'AND'. Filters specied via a list of tuples (see above) are combined by 'AND' by default. To use 'OR', the following syntax is accepted</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'NumberColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'OR'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n<p>Note that 'OR' can only be used once per column and cannot be combined with 'AND' on the same column.</p>\n<h2>Aggregates</h2>\n<p>Aggregates can be selected for a particular column using the <code>aggregates</code> parameter. The <code>aggregates</code> parameter accepts a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the aggregate to perform on each column.</p>\n<p>For example the following are equivalent</p>\n<pre><span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'ColumnName1'</span><span class=\"p\">,</span> <span class=\"s1\">'sum'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s1\">'ColumnName1'</span><span class=\"p\">],</span> <span class=\"s1\">'sum'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'ColumnName1'</span><span class=\"p\">,</span> <span class=\"s1\">'sum'</span><span class=\"p\">)]</span>\n<span class=\"o\">...</span>\n<span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'ColumnName1'</span> <span class=\"p\">:</span> <span class=\"s1\">'sum'</span><span class=\"p\">}</span>\n</pre>\n<p>Aggregate options (case insensitive):</p>\n<ul>\n<li>For <code>string</code> type columns: 'number', 'distinct', 'min', 'max'</li>\n<li>For <code>int</code>, <code>double</code> and <code>datetime</code> type columns: 'number', 'distinct', 'min', 'max', 'med', 'sum', 'avg', 'med'</li>\n</ul>\n<p>Note that you cannot use both grouping and aggregate on a column.</p>\n<h2>Groupings</h2>\n<p>Groupings can be selected for a particular column using the <code>groupings</code> parameter. The <code>groupings</code> parameter accepts a tuple/list of tuples/dict of the column-to-aggregrate mapping specifying the grouping to perform on each column.</p>\n<p>Grouping options (case insensitive):</p>\n<ul>\n<li>For <code>int</code>, <code>double</code> type columns: 'auto'</li>\n<li>For <code>datetime</code> type columns: 'year', 'month', 'week', 'day', 'hour', 'minute', 'second'</li>\n</ul>\n<p>Note that you cannot use both grouping and aggregate on a column.</p>\n<h2>Set chart options</h2>\n<p>Chart options can be set using the <code>chart_options</code> dict parameter. Options that can be set include</p>\n<ul>\n<li><code>x_type</code>, <code>y_type</code>, <code>size_type</code>, <code>color_type</code>: set scale of the axis to be either <code>linear</code> or <code>log</code> e.g. <code>{'x_type' : 'linear'}</code>. Note that this cannot be set for an axis representing a 'string' or 'datetime' column. Default is <code>linear</code> for number columns.</li>\n<li><code>type</code>: set chart type to be one of <code>line</code>,<code>bar</code>,<code>circle</code>,<code>area</code>, <code>auto</code> e.g <code>{'type' : 'circle'}</code></li>\n</ul>\n<h2>Embedding a visual</h2>\n<p>Once a Visual object has been created, it can be embedded within a Jupyter notebook with the</p>\n<pre><span class=\"n\">visual</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">()</span>\n</pre>\n<p>method, which returns an IFrame of the embedded representation of the chart on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</p>\n<h2>Chart sharing</h2>\n<p>A visual can be shared by using the</p>\n<pre><span class=\"n\">visual</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">()</span>\n</pre>\n<p>method. This returns a string url of the full visual url on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</p>\n<h1>Manage your data in Count</h1>\n<h2>Overwrite an existing table</h2>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">,</span> <span class=\"n\">overwrite_key</span> <span class=\"o\">=</span> <span class=\"s1\">'TwPhiNcdxc7'</span><span class=\"p\">)</span>\n</pre>\n<p>or if the Table object is still in memory,</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">overwite</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">)</span>\n</pre>\n<h2>Append to an existing table</h2>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">,</span> <span class=\"n\">append_key</span> <span class=\"o\">=</span> <span class=\"s1\">'TwPhiNcdxc7'</span><span class=\"p\">)</span>\n</pre>\n<p>or if the Table object is still in memory,</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that the new data being appended</p>\n<ul>\n<li>must have a header row</li>\n<li>must have the same number of columns as the original table</li>\n<li>must have the same column types as the original column</li>\n</ul>\n<h2>Column types</h2>\n<p>Column types of a data file/blob are automatically interpreted on upload to <a href=\"http://count.co\" rel=\"nofollow\">count.co</a>. Possible column types are</p>\n<ul>\n<li><code>int</code>: column of integer values</li>\n<li><code>double</code>: column of floating point values</li>\n<li><code>datetime</code>: column of datetime values</li>\n<li><code>string</code>: column of words</li>\n</ul>\n<p>Should you wish to force a column to be of a particular type, it is possible to do this by specifying the <code>column_types</code> list parameter on <code>count.upload</code> or <code>table.overwrite</code>, for example to specify the first 4 column types of a dataset with more than 4 columns:</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">,</span> <span class=\"n\">column_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'int'</span><span class=\"p\">,</span> <span class=\"s1\">'double'</span><span class=\"p\">,</span> <span class=\"s1\">'double'</span><span class=\"p\">,</span> <span class=\"s1\">'datetime'</span><span class=\"p\">])</span>\n</pre>\n<p>Note that</p>\n<ul>\n<li><code>column_types</code> parameter cannot be used in conjunction with append methods</li>\n<li>columns that cannot be interpreted as either <code>int</code>, <code>double</code>, or <code>datetime</code> will be interpreted as <code>string</code> columns</li>\n<li>if used in conjunction with <code>column_names</code> parameter, the length of both lists must be the same</li>\n</ul>\n<h2>Column names</h2>\n<p>Default column names are taken from the first header of the of the file/data uploaded. Column names can be overridden by specifying the <code>column_names</code> list parameter on <code>count.upload</code> or <code>table.overwrite</code>, for example to specify the first 4 column names of a dataset with more than 4 columns:</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'MyTableName'</span><span class=\"p\">,</span> <span class=\"n\">column_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'MyColumn1'</span><span class=\"p\">,</span> <span class=\"s1\">'MyColumn2'</span><span class=\"p\">,</span> <span class=\"s1\">'MyColumn3'</span><span class=\"p\">,</span> <span class=\"s1\">'MyColumn4'</span><span class=\"p\">])</span>\n</pre>\n<p>Note that</p>\n<ul>\n<li><code>column_names</code> parameter cannot be used in conjunction with append methods</li>\n<li>if used in conjunction with <code>column_names</code> parameter, the length of both lists must be the same</li>\n</ul>\n<h2>Delete a table</h2>\n<p>This deletes a table on <a href=\"http://count.co\" rel=\"nofollow\">count.co</a>. As such, any operations on a deleted table will throw error with 404 status code</p>\n<pre><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">delete_table</span><span class=\"p\">(</span><span class=\"s1\">'TwPhiNcdxc7'</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h1>A Full Example:</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">count_api</span> <span class=\"kn\">import</span> <span class=\"n\">CountAPI</span>\n\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s2\">\"Use token generated from Count Admin page\"</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">CountAPI</span><span class=\"p\">()</span>\n<span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">set_api_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Upload a dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'norweiganCarSales.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Car Sales in Norway'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#You can view the table and create your own visuals in Count using the table.url() method</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Preview first 10 lines of table</span>\n<span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Get size of table</span>\n<span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create visual of chart of SUM('Quantity') vs 'Year' separated by color for 'Type'</span>\n<span class=\"c1\"># for year between 2007 and end of 2016</span>\n<span class=\"c1\"># with linear scale for y-axis, and line chart type</span>\n<span class=\"n\">visual</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">upload_visual</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s1\">'Year'</span><span class=\"p\">,</span>\n                             <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"s1\">'Quantity'</span><span class=\"p\">,</span>\n                             <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"s1\">'Type'</span><span class=\"p\">,</span>\n                             <span class=\"n\">aggregates</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Quantity'</span> <span class=\"p\">:</span> <span class=\"s1\">'sum'</span><span class=\"p\">},</span>\n                             <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span><span class=\"s1\">'&gt;='</span><span class=\"p\">,(</span><span class=\"mi\">2007</span><span class=\"p\">,)),(</span><span class=\"s1\">'Year'</span><span class=\"p\">,</span><span class=\"s1\">'&lt;='</span><span class=\"p\">,(</span><span class=\"mi\">2016</span><span class=\"p\">,))]</span>\n                             <span class=\"n\">chart_options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'y_type'</span><span class=\"p\">:</span><span class=\"s1\">'linear'</span><span class=\"p\">,</span> <span class=\"s1\">'chart_type'</span><span class=\"p\">:</span> <span class=\"s1\">'line'</span><span class=\"p\">}</span>\n                            <span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Get visual url</span>\n<span class=\"n\">visual</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#If using Jupyter notebook, you can also embed a chart via</span>\n<span class=\"n\">visual</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Delete table on count.co if no longer needed</span>\n<span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<h1>Technical Documentation</h1>\n<h2>CountAPI</h2>\n<p>CountAPI class containing the following methods:</p>\n<ul>\n<li><code>set_api_token(api_token)</code>\n<ul>\n<li>Sets API token obtained from <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li><code>api_token</code>: String API token</li>\n</ul>\n</li>\n<li><code>upload(path = None, name = None, data = None, overwrite_key = None)</code>\n<ul>\n<li>Uploads csv file from path or csv data from str (keyword arg only method).</li>\n<li><code>path</code>: String filepath to the .csv or .xls(x). Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>data</code>: String csv data to upload. Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>name</code>: String name of table.</li>\n<li><code>overwrite_key</code>: String key of the table for which you would like to replace the data.</li>\n<li><code>append_key</code>: String key of the table to which you would like to append data.</li>\n<li><code>column_types</code>: List of strings of column types. Acceptable types of column type are 'string', 'int', 'double', and 'datetime'.</li>\n<li><code>column_names</code>: List of strings of column names.</li>\n<li>if <code>column_names</code>/<code>column_types</code> have length greater than the number of columns in the table, the extra enties are ignored.</li>\n<li><code>column_names</code>: and <code>column_types</code> must have same length if both are set.</li>\n<li><code>column_names</code> and <code>column_types</code> cannot be used in conjuction with <code>append_key</code></li>\n<li><code>Return</code>: Table object.</li>\n</ul>\n</li>\n<li><code>delete_table(table_key)</code>:\n<ul>\n<li>Deletes specified table from <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> server.</li>\n<li><code>table_key</code>: String table key.</li>\n</ul>\n</li>\n<li><code>table(table_key)</code>:\n<ul>\n<li>Get a table object from an existing table key.</li>\n<li><code>table_key</code>: String table key.</li>\n<li><code>Return</code>: Table Object.</li>\n</ul>\n</li>\n</ul>\n<h2>Table</h2>\n<p>Table class containing the following methods:</p>\n<ul>\n<li><code>[index]</code>:\n<ul>\n<li>Get Column object from column index.</li>\n<li><code>index</code>: Integer index of column</li>\n<li><code>Return</code>: Column Object.</li>\n</ul>\n</li>\n<li><code>[name]</code>:\n<ul>\n<li>Get Column object from column name. Returns first column found with header matching name.</li>\n<li><code>name</code>: String column name.</li>\n<li><code>Return</code>: Column Object.</li>\n</ul>\n</li>\n<li><code>append(path = None, data = None)</code>:\n<ul>\n<li>Appends csv file from path or csv data from str (keyword arg only method) to existing table. New table must match column types of existing table.</li>\n<li><code>path</code>: String filepath to the .csv or .xls(x). Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>data</code>: String csv data to upload. Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>Return</code>: Self.</li>\n</ul>\n</li>\n<li><code>column(index)</code>:\n<ul>\n<li>Get Column object from column index.</li>\n<li><code>index</code>: Integer index of column</li>\n<li><code>Return</code>: Column Object.</li>\n</ul>\n</li>\n<li><code>column(name)</code>:\n<ul>\n<li>Get Column object from column name. Returns first column found with header matching name.</li>\n<li><code>name</code>: String column name.</li>\n<li><code>Return</code>: Column Object.</li>\n</ul>\n</li>\n<li><code>columns(name = None)</code>:\n<ul>\n<li>Get list of Column objects with headers matching name parameter. If name is defaulted, returns all columns in table.</li>\n<li><code>Return</code>: List of Column Objects.</li>\n</ul>\n</li>\n<li><code>delete()</code>:\n<ul>\n<li>Deletes table from <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> server. Future references to this Table will be undefined.</li>\n</ul>\n</li>\n<li><code>head(rows=10,columns=10)</code>:\n<ul>\n<li>Prints first n rows of table</li>\n<li><code>rows</code>: Integer number of rows requested. Max 100. Default 10.</li>\n<li><code>columns</code>: Integer number of columns requested. Max 20. Default 10.</li>\n</ul>\n</li>\n<li><code>tail(rows=10,columns=10)</code>:\n<ul>\n<li>Prints last n rows of table</li>\n<li><code>rows</code>: Integer number of rows requested. Max 100. Default 10.</li>\n<li><code>columns</code>: Integer number of columns requested. Max 20. Default 10.</li>\n</ul>\n</li>\n<li><code>overwrite(path = None, name = None, data = None, column_types = None, column_names = None)</code>:\n<ul>\n<li>Uploads csv file from path or csv data from str (keyword arg only method), overwriting existing table. New table must match column types of existing table.</li>\n<li><code>path</code>: String filepath to the .csv or .xls(x). Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>data</code>: String csv data to upload. Cannot be used in conjunction with <code>path</code>.</li>\n<li><code>name</code>: String name of table.</li>\n<li><code>column_types</code>: List of strings of column types. Acceptable types of column type are 'string', 'int', 'double', and 'datetime'.</li>\n<li><code>column_names</code>: List of strings of column names.</li>\n<li>if <code>column_names</code>/<code>column_types</code> have length greater than the number of columns in the table, the extra enties are ignored.</li>\n<li><code>column_names</code>: and <code>column_types</code> must have same length if both are set.</li>\n<li><code>Return</code>: Self.</li>\n</ul>\n</li>\n<li><code>size()</code>:\n<ul>\n<li>Size of table as a tuple of ints (column_extent, row_extent)</li>\n<li><code>Return</code>: Tuple (int, int)</li>\n</ul>\n</li>\n<li><code>upload_visual(x = None, y = None, color = None, size = None, label = None, aggregates = None, filters = None, groupings = None, chart_options = None)</code>:\n<ul>\n<li>Uploads chart visual to <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li><code>x</code>: Column object/string column name to be used for x-axis</li>\n<li><code>y</code>: Column object/string column name to be used for y-axis</li>\n<li><code>color</code>: Column object/string column name to be used for color-axis</li>\n<li><code>size</code>: Column object/string column name to be used for size-axis</li>\n<li><code>label</code>: Column object/string column name to be used for label-axis</li>\n<li><code>aggregates</code>: Tuple/list of tuples/dictionary of aggregates to be applied to columns.</li>\n<li><code>filters</code>: Tuple/list of tuples/dictionary of filters to be applied to columns.</li>\n<li><code>groupings</code>: Tuple/list of tuples/dictionary of groupings to be applied to columns.</li>\n<li><code>chart_options</code>: Dictionary of chart options to be applied. Accepted dict keys:values:\n<ul>\n<li><code>type</code>: <code>line</code>,<code>bar</code>,<code>circle</code>,<code>area</code>, <code>auto</code></li>\n<li><code>x_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>y_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>size_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>color_type</code>: <code>linear</code>, <code>log</code></li>\n</ul>\n</li>\n<li><code>Return</code>: Visual object.</li>\n</ul>\n</li>\n<li><code>url()</code>:\n<ul>\n<li>Get url to table view on count.co.</li>\n<li><code>Return</code>: String of URL.</li>\n</ul>\n</li>\n</ul>\n<h2>Visual</h2>\n<p>Visual class containing the following methods:</p>\n<ul>\n<li><code>embed()</code>:\n<ul>\n<li>Returns IFrame to current visual. For use with interactive environments, e.g Jupyter notebooks.</li>\n<li><code>Return</code> IFrame.</li>\n</ul>\n</li>\n<li><code>download_csv()</code>:\n<ul>\n<li>Download csv of visual on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li>Downloads to Downloads folder if path is defaulted.</li>\n<li>path: str download path.</li>\n</ul>\n</li>\n<li><code>download_preview()</code>:\n<ul>\n<li>Download png of visual on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li>Downloads to Downloads folder if path is defaulted.</li>\n<li>path: str download path.</li>\n<li>height: int pixels.</li>\n<li>width: int pixels.</li>\n</ul>\n</li>\n<li><code>preview_url()</code>:\n<ul>\n<li>Returns url to preview view on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li><code>Return</code>: String.</li>\n</ul>\n</li>\n<li><code>set_chart_options(dict: chart_option)</code>:\n<ul>\n<li>Set chart options.</li>\n<li><code>chart_options</code>: Dictionary of chart options to be applied. Accepted dict keys:values:\n<ul>\n<li><code>type</code>: <code>line</code>,<code>bar</code>,<code>circle</code>,<code>area</code>, <code>auto</code></li>\n<li><code>x_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>y_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>size_type</code>: <code>linear</code>, <code>log</code></li>\n<li><code>color_type</code>: <code>linear</code>, <code>log</code></li>\n</ul>\n</li>\n<li><code>Return</code>: Self.</li>\n</ul>\n</li>\n<li><code>url()</code>:\n<ul>\n<li>Returns url to visual view on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a>.</li>\n<li><code>Return</code>: String.</li>\n</ul>\n</li>\n<li><code>url_embed()</code>:\n<ul>\n<li>Returns url to visual view on <a href=\"https://count.co\" rel=\"nofollow\">count.co</a> suitable for embedding</li>\n<li><code>Return</code>: String.</li>\n</ul>\n</li>\n</ul>\n<h2>Column</h2>\n<p>Column class containing the following methods:</p>\n<ul>\n<li><code>aggregate(aggregate)</code>:\n<ul>\n<li>Add aggregate function to Column object. Note: cannot perform both group_by and aggregate on the same Column object.</li>\n<li><code>aggregate</code>: String aggregate\n<ul>\n<li>str: ['DISTINCT', 'MIN', 'MAX', 'MED']</li>\n<li>other: ['DISTINCT', 'MIN', 'MAX', 'MED', 'SUM', 'AVG', 'STD', 'VAR', 'MED']</li>\n</ul>\n</li>\n<li><code>Return</code>: self</li>\n</ul>\n</li>\n<li><code>filter(comparator, str or int or float or datetime: value)</code>:\n<ul>\n<li>Returns Filter object with specified comparator and value</li>\n<li><code>comparator</code>: String comparator. Available comparators are:\nstr: ['IN']\nother : ['&gt;', '&gt;=', '&lt;', '&lt;=']</li>\n<li><code>value</code>: string/integer/float/datetime value to compare against</li>\n<li><code>Return</code>: self</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 4566719, "releases": {"2.0.9": [{"comment_text": "", "digests": {"md5": "e18b9833a86ee9fd9e0898af8f75fa0e", "sha256": "e28f7396da7f212554ebb08e2f785ebacf6b2fa703b766ad7554d96d28a4a0c0"}, "downloads": -1, "filename": "count_api-2.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e18b9833a86ee9fd9e0898af8f75fa0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27365, "upload_time": "2018-11-08T16:06:37", "upload_time_iso_8601": "2018-11-08T16:06:37.317984Z", "url": "https://files.pythonhosted.org/packages/50/73/cc6fcacbff0d93bc5aec9567ed8f6fe8ae85fc0985df86bb2214e4be3b59/count_api-2.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6b5d5b7c5a8803b5d0e5c8c6e434b22", "sha256": "c4c7c9052aa2f9e2852a5ad502a80c2e49c9bf9017374f725d9a7ffebd386538"}, "downloads": -1, "filename": "count_api-2.0.9.tar.gz", "has_sig": false, "md5_digest": "a6b5d5b7c5a8803b5d0e5c8c6e434b22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23896, "upload_time": "2018-11-08T16:06:38", "upload_time_iso_8601": "2018-11-08T16:06:38.971030Z", "url": "https://files.pythonhosted.org/packages/e8/38/10a2da2792d6e745e1a9ccd8efc136f4066a3396c35dc3f1e8cc56a105ca/count_api-2.0.9.tar.gz", "yanked": false}], "3.0.6": [{"comment_text": "", "digests": {"md5": "25e48d43ab7d8c7d7c89f5f3aa9bf04a", "sha256": "93122a5e3ef0076c1f7c8a17454a801ba6f983b74339ecc26ce7072dd72eb314"}, "downloads": -1, "filename": "count_api-3.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "25e48d43ab7d8c7d7c89f5f3aa9bf04a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32909, "upload_time": "2018-11-27T17:03:31", "upload_time_iso_8601": "2018-11-27T17:03:31.418390Z", "url": "https://files.pythonhosted.org/packages/93/eb/3dac6870b18371ba2ce65ec488c2442df05bd873854ccfd52b4b273f406a/count_api-3.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f924eb3a3d9dca57c4467740ff14a5a7", "sha256": "d1584f3eaa39d934f4c25b4bfdbee019e65775a5088c51609117a34f00a50b82"}, "downloads": -1, "filename": "count_api-3.0.6.tar.gz", "has_sig": false, "md5_digest": "f924eb3a3d9dca57c4467740ff14a5a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30333, "upload_time": "2018-11-27T17:03:33", "upload_time_iso_8601": "2018-11-27T17:03:33.399276Z", "url": "https://files.pythonhosted.org/packages/cb/c2/f0d5c1408a59161ceb1ffbae591283da03740b6fe2e1a79a6b30ddb156fc/count_api-3.0.6.tar.gz", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "6838adb554caa637c14828c88a10cb62", "sha256": "72f439e55745acaa81bce73348da2e783534b5e53e226e67547f3b6a4c931018"}, "downloads": -1, "filename": "count_api-3.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6838adb554caa637c14828c88a10cb62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33838, "upload_time": "2018-12-03T12:54:40", "upload_time_iso_8601": "2018-12-03T12:54:40.128181Z", "url": "https://files.pythonhosted.org/packages/f4/b1/a4dd87e37601eaa0c18781eaf79e288102fb5e32e32d9123646cf84d4d25/count_api-3.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30be085a446b9e75d3deda0bf8dab0c4", "sha256": "f0ffa36a18c355f7bcb30e93c634c42fca5b7ac0c1ee64548cd0b5e00d03e538"}, "downloads": -1, "filename": "count_api-3.1.2.tar.gz", "has_sig": false, "md5_digest": "30be085a446b9e75d3deda0bf8dab0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31642, "upload_time": "2018-12-03T12:54:43", "upload_time_iso_8601": "2018-12-03T12:54:43.010436Z", "url": "https://files.pythonhosted.org/packages/4c/e6/4c617753cb95c6addba930332784329a2ee1ea99b0c961e060c901176511/count_api-3.1.2.tar.gz", "yanked": false}], "3.1.3": [{"comment_text": "", "digests": {"md5": "c7693faac65d2ddafdea39e53a93ea7c", "sha256": "bbc50d99314808dbfd7e9b3d278cdfa654869717c55c72c42664849f0fff6c54"}, "downloads": -1, "filename": "count_api-3.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c7693faac65d2ddafdea39e53a93ea7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33914, "upload_time": "2018-12-04T08:44:02", "upload_time_iso_8601": "2018-12-04T08:44:02.997618Z", "url": "https://files.pythonhosted.org/packages/e3/6e/c7c730b2695510982938e3d31679e9b8c82923cb278ea7c22bd99d6d7fb0/count_api-3.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01c5d36e854c865341594a5fea09d6f6", "sha256": "3e2fe341bf652ee665146b1a94026fc58f2a48651cf68667920ba6353f16f186"}, "downloads": -1, "filename": "count_api-3.1.3.tar.gz", "has_sig": false, "md5_digest": "01c5d36e854c865341594a5fea09d6f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31693, "upload_time": "2018-12-04T08:44:04", "upload_time_iso_8601": "2018-12-04T08:44:04.901511Z", "url": "https://files.pythonhosted.org/packages/ac/de/df543dced2c7fc06fd6faa80271273ded1e2ac18f40abf8e4e1249b73b64/count_api-3.1.3.tar.gz", "yanked": false}], "3.1.4": [{"comment_text": "", "digests": {"md5": "e517676014bf3f3f3da35ca6dac046c6", "sha256": "9d996232e93d209b35b939c5234da85a9a98a90623dd7f5db8416342b122a2c1"}, "downloads": -1, "filename": "count_api-3.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e517676014bf3f3f3da35ca6dac046c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33952, "upload_time": "2018-12-05T09:16:12", "upload_time_iso_8601": "2018-12-05T09:16:12.448184Z", "url": "https://files.pythonhosted.org/packages/43/b4/e1b132ee6b388060c27159b02c0c0fb54f02b7f7771126a158d7e60f6e0d/count_api-3.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fde7c22766b1450721e28e0006b87a6e", "sha256": "376765018e5765884515b39c44f30b94d69fd994bba7f85ad0dbcbfc2d9269fa"}, "downloads": -1, "filename": "count_api-3.1.4.tar.gz", "has_sig": false, "md5_digest": "fde7c22766b1450721e28e0006b87a6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31741, "upload_time": "2018-12-05T09:16:15", "upload_time_iso_8601": "2018-12-05T09:16:15.003378Z", "url": "https://files.pythonhosted.org/packages/db/f9/440894991b407f984ae427b628aab052e60a1a083be0a41ddf95183a2dcb/count_api-3.1.4.tar.gz", "yanked": false}], "3.1.5": [{"comment_text": "", "digests": {"md5": "03b4fde1114685da8b5397b42b216979", "sha256": "5356b69e4439915aa49123f2fdde34129ad7b81c81b57894a8d3bd99a5bd87a8"}, "downloads": -1, "filename": "count_api-3.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "03b4fde1114685da8b5397b42b216979", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33912, "upload_time": "2018-12-05T09:36:08", "upload_time_iso_8601": "2018-12-05T09:36:08.556238Z", "url": "https://files.pythonhosted.org/packages/80/9f/309dc76a2f45d2d1b4bce03d3e713cb752ea815331629048e8218c5d87d3/count_api-3.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b64ad4706073734ad6e6add5aee96462", "sha256": "c995b88b5bd2eed99319480554e954cd08924519459465710a09d00c8e8dc840"}, "downloads": -1, "filename": "count_api-3.1.5.tar.gz", "has_sig": false, "md5_digest": "b64ad4706073734ad6e6add5aee96462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31708, "upload_time": "2018-12-05T09:36:10", "upload_time_iso_8601": "2018-12-05T09:36:10.113094Z", "url": "https://files.pythonhosted.org/packages/9c/28/3f7d360c64d377d99097a1aa6652a07b514ea09bfd8084fa43e82b55983a/count_api-3.1.5.tar.gz", "yanked": false}], "3.1.6": [{"comment_text": "", "digests": {"md5": "350e5ba1909b15de8a62ce24cddecdf7", "sha256": "bdcde143bab7108b6044e04ea16e2f3d2244185a4d871be0ea34b0136802f497"}, "downloads": -1, "filename": "count_api-3.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "350e5ba1909b15de8a62ce24cddecdf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34071, "upload_time": "2018-12-05T13:05:33", "upload_time_iso_8601": "2018-12-05T13:05:33.653597Z", "url": "https://files.pythonhosted.org/packages/aa/cb/8b2b51bb17573cf1279c6274a1bb172ea90339a74cc9a3eae9150472dbf6/count_api-3.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a84f5afdca80623b23caea7be22495cb", "sha256": "5a8caf057252ad1031effd088ce8ea9e26e9dfb0f2c7e2aef1f00233061a0987"}, "downloads": -1, "filename": "count_api-3.1.6.tar.gz", "has_sig": false, "md5_digest": "a84f5afdca80623b23caea7be22495cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31722, "upload_time": "2018-12-05T13:05:34", "upload_time_iso_8601": "2018-12-05T13:05:34.851715Z", "url": "https://files.pythonhosted.org/packages/f5/9b/d2295542909f83475461173b9c571bd883605123cd925277b30c394bc30c/count_api-3.1.6.tar.gz", "yanked": false}], "3.1.7": [{"comment_text": "", "digests": {"md5": "85ab7667abda958b65d755694f0fece1", "sha256": "777753d6451fa62d5ced758ae922e32ba560eb250970081be3fafa2b66b0c45e"}, "downloads": -1, "filename": "count_api-3.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "85ab7667abda958b65d755694f0fece1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34251, "upload_time": "2018-12-05T17:14:24", "upload_time_iso_8601": "2018-12-05T17:14:24.780563Z", "url": "https://files.pythonhosted.org/packages/96/0b/0b3f594c7bd56880f8a9d9e72cf7929b08e1ddce8553fb2712bf783f7a3e/count_api-3.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "875735ac7282c0f4f5bb41224af1d5eb", "sha256": "265a2ae742873d84cbbc38a8d19b60583ec75f34a549ad25eaf8e6679e0480bf"}, "downloads": -1, "filename": "count_api-3.1.7.tar.gz", "has_sig": false, "md5_digest": "875735ac7282c0f4f5bb41224af1d5eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31866, "upload_time": "2018-12-05T17:14:26", "upload_time_iso_8601": "2018-12-05T17:14:26.514370Z", "url": "https://files.pythonhosted.org/packages/03/c5/469ab512982a1d5503e9039453292d77a4a7c32003e5a8c683eb1fb3cfa8/count_api-3.1.7.tar.gz", "yanked": false}], "3.1.8": [{"comment_text": "", "digests": {"md5": "de496e7c924f3fe94ed4d5bc27a0be62", "sha256": "ed81fe7b38de5375e99d70c86b93aced38aa0e6ca6590fc92cdf7b5fb773bd2f"}, "downloads": -1, "filename": "count_api-3.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "de496e7c924f3fe94ed4d5bc27a0be62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34291, "upload_time": "2018-12-05T17:27:51", "upload_time_iso_8601": "2018-12-05T17:27:51.096670Z", "url": "https://files.pythonhosted.org/packages/f5/c6/dd6a0afd64c26a8d00e631af602fa2616c22fc497661638376b4211ef282/count_api-3.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3305143ed59e787abf81123f2122623e", "sha256": "ce6f22d973863e203632ee33667c8beae295b2009556c2d4862f0fcc78f5631a"}, "downloads": -1, "filename": "count_api-3.1.8.tar.gz", "has_sig": false, "md5_digest": "3305143ed59e787abf81123f2122623e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31909, "upload_time": "2018-12-05T17:27:53", "upload_time_iso_8601": "2018-12-05T17:27:53.332706Z", "url": "https://files.pythonhosted.org/packages/3c/54/ac4c22a2290977de0cc42f7dff00be9f07831c0382d9d5404748aee52d77/count_api-3.1.8.tar.gz", "yanked": false}], "3.1.9": [{"comment_text": "", "digests": {"md5": "4eaaad9239e44a75c7e173bb6ec1e7e9", "sha256": "31780161661fe9b07dd23f601816ac86c03b3fc8e80dcb26b1fa83261e7f1a8d"}, "downloads": -1, "filename": "count_api-3.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4eaaad9239e44a75c7e173bb6ec1e7e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34504, "upload_time": "2018-12-06T06:40:22", "upload_time_iso_8601": "2018-12-06T06:40:22.185648Z", "url": "https://files.pythonhosted.org/packages/97/75/eb20cdcaa6872385b4ea77101266cfa8f78936c2f9c8fd55649d1909b2eb/count_api-3.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b46098b993d577ee31921aac16b769", "sha256": "5c712c16f0b80844563dca7fb53151484a9d432e5773b499c0b81920883f23f7"}, "downloads": -1, "filename": "count_api-3.1.9.tar.gz", "has_sig": false, "md5_digest": "87b46098b993d577ee31921aac16b769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32128, "upload_time": "2018-12-06T06:40:26", "upload_time_iso_8601": "2018-12-06T06:40:26.687944Z", "url": "https://files.pythonhosted.org/packages/72/e0/fb38c51b5bd65688f1c71798141d69c8ecb062ad11ad6a934c3f8dffa7e5/count_api-3.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eaaad9239e44a75c7e173bb6ec1e7e9", "sha256": "31780161661fe9b07dd23f601816ac86c03b3fc8e80dcb26b1fa83261e7f1a8d"}, "downloads": -1, "filename": "count_api-3.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4eaaad9239e44a75c7e173bb6ec1e7e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34504, "upload_time": "2018-12-06T06:40:22", "upload_time_iso_8601": "2018-12-06T06:40:22.185648Z", "url": "https://files.pythonhosted.org/packages/97/75/eb20cdcaa6872385b4ea77101266cfa8f78936c2f9c8fd55649d1909b2eb/count_api-3.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b46098b993d577ee31921aac16b769", "sha256": "5c712c16f0b80844563dca7fb53151484a9d432e5773b499c0b81920883f23f7"}, "downloads": -1, "filename": "count_api-3.1.9.tar.gz", "has_sig": false, "md5_digest": "87b46098b993d577ee31921aac16b769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32128, "upload_time": "2018-12-06T06:40:26", "upload_time_iso_8601": "2018-12-06T06:40:26.687944Z", "url": "https://files.pythonhosted.org/packages/72/e0/fb38c51b5bd65688f1c71798141d69c8ecb062ad11ad6a934c3f8dffa7e5/count_api-3.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:53 2020"}