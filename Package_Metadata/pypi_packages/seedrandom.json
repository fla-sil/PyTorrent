{"info": {"author": "BananaLoaf", "author_email": "bananaloaf@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# seedrandom\nRandom number generation based on the seed\n\n### Installation / Updating\n```\npip install seedrandom\npip install --upgrade seedrandom\n```\nOr\n```\npip install git+https://github.com/BananaLoaf/seedrandom.git\npip install --upgrade git+https://github.com/BananaLoaf/seedrandom.git\n```\n\n### Is it random?\n\nUppon generating 100000 random numbers in a range of 1 to 5, it showed equal distribution\n\n|       |           |\n|---\t|:-----:\t|\n| 1 \t| 20.0% \t|\n| 2 \t| 20.2% \t|\n| 3 \t| 19.9% \t|\n| 4 \t| 20.0% \t|\n| 5 \t| 19.9% \t|\n\n### Usage\n\n```python\nfrom seedrandom import Seed\nseed = Seed(b\"Test\", b\"values\")\n```\n\nGenerating random values:\n```python\nseed.randint(_min=1, _max=10)\nseed.randfloat(_min=0, _max=6, step=0.1)\nseed.randbool()\nseed.randbyte()\n```\n\n```Seed``` can be converted to and from ```int``` or ```bytes```:\n```python\nseed1 = Seed(b\"Bytes\")\nseed2 = Seed(b\"Int\")\nbytes(seed1)  # b\"\\x9e^\\n\\x06j\\x99\\xe1`\\x86m-\\xe7Z\\n\\xbdSN\\x92O}\\x89@\\xd0\\r'\\x86\\xf1\\xaf\\xcd\\xd4\\xa2'\"\nint(seed2)  # 31431599345838686137398213930967341686259486292204322755690725188121734625692\n\nseed1 = Seed.from_bytes(b\"\\x9e^\\n\\x06j\\x99\\xe1`\\x86m-\\xe7Z\\n\\xbdSN\\x92O}\\x89@\\xd0\\r'\\x86\\xf1\\xaf\\xcd\\xd4\\xa2'\")  # <seedrandom.Seed object at 0x0000002CA1D7F8D0>\nseed2 = Seed.from_int(31431599345838686137398213930967341686259486292204322755690725188121734625692)  # <seedrandom.Seed object at 0x0000002CA1D7F9B0>\n```\n\n```Seed``` can use different hashing functions from ```hashlib``` module\n```python\nseed1 = Seed(b\"Test\", b\"values\")  # Uses hashlib.sha256 by default\nseed2 = Seed(b\"Test\", b\"values\", hash_func=hashlib.md5)\n\nseed1.randint(_min=0, _max=100000)  # 2457\nseed2.randint(_min=0, _max=100000)  # 98655\n```\n\n```ordered``` argument can be used:\n```python\nseed1 = Seed(b\"Hello\", b\"world\")\nseed2 = Seed(b\"world\", b\"Hello\")\nseed1 == seed2  # True\n\nseed1 = Seed(ordered=(b\"Hello\", b\"world\"))\nseed2 = Seed(ordered=(b\"world\", b\"Hello\"))\nseed1 == seed2  # False\n\nseed1 = Seed(b\"Hello\", b\"world\", ordered=(b\"spanish\", b\"inquisition\"))\nseed2 = Seed(b\"world\", b\"Hello\", ordered=(b\"spanish\", b\"inquisition\"))\nseed1 == seed2  # True\n\nseed1 = Seed(b\"Hello\", b\"world\", ordered=(b\"spanish\", b\"inquisition\"))\nseed2 = Seed(b\"Hello\", b\"world\", ordered=(b\"inquisition\", b\"spanish\"))\nseed1 == seed2  # False\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/BananaLoaf/seedrandom/archive/v1.4.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BananaLoaf/seedrandom", "keywords": "random,seed,generator,hash,int,float,bool,bytes", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "seedrandom", "package_url": "https://pypi.org/project/seedrandom/", "platform": "", "project_url": "https://pypi.org/project/seedrandom/", "project_urls": {"Download": "https://github.com/BananaLoaf/seedrandom/archive/v1.4.1.tar.gz", "Homepage": "https://github.com/BananaLoaf/seedrandom"}, "release_url": "https://pypi.org/project/seedrandom/1.4.1/", "requires_dist": null, "requires_python": "", "summary": "Random number generation based on the seed", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>seedrandom</h1>\n<p>Random number generation based on the seed</p>\n<h3>Installation / Updating</h3>\n<pre><code>pip install seedrandom\npip install --upgrade seedrandom\n</code></pre>\n<p>Or</p>\n<pre><code>pip install git+https://github.com/BananaLoaf/seedrandom.git\npip install --upgrade git+https://github.com/BananaLoaf/seedrandom.git\n</code></pre>\n<h3>Is it random?</h3>\n<p>Uppon generating 100000 random numbers in a range of 1 to 5, it showed equal distribution</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">20.0%</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">20.2%</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">19.9%</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">20.0%</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">19.9%</td>\n</tr></tbody></table>\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">seedrandom</span> <span class=\"kn\">import</span> <span class=\"n\">Seed</span>\n<span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"values\"</span><span class=\"p\">)</span>\n</pre>\n<p>Generating random values:</p>\n<pre><span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">randfloat</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">randbool</span><span class=\"p\">()</span>\n<span class=\"n\">seed</span><span class=\"o\">.</span><span class=\"n\">randbyte</span><span class=\"p\">()</span>\n</pre>\n<p><code>Seed</code> can be converted to and from <code>int</code> or <code>bytes</code>:</p>\n<pre><span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Bytes\"</span><span class=\"p\">)</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Int\"</span><span class=\"p\">)</span>\n<span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">seed1</span><span class=\"p\">)</span>  <span class=\"c1\"># b\"\\x9e^\\n\\x06j\\x99\\xe1`\\x86m-\\xe7Z\\n\\xbdSN\\x92O}\\x89@\\xd0\\r'\\x86\\xf1\\xaf\\xcd\\xd4\\xa2'\"</span>\n<span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">seed2</span><span class=\"p\">)</span>  <span class=\"c1\"># 31431599345838686137398213930967341686259486292204322755690725188121734625692</span>\n\n<span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"o\">.</span><span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\x9e</span><span class=\"s2\">^</span><span class=\"se\">\\n\\x06</span><span class=\"s2\">j</span><span class=\"se\">\\x99\\xe1</span><span class=\"s2\">`</span><span class=\"se\">\\x86</span><span class=\"s2\">m-</span><span class=\"se\">\\xe7</span><span class=\"s2\">Z</span><span class=\"se\">\\n\\xbd</span><span class=\"s2\">SN</span><span class=\"se\">\\x92</span><span class=\"s2\">O}</span><span class=\"se\">\\x89</span><span class=\"s2\">@</span><span class=\"se\">\\xd0\\r</span><span class=\"s2\">'</span><span class=\"se\">\\x86\\xf1\\xaf\\xcd\\xd4\\xa2</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;seedrandom.Seed object at 0x0000002CA1D7F8D0&gt;</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mi\">31431599345838686137398213930967341686259486292204322755690725188121734625692</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;seedrandom.Seed object at 0x0000002CA1D7F9B0&gt;</span>\n</pre>\n<p><code>Seed</code> can use different hashing functions from <code>hashlib</code> module</p>\n<pre><span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"values\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Uses hashlib.sha256 by default</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"values\"</span><span class=\"p\">,</span> <span class=\"n\">hash_func</span><span class=\"o\">=</span><span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">)</span>\n\n<span class=\"n\">seed1</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">)</span>  <span class=\"c1\"># 2457</span>\n<span class=\"n\">seed2</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"n\">_min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">)</span>  <span class=\"c1\"># 98655</span>\n</pre>\n<p><code>ordered</code> argument can be used:</p>\n<pre><span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">)</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n<span class=\"n\">seed1</span> <span class=\"o\">==</span> <span class=\"n\">seed2</span>  <span class=\"c1\"># True</span>\n\n<span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed1</span> <span class=\"o\">==</span> <span class=\"n\">seed2</span>  <span class=\"c1\"># False</span>\n\n<span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"spanish\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"inquisition\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"spanish\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"inquisition\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed1</span> <span class=\"o\">==</span> <span class=\"n\">seed2</span>  <span class=\"c1\"># True</span>\n\n<span class=\"n\">seed1</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"spanish\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"inquisition\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed2</span> <span class=\"o\">=</span> <span class=\"n\">Seed</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"n\">ordered</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"inquisition\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"spanish\"</span><span class=\"p\">))</span>\n<span class=\"n\">seed1</span> <span class=\"o\">==</span> <span class=\"n\">seed2</span>  <span class=\"c1\"># False</span>\n</pre>\n\n          </div>"}, "last_serial": 5244262, "releases": {"1.4": [{"comment_text": "", "digests": {"md5": "0cb166297af40399959340a41995e444", "sha256": "ab5dffaf895ad731f69677f1a590bf6c546b5a8fc49c863d657ec798e09da3ba"}, "downloads": -1, "filename": "seedrandom-1.4.tar.gz", "has_sig": false, "md5_digest": "0cb166297af40399959340a41995e444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3512, "upload_time": "2019-05-08T18:32:06", "upload_time_iso_8601": "2019-05-08T18:32:06.203761Z", "url": "https://files.pythonhosted.org/packages/cd/fa/f57d4d7ad5ad4e078970bee1c5b831e9264b0a61cbcfd875c8ee334f90b6/seedrandom-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "a10cff4047a6e1f311f649116f46931a", "sha256": "c86a23d4b9779f178ced61ae546499fa4c1aae6cc71b88dfb4736c30956c9d11"}, "downloads": -1, "filename": "seedrandom-1.4.1.tar.gz", "has_sig": false, "md5_digest": "a10cff4047a6e1f311f649116f46931a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3495, "upload_time": "2019-05-08T19:11:15", "upload_time_iso_8601": "2019-05-08T19:11:15.088623Z", "url": "https://files.pythonhosted.org/packages/9a/3f/a92d19b71a3b13821b3f842baee9fe41b4c486a86930478c812beef00d9a/seedrandom-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a10cff4047a6e1f311f649116f46931a", "sha256": "c86a23d4b9779f178ced61ae546499fa4c1aae6cc71b88dfb4736c30956c9d11"}, "downloads": -1, "filename": "seedrandom-1.4.1.tar.gz", "has_sig": false, "md5_digest": "a10cff4047a6e1f311f649116f46931a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3495, "upload_time": "2019-05-08T19:11:15", "upload_time_iso_8601": "2019-05-08T19:11:15.088623Z", "url": "https://files.pythonhosted.org/packages/9a/3f/a92d19b71a3b13821b3f842baee9fe41b4c486a86930478c812beef00d9a/seedrandom-1.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:49 2020"}