{"info": {"author": "S\u00f8ren Atmakuri Davidsen", "author_email": "sorend@cs.svu-ac.in", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "|Build Status| |PyPi version|\n\nfylearn is a fuzzy machine learning library, built on top of\n`SciKit-Learn <http://scikit-learn.org/>`__.\n\nSciKit-Learn contains many common machine learning algorithms, and is a\ngood place to start if you want to play or program anything related to\nmachine learning in Python. fylearn is not intended to be a replacement\nfor SciKit-Learn (in fact fylearn depends on SciKit-Learn), but to\nprovide an extra set of machine learning algorithms from the fuzzy logic\ncommunity.\n\nMachine learning algorithms\n---------------------------\n\nFuzzy pattern classifiers\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFuzzy pattern classifiers are classifiers that describe data using fuzzy\nsets and fuzzy aggregation functions.\n\nSeveral fuzzy pattern classifiers are implemented in the library: -\nfylearn.frr.FuzzyReductionRuleClassifier \u2013 based on learning membership\nfunctions from min/max. - fylearn.fpcga.FuzzyPatternClassifierGA \u2013\noptimizes membership functions globally. -\nfylearn.fpcga.FuzzyPatternClassifierLocalGA \u2013 optimizes membership\nfunctions locally. - fylearn.fpt.FuzzyPatternTreeClassifier \u2013 builds\nfuzzy pattern trees using bottom-up method. -\nfylearn.fpt.FuzzyPatternTreeTopDownClassifier \u2013 builds fuzzy pattern\ntrees using top-down method. - fylearn.nfpc.FuzzyPatternClassifier \u2013\nbase class for fuzzy pattern classifiers (see parameters).\n\nGenetic Algorithm rule based classifiers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA type of classifier that uses GA to optimize rules\n\n-  fylearn.garules.MultimodalEvolutionaryClassifer \u2013 learns rules using\n   genetic algorithm.\n\nInstallation\n------------\n\nYou can add fylearn to your project by using pip:\n\n::\n\n   pip install fylearn\n\nUsage\n~~~~~\n\nYou can use the classifiers as any other SciKit-Learn classifier:\n\n::\n\n   from fylearn.nfpc import FuzzyPatternClassifier\n   from fylearn.garules import MultimodalEvolutionaryClassifier\n   from fylearn.fpt import FuzzyPatternTreeTopDownClassifier\n\n   C = (FuzzyPatternClassifier(),\n        MultimodalEvolutionaryClassifier(),\n        FuzzyPatternTreeTopDownClassifier())\n\n   for c in C:\n       print c.fit(X, y).predict([1, 2, 3, 4])\n\nHeuristic search methods\n------------------------\n\nSeveral heuristic search methods are implemented. These are used in the\nlearning algorithms for parameter assignment, but, are also usable\ndirectly.\n\n-  fylearn.local_search.PatternSearchOptimizer\n-  fylearn.local_search.LocalUnimodalSamplingOptimizer\n-  fylearn.ga.GeneticAlgorithm: Search parameters using modification and\n   a scaling\n-  fylearn.ga.UnitIntervalGeneticAlgorithm: Search parameters in unit\n   interval universe.\n-  fylearn.ga.DiscreteGeneticAlgorithm: Search parameters from discrete\n   universe.\n-  fylearn.tlbo.TeachingLearningBasedOptimizer: Search using\n   teaching-learning based optimization.\n-  fylearn.jaya.JayaOptimizer: Search based on moving towards best\n   solution while avoiding worst.\n\nExample use:\n\n::\n\n   import numpy as np\n   from fylearn.ga import UnitIntervalGeneticAlgorithm, helper_fitness, helper_n_generations\n   from fylearn.local_search import LocalUnimodalSamplingOptimizer, helper_num_runs\n   from fylearn.tlbo import TeachingLearningBasedOptimizer\n   from fylearn.jaya import JayaOptimizer\n\n   def fitness(x):  # defined for a single chromosome, so we need helper_fitness for GA\n       return np.sum(x**2)\n\n   ga = UnitIntervalGeneticAlgorithm(fitness_function=helper_fitness(fitness), n_chromosomes=100, n_genes=10)\n   ga = helper_n_generations(ga, 100)\n   best_chromosomes, best_fitness = ga.best(1)\n   print \"GA solution\", best_chromosomes[0], \"fitness\", best_fitness[0]\n\n   lower_bounds, upper_bounds = np.ones(10) * -10., np.ones(10) * 10.\n   lus = LocalUnimodalSamplingOptimizer(fitness, lower_bounds, upper_bounds)\n   best_solution, best_fitness = helper_num_runs(lus, 100)\n   print \"LUS solution\", best_solution, \"fitness\", best_fitness\n\n   tlbo = TeachingLearningBasedOptimizer(fitness, lower_bounds, upper_bounds)\n   tlbo = helper_n_generations(tlbo, 100)\n   best_solution, best_fitness = tlbo.best()\n   print \"TLBO solution\", best_solution, \"fitness\", best_fitness\n\n   jaya = JayaOptimizer(fitness, lower_bounds, upper_bounds)\n   jaya = helper_n_generations(jaya, 100)\n   best_solution, best_fitness = jaya.best()\n   print \"Jaya solution\", best_solution, \"fitness\", best_fitness\n\nA tiny fuzzy logic library\n--------------------------\n\nTiny, but hopefully useful. The focus of the library is on providing\nmembership functions and aggregations that work with NumPy, for using in\nthe implemented learning algorithms.\n\nMembership functions\n~~~~~~~~~~~~~~~~~~~~\n\n-  fylearn.fuzzylogic.TriangularSet\n-  fylearn.fuzzylogic.TrapezoidalSet\n-  fylearn.fuzzylogic.PiSet\n\nExample use:\n\n::\n\n   import numpy as np\n   from fylearn.fuzzylogic import TriangularSet\n   t = TriangularSet(1.0, 4.0, 5.0)\n   print t(3)   # use with singletons\n   print t(np.array([[1, 2, 3], [4, 5, 6]]))  # use with arrays\n\nAggregation functions\n~~~~~~~~~~~~~~~~~~~~~\n\nHere focus has been on providing aggregation functions that support\naggregation along a specified axis for 2-dimensional matrices.\n\nExample use:\n\n::\n\n   import numpy as np\n   from fylearn.fuzzylogic import meowa, OWA\n   a = OWA([1.0, 0.0, 0.0])  # pure AND in OWA\n   X = np.random.rand(5, 3)\n   print a(X)  # AND row-wise\n   a = meowa(5, 0.2)  # OR, andness = 0.2\n   print a(X.T)  # works column-wise, so apply to transposed X\n\nTo Do\n-----\n\nWe are working on adding the following algorithms:\n\n-  ANFIS.\n-  FRBCS.\n\nAbout\n-----\n\nfylearn is supposed to mean \u201cFuzzY learning\u201d, but in Danish the word\n\u201cfy\u201d means loosely translated \u201cfor shame\u201d. It has been created by the\nDepartment of Computer Science at Sri Venkateswara University, Tirupati,\nINDIA by a `PhD student <http://www.cs.svu-ac.in/~sorend/>`__ as part of\nhis research.\n\nContributions:\n--------------\n\n-  fylearn.local_search Python code by `M. E. H.\n   Pedersen <http://hvass-labs.org/>`__ (M. E. H. Pedersen, *Tuning and\n   Simplifying Heuristical Optimization*, PhD Thesis, University of\n   Southampton, U.K., 2010)\n\n.. |Build Status| image:: https://travis-ci.com/sorend/fylearn.svg?branch=master\n   :target: https://travis-ci.com/sorend/fylearn\n.. |PyPi version| image:: https://pypip.in/v/fylearn/badge.png\n   :target: https://crate.io/packages/fylearn/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/sorend/fylearn/tarball/0.1.8", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sorend/fylearn", "keywords": "machine learning,fuzzy logic,scikit-learn", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fylearn", "package_url": "https://pypi.org/project/fylearn/", "platform": "", "project_url": "https://pypi.org/project/fylearn/", "project_urls": {"Download": "https://github.com/sorend/fylearn/tarball/0.1.8", "Homepage": "https://github.com/sorend/fylearn"}, "release_url": "https://pypi.org/project/fylearn/0.1.8/", "requires_dist": ["numpy (>=1.16)", "scipy (>=1.3)", "scikit-learn (>=0.20)"], "requires_python": "", "summary": "Fuzzy Machine Learning Algorithms", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/sorend/fylearn\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/991c0709392829b4238adabefaf17fd38e8065c8/68747470733a2f2f7472617669732d63692e636f6d2f736f72656e642f66796c6561726e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://crate.io/packages/fylearn/\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e4351df477ec15c8f4fe97a0158011eef6e1daf/68747470733a2f2f70797069702e696e2f762f66796c6561726e2f62616467652e706e67\"></a></p>\n<p>fylearn is a fuzzy machine learning library, built on top of\n<a href=\"http://scikit-learn.org/\" rel=\"nofollow\">SciKit-Learn</a>.</p>\n<p>SciKit-Learn contains many common machine learning algorithms, and is a\ngood place to start if you want to play or program anything related to\nmachine learning in Python. fylearn is not intended to be a replacement\nfor SciKit-Learn (in fact fylearn depends on SciKit-Learn), but to\nprovide an extra set of machine learning algorithms from the fuzzy logic\ncommunity.</p>\n<div id=\"machine-learning-algorithms\">\n<h2>Machine learning algorithms</h2>\n<div id=\"fuzzy-pattern-classifiers\">\n<h3>Fuzzy pattern classifiers</h3>\n<p>Fuzzy pattern classifiers are classifiers that describe data using fuzzy\nsets and fuzzy aggregation functions.</p>\n<p>Several fuzzy pattern classifiers are implemented in the library: -\nfylearn.frr.FuzzyReductionRuleClassifier \u2013 based on learning membership\nfunctions from min/max. - fylearn.fpcga.FuzzyPatternClassifierGA \u2013\noptimizes membership functions globally. -\nfylearn.fpcga.FuzzyPatternClassifierLocalGA \u2013 optimizes membership\nfunctions locally. - fylearn.fpt.FuzzyPatternTreeClassifier \u2013 builds\nfuzzy pattern trees using bottom-up method. -\nfylearn.fpt.FuzzyPatternTreeTopDownClassifier \u2013 builds fuzzy pattern\ntrees using top-down method. - fylearn.nfpc.FuzzyPatternClassifier \u2013\nbase class for fuzzy pattern classifiers (see parameters).</p>\n</div>\n<div id=\"genetic-algorithm-rule-based-classifiers\">\n<h3>Genetic Algorithm rule based classifiers</h3>\n<p>A type of classifier that uses GA to optimize rules</p>\n<ul>\n<li>fylearn.garules.MultimodalEvolutionaryClassifer \u2013 learns rules using\ngenetic algorithm.</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can add fylearn to your project by using pip:</p>\n<pre>pip install fylearn\n</pre>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>You can use the classifiers as any other SciKit-Learn classifier:</p>\n<pre>from fylearn.nfpc import FuzzyPatternClassifier\nfrom fylearn.garules import MultimodalEvolutionaryClassifier\nfrom fylearn.fpt import FuzzyPatternTreeTopDownClassifier\n\nC = (FuzzyPatternClassifier(),\n     MultimodalEvolutionaryClassifier(),\n     FuzzyPatternTreeTopDownClassifier())\n\nfor c in C:\n    print c.fit(X, y).predict([1, 2, 3, 4])\n</pre>\n</div>\n</div>\n<div id=\"heuristic-search-methods\">\n<h2>Heuristic search methods</h2>\n<p>Several heuristic search methods are implemented. These are used in the\nlearning algorithms for parameter assignment, but, are also usable\ndirectly.</p>\n<ul>\n<li>fylearn.local_search.PatternSearchOptimizer</li>\n<li>fylearn.local_search.LocalUnimodalSamplingOptimizer</li>\n<li>fylearn.ga.GeneticAlgorithm: Search parameters using modification and\na scaling</li>\n<li>fylearn.ga.UnitIntervalGeneticAlgorithm: Search parameters in unit\ninterval universe.</li>\n<li>fylearn.ga.DiscreteGeneticAlgorithm: Search parameters from discrete\nuniverse.</li>\n<li>fylearn.tlbo.TeachingLearningBasedOptimizer: Search using\nteaching-learning based optimization.</li>\n<li>fylearn.jaya.JayaOptimizer: Search based on moving towards best\nsolution while avoiding worst.</li>\n</ul>\n<p>Example use:</p>\n<pre>import numpy as np\nfrom fylearn.ga import UnitIntervalGeneticAlgorithm, helper_fitness, helper_n_generations\nfrom fylearn.local_search import LocalUnimodalSamplingOptimizer, helper_num_runs\nfrom fylearn.tlbo import TeachingLearningBasedOptimizer\nfrom fylearn.jaya import JayaOptimizer\n\ndef fitness(x):  # defined for a single chromosome, so we need helper_fitness for GA\n    return np.sum(x**2)\n\nga = UnitIntervalGeneticAlgorithm(fitness_function=helper_fitness(fitness), n_chromosomes=100, n_genes=10)\nga = helper_n_generations(ga, 100)\nbest_chromosomes, best_fitness = ga.best(1)\nprint \"GA solution\", best_chromosomes[0], \"fitness\", best_fitness[0]\n\nlower_bounds, upper_bounds = np.ones(10) * -10., np.ones(10) * 10.\nlus = LocalUnimodalSamplingOptimizer(fitness, lower_bounds, upper_bounds)\nbest_solution, best_fitness = helper_num_runs(lus, 100)\nprint \"LUS solution\", best_solution, \"fitness\", best_fitness\n\ntlbo = TeachingLearningBasedOptimizer(fitness, lower_bounds, upper_bounds)\ntlbo = helper_n_generations(tlbo, 100)\nbest_solution, best_fitness = tlbo.best()\nprint \"TLBO solution\", best_solution, \"fitness\", best_fitness\n\njaya = JayaOptimizer(fitness, lower_bounds, upper_bounds)\njaya = helper_n_generations(jaya, 100)\nbest_solution, best_fitness = jaya.best()\nprint \"Jaya solution\", best_solution, \"fitness\", best_fitness\n</pre>\n</div>\n<div id=\"a-tiny-fuzzy-logic-library\">\n<h2>A tiny fuzzy logic library</h2>\n<p>Tiny, but hopefully useful. The focus of the library is on providing\nmembership functions and aggregations that work with NumPy, for using in\nthe implemented learning algorithms.</p>\n<div id=\"membership-functions\">\n<h3>Membership functions</h3>\n<ul>\n<li>fylearn.fuzzylogic.TriangularSet</li>\n<li>fylearn.fuzzylogic.TrapezoidalSet</li>\n<li>fylearn.fuzzylogic.PiSet</li>\n</ul>\n<p>Example use:</p>\n<pre>import numpy as np\nfrom fylearn.fuzzylogic import TriangularSet\nt = TriangularSet(1.0, 4.0, 5.0)\nprint t(3)   # use with singletons\nprint t(np.array([[1, 2, 3], [4, 5, 6]]))  # use with arrays\n</pre>\n</div>\n<div id=\"aggregation-functions\">\n<h3>Aggregation functions</h3>\n<p>Here focus has been on providing aggregation functions that support\naggregation along a specified axis for 2-dimensional matrices.</p>\n<p>Example use:</p>\n<pre>import numpy as np\nfrom fylearn.fuzzylogic import meowa, OWA\na = OWA([1.0, 0.0, 0.0])  # pure AND in OWA\nX = np.random.rand(5, 3)\nprint a(X)  # AND row-wise\na = meowa(5, 0.2)  # OR, andness = 0.2\nprint a(X.T)  # works column-wise, so apply to transposed X\n</pre>\n</div>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<p>We are working on adding the following algorithms:</p>\n<ul>\n<li>ANFIS.</li>\n<li>FRBCS.</li>\n</ul>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>fylearn is supposed to mean \u201cFuzzY learning\u201d, but in Danish the word\n\u201cfy\u201d means loosely translated \u201cfor shame\u201d. It has been created by the\nDepartment of Computer Science at Sri Venkateswara University, Tirupati,\nINDIA by a <a href=\"http://www.cs.svu-ac.in/~sorend/\" rel=\"nofollow\">PhD student</a> as part of\nhis research.</p>\n</div>\n<div id=\"contributions\">\n<h2>Contributions:</h2>\n<ul>\n<li>fylearn.local_search Python code by <a href=\"http://hvass-labs.org/\" rel=\"nofollow\">M. E. H.\nPedersen</a> (M. E. H. Pedersen, <em>Tuning and\nSimplifying Heuristical Optimization</em>, PhD Thesis, University of\nSouthampton, U.K., 2010)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6436189, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "19d98d4fad714ef989817528c2c9c329", "sha256": "a78c12078c25530949e283f00592c50388e1b0458f37f01402e2513d2e8fa01f"}, "downloads": -1, "filename": "fylearn-0.1.4.tar.gz", "has_sig": false, "md5_digest": "19d98d4fad714ef989817528c2c9c329", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25688, "upload_time": "2019-07-29T19:28:57", "upload_time_iso_8601": "2019-07-29T19:28:57.850185Z", "url": "https://files.pythonhosted.org/packages/0f/bd/eb20df1c60c28d9c742914848ef2222f4f1d9b8091068c17f6b577d33e34/fylearn-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "fec4bd1c07ff3e90dc28c866761c556a", "sha256": "cae83e39327ab8fa69090d03c960a81ef2bfe14b20b2501a66160fc6098c9270"}, "downloads": -1, "filename": "fylearn-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "fec4bd1c07ff3e90dc28c866761c556a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47062, "upload_time": "2020-01-11T10:45:27", "upload_time_iso_8601": "2020-01-11T10:45:27.528134Z", "url": "https://files.pythonhosted.org/packages/9e/bc/3f4dcdc88ce053f8ed4610f0347bca323593aec164429e780a313a6a452c/fylearn-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "228a2039cab245c2585d47b8d0e907f4", "sha256": "1c0f795ce41f60402be46b057b32dc3b2776c4d37ad9dde04a984d6487c6e149"}, "downloads": -1, "filename": "fylearn-0.1.6.tar.gz", "has_sig": false, "md5_digest": "228a2039cab245c2585d47b8d0e907f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36603, "upload_time": "2020-01-11T10:45:29", "upload_time_iso_8601": "2020-01-11T10:45:29.301089Z", "url": "https://files.pythonhosted.org/packages/4e/40/4e2599b7bfa2e70808ada63c51737bb1801aa4d57bdee1d91e4be445059e/fylearn-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "10f309536a26fc0f84a55611eaee101f", "sha256": "f8f75f540694701d48840da4b30de45f33b2eced365a18e88f103894ca8b3ef7"}, "downloads": -1, "filename": "fylearn-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "10f309536a26fc0f84a55611eaee101f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47066, "upload_time": "2020-01-11T15:16:04", "upload_time_iso_8601": "2020-01-11T15:16:04.333529Z", "url": "https://files.pythonhosted.org/packages/fa/c2/25d906f3f569a43a56dcd741540936718caed0e76ed036e978ad397e44ec/fylearn-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47eeb62684536c3d3daaeadf2b14f6eb", "sha256": "4cde05c9b0683c4b211d2180e4ed920c32078a2494ccacf9b8e2f46f762fa7b5"}, "downloads": -1, "filename": "fylearn-0.1.7.tar.gz", "has_sig": false, "md5_digest": "47eeb62684536c3d3daaeadf2b14f6eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36753, "upload_time": "2020-01-11T15:16:05", "upload_time_iso_8601": "2020-01-11T15:16:05.875871Z", "url": "https://files.pythonhosted.org/packages/f1/13/e9defa406e294975dcf08e0e86d0dff552d3cbceb1ef28fa34995c1b0c93/fylearn-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "2022743b507236ae42031c75b503bf8e", "sha256": "f1328e69464fc04a14b49a5dda164a7dfc036ea6d49c3f331fd1736e5ec33fd1"}, "downloads": -1, "filename": "fylearn-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2022743b507236ae42031c75b503bf8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47066, "upload_time": "2020-01-11T15:29:02", "upload_time_iso_8601": "2020-01-11T15:29:02.810910Z", "url": "https://files.pythonhosted.org/packages/d8/86/9729a8cb7ab835bd4a3640ede455cea032febba347bc4125664093879c51/fylearn-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d900392e0e55c807310ea8c7ab792ac3", "sha256": "718555b1f14f2f95b1ed45f81ab5a959e1b735bfc06ce9717cb328b8a3c4efb3"}, "downloads": -1, "filename": "fylearn-0.1.8.tar.gz", "has_sig": false, "md5_digest": "d900392e0e55c807310ea8c7ab792ac3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36751, "upload_time": "2020-01-11T15:29:04", "upload_time_iso_8601": "2020-01-11T15:29:04.568602Z", "url": "https://files.pythonhosted.org/packages/fb/2f/72414dd23134d2b869ae2c3abecd16ea585e3982a77075ab26fc9abc0b77/fylearn-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2022743b507236ae42031c75b503bf8e", "sha256": "f1328e69464fc04a14b49a5dda164a7dfc036ea6d49c3f331fd1736e5ec33fd1"}, "downloads": -1, "filename": "fylearn-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2022743b507236ae42031c75b503bf8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47066, "upload_time": "2020-01-11T15:29:02", "upload_time_iso_8601": "2020-01-11T15:29:02.810910Z", "url": "https://files.pythonhosted.org/packages/d8/86/9729a8cb7ab835bd4a3640ede455cea032febba347bc4125664093879c51/fylearn-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d900392e0e55c807310ea8c7ab792ac3", "sha256": "718555b1f14f2f95b1ed45f81ab5a959e1b735bfc06ce9717cb328b8a3c4efb3"}, "downloads": -1, "filename": "fylearn-0.1.8.tar.gz", "has_sig": false, "md5_digest": "d900392e0e55c807310ea8c7ab792ac3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36751, "upload_time": "2020-01-11T15:29:04", "upload_time_iso_8601": "2020-01-11T15:29:04.568602Z", "url": "https://files.pythonhosted.org/packages/fb/2f/72414dd23134d2b869ae2c3abecd16ea585e3982a77075ab26fc9abc0b77/fylearn-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:27 2020"}