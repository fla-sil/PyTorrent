{"info": {"author": "Claudio Guarnieri", "author_email": "nex@nex.sx", "bugtrack_url": null, "classifiers": [], "description": "# Mobile Verification Toolkit\n\nMobile Verification Toolkit (MVT) is a collection of utilities designed to simplify and automate the process of gathering data that might be helpful to identify any potential compromise or infection of the Android or iOS device.\n\n\n## Installation\n\n### Dependencies on Linux\n\nFirst install some basic dependencies that will be necessary to build all required tools:\n\n    sudo apt install python3 python3-pip python3-dev build-essential libssl-dev libffi-dev swig android-sdk-platform-tools\n\n### Dependencies on Mac\n\nRunning MVT on Mac requires Xcode and [homebrew](https://brew.sh) to be installed.\n\nIn order to install adb and other dependencies use:\n\n    brew install openssl swig libusb python3\n    brew install homebrew/cask/android-platform-tools\n\n### Installing MVT\n\nIf you haven't done so, you can add this to your `.bashrc` file in order to add locally installed Pypi binaries to your `$PATH`:\n\n    export PATH=$PATH:~/.local/bin\n\nThen you can install MVT directly:\n\n    pip3 install mvt\n\nYou now should have the `mvt-ios` and `mvt-android` utilities installed.\n\n\n## mvt-ios\n\n`mvt-ios` allows to extract relevant info from an unencrypted iTunes backup or a full filesystem dump.\n\nCurrently, it is capable of:\n\n- Extracting Safari browsing history, and highlight potentially suspicious redirect chains perhaps indicative of network injection attacks.\n- Extract domains from Safari's LocalStorage.\n- Extract domains from Safari's IndexedDB storage.\n- Extract all SMS messages containing links.\n- Extract all WhatsApp messages containing links.\n- Compare all of the above records with a provided list of suspicious domains.\n- Extract a list of processes identified in `netusage.sqlite`, and highlight those which look suspicious.\n- Extract a list of processes identified in `DataUsage.sqlite`.\n\nAnd more.\n\n### Installing libimobiledevice\n\nIn order to easily extract an iTunes backup from an iOS device, we recommend using the [libimobiledevice](https://www.libimobiledevice.org/) utilities. On some versions of Debian-based Linux systems they are available for install through:\n\n    sudo apt install libimobiledevice-utils\n\nOn Mac, you can try installing it from brew:\n\n    brew install --HEAD libimobiledevice\n\nIf you have a reasonably recent version of libimobiledevice in your package manager, it might work straight out of the box. Try connecting your iOS device to your computer via USB and run:\n\n    ideviceinfo\n\nBecause the utilities and its libraries are subject to frequent changes in response to new versions of iOS, you might want to consider compiling libimobiledevice utilities from sources.\n\n### Installing libimobiledevice from sources\n\n**Warning**: the following instructions are a best effort. The installation from source requires several steps, and it is likely some have been forgotten here and that won't work for you. You will likely need to fiddle around a bit before getting this right.\n\nMake sure you have uninstalled all the libimobiledevice tools from your package manage:\n\n    sudo apt remove --purge libimobiledevice-utils libimobiledevice-dev libimobiledevice6 libplist-dev libplist3 libusbmuxd-dev libusbmuxd-tools libusbmuxd4 libusbmuxd6 usbmuxd\n\nFirstly you need to install [libplist](https://github.com/libimobiledevice/libplist). Then you can install [libusbmuxd](https://github.com/libimobiledevice/libusbmuxd).\n\nNow you should be able to to download and install the actual suite of tools at [https://github.com/libimobiledevice/libimobiledevice](https://github.com/libimobiledevice/libimobiledevice).\n\nYou can now also build and install [usbmuxd](https://github.com/libimobiledevice/usbmuxd).\n\n### Generating the backup\n\nOnce the idevice tools are available you can check if everything works fine by connecting your iOS device and running:\n\n    ideviceinfo\n\nThis should some many details on the connected iOS device. If you are connecting the device to your laptop for the first time, it will require to unlock and enter the PIN code on the mobile device. If it complains that no device is connected and the mobile device is indeed plugged in through the USB cable, you might need to do this first:\n\n    sudo usbmuxd -f -d\n    idevicepair pair\n\nAgain, it will ask to unlock the phone and enter the PIN code. If everything is now fine you can proceed with the backup. Firstly we need to make sure that the backup is NOT encrypted:\n\n    idevicebackup2 -i encryption off\n\nThen you can proceed with the actual extraction:\n\n    idevicebackup2 backup /path/to/backup/\n\n### Running mvt-ios on a backup\n\nThe backup might take some time. It is best to make sure the phone remains unlocked during the backup process. Afterwards, a new folder will be created under the path you specified using the UDID of the iPhone you backed up. You can then pass that folder to the `mvt-ios` script and specify another folder to store the results in:\n\n    mvt-ios check-backup /path/to/backup/udid/ --output /path/to/output/\n\nThis will create a few JSON files containing the results from the extraction. If you do not specify a `--output` option, `mvt-ios` will just process the data without storing results on disk.\n\n### Running mvt-ios on a full filesystem dump\n\nWhile iTunes backup provide a lot of very useful databases and diagnistic data, they might not be enough. From iOS 13, for example, Safari's browsing history is no longer exported by iTunes. You might want to jailbreak the device and perform a full filesystem dump. In that case, you should take a look at [checkra1n](https://checkra.in/). **Note**: before you checkra1n any device, make sure you take a full backup, and that you are prepared to do a full factory reset before restoring it. Even after using checkra1n's \"Restore System\", some traces of the jailbreak are still left on the device and [apps with anti-jailbreaks will be able to detect them](https://github.com/checkra1n/BugTracker/issues/279).\n\n`mvt-ios` is capable of extracting data and look for indicators of compromise on a full filesystem dump as well:\n\n    mvt-ios check-fs /path/to/filesystem/dump/root/ --output /path/to/output/\n\n\n## mvt-android\n\nIn order to use `mvt-android` you need to connect your Android device to your computer. You will then need to [enable USB debugging](https://developer.android.com/studio/debug/dev-options#enable) on the Android device.\n\nMake sure to generate your adb keys:\n\n    mkdir $HOME/.android\n    adb keygen $HOME/.android/adbkey\n\nThe following command might be necessary on Mac systems:\n\n    adb pubkey $HOME/.android/adbkey > $HOME/.android/adbkey.pub\n\nIf this is the first time you connect to this device, you will need to approve the authentication keys through a prompt that will appear on your Android device.\n\nNow you can launch `mvt-android` and specify the `fetch-apks` command and the path to the folder where you want to store the extracted data:\n\n    mvt-android fetch-apks --output /path/to/folder\n\nOptionally, you can decide to enable lookups of the SHA256 hash of all the extracted APKs on [VirusTotal](https://www.virustotal.com) and/or [Koodous](https://www.koodous.com). While these lookups do not provide any conclusive assessment on all of the extracted APKs, they might highlight any known malicious ones.\n\n    mvt-android fetch-apks --output /path/to/folder --virustotal\n    mvt-android fetch-apks --output /path/to/folder --koodous\n\nOr, to launch all available lookups:\n\n    mvt-android fetch-apks --output /path/to/folder --all-checks\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "security mobile forensics malware", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "mvt", "package_url": "https://pypi.org/project/mvt/", "platform": "", "project_url": "https://pypi.org/project/mvt/", "project_urls": null, "release_url": "https://pypi.org/project/mvt/1.1/", "requires_dist": ["adb", "biplist", "coloredlogs", "halo", "requests", "rsa", "simplejson", "terminaltables", "tld", "tqdm"], "requires_python": "", "summary": "Mobile Verification Toolkit", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Mobile Verification Toolkit</p>\n<p>Mobile Verification Toolkit (MVT) is a collection of utilities designed to simplify and automate the process of gathering data that might be helpful to identify any potential compromise or infection of the Android or iOS device.</p>\n<p>## Installation</p>\n<p>### Dependencies on Linux</p>\n<p>First install some basic dependencies that will be necessary to build all required tools:</p>\n<blockquote>\nsudo apt install python3 python3-pip python3-dev build-essential libssl-dev libffi-dev swig android-sdk-platform-tools</blockquote>\n<p>### Dependencies on Mac</p>\n<p>Running MVT on Mac requires Xcode and [homebrew](<a href=\"https://brew.sh\" rel=\"nofollow\">https://brew.sh</a>) to be installed.</p>\n<p>In order to install adb and other dependencies use:</p>\n<blockquote>\nbrew install openssl swig libusb python3\nbrew install homebrew/cask/android-platform-tools</blockquote>\n<p>### Installing MVT</p>\n<p>If you haven\u2019t done so, you can add this to your <cite>.bashrc</cite> file in order to add locally installed Pypi binaries to your <cite>$PATH</cite>:</p>\n<blockquote>\nexport PATH=$PATH:~/.local/bin</blockquote>\n<p>Then you can install MVT directly:</p>\n<blockquote>\npip3 install mvt</blockquote>\n<p>You now should have the <cite>mvt-ios</cite> and <cite>mvt-android</cite> utilities installed.</p>\n<p>## mvt-ios</p>\n<p><cite>mvt-ios</cite> allows to extract relevant info from an unencrypted iTunes backup or a full filesystem dump.</p>\n<p>Currently, it is capable of:</p>\n<ul>\n<li>Extracting Safari browsing history, and highlight potentially suspicious redirect chains perhaps indicative of network injection attacks.</li>\n<li>Extract domains from Safari\u2019s LocalStorage.</li>\n<li>Extract domains from Safari\u2019s IndexedDB storage.</li>\n<li>Extract all SMS messages containing links.</li>\n<li>Extract all WhatsApp messages containing links.</li>\n<li>Compare all of the above records with a provided list of suspicious domains.</li>\n<li>Extract a list of processes identified in <cite>netusage.sqlite</cite>, and highlight those which look suspicious.</li>\n<li>Extract a list of processes identified in <cite>DataUsage.sqlite</cite>.</li>\n</ul>\n<p>And more.</p>\n<p>### Installing libimobiledevice</p>\n<p>In order to easily extract an iTunes backup from an iOS device, we recommend using the [libimobiledevice](<a href=\"https://www.libimobiledevice.org/\" rel=\"nofollow\">https://www.libimobiledevice.org/</a>) utilities. On some versions of Debian-based Linux systems they are available for install through:</p>\n<blockquote>\nsudo apt install libimobiledevice-utils</blockquote>\n<p>On Mac, you can try installing it from brew:</p>\n<blockquote>\nbrew install \u2013HEAD libimobiledevice</blockquote>\n<p>If you have a reasonably recent version of libimobiledevice in your package manager, it might work straight out of the box. Try connecting your iOS device to your computer via USB and run:</p>\n<blockquote>\nideviceinfo</blockquote>\n<p>Because the utilities and its libraries are subject to frequent changes in response to new versions of iOS, you might want to consider compiling libimobiledevice utilities from sources.</p>\n<p>### Installing libimobiledevice from sources</p>\n<p><strong>Warning</strong>: the following instructions are a best effort. The installation from source requires several steps, and it is likely some have been forgotten here and that won\u2019t work for you. You will likely need to fiddle around a bit before getting this right.</p>\n<p>Make sure you have uninstalled all the libimobiledevice tools from your package manage:</p>\n<blockquote>\nsudo apt remove \u2013purge libimobiledevice-utils libimobiledevice-dev libimobiledevice6 libplist-dev libplist3 libusbmuxd-dev libusbmuxd-tools libusbmuxd4 libusbmuxd6 usbmuxd</blockquote>\n<p>Firstly you need to install [libplist](<a href=\"https://github.com/libimobiledevice/libplist\" rel=\"nofollow\">https://github.com/libimobiledevice/libplist</a>). Then you can install [libusbmuxd](<a href=\"https://github.com/libimobiledevice/libusbmuxd\" rel=\"nofollow\">https://github.com/libimobiledevice/libusbmuxd</a>).</p>\n<p>Now you should be able to to download and install the actual suite of tools at [<a href=\"https://github.com/libimobiledevice/libimobiledevice%5D(https://github.com/libimobiledevice/libimobiledevice\" rel=\"nofollow\">https://github.com/libimobiledevice/libimobiledevice](https://github.com/libimobiledevice/libimobiledevice</a>).</p>\n<p>You can now also build and install [usbmuxd](<a href=\"https://github.com/libimobiledevice/usbmuxd\" rel=\"nofollow\">https://github.com/libimobiledevice/usbmuxd</a>).</p>\n<p>### Generating the backup</p>\n<p>Once the idevice tools are available you can check if everything works fine by connecting your iOS device and running:</p>\n<blockquote>\nideviceinfo</blockquote>\n<p>This should some many details on the connected iOS device. If you are connecting the device to your laptop for the first time, it will require to unlock and enter the PIN code on the mobile device. If it complains that no device is connected and the mobile device is indeed plugged in through the USB cable, you might need to do this first:</p>\n<blockquote>\nsudo usbmuxd -f -d\nidevicepair pair</blockquote>\n<p>Again, it will ask to unlock the phone and enter the PIN code. If everything is now fine you can proceed with the backup. Firstly we need to make sure that the backup is NOT encrypted:</p>\n<blockquote>\nidevicebackup2 -i encryption off</blockquote>\n<p>Then you can proceed with the actual extraction:</p>\n<blockquote>\nidevicebackup2 backup /path/to/backup/</blockquote>\n<p>### Running mvt-ios on a backup</p>\n<p>The backup might take some time. It is best to make sure the phone remains unlocked during the backup process. Afterwards, a new folder will be created under the path you specified using the UDID of the iPhone you backed up. You can then pass that folder to the <cite>mvt-ios</cite> script and specify another folder to store the results in:</p>\n<blockquote>\nmvt-ios check-backup /path/to/backup/udid/ \u2013output /path/to/output/</blockquote>\n<p>This will create a few JSON files containing the results from the extraction. If you do not specify a <cite>\u2013output</cite> option, <cite>mvt-ios</cite> will just process the data without storing results on disk.</p>\n<p>### Running mvt-ios on a full filesystem dump</p>\n<p>While iTunes backup provide a lot of very useful databases and diagnistic data, they might not be enough. From iOS 13, for example, Safari\u2019s browsing history is no longer exported by iTunes. You might want to jailbreak the device and perform a full filesystem dump. In that case, you should take a look at [checkra1n](<a href=\"https://checkra.in/\" rel=\"nofollow\">https://checkra.in/</a>). <strong>Note</strong>: before you checkra1n any device, make sure you take a full backup, and that you are prepared to do a full factory reset before restoring it. Even after using checkra1n\u2019s \u201cRestore System\u201d, some traces of the jailbreak are still left on the device and [apps with anti-jailbreaks will be able to detect them](<a href=\"https://github.com/checkra1n/BugTracker/issues/279\" rel=\"nofollow\">https://github.com/checkra1n/BugTracker/issues/279</a>).</p>\n<p><cite>mvt-ios</cite> is capable of extracting data and look for indicators of compromise on a full filesystem dump as well:</p>\n<blockquote>\nmvt-ios check-fs /path/to/filesystem/dump/root/ \u2013output /path/to/output/</blockquote>\n<p>## mvt-android</p>\n<p>In order to use <cite>mvt-android</cite> you need to connect your Android device to your computer. You will then need to [enable USB debugging](<a href=\"https://developer.android.com/studio/debug/dev-options#enable\" rel=\"nofollow\">https://developer.android.com/studio/debug/dev-options#enable</a>) on the Android device.</p>\n<p>Make sure to generate your adb keys:</p>\n<blockquote>\nmkdir $HOME/.android\nadb keygen $HOME/.android/adbkey</blockquote>\n<p>The following command might be necessary on Mac systems:</p>\n<blockquote>\nadb pubkey $HOME/.android/adbkey &gt; $HOME/.android/adbkey.pub</blockquote>\n<p>If this is the first time you connect to this device, you will need to approve the authentication keys through a prompt that will appear on your Android device.</p>\n<p>Now you can launch <cite>mvt-android</cite> and specify the <cite>fetch-apks</cite> command and the path to the folder where you want to store the extracted data:</p>\n<blockquote>\nmvt-android fetch-apks \u2013output /path/to/folder</blockquote>\n<p>Optionally, you can decide to enable lookups of the SHA256 hash of all the extracted APKs on [VirusTotal](<a href=\"https://www.virustotal.com\" rel=\"nofollow\">https://www.virustotal.com</a>) and/or [Koodous](<a href=\"https://www.koodous.com\" rel=\"nofollow\">https://www.koodous.com</a>). While these lookups do not provide any conclusive assessment on all of the extracted APKs, they might highlight any known malicious ones.</p>\n<blockquote>\nmvt-android fetch-apks \u2013output /path/to/folder \u2013virustotal\nmvt-android fetch-apks \u2013output /path/to/folder \u2013koodous</blockquote>\n<p>Or, to launch all available lookups:</p>\n<blockquote>\nmvt-android fetch-apks \u2013output /path/to/folder \u2013all-checks</blockquote>\n\n          </div>"}, "last_serial": 6676968, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "1d51037d5dc0324f0d3e3dcacfac9eb4", "sha256": "b51e1e58383b90867ea1a034a4ea25a8eca295181d039f98421d4da8293c1be7"}, "downloads": -1, "filename": "mvt-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1d51037d5dc0324f0d3e3dcacfac9eb4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64046, "upload_time": "2020-01-28T14:33:02", "upload_time_iso_8601": "2020-01-28T14:33:02.306789Z", "url": "https://files.pythonhosted.org/packages/2c/86/60f63c374315290eb2b2aacc4c196210508ec646b8986847369e3c08f850/mvt-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ca67798db9703f36c9bc9ed39194623", "sha256": "0c6494a16ca4b0eadfb2f5a4e5172e154befb5769fe3a8566bea51dc8bd252c8"}, "downloads": -1, "filename": "mvt-1.0.4.tar.gz", "has_sig": false, "md5_digest": "5ca67798db9703f36c9bc9ed39194623", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18123, "upload_time": "2020-01-28T14:33:03", "upload_time_iso_8601": "2020-01-28T14:33:03.933941Z", "url": "https://files.pythonhosted.org/packages/76/be/0c7f404a3d3f101b523337a13e05556a913e2715a1c8685ee3ad39de6c52/mvt-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "866392b2d904b679d52566d454093ca8", "sha256": "97a34ea091894fd851d4b645b06172197852518994afb9a8843bc2c1e578cac7"}, "downloads": -1, "filename": "mvt-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "866392b2d904b679d52566d454093ca8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44096, "upload_time": "2020-01-29T10:19:27", "upload_time_iso_8601": "2020-01-29T10:19:27.974587Z", "url": "https://files.pythonhosted.org/packages/c4/ab/7b6a3c0ebc3d87874fd27ab494be8173850c4846aca054612dc244aa9e83/mvt-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a442f09e8f5d89c64ecd39b3ed4e16dd", "sha256": "3081950e66c410ad555d774674f05a21acca5a88a612cb5e8327ecb46e699d83"}, "downloads": -1, "filename": "mvt-1.0.5.tar.gz", "has_sig": false, "md5_digest": "a442f09e8f5d89c64ecd39b3ed4e16dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18625, "upload_time": "2020-01-29T10:19:29", "upload_time_iso_8601": "2020-01-29T10:19:29.926486Z", "url": "https://files.pythonhosted.org/packages/32/e5/d002ee9def62096d523b3b8b9a12f242a1ef5fc4771e5a47f7ceb2f0e33c/mvt-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "207b9ca02be7d589db8d42b153abb1c5", "sha256": "ac472dc345096fcc0f2526a8497dba41e75d139d65c99a3b200f45addb88deb5"}, "downloads": -1, "filename": "mvt-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "207b9ca02be7d589db8d42b153abb1c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 63712, "upload_time": "2020-02-03T14:43:56", "upload_time_iso_8601": "2020-02-03T14:43:56.817656Z", "url": "https://files.pythonhosted.org/packages/d3/a5/b474d1b8006a302cbb297d6969c99387a25510818c570cac17cdfc8f44f9/mvt-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0357189a106a26d19920ff7a4200bde1", "sha256": "ffe9f415482b66ed80b2208cee3f186d49701d36969fc71ba9f20968eed545e3"}, "downloads": -1, "filename": "mvt-1.0.6.tar.gz", "has_sig": false, "md5_digest": "0357189a106a26d19920ff7a4200bde1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18669, "upload_time": "2020-02-03T14:43:58", "upload_time_iso_8601": "2020-02-03T14:43:58.633401Z", "url": "https://files.pythonhosted.org/packages/62/dd/06934564d53294ffb024ce505f18f1c7aa89c3e8a47a13eb8d2b4a6dd747/mvt-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "c78f4591bf87a782680ce182d072ec48", "sha256": "4c8d0de85ca617dd17ceed7ff6597db07398e94149e6dd1743d514548c173b65"}, "downloads": -1, "filename": "mvt-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c78f4591bf87a782680ce182d072ec48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 64639, "upload_time": "2020-02-19T16:27:01", "upload_time_iso_8601": "2020-02-19T16:27:01.334842Z", "url": "https://files.pythonhosted.org/packages/16/10/cdd82464d4b52a56723fa752a83c115ae8683cd0619b98f9ad87ef669452/mvt-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caa2522eabbfc4e551879ae10324c6a9", "sha256": "1d7d803d61adf181f2cc9cf0e76c6c86de4f1fd13ec4b7660ffd2c721af5024e"}, "downloads": -1, "filename": "mvt-1.0.7.tar.gz", "has_sig": false, "md5_digest": "caa2522eabbfc4e551879ae10324c6a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18815, "upload_time": "2020-02-19T16:27:02", "upload_time_iso_8601": "2020-02-19T16:27:02.823765Z", "url": "https://files.pythonhosted.org/packages/9f/0b/bc2182a87f8652bbe189fa73110af1041ec9467f93faf7d8993fe84e709d/mvt-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "fac36aad745e30fd34736ba730b17fad", "sha256": "472913d912a5d3c9ac9e28dc8f64d004f836137d14ea5adb9d12d4a0e519c9d5"}, "downloads": -1, "filename": "mvt-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "fac36aad745e30fd34736ba730b17fad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66467, "upload_time": "2020-02-20T08:50:52", "upload_time_iso_8601": "2020-02-20T08:50:52.399720Z", "url": "https://files.pythonhosted.org/packages/25/a2/96071ec8a46318f10690ad1fce47d3f5075fad17bba06698466048d26a26/mvt-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d43a861a00894f188fca973e73228622", "sha256": "e2281a37444c5d3ccd4780f8b3da8e91d63f97539eb134d5ee46ea06975c953a"}, "downloads": -1, "filename": "mvt-1.0.8.tar.gz", "has_sig": false, "md5_digest": "d43a861a00894f188fca973e73228622", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19504, "upload_time": "2020-02-20T08:50:54", "upload_time_iso_8601": "2020-02-20T08:50:54.058783Z", "url": "https://files.pythonhosted.org/packages/d0/ae/4b0f5181f177ce600d4df2e58ac44f187c8aa99e86976887dbac0b143b21/mvt-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "0ff7366561530972f66220bf7456d821", "sha256": "47a199fc021c4874c24b2ab91b11779058044a5f572d4e573c68521c2d513fad"}, "downloads": -1, "filename": "mvt-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0ff7366561530972f66220bf7456d821", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 69487, "upload_time": "2020-02-20T08:57:47", "upload_time_iso_8601": "2020-02-20T08:57:47.796212Z", "url": "https://files.pythonhosted.org/packages/77/de/06244ae0db06b5cf211bcf6111eb9b8648f585dcf6741afca4aaf2660fc3/mvt-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd016868f59d29e82a6e26b95f552de5", "sha256": "243ffa32e09f8022e8af8f50bd63f200b64c980f896dbb026411ae56e7955e33"}, "downloads": -1, "filename": "mvt-1.0.9.tar.gz", "has_sig": false, "md5_digest": "fd016868f59d29e82a6e26b95f552de5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19528, "upload_time": "2020-02-20T08:57:49", "upload_time_iso_8601": "2020-02-20T08:57:49.196348Z", "url": "https://files.pythonhosted.org/packages/4c/63/f27f6ca491aa9c1a2af2de1289653b7e10bb1fb7f9cb378d44d18cd6e15e/mvt-1.0.9.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a2c12117a54f4a7925b05906bc7b775d", "sha256": "ee29ae1eb05a5a8c7a8383df7577e16bb44e96df9d900eb13ccd8a5ca922c209"}, "downloads": -1, "filename": "mvt-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a2c12117a54f4a7925b05906bc7b775d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 76557, "upload_time": "2020-02-21T18:23:18", "upload_time_iso_8601": "2020-02-21T18:23:18.857372Z", "url": "https://files.pythonhosted.org/packages/47/4e/313c7afee105fbcd2f0b3b89b6238e34b66e15f6eb5a848dde2489d83288/mvt-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cbbfcb126022415ef0245e74f9d1b46", "sha256": "3281c7f42d04f75b023917f9f364d4c88ec7726d0ccedb91be68a046877339b5"}, "downloads": -1, "filename": "mvt-1.1.tar.gz", "has_sig": false, "md5_digest": "7cbbfcb126022415ef0245e74f9d1b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20767, "upload_time": "2020-02-21T18:23:20", "upload_time_iso_8601": "2020-02-21T18:23:20.942429Z", "url": "https://files.pythonhosted.org/packages/20/04/ad492bc069cff12047933706da11cb752941750cd079750ef4020afbc5b8/mvt-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2c12117a54f4a7925b05906bc7b775d", "sha256": "ee29ae1eb05a5a8c7a8383df7577e16bb44e96df9d900eb13ccd8a5ca922c209"}, "downloads": -1, "filename": "mvt-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a2c12117a54f4a7925b05906bc7b775d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 76557, "upload_time": "2020-02-21T18:23:18", "upload_time_iso_8601": "2020-02-21T18:23:18.857372Z", "url": "https://files.pythonhosted.org/packages/47/4e/313c7afee105fbcd2f0b3b89b6238e34b66e15f6eb5a848dde2489d83288/mvt-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cbbfcb126022415ef0245e74f9d1b46", "sha256": "3281c7f42d04f75b023917f9f364d4c88ec7726d0ccedb91be68a046877339b5"}, "downloads": -1, "filename": "mvt-1.1.tar.gz", "has_sig": false, "md5_digest": "7cbbfcb126022415ef0245e74f9d1b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20767, "upload_time": "2020-02-21T18:23:20", "upload_time_iso_8601": "2020-02-21T18:23:20.942429Z", "url": "https://files.pythonhosted.org/packages/20/04/ad492bc069cff12047933706da11cb752941750cd079750ef4020afbc5b8/mvt-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:00 2020"}