{"info": {"author": "Stephen Neal", "author_email": "stephen@stephenneal.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Graphics", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Multimedia :: Graphics :: Viewers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "psd-tools2\n==========\n\n``psd-tools2`` is a package for reading Adobe Photoshop PSD files\nas described in specification_ to Python data structures.\n\nThis is a fork of psd-tools_ that adds a couple of enhancements to the\noriginal version.\n\n.. _specification: https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm\n\n.. image:: https://img.shields.io/pypi/v/psd-tools2.svg\n   :target: https://pypi.python.org/pypi/psd-tools2\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/travis/kyamagu/psd-tools2/master.svg\n   :alt: Build Status\n   :target: https://travis-ci.org/kyamagu/psd-tools2\n\n.. image:: https://readthedocs.org/projects/psd-tools2/badge/\n   :alt: Document Status\n   :target: http://psd-tools2.readthedocs.io/en/latest/\n\n.. _psd-tools: https://github.com/psd-tools/psd-tools\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install psd-tools2\n\nPillow_ should be installed if you want work with PSD image and layer data:\nexport images to PNG, process them. PIL_ library should also work.\n\n.. code-block:: bash\n\n   pip install Pillow\n\n.. note::\n\n    In order to extract images from 32bit PSD files PIL/Pillow must be built\n    with LITTLECMS or LITTLECMS2 support.\n\npsd-tools2 also has a rudimentary support for Pymaging_.\n`Pymaging installation instructions`_ are available in pymaging docs.\n\n.. _PIL: http://www.pythonware.com/products/pil/\n.. _Pillow: https://github.com/python-imaging/Pillow\n.. _packbits: http://pypi.python.org/pypi/packbits/\n.. _Pymaging: https://github.com/ojii/pymaging\n.. _Pymaging installation instructions: http://pymaging.readthedocs.org/en/latest/usr/installation.html\n.. _exifread: https://github.com/ianare/exif-py\n\n\nCommand line\n------------\n\nThe current tool supports PNG/JPEG export:\n\n.. code-block:: bash\n\n    psd-tools convert <psd_filename> <out_filename> [options]\n    psd-tools export_layer <psd_filename> <layer_index> <out_filename> [options]\n    psd-tools debug <filename> [options]\n    psd-tools -h | --help\n    psd-tools --version\n\n\nAPI Usage\n---------\n\nLoad an image::\n\n    >>> from psd_tools import PSDImage\n    >>> psd = PSDImage.load('my_image.psd')\n\nPrint the layer structure::\n\n    >>> psd.print_tree()\n\nRead image header::\n\n    >>> psd.header\n    PsdHeader(number_of_channels=3, height=200, width=100, depth=8, color_mode=RGB)\n\nAccess its layers::\n\n    >>> psd.layers\n    [<group: 'Group 2', layer_count=1, mask=None, visible=1>,\n     <group: 'Group 1', layer_count=1, mask=None, visible=1>,\n     <pixel: 'Background', size=100x200, x=0, y=0, mask=None, visible=1>]\n\n    >>> list(psd.descendants())\n    [<group: 'Group 2', layer_count=1, mask=None, visible=1>,\n     <shape: 'Shape 2', size=43x62, x=40, y=72, mask=None, visible=1)>,\n     <group: 'Group 1', layer_count=1, mask=None, visible=1>,\n     ...\n     ]\n\n\nWork with a layer group::\n\n    >>> group2 = psd.layers[0]\n    >>> group2.name\n    Group 2\n\n    >>> group2.visible\n    True\n\n    >>> group2.opacity\n    255\n\n    >>> group2.blend_mode == 'normal'\n    True\n\n    >>> group2.layers\n    [<shape: 'Shape 2', size=43x62, x=40, y=72, mask=None, visible=1)>]\n\nWork with a layer::\n\n    >>> layer = group2.layers[0]\n    >>> layer.name\n    Shape 2\n\n    >>> layer.kind\n    type\n\n    >>> layer.bbox\n    BBox(x1=40, y1=72, x2=83, y2=134)\n\n    >>> layer.bbox.width, layer.bbox.height\n    (43, 62)\n\n    >>> layer.visible, layer.opacity, layer.blend_mode\n    (True, 255, 'normal')\n\n    >>> layer.text\n    'Text inside a text box'\n\n    >>> layer.as_PIL()\n    <PIL.Image.Image image mode=RGBA size=43x62 at ...>\n\n    >>> mask = layer.mask\n    >>> mask.bbox\n    BBox(x1=40, y1=72, x2=83, y2=134)\n\n    >>> mask.as_PIL()\n    <PIL.Image.Image image mode=L size=43x62 at ...>\n\n    >>> layer.clip_layers\n    [<shape: 'Clipped', size=43x62, x=40, y=72, mask=None, visible=1)>, ...]\n\n    >>> layer.effects\n    [<GradientOverlay>]\n\nExport a single layer::\n\n    >>> layer_image = layer.as_PIL()\n    >>> layer_image.save('layer.png')\n\nExport the merged image::\n\n    >>> merged_image = psd.as_PIL()\n    >>> merged_image.save('my_image.png')\n\nThe same using Pymaging_::\n\n    >>> merged_image = psd.as_pymaging()\n    >>> merged_image.save_to_path('my_image.png')\n    >>> layer_image = layer.as_pymaging()\n    >>> layer_image.save_to_path('layer.png')\n\nExport a thumbnail in PIL Image::\n\n    >>> thumbnail_image = psd.thumbnail()\n\nExport layer group (experimental)::\n\n    >>> group_image = group2.as_PIL()\n    >>> group_image.save('group.png')\n\n\nDesign overview\n---------------\n\nThe process of handling a PSD file is split into 3 stages:\n\n1) \"Reading\": the file is read and parsed to low-level data\n   structures that closely match the specification. No user-accessible\n   images are constructed; image resources blocks and additional layer\n   information are extracted but not parsed (they remain just keys\n   with a binary data). The goal is to extract all information\n   from a PSD file.\n\n2) \"Decoding\": image resource blocks and additional layer\n   information blocks are parsed to a more detailed data structures\n   (that are still based on a specification). There are a lot of PSD\n   data types and the library currently doesn't handle them all, but\n   it should be easy to add the parsing code for the missing PSD data\n   structures if needed.\n\nAfter (1) and (2) we have an in-memory data structure that closely\nresembles PSD file; it should be fairly complete but very low-level\nand not easy to use. So there is a third stage:\n\n3) \"User-facing API\": PSD image is converted to an user-friendly object\n   that supports layer groups, exporting data as ``PIL.Image`` or\n   ``pymaging.Image``, etc.\n\nStage separation also means user-facing API may be opinionated:\nif somebody doesn't like it then it should possible to build an\nanother API based on lower-level decoded PSD file.\n\n``psd-tools2`` tries not to throw away information from the original\nPSD file; even if the library can't parse some info, this info\nwill be likely available somewhere as raw bytes (open a bug if this is\nnot the case). This should make it possible to modify and write PSD\nfiles (currently not implemented; contributions are welcome).\n\nFeatures\n--------\n\nSupported:\n\n* reading of RGB, RGBA, CMYK, CMYKA and Grayscale images;\n* 8bit, 16bit and 32bit channels;\n* all PSD compression methods are supported (not only the most\n  common RAW and RLE);\n* image ICC profile is taken into account;\n* many image resource types and tagged block types are decoded;\n* layer effects information is decoded;\n* Descriptor structures are decoded;\n* there is an optional Cython extension to make the parsing fast;\n* very basic & experimental layer merging;\n* support both PSD and PSB file formats;\n* EngineData structure is decoded;\n* EXIF data is taken into account.\n\nNot implemented:\n\n* reading of Duotone, LAB, etc. images;\n* some image resource types and tagged blocks are not decoded\n  (they are attached to the result as raw bytes);\n* some of the raw Descriptor values are not decoded;\n* this library can't reliably blend layers together: it is possible to export\n  a single layer and to export a final image, but rendering of\n  e.g. layer group may produce incorrect results;\n* the writing of PSD images is not implemented;\n* Pymaging_ support is limited: it only supports 8bit RGB/RGBA\n  images, ICC profiles are not applied, layer merging doesn't work, etc.\n\nIf you need some of unimplemented features then please file an issue\nor implement it yourself (pull requests are welcome in this case).\n\n\nContributing\n------------\n\nDevelopment happens at github: `source code <https://github.com/kyamagu/psd-tools2>`__,\n`bug tracker <https://github.com/kyamagu/psd-tools2/issues>`__.\nFeel free to submit ideas, bugs or pull requests.\n\nIn case of bugs it would be helpful to provide a small PSD file\ndemonstrating the issue; this file may be added to a test suite.\n\nIn order to run tests, make sure PIL/Pillow is built with LittleCMS\nor LittleCMS2 support, install `tox <http://tox.testrun.org>`_ and type:\n\n.. code-block:: bash\n\n    tox\n\nInstall Sphinx to generate documents:\n\n.. code-block:: bash\n\n    pip install sphinx sphinx_rtd_theme\n\nOnce installed, use ``Makefile``:\n\n.. code-block:: bash\n\n    make -C docs html\n\nfrom the source checkout.\n\nThe license is MIT.\n\nAcknowledgments\n---------------\n\nGreat thanks to the original `psd-tools` author Mikhail Korobov.\nA full list of contributors can be found here:\nhttps://github.com/kyamagu/psd-tools2/blob/master/AUTHORS.txt\n\n\n1.7.18 (2018-09-26)\n-------------------\n\n- add shape rendering in `compose()`;\n- add grayscale support.\n\n1.7.17 (2018-09-21)\n-------------------\n\n- fix `has_pixel()` condition.\n\n1.7.16 (2018-08-29)\n-------------------\n\n- fix fill opacity in `compose()`;\n- workaround for broken `PrintFlags`.\n\n1.7.15 (2018-08-28)\n-------------------\n\n- fix color overlay issue in `compose()`.\n\n1.7.14 (2018-08-24)\n-------------------\n\n- fix `verbose` arg for python 3.7 compatibility.\n\n1.7.13 (2018-08-10)\n-------------------\n\n- fix `has_pixel()` for partial channels;\n- support color overlay in `compose()`.\n\n1.7.12 (2018-06-25)\n-------------------\n\n- fix mask rendering in compose (Thanks @andrey-hider and @nkato).\n\n1.7.11 (2018-06-11)\n-------------------\n\n- unicode bugfixes.\n\n1.7.10 (2018-06-06)\n-------------------\n\n- fix descriptor decoding errors;\n- minor bugfixes.\n\n1.7.9 (2018-06-05)\n------------------\n\n- fix UnicodeError in exif;\n- workaround for irregular descriptor name;\n- add undocumented `extn` tagged block decoding;\n- move duplicated icc module to subpackage;\n- support PIL rendering with extra alpha channels.\n\n1.7.8 (2018-05-29)\n------------------\n\n- update documentation;\n- fix PEP8 compliance;\n- rename merge_layers to compose.\n\n1.7.7 (2018-05-02)\n------------------\n\n- fix white background issue in `as_PIL()`.\n\n1.7.6 (2018-04-27)\n------------------\n\n- add quality testing;\n- fix disabled mask.\n\n1.7.5 (2018-04-25)\n------------------\n\n- fix `has_mask()` condition;\n- add mask composition in `merge_layers()`;\n- fix mask display.\n\n1.7.4 (2018-03-06)\n------------------\n\n- fix infinity loop in `print_tree()`.\n\n1.7.3 (2018-02-27)\n------------------\n\n- add vector origination API;\n- fix shape and vector mask identification;\n- change enum name conversion;\n- update docs.\n\n1.7.2 (2018-02-14)\n------------------\n\n- add adjustments API;\n- add mask API;\n- bugfix for tagged_blocks decoders.\n\n1.7.1 (2018-02-08)\n------------------\n\n- add mask user API;\n- add layer coordinate user API;\n- add vector mask and vector stroke API;\n- cleanup user API;\n- add automatic descriptor conversion.\n\n\n1.7.0 (2018-01-25)\n------------------\n\n- cleanup user API organization;\n- remove json encoder api;\n- make cli a package main.\n\n1.6.7 (2018-01-17)\n------------------\n\n- workaround for anaconda 2.7 pillow;\n- bbox existence checkf.\n\n1.6.6 (2018-01-10)\n------------------\n\n- experimental clipping support in `merge_layer()`;\n- revert `as_PIL()` in `AdjustmentLayer`.\n\n1.6.5 (2017-12-22)\n------------------\n\n- Small fix for erroneous unicode path name\n\n1.6.4 (2017-12-20)\n------------------\n\n- Add `all_layers()` method;\n- Add `_image_resource_blocks` property;\n- Add `thumbnail()` method.\n\n1.6.3 (2017-09-27)\n------------------\n\n- documentation updates;\n- github repository renamed to psd-tools2;\n- AdjustmentLayer fix.\n\n1.6.2 (2017-09-13)\n------------------\n\n- layer class structure reorganization;\n- add Effects API;\n- add TypeLayer API methods.\n\n1.6 (2017-09-08)\n----------------\n\n- PSDImage user API update;\n- user API adds distinct layer types;\n- Sphinx documentation.\n\n1.5 (2017-07-13)\n----------------\n\n- implemented many decodings of image resources and tagged blocks;\n- implemented EngineData text information;\n- user API for getting mask and patterns;\n- user API to calculate bbox for shape layers;\n\n1.4 (2017-01-02)\n----------------\n\n- Fixed reading of layer mask data (thanks Evgeny Kopylov);\n- Python 2.6 support is dropped;\n- Python 3.6 support is added (thanks Leendert Brouwer);\n- extension is rebuilt with Cython 0.25.2.\n\n1.3 (2016-01-25)\n----------------\n\n- fixed references decoding (thanks Josh Drake);\n- fixed PIL support for CMYK files (thanks Michael Wu);\n- optional C extension is rebuilt with Cython 0.23.4;\n- Python 3.2 support is dropped; the package still works in Python 3.2,\n  but the compatibility is no longer checked by tests, and so it can break\n  in future.\n- declare Python 3.5 as supported.\n\n1.2 (2015-01-27)\n----------------\n\n- implemented extraction of embedded files (embedded smart objects) -\n  thanks Volker Braun;\n- optional C extension is rebuilt with Cython 0.21.2.\n- hg mirror on bitbucket is dropped, sorry!\n\n1.1 (2014-11-17)\n----------------\n\n- improved METADATA_SETTING decoding (thanks Evgeny Kopylov);\n- layer comps decoding (thanks Evgeny Kopylov);\n- improved smart objects decoding (thanks Joey Gentry);\n- user API for getting layer transforms and placed layer size\n  (thanks Joey Gentry);\n- IPython import is deferred to speedup ``psd-tools.py`` command-line utility;\n- ``_RootGroup.__repr__`` is fixed;\n- warning message building is more robust;\n- optional C extension is rebuilt with Cython 0.21.1.\n\n1.0 (2014-07-24)\n----------------\n\n- Fixed reading of images with layer masks (thanks Evgeny Kopylov);\n- improved mask data decoding (thanks Evgeny Kopylov);\n- fixed syncronization in case of ``8B64`` signatures (thanks Evgeny Kopylov);\n- fixed reading of layers with zero length (thanks Evgeny Kopylov);\n- fixed Descriptor parsing (thanks Evgeny Kopylov);\n- some of the descriptor structures and tagged block constants are renamed (thanks Evgeny Kopylov);\n- PATH_SELECTION_STATE decoding (thanks Evgeny Kopylov);\n- the library is switched to setuptools; docopt is now installed automatically.\n\n0.10 (2014-06-15)\n-----------------\n\n- Layer effects parsing (thanks Evgeny Kopylov);\n- trailing null bytes are stripped from descriptor strings\n  (thanks Evgeny Kopylov);\n- \"Reference\" and \"List\" descriptor parsing is fixed\n  (thanks Evgeny Kopylov);\n- scalar descriptor values (doubles, floats, booleans) are now returned\n  as scalars, not as lists of size 1 (thanks Evgeny Kopylov);\n- fixed reading of EngineData past declared length\n  (thanks Carlton P. Taylor);\n- \"background color\" Image Resource parsing (thanks Evgeny Kopylov);\n- `psd_tools.decoder.actions.Enum.enum` field is renamed to\n  `psd_tools.decoder.actions.Enum.value` (thanks Evgeny Kopylov);\n- code simplification - constants are now bytestrings as they should be\n  (thanks Evgeny Kopylov);\n- Python 3.4 is supported.\n\n0.9.1 (2014-03-26)\n------------------\n\n- Improved merging of transparent layers (thanks Vladimir Timofeev);\n- fixed layer merging and bounding box calculations for empty layers\n  (thanks Vladimir Timofeev);\n- C extension is rebuilt with Cython 0.20.1.\n\n0.9 (2013-12-03)\n----------------\n\n- `psd-tools.py` command-line interface is changed, 'debug' command is added;\n- pretty-printing of internal structures;\n- pymaging support is fixed;\n- allow 'MeSa' to be a signature for image resource blocks\n  (thanks Alexey Buzanov);\n- `psd_tools.debug.debug_view` utility function is fixed;\n- Photoshop CC constants are added;\n- Photoshop CC vector origination data is decoded;\n- binary data is preserved if descriptor parsing fails;\n- more verbose logging for PSD reader;\n- channel data reader became more robust - now it doesn't read past\n  declared channel length;\n- `psd-tools.py --version` command is fixed;\n- `lsdk` tagged blocks parsing: this fixes some issues with layer grouping\n  (thanks Ivan Maradzhyiski for the bug report and the patch);\n- CMYK images support is added (thanks Alexey Buzanov, Guillermo Rauch and\n  https://github.com/a-e-m for the help);\n- Grayscale images support is added (thanks https://github.com/a-e-m);\n- LittleCMS is now optional (but it is still required to get proper colors).\n\n0.8.4 (2013-06-12)\n------------------\n\n- Point and Millimeter types are added to UnitFloatType (thanks Doug Ellwanger).\n\n0.8.3 (2013-06-01)\n------------------\n\n- Some issues with descriptor parsing are fixed (thanks Luke Petre).\n\n0.8.2 (2013-04-12)\n------------------\n\n- Python 2.x: reading data from file-like objects is fixed\n  (thanks Pavel Zinovkin).\n\n0.8.1 (2013-03-02)\n------------------\n\n- Fixed parsing of layer groups without explicit OPEN_FOLDER mark;\n- Cython extension is rebuilt with Cython 0.18.\n\n0.8 (2013-02-26)\n----------------\n\n- Descriptor parsing (thanks Oliver Zheng);\n- text (as string) is extracted from text layers (thanks Oliver Zheng);\n- improved support for optional building of Cython extension.\n\n0.7.1 (2012-12-27)\n------------------\n\n- Typo is fixed: ``LayerRecord.cilpping`` should be ``LayerRecord.clipping``.\n  Thanks Oliver Zheng.\n\n0.7 (2012-11-08)\n----------------\n\n- Highly experimental: basic layer merging is implemented\n  (e.g. it is now possible to export layer group to a PIL image);\n- ``Layer.visible`` no longer takes group visibility in account;\n- ``Layer.visible_global`` is the old ``Layer.visible``;\n- ``psd_tools.user_api.combined_bbox`` made public;\n- ``Layer.width`` and ``Layer.height`` are removed (use ``layer.bbox.width``\n  and ``layer.bbox.height`` instead);\n- ``pil_support.composite_image_to_PIL`` is renamed to ``pil_support.extract_composite_image`` and\n  ``pil_support.layer_to_PIL`` is renamed to ``pil_support.extract_layer_image``\n  in order to have the same API for ``pil_support`` and ``pymaging_support``.\n\n0.6 (2012-11-06)\n----------------\n\n- ``psd.composite_image()`` is renamed to ``psd.as_PIL()``;\n- Pymaging support: ``psd.as_pymaging()`` and ``layer.as_pymaging()`` methods.\n\n\n0.5 (2012-11-05)\n----------------\n\n- Support for zip and zip-with-prediction compression methods is added;\n- support for 16/32bit layers is added;\n- optional Cython extension for faster zip-with-prediction decompression;\n- other speed improvements.\n\n0.2 (2012-11-04)\n----------------\n\n- Initial support for 16bit and 32bit PSD files: ``psd-tools`` v0.2 can\n  read composite (merged) images for such files and extract information\n  (names, dimensions, hierarchy, etc.) about layers and groups of 16/32bit PSD;\n  extracting image data for distinct layers in 16/32bit PSD files is not\n  suported yet;\n- better ``Layer.__repr__``;\n- ``bbox`` property for ``Group``.\n\n0.1.4 (2012-11-01)\n------------------\n\nPackaging is fixed in this release.\n\n0.1.3 (2012-11-01)\n------------------\n\n- Better support for 32bit images (still incomplete);\n- reader is able to handle \"global\" tagged layer info blocks that\n  was previously discarded.\n\n0.1.2 (2012-10-30)\n------------------\n\n- warn about 32bit images;\n- transparency support for composite images.\n\n0.1.1 (2012-10-29)\n------------------\n\nInitial release (v0.1 had packaging issues).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrstephenneal/psd-tools3", "keywords": "pymaging psd imaging pil pillow", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "psd-tools3", "package_url": "https://pypi.org/project/psd-tools3/", "platform": "", "project_url": "https://pypi.org/project/psd-tools3/", "project_urls": {"Homepage": "https://github.com/mrstephenneal/psd-tools3"}, "release_url": "https://pypi.org/project/psd-tools3/1.8.2/", "requires_dist": null, "requires_python": "", "summary": "Fork of psd-tools for working with Adobe Photoshop PSD files", "version": "1.8.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">psd-tools2</span></tt> is a package for reading Adobe Photoshop PSD files\nas described in <a href=\"https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm\" rel=\"nofollow\">specification</a> to Python data structures.</p>\n<p>This is a fork of <a href=\"https://github.com/psd-tools/psd-tools\" rel=\"nofollow\">psd-tools</a> that adds a couple of enhancements to the\noriginal version.</p>\n<a href=\"https://pypi.python.org/pypi/psd-tools2\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/883268484968e76010e25f922367814515ba60e5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7073642d746f6f6c73322e737667\"></a>\n<a href=\"https://travis-ci.org/kyamagu/psd-tools2\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8151fa6d15c6d9549d7bf27ca94e1cc861976bb6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b79616d6167752f7073642d746f6f6c73322f6d61737465722e737667\"></a>\n<a href=\"http://psd-tools2.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Document Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/882fb6ed862ff0c7945463bc61f65becfa8bb819/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7073642d746f6f6c73322f62616467652f\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install psd-tools2\n</pre>\n<p><a href=\"https://github.com/python-imaging/Pillow\" rel=\"nofollow\">Pillow</a> should be installed if you want work with PSD image and layer data:\nexport images to PNG, process them. <a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">PIL</a> library should also work.</p>\n<pre>pip install Pillow\n</pre>\n<div>\n<p>Note</p>\n<p>In order to extract images from 32bit PSD files PIL/Pillow must be built\nwith LITTLECMS or LITTLECMS2 support.</p>\n</div>\n<p>psd-tools2 also has a rudimentary support for <a href=\"https://github.com/ojii/pymaging\" rel=\"nofollow\">Pymaging</a>.\n<a href=\"http://pymaging.readthedocs.org/en/latest/usr/installation.html\" rel=\"nofollow\">Pymaging installation instructions</a> are available in pymaging docs.</p>\n</div>\n<div id=\"command-line\">\n<h2>Command line</h2>\n<p>The current tool supports PNG/JPEG export:</p>\n<pre>psd-tools convert &lt;psd_filename&gt; &lt;out_filename&gt; <span class=\"o\">[</span>options<span class=\"o\">]</span>\npsd-tools export_layer &lt;psd_filename&gt; &lt;layer_index&gt; &lt;out_filename&gt; <span class=\"o\">[</span>options<span class=\"o\">]</span>\npsd-tools debug &lt;filename&gt; <span class=\"o\">[</span>options<span class=\"o\">]</span>\npsd-tools -h <span class=\"p\">|</span> --help\npsd-tools --version\n</pre>\n</div>\n<div id=\"api-usage\">\n<h2>API Usage</h2>\n<p>Load an image:</p>\n<pre>&gt;&gt;&gt; from psd_tools import PSDImage\n&gt;&gt;&gt; psd = PSDImage.load('my_image.psd')\n</pre>\n<p>Print the layer structure:</p>\n<pre>&gt;&gt;&gt; psd.print_tree()\n</pre>\n<p>Read image header:</p>\n<pre>&gt;&gt;&gt; psd.header\nPsdHeader(number_of_channels=3, height=200, width=100, depth=8, color_mode=RGB)\n</pre>\n<p>Access its layers:</p>\n<pre>&gt;&gt;&gt; psd.layers\n[&lt;group: 'Group 2', layer_count=1, mask=None, visible=1&gt;,\n &lt;group: 'Group 1', layer_count=1, mask=None, visible=1&gt;,\n &lt;pixel: 'Background', size=100x200, x=0, y=0, mask=None, visible=1&gt;]\n\n&gt;&gt;&gt; list(psd.descendants())\n[&lt;group: 'Group 2', layer_count=1, mask=None, visible=1&gt;,\n &lt;shape: 'Shape 2', size=43x62, x=40, y=72, mask=None, visible=1)&gt;,\n &lt;group: 'Group 1', layer_count=1, mask=None, visible=1&gt;,\n ...\n ]\n</pre>\n<p>Work with a layer group:</p>\n<pre>&gt;&gt;&gt; group2 = psd.layers[0]\n&gt;&gt;&gt; group2.name\nGroup 2\n\n&gt;&gt;&gt; group2.visible\nTrue\n\n&gt;&gt;&gt; group2.opacity\n255\n\n&gt;&gt;&gt; group2.blend_mode == 'normal'\nTrue\n\n&gt;&gt;&gt; group2.layers\n[&lt;shape: 'Shape 2', size=43x62, x=40, y=72, mask=None, visible=1)&gt;]\n</pre>\n<p>Work with a layer:</p>\n<pre>&gt;&gt;&gt; layer = group2.layers[0]\n&gt;&gt;&gt; layer.name\nShape 2\n\n&gt;&gt;&gt; layer.kind\ntype\n\n&gt;&gt;&gt; layer.bbox\nBBox(x1=40, y1=72, x2=83, y2=134)\n\n&gt;&gt;&gt; layer.bbox.width, layer.bbox.height\n(43, 62)\n\n&gt;&gt;&gt; layer.visible, layer.opacity, layer.blend_mode\n(True, 255, 'normal')\n\n&gt;&gt;&gt; layer.text\n'Text inside a text box'\n\n&gt;&gt;&gt; layer.as_PIL()\n&lt;PIL.Image.Image image mode=RGBA size=43x62 at ...&gt;\n\n&gt;&gt;&gt; mask = layer.mask\n&gt;&gt;&gt; mask.bbox\nBBox(x1=40, y1=72, x2=83, y2=134)\n\n&gt;&gt;&gt; mask.as_PIL()\n&lt;PIL.Image.Image image mode=L size=43x62 at ...&gt;\n\n&gt;&gt;&gt; layer.clip_layers\n[&lt;shape: 'Clipped', size=43x62, x=40, y=72, mask=None, visible=1)&gt;, ...]\n\n&gt;&gt;&gt; layer.effects\n[&lt;GradientOverlay&gt;]\n</pre>\n<p>Export a single layer:</p>\n<pre>&gt;&gt;&gt; layer_image = layer.as_PIL()\n&gt;&gt;&gt; layer_image.save('layer.png')\n</pre>\n<p>Export the merged image:</p>\n<pre>&gt;&gt;&gt; merged_image = psd.as_PIL()\n&gt;&gt;&gt; merged_image.save('my_image.png')\n</pre>\n<p>The same using <a href=\"https://github.com/ojii/pymaging\" rel=\"nofollow\">Pymaging</a>:</p>\n<pre>&gt;&gt;&gt; merged_image = psd.as_pymaging()\n&gt;&gt;&gt; merged_image.save_to_path('my_image.png')\n&gt;&gt;&gt; layer_image = layer.as_pymaging()\n&gt;&gt;&gt; layer_image.save_to_path('layer.png')\n</pre>\n<p>Export a thumbnail in PIL Image:</p>\n<pre>&gt;&gt;&gt; thumbnail_image = psd.thumbnail()\n</pre>\n<p>Export layer group (experimental):</p>\n<pre>&gt;&gt;&gt; group_image = group2.as_PIL()\n&gt;&gt;&gt; group_image.save('group.png')\n</pre>\n</div>\n<div id=\"design-overview\">\n<h2>Design overview</h2>\n<p>The process of handling a PSD file is split into 3 stages:</p>\n<ol>\n<li>\u201cReading\u201d: the file is read and parsed to low-level data\nstructures that closely match the specification. No user-accessible\nimages are constructed; image resources blocks and additional layer\ninformation are extracted but not parsed (they remain just keys\nwith a binary data). The goal is to extract all information\nfrom a PSD file.</li>\n<li>\u201cDecoding\u201d: image resource blocks and additional layer\ninformation blocks are parsed to a more detailed data structures\n(that are still based on a specification). There are a lot of PSD\ndata types and the library currently doesn\u2019t handle them all, but\nit should be easy to add the parsing code for the missing PSD data\nstructures if needed.</li>\n</ol>\n<p>After (1) and (2) we have an in-memory data structure that closely\nresembles PSD file; it should be fairly complete but very low-level\nand not easy to use. So there is a third stage:</p>\n<ol>\n<li>\u201cUser-facing API\u201d: PSD image is converted to an user-friendly object\nthat supports layer groups, exporting data as <tt>PIL.Image</tt> or\n<tt>pymaging.Image</tt>, etc.</li>\n</ol>\n<p>Stage separation also means user-facing API may be opinionated:\nif somebody doesn\u2019t like it then it should possible to build an\nanother API based on lower-level decoded PSD file.</p>\n<p><tt><span class=\"pre\">psd-tools2</span></tt> tries not to throw away information from the original\nPSD file; even if the library can\u2019t parse some info, this info\nwill be likely available somewhere as raw bytes (open a bug if this is\nnot the case). This should make it possible to modify and write PSD\nfiles (currently not implemented; contributions are welcome).</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Supported:</p>\n<ul>\n<li>reading of RGB, RGBA, CMYK, CMYKA and Grayscale images;</li>\n<li>8bit, 16bit and 32bit channels;</li>\n<li>all PSD compression methods are supported (not only the most\ncommon RAW and RLE);</li>\n<li>image ICC profile is taken into account;</li>\n<li>many image resource types and tagged block types are decoded;</li>\n<li>layer effects information is decoded;</li>\n<li>Descriptor structures are decoded;</li>\n<li>there is an optional Cython extension to make the parsing fast;</li>\n<li>very basic &amp; experimental layer merging;</li>\n<li>support both PSD and PSB file formats;</li>\n<li>EngineData structure is decoded;</li>\n<li>EXIF data is taken into account.</li>\n</ul>\n<p>Not implemented:</p>\n<ul>\n<li>reading of Duotone, LAB, etc. images;</li>\n<li>some image resource types and tagged blocks are not decoded\n(they are attached to the result as raw bytes);</li>\n<li>some of the raw Descriptor values are not decoded;</li>\n<li>this library can\u2019t reliably blend layers together: it is possible to export\na single layer and to export a final image, but rendering of\ne.g. layer group may produce incorrect results;</li>\n<li>the writing of PSD images is not implemented;</li>\n<li><a href=\"https://github.com/ojii/pymaging\" rel=\"nofollow\">Pymaging</a> support is limited: it only supports 8bit RGB/RGBA\nimages, ICC profiles are not applied, layer merging doesn\u2019t work, etc.</li>\n</ul>\n<p>If you need some of unimplemented features then please file an issue\nor implement it yourself (pull requests are welcome in this case).</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Development happens at github: <a href=\"https://github.com/kyamagu/psd-tools2\" rel=\"nofollow\">source code</a>,\n<a href=\"https://github.com/kyamagu/psd-tools2/issues\" rel=\"nofollow\">bug tracker</a>.\nFeel free to submit ideas, bugs or pull requests.</p>\n<p>In case of bugs it would be helpful to provide a small PSD file\ndemonstrating the issue; this file may be added to a test suite.</p>\n<p>In order to run tests, make sure PIL/Pillow is built with LittleCMS\nor LittleCMS2 support, install <a href=\"http://tox.testrun.org\" rel=\"nofollow\">tox</a> and type:</p>\n<pre>tox\n</pre>\n<p>Install Sphinx to generate documents:</p>\n<pre>pip install sphinx sphinx_rtd_theme\n</pre>\n<p>Once installed, use <tt>Makefile</tt>:</p>\n<pre>make -C docs html\n</pre>\n<p>from the source checkout.</p>\n<p>The license is MIT.</p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<p>Great thanks to the original <cite>psd-tools</cite> author Mikhail Korobov.\nA full list of contributors can be found here:\n<a href=\"https://github.com/kyamagu/psd-tools2/blob/master/AUTHORS.txt\" rel=\"nofollow\">https://github.com/kyamagu/psd-tools2/blob/master/AUTHORS.txt</a></p>\n</div>\n<div id=\"id1\">\n<h2>1.7.18 (2018-09-26)</h2>\n<ul>\n<li>add shape rendering in <cite>compose()</cite>;</li>\n<li>add grayscale support.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>1.7.17 (2018-09-21)</h2>\n<ul>\n<li>fix <cite>has_pixel()</cite> condition.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>1.7.16 (2018-08-29)</h2>\n<ul>\n<li>fix fill opacity in <cite>compose()</cite>;</li>\n<li>workaround for broken <cite>PrintFlags</cite>.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>1.7.15 (2018-08-28)</h2>\n<ul>\n<li>fix color overlay issue in <cite>compose()</cite>.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>1.7.14 (2018-08-24)</h2>\n<ul>\n<li>fix <cite>verbose</cite> arg for python 3.7 compatibility.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>1.7.13 (2018-08-10)</h2>\n<ul>\n<li>fix <cite>has_pixel()</cite> for partial channels;</li>\n<li>support color overlay in <cite>compose()</cite>.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h2>1.7.12 (2018-06-25)</h2>\n<ul>\n<li>fix mask rendering in compose (Thanks @andrey-hider and @nkato).</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h2>1.7.11 (2018-06-11)</h2>\n<ul>\n<li>unicode bugfixes.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h2>1.7.10 (2018-06-06)</h2>\n<ul>\n<li>fix descriptor decoding errors;</li>\n<li>minor bugfixes.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h2>1.7.9 (2018-06-05)</h2>\n<ul>\n<li>fix UnicodeError in exif;</li>\n<li>workaround for irregular descriptor name;</li>\n<li>add undocumented <cite>extn</cite> tagged block decoding;</li>\n<li>move duplicated icc module to subpackage;</li>\n<li>support PIL rendering with extra alpha channels.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h2>1.7.8 (2018-05-29)</h2>\n<ul>\n<li>update documentation;</li>\n<li>fix PEP8 compliance;</li>\n<li>rename merge_layers to compose.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h2>1.7.7 (2018-05-02)</h2>\n<ul>\n<li>fix white background issue in <cite>as_PIL()</cite>.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h2>1.7.6 (2018-04-27)</h2>\n<ul>\n<li>add quality testing;</li>\n<li>fix disabled mask.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h2>1.7.5 (2018-04-25)</h2>\n<ul>\n<li>fix <cite>has_mask()</cite> condition;</li>\n<li>add mask composition in <cite>merge_layers()</cite>;</li>\n<li>fix mask display.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h2>1.7.4 (2018-03-06)</h2>\n<ul>\n<li>fix infinity loop in <cite>print_tree()</cite>.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h2>1.7.3 (2018-02-27)</h2>\n<ul>\n<li>add vector origination API;</li>\n<li>fix shape and vector mask identification;</li>\n<li>change enum name conversion;</li>\n<li>update docs.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h2>1.7.2 (2018-02-14)</h2>\n<ul>\n<li>add adjustments API;</li>\n<li>add mask API;</li>\n<li>bugfix for tagged_blocks decoders.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h2>1.7.1 (2018-02-08)</h2>\n<ul>\n<li>add mask user API;</li>\n<li>add layer coordinate user API;</li>\n<li>add vector mask and vector stroke API;</li>\n<li>cleanup user API;</li>\n<li>add automatic descriptor conversion.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h2>1.7.0 (2018-01-25)</h2>\n<ul>\n<li>cleanup user API organization;</li>\n<li>remove json encoder api;</li>\n<li>make cli a package main.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h2>1.6.7 (2018-01-17)</h2>\n<ul>\n<li>workaround for anaconda 2.7 pillow;</li>\n<li>bbox existence checkf.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h2>1.6.6 (2018-01-10)</h2>\n<ul>\n<li>experimental clipping support in <cite>merge_layer()</cite>;</li>\n<li>revert <cite>as_PIL()</cite> in <cite>AdjustmentLayer</cite>.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h2>1.6.5 (2017-12-22)</h2>\n<ul>\n<li>Small fix for erroneous unicode path name</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h2>1.6.4 (2017-12-20)</h2>\n<ul>\n<li>Add <cite>all_layers()</cite> method;</li>\n<li>Add <cite>_image_resource_blocks</cite> property;</li>\n<li>Add <cite>thumbnail()</cite> method.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h2>1.6.3 (2017-09-27)</h2>\n<ul>\n<li>documentation updates;</li>\n<li>github repository renamed to psd-tools2;</li>\n<li>AdjustmentLayer fix.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h2>1.6.2 (2017-09-13)</h2>\n<ul>\n<li>layer class structure reorganization;</li>\n<li>add Effects API;</li>\n<li>add TypeLayer API methods.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h2>1.6 (2017-09-08)</h2>\n<ul>\n<li>PSDImage user API update;</li>\n<li>user API adds distinct layer types;</li>\n<li>Sphinx documentation.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h2>1.5 (2017-07-13)</h2>\n<ul>\n<li>implemented many decodings of image resources and tagged blocks;</li>\n<li>implemented EngineData text information;</li>\n<li>user API for getting mask and patterns;</li>\n<li>user API to calculate bbox for shape layers;</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h2>1.4 (2017-01-02)</h2>\n<ul>\n<li>Fixed reading of layer mask data (thanks Evgeny Kopylov);</li>\n<li>Python 2.6 support is dropped;</li>\n<li>Python 3.6 support is added (thanks Leendert Brouwer);</li>\n<li>extension is rebuilt with Cython 0.25.2.</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h2>1.3 (2016-01-25)</h2>\n<ul>\n<li>fixed references decoding (thanks Josh Drake);</li>\n<li>fixed PIL support for CMYK files (thanks Michael Wu);</li>\n<li>optional C extension is rebuilt with Cython 0.23.4;</li>\n<li>Python 3.2 support is dropped; the package still works in Python 3.2,\nbut the compatibility is no longer checked by tests, and so it can break\nin future.</li>\n<li>declare Python 3.5 as supported.</li>\n</ul>\n</div>\n<div id=\"id30\">\n<h2>1.2 (2015-01-27)</h2>\n<ul>\n<li>implemented extraction of embedded files (embedded smart objects) -\nthanks Volker Braun;</li>\n<li>optional C extension is rebuilt with Cython 0.21.2.</li>\n<li>hg mirror on bitbucket is dropped, sorry!</li>\n</ul>\n</div>\n<div id=\"id31\">\n<h2>1.1 (2014-11-17)</h2>\n<ul>\n<li>improved METADATA_SETTING decoding (thanks Evgeny Kopylov);</li>\n<li>layer comps decoding (thanks Evgeny Kopylov);</li>\n<li>improved smart objects decoding (thanks Joey Gentry);</li>\n<li>user API for getting layer transforms and placed layer size\n(thanks Joey Gentry);</li>\n<li>IPython import is deferred to speedup <tt><span class=\"pre\">psd-tools.py</span></tt> command-line utility;</li>\n<li><tt>_RootGroup.__repr__</tt> is fixed;</li>\n<li>warning message building is more robust;</li>\n<li>optional C extension is rebuilt with Cython 0.21.1.</li>\n</ul>\n</div>\n<div id=\"id32\">\n<h2>1.0 (2014-07-24)</h2>\n<ul>\n<li>Fixed reading of images with layer masks (thanks Evgeny Kopylov);</li>\n<li>improved mask data decoding (thanks Evgeny Kopylov);</li>\n<li>fixed syncronization in case of <tt>8B64</tt> signatures (thanks Evgeny Kopylov);</li>\n<li>fixed reading of layers with zero length (thanks Evgeny Kopylov);</li>\n<li>fixed Descriptor parsing (thanks Evgeny Kopylov);</li>\n<li>some of the descriptor structures and tagged block constants are renamed (thanks Evgeny Kopylov);</li>\n<li>PATH_SELECTION_STATE decoding (thanks Evgeny Kopylov);</li>\n<li>the library is switched to setuptools; docopt is now installed automatically.</li>\n</ul>\n</div>\n<div id=\"id33\">\n<h2>0.10 (2014-06-15)</h2>\n<ul>\n<li>Layer effects parsing (thanks Evgeny Kopylov);</li>\n<li>trailing null bytes are stripped from descriptor strings\n(thanks Evgeny Kopylov);</li>\n<li>\u201cReference\u201d and \u201cList\u201d descriptor parsing is fixed\n(thanks Evgeny Kopylov);</li>\n<li>scalar descriptor values (doubles, floats, booleans) are now returned\nas scalars, not as lists of size 1 (thanks Evgeny Kopylov);</li>\n<li>fixed reading of EngineData past declared length\n(thanks Carlton P. Taylor);</li>\n<li>\u201cbackground color\u201d Image Resource parsing (thanks Evgeny Kopylov);</li>\n<li><cite>psd_tools.decoder.actions.Enum.enum</cite> field is renamed to\n<cite>psd_tools.decoder.actions.Enum.value</cite> (thanks Evgeny Kopylov);</li>\n<li>code simplification - constants are now bytestrings as they should be\n(thanks Evgeny Kopylov);</li>\n<li>Python 3.4 is supported.</li>\n</ul>\n</div>\n<div id=\"id34\">\n<h2>0.9.1 (2014-03-26)</h2>\n<ul>\n<li>Improved merging of transparent layers (thanks Vladimir Timofeev);</li>\n<li>fixed layer merging and bounding box calculations for empty layers\n(thanks Vladimir Timofeev);</li>\n<li>C extension is rebuilt with Cython 0.20.1.</li>\n</ul>\n</div>\n<div id=\"id35\">\n<h2>0.9 (2013-12-03)</h2>\n<ul>\n<li><cite>psd-tools.py</cite> command-line interface is changed, \u2018debug\u2019 command is added;</li>\n<li>pretty-printing of internal structures;</li>\n<li>pymaging support is fixed;</li>\n<li>allow \u2018MeSa\u2019 to be a signature for image resource blocks\n(thanks Alexey Buzanov);</li>\n<li><cite>psd_tools.debug.debug_view</cite> utility function is fixed;</li>\n<li>Photoshop CC constants are added;</li>\n<li>Photoshop CC vector origination data is decoded;</li>\n<li>binary data is preserved if descriptor parsing fails;</li>\n<li>more verbose logging for PSD reader;</li>\n<li>channel data reader became more robust - now it doesn\u2019t read past\ndeclared channel length;</li>\n<li><cite>psd-tools.py \u2013version</cite> command is fixed;</li>\n<li><cite>lsdk</cite> tagged blocks parsing: this fixes some issues with layer grouping\n(thanks Ivan Maradzhyiski for the bug report and the patch);</li>\n<li>CMYK images support is added (thanks Alexey Buzanov, Guillermo Rauch and\n<a href=\"https://github.com/a-e-m\" rel=\"nofollow\">https://github.com/a-e-m</a> for the help);</li>\n<li>Grayscale images support is added (thanks <a href=\"https://github.com/a-e-m\" rel=\"nofollow\">https://github.com/a-e-m</a>);</li>\n<li>LittleCMS is now optional (but it is still required to get proper colors).</li>\n</ul>\n</div>\n<div id=\"id36\">\n<h2>0.8.4 (2013-06-12)</h2>\n<ul>\n<li>Point and Millimeter types are added to UnitFloatType (thanks Doug Ellwanger).</li>\n</ul>\n</div>\n<div id=\"id37\">\n<h2>0.8.3 (2013-06-01)</h2>\n<ul>\n<li>Some issues with descriptor parsing are fixed (thanks Luke Petre).</li>\n</ul>\n</div>\n<div id=\"id38\">\n<h2>0.8.2 (2013-04-12)</h2>\n<ul>\n<li>Python 2.x: reading data from file-like objects is fixed\n(thanks Pavel Zinovkin).</li>\n</ul>\n</div>\n<div id=\"id39\">\n<h2>0.8.1 (2013-03-02)</h2>\n<ul>\n<li>Fixed parsing of layer groups without explicit OPEN_FOLDER mark;</li>\n<li>Cython extension is rebuilt with Cython 0.18.</li>\n</ul>\n</div>\n<div id=\"id40\">\n<h2>0.8 (2013-02-26)</h2>\n<ul>\n<li>Descriptor parsing (thanks Oliver Zheng);</li>\n<li>text (as string) is extracted from text layers (thanks Oliver Zheng);</li>\n<li>improved support for optional building of Cython extension.</li>\n</ul>\n</div>\n<div id=\"id41\">\n<h2>0.7.1 (2012-12-27)</h2>\n<ul>\n<li>Typo is fixed: <tt>LayerRecord.cilpping</tt> should be <tt>LayerRecord.clipping</tt>.\nThanks Oliver Zheng.</li>\n</ul>\n</div>\n<div id=\"id42\">\n<h2>0.7 (2012-11-08)</h2>\n<ul>\n<li>Highly experimental: basic layer merging is implemented\n(e.g. it is now possible to export layer group to a PIL image);</li>\n<li><tt>Layer.visible</tt> no longer takes group visibility in account;</li>\n<li><tt>Layer.visible_global</tt> is the old <tt>Layer.visible</tt>;</li>\n<li><tt>psd_tools.user_api.combined_bbox</tt> made public;</li>\n<li><tt>Layer.width</tt> and <tt>Layer.height</tt> are removed (use <tt>layer.bbox.width</tt>\nand <tt>layer.bbox.height</tt> instead);</li>\n<li><tt>pil_support.composite_image_to_PIL</tt> is renamed to <tt>pil_support.extract_composite_image</tt> and\n<tt>pil_support.layer_to_PIL</tt> is renamed to <tt>pil_support.extract_layer_image</tt>\nin order to have the same API for <tt>pil_support</tt> and <tt>pymaging_support</tt>.</li>\n</ul>\n</div>\n<div id=\"id43\">\n<h2>0.6 (2012-11-06)</h2>\n<ul>\n<li><tt>psd.composite_image()</tt> is renamed to <tt>psd.as_PIL()</tt>;</li>\n<li>Pymaging support: <tt>psd.as_pymaging()</tt> and <tt>layer.as_pymaging()</tt> methods.</li>\n</ul>\n</div>\n<div id=\"id44\">\n<h2>0.5 (2012-11-05)</h2>\n<ul>\n<li>Support for zip and zip-with-prediction compression methods is added;</li>\n<li>support for 16/32bit layers is added;</li>\n<li>optional Cython extension for faster zip-with-prediction decompression;</li>\n<li>other speed improvements.</li>\n</ul>\n</div>\n<div id=\"id45\">\n<h2>0.2 (2012-11-04)</h2>\n<ul>\n<li>Initial support for 16bit and 32bit PSD files: <tt><span class=\"pre\">psd-tools</span></tt> v0.2 can\nread composite (merged) images for such files and extract information\n(names, dimensions, hierarchy, etc.) about layers and groups of 16/32bit PSD;\nextracting image data for distinct layers in 16/32bit PSD files is not\nsuported yet;</li>\n<li>better <tt>Layer.__repr__</tt>;</li>\n<li><tt>bbox</tt> property for <tt>Group</tt>.</li>\n</ul>\n</div>\n<div id=\"id46\">\n<h2>0.1.4 (2012-11-01)</h2>\n<p>Packaging is fixed in this release.</p>\n</div>\n<div id=\"id47\">\n<h2>0.1.3 (2012-11-01)</h2>\n<ul>\n<li>Better support for 32bit images (still incomplete);</li>\n<li>reader is able to handle \u201cglobal\u201d tagged layer info blocks that\nwas previously discarded.</li>\n</ul>\n</div>\n<div id=\"id48\">\n<h2>0.1.2 (2012-10-30)</h2>\n<ul>\n<li>warn about 32bit images;</li>\n<li>transparency support for composite images.</li>\n</ul>\n</div>\n<div id=\"id49\">\n<h2>0.1.1 (2012-10-29)</h2>\n<p>Initial release (v0.1 had packaging issues).</p>\n</div>\n\n          </div>"}, "last_serial": 4328945, "releases": {"1.8.0": [{"comment_text": "", "digests": {"md5": "3a9da6e68b4b149e6cfcdec08d19b03d", "sha256": "d029386151a03bd65bd255a00f0b4c041ca020a2238626413374bd37482c651c"}, "downloads": -1, "filename": "psd-tools3-1.8.0.tar.gz", "has_sig": false, "md5_digest": "3a9da6e68b4b149e6cfcdec08d19b03d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167127, "upload_time": "2018-10-01T14:37:39", "upload_time_iso_8601": "2018-10-01T14:37:39.168319Z", "url": "https://files.pythonhosted.org/packages/8f/a9/ce67289f7a1e8d8ccc282cb227a73437720ca00a808a510c5ba3010eec27/psd-tools3-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "770f8917fbf2cd25245215c475bae38f", "sha256": "1174484df1ac669370054fb8a0aecf8305dba901f8073fc944eb6f1ddb3963ed"}, "downloads": -1, "filename": "psd-tools3-1.8.1.tar.gz", "has_sig": false, "md5_digest": "770f8917fbf2cd25245215c475bae38f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167419, "upload_time": "2018-10-01T14:39:12", "upload_time_iso_8601": "2018-10-01T14:39:12.459939Z", "url": "https://files.pythonhosted.org/packages/54/4b/1aed326c72710b453cb817da2bd68754b7f15ae6f2c6febdd61b0793aa3e/psd-tools3-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "9d0ab4455020fdea080bf354ddfaec7b", "sha256": "3a03bb8c7757e477b5ab1a7a35e8d5064493655f08682779ec7d5ff610954440"}, "downloads": -1, "filename": "psd-tools3-1.8.2.tar.gz", "has_sig": false, "md5_digest": "9d0ab4455020fdea080bf354ddfaec7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167446, "upload_time": "2018-10-01T15:11:06", "upload_time_iso_8601": "2018-10-01T15:11:06.868085Z", "url": "https://files.pythonhosted.org/packages/de/1b/88e605453a5d2b2168140bb520c4aa6361d7cce742b5e6ae8a8a14638959/psd-tools3-1.8.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d0ab4455020fdea080bf354ddfaec7b", "sha256": "3a03bb8c7757e477b5ab1a7a35e8d5064493655f08682779ec7d5ff610954440"}, "downloads": -1, "filename": "psd-tools3-1.8.2.tar.gz", "has_sig": false, "md5_digest": "9d0ab4455020fdea080bf354ddfaec7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167446, "upload_time": "2018-10-01T15:11:06", "upload_time_iso_8601": "2018-10-01T15:11:06.868085Z", "url": "https://files.pythonhosted.org/packages/de/1b/88e605453a5d2b2168140bb520c4aa6361d7cce742b5e6ae8a8a14638959/psd-tools3-1.8.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:00 2020"}