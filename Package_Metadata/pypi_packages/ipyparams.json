{"info": {"author": "Bill Allen", "author_email": "photo.allen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Topic :: Utilities"], "description": "# ipyparams\n\nSend parameters/arguments to notebooks via URL query string parameters.\n\n## Examples\n\nIf you want to prepopulate parameters like `foo=bar` and `baz=1` in a notebook, you can simply encode them in the URL:\n\n```\nhttps://your.jupyter.server/awsome_notebook.ipynb?foo=bar&baz=1\n```\n\nIn the notebook, just include the following:\n\n```python\nimport ipyparams\n```\n\nThe values are now accessible in the `ipyparams.params` dictionary.\n\n```python\nipyparams.params['foo']  # returns \"bar\"\nipyparams.params['baz']  # returns \"1\"\n```\n\n### Duplicate parameters\n\nURL query strings can contain multiple parameters with the same name, such as `https://your.jupyter.server/awsome_notebook.ipynb?foo=bar&foo=baz`.  The `ipyparams.params` dictionary only contains the last value for each name, but you can still access all the \"raw\" parameters using `ipyparams.raw_params` dictionary.\n\n```python\nimport ipyparams\nipyparams.params['foo']      # returns 'baz'\nipyparams.raw_params['foo']  # returns ['bar', 'baz']\n```\n\n### Missing parameters\n\nIf you try to access a parameter that does not exist, you will simply get `None` back.\n\n```python\nimport ipyparams\nipyparams.params['unicorn']      # returns None\nipyparams.raw_params['unicorn']  # returns None\n```\n\n### Get the notebook name\n\n```python\nimport ipyparams\nipyparams.notebook_name  # returns 'awesome_notebook.ipynb'\n```\n\n### Get the full, raw URL of the notebook\n\n```python\nimport ipyparams\nipyparams.raw_url\n# returns https://your.jupyter.server/awsome_notebook.ipynb?foo=bar&baz=1\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nbgallery/ipyparams", "keywords": "jupyter,notebook,parameters,arguments,url,query", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ipyparams", "package_url": "https://pypi.org/project/ipyparams/", "platform": "", "project_url": "https://pypi.org/project/ipyparams/", "project_urls": {"Homepage": "https://github.com/nbgallery/ipyparams"}, "release_url": "https://pypi.org/project/ipyparams/0.2.1/", "requires_dist": null, "requires_python": ">=3.4, <4", "summary": "Send parameters/arguments to notebooks via URL query string parameters.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ipyparams</h1>\n<p>Send parameters/arguments to notebooks via URL query string parameters.</p>\n<h2>Examples</h2>\n<p>If you want to prepopulate parameters like <code>foo=bar</code> and <code>baz=1</code> in a notebook, you can simply encode them in the URL:</p>\n<pre><code>https://your.jupyter.server/awsome_notebook.ipynb?foo=bar&amp;baz=1\n</code></pre>\n<p>In the notebook, just include the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipyparams</span>\n</pre>\n<p>The values are now accessible in the <code>ipyparams.params</code> dictionary.</p>\n<pre><span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>  <span class=\"c1\"># returns \"bar\"</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">]</span>  <span class=\"c1\"># returns \"1\"</span>\n</pre>\n<h3>Duplicate parameters</h3>\n<p>URL query strings can contain multiple parameters with the same name, such as <code>https://your.jupyter.server/awsome_notebook.ipynb?foo=bar&amp;foo=baz</code>.  The <code>ipyparams.params</code> dictionary only contains the last value for each name, but you can still access all the \"raw\" parameters using <code>ipyparams.raw_params</code> dictionary.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipyparams</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>      <span class=\"c1\"># returns 'baz'</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">raw_params</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span>  <span class=\"c1\"># returns ['bar', 'baz']</span>\n</pre>\n<h3>Missing parameters</h3>\n<p>If you try to access a parameter that does not exist, you will simply get <code>None</code> back.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipyparams</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"s1\">'unicorn'</span><span class=\"p\">]</span>      <span class=\"c1\"># returns None</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">raw_params</span><span class=\"p\">[</span><span class=\"s1\">'unicorn'</span><span class=\"p\">]</span>  <span class=\"c1\"># returns None</span>\n</pre>\n<h3>Get the notebook name</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipyparams</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">notebook_name</span>  <span class=\"c1\"># returns 'awesome_notebook.ipynb'</span>\n</pre>\n<h3>Get the full, raw URL of the notebook</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ipyparams</span>\n<span class=\"n\">ipyparams</span><span class=\"o\">.</span><span class=\"n\">raw_url</span>\n<span class=\"c1\"># returns https://your.jupyter.server/awsome_notebook.ipynb?foo=bar&amp;baz=1</span>\n</pre>\n\n          </div>"}, "last_serial": 6391390, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9690f01efe79f523002011adda5b3b8c", "sha256": "8df0a48c72a661c9fe077a4b5fd2cba13616fd044fac79dd8d884df6b4e15c97"}, "downloads": -1, "filename": "ipyparams-0.1.0.tar.gz", "has_sig": true, "md5_digest": "9690f01efe79f523002011adda5b3b8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, <4", "size": 2540, "upload_time": "2019-12-03T16:19:52", "upload_time_iso_8601": "2019-12-03T16:19:52.096799Z", "url": "https://files.pythonhosted.org/packages/ed/03/28355da3934ee15865812c26903ef598c78652a883ece36c752a82293cb1/ipyparams-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0abf6223edafb5a6859d8192cfd3e419", "sha256": "19b5a2b84643781db8067c6cbff5343875cf6517351e4da506acbc51438d416b"}, "downloads": -1, "filename": "ipyparams-0.2.0.tar.gz", "has_sig": true, "md5_digest": "0abf6223edafb5a6859d8192cfd3e419", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, <4", "size": 2666, "upload_time": "2019-12-09T01:11:00", "upload_time_iso_8601": "2019-12-09T01:11:00.262651Z", "url": "https://files.pythonhosted.org/packages/c0/7b/1941d4e3c6ce4e68a6a363a21190c4a573e0c562a4db2415b3f6d6365f96/ipyparams-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d15e2ddc682033bd7a98e71c68ce792b", "sha256": "84848e26f38feef663f071657ef41b8408004eb727310b9c5f17586d04ab971c"}, "downloads": -1, "filename": "ipyparams-0.2.1.tar.gz", "has_sig": true, "md5_digest": "d15e2ddc682033bd7a98e71c68ce792b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, <4", "size": 2728, "upload_time": "2020-01-03T15:05:50", "upload_time_iso_8601": "2020-01-03T15:05:50.768278Z", "url": "https://files.pythonhosted.org/packages/04/15/53a82f0623834a2a29bd5ee8aaf82eafb8d0b3cfae0366e75d69962949d8/ipyparams-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d15e2ddc682033bd7a98e71c68ce792b", "sha256": "84848e26f38feef663f071657ef41b8408004eb727310b9c5f17586d04ab971c"}, "downloads": -1, "filename": "ipyparams-0.2.1.tar.gz", "has_sig": true, "md5_digest": "d15e2ddc682033bd7a98e71c68ce792b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, <4", "size": 2728, "upload_time": "2020-01-03T15:05:50", "upload_time_iso_8601": "2020-01-03T15:05:50.768278Z", "url": "https://files.pythonhosted.org/packages/04/15/53a82f0623834a2a29bd5ee8aaf82eafb8d0b3cfae0366e75d69962949d8/ipyparams-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:27 2020"}