{"info": {"author": "Christo Crampton", "author_email": "tech@appointmentguru.co", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# dj-loopbreaker\n\n![coverage](https://gitlab.com/SchoolOrchestration/libs/dj-loopbreaker/badges/master/coverage.svg)\n[![PyPI version](https://badge.fury.io/py/dj-loopbreaker.svg)](https://badge.fury.io/py/dj-loopbreaker)\n\n> Django library which breaks infinite loops in signals\n\n## Installation\n\n```\npip install dj-loopbreaker\n```\n\n## Usage\n\n```python\nfrom loopbreaker import throttle\n```\n\n## The problem\n\nImagine you have a signal like this:\n\n```python\n@receiver(post_save, sender=Todo, dispatch_uid=\"example.say_hi\")\n@throttle(signal_id=\"update.todo\", expire_after=1)\ndef update_todo(instance, created, **kwargs):\n    # normally this would cause an infinte loop\n    instance.done = not instance.done\n    instance.save()\n```\n\nNormally that would cause an infinite loop. However, include the `@throttle` decorator, and it will now make sure that this signal is only\nexecuted again after 1 second for this specific instance.\n\n## How it works\n\n`throttle` uses Django's caching mechanism. It will create a key using the  following format: `{signal_id}.{app_label}{model_name}{instance_id}`. The key will expire after `expire_after` seconds\n\nThis means:\n\n* No longer need to worry about making infinite loops in your signals\n* No dependencies, or dependencies at your own discretion (we use django's internal caching, [so you can set up your caching backend](https://docs.djangoproject.com/en/2.1/topics/cache/#setting-up-the-cache))\n* Throttling occurs per instance (not per model)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/SchoolOrchestration/libs/dj-loopbreaker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dj-loopbreaker", "package_url": "https://pypi.org/project/dj-loopbreaker/", "platform": "", "project_url": "https://pypi.org/project/dj-loopbreaker/", "project_urls": {"Homepage": "https://gitlab.com/SchoolOrchestration/libs/dj-loopbreaker"}, "release_url": "https://pypi.org/project/dj-loopbreaker/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Break infinite loops in signals", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dj-loopbreaker</h1>\n<p><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b50b317ce758cbaa9b426634a1337b78e42ad154/68747470733a2f2f6769746c61622e636f6d2f5363686f6f6c4f726368657374726174696f6e2f6c6962732f646a2d6c6f6f70627265616b65722f6261646765732f6d61737465722f636f7665726167652e737667\">\n<a href=\"https://badge.fury.io/py/dj-loopbreaker\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9192c44506e42f071c3a05999a92f25f3c002875/68747470733a2f2f62616467652e667572792e696f2f70792f646a2d6c6f6f70627265616b65722e737667\"></a></p>\n<blockquote>\n<p>Django library which breaks infinite loops in signals</p>\n</blockquote>\n<h2>Installation</h2>\n<pre><code>pip install dj-loopbreaker\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">loopbreaker</span> <span class=\"kn\">import</span> <span class=\"n\">throttle</span>\n</pre>\n<h2>The problem</h2>\n<p>Imagine you have a signal like this:</p>\n<pre><span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">Todo</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s2\">\"example.say_hi\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@throttle</span><span class=\"p\">(</span><span class=\"n\">signal_id</span><span class=\"o\">=</span><span class=\"s2\">\"update.todo\"</span><span class=\"p\">,</span> <span class=\"n\">expire_after</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_todo</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># normally this would cause an infinte loop</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">done</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">done</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>Normally that would cause an infinite loop. However, include the <code>@throttle</code> decorator, and it will now make sure that this signal is only\nexecuted again after 1 second for this specific instance.</p>\n<h2>How it works</h2>\n<p><code>throttle</code> uses Django's caching mechanism. It will create a key using the  following format: <code>{signal_id}.{app_label}{model_name}{instance_id}</code>. The key will expire after <code>expire_after</code> seconds</p>\n<p>This means:</p>\n<ul>\n<li>No longer need to worry about making infinite loops in your signals</li>\n<li>No dependencies, or dependencies at your own discretion (we use django's internal caching, <a href=\"https://docs.djangoproject.com/en/2.1/topics/cache/#setting-up-the-cache\" rel=\"nofollow\">so you can set up your caching backend</a>)</li>\n<li>Throttling occurs per instance (not per model)</li>\n</ul>\n\n          </div>"}, "last_serial": 4355316, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "ae0f26ace9a1e3d9139d38dc8f596454", "sha256": "ba31e434dd1301a24d867ce5e1d2a4657019b6023c045c1ba1f8d4c67b4cbcaf"}, "downloads": -1, "filename": "dj-loopbreaker-0.0.0.tar.gz", "has_sig": false, "md5_digest": "ae0f26ace9a1e3d9139d38dc8f596454", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2436, "upload_time": "2018-09-20T14:25:07", "upload_time_iso_8601": "2018-09-20T14:25:07.101704Z", "url": "https://files.pythonhosted.org/packages/42/32/8ba257e286a28434d92f075413bf4643f772aa28406b143ec82c9ba6ae0e/dj-loopbreaker-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "c2e20c117a6194704467d585a7b878a2", "sha256": "8f29160a5811f25369aa9e02c39c1a1e7159ba4ae1db168553ca1f3d93fcc2d4"}, "downloads": -1, "filename": "dj-loopbreaker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c2e20c117a6194704467d585a7b878a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2370, "upload_time": "2018-10-09T10:52:40", "upload_time_iso_8601": "2018-10-09T10:52:40.854036Z", "url": "https://files.pythonhosted.org/packages/b3/b7/1f31795328a6df731e7cfb35c7955fb14fed7538a0e0ed655d7ae29bbef9/dj-loopbreaker-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2e20c117a6194704467d585a7b878a2", "sha256": "8f29160a5811f25369aa9e02c39c1a1e7159ba4ae1db168553ca1f3d93fcc2d4"}, "downloads": -1, "filename": "dj-loopbreaker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c2e20c117a6194704467d585a7b878a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2370, "upload_time": "2018-10-09T10:52:40", "upload_time_iso_8601": "2018-10-09T10:52:40.854036Z", "url": "https://files.pythonhosted.org/packages/b3/b7/1f31795328a6df731e7cfb35c7955fb14fed7538a0e0ed655d7ae29bbef9/dj-loopbreaker-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:32 2020"}