{"info": {"author": "Jon Wolverton", "author_email": "wolverton.jr@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "GenSON\n======\n\n**GenSON** is a powerful, user-friendly `JSON Schema`_ generator built in Python.\n\n.. note::\n    This is *not* the Python equivalent of the `Java Genson library`_. If you are coming from Java and need to create JSON objects in Python, you want `Python's builtin json library`_.)\n\nGenSON's core function is to take JSON objects and generate schemas that describe them, but it is unique in its ability to *merge* schemas. It was originally built to describe the common structure of a large number of JSON objects, and it uses its merging ability to generate a single schema from any number of JSON objects and/or schemas.\n\nGenSON's schema builder follows these three rules:\n\n1. *Every* object it is given must validate under the generated schema.\n2. *Any* object that is valid under *any* schema it is given must also validate under the generated schema. (there is one glaring exception to this, detailed `below`_)\n3. The generated schema should be as strict as possible given the first 2 rules.\n\n\nJSON Schema Implementation\n--------------------------\n\n**GenSON** is compatible with JSON Schema Draft 6 and above.\n\nIt is important to note that GenSON uses only a subset of JSON Schema's capabilities. This is mainly because it doesn't know the specifics of your data model, and it tries to avoid guessing them. Its purpose is to generate the basic structure so that you can skip the boilerplate and focus on the details of the schema.\n\nCurrently, GenSON only deals with these keywords:\n\n* ``\"$schema\"``\n* ``\"type\"``\n* ``\"items\"``\n* ``\"properties\"``\n* ``\"patternProperties\"``\n* ``\"required\"``\n* ``\"anyOf\"``\n\nYou should be aware that this limited vocabulary could cause GenSON to violate rules 1 and 2. If you feed it schemas with advanced keywords, it will just blindly pass them on to the final schema. Note that ``\"$ref\"`` and ``id`` are also not supported, so GenSON will not dereference linked nodes when building a schema.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install genson\n\n\nCLI Tool\n--------\n\nThe package includes a ``genson`` executable that allows you to access this functionality from the command line. For usage info, run with ``--help``:\n\n.. code-block:: bash\n\n    $ genson --help\n\n.. code-block::\n\n    usage: genson.py [-h] [-d DELIM] [-i SPACES] [-s SCHEMA] [-$ URI] ...\n\n    Generate one, unified JSON Schema from one or more JSON objects and/or JSON\n    Schemas. It's compatible with Draft 6 and above.\n\n    positional arguments:\n      object                files containing JSON objects (defaults to stdin if no\n                            arguments are passed)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d DELIM, --delimiter DELIM\n                            set a delimiter - Use this option if the input files\n                            contain multiple JSON objects/schemas. You can pass\n                            any string. A few cases ('newline', 'tab', 'space')\n                            will get converted to a whitespace character. If this\n                            option is omitted, the parser will try to auto-detect\n                            boundaries\n      -i SPACES, --indent SPACES\n                            pretty-print the output, indenting SPACES spaces\n      -s SCHEMA, --schema SCHEMA\n                            file containing a JSON Schema (can be specified\n                            multiple times to merge schemas)\n      -$ URI, --schema-uri URI\n                            the value of the '$schema' keyword (defaults to\n                            'http://json-schema.org/schema#' or can be specified\n                            in a schema with the -s option). If 'NULL' is passed,\n                            the \"$schema\" keyword will not be included in the\n                            result.\n\nGenSON Python API\n-----------------\n\n``SchemaBuilder`` is the basic schema generator class. ``SchemaBuilder`` instances can be loaded up with existing schemas and objects before being serialized.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_schema({\"type\": \"object\", \"properties\": {}})\n    >>> builder.add_object({\"hi\": \"there\"})\n    >>> builder.add_object({\"hi\": 5})\n\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'object',\n     'properties': {\n        'hi': {'type': ['integer', 'string']}},\n        'required': ['hi']}\n\n    >>> print(builder.to_json(indent=2))\n    {\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"hi\": {\n          \"type\": [\n            \"integer\",\n            \"string\"\n          ]\n        }\n      },\n      \"required\": [\n        \"hi\"\n      ]\n    }\n\n``SchemaBuilder`` API\n+++++++++++++++++++++\n\n``__init__(schema_uri=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n:param schema_uri: value of the ``$schema`` keyword. If not given, it will use the value of the first available ``$schema`` keyword on an added schema or else the default: ``'http://json-schema.org/schema#'``. A value of ``False`` or ``None`` will direct GenSON to leave out the ``\"$schema\"`` keyword.\n\n``add_schema(schema)``\n^^^^^^^^^^^^^^^^^^^^^^\n\nMerge in a JSON schema. This can be a ``dict`` or another ``SchemaBuilder`` object.\n\n:param schema: a JSON Schema\n\n.. note::\n    There is no schema validation. If you pass in a bad schema,\n    you might get back a bad schema.\n\n``add_object(obj)``\n^^^^^^^^^^^^^^^^^^^\n\nModify the schema to accommodate an object.\n\n:param obj: any object or scalar that can be serialized in JSON\n\n``to_schema()``\n^^^^^^^^^^^^^^^\n\nGenerate a schema based on previous inputs.\n\n:rtype: ``dict``\n\n``to_json()``\n^^^^^^^^^^^^^\n\nGenerate a schema and convert it directly to serialized JSON.\n\n:rtype: ``str``\n\n``__eq__(other)``\n^^^^^^^^^^^^^^^^^\n\nCheck for equality with another ``SchemaBuilder`` object.\n\n:param other: another ``SchemaBuilder`` object. Other types are accepted, but will always return ``False``\n\nSchemaBuilder object interaction\n++++++++++++++++++++++++++++++++\n\n``SchemaBuilder`` objects can also interact with each other:\n\n* You can pass one schema directly to another to merge them.\n* You can compare schema equality directly.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> b1 = SchemaBuilder()\n    >>> b1.add_schema({\"type\": \"object\", \"properties\": {\n    ...   \"hi\": {\"type\": \"string\"}}})\n    >>> b2 = SchemaBuilder()\n    >>> b2.add_schema({\"type\": \"object\", \"properties\": {\n    ...   \"hi\": {\"type\": \"integer\"}}})\n    >>> b1 == b2\n    False\n\n    >>> b1.add_schema(b2)\n    >>> b2.add_schema(b1)\n    >>> b1 == b2\n    True\n    >>> b1.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'object',\n     'properties': {'hi': {'type': ['integer', 'string']}}}\n\n\nSeed Schemas\n------------\n\nThere are several cases where multiple valid schemas could be generated from the same object. GenSON makes a default choice in all these ambiguous cases, but if you want it to choose differently, you can tell it what to do using a *seed schema*.\n\nSeeding Arrays\n++++++++++++++\n\nFor example, suppose you have a simple array with two items:\n\n.. code-block:: python\n\n    ['one', 1]\n\nThere are always two ways for GenSON to interpret any array: List and Tuple. Lists have one schema for every item, whereas Tuples have a different schema for every array position. This is analogous to the (now deprecated) ``merge_arrays`` option from version 0. You can read more about JSON Schema `array validation here`_.\n\nList Validation\n^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n    {\n      \"type\": \"array\",\n      \"items\": {\"type\": [\"integer\", \"string\"]}\n    }\n\nTuple Validation\n^^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n    {\n      \"type\": \"array\",\n      \"items\": [{\"type\": \"integer\"}, {\"type\": \"string\"}]\n    }\n\nBy default, GenSON always interprets arrays using list validation, but you can tell it to use tuple validation by seeding it with a schema.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_object(['one', 1])\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'array',\n     'items': {'type': ['integer', 'string']}}\n\n    >>> builder = SchemaBuilder()\n    >>> seed_schema = {'type': 'array', 'items': []}\n    >>> builder.add_schema(seed_schema)\n    >>> builder.add_object(['one', 1])\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'array',\n     'items': [{'type': 'string'}, {'type': 'integer'}]}\n\nNote that in this case, the seed schema is actually invalid. You can't have an empty array as the value for an ``items`` keyword. But GenSON is a generator, not a validator, so you can fudge a little. GenSON will modify the generated schema so that it is valid, provided that there aren't invalid keywords beyond the ones it knows about.\n\nSeeding patternProperties\n+++++++++++++++++++++++++\n\nSupport for patternProperties_ is new in version 1; however, since GenSON's default behavior is to only use ``properties``, this powerful keyword can only be utilized with seed schemas. You will need to supply an ``object`` schema with a ``patternProperties`` object whose keys are RegEx strings. Again, you can fudge here and set the values to null instead of creating valid subschemas.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_schema({'type': 'object', 'patternProperties': {r'^\\d+$': None}})\n    >>> builder.add_object({'1': 1, '2': 2, '3': 3})\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'object', 'patternProperties':  {'^\\\\d+$': {'type': 'integer'}}}\n\nThere are a few gotchas you should be aware of here:\n\n* GenSON is written in Python, so it uses the `Python flavor of RegEx`_.\n* GenSON still prefers ``properties`` to ``patternProperties`` if a property already exists that matches one of your patterns, the normal property will be updated, *not* the pattern property.\n* If a key matches multiple patterns, there is *no guarantee* of which one will be updated.\n* The patternProperties_ docs themselves have some more useful pointers that can save you time.\n\nTypeless Schemas\n++++++++++++++++\n\nIn version 0, GenSON did not accept a schema without a type, but in order to be flexible in the support of seed schemas, support was added for version 1. However, GenSON violates rule #2 in its handling of typeless schemas. Any object will validate under an empty schema, but GenSON incorporates typeless schemas into the first-available typed schema, and since typed schemas are stricter than typless ones, objects that would validate under an added schema will not validate under the result.\n\n\nCustomizing ``SchemaBuilder``\n-----------------------------\n\nYou can extend the ``SchemaBuilder`` class to add in your own logic (e.g. recording ``minimum`` and ``maximum`` for a number). In order to do this, you need to:\n\n1. Create a custom ``SchemaStrategy`` class.\n2. Create a ``SchemaBuilder`` subclass that includes your custom ``SchemaStrategy`` class(es).\n3. Use your custom ``SchemaBuilder`` just like you would the stock ``SchemaBuilder``.\n\n``SchemaStrategy`` Classes\n++++++++++++++++++++++++++\n\nGenSON uses the Strategy Pattern to parse, update, and serialize different kinds of schemas that behave in different ways. There are several ``SchemaStrategy`` classes that roughly correspond to different schema types. GenSON maps each node in an object or schema to an instance of one of these classes. Each instance stores the current schema state and updates or returns it when required.\n\nYou can modify the specific ways these classes work by extending them. You can inherit from any existing ``SchemaStrategy`` class, though ``SchemaStrategy`` and ``TypedSchemaStrategy`` are the most useful base classes. You should call ``super`` and pass along all arguments when overriding any instance methods.\n\nThe documentation below explains the public API and what you need to extend and override at a high level. Feel free to explore `the code`_ to see more, but know that the public API is documented here, and anything else you depend on could be subject to change. All ``SchemaStrategy`` subclasses maintain the public API though, so you can extend any of them in this way.\n\n``SchemaStrategy`` API\n++++++++++++++++++++++\n\n[class constant] ``KEYWORDS``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis should be a tuple listing all of the JSON-schema keywords that this strategy knows how to handle. Any keywords encountered in added schemas will be be naively passed on to the generated schema unless they are in this list (or you override that behavior in ``to_schema``).\n\nWhen adding keywords to a new ``SchemaStrategy``, it's best to splat the parent class's ``KEYWORDS`` into the new tuple.\n\n[class method] ``match_schema(cls, schema)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn ``true`` if this strategy should be used to handle the passed-in schema.\n\n:param schema: a JSON Schema in ``dict`` form\n:rtype: ``bool``\n\n[class method] ``match_object(cls, obj)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn ``true`` if this strategy should be used to handle the passed-in object.\n\n:param obj: any object or scalar that can be serialized in JSON\n:rtype: ``bool``\n\n``__init__(self, node_class)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOverride this method if you need to initialize an instance variable.\n\n:param node_class: This param is not part of the public API. Pass it along to ``super``.\n\n``add_schema(self, schema)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOverride this to modify how a schema is parsed and stored.\n\n:param schema: a JSON Schema in ``dict`` form\n\n``add_object(self, obj)``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOverride this to change the way a schemas are inferred from objects.\n\n:param obj: any object or scalar that can be serialized in JSON\n\n``to_schema(self)``\n^^^^^^^^^^^^^^^^^^^\n\nOverride this method to customize how a schema object is constructed from the inputs. It is suggested that you invoke ``super`` as the basis for the return value, but it is not required.\n\n:rtype: ``dict``\n\n.. note::\n    There is no schema validation. If you return a bad schema from this method,\n    ``SchemaBuilder`` will output a bad schema.\n\n``__eq__(self, other)``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen checking for ``SchemaBuilder`` equality, strategies are matched using ``__eq__``. The default implementation uses a simple ``__dict__`` equality check.\n\nOverride this method if you need to override that behavior. This may be useful if you add instance variables that aren't relevant to whether two SchemaStrategies are considered equal.\n\n:rtype: ``bool``\n\n\n\n``TypedSchemaStrategy`` API\n+++++++++++++++++++++++++++\n\nThis is an abstract schema strategy for making simple schemas that only deal with the ``type`` keyword, but you can extend it to add more functionality. Subclasses must define the following two class constants, but you get the entire ``SchemaStrategy`` interface for free.\n\n[class constant] ``JS_TYPE``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis will be the value of the ``type`` keyword in the generated schema. It is also used to match any added schemas.\n\n\n[class constant] ``PYTHON_TYPE``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis is a Python type or tuple of types that will be matched against an added object using ``isinstance``.\n\nExtending ``SchemaBuilder``\n+++++++++++++++++++++++++++\n\nOnce you have extended ``SchemaStrategy`` types, you'll need to create a ``SchemaBuilder`` class that uses them, since the default ``SchemaBuilder`` only incorporates the default strategies. To do this, extend the ``SchemaBuilder`` class and define one of these two constants inside it:\n\n[class constant] ``EXTRA_STRATEGIES``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis is the standard (and suggested) way to add strategies. Set it to a tuple of all your new strategies, and they will be added to the existing list of strategies to check. This preserves all the existing functionality.\n\nNote that order matters. GenSON checks the list in order, so the first strategy has priority over the second and so on. All ``EXTRA_STRATEGIES`` have priority over the default strategies.\n\n[class constant] ``STRATEGIES``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis clobbers the existing list of strategies and completely replaces it. Set it to a tuple just like for ``EXTRA_STRATEGIES``, but note that if any object or schema gets added that your exhaustive list of strategies doesn't know how to handle, you'll get an error. You should avoid doing this unless you're extending most or all existing strategies in some way.\n\nExample: ``MinNumber``\n++++++++++++++++++++++\n\nHere's some example code creating a number strategy that tracks the `minimum number`_ seen and includes it in the output schema.\n\n.. note::\n    This example is written in Python 3.3+. Custom strategies also work in Python 2.7, but you need different syntax (``super`` arguments & no splatting ``KEYWORDS``).\n\n.. code-block:: python\n\n    from genson import SchemaBuilder\n    from genson.schema.strategies import Number\n\n    class MinNumber(Number):\n        # add 'minimum' to list of keywords\n        KEYWORDS = (*Number.KEYWORDS, 'minimum')\n\n        # create a new instance variable\n        def __init__(self, node_class):\n            super().__init__(node_class)\n            self.min = None\n\n        # capture 'minimum's from schemas\n        def add_schema(self, schema):\n            super().add_schema(schema)\n            if self.min is None:\n                self.min = schema.get('minimum')\n            elif 'minimum' in schema:\n                self.min = min(self.min, schema['minimum'])\n\n        # adjust minimum based on the data\n        def add_object(self, obj):\n            super().add_object(obj)\n            self.min = obj if self.min is None else min(self.min, obj)\n\n        # include 'minimum' in the output\n        def to_schema(self):\n            schema = super().to_schema()\n            schema['minimum'] = self.min\n            return schema\n\n    # new SchemaBuilder class that uses the MinNumber strategy in addition\n    # to the existing strategies. Both MinNumber and Number are active, but\n    # MinNumber has priority, so it effectively replaces Number.\n    class MinNumberSchemaBuilder(SchemaBuilder):\n        \"\"\" all number nodes include minimum \"\"\"\n        EXTRA_STRATEGIES = (MinNumber,)\n\n    # this class *ONLY* has the MinNumber strategy. Any object that is not\n    # a number will cause an error.\n    class ExclusiveMinNumberSchemaBuilder(SchemaBuilder):\n        \"\"\" all number nodes include minimum, and only handles number \"\"\"\n        STRATEGIES = (MinNumber,)\n\nNow that we have the MinNumberSchemaBuilder class, let's see how it works.\n\n.. code-block:: python\n\n    >>> builder = MinNumberSchemaBuilder()\n    >>> builder.add_object(5)\n    >>> builder.add_object(7)\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'integer', 'minimum': 5}\n    >>> builder.add_object(-2)\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'integer', 'minimum': -2}\n    >>> builder.add_schema({'$schema': 'http://json-schema.org/schema#', 'type': 'integer', 'minimum': -7})\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'integer', 'minimum': -7}\n\nNote that the exclusive builder is much more particular.\n\n.. code-block:: python\n\n    >>> builder = MinNumberSchemaBuilder()\n    >>> picky_builder = ExclusiveMinNumberSchemaBuilder()\n    >>> picky_builder.add_object(5)\n    >>> picky_builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'integer', 'minimum': 5}\n    >>> builder.add_object(None) # this is fine\n    >>> picky_builder.add_object(None) # this fails\n    genson.schema.node.SchemaGenerationError: Could not find matching schema type for object: None\n\n\nCompatibility\n-------------\n\nGenSON has been tested and verified using the following versions of Python:\n\n* Python 2.7.11\n* Python 3.3.5\n* Python 3.4.4\n* Python 3.5.1\n* Python 3.6.2\n\n\nContributing\n------------\n\nWhen contributing, please follow these steps:\n\n1. Clone the repo and make your changes.\n2. Make sure your code has test cases written against it.\n3. Make sure all the tests pass.\n4. Lint your code with `Flake8`_.\n5. Ensure the docs are accurate.\n6. Add your name to the list of contributers.\n7. Submit a Pull Request.\n\nTests\n+++++\n\nTests are written in ``unittest``. You can run them all easily with the included executable ``bin/test.py``.\n\n.. code-block:: bash\n\n    $ bin/test.py\n\nYou can also invoke individual test suites:\n\n.. code-block:: bash\n\n    $ bin/test.py --test-suite test.test_gen_single\n\n\nPotential Future Features\n+++++++++++++++++++++++++\n\nThe following are extra features under consideration.\n\n* recognize every validation keyword and ignore any that don't apply\n* option to set error level\n* custom serializer plugins\n* logical support for more keywords:\n\n  * ``enum``\n  * ``minimum``/``maximum``\n  * ``minLength``/``maxLength``\n  * ``minItems``/``maxItems``\n  * ``minProperties``/``maxProperties``\n  * ``additionalItems``\n  * ``additionalProperties``\n  * ``format`` & ``pattern``\n  * ``$ref`` & ``id``\n\n.. _JSON Schema: http://json-schema.org/\n.. _Java Genson library: https://owlike.github.io/genson/\n.. _`Python's builtin json library`: https://docs.python.org/library/json.html\n.. _below: #typeless-schemas\n.. _array validation here: https://spacetelescope.github.io/understanding-json-schema/reference/array.html#items\n.. _patternProperties: https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\n.. _Python flavor of RegEx: https://docs.python.org/3.6/library/re.html\n.. _the code: https://github.com/wolverdude/GenSON/tree/master/genson/schema/strategies\n.. _minimum number: https://json-schema.org/understanding-json-schema/reference/numeric.html#range\n.. _Flake8: https://pypi.python.org/pypi/flake8\n\n\nHistory\n=======\n\n1.2.1\n-----\n\n* expose ``SchemaStrategy.__eq__()`` for extension\n* add support for Python 3.8\n* update Trove classifiers\n* **Bugfix**: ``SchemaBuilder.__eq__()`` wasn't matching the ``$schema`` keyword correctly\n* **Bugfix**: only activate empty ``required`` option when ``required`` is actualy empty\n\n\n1.2.0\n-----\n\n* ``SchemaStrategies`` are now extendable, enabling custom ``SchemaBuilder`` classes.\n* optimize ``__eq__`` logic\n\n1.1.0\n-----\n\n* add support for Python 3.7\n* drop support for Python 3.3\n* drop support for JSON-Schema Draft 4 (because it doesn't allow empty ``required`` arrays)\n* **Bugfix**: preserve empty ``required`` arrays (fixes #25)\n* **Bugfix**: handle nested ``anyOf`` keywords (fixes #35)\n\n1.0.2\n-----\n\n* add support for ``long`` integers in Python 2.7\n* update test-skipping decorator to use standard version requirement strings\n\n1.0.1\n-----\n\n* **Bugfix**: seeding an object schema with a ``\"required\"`` keyword caused an error\n* **Docs**: fix mislabeled method\n\n1.0.0\n-----\n\nThis version was a total overhaul. The main change was to split Schema into three separate classes, making it simpler to add more complicated functionality by having different generator types to handle the different schema types.\n\n1. ``SchemaNode`` to manage the tree structure\n2. ``SchemaGenerator`` for the schema generation logic\n3. ``SchemaBuilder`` to manage the public API\n\nInterface Changes\n+++++++++++++++++\n\n* ``SchemaBuilder`` is the new ``Schema``\n* ``to_dict()`` is now called ``to_schema()``\n\nTo make the transition easier, there is still a ``Schema`` class that wraps ``SchemaBuilder`` with a backwards-compatibility layer, but you will trigger a ``PendingDeprecationWarning`` if you use it.\n\nSeed Schemas\n++++++++++++\n\nThe ``merge_arrays`` option has been removed in favor of seed schemas. You can now seed specific nodes as list or tuple instead of setting a global option for every node in the schema tree.\n\nYou can also now seed object nodes with ``patternProperties``, which was a highly requested feature.\n\nOther Changes\n+++++++++++++\n\n* include ``\"$schema\"`` keyword\n* accept schemas without ``\"type\"`` keyword\n* use ``\"anyOf\"`` keyword to help combine schemas\n* add ``SchemaGenerationError`` for better error handling\n* empty ``\"properties\"`` and ``\"items\"`` are not included in generated schemas\n* ``genson`` executable\n\n  * new ``--schema-uri`` option\n  * auto-detect object boundaries by default\n\n0.2.3\n-----\n* **Docs**: add installation instructions\n\n0.2.2\n-----\n* **Docs**: Python 3.6 is now explicitly tested and listed as compatible.\n\n0.2.1\n-----\n* **Bugfix**: ``add_schema`` failed when adding list-style array schemas\n* **Bugfix**: typo in readme\n\n0.2.0\n-----\n\n* **Bugfix**: Options were not propagated down to subschemas.\n* **Bugfix**: Empty arrays resulted in invalid schemas because it still included an ``items`` property.\n* **Bugfix**: ``items`` was being set to a list even when ``merge_arrays`` was set to ``True``. This resulted in overly permissive schemas because ``items`` are matched optionally by default.\n* **Improvement**: Positional Array Matching - In order to be more consistent with the way JSON Schema works, the alternate to ``merge_arrays`` is no longer never to merge list items, but instead to merge them based on their position in the list.\n* **Improvement**: Schema Incompatibility Warning - A schema incompatibility used to cause a fatal error with a nondescript warning. The message has been improved and it has been reduced to a warning.\n\n0.1.0 (2014-11-29)\n------------------\n\n* Initial release\n\n\nCredits\n=======\n\n**GenSON** is written and maintained by `Jon Wolverton <https://github.com/wolverdude>`_.\n\n\nContributors\n------------\n\n- `Brad Sokol <https://github.com/bradsokol>`_\n- `David Kay <https://github.com/davek2>`_\n- `Heiho1 <https://github.com/heiho1>`_\n- `YehudaCorsia <https://github.com/YehudaCorsia>`_", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/wolverdude/GenSON/tarball/v0.2s.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wolverdude/genson/", "keywords": "json,schema,json-schema,jsonschema,object,generate,generator,builder,merge,draft 7,validate,validation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "genson", "package_url": "https://pypi.org/project/genson/", "platform": "", "project_url": "https://pypi.org/project/genson/", "project_urls": {"Download": "https://github.com/wolverdude/GenSON/tarball/v0.2s.0", "Homepage": "https://github.com/wolverdude/genson/"}, "release_url": "https://pypi.org/project/genson/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "GenSON is a powerful, user-friendly JSON Schema generator.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"genson\">\n<h2>GenSON</h2>\n<p><strong>GenSON</strong> is a powerful, user-friendly <a href=\"http://json-schema.org/\" rel=\"nofollow\">JSON Schema</a> generator built in Python.</p>\n<div>\n<p>Note</p>\n<p>This is <em>not</em> the Python equivalent of the <a href=\"https://owlike.github.io/genson/\" rel=\"nofollow\">Java Genson library</a>. If you are coming from Java and need to create JSON objects in Python, you want <a href=\"https://docs.python.org/library/json.html\" rel=\"nofollow\">Python\u2019s builtin json library</a>.)</p>\n</div>\n<p>GenSON\u2019s core function is to take JSON objects and generate schemas that describe them, but it is unique in its ability to <em>merge</em> schemas. It was originally built to describe the common structure of a large number of JSON objects, and it uses its merging ability to generate a single schema from any number of JSON objects and/or schemas.</p>\n<p>GenSON\u2019s schema builder follows these three rules:</p>\n<ol>\n<li><em>Every</em> object it is given must validate under the generated schema.</li>\n<li><em>Any</em> object that is valid under <em>any</em> schema it is given must also validate under the generated schema. (there is one glaring exception to this, detailed <a href=\"#typeless-schemas\" rel=\"nofollow\">below</a>)</li>\n<li>The generated schema should be as strict as possible given the first 2 rules.</li>\n</ol>\n<div id=\"json-schema-implementation\">\n<h3>JSON Schema Implementation</h3>\n<p><strong>GenSON</strong> is compatible with JSON Schema Draft 6 and above.</p>\n<p>It is important to note that GenSON uses only a subset of JSON Schema\u2019s capabilities. This is mainly because it doesn\u2019t know the specifics of your data model, and it tries to avoid guessing them. Its purpose is to generate the basic structure so that you can skip the boilerplate and focus on the details of the schema.</p>\n<p>Currently, GenSON only deals with these keywords:</p>\n<ul>\n<li><tt>\"$schema\"</tt></li>\n<li><tt>\"type\"</tt></li>\n<li><tt>\"items\"</tt></li>\n<li><tt>\"properties\"</tt></li>\n<li><tt>\"patternProperties\"</tt></li>\n<li><tt>\"required\"</tt></li>\n<li><tt>\"anyOf\"</tt></li>\n</ul>\n<p>You should be aware that this limited vocabulary could cause GenSON to violate rules 1 and 2. If you feed it schemas with advanced keywords, it will just blindly pass them on to the final schema. Note that <tt>\"$ref\"</tt> and <tt>id</tt> are also not supported, so GenSON will not dereference linked nodes when building a schema.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install genson\n</pre>\n</div>\n<div id=\"cli-tool\">\n<h3>CLI Tool</h3>\n<p>The package includes a <tt>genson</tt> executable that allows you to access this functionality from the command line. For usage info, run with <tt><span class=\"pre\">--help</span></tt>:</p>\n<pre>$ genson --help\n</pre>\n<pre>usage: genson.py [-h] [-d DELIM] [-i SPACES] [-s SCHEMA] [-$ URI] ...\n\nGenerate one, unified JSON Schema from one or more JSON objects and/or JSON\nSchemas. It's compatible with Draft 6 and above.\n\npositional arguments:\n  object                files containing JSON objects (defaults to stdin if no\n                        arguments are passed)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DELIM, --delimiter DELIM\n                        set a delimiter - Use this option if the input files\n                        contain multiple JSON objects/schemas. You can pass\n                        any string. A few cases ('newline', 'tab', 'space')\n                        will get converted to a whitespace character. If this\n                        option is omitted, the parser will try to auto-detect\n                        boundaries\n  -i SPACES, --indent SPACES\n                        pretty-print the output, indenting SPACES spaces\n  -s SCHEMA, --schema SCHEMA\n                        file containing a JSON Schema (can be specified\n                        multiple times to merge schemas)\n  -$ URI, --schema-uri URI\n                        the value of the '$schema' keyword (defaults to\n                        'http://json-schema.org/schema#' or can be specified\n                        in a schema with the -s option). If 'NULL' is passed,\n                        the \"$schema\" keyword will not be included in the\n                        result.\n</pre>\n</div>\n<div id=\"genson-python-api\">\n<h3>GenSON Python API</h3>\n<p><tt>SchemaBuilder</tt> is the basic schema generator class. <tt>SchemaBuilder</tt> instances can be loaded up with existing schemas and objects before being serialized.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">genson</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaBuilder</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">({</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span> <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{}})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">({</span><span class=\"s2\">\"hi\"</span><span class=\"p\">:</span> <span class=\"s2\">\"there\"</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">({</span><span class=\"s2\">\"hi\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'hi'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">]}},</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'hi'</span><span class=\"p\">]}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">\"$schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://json-schema.org/schema#\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"hi\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"string\"</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"hi\"</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"schemabuilder-api\">\n<h4><tt>SchemaBuilder</tt> API</h4>\n<div id=\"init-schema-uri-none\">\n<h5><tt>__init__(schema_uri=None)</tt></h5>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param schema_uri:</th></tr>\n<tr><td>\u00a0</td><td>value of the <tt>$schema</tt> keyword. If not given, it will use the value of the first available <tt>$schema</tt> keyword on an added schema or else the default: <tt><span class=\"pre\">'http://json-schema.org/schema#'</span></tt>. A value of <tt>False</tt> or <tt>None</tt> will direct GenSON to leave out the <tt>\"$schema\"</tt> keyword.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"add-schema-schema\">\n<h5><tt>add_schema(schema)</tt></h5>\n<p>Merge in a JSON schema. This can be a <tt>dict</tt> or another <tt>SchemaBuilder</tt> object.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param schema:</th><td>a JSON Schema</td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Note</p>\n<p>There is no schema validation. If you pass in a bad schema,\nyou might get back a bad schema.</p>\n</div>\n</div>\n<div id=\"add-object-obj\">\n<h5><tt>add_object(obj)</tt></h5>\n<p>Modify the schema to accommodate an object.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param obj:</th><td>any object or scalar that can be serialized in JSON</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"to-schema\">\n<h5><tt>to_schema()</tt></h5>\n<p>Generate a schema based on previous inputs.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>rtype:</th><td><tt>dict</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"to-json\">\n<h5><tt>to_json()</tt></h5>\n<p>Generate a schema and convert it directly to serialized JSON.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>rtype:</th><td><tt>str</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"eq-other\">\n<h5><tt>__eq__(other)</tt></h5>\n<p>Check for equality with another <tt>SchemaBuilder</tt> object.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param other:</th><td>another <tt>SchemaBuilder</tt> object. Other types are accepted, but will always return <tt>False</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"schemabuilder-object-interaction\">\n<h4>SchemaBuilder object interaction</h4>\n<p><tt>SchemaBuilder</tt> objects can also interact with each other:</p>\n<ul>\n<li>You can pass one schema directly to another to merge them.</li>\n<li>You can compare schema equality directly.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">genson</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaBuilder</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">({</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span> <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>   <span class=\"s2\">\"hi\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">}}})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">({</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span> <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>   <span class=\"s2\">\"hi\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">}}})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span> <span class=\"o\">==</span> <span class=\"n\">b2</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">(</span><span class=\"n\">b2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">(</span><span class=\"n\">b1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span> <span class=\"o\">==</span> <span class=\"n\">b2</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'hi'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">]}}}</span>\n</pre>\n</div>\n</div>\n<div id=\"seed-schemas\">\n<h3>Seed Schemas</h3>\n<p>There are several cases where multiple valid schemas could be generated from the same object. GenSON makes a default choice in all these ambiguous cases, but if you want it to choose differently, you can tell it what to do using a <em>seed schema</em>.</p>\n<div id=\"seeding-arrays\">\n<h4>Seeding Arrays</h4>\n<p>For example, suppose you have a simple array with two items:</p>\n<pre><span class=\"p\">[</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<p>There are always two ways for GenSON to interpret any array: List and Tuple. Lists have one schema for every item, whereas Tuples have a different schema for every array position. This is analogous to the (now deprecated) <tt>merge_arrays</tt> option from version 0. You can read more about JSON Schema <a href=\"https://spacetelescope.github.io/understanding-json-schema/reference/array.html#items\" rel=\"nofollow\">array validation here</a>.</p>\n<div id=\"list-validation\">\n<h5>List Validation</h5>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"array\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"integer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"string\"</span><span class=\"p\">]}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"tuple-validation\">\n<h5>Tuple Validation</h5>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"array\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">}]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>By default, GenSON always interprets arrays using list validation, but you can tell it to use tuple validation by seeding it with a schema.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">genson</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaBuilder</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">([</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'array'</span><span class=\"p\">,</span>\n <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">]}}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">seed_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'array'</span><span class=\"p\">,</span> <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">(</span><span class=\"n\">seed_schema</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">([</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'array'</span><span class=\"p\">,</span>\n <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">}]}</span>\n</pre>\n<p>Note that in this case, the seed schema is actually invalid. You can\u2019t have an empty array as the value for an <tt>items</tt> keyword. But GenSON is a generator, not a validator, so you can fudge a little. GenSON will modify the generated schema so that it is valid, provided that there aren\u2019t invalid keywords beyond the ones it knows about.</p>\n</div>\n</div>\n<div id=\"seeding-patternproperties\">\n<h4>Seeding patternProperties</h4>\n<p>Support for <a href=\"https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\" rel=\"nofollow\">patternProperties</a> is new in version 1; however, since GenSON\u2019s default behavior is to only use <tt>properties</tt>, this powerful keyword can only be utilized with seed schemas. You will need to supply an <tt>object</tt> schema with a <tt>patternProperties</tt> object whose keys are RegEx strings. Again, you can fudge here and set the values to null instead of creating valid subschemas.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">genson</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaBuilder</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">SchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">({</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"s1\">'patternProperties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">r</span><span class=\"s1\">'^\\d+$'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">({</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"s1\">'patternProperties'</span><span class=\"p\">:</span>  <span class=\"p\">{</span><span class=\"s1\">'^</span><span class=\"se\">\\\\</span><span class=\"s1\">d+$'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">}}}</span>\n</pre>\n<p>There are a few gotchas you should be aware of here:</p>\n<ul>\n<li>GenSON is written in Python, so it uses the <a href=\"https://docs.python.org/3.6/library/re.html\" rel=\"nofollow\">Python flavor of RegEx</a>.</li>\n<li>GenSON still prefers <tt>properties</tt> to <tt>patternProperties</tt> if a property already exists that matches one of your patterns, the normal property will be updated, <em>not</em> the pattern property.</li>\n<li>If a key matches multiple patterns, there is <em>no guarantee</em> of which one will be updated.</li>\n<li>The <a href=\"https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\" rel=\"nofollow\">patternProperties</a> docs themselves have some more useful pointers that can save you time.</li>\n</ul>\n</div>\n<div id=\"typeless-schemas\">\n<h4>Typeless Schemas</h4>\n<p>In version 0, GenSON did not accept a schema without a type, but in order to be flexible in the support of seed schemas, support was added for version 1. However, GenSON violates rule #2 in its handling of typeless schemas. Any object will validate under an empty schema, but GenSON incorporates typeless schemas into the first-available typed schema, and since typed schemas are stricter than typless ones, objects that would validate under an added schema will not validate under the result.</p>\n</div>\n</div>\n<div id=\"customizing-schemabuilder\">\n<h3>Customizing <tt>SchemaBuilder</tt></h3>\n<p>You can extend the <tt>SchemaBuilder</tt> class to add in your own logic (e.g. recording <tt>minimum</tt> and <tt>maximum</tt> for a number). In order to do this, you need to:</p>\n<ol>\n<li>Create a custom <tt>SchemaStrategy</tt> class.</li>\n<li>Create a <tt>SchemaBuilder</tt> subclass that includes your custom <tt>SchemaStrategy</tt> class(es).</li>\n<li>Use your custom <tt>SchemaBuilder</tt> just like you would the stock <tt>SchemaBuilder</tt>.</li>\n</ol>\n<div id=\"schemastrategy-classes\">\n<h4><tt>SchemaStrategy</tt> Classes</h4>\n<p>GenSON uses the Strategy Pattern to parse, update, and serialize different kinds of schemas that behave in different ways. There are several <tt>SchemaStrategy</tt> classes that roughly correspond to different schema types. GenSON maps each node in an object or schema to an instance of one of these classes. Each instance stores the current schema state and updates or returns it when required.</p>\n<p>You can modify the specific ways these classes work by extending them. You can inherit from any existing <tt>SchemaStrategy</tt> class, though <tt>SchemaStrategy</tt> and <tt>TypedSchemaStrategy</tt> are the most useful base classes. You should call <tt>super</tt> and pass along all arguments when overriding any instance methods.</p>\n<p>The documentation below explains the public API and what you need to extend and override at a high level. Feel free to explore <a href=\"https://github.com/wolverdude/GenSON/tree/master/genson/schema/strategies\" rel=\"nofollow\">the code</a> to see more, but know that the public API is documented here, and anything else you depend on could be subject to change. All <tt>SchemaStrategy</tt> subclasses maintain the public API though, so you can extend any of them in this way.</p>\n</div>\n<div id=\"schemastrategy-api\">\n<h4><tt>SchemaStrategy</tt> API</h4>\n<div id=\"class-constant-keywords\">\n<h5>[class constant] <tt>KEYWORDS</tt></h5>\n<p>This should be a tuple listing all of the JSON-schema keywords that this strategy knows how to handle. Any keywords encountered in added schemas will be be naively passed on to the generated schema unless they are in this list (or you override that behavior in <tt>to_schema</tt>).</p>\n<p>When adding keywords to a new <tt>SchemaStrategy</tt>, it\u2019s best to splat the parent class\u2019s <tt>KEYWORDS</tt> into the new tuple.</p>\n</div>\n<div id=\"class-method-match-schema-cls-schema\">\n<h5>[class method] <tt>match_schema(cls, schema)</tt></h5>\n<p>Return <tt>true</tt> if this strategy should be used to handle the passed-in schema.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param schema:</th><td>a JSON Schema in <tt>dict</tt> form</td>\n</tr>\n<tr><th>rtype:</th><td><tt>bool</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"class-method-match-object-cls-obj\">\n<h5>[class method] <tt>match_object(cls, obj)</tt></h5>\n<p>Return <tt>true</tt> if this strategy should be used to handle the passed-in object.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param obj:</th><td>any object or scalar that can be serialized in JSON</td>\n</tr>\n<tr><th>rtype:</th><td><tt>bool</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"init-self-node-class\">\n<h5><tt>__init__(self, node_class)</tt></h5>\n<p>Override this method if you need to initialize an instance variable.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param node_class:</th></tr>\n<tr><td>\u00a0</td><td>This param is not part of the public API. Pass it along to <tt>super</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"add-schema-self-schema\">\n<h5><tt>add_schema(self, schema)</tt></h5>\n<p>Override this to modify how a schema is parsed and stored.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param schema:</th><td>a JSON Schema in <tt>dict</tt> form</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"add-object-self-obj\">\n<h5><tt>add_object(self, obj)</tt></h5>\n<p>Override this to change the way a schemas are inferred from objects.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param obj:</th><td>any object or scalar that can be serialized in JSON</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"to-schema-self\">\n<h5><tt>to_schema(self)</tt></h5>\n<p>Override this method to customize how a schema object is constructed from the inputs. It is suggested that you invoke <tt>super</tt> as the basis for the return value, but it is not required.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>rtype:</th><td><tt>dict</tt></td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Note</p>\n<p>There is no schema validation. If you return a bad schema from this method,\n<tt>SchemaBuilder</tt> will output a bad schema.</p>\n</div>\n</div>\n<div id=\"eq-self-other\">\n<h5><tt>__eq__(self, other)</tt></h5>\n<p>When checking for <tt>SchemaBuilder</tt> equality, strategies are matched using <tt>__eq__</tt>. The default implementation uses a simple <tt>__dict__</tt> equality check.</p>\n<p>Override this method if you need to override that behavior. This may be useful if you add instance variables that aren\u2019t relevant to whether two SchemaStrategies are considered equal.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>rtype:</th><td><tt>bool</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"typedschemastrategy-api\">\n<h4><tt>TypedSchemaStrategy</tt> API</h4>\n<p>This is an abstract schema strategy for making simple schemas that only deal with the <tt>type</tt> keyword, but you can extend it to add more functionality. Subclasses must define the following two class constants, but you get the entire <tt>SchemaStrategy</tt> interface for free.</p>\n<div id=\"class-constant-js-type\">\n<h5>[class constant] <tt>JS_TYPE</tt></h5>\n<p>This will be the value of the <tt>type</tt> keyword in the generated schema. It is also used to match any added schemas.</p>\n</div>\n<div id=\"class-constant-python-type\">\n<h5>[class constant] <tt>PYTHON_TYPE</tt></h5>\n<p>This is a Python type or tuple of types that will be matched against an added object using <tt>isinstance</tt>.</p>\n</div>\n</div>\n<div id=\"extending-schemabuilder\">\n<h4>Extending <tt>SchemaBuilder</tt></h4>\n<p>Once you have extended <tt>SchemaStrategy</tt> types, you\u2019ll need to create a <tt>SchemaBuilder</tt> class that uses them, since the default <tt>SchemaBuilder</tt> only incorporates the default strategies. To do this, extend the <tt>SchemaBuilder</tt> class and define one of these two constants inside it:</p>\n<div id=\"class-constant-extra-strategies\">\n<h5>[class constant] <tt>EXTRA_STRATEGIES</tt></h5>\n<p>This is the standard (and suggested) way to add strategies. Set it to a tuple of all your new strategies, and they will be added to the existing list of strategies to check. This preserves all the existing functionality.</p>\n<p>Note that order matters. GenSON checks the list in order, so the first strategy has priority over the second and so on. All <tt>EXTRA_STRATEGIES</tt> have priority over the default strategies.</p>\n</div>\n<div id=\"class-constant-strategies\">\n<h5>[class constant] <tt>STRATEGIES</tt></h5>\n<p>This clobbers the existing list of strategies and completely replaces it. Set it to a tuple just like for <tt>EXTRA_STRATEGIES</tt>, but note that if any object or schema gets added that your exhaustive list of strategies doesn\u2019t know how to handle, you\u2019ll get an error. You should avoid doing this unless you\u2019re extending most or all existing strategies in some way.</p>\n</div>\n</div>\n<div id=\"example-minnumber\">\n<h4>Example: <tt>MinNumber</tt></h4>\n<p>Here\u2019s some example code creating a number strategy that tracks the <a href=\"https://json-schema.org/understanding-json-schema/reference/numeric.html#range\" rel=\"nofollow\">minimum number</a> seen and includes it in the output schema.</p>\n<div>\n<p>Note</p>\n<p>This example is written in Python 3.3+. Custom strategies also work in Python 2.7, but you need different syntax (<tt>super</tt> arguments &amp; no splatting <tt>KEYWORDS</tt>).</p>\n</div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">genson</span> <span class=\"kn\">import</span> <span class=\"n\">SchemaBuilder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">genson.schema.strategies</span> <span class=\"kn\">import</span> <span class=\"n\">Number</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MinNumber</span><span class=\"p\">(</span><span class=\"n\">Number</span><span class=\"p\">):</span>\n    <span class=\"c1\"># add 'minimum' to list of keywords</span>\n    <span class=\"n\">KEYWORDS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Number</span><span class=\"o\">.</span><span class=\"n\">KEYWORDS</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># create a new instance variable</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node_class</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">node_class</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># capture 'minimum's from schemas</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_schema</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'minimum'</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"s1\">'minimum'</span> <span class=\"ow\">in</span> <span class=\"n\">schema</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">[</span><span class=\"s1\">'minimum'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># adjust minimum based on the data</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">obj</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># include 'minimum' in the output</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_schema</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n        <span class=\"n\">schema</span><span class=\"p\">[</span><span class=\"s1\">'minimum'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span>\n        <span class=\"k\">return</span> <span class=\"n\">schema</span>\n\n<span class=\"c1\"># new SchemaBuilder class that uses the MinNumber strategy in addition</span>\n<span class=\"c1\"># to the existing strategies. Both MinNumber and Number are active, but</span>\n<span class=\"c1\"># MinNumber has priority, so it effectively replaces Number.</span>\n<span class=\"k\">class</span> <span class=\"nc\">MinNumberSchemaBuilder</span><span class=\"p\">(</span><span class=\"n\">SchemaBuilder</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" all number nodes include minimum \"\"\"</span>\n    <span class=\"n\">EXTRA_STRATEGIES</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">MinNumber</span><span class=\"p\">,)</span>\n\n<span class=\"c1\"># this class *ONLY* has the MinNumber strategy. Any object that is not</span>\n<span class=\"c1\"># a number will cause an error.</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExclusiveMinNumberSchemaBuilder</span><span class=\"p\">(</span><span class=\"n\">SchemaBuilder</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" all number nodes include minimum, and only handles number \"\"\"</span>\n    <span class=\"n\">STRATEGIES</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">MinNumber</span><span class=\"p\">,)</span>\n</pre>\n<p>Now that we have the MinNumberSchemaBuilder class, let\u2019s see how it works.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">MinNumberSchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_schema</span><span class=\"p\">({</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">}</span>\n</pre>\n<p>Note that the exclusive builder is much more particular.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">MinNumberSchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">picky_builder</span> <span class=\"o\">=</span> <span class=\"n\">ExclusiveMinNumberSchemaBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">picky_builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">picky_builder</span><span class=\"o\">.</span><span class=\"n\">to_schema</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/schema#'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span> <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"c1\"># this is fine</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">picky_builder</span><span class=\"o\">.</span><span class=\"n\">add_object</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"c1\"># this fails</span>\n<span class=\"n\">genson</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">SchemaGenerationError</span><span class=\"p\">:</span> <span class=\"n\">Could</span> <span class=\"ow\">not</span> <span class=\"n\">find</span> <span class=\"n\">matching</span> <span class=\"n\">schema</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n</pre>\n</div>\n</div>\n<div id=\"compatibility\">\n<h3>Compatibility</h3>\n<p>GenSON has been tested and verified using the following versions of Python:</p>\n<ul>\n<li>Python 2.7.11</li>\n<li>Python 3.3.5</li>\n<li>Python 3.4.4</li>\n<li>Python 3.5.1</li>\n<li>Python 3.6.2</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>When contributing, please follow these steps:</p>\n<ol>\n<li>Clone the repo and make your changes.</li>\n<li>Make sure your code has test cases written against it.</li>\n<li>Make sure all the tests pass.</li>\n<li>Lint your code with <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">Flake8</a>.</li>\n<li>Ensure the docs are accurate.</li>\n<li>Add your name to the list of contributers.</li>\n<li>Submit a Pull Request.</li>\n</ol>\n<div id=\"tests\">\n<h4>Tests</h4>\n<p>Tests are written in <tt>unittest</tt>. You can run them all easily with the included executable <tt>bin/test.py</tt>.</p>\n<pre>$ bin/test.py\n</pre>\n<p>You can also invoke individual test suites:</p>\n<pre>$ bin/test.py --test-suite test.test_gen_single\n</pre>\n</div>\n<div id=\"potential-future-features\">\n<h4>Potential Future Features</h4>\n<p>The following are extra features under consideration.</p>\n<ul>\n<li>recognize every validation keyword and ignore any that don\u2019t apply</li>\n<li>option to set error level</li>\n<li>custom serializer plugins</li>\n<li>logical support for more keywords:<ul>\n<li><tt>enum</tt></li>\n<li><tt>minimum</tt>/<tt>maximum</tt></li>\n<li><tt>minLength</tt>/<tt>maxLength</tt></li>\n<li><tt>minItems</tt>/<tt>maxItems</tt></li>\n<li><tt>minProperties</tt>/<tt>maxProperties</tt></li>\n<li><tt>additionalItems</tt></li>\n<li><tt>additionalProperties</tt></li>\n<li><tt>format</tt> &amp; <tt>pattern</tt></li>\n<li><tt>$ref</tt> &amp; <tt>id</tt></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.2.1</h3>\n<ul>\n<li>expose <tt>SchemaStrategy.__eq__()</tt> for extension</li>\n<li>add support for Python 3.8</li>\n<li>update Trove classifiers</li>\n<li><strong>Bugfix</strong>: <tt>SchemaBuilder.__eq__()</tt> wasn\u2019t matching the <tt>$schema</tt> keyword correctly</li>\n<li><strong>Bugfix</strong>: only activate empty <tt>required</tt> option when <tt>required</tt> is actualy empty</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.2.0</h3>\n<ul>\n<li><tt>SchemaStrategies</tt> are now extendable, enabling custom <tt>SchemaBuilder</tt> classes.</li>\n<li>optimize <tt>__eq__</tt> logic</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.1.0</h3>\n<ul>\n<li>add support for Python 3.7</li>\n<li>drop support for Python 3.3</li>\n<li>drop support for JSON-Schema Draft 4 (because it doesn\u2019t allow empty <tt>required</tt> arrays)</li>\n<li><strong>Bugfix</strong>: preserve empty <tt>required</tt> arrays (fixes #25)</li>\n<li><strong>Bugfix</strong>: handle nested <tt>anyOf</tt> keywords (fixes #35)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.2</h3>\n<ul>\n<li>add support for <tt>long</tt> integers in Python 2.7</li>\n<li>update test-skipping decorator to use standard version requirement strings</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.1</h3>\n<ul>\n<li><strong>Bugfix</strong>: seeding an object schema with a <tt>\"required\"</tt> keyword caused an error</li>\n<li><strong>Docs</strong>: fix mislabeled method</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.0.0</h3>\n<p>This version was a total overhaul. The main change was to split Schema into three separate classes, making it simpler to add more complicated functionality by having different generator types to handle the different schema types.</p>\n<ol>\n<li><tt>SchemaNode</tt> to manage the tree structure</li>\n<li><tt>SchemaGenerator</tt> for the schema generation logic</li>\n<li><tt>SchemaBuilder</tt> to manage the public API</li>\n</ol>\n<div id=\"interface-changes\">\n<h4>Interface Changes</h4>\n<ul>\n<li><tt>SchemaBuilder</tt> is the new <tt>Schema</tt></li>\n<li><tt>to_dict()</tt> is now called <tt>to_schema()</tt></li>\n</ul>\n<p>To make the transition easier, there is still a <tt>Schema</tt> class that wraps <tt>SchemaBuilder</tt> with a backwards-compatibility layer, but you will trigger a <tt>PendingDeprecationWarning</tt> if you use it.</p>\n</div>\n<div id=\"id7\">\n<h4>Seed Schemas</h4>\n<p>The <tt>merge_arrays</tt> option has been removed in favor of seed schemas. You can now seed specific nodes as list or tuple instead of setting a global option for every node in the schema tree.</p>\n<p>You can also now seed object nodes with <tt>patternProperties</tt>, which was a highly requested feature.</p>\n</div>\n<div id=\"other-changes\">\n<h4>Other Changes</h4>\n<ul>\n<li>include <tt>\"$schema\"</tt> keyword</li>\n<li>accept schemas without <tt>\"type\"</tt> keyword</li>\n<li>use <tt>\"anyOf\"</tt> keyword to help combine schemas</li>\n<li>add <tt>SchemaGenerationError</tt> for better error handling</li>\n<li>empty <tt>\"properties\"</tt> and <tt>\"items\"</tt> are not included in generated schemas</li>\n<li><tt>genson</tt> executable<ul>\n<li>new <tt><span class=\"pre\">--schema-uri</span></tt> option</li>\n<li>auto-detect object boundaries by default</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"id8\">\n<h3>0.2.3</h3>\n<ul>\n<li><strong>Docs</strong>: add installation instructions</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.2.2</h3>\n<ul>\n<li><strong>Docs</strong>: Python 3.6 is now explicitly tested and listed as compatible.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.2.1</h3>\n<ul>\n<li><strong>Bugfix</strong>: <tt>add_schema</tt> failed when adding list-style array schemas</li>\n<li><strong>Bugfix</strong>: typo in readme</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.2.0</h3>\n<ul>\n<li><strong>Bugfix</strong>: Options were not propagated down to subschemas.</li>\n<li><strong>Bugfix</strong>: Empty arrays resulted in invalid schemas because it still included an <tt>items</tt> property.</li>\n<li><strong>Bugfix</strong>: <tt>items</tt> was being set to a list even when <tt>merge_arrays</tt> was set to <tt>True</tt>. This resulted in overly permissive schemas because <tt>items</tt> are matched optionally by default.</li>\n<li><strong>Improvement</strong>: Positional Array Matching - In order to be more consistent with the way JSON Schema works, the alternate to <tt>merge_arrays</tt> is no longer never to merge list items, but instead to merge them based on their position in the list.</li>\n<li><strong>Improvement</strong>: Schema Incompatibility Warning - A schema incompatibility used to cause a fatal error with a nondescript warning. The message has been improved and it has been reduced to a warning.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.1.0 (2014-11-29)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p><strong>GenSON</strong> is written and maintained by <a href=\"https://github.com/wolverdude\" rel=\"nofollow\">Jon Wolverton</a>.</p>\n<div id=\"contributors\">\n<h3>Contributors</h3>\n<ul>\n<li><a href=\"https://github.com/bradsokol\" rel=\"nofollow\">Brad Sokol</a></li>\n<li><a href=\"https://github.com/davek2\" rel=\"nofollow\">David Kay</a></li>\n<li><a href=\"https://github.com/heiho1\" rel=\"nofollow\">Heiho1</a></li>\n<li><a href=\"https://github.com/YehudaCorsia\" rel=\"nofollow\">YehudaCorsia</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7088919, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6a9505b3dccf02124a9d25b4883ae52d", "sha256": "588f5266ef52465bd32cefef679f3050ae0bc38836fdf4dd74370ae3f3b48f6d"}, "downloads": -1, "filename": "genson-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6a9505b3dccf02124a9d25b4883ae52d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11255, "upload_time": "2014-11-30T04:50:35", "upload_time_iso_8601": "2014-11-30T04:50:35.442788Z", "url": "https://files.pythonhosted.org/packages/9d/8d/123cd25290f008092870c71ffc8f159f04aa7b9dfd5e95053e885d3d355f/genson-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6bb0f826eabd13e755d564291121307", "sha256": "ac250f735c26c7d0cc38e469b954e3dbd969240da93ae8f0372c85cdcd970b61"}, "downloads": -1, "filename": "genson-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b6bb0f826eabd13e755d564291121307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10109, "upload_time": "2014-11-30T04:50:28", "upload_time_iso_8601": "2014-11-30T04:50:28.479383Z", "url": "https://files.pythonhosted.org/packages/e8/f6/ca4d054d3bcc10acbf04cdc021e9cd63c893061a5280951035a589e6a245/genson-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e165a4c15fb9f27d7318d0182e99311b", "sha256": "6ea2bb5b87f042d099154535dbdf61f62402b19bb249e82a15435f2340c58dea"}, "downloads": -1, "filename": "genson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e165a4c15fb9f27d7318d0182e99311b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11682, "upload_time": "2016-06-19T11:49:04", "upload_time_iso_8601": "2016-06-19T11:49:04.133202Z", "url": "https://files.pythonhosted.org/packages/88/0c/3b0e218467cdcd21cb192fc361b597150f5c9dc36f9c5554c6593e90f752/genson-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b2fe31b7736371d79e96f248d6debd84", "sha256": "99b225a5d78a04a8c85dc60b87683f3e53c46e4d7ae6ad87e8b98aece1bab46a"}, "downloads": -1, "filename": "genson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b2fe31b7736371d79e96f248d6debd84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11849, "upload_time": "2017-02-07T05:24:23", "upload_time_iso_8601": "2017-02-07T05:24:23.451345Z", "url": "https://files.pythonhosted.org/packages/cb/3c/977e0d79f1133e9a58af3cf4d69cbea6d88dd6f4dfeac398a93ce2348347/genson-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "bda3576a33e245cfbae4a079205cf10f", "sha256": "f5909b781ea429dfd6282427978a4a4dc27571479643ed9b18e8224711962d25"}, "downloads": -1, "filename": "genson-0.2.2.tar.gz", "has_sig": false, "md5_digest": "bda3576a33e245cfbae4a079205cf10f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11906, "upload_time": "2017-08-12T17:32:43", "upload_time_iso_8601": "2017-08-12T17:32:43.433122Z", "url": "https://files.pythonhosted.org/packages/78/40/b1b539948887884bc881e909de95c914116ac98de984c0a6b039c9512343/genson-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "19dcaece4bd9d03d549fa5fb9f045713", "sha256": "1756740cff035de646a0b1af5cc21f3c8cf558574630c00e40d17ad12024d8da"}, "downloads": -1, "filename": "genson-0.2.3.tar.gz", "has_sig": false, "md5_digest": "19dcaece4bd9d03d549fa5fb9f045713", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11983, "upload_time": "2017-10-15T21:38:54", "upload_time_iso_8601": "2017-10-15T21:38:54.445149Z", "url": "https://files.pythonhosted.org/packages/2b/70/4eea716b647e7b11bf029d05d72eb3b783f20a39ef3a58ed82df8a6bde6b/genson-0.2.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "424a2842d0fcd858ef99a434efa1f8a2", "sha256": "06bbedcde7f268626991b465b0ed3dae00f150b1c20c31c60c092a752531262c"}, "downloads": -1, "filename": "genson-1.0.0.tar.gz", "has_sig": false, "md5_digest": "424a2842d0fcd858ef99a434efa1f8a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25725, "upload_time": "2018-01-02T19:21:22", "upload_time_iso_8601": "2018-01-02T19:21:22.358237Z", "url": "https://files.pythonhosted.org/packages/ad/69/967f7e8c7e31c387c660687f50f234204df869518d39afcc40715737211a/genson-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2122478355da507fded5a0e9b83d6b5b", "sha256": "003218636de802d2268c167c5227b9b9110d7488f376411b3f6c6621f4bc42dc"}, "downloads": -1, "filename": "genson-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2122478355da507fded5a0e9b83d6b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25875, "upload_time": "2018-02-18T06:28:20", "upload_time_iso_8601": "2018-02-18T06:28:20.879845Z", "url": "https://files.pythonhosted.org/packages/00/ed/4b249d723b330e5856ab1c2f09dfa298f997630fa2bc5cfb50247cf1d8d2/genson-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8ada18ff184e008fea4f961cdf2b1dde", "sha256": "8b6e2e08bc0cbfe10f957f390b5f631ca58036c9f1b0ebdde3553722c44c56fa"}, "downloads": -1, "filename": "genson-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8ada18ff184e008fea4f961cdf2b1dde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26215, "upload_time": "2018-12-03T05:09:13", "upload_time_iso_8601": "2018-12-03T05:09:13.767449Z", "url": "https://files.pythonhosted.org/packages/8d/84/0dba142f2968e517a0ac0937245e2659150b7c9612ae4589130e36cf308c/genson-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "381f953dae3521108181f105d69d41ac", "sha256": "7557f5c989ddc194a4dbdfc828520d911922f932dc076c7e850774162f61d6d5"}, "downloads": -1, "filename": "genson-1.1.0.tar.gz", "has_sig": false, "md5_digest": "381f953dae3521108181f105d69d41ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26662, "upload_time": "2019-04-09T04:24:45", "upload_time_iso_8601": "2019-04-09T04:24:45.539148Z", "url": "https://files.pythonhosted.org/packages/8d/04/99ec3729c33601f3285caec48eb3e2e500c5b35b7a7289bda6622b3650ca/genson-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "dbc6e4773c4777d5ace8871d8b8b8a16", "sha256": "993ae47581a2e2c04e166c1ee9103a95d2ac4de0b0f1e8cb5156c983576f5dad"}, "downloads": -1, "filename": "genson-1.2.0.tar.gz", "has_sig": false, "md5_digest": "dbc6e4773c4777d5ace8871d8b8b8a16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32666, "upload_time": "2020-04-17T06:53:46", "upload_time_iso_8601": "2020-04-17T06:53:46.880942Z", "url": "https://files.pythonhosted.org/packages/36/71/45c3b3e7122fefc3bfe39eec7bfde9fc1ba9c6ede107183f24175994902b/genson-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "59db4fd9da9ff892ffa8354778d45719", "sha256": "40b8faa17f53240f224d683d7a302b5f7b35eb7ab2aba1c223a58a38b8d09c42"}, "downloads": -1, "filename": "genson-1.2.1.tar.gz", "has_sig": false, "md5_digest": "59db4fd9da9ff892ffa8354778d45719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33453, "upload_time": "2020-04-24T01:09:40", "upload_time_iso_8601": "2020-04-24T01:09:40.179103Z", "url": "https://files.pythonhosted.org/packages/65/00/7aae36d5ecf483585fba2bacb7c1ccb4ceaf4fcba61f8f9846845300f93b/genson-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59db4fd9da9ff892ffa8354778d45719", "sha256": "40b8faa17f53240f224d683d7a302b5f7b35eb7ab2aba1c223a58a38b8d09c42"}, "downloads": -1, "filename": "genson-1.2.1.tar.gz", "has_sig": false, "md5_digest": "59db4fd9da9ff892ffa8354778d45719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33453, "upload_time": "2020-04-24T01:09:40", "upload_time_iso_8601": "2020-04-24T01:09:40.179103Z", "url": "https://files.pythonhosted.org/packages/65/00/7aae36d5ecf483585fba2bacb7c1ccb4ceaf4fcba61f8f9846845300f93b/genson-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:12 2020"}