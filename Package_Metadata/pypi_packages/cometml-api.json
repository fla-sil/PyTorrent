{"info": {"author": "Nathan Hunt", "author_email": "neighthan.hunt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# comet_ml_api\n\nThis is a set of _unofficial_ Python bindings for the CometML REST API. There are functions for all current endpoints as well as a couple of functions that build on the basic endpoint ones to provide, e.g., simpler output or filtering. I haven't used all of the endpoints myself, so some of the functions haven't been tested at all (e.g. `get_html`). Documentation is currently limited but the functions provided are generally quite simple.\n\nSee [Endpoints][endpoints] for the official documentation of the REST API.\n\n## Authentication\n\nSee [this page][api key] first for how to generate your REST API key. There are two possible methods of authentication using that key:\n1. Store the key in `~/.comet_rest_key`. When you import the `api` script, it will automatically load a key that it finds in this file.\n2. Call the `set_api_key` function and pass your key in. The key will be saved in a global variable so that the same key is used for all subsequent requests unless you explicitly set a new key.\n\n## Endpoints\n\nMost of the basic endpoint functions are named `get_<endpoint>` where `<endpoint>` is the corresponding endpoint (e.g. `get_workspaces` to access `https://www.comet.ml/api/rest/v1/workspaces`). However, there are a few exceptions.\n\n### Metrics\nThere are two endpoints for metrics: `metrics` and `metrics-raw`. I call both of these \"raw\" because they return data that isn't well-formatted for immediate plotting/analysis. As the `metrics` endpoint only return the min, max, and most recent data points for a given metric, I call that one a summary, hence `get_raw_metric_summaries`; the function for `metrics-raw` is `get_raw_metrics`. There is also a helper function `get_metrics` which converts the metrics into a better format for visualization or analysis.\n\n### Params\nSimilarly to metrics, the raw parameters data may not be in the most usable format right away. I thus also call this endpoint `get_raw_params` and have a helper function `get_params` which provides a more concise output.\n\n### Other\nAs for params except, though the endpoint is `log-other`, the functions are `get_raw_others` and `get_others`.\n\n### Images\nThe `images` endpoint doesn't return the images themselves, just the data about them (including the URLs from which the actual images can be downloaded?). I call this endpoint `get_image_data`, but I haven't tested it.\n\n## Example Usage\n\n```python\nfrom comet_ml_api import api\n\nworkspaces = api.get_workspaces()\nproject_ids = api.get_project_names_and_ids(workspaces[0]) # {name: id}\nexperiments = api.get_experiments(project_ids.popitem()[1])\napi.get_params(experiments[0][\"experiment_key\"])\n```\n\n[endpoints]: https://www.comet.ml/docs/rest-api/endpoints/\n[api key]: https://www.comet.ml/docs/rest-api/getting-started/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/neighthan/cometml_api", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cometml-api", "package_url": "https://pypi.org/project/cometml-api/", "platform": "", "project_url": "https://pypi.org/project/cometml-api/", "project_urls": {"Homepage": "https://github.com/neighthan/cometml_api"}, "release_url": "https://pypi.org/project/cometml-api/0.1/", "requires_dist": null, "requires_python": "", "summary": "Python bindings for the CometML REST API.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>comet_ml_api</h1>\n<p>This is a set of <em>unofficial</em> Python bindings for the CometML REST API. There are functions for all current endpoints as well as a couple of functions that build on the basic endpoint ones to provide, e.g., simpler output or filtering. I haven't used all of the endpoints myself, so some of the functions haven't been tested at all (e.g. <code>get_html</code>). Documentation is currently limited but the functions provided are generally quite simple.</p>\n<p>See <a href=\"https://www.comet.ml/docs/rest-api/endpoints/\" rel=\"nofollow\">Endpoints</a> for the official documentation of the REST API.</p>\n<h2>Authentication</h2>\n<p>See <a href=\"https://www.comet.ml/docs/rest-api/getting-started/\" rel=\"nofollow\">this page</a> first for how to generate your REST API key. There are two possible methods of authentication using that key:</p>\n<ol>\n<li>Store the key in <code>~/.comet_rest_key</code>. When you import the <code>api</code> script, it will automatically load a key that it finds in this file.</li>\n<li>Call the <code>set_api_key</code> function and pass your key in. The key will be saved in a global variable so that the same key is used for all subsequent requests unless you explicitly set a new key.</li>\n</ol>\n<h2>Endpoints</h2>\n<p>Most of the basic endpoint functions are named <code>get_&lt;endpoint&gt;</code> where <code>&lt;endpoint&gt;</code> is the corresponding endpoint (e.g. <code>get_workspaces</code> to access <code>https://www.comet.ml/api/rest/v1/workspaces</code>). However, there are a few exceptions.</p>\n<h3>Metrics</h3>\n<p>There are two endpoints for metrics: <code>metrics</code> and <code>metrics-raw</code>. I call both of these \"raw\" because they return data that isn't well-formatted for immediate plotting/analysis. As the <code>metrics</code> endpoint only return the min, max, and most recent data points for a given metric, I call that one a summary, hence <code>get_raw_metric_summaries</code>; the function for <code>metrics-raw</code> is <code>get_raw_metrics</code>. There is also a helper function <code>get_metrics</code> which converts the metrics into a better format for visualization or analysis.</p>\n<h3>Params</h3>\n<p>Similarly to metrics, the raw parameters data may not be in the most usable format right away. I thus also call this endpoint <code>get_raw_params</code> and have a helper function <code>get_params</code> which provides a more concise output.</p>\n<h3>Other</h3>\n<p>As for params except, though the endpoint is <code>log-other</code>, the functions are <code>get_raw_others</code> and <code>get_others</code>.</p>\n<h3>Images</h3>\n<p>The <code>images</code> endpoint doesn't return the images themselves, just the data about them (including the URLs from which the actual images can be downloaded?). I call this endpoint <code>get_image_data</code>, but I haven't tested it.</p>\n<h2>Example Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">comet_ml_api</span> <span class=\"kn\">import</span> <span class=\"n\">api</span>\n\n<span class=\"n\">workspaces</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_workspaces</span><span class=\"p\">()</span>\n<span class=\"n\">project_ids</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_project_names_and_ids</span><span class=\"p\">(</span><span class=\"n\">workspaces</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># {name: id}</span>\n<span class=\"n\">experiments</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_experiments</span><span class=\"p\">(</span><span class=\"n\">project_ids</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">(</span><span class=\"n\">experiments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"experiment_key\"</span><span class=\"p\">])</span>\n</pre>\n\n          </div>"}, "last_serial": 4239761, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4e89ecf6ab8e9140f6e0742ec0c8c7bf", "sha256": "4496dae3e601f0e11db330181b758fd067ab581d30471e2660cd18c2b793f394"}, "downloads": -1, "filename": "cometml_api-0.1.tar.gz", "has_sig": false, "md5_digest": "4e89ecf6ab8e9140f6e0742ec0c8c7bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3917, "upload_time": "2018-09-05T03:57:30", "upload_time_iso_8601": "2018-09-05T03:57:30.635273Z", "url": "https://files.pythonhosted.org/packages/b2/4e/c5dcba2f3810d9872fc2f19be5781b28bdcb8feaa028adad6969c0508102/cometml_api-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e89ecf6ab8e9140f6e0742ec0c8c7bf", "sha256": "4496dae3e601f0e11db330181b758fd067ab581d30471e2660cd18c2b793f394"}, "downloads": -1, "filename": "cometml_api-0.1.tar.gz", "has_sig": false, "md5_digest": "4e89ecf6ab8e9140f6e0742ec0c8c7bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3917, "upload_time": "2018-09-05T03:57:30", "upload_time_iso_8601": "2018-09-05T03:57:30.635273Z", "url": "https://files.pythonhosted.org/packages/b2/4e/c5dcba2f3810d9872fc2f19be5781b28bdcb8feaa028adad6969c0508102/cometml_api-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:27 2020"}