{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "![cvxpylayers logo](cvxpylayers_logo.png)\n[![Build Status](https://travis-ci.org/cvxgrp/cvxpylayers.svg?branch=master)](https://travis-ci.org/cvxgrp/cvxpylayers)\n[![Build Status](https://ci.appveyor.com/api/projects/status/dhtbi9fb96mce56i/branch/master?svg=true)](https://ci.appveyor.com/project/sbarratt/cvxpylayers/branch/master)\n\n# cvxpylayers\n\ncvxpylayers is a Python library for constructing differentiable convex\noptimization layers in PyTorch and TensorFlow using CVXPY.\nA convex optimization layer solves a parametrized convex optimization problem\nin the forward pass to produce a solution.\nIt computes the derivative of the solution with respect to\nthe parameters in the backward pass.\n\nThis library accompanies our [NeurIPS 2019 paper](http://web.stanford.edu/~boyd/papers/pdf/diff_cvxpy.pdf)\non differentiable convex optimization layers.\nFor an informal introduction to convex optimization layers, see our\n[blog post](https://locuslab.github.io/2019-10-28-cvxpylayers/).\n\nOur package uses [CVXPY](https://github.com/cvxgrp/cvxpy) for specifying\nparametrized convex optimization problems.\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Contributing](#contributing)\n- [Projects using cvxpylayers](#projects-using-cvxpylayers)\n- [License](#contributing)\n- [Citing](#citing)\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install\ncvxpylayers.\n\n```bash\npip install cvxpylayers\n```\n\nOur package includes convex optimization layers for PyTorch and TensorFlow 2.0;\nthe layers are functionally equivalent. You will need to install\n[PyTorch](http://pytorch.org) or [TensorFlow](https://www.tensorflow.org)\nseparately, which can be done by following the instructions on their websites.\n\ncvxpylayers has the following dependencies:\n* Python 3\n* [NumPy](https://pypi.org/project/numpy/)\n* [CVXPY](https://github.com/cvxgrp/cvxpy) >= 1.1.a4\n* [TensorFlow](https://tensorflow.org) >= 2.0 or [PyTorch](https://pytorch.org) >= 1.0\n* [diffcp](https://github.com/cvxgrp/diffcp) >= 1.0.13\n\n## Usage\nBelow are usage examples of our PyTorch and TensorFlow layers. Note that\nthe parametrized convex optimization problems must be constructed in CVXPY,\nusing [DPP](https://www.cvxpy.org/tutorial/advanced/index.html#disciplined-parametrized-programming).\n\n### PyTorch\n\n```python\nimport cvxpy as cp\nimport torch \nfrom cvxpylayers.torch import CvxpyLayer\n\nn, m = 2, 3\nx = cp.Variable(n)\nA = cp.Parameter((m, n))\nb = cp.Parameter(m)\nconstraints = [x >= 0]\nobjective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))\nproblem = cp.Problem(objective, constraints)\nassert problem.is_dpp()\n\ncvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])\nA_tch = torch.randn(m, n, requires_grad=True)\nb_tch = torch.randn(m, requires_grad=True)\n\n# solve the problem\nsolution, = cvxpylayer(A_tch, b_tch)\n\n# compute the gradient of the sum of the solution with respect to A, b\nsolution.sum().backward()\n```\n\n### TensorFlow 2\n```python\nimport cvxpy as cp\nimport tensorflow as tf\nfrom cvxpylayers.tensorflow import CvxpyLayer\n\nn, m = 2, 3\nx = cp.Variable(n)\nA = cp.Parameter((m, n))\nb = cp.Parameter(m)\nconstraints = [x >= 0]\nobjective = cp.Minimize(0.5 * cp.pnorm(A @ x - b, p=1))\nproblem = cp.Problem(objective, constraints)\nassert problem.is_dpp()\n\ncvxpylayer = CvxpyLayer(problem, parameters=[A, b], variables=[x])\nA_tf = tf.Variable(tf.random.normal((m, n)))\nb_tf = tf.Variable(tf.random.normal((m,)))\n\nwith tf.GradientTape() as tape:\n  # solve the problem, setting the values of A, b to A_tf, b_tf\n  solution, = cvxpylayer(A_tf, b_tf)\n  summed_solution = tf.math.reduce_sum(solution)\n# compute the gradient of the summed solution with respect to A, b\ngradA, gradb = tape.gradient(summed_solution, [A_tf, b_tf])\n```\n\n## Examples\nOur [examples](examples) subdirectory contains simple applications of convex optimization\nlayers in IPython notebooks.\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to\ndiscuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\nPlease lint the code with `flake8`.\n```bash\npip install flake8  # if not already installed\nflake8\n```\n\n### Running tests\n\ncvxpylayers uses the `pytest` framework for running tests.\nTo install `pytest`, run:\n```bash\npip install pytest\n```\n\nTo run the tests for `torch`, in the main directory of this repository, run:\n```bash\npytest cvxpylayers/torch\n``` \n\nTo run the tests for `tensorflow`, in the main directory of this repository, run:\n```bash\npytest cvxpylayers/tensorflow\n```\n\n## Projects using cvxpylayers\nBelow is  a list of projects using cvxpylayers. If you have used cvxpylayers in a project, you're welcome to make a PR to add it to this list.\n* [Learning Convex Optimization Control Policies](http://web.stanford.edu/~boyd/papers/learning_cocps.html)\n\n## License\ncvxpylayers carries an Apache 2.0 license.\n\n## Citing\nIf you use cvxpylayers for research, please cite our accompanying [NeurIPS paper](http://web.stanford.edu/~boyd/papers/pdf/diff_cvxpy.pdf):\n\n```\n@inproceedings{cvxpylayers2019,\n  author={Agrawal, A. and Amos, B. and Barratt, S. and Boyd, S. and Diamond, S. and Kolter, Z.},\n  title={Differentiable Convex Optimization Layers},\n  booktitle={Advances in Neural Information Processing Systems},\n  year={2019},\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cvxgrp/cvxpylayers", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "cvxpylayers", "package_url": "https://pypi.org/project/cvxpylayers/", "platform": "", "project_url": "https://pypi.org/project/cvxpylayers/", "project_urls": {"Homepage": "https://github.com/cvxgrp/cvxpylayers"}, "release_url": "https://pypi.org/project/cvxpylayers/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Differentiable convex optimization layers", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"cvxpylayers logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c5153b6c77fea3c0c8a8492a7bdf9f3afd74e1a/63767870796c61796572735f6c6f676f2e706e67\">\n<a href=\"https://travis-ci.org/cvxgrp/cvxpylayers\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bde6920b75c22143b207e5436120ea4cf30bee8c/68747470733a2f2f7472617669732d63692e6f72672f6376786772702f63767870796c61796572732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/sbarratt/cvxpylayers/branch/master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/148a0d3d1b520a1b05a7ca11503068ccc0f55b49/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f646874626939666239366d63653536692f6272616e63682f6d61737465723f7376673d74727565\"></a></p>\n<h1>cvxpylayers</h1>\n<p>cvxpylayers is a Python library for constructing differentiable convex\noptimization layers in PyTorch and TensorFlow using CVXPY.\nA convex optimization layer solves a parametrized convex optimization problem\nin the forward pass to produce a solution.\nIt computes the derivative of the solution with respect to\nthe parameters in the backward pass.</p>\n<p>This library accompanies our <a href=\"http://web.stanford.edu/%7Eboyd/papers/pdf/diff_cvxpy.pdf\" rel=\"nofollow\">NeurIPS 2019 paper</a>\non differentiable convex optimization layers.\nFor an informal introduction to convex optimization layers, see our\n<a href=\"https://locuslab.github.io/2019-10-28-cvxpylayers/\" rel=\"nofollow\">blog post</a>.</p>\n<p>Our package uses <a href=\"https://github.com/cvxgrp/cvxpy\" rel=\"nofollow\">CVXPY</a> for specifying\nparametrized convex optimization problems.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#projects-using-cvxpylayers\" rel=\"nofollow\">Projects using cvxpylayers</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#citing\" rel=\"nofollow\">Citing</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install\ncvxpylayers.</p>\n<pre>pip install cvxpylayers\n</pre>\n<p>Our package includes convex optimization layers for PyTorch and TensorFlow 2.0;\nthe layers are functionally equivalent. You will need to install\n<a href=\"http://pytorch.org\" rel=\"nofollow\">PyTorch</a> or <a href=\"https://www.tensorflow.org\" rel=\"nofollow\">TensorFlow</a>\nseparately, which can be done by following the instructions on their websites.</p>\n<p>cvxpylayers has the following dependencies:</p>\n<ul>\n<li>Python 3</li>\n<li><a href=\"https://pypi.org/project/numpy/\" rel=\"nofollow\">NumPy</a></li>\n<li><a href=\"https://github.com/cvxgrp/cvxpy\" rel=\"nofollow\">CVXPY</a> &gt;= 1.1.a4</li>\n<li><a href=\"https://tensorflow.org\" rel=\"nofollow\">TensorFlow</a> &gt;= 2.0 or <a href=\"https://pytorch.org\" rel=\"nofollow\">PyTorch</a> &gt;= 1.0</li>\n<li><a href=\"https://github.com/cvxgrp/diffcp\" rel=\"nofollow\">diffcp</a> &gt;= 1.0.13</li>\n</ul>\n<h2>Usage</h2>\n<p>Below are usage examples of our PyTorch and TensorFlow layers. Note that\nthe parametrized convex optimization problems must be constructed in CVXPY,\nusing <a href=\"https://www.cvxpy.org/tutorial/advanced/index.html#disciplined-parametrized-programming\" rel=\"nofollow\">DPP</a>.</p>\n<h3>PyTorch</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cvxpy</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch</span> \n<span class=\"kn\">from</span> <span class=\"nn\">cvxpylayers.torch</span> <span class=\"kn\">import</span> <span class=\"n\">CvxpyLayer</span>\n\n<span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">objective</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Minimize</span><span class=\"p\">(</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">pnorm</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Problem</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">is_dpp</span><span class=\"p\">()</span>\n\n<span class=\"n\">cvxpylayer</span> <span class=\"o\">=</span> <span class=\"n\">CvxpyLayer</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n<span class=\"n\">A_tch</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">b_tch</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">requires_grad</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># solve the problem</span>\n<span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">cvxpylayer</span><span class=\"p\">(</span><span class=\"n\">A_tch</span><span class=\"p\">,</span> <span class=\"n\">b_tch</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute the gradient of the sum of the solution with respect to A, b</span>\n<span class=\"n\">solution</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n</pre>\n<h3>TensorFlow 2</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cvxpy</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cvxpylayers.tensorflow</span> <span class=\"kn\">import</span> <span class=\"n\">CvxpyLayer</span>\n\n<span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"n\">constraints</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">objective</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Minimize</span><span class=\"p\">(</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">pnorm</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">Problem</span><span class=\"p\">(</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">is_dpp</span><span class=\"p\">()</span>\n\n<span class=\"n\">cvxpylayer</span> <span class=\"o\">=</span> <span class=\"n\">CvxpyLayer</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"n\">variables</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">])</span>\n<span class=\"n\">A_tf</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n<span class=\"n\">b_tf</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"p\">,)))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">GradientTape</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tape</span><span class=\"p\">:</span>\n  <span class=\"c1\"># solve the problem, setting the values of A, b to A_tf, b_tf</span>\n  <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"n\">cvxpylayer</span><span class=\"p\">(</span><span class=\"n\">A_tf</span><span class=\"p\">,</span> <span class=\"n\">b_tf</span><span class=\"p\">)</span>\n  <span class=\"n\">summed_solution</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">)</span>\n<span class=\"c1\"># compute the gradient of the summed solution with respect to A, b</span>\n<span class=\"n\">gradA</span><span class=\"p\">,</span> <span class=\"n\">gradb</span> <span class=\"o\">=</span> <span class=\"n\">tape</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">summed_solution</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">A_tf</span><span class=\"p\">,</span> <span class=\"n\">b_tf</span><span class=\"p\">])</span>\n</pre>\n<h2>Examples</h2>\n<p>Our <a href=\"examples\" rel=\"nofollow\">examples</a> subdirectory contains simple applications of convex optimization\nlayers in IPython notebooks.</p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to\ndiscuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<p>Please lint the code with <code>flake8</code>.</p>\n<pre>pip install flake8  <span class=\"c1\"># if not already installed</span>\nflake8\n</pre>\n<h3>Running tests</h3>\n<p>cvxpylayers uses the <code>pytest</code> framework for running tests.\nTo install <code>pytest</code>, run:</p>\n<pre>pip install pytest\n</pre>\n<p>To run the tests for <code>torch</code>, in the main directory of this repository, run:</p>\n<pre>pytest cvxpylayers/torch\n</pre>\n<p>To run the tests for <code>tensorflow</code>, in the main directory of this repository, run:</p>\n<pre>pytest cvxpylayers/tensorflow\n</pre>\n<h2>Projects using cvxpylayers</h2>\n<p>Below is  a list of projects using cvxpylayers. If you have used cvxpylayers in a project, you're welcome to make a PR to add it to this list.</p>\n<ul>\n<li><a href=\"http://web.stanford.edu/%7Eboyd/papers/learning_cocps.html\" rel=\"nofollow\">Learning Convex Optimization Control Policies</a></li>\n</ul>\n<h2>License</h2>\n<p>cvxpylayers carries an Apache 2.0 license.</p>\n<h2>Citing</h2>\n<p>If you use cvxpylayers for research, please cite our accompanying <a href=\"http://web.stanford.edu/%7Eboyd/papers/pdf/diff_cvxpy.pdf\" rel=\"nofollow\">NeurIPS paper</a>:</p>\n<pre><code>@inproceedings{cvxpylayers2019,\n  author={Agrawal, A. and Amos, B. and Barratt, S. and Boyd, S. and Diamond, S. and Kolter, Z.},\n  title={Differentiable Convex Optimization Layers},\n  booktitle={Advances in Neural Information Processing Systems},\n  year={2019},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7114058, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "369fa109358f262b222b704442661c01", "sha256": "528989c9d7765169e14fa2c1aa140ba71f08894a9c6930359fe621f440068370"}, "downloads": -1, "filename": "cvxpylayers-0.1.0.tar.gz", "has_sig": false, "md5_digest": "369fa109358f262b222b704442661c01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11979, "upload_time": "2019-10-27T23:22:09", "upload_time_iso_8601": "2019-10-27T23:22:09.004441Z", "url": "https://files.pythonhosted.org/packages/9f/ff/a7c28879ff97782317e510b326521d79bba4173495846646c158ea5c5c94/cvxpylayers-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e2f40baabc495374ebaad1238ed18caf", "sha256": "2d7750ff91f462127efaed3f1e80d2f32c2782388916c3508b62621ad6dc2843"}, "downloads": -1, "filename": "cvxpylayers-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e2f40baabc495374ebaad1238ed18caf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12428, "upload_time": "2019-10-28T21:32:02", "upload_time_iso_8601": "2019-10-28T21:32:02.973212Z", "url": "https://files.pythonhosted.org/packages/f9/1e/b190f6ff29505ba265fe4d7902f5be1125963c704caaef354c92395f4391/cvxpylayers-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0ba967a5f5355e51271378f6e696dc80", "sha256": "dd1c59ce2899a1004e8dd7052c7dd44785fbf2b4daede0b19af3735f221ebc64"}, "downloads": -1, "filename": "cvxpylayers-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0ba967a5f5355e51271378f6e696dc80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12596, "upload_time": "2019-11-12T19:40:48", "upload_time_iso_8601": "2019-11-12T19:40:48.090576Z", "url": "https://files.pythonhosted.org/packages/e1/fb/eff511a623bdf09db3fe6dae7c9d45640aa6da3811419434e280fa28d397/cvxpylayers-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6dba9446f05839da5b9a338e53df4114", "sha256": "35bb0a74ff2652762e11f6d8265efe55d3ba67442c5bac3df16986d9b58210b0"}, "downloads": -1, "filename": "cvxpylayers-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6dba9446f05839da5b9a338e53df4114", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15720, "upload_time": "2020-04-27T19:01:07", "upload_time_iso_8601": "2020-04-27T19:01:07.054421Z", "url": "https://files.pythonhosted.org/packages/d1/45/80d6d2007ffdb46cd1001bd7c3c60c95711ceeac9fed6567c06fd52ab097/cvxpylayers-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dba9446f05839da5b9a338e53df4114", "sha256": "35bb0a74ff2652762e11f6d8265efe55d3ba67442c5bac3df16986d9b58210b0"}, "downloads": -1, "filename": "cvxpylayers-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6dba9446f05839da5b9a338e53df4114", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15720, "upload_time": "2020-04-27T19:01:07", "upload_time_iso_8601": "2020-04-27T19:01:07.054421Z", "url": "https://files.pythonhosted.org/packages/d1/45/80d6d2007ffdb46cd1001bd7c3c60c95711ceeac9fed6567c06fd52ab097/cvxpylayers-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:12 2020"}