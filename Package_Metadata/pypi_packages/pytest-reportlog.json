{"info": {"author": "Bruno Oliveira", "author_email": "nicoddemus@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "================\npytest-reportlog\n================\n\n|python| |version| |anaconda| |ci| |black|\n\n.. |version| image:: http://img.shields.io/pypi/v/pytest-reportlog.svg\n  :target: https://pypi.python.org/pypi/pytest-reportlog\n\n.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/pytest-reportlog.svg\n    :target: https://anaconda.org/conda-forge/pytest-reportlog\n\n.. |ci| image:: https://github.com/pytest-dev/pytest-reportlog/workflows/build/badge.svg\n  :target: https://github.com/pytest-dev/pytest-reportlog/actions\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/pytest-reportlog.svg\n  :target: https://pypi.python.org/pypi/pytest-reportlog/\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n  :target: https://github.com/ambv/black\n\nReplacement for the ``--resultlog`` option, focused in simplicity and extensibility.\n\n.. note::\n    This plugin was created so developers can try out the candidate to replace the\n    `deprecated --resultlog <https://docs.pytest.org/en/latest/deprecations.html#result-log-result-log>`__ option.\n\n    If you use ``--resultlog``, please try out ``--report-log`` and provide feedback.\n\nUsage\n=====\n\nThe ``--report-log=FILE`` option writes *report logs* into a file as the test session executes.\n\nEach line of the report log contains a self contained JSON object corresponding to a testing event,\nsuch as a collection or a test result report. The file is guaranteed to be flushed after writing\neach line, so systems can read and process events in real-time.\n\nEach JSON object contains a special key ``$report_type``, which contains a unique identifier for\nthat kind of report object. For future compatibility, consumers of the file should ignore reports\nthey don't recognize, as well as ignore unknown properties/keys in JSON objects that they do know,\nas future pytest versions might enrich the objects with more properties/keys.\n\n\nExample\n-------\n\nConsider this file:\n\n.. code-block:: python\n\n    # content of test_report_example.py\n\n\n    def test_ok():\n        assert 5 + 5 == 10\n\n\n    def test_fail():\n        assert 4 + 4 == 1\n\n\n::\n\n    $ pytest test_report_example.py -q --report-log=log.json\n    .F                                                                   [100%]\n    ================================= FAILURES =================================\n    ________________________________ test_fail _________________________________\n\n        def test_fail():\n    >       assert 4 + 4 == 1\n    E       assert (4 + 4) == 1\n\n    test_report_example.py:8: AssertionError\n    ------------------- generated report log file: log.json --------------------\n    1 failed, 1 passed in 0.12s\n\nThe generated ``log.json`` will contain a JSON object per line:\n\n::\n\n    $ cat log.json\n    {\"pytest_version\": \"5.2.2\", \"$report_type\": \"SessionStart\"}\n    {\"nodeid\": \"\", \"outcome\": \"passed\", \"longrepr\": null, \"result\": null, \"sections\": [], \"$report_type\": \"CollectReport\"}\n    {\"nodeid\": \"test_report_example.py\", \"outcome\": \"passed\", \"longrepr\": null, \"result\": null, \"sections\": [], \"$report_type\": \"CollectReport\"}\n    {\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"setup\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n    {\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"call\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n    {\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"teardown\", \"user_properties\": [], \"sections\": [], \"duration\": 0.00099945068359375, \"$report_type\": \"TestReport\"}\n    {\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"setup\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n    {\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"failed\", \"longrepr\": {\"reprcrash\": {\"path\": \"D:\\\\projects\\\\pytest-reportlog\\\\test_report_example.py\", \"lineno\": 6, \"message\": \"assert (4 + 4) == 1\"}, \"reprtraceback\": {\"reprentries\": [{\"type\": \"ReprEntry\", \"data\": {\"lines\": [\"    def test_fail():\", \">       assert 4 + 4 == 1\", \"E       assert (4 + 4) == 1\"], \"reprfuncargs\": {\"args\": []}, \"reprlocals\": null, \"reprfileloc\": {\"path\": \"test_report_example.py\", \"lineno\": 6, \"message\": \"AssertionError\"}, \"style\": \"long\"}}], \"extraline\": null, \"style\": \"long\"}, \"sections\": [], \"chain\": [[{\"reprentries\": [{\"type\": \"ReprEntry\", \"data\": {\"lines\": [\"    def test_fail():\", \">       assert 4 + 4 == 1\", \"E       assert (4 + 4) == 1\"], \"reprfuncargs\": {\"args\": []}, \"reprlocals\": null, \"reprfileloc\": {\"path\": \"test_report_example.py\", \"lineno\": 6, \"message\": \"AssertionError\"}, \"style\": \"long\"}}], \"extraline\": null, \"style\": \"long\"}, {\"path\": \"D:\\\\projects\\\\pytest-reportlog\\\\test_report_example.py\", \"lineno\": 6, \"message\": \"assert (4 + 4) == 1\"}, null]]}, \"when\": \"call\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0009992122650146484, \"$report_type\": \"TestReport\"}\n    {\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"teardown\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n    {\"exitstatus\": 1, \"$report_type\": \"SessionFinish\"}\n\nLicense\n=======\n\nDistributed under the terms of the `MIT`_ license.\n\n.. _MIT: https://github.com/pytest-dev/pytest-mock/blob/master/LICENSE\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pytest-dev/pytest-reportlog", "keywords": "pytest", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-reportlog", "package_url": "https://pypi.org/project/pytest-reportlog/", "platform": "any", "project_url": "https://pypi.org/project/pytest-reportlog/", "project_urls": {"Homepage": "https://github.com/pytest-dev/pytest-reportlog"}, "release_url": "https://pypi.org/project/pytest-reportlog/0.1.1/", "requires_dist": ["pytest (>=5.2)", "pre-commit ; extra == 'dev'", "tox ; extra == 'dev'"], "requires_python": ">=3.5", "summary": "Replacement for the --resultlog option, focused in simplicity and extensibility", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/pytest-reportlog/\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68e0f28c172218d8eb89551bc22ae82cecbc0c74/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d7265706f72746c6f672e737667\"></a> <a href=\"https://pypi.python.org/pypi/pytest-reportlog\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c30a1c2cfbb9adb4fcdf46d023c6c9303d97744/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d7265706f72746c6f672e737667\"></a> <a href=\"https://anaconda.org/conda-forge/pytest-reportlog\" rel=\"nofollow\"><img alt=\"anaconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98b9f578a91829afd63fef862913e844b312da8a/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f7079746573742d7265706f72746c6f672e737667\"></a> <a href=\"https://github.com/pytest-dev/pytest-reportlog/actions\" rel=\"nofollow\"><img alt=\"ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ff669b8ecdc51883519cb892565bc80be8deae5/68747470733a2f2f6769746875622e636f6d2f7079746573742d6465762f7079746573742d7265706f72746c6f672f776f726b666c6f77732f6275696c642f62616467652e737667\"></a> <a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>Replacement for the <tt><span class=\"pre\">--resultlog</span></tt> option, focused in simplicity and extensibility.</p>\n<div>\n<p>Note</p>\n<p>This plugin was created so developers can try out the candidate to replace the\n<a href=\"https://docs.pytest.org/en/latest/deprecations.html#result-log-result-log\" rel=\"nofollow\">deprecated \u2013resultlog</a> option.</p>\n<p>If you use <tt><span class=\"pre\">--resultlog</span></tt>, please try out <tt><span class=\"pre\">--report-log</span></tt> and provide feedback.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The <tt><span class=\"pre\">--report-log=FILE</span></tt> option writes <em>report logs</em> into a file as the test session executes.</p>\n<p>Each line of the report log contains a self contained JSON object corresponding to a testing event,\nsuch as a collection or a test result report. The file is guaranteed to be flushed after writing\neach line, so systems can read and process events in real-time.</p>\n<p>Each JSON object contains a special key <tt>$report_type</tt>, which contains a unique identifier for\nthat kind of report object. For future compatibility, consumers of the file should ignore reports\nthey don\u2019t recognize, as well as ignore unknown properties/keys in JSON objects that they do know,\nas future pytest versions might enrich the objects with more properties/keys.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Consider this file:</p>\n<pre><span class=\"c1\"># content of test_report_example.py</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_ok</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_fail</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<pre>$ pytest test_report_example.py -q --report-log=log.json\n.F                                                                   [100%]\n================================= FAILURES =================================\n________________________________ test_fail _________________________________\n\n    def test_fail():\n&gt;       assert 4 + 4 == 1\nE       assert (4 + 4) == 1\n\ntest_report_example.py:8: AssertionError\n------------------- generated report log file: log.json --------------------\n1 failed, 1 passed in 0.12s\n</pre>\n<p>The generated <tt>log.json</tt> will contain a JSON object per line:</p>\n<pre>$ cat log.json\n{\"pytest_version\": \"5.2.2\", \"$report_type\": \"SessionStart\"}\n{\"nodeid\": \"\", \"outcome\": \"passed\", \"longrepr\": null, \"result\": null, \"sections\": [], \"$report_type\": \"CollectReport\"}\n{\"nodeid\": \"test_report_example.py\", \"outcome\": \"passed\", \"longrepr\": null, \"result\": null, \"sections\": [], \"$report_type\": \"CollectReport\"}\n{\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"setup\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n{\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"call\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n{\"nodeid\": \"test_report_example.py::test_ok\", \"location\": [\"test_report_example.py\", 0, \"test_ok\"], \"keywords\": {\"test_ok\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"teardown\", \"user_properties\": [], \"sections\": [], \"duration\": 0.00099945068359375, \"$report_type\": \"TestReport\"}\n{\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"setup\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n{\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"failed\", \"longrepr\": {\"reprcrash\": {\"path\": \"D:\\\\projects\\\\pytest-reportlog\\\\test_report_example.py\", \"lineno\": 6, \"message\": \"assert (4 + 4) == 1\"}, \"reprtraceback\": {\"reprentries\": [{\"type\": \"ReprEntry\", \"data\": {\"lines\": [\"    def test_fail():\", \"&gt;       assert 4 + 4 == 1\", \"E       assert (4 + 4) == 1\"], \"reprfuncargs\": {\"args\": []}, \"reprlocals\": null, \"reprfileloc\": {\"path\": \"test_report_example.py\", \"lineno\": 6, \"message\": \"AssertionError\"}, \"style\": \"long\"}}], \"extraline\": null, \"style\": \"long\"}, \"sections\": [], \"chain\": [[{\"reprentries\": [{\"type\": \"ReprEntry\", \"data\": {\"lines\": [\"    def test_fail():\", \"&gt;       assert 4 + 4 == 1\", \"E       assert (4 + 4) == 1\"], \"reprfuncargs\": {\"args\": []}, \"reprlocals\": null, \"reprfileloc\": {\"path\": \"test_report_example.py\", \"lineno\": 6, \"message\": \"AssertionError\"}, \"style\": \"long\"}}], \"extraline\": null, \"style\": \"long\"}, {\"path\": \"D:\\\\projects\\\\pytest-reportlog\\\\test_report_example.py\", \"lineno\": 6, \"message\": \"assert (4 + 4) == 1\"}, null]]}, \"when\": \"call\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0009992122650146484, \"$report_type\": \"TestReport\"}\n{\"nodeid\": \"test_report_example.py::test_fail\", \"location\": [\"test_report_example.py\", 4, \"test_fail\"], \"keywords\": {\"test_fail\": 1, \"pytest-reportlog\": 1, \"test_report_example.py\": 1}, \"outcome\": \"passed\", \"longrepr\": null, \"when\": \"teardown\", \"user_properties\": [], \"sections\": [], \"duration\": 0.0, \"$report_type\": \"TestReport\"}\n{\"exitstatus\": 1, \"$report_type\": \"SessionFinish\"}\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"https://github.com/pytest-dev/pytest-mock/blob/master/LICENSE\" rel=\"nofollow\">MIT</a> license.</p>\n</div>\n\n          </div>"}, "last_serial": 7035651, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6f7b58e940052d131b4063887389e04a", "sha256": "8440c76273eb78433c546dfd574d20f427b87416983ae64d154256412f41a0c8"}, "downloads": -1, "filename": "pytest_reportlog-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f7b58e940052d131b4063887389e04a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5429, "upload_time": "2019-11-18T21:03:09", "upload_time_iso_8601": "2019-11-18T21:03:09.120094Z", "url": "https://files.pythonhosted.org/packages/6d/e3/913ddbee36e50fe9192b11f7de15390fe85be3a83e6ba5c44b0d0469d055/pytest_reportlog-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e83b813b86869fd47a988c0d68617d", "sha256": "187e8d00c5b684b5f6bed25b8c16196a2ef3eb337a0ae93a8648e09ea64cac9c"}, "downloads": -1, "filename": "pytest-reportlog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b0e83b813b86869fd47a988c0d68617d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7318, "upload_time": "2019-11-18T21:03:11", "upload_time_iso_8601": "2019-11-18T21:03:11.463947Z", "url": "https://files.pythonhosted.org/packages/80/58/a2cbf27cb97c23f97c8473e3ee2c529e65aa1c497359465c44983360c1a9/pytest-reportlog-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f1a020c81232f6961dc4913eaa393f40", "sha256": "04ee571326963903a380137a98a4fdf5eca219103f46a39bf6ba440705858754"}, "downloads": -1, "filename": "pytest_reportlog-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1a020c81232f6961dc4913eaa393f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5609, "upload_time": "2020-04-16T21:15:24", "upload_time_iso_8601": "2020-04-16T21:15:24.043150Z", "url": "https://files.pythonhosted.org/packages/7c/a4/3049f27cf2b3a7b8c062ce47da8af61686f7133832ad12cc9313520f3927/pytest_reportlog-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "159a94f5d24d6ee13417d816e64a15e0", "sha256": "eed81d6e2cb5070936d70b23f350199ac475cfb72d8c28e25a6c343232f7ed35"}, "downloads": -1, "filename": "pytest-reportlog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "159a94f5d24d6ee13417d816e64a15e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7787, "upload_time": "2020-04-16T21:15:24", "upload_time_iso_8601": "2020-04-16T21:15:24.931394Z", "url": "https://files.pythonhosted.org/packages/40/cf/dcbe1d98026e8c46da4d5ad191f1c99ad7c2a11dd9a5f55401bab12d55f9/pytest-reportlog-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1a020c81232f6961dc4913eaa393f40", "sha256": "04ee571326963903a380137a98a4fdf5eca219103f46a39bf6ba440705858754"}, "downloads": -1, "filename": "pytest_reportlog-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1a020c81232f6961dc4913eaa393f40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5609, "upload_time": "2020-04-16T21:15:24", "upload_time_iso_8601": "2020-04-16T21:15:24.043150Z", "url": "https://files.pythonhosted.org/packages/7c/a4/3049f27cf2b3a7b8c062ce47da8af61686f7133832ad12cc9313520f3927/pytest_reportlog-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "159a94f5d24d6ee13417d816e64a15e0", "sha256": "eed81d6e2cb5070936d70b23f350199ac475cfb72d8c28e25a6c343232f7ed35"}, "downloads": -1, "filename": "pytest-reportlog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "159a94f5d24d6ee13417d816e64a15e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7787, "upload_time": "2020-04-16T21:15:24", "upload_time_iso_8601": "2020-04-16T21:15:24.931394Z", "url": "https://files.pythonhosted.org/packages/40/cf/dcbe1d98026e8c46da4d5ad191f1c99ad7c2a11dd9a5f55401bab12d55f9/pytest-reportlog-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:46 2020"}