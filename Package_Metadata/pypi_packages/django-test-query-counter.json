{"info": {"author": "Ignacio Avas", "author_email": "iavas@sophilabs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "=============================\nDjango Test Query Counter\n=============================\n\n.. image:: https://badge.fury.io/py/django-test-query-counter.svg\n    :target: https://badge.fury.io/py/django-test-query-counter\n\n.. image:: https://travis-ci.org/sophilabs/django-test-query-counter.svg?branch=master\n    :target: https://travis-ci.org/sophilabs/django-test-query-counter\n\n.. image:: https://codecov.io/gh/sophilabs/django-test-query-counter/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/sophilabs/django-test-query-counter\n\n\n.. image:: logo.png\n   :width: 200\n   :alt: Logo\n   :align: center\n\nA Django Toolkit for controlling Query count when testing. It controls the\nnumber of queries done in the tests stays below a particular threshold between\nTest Runs.Specially useful when paired with a CI like Jenkins or Travis to\ncontrol each commit doesn't slow down the Database considerably.\n\nRequirements\n------------\n\n* Python 3\n* Django\n\nDocumentation\n-------------\n\nThe full documentation is at https://django-test-query-counter.readthedocs.io.\n\nInstallation\n-------------\n\nThere are ways to install it into your project\n\nClone this repository into your project:\n\n.. code-block:: bash\n\n    git clone https://github.com/sophilabs/django-test-query-counter.git\n\nDownload the zip file and unpack it:\n\n.. code-block:: bash\n\n    wget https://github.com/sophilabs/django-test-query-counter/archive/master.zip\n    unzip master.zip\n\nInstall with pip:\n\n.. code-block:: bash\n\n    pip install django-test-query-counter\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'test_query_count',\n        ...\n    )\n\nUsage\n-----\n\nRun your django tests as you do. After the run the\n``reports`` directory with two files ``query_count.json`` and\n``query_count_detail.json``.\n\nTo check your tests Query Counts run:\n\n``$ python manage.py check_query_count``\n\nThen you would see an output like the following one (if you at least ran the\ntests twice):\n\n.. code-block::\n\n    All Tests API Queries are below the allowed threshold.\n\nIf the current test run had more queries than the last one, it will tell you:\n\n.. code-block::\n\n    There are test cases with API calls that exceeded threshold:\n\n        In test case app.organizations.tests.api.test_division_api.DivisionViewTest.test_bulk_create_division, POST /api/divisions. Expected at most 11 queries but got 15 queries\n        In test case app.shipments.tests.api.test_leg_api.LegViewTest.test_create_bulk_leg, POST /api/legs. Expected at most 59 queries but got 62 queries\n        In test case app.plans.tests.functional.test_plan_api.PlannedDatesTest.test_unassign_and_assign_driver_to_leg, POST /api/assignments/assign-driver. Expected at most 261 queries but got 402 queries\n    CommandError: There was at least one test with an API call excedding the allowed threshold.\n\nConfiguration\n-------------\n\nYou can customize how the Test Query Count works by defining ``TEST_QUERY_COUNTER``\nin your settings file as a dictionary. The following code shows an example\n\n.. code-block:: python\n\n    TEST_QUERY_COUNTER = {\n        # Global switch\n        'ENABLE': True,\n\n        # Paths where the count files are generated (relative to the current\n        # process dir)\n        'DETAIL_PATH': 'reports/query_count_detail.json',\n        'SUMMARY_PATH': 'reports/query_count.json',\n\n        # Tolerated percentage of count increase on successive\n        # test runs.A value of 0 prevents increasing queries altoghether.\n        'INCREASE_THRESHOLD': 10\n    }\n\n\nExcluding Tests\n---------------\n\nIndividual tests or classes can be excluded for the count using the\n``@exclude_query_count`` decorator. For example\n\n.. code-block:: python\n\n        # To exclude all methods in the class\n        @exclude_query_count()\n        class AllTestExcluded(TestCase):\n            def test_foo(self):\n                self.client.get('path-1')\n\n            def test_foo(self):\n                self.client.get('path-2')\n\n        # To exclude one test only\n        class OneMethodExcluded():\n            def test_foo(self):\n                self.client.get('path-1')\n\n            @exclude_query_count()\n            def test_foo(self):\n                self.client.get('path-2')\n\n\nMore specifically, ``exclude_query_count`` accept parameters to conditionally\nexclude a query count by path, method or count. Where ``path`` the or regex of\nthe excluded path(s). The ``method`` specifies the regex of the method(s) to\nexclude, and ``count`` is minimum number of queries tolerated. Requests with\nless or same amount as \"count\" will be excluded.\n\nFor example:\n\n.. code-block:: python\n\n    class Test(TestCase):\n        @exclude_query_count(path='url-2')\n        def test_exclude_path(self):\n            self.client.get('/url-1')\n            self.client.post('/url-2')\n\n        @exclude_query_count(method='post')\n        def test_exclude_method(self):\n            self.client.get('/url-1')\n            self.client.post('/url-2')\n\n        @exclude_query_count(count=2)\n        def test_exclude_count(self):\n            #  succesive urls requests are additive\n            for i in range(3):\n                self.client.get('/url-1')\n\nImplementing into your CI\n-------------------------\n\nCurrently the query count works locally. However, it shines when it is\nintegrated with `Jenkins <https://jenkins.io/>`_, or other CIs. You have to do\nthis manually:\n\nRequirements\n\n* Jenkins with a Job that build you project.\n\nFrom now on let's suppose your job is available at ``http://127.0.0.1:8080/job/ZAP_EXAMPLE_JOB/``.\n\n\n1. `Activate Build Archive`: Go to the job `configuration page <https://wiki.jenkins.io/display/JENKINS/Configure+the+Job>`_ and add the `archive artifacts <https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/>`_ build\n   Post-build actions.\n\n    .. image:: archive-artifact.png\n       :alt: Jenkins Post Build Action showing an archive artifact example\n       :align: center\n\n2. Set ``reports/query_count.json`` in the files to archive path\n\n3. Create a new Django custom Command to run the validation against the\n   archived Jenkins file. For example:\n\n    .. code-block:: python\n\n        from urllib.request import urlretrieve\n        from django.core.management import BaseCommand, CommandError\n        from django.conf import settings\n        from test_query_counter.apps import RequestQueryCountConfig\n        from test_query_counter.query_count import QueryCountEvaluator\n\n\n        class Command(BaseCommand):\n            JENKINS_QUERY_COUNT = 'https://yourci/job/' \\\n                                  'yourproject/lastSuccessfulBuild/' \\\n                                  'artifact/app/reports/query_count.json'\n\n            def handle(self, *args, **options):\n                current_file_path = RequestQueryCountConfig.get_setting('SUMMARY_FILE')\n\n                with open(current_file_path) as current_file, \\\n                        open(urlretrieve(self.JENKINS_QUERY_COUNT)[0]) as last_file:\n                    violations = QueryCountEvaluator(10, current_file,last_file).run()\n\n                    if violations:\n                        raise CommandError('There was at least one test with an API '\n                                           'call excedding the allowed threshold.')\n\n4. Add a build step to run this command:\n\n    .. image:: build-action.png\n       :alt: Jenkins Build Action showing the script action\n       :align: center\n\n   After that, it will run fine, and the build would fail if any Query count is over the limit.\n\nTODO\n----\n\n* Include support for stacktraces in ``query_count_detail.json``.\n* Generate an HTML report of executed Queries.\n* Make query count configurable\n* Include Jenkins support out of the box (using `django_jenkins`)\n\nRunning Tests\n-------------\n\nDoes the code actually work?\n\n.. code-block:: bash\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nLicense\n-------\n\nPySchool is MIT Licensed. Copyright (c) 2017 Sophilabs, Inc.\n\n\nCredits\n-------\n\n.. image:: https://s3.amazonaws.com/sophilabs-assets/logo/logo_300x66.gif\n    :target: https://sophilabs.co\n\nThis tool is maintained and funded by Sophilabs, Inc. The names and logos for\nsophilabs are trademarks of sophilabs, inc.\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n0.1.0 (2017-07-10)\n++++++++++++++++++\n\n* First release on PyPI.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sophilabs/django-request-query-count", "keywords": "django-test-query-counter", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-test-query-counter", "package_url": "https://pypi.org/project/django-test-query-counter/", "platform": "", "project_url": "https://pypi.org/project/django-test-query-counter/", "project_urls": {"Homepage": "https://github.com/sophilabs/django-request-query-count"}, "release_url": "https://pypi.org/project/django-test-query-counter/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A Django Toolkit for controlling Query count when testing", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-test-query-counter\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-test-query-counter.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77ff783c3de3221ceca27438ecb349318d28a55b/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d746573742d71756572792d636f756e7465722e737667\"></a>\n<a href=\"https://travis-ci.org/sophilabs/django-test-query-counter\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sophilabs/django-test-query-counter.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/309e898bdb42e89fef5d0d0abdb1732728768770/68747470733a2f2f7472617669732d63692e6f72672f736f7068696c6162732f646a616e676f2d746573742d71756572792d636f756e7465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/sophilabs/django-test-query-counter\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/sophilabs/django-test-query-counter/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/404ff8da2874fdaf1884cd9a82b778b48fe0420a/68747470733a2f2f636f6465636f762e696f2f67682f736f7068696c6162732f646a616e676f2d746573742d71756572792d636f756e7465722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"Logo\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/388655114bc901a8aeb49270f41e805988057feb/6c6f676f2e706e67\" width=\"200\">\n<p>A Django Toolkit for controlling Query count when testing. It controls the\nnumber of queries done in the tests stays below a particular threshold between\nTest Runs.Specially useful when paired with a CI like Jenkins or Travis to\ncontrol each commit doesn\u2019t slow down the Database considerably.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3</li>\n<li>Django</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The full documentation is at <a href=\"https://django-test-query-counter.readthedocs.io\" rel=\"nofollow\">https://django-test-query-counter.readthedocs.io</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>There are ways to install it into your project</p>\n<p>Clone this repository into your project:</p>\n<pre>git clone https://github.com/sophilabs/django-test-query-counter.git\n</pre>\n<p>Download the zip file and unpack it:</p>\n<pre>wget https://github.com/sophilabs/django-test-query-counter/archive/master.zip\nunzip master.zip\n</pre>\n<p>Install with pip:</p>\n<pre>pip install django-test-query-counter\n</pre>\n<p>Add it to your <cite>INSTALLED_APPS</cite>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'test_query_count'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Run your django tests as you do. After the run the\n<tt>reports</tt> directory with two files <tt>query_count.json</tt> and\n<tt>query_count_detail.json</tt>.</p>\n<p>To check your tests Query Counts run:</p>\n<p><tt>$ python manage.py check_query_count</tt></p>\n<p>Then you would see an output like the following one (if you at least ran the\ntests twice):</p>\n<pre>All Tests API Queries are below the allowed threshold.\n</pre>\n<p>If the current test run had more queries than the last one, it will tell you:</p>\n<pre>There are test cases with API calls that exceeded threshold:\n\n    In test case app.organizations.tests.api.test_division_api.DivisionViewTest.test_bulk_create_division, POST /api/divisions. Expected at most 11 queries but got 15 queries\n    In test case app.shipments.tests.api.test_leg_api.LegViewTest.test_create_bulk_leg, POST /api/legs. Expected at most 59 queries but got 62 queries\n    In test case app.plans.tests.functional.test_plan_api.PlannedDatesTest.test_unassign_and_assign_driver_to_leg, POST /api/assignments/assign-driver. Expected at most 261 queries but got 402 queries\nCommandError: There was at least one test with an API call excedding the allowed threshold.\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You can customize how the Test Query Count works by defining <tt>TEST_QUERY_COUNTER</tt>\nin your settings file as a dictionary. The following code shows an example</p>\n<pre><span class=\"n\">TEST_QUERY_COUNTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Global switch</span>\n    <span class=\"s1\">'ENABLE'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Paths where the count files are generated (relative to the current</span>\n    <span class=\"c1\"># process dir)</span>\n    <span class=\"s1\">'DETAIL_PATH'</span><span class=\"p\">:</span> <span class=\"s1\">'reports/query_count_detail.json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'SUMMARY_PATH'</span><span class=\"p\">:</span> <span class=\"s1\">'reports/query_count.json'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Tolerated percentage of count increase on successive</span>\n    <span class=\"c1\"># test runs.A value of 0 prevents increasing queries altoghether.</span>\n    <span class=\"s1\">'INCREASE_THRESHOLD'</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"excluding-tests\">\n<h2>Excluding Tests</h2>\n<p>Individual tests or classes can be excluded for the count using the\n<tt>@exclude_query_count</tt> decorator. For example</p>\n<pre><span class=\"c1\"># To exclude all methods in the class</span>\n<span class=\"nd\">@exclude_query_count</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">AllTestExcluded</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'path-1'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'path-2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To exclude one test only</span>\n<span class=\"k\">class</span> <span class=\"nc\">OneMethodExcluded</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'path-1'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@exclude_query_count</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'path-2'</span><span class=\"p\">)</span>\n</pre>\n<p>More specifically, <tt>exclude_query_count</tt> accept parameters to conditionally\nexclude a query count by path, method or count. Where <tt>path</tt> the or regex of\nthe excluded path(s). The <tt>method</tt> specifies the regex of the method(s) to\nexclude, and <tt>count</tt> is minimum number of queries tolerated. Requests with\nless or same amount as \u201ccount\u201d will be excluded.</p>\n<p>For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@exclude_query_count</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'url-2'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_exclude_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/url-1'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/url-2'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@exclude_query_count</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_exclude_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/url-1'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/url-2'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@exclude_query_count</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_exclude_count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\">#  succesive urls requests are additive</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/url-1'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"implementing-into-your-ci\">\n<h2>Implementing into your CI</h2>\n<p>Currently the query count works locally. However, it shines when it is\nintegrated with <a href=\"https://jenkins.io/\" rel=\"nofollow\">Jenkins</a>, or other CIs. You have to do\nthis manually:</p>\n<p>Requirements</p>\n<ul>\n<li>Jenkins with a Job that build you project.</li>\n</ul>\n<p>From now on let\u2019s suppose your job is available at <tt><span class=\"pre\">http://127.0.0.1:8080/job/ZAP_EXAMPLE_JOB/</span></tt>.</p>\n<ol>\n<li><p><cite>Activate Build Archive</cite>: Go to the job <a href=\"https://wiki.jenkins.io/display/JENKINS/Configure+the+Job\" rel=\"nofollow\">configuration page</a> and add the <a href=\"https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/\" rel=\"nofollow\">archive artifacts</a> build\nPost-build actions.</p>\n<blockquote>\n<img alt=\"Jenkins Post Build Action showing an archive artifact example\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9945208154e65a64d8c4e5155db94153e5759583/617263686976652d61727469666163742e706e67\">\n</blockquote>\n</li>\n<li><p>Set <tt>reports/query_count.json</tt> in the files to archive path</p>\n</li>\n<li><p>Create a new Django custom Command to run the validation against the\narchived Jenkins file. For example:</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">urllib.request</span> <span class=\"kn\">import</span> <span class=\"n\">urlretrieve</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.management</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCommand</span><span class=\"p\">,</span> <span class=\"n\">CommandError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test_query_counter.apps</span> <span class=\"kn\">import</span> <span class=\"n\">RequestQueryCountConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test_query_counter.query_count</span> <span class=\"kn\">import</span> <span class=\"n\">QueryCountEvaluator</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"n\">JENKINS_QUERY_COUNT</span> <span class=\"o\">=</span> <span class=\"s1\">'https://yourci/job/'</span> \\\n                          <span class=\"s1\">'yourproject/lastSuccessfulBuild/'</span> \\\n                          <span class=\"s1\">'artifact/app/reports/query_count.json'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"n\">current_file_path</span> <span class=\"o\">=</span> <span class=\"n\">RequestQueryCountConfig</span><span class=\"o\">.</span><span class=\"n\">get_setting</span><span class=\"p\">(</span><span class=\"s1\">'SUMMARY_FILE'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">current_file_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">current_file</span><span class=\"p\">,</span> \\\n                <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">urlretrieve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">JENKINS_QUERY_COUNT</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">last_file</span><span class=\"p\">:</span>\n            <span class=\"n\">violations</span> <span class=\"o\">=</span> <span class=\"n\">QueryCountEvaluator</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">current_file</span><span class=\"p\">,</span><span class=\"n\">last_file</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">violations</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span><span class=\"s1\">'There was at least one test with an API '</span>\n                                   <span class=\"s1\">'call excedding the allowed threshold.'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Add a build step to run this command:</p>\n<blockquote>\n<img alt=\"Jenkins Build Action showing the script action\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c02fb0dfc71949534727924ecebd4309ebf0898/6275696c642d616374696f6e2e706e67\">\n</blockquote>\n<p>After that, it will run fine, and the build would fail if any Query count is over the limit.</p>\n</li>\n</ol>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Include support for stacktraces in <tt>query_count_detail.json</tt>.</li>\n<li>Generate an HTML report of executed Queries.</li>\n<li>Make query count configurable</li>\n<li>Include Jenkins support out of the box (using <cite>django_jenkins</cite>)</li>\n</ul>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>Does the code actually work?</p>\n<pre><span class=\"nb\">source</span> &lt;YOURVIRTUALENV&gt;/bin/activate\n<span class=\"o\">(</span>myenv<span class=\"o\">)</span> $ pip install tox\n<span class=\"o\">(</span>myenv<span class=\"o\">)</span> $ tox\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>PySchool is MIT Licensed. Copyright (c) 2017 Sophilabs, Inc.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<a href=\"https://sophilabs.co\" rel=\"nofollow\"><img alt=\"https://s3.amazonaws.com/sophilabs-assets/logo/logo_300x66.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd74d50dc6798286a24c3de503786c450b8309ec/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f736f7068696c6162732d6173736574732f6c6f676f2f6c6f676f5f3330307836362e676966\"></a>\n<p>This tool is maintained and funded by Sophilabs, Inc. The names and logos for\nsophilabs are trademarks of sophilabs, inc.</p>\n<p>Tools used in rendering this package:</p>\n<ul>\n<li><a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a></li>\n<li><a href=\"https://github.com/pydanny/cookiecutter-djangopackage\" rel=\"nofollow\">cookiecutter-djangopackage</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2017-07-10)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3073245, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "af2c6b62f89b3dcfcb936520a3a0d182", "sha256": "d56c8cd496c075a0adb320f0fa9ff488b94da4295c23355e35da2bc09a519e29"}, "downloads": -1, "filename": "django-test-query-counter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "af2c6b62f89b3dcfcb936520a3a0d182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12999, "upload_time": "2017-08-04T17:41:16", "upload_time_iso_8601": "2017-08-04T17:41:16.625749Z", "url": "https://files.pythonhosted.org/packages/45/01/d87915897e129be1dec195ea32e29cd2fe4f60d07dd5529f4e25982a5d25/django-test-query-counter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af2c6b62f89b3dcfcb936520a3a0d182", "sha256": "d56c8cd496c075a0adb320f0fa9ff488b94da4295c23355e35da2bc09a519e29"}, "downloads": -1, "filename": "django-test-query-counter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "af2c6b62f89b3dcfcb936520a3a0d182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12999, "upload_time": "2017-08-04T17:41:16", "upload_time_iso_8601": "2017-08-04T17:41:16.625749Z", "url": "https://files.pythonhosted.org/packages/45/01/d87915897e129be1dec195ea32e29cd2fe4f60d07dd5529f4e25982a5d25/django-test-query-counter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:32 2020"}