{"info": {"author": "Florian Schlachter", "author_email": "flori@n-schlachter.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# PyRPC\n\nPyRPC is a simple RPC-framework written in Python. It supports simple and fast\naccess to remotely provided procedures by pickling (using the fast but\n**in-secure** module cPickle, see below) all data (request/response) and\ntransporting it via TCP to the remote host.\n\nDue to it's nature, cPickle is not intended to be secure. Under special\ncircumstances (e. g. malicious messages) remote executions might be possible.\nTherefore you must ensure that the server is only reachable by trusted clients\nin a secure and restricted environment (a public server is therefore absolutely\n**not** recommended).\n\nTransmission is compressed using zlib.\n\n## Installation\n\nPyRPC is available at PyPI and known as `fspyrpc`:\n\n    pip install fspyrpc\n\n## Usage\n\nUsing PyRPC is pretty simple. See `client_example.py` for client-usage. The server\nconsists of two classes:\n\n * `RPCServer`\n * `RPCServerHandler`\n\n`RPCServer` is used to manage all client connections; the `RPCServerHandler`\nis newly instantiated for every request. It implements all provided procedures \nto the client; the method name is prefixed by `handle_`.\n\nEvery called method has access to the following instance attributes:\n\n * `address` - contains a (ip, port)-tuple of the remote client address\n * `data` - provides raw access to the request as a `dict`-object \n\nSee `server_example.py` for corressponding server-usage.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/flosch/pyrpc", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "fspyrpc", "package_url": "https://pypi.org/project/fspyrpc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fspyrpc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/flosch/pyrpc"}, "release_url": "https://pypi.org/project/fspyrpc/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A simple RPC-framework written in Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># PyRPC</p>\n<p>PyRPC is a simple RPC-framework written in Python. It supports simple and fast\naccess to remotely provided procedures by pickling (using the fast but\n<strong>in-secure</strong> module cPickle, see below) all data (request/response) and\ntransporting it via TCP to the remote host.</p>\n<p>Due to it\u2019s nature, cPickle is not intended to be secure. Under special\ncircumstances (e. g. malicious messages) remote executions might be possible.\nTherefore you must ensure that the server is only reachable by trusted clients\nin a secure and restricted environment (a public server is therefore absolutely\n<strong>not</strong> recommended).</p>\n<p>Transmission is compressed using zlib.</p>\n<p>## Installation</p>\n<p>PyRPC is available at PyPI and known as <cite>fspyrpc</cite>:</p>\n<blockquote>\npip install fspyrpc</blockquote>\n<p>## Usage</p>\n<p>Using PyRPC is pretty simple. See <cite>client_example.py</cite> for client-usage. The server\nconsists of two classes:</p>\n<blockquote>\n<ul>\n<li><cite>RPCServer</cite></li>\n<li><cite>RPCServerHandler</cite></li>\n</ul>\n</blockquote>\n<p><cite>RPCServer</cite> is used to manage all client connections; the <cite>RPCServerHandler</cite>\nis newly instantiated for every request. It implements all provided procedures\nto the client; the method name is prefixed by <cite>handle_</cite>.</p>\n<p>Every called method has access to the following instance attributes:</p>\n<blockquote>\n<ul>\n<li><cite>address</cite> - contains a (ip, port)-tuple of the remote client address</li>\n<li><cite>data</cite> - provides raw access to the request as a <cite>dict</cite>-object</li>\n</ul>\n</blockquote>\n<p>See <cite>server_example.py</cite> for corressponding server-usage.</p>\n\n          </div>"}, "last_serial": 792171, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4f09bd26da6bcd3a56afe71e83a29e09", "sha256": "774a4c99c8009f96117a271d0a19ec5c2a9e0961d49356d422a4592478dad6e3"}, "downloads": -1, "filename": "fspyrpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4f09bd26da6bcd3a56afe71e83a29e09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5572, "upload_time": "2012-05-24T00:52:29", "upload_time_iso_8601": "2012-05-24T00:52:29.156047Z", "url": "https://files.pythonhosted.org/packages/2a/93/14e81b15842a254dcb9fbae5cb9a5a480c152d98c717f04719a0d60d8b8c/fspyrpc-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f09bd26da6bcd3a56afe71e83a29e09", "sha256": "774a4c99c8009f96117a271d0a19ec5c2a9e0961d49356d422a4592478dad6e3"}, "downloads": -1, "filename": "fspyrpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4f09bd26da6bcd3a56afe71e83a29e09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5572, "upload_time": "2012-05-24T00:52:29", "upload_time_iso_8601": "2012-05-24T00:52:29.156047Z", "url": "https://files.pythonhosted.org/packages/2a/93/14e81b15842a254dcb9fbae5cb9a5a480c152d98c717f04719a0d60d8b8c/fspyrpc-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:02 2020"}