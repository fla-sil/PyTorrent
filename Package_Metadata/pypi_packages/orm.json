{"info": {"author": "Tom Christie", "author_email": "tom@tomchristie.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "# ORM\n\n<p>\n<a href=\"https://travis-ci.org/encode/orm\">\n    <img src=\"https://travis-ci.org/encode/orm.svg?branch=master\" alt=\"Build Status\">\n</a>\n<a href=\"https://codecov.io/gh/encode/orm\">\n    <img src=\"https://codecov.io/gh/encode/orm/branch/master/graph/badge.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/orm/\">\n    <img src=\"https://badge.fury.io/py/orm.svg\" alt=\"Package version\">\n</a>\n</p>\n\nThe `orm` package is an async ORM for Python, with support for Postgres,\nMySQL, and SQLite. ORM is built with:\n\n* [SQLAlchemy core][sqlalchemy-core] for query building.\n* [`databases`][databases] for cross-database async support.\n* [`typesystem`][typesystem] for data validation.\n\nBecause ORM is built on SQLAlchemy core, you can use Alembic to provide\ndatabase migrations.\n\n**ORM is still under development: We recommend pinning any dependencies with `orm~=0.1`**\n\n**Note**: Use `ipython` to try this from the console, since it supports `await`.\n\n```python\nimport databases\nimport orm\nimport sqlalchemy\n\ndatabase = databases.Database(\"sqlite:///db.sqlite\")\nmetadata = sqlalchemy.MetaData()\n\n\nclass Note(orm.Model):\n    __tablename__ = \"notes\"\n    __database__ = database\n    __metadata__ = metadata\n\n    id = orm.Integer(primary_key=True)\n    text = orm.String(max_length=100)\n    completed = orm.Boolean(default=False)\n\n# Create the database\nengine = sqlalchemy.create_engine(str(database.url))\nmetadata.create_all(engine)\n\n# .create()\nawait Note.objects.create(text=\"Buy the groceries.\", completed=False)\nawait Note.objects.create(text=\"Call Mum.\", completed=True)\nawait Note.objects.create(text=\"Send invoices.\", completed=True)\n\n# .all()\nnotes = await Note.objects.all()\n\n# .filter()\nnotes = await Note.objects.filter(completed=True).all()\n\n# exact, iexact, contains, icontains, lt, lte, gt, gte, in\nnotes = await Note.objects.filter(text__icontains=\"mum\").all()\n\n# .get()\nnote = await Note.objects.get(id=1)\n\n# .update()\nawait note.update(completed=True)\n\n# .delete()\nawait note.delete()\n\n# 'pk' always refers to the primary key\nnote = await Note.objects.get(pk=2)\nnote.pk  # 2\n```\n\nORM supports loading and filtering across foreign keys...\n\n```python\nimport databases\nimport orm\nimport sqlalchemy\n\ndatabase = databases.Database(\"sqlite:///db.sqlite\")\nmetadata = sqlalchemy.MetaData()\n\n\nclass Album(orm.Model):\n    __tablename__ = \"album\"\n    __metadata__ = metadata\n    __database__ = database\n\n    id = orm.Integer(primary_key=True)\n    name = orm.String(max_length=100)\n\n\nclass Track(orm.Model):\n    __tablename__ = \"track\"\n    __metadata__ = metadata\n    __database__ = database\n\n    id = orm.Integer(primary_key=True)\n    album = orm.ForeignKey(Album)\n    title = orm.String(max_length=100)\n    position = orm.Integer()\n\n\n#\u00a0Create some records to work with.\nmalibu = await Album.objects.create(name=\"Malibu\")\nawait Track.objects.create(album=malibu, title=\"The Bird\", position=1)\nawait Track.objects.create(album=malibu, title=\"Heart don't stand a chance\", position=2)\nawait Track.objects.create(album=malibu, title=\"The Waters\", position=3)\n\nfantasies = await Album.objects.create(name=\"Fantasies\")\nawait Track.objects.create(album=fantasies, title=\"Help I'm Alive\", position=1)\nawait Track.objects.create(album=fantasies, title=\"Sick Muse\", position=2)\n\n\n# Fetch an instance, without loading a foreign key relationship on it.\ntrack = await Track.objects.get(title=\"The Bird\")\n\n#\u00a0We have an album instance, but it only has the primary key populated\nprint(track.album)       # Album(id=1) [sparse]\nprint(track.album.pk)    # 1\nprint(track.album.name)  # Raises AttributeError\n\n# Load the relationship from the database\nawait track.album.load()\nassert track.album.name == \"Malibu\"\n\n# This time, fetch an instance, loading the foreign key relationship.\ntrack = await Track.objects.select_related(\"album\").get(title=\"The Bird\")\nassert track.album.name == \"Malibu\"\n\n# Fetch instances, with a filter across an FK relationship.\ntracks = Track.objects.filter(album__name=\"Fantasies\")\nassert len(tracks) == 2\n\n# Fetch instances, with a filter and operator across an FK relationship.\ntracks = Track.objects.filter(album__name__iexact=\"fantasies\")\nassert len(tracks) == 2\n\n# Limit a query\ntracks = await Track.objects.limit(1).all()\nassert len(tracks) == 1\n```\n\n## Data types\n\nThe following keyword arguments are supported on all field types.\n\n* `primary_key`\n* `allow_null`\n* `default`\n* `index`\n* `unique`\n\nAll fields are required unless one of the following is set:\n\n* `allow_null` - Creates a nullable column. Sets the default to `None`.\n* `allow_blank` - Allow empty strings to validate. Sets the default to `\"\"`.\n* `default` - Set a default value for the field.\n\nThe following column types are supported.\nSee TypeSystem for [type-specific validation keyword arguments][typesystem-fields].\n\n* `orm.String(max_length)`\n* `orm.Text()`\n* `orm.Boolean()`\n* `orm.Integer()`\n* `orm.Float()`\n* `orm.Date()`\n* `orm.Time()`\n* `orm.DateTime()`\n* `orm.JSON()`\n\n[sqlalchemy-core]: https://docs.sqlalchemy.org/en/latest/core/\n[databases]: https://github.com/encode/databases\n[typesystem]: https://github.com/encode/typesystem\n[typesystem-fields]: https://www.encode.io/typesystem/fields/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/encode/orm", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "orm", "package_url": "https://pypi.org/project/orm/", "platform": "", "project_url": "https://pypi.org/project/orm/", "project_urls": {"Homepage": "https://github.com/encode/orm"}, "release_url": "https://pypi.org/project/orm/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "An async ORM.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ORM</h1>\n<p>\n<a href=\"https://travis-ci.org/encode/orm\" rel=\"nofollow\">\n    <img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f18d6d61648c7a18a770c1b4360ede3ec038443/68747470733a2f2f7472617669732d63692e6f72672f656e636f64652f6f726d2e7376673f6272616e63683d6d6173746572\">\n</a>\n<a href=\"https://codecov.io/gh/encode/orm\" rel=\"nofollow\">\n    <img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f389053999673fdf1f9d0fe2adc723424b43abc/68747470733a2f2f636f6465636f762e696f2f67682f656e636f64652f6f726d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\">\n</a>\n<a href=\"https://pypi.org/project/orm/\" rel=\"nofollow\">\n    <img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad4972581c7d3ec744e6a32022949f2b9b89ea11/68747470733a2f2f62616467652e667572792e696f2f70792f6f726d2e737667\">\n</a>\n</p>\n<p>The <code>orm</code> package is an async ORM for Python, with support for Postgres,\nMySQL, and SQLite. ORM is built with:</p>\n<ul>\n<li><a href=\"https://docs.sqlalchemy.org/en/latest/core/\" rel=\"nofollow\">SQLAlchemy core</a> for query building.</li>\n<li><a href=\"https://github.com/encode/databases\" rel=\"nofollow\"><code>databases</code></a> for cross-database async support.</li>\n<li><a href=\"https://github.com/encode/typesystem\" rel=\"nofollow\"><code>typesystem</code></a> for data validation.</li>\n</ul>\n<p>Because ORM is built on SQLAlchemy core, you can use Alembic to provide\ndatabase migrations.</p>\n<p><strong>ORM is still under development: We recommend pinning any dependencies with <code>orm~=0.1</code></strong></p>\n<p><strong>Note</strong>: Use <code>ipython</code> to try this from the console, since it supports <code>await</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">databases</span>\n<span class=\"kn\">import</span> <span class=\"nn\">orm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span>\n\n<span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"s2\">\"sqlite:///db.sqlite\"</span><span class=\"p\">)</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Note</span><span class=\"p\">(</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"notes\"</span>\n    <span class=\"n\">__database__</span> <span class=\"o\">=</span> <span class=\"n\">database</span>\n    <span class=\"n\">__metadata__</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">completed</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the database</span>\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">))</span>\n<span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">create_all</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># .create()</span>\n<span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Buy the groceries.\"</span><span class=\"p\">,</span> <span class=\"n\">completed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Call Mum.\"</span><span class=\"p\">,</span> <span class=\"n\">completed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Send invoices.\"</span><span class=\"p\">,</span> <span class=\"n\">completed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># .all()</span>\n<span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># .filter()</span>\n<span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">completed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># exact, iexact, contains, icontains, lt, lte, gt, gte, in</span>\n<span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">text__icontains</span><span class=\"o\">=</span><span class=\"s2\">\"mum\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># .get()</span>\n<span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># .update()</span>\n<span class=\"k\">await</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">completed</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># .delete()</span>\n<span class=\"k\">await</span> <span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 'pk' always refers to the primary key</span>\n<span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">note</span><span class=\"o\">.</span><span class=\"n\">pk</span>  <span class=\"c1\"># 2</span>\n</pre>\n<p>ORM supports loading and filtering across foreign keys...</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">databases</span>\n<span class=\"kn\">import</span> <span class=\"nn\">orm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span>\n\n<span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"s2\">\"sqlite:///db.sqlite\"</span><span class=\"p\">)</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"album\"</span>\n    <span class=\"n\">__metadata__</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span>\n    <span class=\"n\">__database__</span> <span class=\"o\">=</span> <span class=\"n\">database</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Track</span><span class=\"p\">(</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"track\"</span>\n    <span class=\"n\">__metadata__</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span>\n    <span class=\"n\">__database__</span> <span class=\"o\">=</span> <span class=\"n\">database</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">album</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Album</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#\u00a0Create some records to work with.</span>\n<span class=\"n\">malibu</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Album</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Malibu\"</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"o\">=</span><span class=\"n\">malibu</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"The Bird\"</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"o\">=</span><span class=\"n\">malibu</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Heart don't stand a chance\"</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"o\">=</span><span class=\"n\">malibu</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"The Waters\"</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">fantasies</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Album</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Fantasies\"</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"o\">=</span><span class=\"n\">fantasies</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Help I'm Alive\"</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">album</span><span class=\"o\">=</span><span class=\"n\">fantasies</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Sick Muse\"</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Fetch an instance, without loading a foreign key relationship on it.</span>\n<span class=\"n\">track</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"The Bird\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#\u00a0We have an album instance, but it only has the primary key populated</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"p\">)</span>       <span class=\"c1\"># Album(id=1) [sparse]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>    <span class=\"c1\"># 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># Raises AttributeError</span>\n\n<span class=\"c1\"># Load the relationship from the database</span>\n<span class=\"k\">await</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Malibu\"</span>\n\n<span class=\"c1\"># This time, fetch an instance, loading the foreign key relationship.</span>\n<span class=\"n\">track</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">\"album\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"The Bird\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">track</span><span class=\"o\">.</span><span class=\"n\">album</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"Malibu\"</span>\n\n<span class=\"c1\"># Fetch instances, with a filter across an FK relationship.</span>\n<span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">album__name</span><span class=\"o\">=</span><span class=\"s2\">\"Fantasies\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Fetch instances, with a filter and operator across an FK relationship.</span>\n<span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">album__name__iexact</span><span class=\"o\">=</span><span class=\"s2\">\"fantasies\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Limit a query</span>\n<span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Track</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<h2>Data types</h2>\n<p>The following keyword arguments are supported on all field types.</p>\n<ul>\n<li><code>primary_key</code></li>\n<li><code>allow_null</code></li>\n<li><code>default</code></li>\n<li><code>index</code></li>\n<li><code>unique</code></li>\n</ul>\n<p>All fields are required unless one of the following is set:</p>\n<ul>\n<li><code>allow_null</code> - Creates a nullable column. Sets the default to <code>None</code>.</li>\n<li><code>allow_blank</code> - Allow empty strings to validate. Sets the default to <code>\"\"</code>.</li>\n<li><code>default</code> - Set a default value for the field.</li>\n</ul>\n<p>The following column types are supported.\nSee TypeSystem for <a href=\"https://www.encode.io/typesystem/fields/\" rel=\"nofollow\">type-specific validation keyword arguments</a>.</p>\n<ul>\n<li><code>orm.String(max_length)</code></li>\n<li><code>orm.Text()</code></li>\n<li><code>orm.Boolean()</code></li>\n<li><code>orm.Integer()</code></li>\n<li><code>orm.Float()</code></li>\n<li><code>orm.Date()</code></li>\n<li><code>orm.Time()</code></li>\n<li><code>orm.DateTime()</code></li>\n<li><code>orm.JSON()</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7067955, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d1fd581b8b4ede9c0ef85a34246f9a20", "sha256": "b6312f516beba8a3083f0b9287fdfcbe158afcb0ec05364c37350d915969e770"}, "downloads": -1, "filename": "orm-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d1fd581b8b4ede9c0ef85a34246f9a20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2339, "upload_time": "2019-02-12T16:49:20", "upload_time_iso_8601": "2019-02-12T16:49:20.933213Z", "url": "https://files.pythonhosted.org/packages/b8/7d/ca8fb30319a693fa7631816920305820300e566ef2fae2698151398ae846/orm-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d9a4c9a599c26de8018b22b7e7feaf15", "sha256": "3beaf2cafa1acfad30ce2f5df0e25f0ba3bc5650354099ee1561e4bdd4521109"}, "downloads": -1, "filename": "orm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d9a4c9a599c26de8018b22b7e7feaf15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4962, "upload_time": "2019-03-15T13:35:29", "upload_time_iso_8601": "2019-03-15T13:35:29.981128Z", "url": "https://files.pythonhosted.org/packages/a1/a9/da13b2b8debbbd7d91d866dcf009c341e9d62c765e2a4a45de6e94535bb7/orm-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "eecad806d82ba72e029b180e830c182c", "sha256": "e9b89616b0481795de4c3156ec864209327513a868918e3142d8875e8007f3d3"}, "downloads": -1, "filename": "orm-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eecad806d82ba72e029b180e830c182c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6137, "upload_time": "2019-03-18T15:27:43", "upload_time_iso_8601": "2019-03-18T15:27:43.344750Z", "url": "https://files.pythonhosted.org/packages/8e/55/adc67ba939e1dc69ea0dfb1d08e39ffab0ecc8c2a0ec2a0f8e1c49e562fa/orm-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ff0dc410a42cddfc8828ee3563904fe0", "sha256": "821420861735d8687a24ca3588ee5def4ac5c5ecd36bca7210395c62e25d4f8e"}, "downloads": -1, "filename": "orm-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ff0dc410a42cddfc8828ee3563904fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7543, "upload_time": "2019-03-18T17:17:23", "upload_time_iso_8601": "2019-03-18T17:17:23.585746Z", "url": "https://files.pythonhosted.org/packages/c6/a6/4a867c58f4bcab01cf782f91a58f37b4a93f390aba89a7f1c3410f9454fe/orm-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "028227a59669d55baa17ae458faf9bd5", "sha256": "14e3a7f63f4718f5d4a93bedbde8a72d3fa151c8f7e1cff9893897562a7386b8"}, "downloads": -1, "filename": "orm-0.1.3.tar.gz", "has_sig": false, "md5_digest": "028227a59669d55baa17ae458faf9bd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7745, "upload_time": "2019-03-29T09:37:55", "upload_time_iso_8601": "2019-03-29T09:37:55.211313Z", "url": "https://files.pythonhosted.org/packages/5b/ab/a4be1088bbe570860d1150c8f5d764e4b927e5e8db158b58bc09fe4db0d3/orm-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2f8ebb674ad3a528e6fab3b412d68c64", "sha256": "29e58d976a7d6162c0a5d197dd226ec9d25f03723ac11db64bea568d74ee9154"}, "downloads": -1, "filename": "orm-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2f8ebb674ad3a528e6fab3b412d68c64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7770, "upload_time": "2019-03-29T13:56:06", "upload_time_iso_8601": "2019-03-29T13:56:06.170051Z", "url": "https://files.pythonhosted.org/packages/bb/01/2057afb9336eb530e9e707ee87ddf28644f971dee245aea0e96b9b5a8e99/orm-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "262ee4e61ce01f0803dcb4feb19674d9", "sha256": "37cb4757b670c1713f4e0d65874c5afe819acbd712abb9743c97e1d4b00d511c"}, "downloads": -1, "filename": "orm-0.1.5.tar.gz", "has_sig": false, "md5_digest": "262ee4e61ce01f0803dcb4feb19674d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8936, "upload_time": "2019-07-15T13:45:23", "upload_time_iso_8601": "2019-07-15T13:45:23.594351Z", "url": "https://files.pythonhosted.org/packages/d3/69/d23f26fef966ed3b21b2a30207985e21fdbb1a449c72f59e49957d25c1e2/orm-0.1.5.tar.gz", "yanked": false}], "0.2.0.dev0": [{"comment_text": "", "digests": {"md5": "80fa13ff7d046d33cfde3a0bbc0105df", "sha256": "e415e8ad6e638ab902a562a7bf03a190c20faf38d6e8f64d86cefcc4d56e309d"}, "downloads": -1, "filename": "orm-0.2.0.dev0.tar.gz", "has_sig": false, "md5_digest": "80fa13ff7d046d33cfde3a0bbc0105df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9641, "upload_time": "2020-04-09T15:01:28", "upload_time_iso_8601": "2020-04-09T15:01:28.367161Z", "url": "https://files.pythonhosted.org/packages/ad/73/524f7205a2dc6ce411032731fb38673399f6650c0fe9c631882f974606c5/orm-0.2.0.dev0.tar.gz", "yanked": false}], "0.2.0.dev1": [{"comment_text": "", "digests": {"md5": "759baf758d7a89256920190840abd3fa", "sha256": "e5113b7480551c95cd778e0f054edc1e30bc626e719093b6137548e00721e972"}, "downloads": -1, "filename": "orm-0.2.0.dev1.tar.gz", "has_sig": false, "md5_digest": "759baf758d7a89256920190840abd3fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9773, "upload_time": "2020-04-21T13:29:53", "upload_time_iso_8601": "2020-04-21T13:29:53.071265Z", "url": "https://files.pythonhosted.org/packages/6a/56/675dbe83ace503f635c6b2631c50cb5bdda86fa4a8612d2ca9cd77161395/orm-0.2.0.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "262ee4e61ce01f0803dcb4feb19674d9", "sha256": "37cb4757b670c1713f4e0d65874c5afe819acbd712abb9743c97e1d4b00d511c"}, "downloads": -1, "filename": "orm-0.1.5.tar.gz", "has_sig": false, "md5_digest": "262ee4e61ce01f0803dcb4feb19674d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8936, "upload_time": "2019-07-15T13:45:23", "upload_time_iso_8601": "2019-07-15T13:45:23.594351Z", "url": "https://files.pythonhosted.org/packages/d3/69/d23f26fef966ed3b21b2a30207985e21fdbb1a449c72f59e49957d25c1e2/orm-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:33 2020"}