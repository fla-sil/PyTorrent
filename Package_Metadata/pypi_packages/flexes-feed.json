{"info": {"author": "James Arnold", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# flexes-feed\n[![Build Status](https://travis-ci.org/lanl-ansi/flexes-feed.svg?branch=master)](https://travis-ci.org/lanl-ansi/flexes-feed) \n[![codecov](https://codecov.io/gh/lanl-ansi/flexes-feed/branch/master/graph/badge.svg)](https://codecov.io/gh/lanl-ansi/flexes-feed)\n\nGeneric structure for retrieving and processing regularly updated data from the web \n\n## Scraper Usage\nTo create a new scraper simply create a class that inherits from the `Scraper` class \nand override the `check()` method.\n\nHere is a quick pseudo example:\n\n```python\nimport requests\nfrom data_feed.scraper import NewFile, Scraper\n\nclass MyScraper(Scraper):\n  def check(self):\n    response = requests.get(self.channel)\n    # Parse content from page \n    # If the file has changed return a NewFile object\n    return [NewFile(file_url, self.s3_folder)]\n    \ndef run_scraper():\n  s3_folder = 's3://bucket/path/to/store/data'\n  channel = 'http://somedata.com'\n  scraper = MyScraper(s3_folder, channel)\n  scraper.run()\n  \nif __name__ == '__main__':\n  run_scraper()\n```\n\nSee [examples/noaa_wind_scraper.py](noaa_wind_scraper.py) for a real example. The example\nalso requires that `BeautifulSoup4` and `lxml` are installed. To install, simply\nrun `pip install BeautifulSoup4 lxml`.\n\n## Subscriber Usage\nTo create a new subscriber simply create a class that inherits from the `Subscriber` \nclass and override the `process()` method.\n\nHere is a quick pseduo example:\n\n```python\nfrom data_feed.subscriber import Subscriber\n\nclass MySubscriber(Subscriber):\n  def process(self, s3_uri):\n    # Process file(s) in s3_uri\n    \ndef subscribe():\n  channel = 'http://somedata.com'\n  sub = MySubscriber(channel)\n  sub.subscribe()\n  \nif __name__ == '__main__':\n  subscribe()\n```\n  \nSee [examples/noaa_wind_subscriber.py](noaa_wind_subscriber.py) for a real example using the \nlanlytics API.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flexes-feed", "package_url": "https://pypi.org/project/flexes-feed/", "platform": "", "project_url": "https://pypi.org/project/flexes-feed/", "project_urls": null, "release_url": "https://pypi.org/project/flexes-feed/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Library for setting up data processing pipelines from remote data feeds", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>flexes-feed</h1>\n<p><a href=\"https://travis-ci.org/lanl-ansi/flexes-feed\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8081bcb79b4ac844e9e90b5a5e286de5f2d4ac6/68747470733a2f2f7472617669732d63692e6f72672f6c616e6c2d616e73692f666c657865732d666565642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/lanl-ansi/flexes-feed\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae6b8f343aa89c752b033256ebfa574bf8d2b27a/68747470733a2f2f636f6465636f762e696f2f67682f6c616e6c2d616e73692f666c657865732d666565642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Generic structure for retrieving and processing regularly updated data from the web</p>\n<h2>Scraper Usage</h2>\n<p>To create a new scraper simply create a class that inherits from the <code>Scraper</code> class\nand override the <code>check()</code> method.</p>\n<p>Here is a quick pseudo example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">data_feed.scraper</span> <span class=\"kn\">import</span> <span class=\"n\">NewFile</span><span class=\"p\">,</span> <span class=\"n\">Scraper</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyScraper</span><span class=\"p\">(</span><span class=\"n\">Scraper</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Parse content from page </span>\n    <span class=\"c1\"># If the file has changed return a NewFile object</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">NewFile</span><span class=\"p\">(</span><span class=\"n\">file_url</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s3_folder</span><span class=\"p\">)]</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">run_scraper</span><span class=\"p\">():</span>\n  <span class=\"n\">s3_folder</span> <span class=\"o\">=</span> <span class=\"s1\">'s3://bucket/path/to/store/data'</span>\n  <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"s1\">'http://somedata.com'</span>\n  <span class=\"n\">scraper</span> <span class=\"o\">=</span> <span class=\"n\">MyScraper</span><span class=\"p\">(</span><span class=\"n\">s3_folder</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"p\">)</span>\n  <span class=\"n\">scraper</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n  \n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">run_scraper</span><span class=\"p\">()</span>\n</pre>\n<p>See <a href=\"noaa_wind_scraper.py\" rel=\"nofollow\">examples/noaa_wind_scraper.py</a> for a real example. The example\nalso requires that <code>BeautifulSoup4</code> and <code>lxml</code> are installed. To install, simply\nrun <code>pip install BeautifulSoup4 lxml</code>.</p>\n<h2>Subscriber Usage</h2>\n<p>To create a new subscriber simply create a class that inherits from the <code>Subscriber</code>\nclass and override the <code>process()</code> method.</p>\n<p>Here is a quick pseduo example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">data_feed.subscriber</span> <span class=\"kn\">import</span> <span class=\"n\">Subscriber</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySubscriber</span><span class=\"p\">(</span><span class=\"n\">Subscriber</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s3_uri</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Process file(s) in s3_uri</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">subscribe</span><span class=\"p\">():</span>\n  <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"s1\">'http://somedata.com'</span>\n  <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">MySubscriber</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n  <span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">()</span>\n  \n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n  <span class=\"n\">subscribe</span><span class=\"p\">()</span>\n</pre>\n<p>See <a href=\"noaa_wind_subscriber.py\" rel=\"nofollow\">examples/noaa_wind_subscriber.py</a> for a real example using the\nlanlytics API.</p>\n\n          </div>"}, "last_serial": 4969292, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b1ba8bb655dfb45edb8fdc72db5946be", "sha256": "da305e7ecefb941c1c149043063b67e9e45f3d8698c8845585052323f52f8c47"}, "downloads": -1, "filename": "flexes_feed-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b1ba8bb655dfb45edb8fdc72db5946be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5578, "upload_time": "2019-03-21T17:53:58", "upload_time_iso_8601": "2019-03-21T17:53:58.222188Z", "url": "https://files.pythonhosted.org/packages/12/56/1176a6d77da56540a398e5bca92ed82a017eed5f7e649d557dd8d4fff240/flexes_feed-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1ba8bb655dfb45edb8fdc72db5946be", "sha256": "da305e7ecefb941c1c149043063b67e9e45f3d8698c8845585052323f52f8c47"}, "downloads": -1, "filename": "flexes_feed-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b1ba8bb655dfb45edb8fdc72db5946be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5578, "upload_time": "2019-03-21T17:53:58", "upload_time_iso_8601": "2019-03-21T17:53:58.222188Z", "url": "https://files.pythonhosted.org/packages/12/56/1176a6d77da56540a398e5bca92ed82a017eed5f7e649d557dd8d4fff240/flexes_feed-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:00 2020"}