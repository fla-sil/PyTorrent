{"info": {"author": "Ryan Long", "author_email": "ryan@ryanlong.tech", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "# JSON Tools\n\nCollection of JSON tools for Python 3 that help developers work with JSON (Javascript Object Notation) easier.\n\n[The source for this project is available here][src].\n\n## Overview\n\n**FrozenJSON**\n\nAllows a JSON to be loaded into a pseudo python object dynamically.  \n\nThis idea and conception was from the book [\"Fluent Python: Clear, Concise, and Effective Programming\" by Luciano Ramalho][fluent python].\n\n\n## Basic Usage\n\nFor example, say we have a JSON in a file that looks like the following:\n```json\n  {\n    \"_id\": \"5e52d75618947399f093ac7d\",\n    \"isActive\": false,\n    \"picture\": \"http://placehold.it/32x32\",\n    \"latitude\": -49.694182,\n    \"longitude\": 126.901299,\n    \"tags\": [\n      \"non\",\n      \"est\",\n      \"sint\"\n    ]\n  }\n```\nIf a developer wanted to treat this JSON as a python object, they could create a FrozenJSON\nusing the following syntax:\n\n```python\nimport FrozenJSON\nx = Frozen.of(<file_path>)\n\nprint(x.isActive)\n...False\nprint(x.tags)\n...[\"non\",\"est\",\"sint\"]\nprint(x.tags[0])\n...\"non\"\n```\n\nThe `of` method is a dynamic constructor that is able to discern whether the data passed in a JSON string, the path to a file, a reference to a file itself, or a python dictionary.\n\nSo something like below is perfectly legal:\n\n```python\nimport FrozenJSON\ndata = {\n    \"name\": \"Ryan Long\",\n    \"class\": \"Geometry\"\n}\nx = FrozenJSON.of(data)\nprint(x.name)\n...\"Ryan Long\"\nprint(x.class_)\n...\"Geometry\"\n```\n\nNotice that although `class` is a keyword, FrozenJSON is still able to assign it to a key by \nappending \"_\" to the end.  This is true for all python keywords that are also used as keys\nand happens automatically.\n\n\n[packaging guide]: https://packaging.python.org\n[distribution tutorial]: https://packaging.python.org/tutorials/packaging-projects/\n[src]: https://github.com/ryanlongtech/rlt-json-tools\n[md]: https://tools.ietf.org/html/rfc7764#section-3.5 \"CommonMark variant\"\n[md use]: https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n[fluent python]: https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryanlongtech/rlt-json-tools", "keywords": "json frozen object dynamic", "license": "", "maintainer": "", "maintainer_email": "", "name": "rlt-json-tools", "package_url": "https://pypi.org/project/rlt-json-tools/", "platform": "", "project_url": "https://pypi.org/project/rlt-json-tools/", "project_urls": {"Bug Reports": "https://github.com/ryanlongtech/rlt-json-tools/issues", "Homepage": "https://github.com/ryanlongtech/rlt-json-tools", "Source": "https://github.com/ryanlongtech/rlt-json-tools"}, "release_url": "https://pypi.org/project/rlt-json-tools/0.0.2/", "requires_dist": ["check-manifest ; extra == 'dev'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": ">=3.6, <4", "summary": "Project for dynamically converting json types into dynamic python objects", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSON Tools</h1>\n<p>Collection of JSON tools for Python 3 that help developers work with JSON (Javascript Object Notation) easier.</p>\n<p><a href=\"https://github.com/ryanlongtech/rlt-json-tools\" rel=\"nofollow\">The source for this project is available here</a>.</p>\n<h2>Overview</h2>\n<p><strong>FrozenJSON</strong></p>\n<p>Allows a JSON to be loaded into a pseudo python object dynamically.</p>\n<p>This idea and conception was from the book <a href=\"https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008\" rel=\"nofollow\">\"Fluent Python: Clear, Concise, and Effective Programming\" by Luciano Ramalho</a>.</p>\n<h2>Basic Usage</h2>\n<p>For example, say we have a JSON in a file that looks like the following:</p>\n<pre>  <span class=\"p\">{</span>\n    <span class=\"nt\">\"_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5e52d75618947399f093ac7d\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"isActive\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"picture\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://placehold.it/32x32\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"latitude\"</span><span class=\"p\">:</span> <span class=\"mf\">-49.694182</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"longitude\"</span><span class=\"p\">:</span> <span class=\"mf\">126.901299</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">\"non\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"est\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"sint\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n</pre>\n<p>If a developer wanted to treat this JSON as a python object, they could create a FrozenJSON\nusing the following syntax:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">FrozenJSON</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Frozen</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">file_path</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">isActive</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"kc\">False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"p\">[</span><span class=\"s2\">\"non\"</span><span class=\"p\">,</span><span class=\"s2\">\"est\"</span><span class=\"p\">,</span><span class=\"s2\">\"sint\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"o\">...</span><span class=\"s2\">\"non\"</span>\n</pre>\n<p>The <code>of</code> method is a dynamic constructor that is able to discern whether the data passed in a JSON string, the path to a file, a reference to a file itself, or a python dictionary.</p>\n<p>So something like below is perfectly legal:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">FrozenJSON</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ryan Long\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Geometry\"</span>\n<span class=\"p\">}</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">FrozenJSON</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"s2\">\"Ryan Long\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">class_</span><span class=\"p\">)</span>\n<span class=\"o\">...</span><span class=\"s2\">\"Geometry\"</span>\n</pre>\n<p>Notice that although <code>class</code> is a keyword, FrozenJSON is still able to assign it to a key by\nappending \"_\" to the end.  This is true for all python keywords that are also used as keys\nand happens automatically.</p>\n\n          </div>"}, "last_serial": 6685224, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "3cb7ebf6220c39f362aa492deead6402", "sha256": "b4d0aace4435bc555e80aa511ac9c9e0d4938ac2a0589c9915a2b1457bd7d85c"}, "downloads": -1, "filename": "rlt_json_tools-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3cb7ebf6220c39f362aa492deead6402", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 3306, "upload_time": "2020-02-23T20:08:51", "upload_time_iso_8601": "2020-02-23T20:08:51.577138Z", "url": "https://files.pythonhosted.org/packages/e2/56/a3a97562e7b2e95b9b05b79718f5453acf5c837a96b94b834ed177a81441/rlt_json_tools-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8611e4648541ac6e9ae2b2cc56373d5d", "sha256": "fa5b423cfd5b6c911742bb19a6c9edd5712f8731d50839179f68fdaf2a1a57c4"}, "downloads": -1, "filename": "rlt-json-tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8611e4648541ac6e9ae2b2cc56373d5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 6662, "upload_time": "2020-02-23T20:08:53", "upload_time_iso_8601": "2020-02-23T20:08:53.884996Z", "url": "https://files.pythonhosted.org/packages/a3/c7/80174a6855c879837c61e75803875bf9c08e34bb656b3ed3ed99d2a60069/rlt-json-tools-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3cb7ebf6220c39f362aa492deead6402", "sha256": "b4d0aace4435bc555e80aa511ac9c9e0d4938ac2a0589c9915a2b1457bd7d85c"}, "downloads": -1, "filename": "rlt_json_tools-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3cb7ebf6220c39f362aa492deead6402", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6, <4", "size": 3306, "upload_time": "2020-02-23T20:08:51", "upload_time_iso_8601": "2020-02-23T20:08:51.577138Z", "url": "https://files.pythonhosted.org/packages/e2/56/a3a97562e7b2e95b9b05b79718f5453acf5c837a96b94b834ed177a81441/rlt_json_tools-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8611e4648541ac6e9ae2b2cc56373d5d", "sha256": "fa5b423cfd5b6c911742bb19a6c9edd5712f8731d50839179f68fdaf2a1a57c4"}, "downloads": -1, "filename": "rlt-json-tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8611e4648541ac6e9ae2b2cc56373d5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 6662, "upload_time": "2020-02-23T20:08:53", "upload_time_iso_8601": "2020-02-23T20:08:53.884996Z", "url": "https://files.pythonhosted.org/packages/a3/c7/80174a6855c879837c61e75803875bf9c08e34bb656b3ed3ed99d2a60069/rlt-json-tools-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:15 2020"}