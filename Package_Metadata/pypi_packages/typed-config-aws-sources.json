{"info": {"author": "Ben Windsor", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Typing :: Typed"], "description": "[![Build Status](https://travis-ci.org/bwindsor/typed-config-aws-sources.svg?branch=master)](https://travis-ci.org/bwindsor/typed-config-aws-sources)\n[![codecov](https://codecov.io/gh/bwindsor/typed-config-aws-sources/branch/master/graph/badge.svg)](https://codecov.io/gh/bwindsor/typed-config-aws-sources)\n\n# typed-config-aws-sources\nAWS config sources for the [typed-config](https://pypi.org/project/typed-config) package.\n\n`pip install typed-config-aws-sources`\n\nRequires python 3.6 or above.\n\n## Basic usage\nPlease read the readme for [typed-config](https://pypi.org/project/typed-config) first.\n\n```python\n# my_app/config.py\nfrom typedconfig_awssource import IniS3ConfigSource\nfrom typedconfig import Config, key, section\n\n@section('database')\nclass AppConfig(Config):\n    port = key(cast=int)\n\nconfig = AppConfig()\nconfig.add_source(IniS3ConfigSource('my_bucket_name', 'config_key.cfg'))\nconfig.read()\n```\n\n```python\n# my_app/main.py\nfrom my_app.config import config\nprint(config.host)\n```\n\n### Supplied Config Sources\n#### `IniS3ConfigSource`\nThis loads configuration from an INI file stored in an S3 bucket\n```python\nfrom typedconfig_awssource import IniS3ConfigSource\nsource = IniS3ConfigSource('bucket_name', 'key_name.cfg', encoding='utf8', must_exist=True)\n```\n\n* Supply the bucket name and key name as the first two arguments\n* `encoding` defaults to `'utf8'` if not supplied\n* `must_exist` defaults to `True` if not supplied. If `must_exist` is `False`, and the bucket or key can't be found, or AWS credentials fail, then no error is thrown and this config source will just return than it cannot find the requested config value every time.\n\nAn example INI file might look like this:\n```ini\n[database]\nport = 2000\n```\n\n#### `DynamoDBConfigSource`\nThis reads configuration from a DynamoDB table. The table should have a partition key which holds the config section, a sort key which holds the config key name, and another 'column' containing the config value as a string.\n\nSo an item in DynamoDB corresponding to the above INI file example would look like this\n```json\n{\n    \"section\": \"database\",\n    \"key\": \"port\",\n    \"value\": \"2000\"\n}\n```\n\nCreate the `DynamoDBConfigSource` like this:\n```python\nfrom typedconfig_awssource import DynamoDbConfigSource\nsource = DynamoDbConfigSource('table_name', \n                               section_attribute_name='config_section_column_name',\n                               key_attribute_name='config_key_column_name',\n                               value_attribute_name='config_value_column_name')\n```\n\n* The first argument is the DynamoDB table name and is required\n* The other three arguments are optional, and are supplying the attribute (or \"column\") names in the table which store the three things defining a config parameter (section, key, and value)\n* Default attribute names are `\"section\"`, `\"key\"`, and `\"value\"`\n\n#### `SecretsManagerConfigSource`\nThis reads secret values from secrets manager. Permission to read AWS secrets is required. One secrets should be stored for each config section with the name format `prefix/section`, and contain json key-value pairs. For example, for a project called `myproject` there may be a secret called `myproject/database` containing the following value. Note that even numeric values should be stored as strings.\n```json\n{\n    \"user\": \"secretuser\",\n    \"password\": \"secretpassword\"\n}\n```\n\nCreate the `SecretsManagerConfigSource` like this:\n```python\nfrom typedconfig_awssource import SecretsManagerConfigSource\nsource = SecretsManagerConfigSource('myproject', must_exist=False, only_these_keys={('s', 'a'), ('s', 'b')})\n```\n\n* The first argument passed is the prefix which is placed before the `/` in the secret name. So when I try to get the database password, the secret `myproject/database` is retrieved, the JSON is parsed and value the field `password` is returned.  \n* The `must_exist` argument specifies whether to error if AWS secretsmanager cannot be accessed, or if the key does not exist. Default is `False`.\n* The `only_these_keys` argument specifies a limited set of configuration keys. They are provided as `(section, key)` tuples. If provided, the config source will only act when these parameters are requested. This prevents unnecessary AWS API calls, which slow down configuration setup, for config values which you know are not available from secrets manager. Setting `only_these_keys=None` (the default) will check secrets manager for all config keys.\n\n#### `ParameterStoreConfigSource`\nThis reads (optionally secret) values from AWS SSM parameter store. Storing secrets here is cheaper than using secrets manager. Permission to read from SSM parameter store is required. Each config parameter should be stored in parameter store as an individual `SecureString` parameter. For example, I would store the database password in a key called\n```\nmyproject/database/password\n```\nwhere `database` is the section name and `password` is the configuration key name.\n\nCreate a `ParameterStoreConfigSource` like this:\n```python\nfrom typedconfig_awssource import ParameterStoreConfigSource\nsource = ParameterStoreConfigSource('myproject', must_exist=False, only_these_keys={('s', 'a'), ('s', 'b')})\n```\n\n* The first argument passed is the prefix at the start of the SSM parameter name, before the first `/`.\n* The `must_exist` argument specifies whether to error if AWS parameter store cannot be accessed, or if the requested key does not exist.\n* The `only_these_keys` argument specifies a limited set of configuration keys. They are provided as `(section, key)` tuples. If provided, the config source will only act when these parameters are requested. This prevents unnecessary AWS API calls, which slow down configuration setup, for config values which you know are not available from parameter store. Setting `only_these_keys=None` (the default) will check parameter store for all config keys.\n\n## Contributing\nIdeas for new features and pull requests are welcome. PRs must come with tests included. This was developed using Python 3.7 but Travis tests run with v3.6 too.\n\n### Development setup\n1. Clone the git repository\n2. Create a virtual environment `virtualenv venv`\n3. Activate the environment `venv/scripts/activate`\n4. Install development dependencies `pip install -r requirements.txt`\n\n### Running tests\n`pytest`\n\nTo run with coverage:\n\n`pytest --cov`\n\n### Deploying to PyPI\nYou'll need to `pip install twine` if you don't have it.\n\n1. Bump version number in `typedconfig_awssource/__version__.py`\n2. Tag the release in git `git tag -a v0.1.0 -m \"Message\"`\n3. `python setup.py sdist bdist_wheel`\n4. `twine check dist/*`\n5. Upload to the test PyPI `twine upload --repository-url https://test.pypi.org/legacy/ dist/*`\n6. Check all looks ok at [https://test.pypi.org/project/typed-config-aws-sources](https://test.pypi.org/project/typed-config-aws-sources)\n7. Upload to live PyPI `twine upload dist/*`\n\nHere is [a good tutorial](https://realpython.com/pypi-publish-python-package) on publishing packages to PyPI.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bwindsor/typed-config-aws-sources", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "typed-config-aws-sources", "package_url": "https://pypi.org/project/typed-config-aws-sources/", "platform": "", "project_url": "https://pypi.org/project/typed-config-aws-sources/", "project_urls": {"Homepage": "https://github.com/bwindsor/typed-config-aws-sources"}, "release_url": "https://pypi.org/project/typed-config-aws-sources/0.3.3/", "requires_dist": ["boto3", "typed-config"], "requires_python": ">=3.6.0", "summary": "AWS config sources for the typedconfig package", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/bwindsor/typed-config-aws-sources\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7becdd95123a1e4c5c6e018838bf2f0def8e88d8/68747470733a2f2f7472617669732d63692e6f72672f6277696e64736f722f74797065642d636f6e6669672d6177732d736f75726365732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/bwindsor/typed-config-aws-sources\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5227a82a08c554adadf9e606959011290b39b07d/68747470733a2f2f636f6465636f762e696f2f67682f6277696e64736f722f74797065642d636f6e6669672d6177732d736f75726365732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>typed-config-aws-sources</h1>\n<p>AWS config sources for the <a href=\"https://pypi.org/project/typed-config\" rel=\"nofollow\">typed-config</a> package.</p>\n<p><code>pip install typed-config-aws-sources</code></p>\n<p>Requires python 3.6 or above.</p>\n<h2>Basic usage</h2>\n<p>Please read the readme for <a href=\"https://pypi.org/project/typed-config\" rel=\"nofollow\">typed-config</a> first.</p>\n<pre><span class=\"c1\"># my_app/config.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typedconfig_awssource</span> <span class=\"kn\">import</span> <span class=\"n\">IniS3ConfigSource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typedconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">section</span>\n\n<span class=\"nd\">@section</span><span class=\"p\">(</span><span class=\"s1\">'database'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">AppConfig</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">AppConfig</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_source</span><span class=\"p\">(</span><span class=\"n\">IniS3ConfigSource</span><span class=\"p\">(</span><span class=\"s1\">'my_bucket_name'</span><span class=\"p\">,</span> <span class=\"s1\">'config_key.cfg'</span><span class=\"p\">))</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># my_app/main.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_app.config</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"p\">)</span>\n</pre>\n<h3>Supplied Config Sources</h3>\n<h4><code>IniS3ConfigSource</code></h4>\n<p>This loads configuration from an INI file stored in an S3 bucket</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typedconfig_awssource</span> <span class=\"kn\">import</span> <span class=\"n\">IniS3ConfigSource</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">IniS3ConfigSource</span><span class=\"p\">(</span><span class=\"s1\">'bucket_name'</span><span class=\"p\">,</span> <span class=\"s1\">'key_name.cfg'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">,</span> <span class=\"n\">must_exist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Supply the bucket name and key name as the first two arguments</li>\n<li><code>encoding</code> defaults to <code>'utf8'</code> if not supplied</li>\n<li><code>must_exist</code> defaults to <code>True</code> if not supplied. If <code>must_exist</code> is <code>False</code>, and the bucket or key can't be found, or AWS credentials fail, then no error is thrown and this config source will just return than it cannot find the requested config value every time.</li>\n</ul>\n<p>An example INI file might look like this:</p>\n<pre><span class=\"k\">[database]</span>\n<span class=\"na\">port</span> <span class=\"o\">=</span> <span class=\"s\">2000</span>\n</pre>\n<h4><code>DynamoDBConfigSource</code></h4>\n<p>This reads configuration from a DynamoDB table. The table should have a partition key which holds the config section, a sort key which holds the config key name, and another 'column' containing the config value as a string.</p>\n<p>So an item in DynamoDB corresponding to the above INI file example would look like this</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"section\"</span><span class=\"p\">:</span> <span class=\"s2\">\"database\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"port\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2000\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Create the <code>DynamoDBConfigSource</code> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typedconfig_awssource</span> <span class=\"kn\">import</span> <span class=\"n\">DynamoDbConfigSource</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">DynamoDbConfigSource</span><span class=\"p\">(</span><span class=\"s1\">'table_name'</span><span class=\"p\">,</span> \n                               <span class=\"n\">section_attribute_name</span><span class=\"o\">=</span><span class=\"s1\">'config_section_column_name'</span><span class=\"p\">,</span>\n                               <span class=\"n\">key_attribute_name</span><span class=\"o\">=</span><span class=\"s1\">'config_key_column_name'</span><span class=\"p\">,</span>\n                               <span class=\"n\">value_attribute_name</span><span class=\"o\">=</span><span class=\"s1\">'config_value_column_name'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The first argument is the DynamoDB table name and is required</li>\n<li>The other three arguments are optional, and are supplying the attribute (or \"column\") names in the table which store the three things defining a config parameter (section, key, and value)</li>\n<li>Default attribute names are <code>\"section\"</code>, <code>\"key\"</code>, and <code>\"value\"</code></li>\n</ul>\n<h4><code>SecretsManagerConfigSource</code></h4>\n<p>This reads secret values from secrets manager. Permission to read AWS secrets is required. One secrets should be stored for each config section with the name format <code>prefix/section</code>, and contain json key-value pairs. For example, for a project called <code>myproject</code> there may be a secret called <code>myproject/database</code> containing the following value. Note that even numeric values should be stored as strings.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"user\"</span><span class=\"p\">:</span> <span class=\"s2\">\"secretuser\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"secretpassword\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Create the <code>SecretsManagerConfigSource</code> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typedconfig_awssource</span> <span class=\"kn\">import</span> <span class=\"n\">SecretsManagerConfigSource</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">SecretsManagerConfigSource</span><span class=\"p\">(</span><span class=\"s1\">'myproject'</span><span class=\"p\">,</span> <span class=\"n\">must_exist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">only_these_keys</span><span class=\"o\">=</span><span class=\"p\">{(</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)})</span>\n</pre>\n<ul>\n<li>The first argument passed is the prefix which is placed before the <code>/</code> in the secret name. So when I try to get the database password, the secret <code>myproject/database</code> is retrieved, the JSON is parsed and value the field <code>password</code> is returned.</li>\n<li>The <code>must_exist</code> argument specifies whether to error if AWS secretsmanager cannot be accessed, or if the key does not exist. Default is <code>False</code>.</li>\n<li>The <code>only_these_keys</code> argument specifies a limited set of configuration keys. They are provided as <code>(section, key)</code> tuples. If provided, the config source will only act when these parameters are requested. This prevents unnecessary AWS API calls, which slow down configuration setup, for config values which you know are not available from secrets manager. Setting <code>only_these_keys=None</code> (the default) will check secrets manager for all config keys.</li>\n</ul>\n<h4><code>ParameterStoreConfigSource</code></h4>\n<p>This reads (optionally secret) values from AWS SSM parameter store. Storing secrets here is cheaper than using secrets manager. Permission to read from SSM parameter store is required. Each config parameter should be stored in parameter store as an individual <code>SecureString</code> parameter. For example, I would store the database password in a key called</p>\n<pre><code>myproject/database/password\n</code></pre>\n<p>where <code>database</code> is the section name and <code>password</code> is the configuration key name.</p>\n<p>Create a <code>ParameterStoreConfigSource</code> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typedconfig_awssource</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStoreConfigSource</span>\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStoreConfigSource</span><span class=\"p\">(</span><span class=\"s1\">'myproject'</span><span class=\"p\">,</span> <span class=\"n\">must_exist</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">only_these_keys</span><span class=\"o\">=</span><span class=\"p\">{(</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)})</span>\n</pre>\n<ul>\n<li>The first argument passed is the prefix at the start of the SSM parameter name, before the first <code>/</code>.</li>\n<li>The <code>must_exist</code> argument specifies whether to error if AWS parameter store cannot be accessed, or if the requested key does not exist.</li>\n<li>The <code>only_these_keys</code> argument specifies a limited set of configuration keys. They are provided as <code>(section, key)</code> tuples. If provided, the config source will only act when these parameters are requested. This prevents unnecessary AWS API calls, which slow down configuration setup, for config values which you know are not available from parameter store. Setting <code>only_these_keys=None</code> (the default) will check parameter store for all config keys.</li>\n</ul>\n<h2>Contributing</h2>\n<p>Ideas for new features and pull requests are welcome. PRs must come with tests included. This was developed using Python 3.7 but Travis tests run with v3.6 too.</p>\n<h3>Development setup</h3>\n<ol>\n<li>Clone the git repository</li>\n<li>Create a virtual environment <code>virtualenv venv</code></li>\n<li>Activate the environment <code>venv/scripts/activate</code></li>\n<li>Install development dependencies <code>pip install -r requirements.txt</code></li>\n</ol>\n<h3>Running tests</h3>\n<p><code>pytest</code></p>\n<p>To run with coverage:</p>\n<p><code>pytest --cov</code></p>\n<h3>Deploying to PyPI</h3>\n<p>You'll need to <code>pip install twine</code> if you don't have it.</p>\n<ol>\n<li>Bump version number in <code>typedconfig_awssource/__version__.py</code></li>\n<li>Tag the release in git <code>git tag -a v0.1.0 -m \"Message\"</code></li>\n<li><code>python setup.py sdist bdist_wheel</code></li>\n<li><code>twine check dist/*</code></li>\n<li>Upload to the test PyPI <code>twine upload --repository-url https://test.pypi.org/legacy/ dist/*</code></li>\n<li>Check all looks ok at <a href=\"https://test.pypi.org/project/typed-config-aws-sources\" rel=\"nofollow\">https://test.pypi.org/project/typed-config-aws-sources</a></li>\n<li>Upload to live PyPI <code>twine upload dist/*</code></li>\n</ol>\n<p>Here is <a href=\"https://realpython.com/pypi-publish-python-package\" rel=\"nofollow\">a good tutorial</a> on publishing packages to PyPI.</p>\n\n          </div>"}, "last_serial": 6792798, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "556497e29a5cbf5dea01d9299cafb858", "sha256": "98c4757036d6d4a16f2df1578e63697f2bd925773e3d1a021dab6754b2259ce8"}, "downloads": -1, "filename": "typed_config_aws_sources-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "556497e29a5cbf5dea01d9299cafb858", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5238, "upload_time": "2019-03-20T19:05:28", "upload_time_iso_8601": "2019-03-20T19:05:28.000162Z", "url": "https://files.pythonhosted.org/packages/56/5c/36b2b5a238c39421a54263516e0d97eee56884d87db5b7233360fa7e16b7/typed_config_aws_sources-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa2b9fdcd295c149966b60e6875aa0ca", "sha256": "6420218b5d8cfbe772f72775e4bb67bf51313a03fbd918747477b55c7c82c790"}, "downloads": -1, "filename": "typed-config-aws-sources-0.1.0.tar.gz", "has_sig": false, "md5_digest": "aa2b9fdcd295c149966b60e6875aa0ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4685, "upload_time": "2019-03-20T19:05:30", "upload_time_iso_8601": "2019-03-20T19:05:30.171490Z", "url": "https://files.pythonhosted.org/packages/36/c2/1eec28032318dbbe446400413b99f24810a5a811cd60a50207774cd42abd/typed-config-aws-sources-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "751cf0e632134359cbedec4243b18c10", "sha256": "aaebaf149a0e14a830878f1056296feaee737ecbc2cd983cea71eaa75a886886"}, "downloads": -1, "filename": "typed_config_aws_sources-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "751cf0e632134359cbedec4243b18c10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5235, "upload_time": "2019-03-20T19:09:14", "upload_time_iso_8601": "2019-03-20T19:09:14.402955Z", "url": "https://files.pythonhosted.org/packages/9f/b6/7934fcc2fe4e856c7fc96a036ffbb3086ab697cf05f812898aafa9bae583/typed_config_aws_sources-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39b79a158dc25224d0d183d8b77f876a", "sha256": "9764a8387552d0b2f31617bf4c541dded5b6849559e2db8b7505d944be2de2d3"}, "downloads": -1, "filename": "typed-config-aws-sources-0.1.1.tar.gz", "has_sig": false, "md5_digest": "39b79a158dc25224d0d183d8b77f876a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4674, "upload_time": "2019-03-20T19:09:15", "upload_time_iso_8601": "2019-03-20T19:09:15.748648Z", "url": "https://files.pythonhosted.org/packages/bd/cc/16e88802689a5a6e1e535f34271e1b5d8a3f6d83d107b54429cd98774d57/typed-config-aws-sources-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c0273fd9ce8831e1d9c2c69d9a1cf6ee", "sha256": "246f3f0fb7b9245d6d56e138afb206fbc7dea849875721ecf17401760394df11"}, "downloads": -1, "filename": "typed_config_aws_sources-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c0273fd9ce8831e1d9c2c69d9a1cf6ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5794, "upload_time": "2019-06-24T09:32:34", "upload_time_iso_8601": "2019-06-24T09:32:34.994189Z", "url": "https://files.pythonhosted.org/packages/77/d4/a2685e8c003f8f424c80529484337d996e4189990501efe5c6dadf5f7439/typed_config_aws_sources-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27ce0702301c2af89d3596f8d3c70628", "sha256": "9f9f916bb8dc5b89d29c9a8f0e580826b9c9449966a9f4be1b4793830775ed76"}, "downloads": -1, "filename": "typed-config-aws-sources-0.2.0.tar.gz", "has_sig": false, "md5_digest": "27ce0702301c2af89d3596f8d3c70628", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5301, "upload_time": "2019-06-24T09:32:36", "upload_time_iso_8601": "2019-06-24T09:32:36.543050Z", "url": "https://files.pythonhosted.org/packages/07/e8/0598ffafe8bbffb917c17e3d4af591130d000721d51301968df5e61f7ee3/typed-config-aws-sources-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bf4d338407bccfdaa599216c06832d87", "sha256": "f668a9f5c7a8daabd20898c92e39c00974eb1e5965891389c70ea6ae967e8ded"}, "downloads": -1, "filename": "typed_config_aws_sources-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf4d338407bccfdaa599216c06832d87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5874, "upload_time": "2019-06-24T10:08:04", "upload_time_iso_8601": "2019-06-24T10:08:04.171254Z", "url": "https://files.pythonhosted.org/packages/4f/81/4e40599493b03e5a0c13493abb65b0ec4cd54298b487386116ad9da4ae5f/typed_config_aws_sources-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a6ff56db85454d51a63d2dd3a03504a", "sha256": "dd53ca9622fa30c32bef1412a0ba9f645df22fc8976c617d1ae9a3be655d65cc"}, "downloads": -1, "filename": "typed-config-aws-sources-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5a6ff56db85454d51a63d2dd3a03504a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5436, "upload_time": "2019-06-24T10:08:05", "upload_time_iso_8601": "2019-06-24T10:08:05.687870Z", "url": "https://files.pythonhosted.org/packages/60/f3/c2fcbe679f66480244ad6409e3cf2bf6cbce37bf64515863b9faa87845e9/typed-config-aws-sources-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b8d6e82ec4bc233f45c8695e616cfe6c", "sha256": "330788b02007479138e272578f3ca72cfe1fa921d9a8c61c8646735f539b47ea"}, "downloads": -1, "filename": "typed_config_aws_sources-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b8d6e82ec4bc233f45c8695e616cfe6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5941, "upload_time": "2019-06-24T11:13:25", "upload_time_iso_8601": "2019-06-24T11:13:25.086316Z", "url": "https://files.pythonhosted.org/packages/d7/7d/86bd3b34b6bbe6cc6d307f5175cc3e7271d4636280bf194e18eb709cb909/typed_config_aws_sources-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f352516fe736e7de3a3659b170fc5074", "sha256": "2a173ebf0d6a04159428fbbe132e77e0ad1afbcffabdc678ca758bc8c2783988"}, "downloads": -1, "filename": "typed-config-aws-sources-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f352516fe736e7de3a3659b170fc5074", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5496, "upload_time": "2019-06-24T11:13:26", "upload_time_iso_8601": "2019-06-24T11:13:26.529576Z", "url": "https://files.pythonhosted.org/packages/80/7d/92e23e881c2649f676e0d9bb6e6c538f9b2e790824a82a6f6fc114a83031/typed-config-aws-sources-0.2.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c6f392cc5adf1fbcbc383cbe2f8e8556", "sha256": "ff41be7ffa05dde405ec81cd1a2b4900cdf2f156768a292c7b59e07b39f60ba2"}, "downloads": -1, "filename": "typed_config_aws_sources-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c6f392cc5adf1fbcbc383cbe2f8e8556", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6347, "upload_time": "2020-01-06T18:01:22", "upload_time_iso_8601": "2020-01-06T18:01:22.838784Z", "url": "https://files.pythonhosted.org/packages/2b/cd/140cab4faf13a7dfc46aaa188da426fc11696614af0ebf343b18f4ca8cd1/typed_config_aws_sources-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b255f5ebd356d02139fc104330b33d7", "sha256": "d6e0174a569e5a050b5fc1e41ae5b052e52dd443e126111f1f4a3fe8e0602036"}, "downloads": -1, "filename": "typed-config-aws-sources-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9b255f5ebd356d02139fc104330b33d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6100, "upload_time": "2020-01-06T18:01:25", "upload_time_iso_8601": "2020-01-06T18:01:25.114943Z", "url": "https://files.pythonhosted.org/packages/11/38/6a617aa46853fd14f38e7046f9bbde93fcd171233aa51265c31285b43688/typed-config-aws-sources-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "6f02e56ded55485a7a01c596db4cdccb", "sha256": "bec345a408f8cfaacecd6dc76effb5f9bbde6876afba8be0371326ab344aa5b1"}, "downloads": -1, "filename": "typed_config_aws_sources-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f02e56ded55485a7a01c596db4cdccb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6630, "upload_time": "2020-03-11T12:44:14", "upload_time_iso_8601": "2020-03-11T12:44:14.701702Z", "url": "https://files.pythonhosted.org/packages/2d/21/ce15dcfd7b83614a0e04e3ba4c8d9b115b873a1c854cc39229eab08e63c1/typed_config_aws_sources-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca7292b77febbba3abe06e1264763295", "sha256": "2249018a830199bc0ce04566023870af2cc909e797c1ffacab7ab3c966c32f9e"}, "downloads": -1, "filename": "typed-config-aws-sources-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ca7292b77febbba3abe06e1264763295", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6558, "upload_time": "2020-03-11T12:44:15", "upload_time_iso_8601": "2020-03-11T12:44:15.881929Z", "url": "https://files.pythonhosted.org/packages/90/1e/ae93fe89128d64fc85d963fae68f0fe249ed49f6fe9c969858df9c5a35f3/typed-config-aws-sources-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "2ac7bce5e3684e46099e6521bdf227f4", "sha256": "12a7e8fc966fa06e9c0bc95cff9624947067b459d7cd946819453989f7dcf77d"}, "downloads": -1, "filename": "typed_config_aws_sources-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2ac7bce5e3684e46099e6521bdf227f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6673, "upload_time": "2020-03-11T14:55:51", "upload_time_iso_8601": "2020-03-11T14:55:51.609135Z", "url": "https://files.pythonhosted.org/packages/4d/2d/af8b53c5e1df4f7d1baa1a07828085310071b54c9d0374325422ad690169/typed_config_aws_sources-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8f64d642594dcb89e8ce16929ff309e", "sha256": "5ecce10e92002b1e46eeea2b4d68b8f8477cf4bccde51d08de40096f1c6f364a"}, "downloads": -1, "filename": "typed-config-aws-sources-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d8f64d642594dcb89e8ce16929ff309e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6613, "upload_time": "2020-03-11T14:55:52", "upload_time_iso_8601": "2020-03-11T14:55:52.890779Z", "url": "https://files.pythonhosted.org/packages/64/08/3df1627295d01e9191d5c83de16ab69c7873e0faa17d814398d34f33d0ba/typed-config-aws-sources-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ac7bce5e3684e46099e6521bdf227f4", "sha256": "12a7e8fc966fa06e9c0bc95cff9624947067b459d7cd946819453989f7dcf77d"}, "downloads": -1, "filename": "typed_config_aws_sources-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2ac7bce5e3684e46099e6521bdf227f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6673, "upload_time": "2020-03-11T14:55:51", "upload_time_iso_8601": "2020-03-11T14:55:51.609135Z", "url": "https://files.pythonhosted.org/packages/4d/2d/af8b53c5e1df4f7d1baa1a07828085310071b54c9d0374325422ad690169/typed_config_aws_sources-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8f64d642594dcb89e8ce16929ff309e", "sha256": "5ecce10e92002b1e46eeea2b4d68b8f8477cf4bccde51d08de40096f1c6f364a"}, "downloads": -1, "filename": "typed-config-aws-sources-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d8f64d642594dcb89e8ce16929ff309e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6613, "upload_time": "2020-03-11T14:55:52", "upload_time_iso_8601": "2020-03-11T14:55:52.890779Z", "url": "https://files.pythonhosted.org/packages/64/08/3df1627295d01e9191d5c83de16ab69c7873e0faa17d814398d34f33d0ba/typed-config-aws-sources-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:52 2020"}