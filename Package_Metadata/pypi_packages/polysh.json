{"info": {"author": "InnoGames System Administration", "author_email": "it@innogames.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: System :: Clustering", "Topic :: System :: Distributed Computing", "Topic :: System :: Shells", "Topic :: System :: Systems Administration"], "description": ".. image:: https://travis-ci.org/innogames/polysh.svg?branch=master\n    :target: https://travis-ci.org/innogames/polysh\n\nPolysh\n======\n\nPolysh (formerly called Group Shell or gsh) is a remote shell multiplexer.\nIt lets you control many remote shells at once in a single shell.  Unlike\nother commands dispatchers, it is interactive, so shells spawned on\nthe remote hosts are persistent.  It requires only a SSH server on the remote\nhosts, or some other way to open a remote shell.\n\nPython >= 3.5 is required.\n\nUsage::\n\n    polysh [OPTIONS]... HOSTS...\n\nPrompt\n------\n\nThe `polysh` prompt shows either `ready (X)>` or `waiting (X/Y)>`.\nThe `ready` prompt means that all enabled remote shells are ready to receive\ncommands and there are X such remote shells.  Failing that, the `waiting`\nprompt is shown, meaning that X remote shells are not yet ready to receive\ncommands.  Either way, all the readline editing features like navigation in\nthe history, searching in the history, and completion are available.\n\nCommands prefixed by an exclamation mark are executed locally.  Signals\n`Ctrl-C` and `Ctrl-D` are forwarded to the remote shells.\n\nThe prompt supports completion by pressing the Tab key.  Completion results\nare taken from the command line history, paths from the local filesystem and\ncommands from the user `$PATH`.\n\nHostnames with numbers can be generated by `polysh` using the `<START-END>`\nsyntax.  The generated numbers will be zero padded according to the number\nof zeroes in the `START` and `END` numbers.\n\nOptions\n-------\n\n`--version`\n    Show program`s version number and exit\n\n`-h, --help`\n    Show the help message and exit\n\n`--hosts-file=FILE`\n    Read hostnames from given file, one per line\n\n    Hostnames are given on\n    the command line, but they can also be read from files.  The format is\n    one hostname per line, `#` comments and blank lines are skipped.\n\n`--command=CMD`\n    Command to execute on the remote shells\n\n    This starts `polysh` in\n    non-interactive mode.  It will start the remote shells, send the command,\n    print the output and exit when the command is completed on all remote\n    shells.  This is the same as piping a command on the standard input.\n    Exit codes from the remote shells will be aggregated (taking the max)\n    to form `polysh`'s exit code.\n\n`--ssh=SSH`\n    Command to use for SSH\n\n    By default, `exec ssh -oLogLevel=Quiet -t %(host)s %(port)s`.\n    `polysh` spawns ssh for each connection which may spawn your default login\n    shell on the remote, but another shell command can be specified here. For\n    example, with `--ssh='usleep $((RANDOM*50)); exec ssh'` a delay will be\n    introduced to avoid all hosts accessing a NFS server at the same time.  If\n    the hostname should not be added at the end of the command, the macro\n    `%(host)s` can be inserted where the hostname should be placed.  Also, make\n    sure the command you use launches a `pty`, this may need the `-t` option for\n    `ssh`.\n\n`--user=USER`\n    Remote user to log in as\n\n    When specified, `polysh` will ssh to\n    USER@HOST instead of simply HOST.\n\n`--no-color`\n    Disable colored hostnames, enabled by default\n\n    When specified, `polysh` will not\n    use tty colors for the hostname prefix.\n\n`--password-file=FILE`\n    Read a password from the specified file\n\n    `-` is the tty.  This can be\n    used when public key authentication is not available, either write\n    the password in a file, or set FILE to `-` so that `polysh` will prompt\n    for a password.\n\n`--log-file=LOG_FILE`\n    File to log each machine conversation\n\n    If specified, `polysh`\n    will log all executed commands and their output in the file.  The logging\n    destination can be dynamically changed with the `:set_log` control\n    command.\n\n`--abort-errors`\n    Abort if some shell fails to initialize\n\n    By default, `polysh`\n    just logs an error when it cannot successfully open a remote shell.\n    With this option, it exits with a failure.\n\n`--debug`\n    Print debugging information\n\n    Use this option to see exactly what is\n    transferred between `polysh` and the remote shells.  This option can be\n    dynamically toggled using the `:set_debug` command in the control shell.\n\nControl Commands\n----------------\n\nControl commands are special purpose commands prefixed by a colon and\ndirected at `polysh` itself instead of the remote shells.  These commands are:\n\n`:add NAMES...`\n    Add one or many remote shells\n\n`:chdir LOCAL_PATH`\n    Change the current directory of `polysh` (not the remote shells)\n\n`:disable [SHELLS...]`\n    Disable sending commands to remote shells\n\n    If the command would have\n    no effect, it changes all other shells to the inverse enable value.\n    That is, if you disable only already disabled shells, it will first\n    enable all other shells.  The special characters `*`, `?`, and `[]` work\n    as expected.\n\n`:enable [SHELLS...]`\n    Enable sending commands to remote shells.  If the command would have\n    no effect, it changes all other shells to the inverse enable value.\n    That is, if you enable only already enabled shells, it will first\n    disable all other shells.  The special characters `*`, `?`, and `[]` work\n    as expected.\n\n`:export_vars`\n    Export some environment variables on enabled remote shells\n\n    `POLYSH_NR_SHELLS` is the total number of enabled shells.  `POLYSH_RANK`\n    uniquely identifies each shell with a number between `0` and\n    `POLYSH_NR_SHELLS - 1`.  `POLYSH_NAME` is the hostname as specified on\n    the command line and `POLYSH_DISPLAY_NAME` the hostname as displayed\n    by `:list` (most of the time the same as `POLYSH_NAME`).\n\n`:hide_password`\n    Do not echo the next typed line\n\n    This is useful when entering password.\n    If debugging or logging is enabled, it will be disabled to avoid\n    displaying a password. Therefore, you will have to re-enable logging or\n    debugging afterwards if need be.\n\n`:list [SHELLS...]`\n    List remote shells and their states\n\n    The output consists of:\n    `<hostname> <enabled?> <state>: <last printed line>`.  The special\n    characters `*`, `?`, and `[]` work as expected.\n\n`:purge [SHELLS...]`\n    Delete disabled remote shells\n\n    This helps to have a shorter list.\n    The special characters `*`, `?`, and `[]` work as expected.\n\n`:quit`\n    Quit `polysh`\n\n`:reconnect [SHELLS...]`\n    Try to reconnect to disconnected remote shells\n\n    The special characters `*`, `?`, and `[]` work as expected.\n\n`:rename [NEW_NAME]`\n    Rename all enabled remote shells with the argument\n\n    The argument will\n    be shell expanded on the remote processes.  With no argument, the original\n    hostname will be restored as the displayed name.\n\n`:reset_prompt [SHELLS...]`\n    Change the prompt to be recognized by `polysh`\n\n    The special characters `*`, `?`, and `[]` work as expected.\n\n`:send_ctrl LETTER [SHELLS...]`\n    Send a control character to remote shells\n\n    The first argument is the control character to send `c` or `d`.  Note that\n    these control characters can also be sent simply by typing them.\n    The remaining optional arguments are the destination shells.  The special\n    characters `*`, `?`, and `[]` work as expected.\n\n`:set_debug y|n [SHELLS...]`\n    Enable or disable debugging output for remote shells\n\n    The first\n    argument is `y` to enable the debugging output, `n` to disable it.\n    The remaining optional arguments are the selected shells. The special\n    characters `*`, `?`, and `[]` work as expected.\n\n`:set_log [LOCAL_PATH]`\n    Duplicate every console I/O into the given local file\n\n    If `LOCAL_PATH` is not given, restore the default behaviour of not logging.\n\n`:show_read_buffer [SHELLS...]`\n    Print the data read by remote shells\n\n    The special characters `*`, `?`, and `[]` work as expected.\n\nHistory\n-------\n\nThe tool is authored by Guillaume Chazarain <guichaz@gmail.com>.  The first\nversion released in 2006.  It has been maintained by InnoGames GmbH\nsince 2018.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/innogames/polysh/", "keywords": "gsh group shell cluster ssh multiplexer", "license": "", "maintainer": "", "maintainer_email": "", "name": "polysh", "package_url": "https://pypi.org/project/polysh/", "platform": "", "project_url": "https://pypi.org/project/polysh/", "project_urls": {"Homepage": "http://github.com/innogames/polysh/"}, "release_url": "https://pypi.org/project/polysh/0.11/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Control thousands of ssh sesions from a single prompt", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/innogames/polysh\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/innogames/polysh.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c549a4f27da68516c568946c6f344ff6bfa4315f/68747470733a2f2f7472617669732d63692e6f72672f696e6e6f67616d65732f706f6c7973682e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"polysh\">\n<h2>Polysh</h2>\n<p>Polysh (formerly called Group Shell or gsh) is a remote shell multiplexer.\nIt lets you control many remote shells at once in a single shell.  Unlike\nother commands dispatchers, it is interactive, so shells spawned on\nthe remote hosts are persistent.  It requires only a SSH server on the remote\nhosts, or some other way to open a remote shell.</p>\n<p>Python &gt;= 3.5 is required.</p>\n<p>Usage:</p>\n<pre>polysh [OPTIONS]... HOSTS...\n</pre>\n<div id=\"prompt\">\n<h3>Prompt</h3>\n<p>The <cite>polysh</cite> prompt shows either <cite>ready (X)&gt;</cite> or <cite>waiting (X/Y)&gt;</cite>.\nThe <cite>ready</cite> prompt means that all enabled remote shells are ready to receive\ncommands and there are X such remote shells.  Failing that, the <cite>waiting</cite>\nprompt is shown, meaning that X remote shells are not yet ready to receive\ncommands.  Either way, all the readline editing features like navigation in\nthe history, searching in the history, and completion are available.</p>\n<p>Commands prefixed by an exclamation mark are executed locally.  Signals\n<cite>Ctrl-C</cite> and <cite>Ctrl-D</cite> are forwarded to the remote shells.</p>\n<p>The prompt supports completion by pressing the Tab key.  Completion results\nare taken from the command line history, paths from the local filesystem and\ncommands from the user <cite>$PATH</cite>.</p>\n<p>Hostnames with numbers can be generated by <cite>polysh</cite> using the <cite>&lt;START-END&gt;</cite>\nsyntax.  The generated numbers will be zero padded according to the number\nof zeroes in the <cite>START</cite> and <cite>END</cite> numbers.</p>\n</div>\n<div id=\"options\">\n<h3>Options</h3>\n<dl>\n<dt><cite>\u2013version</cite></dt>\n<dd>Show program`s version number and exit</dd>\n<dt><cite>-h, \u2013help</cite></dt>\n<dd>Show the help message and exit</dd>\n<dt><cite>\u2013hosts-file=FILE</cite></dt>\n<dd><p>Read hostnames from given file, one per line</p>\n<p>Hostnames are given on\nthe command line, but they can also be read from files.  The format is\none hostname per line, <cite>#</cite> comments and blank lines are skipped.</p>\n</dd>\n<dt><cite>\u2013command=CMD</cite></dt>\n<dd><p>Command to execute on the remote shells</p>\n<p>This starts <cite>polysh</cite> in\nnon-interactive mode.  It will start the remote shells, send the command,\nprint the output and exit when the command is completed on all remote\nshells.  This is the same as piping a command on the standard input.\nExit codes from the remote shells will be aggregated (taking the max)\nto form <cite>polysh</cite>\u2019s exit code.</p>\n</dd>\n<dt><cite>\u2013ssh=SSH</cite></dt>\n<dd><p>Command to use for SSH</p>\n<p>By default, <cite>exec ssh -oLogLevel=Quiet -t %(host)s %(port)s</cite>.\n<cite>polysh</cite> spawns ssh for each connection which may spawn your default login\nshell on the remote, but another shell command can be specified here. For\nexample, with <cite>\u2013ssh=\u2019usleep $((RANDOM*50)); exec ssh\u2019</cite> a delay will be\nintroduced to avoid all hosts accessing a NFS server at the same time.  If\nthe hostname should not be added at the end of the command, the macro\n<cite>%(host)s</cite> can be inserted where the hostname should be placed.  Also, make\nsure the command you use launches a <cite>pty</cite>, this may need the <cite>-t</cite> option for\n<cite>ssh</cite>.</p>\n</dd>\n<dt><cite>\u2013user=USER</cite></dt>\n<dd><p>Remote user to log in as</p>\n<p>When specified, <cite>polysh</cite> will ssh to\n<a href=\"mailto:USER%40HOST\">USER<span>@</span>HOST</a> instead of simply HOST.</p>\n</dd>\n<dt><cite>\u2013no-color</cite></dt>\n<dd><p>Disable colored hostnames, enabled by default</p>\n<p>When specified, <cite>polysh</cite> will not\nuse tty colors for the hostname prefix.</p>\n</dd>\n<dt><cite>\u2013password-file=FILE</cite></dt>\n<dd><p>Read a password from the specified file</p>\n<p><cite>-</cite> is the tty.  This can be\nused when public key authentication is not available, either write\nthe password in a file, or set FILE to <cite>-</cite> so that <cite>polysh</cite> will prompt\nfor a password.</p>\n</dd>\n<dt><cite>\u2013log-file=LOG_FILE</cite></dt>\n<dd><p>File to log each machine conversation</p>\n<p>If specified, <cite>polysh</cite>\nwill log all executed commands and their output in the file.  The logging\ndestination can be dynamically changed with the <cite>:set_log</cite> control\ncommand.</p>\n</dd>\n<dt><cite>\u2013abort-errors</cite></dt>\n<dd><p>Abort if some shell fails to initialize</p>\n<p>By default, <cite>polysh</cite>\njust logs an error when it cannot successfully open a remote shell.\nWith this option, it exits with a failure.</p>\n</dd>\n<dt><cite>\u2013debug</cite></dt>\n<dd><p>Print debugging information</p>\n<p>Use this option to see exactly what is\ntransferred between <cite>polysh</cite> and the remote shells.  This option can be\ndynamically toggled using the <cite>:set_debug</cite> command in the control shell.</p>\n</dd>\n</dl>\n</div>\n<div id=\"control-commands\">\n<h3>Control Commands</h3>\n<p>Control commands are special purpose commands prefixed by a colon and\ndirected at <cite>polysh</cite> itself instead of the remote shells.  These commands are:</p>\n<dl>\n<dt><cite>:add NAMES\u2026</cite></dt>\n<dd>Add one or many remote shells</dd>\n<dt><cite>:chdir LOCAL_PATH</cite></dt>\n<dd>Change the current directory of <cite>polysh</cite> (not the remote shells)</dd>\n<dt><cite>:disable [SHELLS\u2026]</cite></dt>\n<dd><p>Disable sending commands to remote shells</p>\n<p>If the command would have\nno effect, it changes all other shells to the inverse enable value.\nThat is, if you disable only already disabled shells, it will first\nenable all other shells.  The special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work\nas expected.</p>\n</dd>\n<dt><cite>:enable [SHELLS\u2026]</cite></dt>\n<dd>Enable sending commands to remote shells.  If the command would have\nno effect, it changes all other shells to the inverse enable value.\nThat is, if you enable only already enabled shells, it will first\ndisable all other shells.  The special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work\nas expected.</dd>\n<dt><cite>:export_vars</cite></dt>\n<dd><p>Export some environment variables on enabled remote shells</p>\n<p><cite>POLYSH_NR_SHELLS</cite> is the total number of enabled shells.  <cite>POLYSH_RANK</cite>\nuniquely identifies each shell with a number between <cite>0</cite> and\n<cite>POLYSH_NR_SHELLS - 1</cite>.  <cite>POLYSH_NAME</cite> is the hostname as specified on\nthe command line and <cite>POLYSH_DISPLAY_NAME</cite> the hostname as displayed\nby <cite>:list</cite> (most of the time the same as <cite>POLYSH_NAME</cite>).</p>\n</dd>\n<dt><cite>:hide_password</cite></dt>\n<dd><p>Do not echo the next typed line</p>\n<p>This is useful when entering password.\nIf debugging or logging is enabled, it will be disabled to avoid\ndisplaying a password. Therefore, you will have to re-enable logging or\ndebugging afterwards if need be.</p>\n</dd>\n<dt><cite>:list [SHELLS\u2026]</cite></dt>\n<dd><p>List remote shells and their states</p>\n<p>The output consists of:\n<cite>&lt;hostname&gt; &lt;enabled?&gt; &lt;state&gt;: &lt;last printed line&gt;</cite>.  The special\ncharacters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:purge [SHELLS\u2026]</cite></dt>\n<dd><p>Delete disabled remote shells</p>\n<p>This helps to have a shorter list.\nThe special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:quit</cite></dt>\n<dd>Quit <cite>polysh</cite></dd>\n<dt><cite>:reconnect [SHELLS\u2026]</cite></dt>\n<dd><p>Try to reconnect to disconnected remote shells</p>\n<p>The special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:rename [NEW_NAME]</cite></dt>\n<dd><p>Rename all enabled remote shells with the argument</p>\n<p>The argument will\nbe shell expanded on the remote processes.  With no argument, the original\nhostname will be restored as the displayed name.</p>\n</dd>\n<dt><cite>:reset_prompt [SHELLS\u2026]</cite></dt>\n<dd><p>Change the prompt to be recognized by <cite>polysh</cite></p>\n<p>The special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:send_ctrl LETTER [SHELLS\u2026]</cite></dt>\n<dd><p>Send a control character to remote shells</p>\n<p>The first argument is the control character to send <cite>c</cite> or <cite>d</cite>.  Note that\nthese control characters can also be sent simply by typing them.\nThe remaining optional arguments are the destination shells.  The special\ncharacters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:set_debug y|n [SHELLS\u2026]</cite></dt>\n<dd><p>Enable or disable debugging output for remote shells</p>\n<p>The first\nargument is <cite>y</cite> to enable the debugging output, <cite>n</cite> to disable it.\nThe remaining optional arguments are the selected shells. The special\ncharacters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n<dt><cite>:set_log [LOCAL_PATH]</cite></dt>\n<dd><p>Duplicate every console I/O into the given local file</p>\n<p>If <cite>LOCAL_PATH</cite> is not given, restore the default behaviour of not logging.</p>\n</dd>\n<dt><cite>:show_read_buffer [SHELLS\u2026]</cite></dt>\n<dd><p>Print the data read by remote shells</p>\n<p>The special characters <cite>*</cite>, <cite>?</cite>, and <cite>[]</cite> work as expected.</p>\n</dd>\n</dl>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<p>The tool is authored by Guillaume Chazarain &lt;<a href=\"mailto:guichaz%40gmail.com\">guichaz<span>@</span>gmail<span>.</span>com</a>&gt;.  The first\nversion released in 2006.  It has been maintained by InnoGames GmbH\nsince 2018.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5356867, "releases": {"0.11": [{"comment_text": "", "digests": {"md5": "b00e7566335aa3532c060c468b23b478", "sha256": "1d6f1e9a4d67a74e5a36c0620863f761c3837a71d8b157e68741bd755e1c95f8"}, "downloads": -1, "filename": "polysh-0.11.tar.gz", "has_sig": false, "md5_digest": "b00e7566335aa3532c060c468b23b478", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23654, "upload_time": "2019-06-04T10:58:38", "upload_time_iso_8601": "2019-06-04T10:58:38.934340Z", "url": "https://files.pythonhosted.org/packages/68/4c/62d00950a1c91045be6a32bdfd88ccb1d2e5d7ddef1cc241721a4be7eef5/polysh-0.11.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "da8b805fbbc2bd970e1f451767398543", "sha256": "803947146bdd2f24faecf0631d8f8e0a72d787eb9086f0e662c668dd720f8b32"}, "downloads": -1, "filename": "polysh-0.4.zip", "has_sig": false, "md5_digest": "da8b805fbbc2bd970e1f451767398543", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49531, "upload_time": "2014-03-27T17:20:49", "upload_time_iso_8601": "2014-03-27T17:20:49.968995Z", "url": "https://files.pythonhosted.org/packages/f2/d3/369bff2d3577610875310c86a795e1c55f57ae30be0de4dea14d46fc8b79/polysh-0.4.zip", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "bd3f3e42f158e9e25337a7f73167f8e0", "sha256": "aeefc6a9cf221dda1e896f60bc32e869e3d575cccf82e111464ff87ca0fa6b0c"}, "downloads": -1, "filename": "polysh-0.9.tar.gz", "has_sig": false, "md5_digest": "bd3f3e42f158e9e25337a7f73167f8e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25688, "upload_time": "2018-06-13T11:35:22", "upload_time_iso_8601": "2018-06-13T11:35:22.551266Z", "url": "https://files.pythonhosted.org/packages/1d/58/27c579aa4931add428c09dc8e3c2f6527df49619082c42627f5e56aff8b9/polysh-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b00e7566335aa3532c060c468b23b478", "sha256": "1d6f1e9a4d67a74e5a36c0620863f761c3837a71d8b157e68741bd755e1c95f8"}, "downloads": -1, "filename": "polysh-0.11.tar.gz", "has_sig": false, "md5_digest": "b00e7566335aa3532c060c468b23b478", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23654, "upload_time": "2019-06-04T10:58:38", "upload_time_iso_8601": "2019-06-04T10:58:38.934340Z", "url": "https://files.pythonhosted.org/packages/68/4c/62d00950a1c91045be6a32bdfd88ccb1d2e5d7ddef1cc241721a4be7eef5/polysh-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:43 2020"}