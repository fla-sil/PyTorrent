{"info": {"author": "Sasho Savkov", "author_email": "me@sasho.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# bioeval\n\n[![CircleCI](https://circleci.com/gh/savkov/bioeval/tree/master.svg?style=svg&circle-token=a7c321334dce133af9fca534f186d8e5816ee1fc)](https://circleci.com/gh/savkov/bioeval/tree/master)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nCoNLL-2000 style evaluation of data using BIO and BEISO representation for \nmutli-token entities (i.e. chunks).\n\n### Install\n\nIn the root folder execute:\n\n`pip install bioeval`\n\n### Change Log \n\n* [pypi release](https://pypi.org/project/bioeval/) and automated CI releases\n* `bioeval` now supports pandas `DataFame` objects through `bioeval.evaluate_df`.\n\n### Usage\n\nThe library supports two ways of evaluating span annotation. The first is the\nnative format way while the second uses a pandas DataFrame format.\n\n#### Native input format\n\nThe native input format is a set of tuples, where each tuple signifies the \ngroup of tokens in a span. Tokens are also denoted by tuples that are supposed\nto be unique. The user can achieve that uniqueness through adding a unique \nidentifier to each token as in the example bellow.\n\n```python\nfrom bioeval import evaluate\n\n\n# gold chunks\nchunk = {\n    ((1, 'Gold', 'N', 'B-NP'),),\n    ((2, 'is', 'V', 'B-MV'),),\n    ((3, 'green', 'J', 'B-AP'),),\n    ((4, '.', '.', 'B-NP'),),\n    (\n        (5, 'The', 'D', 'B-NP'),\n        (6, 'red', 'J', 'I-NP'),\n        (7, 'square', 'N', 'I-NP')\n    ),\n    ((8, 'is', 'V', 'B-MV'),),\n    (\n        (9, 'very', 'A', 'B-AP'),\n        (10, 'boring', 'J', 'I-AP')\n    ),\n    ((11, '.', '.', 'O'),)\n}\n\n# candidate chunks\nguess_chunk = {\n    ((1, 'Gold', 'N', 'B-NP'),),\n    ((2, 'is', 'V', 'I-NP'),),\n    ((3, 'green', 'J', 'B-AP'),),\n    ((4, '.', '.', 'B-NP'),),\n    (\n        (5, 'The', 'D', 'B-NP'),\n        (6, 'red', 'J', 'I-NP')\n    ),\n    ((7, 'square', 'N', 'O'),),\n    ((8, 'is', 'V', 'B-MV'),),\n    (\n        (9, 'very', 'A', 'B-AP'),\n        (10, 'boring', 'J', 'I-AP')\n    ),\n    ((8, '.', '.', 'O'),)\n}\n\n# evaluation\nf1, pr, re = evaluate(gold_sequence=chunk, guess_sequence=guess_chunk, chunk_col=3)\nprint(f1)\n# 71.43\n```\n\n#### Dataframe format\n\nThe library supports dataframes input through the use of the `evaluate_df`\nmethod, which needs the additional `chunkcol` and `guesscol` parameters to\nspecify the gold and candidate spans.\n\n```python\nimport pandas as pd\nfrom bioeval import evaluate_df\n\n# input data as a JSON parsed to a DataFrame object\ndf = pd.DataFrame(\n    [\n        {'chunktag': 'B-foo','guesstag': 'B-foo'},\n        {'chunktag': 'I-foo','guesstag': 'I-foo'},\n        {'chunktag': 'O','guesstag': 'O'},\n        {'chunktag': 'B-bar','guesstag': 'B-bar'},\n        {'chunktag': 'B-foo','guesstag': 'B-foo'},\n        {'chunktag': 'O','guesstag': 'O'},\n        {'chunktag': 'B-foo','guesstag': 'B-foo'},\n        {'chunktag': 'I-foo','guesstag': 'I-foo'},\n        {'chunktag': 'B-bar','guesstag': 'B-bar'},\n        {'chunktag': 'I-bar','guesstag': 'I-bar'},\n        {'chunktag': 'O','guesstag': 'O'},\n        {'chunktag': 'B-foo','guesstag': 'B-foo'},\n        {'chunktag': 'B-bar','guesstag': 'I-foo'},\n        {'chunktag': 'B-foo','guesstag': 'B-foo'},\n        {'chunktag': 'I-foo','guesstag': 'B-foo'}\n    ]\n)\n\nf1, pr, re = evaluate_df(df=df, chunkcol='chunktag', guesscol='guesstag')\n\nprint(f1)\n>>> 62.5\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/savkov/bioeval", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bioeval", "package_url": "https://pypi.org/project/bioeval/", "platform": "", "project_url": "https://pypi.org/project/bioeval/", "project_urls": {"Homepage": "https://github.com/savkov/bioeval"}, "release_url": "https://pypi.org/project/bioeval/1.1.14/", "requires_dist": ["iterpipes3 (==0.4)", "numpy (==1.16.4)"], "requires_python": "", "summary": "BIO and BEISO evaluation library", "version": "1.1.14", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bioeval</h1>\n<p><a href=\"https://circleci.com/gh/savkov/bioeval/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f639cc3df396a98e4007dc4c3385a8f6b5b4236/68747470733a2f2f636972636c6563692e636f6d2f67682f7361766b6f762f62696f6576616c2f747265652f6d61737465722e7376673f7374796c653d73766726636972636c652d746f6b656e3d61376333323133333464636531333361663966636135333466313836643865353831366565316663\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>CoNLL-2000 style evaluation of data using BIO and BEISO representation for\nmutli-token entities (i.e. chunks).</p>\n<h3>Install</h3>\n<p>In the root folder execute:</p>\n<p><code>pip install bioeval</code></p>\n<h3>Change Log</h3>\n<ul>\n<li><a href=\"https://pypi.org/project/bioeval/\" rel=\"nofollow\">pypi release</a> and automated CI releases</li>\n<li><code>bioeval</code> now supports pandas <code>DataFame</code> objects through <code>bioeval.evaluate_df</code>.</li>\n</ul>\n<h3>Usage</h3>\n<p>The library supports two ways of evaluating span annotation. The first is the\nnative format way while the second uses a pandas DataFrame format.</p>\n<h4>Native input format</h4>\n<p>The native input format is a set of tuples, where each tuple signifies the\ngroup of tokens in a span. Tokens are also denoted by tuples that are supposed\nto be unique. The user can achieve that uniqueness through adding a unique\nidentifier to each token as in the example bellow.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bioeval</span> <span class=\"kn\">import</span> <span class=\"n\">evaluate</span>\n\n\n<span class=\"c1\"># gold chunks</span>\n<span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Gold'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'B-MV'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'green'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'B-AP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'The'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'I-NP'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'square'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'I-NP'</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">((</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'B-MV'</span><span class=\"p\">),),</span>\n    <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B-AP'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'boring'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'I-AP'</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">((</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">),)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># candidate chunks</span>\n<span class=\"n\">guess_chunk</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Gold'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'I-NP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'green'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'B-AP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),),</span>\n    <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'The'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'B-NP'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'I-NP'</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'square'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">),),</span>\n    <span class=\"p\">((</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'B-MV'</span><span class=\"p\">),),</span>\n    <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B-AP'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'boring'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'I-AP'</span><span class=\"p\">)</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">((</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">),)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># evaluation</span>\n<span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">pr</span><span class=\"p\">,</span> <span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">gold_sequence</span><span class=\"o\">=</span><span class=\"n\">chunk</span><span class=\"p\">,</span> <span class=\"n\">guess_sequence</span><span class=\"o\">=</span><span class=\"n\">guess_chunk</span><span class=\"p\">,</span> <span class=\"n\">chunk_col</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">)</span>\n<span class=\"c1\"># 71.43</span>\n</pre>\n<h4>Dataframe format</h4>\n<p>The library supports dataframes input through the use of the <code>evaluate_df</code>\nmethod, which needs the additional <code>chunkcol</code> and <code>guesscol</code> parameters to\nspecify the gold and candidate spans.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bioeval</span> <span class=\"kn\">import</span> <span class=\"n\">evaluate_df</span>\n\n<span class=\"c1\"># input data as a JSON parsed to a DataFrame object</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-bar'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-bar'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-bar'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-bar'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-bar'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-bar'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'O'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-bar'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'chunktag'</span><span class=\"p\">:</span> <span class=\"s1\">'I-foo'</span><span class=\"p\">,</span><span class=\"s1\">'guesstag'</span><span class=\"p\">:</span> <span class=\"s1\">'B-foo'</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">pr</span><span class=\"p\">,</span> <span class=\"n\">re</span> <span class=\"o\">=</span> <span class=\"n\">evaluate_df</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">chunkcol</span><span class=\"o\">=</span><span class=\"s1\">'chunktag'</span><span class=\"p\">,</span> <span class=\"n\">guesscol</span><span class=\"o\">=</span><span class=\"s1\">'guesstag'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mf\">62.5</span>\n</pre>\n\n          </div>"}, "last_serial": 5454213, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "6509d6a0e93a2decf4ad1dec3c65c6ec", "sha256": "87d45f4916126ea207a6b70ca78d9afdc60972102f7f33e3a6c2176c17d4deb0"}, "downloads": -1, "filename": "bioeval-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6509d6a0e93a2decf4ad1dec3c65c6ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6513, "upload_time": "2019-06-17T22:17:48", "upload_time_iso_8601": "2019-06-17T22:17:48.486547Z", "url": "https://files.pythonhosted.org/packages/5d/cc/4a24511ac6c0c810086826ce7d2c19537d5876d0c8e23aa11bd520c93b52/bioeval-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fe74f0da9bdd4f81be13606137d5e76", "sha256": "0f4d29cb8a51d5da412cb3b89d3533039dc96f03a9a6fad6c59c9ce60e5b5f5d"}, "downloads": -1, "filename": "bioeval-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3fe74f0da9bdd4f81be13606137d5e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5142, "upload_time": "2019-06-17T22:17:53", "upload_time_iso_8601": "2019-06-17T22:17:53.474808Z", "url": "https://files.pythonhosted.org/packages/17/a6/2c7a68a9f5ae204371a443279f7c63e2324bc7f0e87ef215c0f18c73aa51/bioeval-0.1.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "04f8e5805d0f8c853667663fd97ebf25", "sha256": "aeb350b13e5d581099dae2a7e4a52cab87cbef491409a8371999b8840420520d"}, "downloads": -1, "filename": "bioeval-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04f8e5805d0f8c853667663fd97ebf25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5497, "upload_time": "2019-06-17T22:17:50", "upload_time_iso_8601": "2019-06-17T22:17:50.698170Z", "url": "https://files.pythonhosted.org/packages/d8/b1/9e605d1a1de8fe92693efbc68fc82255625fef3c51fe49cd3e2b3db5593f/bioeval-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cdc4827622af750a8eb20aed5e8a8e9", "sha256": "b463328a2c80dec6047c6cc339d76d8625f736e47eddaf1426ed8193a7b9509b"}, "downloads": -1, "filename": "bioeval-1.1.tar.gz", "has_sig": false, "md5_digest": "9cdc4827622af750a8eb20aed5e8a8e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4348, "upload_time": "2019-06-17T22:17:56", "upload_time_iso_8601": "2019-06-17T22:17:56.470793Z", "url": "https://files.pythonhosted.org/packages/61/5b/27d3275bc43544d76390b901496b60b98d4c359ddde849ab10c8039db256/bioeval-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7abfbfeea3c14ab0effbb7a51221a1a4", "sha256": "f548cb54ff1211ea8ba3137ee27f5a5e3bda6fd61907bb862a1dff5d5b5acd23"}, "downloads": -1, "filename": "bioeval-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7abfbfeea3c14ab0effbb7a51221a1a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6514, "upload_time": "2019-06-17T22:17:52", "upload_time_iso_8601": "2019-06-17T22:17:52.168393Z", "url": "https://files.pythonhosted.org/packages/49/9b/d57866d877664c32c7d3fa5bf6dabec8cf149af530bc5aba2cb747125584/bioeval-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "611e7680c3f707ff00ea7ee9c0de2f37", "sha256": "488f14416046093af447e13522ca7ece7f1290208ec613426a2fd3b1108b0efe"}, "downloads": -1, "filename": "bioeval-1.1.1.tar.gz", "has_sig": false, "md5_digest": "611e7680c3f707ff00ea7ee9c0de2f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5146, "upload_time": "2019-06-17T22:17:54", "upload_time_iso_8601": "2019-06-17T22:17:54.949218Z", "url": "https://files.pythonhosted.org/packages/7b/84/df1b598db1059df4687ec94aaa9fed8d5101b607d729d6297c2400280e42/bioeval-1.1.1.tar.gz", "yanked": false}], "1.1.13": [{"comment_text": "", "digests": {"md5": "e81a30b34d88c7c11884c20b6b1cc483", "sha256": "86d8bc169047fcb505a30d41022368eba191008a88bd82deae6efe02e0dac8c8"}, "downloads": -1, "filename": "bioeval-1.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "e81a30b34d88c7c11884c20b6b1cc483", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7022, "upload_time": "2019-06-26T22:44:57", "upload_time_iso_8601": "2019-06-26T22:44:57.623713Z", "url": "https://files.pythonhosted.org/packages/13/6a/91fc5823a635aa791d90950a082aadbf7a49706d73ab4623036968833c5a/bioeval-1.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd7404c653a93dd47b6cbd30a6145cbb", "sha256": "bfcbc0ada1999bd1a1c1bb5bcec73b6eb4e643bae708636ebc22132b601b5658"}, "downloads": -1, "filename": "bioeval-1.1.13.tar.gz", "has_sig": false, "md5_digest": "cd7404c653a93dd47b6cbd30a6145cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5646, "upload_time": "2019-06-26T22:44:59", "upload_time_iso_8601": "2019-06-26T22:44:59.231650Z", "url": "https://files.pythonhosted.org/packages/8f/79/cbaf5d42a0985a76cf95ccadee0410cd99be4e63b66768d7b42ada8a0dd2/bioeval-1.1.13.tar.gz", "yanked": false}], "1.1.14": [{"comment_text": "", "digests": {"md5": "6f7e8c4df65c6a94def1b87ee369eed6", "sha256": "2256de82a6019e713d8646a7e7850b28866e3b4f682c5a6d9d21cb68397a53bd"}, "downloads": -1, "filename": "bioeval-1.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "6f7e8c4df65c6a94def1b87ee369eed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7024, "upload_time": "2019-06-26T22:59:22", "upload_time_iso_8601": "2019-06-26T22:59:22.786057Z", "url": "https://files.pythonhosted.org/packages/9c/5b/85f8d2a297b135a5f687225d4dab609d0fa9ac383a6f469cc9d6e87f1b93/bioeval-1.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbe4ad1c92031b0a86f5d8c9de9987cf", "sha256": "a442e44d78ac1b8700e35f014d00183f13f70bb87355260696e492306dec1fb6"}, "downloads": -1, "filename": "bioeval-1.1.14.tar.gz", "has_sig": false, "md5_digest": "dbe4ad1c92031b0a86f5d8c9de9987cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5693, "upload_time": "2019-06-26T22:59:24", "upload_time_iso_8601": "2019-06-26T22:59:24.332599Z", "url": "https://files.pythonhosted.org/packages/6c/65/9cc3c8cb1f918b15cd86df9811fddfdb6fe9cb555906e4541708ccd25416/bioeval-1.1.14.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "1f8cd14752ad1b7fea66c6e16bbdd763", "sha256": "c113f3f60eb17569f8d31f73dc94b07e493cd8d62ab15d2edc0a3861693538ee"}, "downloads": -1, "filename": "bioeval-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1f8cd14752ad1b7fea66c6e16bbdd763", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7008, "upload_time": "2019-06-26T22:20:12", "upload_time_iso_8601": "2019-06-26T22:20:12.758182Z", "url": "https://files.pythonhosted.org/packages/bf/b3/9ccd4701d61d99e91b82c61a370b4c26ecf7c234aa97b34e195c624c6d06/bioeval-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "920d6922621ad07bfd68ce388c6d7759", "sha256": "3c3e2dbd0c65b27ca3da82825a21c8fa7912d272b3213524c5544535d2e9be0a"}, "downloads": -1, "filename": "bioeval-1.1.2.tar.gz", "has_sig": false, "md5_digest": "920d6922621ad07bfd68ce388c6d7759", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5660, "upload_time": "2019-06-26T22:20:14", "upload_time_iso_8601": "2019-06-26T22:20:14.214504Z", "url": "https://files.pythonhosted.org/packages/d0/51/099f4a72dd0ac83df7a4753b662ef90c29188e2ffaa79d7045e2a6b2c854/bioeval-1.1.2.tar.gz", "yanked": false}], "1.1.2.dev0": [{"comment_text": "", "digests": {"md5": "694b8fcb019fa2b77af4142d66638b7e", "sha256": "1b9cf071e4f529be885b3809f2fdc298cc9d9f787a9382ec9628649751fa44b2"}, "downloads": -1, "filename": "bioeval-1.1.2.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "694b8fcb019fa2b77af4142d66638b7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7076, "upload_time": "2019-06-26T21:33:28", "upload_time_iso_8601": "2019-06-26T21:33:28.922634Z", "url": "https://files.pythonhosted.org/packages/02/08/a28c4d948a096714a0ee4e85ceadc825459a40271b0ce97920004cf7e4a3/bioeval-1.1.2.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db8de9ef826c82ddfeaf1ed11786ddcf", "sha256": "e9ad5e86f4a53ab81df92156f67833225bf95e97c7d6a9628f8e1e7faca5dce2"}, "downloads": -1, "filename": "bioeval-1.1.2.dev0.tar.gz", "has_sig": false, "md5_digest": "db8de9ef826c82ddfeaf1ed11786ddcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5664, "upload_time": "2019-06-26T21:33:30", "upload_time_iso_8601": "2019-06-26T21:33:30.064024Z", "url": "https://files.pythonhosted.org/packages/66/5a/8a63e17ce580d5b1b379677aca6b4aff63e3e30d422ef1c4e5a97c7bb44a/bioeval-1.1.2.dev0.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "41e7e8d71988f90c6be97ca4189577e7", "sha256": "aafd148f46aa37371368da6e68111c089ba476558d47df2d3d6dfed0615f9307"}, "downloads": -1, "filename": "bioeval-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "41e7e8d71988f90c6be97ca4189577e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7005, "upload_time": "2019-06-26T22:29:48", "upload_time_iso_8601": "2019-06-26T22:29:48.992401Z", "url": "https://files.pythonhosted.org/packages/72/8f/24dfe126084159d0ec6ad6b3d2af0bf65c5fcb370e0ea26e3745ff00e6b3/bioeval-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29e944ff034f8c0c92c7f5b8fbdfb78e", "sha256": "78bfada7f0a01e876259677457ce8dacc535ca1be9e30e0d555509c944d18c78"}, "downloads": -1, "filename": "bioeval-1.1.3.tar.gz", "has_sig": false, "md5_digest": "29e944ff034f8c0c92c7f5b8fbdfb78e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5708, "upload_time": "2019-06-26T22:29:50", "upload_time_iso_8601": "2019-06-26T22:29:50.471879Z", "url": "https://files.pythonhosted.org/packages/31/f0/7d10c70736a66089e96f65f09e07cd8656b82c60bc4ef4616a2fe5e52551/bioeval-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f7e8c4df65c6a94def1b87ee369eed6", "sha256": "2256de82a6019e713d8646a7e7850b28866e3b4f682c5a6d9d21cb68397a53bd"}, "downloads": -1, "filename": "bioeval-1.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "6f7e8c4df65c6a94def1b87ee369eed6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7024, "upload_time": "2019-06-26T22:59:22", "upload_time_iso_8601": "2019-06-26T22:59:22.786057Z", "url": "https://files.pythonhosted.org/packages/9c/5b/85f8d2a297b135a5f687225d4dab609d0fa9ac383a6f469cc9d6e87f1b93/bioeval-1.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbe4ad1c92031b0a86f5d8c9de9987cf", "sha256": "a442e44d78ac1b8700e35f014d00183f13f70bb87355260696e492306dec1fb6"}, "downloads": -1, "filename": "bioeval-1.1.14.tar.gz", "has_sig": false, "md5_digest": "dbe4ad1c92031b0a86f5d8c9de9987cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5693, "upload_time": "2019-06-26T22:59:24", "upload_time_iso_8601": "2019-06-26T22:59:24.332599Z", "url": "https://files.pythonhosted.org/packages/6c/65/9cc3c8cb1f918b15cd86df9811fddfdb6fe9cb555906e4541708ccd25416/bioeval-1.1.14.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:26 2020"}