{"info": {"author": "mFabrik Research Oy", "author_email": "info@mfabrik.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python"], "description": ".. contents ::\n\nIntroduction\n------------\n\nmfabrik.behaviorutilities is plone.behavior support and helper package for Plone 3 and Archetypes.\n\nAbout Behavior pattern\n-----------------------\n\nBehavior pattern is a way to provide extensible behavior for content objects,\nwithout touching the actual content object class source code and\nso that behaviors can be turned on and off.\n\nFirst read plone.behavior tutorial\n\n* http://plone.org/products/dexterity/documentation/manual/behaviors\n\nNote that the tutorial does not describe how to use behavior objects\nwith Archetypes based content and this Python module tries to fill\nin some gaps there.\n\nFeatures\n--------\n\n* Create plone.behavior behaviors for Archetypes objects and make them assignable\n\n* On-demand behavior object creation - do not make saves or Zope transactions\n  if behavior defaults are not changed\n\n* z3c.form support to make behavior objects context aware and thus selection widget vocabulary resolving working\n\n* Traversing tools\n\nExample products\n-----------------\n\nThe following Plone add-ons have been created based on this code\n\n* https://svn.plone.org/svn/collective/mfabrik.trafficsigns/trunk/mfabrik/trafficsigns/behaviors.py\n\n* http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/behaviors.py\n\n* http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.convergence/gomobile/convergence/behaviors.py\n\n* http://svn.plone.org/svn/collective/plone.app.headeranimation/trunk/README.txt\n\nSample code walkthrough\n-----------------------\n\n*Note*: Code here is only for example purposes and probably does not work as is.\nProper usage documentation will be done after the framework has taken more shape.\nRefer to existing code users for more help.\n\nBehavior is defined as an interface, which also defines form options\nwhich user can edit for this behavior. Schema is defined using *plone.directives.form* package::\n\n        class IMultiChannelBehavior(form.Schema):\n            \"\"\" How content and its children react to differt medias \"\"\"\n                \n            contentMedias = schema.Choice(title=u\"Content medias\",\n                                          description=u\"Does this content appear on web, mobile or both\",\n                                          default=ContentMediaOption.USE_PARENT,\n                                          required=True)\n        \n             # More form fields here\n        \n        alsoProvides(IMultiChannelBehavior, form.IFormFieldProvider)\n\nThe behavior implementation is persistent Zope object,\nwhich knowns its *context* i.e. object for which behavior is assigned\nby using mfabrik.beahviorutilities.volatilecontext.VolatileContext base class,\nwhich is a subclass of Zope Persistent class. \n\nImplementation maps behavior interface fields itself as\nclass attributes using FieldProperties.\n\nWe use AnnotationPersistentFactory to store behavior.\nThis means that when behavior is once saved on your content object, \nyou can access by directly by traversing::\n\n        context.__annotations__[\"your_annotation_key_name\"] \n\nExample::\n\n        class MobileBehaviorStorage(VolatileContext):\n        \n            # Implement your behavior\n            implements(IMobileBehavior)\n        \n            mobileFolderListing = FieldProperty(IMobileBehavior[\"mobileFolderListing\"])\n        \n            appearInFolderListing = FieldProperty(IMobileBehavior[\"appearInFolderListing\"])\n        \n\n        # This defines a behavior factoty method        \n        mobile_behavior_factory = AnnotationPersistentFactory(MobileBehaviorStorage, \"mobile\")\n\nNow you can create and query behaviors.\n\nFirst we check that the behavior is assignable. Currently it is hardcoded\nthat all behaviors are assignable to all Archetypes content objects::\n\n        self.loginAsPortalOwner()\n        self.portal.invokeFactory(\"Document\", \"doc\")\n        doc = self.portal.doc\n        \n        # Check assignable works\n        from plone.behavior.interfaces import IBehaviorAssignable\n        assignable = IBehaviorAssignable(doc, None)\n\n        self.assertTrue(assignable.supports(IMobileBehavior))\n        self.assertNotEqual(assignable, None)\n\nWhen we query the behavior it is created on the fly if it does\nnot already exist on the content. If the behavior is created,\nthen its attributes are populated with the default values specific in the schema::\n\n        behavior = IMobileBehavior(doc)\n\nBehavior knowns on which content it belongs. \nThis is implemented as volatile reference, so no circular\npointers are stored to ZODB.\n\n        doc == behavior.context\n        \nYou can edit the behavior parameters by using properties defined \non the storage class::\n\n        behavior.mobileFolderListing = True\n\nIf you do any changes to the behavior you need to call save()\nmethod of the VolatileContext class. This makes sure that \nif the behavior is not the default behavior, you need to \nactually save persistent parameters in the annotations::\n\n        behavior.save()\n\n        # Recreate behavior from the scratch \n        # and see it is persistent\n        behavior = IMobileBehavior(doc)\n        assert behavior.behavior.mobileFolderListing == True\n        \nEach behavior also needs edit form - you can easily do this using z3c.form::\n\n        class MobileForm(z3c.form.form.EditForm):\n            \"\"\" Folder/page specific mobile publishing options \"\"\"\n        \n            fields = field.Fields(IMobileBehavior)\n            \n            prefix = \"mobile\"\n            label = u\"Mobile navigation options\"\n        \n            def update(self):\n                return z3c.form.form.EditForm.update(self)\n            \n            def getContent(self):\n                \"\"\"\n                Return the object which the form should edit.\n                \"\"\"\n                behavior = IMobileBehavior(self.context)\n                return behavior\n        \n            def applyChanges(self, data):\n                # Call super\n                content = self.getContent() \n                val = z3c.form.form.EditForm.applyChanges(self, data)\n                \n                # Write behavior to database\n                content = self.getContent() \n                content.save()\n                \n                return val\n       \n       MobileFormView = wrap_form(MobileForm)\n\nIt is easiest to link this form to your object using document_actions \nlink. actions.xml snippet::\n\n        <?xml version=\"1.0\"?>\n        <object name=\"portal_actions\" meta_type=\"Plone Actions Tool\"\n           xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\">\n        \n         <object name=\"document_actions\" meta_type=\"CMF Action Category\">\n        \n          <object name=\"mobile_options\" meta_type=\"CMF Action\" i18n:domain=\"plone\">\n           <property name=\"title\" i18n:translate=\"\">Mobile settings</property>\n           <property name=\"description\"\n              i18n:translate=\"\">Set mobile publishing options</property>\n           <property\n              name=\"url_expr\">string:$object_url/@@mobile_options</property>\n           <property name=\"icon_expr\"></property>\n           <property name=\"available_expr\"></property>\n           <property name=\"permissions\">\n            <element value=\"Modify portal content\"/>\n           </property>\n           <property name=\"visible\">True</property>\n          </object>\n          \n         </object>\n        \n        </object>\n\nAuthor\n------\n\n`mFabrik Research Oy <mailto:info@mfabrik.com>`_ - Python and Plone professionals for hire.\n\n* `mFabrik web site <http://mfabrik.com>`_ \n\n* `mFabrik mobile site <http://mfabrik.mobi>`_ \n\n* `Blog <http://blog.mfabrik.com>`_\n\n* `More about Plone <http://mfabrik.com/technology/technologies/content-management-cms/plone>`_ \n\n       \n      \nChangelog\n=========\n\n0.1 - 0.1.1\n------------\n\n- plone.org release\n\n- Updated README\n\n0.1\n-------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "plone behavior archetypes", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "mfabrik.behaviorutilities", "package_url": "https://pypi.org/project/mfabrik.behaviorutilities/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mfabrik.behaviorutilities/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/mfabrik.behaviorutilities/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Helper patterns to create behaviors for Archetypes content with plone.behavior package", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#about-behavior-pattern\" id=\"id4\" rel=\"nofollow\">About Behavior pattern</a></li>\n<li><a href=\"#features\" id=\"id5\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#example-products\" id=\"id6\" rel=\"nofollow\">Example products</a></li>\n<li><a href=\"#sample-code-walkthrough\" id=\"id7\" rel=\"nofollow\">Sample code walkthrough</a></li>\n<li><a href=\"#author\" id=\"id8\" rel=\"nofollow\">Author</a><ul>\n<li><a href=\"#changelog\" id=\"id9\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</li>\n<li><a href=\"#id1\" id=\"id10\" rel=\"nofollow\">0.1 - 0.1.1</a></li>\n<li><a href=\"#id2\" id=\"id11\" rel=\"nofollow\">0.1</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p>mfabrik.behaviorutilities is plone.behavior support and helper package for Plone 3 and Archetypes.</p>\n</div>\n<div id=\"about-behavior-pattern\">\n<h2><a href=\"#id4\" rel=\"nofollow\">About Behavior pattern</a></h2>\n<p>Behavior pattern is a way to provide extensible behavior for content objects,\nwithout touching the actual content object class source code and\nso that behaviors can be turned on and off.</p>\n<p>First read plone.behavior tutorial</p>\n<ul>\n<li><a href=\"http://plone.org/products/dexterity/documentation/manual/behaviors\" rel=\"nofollow\">http://plone.org/products/dexterity/documentation/manual/behaviors</a></li>\n</ul>\n<p>Note that the tutorial does not describe how to use behavior objects\nwith Archetypes based content and this Python module tries to fill\nin some gaps there.</p>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>Create plone.behavior behaviors for Archetypes objects and make them assignable</li>\n<li>On-demand behavior object creation - do not make saves or Zope transactions\nif behavior defaults are not changed</li>\n<li>z3c.form support to make behavior objects context aware and thus selection widget vocabulary resolving working</li>\n<li>Traversing tools</li>\n</ul>\n</div>\n<div id=\"example-products\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Example products</a></h2>\n<p>The following Plone add-ons have been created based on this code</p>\n<ul>\n<li><a href=\"https://svn.plone.org/svn/collective/mfabrik.trafficsigns/trunk/mfabrik/trafficsigns/behaviors.py\" rel=\"nofollow\">https://svn.plone.org/svn/collective/mfabrik.trafficsigns/trunk/mfabrik/trafficsigns/behaviors.py</a></li>\n<li><a href=\"http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/behaviors.py\" rel=\"nofollow\">http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.mobile/gomobile/mobile/behaviors.py</a></li>\n<li><a href=\"http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.convergence/gomobile/convergence/behaviors.py\" rel=\"nofollow\">http://plonegomobile.googlecode.com/svn/trunk/gomobile/gomobile.convergence/gomobile/convergence/behaviors.py</a></li>\n<li><a href=\"http://svn.plone.org/svn/collective/plone.app.headeranimation/trunk/README.txt\" rel=\"nofollow\">http://svn.plone.org/svn/collective/plone.app.headeranimation/trunk/README.txt</a></li>\n</ul>\n</div>\n<div id=\"sample-code-walkthrough\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Sample code walkthrough</a></h2>\n<p><em>Note</em>: Code here is only for example purposes and probably does not work as is.\nProper usage documentation will be done after the framework has taken more shape.\nRefer to existing code users for more help.</p>\n<p>Behavior is defined as an interface, which also defines form options\nwhich user can edit for this behavior. Schema is defined using <em>plone.directives.form</em> package:</p>\n<pre>class IMultiChannelBehavior(form.Schema):\n    \"\"\" How content and its children react to differt medias \"\"\"\n\n    contentMedias = schema.Choice(title=u\"Content medias\",\n                                  description=u\"Does this content appear on web, mobile or both\",\n                                  default=ContentMediaOption.USE_PARENT,\n                                  required=True)\n\n     # More form fields here\n\nalsoProvides(IMultiChannelBehavior, form.IFormFieldProvider)\n</pre>\n<p>The behavior implementation is persistent Zope object,\nwhich knowns its <em>context</em> i.e. object for which behavior is assigned\nby using mfabrik.beahviorutilities.volatilecontext.VolatileContext base class,\nwhich is a subclass of Zope Persistent class.</p>\n<p>Implementation maps behavior interface fields itself as\nclass attributes using FieldProperties.</p>\n<p>We use AnnotationPersistentFactory to store behavior.\nThis means that when behavior is once saved on your content object,\nyou can access by directly by traversing:</p>\n<pre>context.__annotations__[\"your_annotation_key_name\"]\n</pre>\n<p>Example:</p>\n<pre>class MobileBehaviorStorage(VolatileContext):\n\n    # Implement your behavior\n    implements(IMobileBehavior)\n\n    mobileFolderListing = FieldProperty(IMobileBehavior[\"mobileFolderListing\"])\n\n    appearInFolderListing = FieldProperty(IMobileBehavior[\"appearInFolderListing\"])\n\n\n# This defines a behavior factoty method\nmobile_behavior_factory = AnnotationPersistentFactory(MobileBehaviorStorage, \"mobile\")\n</pre>\n<p>Now you can create and query behaviors.</p>\n<p>First we check that the behavior is assignable. Currently it is hardcoded\nthat all behaviors are assignable to all Archetypes content objects:</p>\n<pre>self.loginAsPortalOwner()\nself.portal.invokeFactory(\"Document\", \"doc\")\ndoc = self.portal.doc\n\n# Check assignable works\nfrom plone.behavior.interfaces import IBehaviorAssignable\nassignable = IBehaviorAssignable(doc, None)\n\nself.assertTrue(assignable.supports(IMobileBehavior))\nself.assertNotEqual(assignable, None)\n</pre>\n<p>When we query the behavior it is created on the fly if it does\nnot already exist on the content. If the behavior is created,\nthen its attributes are populated with the default values specific in the schema:</p>\n<pre>behavior = IMobileBehavior(doc)\n</pre>\n<p>Behavior knowns on which content it belongs.\nThis is implemented as volatile reference, so no circular\npointers are stored to ZODB.</p>\n<blockquote>\ndoc == behavior.context</blockquote>\n<p>You can edit the behavior parameters by using properties defined\non the storage class:</p>\n<pre>behavior.mobileFolderListing = True\n</pre>\n<p>If you do any changes to the behavior you need to call save()\nmethod of the VolatileContext class. This makes sure that\nif the behavior is not the default behavior, you need to\nactually save persistent parameters in the annotations:</p>\n<pre>behavior.save()\n\n# Recreate behavior from the scratch\n# and see it is persistent\nbehavior = IMobileBehavior(doc)\nassert behavior.behavior.mobileFolderListing == True\n</pre>\n<p>Each behavior also needs edit form - you can easily do this using z3c.form:</p>\n<pre> class MobileForm(z3c.form.form.EditForm):\n     \"\"\" Folder/page specific mobile publishing options \"\"\"\n\n     fields = field.Fields(IMobileBehavior)\n\n     prefix = \"mobile\"\n     label = u\"Mobile navigation options\"\n\n     def update(self):\n         return z3c.form.form.EditForm.update(self)\n\n     def getContent(self):\n         \"\"\"\n         Return the object which the form should edit.\n         \"\"\"\n         behavior = IMobileBehavior(self.context)\n         return behavior\n\n     def applyChanges(self, data):\n         # Call super\n         content = self.getContent()\n         val = z3c.form.form.EditForm.applyChanges(self, data)\n\n         # Write behavior to database\n         content = self.getContent()\n         content.save()\n\n         return val\n\nMobileFormView = wrap_form(MobileForm)\n</pre>\n<p>It is easiest to link this form to your object using document_actions\nlink. actions.xml snippet:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;object name=\"portal_actions\" meta_type=\"Plone Actions Tool\"\n   xmlns:i18n=\"http://xml.zope.org/namespaces/i18n\"&gt;\n\n &lt;object name=\"document_actions\" meta_type=\"CMF Action Category\"&gt;\n\n  &lt;object name=\"mobile_options\" meta_type=\"CMF Action\" i18n:domain=\"plone\"&gt;\n   &lt;property name=\"title\" i18n:translate=\"\"&gt;Mobile settings&lt;/property&gt;\n   &lt;property name=\"description\"\n      i18n:translate=\"\"&gt;Set mobile publishing options&lt;/property&gt;\n   &lt;property\n      name=\"url_expr\"&gt;string:$object_url/@@mobile_options&lt;/property&gt;\n   &lt;property name=\"icon_expr\"&gt;&lt;/property&gt;\n   &lt;property name=\"available_expr\"&gt;&lt;/property&gt;\n   &lt;property name=\"permissions\"&gt;\n    &lt;element value=\"Modify portal content\"/&gt;\n   &lt;/property&gt;\n   &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n  &lt;/object&gt;\n\n &lt;/object&gt;\n\n&lt;/object&gt;\n</pre>\n</div>\n<div id=\"author\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Author</a></h2>\n<p><a href=\"mailto:info%40mfabrik.com\">mFabrik Research Oy</a> - Python and Plone professionals for hire.</p>\n<ul>\n<li><a href=\"http://mfabrik.com\" rel=\"nofollow\">mFabrik web site</a></li>\n<li><a href=\"http://mfabrik.mobi\" rel=\"nofollow\">mFabrik mobile site</a></li>\n<li><a href=\"http://blog.mfabrik.com\" rel=\"nofollow\">Blog</a></li>\n<li><a href=\"http://mfabrik.com/technology/technologies/content-management-cms/plone\" rel=\"nofollow\">More about Plone</a></li>\n</ul>\n<div id=\"changelog\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Changelog</a></h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2><a href=\"#id10\" rel=\"nofollow\">0.1 - 0.1.1</a></h2>\n<ul>\n<li>plone.org release</li>\n<li>Updated README</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2><a href=\"#id11\" rel=\"nofollow\">0.1</a></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1459629, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9ee3b6df7fe5bc1d974dba97fb4d8355", "sha256": "43d839712b24c241392ce95d73243e1efdb5f20e63bd1650886fc4351ac0abf1"}, "downloads": -1, "filename": "mfabrik.behaviorutilities-0.1.tar.gz", "has_sig": false, "md5_digest": "9ee3b6df7fe5bc1d974dba97fb4d8355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16773, "upload_time": "2010-03-16T02:03:09", "upload_time_iso_8601": "2010-03-16T02:03:09.915676Z", "url": "https://files.pythonhosted.org/packages/57/c2/76b0ff7c8f4faff63407f0d32ec39a9b4d3c143822699427cff6b5c45982/mfabrik.behaviorutilities-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2ba593cef154ed7ab31a05064f41653b", "sha256": "50a7b6252a463e8461ca5d562adc171b445c9fd4c9d47aef9773087e184bff7c"}, "downloads": -1, "filename": "mfabrik.behaviorutilities-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ba593cef154ed7ab31a05064f41653b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19704, "upload_time": "2010-03-24T16:51:23", "upload_time_iso_8601": "2010-03-24T16:51:23.315605Z", "url": "https://files.pythonhosted.org/packages/11/93/85e9ea0421edefc490a511158c86b63087cf351c2c0c9f2b4ca0ddcafc8e/mfabrik.behaviorutilities-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ba593cef154ed7ab31a05064f41653b", "sha256": "50a7b6252a463e8461ca5d562adc171b445c9fd4c9d47aef9773087e184bff7c"}, "downloads": -1, "filename": "mfabrik.behaviorutilities-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ba593cef154ed7ab31a05064f41653b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19704, "upload_time": "2010-03-24T16:51:23", "upload_time_iso_8601": "2010-03-24T16:51:23.315605Z", "url": "https://files.pythonhosted.org/packages/11/93/85e9ea0421edefc490a511158c86b63087cf351c2c0c9f2b4ca0ddcafc8e/mfabrik.behaviorutilities-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:31 2020"}