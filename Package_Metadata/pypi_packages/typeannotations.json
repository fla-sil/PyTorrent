{"info": {"author": "Manuel Cer\u00f3n", "author_email": "ceronman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Type annotations for Python\n===========================\n\nhttps://github.com/ceronman/typeannotations\n\n\nAbout\n-----\n\nThe ``typeannotations`` module provides a set of tools for type checking and\ntype inference of Python code. It also a provides a set of types useful for\nannotating functions and objects.\n\nThese tools are mainly designed to be used by static analyzers such as linters,\ncode completion libraries and IDEs. Additionally, decorators for making\nrun-time checks are provided. Run-time type checking is not always a good\nidea in Python, but in some cases it can be very useful.\n\n\nRun-time type checking.\n-----------------------\n\nThe ``typechecked`` decorator can be used to check types specified in function\nannotations. For example:\n\n.. code-block:: pycon\n\n   >>> @typechecked\n   ... def test(a: int) -> int:\n   ...     return a\n   ...\n   >>> test(1)\n   1\n   >>> test('string')\n   Traceback (most recent call last):\n      ...\n   TypeError: Incorrect type for \"a\"\n\n\nStructural interfaces\n---------------------\n\nThe ``Interface`` class allows you to define interfaces that are checked\ndynamically. You don't have to explicitly indicate when an object or class\nimplements a given ``Interface``. If an object provides the methods and\nattributes specified in the ``Interface``, it's considered a valid\nimplementation.\n\nFor example, let's define a simple interface:\n\n.. code-block:: pycon\n\n   >>> class Person(Interface):\n   ...     name = str\n   ...     age = int\n   ...     def say_hello(name: str) -> str:\n   ...             pass\n\nAny object defining those the ``name``, ``age`` and ``say_hello()`` members is\na valid implementation of that interface. For example:\n\n.. code-block:: pycon\n\n   >>> class Developer:\n   ...     def __init__(self, name, age):\n   ...             self.name = name\n   ...             self.age = age\n   ...     def say_hello(self, name: str) -> str:\n   ...             return 'hello ' + name\n   ...\n   >>> isinstance(Developer('bill', 20), Person)\n   True\n\nThis also works with built-in types:\n\n.. code-block:: pycon\n\n   >>> class IterableWithLen(Interface):\n   ...     def __iter__():\n   ...             pass\n   ...     def __len__():\n   ...             pass\n   ...\n   >>> isinstance([], IterableWithLen)\n   True\n   >>> isinstance({}, IterableWithLen)\n   True\n   >>> isinstance(1, IterableWithLen)\n   False\n\n\nTypedefs\n''''''''\n\nA ``typedef`` is similar to an ``Interface`` except that it defines a single\nfunction signature. This is useful for defining callbacks. For example:\n\n.. code-block:: pycon\n\n   >>> @typedef\n   ... def callback(event: Event) -> bool:\n   ...     pass\n   ...\n\nThen it's possible to check if a function implements the same signature:\n\n.. code-block:: pycon\n\n   >>> def handler(event: MouseEvent) -> bool:\n   ...     print('click')\n   ...     return True\n   ...\n   >>> isinstance(handler, callback)\n   True\n   >>> isinstance(lambda: True, callback)\n   False\n\nNote that ``MouseEvent`` is a subclass of ``Event``.\n\n\nType unions\n-----------\n\nA ``union`` is a collection of types and it's a type itself. An object is an\ninstance of a ``union`` if it's an instance of any of the elements in the union.\nFor example:\n\n.. code-block:: pycon\n\n   >>> NumberOrString = union(int, str)\n   >>> isinstance(1, NumberOrString)\n   True\n   >>> isinstance('string', NumberOrString)\n   True\n   >>> issubclass(int, NumberOrString)\n   True\n   >>> issubclass(str, NumberOrString)\n   True\n\n\nPredicates\n----------\n\nA ``predicate`` is a special type defined by a function that takes an object\nand returns ``True`` or ``False`` indicating if the object implements the type.\nFor example:\n\n.. code-block:: pycon\n\n   >>> Positive = predicate(lambda x: x > 0)\n   >>> isinstance(1, Positive)\n   True\n   >>> isinstance(0, Positive)\n   False\n\nPredicates can also be defined using a decorator:\n\n.. code-block:: pycon\n\n   >>> @predicate\n   ... def Even(object):\n   ...     return object % 2 == 0\n\nPredicates can also be combined using the `&`` operator:\n\n.. code-block:: pycon\n\n   >>> EvenAndPositive = Even & Positive\n\nPredicates are useful for defining contracts:\n\n.. code-block:: pycon\n\n   >>> Positive = predicate(lambda x: x > 0)\n   >>> @typechecked\n   ... def sqrt(n: Positive):\n   ...     ...\n   >>> sqrt(-1)\n   Traceback (most recent call last):\n     ...\n   TypeError: Incorrect type for \"n\"\n\n\nThe ``optional`` predicate\n''''''''''''''''''''''''''\n\nThe ``optional`` predicate indicates that the object must be from the given type\nor `None`. For example:\n\n.. code-block:: pycon\n\n   >>> isinstance(1, optional(int))\n   True\n   >>> isinstance(None, optional(int))\n   True\n\nAnd checking types at runtime:\n\n.. code-block:: pycon\n\n   >>> @typechecked\n   ... def greet(name: optional(str) = None):\n   ...     if name is None:\n   ...             print('hello stranger')\n   ...     else:\n   ...             print('hello {0}'.format(name))\n   ...\n   >>> greet()\n   hello stranger\n   >>> greet('bill')\n   hello bill\n\n\nThe ``only`` predicate\n''''''''''''''''''''''\n\nThe ``only`` predicate indicates that an object can **only** be of the specified\ntype, and not of any of its super classes. For example:\n\n.. code-block:: pycon\n\n   >>> isinstance(True, only(bool))\n   True\n   >>> isinstance(1, only(bool))\n   False\n\nNote that in Python `bool` is a sublcass of `int`.\n\n\nThe ``options`` predicate\n'''''''''''''''''''''''''\n\nThe ``options`` predicate indicates that the value of an object must be one of\nthe given options. For example:\n\n.. code-block:: pycon\n\n   >>> FileMode = options('r', 'w', 'a', 'r+', 'w+', 'a+')\n   >>> isinstance('w', FileMode)\n   True\n   >>> isinstance('x', FileMode)\n   False\n\nThis is useful when defining a function:\n\n.. code-block:: pycon\n\n   >>> @typecheck\n   ... def open(filename: str, mode: options('w', 'a')):\n   ...\t\t...\n\n\nTo be implemented:\n------------------\n\nCollections definitions:\n''''''''''''''''''''''''\n\n.. code-block:: python\n\n   typedict({str: int})\n   typeseq([int])\n   typeseq(set(int))\n   typeseq((int,))\n   ...\n\nFunction overloading\n''''''''''''''''''''\n\n.. code-block:: python\n\n   @overload\n   def isinstance(object, t: type):\n       ...\n\n   @overload\n   def isinstance(object, t: tuple):\n       ...\n\nAnnotate existing functions and libraries\n'''''''''''''''''''''''''''''''''''''''''\n\n.. code-block:: python\n\n   @annotate('builtins.open')\n   def open_annotated(file: str,\n                      mode: options('r', 'w', 'a', 'r+', 'w+', 'a+'),\n                      buffering: optional(int)) -> IOBase:\n       pass\n\n\nLicense\n-------\n\n| Licensed under the Apache License, Version 2.0 (the \"License\");\n| you may not use this file except in compliance with the License.\n| You may obtain a copy of the License at\n| \n| http://www.apache.org/licenses/LICENSE-2.0\n| \n| Unless required by applicable law or agreed to in writing, software\n| distributed under the License is distributed on an \"AS IS\" BASIS,\n| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n| either express or implied.  See the License for the specific language\n| governing permissions and limitations under the License.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ceronman/typeannotations", "keywords": null, "license": "Apache License", "maintainer": null, "maintainer_email": null, "name": "typeannotations", "package_url": "https://pypi.org/project/typeannotations/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/typeannotations/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ceronman/typeannotations"}, "release_url": "https://pypi.org/project/typeannotations/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A library with a set of tools for annotating types in Python code.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/ceronman/typeannotations\" rel=\"nofollow\">https://github.com/ceronman/typeannotations</a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p>The <tt>typeannotations</tt> module provides a set of tools for type checking and\ntype inference of Python code. It also a provides a set of types useful for\nannotating functions and objects.</p>\n<p>These tools are mainly designed to be used by static analyzers such as linters,\ncode completion libraries and IDEs. Additionally, decorators for making\nrun-time checks are provided. Run-time type checking is not always a good\nidea in Python, but in some cases it can be very useful.</p>\n</div>\n<div id=\"run-time-type-checking\">\n<h2>Run-time type checking.</h2>\n<p>The <tt>typechecked</tt> decorator can be used to check types specified in function\nannotations. For example:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@typechecked</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">a</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):\n</span>   <span class=\"c\">...</span>\n<span class=\"gr\">TypeError</span>: <span class=\"n\">Incorrect type for \"a\"</span>\n</pre>\n</div>\n<div id=\"structural-interfaces\">\n<h2>Structural interfaces</h2>\n<p>The <tt>Interface</tt> class allows you to define interfaces that are checked\ndynamically. You don\u2019t have to explicitly indicate when an object or class\nimplements a given <tt>Interface</tt>. If an object provides the methods and\nattributes specified in the <tt>Interface</tt>, it\u2019s considered a valid\nimplementation.</p>\n<p>For example, let\u2019s define a simple interface:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n<span class=\"gp\">... </span>    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"k\">pass</span>\n</pre>\n<p>Any object defining those the <tt>name</tt>, <tt>age</tt> and <tt>say_hello()</tt> members is\na valid implementation of that interface. For example:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Developer</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"gp\">... </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"k\">return</span> <span class=\"s1\">'hello '</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">Developer</span><span class=\"p\">(</span><span class=\"s1\">'bill'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"n\">Person</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre>\n<p>This also works with built-in types:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">IterableWithLen</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>            <span class=\"k\">pass</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>            <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">([],</span> <span class=\"n\">IterableWithLen</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">({},</span> <span class=\"n\">IterableWithLen</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">IterableWithLen</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre>\n<div id=\"typedefs\">\n<h3>Typedefs</h3>\n<p>A <tt>typedef</tt> is similar to an <tt>Interface</tt> except that it defines a single\nfunction signature. This is useful for defining callbacks. For example:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@typedef</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Event</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n</pre>\n<p>Then it\u2019s possible to check if a function implements the same signature:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">MouseEvent</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre>\n<p>Note that <tt>MouseEvent</tt> is a subclass of <tt>Event</tt>.</p>\n</div>\n</div>\n<div id=\"type-unions\">\n<h2>Type unions</h2>\n<p>A <tt>union</tt> is a collection of types and it\u2019s a type itself. An object is an\ninstance of a <tt>union</tt> if it\u2019s an instance of any of the elements in the union.\nFor example:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">NumberOrString</span> <span class=\"o\">=</span> <span class=\"n\">union</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">NumberOrString</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s1\">'string'</span><span class=\"p\">,</span> <span class=\"n\">NumberOrString</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NumberOrString</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NumberOrString</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre>\n</div>\n<div id=\"predicates\">\n<h2>Predicates</h2>\n<p>A <tt>predicate</tt> is a special type defined by a function that takes an object\nand returns <tt>True</tt> or <tt>False</tt> indicating if the object implements the type.\nFor example:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Positive</span> <span class=\"o\">=</span> <span class=\"n\">predicate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Positive</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Positive</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre>\n<p>Predicates can also be defined using a decorator:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@predicate</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">Even</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"nb\">object</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre>\n<p>Predicates can also be combined using the <cite>&amp;`</cite> operator:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">EvenAndPositive</span> <span class=\"o\">=</span> <span class=\"n\">Even</span> <span class=\"o\">&amp;</span> <span class=\"n\">Positive</span>\n</pre>\n<p>Predicates are useful for defining contracts:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Positive</span> <span class=\"o\">=</span> <span class=\"n\">predicate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@typechecked</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">Positive</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"o\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):\n</span>  <span class=\"c\">...</span>\n<span class=\"gr\">TypeError</span>: <span class=\"n\">Incorrect type for \"n\"</span>\n</pre>\n<div id=\"the-optional-predicate\">\n<h3>The <tt>optional</tt> predicate</h3>\n<p>The <tt>optional</tt> predicate indicates that the object must be from the given type\nor <cite>None</cite>. For example:</p>\n<pre><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"go\">True</span>\n</pre>\n<p>And checking types at runtime:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@typechecked</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">optional</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hello stranger'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hello </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greet</span><span class=\"p\">()</span>\n<span class=\"go\">hello stranger\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">greet</span><span class=\"p\">(</span><span class=\"s1\">'bill'</span><span class=\"p\">)</span>\n<span class=\"go\">hello bill</span>\n</pre>\n</div>\n<div id=\"the-only-predicate\">\n<h3>The <tt>only</tt> predicate</h3>\n<p>The <tt>only</tt> predicate indicates that an object can <strong>only</strong> be of the specified\ntype, and not of any of its super classes. For example:</p>\n<pre><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">))</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">only</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">))</span>\n<span class=\"go\">False</span>\n</pre>\n<p>Note that in Python <cite>bool</cite> is a sublcass of <cite>int</cite>.</p>\n</div>\n<div id=\"the-options-predicate\">\n<h3>The <tt>options</tt> predicate</h3>\n<p>The <tt>options</tt> predicate indicates that the value of an object must be one of\nthe given options. For example:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">FileMode</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"p\">(</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'r+'</span><span class=\"p\">,</span> <span class=\"s1\">'w+'</span><span class=\"p\">,</span> <span class=\"s1\">'a+'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"n\">FileMode</span><span class=\"p\">)</span>\n<span class=\"go\">True\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">FileMode</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre>\n<p>This is useful when defining a function:</p>\n<pre><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@typecheck</span>\n<span class=\"gp\">... </span><span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"p\">(</span><span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)):</span>\n<span class=\"gp\">... </span>         <span class=\"o\">...</span>\n</pre>\n</div>\n</div>\n<div id=\"to-be-implemented\">\n<h2>To be implemented:</h2>\n<div id=\"collections-definitions\">\n<h3>Collections definitions:</h3>\n<pre><span class=\"n\">typedict</span><span class=\"p\">({</span><span class=\"nb\">str</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"n\">typeseq</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">])</span>\n<span class=\"n\">typeseq</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"n\">typeseq</span><span class=\"p\">((</span><span class=\"nb\">int</span><span class=\"p\">,))</span>\n<span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"function-overloading\">\n<h3>Function overloading</h3>\n<pre><span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"annotate-existing-functions-and-libraries\">\n<h3>Annotate existing functions and libraries</h3>\n<pre><span class=\"nd\">@annotate</span><span class=\"p\">(</span><span class=\"s1\">'builtins.open'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">open_annotated</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                   <span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">options</span><span class=\"p\">(</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'r+'</span><span class=\"p\">,</span> <span class=\"s1\">'w+'</span><span class=\"p\">,</span> <span class=\"s1\">'a+'</span><span class=\"p\">),</span>\n                   <span class=\"n\">buffering</span><span class=\"p\">:</span> <span class=\"n\">optional</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IOBase</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<div>\n<div>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);</div>\n<div>you may not use this file except in compliance with the License.</div>\n<div>You may obtain a copy of the License at</div>\n<div><br></div>\n<div><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></div>\n<div><br></div>\n<div>Unless required by applicable law or agreed to in writing, software</div>\n<div>distributed under the License is distributed on an \u201cAS IS\u201d BASIS,</div>\n<div>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,</div>\n<div>either express or implied.  See the License for the specific language</div>\n<div>governing permissions and limitations under the License.</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1311924, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f644f9848eac6a51e53d95da68810cca", "sha256": "e9af2d1a68484371d5216c5c510d924e00132a91058a53b22b0ce5a245a6c00f"}, "downloads": -1, "filename": "typeannotations-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f644f9848eac6a51e53d95da68810cca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8093, "upload_time": "2014-11-18T20:24:37", "upload_time_iso_8601": "2014-11-18T20:24:37.505573Z", "url": "https://files.pythonhosted.org/packages/03/e2/2b2137dbed447174108cf9682e00cf246c8363a898df45eb0973adabb521/typeannotations-0.1.0.tar.gz", "yanked": false}], "1.0.0": []}, "urls": [], "timestamp": "Fri May  8 03:42:58 2020"}