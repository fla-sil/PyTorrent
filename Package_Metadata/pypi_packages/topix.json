{"info": {"author": "Madelyn Eriksen", "author_email": "opensource@madelyneriksen.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Topix\n=======\n\nA functional microframework to use Redis streams in Python.\n\n## Quickstart \ud83d\ude80\n\nInstall Topix:\n\n```bash\npip install topix\n```\n\nWrite a consumer function:\n\n```python\n# app.py\n\ndef consumer(data):\n    print(data)\n```\n\nWith Redis running on `localhost:6379`, listen for new items in a stream:\n\n```bash\npython -m topix consumer demo_stream printer_group app:consumer\n```\n\nThen, send items to the stream using the command `topix emitter`:\n\n```bash\npython -m topix emitter demo_stream '{\"hello\": \"world\"}'\n```\n\n...or using Python code:\n\n```python\nfrom topix import emit\n\nemit(\"demo_stream\", {\"hello\": \"world\"})\n```\n\nThat's it. That's the API.\n\n## Why Topix? \n\nI created Topix with a few primary goals and concepts:\n\n* Topix has a dead-simple API- the \"for humans\" approach.\n* Small abstraction over the fantastic Redis Streams.\n* Implementation of Topix should favor simple code over new features.\n\nIf you need heavy-duty task queues, advanced messaging systems, or want an opinionated framework with a \"right way\" to do things, Topix isn't for you. However, if you want a simple API you can easily manage and build your own abstractions on top of, Topix might be for you.\n\n## Usage\n\nTopix centers around two concepts: _consumers_, implemented as functions, and _emitters_, that call `topix.emit` or `redis.xadd`.\n\n### Writing a Consumer Function\n\nWith Topix, creating a consumer for a stream is as easy as creating a function. For example, this is a valid consumer function:\n\n```python\ndef print_item(item):\n    print(item)\n```\n\nSpecifically, your function needs to be of the following _type_, otherwise you'll get an error:\n\n```python\nCallable[[Dict[bytes, bytes]], None]\n```\n\nLike Redis, Topix works with bytes, so if you want strings (or any other type) you need to bring your own converter.\n\n### Using Your Consumer Function\n\nBack to our `print_item` function, we can use this function in a consumer process using the Topix command line. Assuming we saved `print_item` in `app.py`, we can run Topix like this:\n\n```bash\npython -m topix consumer stream_name group_name app:print_item\n```\n\nWhere `stream_name` is the name of the Redis stream, `group_name` is the name of the consumer group, and `app:print_item` is the Python path to our function (think `gunicorn`-style imports). By default, Topix will attempt to connect to the Redis url defined in the environment variable `TOPIX_REDIS_URL`, falling back to `redis://localhost:6379/0`.\n\nAt runtime, Topix will import your function, and map it over the stream you give it. Topix automatically handles acknowledging successful commands, the creation of consumer groups, removing the consumer when it exits, and parallel execution of your function using threads.\n\n### Sending to Streams\n\nTopix defines an `emit` function that sends a Redis-compatible dictionary to the stream you give it, by name:\n\n```python\nfrom topix import emit\n\nemit(\"stream_name\", {b\"hello\": b\"world\"})\n\n# Strings are valid as keys too- they just\n# become bytes \"on the other side\"\nemit(\"stream_name\", {\"hello\": \"world\"})\n```\n\nTopix's `emit` is a _thin_ wrapper around Redis' `XADD` command, and maps the values given to `XADD` to your consumer function. This means you can emit messages from _anywhere_, even from code in another language or not using Topix, and use your same consumer.\n\nTypically, you'll want to emit events to your code using `emit` (or `xadd`) programmatically, but for demos (or `bash` scripts), Topix includes a subcommand to send messages to a stream:\n\n```bash\npython -m topix emit stream_name '{\"hello\": \"world\"}'\n```\n\n### Additional Configuration\n\nBy default, Topix uses a number of threads equivalent to the number of CPUs available. You can change the amount of concurrency (using threads) that Topix uses by providing the `--concurrency` option to `topix consumer`:\n\n```bash\npython -m topix consumer stream_name group_name app:print_item --concurrency 2\n```\n\nIn addition, Topix supports a few additional options, including configurable logging. For a full list of options, try:\n\n```bash\npython -m topix --help\n```\n\n## Development\n\nTo get started hacking on Topix, be sure to install it in development mode.\n\n```bash\nvirtualenv .env\nsource .env/bin/activate # Linux/OSX\n.env\\scripts\\activate # Windows\npip install -r requirements.dev.txt\npython setup.py develop\n```\n\nTests are provided by Pytest. Plugins for `pylint` and `coverage` are directly integrated:\n\n```bash\npytest # or python setup.py test\n# Pytest Output\n\nCoverage Report:\n\n...\n\n====== X Passed, X Skipped in .38 seconds =====\n```\n\nTopix checks types with MyPy. Type check your code like this:\n\n```bash\nmypy topix\n```\n\n## License\n\nCopyright 2019 by Madelyn Eriksen under the terms of the MIT License. See [license](/LICENSE) for full terms.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/madelyneriksen/topix", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "topix", "package_url": "https://pypi.org/project/topix/", "platform": "", "project_url": "https://pypi.org/project/topix/", "project_urls": {"Homepage": "https://github.com/madelyneriksen/topix"}, "release_url": "https://pypi.org/project/topix/0.2.1/", "requires_dist": ["redis (>=3.0.0)"], "requires_python": "", "summary": "Topix is a functional microframework for working with Redis streams.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Topix</h1>\n<p>A functional microframework to use Redis streams in Python.</p>\n<h2>Quickstart \ud83d\ude80</h2>\n<p>Install Topix:</p>\n<pre>pip install topix\n</pre>\n<p>Write a consumer function:</p>\n<pre><span class=\"c1\"># app.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">consumer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>With Redis running on <code>localhost:6379</code>, listen for new items in a stream:</p>\n<pre>python -m topix consumer demo_stream printer_group app:consumer\n</pre>\n<p>Then, send items to the stream using the command <code>topix emitter</code>:</p>\n<pre>python -m topix emitter demo_stream <span class=\"s1\">'{\"hello\": \"world\"}'</span>\n</pre>\n<p>...or using Python code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">topix</span> <span class=\"kn\">import</span> <span class=\"n\">emit</span>\n\n<span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s2\">\"demo_stream\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">})</span>\n</pre>\n<p>That's it. That's the API.</p>\n<h2>Why Topix?</h2>\n<p>I created Topix with a few primary goals and concepts:</p>\n<ul>\n<li>Topix has a dead-simple API- the \"for humans\" approach.</li>\n<li>Small abstraction over the fantastic Redis Streams.</li>\n<li>Implementation of Topix should favor simple code over new features.</li>\n</ul>\n<p>If you need heavy-duty task queues, advanced messaging systems, or want an opinionated framework with a \"right way\" to do things, Topix isn't for you. However, if you want a simple API you can easily manage and build your own abstractions on top of, Topix might be for you.</p>\n<h2>Usage</h2>\n<p>Topix centers around two concepts: <em>consumers</em>, implemented as functions, and <em>emitters</em>, that call <code>topix.emit</code> or <code>redis.xadd</code>.</p>\n<h3>Writing a Consumer Function</h3>\n<p>With Topix, creating a consumer for a stream is as easy as creating a function. For example, this is a valid consumer function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">print_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<p>Specifically, your function needs to be of the following <em>type</em>, otherwise you'll get an error:</p>\n<pre><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre>\n<p>Like Redis, Topix works with bytes, so if you want strings (or any other type) you need to bring your own converter.</p>\n<h3>Using Your Consumer Function</h3>\n<p>Back to our <code>print_item</code> function, we can use this function in a consumer process using the Topix command line. Assuming we saved <code>print_item</code> in <code>app.py</code>, we can run Topix like this:</p>\n<pre>python -m topix consumer stream_name group_name app:print_item\n</pre>\n<p>Where <code>stream_name</code> is the name of the Redis stream, <code>group_name</code> is the name of the consumer group, and <code>app:print_item</code> is the Python path to our function (think <code>gunicorn</code>-style imports). By default, Topix will attempt to connect to the Redis url defined in the environment variable <code>TOPIX_REDIS_URL</code>, falling back to <code>redis://localhost:6379/0</code>.</p>\n<p>At runtime, Topix will import your function, and map it over the stream you give it. Topix automatically handles acknowledging successful commands, the creation of consumer groups, removing the consumer when it exits, and parallel execution of your function using threads.</p>\n<h3>Sending to Streams</h3>\n<p>Topix defines an <code>emit</code> function that sends a Redis-compatible dictionary to the stream you give it, by name:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">topix</span> <span class=\"kn\">import</span> <span class=\"n\">emit</span>\n\n<span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s2\">\"stream_name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Strings are valid as keys too- they just</span>\n<span class=\"c1\"># become bytes \"on the other side\"</span>\n<span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s2\">\"stream_name\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">})</span>\n</pre>\n<p>Topix's <code>emit</code> is a <em>thin</em> wrapper around Redis' <code>XADD</code> command, and maps the values given to <code>XADD</code> to your consumer function. This means you can emit messages from <em>anywhere</em>, even from code in another language or not using Topix, and use your same consumer.</p>\n<p>Typically, you'll want to emit events to your code using <code>emit</code> (or <code>xadd</code>) programmatically, but for demos (or <code>bash</code> scripts), Topix includes a subcommand to send messages to a stream:</p>\n<pre>python -m topix emit stream_name <span class=\"s1\">'{\"hello\": \"world\"}'</span>\n</pre>\n<h3>Additional Configuration</h3>\n<p>By default, Topix uses a number of threads equivalent to the number of CPUs available. You can change the amount of concurrency (using threads) that Topix uses by providing the <code>--concurrency</code> option to <code>topix consumer</code>:</p>\n<pre>python -m topix consumer stream_name group_name app:print_item --concurrency <span class=\"m\">2</span>\n</pre>\n<p>In addition, Topix supports a few additional options, including configurable logging. For a full list of options, try:</p>\n<pre>python -m topix --help\n</pre>\n<h2>Development</h2>\n<p>To get started hacking on Topix, be sure to install it in development mode.</p>\n<pre>virtualenv .env\n<span class=\"nb\">source</span> .env/bin/activate <span class=\"c1\"># Linux/OSX</span>\n.env<span class=\"se\">\\s</span>cripts<span class=\"se\">\\a</span>ctivate <span class=\"c1\"># Windows</span>\npip install -r requirements.dev.txt\npython setup.py develop\n</pre>\n<p>Tests are provided by Pytest. Plugins for <code>pylint</code> and <code>coverage</code> are directly integrated:</p>\n<pre>pytest <span class=\"c1\"># or python setup.py test</span>\n<span class=\"c1\"># Pytest Output</span>\n\nCoverage Report:\n\n...\n\n<span class=\"o\">======</span> X Passed, X Skipped in .38 <span class=\"nv\">seconds</span> <span class=\"o\">=====</span>\n</pre>\n<p>Topix checks types with MyPy. Type check your code like this:</p>\n<pre>mypy topix\n</pre>\n<h2>License</h2>\n<p>Copyright 2019 by Madelyn Eriksen under the terms of the MIT License. See <a href=\"/LICENSE\" rel=\"nofollow\">license</a> for full terms.</p>\n\n          </div>"}, "last_serial": 6110229, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dc00dc4d41c8b49ade1605b721c6f70c", "sha256": "8a7c3f8ebee8875ef42525d1a68430267ded324ebe36bff6b40f2cd1ebffc421"}, "downloads": -1, "filename": "topix-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "dc00dc4d41c8b49ade1605b721c6f70c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7232, "upload_time": "2019-10-01T01:54:30", "upload_time_iso_8601": "2019-10-01T01:54:30.397556Z", "url": "https://files.pythonhosted.org/packages/58/4e/1cb1890191ca98b1fe93aff20b46512fdbfc214901af4dfcfc2ebe310dae/topix-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "231e760b1da9ae348783cbbcf813e56d", "sha256": "b9ed256fbb51ae20427f637c86fb014e49ab91521b85b5da51e5e7164c42c4a7"}, "downloads": -1, "filename": "topix-0.1.0-py3.6.egg", "has_sig": false, "md5_digest": "231e760b1da9ae348783cbbcf813e56d", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 10601, "upload_time": "2019-10-01T01:54:32", "upload_time_iso_8601": "2019-10-01T01:54:32.803346Z", "url": "https://files.pythonhosted.org/packages/17/65/dd287898561a19abdf827ebb90ada1187e1dba339d8a13ce5a266bdf8fe1/topix-0.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b4998e4c36272f0e8aaf86c1874d286", "sha256": "90b4ad3f06c2492e9a8a89eaa14f70c0a37ad054af812237bf03d4979e7328fa"}, "downloads": -1, "filename": "topix-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b4998e4c36272f0e8aaf86c1874d286", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5916, "upload_time": "2019-10-01T01:56:18", "upload_time_iso_8601": "2019-10-01T01:56:18.218322Z", "url": "https://files.pythonhosted.org/packages/70/8e/7b4a50e8a3aaaf02dcc54ac90113a76c6077f42eb83707139b72bf3a04d3/topix-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "290d7f0c9b35057468b8b12e5e1b87c5", "sha256": "fc8d2a15b747e92953d46bfcbd3e0fd75028a781183d00da349f4d6e02948e4c"}, "downloads": -1, "filename": "topix-0.2.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "290d7f0c9b35057468b8b12e5e1b87c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10535, "upload_time": "2019-11-10T01:08:08", "upload_time_iso_8601": "2019-11-10T01:08:08.949302Z", "url": "https://files.pythonhosted.org/packages/02/d0/f9d59cf681760df51eaade88fad774497a6d85c7e2ac1290c73f088cf178/topix-0.2.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a0e52eec64dbc3f7658c796666b70a6", "sha256": "4bc1b5056c6cb53604cb598d918c2678291c520dcfa8a515ae95fcf665aff142"}, "downloads": -1, "filename": "topix-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a0e52eec64dbc3f7658c796666b70a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8894, "upload_time": "2019-11-10T01:13:29", "upload_time_iso_8601": "2019-11-10T01:13:29.651014Z", "url": "https://files.pythonhosted.org/packages/9e/79/4b48264b30415262df7cbe26a901d8601dc69462ee009c1c93f1f0ff2183/topix-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5f00968d69e63997fb49be80729970c5", "sha256": "9db1f0ff489305e518b178875a5cfb57a2374ef451ad2234604051271181c981"}, "downloads": -1, "filename": "topix-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f00968d69e63997fb49be80729970c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9004, "upload_time": "2019-11-10T01:26:51", "upload_time_iso_8601": "2019-11-10T01:26:51.902289Z", "url": "https://files.pythonhosted.org/packages/55/27/e5e2d5ae12f77a5e412b1974919726b33f39b9637ff88d9327089818ed5b/topix-0.2.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f00968d69e63997fb49be80729970c5", "sha256": "9db1f0ff489305e518b178875a5cfb57a2374ef451ad2234604051271181c981"}, "downloads": -1, "filename": "topix-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f00968d69e63997fb49be80729970c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9004, "upload_time": "2019-11-10T01:26:51", "upload_time_iso_8601": "2019-11-10T01:26:51.902289Z", "url": "https://files.pythonhosted.org/packages/55/27/e5e2d5ae12f77a5e412b1974919726b33f39b9637ff88d9327089818ed5b/topix-0.2.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:50:51 2020"}