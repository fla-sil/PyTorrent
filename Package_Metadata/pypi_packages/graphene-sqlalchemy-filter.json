{"info": {"author": "Artem Fedotov", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "Graphene-SQLAlchemy-Filter\n==========================\n\n|circle-ci| |coveralls| |pypi|\n\nFilters for `Graphene SQLAlchemy integration <https://github.com/graphql-python/graphene-sqlalchemy>`__\n\n|preview|\n\nQuick start\n===========\n\nCreate a filter and add it to the graphene field.\n\n.. code:: python\n\n    from graphene_sqlalchemy_filter import FilterableConnectionField, FilterSet\n\n\n    class UserFilter(FilterSet):\n        is_admin = graphene.Boolean()\n\n        class Meta:\n            model = User\n            fields = {\n                'username': ['eq', 'ne', 'in', 'ilike'],\n                'is_active': [...],  # shortcut!\n            }\n\n        @staticmethod\n        def is_admin_filter(info, query, value):\n            if value:\n                return User.username == 'admin'\n            else:\n                return User.username != 'admin'\n\n\n    class Query(ObjectType):\n        all_users = FilterableConnectionField(UserConnection, filters=UserFilter())\n\nNow, we're going to create query.\n\n.. code::\n\n    {\n      allUsers (\n        filters: {\n          isActive: true,\n          or: [\n            {isAdmin: true},\n            {usernameIn: [\"moderator\", \"cool guy\"]}\n          ]\n        }\n      ){\n        edges {\n          node {\n            id\n            username\n          }\n        }\n      }\n    }\n\n--------------\n\nFilters\n=======\n\nFilterSet class must inherit ``graphene_sqlalchemy_filter.FilterSet`` or your subclass of this class.\n\nThere are three types of filters:\n\n1. `automatically generated filters <#automatically-generated-filters>`__\n2. `simple filters <#simple-filters>`__\n3. `filters that require join <#filters-that-require-join>`__\n\nAutomatically generated filters\n-------------------------------\n\n.. code:: python\n\n    class UserFilter(FilterSet):\n       class Meta:\n           model = User\n           fields = {\n               'username': ['eq', 'ne', 'in', 'ilike'],\n               'is_active': [...],  # shortcut!\n           }\n\nMetaclass must contain the sqlalchemy model and fields.\n\nAutomatically generated filters must be specified by ``fields`` variable. Key - field name of sqlalchemy model, value - list of expressions (or shortcut).\n\nShortcut (default: ``[...]``) will add all the allowed filters for this type of sqlalchemy field.\n\n+--------------------+------------------------------------+-------------------+\n| Key                | Description                        | GraphQL postfix   |\n+====================+====================================+===================+\n| ``eq``             | equal                              |                   |\n+--------------------+------------------------------------+-------------------+\n| ``ne``             | not equal                          | Ne                |\n+--------------------+------------------------------------+-------------------+\n| ``like``           | like                               | Like              |\n+--------------------+------------------------------------+-------------------+\n| ``ilike``          | insensitive like                   | Ilike             |\n+--------------------+------------------------------------+-------------------+\n| ``is_null``        | is null                            | IsNull            |\n+--------------------+------------------------------------+-------------------+\n| ``in``             | in                                 | In                |\n+--------------------+------------------------------------+-------------------+\n| ``not_in``         | not in                             | NotIn             |\n+--------------------+------------------------------------+-------------------+\n| ``lt``             | less than                          | Lt                |\n+--------------------+------------------------------------+-------------------+\n| ``lte``            | less than or equal                 | Lte               |\n+--------------------+------------------------------------+-------------------+\n| ``gt``             | greater than                       | Gt                |\n+--------------------+------------------------------------+-------------------+\n| ``gte``            | greater than or equal              | Gte               |\n+--------------------+------------------------------------+-------------------+\n| ``range``          | in range                           | Range             |\n+--------------------+------------------------------------+-------------------+\n| ``contains``       | contains (PostgreSQL array)        | Contains          |\n+--------------------+------------------------------------+-------------------+\n| ``contained_by``   | contained\\_by (PostgreSQL array)   | ContainedBy       |\n+--------------------+------------------------------------+-------------------+\n| ``overlap``        | overlap (PostgreSQL array)         | Overlap           |\n+--------------------+------------------------------------+-------------------+\n\nSimple filters\n--------------\n\n.. code:: python\n\n    class UserFilter(FilterSet):\n        is_admin = graphene.Boolean()\n\n        @staticmethod\n        def is_admin_filter(info, query, value):\n            if value:\n                return User.username == 'admin'\n            else:\n                return User.username != 'admin'\n\nEach simple filter has a class variable that passes to GraphQL schema as an input type and function ``<field_name>_filter`` that makes filtration.\n\nThe filtration function takes the following arguments: \\* ``info`` - ResolveInfo graphene object \\* ``query`` - sqlalchemy query (not used in that filters type) \\* ``value`` - the value of a filter\n\nThe return value can be any type of sqlalchemy clause. This means that you can return ``not_(and_(or_(...), ...))``.\n\nMetaclass is not required if you do not need automatically generated filters.\n\nFilters that require join\n-------------------------\n\nThis type of filter is the same as `simple filters <#simple-filters>`__ but has a different return type.\n\nThe filtration function should return a new sqlalchemy query and clause (like simple filters).\n\n.. code:: python\n\n    class UserFilter(FilterSet):\n        is_moderator = graphene.Boolean()\n\n        @classmethod\n        def is_admin_filter(cls, info, query, value):\n            membership = cls.aliased(query, Membership, name='is_moderator')\n\n            query = query.join(\n                membership,\n                and_(\n                    User.id == membership.user_id,\n                    membership.is_moderator.is_(True),\n                ),\n            )\n\n            if value:\n                filter_ = membership.id.isnot(None)\n            else:\n                filter_ = membership.id.is_(None)\n\n            return query, filter_\n\nModel aliases\n~~~~~~~~~~~~~\n\nThe function ``cls.aliased(query, model, name='...')`` returns `sqlalchemy alias <https://docs.sqlalchemy.org/en/13/orm/query.html#sqlalchemy.orm.aliased>`__ from the query. It has one differing parameter - ``query`` (SQLAlchemy Query object). Other arguments are the same as `sqlalchemy.orm.aliased <https://docs.sqlalchemy.org/en/13/orm/query.html#sqlalchemy.orm.aliased>`__.\n\nIdentical joins will be skipped by sqlalchemy.\n\n    Changed in version 1.7: The first parameter is now a query.\n\nFeatures\n========\n\nFilter registration and nested fields filters\n---------------------------------------------\n\nFilters can be registered for each SQLAlchemy model in a subclass of ``FilterableConnectionField``.\n\nRegister your filters by inheriting ``FilterableConnectionField`` and setting ``filters`` (key - SQLAlchemy model, value - FilterSet object).\n\n.. code:: python\n\n    class CustomField(FilterableConnectionField):\n        filters = {\n            User: UserFilter(),\n        }\n\nOverriding ``SQLAlchemyObjectType.connection_field_factory`` allows you to generate nested connections with filters.\n\n.. code:: python\n\n    class UserNode(SQLAlchemyObjectType):\n        class Meta:\n            model = User\n            interfaces = (Node,)\n            connection_field_factory = CustomField.factory\n\n**Important:**\n\n1. pagination (first/after, last/before) are performed by python (keep this in mind when working with large amounts of data)\n2. nested filters work by dataloaders\n3. this module optimizes one-to-many relationships, to optimize many-to-one relationships use `sqlalchemy\\_bulk\\_lazy\\_loader <https://github.com/operator/sqlalchemy_bulk_lazy_loader>`__\n4. nested filters require ``graphene_sqlalchemy>=2.1.2``\n\nExample\n~~~~~~~\n\n.. code:: python\n\n    # Filters\n\n    class UserFilter(FilterSet):\n       class Meta:\n           model = User\n           fields = {'is_active': [...]}\n\n\n\n    class CustomField(FilterableConnectionField):\n        filters = {\n            User: UserFilter(),\n        }\n\n\n    # Nodes\n\n    class UserNode(SQLAlchemyObjectType):\n        class Meta:\n            model = User\n            interfaces = (Node,)\n            connection_field_factory = CustomField.factory\n\n\n    class GroupNode(SQLAlchemyObjectType):\n        class Meta:\n            model = Group\n            interfaces = (Node,)\n            connection_field_factory = CustomField.factory\n\n\n    # Connections\n\n    class UserConnection(Connection):\n        class Meta:\n            node = UserNode\n\n\n    class GroupConnection(Connection):\n        class Meta:\n            node = GroupNode\n\n\n    # Query\n\n    class Query(ObjectType):\n        all_users = CustomField(UserConnection)\n        all_groups = CustomField(GroupConnection)\n\n.. code::\n\n    {\n      allUsers (filters: {isActive: true}){\n        edges { node { id } }\n      }\n      allGroups {\n        edges {\n          node {\n            users (filters: {isActive: true}) {\n              edges { node { id } }\n            }\n          }\n        }\n      }\n    }\n\nRename GraphQL filter field\n---------------------------\n\n.. code:: python\n\n    class CustomField(FilterableConnectionField):\n        filter_arg = 'where'\n\n\n    class Query(ObjectType):\n        all_users = CustomField(UserConnection, where=UserFilter())\n        all_groups = FilterableConnectionField(GroupConnection, filters=GroupFilter())\n\n.. code::\n\n    {\n      allUsers (where: {isActive: true}){\n        edges { node { id } }\n      }\n      allGroups (filters: {nameIn: [\"python\", \"development\"]}){\n        edges { node { id } }\n      }\n    }\n\nRename expression\n-----------------\n\n.. code:: python\n\n    class BaseFilter(FilterSet):\n        GRAPHQL_EXPRESSION_NAMES = dict(\n            FilterSet.GRAPHQL_EXPRESSION_NAMES,\n            **{'eq': 'equal', 'not': 'i_never_asked_for_this'}\n        )\n\n        class Meta:\n            abstract = True\n\n\n    class UserFilter(BaseFilter):\n        class Meta:\n            model = User\n            fields = {'first_name': ['eq'], 'last_name': ['eq']}\n\n.. code::\n\n    {\n      allUsers (filters: {iNeverAskedForThis: {firstNameEqual: \"Adam\", lastNameEqual: \"Jensen\"}}){\n        edges { node { id } }\n      }\n    }\n\nCustom shortcut value\n---------------------\n\n.. code:: python\n\n    class BaseFilter(FilterSet):\n        ALL = '__all__'\n\n        class Meta:\n            abstract = True\n\n\n    class UserFilter(BaseFilter):\n        class Meta:\n            model = User\n            fields = {'username': '__all__'}\n\nLocalization of documentation\n-----------------------------\n\n.. code:: python\n\n    class BaseFilter(FilterSet):\n        DESCRIPTIONS = {\n            'eq': '\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442.',\n            'ne': '\u041d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442.',\n            'like': '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0448\u043b\u0430\u0431\u043e\u043d\u0443.',\n            'ilike': '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0448\u043b\u0430\u0431\u043e\u043d\u0443.',\n            'regexp': '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e.',\n            'is_null': '\u0420\u0430\u0432\u043d\u043e \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `null`. \u041f\u0440\u0438\u043d\u0435\u043c\u0430\u0435\u0442 `true` \u0438\u043b\u0438 `false`.',\n            'in': '\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a.',\n            'not_in': '\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a.',\n            'lt': '\u041c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.',\n            'lte': '\u041c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.',\n            'gt': '\u0411\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.',\n            'gte': '\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.',\n            'range': '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.',\n            'and': '\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ``AND``.',\n            'or': '\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ``OR``.',\n            'not': '\u041e\u0442\u0440\u0438\u0446\u0430\u043d\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432.',\n        }\n\n        class Meta:\n            abstract = True\n\nCustom expression\n-----------------\n\n.. code:: python\n\n    def today_filter(field, value: bool):\n        today = func.date(field) == date.today()\n        return today if value else not_(today)\n\n\n    class BaseFilter(FilterSet):\n        # Add expression.\n        TODAY = 'today'\n\n        EXTRA_EXPRESSIONS = {\n            'today': {\n                # Add the name of the expression in GraphQL.\n                'graphql_name': 'today',\n                # Update allowed filters (used by shortcut).\n                'for_types': [types.Date, types.DateTime],\n                # Add a filtering function (takes the sqlalchemy field and value).\n                'filter': today_filter,\n                # Add the GraphQL input type. Column type by default.\n                'input_type': (\n                    lambda type_, nullable, doc: graphene.Boolean(nullable=False)\n                ),\n                # Description for the GraphQL schema.\n                'description': 'It is today.',\n            }\n        }\n\n        class Meta:\n            abstract = True\n\n\n    class PostFilter(BaseFilter):\n        class Meta:\n            model = Post\n            fields = {'created': ['today'], 'updated': [...]}\n\n.. code::\n\n    {\n      allPosts (filters: {createdToday: false, updatedToday: true}){\n        edges { node { id } }\n      }\n    }\n\nCustom column types\n-------------------\n\n``ALLOWED_FILTERS`` and ``EXTRA_ALLOWED_FILTERS`` only affect shortcut.\n\nIf you do not use the shortcut, you can skip the next steps described in the section.\n\n.. code:: python\n\n    class MyString(types.String):\n        pass\n\n\n    class BaseFilter(FilterSet):\n        # You can override all allowed filters\n        # ALLOWED_FILTERS = {types.Integer: ['eq']}\n\n        # Or add new column type\n        EXTRA_ALLOWED_FILTERS = {MyString: ['eq']}\n\n        class Meta:\n            abstract = True\n\n\n.. |preview| image:: https://github.com/art1415926535/graphene-sqlalchemy-filter/blob/master/preview.gif?raw=true\n.. |circle-ci| image:: https://circleci.com/gh/art1415926535/graphene-sqlalchemy-filter.svg?style=svg\n   :target: https://circleci.com/gh/art1415926535/graphene-sqlalchemy-filter\n.. |coveralls| image:: https://coveralls.io/repos/github/art1415926535/graphene-sqlalchemy-filter/badge.svg?branch=master\n   :target: https://coveralls.io/github/art1415926535/graphene-sqlalchemy-filter?branch=master\n.. |pypi| image:: https://badge.fury.io/py/graphene-sqlalchemy-filter.svg\n    :target: https://badge.fury.io/py/graphene-sqlalchemy-filter\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/art1415926535/graphene-sqlalchemy-filter", "keywords": "api graphql protocol rest relay graphene", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "graphene-sqlalchemy-filter", "package_url": "https://pypi.org/project/graphene-sqlalchemy-filter/", "platform": "", "project_url": "https://pypi.org/project/graphene-sqlalchemy-filter/", "project_urls": {"Homepage": "https://github.com/art1415926535/graphene-sqlalchemy-filter"}, "release_url": "https://pypi.org/project/graphene-sqlalchemy-filter/1.10.2/", "requires_dist": ["graphene-sqlalchemy (<3,>=2.1.0)", "SQLAlchemy (<2)"], "requires_python": ">=3.6", "summary": "Filters for Graphene SQLAlchemy integration", "version": "1.10.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"graphene-sqlalchemy-filter\">\n<h2>Graphene-SQLAlchemy-Filter</h2>\n<p><a href=\"https://circleci.com/gh/art1415926535/graphene-sqlalchemy-filter\" rel=\"nofollow\"><img alt=\"circle-ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9430ca75452b6065c68fd7e1e8672ad7ca1d92eb/68747470733a2f2f636972636c6563692e636f6d2f67682f617274313431353932363533352f6772617068656e652d73716c616c6368656d792d66696c7465722e7376673f7374796c653d737667\"></a> <a href=\"https://coveralls.io/github/art1415926535/graphene-sqlalchemy-filter?branch=master\" rel=\"nofollow\"><img alt=\"coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddf7deacf69dcf10361831db36f055aff3b159ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f617274313431353932363533352f6772617068656e652d73716c616c6368656d792d66696c7465722f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/graphene-sqlalchemy-filter\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7eb4dde2359c787b3704d61db82bcd58295b5a9/68747470733a2f2f62616467652e667572792e696f2f70792f6772617068656e652d73716c616c6368656d792d66696c7465722e737667\"></a></p>\n<p>Filters for <a href=\"https://github.com/graphql-python/graphene-sqlalchemy\" rel=\"nofollow\">Graphene SQLAlchemy integration</a></p>\n<p><img alt=\"preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2248a7e9a83e1225f78ee81d4996c9a4c4dd5e22/68747470733a2f2f6769746875622e636f6d2f617274313431353932363533352f6772617068656e652d73716c616c6368656d792d66696c7465722f626c6f622f6d61737465722f707265766965772e6769663f7261773d74727565\"></p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>Create a filter and add it to the graphene field.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">graphene_sqlalchemy_filter</span> <span class=\"kn\">import</span> <span class=\"n\">FilterableConnectionField</span><span class=\"p\">,</span> <span class=\"n\">FilterSet</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'ne'</span><span class=\"p\">,</span> <span class=\"s1\">'in'</span><span class=\"p\">,</span> <span class=\"s1\">'ilike'</span><span class=\"p\">],</span>\n            <span class=\"s1\">'is_active'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>  <span class=\"c1\"># shortcut!</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_admin_filter</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'admin'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">!=</span> <span class=\"s1\">'admin'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">FilterableConnectionField</span><span class=\"p\">(</span><span class=\"n\">UserConnection</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"n\">UserFilter</span><span class=\"p\">())</span>\n</pre>\n<p>Now, we\u2019re going to create query.</p>\n<pre>{\n  allUsers (\n    filters: {\n      isActive: true,\n      or: [\n        {isAdmin: true},\n        {usernameIn: [\"moderator\", \"cool guy\"]}\n      ]\n    }\n  ){\n    edges {\n      node {\n        id\n        username\n      }\n    }\n  }\n}\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"filters\">\n<h2>Filters</h2>\n<p>FilterSet class must inherit <tt>graphene_sqlalchemy_filter.FilterSet</tt> or your subclass of this class.</p>\n<p>There are three types of filters:</p>\n<ol>\n<li><a href=\"#automatically-generated-filters\" rel=\"nofollow\">automatically generated filters</a></li>\n<li><a href=\"#simple-filters\" rel=\"nofollow\">simple filters</a></li>\n<li><a href=\"#filters-that-require-join\" rel=\"nofollow\">filters that require join</a></li>\n</ol>\n<div id=\"automatically-generated-filters\">\n<h3>Automatically generated filters</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n       <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n       <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'eq'</span><span class=\"p\">,</span> <span class=\"s1\">'ne'</span><span class=\"p\">,</span> <span class=\"s1\">'in'</span><span class=\"p\">,</span> <span class=\"s1\">'ilike'</span><span class=\"p\">],</span>\n           <span class=\"s1\">'is_active'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>  <span class=\"c1\"># shortcut!</span>\n       <span class=\"p\">}</span>\n</pre>\n<p>Metaclass must contain the sqlalchemy model and fields.</p>\n<p>Automatically generated filters must be specified by <tt>fields</tt> variable. Key - field name of sqlalchemy model, value - list of expressions (or shortcut).</p>\n<p>Shortcut (default: <tt><span class=\"pre\">[...]</span></tt>) will add all the allowed filters for this type of sqlalchemy field.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Key</th>\n<th>Description</th>\n<th>GraphQL postfix</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>eq</tt></td>\n<td>equal</td>\n<td>\u00a0</td>\n</tr>\n<tr><td><tt>ne</tt></td>\n<td>not equal</td>\n<td>Ne</td>\n</tr>\n<tr><td><tt>like</tt></td>\n<td>like</td>\n<td>Like</td>\n</tr>\n<tr><td><tt>ilike</tt></td>\n<td>insensitive like</td>\n<td>Ilike</td>\n</tr>\n<tr><td><tt>is_null</tt></td>\n<td>is null</td>\n<td>IsNull</td>\n</tr>\n<tr><td><tt>in</tt></td>\n<td>in</td>\n<td>In</td>\n</tr>\n<tr><td><tt>not_in</tt></td>\n<td>not in</td>\n<td>NotIn</td>\n</tr>\n<tr><td><tt>lt</tt></td>\n<td>less than</td>\n<td>Lt</td>\n</tr>\n<tr><td><tt>lte</tt></td>\n<td>less than or equal</td>\n<td>Lte</td>\n</tr>\n<tr><td><tt>gt</tt></td>\n<td>greater than</td>\n<td>Gt</td>\n</tr>\n<tr><td><tt>gte</tt></td>\n<td>greater than or equal</td>\n<td>Gte</td>\n</tr>\n<tr><td><tt>range</tt></td>\n<td>in range</td>\n<td>Range</td>\n</tr>\n<tr><td><tt>contains</tt></td>\n<td>contains (PostgreSQL array)</td>\n<td>Contains</td>\n</tr>\n<tr><td><tt>contained_by</tt></td>\n<td>contained_by (PostgreSQL array)</td>\n<td>ContainedBy</td>\n</tr>\n<tr><td><tt>overlap</tt></td>\n<td>overlap (PostgreSQL array)</td>\n<td>Overlap</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"simple-filters\">\n<h3>Simple filters</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_admin_filter</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'admin'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">!=</span> <span class=\"s1\">'admin'</span>\n</pre>\n<p>Each simple filter has a class variable that passes to GraphQL schema as an input type and function <tt>&lt;field_name&gt;_filter</tt> that makes filtration.</p>\n<p>The filtration function takes the following arguments: * <tt>info</tt> - ResolveInfo graphene object * <tt>query</tt> - sqlalchemy query (not used in that filters type) * <tt>value</tt> - the value of a filter</p>\n<p>The return value can be any type of sqlalchemy clause. This means that you can return <tt><span class=\"pre\">not_(and_(or_(...),</span> <span class=\"pre\">...))</span></tt>.</p>\n<p>Metaclass is not required if you do not need automatically generated filters.</p>\n</div>\n<div id=\"filters-that-require-join\">\n<h3>Filters that require join</h3>\n<p>This type of filter is the same as <a href=\"#simple-filters\" rel=\"nofollow\">simple filters</a> but has a different return type.</p>\n<p>The filtration function should return a new sqlalchemy query and clause (like simple filters).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">is_moderator</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_admin_filter</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">membership</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">aliased</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">Membership</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'is_moderator'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">membership</span><span class=\"p\">,</span>\n            <span class=\"n\">and_</span><span class=\"p\">(</span>\n                <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span>\n                <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">is_moderator</span><span class=\"o\">.</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">filter_</span> <span class=\"o\">=</span> <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">isnot</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">filter_</span> <span class=\"o\">=</span> <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">filter_</span>\n</pre>\n<div id=\"model-aliases\">\n<h4>Model aliases</h4>\n<p>The function <tt>cls.aliased(query, model, <span class=\"pre\">name='...')</span></tt> returns <a href=\"https://docs.sqlalchemy.org/en/13/orm/query.html#sqlalchemy.orm.aliased\" rel=\"nofollow\">sqlalchemy alias</a> from the query. It has one differing parameter - <tt>query</tt> (SQLAlchemy Query object). Other arguments are the same as <a href=\"https://docs.sqlalchemy.org/en/13/orm/query.html#sqlalchemy.orm.aliased\" rel=\"nofollow\">sqlalchemy.orm.aliased</a>.</p>\n<p>Identical joins will be skipped by sqlalchemy.</p>\n<blockquote>\nChanged in version 1.7: The first parameter is now a query.</blockquote>\n</div>\n</div>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<div id=\"filter-registration-and-nested-fields-filters\">\n<h3>Filter registration and nested fields filters</h3>\n<p>Filters can be registered for each SQLAlchemy model in a subclass of <tt>FilterableConnectionField</tt>.</p>\n<p>Register your filters by inheriting <tt>FilterableConnectionField</tt> and setting <tt>filters</tt> (key - SQLAlchemy model, value - FilterSet object).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomField</span><span class=\"p\">(</span><span class=\"n\">FilterableConnectionField</span><span class=\"p\">):</span>\n    <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">User</span><span class=\"p\">:</span> <span class=\"n\">UserFilter</span><span class=\"p\">(),</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Overriding <tt>SQLAlchemyObjectType.connection_field_factory</tt> allows you to generate nested connections with filters.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserNode</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">,)</span>\n        <span class=\"n\">connection_field_factory</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n</pre>\n<p><strong>Important:</strong></p>\n<ol>\n<li>pagination (first/after, last/before) are performed by python (keep this in mind when working with large amounts of data)</li>\n<li>nested filters work by dataloaders</li>\n<li>this module optimizes one-to-many relationships, to optimize many-to-one relationships use <a href=\"https://github.com/operator/sqlalchemy_bulk_lazy_loader\" rel=\"nofollow\">sqlalchemy_bulk_lazy_loader</a></li>\n<li>nested filters require <tt><span class=\"pre\">graphene_sqlalchemy&gt;=2.1.2</span></tt></li>\n</ol>\n<div id=\"example\">\n<h4>Example</h4>\n<pre><span class=\"c1\"># Filters</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n       <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n       <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'is_active'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]}</span>\n\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomField</span><span class=\"p\">(</span><span class=\"n\">FilterableConnectionField</span><span class=\"p\">):</span>\n    <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">User</span><span class=\"p\">:</span> <span class=\"n\">UserFilter</span><span class=\"p\">(),</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"c1\"># Nodes</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserNode</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">,)</span>\n        <span class=\"n\">connection_field_factory</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GroupNode</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Group</span>\n        <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">,)</span>\n        <span class=\"n\">connection_field_factory</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n\n\n<span class=\"c1\"># Connections</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserConnection</span><span class=\"p\">(</span><span class=\"n\">Connection</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">UserNode</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GroupConnection</span><span class=\"p\">(</span><span class=\"n\">Connection</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">GroupNode</span>\n\n\n<span class=\"c1\"># Query</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"p\">(</span><span class=\"n\">UserConnection</span><span class=\"p\">)</span>\n    <span class=\"n\">all_groups</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"p\">(</span><span class=\"n\">GroupConnection</span><span class=\"p\">)</span>\n</pre>\n<pre>{\n  allUsers (filters: {isActive: true}){\n    edges { node { id } }\n  }\n  allGroups {\n    edges {\n      node {\n        users (filters: {isActive: true}) {\n          edges { node { id } }\n        }\n      }\n    }\n  }\n}\n</pre>\n</div>\n</div>\n<div id=\"rename-graphql-filter-field\">\n<h3>Rename GraphQL filter field</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomField</span><span class=\"p\">(</span><span class=\"n\">FilterableConnectionField</span><span class=\"p\">):</span>\n    <span class=\"n\">filter_arg</span> <span class=\"o\">=</span> <span class=\"s1\">'where'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">CustomField</span><span class=\"p\">(</span><span class=\"n\">UserConnection</span><span class=\"p\">,</span> <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">UserFilter</span><span class=\"p\">())</span>\n    <span class=\"n\">all_groups</span> <span class=\"o\">=</span> <span class=\"n\">FilterableConnectionField</span><span class=\"p\">(</span><span class=\"n\">GroupConnection</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"n\">GroupFilter</span><span class=\"p\">())</span>\n</pre>\n<pre>{\n  allUsers (where: {isActive: true}){\n    edges { node { id } }\n  }\n  allGroups (filters: {nameIn: [\"python\", \"development\"]}){\n    edges { node { id } }\n  }\n}\n</pre>\n</div>\n<div id=\"rename-expression\">\n<h3>Rename expression</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">GRAPHQL_EXPRESSION_NAMES</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">FilterSet</span><span class=\"o\">.</span><span class=\"n\">GRAPHQL_EXPRESSION_NAMES</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'eq'</span><span class=\"p\">:</span> <span class=\"s1\">'equal'</span><span class=\"p\">,</span> <span class=\"s1\">'not'</span><span class=\"p\">:</span> <span class=\"s1\">'i_never_asked_for_this'</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">BaseFilter</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'eq'</span><span class=\"p\">],</span> <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'eq'</span><span class=\"p\">]}</span>\n</pre>\n<pre>{\n  allUsers (filters: {iNeverAskedForThis: {firstNameEqual: \"Adam\", lastNameEqual: \"Jensen\"}}){\n    edges { node { id } }\n  }\n}\n</pre>\n</div>\n<div id=\"custom-shortcut-value\">\n<h3>Custom shortcut value</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">ALL</span> <span class=\"o\">=</span> <span class=\"s1\">'__all__'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserFilter</span><span class=\"p\">(</span><span class=\"n\">BaseFilter</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'__all__'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"localization-of-documentation\">\n<h3>Localization of documentation</h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"n\">DESCRIPTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'eq'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'ne'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'like'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0448\u043b\u0430\u0431\u043e\u043d\u0443.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'ilike'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0448\u043b\u0430\u0431\u043e\u043d\u0443.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'regexp'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'is_null'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0420\u0430\u0432\u043d\u043e \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `null`. \u041f\u0440\u0438\u043d\u0435\u043c\u0430\u0435\u0442 `true` \u0438\u043b\u0438 `false`.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'in'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'not_in'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'lt'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'lte'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'gt'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0411\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'gte'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0411\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'range'</span><span class=\"p\">:</span> <span class=\"s1\">'\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'and'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ``AND``.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'or'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ``OR``.'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'not'</span><span class=\"p\">:</span> <span class=\"s1\">'\u041e\u0442\u0440\u0438\u0446\u0430\u043d\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432.'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"custom-expression\">\n<h3>Custom expression</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">today_filter</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"n\">today</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">today</span> <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"k\">else</span> <span class=\"n\">not_</span><span class=\"p\">(</span><span class=\"n\">today</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Add expression.</span>\n    <span class=\"n\">TODAY</span> <span class=\"o\">=</span> <span class=\"s1\">'today'</span>\n\n    <span class=\"n\">EXTRA_EXPRESSIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'today'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># Add the name of the expression in GraphQL.</span>\n            <span class=\"s1\">'graphql_name'</span><span class=\"p\">:</span> <span class=\"s1\">'today'</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Update allowed filters (used by shortcut).</span>\n            <span class=\"s1\">'for_types'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">],</span>\n            <span class=\"c1\"># Add a filtering function (takes the sqlalchemy field and value).</span>\n            <span class=\"s1\">'filter'</span><span class=\"p\">:</span> <span class=\"n\">today_filter</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Add the GraphQL input type. Column type by default.</span>\n            <span class=\"s1\">'input_type'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                <span class=\"k\">lambda</span> <span class=\"n\">type_</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"p\">:</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"p\">),</span>\n            <span class=\"c1\"># Description for the GraphQL schema.</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'It is today.'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostFilter</span><span class=\"p\">(</span><span class=\"n\">BaseFilter</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'today'</span><span class=\"p\">],</span> <span class=\"s1\">'updated'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]}</span>\n</pre>\n<pre>{\n  allPosts (filters: {createdToday: false, updatedToday: true}){\n    edges { node { id } }\n  }\n}\n</pre>\n</div>\n<div id=\"custom-column-types\">\n<h3>Custom column types</h3>\n<p><tt>ALLOWED_FILTERS</tt> and <tt>EXTRA_ALLOWED_FILTERS</tt> only affect shortcut.</p>\n<p>If you do not use the shortcut, you can skip the next steps described in the section.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyString</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseFilter</span><span class=\"p\">(</span><span class=\"n\">FilterSet</span><span class=\"p\">):</span>\n    <span class=\"c1\"># You can override all allowed filters</span>\n    <span class=\"c1\"># ALLOWED_FILTERS = {types.Integer: ['eq']}</span>\n\n    <span class=\"c1\"># Or add new column type</span>\n    <span class=\"n\">EXTRA_ALLOWED_FILTERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">MyString</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'eq'</span><span class=\"p\">]}</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6474468, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "66cbb9724caaa91c8b04ec1065324aba", "sha256": "a8603a536b71acfc4d3cfe4a7344b930056c15c2b43b350bd1cc79008d7ab072"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "66cbb9724caaa91c8b04ec1065324aba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7967, "upload_time": "2019-08-07T18:34:50", "upload_time_iso_8601": "2019-08-07T18:34:50.270190Z", "url": "https://files.pythonhosted.org/packages/b5/8e/6d4a34a58567aff4da4b6203b51542abb8221c4977218f56cb501b41b6aa/graphene_sqlalchemy_filter-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9cb50d2c312412d6db65f921a485b638", "sha256": "3506cc0860b7003f6ed0eb345f1cf3d578310422831035a71c63ecf9a4713cb2"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9cb50d2c312412d6db65f921a485b638", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6836, "upload_time": "2019-08-07T18:34:54", "upload_time_iso_8601": "2019-08-07T18:34:54.777237Z", "url": "https://files.pythonhosted.org/packages/9c/19/5896aebef586f09107c9b57bc68a45bb583fc44966aad2b191340a8fcccf/graphene-sqlalchemy-filter-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0fbe3edd3701efc9a319b6d287f6bc1a", "sha256": "eae611e6470a0cc102d526c52e79df60b4aab3add2026c3d45dd8905d77cc32a"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0fbe3edd3701efc9a319b6d287f6bc1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7948, "upload_time": "2019-08-09T12:22:37", "upload_time_iso_8601": "2019-08-09T12:22:37.528083Z", "url": "https://files.pythonhosted.org/packages/a7/10/e1fdf95df0539dfa55006c77e4aa61b024717f070c2359897e3b38a51e61/graphene_sqlalchemy_filter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ae4b4254f3d8a88c02820651b9f1011", "sha256": "216294325a624d7ebe8f561a31963b56d4cb83adede53c6555587171dec0bd84"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8ae4b4254f3d8a88c02820651b9f1011", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6624, "upload_time": "2019-08-09T12:22:38", "upload_time_iso_8601": "2019-08-09T12:22:38.846804Z", "url": "https://files.pythonhosted.org/packages/fd/9d/334c10950b12a7a1c249ed00681a87a1927710e7021cb37eab5885e73556/graphene-sqlalchemy-filter-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5dd936636835e2ce1cc0646b966f8b08", "sha256": "cacf6b7de9b2dc9f909af2941a2534721142d551b0891f0cf84c45068d48fac9"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5dd936636835e2ce1cc0646b966f8b08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10336, "upload_time": "2019-08-09T17:26:38", "upload_time_iso_8601": "2019-08-09T17:26:38.077684Z", "url": "https://files.pythonhosted.org/packages/e2/b4/7ba2ae02f6085ba8a0f63ed07d0f5caa1c201cfc98b63cfc7c3b7aed8033/graphene_sqlalchemy_filter-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03d1b44ab61190d6e56f62e66df620a1", "sha256": "06c9dad16fd8749c0a814174408ed173a73f4af22605bc3be0c6b59a3545af99"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.1.0.tar.gz", "has_sig": false, "md5_digest": "03d1b44ab61190d6e56f62e66df620a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11244, "upload_time": "2019-08-09T17:26:39", "upload_time_iso_8601": "2019-08-09T17:26:39.873570Z", "url": "https://files.pythonhosted.org/packages/0c/66/34694d5deec2037d2bfeed0a160922ea252dc5731db37869c07640d6c4f1/graphene-sqlalchemy-filter-1.1.0.tar.gz", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "6ac4f5384ace37ac4482eb938dbe26d8", "sha256": "ddf4e6fd0bf36513f595d5dacc9d6476e2f319467ffb48f3a6e954583aa9c9f6"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac4f5384ace37ac4482eb938dbe26d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14993, "upload_time": "2019-11-19T17:55:51", "upload_time_iso_8601": "2019-11-19T17:55:51.860344Z", "url": "https://files.pythonhosted.org/packages/0e/a0/4b6cdeeb4aef5265e2f29d1b910085fe199da0366f4ab268293c7a90d367/graphene_sqlalchemy_filter-1.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1d755edcbd26f4147f438d2a52e7e64", "sha256": "4555034046e66e26d6bab052a4ed531f66e8f77d1d210619c6a15cfdc16396af"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.10.0.tar.gz", "has_sig": false, "md5_digest": "b1d755edcbd26f4147f438d2a52e7e64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18000, "upload_time": "2019-11-19T17:55:53", "upload_time_iso_8601": "2019-11-19T17:55:53.784631Z", "url": "https://files.pythonhosted.org/packages/a7/a5/077107fd89dbd3e55a94c073ea8861916beb6a9875fefe9d96c25ecb3c96/graphene-sqlalchemy-filter-1.10.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "74852fd73ad683cea49193145ecca5f8", "sha256": "e3e7adf4215e2aa8ddfaae448ed41ed5e387626211d21f6538e111baf13734a9"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "74852fd73ad683cea49193145ecca5f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15116, "upload_time": "2019-12-30T20:52:47", "upload_time_iso_8601": "2019-12-30T20:52:47.237030Z", "url": "https://files.pythonhosted.org/packages/b0/0b/1950eece74af13c02a8953dbaa0490aeda14f0825bc11d1df3649813a233/graphene_sqlalchemy_filter-1.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16720f16dbed47001a5cb091e9876105", "sha256": "d03dc47d5436143695dfea048c54abffdc7266c30aa75aa3c1db4d76c7841e08"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.10.1.tar.gz", "has_sig": false, "md5_digest": "16720f16dbed47001a5cb091e9876105", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18104, "upload_time": "2019-12-30T20:52:49", "upload_time_iso_8601": "2019-12-30T20:52:49.099410Z", "url": "https://files.pythonhosted.org/packages/1e/5d/7caede11cab64268b76492dad9c2d23bbcf3d95ca2122b73516e65289f1d/graphene-sqlalchemy-filter-1.10.1.tar.gz", "yanked": false}], "1.10.2": [{"comment_text": "", "digests": {"md5": "e007c05cef47611b33233ae3c1a19422", "sha256": "688ce24e6cce1da070f1f6b77866d3bae8564e88a08585b6005e2f4439a1be25"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e007c05cef47611b33233ae3c1a19422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15212, "upload_time": "2020-01-17T17:55:04", "upload_time_iso_8601": "2020-01-17T17:55:04.722501Z", "url": "https://files.pythonhosted.org/packages/c6/0e/5cef9364456025ed966e459e67994b6756cb96ad94e46cef3035d6b642bc/graphene_sqlalchemy_filter-1.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a1a597f0000815889d91b2509e49de1", "sha256": "cff78b7cca7718777107c8041d0cbae678e8b080742437ff3d71c5974a16613e"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.10.2.tar.gz", "has_sig": false, "md5_digest": "6a1a597f0000815889d91b2509e49de1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18202, "upload_time": "2020-01-17T17:55:06", "upload_time_iso_8601": "2020-01-17T17:55:06.136498Z", "url": "https://files.pythonhosted.org/packages/c1/3a/52d57ef337ce4ab5f3cd7704795cba2b09205dd0e73be9d66a0c66d5a9e2/graphene-sqlalchemy-filter-1.10.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3a21842ebecade2de9a9acab1f785864", "sha256": "48dcfe5f1a8efce64d7a91a5a22d92dc27ced17824bd5af286befd45234e7687"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a21842ebecade2de9a9acab1f785864", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10402, "upload_time": "2019-08-09T19:05:45", "upload_time_iso_8601": "2019-08-09T19:05:45.357220Z", "url": "https://files.pythonhosted.org/packages/61/28/afa95618c7c0fe1ebc73585dfc8cdfeafd1ea4a1bb841e97465ef2109601/graphene_sqlalchemy_filter-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eab3188fbb95014703038bd3e6b922ec", "sha256": "5447fc70f4a27e4bef9ce4eddfc1f547e844427b150b3a5ff9d0f5024f0ac7dc"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.2.0.tar.gz", "has_sig": false, "md5_digest": "eab3188fbb95014703038bd3e6b922ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11567, "upload_time": "2019-08-09T19:05:46", "upload_time_iso_8601": "2019-08-09T19:05:46.975041Z", "url": "https://files.pythonhosted.org/packages/6a/ad/9eb6536146c6f74864ae8d3b3b13e81f97e6062bc265cb11a9ba0f45f5fe/graphene-sqlalchemy-filter-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "6ff4d57ca3ea6129cf4a6dd3b4810a8d", "sha256": "e74c0bfd2309cb8ae334d63d737d92a82cefef08d4e670ae9e30cb2ae58f5112"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ff4d57ca3ea6129cf4a6dd3b4810a8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10703, "upload_time": "2019-08-10T12:25:33", "upload_time_iso_8601": "2019-08-10T12:25:33.795843Z", "url": "https://files.pythonhosted.org/packages/a6/48/6d1337615bea912bdefa361766ae9e3bf0049c76d4e409b6da70284a5771/graphene_sqlalchemy_filter-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c61e8c0313b40389c67872834be03b15", "sha256": "fec9d4caeec44aadd570dbd9b76257b4437bc5b4d28d6ee3a00e5bfa4866f908"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.3.0.tar.gz", "has_sig": false, "md5_digest": "c61e8c0313b40389c67872834be03b15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12588, "upload_time": "2019-08-10T12:25:35", "upload_time_iso_8601": "2019-08-10T12:25:35.822812Z", "url": "https://files.pythonhosted.org/packages/d3/a1/68a49adef5fdae45302d77440a42900715f27f267126d6689fde06ca6585/graphene-sqlalchemy-filter-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "8b3b84e0087a0f98a083387f4f54ff45", "sha256": "e6ccb56af5f45189b47a602b8d916883c36252e72416d1d7e2060aa86306b1dc"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8b3b84e0087a0f98a083387f4f54ff45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10698, "upload_time": "2019-08-10T13:07:53", "upload_time_iso_8601": "2019-08-10T13:07:53.789845Z", "url": "https://files.pythonhosted.org/packages/29/60/50242a23366f4e2e3a85d5e7243fa45592b5c38e8114a6b66835f3a22cea/graphene_sqlalchemy_filter-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cacfa6c8726e2846620db8f25c0caba2", "sha256": "ab2ba7e5ec0558450f3ef551e20f83e480842c51d9db1f8894c66b9d7d5a55af"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.3.1.tar.gz", "has_sig": false, "md5_digest": "cacfa6c8726e2846620db8f25c0caba2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12586, "upload_time": "2019-08-10T13:07:55", "upload_time_iso_8601": "2019-08-10T13:07:55.442874Z", "url": "https://files.pythonhosted.org/packages/dc/d6/b2a80e089bfd2291b1f89931bbc5056ab35f365c1a9d253e497cd68b61d7/graphene-sqlalchemy-filter-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "517b00f9580e83df95f7cdcfc06171b3", "sha256": "fde4831a8bc13b719f73c58bb90fc39c8f2d3967427f54ffda142321be5080c7"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "517b00f9580e83df95f7cdcfc06171b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10746, "upload_time": "2019-08-12T19:18:50", "upload_time_iso_8601": "2019-08-12T19:18:50.516879Z", "url": "https://files.pythonhosted.org/packages/27/0f/88f17c7b61a0232b339d39c096e059dd6bc11bf5df3b20ea733801a1ce1c/graphene_sqlalchemy_filter-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49501063cfa7ecb312ad2ed14a6ee778", "sha256": "9479c6085177ba3988ed19037ecbb6b8350a075d67d7722d5f9c7d5c86ccd168"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.4.0.tar.gz", "has_sig": false, "md5_digest": "49501063cfa7ecb312ad2ed14a6ee778", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12597, "upload_time": "2019-08-12T19:18:52", "upload_time_iso_8601": "2019-08-12T19:18:52.080413Z", "url": "https://files.pythonhosted.org/packages/37/a4/ad05f482f13e0d7127ae04433117be28e36db280cc95781c6562665af2f9/graphene-sqlalchemy-filter-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "2d733c3924cf851a17a032cafc83a2e5", "sha256": "52b72e1135013b0d0b4016014fc019b35c5fab520a553333f640fd37369ccff6"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d733c3924cf851a17a032cafc83a2e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10988, "upload_time": "2019-08-18T10:17:39", "upload_time_iso_8601": "2019-08-18T10:17:39.258330Z", "url": "https://files.pythonhosted.org/packages/e5/28/6c61e4951373dee4945f6b4f8f1bd6d80603babaaa9000df2f9c92af70d8/graphene_sqlalchemy_filter-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "908bcdfbdae48e453e102f34b66ab0a1", "sha256": "35d86592f4b9825a72a924d9feb74164b1a03852c9846f0c8b512e503bd801f8"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.5.0.tar.gz", "has_sig": false, "md5_digest": "908bcdfbdae48e453e102f34b66ab0a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13049, "upload_time": "2019-08-18T10:17:41", "upload_time_iso_8601": "2019-08-18T10:17:41.339867Z", "url": "https://files.pythonhosted.org/packages/f8/8a/bf256c6c8e8c5b94d7b3a093bcf6412cab23ef6e6ed8cd793921c5e162b2/graphene-sqlalchemy-filter-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "c42249eaf56bfd3907d92f598c2be278", "sha256": "f498bddb4f1ae53734185aa0aa52b4aba4026159f6bf7f0466af002d23cfe129"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c42249eaf56bfd3907d92f598c2be278", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10991, "upload_time": "2019-08-18T10:49:08", "upload_time_iso_8601": "2019-08-18T10:49:08.073535Z", "url": "https://files.pythonhosted.org/packages/07/f0/a442684441588c60554ac3a345081369ad73fb1fb240d8e47866f2627a81/graphene_sqlalchemy_filter-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa9f80ee590c0fe641d10edcbde38df5", "sha256": "917f93c580a8eb894d86855dc6f70aca2025fe8dee19d7b90bc52c0014b54aad"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.5.1.tar.gz", "has_sig": false, "md5_digest": "fa9f80ee590c0fe641d10edcbde38df5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13056, "upload_time": "2019-08-18T10:49:09", "upload_time_iso_8601": "2019-08-18T10:49:09.667747Z", "url": "https://files.pythonhosted.org/packages/87/b1/5fb7182c01a2e27c4d08bf57609398cf3a8711f518ed9cade0928a17c5f9/graphene-sqlalchemy-filter-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "4c8623c00e3be8b76982fd2e5daf8463", "sha256": "e3ababd1e2a24094f70a9cca8907fa432c93f6795bcaf5af424d253db0258d81"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4c8623c00e3be8b76982fd2e5daf8463", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11115, "upload_time": "2019-08-29T21:02:49", "upload_time_iso_8601": "2019-08-29T21:02:49.743941Z", "url": "https://files.pythonhosted.org/packages/64/40/5a789f27aa07712ce3fb0491e719762c98a52342bf954d9607b6caf18a9c/graphene_sqlalchemy_filter-1.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f93d2852faaefaeed21f461b6320102", "sha256": "6a79c3aa24c66c424533b26e8bf1f6a7c0d9bde59407a1617384691db6faf3f6"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.6.0.tar.gz", "has_sig": false, "md5_digest": "5f93d2852faaefaeed21f461b6320102", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13222, "upload_time": "2019-08-29T21:02:51", "upload_time_iso_8601": "2019-08-29T21:02:51.296308Z", "url": "https://files.pythonhosted.org/packages/36/07/87f9d717d0b8fa3b263086640fc0a74db5049455a3da61112bc34b789bef/graphene-sqlalchemy-filter-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "603b972bc2ee6e75dadc62d1d258e169", "sha256": "235654845574978961af089a85693408d96232b0ecefcdcb7e5c4faaadd0b5f3"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "603b972bc2ee6e75dadc62d1d258e169", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11609, "upload_time": "2019-09-07T13:30:33", "upload_time_iso_8601": "2019-09-07T13:30:33.725090Z", "url": "https://files.pythonhosted.org/packages/0c/6e/405b5caf8790742497951cda7b48dc7cbb93fab5dd5e1ceb2ad2d64d2551/graphene_sqlalchemy_filter-1.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8410e4dd8485241fddbd736527374659", "sha256": "e6a65291c1f92d2786f315c31bdfbafc8266d5e00e83b1d28b22f0200b3be43a"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.7.0.tar.gz", "has_sig": false, "md5_digest": "8410e4dd8485241fddbd736527374659", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13758, "upload_time": "2019-09-07T13:30:34", "upload_time_iso_8601": "2019-09-07T13:30:34.924673Z", "url": "https://files.pythonhosted.org/packages/57/56/45137e63aadb518e8018064ffc6e7c98950ce85682e44466228a91fcc4b3/graphene-sqlalchemy-filter-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "cebd4cc8017b25f05e1392cad95970f8", "sha256": "58a7daa568900af56a84045c5af0722ffc1660497468b36019d7583f536fb4e4"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cebd4cc8017b25f05e1392cad95970f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12173, "upload_time": "2019-09-26T10:11:42", "upload_time_iso_8601": "2019-09-26T10:11:42.614092Z", "url": "https://files.pythonhosted.org/packages/c5/de/9aa64309fc1c56502d491b0e499d09552bd4f905149b7f0fa615d3d10c95/graphene_sqlalchemy_filter-1.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "056b7c1e09a597bd92f3e4b99f95c631", "sha256": "521b700ed8157e8f9aef525ed082b88c750a1e6caecb9d87f4f52d934e37bace"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.8.0.tar.gz", "has_sig": false, "md5_digest": "056b7c1e09a597bd92f3e4b99f95c631", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14602, "upload_time": "2019-09-26T10:11:44", "upload_time_iso_8601": "2019-09-26T10:11:44.095073Z", "url": "https://files.pythonhosted.org/packages/e8/b2/bfda9dac533b4e54aa6c976af7149432c0c886a68593b59efb1692e4c508/graphene-sqlalchemy-filter-1.8.0.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "9bf2dc46b61940e2f35cc5f29dc42a8a", "sha256": "65209768353f5219d80d5e4ae18ae9aa07a0f6cf8e945fbbb698115caa3fc6c3"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bf2dc46b61940e2f35cc5f29dc42a8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12280, "upload_time": "2019-11-05T20:59:51", "upload_time_iso_8601": "2019-11-05T20:59:51.459420Z", "url": "https://files.pythonhosted.org/packages/29/3a/f6e6a51cc052651f194700000391ccc048fe1a1d41fe7bb6af674d2a330e/graphene_sqlalchemy_filter-1.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a69680ae3ca9bac3e790f824b19de453", "sha256": "4a97e5dfde2c8d863f2639f2d2041470076546934fdf0a4c367ad34a6896c1f1"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.9.0.tar.gz", "has_sig": false, "md5_digest": "a69680ae3ca9bac3e790f824b19de453", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14725, "upload_time": "2019-11-05T20:59:53", "upload_time_iso_8601": "2019-11-05T20:59:53.271266Z", "url": "https://files.pythonhosted.org/packages/5d/e5/66dd506c02aa4201b406ff54ce5c9ac373ea49b00ad815337a7e3d88c2e6/graphene-sqlalchemy-filter-1.9.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "4f9c67559e478e43af7836d53b8348e5", "sha256": "05c6a526a0bc2a506eb1ded9f82bb99f93463887d9472d541b67b7d99bb02321"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f9c67559e478e43af7836d53b8348e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12311, "upload_time": "2019-11-05T21:48:17", "upload_time_iso_8601": "2019-11-05T21:48:17.790678Z", "url": "https://files.pythonhosted.org/packages/4d/e5/9df2e487443483b9a98bdd72a71fe91fa3a24b7c8623590733eee39f9aba/graphene_sqlalchemy_filter-1.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72f13790f8428c8c217cbbdfda66e035", "sha256": "46c16da2c59d3bda9f16b8b9ca32f19e195b24adc26bf11da984f2e8d0f3c804"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.9.1.tar.gz", "has_sig": false, "md5_digest": "72f13790f8428c8c217cbbdfda66e035", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14752, "upload_time": "2019-11-05T21:48:19", "upload_time_iso_8601": "2019-11-05T21:48:19.135952Z", "url": "https://files.pythonhosted.org/packages/85/68/10e764f304fa2d04d84fb140855e841b46d5fd03e3a6f96c0c1650bfd94a/graphene-sqlalchemy-filter-1.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e007c05cef47611b33233ae3c1a19422", "sha256": "688ce24e6cce1da070f1f6b77866d3bae8564e88a08585b6005e2f4439a1be25"}, "downloads": -1, "filename": "graphene_sqlalchemy_filter-1.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e007c05cef47611b33233ae3c1a19422", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15212, "upload_time": "2020-01-17T17:55:04", "upload_time_iso_8601": "2020-01-17T17:55:04.722501Z", "url": "https://files.pythonhosted.org/packages/c6/0e/5cef9364456025ed966e459e67994b6756cb96ad94e46cef3035d6b642bc/graphene_sqlalchemy_filter-1.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a1a597f0000815889d91b2509e49de1", "sha256": "cff78b7cca7718777107c8041d0cbae678e8b080742437ff3d71c5974a16613e"}, "downloads": -1, "filename": "graphene-sqlalchemy-filter-1.10.2.tar.gz", "has_sig": false, "md5_digest": "6a1a597f0000815889d91b2509e49de1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18202, "upload_time": "2020-01-17T17:55:06", "upload_time_iso_8601": "2020-01-17T17:55:06.136498Z", "url": "https://files.pythonhosted.org/packages/c1/3a/52d57ef337ce4ab5f3cd7704795cba2b09205dd0e73be9d66a0c66d5a9e2/graphene-sqlalchemy-filter-1.10.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:41 2020"}