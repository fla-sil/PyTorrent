{"info": {"author": "David Moreno", "author_email": "dmoreno@serverboards.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# Python3 Serverboards bindings\n\nhttps://serverboards.io\n\nThis python module allows to create plugins in the Python programming language\nfor Serverboards.\n\nServerboards is a Server Management, Automation and Monitoring platform.\n\nIt uses JSON RPC over stdin/stdout to allow plugins to extend the core\nfunctionality; even the core functionality is programmed using this very\nsame bindings.\n\nThere are two versions:\n\n* sync.py -- Classic Python. Blocks on every call although it does some\n  tricks to allow some concurrent async code. It is very limited and its\n  very difficult to do some kind of highly concurrent stuff. Only recommended\n  as a basic start and for very simple plugins.\n\n* async.py -- Curio based bindings that allow to reliably have several\n  concurrent requests at the same time, each may be blocked doing some async\n  work, as remote requests and so on.\n\nCurrently the sync version is more tested, but all future development will\nbe done on the async version.\n\nBoth provide the following basic building blocks:\n\n## `@rpc_method`\n\nDecorator over every function that is exported to the RPC.\n\n## `rpc.call(method, *args, **kwargs)` / `rpc.event(method, *args, **kwargs)`\n\nPerform remote calls or events. Events do not wait for a response.\n\n## `rpc.subscribe(event, callback)`\n\nSubscribe to a remote event. The callback will be called when that event\nis emitted from the core.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/serverboards/serverboards/", "keywords": "serverboards dashboard json rpc bindings async sync", "license": "", "maintainer": "", "maintainer_email": "", "name": "serverboards", "package_url": "https://pypi.org/project/serverboards/", "platform": "", "project_url": "https://pypi.org/project/serverboards/", "project_urls": {"Homepage": "https://github.com/serverboards/serverboards/"}, "release_url": "https://pypi.org/project/serverboards/18.4b1/", "requires_dist": null, "requires_python": "", "summary": "Serverboards python bindings", "version": "18.4b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Python3 Serverboards bindings</p>\n<p><a href=\"https://serverboards.io\" rel=\"nofollow\">https://serverboards.io</a></p>\n<p>This python module allows to create plugins in the Python programming language\nfor Serverboards.</p>\n<p>Serverboards is a Server Management, Automation and Monitoring platform.</p>\n<p>It uses JSON RPC over stdin/stdout to allow plugins to extend the core\nfunctionality; even the core functionality is programmed using this very\nsame bindings.</p>\n<p>There are two versions:</p>\n<ul>\n<li>sync.py \u2013 Classic Python. Blocks on every call although it does some\ntricks to allow some concurrent async code. It is very limited and its\nvery difficult to do some kind of highly concurrent stuff. Only recommended\nas a basic start and for very simple plugins.</li>\n<li>async.py \u2013 Curio based bindings that allow to reliably have several\nconcurrent requests at the same time, each may be blocked doing some async\nwork, as remote requests and so on.</li>\n</ul>\n<p>Currently the sync version is more tested, but all future development will\nbe done on the async version.</p>\n<p>Both provide the following basic building blocks:</p>\n<p>## <cite>@rpc_method</cite></p>\n<p>Decorator over every function that is exported to the RPC.</p>\n<p>## <cite>rpc.call(method, *args, **kwargs)</cite> / <cite>rpc.event(method, *args, **kwargs)</cite></p>\n<p>Perform remote calls or events. Events do not wait for a response.</p>\n<p>## <cite>rpc.subscribe(event, callback)</cite></p>\n<p>Subscribe to a remote event. The callback will be called when that event\nis emitted from the core.</p>\n\n          </div>"}, "last_serial": 3606980, "releases": {"18.4b1": [{"comment_text": "", "digests": {"md5": "968b3e096720d138e2462ae07a5de949", "sha256": "20a455d7747964d24c0f90c4d1643344c2ad25b1e218ad29036dbcb44ed89376"}, "downloads": -1, "filename": "serverboards-18.4b1.tar.gz", "has_sig": false, "md5_digest": "968b3e096720d138e2462ae07a5de949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17238, "upload_time": "2018-02-22T22:31:01", "upload_time_iso_8601": "2018-02-22T22:31:01.508222Z", "url": "https://files.pythonhosted.org/packages/2c/61/3041a9d65f7b5c7d17b685833c5ceaa83d5672b92eada4f2ed2883d2f459/serverboards-18.4b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "968b3e096720d138e2462ae07a5de949", "sha256": "20a455d7747964d24c0f90c4d1643344c2ad25b1e218ad29036dbcb44ed89376"}, "downloads": -1, "filename": "serverboards-18.4b1.tar.gz", "has_sig": false, "md5_digest": "968b3e096720d138e2462ae07a5de949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17238, "upload_time": "2018-02-22T22:31:01", "upload_time_iso_8601": "2018-02-22T22:31:01.508222Z", "url": "https://files.pythonhosted.org/packages/2c/61/3041a9d65f7b5c7d17b685833c5ceaa83d5672b92eada4f2ed2883d2f459/serverboards-18.4b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:02 2020"}