{"info": {"author": "refnode", "author_email": "refnode@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=====\ncycle\n=====\n\nA Python software build management tool inspired by Maven.\n\nQuickstart\n----------\n\nAfter installing cycle via pip or rpm, just generate your first simple project calling::\n\n    cycle prototype generate mynewproject [-p prototype]\n    \nIntro\n-----\n\nCycle is small prototype of a build tool inspired by Apache Maven.\nOn the long term, it should provide some of the features Maven provides, such as\n\n* a predefined, but flexible to customize lifecycle for projects\n* a flexible integration of additional commands\n* integrations to pypi, github and other remote services\n* and a bunch of prototypes (maven archetypes) with good common used conventions\n\nWhy I started the project?\n--------------------------\n\nI'm a sysadmin and developers for a while working with several languages and tools.\nFor some languages there a powerful tools and guidelines how to develop,\nfor other languages a developer has to review a bunch of projects to analyze the common practices.\n\nFor almost all software projects a basic software lifecylce is identical as you can\nreview for yourself looking at the Maven documentation, eg.\n\n* generate a project from a skeleton/template\n* generate additional config files (special environments, test-tools config, ...)\n* registering/setup remote resource (pypi, scm repo, ...)\n* develop and test (best in the way of feature branches)\n* write/generate documentation\n* release (source, binary, distro formats)\n\nSometimes this seems a bit far away from `DRY <http://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_?\n\nWhy not just using Maven?\n\nGood question! Maybe the best answer is: Maven is too powerful and a too huge step for many\ndevelopers. At least working/customizing the pom.xml files seems to be a too horrible thing\nfor many.\n\nSo I try to develop this small Maven inspired tool as a lightweight tools for Python and other\nlanguages. Let's look what it becomes :-)\n\nContributions are welcome.\n\nReferences\n==========\n\n* `Apache Maven Website <https://maven.apache.org>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/refnode/cycle", "keywords": "cycle code generator builder maven", "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "cycle", "package_url": "https://pypi.org/project/cycle/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cycle/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/refnode/cycle"}, "release_url": "https://pypi.org/project/cycle/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A Python software build management tool inspired by Maven", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python software build management tool inspired by Maven.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>After installing cycle via pip or rpm, just generate your first simple project calling:</p>\n<pre>cycle prototype generate mynewproject [-p prototype]\n</pre>\n</div>\n<div id=\"intro\">\n<h2>Intro</h2>\n<p>Cycle is small prototype of a build tool inspired by Apache Maven.\nOn the long term, it should provide some of the features Maven provides, such as</p>\n<ul>\n<li>a predefined, but flexible to customize lifecycle for projects</li>\n<li>a flexible integration of additional commands</li>\n<li>integrations to pypi, github and other remote services</li>\n<li>and a bunch of prototypes (maven archetypes) with good common used conventions</li>\n</ul>\n</div>\n<div id=\"why-i-started-the-project\">\n<h2>Why I started the project?</h2>\n<p>I\u2019m a sysadmin and developers for a while working with several languages and tools.\nFor some languages there a powerful tools and guidelines how to develop,\nfor other languages a developer has to review a bunch of projects to analyze the common practices.</p>\n<p>For almost all software projects a basic software lifecylce is identical as you can\nreview for yourself looking at the Maven documentation, eg.</p>\n<ul>\n<li>generate a project from a skeleton/template</li>\n<li>generate additional config files (special environments, test-tools config, \u2026)</li>\n<li>registering/setup remote resource (pypi, scm repo, \u2026)</li>\n<li>develop and test (best in the way of feature branches)</li>\n<li>write/generate documentation</li>\n<li>release (source, binary, distro formats)</li>\n</ul>\n<p>Sometimes this seems a bit far away from <a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow\">DRY</a>?</p>\n<p>Why not just using Maven?</p>\n<p>Good question! Maybe the best answer is: Maven is too powerful and a too huge step for many\ndevelopers. At least working/customizing the pom.xml files seems to be a too horrible thing\nfor many.</p>\n<p>So I try to develop this small Maven inspired tool as a lightweight tools for Python and other\nlanguages. Let\u2019s look what it becomes :-)</p>\n<p>Contributions are welcome.</p>\n<div id=\"references\">\n<h3>References</h3>\n<ul>\n<li><a href=\"https://maven.apache.org\" rel=\"nofollow\">Apache Maven Website</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1502460, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3dc425922c7f668e824c53ba6efb3771", "sha256": "12b4dd38a8e9f3cb9a63dffdf14fd7d2d905bdb5e2c07f7750a88be145f32608"}, "downloads": -1, "filename": "cycle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3dc425922c7f668e824c53ba6efb3771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16514, "upload_time": "2015-04-12T19:15:06", "upload_time_iso_8601": "2015-04-12T19:15:06.185726Z", "url": "https://files.pythonhosted.org/packages/ea/3a/71e73c2311946c250ca47933ea9311201f498baea72c30e3f18ae1be9194/cycle-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dc425922c7f668e824c53ba6efb3771", "sha256": "12b4dd38a8e9f3cb9a63dffdf14fd7d2d905bdb5e2c07f7750a88be145f32608"}, "downloads": -1, "filename": "cycle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3dc425922c7f668e824c53ba6efb3771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16514, "upload_time": "2015-04-12T19:15:06", "upload_time_iso_8601": "2015-04-12T19:15:06.185726Z", "url": "https://files.pythonhosted.org/packages/ea/3a/71e73c2311946c250ca47933ea9311201f498baea72c30e3f18ae1be9194/cycle-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:07 2020"}