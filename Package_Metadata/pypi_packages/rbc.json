{"info": {"author": "Rich Wareham", "author_email": "rich.rbc@richwareham.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Compilers"], "description": "Rich's B Compiler\n=================\n\n.. image:: https://travis-ci.org/rjw57/rbc.svg?branch=master\n    :target: https://travis-ci.org/rjw57/rbc\n\nThis repository contains my experimental B compiler written as a Christmas\nvacation project 2015.\n\nInstallation and getting started\n--------------------------------\n\nThe llvmlite bindings require (as of writing) LLVM version 3.6. Make sure to set\nthe LLVM_CONFIG environment variable appropriately.\n\nOn Debian/Ubuntu-like Linuxes::\n\n   $ sudo apt install libedit-dev llvm-dev-3.6\n   $ export LLVM_CONFIG=llvm-config-3.6\n\nOn OSX::\n\n   $ brew install llvm\n   $ export LLVM_CONFIG=/usr/local/opt/llvm/bin/llvm-config\n\nThen install via pip::\n\n   $ pip install git+https://github.com/rjw57/rbc\n\nDevelopers may manually clone the repository if they want::\n\n   $ git clone git://github.com/rjw57/rbc\n   $ cd /path/to/rbc; pip install -e .\n\nB code can then be compiled via the ``rbc`` tool::\n\n   $ echo 'main(){ extrn putstr; putstr(\"hello!*n\"); }' >greet.b\n   $ rbc -o greet greet.b\n   $ ./greet\n   hello!\n\nExamples\n--------\n\nCalculating *e*\n'''''''''''''''\n\nThe following example is taken from a B tutorial::\n\n   /* calce.b:\n      The following program will calculate the constant e-2 to about\n      4000 decimal digits, and print it 50 characters to the line in\n      groups of 5 characters.  The method is simple output conversion\n      of the expansion\n        1/2! + 1/3! + ... = .111....\n      where the bases of the digits are 2, 3, 4, . . . */\n\n   main() {\n      extrn putchar, n, v;\n      auto i, c, col, a;\n\n      i = col = 0;\n      while(i<n)\n         v[i++] = 1;\n      while(col<2*n) {\n         a = n+1 ;\n         c = i = 0;\n         while (i<n) {\n            c =+ v[i] *10;\n            v[i++]  = c%a;\n            c =/ a--;\n         }\n\n         putchar(c+'0');\n         if(!(++col%5))\n            putchar(col%50?' ': '*n');\n      }\n      putchar('*n*n');\n   }\n\n   v[2000];\n   n 2000;\n\nSave this code to ``calce.b``. Compile and run::\n\n   $ rbc calce.b && ./a.out | head\n   71828 18284 59045 23536 02874 71352 66249 77572 47093 69995\n   95749 66967 62772 40766 30353 54759 45713 82178 52516 64274\n   27466 39193 20030 59921 81741 35966 29043 57290 03342 95260\n   59563 07381 32328 62794 34907 63233 82988 07531 95251 01901\n   15738 34187 93070 21540 89149 93488 41675 09244 76146 06680\n   82264 80016 84774 11853 74234 54424 37107 53907 77449 92069\n   55170 27618 38606 26133 13845 83000 75204 49338 26560 29760\n   67371 13200 70932 87091 27443 74704 72306 96977 20931 01416\n   92836 81902 55151 08657 46377 21112 52389 78442 50569 53696\n   77078 54499 69967 94686 44549 05987 93163 68892 30098 79312\n\nFactorial\n'''''''''\n\nThe following example shows how the compiler may optimise recursion::\n\n   $ echo 'fact(n) return (n==0?1:n*fact(n-1));' >fact.b\n   $ rbc --emit-llvm -s fact.b\n   $ cat fact.ll\n   ; ModuleID = 'fact.b'\n   target datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\n   target triple = \"x86_64-pc-linux-gnu\"\n\n   ; Function Attrs: nounwind readnone\n   define i64 @b.fact(i64 %n) #0 {\n   entry:\n     %.71 = icmp eq i64 %n, 0\n     br i1 %.71, label %entry.endif, label %entry.else.preheader\n\n   entry.else.preheader:                             ; preds = %entry\n     br label %entry.else\n\n   entry.else:                                       ; preds = %entry.else.preheader, %entry.else\n     %n.tr3 = phi i64 [ %.20, %entry.else ], [ %n, %entry.else.preheader ]\n     %accumulator.tr2 = phi i64 [ %.22, %entry.else ], [ 1, %entry.else.preheader ]\n     %.20 = add i64 %n.tr3, -1\n     %.22 = mul i64 %n.tr3, %accumulator.tr2\n     %.7 = icmp eq i64 %.20, 0\n     br i1 %.7, label %entry.endif.loopexit, label %entry.else\n\n   entry.endif.loopexit:                             ; preds = %entry.else\n     %.22.lcssa = phi i64 [ %.22, %entry.else ]\n     br label %entry.endif\n\n   entry.endif:                                      ; preds = %entry.endif.loopexit, %entry\n     %accumulator.tr.lcssa = phi i64 [ 1, %entry ], [ %.22.lcssa, %entry.endif.loopexit ]\n     ret i64 %accumulator.tr.lcssa\n   }\n\n   attributes #0 = { nounwind readnone }\n\nNotice that the recursive ``fact`` function has been optimised into the\nequivalent looping version.\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rjw57/rbc", "keywords": "compiler B llvm example", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "rbc", "package_url": "https://pypi.org/project/rbc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rbc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rjw57/rbc"}, "release_url": "https://pypi.org/project/rbc/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Example B compiler written with LLVM", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/rjw57/rbc\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/rjw57/rbc.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0cf8c84280f9795ef6095a4f956f2e0db351f32a/68747470733a2f2f7472617669732d63692e6f72672f726a7735372f7262632e7376673f6272616e63683d6d6173746572\"></a>\n<p>This repository contains my experimental B compiler written as a Christmas\nvacation project 2015.</p>\n<div id=\"installation-and-getting-started\">\n<h2>Installation and getting started</h2>\n<p>The llvmlite bindings require (as of writing) LLVM version 3.6. Make sure to set\nthe LLVM_CONFIG environment variable appropriately.</p>\n<p>On Debian/Ubuntu-like Linuxes:</p>\n<pre>$ sudo apt install libedit-dev llvm-dev-3.6\n$ export LLVM_CONFIG=llvm-config-3.6\n</pre>\n<p>On OSX:</p>\n<pre>$ brew install llvm\n$ export LLVM_CONFIG=/usr/local/opt/llvm/bin/llvm-config\n</pre>\n<p>Then install via pip:</p>\n<pre>$ pip install git+https://github.com/rjw57/rbc\n</pre>\n<p>Developers may manually clone the repository if they want:</p>\n<pre>$ git clone git://github.com/rjw57/rbc\n$ cd /path/to/rbc; pip install -e .\n</pre>\n<p>B code can then be compiled via the <tt>rbc</tt> tool:</p>\n<pre>$ echo 'main(){ extrn putstr; putstr(\"hello!*n\"); }' &gt;greet.b\n$ rbc -o greet greet.b\n$ ./greet\nhello!\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"calculating-e\">\n<h3>Calculating <em>e</em></h3>\n<p>The following example is taken from a B tutorial:</p>\n<pre>/* calce.b:\n   The following program will calculate the constant e-2 to about\n   4000 decimal digits, and print it 50 characters to the line in\n   groups of 5 characters.  The method is simple output conversion\n   of the expansion\n     1/2! + 1/3! + ... = .111....\n   where the bases of the digits are 2, 3, 4, . . . */\n\nmain() {\n   extrn putchar, n, v;\n   auto i, c, col, a;\n\n   i = col = 0;\n   while(i&lt;n)\n      v[i++] = 1;\n   while(col&lt;2*n) {\n      a = n+1 ;\n      c = i = 0;\n      while (i&lt;n) {\n         c =+ v[i] *10;\n         v[i++]  = c%a;\n         c =/ a--;\n      }\n\n      putchar(c+'0');\n      if(!(++col%5))\n         putchar(col%50?' ': '*n');\n   }\n   putchar('*n*n');\n}\n\nv[2000];\nn 2000;\n</pre>\n<p>Save this code to <tt>calce.b</tt>. Compile and run:</p>\n<pre>$ rbc calce.b &amp;&amp; ./a.out | head\n71828 18284 59045 23536 02874 71352 66249 77572 47093 69995\n95749 66967 62772 40766 30353 54759 45713 82178 52516 64274\n27466 39193 20030 59921 81741 35966 29043 57290 03342 95260\n59563 07381 32328 62794 34907 63233 82988 07531 95251 01901\n15738 34187 93070 21540 89149 93488 41675 09244 76146 06680\n82264 80016 84774 11853 74234 54424 37107 53907 77449 92069\n55170 27618 38606 26133 13845 83000 75204 49338 26560 29760\n67371 13200 70932 87091 27443 74704 72306 96977 20931 01416\n92836 81902 55151 08657 46377 21112 52389 78442 50569 53696\n77078 54499 69967 94686 44549 05987 93163 68892 30098 79312\n</pre>\n</div>\n<div id=\"factorial\">\n<h3>Factorial</h3>\n<p>The following example shows how the compiler may optimise recursion:</p>\n<pre>$ echo 'fact(n) return (n==0?1:n*fact(n-1));' &gt;fact.b\n$ rbc --emit-llvm -s fact.b\n$ cat fact.ll\n; ModuleID = 'fact.b'\ntarget datalayout = \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n; Function Attrs: nounwind readnone\ndefine i64 @b.fact(i64 %n) #0 {\nentry:\n  %.71 = icmp eq i64 %n, 0\n  br i1 %.71, label %entry.endif, label %entry.else.preheader\n\nentry.else.preheader:                             ; preds = %entry\n  br label %entry.else\n\nentry.else:                                       ; preds = %entry.else.preheader, %entry.else\n  %n.tr3 = phi i64 [ %.20, %entry.else ], [ %n, %entry.else.preheader ]\n  %accumulator.tr2 = phi i64 [ %.22, %entry.else ], [ 1, %entry.else.preheader ]\n  %.20 = add i64 %n.tr3, -1\n  %.22 = mul i64 %n.tr3, %accumulator.tr2\n  %.7 = icmp eq i64 %.20, 0\n  br i1 %.7, label %entry.endif.loopexit, label %entry.else\n\nentry.endif.loopexit:                             ; preds = %entry.else\n  %.22.lcssa = phi i64 [ %.22, %entry.else ]\n  br label %entry.endif\n\nentry.endif:                                      ; preds = %entry.endif.loopexit, %entry\n  %accumulator.tr.lcssa = phi i64 [ 1, %entry ], [ %.22.lcssa, %entry.endif.loopexit ]\n  ret i64 %accumulator.tr.lcssa\n}\n\nattributes #0 = { nounwind readnone }\n</pre>\n<p>Notice that the recursive <tt>fact</tt> function has been optimised into the\nequivalent looping version.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1986294, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "c3437ae44e73e1ebd017f29bd6a11a3d", "sha256": "42f91cc0e714890e0c65b6ecf0fa369588afaf2c8127ab5fadee950e31814d5d"}, "downloads": -1, "filename": "rbc-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c3437ae44e73e1ebd017f29bd6a11a3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31738, "upload_time": "2016-03-02T19:46:22", "upload_time_iso_8601": "2016-03-02T19:46:22.138865Z", "url": "https://files.pythonhosted.org/packages/39/32/7728b67861a3febb03b92896505413f910d8806cd4a6c5818d6329892297/rbc-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3437ae44e73e1ebd017f29bd6a11a3d", "sha256": "42f91cc0e714890e0c65b6ecf0fa369588afaf2c8127ab5fadee950e31814d5d"}, "downloads": -1, "filename": "rbc-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c3437ae44e73e1ebd017f29bd6a11a3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31738, "upload_time": "2016-03-02T19:46:22", "upload_time_iso_8601": "2016-03-02T19:46:22.138865Z", "url": "https://files.pythonhosted.org/packages/39/32/7728b67861a3febb03b92896505413f910d8806cd4a6c5818d6329892297/rbc-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:52 2020"}