{"info": {"author": "Jon Crall", "author_email": "jon.crall@kitware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "ndsampler\n=========\n\n|GitlabCIPipeline| |GitlabCICoverage| |Pypi| |Downloads| \n\nFast random access to small regions in large images. \n\nRandom access is amortized by converting images into an efficient backend\nformat (current backends include cloud-optimized geotiffs (cog) or numpy array\nfiles (npy)). If images are already in COG format, then no conversion is\nneeded.\n\nThe ndsampler module was built with detection, segmentation, and classification\ntasks in mind, but it is not limited to these use cases.\n\nThe basic idea is to ensure your data is in MS-coco format, and then the\nCocoSampler class will let you sample positive and negative regions.\n\nFor classification tasks the MS-COCO data could just be that every image has an\nannotation that takes up the entire image.\n\nFeatures\n--------\n\n* CocoDataset for managing and manipulating annotated image datasets\n* Amortized O(1) sampling of N-dimension space-time data (wrt to constant window size) (e.g. images and video).\n* Hierarchical or mutually exclusive category management.\n* Random negative window sampling.\n* Coverage-based positive sampling.\n* Dynamic toydata generator.\n\n\nAlso installs the kwcoco package and CLI tool.\n\n\nExample\n--------\n\nThis example shows how you can efficiently load subregions from images.\n\n.. code-block:: python\n\n    >>> # Imagine you have some images\n    >>> import kwimage\n    >>> image_paths = [\n    >>>     kwimage.grab_test_image_fpath('astro'),\n    >>>     kwimage.grab_test_image_fpath('carl'),\n    >>>     kwimage.grab_test_image_fpath('airport'),\n    >>> ]  # xdoc: +IGNORE_WANT\n    ['~/.cache/kwimage/demodata/KXhKM72.png',\n     '~/.cache/kwimage/demodata/flTHWFD.png',\n     '~/.cache/kwimage/demodata/Airport.jpg']\n    >>> # And you want to randomly load subregions of them in O(1) time\n    >>> import ndsampler\n    >>> # First make a COCO dataset that refers to your images (and possibly annotations)\n    >>> dataset = {\n    >>>     'images': [{'id': i, 'file_name': fpath} for i, fpath in enumerate(image_paths)],\n    >>>     'annotations': [],\n    >>>     'categories': [],\n    >>> }\n    >>> coco_dset = ndsampler.CocoDataset(dataset)\n    >>> print(coco_dset)\n    <CocoDataset(tag=None, n_anns=0, n_imgs=3, n_cats=0)>\n    >>> # Now pass the dataset to a sampler and tell it where it can store temporary files\n    >>> workdir = ub.ensure_app_cache_dir('ndsampler/demo')\n    >>> sampler = ndsampler.CocoSampler(coco_dset, workdir=workdir)\n    >>> # Now you can load arbirary samples by specifing a target dictionary\n    >>> # with an image_id (gid) center location (cx, cy) and width, height.\n    >>> target = {'gid': 0, 'cx': 200, 'cy': 200, 'width': 100, 'height': 100}\n    >>> sample = sampler.load_sample(target)\n    >>> # The sample contains the image data, any visible annotations, a reference\n    >>> # to the original target, and params of the transform used to sample this\n    >>> # patch\n    >>> print(sorted(sample.keys()))\n    ['annots', 'im', 'params', 'tr']\n    >>> im = sample['im']\n    >>> print(im.shape)\n    (100, 100, 3)\n    >>> # The load sample function is at the core of what ndsampler does\n    >>> # There are other helper functions like load_positive / load_negative\n    >>> # which deal with annotations. See those for more details.\n    >>> # For random negative sampling see coco_regions.\n\n\nTODO\n----\n\n- [ ] Currently only supports image-based detection tasks, but not much work is\n  needed to extend to video. The code was originally based on sampling code for\n  video, so ndimensions is builtin to most places in the code. However, there are\n  currently no test cases that demonstrate that this library does work with video.\n  So we should (a) port the video toydata code from irharn to test ndcases and (b)\n  fix the code to work for both still images and video where things break. \n\n- [ ] Currently we are good at loading many small objects in 2d images.\n  However, we are bad at loading images with one single large object that needs\n  to be downsampled (e.g. loading an entire 1024x1024 image and downsampling it\n  to 224x224). We should find a way to mitigate this using pyramid overviews in\n  the backend COG files.\n\n\nNOTES\n-----\n\nThere is a GDAL backend for FramesSampler\n\nInstalling gdal is a pain though.\n\nhttps://gist.github.com/cspanring/5680334\n\n\nUsing conda is relatively simple\n\n.. code-block:: bash\n\n    conda install gdal\n\n    # Test that this works\n    python -c \"from osgeo import gdal; print(gdal)\"\n\n\nAlso possible to use system packages\n\n.. code-block:: bash\n\n    # References:\n    # https://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip\n    # https://gist.github.com/cspanring/5680334\n\n\n    # Install GDAL system libs\n    sudo apt install libgdal-dev\n\n    GDAL_VERSION=`gdal-config --version`\n    echo \"GDAL_VERSION = $GDAL_VERSION\" \n    pip install --global-option=build_ext --global-option=\"-I/usr/include/gdal\" GDAL==$GDAL_VERSION\n\n\n    # Test that this works\n    python -c \"from osgeo import gdal; print(gdal)\"\n\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/ndsampler.svg\n   :target: https://pypi.python.org/pypi/ndsampler\n\n.. |Downloads| image:: https://img.shields.io/pypi/dm/ndsampler.svg\n   :target: https://pypistats.org/packages/ndsampler\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/ndsampler/badge/?version=latest\n    :target: http://ndsampler.readthedocs.io/en/latest/\n\n.. # See: https://ci.appveyor.com/project/jon.crall/ndsampler/settings/badges\n.. .. |Appveyor| image:: https://ci.appveyor.com/api/projects/status/py3s2d6tyfjc8lm3/branch/master?svg=true\n.. :target: https://ci.appveyor.com/project/jon.crall/ndsampler/branch/master\n\n.. |GitlabCIPipeline| image:: https://gitlab.kitware.com/computer-vision/ndsampler/badges/master/pipeline.svg\n   :target: https://gitlab.kitware.com/computer-vision/ndsampler/-/jobs\n\n.. |GitlabCICoverage| image:: https://gitlab.kitware.com/computer-vision/ndsampler/badges/master/coverage.svg?job=coverage\n    :target: https://gitlab.kitware.com/computer-vision/ndsampler/commits/master", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.kitware.com/computer-vision/ndsampler", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "ndsampler", "package_url": "https://pypi.org/project/ndsampler/", "platform": "", "project_url": "https://pypi.org/project/ndsampler/", "project_urls": {"Homepage": "https://gitlab.kitware.com/computer-vision/ndsampler"}, "release_url": "https://pypi.org/project/ndsampler/0.5.8/", "requires_dist": null, "requires_python": "", "summary": "Fast sampling from large images", "version": "0.5.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitlab.kitware.com/computer-vision/ndsampler/-/jobs\" rel=\"nofollow\"><img alt=\"GitlabCIPipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdd2834b8dd5edba7ce02a5e521223a11daaa48b/68747470733a2f2f6769746c61622e6b6974776172652e636f6d2f636f6d70757465722d766973696f6e2f6e6473616d706c65722f6261646765732f6d61737465722f706970656c696e652e737667\"></a> <a href=\"https://gitlab.kitware.com/computer-vision/ndsampler/commits/master\" rel=\"nofollow\"><img alt=\"GitlabCICoverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abb6fb2e28306149b30ce50165b946c15ad7bf94/68747470733a2f2f6769746c61622e6b6974776172652e636f6d2f636f6d70757465722d766973696f6e2f6e6473616d706c65722f6261646765732f6d61737465722f636f7665726167652e7376673f6a6f623d636f766572616765\"></a> <a href=\"https://pypi.python.org/pypi/ndsampler\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c40f32ff3230c854c34efaf5d15011b56a53d07/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6473616d706c65722e737667\"></a> <a href=\"https://pypistats.org/packages/ndsampler\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/494856691b43ad06a469d56627a24431549175b4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6e6473616d706c65722e737667\"></a></p>\n<p>Fast random access to small regions in large images.</p>\n<p>Random access is amortized by converting images into an efficient backend\nformat (current backends include cloud-optimized geotiffs (cog) or numpy array\nfiles (npy)). If images are already in COG format, then no conversion is\nneeded.</p>\n<p>The ndsampler module was built with detection, segmentation, and classification\ntasks in mind, but it is not limited to these use cases.</p>\n<p>The basic idea is to ensure your data is in MS-coco format, and then the\nCocoSampler class will let you sample positive and negative regions.</p>\n<p>For classification tasks the MS-COCO data could just be that every image has an\nannotation that takes up the entire image.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>CocoDataset for managing and manipulating annotated image datasets</li>\n<li>Amortized O(1) sampling of N-dimension space-time data (wrt to constant window size) (e.g. images and video).</li>\n<li>Hierarchical or mutually exclusive category management.</li>\n<li>Random negative window sampling.</li>\n<li>Coverage-based positive sampling.</li>\n<li>Dynamic toydata generator.</li>\n</ul>\n<p>Also installs the kwcoco package and CLI tool.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>This example shows how you can efficiently load subregions from images.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Imagine you have some images</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kwimage</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">image_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">kwimage</span><span class=\"o\">.</span><span class=\"n\">grab_test_image_fpath</span><span class=\"p\">(</span><span class=\"s1\">'astro'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">kwimage</span><span class=\"o\">.</span><span class=\"n\">grab_test_image_fpath</span><span class=\"p\">(</span><span class=\"s1\">'carl'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"n\">kwimage</span><span class=\"o\">.</span><span class=\"n\">grab_test_image_fpath</span><span class=\"p\">(</span><span class=\"s1\">'airport'</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">]</span>  <span class=\"c1\"># xdoc: +IGNORE_WANT</span>\n<span class=\"p\">[</span><span class=\"s1\">'~/.cache/kwimage/demodata/KXhKM72.png'</span><span class=\"p\">,</span>\n <span class=\"s1\">'~/.cache/kwimage/demodata/flTHWFD.png'</span><span class=\"p\">,</span>\n <span class=\"s1\">'~/.cache/kwimage/demodata/Airport.jpg'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># And you want to randomly load subregions of them in O(1) time</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ndsampler</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># First make a COCO dataset that refers to your images (and possibly annotations)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'images'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s1\">'file_name'</span><span class=\"p\">:</span> <span class=\"n\">fpath</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">fpath</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">image_paths</span><span class=\"p\">)],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'annotations'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'categories'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">coco_dset</span> <span class=\"o\">=</span> <span class=\"n\">ndsampler</span><span class=\"o\">.</span><span class=\"n\">CocoDataset</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">coco_dset</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">CocoDataset</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">n_anns</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_imgs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">n_cats</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Now pass the dataset to a sampler and tell it where it can store temporary files</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">workdir</span> <span class=\"o\">=</span> <span class=\"n\">ub</span><span class=\"o\">.</span><span class=\"n\">ensure_app_cache_dir</span><span class=\"p\">(</span><span class=\"s1\">'ndsampler/demo'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sampler</span> <span class=\"o\">=</span> <span class=\"n\">ndsampler</span><span class=\"o\">.</span><span class=\"n\">CocoSampler</span><span class=\"p\">(</span><span class=\"n\">coco_dset</span><span class=\"p\">,</span> <span class=\"n\">workdir</span><span class=\"o\">=</span><span class=\"n\">workdir</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Now you can load arbirary samples by specifing a target dictionary</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># with an image_id (gid) center location (cx, cy) and width, height.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'gid'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'cx'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'cy'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'width'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'height'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">sampler</span><span class=\"o\">.</span><span class=\"n\">load_sample</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># The sample contains the image data, any visible annotations, a reference</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># to the original target, and params of the transform used to sample this</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># patch</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"p\">[</span><span class=\"s1\">'annots'</span><span class=\"p\">,</span> <span class=\"s1\">'im'</span><span class=\"p\">,</span> <span class=\"s1\">'params'</span><span class=\"p\">,</span> <span class=\"s1\">'tr'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">sample</span><span class=\"p\">[</span><span class=\"s1\">'im'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># The load sample function is at the core of what ndsampler does</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># There are other helper functions like load_positive / load_negative</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># which deal with annotations. See those for more details.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># For random negative sampling see coco_regions.</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>[ ] Currently only supports image-based detection tasks, but not much work is\nneeded to extend to video. The code was originally based on sampling code for\nvideo, so ndimensions is builtin to most places in the code. However, there are\ncurrently no test cases that demonstrate that this library does work with video.\nSo we should (a) port the video toydata code from irharn to test ndcases and (b)\nfix the code to work for both still images and video where things break.</li>\n<li>[ ] Currently we are good at loading many small objects in 2d images.\nHowever, we are bad at loading images with one single large object that needs\nto be downsampled (e.g. loading an entire 1024x1024 image and downsampling it\nto 224x224). We should find a way to mitigate this using pyramid overviews in\nthe backend COG files.</li>\n</ul>\n</div>\n<div id=\"notes\">\n<h2>NOTES</h2>\n<p>There is a GDAL backend for FramesSampler</p>\n<p>Installing gdal is a pain though.</p>\n<p><a href=\"https://gist.github.com/cspanring/5680334\" rel=\"nofollow\">https://gist.github.com/cspanring/5680334</a></p>\n<p>Using conda is relatively simple</p>\n<pre>conda install gdal\n\n<span class=\"c1\"># Test that this works\n</span>python -c <span class=\"s2\">\"from osgeo import gdal; print(gdal)\"</span>\n</pre>\n<p>Also possible to use system packages</p>\n<pre><span class=\"c1\"># References:\n# https://gis.stackexchange.com/questions/28966/python-gdal-package-missing-header-file-when-installing-via-pip\n# https://gist.github.com/cspanring/5680334\n</span>\n\n<span class=\"c1\"># Install GDAL system libs\n</span>sudo apt install libgdal-dev\n\n<span class=\"nv\">GDAL_VERSION</span><span class=\"o\">=</span><span class=\"sb\">`</span>gdal-config --version<span class=\"sb\">`</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">\"GDAL_VERSION = </span><span class=\"nv\">$GDAL_VERSION</span><span class=\"s2\">\"</span>\npip install --global-option<span class=\"o\">=</span>build_ext --global-option<span class=\"o\">=</span><span class=\"s2\">\"-I/usr/include/gdal\"</span> <span class=\"nv\">GDAL</span><span class=\"o\">==</span><span class=\"nv\">$GDAL_VERSION</span>\n\n\n<span class=\"c1\"># Test that this works\n</span>python -c <span class=\"s2\">\"from osgeo import gdal; print(gdal)\"</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7145885, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "e35d879256a07b68fe9c59cd3d7411bb", "sha256": "96f5ffe5f54ac1586bb5b659d485c465d6c008f640c9af3e684c1abb02785262"}, "downloads": -1, "filename": "ndsampler-0.5.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e35d879256a07b68fe9c59cd3d7411bb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 104072, "upload_time": "2019-11-12T23:26:54", "upload_time_iso_8601": "2019-11-12T23:26:54.609286Z", "url": "https://files.pythonhosted.org/packages/8c/0b/189ee69452b738521f3e22f45975b982bcaf36d7daf3f752f8b064cbf3d0/ndsampler-0.5.0-py2.py3-none-any.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bbd07d79812f4fb4a55fa0daf93e2231", "sha256": "5a53c18b84bfc6ccd26803a0f5e48886212ef6e6cb4e4834809bedf309d5aa59"}, "downloads": -1, "filename": "ndsampler-0.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bbd07d79812f4fb4a55fa0daf93e2231", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 105169, "upload_time": "2020-01-04T00:54:31", "upload_time_iso_8601": "2020-01-04T00:54:31.786781Z", "url": "https://files.pythonhosted.org/packages/dd/f9/75c50d65ea7b7f7ae99978f78135f71c971ca51b109affae01a02740e7ff/ndsampler-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c008ff834d6e5f734b2b86202ef79136", "sha256": "0d5c1cf412c3275397333ece9610699ee66420fbaf405b382abd24a0231980c8"}, "downloads": -1, "filename": "ndsampler-0.5.1.tar.gz", "has_sig": true, "md5_digest": "c008ff834d6e5f734b2b86202ef79136", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99803, "upload_time": "2020-01-04T00:54:29", "upload_time_iso_8601": "2020-01-04T00:54:29.062986Z", "url": "https://files.pythonhosted.org/packages/d1/12/16953e9915750b2afdb5a5859b09cb4c29c8c094ac0c8f28a1bff0c70462/ndsampler-0.5.1.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "218af4fe8afa8833a67ff06dde59bf18", "sha256": "3c290073a464e86037257e2a0cfc2490c97281f58365e7f4d0b2c68485ba6a6b"}, "downloads": -1, "filename": "ndsampler-0.5.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "218af4fe8afa8833a67ff06dde59bf18", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 107422, "upload_time": "2020-02-03T19:15:31", "upload_time_iso_8601": "2020-02-03T19:15:31.224526Z", "url": "https://files.pythonhosted.org/packages/26/3c/359ecd7a9dfa0fedc45fe9d7450b2e12d41846283470cc7c35ea5ec35e83/ndsampler-0.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4569740027f632b7611de7f2ac5c4fb8", "sha256": "5f2f76f9366d45161ba73b1f782374360b02b8d8b3f275731c4eb51ecbc66e0c"}, "downloads": -1, "filename": "ndsampler-0.5.3.tar.gz", "has_sig": true, "md5_digest": "4569740027f632b7611de7f2ac5c4fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103377, "upload_time": "2020-02-03T19:15:29", "upload_time_iso_8601": "2020-02-03T19:15:29.122815Z", "url": "https://files.pythonhosted.org/packages/ba/2a/28f42e87dbb823624c66cd0387afcc7d75f220dde4469ab8efca5c9c69e0/ndsampler-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "b5b8cc47981cb13dc42c387b4c121001", "sha256": "c8120e315eab241d34dc7d4a81d6c3273e4f711a5c0c273b1504fb0dbdc9b4a7"}, "downloads": -1, "filename": "ndsampler-0.5.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b5b8cc47981cb13dc42c387b4c121001", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 108989, "upload_time": "2020-02-19T16:56:26", "upload_time_iso_8601": "2020-02-19T16:56:26.602782Z", "url": "https://files.pythonhosted.org/packages/25/26/9844780aa46f2b61598d1040bf89fd5cb62c9d07abeb61dcd50307f631ea/ndsampler-0.5.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5382e392ae79f3a4bece8ecfd4ce2cc", "sha256": "c562ada2bcbf8437ff88c290998a37f34ab92583e4af2a6436a18aaeb49dd40c"}, "downloads": -1, "filename": "ndsampler-0.5.4.tar.gz", "has_sig": true, "md5_digest": "a5382e392ae79f3a4bece8ecfd4ce2cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104774, "upload_time": "2020-02-19T16:56:23", "upload_time_iso_8601": "2020-02-19T16:56:23.742534Z", "url": "https://files.pythonhosted.org/packages/6c/99/389feed25a7a0e0e6c8ae1bcb7483cdaa7c59a481307d76cfa80f0a7ace5/ndsampler-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "666970595c0e81315468fdf5f0b8f49b", "sha256": "cf1efe4d9f424cf23c137de4ac9294d329233228600baed8fbfc04b54a64e54e"}, "downloads": -1, "filename": "ndsampler-0.5.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "666970595c0e81315468fdf5f0b8f49b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 115331, "upload_time": "2020-03-20T22:35:13", "upload_time_iso_8601": "2020-03-20T22:35:13.860399Z", "url": "https://files.pythonhosted.org/packages/1f/cb/270a3edcdce4a8ed88c6928b482671355f7006501b3670046f31b0ace31c/ndsampler-0.5.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8631be158b40c61c4299db5b6275251", "sha256": "6b0cdc4f201b7aad3c744f18190d1d01a6a6af6e89dd6dfff6742a2b36ef31f1"}, "downloads": -1, "filename": "ndsampler-0.5.5.tar.gz", "has_sig": true, "md5_digest": "c8631be158b40c61c4299db5b6275251", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110095, "upload_time": "2020-03-20T22:35:11", "upload_time_iso_8601": "2020-03-20T22:35:11.588076Z", "url": "https://files.pythonhosted.org/packages/e0/e5/e1a0c633102a16e597d8918fedb008a8d96370a5a1aa3e08ac142913bc10/ndsampler-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "64534defa54293fec215796e4bc33f6a", "sha256": "c1c3f623c2a6bcdced3a8f93b847923a24fd7f6b9595d3510d0aa3fc96d5ee57"}, "downloads": -1, "filename": "ndsampler-0.5.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "64534defa54293fec215796e4bc33f6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 117816, "upload_time": "2020-03-26T23:37:37", "upload_time_iso_8601": "2020-03-26T23:37:37.854172Z", "url": "https://files.pythonhosted.org/packages/32/5b/edbfce3d5dcfb96a70ee68f80fa83aecd5dea84c54b9d70a05c69ff8bdc5/ndsampler-0.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e9a2b318aef676e19892a11c95c3053", "sha256": "f4055eb75a2ef997d198ef721a798cc04b16c834538ed4dd0d3adc5f83861a67"}, "downloads": -1, "filename": "ndsampler-0.5.6.tar.gz", "has_sig": true, "md5_digest": "5e9a2b318aef676e19892a11c95c3053", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110949, "upload_time": "2020-03-26T23:37:35", "upload_time_iso_8601": "2020-03-26T23:37:35.718810Z", "url": "https://files.pythonhosted.org/packages/4f/4a/66d3db46fd8ea9620086538631f27ac19bb951d8b27b82807f5ac48b3367/ndsampler-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "6753902b737f3a693b550564a4abc7fd", "sha256": "9e5b68994f3b41b6bdb5670e4b3d14d11fda830ed328d2ace78267c31b0d6adc"}, "downloads": -1, "filename": "ndsampler-0.5.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6753902b737f3a693b550564a4abc7fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 76623, "upload_time": "2020-04-08T16:56:43", "upload_time_iso_8601": "2020-04-08T16:56:43.337855Z", "url": "https://files.pythonhosted.org/packages/c9/33/76567a19bdbcc0563b649d0575d1bc1f2c24d4cbdd57ae619a5335c3c72d/ndsampler-0.5.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95d7c5aeda3c700d9cf3d9f7461091bf", "sha256": "2e7e31129b32e377e8cd6dd9e8b51baa738367e8051eb7525d24672ff666d19f"}, "downloads": -1, "filename": "ndsampler-0.5.7.tar.gz", "has_sig": true, "md5_digest": "95d7c5aeda3c700d9cf3d9f7461091bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72713, "upload_time": "2020-04-08T16:56:41", "upload_time_iso_8601": "2020-04-08T16:56:41.457465Z", "url": "https://files.pythonhosted.org/packages/74/26/a9cb2e75bf0e0368b29a45682165e42ef51eaa61a48b9732fdb1cff7fe8b/ndsampler-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "b9175a1efe38cdc1ed63d0a349a5613c", "sha256": "30bb2f33209b3a5dac2cc29f54a25dd27618304e8b35e80224318b970d4a53e3"}, "downloads": -1, "filename": "ndsampler-0.5.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b9175a1efe38cdc1ed63d0a349a5613c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78430, "upload_time": "2020-05-01T15:36:59", "upload_time_iso_8601": "2020-05-01T15:36:59.879772Z", "url": "https://files.pythonhosted.org/packages/b6/aa/08045221071fd4809c0fa78097bbfc2c04ed308882e9bbada4772b6dcda5/ndsampler-0.5.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fe89e4bc9748ba1edf16d31cc1b5a78", "sha256": "b5acb97a9eb2b11049b1a011266ae2682dd83bd44e7956588db2c01d3747e95a"}, "downloads": -1, "filename": "ndsampler-0.5.8.tar.gz", "has_sig": true, "md5_digest": "9fe89e4bc9748ba1edf16d31cc1b5a78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73220, "upload_time": "2020-05-01T15:36:57", "upload_time_iso_8601": "2020-05-01T15:36:57.930128Z", "url": "https://files.pythonhosted.org/packages/fa/33/6c1da56d5a1bc5fbb307b5f6eeb1d10b544daf13057c3601b54bfd93d08c/ndsampler-0.5.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9175a1efe38cdc1ed63d0a349a5613c", "sha256": "30bb2f33209b3a5dac2cc29f54a25dd27618304e8b35e80224318b970d4a53e3"}, "downloads": -1, "filename": "ndsampler-0.5.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b9175a1efe38cdc1ed63d0a349a5613c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78430, "upload_time": "2020-05-01T15:36:59", "upload_time_iso_8601": "2020-05-01T15:36:59.879772Z", "url": "https://files.pythonhosted.org/packages/b6/aa/08045221071fd4809c0fa78097bbfc2c04ed308882e9bbada4772b6dcda5/ndsampler-0.5.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fe89e4bc9748ba1edf16d31cc1b5a78", "sha256": "b5acb97a9eb2b11049b1a011266ae2682dd83bd44e7956588db2c01d3747e95a"}, "downloads": -1, "filename": "ndsampler-0.5.8.tar.gz", "has_sig": true, "md5_digest": "9fe89e4bc9748ba1edf16d31cc1b5a78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73220, "upload_time": "2020-05-01T15:36:57", "upload_time_iso_8601": "2020-05-01T15:36:57.930128Z", "url": "https://files.pythonhosted.org/packages/fa/33/6c1da56d5a1bc5fbb307b5f6eeb1d10b544daf13057c3601b54bfd93d08c/ndsampler-0.5.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:41 2020"}