{"info": {"author": "Joohwan Oh", "author_email": "joohwan.oh@outlook.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Education"], "description": "Binarytree: Python Library for Studying Binary Trees\n----------------------------------------------------\n\n.. image:: https://travis-ci.org/joowani/binarytree.svg?branch=master\n    :target: https://travis-ci.org/joowani/binarytree\n    :alt: Build Status\n\n.. image:: https://badge.fury.io/py/binarytree.svg\n    :target: https://badge.fury.io/py/binarytree\n    :alt: Package Version\n\n.. image:: https://img.shields.io/badge/python-2.7%2C%203.4%2C%203.5%2C%203.6-blue.svg\n    :target: https://github.com/joowani/binarytree\n    :alt: Python Versions\n\n.. image:: https://coveralls.io/repos/github/joowani/binarytree/badge.svg?branch=master\n    :target: https://coveralls.io/github/joowani/binarytree?branch=master\n    :alt: Test Coverage\n\n.. image:: https://img.shields.io/github/issues/joowani/binarytree.svg\n    :target: https://github.com/joowani/binarytree/issues\n    :alt: Issues Open\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg\n    :target: https://raw.githubusercontent.com/joowani/binarytree/master/LICENSE\n    :alt: MIT License\n\n|\n\n.. image:: https://user-images.githubusercontent.com/2701938/34109703-4a8810aa-e3b9-11e7-8138-68eec47cfddb.gif\n    :alt: Demo GIF\n\nIntroduction\n============\n\nAre you studying binary trees for your next exam, assignment or technical interview?\n\n**Binarytree** is a Python library which provides a simple API to generate,\nvisualize, inspect and manipulate binary trees. It allows you to skip the\ntedious work of setting up test data, and dive straight into practising your\nalgorithms. Heaps and BSTs (binary search trees) are also supported.\n\nAnnouncements\n=============\n\n* Please see the releases_ page for details on the latest updates.\n\n.. _releases: https://github.com/joowani/binarytree/releases\n\nRequirements\n============\n\n- Python 2.7, 3.4, 3.5, 3.6 or 3.7.\n\nInstallation\n============\n\nTo install a stable version from PyPi_:\n\n.. code-block:: bash\n\n    ~$ pip install binarytree\n\nTo install the latest version directly from GitHub_:\n\n.. code-block:: bash\n\n    ~$ pip install -e git+git@github.com:joowani/binarytree.git@master#egg=binarytree\n\nYou may need to use ``sudo`` depending on your environment.\n\n.. _PyPi: https://pypi.python.org/pypi/binarytree\n.. _GitHub: https://github.com/joowani/binarytree\n\nGetting Started\n===============\n\nBy default, **binarytree** uses the following class to represent a node:\n\n.. code-block:: python\n\n    class Node(object):\n\n        def __init__(self, value, left=None, right=None):\n            self.value = value  # The node value\n            self.left = left    # Left child\n            self.right = right  # Right child\n\nGenerate and pretty-print various types of binary trees:\n\n.. code-block:: python\n\n    >>> from binarytree import tree, bst, heap\n    >>>\n    >>> # Generate a random binary tree and return its root node\n    >>> my_tree = tree(height=3, is_perfect=False)\n    >>>\n    >>> # Generate a random BST and return its root node\n    >>> my_bst = bst(height=3, is_perfect=True)\n    >>>\n    >>> # Generate a random max heap and return its root node\n    >>> my_heap = heap(height=3, is_max=True, is_perfect=False)\n    >>>\n    >>> # Pretty-print the trees in stdout\n    >>> print(my_tree)\n    #\n    #        _______1_____\n    #       /             \\\n    #      4__          ___3\n    #     /   \\        /    \\\n    #    0     9      13     14\n    #         / \\       \\\n    #        7   10      2\n    #\n    >>> print(my_bst)\n    #\n    #            ______7_______\n    #           /              \\\n    #        __3__           ___11___\n    #       /     \\         /        \\\n    #      1       5       9         _13\n    #     / \\     / \\     / \\       /   \\\n    #    0   2   4   6   8   10    12    14\n    #\n    >>> print(my_heap)\n    #\n    #              _____14__\n    #             /         \\\n    #        ____13__        9\n    #       /        \\      / \\\n    #      12         7    3   8\n    #     /  \\       /\n    #    0    10    6\n    #\n\nUse the `binarytree.Node`_ class to build your own trees:\n\n.. _binarytree.Node:\n    http://binarytree.readthedocs.io/en/latest/specs.html#class-binarytree-node\n\n.. code-block:: python\n\n    >>> from binarytree import Node\n    >>>\n    >>> root = Node(1)\n    >>> root.left = Node(2)\n    >>> root.right = Node(3)\n    >>> root.left.right = Node(4)\n    >>>\n    >>> print(root)\n    #\n    #      __1\n    #     /   \\\n    #    2     3\n    #     \\\n    #      4\n    #\n\nInspect tree properties:\n\n.. code-block:: python\n\n    >>> from binarytree import Node\n    >>>\n    >>> root = Node(1)\n    >>> root.left = Node(2)\n    >>> root.right = Node(3)\n    >>> root.left.left = Node(4)\n    >>> root.left.right = Node(5)\n    >>>\n    >>> print(root)\n    #\n    #        __1\n    #       /   \\\n    #      2     3\n    #     / \\\n    #    4   5\n    #\n    >>> root.height\n    2\n    >>> root.is_balanced\n    True\n    >>> root.is_bst\n    False\n    >>> root.is_complete\n    True\n    >>> root.is_max_heap\n    False\n    >>> root.is_min_heap\n    True\n    >>> root.is_perfect\n    False\n    >>> root.is_strict\n    True\n    >>> root.leaf_count\n    3\n    >>> root.max_leaf_depth\n    2\n    >>> root.max_node_value\n    5\n    >>> root.min_leaf_depth\n    1\n    >>> root.min_node_value\n    1\n    >>> root.size\n    5\n\n    >>> root.properties  # To see all at once:\n    {'height': 2,\n     'is_balanced': True,\n     'is_bst': False,\n     'is_complete': True,\n     'is_max_heap': False,\n     'is_min_heap': True,\n     'is_perfect': False,\n     'is_strict': True,\n     'leaf_count': 3,\n     'max_leaf_depth': 2,\n     'max_node_value': 5,\n     'min_leaf_depth': 1,\n     'min_node_value': 1,\n     'size': 5}\n\n    >>> root.leaves\n    [Node(3), Node(4), Node(5)]\n\n    >>> root.levels\n    [[Node(1)], [Node(2), Node(3)], [Node(4), Node(5)]]\n\nUse `level-order (breadth-first)`_ indexes to manipulate nodes:\n\n.. _level-order (breadth-first):\n    https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search\n\n.. code-block:: python\n\n    >>> from binarytree import Node\n    >>>\n    >>> root = Node(1)                  # index: 0, value: 1\n    >>> root.left = Node(2)             # index: 1, value: 2\n    >>> root.right = Node(3)            # index: 2, value: 3\n    >>> root.left.right = Node(4)       # index: 4, value: 4\n    >>> root.left.right.left = Node(5)  # index: 9, value: 5\n    >>>\n    >>> print(root)\n    #\n    #      ____1\n    #     /     \\\n    #    2__     3\n    #       \\\n    #        4\n    #       /\n    #      5\n    #\n    >>> # Use binarytree.Node.pprint instead of print to display indexes\n    >>> root.pprint(index=True)\n    #\n    #       _________0-1_\n    #      /             \\\n    #    1-2_____        2-3\n    #            \\\n    #           _4-4\n    #          /\n    #        9-5\n    #\n    >>> # Return the node/subtree at index 9\n    >>> root[9]\n    Node(5)\n\n    >>> # Replace the node/subtree at index 4\n    >>> root[4] = Node(6, left=Node(7), right=Node(8))\n    >>> root.pprint(index=True)\n    #\n    #       ______________0-1_\n    #      /                  \\\n    #    1-2_____             2-3\n    #            \\\n    #           _4-6_\n    #          /     \\\n    #        9-7     10-8\n    #\n    >>> # Delete the node/subtree at index 1\n    >>> del root[1]\n    >>> root.pprint(index=True)\n    #\n    #    0-1_\n    #        \\\n    #        2-3\n\nTraverse the trees using different algorithms:\n\n.. code-block:: python\n\n    >>> from binarytree import Node\n    >>>\n    >>> root = Node(1)\n    >>> root.left = Node(2)\n    >>> root.right = Node(3)\n    >>> root.left.left = Node(4)\n    >>> root.left.right = Node(5)\n    >>>\n    >>> print(root)\n    #\n    #        __1\n    #       /   \\\n    #      2     3\n    #     / \\\n    #    4   5\n    #\n    >>> root.inorder\n    [Node(4), Node(2), Node(5), Node(1), Node(3)]\n\n    >>> root.preorder\n    [Node(1), Node(2), Node(4), Node(5), Node(3)]\n\n    >>> root.postorder\n    [Node(4), Node(5), Node(2), Node(3), Node(1)]\n\n    >>> root.levelorder\n    [Node(1), Node(2), Node(3), Node(4), Node(5)]\n\n    >>> list(root)  # Equivalent to root.levelorder\n    [Node(1), Node(2), Node(3), Node(4), Node(5)]\n\n`List representations`_ are also supported:\n\n.. _List representations: https://en.wikipedia.org/wiki/Binary_tree#Arrays\n\n.. code-block:: python\n\n    >>> from binarytree import build\n    >>>\n    >>> # Build a tree from list representation\n    >>> values = [7, 3, 2, 6, 9, None, 1, 5, 8]\n    >>> root = build(values)\n    >>> print(root)\n    #\n    #            __7\n    #           /   \\\n    #        __3     2\n    #       /   \\     \\\n    #      6     9     1\n    #     / \\\n    #    5   8\n    #\n    >>> # Convert the tree back to list representation\n    >>> root.values\n    [7, 3, 2, 6, 9, None, 1, 5, 8]\n\nCheck out the documentation_ for more details!\n\n.. _documentation: http://binarytree.readthedocs.io/en/latest/index.html\n\nContributing\n============\n\nPlease have a look at this page_ before submitting a pull request. Thanks!\n\n.. _page: http://binarytree.readthedocs.io/en/latest/contributing.html\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joowani/binarytree", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "binarytree", "package_url": "https://pypi.org/project/binarytree/", "platform": "", "project_url": "https://pypi.org/project/binarytree/", "project_urls": {"Homepage": "https://github.com/joowani/binarytree"}, "release_url": "https://pypi.org/project/binarytree/4.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python Library for Studying Binary Trees", "version": "4.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/joowani/binarytree\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3eabb5239290c730670144fbdc4b51bc6413a2a/68747470733a2f2f7472617669732d63692e6f72672f6a6f6f77616e692f62696e617279747265652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/binarytree\" rel=\"nofollow\"><img alt=\"Package Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69397e356234ead7f6246d928db6c22123dd370b/68747470733a2f2f62616467652e667572792e696f2f70792f62696e617279747265652e737667\"></a>\n<a href=\"https://github.com/joowani/binarytree\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d238b023876becf86a8b972dc67f0591bc0ebe7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e37253243253230332e34253243253230332e35253243253230332e362d626c75652e737667\"></a>\n<a href=\"https://coveralls.io/github/joowani/binarytree?branch=master\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40586918dd6fe0aeca66bf9313b13651efc462f1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6f6f77616e692f62696e617279747265652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/joowani/binarytree/issues\" rel=\"nofollow\"><img alt=\"Issues Open\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db4e0fffe6346219bb6de28bad66fea5b91ea21f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6a6f6f77616e692f62696e617279747265652e737667\"></a>\n<a href=\"https://raw.githubusercontent.com/joowani/binarytree/master/LICENSE\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a>\n<div>\n<div><br></div>\n</div>\n<img alt=\"Demo GIF\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0e148b3da869e9efd3007a5b01b3964d4766f40/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f323730313933382f33343130393730332d34613838313061612d653362392d313165372d383133382d3638656563343763666464622e676966\">\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Are you studying binary trees for your next exam, assignment or technical interview?</p>\n<p><strong>Binarytree</strong> is a Python library which provides a simple API to generate,\nvisualize, inspect and manipulate binary trees. It allows you to skip the\ntedious work of setting up test data, and dive straight into practising your\nalgorithms. Heaps and BSTs (binary search trees) are also supported.</p>\n</div>\n<div id=\"announcements\">\n<h2>Announcements</h2>\n<ul>\n<li>Please see the <a href=\"https://github.com/joowani/binarytree/releases\" rel=\"nofollow\">releases</a> page for details on the latest updates.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7, 3.4, 3.5, 3.6 or 3.7.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install a stable version from <a href=\"https://pypi.python.org/pypi/binarytree\" rel=\"nofollow\">PyPi</a>:</p>\n<pre>~$ pip install binarytree\n</pre>\n<p>To install the latest version directly from <a href=\"https://github.com/joowani/binarytree\" rel=\"nofollow\">GitHub</a>:</p>\n<pre>~$ pip install -e git+git@github.com:joowani/binarytree.git@master#egg<span class=\"o\">=</span>binarytree\n</pre>\n<p>You may need to use <tt>sudo</tt> depending on your environment.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>By default, <strong>binarytree</strong> uses the following class to represent a node:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>  <span class=\"c1\"># The node value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>    <span class=\"c1\"># Left child</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>  <span class=\"c1\"># Right child</span>\n</pre>\n<p>Generate and pretty-print various types of binary trees:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">bst</span><span class=\"p\">,</span> <span class=\"n\">heap</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Generate a random binary tree and return its root node</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_tree</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">is_perfect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Generate a random BST and return its root node</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_bst</span> <span class=\"o\">=</span> <span class=\"n\">bst</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">is_perfect</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Generate a random max heap and return its root node</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_heap</span> <span class=\"o\">=</span> <span class=\"n\">heap</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">is_max</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">is_perfect</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Pretty-print the trees in stdout</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_tree</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#        _______1_____</span>\n<span class=\"c1\">#       /             \\</span>\n<span class=\"c1\">#      4__          ___3</span>\n<span class=\"c1\">#     /   \\        /    \\</span>\n<span class=\"c1\">#    0     9      13     14</span>\n<span class=\"c1\">#         / \\       \\</span>\n<span class=\"c1\">#        7   10      2</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_bst</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#            ______7_______</span>\n<span class=\"c1\">#           /              \\</span>\n<span class=\"c1\">#        __3__           ___11___</span>\n<span class=\"c1\">#       /     \\         /        \\</span>\n<span class=\"c1\">#      1       5       9         _13</span>\n<span class=\"c1\">#     / \\     / \\     / \\       /   \\</span>\n<span class=\"c1\">#    0   2   4   6   8   10    12    14</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_heap</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#              _____14__</span>\n<span class=\"c1\">#             /         \\</span>\n<span class=\"c1\">#        ____13__        9</span>\n<span class=\"c1\">#       /        \\      / \\</span>\n<span class=\"c1\">#      12         7    3   8</span>\n<span class=\"c1\">#     /  \\       /</span>\n<span class=\"c1\">#    0    10    6</span>\n<span class=\"c1\">#</span>\n</pre>\n<p>Use the <a href=\"http://binarytree.readthedocs.io/en/latest/specs.html#class-binarytree-node\" rel=\"nofollow\">binarytree.Node</a> class to build your own trees:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#      __1</span>\n<span class=\"c1\">#     /   \\</span>\n<span class=\"c1\">#    2     3</span>\n<span class=\"c1\">#     \\</span>\n<span class=\"c1\">#      4</span>\n<span class=\"c1\">#</span>\n</pre>\n<p>Inspect tree properties:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#        __1</span>\n<span class=\"c1\">#       /   \\</span>\n<span class=\"c1\">#      2     3</span>\n<span class=\"c1\">#     / \\</span>\n<span class=\"c1\">#    4   5</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">height</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_balanced</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_bst</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_complete</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_max_heap</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_min_heap</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_perfect</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">is_strict</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">leaf_count</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">max_leaf_depth</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">max_node_value</span>\n<span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">min_leaf_depth</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">min_node_value</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"mi\">5</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">properties</span>  <span class=\"c1\"># To see all at once:</span>\n<span class=\"p\">{</span><span class=\"s1\">'height'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_balanced'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_bst'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_complete'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_max_heap'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_min_heap'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_perfect'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'is_strict'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'leaf_count'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n <span class=\"s1\">'max_leaf_depth'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n <span class=\"s1\">'max_node_value'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n <span class=\"s1\">'min_leaf_depth'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n <span class=\"s1\">'min_node_value'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n <span class=\"s1\">'size'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">leaves</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">levels</span>\n<span class=\"p\">[[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)],</span> <span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)],</span> <span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]]</span>\n</pre>\n<p>Use <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search\" rel=\"nofollow\">level-order (breadth-first)</a> indexes to manipulate nodes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>                  <span class=\"c1\"># index: 0, value: 1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>             <span class=\"c1\"># index: 1, value: 2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>            <span class=\"c1\"># index: 2, value: 3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>       <span class=\"c1\"># index: 4, value: 4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># index: 9, value: 5</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#      ____1</span>\n<span class=\"c1\">#     /     \\</span>\n<span class=\"c1\">#    2__     3</span>\n<span class=\"c1\">#       \\</span>\n<span class=\"c1\">#        4</span>\n<span class=\"c1\">#       /</span>\n<span class=\"c1\">#      5</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Use binarytree.Node.pprint instead of print to display indexes</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#       _________0-1_</span>\n<span class=\"c1\">#      /             \\</span>\n<span class=\"c1\">#    1-2_____        2-3</span>\n<span class=\"c1\">#            \\</span>\n<span class=\"c1\">#           _4-4</span>\n<span class=\"c1\">#          /</span>\n<span class=\"c1\">#        9-5</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Return the node/subtree at index 9</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Replace the node/subtree at index 4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#       ______________0-1_</span>\n<span class=\"c1\">#      /                  \\</span>\n<span class=\"c1\">#    1-2_____             2-3</span>\n<span class=\"c1\">#            \\</span>\n<span class=\"c1\">#           _4-6_</span>\n<span class=\"c1\">#          /     \\</span>\n<span class=\"c1\">#        9-7     10-8</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Delete the node/subtree at index 1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">root</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#    0-1_</span>\n<span class=\"c1\">#        \\</span>\n<span class=\"c1\">#        2-3</span>\n</pre>\n<p>Traverse the trees using different algorithms:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">Node</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#        __1</span>\n<span class=\"c1\">#       /   \\</span>\n<span class=\"c1\">#      2     3</span>\n<span class=\"c1\">#     / \\</span>\n<span class=\"c1\">#    4   5</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">inorder</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">preorder</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">postorder</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">levelorder</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>  <span class=\"c1\"># Equivalent to root.levelorder</span>\n<span class=\"p\">[</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n<p><a href=\"https://en.wikipedia.org/wiki/Binary_tree#Arrays\" rel=\"nofollow\">List representations</a> are also supported:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">binarytree</span> <span class=\"kn\">import</span> <span class=\"n\">build</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Build a tree from list representation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#            __7</span>\n<span class=\"c1\">#           /   \\</span>\n<span class=\"c1\">#        __3     2</span>\n<span class=\"c1\">#       /   \\     \\</span>\n<span class=\"c1\">#      6     9     1</span>\n<span class=\"c1\">#     / \\</span>\n<span class=\"c1\">#    5   8</span>\n<span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Convert the tree back to list representation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n<p>Check out the <a href=\"http://binarytree.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">documentation</a> for more details!</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Please have a look at this <a href=\"http://binarytree.readthedocs.io/en/latest/contributing.html\" rel=\"nofollow\">page</a> before submitting a pull request. Thanks!</p>\n</div>\n\n          </div>"}, "last_serial": 5724438, "releases": {"3.0.1": [{"comment_text": "", "digests": {"md5": "c347b194891950fcc12d553ab9826216", "sha256": "2974b9dad99aace7f638e11aae04a6180869dc2383d0b7b468114db09a552130"}, "downloads": -1, "filename": "binarytree-3.0.1.tar.gz", "has_sig": false, "md5_digest": "c347b194891950fcc12d553ab9826216", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15713, "upload_time": "2017-12-20T22:41:37", "upload_time_iso_8601": "2017-12-20T22:41:37.079048Z", "url": "https://files.pythonhosted.org/packages/19/83/b8d2e7fa8d1eee16742ebdea2bdae52f7627011e2c656c920d7da676c677/binarytree-3.0.1.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "f47495f13fc94c813904b87e22abf1c0", "sha256": "78da76bc16db4d682170446e2a0524ad481d1e73af6675f77e241253e953d85f"}, "downloads": -1, "filename": "binarytree-4.0.0.tar.gz", "has_sig": false, "md5_digest": "f47495f13fc94c813904b87e22abf1c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14025, "upload_time": "2018-05-11T20:34:31", "upload_time_iso_8601": "2018-05-11T20:34:31.258967Z", "url": "https://files.pythonhosted.org/packages/4f/df/43fe21208abbb67a37c9aa1b970de64984b95959610b00d68316302b5fcd/binarytree-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "d2be444d4f8de0fa5a03269b3fc0cc61", "sha256": "668a8c23dd57c9ff8ed4fd7af41da88b12dcea7a0ad679f6725a86134b113a57"}, "downloads": -1, "filename": "binarytree-4.1.0.tar.gz", "has_sig": false, "md5_digest": "d2be444d4f8de0fa5a03269b3fc0cc61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14317, "upload_time": "2019-08-24T13:18:18", "upload_time_iso_8601": "2019-08-24T13:18:18.190676Z", "url": "https://files.pythonhosted.org/packages/31/5a/705308b18fb739cf1a8f0b50bad37957e00371c516f9ef435e8e666dec4a/binarytree-4.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2be444d4f8de0fa5a03269b3fc0cc61", "sha256": "668a8c23dd57c9ff8ed4fd7af41da88b12dcea7a0ad679f6725a86134b113a57"}, "downloads": -1, "filename": "binarytree-4.1.0.tar.gz", "has_sig": false, "md5_digest": "d2be444d4f8de0fa5a03269b3fc0cc61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14317, "upload_time": "2019-08-24T13:18:18", "upload_time_iso_8601": "2019-08-24T13:18:18.190676Z", "url": "https://files.pythonhosted.org/packages/31/5a/705308b18fb739cf1a8f0b50bad37957e00371c516f9ef435e8e666dec4a/binarytree-4.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:30 2020"}