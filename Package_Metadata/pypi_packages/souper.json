{"info": {"author": "BlueDynamics Alliance", "author_email": "dev@bluedynamics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: ZODB", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": ".. image:: https://travis-ci.org/bluedynamics/souper.svg?branch=master\n    :target: https://travis-ci.org/bluedynamics/souper\n\nZODB Storage for lots of (light weight) data.\n\nUtilizes:\n\n- `ZODB <http://www.zodb.org/>`_ and its `BTrees <http://www.zodb.org/documentation/guide/modules.html#btrees-package>`_,\n- `node <http://pypi.python.org/pypi/node>`_ (and `node.ext.zodb <http://pypi.python.org/pypi/node.ext.zodb>`_).\n- `repoze.catalog <http://pypi.python.org/pypi/repoze.catalog>`_,\n\n.. image:: https://raw.githubusercontent.com/bluedynamics/souper/master/docs/Souper-64.png\n\nSouper is a tool for programmers. It offers an integrated storage tied together with indexes in a catalog.\nThe records in the storage are generic.\nIt is possible to store any data on a record if it is persistent pickable in ZODB.\n\nSouper can be used used in any Python application, either standalone using the pure ZODB or with `Pyramid <http://docs.pylonsproject.org/en/latest/docs/pyramid.html>`_, `Zope <https://www.zope.org/>`_ or `Plone <http://plone.org>`_.\n\n\nUsing Souper\n============\n\n\nProviding a Locator\n-------------------\n\nSoups are looked up by adapting ``souper.interfaces.IStorageLocator`` to some context.\nSouper does not provide any default locator.\nSo first one need to be provided. Let's assume context is some persistent dict-like instance\n\n.. code-block:: pycon\n\n    >>> from zope.interface import implementer\n    >>> from zope.interface import Interface\n    >>> from zope.component import provideAdapter\n    >>> from souper.interfaces import IStorageLocator\n    >>> from souper.soup import SoupData\n    >>> @implementer(IStorageLocator)\n    ... class StorageLocator(object):\n    ...\n    ...     def __init__(self, context):\n    ...        self.context = context\n    ...\n    ...     def storage(self, soup_name):\n    ...        if soup_name not in self.context:\n    ...            self.context[soup_name] = SoupData()\n    ...        return self.context[soup_name]\n\n    >>> provideAdapter(StorageLocator, adapts=[Interface])\n\nSo we have locator creating soups by name on the fly. Now its easy to get a soup by name:\n\n.. code-block:: pycon\n\n    >>> from souper.soup import get_soup\n    >>> soup = get_soup('mysoup', context)\n    >>> soup\n    <souper.soup.Soup object at 0x...>\n\n\nProviding a Catalog Factory\n---------------------------\n\nDepending on your needs the catalog and its indexes may look different from use-case to use-case.\nThe catalog factory is responsible to create a catalog for a soup. The factory is a named utility implementing ``souper.interfaces.ICatalogFactory``.\nThe name of the utility has to the the same as the soup have.\n\nHere ``repoze.catalog`` is used and to let the indexes access the data on the records by key the ``NodeAttributeIndexer`` is used.\nFor special cases one may write its custom indexers, but the default one is fine most of the time:\n\n.. code-block:: pycon\n\n    >>> from souper.interfaces import ICatalogFactory\n    >>> from souper.soup import NodeAttributeIndexer\n    >>> from souper.soup import NodeTextIndexer\n    >>> from zope.component import provideUtility\n    >>> from repoze.catalog.catalog import Catalog\n    >>> from repoze.catalog.indexes.field import CatalogFieldIndex\n    >>> from repoze.catalog.indexes.text import CatalogTextIndex\n    >>> from repoze.catalog.indexes.keyword import CatalogKeywordIndex\n\n    >>> @implementer(ICatalogFactory)\n    ... class MySoupCatalogFactory(object):\n    ...\n    ...     def __call__(self, context=None):\n    ...         catalog = Catalog()\n    ...         userindexer = NodeAttributeIndexer('user')\n    ...         catalog[u'user'] = CatalogFieldIndex(userindexer)\n    ...         textindexer = NodeTextIndexer(['text', 'user')\n    ...         catalog[u'text'] = CatalogTextIndex(textindexer)\n    ...         keywordindexer = NodeAttributeIndexer('keywords')\n    ...         catalog[u'keywords'] = CatalogKeywordIndex(keywordindexer)\n    ...         return catalog\n\n    >>> provideUtility(MySoupCatalogFactory(), name=\"mysoup\")\n\nThe catalog factory is used soup-internal only but one may want to check if it works fine:\n\n.. code-block:: pycon\n\n    >>> catalogfactory = getUtility(ICatalogFactory, name='mysoup')\n    >>> catalogfactory\n    <MySoupCatalogFactory object at 0x...>\n\n    >>> catalog = catalogfactory()\n    >>> sorted(catalog.items())\n    [(u'keywords', <repoze.catalog.indexes.keyword.CatalogKeywordIndex object at 0x...>),\n    (u'text', <repoze.catalog.indexes.text.CatalogTextIndex object at 0x...>),\n    (u'user', <repoze.catalog.indexes.field.CatalogFieldIndex object at 0x...>)]\n\n\nAdding records\n--------------\n\nAs mentioned above the ``souper.soup.Record`` is the one and only kind of data added to the soup.\nA record has attributes containing the data:\n\n.. code-block:: pycon\n\n    >>> from souper.soup import get_soup\n    >>> from souper.soup import Record\n    >>> soup = get_soup('mysoup', context)\n    >>> record = Record()\n    >>> record.attrs['user'] = 'user1'\n    >>> record.attrs['text'] = u'foo bar baz'\n    >>> record.attrs['keywords'] = [u'1', u'2', u'\u00fc']\n    >>> record_id = soup.add(record)\n\nA record may contains other records. But to index them one would need a custom indexer.\nSo, usually contained records are valuable for later display, not for searching:\n\n.. code-block:: pycon\n\n    >>> record['subrecord'] = Record()\n    >>> record['homeaddress'].attrs['zip'] = '6020'\n    >>> record['homeaddress'].attrs['town'] = 'Innsbruck'\n    >>> record['homeaddress'].attrs['country'] = 'Austria'\n\n\nAccess data\n-----------\n\nEven without any query a record can be fetched by id:\n\n.. code-block:: pycon\n\n    >>> from souper.soup import get_soup\n    >>> soup = get_soup('mysoup', context)\n    >>> record = soup.get(record_id)\n\nAll records can be accessed using utilizing the container BTree:\n\n.. code-block:: pycon\n\n    >>> soup.data.keys()[0] == record_id\n    True\n\n\nQuery data\n----------\n\n`How to query a repoze catalog is documented well. <http://docs.repoze.org/catalog/usage.html#searching>`_\nSorting works the same too.\nQueries are passed to soups ``query`` method (which uses then repoze catalog).\nIt returns a generator:\n\n.. code-block:: pycon\n\n    >>> from repoze.catalog.query import Eq\n    >>> [r for r in soup.query(Eq('user', 'user1'))]\n    [<Record object 'None' at ...>]\n\n    >>> [r for r in soup.query(Eq('user', 'nonexists'))]\n    []\n\nTo also get the size of the result set pass a ``with_size=True`` to the query.\nThe first item returned by the generator is the size:\n\n.. code-block:: pycon\n\n    >>> [r for r in soup.query(Eq('user', 'user1'), with_size-True)]\n    [1, <Record object 'None' at ...>]\n\n\nTo optimize handling of large result sets one may not to fetch the record but a generator returning light weight objects. Records are fetched on call:\n\n.. code-block:: pycon\n\n    >>> lazy = [l for l in soup.lazy(Eq('name', 'name'))]\n    >>> lazy\n    [<souper.soup.LazyRecord object at ...>,\n\n    >>> lazy[0]()\n    <Record object 'None' at ...>\n\nHere the size is passed as first value of the geneartor too if ``with_size=True`` is passed.\n\n\nDelete a record\n---------------\n\nTo remove a record from the soup python ``del`` is used like one would do on\nany dict:\n\n.. code-block:: pycon\n\n    >>> del soup[record]\n\n\nReindex\n-------\n\nAfter a records data changed it needs a reindex:\n\n.. code-block:: pycon\n\n    >>> record.attrs['user'] = 'user1'\n    >>> soup.reindex(records=[record])\n\nSometimes one may want to reindex all data. Then ``reindex`` has to be called without parameters.\nIt may take a while:\n\n.. code-block:: pycon\n\n    >>> soup.reindex()\n\n\nRebuild catalog\n---------------\n\nUsally after a change of the catalog factory was made - i.e. some index was added - a rebuild of the catalog i needed.\nIt replaces the current catalog with a new one created by the catalog factory and reindexes all data.\nIt may take while:\n\n.. code-block:: pycon\n\n    >>> soup.rebuild()\n\n\nReset (or clear) the soup\n-------------------------\n\nTo remove all data from the soup and empty and rebuild the catalog call ``clear``.\n\n**Attention**: *All data is lost!*\n\n.. code-block:: pycon\n\n    >>> soup.clear()\n\n\nSource Code\n===========\n\nThe sources are in a GIT DVCS with its main branches at `github <http://github.com/bluedynamics/souper>`_.\n\nWe'd be happy to see many forks and pull-requests to make souper even better.\n\n\nContributors\n============\n\n- Robert Niederreiter <rnix [at] squarewave [dot] at>\n\n- Jens W. Klein <jk [at] kleinundpartner [dot] at>\n\n\nChangelog\n=========\n\n1.1.1 (2019-09-16)\n------------------\n\n- Cleanup NodeTextIndexer (one loop is enough).\n  [jensens]\n\n\n1.1.0 (2019-03-08)\n------------------\n\n- Code style (black, isort, utf8headers).\n  [jensens]\n\n- Switched to tox for testing, builodut gone.\n  [jensens]\n\n- Python 2/3 compatibility\n  [agitator]\n\n\n1.0.2 (2015-02-25)\n------------------\n\n- fix: unicode with special chars in text indexer failed.\n  [jensens, 2014-02-25]\n\n1.0.1\n-----\n\n- PEP-8.\n  [rnix, 2012-10-16]\n\n- Python 2.7 Support.\n  [rnix, 2012-10-16]\n\n- Fix documentation.\n\n1.0\n---\n\n- make it work\n  [rnix, jensens, et al]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/souper", "keywords": "zodb zope pyramid node plone", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "souper", "package_url": "https://pypi.org/project/souper/", "platform": "", "project_url": "https://pypi.org/project/souper/", "project_urls": {"Homepage": "https://pypi.org/project/souper"}, "release_url": "https://pypi.org/project/souper/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Souper - Generic Indexed Storage based on ZODB", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/bluedynamics/souper\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bluedynamics/souper.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a423df1a910c93d469a0d89ae223b42991e0b5a9/68747470733a2f2f7472617669732d63692e6f72672f626c756564796e616d6963732f736f757065722e7376673f6272616e63683d6d6173746572\"></a>\n<p>ZODB Storage for lots of (light weight) data.</p>\n<p>Utilizes:</p>\n<ul>\n<li><a href=\"http://www.zodb.org/\" rel=\"nofollow\">ZODB</a> and its <a href=\"http://www.zodb.org/documentation/guide/modules.html#btrees-package\" rel=\"nofollow\">BTrees</a>,</li>\n<li><a href=\"http://pypi.python.org/pypi/node\" rel=\"nofollow\">node</a> (and <a href=\"http://pypi.python.org/pypi/node.ext.zodb\" rel=\"nofollow\">node.ext.zodb</a>).</li>\n<li><a href=\"http://pypi.python.org/pypi/repoze.catalog\" rel=\"nofollow\">repoze.catalog</a>,</li>\n</ul>\n<img alt=\"https://raw.githubusercontent.com/bluedynamics/souper/master/docs/Souper-64.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b5144a8e6a34b6e163d4993f77386d18c348bc5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626c756564796e616d6963732f736f757065722f6d61737465722f646f63732f536f757065722d36342e706e67\">\n<p>Souper is a tool for programmers. It offers an integrated storage tied together with indexes in a catalog.\nThe records in the storage are generic.\nIt is possible to store any data on a record if it is persistent pickable in ZODB.</p>\n<p>Souper can be used used in any Python application, either standalone using the pure ZODB or with <a href=\"http://docs.pylonsproject.org/en/latest/docs/pyramid.html\" rel=\"nofollow\">Pyramid</a>, <a href=\"https://www.zope.org/\" rel=\"nofollow\">Zope</a> or <a href=\"http://plone.org\" rel=\"nofollow\">Plone</a>.</p>\n<div id=\"using-souper\">\n<h2>Using Souper</h2>\n<div id=\"providing-a-locator\">\n<h3>Providing a Locator</h3>\n<p>Soups are looked up by adapting <tt>souper.interfaces.IStorageLocator</tt> to some context.\nSouper does not provide any default locator.\nSo first one need to be provided. Let\u2019s assume context is some persistent dict-like instance</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implementer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">zope.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">provideAdapter</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IStorageLocator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">SoupData</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IStorageLocator</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">class</span> <span class=\"nc\">StorageLocator</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">storage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">soup_name</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>       <span class=\"k\">if</span> <span class=\"n\">soup_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>           <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"n\">soup_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">SoupData</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>       <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"n\">soup_name</span><span class=\"p\">]</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">provideAdapter</span><span class=\"p\">(</span><span class=\"n\">StorageLocator</span><span class=\"p\">,</span> <span class=\"n\">adapts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Interface</span><span class=\"p\">])</span>\n</pre>\n<p>So we have locator creating soups by name on the fly. Now its easy to get a soup by name:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">get_soup</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">get_soup</span><span class=\"p\">(</span><span class=\"s1\">'mysoup'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span>\n<span class=\"go\">&lt;souper.soup.Soup object at 0x...&gt;</span>\n</pre>\n</div>\n<div id=\"providing-a-catalog-factory\">\n<h3>Providing a Catalog Factory</h3>\n<p>Depending on your needs the catalog and its indexes may look different from use-case to use-case.\nThe catalog factory is responsible to create a catalog for a soup. The factory is a named utility implementing <tt>souper.interfaces.ICatalogFactory</tt>.\nThe name of the utility has to the the same as the soup have.</p>\n<p>Here <tt>repoze.catalog</tt> is used and to let the indexes access the data on the records by key the <tt>NodeAttributeIndexer</tt> is used.\nFor special cases one may write its custom indexers, but the default one is fine most of the time:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">ICatalogFactory</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">NodeAttributeIndexer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">NodeTextIndexer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">zope.component</span> <span class=\"kn\">import</span> <span class=\"n\">provideUtility</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">repoze.catalog.catalog</span> <span class=\"kn\">import</span> <span class=\"n\">Catalog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">repoze.catalog.indexes.field</span> <span class=\"kn\">import</span> <span class=\"n\">CatalogFieldIndex</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">repoze.catalog.indexes.text</span> <span class=\"kn\">import</span> <span class=\"n\">CatalogTextIndex</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">repoze.catalog.indexes.keyword</span> <span class=\"kn\">import</span> <span class=\"n\">CatalogKeywordIndex</span>\n<span class=\"go\">\n</span><span class=\"nd\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">ICatalogFactory</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">class</span> <span class=\"nc\">MySoupCatalogFactory</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"n\">catalog</span> <span class=\"o\">=</span> <span class=\"n\">Catalog</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>        <span class=\"n\">userindexer</span> <span class=\"o\">=</span> <span class=\"n\">NodeAttributeIndexer</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">catalog</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">CatalogFieldIndex</span><span class=\"p\">(</span><span class=\"n\">userindexer</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">textindexer</span> <span class=\"o\">=</span> <span class=\"n\">NodeTextIndexer</span><span class=\"p\">([</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">catalog</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'text'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">CatalogTextIndex</span><span class=\"p\">(</span><span class=\"n\">textindexer</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">keywordindexer</span> <span class=\"o\">=</span> <span class=\"n\">NodeAttributeIndexer</span><span class=\"p\">(</span><span class=\"s1\">'keywords'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"n\">catalog</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'keywords'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">CatalogKeywordIndex</span><span class=\"p\">(</span><span class=\"n\">keywordindexer</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"n\">catalog</span>\n<span class=\"go\">\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">provideUtility</span><span class=\"p\">(</span><span class=\"n\">MySoupCatalogFactory</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"mysoup\"</span><span class=\"p\">)</span>\n</pre>\n<p>The catalog factory is used soup-internal only but one may want to check if it works fine:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalogfactory</span> <span class=\"o\">=</span> <span class=\"n\">getUtility</span><span class=\"p\">(</span><span class=\"n\">ICatalogFactory</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'mysoup'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalogfactory</span>\n<span class=\"go\">&lt;MySoupCatalogFactory object at 0x...&gt;\n\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalog</span> <span class=\"o\">=</span> <span class=\"n\">catalogfactory</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"go\">[(u'keywords', &lt;repoze.catalog.indexes.keyword.CatalogKeywordIndex object at 0x...&gt;),\n(u'text', &lt;repoze.catalog.indexes.text.CatalogTextIndex object at 0x...&gt;),\n(u'user', &lt;repoze.catalog.indexes.field.CatalogFieldIndex object at 0x...&gt;)]</span>\n</pre>\n</div>\n<div id=\"adding-records\">\n<h3>Adding records</h3>\n<p>As mentioned above the <tt>souper.soup.Record</tt> is the one and only kind of data added to the soup.\nA record has attributes containing the data:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">get_soup</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">Record</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">get_soup</span><span class=\"p\">(</span><span class=\"s1\">'mysoup'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">Record</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'user1'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">u</span><span class=\"s1\">'foo bar baz'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'keywords'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u00fc'</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record_id</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">)</span>\n</pre>\n<p>A record may contains other records. But to index them one would need a custom indexer.\nSo, usually contained records are valuable for later display, not for searching:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s1\">'subrecord'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Record</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s1\">'homeaddress'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'zip'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'6020'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s1\">'homeaddress'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'town'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Innsbruck'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s1\">'homeaddress'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'country'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Austria'</span>\n</pre>\n</div>\n<div id=\"access-data\">\n<h3>Access data</h3>\n<p>Even without any query a record can be fetched by id:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">souper.soup</span> <span class=\"kn\">import</span> <span class=\"n\">get_soup</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span> <span class=\"o\">=</span> <span class=\"n\">get_soup</span><span class=\"p\">(</span><span class=\"s1\">'mysoup'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">record_id</span><span class=\"p\">)</span>\n</pre>\n<p>All records can be accessed using utilizing the container BTree:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">record_id</span>\n<span class=\"go\">True</span>\n</pre>\n</div>\n<div id=\"query-data\">\n<h3>Query data</h3>\n<p><a href=\"http://docs.repoze.org/catalog/usage.html#searching\" rel=\"nofollow\">How to query a repoze catalog is documented well.</a>\nSorting works the same too.\nQueries are passed to soups <tt>query</tt> method (which uses then repoze catalog).\nIt returns a generator:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">repoze.catalog.query</span> <span class=\"kn\">import</span> <span class=\"n\">Eq</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'user1'</span><span class=\"p\">))]</span>\n<span class=\"go\">[&lt;Record object 'None' at ...&gt;]\n\n</span><span class=\"p\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'nonexists'</span><span class=\"p\">))]</span>\n<span class=\"go\">[]</span>\n</pre>\n<p>To also get the size of the result set pass a <tt>with_size=True</tt> to the query.\nThe first item returned by the generator is the size:</p>\n<pre><span class=\"p\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'user1'</span><span class=\"p\">),</span> <span class=\"n\">with_size</span><span class=\"o\">-</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, &lt;Record object 'None' at ...&gt;]</span>\n</pre>\n<p>To optimize handling of large result sets one may not to fetch the record but a generator returning light weight objects. Records are fetched on call:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lazy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">l</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">))]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lazy</span>\n<span class=\"go\">[&lt;souper.soup.LazyRecord object at ...&gt;,\n\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]()</span>\n<span class=\"go\">&lt;Record object 'None' at ...&gt;</span>\n</pre>\n<p>Here the size is passed as first value of the geneartor too if <tt>with_size=True</tt> is passed.</p>\n</div>\n<div id=\"delete-a-record\">\n<h3>Delete a record</h3>\n<p>To remove a record from the soup python <tt>del</tt> is used like one would do on\nany dict:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">del</span> <span class=\"n\">soup</span><span class=\"p\">[</span><span class=\"n\">record</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"reindex\">\n<h3>Reindex</h3>\n<p>After a records data changed it needs a reindex:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'user1'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">record</span><span class=\"p\">])</span>\n</pre>\n<p>Sometimes one may want to reindex all data. Then <tt>reindex</tt> has to be called without parameters.\nIt may take a while:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"rebuild-catalog\">\n<h3>Rebuild catalog</h3>\n<p>Usally after a change of the catalog factory was made - i.e. some index was added - a rebuild of the catalog i needed.\nIt replaces the current catalog with a new one created by the catalog factory and reindexes all data.\nIt may take while:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">rebuild</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"reset-or-clear-the-soup\">\n<h3>Reset (or clear) the soup</h3>\n<p>To remove all data from the soup and empty and rebuild the catalog call <tt>clear</tt>.</p>\n<p><strong>Attention</strong>: <em>All data is lost!</em></p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"source-code\">\n<h2>Source Code</h2>\n<p>The sources are in a GIT DVCS with its main branches at <a href=\"http://github.com/bluedynamics/souper\" rel=\"nofollow\">github</a>.</p>\n<p>We\u2019d be happy to see many forks and pull-requests to make souper even better.</p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Robert Niederreiter &lt;rnix [at] squarewave [dot] at&gt;</li>\n<li>Jens W. Klein &lt;jk [at] kleinundpartner [dot] at&gt;</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.1.1 (2019-09-16)</h3>\n<ul>\n<li>Cleanup NodeTextIndexer (one loop is enough).\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1.0 (2019-03-08)</h3>\n<ul>\n<li>Code style (black, isort, utf8headers).\n[jensens]</li>\n<li>Switched to tox for testing, builodut gone.\n[jensens]</li>\n<li>Python 2/3 compatibility\n[agitator]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.2 (2015-02-25)</h3>\n<ul>\n<li>fix: unicode with special chars in text indexer failed.\n[jensens, 2014-02-25]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.1</h3>\n<ul>\n<li>PEP-8.\n[rnix, 2012-10-16]</li>\n<li>Python 2.7 Support.\n[rnix, 2012-10-16]</li>\n<li>Fix documentation.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0</h3>\n<ul>\n<li>make it work\n[rnix, jensens, et al]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5836702, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5718f015f9b715b9a2e849695d0dacff", "sha256": "9cd668c26725cb1b01301395287f13a61102f7ce63f01fe5cd358d35ed50ece1"}, "downloads": -1, "filename": "souper-1.0.tar.gz", "has_sig": false, "md5_digest": "5718f015f9b715b9a2e849695d0dacff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2012-10-07T08:38:58", "upload_time_iso_8601": "2012-10-07T08:38:58.220084Z", "url": "https://files.pythonhosted.org/packages/de/d7/62e4b352ab064a6b4d3cb01def687995bd28c7b314ca5cc97a3d45ce0379/souper-1.0.tar.gz", "yanked": false}], "1.0-beta1": [{"comment_text": "", "digests": {"md5": "1cf40e0713b33a2566a9f62600c27577", "sha256": "173416722f4de319cfbee6161fc1b58c83ef410ffe88c29cd99d3397eba656cf"}, "downloads": -1, "filename": "souper-1.0-beta1.tar.gz", "has_sig": false, "md5_digest": "1cf40e0713b33a2566a9f62600c27577", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13196, "upload_time": "2012-08-28T17:06:34", "upload_time_iso_8601": "2012-08-28T17:06:34.609188Z", "url": "https://files.pythonhosted.org/packages/98/3c/43239a9419ba1445430f76504c152e1407a2519d04703ab27a273bb9fb5e/souper-1.0-beta1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1510d6af465249a9989159ef753255d2", "sha256": "d96b43b0e51a8111fd8671bc1f1a15fa68be8e0fed1f90ba6a86e0f219b231d9"}, "downloads": -1, "filename": "souper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1510d6af465249a9989159ef753255d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10881, "upload_time": "2012-12-05T11:10:14", "upload_time_iso_8601": "2012-12-05T11:10:14.464991Z", "url": "https://files.pythonhosted.org/packages/eb/0e/5e9138d50a87c5ff26aa069b9abb814762e246b0c97adf8e8c3aac5189ca/souper-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f3c64a13b6bde42c8320a0ff165d47c7", "sha256": "7d3b6114d43b2c00be9d501abb498fcf5e48b907f85337ddc55e084ed0c1002f"}, "downloads": -1, "filename": "souper-1.0.2.zip", "has_sig": false, "md5_digest": "f3c64a13b6bde42c8320a0ff165d47c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20727, "upload_time": "2015-02-25T11:55:55", "upload_time_iso_8601": "2015-02-25T11:55:55.586835Z", "url": "https://files.pythonhosted.org/packages/36/6c/2baf6b285d5298f3c7640cc8e393462204baf82c8d23f0822742b86b17bb/souper-1.0.2.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "927da1a81038394b49389fc4360fdda8", "sha256": "0ff37aa97c782e4ea9225c3bdeba24bdf1d60a6c316e9f806d8dadb9550c4181"}, "downloads": -1, "filename": "souper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "927da1a81038394b49389fc4360fdda8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25163, "upload_time": "2019-03-08T09:14:13", "upload_time_iso_8601": "2019-03-08T09:14:13.730787Z", "url": "https://files.pythonhosted.org/packages/6f/f7/a1dead8b833f162973ab0dcd8f2d12af2664abddc76be4c1a4ddcebddf64/souper-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "59ded489f73aead5a5db5c1f3b56784b", "sha256": "2ff9d90f3e8437392b6140a086dbe0ea5a8c76b08604729f77bd7813e26f3ca1"}, "downloads": -1, "filename": "souper-1.1.1.tar.gz", "has_sig": false, "md5_digest": "59ded489f73aead5a5db5c1f3b56784b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24996, "upload_time": "2019-09-16T14:56:21", "upload_time_iso_8601": "2019-09-16T14:56:21.234781Z", "url": "https://files.pythonhosted.org/packages/1e/dd/c58e66c9c18269ce8e6d277db8670aabd5d074690b1830d43fc1151a5e0f/souper-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59ded489f73aead5a5db5c1f3b56784b", "sha256": "2ff9d90f3e8437392b6140a086dbe0ea5a8c76b08604729f77bd7813e26f3ca1"}, "downloads": -1, "filename": "souper-1.1.1.tar.gz", "has_sig": false, "md5_digest": "59ded489f73aead5a5db5c1f3b56784b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24996, "upload_time": "2019-09-16T14:56:21", "upload_time_iso_8601": "2019-09-16T14:56:21.234781Z", "url": "https://files.pythonhosted.org/packages/1e/dd/c58e66c9c18269ce8e6d277db8670aabd5d074690b1830d43fc1151a5e0f/souper-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:19 2020"}