{"info": {"author": "t5w5h5", "author_email": "t5w5h5@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "rlog\n====\n\nTag-based logging library for Python 3.\n\nThis logging library is based on the following concepts (partially inspired by the `twelve-factor app`_):\n\n- All output is written unbuffered to stdout. (There are no handlers.)\n- The application controls the output in a print()-style syntax. (There are no formatters.)\n- Output lines are tagged and the actual output can be filtered by tags. (There are no log levels.)\n- All configuration is taken from environment variables. (There are no configuration files.)\n- All logging to the standard logging library is redirected to this library. (We are greedy.)\n\nTagging mechanism\n-----------------\n- Every log output is tagged with a set of implicitly assigned or explicitly specified tags.\n- Explicit tags are specified in a list as optional first parameter of log methods e.g. log.info(['tag'], ...)\n- Implicit tags are:\n    - The name of the module that contains the log statement.\n    - The name used as log method e.g. log.warning(). Note: There are no pre-defined log methods.\n      Any valid method name if possible e.g. log.whatever() or log.this_too().\n    - In case of logging redirected from the standard library:\n        - The log level name in lowercase.\n        - The name of the logger e.g. 'root' for the root logger.\n\nFiltering\n---------\nThe actual log output is filtered by a list of included or excluded tags.\nIf an include list is specified, only those logs are printed of which at least one tag is part of the include list.\nIf an exclude list is specified, only those logs are printed of which no tag is part of the exclude list.\nIf no list is specified, all logs are printed. If both lists are specified, the exclude list has priority.\n\nHint: To omit all log output, specify an include list with an unused tag e.g. LOG_INCLUDE=_nothing\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install rlib-log\n\nGetting Started\n---------------\n\n.. code-block:: bash\n\n    $ LOG_INCLUDE = debug;some_tag\n\n.. code-block:: python\n\n    from rlog import log\n\n    log.debug('How many fingers:', 10)\n    log.something(['some_tag'], 'Output something with additional tag.')\n\nConfiguration / environment variables\n-------------------------------------\nLOG_FTIME = \"%x %X.%f\" (default) | <strftime-style format for the time>\n\nLOG_OUTPUT = native (default) | json\nThe JSON-formatted output line is a dict with the following fields:\n- time: a float value of the timestamp (see datetime.timestamp())\n- tags: a list of the log tags\n- args: a list of the positional arguments\n- kwargs: a dict of the keyword arguments\n- exception (optional): a tuple if exception info if that was available during logging\n\nLOG_INCLUDE = <;-separated list of tags to be included in output>\n\nLOG_EXCLUDE = <;-separated list of tags to be excluded from output>\n\nLOG_LOGGING_LEVEL = DEBUG (default) | <level name for standard logging redirect>\n\nLOG_THREADED = false (default) | true\nWhen threaded log is enabled, log output is done within a daemon thread that is started\nduring module import.\n\nLicense\n-------\n\n\"MIT\". See LICENSE for details. Copyright t5w5h5@gmail.com, 2018.\n\n.. _twelve-factor app: https://12factor.net\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/t5w5h5/rlog/archive/0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/t5w5h5/rlog", "keywords": "logging", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rlib-log", "package_url": "https://pypi.org/project/rlib-log/", "platform": "any", "project_url": "https://pypi.org/project/rlib-log/", "project_urls": {"Download": "https://github.com/t5w5h5/rlog/archive/0.1.tar.gz", "Homepage": "https://github.com/t5w5h5/rlog"}, "release_url": "https://pypi.org/project/rlib-log/0.1/", "requires_dist": null, "requires_python": "", "summary": "Tag-based logging for Python 3.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Tag-based logging library for Python 3.</p>\n<p>This logging library is based on the following concepts (partially inspired by the <a href=\"https://12factor.net\" rel=\"nofollow\">twelve-factor app</a>):</p>\n<ul>\n<li>All output is written unbuffered to stdout. (There are no handlers.)</li>\n<li>The application controls the output in a print()-style syntax. (There are no formatters.)</li>\n<li>Output lines are tagged and the actual output can be filtered by tags. (There are no log levels.)</li>\n<li>All configuration is taken from environment variables. (There are no configuration files.)</li>\n<li>All logging to the standard logging library is redirected to this library. (We are greedy.)</li>\n</ul>\n<div id=\"tagging-mechanism\">\n<h2>Tagging mechanism</h2>\n<ul>\n<li>Every log output is tagged with a set of implicitly assigned or explicitly specified tags.</li>\n<li>Explicit tags are specified in a list as optional first parameter of log methods e.g. log.info([\u2018tag\u2019], \u2026)</li>\n<li><dl>\n<dt>Implicit tags are:</dt>\n<dd><ul>\n<li>The name of the module that contains the log statement.</li>\n<li>The name used as log method e.g. log.warning(). Note: There are no pre-defined log methods.\nAny valid method name if possible e.g. log.whatever() or log.this_too().</li>\n<li><dl>\n<dt>In case of logging redirected from the standard library:</dt>\n<dd><ul>\n<li>The log level name in lowercase.</li>\n<li>The name of the logger e.g. \u2018root\u2019 for the root logger.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"filtering\">\n<h2>Filtering</h2>\n<p>The actual log output is filtered by a list of included or excluded tags.\nIf an include list is specified, only those logs are printed of which at least one tag is part of the include list.\nIf an exclude list is specified, only those logs are printed of which no tag is part of the exclude list.\nIf no list is specified, all logs are printed. If both lists are specified, the exclude list has priority.</p>\n<p>Hint: To omit all log output, specify an include list with an unused tag e.g. LOG_INCLUDE=_nothing</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install rlib-log\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<pre>$ <span class=\"nv\">LOG_INCLUDE</span> <span class=\"o\">=</span> debug<span class=\"p\">;</span>some_tag\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rlog</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'How many fingers:'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">something</span><span class=\"p\">([</span><span class=\"s1\">'some_tag'</span><span class=\"p\">],</span> <span class=\"s1\">'Output something with additional tag.'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"configuration-environment-variables\">\n<h2>Configuration / environment variables</h2>\n<p>LOG_FTIME = \u201c%x %X.%f\u201d (default) | &lt;strftime-style format for the time&gt;</p>\n<p>LOG_OUTPUT = native (default) | json\nThe JSON-formatted output line is a dict with the following fields:\n- time: a float value of the timestamp (see datetime.timestamp())\n- tags: a list of the log tags\n- args: a list of the positional arguments\n- kwargs: a dict of the keyword arguments\n- exception (optional): a tuple if exception info if that was available during logging</p>\n<p>LOG_INCLUDE = &lt;;-separated list of tags to be included in output&gt;</p>\n<p>LOG_EXCLUDE = &lt;;-separated list of tags to be excluded from output&gt;</p>\n<p>LOG_LOGGING_LEVEL = DEBUG (default) | &lt;level name for standard logging redirect&gt;</p>\n<p>LOG_THREADED = false (default) | true\nWhen threaded log is enabled, log output is done within a daemon thread that is started\nduring module import.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>\u201cMIT\u201d. See LICENSE for details. Copyright <a href=\"mailto:t5w5h5%40gmail.com\">t5w5h5<span>@</span>gmail<span>.</span>com</a>, 2018.</p>\n</div>\n\n          </div>"}, "last_serial": 3715572, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1087ce26822138237ce01aa3cf84f3e8", "sha256": "f68425fe481351ca6fbc5f87be34d2fe7a1bbd2ca9402ed5145b984520337c3d"}, "downloads": -1, "filename": "rlib-log-0.1.tar.gz", "has_sig": false, "md5_digest": "1087ce26822138237ce01aa3cf84f3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5189, "upload_time": "2018-03-29T00:36:08", "upload_time_iso_8601": "2018-03-29T00:36:08.566716Z", "url": "https://files.pythonhosted.org/packages/77/f9/b058d611773d3359989fe13ab3564d348fd1c610725fb1f8db73f040000e/rlib-log-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1087ce26822138237ce01aa3cf84f3e8", "sha256": "f68425fe481351ca6fbc5f87be34d2fe7a1bbd2ca9402ed5145b984520337c3d"}, "downloads": -1, "filename": "rlib-log-0.1.tar.gz", "has_sig": false, "md5_digest": "1087ce26822138237ce01aa3cf84f3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5189, "upload_time": "2018-03-29T00:36:08", "upload_time_iso_8601": "2018-03-29T00:36:08.566716Z", "url": "https://files.pythonhosted.org/packages/77/f9/b058d611773d3359989fe13ab3564d348fd1c610725fb1f8db73f040000e/rlib-log-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:17 2020"}