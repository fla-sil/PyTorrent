{"info": {"author": "L. K\u00e4rkk\u00e4inen", "author_email": "tronic@noreply.users.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing :: Markup :: HTML"], "description": "# Pythonic HTML5 generation\n\nThe module is named **html5tagger** because it makes heavy use of the simplified HTML5 syntax where many opening and closing tags are optional. Tags are written with no consideration of DOM tree structure, which the browsers determine automatically based on the content that follows. No *pretty printing* is added to the HTML code because such extra whitespace would create unnecessary DOM nodes, often affecting output formatting as well.\n\n```\npip install html5tagger\n```\n\nSince the module is a single file with no dependencies, you may also just copy [html5tagger.py](https://github.com/Tronic/html5tagger/raw/master/html5tagger.py) directly into your project.\n\n## Intro\n\nYou can create HTML snippets by starting with `E` (for an empty builder) and adding elements with dot notation:\n\n```python\nfrom html5tagger import Document, E\n\nsnippet = E.table(E.tr.th(\"First\").th(\"Second\").th(\"Third\").tr.td(1).td(2).td(3))\n\nprint(snippet)  # Print snippet's code\n```\n\n```html\n<table><tr><th>First<th>Second<th>Third<tr><td>1<td>2<td>3</table>\n```\n\nThe `Builder` object converts to HTML string when printed or by `str(snippet)`. [Jupyter Notebook](https://jupyter.org/) and others may render them automatically as HTML, unless explicitly converted into string first.\n\nIn contrast to `E` which creates snippets, `Document` creates a new document (i.e. it begins with a DOCTYPE declaration). A minimal head structure is created using any provided title and/or urls. `html` attributes may be defined by keyword arguments.\n\n```python\nDocument(\"Test page\", lang=\"en\")\n```\n\n```html\n<!DOCTYPE html><html lang=en><meta charset=\"utf-8\"><title>Test page</title>\n```\n\nThis is a valid document by itself. `</head><body>` and `</body></html>` are not needed in HTML5, and thus any content may simply be appended to this, without ever *closing* the document.\n\nYou can also add your js, css, favicon and manifest files:\n\n```python\nDocument(_urls=(\"style.css\", \"logo.png\", \"jquery.js\"))\n```\n\n```html\n<!DOCTYPE html>\n<link rel=stylesheet href=\"style.css\">\n<link rel=icon href=\"logo.png\", type=\"image/png\">\n<script src=\"jquery.js\"></script>\n```\n\n## Nesting\n\nExplicit nesting needs to be used for elements such as `table` and `ul` where contents may be provided as sub-snippet parameters, or by `with` blocks:\n\n```python\ndoc = Document(\"Test page\", lang=\"en\")\nwith doc.ul:  # Nest using the with statement\n    doc.li(\"Write documents in Python\").li(\"Simple syntax\")\n    with doc.ul:\n        doc.li(\"No brackets or closing tags\").li(\"Integrates with other code\")\n        doc.ul(E.li(\"Easy\").li(\"Efficient\"))  # Nest using (...)\n    doc.li(\"Avoids whitespace problems common in templating\")\n```\n\nOutput formatted for readability:\n\n```html\n<!DOCTYPE html>\n<html lang=en>\n  <meta charset=\"utf-8\">\n  <title>Test page</title>\n  <ul>\n    <li>Write documents in Python\n    <li>Simple syntax\n      <ul>\n        <li>No brackets or closing tags\n        <li>Integrates with other code\n          <ul>\n            <li>Easy\n            <li>Efficient\n          </ul>\n      </ul>\n    <li>Avoids whitespace problems common in templating\n  </ul>\n```\n\n## Escaping\n\nAll content and attributes are automatically escaped. For instance, we can put the entire document into an iframe's srcdoc attribute where only the minimal but necessary escaping is applied:\n\n```python\nE.iframe(srcdoc=doc)\n```\n\n```html\n<iframe srcdoc=\"<!DOCTYPE html><html lang=en><meta charset=&quot;utf-8&quot;><title>Test page</title><ul><li>Write documents in Python<li>Simple syntax<ul><li>No brackets or closing tags<li>Integrates with other code<ul><li>Easy<li>Efficient</ul></ul><li>Avoids whitespace problems common in templating</ul>\"></iframe>\n```\n\n## Name mangling and boolean attributes\n\nUnderscore at the end of name is ignored so that Python's reserved names such as `for` can be specified. Other underscores convert into hyphens.\n\nBoolean values convert into short attributes.\n\n```python\nE.input(type=\"checkbox\", id=\"somebox\", checked=True).label(for_=\"somebox\", aria_role=\"img\")(\"\ud83e\udd73\")\n```\n\n```html\n<input type=checkbox id=somebox checked><label for=somebox aria-role=img>\ud83e\udd73</label>\n```\n\n## Preformatted HTML\n\nAll content is automatically escaped, unless it provides an `__html__` method that returns HTML string. Similarly, the builder objects of this module expose `__html__` and `_repr_html_` accessors that allow them to be rendered as HTML in Jupyter Notebooks and various other systems that follow this convention.\n\nAny preformatted HTML may be wrapped in `html5tagger.HTML(string_of_html)` to avoid it being escaped when included in a document, as the HTML class has those accessors.\n\n## Performance\n\n```python\n%timeit str(Document(\"benchmarking\", lang=\"en\", _urls=(\"foo.js\", \"bar.js\")))\n```\n\n    35.7 \u00b5s \u00b1 1.11 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\nUnless you are creating very large documents, this should be quite fast enough.\n\nTraditional web frameworks like [Django](https://www.djangoproject.com/) and [Flask](https://palletsprojects.com/p/flask/) are probably much slower. [Sanic](https://sanic.readthedocs.io/en/latest/) users might need to optimise some more to stay above 20000 req/s or so.\n\n## Further development\n\nThere have been no changes to the tagging API since 2018 when this module was brought to production use, and thus the interface is considered stable.\n\nIf there is need, a future version of this module may support templating where a document is baked into a list of string snippets, where dynamic content may be injected much faster than what Jinja2 and other regex-based templating engines can do. Other than that, no further development other than maintenance is planned.\n\nPull requests are still welcome.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Tronic/html5tagger", "keywords": "HTML,HTML5,templating,Jinja", "license": "", "maintainer": "", "maintainer_email": "", "name": "html5tagger", "package_url": "https://pypi.org/project/html5tagger/", "platform": "", "project_url": "https://pypi.org/project/html5tagger/", "project_urls": {"Homepage": "https://github.com/Tronic/html5tagger"}, "release_url": "https://pypi.org/project/html5tagger/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Pythonic HTML5 generation without templating", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pythonic HTML5 generation</h1>\n<p>The module is named <strong>html5tagger</strong> because it makes heavy use of the simplified HTML5 syntax where many opening and closing tags are optional. Tags are written with no consideration of DOM tree structure, which the browsers determine automatically based on the content that follows. No <em>pretty printing</em> is added to the HTML code because such extra whitespace would create unnecessary DOM nodes, often affecting output formatting as well.</p>\n<pre><code>pip install html5tagger\n</code></pre>\n<p>Since the module is a single file with no dependencies, you may also just copy <a href=\"https://github.com/Tronic/html5tagger/raw/master/html5tagger.py\" rel=\"nofollow\">html5tagger.py</a> directly into your project.</p>\n<h2>Intro</h2>\n<p>You can create HTML snippets by starting with <code>E</code> (for an empty builder) and adding elements with dot notation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">html5tagger</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">E</span>\n\n<span class=\"n\">snippet</span> <span class=\"o\">=</span> <span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">th</span><span class=\"p\">(</span><span class=\"s2\">\"First\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">th</span><span class=\"p\">(</span><span class=\"s2\">\"Second\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">th</span><span class=\"p\">(</span><span class=\"s2\">\"Third\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tr</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">snippet</span><span class=\"p\">)</span>  <span class=\"c1\"># Print snippet's code</span>\n</pre>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">table</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">th</span><span class=\"p\">&gt;</span>First<span class=\"p\">&lt;</span><span class=\"nt\">th</span><span class=\"p\">&gt;</span>Second<span class=\"p\">&lt;</span><span class=\"nt\">th</span><span class=\"p\">&gt;</span>Third<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>1<span class=\"p\">&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>2<span class=\"p\">&lt;</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>3<span class=\"p\">&lt;/</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The <code>Builder</code> object converts to HTML string when printed or by <code>str(snippet)</code>. <a href=\"https://jupyter.org/\" rel=\"nofollow\">Jupyter Notebook</a> and others may render them automatically as HTML, unless explicitly converted into string first.</p>\n<p>In contrast to <code>E</code> which creates snippets, <code>Document</code> creates a new document (i.e. it begins with a DOCTYPE declaration). A minimal head structure is created using any provided title and/or urls. <code>html</code> attributes may be defined by keyword arguments.</p>\n<pre><span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"s2\">\"Test page\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span><span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">en</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Test page<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n</pre>\n<p>This is a valid document by itself. <code>&lt;/head&gt;&lt;body&gt;</code> and <code>&lt;/body&gt;&lt;/html&gt;</code> are not needed in HTML5, and thus any content may simply be appended to this, without ever <em>closing</em> the document.</p>\n<p>You can also add your js, css, favicon and manifest files:</p>\n<pre><span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"n\">_urls</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"style.css\"</span><span class=\"p\">,</span> <span class=\"s2\">\"logo.png\"</span><span class=\"p\">,</span> <span class=\"s2\">\"jquery.js\"</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">stylesheet</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"style.css\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">icon</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"logo.png\"</span><span class=\"err\">,</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"image/png\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"jquery.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<h2>Nesting</h2>\n<p>Explicit nesting needs to be used for elements such as <code>table</code> and <code>ul</code> where contents may be provided as sub-snippet parameters, or by <code>with</code> blocks:</p>\n<pre><span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"s2\">\"Test page\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">ul</span><span class=\"p\">:</span>  <span class=\"c1\"># Nest using the with statement</span>\n    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Write documents in Python\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Simple syntax\"</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">ul</span><span class=\"p\">:</span>\n        <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"No brackets or closing tags\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Integrates with other code\"</span><span class=\"p\">)</span>\n        <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">ul</span><span class=\"p\">(</span><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Easy\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Efficient\"</span><span class=\"p\">))</span>  <span class=\"c1\"># Nest using (...)</span>\n    <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"s2\">\"Avoids whitespace problems common in templating\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output formatted for readability:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">en</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Test page<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Write documents in Python\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Simple syntax\n      <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>No brackets or closing tags\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Integrates with other code\n          <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Easy\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Efficient\n          <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Avoids whitespace problems common in templating\n  <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>\n<h2>Escaping</h2>\n<p>All content and attributes are automatically escaped. For instance, we can put the entire document into an iframe's srcdoc attribute where only the minimal but necessary escaping is applied:</p>\n<pre><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">iframe</span><span class=\"p\">(</span><span class=\"n\">srcdoc</span><span class=\"o\">=</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">iframe</span> <span class=\"na\">srcdoc</span><span class=\"o\">=</span><span class=\"s\">\"&lt;!DOCTYPE html&gt;&lt;html lang=en&gt;&lt;meta charset=&amp;quot;utf-8&amp;quot;&gt;&lt;title&gt;Test page&lt;/title&gt;&lt;ul&gt;&lt;li&gt;Write documents in Python&lt;li&gt;Simple syntax&lt;ul&gt;&lt;li&gt;No brackets or closing tags&lt;li&gt;Integrates with other code&lt;ul&gt;&lt;li&gt;Easy&lt;li&gt;Efficient&lt;/ul&gt;&lt;/ul&gt;&lt;li&gt;Avoids whitespace problems common in templating&lt;/ul&gt;\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">iframe</span><span class=\"p\">&gt;</span>\n</pre>\n<h2>Name mangling and boolean attributes</h2>\n<p>Underscore at the end of name is ignored so that Python's reserved names such as <code>for</code> can be specified. Other underscores convert into hyphens.</p>\n<p>Boolean values convert into short attributes.</p>\n<pre><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"checkbox\"</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"somebox\"</span><span class=\"p\">,</span> <span class=\"n\">checked</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"n\">for_</span><span class=\"o\">=</span><span class=\"s2\">\"somebox\"</span><span class=\"p\">,</span> <span class=\"n\">aria_role</span><span class=\"o\">=</span><span class=\"s2\">\"img\"</span><span class=\"p\">)(</span><span class=\"s2\">\"\ud83e\udd73\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">checkbox</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">somebox</span> <span class=\"na\">checked</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">somebox</span> <span class=\"na\">aria-role</span><span class=\"o\">=</span><span class=\"s\">img</span><span class=\"p\">&gt;</span>\ud83e\udd73<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n</pre>\n<h2>Preformatted HTML</h2>\n<p>All content is automatically escaped, unless it provides an <code>__html__</code> method that returns HTML string. Similarly, the builder objects of this module expose <code>__html__</code> and <code>_repr_html_</code> accessors that allow them to be rendered as HTML in Jupyter Notebooks and various other systems that follow this convention.</p>\n<p>Any preformatted HTML may be wrapped in <code>html5tagger.HTML(string_of_html)</code> to avoid it being escaped when included in a document, as the HTML class has those accessors.</p>\n<h2>Performance</h2>\n<pre><span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">(</span><span class=\"s2\">\"benchmarking\"</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">,</span> <span class=\"n\">_urls</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"foo.js\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar.js\"</span><span class=\"p\">)))</span>\n</pre>\n<pre><code>35.7 \u00b5s \u00b1 1.11 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n</code></pre>\n<p>Unless you are creating very large documents, this should be quite fast enough.</p>\n<p>Traditional web frameworks like <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> and <a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a> are probably much slower. <a href=\"https://sanic.readthedocs.io/en/latest/\" rel=\"nofollow\">Sanic</a> users might need to optimise some more to stay above 20000 req/s or so.</p>\n<h2>Further development</h2>\n<p>There have been no changes to the tagging API since 2018 when this module was brought to production use, and thus the interface is considered stable.</p>\n<p>If there is need, a future version of this module may support templating where a document is baked into a list of string snippets, where dynamic content may be injected much faster than what Jinja2 and other regex-based templating engines can do. Other than that, no further development other than maintenance is planned.</p>\n<p>Pull requests are still welcome.</p>\n\n          </div>"}, "last_serial": 6843313, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "18d811006d004a4d25e0c4deeb7e4234", "sha256": "7172694591f4255b1c3da3429784e6884fbfd6c671083814b5b8ad7ff25cdfd6"}, "downloads": -1, "filename": "html5tagger-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18d811006d004a4d25e0c4deeb7e4234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3616, "upload_time": "2020-03-13T09:31:05", "upload_time_iso_8601": "2020-03-13T09:31:05.576639Z", "url": "https://files.pythonhosted.org/packages/5c/fa/0641aa1f89d7fd60d904bf96578d6468db07eba7da3115ea7b4d7d3baf2f/html5tagger-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2b69b94ce1af3b3975c837a87293fec", "sha256": "01fa1220535e711af3893ebe921a571a6a5be32cff2b4d1aff5047f602a46524"}, "downloads": -1, "filename": "html5tagger-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d2b69b94ce1af3b3975c837a87293fec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4087, "upload_time": "2020-03-13T09:31:08", "upload_time_iso_8601": "2020-03-13T09:31:08.316709Z", "url": "https://files.pythonhosted.org/packages/61/7b/d5d60c8515bafb7eb6202eab6382672752fad0e37364dd1dfe444f2475c9/html5tagger-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8a2fcdee838584f3dba5ef7bc0ebe8ef", "sha256": "38151b30059f99653f39f02c3d713233657291431ecd3afe3281cfb064c4cbd4"}, "downloads": -1, "filename": "html5tagger-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a2fcdee838584f3dba5ef7bc0ebe8ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3815, "upload_time": "2020-03-19T13:40:17", "upload_time_iso_8601": "2020-03-19T13:40:17.621967Z", "url": "https://files.pythonhosted.org/packages/d2/0c/4ee9cdb09a0616c695e1d92227aab7290e6f9f5086e1e665e4db27b311fb/html5tagger-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c059e64501193fe2ae415b2e8fb5eac", "sha256": "bef946c69f4872662145139335bbd86c1db8df7e5c85f69ea96c8d8c55c77df9"}, "downloads": -1, "filename": "html5tagger-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6c059e64501193fe2ae415b2e8fb5eac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6643, "upload_time": "2020-03-19T13:40:19", "upload_time_iso_8601": "2020-03-19T13:40:19.445601Z", "url": "https://files.pythonhosted.org/packages/be/78/523e480a7c09c898dc33af6acab8322f040865528f04e7447a65bcd67065/html5tagger-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "87369ef040c47a161eb6cf2e1e2e6ca7", "sha256": "12deef648afb95216584ab7bc3ef69ff4fb7db6533f4abba8383a90b69101a91"}, "downloads": -1, "filename": "html5tagger-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87369ef040c47a161eb6cf2e1e2e6ca7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6172, "upload_time": "2020-03-19T13:49:27", "upload_time_iso_8601": "2020-03-19T13:49:27.376055Z", "url": "https://files.pythonhosted.org/packages/3d/d0/e19ef4df6303db53ae23cbd0bb9ecb458c11c0e1f8e33dae4f0b6343e33d/html5tagger-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c69aa05d78e8927947a6e5c6fb50e99", "sha256": "351d09375d782be6b2f7f179d4ff25679ec34542f6d0efdd59a42483ce3a644f"}, "downloads": -1, "filename": "html5tagger-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8c69aa05d78e8927947a6e5c6fb50e99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6661, "upload_time": "2020-03-19T13:49:28", "upload_time_iso_8601": "2020-03-19T13:49:28.931458Z", "url": "https://files.pythonhosted.org/packages/a9/a7/40eaff109002e7cd4d2414301e0e8f2c8a7ed427e01f92f21ba1c950367d/html5tagger-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a22bc4a46a723c773881721ea1c6af51", "sha256": "4ede3368bfda536572c7a91c5cb474bf2c1986a1754a0dab072506b250a3cd3a"}, "downloads": -1, "filename": "html5tagger-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a22bc4a46a723c773881721ea1c6af51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6170, "upload_time": "2020-03-19T13:51:16", "upload_time_iso_8601": "2020-03-19T13:51:16.046808Z", "url": "https://files.pythonhosted.org/packages/f3/cc/1098746df56c28b90dac49a9101b4677ba7c62b72ef8b35ba1eba530cd0c/html5tagger-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9530cf56f67493894e4427361000e7ae", "sha256": "8f3a27170f2282512d5ef8ec97f79ca5bee28d00cb6a80401084be69396d7bea"}, "downloads": -1, "filename": "html5tagger-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9530cf56f67493894e4427361000e7ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6669, "upload_time": "2020-03-19T13:51:17", "upload_time_iso_8601": "2020-03-19T13:51:17.470414Z", "url": "https://files.pythonhosted.org/packages/0c/01/1789e89b5b157ae6b0009a1012f8a72b692c1eaea88c9971ed5bf1bf57e0/html5tagger-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a22bc4a46a723c773881721ea1c6af51", "sha256": "4ede3368bfda536572c7a91c5cb474bf2c1986a1754a0dab072506b250a3cd3a"}, "downloads": -1, "filename": "html5tagger-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a22bc4a46a723c773881721ea1c6af51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6170, "upload_time": "2020-03-19T13:51:16", "upload_time_iso_8601": "2020-03-19T13:51:16.046808Z", "url": "https://files.pythonhosted.org/packages/f3/cc/1098746df56c28b90dac49a9101b4677ba7c62b72ef8b35ba1eba530cd0c/html5tagger-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9530cf56f67493894e4427361000e7ae", "sha256": "8f3a27170f2282512d5ef8ec97f79ca5bee28d00cb6a80401084be69396d7bea"}, "downloads": -1, "filename": "html5tagger-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9530cf56f67493894e4427361000e7ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6669, "upload_time": "2020-03-19T13:51:17", "upload_time_iso_8601": "2020-03-19T13:51:17.470414Z", "url": "https://files.pythonhosted.org/packages/0c/01/1789e89b5b157ae6b0009a1012f8a72b692c1eaea88c9971ed5bf1bf57e0/html5tagger-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:18 2020"}