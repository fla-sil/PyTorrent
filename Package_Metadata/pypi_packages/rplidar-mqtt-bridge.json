{"info": {"author": "Adaptant Labs", "author_email": "labs@adaptant.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Communications", "Topic :: Internet", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator", "Topic :: System :: Hardware"], "description": "# RPLIDAR-MQTT-Bridge\n\nThis package provides a simple app for bridging data between a SLAMTEC [RPLIDAR] device (specifically tested on an\n[RPLIDAR-A1]) and an MQTT Broker.\n\n## Known Limitations\n\nAt present this is limited to streaming data from the LiDAR device to the broker, and assumes a direct USB connection.\nThis will be extended to support controlling motor speed and scanning frequency in a future version in order to work as\na bi-directional _bridge_.\n\nIn addition to the direct USB connection, this will also be extended to support drving the device directly via GPIOs\n(note that on a Raspberry Pi this requires an external 5V DC supply and a 3.3V-5V level shifter on the GPIO & PWM pins,\ngiven the power requirements of the motor itself).\n\n[RPLIDAR]: https://www.slamtec.com/en/Lidar\n[RPLIDAR-A1]: https://www.slamtec.com/en/Lidar/A1\n\n## Quick Start\n\nProvided that a direct connection with the device has already been established via USB and the MQTT Broker is directly\nreachable on the same machine, `rplidar_mqtt_bridge` can be run as-is:\n\n```\n$ rplidar_mqtt_bridge\nConnected to RPLiDAR device at /dev/ttyUSB0\nPublishing to localhost:1883/rplidar/9efxxxxxxxxxxxx...\n```\n\n## MQTT Format\n\nThe following MQTT topic and sub-topics are published:\n\n```\n/rplidar/<device-id>/measurement\n/rplidar/<device-id>/source\n/rplidar/<device-id>/info/model\n/rplidar/<device-id>/info/hardware\n/rplidar/<device-id>/info/firmware\n/rplidar/<device-id>/info/serialnumber\n```\n\nThe `measurement` itself is provided in a JSON-encoded payload, consisting of the sensor readings and an ISO 8601\ntimestamp:\n\n```json\n{\n  \"quality\": 13,\n  \"angle\": 328.703125,\n  \"distance\": 353,\n  \"timestamp\": \"2020-03-31T17:28:29.828000\"\n}\n```\n\n## Configuration\n\nConfiguration via an `rplidar-mqtt.ini` file is also possible, with the defaults set as below:\n\n```ini\n[DEFAULT]\n\nMQTT_BROKER_HOST=\"localhost\"\nMQTT_BROKER_PORT=\"1336\"\nMQTT_TOPIC_PREFIX=\"rplidar\"\nRPLIDAR_DEVICE_PATH=\"/dev/ttyUSB0\"\n```\n\nthe configuration file can live in any of:\n\n- `rplidar-mqtt.ini`\n- `/etc/rplidar-mqtt-bridge/rplidar-mqtt.ini`\n- `$HOME/.config/rplidar-mqtt-bridge/rplidar-mqtt.ini`\n\n## Usage\n\n\n```\n$ rplidar_mqtt_bridge --help\nusage: rplidar_mqtt_bridge [-h] [--mqtt-host MQTT_HOST]\n                           [--mqtt-port MQTT_PORT]\n                           [--rplidar-device RPLIDAR_DEVICE]\n                           [--reset-messages]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --mqtt-host MQTT_HOST\n                        MQTT broker host to connect to\n  --mqtt-port MQTT_PORT\n                        MQTT broker port to connect to\n  --rplidar-device RPLIDAR_DEVICE\n                        RPLiDAR device path\n  --reset-messages      Clear existing readings\n```\n\n## Docker Image\n\nIt is also possible to deploy and run `rplidar_mqtt_bridge` from a Docker image. In\nthis case, the host where the image is being run will need to pass on the\nRPLiDAR device connection to the container. This can be achieved two different ways:\n\nTo run the image in `privileged` mode, where the container has direct access to\nthe host's devices, allowing the application to try and find the RPLiDAR device\ndirectly by itself:\n\n```\n$ docker run --privileged adaptant/rplidar-mqtt-bridge:latest\n...\n```\n\nOr in a more constrained way, in which the specific device that the RPLiDAR device\nconnection is made to be passed through explicitly:\n\n```\n$ docker run --device /dev/ttyUSB0 adaptant/rplidar-mqtt-bridge:latest\n...\n```\n\n## License\n\n`rplidar-mqtt-bridge` is licensed under the terms of the Apache 2.0 license,\nthe full version of which can be found in the LICENSE file included in the\ndistribution.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adaptant-labs/rplidar-mqtt-bridge", "keywords": "rplidar lidar sensors mqtt", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "rplidar-mqtt-bridge", "package_url": "https://pypi.org/project/rplidar-mqtt-bridge/", "platform": "", "project_url": "https://pypi.org/project/rplidar-mqtt-bridge/", "project_urls": {"Homepage": "https://github.com/adaptant-labs/rplidar-mqtt-bridge"}, "release_url": "https://pypi.org/project/rplidar-mqtt-bridge/0.0.1/", "requires_dist": ["rplidar", "paho-mqtt"], "requires_python": "", "summary": "A simple bridge between an RPLIDAR device and an MQTT Broker", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RPLIDAR-MQTT-Bridge</h1>\n<p>This package provides a simple app for bridging data between a SLAMTEC <a href=\"https://www.slamtec.com/en/Lidar\" rel=\"nofollow\">RPLIDAR</a> device (specifically tested on an\n<a href=\"https://www.slamtec.com/en/Lidar/A1\" rel=\"nofollow\">RPLIDAR-A1</a>) and an MQTT Broker.</p>\n<h2>Known Limitations</h2>\n<p>At present this is limited to streaming data from the LiDAR device to the broker, and assumes a direct USB connection.\nThis will be extended to support controlling motor speed and scanning frequency in a future version in order to work as\na bi-directional <em>bridge</em>.</p>\n<p>In addition to the direct USB connection, this will also be extended to support drving the device directly via GPIOs\n(note that on a Raspberry Pi this requires an external 5V DC supply and a 3.3V-5V level shifter on the GPIO &amp; PWM pins,\ngiven the power requirements of the motor itself).</p>\n<h2>Quick Start</h2>\n<p>Provided that a direct connection with the device has already been established via USB and the MQTT Broker is directly\nreachable on the same machine, <code>rplidar_mqtt_bridge</code> can be run as-is:</p>\n<pre><code>$ rplidar_mqtt_bridge\nConnected to RPLiDAR device at /dev/ttyUSB0\nPublishing to localhost:1883/rplidar/9efxxxxxxxxxxxx...\n</code></pre>\n<h2>MQTT Format</h2>\n<p>The following MQTT topic and sub-topics are published:</p>\n<pre><code>/rplidar/&lt;device-id&gt;/measurement\n/rplidar/&lt;device-id&gt;/source\n/rplidar/&lt;device-id&gt;/info/model\n/rplidar/&lt;device-id&gt;/info/hardware\n/rplidar/&lt;device-id&gt;/info/firmware\n/rplidar/&lt;device-id&gt;/info/serialnumber\n</code></pre>\n<p>The <code>measurement</code> itself is provided in a JSON-encoded payload, consisting of the sensor readings and an ISO 8601\ntimestamp:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"quality\"</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"angle\"</span><span class=\"p\">:</span> <span class=\"mf\">328.703125</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"distance\"</span><span class=\"p\">:</span> <span class=\"mi\">353</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2020-03-31T17:28:29.828000\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Configuration</h2>\n<p>Configuration via an <code>rplidar-mqtt.ini</code> file is also possible, with the defaults set as below:</p>\n<pre><span class=\"k\">[DEFAULT]</span>\n\n<span class=\"na\">MQTT_BROKER_HOST</span><span class=\"o\">=</span><span class=\"s\">\"localhost\"</span>\n<span class=\"na\">MQTT_BROKER_PORT</span><span class=\"o\">=</span><span class=\"s\">\"1336\"</span>\n<span class=\"na\">MQTT_TOPIC_PREFIX</span><span class=\"o\">=</span><span class=\"s\">\"rplidar\"</span>\n<span class=\"na\">RPLIDAR_DEVICE_PATH</span><span class=\"o\">=</span><span class=\"s\">\"/dev/ttyUSB0\"</span>\n</pre>\n<p>the configuration file can live in any of:</p>\n<ul>\n<li><code>rplidar-mqtt.ini</code></li>\n<li><code>/etc/rplidar-mqtt-bridge/rplidar-mqtt.ini</code></li>\n<li><code>$HOME/.config/rplidar-mqtt-bridge/rplidar-mqtt.ini</code></li>\n</ul>\n<h2>Usage</h2>\n<pre><code>$ rplidar_mqtt_bridge --help\nusage: rplidar_mqtt_bridge [-h] [--mqtt-host MQTT_HOST]\n                           [--mqtt-port MQTT_PORT]\n                           [--rplidar-device RPLIDAR_DEVICE]\n                           [--reset-messages]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --mqtt-host MQTT_HOST\n                        MQTT broker host to connect to\n  --mqtt-port MQTT_PORT\n                        MQTT broker port to connect to\n  --rplidar-device RPLIDAR_DEVICE\n                        RPLiDAR device path\n  --reset-messages      Clear existing readings\n</code></pre>\n<h2>Docker Image</h2>\n<p>It is also possible to deploy and run <code>rplidar_mqtt_bridge</code> from a Docker image. In\nthis case, the host where the image is being run will need to pass on the\nRPLiDAR device connection to the container. This can be achieved two different ways:</p>\n<p>To run the image in <code>privileged</code> mode, where the container has direct access to\nthe host's devices, allowing the application to try and find the RPLiDAR device\ndirectly by itself:</p>\n<pre><code>$ docker run --privileged adaptant/rplidar-mqtt-bridge:latest\n...\n</code></pre>\n<p>Or in a more constrained way, in which the specific device that the RPLiDAR device\nconnection is made to be passed through explicitly:</p>\n<pre><code>$ docker run --device /dev/ttyUSB0 adaptant/rplidar-mqtt-bridge:latest\n...\n</code></pre>\n<h2>License</h2>\n<p><code>rplidar-mqtt-bridge</code> is licensed under the terms of the Apache 2.0 license,\nthe full version of which can be found in the LICENSE file included in the\ndistribution.</p>\n\n          </div>"}, "last_serial": 6922118, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c51185bc8c936cf8a6f361fa52054aef", "sha256": "dfbb042505fc8182961977ed27d4d8bf20f5a81339047e2abc96cf75422ded3d"}, "downloads": -1, "filename": "rplidar_mqtt_bridge-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c51185bc8c936cf8a6f361fa52054aef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10765, "upload_time": "2020-03-31T18:40:40", "upload_time_iso_8601": "2020-03-31T18:40:40.887042Z", "url": "https://files.pythonhosted.org/packages/65/71/cb1bb2fdecdae69408a534375ef75432d5291a1fa5f2d368977209ecf169/rplidar_mqtt_bridge-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "564c8f8a3e2b0811849d59bba0d20600", "sha256": "b41af77e9dbb43b202b8a0207441c696490e642e25d90e65a0f2d98c9c7631b3"}, "downloads": -1, "filename": "rplidar_mqtt_bridge-0.0.1.tar.gz", "has_sig": false, "md5_digest": "564c8f8a3e2b0811849d59bba0d20600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5376, "upload_time": "2020-03-31T18:40:42", "upload_time_iso_8601": "2020-03-31T18:40:42.861017Z", "url": "https://files.pythonhosted.org/packages/31/84/143791d61540540d8156d3e2a0315f3a85bc2fbe8a32148af3d648d3b80a/rplidar_mqtt_bridge-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c51185bc8c936cf8a6f361fa52054aef", "sha256": "dfbb042505fc8182961977ed27d4d8bf20f5a81339047e2abc96cf75422ded3d"}, "downloads": -1, "filename": "rplidar_mqtt_bridge-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c51185bc8c936cf8a6f361fa52054aef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10765, "upload_time": "2020-03-31T18:40:40", "upload_time_iso_8601": "2020-03-31T18:40:40.887042Z", "url": "https://files.pythonhosted.org/packages/65/71/cb1bb2fdecdae69408a534375ef75432d5291a1fa5f2d368977209ecf169/rplidar_mqtt_bridge-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "564c8f8a3e2b0811849d59bba0d20600", "sha256": "b41af77e9dbb43b202b8a0207441c696490e642e25d90e65a0f2d98c9c7631b3"}, "downloads": -1, "filename": "rplidar_mqtt_bridge-0.0.1.tar.gz", "has_sig": false, "md5_digest": "564c8f8a3e2b0811849d59bba0d20600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5376, "upload_time": "2020-03-31T18:40:42", "upload_time_iso_8601": "2020-03-31T18:40:42.861017Z", "url": "https://files.pythonhosted.org/packages/31/84/143791d61540540d8156d3e2a0315f3a85bc2fbe8a32148af3d648d3b80a/rplidar_mqtt_bridge-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:52 2020"}