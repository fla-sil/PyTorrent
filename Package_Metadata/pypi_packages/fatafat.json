{"info": {"author": "Subhajit Ghosh", "author_email": "i.subhajit.ghosh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Fatafat - publish quickly!\n==========================\n\nFatafat is a minimalistic static blog generator written in Python. It is\nalso an offline blogging tool with **simple** and **quick** publishing\noptions.\n\nWith Fatafat you can ...\n------------------------\n\n-  Write blog articles in Markdown.\n-  Publish an article to a remote host (currently Github) using a single\n   command.\n-  Test changes to blog theme, blog articles in a local *dev* version of\n   your blog.\n-  Focus more on writing!\n\nInstallation\n------------\n\nTo install fatafat, simply:\n\n::\n\n    $ pip install fatafat\n\nPrerequisites\n-------------\n\nGit\n~~~\n\nMake sure that `git <http://git-scm.com/>`__ is installed.\n\nGenerate ssh keys\n~~~~~~~~~~~~~~~~~\n\nCurrently `Github <http://pages.github.com>`__ is the only remote host\nwhich is supported. To publish to Github from command line, you will\nneed to setup your ssh keys. Read details\n`here <https://help.github.com/articles/generating-ssh-keys>`__.\n\nCreate empty Github project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFatafat pushes to the repository *github\\_username*.github.io. Make sure\nthat the empty repository (DO NOT create the readme or the .gitignore\nfiles) is created before you use Fatafat.\n\nWhy the name \"Fatafat\"?\n-----------------------\n\nI say why not! \"Fatafat\" means \"quick\" in Hindi.\n\nFound issues?\n-------------\n\nCurrently, Fatafat is a \"toddler\" project and barely stands! But I have\nhonest plans for it. I am developing it actively and using it for my own\n`blog <http://isubuz.github.io>`__.\n\nIncase you run into issues, please\n`log <https://github.com/isubuz/fatafat/issues>`__ the same.\n\nIf you find the project useful, why not look into the issues yourself\nand send pull requests!\n\nUsage\n-----\n\nCommand Line Interface\n~~~~~~~~~~~~~~~~~~~~~~\n\nWhen installed, ``fatafat`` command is available for use. This command\ncan be used to perform various actions on the blog. Run\n``fatafat --help`` for details. To get help on individual action, run\n``fatafat <action> --help``. Note that the ``fatafat`` command must be\nrun at the root of the directory which contains your blog.\n\nThis `cheatsheet <#cheatsheet>`__ lists all possible actions that can be\nperformed using the ``fatafat`` command.\n\nCreating a new blog\n~~~~~~~~~~~~~~~~~~~\n\nFirst create the empty Github repository *github\\_username*.github.io.\n\nTo create a new blog in ``bubblewrap`` directory:\n\n::\n\n    $ mkdir bubblewrap\n    $ cd bubblewrap\n    $ fatafat start\n\nThe ``start`` option prompts the user for blog configuration details.\nThe following details are requested:\n\n-  blog title - title of your blog\n-  production URL - remote URL of your blog. Eg. http://isubuz.github.io\n-  development URL - local URL of your blog. Eg. http://localhost:8000\n-  github username\n-  disqus sitename\n\nOnce done, the following directories will be created:\n\n::\n\n    bubblewrap\n    |-- contents\n    |-- prod\n    |-- dev\n        \n\nAll articles go into the ``contents`` directory. The directory structure\nfor ``prod`` and ``dev`` is same and stores the production version and\nthe development version of the blog.\n\n::\n\n    |-- config.py           # blog configuration file\n    |-- data                # blog data files\n    |-- site                # static output\n    |   |-- README.md\n    |   |-- articles        # generated HTML files for articles\n    |   |-- assets          # css, js files\n    |-- themes\n    |   |-- simi\n    |   |   |-- assets      # css, js files\n    |   |   |-- templates   # jinja2 templates\n\nThere are few important differences between the ``dev`` and the ``prod``\ndirectory.\n\n-  ``config.py`` in both directories are setup such that the URLs\n   generated in the static output is correct i.e. local URL for ``dev``\n   and remote URL for ``prod``. This helps because you can run\n   ``python -m SimpleHTTPServer`` in ``dev/site`` or ``prod/site`` to\n   see and navigate through the changes you made to your blog\n-  ``site`` directory in ``prod`` is a ``git`` repository.\n\nAdd a new article\n~~~~~~~~~~~~~~~~~\n\nTo add a new article, simply create a new file with ``.md`` extension\nunder ``contents``. Articles belonging to a common theme can be grouped\nin a directory. E.g.\n\n::\n\n    $ cd bubblewrap\n    $ vim contents/loner.md\n    $ vim contents/python/meta_what.md\n    $ vim contents/python/why_should_i_decorate.md\n\nEach article has associated metadata, some required and some optional.\nThe metadata starts from the first line of the document and is separated\nfrom the article content by a blank line.\n\nE.g. ``contents/loner.md`` can look like -\n\n::\n\n    Title: I am a lonely article\n    Summary: My story\n    Date: 27-07-1983\n    Status: draft\n\n    I am lonely, because I am at the root!\n\n``Title`` and ``Date`` are **required**. Currently ``Date`` must be in\n``DD-MM-YYYY`` format. Support for other formats could be added later.\n\n``Summary`` and ``Status`` are optional. If ``Status`` is absent, the\narticle is considered to be published.\n\nPublish article(s)\n~~~~~~~~~~~~~~~~~~\n\nTo publish an article, ``cd`` to the root of the blog directory and run\n``fatafat publish -f <rel_path_to_article>`` in terminal. E.g -\n\n::\n\n    $ cd <path_to_blog>\n    $ fatafat publish -f contents/loner.md\n\nThat's it!\n\nThe above command will update the local development blog only. To update\nthe production blog specify option ``--prod``. To push the changes to\nGithub, specify option ``--sync``. See `cheatsheet <#cheatsheet>`__ for\nmore details.\n\n::\n\n    $ cd <path_to_blog>\n    $ fatafat publish -f contents/loner.md --prod --sync\n\nTo publish more than one article, pass the relative paths of the all the\narticles to the ``fatafat publish -f`` command. E.g -\n\n::\n\n    $ cd <path_to_blog>\n    $ fatafat publish -f contents/loner.md contents/python/meta_what.md\n\nTo publish all articles, simply use ``fatafat publish``. E.g -\n\n::\n\n    $ cd <path_to_blog>\n    $ fatafat publish\n\nRemoving an article\n~~~~~~~~~~~~~~~~~~~\n\nCurrently, removing an article or renaming a markdown file isn't handled\nentirely correctly. The HTML file generated for the deleted/renamed\narticle remains in the ``site`` directory and has to be removed\nmanually.\n\nThis is on the top of my list of TODOs. So it should be addressed soon.\n\nThemes\n------\n\nCurrently Fatafat comes with the default theme\n`simi <http://github.com/isubuz/simi>`__. But you add new themes easily.\n\n-  Create a directory similar to the default theme and put in under the\n   ``themes`` directory of your blog.\n-  Update the ``THEME`` field in ``config.py`` to use the new theme.\n\nEvery theme has two folders, ``assets`` and ``templates``. ``assets``\nstores the javascript and the css files. ``templates`` stores the jinja2\ntemplates used to generate the static output. Currently fatafat looks\nfor ``index.jinja2`` and ``article.jinja2`` under the templates\ndirectory.\n\nThe following variables are available in template ``article.jinja2``:\n\n-  article.title\n-  article.summary\n-  article.content\n-  article.date\n\nThe following variables are available in template ``index.jinja2``:\n\n-  articles - which is a list of articles. Each article has the same\n   attributes as above.\n\nThe following variables are available in all templates:\n\n-  SITENAME - blog title\n-  SITEURL - blog URL\n\nYou might have observed that the template variables names matches to\nthose in Pelican. The goal is to make pelican themes compatible with\nfatafat.\n\nCheatsheet \n-----------\n\nThe ``fatafat`` command must be run at the root of the directory which\nstores the blog files. The following commands can be run in terminal to\nperform various actions on the blog:\n\n::\n\n    # Create a new blog\n    $ fatafat start\n\n    # Publish all articles to dev directory\n    $ fatafat publish\n\n    # Publish a single article to dev directory\n    $ fatafat publish -f contents/article1.md\n\n    # Publish multiple articles to dev directory\n    $ fatafat publish -f contents/article1.md contents/group/article2.md contents/article3.md\n\n    # Publish all articles to prod directory\n    $ fatafat publish --prod\n\n    # Publish all articles to prod directory and sync with remote host\n    $ fatafat publish --prod --sync\n\n    # Publish a single article to prod directory\n    $ fatafat publish -f contents/article1.md --prod\n\n    # Publish a single article to prod directory and sync with remote host\n    $ fatafat publish -f contents/article1.md --prod --sync\n\n    # Publish multiple articles to prod directory\n    $ fatafat publish -f contents/article1.md contents/group/article2.md --prod\n\n    # Publish multiple articles to prod directory and sync with remote host\n    $ fatafat publish -f contents/article1.md contents/group/article2.md --prod --sync\n\nContact / Feedback\n------------------\n\nSend me a message at \"i DOT subhajit DOT ghosh AT gmail DOT com\" with\nany feedback.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/isubuz/fatafat", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "fatafat", "package_url": "https://pypi.org/project/fatafat/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fatafat/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/isubuz/fatafat"}, "release_url": "https://pypi.org/project/fatafat/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "A static blog generator and an offline blogging tool.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fatafat is a minimalistic static blog generator written in Python. It is\nalso an offline blogging tool with <strong>simple</strong> and <strong>quick</strong> publishing\noptions.</p>\n<div id=\"with-fatafat-you-can\">\n<h2>With Fatafat you can \u2026</h2>\n<ul>\n<li>Write blog articles in Markdown.</li>\n<li>Publish an article to a remote host (currently Github) using a single\ncommand.</li>\n<li>Test changes to blog theme, blog articles in a local <em>dev</em> version of\nyour blog.</li>\n<li>Focus more on writing!</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install fatafat, simply:</p>\n<pre>$ pip install fatafat\n</pre>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<div id=\"git\">\n<h3>Git</h3>\n<p>Make sure that <a href=\"http://git-scm.com/\" rel=\"nofollow\">git</a> is installed.</p>\n</div>\n<div id=\"generate-ssh-keys\">\n<h3>Generate ssh keys</h3>\n<p>Currently <a href=\"http://pages.github.com\" rel=\"nofollow\">Github</a> is the only remote host\nwhich is supported. To publish to Github from command line, you will\nneed to setup your ssh keys. Read details\n<a href=\"https://help.github.com/articles/generating-ssh-keys\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"create-empty-github-project\">\n<h3>Create empty Github project</h3>\n<p>Fatafat pushes to the repository <em>github_username</em>.github.io. Make sure\nthat the empty repository (DO NOT create the readme or the .gitignore\nfiles) is created before you use Fatafat.</p>\n</div>\n</div>\n<div id=\"why-the-name-fatafat\">\n<h2>Why the name \u201cFatafat\u201d?</h2>\n<p>I say why not! \u201cFatafat\u201d means \u201cquick\u201d in Hindi.</p>\n</div>\n<div id=\"found-issues\">\n<h2>Found issues?</h2>\n<p>Currently, Fatafat is a \u201ctoddler\u201d project and barely stands! But I have\nhonest plans for it. I am developing it actively and using it for my own\n<a href=\"http://isubuz.github.io\" rel=\"nofollow\">blog</a>.</p>\n<p>Incase you run into issues, please\n<a href=\"https://github.com/isubuz/fatafat/issues\" rel=\"nofollow\">log</a> the same.</p>\n<p>If you find the project useful, why not look into the issues yourself\nand send pull requests!</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"command-line-interface\">\n<h3>Command Line Interface</h3>\n<p>When installed, <tt>fatafat</tt> command is available for use. This command\ncan be used to perform various actions on the blog. Run\n<tt>fatafat <span class=\"pre\">--help</span></tt> for details. To get help on individual action, run\n<tt>fatafat &lt;action&gt; <span class=\"pre\">--help</span></tt>. Note that the <tt>fatafat</tt> command must be\nrun at the root of the directory which contains your blog.</p>\n<p>This <a href=\"#cheatsheet\" rel=\"nofollow\">cheatsheet</a> lists all possible actions that can be\nperformed using the <tt>fatafat</tt> command.</p>\n</div>\n<div id=\"creating-a-new-blog\">\n<h3>Creating a new blog</h3>\n<p>First create the empty Github repository <em>github_username</em>.github.io.</p>\n<p>To create a new blog in <tt>bubblewrap</tt> directory:</p>\n<pre>$ mkdir bubblewrap\n$ cd bubblewrap\n$ fatafat start\n</pre>\n<p>The <tt>start</tt> option prompts the user for blog configuration details.\nThe following details are requested:</p>\n<ul>\n<li>blog title - title of your blog</li>\n<li>production URL - remote URL of your blog. Eg. <a href=\"http://isubuz.github.io\" rel=\"nofollow\">http://isubuz.github.io</a></li>\n<li>development URL - local URL of your blog. Eg. <a href=\"http://localhost:8000\" rel=\"nofollow\">http://localhost:8000</a></li>\n<li>github username</li>\n<li>disqus sitename</li>\n</ul>\n<p>Once done, the following directories will be created:</p>\n<pre>bubblewrap\n|-- contents\n|-- prod\n|-- dev\n</pre>\n<p>All articles go into the <tt>contents</tt> directory. The directory structure\nfor <tt>prod</tt> and <tt>dev</tt> is same and stores the production version and\nthe development version of the blog.</p>\n<pre>|-- config.py           # blog configuration file\n|-- data                # blog data files\n|-- site                # static output\n|   |-- README.md\n|   |-- articles        # generated HTML files for articles\n|   |-- assets          # css, js files\n|-- themes\n|   |-- simi\n|   |   |-- assets      # css, js files\n|   |   |-- templates   # jinja2 templates\n</pre>\n<p>There are few important differences between the <tt>dev</tt> and the <tt>prod</tt>\ndirectory.</p>\n<ul>\n<li><tt>config.py</tt> in both directories are setup such that the URLs\ngenerated in the static output is correct i.e. local URL for <tt>dev</tt>\nand remote URL for <tt>prod</tt>. This helps because you can run\n<tt>python <span class=\"pre\">-m</span> SimpleHTTPServer</tt> in <tt>dev/site</tt> or <tt>prod/site</tt> to\nsee and navigate through the changes you made to your blog</li>\n<li><tt>site</tt> directory in <tt>prod</tt> is a <tt>git</tt> repository.</li>\n</ul>\n</div>\n<div id=\"add-a-new-article\">\n<h3>Add a new article</h3>\n<p>To add a new article, simply create a new file with <tt>.md</tt> extension\nunder <tt>contents</tt>. Articles belonging to a common theme can be grouped\nin a directory. E.g.</p>\n<pre>$ cd bubblewrap\n$ vim contents/loner.md\n$ vim contents/python/meta_what.md\n$ vim contents/python/why_should_i_decorate.md\n</pre>\n<p>Each article has associated metadata, some required and some optional.\nThe metadata starts from the first line of the document and is separated\nfrom the article content by a blank line.</p>\n<p>E.g. <tt>contents/loner.md</tt> can look like -</p>\n<pre>Title: I am a lonely article\nSummary: My story\nDate: 27-07-1983\nStatus: draft\n\nI am lonely, because I am at the root!\n</pre>\n<p><tt>Title</tt> and <tt>Date</tt> are <strong>required</strong>. Currently <tt>Date</tt> must be in\n<tt><span class=\"pre\">DD-MM-YYYY</span></tt> format. Support for other formats could be added later.</p>\n<p><tt>Summary</tt> and <tt>Status</tt> are optional. If <tt>Status</tt> is absent, the\narticle is considered to be published.</p>\n</div>\n<div id=\"publish-article-s\">\n<h3>Publish article(s)</h3>\n<p>To publish an article, <tt>cd</tt> to the root of the blog directory and run\n<tt>fatafat publish <span class=\"pre\">-f</span> &lt;rel_path_to_article&gt;</tt> in terminal. E.g -</p>\n<pre>$ cd &lt;path_to_blog&gt;\n$ fatafat publish -f contents/loner.md\n</pre>\n<p>That\u2019s it!</p>\n<p>The above command will update the local development blog only. To update\nthe production blog specify option <tt><span class=\"pre\">--prod</span></tt>. To push the changes to\nGithub, specify option <tt><span class=\"pre\">--sync</span></tt>. See <a href=\"#cheatsheet\" rel=\"nofollow\">cheatsheet</a> for\nmore details.</p>\n<pre>$ cd &lt;path_to_blog&gt;\n$ fatafat publish -f contents/loner.md --prod --sync\n</pre>\n<p>To publish more than one article, pass the relative paths of the all the\narticles to the <tt>fatafat publish <span class=\"pre\">-f</span></tt> command. E.g -</p>\n<pre>$ cd &lt;path_to_blog&gt;\n$ fatafat publish -f contents/loner.md contents/python/meta_what.md\n</pre>\n<p>To publish all articles, simply use <tt>fatafat publish</tt>. E.g -</p>\n<pre>$ cd &lt;path_to_blog&gt;\n$ fatafat publish\n</pre>\n</div>\n<div id=\"removing-an-article\">\n<h3>Removing an article</h3>\n<p>Currently, removing an article or renaming a markdown file isn\u2019t handled\nentirely correctly. The HTML file generated for the deleted/renamed\narticle remains in the <tt>site</tt> directory and has to be removed\nmanually.</p>\n<p>This is on the top of my list of TODOs. So it should be addressed soon.</p>\n</div>\n</div>\n<div id=\"themes\">\n<h2>Themes</h2>\n<p>Currently Fatafat comes with the default theme\n<a href=\"http://github.com/isubuz/simi\" rel=\"nofollow\">simi</a>. But you add new themes easily.</p>\n<ul>\n<li>Create a directory similar to the default theme and put in under the\n<tt>themes</tt> directory of your blog.</li>\n<li>Update the <tt>THEME</tt> field in <tt>config.py</tt> to use the new theme.</li>\n</ul>\n<p>Every theme has two folders, <tt>assets</tt> and <tt>templates</tt>. <tt>assets</tt>\nstores the javascript and the css files. <tt>templates</tt> stores the jinja2\ntemplates used to generate the static output. Currently fatafat looks\nfor <tt>index.jinja2</tt> and <tt>article.jinja2</tt> under the templates\ndirectory.</p>\n<p>The following variables are available in template <tt>article.jinja2</tt>:</p>\n<ul>\n<li>article.title</li>\n<li>article.summary</li>\n<li>article.content</li>\n<li>article.date</li>\n</ul>\n<p>The following variables are available in template <tt>index.jinja2</tt>:</p>\n<ul>\n<li>articles - which is a list of articles. Each article has the same\nattributes as above.</li>\n</ul>\n<p>The following variables are available in all templates:</p>\n<ul>\n<li>SITENAME - blog title</li>\n<li>SITEURL - blog URL</li>\n</ul>\n<p>You might have observed that the template variables names matches to\nthose in Pelican. The goal is to make pelican themes compatible with\nfatafat.</p>\n</div>\n<div id=\"cheatsheet\">\n<h2>Cheatsheet</h2>\n<p>The <tt>fatafat</tt> command must be run at the root of the directory which\nstores the blog files. The following commands can be run in terminal to\nperform various actions on the blog:</p>\n<pre># Create a new blog\n$ fatafat start\n\n# Publish all articles to dev directory\n$ fatafat publish\n\n# Publish a single article to dev directory\n$ fatafat publish -f contents/article1.md\n\n# Publish multiple articles to dev directory\n$ fatafat publish -f contents/article1.md contents/group/article2.md contents/article3.md\n\n# Publish all articles to prod directory\n$ fatafat publish --prod\n\n# Publish all articles to prod directory and sync with remote host\n$ fatafat publish --prod --sync\n\n# Publish a single article to prod directory\n$ fatafat publish -f contents/article1.md --prod\n\n# Publish a single article to prod directory and sync with remote host\n$ fatafat publish -f contents/article1.md --prod --sync\n\n# Publish multiple articles to prod directory\n$ fatafat publish -f contents/article1.md contents/group/article2.md --prod\n\n# Publish multiple articles to prod directory and sync with remote host\n$ fatafat publish -f contents/article1.md contents/group/article2.md --prod --sync\n</pre>\n</div>\n<div id=\"contact-feedback\">\n<h2>Contact / Feedback</h2>\n<p>Send me a message at \u201ci DOT subhajit DOT ghosh AT gmail DOT com\u201d with\nany feedback.</p>\n</div>\n\n          </div>"}, "last_serial": 1089535, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1cf2522c4d6099d60cf11d8bc921ae70", "sha256": "d29cd1a73c783b026a7d454c93fe075f242c3ffc392482884893021f70d6f608"}, "downloads": -1, "filename": "fatafat-0.0.1-py2.7.egg", "has_sig": false, "md5_digest": "1cf2522c4d6099d60cf11d8bc921ae70", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 22126, "upload_time": "2014-05-09T11:45:39", "upload_time_iso_8601": "2014-05-09T11:45:39.898274Z", "url": "https://files.pythonhosted.org/packages/f3/53/5e10a17e60b4787c3f2403e99fcb808cf5085f8fe8f9d443cafbd6894f7e/fatafat-0.0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bca2a887a656bb9e0f543bf4be978e5f", "sha256": "e30d8f124be4ba9036192a6e122deb1b2c7530082fb1252d541dd93b88f289c5"}, "downloads": -1, "filename": "fatafat-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bca2a887a656bb9e0f543bf4be978e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13183, "upload_time": "2014-05-09T11:46:35", "upload_time_iso_8601": "2014-05-09T11:46:35.487757Z", "url": "https://files.pythonhosted.org/packages/54/82/b3ccfb23e4e8e6571984c34e55677683efc9b41c04ed400fdbd9bd95f297/fatafat-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "fdf320f1fe025b772f939a68ca443826", "sha256": "362b83759052532e4fec9ca70769866f90aaa10089a9ecabc65a661963609223"}, "downloads": -1, "filename": "fatafat-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fdf320f1fe025b772f939a68ca443826", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 20429, "upload_time": "2014-05-12T14:11:58", "upload_time_iso_8601": "2014-05-12T14:11:58.404530Z", "url": "https://files.pythonhosted.org/packages/3d/c0/f95410989b781a38eb1fa3377a165f23d7743929236d2f14ae5056e09711/fatafat-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff88de95a1083c2d2e01757a85c2067e", "sha256": "f51d0a081a74f3e67c15e8889ccdb3589e31dae2fd99317ba6eb4ecf0554a0c4"}, "downloads": -1, "filename": "fatafat-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ff88de95a1083c2d2e01757a85c2067e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14135, "upload_time": "2014-05-12T14:11:45", "upload_time_iso_8601": "2014-05-12T14:11:45.985429Z", "url": "https://files.pythonhosted.org/packages/37/8e/45298ed1d6306b88346dcafb732a4fc68c0ea7b7f2b0735f49fb27a67770/fatafat-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fdf320f1fe025b772f939a68ca443826", "sha256": "362b83759052532e4fec9ca70769866f90aaa10089a9ecabc65a661963609223"}, "downloads": -1, "filename": "fatafat-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fdf320f1fe025b772f939a68ca443826", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 20429, "upload_time": "2014-05-12T14:11:58", "upload_time_iso_8601": "2014-05-12T14:11:58.404530Z", "url": "https://files.pythonhosted.org/packages/3d/c0/f95410989b781a38eb1fa3377a165f23d7743929236d2f14ae5056e09711/fatafat-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff88de95a1083c2d2e01757a85c2067e", "sha256": "f51d0a081a74f3e67c15e8889ccdb3589e31dae2fd99317ba6eb4ecf0554a0c4"}, "downloads": -1, "filename": "fatafat-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ff88de95a1083c2d2e01757a85c2067e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14135, "upload_time": "2014-05-12T14:11:45", "upload_time_iso_8601": "2014-05-12T14:11:45.985429Z", "url": "https://files.pythonhosted.org/packages/37/8e/45298ed1d6306b88346dcafb732a4fc68c0ea7b7f2b0735f49fb27a67770/fatafat-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:21 2020"}