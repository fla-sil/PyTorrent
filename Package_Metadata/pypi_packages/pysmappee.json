{"info": {"author": "Smappee", "author_email": "support@smappee.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Official Smappee Python Library\n===============================\n\nPython Library for the Smappee dev API (v3) and MQTT interface.\n\nVersion\n-------\n\n0.0.1\n\nInstallation\n------------\nThe recommended way to install is via [pip](https://pypi.org/) (comming soon)\n\n    $ pip3 install pysmappee\n\nGetting Started\n---------------\nBefore we can use PySmappee, we need to be authenticated to the Smappee cloud.\nThe authentication mechanism is based on oauth2 specification,\nfor more information on the oauth2 spec see [http://oauth.net/documentation](http://oauth.net/documentation).\nWe need to register our application with Smappee by contacting [info@smappee.com](mailto:info@smappee.com).\n\nWhen we registered our application we got a `client_id` and `client_secret`.\nTogether with our Smappee `username` and `password` we can create an instance of the Smappee class which automatically creates and API instance.\n\n```python\nfrom pysmappee import Smappee\nsmappee = Smappee(username, password, client_id, client_secret)\n```\n\nThe `load_configuration` method loads all shared service locations our user has access to.\nAll details are iteratively saved into the `service_locations` property.\n\n```python\nsmappee.load_configuration()\nsmappee.service_locations  # dictionary holding all shared service location instances\n```\n\nExamples / Quickstart\n--------------------\n\nStructure\n---------\n### Service location\nA service location instance holds\n* Service location id\n* Service location uuid\n* Service location name\n* Device serial number\n* Phase type\n* Has solar production boolean\n* Firmware version\n* Latitude and longitude coordinates\n* Timezone\n* Presence boolean\n* Appliances\n* Actuators (Smappee Comfort Plug, Smappee Switch, Smappee Output Modules)\n* Sensors (Smappee Gas and Water)\n* Measurements (CT details)\n* Realtime values\n* Some predefined aggregated values\n\n### Appliances\nAn appliance instance holds the appliance id, name, type and source type (NILM or CT appliance)\n```python\nappl = smappee.service_locations.get(12345).appliances  # where 12345 should be the correct servie location id\nfor appliance_id, appliance in appl.items():\n    appliance.id\n    appliance.name\n    appliance.type\n    appliance.source_type\n```\n\n### Actuators\nAn actuator instance holds the actuator id, name, type, serialnumber, current state, state options and todays energy consumption\n```python\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nfor actuator_id, actuator in sl.actuators.items():\n    actuator.id\n    actuator.name\n    actuator.type\n    actuator.serialnumber\n    actuator.state\n    actuator.state_options\n    actuator.consumption_today\n```\n\nChanging the actuator state can be done with the `set_actuator_state` in the `service_location` class.\n```python\n# Example: turn OFF actuator with id 1 from service location 12345\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nsl.set_actuator_state(id=1, state='OFF')\n```\n\n### Sensors\nA sensor instance holds the sensor id, name, channels, temperature, humidity and battery level.\n```python\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nfor sensor_id, sensor in sl.sensors.items():\n    sensor.id\n    sensor.name\n    sensor.channels\n    sensor.temperature\n    sensor.humidity\n    sensor.battery\n```\n\n### Measurements\nA measurement reflects a CT load and holds information like measurement id, name, (sub)type, channels and live values\n(active, reactive and current total).\n```python\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nfor measurement_id, measurement in sl.measurements.items():\n    measurement.id\n    measurement.name\n    measurement.type\n    measurement.subcircuit_type\n    measurement.channels\n    measurement.active_total\n    measurement.reactive_total\n    measurement.current_total\n```\n\n### Realtime values\nRealtime values are collected through central and local MQTT connections and kept in the `service_location` class.\n```python\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nsl.total_power\nsl.total_reactive_power\nsl.solar_power\nsl.alwayson\nsl.phase_voltages  # lists\nsl.phase_voltages_h3\nsl.phase_voltages_h5\nsl.line_voltages\nsl.line_voltages_h3\nsl.line_voltages_h5\n```\n\n### Aggregated values\nA predefined set of aggregated energy values are being saved in the `service_location` class. Reloading these values can\nbe done by using the `update_trends_and_appliance_states` method\n```python\nsl = smappee.service_locations.get(12345) # where 12345 should be the correct service location id\nsl.update_trends_and_appliance_states()\naggr = sl.aggregated_values\n\naggr.get('power_today')\naggr.get('power_current_hour')\naggr.get('power_last_5_minutes')\naggr.get('solar_today')\naggr.get('solar_current_hour')\naggr.get('solar_last_5_minutes')\naggr.get('alwayson_today')\naggr.get('alwayson_current_hour')\naggr.get('alwayson_last_5_minutes')\n```\n\nChangelog\n---------\n0.0.1\n* Initial commit\n\nSupport\n-------\nIf you find a bug, have any questions about how to use PySmappee or have suggestions for improvements then feel free to \nfile an issue on the GitHub project page [https://github.com/smappee/pysmappee](https://github.com/smappee/pysmappee).\n\nLicense\n-------\n(MIT License)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smappee/pysmappee", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pysmappee", "package_url": "https://pypi.org/project/pysmappee/", "platform": "", "project_url": "https://pypi.org/project/pysmappee/", "project_urls": {"Homepage": "https://github.com/smappee/pysmappee"}, "release_url": "https://pypi.org/project/pysmappee/0.0.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Offical Smappee dev API and MQTT python wrapper", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Official Smappee Python Library</h1>\n<p>Python Library for the Smappee dev API (v3) and MQTT interface.</p>\n<h2>Version</h2>\n<p>0.0.1</p>\n<h2>Installation</h2>\n<p>The recommended way to install is via <a href=\"https://pypi.org/\" rel=\"nofollow\">pip</a> (comming soon)</p>\n<pre><code>$ pip3 install pysmappee\n</code></pre>\n<h2>Getting Started</h2>\n<p>Before we can use PySmappee, we need to be authenticated to the Smappee cloud.\nThe authentication mechanism is based on oauth2 specification,\nfor more information on the oauth2 spec see <a href=\"http://oauth.net/documentation\" rel=\"nofollow\">http://oauth.net/documentation</a>.\nWe need to register our application with Smappee by contacting <a href=\"mailto:info@smappee.com\">info@smappee.com</a>.</p>\n<p>When we registered our application we got a <code>client_id</code> and <code>client_secret</code>.\nTogether with our Smappee <code>username</code> and <code>password</code> we can create an instance of the Smappee class which automatically creates and API instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pysmappee</span> <span class=\"kn\">import</span> <span class=\"n\">Smappee</span>\n<span class=\"n\">smappee</span> <span class=\"o\">=</span> <span class=\"n\">Smappee</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">client_id</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>load_configuration</code> method loads all shared service locations our user has access to.\nAll details are iteratively saved into the <code>service_locations</code> property.</p>\n<pre><span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">load_configuration</span><span class=\"p\">()</span>\n<span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span>  <span class=\"c1\"># dictionary holding all shared service location instances</span>\n</pre>\n<h2>Examples / Quickstart</h2>\n<h2>Structure</h2>\n<h3>Service location</h3>\n<p>A service location instance holds</p>\n<ul>\n<li>Service location id</li>\n<li>Service location uuid</li>\n<li>Service location name</li>\n<li>Device serial number</li>\n<li>Phase type</li>\n<li>Has solar production boolean</li>\n<li>Firmware version</li>\n<li>Latitude and longitude coordinates</li>\n<li>Timezone</li>\n<li>Presence boolean</li>\n<li>Appliances</li>\n<li>Actuators (Smappee Comfort Plug, Smappee Switch, Smappee Output Modules)</li>\n<li>Sensors (Smappee Gas and Water)</li>\n<li>Measurements (CT details)</li>\n<li>Realtime values</li>\n<li>Some predefined aggregated values</li>\n</ul>\n<h3>Appliances</h3>\n<p>An appliance instance holds the appliance id, name, type and source type (NILM or CT appliance)</p>\n<pre><span class=\"n\">appl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">appliances</span>  <span class=\"c1\"># where 12345 should be the correct servie location id</span>\n<span class=\"k\">for</span> <span class=\"n\">appliance_id</span><span class=\"p\">,</span> <span class=\"n\">appliance</span> <span class=\"ow\">in</span> <span class=\"n\">appl</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">appliance</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"n\">appliance</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"n\">appliance</span><span class=\"o\">.</span><span class=\"n\">type</span>\n    <span class=\"n\">appliance</span><span class=\"o\">.</span><span class=\"n\">source_type</span>\n</pre>\n<h3>Actuators</h3>\n<p>An actuator instance holds the actuator id, name, type, serialnumber, current state, state options and todays energy consumption</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"k\">for</span> <span class=\"n\">actuator_id</span><span class=\"p\">,</span> <span class=\"n\">actuator</span> <span class=\"ow\">in</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">actuators</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">type</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">serialnumber</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">state</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">state_options</span>\n    <span class=\"n\">actuator</span><span class=\"o\">.</span><span class=\"n\">consumption_today</span>\n</pre>\n<p>Changing the actuator state can be done with the <code>set_actuator_state</code> in the <code>service_location</code> class.</p>\n<pre><span class=\"c1\"># Example: turn OFF actuator with id 1 from service location 12345</span>\n<span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">set_actuator_state</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">'OFF'</span><span class=\"p\">)</span>\n</pre>\n<h3>Sensors</h3>\n<p>A sensor instance holds the sensor id, name, channels, temperature, humidity and battery level.</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"k\">for</span> <span class=\"n\">sensor_id</span><span class=\"p\">,</span> <span class=\"n\">sensor</span> <span class=\"ow\">in</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">sensors</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">channels</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">temperature</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">humidity</span>\n    <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">battery</span>\n</pre>\n<h3>Measurements</h3>\n<p>A measurement reflects a CT load and holds information like measurement id, name, (sub)type, channels and live values\n(active, reactive and current total).</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"k\">for</span> <span class=\"n\">measurement_id</span><span class=\"p\">,</span> <span class=\"n\">measurement</span> <span class=\"ow\">in</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">measurements</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">id</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">type</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">subcircuit_type</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">channels</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">active_total</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">reactive_total</span>\n    <span class=\"n\">measurement</span><span class=\"o\">.</span><span class=\"n\">current_total</span>\n</pre>\n<h3>Realtime values</h3>\n<p>Realtime values are collected through central and local MQTT connections and kept in the <code>service_location</code> class.</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">total_power</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">total_reactive_power</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">solar_power</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">alwayson</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">phase_voltages</span>  <span class=\"c1\"># lists</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">phase_voltages_h3</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">phase_voltages_h5</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">line_voltages</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">line_voltages_h3</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">line_voltages_h5</span>\n</pre>\n<h3>Aggregated values</h3>\n<p>A predefined set of aggregated energy values are being saved in the <code>service_location</code> class. Reloading these values can\nbe done by using the <code>update_trends_and_appliance_states</code> method</p>\n<pre><span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">smappee</span><span class=\"o\">.</span><span class=\"n\">service_locations</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"c1\"># where 12345 should be the correct service location id</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">update_trends_and_appliance_states</span><span class=\"p\">()</span>\n<span class=\"n\">aggr</span> <span class=\"o\">=</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">aggregated_values</span>\n\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'power_today'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'power_current_hour'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'power_last_5_minutes'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'solar_today'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'solar_current_hour'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'solar_last_5_minutes'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alwayson_today'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alwayson_current_hour'</span><span class=\"p\">)</span>\n<span class=\"n\">aggr</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'alwayson_last_5_minutes'</span><span class=\"p\">)</span>\n</pre>\n<h2>Changelog</h2>\n<p>0.0.1</p>\n<ul>\n<li>Initial commit</li>\n</ul>\n<h2>Support</h2>\n<p>If you find a bug, have any questions about how to use PySmappee or have suggestions for improvements then feel free to\nfile an issue on the GitHub project page <a href=\"https://github.com/smappee/pysmappee\" rel=\"nofollow\">https://github.com/smappee/pysmappee</a>.</p>\n<h2>License</h2>\n<p>(MIT License)</p>\n\n          </div>"}, "last_serial": 6968043, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8b5150761b81c849bade3eb3c1c22b05", "sha256": "66c5f39a4cacdbed20ec7a0e4b27f1094f5fa6898ecd85907ba022cf05dad850"}, "downloads": -1, "filename": "pysmappee-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8b5150761b81c849bade3eb3c1c22b05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16121, "upload_time": "2020-04-01T13:45:18", "upload_time_iso_8601": "2020-04-01T13:45:18.899576Z", "url": "https://files.pythonhosted.org/packages/41/18/61bcc6be3ea6bf331ab15ddb1fc6a29c7d0a1925e74f74089d68802555ed/pysmappee-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea4581f530a95b567df601feb9386ecf", "sha256": "ffaf9c6afc472bf4ae70b6d0498ce7e948d710cedea2fc0cdc13c853a8fb9e87"}, "downloads": -1, "filename": "pysmappee-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ea4581f530a95b567df601feb9386ecf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 12477, "upload_time": "2020-04-01T13:45:21", "upload_time_iso_8601": "2020-04-01T13:45:21.064779Z", "url": "https://files.pythonhosted.org/packages/a4/00/95d3ec3a3576bb4a0f8da037405dc2bf05194ea0c9c6f8ee53d74306d0a2/pysmappee-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "04b393aa92cedf0feda435ceee38d505", "sha256": "25d2254edc9bd7a4799131631402c147d2d7d7c1096a2391eb095eec84ab41fc"}, "downloads": -1, "filename": "pysmappee-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "04b393aa92cedf0feda435ceee38d505", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16167, "upload_time": "2020-04-07T09:44:39", "upload_time_iso_8601": "2020-04-07T09:44:39.368530Z", "url": "https://files.pythonhosted.org/packages/61/3c/10323e9b5a850637ba3b4f2a4f6866a8d85c4751804dc45aa60648074227/pysmappee-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e22c6651276742284983d2d709253aa", "sha256": "aef3f5815625f9eb7dd4f2b8fd89b9503652c78fcc180ee5786d277417cdd0b7"}, "downloads": -1, "filename": "pysmappee-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4e22c6651276742284983d2d709253aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14239, "upload_time": "2020-04-07T09:44:40", "upload_time_iso_8601": "2020-04-07T09:44:40.770295Z", "url": "https://files.pythonhosted.org/packages/b0/89/650d8ea35e3df2614d0d36880219db8c941eb7461383dfa2402878e5d389/pysmappee-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04b393aa92cedf0feda435ceee38d505", "sha256": "25d2254edc9bd7a4799131631402c147d2d7d7c1096a2391eb095eec84ab41fc"}, "downloads": -1, "filename": "pysmappee-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "04b393aa92cedf0feda435ceee38d505", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16167, "upload_time": "2020-04-07T09:44:39", "upload_time_iso_8601": "2020-04-07T09:44:39.368530Z", "url": "https://files.pythonhosted.org/packages/61/3c/10323e9b5a850637ba3b4f2a4f6866a8d85c4751804dc45aa60648074227/pysmappee-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e22c6651276742284983d2d709253aa", "sha256": "aef3f5815625f9eb7dd4f2b8fd89b9503652c78fcc180ee5786d277417cdd0b7"}, "downloads": -1, "filename": "pysmappee-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4e22c6651276742284983d2d709253aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14239, "upload_time": "2020-04-07T09:44:40", "upload_time_iso_8601": "2020-04-07T09:44:40.770295Z", "url": "https://files.pythonhosted.org/packages/b0/89/650d8ea35e3df2614d0d36880219db8c941eb7461383dfa2402878e5d389/pysmappee-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:35 2020"}