{"info": {"author": "Dr Peter J Bleackley", "author_email": "peter.bleackley@playfultechnology.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 1.1 (MPL 1.1)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n==================================\nPython Hidden Markov Model Library\n==================================\n\nThis library is a pure Python implementation of Hidden\nMarkov Models (HMMs). The project structure is quite\nsimple::\n\nHelp on module Markov:\n\nNAME\n    Markov - Library to implement hidden Markov Models\n\nFILE\n    Markov.py\n\nCLASSES\n     __builtin__.object\n         BayesianModel\n             HMM\n         Distribution\n             PoissonDistribution\n         Probability\n\nclass BayesianModel(__builtin__.object)\n |  Represents a Bayesian probability model\n |  \n |  Methods defined here:\n |  \n |  MaximumLikelihoodOutcome(self, PriorProbs=None)\n |      Returns the maximum likelihood outcome given PriorProbs\n |  \n |  MaximumLikelihoodState(self, Observations=None)\n |      Returns the maximum likelihood of the internal state. If Observations\n |      is None, defaults to the maximum likelihood of the Prior\n |  \n |  Outcomes(self)\n |      Returns an iterator over the possible outcomes\n |  \n |  PriorProbs(self, Observations, PriorDist=None)\n |      Returns a Distribution representing the probabilities of the prior\n |      states, given a probability Distribution of Observations\n |  \n |  States(self)\n |      Returns an iterator over the possible states\n |  \n |  __call__(self, PriorProbs=None)\n |      Returns a Distribution representing the probabilities of the outcomes\n |      given a particular distribution of the priors, which defaults to\n |      self.Prior\n |  \n |  __iadd__(self, Model2)\n |      Updates the BayesianModel with the data in another BayesianModel\n |  \n |  __init__(self, Prior, Conditionals)\n |      Prior is a Distribution. Conditionals is a dictionary mapping\n |      each state in Prior to a Distribution\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\nclass Distribution(__builtin__.object)\n |  Represents a probability distribution over a set of categories\n |  \n |  Methods defined here:\n |  \n |  MaximumLikelihoodState(self)\n |      Returns the state with the greatest likelihood\n |  \n |  Sample(self)\n |      Picks a random sample from the distribution\n |  \n |  States(self)\n |      Yields the Distribution's states\n |  \n |  Update(self, categories)\n |      Updates each category in the probability distiribution, according to\n |      a dictionary of numerator and denominator values\n |  \n |  __call__(self, item)\n |      Gives the probability of item\n |  \n |  __iadd__(self, Dist2)\n |      Updates the Distribution given another Distribution with the same states\n |  \n |  __init__(self, categories, k=0)\n |      The distribution may be initialised from a list of categories or a\n |      dictionary of category frequencies. In the latter case, Laplacian\n |      smoothing may be used\n |  \n |  __mul__(self, scalar)\n |      Returns the probability of each item, multiplied by a scalar\n |  \n |  copy(self)\n |      Returns a copy of the Distribution\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\nclass HMM(BayesianModel)\n |  Represents a Hidden Markov Model\n |  \n |  Method resolution order:\n |      HMM\n |      BayesianModel\n |      __builtin__.object\n |  \n |  Methods defined here:\n |  \n |  Analyse(self, Sequence, MaximumLikelihood=False)\n |      Yields the an estimate of the internal states that generated a Sequence\n |      of observed values, either as the Maximum Likelihood state\n |      (Maximumlikelihood=True) or as a Distribution (MaximumLikelihood=False)\n |  \n |  MaximumLikelihoodState(self, Observations=None)\n |      Returns the maximum likelihood of the internal state. If Observations\n |      is None, defaults to the maximum likelihood of the the Current state, or\n |      the Prior if self.Current is None\n |  \n |  Outcomes(self)\n |  \n |  Predict(self)\n |      Returns a Distribution representing the probabilities of the next\n |      state given the current state\n |  \n |  PriorProbs(self, Observations)\n |      Returns a Distribution the prior probabilities of the HMM's states\n |      given a Distribution of Observations\n |  \n |  Train(self, Sequence)\n |      Trains the HMM from a sequence of observations\n |  \n |  Update(self, Observations)\n |      Updates the Prior probabilities, TransitionProbs\n |      and Conditionals given Observations\n |  \n |  __call__(self, PriorProbs=None)\n |      Returns a Distribution of outcomes given PriorProbs, which defaults\n |      to self.Current if it is set, or self.Prior otherwise\n |  \n |  __init__(self, states, outcomes)\n |      states is a list or dictionary of states, outcomes is a dictionary\n |      mapping each state in states to a Distribution of the output states\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from BayesianModel:\n |  \n |  MaximumLikelihoodOutcome(self, PriorProbs=None)\n |      Returns the maximum likelihood outcome given PriorProbs\n |  \n |  States(self)\n |      Returns an iterator over the possible states\n |  \n |  __iadd__(self, Model2)\n |      Updates the BayesianModel with the data in another BayesianModel\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from BayesianModel:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\nclass PoissonDistribution(Distribution)\n |  Represents a Poisson distribution\n |  \n |  Method resolution order:\n |      PoissonDistribution\n |      Distribution\n |      __builtin__.object\n |  \n |  Methods defined here:\n |  \n |  MaximumLikelihoodState(self)\n |  \n |  Mean(self)\n |      Returns the Mean of the PoissonDistribution\n |  \n |  Sample(self)\n |      Returns a random sample from the Poisson distribution\n |  \n |  States(self, limit=1e-07)\n |      Yields the PoissonDistribution's states, up to a cumulative\n |      probability of 1-limit\n |  \n |  Update(self, N, p=1.0)\n |      Updates the distribution, given a value N that has a probability of P\n |      of being drawn from this distribution\n |  \n |  __call__(self, N)\n |      Returns the probability of N\n |  \n |  __init__(self, mean)\n |      Initialises the distribution with a given mean\n |  \n |  copy(self)\n |      Returns a copy of the PoissonDistribution\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from Distribution:\n |  \n |  __iadd__(self, Dist2)\n |      Updates the Distribution given another Distribution with the same states\n |  \n |  __mul__(self, scalar)\n |      Returns the probability of each item, multiplied by a scalar\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from Distribution:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\nclass Probability(__builtin__.object)\n |  Represents a probability as a callable object\n |  \n |  Methods defined here:\n |  \n |  Update(self, deltaN, deltaD)\n |      Updates the probability during Bayesian learning\n |  \n |  __call__(self)\n |      Returns the value of the probability\n |  \n |  __iadd__(self, Prob2)\n |      Updates the probability given another Probability object\n |  \n |  __init__(self, n, d)\n |      Initialises the probability from a numerator and a denominator\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://drive.google.com/#folders/0B68FS-e9xvMYYlhaNnluLXpFRlE", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://sourceforge.net/projects/python-hidden-markov/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Markov", "package_url": "https://pypi.org/project/Markov/", "platform": "", "project_url": "https://pypi.org/project/Markov/", "project_urls": {"Download": "https://drive.google.com/#folders/0B68FS-e9xvMYYlhaNnluLXpFRlE", "Homepage": "https://sourceforge.net/projects/python-hidden-markov/"}, "release_url": "https://pypi.org/project/Markov/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Python library for Hidden Markov Models", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>==================================<br>Python Hidden Markov Model Library<br>==================================<br><br>This library is a pure Python implementation of Hidden<br>Markov Models (HMMs). The project structure is quite<br>simple::<br><br>Help on module Markov:<br><br>NAME<br>    Markov - Library to implement hidden Markov Models<br><br>FILE<br>    Markov.py<br><br>CLASSES<br>     __builtin__.object<br>         BayesianModel<br>             HMM<br>         Distribution<br>             PoissonDistribution<br>         Probability<br><br>class BayesianModel(__builtin__.object)<br> |  Represents a Bayesian probability model<br> |  <br> |  Methods defined here:<br> |  <br> |  MaximumLikelihoodOutcome(self, PriorProbs=None)<br> |      Returns the maximum likelihood outcome given PriorProbs<br> |  <br> |  MaximumLikelihoodState(self, Observations=None)<br> |      Returns the maximum likelihood of the internal state. If Observations<br> |      is None, defaults to the maximum likelihood of the Prior<br> |  <br> |  Outcomes(self)<br> |      Returns an iterator over the possible outcomes<br> |  <br> |  PriorProbs(self, Observations, PriorDist=None)<br> |      Returns a Distribution representing the probabilities of the prior<br> |      states, given a probability Distribution of Observations<br> |  <br> |  States(self)<br> |      Returns an iterator over the possible states<br> |  <br> |  __call__(self, PriorProbs=None)<br> |      Returns a Distribution representing the probabilities of the outcomes<br> |      given a particular distribution of the priors, which defaults to<br> |      self.Prior<br> |  <br> |  __iadd__(self, Model2)<br> |      Updates the BayesianModel with the data in another BayesianModel<br> |  <br> |  __init__(self, Prior, Conditionals)<br> |      Prior is a Distribution. Conditionals is a dictionary mapping<br> |      each state in Prior to a Distribution<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors defined here:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br><br>class Distribution(__builtin__.object)<br> |  Represents a probability distribution over a set of categories<br> |  <br> |  Methods defined here:<br> |  <br> |  MaximumLikelihoodState(self)<br> |      Returns the state with the greatest likelihood<br> |  <br> |  Sample(self)<br> |      Picks a random sample from the distribution<br> |  <br> |  States(self)<br> |      Yields the Distribution's states<br> |  <br> |  Update(self, categories)<br> |      Updates each category in the probability distiribution, according to<br> |      a dictionary of numerator and denominator values<br> |  <br> |  __call__(self, item)<br> |      Gives the probability of item<br> |  <br> |  __iadd__(self, Dist2)<br> |      Updates the Distribution given another Distribution with the same states<br> |  <br> |  __init__(self, categories, k=0)<br> |      The distribution may be initialised from a list of categories or a<br> |      dictionary of category frequencies. In the latter case, Laplacian<br> |      smoothing may be used<br> |  <br> |  __mul__(self, scalar)<br> |      Returns the probability of each item, multiplied by a scalar<br> |  <br> |  copy(self)<br> |      Returns a copy of the Distribution<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors defined here:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br><br>class HMM(BayesianModel)<br> |  Represents a Hidden Markov Model<br> |  <br> |  Method resolution order:<br> |      HMM<br> |      BayesianModel<br> |      __builtin__.object<br> |  <br> |  Methods defined here:<br> |  <br> |  Analyse(self, Sequence, MaximumLikelihood=False)<br> |      Yields the an estimate of the internal states that generated a Sequence<br> |      of observed values, either as the Maximum Likelihood state<br> |      (Maximumlikelihood=True) or as a Distribution (MaximumLikelihood=False)<br> |  <br> |  MaximumLikelihoodState(self, Observations=None)<br> |      Returns the maximum likelihood of the internal state. If Observations<br> |      is None, defaults to the maximum likelihood of the the Current state, or<br> |      the Prior if self.Current is None<br> |  <br> |  Outcomes(self)<br> |  <br> |  Predict(self)<br> |      Returns a Distribution representing the probabilities of the next<br> |      state given the current state<br> |  <br> |  PriorProbs(self, Observations)<br> |      Returns a Distribution the prior probabilities of the HMM's states<br> |      given a Distribution of Observations<br> |  <br> |  Train(self, Sequence)<br> |      Trains the HMM from a sequence of observations<br> |  <br> |  Update(self, Observations)<br> |      Updates the Prior probabilities, TransitionProbs<br> |      and Conditionals given Observations<br> |  <br> |  __call__(self, PriorProbs=None)<br> |      Returns a Distribution of outcomes given PriorProbs, which defaults<br> |      to self.Current if it is set, or self.Prior otherwise<br> |  <br> |  __init__(self, states, outcomes)<br> |      states is a list or dictionary of states, outcomes is a dictionary<br> |      mapping each state in states to a Distribution of the output states<br> |  <br> |  ----------------------------------------------------------------------<br> |  Methods inherited from BayesianModel:<br> |  <br> |  MaximumLikelihoodOutcome(self, PriorProbs=None)<br> |      Returns the maximum likelihood outcome given PriorProbs<br> |  <br> |  States(self)<br> |      Returns an iterator over the possible states<br> |  <br> |  __iadd__(self, Model2)<br> |      Updates the BayesianModel with the data in another BayesianModel<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors inherited from BayesianModel:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br><br>class PoissonDistribution(Distribution)<br> |  Represents a Poisson distribution<br> |  <br> |  Method resolution order:<br> |      PoissonDistribution<br> |      Distribution<br> |      __builtin__.object<br> |  <br> |  Methods defined here:<br> |  <br> |  MaximumLikelihoodState(self)<br> |  <br> |  Mean(self)<br> |      Returns the Mean of the PoissonDistribution<br> |  <br> |  Sample(self)<br> |      Returns a random sample from the Poisson distribution<br> |  <br> |  States(self, limit=1e-07)<br> |      Yields the PoissonDistribution's states, up to a cumulative<br> |      probability of 1-limit<br> |  <br> |  Update(self, N, p=1.0)<br> |      Updates the distribution, given a value N that has a probability of P<br> |      of being drawn from this distribution<br> |  <br> |  __call__(self, N)<br> |      Returns the probability of N<br> |  <br> |  __init__(self, mean)<br> |      Initialises the distribution with a given mean<br> |  <br> |  copy(self)<br> |      Returns a copy of the PoissonDistribution<br> |  <br> |  ----------------------------------------------------------------------<br> |  Methods inherited from Distribution:<br> |  <br> |  __iadd__(self, Dist2)<br> |      Updates the Distribution given another Distribution with the same states<br> |  <br> |  __mul__(self, scalar)<br> |      Returns the probability of each item, multiplied by a scalar<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors inherited from Distribution:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br><br>class Probability(__builtin__.object)<br> |  Represents a probability as a callable object<br> |  <br> |  Methods defined here:<br> |  <br> |  Update(self, deltaN, deltaD)<br> |      Updates the probability during Bayesian learning<br> |  <br> |  __call__(self)<br> |      Returns the value of the probability<br> |  <br> |  __iadd__(self, Prob2)<br> |      Updates the probability given another Probability object<br> |  <br> |  __init__(self, n, d)<br> |      Initialises the probability from a numerator and a denominator<br> |  <br> |  ----------------------------------------------------------------------<br> |  Data descriptors defined here:<br> |  <br> |  __dict__<br> |      dictionary for instance variables (if defined)<br> |  <br> |  __weakref__<br> |      list of weak references to the object (if defined)<br><br><br>\n          </div>"}, "last_serial": 4493562, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cb7f8f2f8b8e62c9fb138be1753e6086", "sha256": "2e9c9a832b5fe093a036f3fbb3e125f26329c903d8d66cf657e71c23bc7cf6c6"}, "downloads": -1, "filename": "Markov-0.1.tar.gz", "has_sig": false, "md5_digest": "cb7f8f2f8b8e62c9fb138be1753e6086", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5838, "upload_time": "2014-03-05T20:57:03", "upload_time_iso_8601": "2014-03-05T20:57:03.108206Z", "url": "https://files.pythonhosted.org/packages/e5/57/dce0233cac4bbc7285bb9403656bf15268c238dbe1439639f140796ac5b9/Markov-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "af53ed26226f751268c45136c1e4e4cd", "sha256": "bda7c37c4c3ef160f782c9427d9146630b0f7c5323b06ac281a55d6ef0e53231"}, "downloads": -1, "filename": "Markov-0.2.tar.gz", "has_sig": false, "md5_digest": "af53ed26226f751268c45136c1e4e4cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2631, "upload_time": "2016-07-29T09:23:32", "upload_time_iso_8601": "2016-07-29T09:23:32.421202Z", "url": "https://files.pythonhosted.org/packages/3a/5d/f3146bed7a8bbb7f2b910b5ed56af9c613defb748deb543d2ca50ee03132/Markov-0.2.tar.gz", "yanked": false}], "0.2": [], "0.2.1": [{"comment_text": "", "digests": {"md5": "7d2505ef364c05629ffb8dd208da1516", "sha256": "7e13d97e49fc4a847ecd73b1086ac3b6609ba43605f2c9a9ff2502785d6c5c39"}, "downloads": -1, "filename": "Markov-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7d2505ef364c05629ffb8dd208da1516", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6011, "upload_time": "2016-07-29T10:44:35", "upload_time_iso_8601": "2016-07-29T10:44:35.516854Z", "url": "https://files.pythonhosted.org/packages/7f/af/f6826e76a966664832d3ec414369fca770ccd9649d2206675cd9be807a42/Markov-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "a0e2467efa67c25ba6eee50d2b0c47cc", "sha256": "730afdeefab6c213cb6efbc7b50480fc946103841941df169c59430b5b10963d"}, "downloads": -1, "filename": "Markov-0.2.10.tar.gz", "has_sig": false, "md5_digest": "a0e2467efa67c25ba6eee50d2b0c47cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6064, "upload_time": "2016-08-01T16:12:21", "upload_time_iso_8601": "2016-08-01T16:12:21.921419Z", "url": "https://files.pythonhosted.org/packages/21/11/f5b814514bbafc301920ece2ea6376947e6b486612807a7f6a59cad751b3/Markov-0.2.10.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d27a6a2911feb938fe66dd8b5a5f391a", "sha256": "53e72f6f1e23574b04eaf5a8b3becf1fadf7e1674c5ed2fbd443dabe6f0feb16"}, "downloads": -1, "filename": "Markov-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d27a6a2911feb938fe66dd8b5a5f391a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6011, "upload_time": "2016-07-29T12:10:39", "upload_time_iso_8601": "2016-07-29T12:10:39.621950Z", "url": "https://files.pythonhosted.org/packages/ec/6f/1e43748d4866897ea666afc19c6c595c1e1f00ab53f7c632898ed6735a06/Markov-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "9a6210863cef0df103df6736ffecb5de", "sha256": "d4be785ac6073e49bbcf2483b34b8223424ea20cfbf0cc9e388d01c396568838"}, "downloads": -1, "filename": "Markov-0.2.3.tar.gz", "has_sig": false, "md5_digest": "9a6210863cef0df103df6736ffecb5de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6052, "upload_time": "2016-07-29T12:17:55", "upload_time_iso_8601": "2016-07-29T12:17:55.843442Z", "url": "https://files.pythonhosted.org/packages/5d/cc/6240de28ca9b5c863952a843f33f5449532877c3ab552bdf0d9a4512d975/Markov-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "1f8d84d55d4bb211e16e1a3e52892879", "sha256": "fa07955b859d5ef2540df954e3b437e83ba38a8b3ed3dd5f56fad2f9fcd63038"}, "downloads": -1, "filename": "Markov-0.2.4.tar.gz", "has_sig": false, "md5_digest": "1f8d84d55d4bb211e16e1a3e52892879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6058, "upload_time": "2016-07-29T12:52:40", "upload_time_iso_8601": "2016-07-29T12:52:40.359730Z", "url": "https://files.pythonhosted.org/packages/de/66/7bb02606d93c580e92933dcbe303b398f908c406fd70043811a9976dad98/Markov-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "26975c13b047740f58ecf62600066cef", "sha256": "a0a5a773b5b111149494ea6ae1489e2c33f8041140bd8cef5a74e30638724cfc"}, "downloads": -1, "filename": "Markov-0.2.5.tar.gz", "has_sig": false, "md5_digest": "26975c13b047740f58ecf62600066cef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6057, "upload_time": "2016-07-29T14:56:01", "upload_time_iso_8601": "2016-07-29T14:56:01.525942Z", "url": "https://files.pythonhosted.org/packages/02/eb/e613a5141f80a0dd879862c0720b84a2434244705acce72d1683caa91308/Markov-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "0c0a809c45b3a8230075a21fad1ed7d2", "sha256": "904cf7fe94dfbdd503c51a069c2d73fa47e248490d814583a625b433c719534d"}, "downloads": -1, "filename": "Markov-0.2.6.tar.gz", "has_sig": false, "md5_digest": "0c0a809c45b3a8230075a21fad1ed7d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6058, "upload_time": "2016-07-29T15:26:51", "upload_time_iso_8601": "2016-07-29T15:26:51.792106Z", "url": "https://files.pythonhosted.org/packages/ad/1e/be16f288db32d84558322a3d7793177dd6d988a462750006341f48996245/Markov-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "f38e6eac208648c624e093ffcfd525c2", "sha256": "3bdd2580bacf9fbf5faa9f3e8ca97acb98d69304d053ea0dea42e2881e0f3021"}, "downloads": -1, "filename": "Markov-0.2.7.tar.gz", "has_sig": false, "md5_digest": "f38e6eac208648c624e093ffcfd525c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6070, "upload_time": "2016-08-01T12:45:41", "upload_time_iso_8601": "2016-08-01T12:45:41.478827Z", "url": "https://files.pythonhosted.org/packages/02/1c/9d2957fde979d36ddea94dfcfa17795e56fbf4b8a4b23a863e3dee32430c/Markov-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "e8846c4b9aeb9b306fb5488f5c90cade", "sha256": "9c075a8c1ca9e54ea7b134e0bd2c56eebc87214f083a56a9d3e3e7ada411a9de"}, "downloads": -1, "filename": "Markov-0.2.8.tar.gz", "has_sig": false, "md5_digest": "e8846c4b9aeb9b306fb5488f5c90cade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6081, "upload_time": "2016-08-01T14:36:46", "upload_time_iso_8601": "2016-08-01T14:36:46.856833Z", "url": "https://files.pythonhosted.org/packages/bb/5a/8a2ee9068a12e5d381b426f0b2c5465c79b5bc129ac88e0ae70dc5cbcdd3/Markov-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "1bf3d2e331a5954c9dbdde92462d8293", "sha256": "91a68a0a9be909539f2e443567ba88827509bdc7595c7b1fdca2476f3b347180"}, "downloads": -1, "filename": "Markov-0.2.9.tar.gz", "has_sig": false, "md5_digest": "1bf3d2e331a5954c9dbdde92462d8293", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6076, "upload_time": "2016-08-01T15:36:23", "upload_time_iso_8601": "2016-08-01T15:36:23.483365Z", "url": "https://files.pythonhosted.org/packages/ef/b4/4d416dc51dcf9157957c53b9ca12cac51c41d1ca4622bdb42571cf67627c/Markov-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d4a25aac5a8d5fc11695136a5a5dbca1", "sha256": "a7f3cdf573ab2c2b082acdb745541e422d9eefb5d7f98c141427a67023d299fc"}, "downloads": -1, "filename": "Markov-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d4a25aac5a8d5fc11695136a5a5dbca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6421, "upload_time": "2016-09-16T13:40:56", "upload_time_iso_8601": "2016-09-16T13:40:56.104000Z", "url": "https://files.pythonhosted.org/packages/02/7a/4a7c579773d9f7d26221fdc28ad693b8a0c8fc52b0ce08e9b467ed8d0367/Markov-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1e251ae04d07f466eb7c3db6877e3afb", "sha256": "82d6b6f346e372c22baa71d8693bc7a20ada54275b71700bf1848016b66ecfbc"}, "downloads": -1, "filename": "Markov-0.3.1.tar.gz", "has_sig": false, "md5_digest": "1e251ae04d07f466eb7c3db6877e3afb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6422, "upload_time": "2016-09-16T16:05:28", "upload_time_iso_8601": "2016-09-16T16:05:28.338261Z", "url": "https://files.pythonhosted.org/packages/5c/dd/8adc84c715a979a186df9316b441f00b1bde46b5e52942c6dd0eb764698d/Markov-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "2a376cb610971cceaef8e2a360d4c526", "sha256": "b8a6dd1cf3114896028d24905086796e9221129a9372a55aeba437aa16191647"}, "downloads": -1, "filename": "Markov-0.3.2.tar.gz", "has_sig": false, "md5_digest": "2a376cb610971cceaef8e2a360d4c526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6428, "upload_time": "2016-09-19T11:12:09", "upload_time_iso_8601": "2016-09-19T11:12:09.227591Z", "url": "https://files.pythonhosted.org/packages/35/1e/ccb20cbcd74720d59ad335ad2601e20c4f19be4e800c423a5d5d209d6ef5/Markov-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "838a213d27f3ce7b4c002648c6241246", "sha256": "f68e8574f39b7137b1190654c865fe7944af132e808f3a336288810b8107dc61"}, "downloads": -1, "filename": "Markov-0.3.3.tar.gz", "has_sig": false, "md5_digest": "838a213d27f3ce7b4c002648c6241246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6430, "upload_time": "2016-09-19T11:48:56", "upload_time_iso_8601": "2016-09-19T11:48:56.719154Z", "url": "https://files.pythonhosted.org/packages/f3/35/649eba604e9b7817bea89bd559ee94997986f8d0b43c5c14de0480cf4003/Markov-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "23522c79f76db82b448112608cb1dc3c", "sha256": "ed8e21b30aec53306d3f15799ff23ebe62654e1ad603ff581cdad8a7c415e280"}, "downloads": -1, "filename": "Markov-0.3.4.tar.gz", "has_sig": false, "md5_digest": "23522c79f76db82b448112608cb1dc3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6440, "upload_time": "2016-11-03T10:41:49", "upload_time_iso_8601": "2016-11-03T10:41:49.423210Z", "url": "https://files.pythonhosted.org/packages/a7/bf/a358d877e4b5ae3df82011a112ed2260d10b7410fe5299e38b65bc8bee53/Markov-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "b66420c03a5aa51edcceb55737986c34", "sha256": "bc8d746940c674058ce811cdd6a3750ea39d4d3b737c3c1fc97732e1939a8827"}, "downloads": -1, "filename": "Markov-0.3.5.tar.gz", "has_sig": false, "md5_digest": "b66420c03a5aa51edcceb55737986c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6469, "upload_time": "2016-11-30T15:32:07", "upload_time_iso_8601": "2016-11-30T15:32:07.719910Z", "url": "https://files.pythonhosted.org/packages/4f/21/137bd21e453cf807ca29d0949d1229b102aeeb07c3f042b2beb4aa29d6d7/Markov-0.3.5.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "18af09de78f47a9c1e2ab409a9016419", "sha256": "44ac4cf5f747e68656a3c6912bf630a6149afb3635cb10596b50c2a69b558f7b"}, "downloads": -1, "filename": "Markov-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18af09de78f47a9c1e2ab409a9016419", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8860, "upload_time": "2018-11-16T12:38:15", "upload_time_iso_8601": "2018-11-16T12:38:15.938784Z", "url": "https://files.pythonhosted.org/packages/65/77/eb7dd3b10855ce4cc1fcb66884686fd9337d9310fbef08cf03c3c3097a05/Markov-0.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18af09de78f47a9c1e2ab409a9016419", "sha256": "44ac4cf5f747e68656a3c6912bf630a6149afb3635cb10596b50c2a69b558f7b"}, "downloads": -1, "filename": "Markov-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18af09de78f47a9c1e2ab409a9016419", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8860, "upload_time": "2018-11-16T12:38:15", "upload_time_iso_8601": "2018-11-16T12:38:15.938784Z", "url": "https://files.pythonhosted.org/packages/65/77/eb7dd3b10855ce4cc1fcb66884686fd9337d9310fbef08cf03c3c3097a05/Markov-0.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:57:41 2020"}