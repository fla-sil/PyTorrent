{"info": {"author": "Anton Patsev", "author_email": "patsev.anton@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "|CircleCI|\n\nregistry-cli\n============\n\nregistry.py is a script for easy manipulation of docker-registry from\ncommand line (and from scripts)\n\nInstallation\n------------\n\nDocker image\n~~~~~~~~~~~~\n\nYou can download ready-made docker image with the script and all python\ndependencies pre-installed:\n\n::\n\n        docker pull anoxis/registry-cli\n\nIn this case, in replace\n\n::\n\n        registry.py\n\nwith\n\n::\n\n       docker run --rm anoxis/registry-cli \n\nin all commands below, e.g.\n\n::\n\n        docker run --rm anoxis/registry-cli -r http://example.com:5000\n\nNote: when you use the docker image and registry on the same computer\n(registry is on localhost), then due to internal network created by\ndocker you have to link to the registry's network and refer registry\ncontainer by its name, not localhost. E.g. your registry container is\nnamed \"registry\", then the command to launch registry-cli would be\n\n.. code:: bash\n\n        docker run --rm --link registry anoxis/registry-cli -r http://registry:5000\n\npython script\n~~~~~~~~~~~~~\n\nDownload registry.py and set it as executable\n\n::\n\n      chmod 755 registry.py\n\nInstall dependencies:\n\n::\n\n      sudo pip install -r requirements.txt\n\nListing images\n--------------\n\nThe below command will list all images and all tags in your registry:\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000\n\nList all images, tags and layers:\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --layers\n\nList particular image(s) or image:tag (all tags of ubuntu and alpine in\nthis example)\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 -i ubuntu alpine\n\nSame as above but with layers\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 -i ubuntu alpine --layers\n\nUsername and password\n---------------------\n\nIt is optional, you can omit it in case if you use insecure registry\nwithout authentication (up to you, but its really insecure; make sure\nyou protect your entire registry from anyone)\n\nusername and password pair can be provided in the following forms\n\n::\n\n      -l username:password\n      -l 'username':'password'\n      -l \"username\":\"password\"\n\nUsername cannot contain colon (':') (I don't think it will contain ever,\nbut anyway I warned you). Password, in its turn, can contain as many\ncolons as you wish.\n\nDeleting images\n---------------\n\nKeep only last 10 versions (useful for CI): Delete all tags of all\nimages but keep last 10 tags (you can put this command to your build\nscript after building images)\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --delete\n\nIf number of tags is less than 10 it will not delete any\n\nYou can change the number of tags to keep, e.g. 5:\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --delete --num 5\n\nYou may also specify tags to be deleted using a list of regexp based\nnames. The following command would delete all tags containing\n\"snapshot-\" and beginning with \"stable-\" and a 4 digit number:\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --delete --tags-like \"snapshot-\" \"^stable-[0-9]{4}.*\"\n\nAs one manifest may be referenced by more than one tag, you may add\ntags, whose manifests should NOT be deleted. A tag that would otherwise\nbe deleted, but whose manifest references one of those \"kept\" tags, is\nspared for deletion. In the following case, all tags beginning with\n\"snapshot-\" will be deleted, safe those whose manifest point to \"stable\"\nor \"latest\"\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --delete --tags-like \"snapshot-\" --keep-tags \"stable\" \"latest\"\n\nThe last parameter is also available as regexp option with\n\"--keep-tags-like\".\n\nDelete all tags for particular image (e.g. delete all ubuntu tags):\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 -i ubuntu --delete-all\n\nDelete all tags for all images (do you really want to do it?):\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --delete-all\n\nDisable ssl verification\n------------------------\n\nIf you are using docker registry with a self signed ssl certificate, you\ncan disable ssl verification:\n\n::\n\n      registry.py -l user:pass -r https://example.com:5000 --no-validate-ssl \n\nImportant notes:\n----------------\n\ngarbage-collection in docker-registry\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. docker registry API does not actually delete tags or images, it marks\n   them for later garbage collection. So, make sure you run something\n   like below (or put them in your crontab):\n\n   ::\n\n         cd [path-where-your-docker-compose.yml]\n         docker-compose stop registry\n         docker-compose run --rm \\\n          registry bin/registry garbage-collect \\\n          /etc/docker/registry/config.yml\n         docker-compose up -d registry\n\n   or (if you are not using docker-compose):\n\n   ::\n\n         docker stop registry:2\n         docker run --rm registry:2 bin/registry garbage-collect \\\n          /etc/docker/registry/config.yml\n         docker start registry:2\n\n   for more detail on garbage collection read here:\n   https://docs.docker.com/registry/garbage-collection/\n\nenable image deletion in docker-registry\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMake sure to enable it by either creating environment variable\n``REGISTRY_STORAGE_DELETE_ENABLED: \"true\"`` or adding relevant\nconfiguration option to the docker-registry's config.yml. For more on\ndocker-registry configuration, read here:\nhttps://docs.docker.com/registry/configuration/\n\nYou may get ``Error 405`` message from script\n(``Functionality not supported``) when this option is not enabled.\n\nContribution\n------------\n\nYou are very welcome to contribute to this script. Of course, when\nmaking changes, please include your changes into ``test.py`` and run\ntests to check that your changes do not break existing functionality.\n\nFor tests to work, install ``mock`` library\n\n::\n\n      pip install -r requirements-test.txt\n\nRunning tests is as simple as\n\n::\n\n      python test.py\n\nTest will print few error messages, like so\n\n::\n\n    Testing started at 9:31 AM ...\n      tag digest not found: 400\n    error 400\n\nthis is ok, because test simulates invalid inputs also.\n\nContact\n=======\n\nPlease feel free to contact me at anoxis@gmail.com if you wish to add\nmore functionality or want to contribute.\n\n.. |CircleCI| image:: https://circleci.com/gh/andrey-pohilko/registry-cli/tree/master.svg?style=svg&circle-token=5216bf89763aec24bbcd6d15494ea32ffc53d66d\n   :target: https://circleci.com/gh/andrey-pohilko/registry-cli/tree/master\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/patsevanton/registry-cli", "keywords": "docker registry cli", "license": "", "maintainer": "", "maintainer_email": "", "name": "registry-cli-apatsev", "package_url": "https://pypi.org/project/registry-cli-apatsev/", "platform": "", "project_url": "https://pypi.org/project/registry-cli-apatsev/", "project_urls": {"Homepage": "https://github.com/patsevanton/registry-cli"}, "release_url": "https://pypi.org/project/registry-cli-apatsev/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "registry.py is a script for easy manipulation of docker-registry from command line (and from scripts)", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/andrey-pohilko/registry-cli/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93d3ebaaaaff55d82cebbda3c1d07775ebd75315/68747470733a2f2f636972636c6563692e636f6d2f67682f616e647265792d706f68696c6b6f2f72656769737472792d636c692f747265652f6d61737465722e7376673f7374796c653d73766726636972636c652d746f6b656e3d35323136626638393736336165633234626263643664313534393465613332666663353364363664\"></a></p>\n<div id=\"registry-cli\">\n<h2>registry-cli</h2>\n<p>registry.py is a script for easy manipulation of docker-registry from\ncommand line (and from scripts)</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"docker-image\">\n<h4>Docker image</h4>\n<p>You can download ready-made docker image with the script and all python\ndependencies pre-installed:</p>\n<pre>docker pull anoxis/registry-cli\n</pre>\n<p>In this case, in replace</p>\n<pre>registry.py\n</pre>\n<p>with</p>\n<pre>docker run --rm anoxis/registry-cli\n</pre>\n<p>in all commands below, e.g.</p>\n<pre>docker run --rm anoxis/registry-cli -r http://example.com:5000\n</pre>\n<p>Note: when you use the docker image and registry on the same computer\n(registry is on localhost), then due to internal network created by\ndocker you have to link to the registry\u2019s network and refer registry\ncontainer by its name, not localhost. E.g. your registry container is\nnamed \u201cregistry\u201d, then the command to launch registry-cli would be</p>\n<pre>docker run --rm --link registry anoxis/registry-cli -r http://registry:5000\n</pre>\n</div>\n<div id=\"python-script\">\n<h4>python script</h4>\n<p>Download registry.py and set it as executable</p>\n<pre>chmod 755 registry.py\n</pre>\n<p>Install dependencies:</p>\n<pre>sudo pip install -r requirements.txt\n</pre>\n</div>\n</div>\n<div id=\"listing-images\">\n<h3>Listing images</h3>\n<p>The below command will list all images and all tags in your registry:</p>\n<pre>registry.py -l user:pass -r https://example.com:5000\n</pre>\n<p>List all images, tags and layers:</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --layers\n</pre>\n<p>List particular image(s) or image:tag (all tags of ubuntu and alpine in\nthis example)</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 -i ubuntu alpine\n</pre>\n<p>Same as above but with layers</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 -i ubuntu alpine --layers\n</pre>\n</div>\n<div id=\"username-and-password\">\n<h3>Username and password</h3>\n<p>It is optional, you can omit it in case if you use insecure registry\nwithout authentication (up to you, but its really insecure; make sure\nyou protect your entire registry from anyone)</p>\n<p>username and password pair can be provided in the following forms</p>\n<pre>-l username:password\n-l 'username':'password'\n-l \"username\":\"password\"\n</pre>\n<p>Username cannot contain colon (\u2018:\u2019) (I don\u2019t think it will contain ever,\nbut anyway I warned you). Password, in its turn, can contain as many\ncolons as you wish.</p>\n</div>\n<div id=\"deleting-images\">\n<h3>Deleting images</h3>\n<p>Keep only last 10 versions (useful for CI): Delete all tags of all\nimages but keep last 10 tags (you can put this command to your build\nscript after building images)</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --delete\n</pre>\n<p>If number of tags is less than 10 it will not delete any</p>\n<p>You can change the number of tags to keep, e.g. 5:</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --delete --num 5\n</pre>\n<p>You may also specify tags to be deleted using a list of regexp based\nnames. The following command would delete all tags containing\n\u201csnapshot-\u201d and beginning with \u201cstable-\u201d and a 4 digit number:</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --delete --tags-like \"snapshot-\" \"^stable-[0-9]{4}.*\"\n</pre>\n<p>As one manifest may be referenced by more than one tag, you may add\ntags, whose manifests should NOT be deleted. A tag that would otherwise\nbe deleted, but whose manifest references one of those \u201ckept\u201d tags, is\nspared for deletion. In the following case, all tags beginning with\n\u201csnapshot-\u201d will be deleted, safe those whose manifest point to \u201cstable\u201d\nor \u201clatest\u201d</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --delete --tags-like \"snapshot-\" --keep-tags \"stable\" \"latest\"\n</pre>\n<p>The last parameter is also available as regexp option with\n\u201c\u2013keep-tags-like\u201d.</p>\n<p>Delete all tags for particular image (e.g. delete all ubuntu tags):</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 -i ubuntu --delete-all\n</pre>\n<p>Delete all tags for all images (do you really want to do it?):</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --delete-all\n</pre>\n</div>\n<div id=\"disable-ssl-verification\">\n<h3>Disable ssl verification</h3>\n<p>If you are using docker registry with a self signed ssl certificate, you\ncan disable ssl verification:</p>\n<pre>registry.py -l user:pass -r https://example.com:5000 --no-validate-ssl\n</pre>\n</div>\n<div id=\"important-notes\">\n<h3>Important notes:</h3>\n<div id=\"garbage-collection-in-docker-registry\">\n<h4>garbage-collection in docker-registry</h4>\n<ol>\n<li><p>docker registry API does not actually delete tags or images, it marks\nthem for later garbage collection. So, make sure you run something\nlike below (or put them in your crontab):</p>\n<pre>cd [path-where-your-docker-compose.yml]\ndocker-compose stop registry\ndocker-compose run --rm \\\n registry bin/registry garbage-collect \\\n /etc/docker/registry/config.yml\ndocker-compose up -d registry\n</pre>\n<p>or (if you are not using docker-compose):</p>\n<pre>docker stop registry:2\ndocker run --rm registry:2 bin/registry garbage-collect \\\n /etc/docker/registry/config.yml\ndocker start registry:2\n</pre>\n<p>for more detail on garbage collection read here:\n<a href=\"https://docs.docker.com/registry/garbage-collection/\" rel=\"nofollow\">https://docs.docker.com/registry/garbage-collection/</a></p>\n</li>\n</ol>\n</div>\n<div id=\"enable-image-deletion-in-docker-registry\">\n<h4>enable image deletion in docker-registry</h4>\n<p>Make sure to enable it by either creating environment variable\n<tt>REGISTRY_STORAGE_DELETE_ENABLED: \"true\"</tt> or adding relevant\nconfiguration option to the docker-registry\u2019s config.yml. For more on\ndocker-registry configuration, read here:\n<a href=\"https://docs.docker.com/registry/configuration/\" rel=\"nofollow\">https://docs.docker.com/registry/configuration/</a></p>\n<p>You may get <tt>Error 405</tt> message from script\n(<tt>Functionality not supported</tt>) when this option is not enabled.</p>\n</div>\n</div>\n<div id=\"contribution\">\n<h3>Contribution</h3>\n<p>You are very welcome to contribute to this script. Of course, when\nmaking changes, please include your changes into <tt>test.py</tt> and run\ntests to check that your changes do not break existing functionality.</p>\n<p>For tests to work, install <tt>mock</tt> library</p>\n<pre>pip install -r requirements-test.txt\n</pre>\n<p>Running tests is as simple as</p>\n<pre>python test.py\n</pre>\n<p>Test will print few error messages, like so</p>\n<pre>Testing started at 9:31 AM ...\n  tag digest not found: 400\nerror 400\n</pre>\n<p>this is ok, because test simulates invalid inputs also.</p>\n</div>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Please feel free to contact me at <a href=\"mailto:anoxis%40gmail.com\">anoxis<span>@</span>gmail<span>.</span>com</a> if you wish to add\nmore functionality or want to contribute.</p>\n</div>\n\n          </div>"}, "last_serial": 3507096, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "455df67375337533cf645437c5e9a7da", "sha256": "c23f349a183574eee21ff139dfec7d16e449f4f277b252f57e0663eff5944090"}, "downloads": -1, "filename": "registry-cli-apatsev-0.1.tar.gz", "has_sig": false, "md5_digest": "455df67375337533cf645437c5e9a7da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4518, "upload_time": "2018-01-20T12:19:36", "upload_time_iso_8601": "2018-01-20T12:19:36.033112Z", "url": "https://files.pythonhosted.org/packages/66/82/834c8883d4b9a37cf46b034c710909ba6a3b6b65af314b68153aed5b4675/registry-cli-apatsev-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "87f6c769f916412b52a09f7c1f180453", "sha256": "9418486fc3a6a2c0cfed9d2b8c7d53c7a4912fe2e4c11d27b20cf1c2547932ee"}, "downloads": -1, "filename": "registry-cli-apatsev-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87f6c769f916412b52a09f7c1f180453", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4605, "upload_time": "2018-01-20T12:27:45", "upload_time_iso_8601": "2018-01-20T12:27:45.650413Z", "url": "https://files.pythonhosted.org/packages/7e/74/6cb56478a293a2e438b2224af8261c829d9e331328b6920bfd4fcfa257de/registry-cli-apatsev-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a1d680be8f156d65e61d25851bfd8c98", "sha256": "4487496dfcc6013a39260bee032c3cadeac400aac8b23220a546d73fc6284eb4"}, "downloads": -1, "filename": "registry-cli-apatsev-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a1d680be8f156d65e61d25851bfd8c98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4662, "upload_time": "2018-01-20T13:52:49", "upload_time_iso_8601": "2018-01-20T13:52:49.402175Z", "url": "https://files.pythonhosted.org/packages/49/37/fa6a446774990848b501823aeeed17eea6d468d8d57d57957835614d465e/registry-cli-apatsev-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1d680be8f156d65e61d25851bfd8c98", "sha256": "4487496dfcc6013a39260bee032c3cadeac400aac8b23220a546d73fc6284eb4"}, "downloads": -1, "filename": "registry-cli-apatsev-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a1d680be8f156d65e61d25851bfd8c98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4662, "upload_time": "2018-01-20T13:52:49", "upload_time_iso_8601": "2018-01-20T13:52:49.402175Z", "url": "https://files.pythonhosted.org/packages/49/37/fa6a446774990848b501823aeeed17eea6d468d8d57d57957835614d465e/registry-cli-apatsev-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:11 2020"}