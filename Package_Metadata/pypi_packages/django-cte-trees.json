{"info": {"author": "Alexis Petrounias <www.petrounias.org>", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django CTE Trees is an experimental implementation of Adjacency-List trees using\r\nPostgreSQL Common Table Expressions (CTE). Its aim is to completely hide the\r\nmanagement of tree structure, as well as explore the issues related to including\r\nCTE in the Django ORM.\r\n\r\nAlthough handling tree structure in a transparent way is a desirable\r\ncharacteristic for many applications, the currently known limitations of\r\nincluding CTE (see below) will be a show-stopper for many other applications.\r\nUnless you know beforehand that these limitations will not affect your\r\napplication, this module is not suitable for you, and you should use an\r\nactively managed tree structure (such as\r\ndjango-mptt <https://github.com/django-mptt/django-mptt/> or\r\ndjango-treebeard <http://code.tabo.pe/django-treebeard/>).\r\n\r\nCharacteristics:\r\n\r\n- Simple: inheriting from an abstract node model is sufficient to obtain tree\r\n  functionality for any Model.\r\n\r\n- Seamless: does not use RawQuerySet, so queries using CTE can be combined with\r\n  normal Django queries, and won't confuse the SQLCompiler or other QuerySets,\r\n  including using multiple databases.\r\n\r\n- Self-contained: tree nodes can be manipulated without worrying about\r\n  maintaining tree structure in the database.\r\n\r\n- Single query: all tree traversal operations can be performed through a single\r\n  query, including children, siblings, ancestors, roots, and descendants.\r\n\r\n- Flexible ordering: supports (a subset of) normal Django ordering as well as\r\n  ordering on tree structure information, including depth and path, in DFS and\r\n  BFS orders.\r\n\r\n- Multiple delete semantics: supports Pharaoh, Grandmother, and Monarchy\r\n  deletion patterns.\r\n\r\n- Code: unit tests, documentation, comments.\r\n\r\nKnown limitations:\r\n\r\n- Virtual fields not usable in external queries: it is not yet possible to use\r\n  the virtual fields which describe the tree structure (depth, path, and\r\n  ordering information) in queries other than directly on the CTE Nodes.\r\n  Consequently, you cannot order on these fields any Model other than the CTE\r\n  Nodes themselves. See the technical notes for details.\r\n\r\n- Cannot merge queries with OR: because CTE relies on custom WHERE clauses added\r\n  through extra, the bitwise OR operator cannot be used with query composition.\r\n\r\n- Cannot use new Nodes without loading: immediately after creating a CTE Node,\r\n  it must be read from the database if you need to use its tree structure\r\n  (depth, path, and ordering information).\r\n\r\n- Cannot order descending: you cannot order on structure fields (depth, path) or\r\n  additional normal fields combined with structure fields in descending order.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/petrounias/django-cte-trees/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.petrounias.org/software/django-cte-trees/", "keywords": "django,postgresql,cte,trees,sql", "license": "BSD", "maintainer": "Alexis Petrounias <www.petrounias.org>", "maintainer_email": "", "name": "django-cte-trees", "package_url": "https://pypi.org/project/django-cte-trees/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-cte-trees/", "project_urls": {"Download": "https://github.com/petrounias/django-cte-trees/archive/master.zip", "Homepage": "http://www.petrounias.org/software/django-cte-trees/"}, "release_url": "https://pypi.org/project/django-cte-trees/0.9.2/", "requires_dist": null, "requires_python": null, "summary": "Experimental implementation of Adjacency-List trees using PostgreSQL Common Table Expressions (CTE) for Django.", "version": "0.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django CTE Trees is an experimental implementation of Adjacency-List trees using\nPostgreSQL Common Table Expressions (CTE). Its aim is to completely hide the\nmanagement of tree structure, as well as explore the issues related to including\nCTE in the Django ORM.</p>\n<p>Although handling tree structure in a transparent way is a desirable\ncharacteristic for many applications, the currently known limitations of\nincluding CTE (see below) will be a show-stopper for many other applications.\nUnless you know beforehand that these limitations will not affect your\napplication, this module is not suitable for you, and you should use an\nactively managed tree structure (such as\ndjango-mptt &lt;<a href=\"https://github.com/django-mptt/django-mptt/\" rel=\"nofollow\">https://github.com/django-mptt/django-mptt/</a>&gt; or\ndjango-treebeard &lt;<a href=\"http://code.tabo.pe/django-treebeard/\" rel=\"nofollow\">http://code.tabo.pe/django-treebeard/</a>&gt;).</p>\n<p>Characteristics:</p>\n<ul>\n<li>Simple: inheriting from an abstract node model is sufficient to obtain tree\nfunctionality for any Model.</li>\n<li>Seamless: does not use RawQuerySet, so queries using CTE can be combined with\nnormal Django queries, and won\u2019t confuse the SQLCompiler or other QuerySets,\nincluding using multiple databases.</li>\n<li>Self-contained: tree nodes can be manipulated without worrying about\nmaintaining tree structure in the database.</li>\n<li>Single query: all tree traversal operations can be performed through a single\nquery, including children, siblings, ancestors, roots, and descendants.</li>\n<li>Flexible ordering: supports (a subset of) normal Django ordering as well as\nordering on tree structure information, including depth and path, in DFS and\nBFS orders.</li>\n<li>Multiple delete semantics: supports Pharaoh, Grandmother, and Monarchy\ndeletion patterns.</li>\n<li>Code: unit tests, documentation, comments.</li>\n</ul>\n<p>Known limitations:</p>\n<ul>\n<li>Virtual fields not usable in external queries: it is not yet possible to use\nthe virtual fields which describe the tree structure (depth, path, and\nordering information) in queries other than directly on the CTE Nodes.\nConsequently, you cannot order on these fields any Model other than the CTE\nNodes themselves. See the technical notes for details.</li>\n<li>Cannot merge queries with OR: because CTE relies on custom WHERE clauses added\nthrough extra, the bitwise OR operator cannot be used with query composition.</li>\n<li>Cannot use new Nodes without loading: immediately after creating a CTE Node,\nit must be read from the database if you need to use its tree structure\n(depth, path, and ordering information).</li>\n<li>Cannot order descending: you cannot order on structure fields (depth, path) or\nadditional normal fields combined with structure fields in descending order.</li>\n</ul>\n\n          </div>"}, "last_serial": 789407, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "e61ffd18d04d813bf314435b828e8341", "sha256": "d4ff6a710686934a39a57b04f1f4bbb738675ceb596b96e78bf43a6762ffd0eb"}, "downloads": -1, "filename": "django-cte-trees-0.9.0.tar.gz", "has_sig": false, "md5_digest": "e61ffd18d04d813bf314435b828e8341", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29514, "upload_time": "2011-07-15T14:48:21", "upload_time_iso_8601": "2011-07-15T14:48:21.445725Z", "url": "https://files.pythonhosted.org/packages/fa/68/57dbb2dbc557e54df17b2ead34478c4103286321c9424d92d134dffca0da/django-cte-trees-0.9.0.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "09b7fa3f6ddc0c03b8eaaca7097e75f3", "sha256": "80ca40ef47df43e1644e0071b72bad566414995256cde7330855135b23a8fb7a"}, "downloads": -1, "filename": "django-cte-trees-0.9.2.tar.gz", "has_sig": false, "md5_digest": "09b7fa3f6ddc0c03b8eaaca7097e75f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23103, "upload_time": "2013-06-16T23:03:31", "upload_time_iso_8601": "2013-06-16T23:03:31.962256Z", "url": "https://files.pythonhosted.org/packages/54/ed/f44322f7c4de8e079a6e2971fe723b18c616c6c011bf890c676e8a25b34c/django-cte-trees-0.9.2.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "6401a602334ac2655ea70a3ded320fd7", "sha256": "0b7d2ce9e889c797f0d8768252409b739c6c5ef988bda105ec01a68a27c5de79"}, "downloads": -1, "filename": "django-cte-trees-1.0b1.tar.gz", "has_sig": false, "md5_digest": "6401a602334ac2655ea70a3ded320fd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29840, "upload_time": "2013-06-17T02:16:31", "upload_time_iso_8601": "2013-06-17T02:16:31.445556Z", "url": "https://files.pythonhosted.org/packages/e2/8d/3ed8f52e7282061fba75b0ba3d589a3d3015c21c957547a6f36b54b71129/django-cte-trees-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09b7fa3f6ddc0c03b8eaaca7097e75f3", "sha256": "80ca40ef47df43e1644e0071b72bad566414995256cde7330855135b23a8fb7a"}, "downloads": -1, "filename": "django-cte-trees-0.9.2.tar.gz", "has_sig": false, "md5_digest": "09b7fa3f6ddc0c03b8eaaca7097e75f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23103, "upload_time": "2013-06-16T23:03:31", "upload_time_iso_8601": "2013-06-16T23:03:31.962256Z", "url": "https://files.pythonhosted.org/packages/54/ed/f44322f7c4de8e079a6e2971fe723b18c616c6c011bf890c676e8a25b34c/django-cte-trees-0.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:45 2020"}