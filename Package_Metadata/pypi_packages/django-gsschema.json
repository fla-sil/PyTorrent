{"info": {"author": "Syrus Mesdaghi", "author_email": "geoshape.org@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "Geoserver Schema\n================\nA service that allows users to upload/download the geoserver schema.xsd files associated with each layer. More specifically, gsschema is a [Django][1] application which uses the [GeoServer][2] rest api to retrieve the list of layers and then associate a layer with a schema file provided by the user. The schema.xsd file describes a featureType by listing all its attributs as well as the type associated with attribute. The GeoSHAPE project uses the schema file to specify the drop down choices for a given attribute as well as an optional way to indicate that a particular attribute should be populated using datetime picker in [MapLoom][6] (web client) and [Arbiter][5] (mobile client).It is an open-source application that has been developed under the [ROGUE][4] project and is part of the [GeoSHAPE][3] eco-system.\n\nNotes\n=============\n- A \"normal\" schema can be defined as such:\n\n*Hospitals1*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:geonode=\"http://www.geonode.org/\" xmlns:gml=\"http://www.opengis.net/gml\" elementFormDefault=\"qualified\" targetNamespace=\"http://www.geonode.org/\">\n  <xsd:import namespace=\"http://www.opengis.net/gml\" schemaLocation=\"http://<VM IP Address>/geoserver/schemas/gml/3.1.1/base/gml.xsd\"/>\n  <xsd:complexType name=\"Hospitals1Type\">\n    <xsd:complexContent>\n      <xsd:extension base=\"gml:AbstractFeatureType\">\n        <xsd:sequence>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"geometry\" nillable=\"true\" type=\"gml:PointPropertyType\"/>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"name\" nillable=\"true\" type=\"xsd:string\"/>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"status\" nillable=\"true\">\n            <xsd:simpleType>\n              <xsd:restriction base=\"xsd:string\">\n                <xsd:enumeration value=\"open\"/>\n                <xsd:enumeration value=\"closed\"/>\n              </xsd:restriction>\n            </xsd:simpleType>\n          </xsd:element>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"number_of_beds_available\" nillable=\"true\" type=\"xsd:long\"/>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"number_of_beds_total\" nillable=\"true\" type=\"xsd:long\"/>\n          <xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"fotos\" nillable=\"true\" type=\"xsd:string\"/>\n        </xsd:sequence>\n      </xsd:extension>\n    </xsd:complexContent>\n  </xsd:complexType>\n  <xsd:element name=\"Hospitals1\" substitutionGroup=\"gml:_Feature\" type=\"geonode:Hospitals1Type\"/>\n</xsd:schema>\n```\n\n- The main lines that are going to be edited are the 'xsd:element' sections.\n- The attribute 'type' inside the 'xsd:element' has many options, such as the following:\n    - 'xsd:date'\n    - 'xsd:dateTime'\n    - 'xsd:long'\n    - 'xsd:string'\n    - Any other supported 'xsd' type.\n\nAPI Quick Guide\n=============\nSince schemas are already created (and each layer is using their own respective schema on MapLoom), GSSchema gives the user the ability to edit any available schema.\nTo start, you can log onto GSSchema:\n\n*The user **_must_** be logged into GeoSHAPE.*\n\n**example: http://192.168.99.100/gsschema/**\n\n**/gsschema/**\n-------------\nYou will be presented with a dropdown list, containing each layer that Geonode holds.\nOne a layer is selected, a few action buttons will be presented. These buttons are listed in order of a normal use of GSSchema.\n\n*Describe FeatureType*\n-------\nThis button will allow you to download the schema that is currently being used for the selected layer. After downloading the schema, any text editor can be used to edit the schema and be uploaded with the next button. Editing tips will be covered in [this document][7].\n\n*Upload*\n-------\nOnce a file is chosen for upload, this button will be enabled. This will upload the schema to Geoserver (while immediately reflecting on MapLoom) and make a local backup on the machine. This will then enable the **Download** and **Remove** buttons if it is successfully uploaded.\n\n- Expected results for upload:\n    - Successful\n    - Error Uploading: \"Invalid file\" (Non-XML format, not '.xsd')\n    - Error Uploading: \"Invalid schema\"\n\n*Download*\n------\nThis button allows you to download a schema that you previously uploaded through /gsschema/. This schema is local to the machine, and if no schemas have been uploaded, this button will be disabled.\n\n*Remove*\n-------\nThis will remove the currently selected layer's schema that is *local to the machine*. It will prompt the user with a window confirming if they want to remove the file. This button will be disabled if there is not a previous schema uploaded for that layer.\n\n\n\n  [1]: http://djangoproject.com \"Django\"\n  [2]: http://geoserver.org \"GeoServer\"\n  [3]: http://geoshape.org \"GeoSHAPE\"\n  [4]: http://github.com/rogue-jctd/ \"ROGUE\"\n  [5]: http://github.com/ROGUE-JCTD/Arbiter-Android \"Arbiter\"\n  [6]: http://github.com/ROGUE-JCTD/MapLoom  \"MapLoom\"\n  [7]: https://docs.google.com/document/d/1gz0qHIhY0LT2xceRX8gpXDCwbOxshzmbLXCu48Tz-MM/edit", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ROGUE-JCTD/django-gsschema", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ROGUE-JCTD/django-gsschema", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-gsschema", "package_url": "https://pypi.org/project/django-gsschema/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-gsschema/", "project_urls": {"Download": "https://github.com/ROGUE-JCTD/django-gsschema", "Homepage": "https://github.com/ROGUE-JCTD/django-gsschema"}, "release_url": "https://pypi.org/project/django-gsschema/0.1b2/", "requires_dist": null, "requires_python": null, "summary": "Service that creates tilesets from layer sources and serves them", "version": "0.1b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Geoserver Schema<br>================<br>A service that allows users to upload/download the geoserver schema.xsd files associated with each layer. More specifically, gsschema is a [Django][1] application which uses the [GeoServer][2] rest api to retrieve the list of layers and then associate a layer with a schema file provided by the user. The schema.xsd file describes a featureType by listing all its attributs as well as the type associated with attribute. The GeoSHAPE project uses the schema file to specify the drop down choices for a given attribute as well as an optional way to indicate that a particular attribute should be populated using datetime picker in [MapLoom][6] (web client) and [Arbiter][5] (mobile client).It is an open-source application that has been developed under the [ROGUE][4] project and is part of the [GeoSHAPE][3] eco-system.<br><br>Notes<br>=============<br>- A \"normal\" schema can be defined as such:<br><br>*Hospitals1*<br>```<br>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:geonode=\"http://www.geonode.org/\" xmlns:gml=\"http://www.opengis.net/gml\" elementFormDefault=\"qualified\" targetNamespace=\"http://www.geonode.org/\"&gt;<br>  &lt;xsd:import namespace=\"http://www.opengis.net/gml\" schemaLocation=\"http://&lt;VM IP Address&gt;/geoserver/schemas/gml/3.1.1/base/gml.xsd\"/&gt;<br>  &lt;xsd:complexType name=\"Hospitals1Type\"&gt;<br>    &lt;xsd:complexContent&gt;<br>      &lt;xsd:extension base=\"gml:AbstractFeatureType\"&gt;<br>        &lt;xsd:sequence&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"geometry\" nillable=\"true\" type=\"gml:PointPropertyType\"/&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"name\" nillable=\"true\" type=\"xsd:string\"/&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"status\" nillable=\"true\"&gt;<br>            &lt;xsd:simpleType&gt;<br>              &lt;xsd:restriction base=\"xsd:string\"&gt;<br>                &lt;xsd:enumeration value=\"open\"/&gt;<br>                &lt;xsd:enumeration value=\"closed\"/&gt;<br>              &lt;/xsd:restriction&gt;<br>            &lt;/xsd:simpleType&gt;<br>          &lt;/xsd:element&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"number_of_beds_available\" nillable=\"true\" type=\"xsd:long\"/&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"number_of_beds_total\" nillable=\"true\" type=\"xsd:long\"/&gt;<br>          &lt;xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"fotos\" nillable=\"true\" type=\"xsd:string\"/&gt;<br>        &lt;/xsd:sequence&gt;<br>      &lt;/xsd:extension&gt;<br>    &lt;/xsd:complexContent&gt;<br>  &lt;/xsd:complexType&gt;<br>  &lt;xsd:element name=\"Hospitals1\" substitutionGroup=\"gml:_Feature\" type=\"geonode:Hospitals1Type\"/&gt;<br>&lt;/xsd:schema&gt;<br>```<br><br>- The main lines that are going to be edited are the 'xsd:element' sections.<br>- The attribute 'type' inside the 'xsd:element' has many options, such as the following:<br>    - 'xsd:date'<br>    - 'xsd:dateTime'<br>    - 'xsd:long'<br>    - 'xsd:string'<br>    - Any other supported 'xsd' type.<br><br>API Quick Guide<br>=============<br>Since schemas are already created (and each layer is using their own respective schema on MapLoom), GSSchema gives the user the ability to edit any available schema.<br>To start, you can log onto GSSchema:<br><br>*The user **_must_** be logged into GeoSHAPE.*<br><br>**example: http://192.168.99.100/gsschema/**<br><br>**/gsschema/**<br>-------------<br>You will be presented with a dropdown list, containing each layer that Geonode holds.<br>One a layer is selected, a few action buttons will be presented. These buttons are listed in order of a normal use of GSSchema.<br><br>*Describe FeatureType*<br>-------<br>This button will allow you to download the schema that is currently being used for the selected layer. After downloading the schema, any text editor can be used to edit the schema and be uploaded with the next button. Editing tips will be covered in [this document][7].<br><br>*Upload*<br>-------<br>Once a file is chosen for upload, this button will be enabled. This will upload the schema to Geoserver (while immediately reflecting on MapLoom) and make a local backup on the machine. This will then enable the **Download** and **Remove** buttons if it is successfully uploaded.<br><br>- Expected results for upload:<br>    - Successful<br>    - Error Uploading: \"Invalid file\" (Non-XML format, not '.xsd')<br>    - Error Uploading: \"Invalid schema\"<br><br>*Download*<br>------<br>This button allows you to download a schema that you previously uploaded through /gsschema/. This schema is local to the machine, and if no schemas have been uploaded, this button will be disabled.<br><br>*Remove*<br>-------<br>This will remove the currently selected layer's schema that is *local to the machine*. It will prompt the user with a window confirming if they want to remove the file. This button will be disabled if there is not a previous schema uploaded for that layer.<br><br><br><br>  [1]: http://djangoproject.com \"Django\"<br>  [2]: http://geoserver.org \"GeoServer\"<br>  [3]: http://geoshape.org \"GeoSHAPE\"<br>  [4]: http://github.com/rogue-jctd/ \"ROGUE\"<br>  [5]: http://github.com/ROGUE-JCTD/Arbiter-Android \"Arbiter\"<br>  [6]: http://github.com/ROGUE-JCTD/MapLoom  \"MapLoom\"<br>  [7]: https://docs.google.com/document/d/1gz0qHIhY0LT2xceRX8gpXDCwbOxshzmbLXCu48Tz-MM/edit\n          </div>"}, "last_serial": 2032679, "releases": {"0.1-alpha2": [{"comment_text": "", "digests": {"md5": "56d9aa49b3fa36dfb2cebc5351bbb478", "sha256": "866b6d28bb053557f87cb6bd7d150a843825f7624cefcbcfbb229ee02591b4a7"}, "downloads": -1, "filename": "django-gsschema-0.1-alpha2.tar.gz", "has_sig": false, "md5_digest": "56d9aa49b3fa36dfb2cebc5351bbb478", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7650, "upload_time": "2015-08-03T18:48:56", "upload_time_iso_8601": "2015-08-03T18:48:56.541448Z", "url": "https://files.pythonhosted.org/packages/9f/50/b9cc39e9d673ec32d32506d6eedf4534853708380cee193a7a61d65b2d6f/django-gsschema-0.1-alpha2.tar.gz", "yanked": false}], "0.1-alpha3": [{"comment_text": "", "digests": {"md5": "cc5bc09937a567009d83ad62ca563b27", "sha256": "2f091aeb542422f7ec009beda0c16549b3e72c89e3c5e1482f5b23af86494823"}, "downloads": -1, "filename": "django-gsschema-0.1-alpha3.tar.gz", "has_sig": false, "md5_digest": "cc5bc09937a567009d83ad62ca563b27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6778, "upload_time": "2015-08-03T19:33:03", "upload_time_iso_8601": "2015-08-03T19:33:03.502942Z", "url": "https://files.pythonhosted.org/packages/60/cf/ceb012f4e4dc402a0ac66db7b4037271c145e4218d26de10754a8aaf1471/django-gsschema-0.1-alpha3.tar.gz", "yanked": false}], "0.1-alpha4": [{"comment_text": "", "digests": {"md5": "928f8f03b3bc85b92830576f8a576d10", "sha256": "76036724a151b95a91f6a0c22fc477b8211031683361c99b7b778044e497ff3d"}, "downloads": -1, "filename": "django-gsschema-0.1-alpha4.tar.gz", "has_sig": false, "md5_digest": "928f8f03b3bc85b92830576f8a576d10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6751, "upload_time": "2015-08-03T19:47:24", "upload_time_iso_8601": "2015-08-03T19:47:24.021427Z", "url": "https://files.pythonhosted.org/packages/40/bb/ed7d3e71d4d05627f5016584d2f0ae8f41e558b948a6e3eb2eeb09aa9e78/django-gsschema-0.1-alpha4.tar.gz", "yanked": false}], "0.1-alpha5": [{"comment_text": "", "digests": {"md5": "f332f1cf849c988040d62f2f6b082b81", "sha256": "4eee7253962e5d3de5ff39f287255f5edb14b3ee44ca941a1d892ca49e7c219e"}, "downloads": -1, "filename": "django-gsschema-0.1-alpha5.tar.gz", "has_sig": false, "md5_digest": "f332f1cf849c988040d62f2f6b082b81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 605142, "upload_time": "2015-08-05T12:58:58", "upload_time_iso_8601": "2015-08-05T12:58:58.017959Z", "url": "https://files.pythonhosted.org/packages/00/00/30cb3d669e4efc72cc0489eb78d3fc29ce08ec40760f5cf931fbceecfda1/django-gsschema-0.1-alpha5.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "960bed89fe54c7bf86cf2ec16bd512e3", "sha256": "d331b191d96f2e350940a801596ebf669461f55302e448dee88fdbbfa71b61a2"}, "downloads": -1, "filename": "django-gsschema-0.1a1.tar.gz", "has_sig": false, "md5_digest": "960bed89fe54c7bf86cf2ec16bd512e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6317, "upload_time": "2015-07-30T19:48:35", "upload_time_iso_8601": "2015-07-30T19:48:35.254702Z", "url": "https://files.pythonhosted.org/packages/c0/17/dba98408570429967bb18658898d3ffbd363b69791945c5345a9780041d3/django-gsschema-0.1a1.tar.gz", "yanked": false}], "0.1a6": [{"comment_text": "", "digests": {"md5": "fe0638ec86e346a45f053002eced7fe0", "sha256": "d2b7c37d9cee3f64204621d18cc117a10dd1d232c97741a8e42d5d03c7c4ffa7"}, "downloads": -1, "filename": "django-gsschema-0.1a6.tar.gz", "has_sig": false, "md5_digest": "fe0638ec86e346a45f053002eced7fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 609326, "upload_time": "2015-08-18T12:37:30", "upload_time_iso_8601": "2015-08-18T12:37:30.757178Z", "url": "https://files.pythonhosted.org/packages/e9/c9/6c2dab3babbf570dbd231de01023a4964f2dfa8bad12d2510a7ad753ceac/django-gsschema-0.1a6.tar.gz", "yanked": false}], "0.1b1": [{"comment_text": "", "digests": {"md5": "5f02b1a67a5a0f85b2c104b75b9b7045", "sha256": "042ac2d0cc362f2ea0e37356622fd4bc1fbb7a1dfd348cb6a5b4ddf1eea7005e"}, "downloads": -1, "filename": "django-gsschema-0.1b1.tar.gz", "has_sig": false, "md5_digest": "5f02b1a67a5a0f85b2c104b75b9b7045", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 609509, "upload_time": "2015-08-18T20:20:00", "upload_time_iso_8601": "2015-08-18T20:20:00.256897Z", "url": "https://files.pythonhosted.org/packages/6b/14/d2c232f2e266a3a51fcdf195c072da1710a5e66c7a980f522e8cd4eb509c/django-gsschema-0.1b1.tar.gz", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "fd973db5d9d69c1a1cf77715bc660cf7", "sha256": "7911b6d03568e733f848d66bd289214610034c56f975b0172cef9722eb56152f"}, "downloads": -1, "filename": "django-gsschema-0.1b2.tar.gz", "has_sig": false, "md5_digest": "fd973db5d9d69c1a1cf77715bc660cf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 609234, "upload_time": "2015-08-21T13:50:08", "upload_time_iso_8601": "2015-08-21T13:50:08.735782Z", "url": "https://files.pythonhosted.org/packages/b2/1d/e6c0ccb19fbfb53c3f0c3131a80534c2947adf49fe821a4ee53747c98ab8/django-gsschema-0.1b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd973db5d9d69c1a1cf77715bc660cf7", "sha256": "7911b6d03568e733f848d66bd289214610034c56f975b0172cef9722eb56152f"}, "downloads": -1, "filename": "django-gsschema-0.1b2.tar.gz", "has_sig": false, "md5_digest": "fd973db5d9d69c1a1cf77715bc660cf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 609234, "upload_time": "2015-08-21T13:50:08", "upload_time_iso_8601": "2015-08-21T13:50:08.735782Z", "url": "https://files.pythonhosted.org/packages/b2/1d/e6c0ccb19fbfb53c3f0c3131a80534c2947adf49fe821a4ee53747c98ab8/django-gsschema-0.1b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:47 2020"}