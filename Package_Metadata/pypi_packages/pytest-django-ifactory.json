{"info": {"author": "Mattias Jakobsson", "author_email": "mjakob422@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Plugins", "Framework :: Django", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "[![pipeline status](https://gitlab.com/gorilladev/pytest-django-ifactory/badges/develop/pipeline.svg)](https://gitlab.com/gorilladev/pytest-django-ifactory/commits/develop)\n[![coverage report](https://gitlab.com/gorilladev/pytest-django-ifactory/badges/develop/coverage.svg)](https://gitlab.com/gorilladev/pytest-django-ifactory/commits/develop)\n\n# pytest-django-ifactory\n\nA model instance factory for [pytest-django][].\n\n[pytest-django]: https://pytest-django.readthedocs.io/\n\n## Motivation\n\npytest-django-ifactory makes it easy to create model instances for\nyour test cases even if they contain a lot of non-nullable fields and\ncomplex foreign key relationships. If you every felt like you spent\ntoo much time coming up with dummy values for you models' fields just\nto get an instance into the database to use in a test then\npytest-django-ifactory might be for you.\n\npytest's fixtures are great and perfect if you want to have a static\nmodel instance available in the database for your tests. Problems\narise however when you want to vary one of its fields. To reuse your\nfixture in that case you need to modify the field and save the\ninstance back to the database (assuming your test needs it in the\ndatabase, of course). This results in at least two lines of extra\nsetup code in you test case and an extra call to the database.\n\npytest-django-ifactory is simply an instance factory (hence\n*ifactory*) function that automatically detects your Django models and\ntries to come up with acceptable defaults for the fields you don't\ncare about. This includes generating unique values for fields marked\nas unique and to create related instances for non-nullable foreign\nkeys.\n\n## Usage\n\n**Note that this library is very much in alpha and its API may change\nin future versions.**\n\nThis plugin comes with two fixtures: `ifactory` and\n`transactional_ifactory`.  Use them when you need to put model\ninstances in the database.  `ifactory` and `transactional_ifactory`\nare identical except that the latter uses [pytest-django][]'s\n`transactional_db` fixture instead of the `db` fixture.  See\npytest-django's and Django's documentation for when you would want to\nuse it.  Below is a contrived example to test a function that finds\nduplicate names of your users:\n\n```python\nfrom itertools import groupby\nfrom operator import methodcaller\n\nfrom django.contrib.auth.models import User\n\n\ndef get_duplicate_names():\n    all_users = User.objects.order_by(\"last_name\", \"first_name\")\n    users_by_name = groupby(all_users, methodcaller(\"get_full_name\"))\n    return [full_name for full_name, users in users_by_name if len(list(users)) > 1]\n\n\ndef test_get_duplicate_names(ifactory):\n    ifactory.auth.user(first_name=\"Albert\", last_name=\"Einstein\")\n    ifactory.auth.user(first_name=\"Albert\", last_name=\"Einstein\")\n    ifactory.auth.user(first_name=\"Erwin\", last_name=\"Schrodinger\")\n    ifactory.auth.user(first_name=\"Richard\", last_name=\"Feynman\")\n    assert get_duplicate_names() == [\"Albert Einstein\"]\n    assert User.objects.count() == 4\n```\n\nYou find you models namespaced by the application name and the model\nname on the `ifactory` instance. For instance, if you have created a\n`Book` model in a `library` application (and put your library\napplication in INSTALLED_APPS), its factory function will be\n`ifactory.library.book()`. This function accepts the same arguments as\nyour model constructor does and returns the created instance.\n\nNotice in the example above that we create four new users without\nspecifying their unique usernames. The goal of this project is that\nyou should never have to specify the value of a field if you're not\ninterested in that value in your test. Conversely, you should never\nrely on a value you haven't explicity set. This library gives no\nguarantees that the value it chooses for a field will be the same the\nnext time the test is run. It just tries to make sure that the\ninstance can be saved to the database without any integrity errors.\n\nWhile I would recommend against it, if you do want to know which\ndefault value will be used, you can use the\n`pytest_django_ifactory_configure` hook. A good place to put it is in\nyour *conftest.py*:\n\n```python\ndef pytest_django_ifactory_configure(ifactory):\n    ifactory.configure_defaults(\"auth.user\", {\n        \"first_name\": \"Albert\",\n        \"last_name\": \"Einstein\",\n    })\n```\n\nFrom now on, all users in your tests will be Albert Einstein unless\nyou say otherwise:\n\n```python\ndef test_albert_by_default(ifactory):\n    albert = ifactory.auth.user()\n    assert albert.get_full_name() == \"Albert Einstein\"\n    not_albert = ifactory.auth.user(first_name=\"Erwin\", last_name=\"Schrodinger\")\n    assert not_albert.full_name() == \"Erwin Schrodinger\"\n```\n\nWhile the above example might not be the best idea as your test suit\ngrows the hook can be used to enforce constraints in your models that\nthis library is unaware of, e.g., validation errors raised by your\nmodels that depend on the model's field values.\n\n## Development\n\nThis project uses [black][] to auto-format the code, [flake8][] to\ncheck it, [pytest][] to test it, and finally [check-manifest][] to\ncheck the project's [MANIFEST.in](MANIFEST.in). To facilitate (and\nremember) to actually run all these tools, [pre-commit][] is\nused. Hence, the only hard development requirement is\n*pre-commit*. Install it and run\n\n```console\n$ pre-commit install\n```\n\nonce the first time you check out the repo and from now on all checks\nexcept the unit tests will be run everytime a commit is made. The unit\ntests are run manually with pytest\n\n```console\n$ pytest\n```\n\nGitlab CI is configured to run the tests with Python 3.5-3.8 and all\nsupported Django versions.\n\nIf you want to install all development requirements to run them\nmanually (and without using `pre-commit run --all-files`), use the\n[requirements.txt](requirements.txt) file:\n\n```console\n$ pip install -r requirements.txt\n```\n\n[black]: https://github.com/ambv/black\n[check-manifest]: https://github.com/mgedmin/check-manifest\n[flake8]: https://gitlab.com/pycqa/flake8\n[pre-commit]: https://github.com/pre-commit/pre-commit\n[pytest]: http://pytest.org/\n\n## License\n\nLike [pytest-django][], pytest-django-ifactory is released under the\n[BSD 3-clause](LICENSE) license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/gorilladev/pytest-django-ifactory", "keywords": "pytest django database testing", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "pytest-django-ifactory", "package_url": "https://pypi.org/project/pytest-django-ifactory/", "platform": "", "project_url": "https://pypi.org/project/pytest-django-ifactory/", "project_urls": {"Homepage": "https://gitlab.com/gorilladev/pytest-django-ifactory"}, "release_url": "https://pypi.org/project/pytest-django-ifactory/0.3.0/", "requires_dist": ["Django", "pytest-django"], "requires_python": "", "summary": "A model instance factory for pytest-django", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitlab.com/gorilladev/pytest-django-ifactory/commits/develop\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a5018c1bafcf44259b093be38b00176fd59cfcd/68747470733a2f2f6769746c61622e636f6d2f676f72696c6c616465762f7079746573742d646a616e676f2d69666163746f72792f6261646765732f646576656c6f702f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/gorilladev/pytest-django-ifactory/commits/develop\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e452e3754af5c989a6654ecbfd6a64927f61ac41/68747470733a2f2f6769746c61622e636f6d2f676f72696c6c616465762f7079746573742d646a616e676f2d69666163746f72792f6261646765732f646576656c6f702f636f7665726167652e737667\"></a></p>\n<h1>pytest-django-ifactory</h1>\n<p>A model instance factory for <a href=\"https://pytest-django.readthedocs.io/\" rel=\"nofollow\">pytest-django</a>.</p>\n<h2>Motivation</h2>\n<p>pytest-django-ifactory makes it easy to create model instances for\nyour test cases even if they contain a lot of non-nullable fields and\ncomplex foreign key relationships. If you every felt like you spent\ntoo much time coming up with dummy values for you models' fields just\nto get an instance into the database to use in a test then\npytest-django-ifactory might be for you.</p>\n<p>pytest's fixtures are great and perfect if you want to have a static\nmodel instance available in the database for your tests. Problems\narise however when you want to vary one of its fields. To reuse your\nfixture in that case you need to modify the field and save the\ninstance back to the database (assuming your test needs it in the\ndatabase, of course). This results in at least two lines of extra\nsetup code in you test case and an extra call to the database.</p>\n<p>pytest-django-ifactory is simply an instance factory (hence\n<em>ifactory</em>) function that automatically detects your Django models and\ntries to come up with acceptable defaults for the fields you don't\ncare about. This includes generating unique values for fields marked\nas unique and to create related instances for non-nullable foreign\nkeys.</p>\n<h2>Usage</h2>\n<p><strong>Note that this library is very much in alpha and its API may change\nin future versions.</strong></p>\n<p>This plugin comes with two fixtures: <code>ifactory</code> and\n<code>transactional_ifactory</code>.  Use them when you need to put model\ninstances in the database.  <code>ifactory</code> and <code>transactional_ifactory</code>\nare identical except that the latter uses <a href=\"https://pytest-django.readthedocs.io/\" rel=\"nofollow\">pytest-django</a>'s\n<code>transactional_db</code> fixture instead of the <code>db</code> fixture.  See\npytest-django's and Django's documentation for when you would want to\nuse it.  Below is a contrived example to test a function that finds\nduplicate names of your users:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">groupby</span>\n<span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">methodcaller</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_duplicate_names</span><span class=\"p\">():</span>\n    <span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"last_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"first_name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">users_by_name</span> <span class=\"o\">=</span> <span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">methodcaller</span><span class=\"p\">(</span><span class=\"s2\">\"get_full_name\"</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">full_name</span> <span class=\"k\">for</span> <span class=\"n\">full_name</span><span class=\"p\">,</span> <span class=\"n\">users</span> <span class=\"ow\">in</span> <span class=\"n\">users_by_name</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_get_duplicate_names</span><span class=\"p\">(</span><span class=\"n\">ifactory</span><span class=\"p\">):</span>\n    <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Albert\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Einstein\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Albert\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Einstein\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Erwin\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Schrodinger\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Richard\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Feynman\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">get_duplicate_names</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">\"Albert Einstein\"</span><span class=\"p\">]</span>\n    <span class=\"k\">assert</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n</pre>\n<p>You find you models namespaced by the application name and the model\nname on the <code>ifactory</code> instance. For instance, if you have created a\n<code>Book</code> model in a <code>library</code> application (and put your library\napplication in INSTALLED_APPS), its factory function will be\n<code>ifactory.library.book()</code>. This function accepts the same arguments as\nyour model constructor does and returns the created instance.</p>\n<p>Notice in the example above that we create four new users without\nspecifying their unique usernames. The goal of this project is that\nyou should never have to specify the value of a field if you're not\ninterested in that value in your test. Conversely, you should never\nrely on a value you haven't explicity set. This library gives no\nguarantees that the value it chooses for a field will be the same the\nnext time the test is run. It just tries to make sure that the\ninstance can be saved to the database without any integrity errors.</p>\n<p>While I would recommend against it, if you do want to know which\ndefault value will be used, you can use the\n<code>pytest_django_ifactory_configure</code> hook. A good place to put it is in\nyour <em>conftest.py</em>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_django_ifactory_configure</span><span class=\"p\">(</span><span class=\"n\">ifactory</span><span class=\"p\">):</span>\n    <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">configure_defaults</span><span class=\"p\">(</span><span class=\"s2\">\"auth.user\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Albert\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Einstein\"</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>From now on, all users in your tests will be Albert Einstein unless\nyou say otherwise:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_albert_by_default</span><span class=\"p\">(</span><span class=\"n\">ifactory</span><span class=\"p\">):</span>\n    <span class=\"n\">albert</span> <span class=\"o\">=</span> <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">albert</span><span class=\"o\">.</span><span class=\"n\">get_full_name</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"Albert Einstein\"</span>\n    <span class=\"n\">not_albert</span> <span class=\"o\">=</span> <span class=\"n\">ifactory</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Erwin\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Schrodinger\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">not_albert</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"Erwin Schrodinger\"</span>\n</pre>\n<p>While the above example might not be the best idea as your test suit\ngrows the hook can be used to enforce constraints in your models that\nthis library is unaware of, e.g., validation errors raised by your\nmodels that depend on the model's field values.</p>\n<h2>Development</h2>\n<p>This project uses <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a> to auto-format the code, <a href=\"https://gitlab.com/pycqa/flake8\" rel=\"nofollow\">flake8</a> to\ncheck it, <a href=\"http://pytest.org/\" rel=\"nofollow\">pytest</a> to test it, and finally <a href=\"https://github.com/mgedmin/check-manifest\" rel=\"nofollow\">check-manifest</a> to\ncheck the project's <a href=\"MANIFEST.in\" rel=\"nofollow\">MANIFEST.in</a>. To facilitate (and\nremember) to actually run all these tools, <a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\">pre-commit</a> is\nused. Hence, the only hard development requirement is\n<em>pre-commit</em>. Install it and run</p>\n<pre><span class=\"gp\">$</span> pre-commit install\n</pre>\n<p>once the first time you check out the repo and from now on all checks\nexcept the unit tests will be run everytime a commit is made. The unit\ntests are run manually with pytest</p>\n<pre><span class=\"gp\">$</span> pytest\n</pre>\n<p>Gitlab CI is configured to run the tests with Python 3.5-3.8 and all\nsupported Django versions.</p>\n<p>If you want to install all development requirements to run them\nmanually (and without using <code>pre-commit run --all-files</code>), use the\n<a href=\"requirements.txt\" rel=\"nofollow\">requirements.txt</a> file:</p>\n<pre><span class=\"gp\">$</span> pip install -r requirements.txt\n</pre>\n<h2>License</h2>\n<p>Like <a href=\"https://pytest-django.readthedocs.io/\" rel=\"nofollow\">pytest-django</a>, pytest-django-ifactory is released under the\n<a href=\"LICENSE\" rel=\"nofollow\">BSD 3-clause</a> license.</p>\n\n          </div>"}, "last_serial": 6771233, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3207600b06e85b104cd30d904695663d", "sha256": "41e4017f20b6bafdeb35d0a062102e3caa50558c6eda86125d899483a1f16942"}, "downloads": -1, "filename": "pytest_django_ifactory-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3207600b06e85b104cd30d904695663d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8022, "upload_time": "2018-08-10T09:50:49", "upload_time_iso_8601": "2018-08-10T09:50:49.633375Z", "url": "https://files.pythonhosted.org/packages/30/83/4bb56ee836aafb6917ae54582b877f524da7eebea5af5024811670a79b1d/pytest_django_ifactory-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3841a91deee2a26f127f54edcfbcc438", "sha256": "5fa67932f401bac6e1d9b0a20f613d4108eb12f0bdb051c69bebc0d461a09588"}, "downloads": -1, "filename": "pytest-django-ifactory-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3841a91deee2a26f127f54edcfbcc438", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11857, "upload_time": "2018-08-10T09:50:56", "upload_time_iso_8601": "2018-08-10T09:50:56.455012Z", "url": "https://files.pythonhosted.org/packages/02/63/861661176cb09440b6793a7d6967b49757027b450027a4407ba7dbbf8912/pytest-django-ifactory-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "adddef666ebe0a4feb8da359e2c7e471", "sha256": "a2f2893d8774b9294927ea81ee6b2e1705c17fbd85e6ec16ab94e9cfd77e4562"}, "downloads": -1, "filename": "pytest_django_ifactory-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "adddef666ebe0a4feb8da359e2c7e471", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9378, "upload_time": "2018-10-28T20:00:51", "upload_time_iso_8601": "2018-10-28T20:00:51.900068Z", "url": "https://files.pythonhosted.org/packages/16/87/378b052d3e95fe9da8dfcaaeb3d2d0fe08ed75f343cc60dd3c642ec1a298/pytest_django_ifactory-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1dfddaceb6d1b704ded37867a02e10d", "sha256": "8a921dfb48d4ff3a43ba2e889678f49ef09aaefadb30c4a362a125a8763c3b33"}, "downloads": -1, "filename": "pytest-django-ifactory-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c1dfddaceb6d1b704ded37867a02e10d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16126, "upload_time": "2018-10-28T20:00:53", "upload_time_iso_8601": "2018-10-28T20:00:53.280755Z", "url": "https://files.pythonhosted.org/packages/2f/99/68df92f48c8215c9cbd34b93dc1c06970f9adea441df8321271419882df1/pytest-django-ifactory-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3f981e994f21697d7590590c4b0edaf2", "sha256": "9a3709659ca146f94af03c6e07a26e8e8c80d5b63caf96f6c9b1d1d4444c8b76"}, "downloads": -1, "filename": "pytest_django_ifactory-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f981e994f21697d7590590c4b0edaf2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9433, "upload_time": "2018-12-20T06:55:13", "upload_time_iso_8601": "2018-12-20T06:55:13.024192Z", "url": "https://files.pythonhosted.org/packages/83/a2/717210244ed6a00af8b85b21759343c09a823a8428298e33da51a819c08d/pytest_django_ifactory-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9520e119f0ad5fef7ca111924d9e783", "sha256": "eaa8e39142c3a56775e799318d12cb4a567e17d35a5c7d7edbee8b0ab1b3e326"}, "downloads": -1, "filename": "pytest-django-ifactory-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c9520e119f0ad5fef7ca111924d9e783", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16223, "upload_time": "2018-12-20T06:55:14", "upload_time_iso_8601": "2018-12-20T06:55:14.186455Z", "url": "https://files.pythonhosted.org/packages/3f/5a/820bd4ce24fd2aa3974ddac37790a769d3d18b053c455586de849306f058/pytest-django-ifactory-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "242a91f3c355ace11af66fc36aabac71", "sha256": "47f9890ce87521de36aeaf993679e5be223f488cbbbbf8d966b68ff3ceb6d1f3"}, "downloads": -1, "filename": "pytest_django_ifactory-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "242a91f3c355ace11af66fc36aabac71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9322, "upload_time": "2020-03-08T09:56:28", "upload_time_iso_8601": "2020-03-08T09:56:28.417839Z", "url": "https://files.pythonhosted.org/packages/6b/45/0a320f897a1d08188b99da7f4a1ca062f2e2e52e5a3488ae14c4ef457865/pytest_django_ifactory-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4fa15e0c433fe89055d4f9dd87bb1b4", "sha256": "1e90f629257f2e3227bd24e9c60f08f6c00c9e6b3beeab7fa95d12103d417b65"}, "downloads": -1, "filename": "pytest-django-ifactory-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b4fa15e0c433fe89055d4f9dd87bb1b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14673, "upload_time": "2020-03-08T09:56:29", "upload_time_iso_8601": "2020-03-08T09:56:29.682982Z", "url": "https://files.pythonhosted.org/packages/cc/f3/eddb183f27ee186e079cb6c61478a021000381c6f6b2ee605dbc6e016db9/pytest-django-ifactory-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "242a91f3c355ace11af66fc36aabac71", "sha256": "47f9890ce87521de36aeaf993679e5be223f488cbbbbf8d966b68ff3ceb6d1f3"}, "downloads": -1, "filename": "pytest_django_ifactory-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "242a91f3c355ace11af66fc36aabac71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9322, "upload_time": "2020-03-08T09:56:28", "upload_time_iso_8601": "2020-03-08T09:56:28.417839Z", "url": "https://files.pythonhosted.org/packages/6b/45/0a320f897a1d08188b99da7f4a1ca062f2e2e52e5a3488ae14c4ef457865/pytest_django_ifactory-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4fa15e0c433fe89055d4f9dd87bb1b4", "sha256": "1e90f629257f2e3227bd24e9c60f08f6c00c9e6b3beeab7fa95d12103d417b65"}, "downloads": -1, "filename": "pytest-django-ifactory-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b4fa15e0c433fe89055d4f9dd87bb1b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14673, "upload_time": "2020-03-08T09:56:29", "upload_time_iso_8601": "2020-03-08T09:56:29.682982Z", "url": "https://files.pythonhosted.org/packages/cc/f3/eddb183f27ee186e079cb6c61478a021000381c6f6b2ee605dbc6e016db9/pytest-django-ifactory-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:14 2020"}