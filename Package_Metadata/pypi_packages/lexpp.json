{"info": {"author": "earlsuke", "author_email": "ryosuke.mitani@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "## lexpp : \u540c\u7fa9\u8a9e\u8f9e\u66f8\u306b\u3088\u308b\u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u524d\u51e6\u7406\u30c4\u30fc\u30eb\n\n**\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u958b\u767a\u4e2d\u3067\u3059**\n\n### \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066\n\n\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3055\u308c\u305f\u8f9e\u66f8\u767b\u9332\u5358\u4f4d\u3078\u306e\u540c\u7fa9\u8a9e\u95a2\u9023\u306e\u51e6\u7406\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\n\u65e5\u672c\u8a9e\u306b\u304a\u3051\u308b\u540c\u7fa9\u8a9e\u304c\u53ce\u3081\u3089\u308c\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u8f9e\u66f8\u3068\u3057\u3066[SudachiDict](https://github.com/WorksApplications/SudachiDict)\u306e[synonym\u8f9e\u66f8](https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md)\n\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n```pip install lexpp```\n\n### \u4f7f\u3044\u65b9\n\n```python\nimport lexpp as lp\npp = lp.Lexpp()\n```\n\n\u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\uff0c\u4e0b\u8a18\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\n\n1. \u6587\u5b57\u5217\u3092\u8f9e\u66f8\u5f15\u304d\u3057\u3066\uff0c\u8f9e\u66f8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u60c5\u5831(Entry)\u3092\u547c\u3073\u51fa\u3059\uff0e  lookup(surface: str) -> Tuple(Entry)\n```python\nTESTCASE = \"\u30de\u30f3\u30ac\u55ab\u8336\"\nresult = pp.lookup(TESTCASE)\n```\n\n2. Entry\u3092\u30ad\u30fc\u3068\u3057\u3066\uff0c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u96c6\u5408\u3092\u5f97\u308b\uff0e  get_synset(e: Entry) -> Tuple(str)\n```python\nentry = result[0]\nsynonyms = pp.get_synset(entry)\n# synonyms = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\n```\n\n3. Entry\u3092\u30ad\u30fc\u3068\u3057\u3066\uff0c\u4ee3\u8868\u8868\u8a18\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u5f97\u308b\uff0e      get_representive_form(e: Entry) -> str\n```python\nrepr_form = pp.get_representive_form(entry)\n# repr_form = \"\u6f2b\u753b\u55ab\u8336\"\n```\n\n4. \u8907\u6570\u306e\u6587\u5b57\u5217\u3092\u30af\u30a8\u30ea\u3068\u3057\u3066\uff0c\u5171\u901a\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7ID\u306e\u96c6\u5408\u3092\u5f97\u307e\u3059\uff0e\u5171\u901a\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\uff0c\u7a7a\u306e\u96c6\u5408\u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e get_common_category_id_set(surfaces: List[str]) -> Set[int]\n```python\nTESTCASE_LIST = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\ngid_set = pp.get_common_category_id_set(TESTCASE_LIST)\n# gid_set = {27}\n```\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4e0b\u8a18\u306b\u793a\u3057\u307e\u3059\uff0e\n\n[samples/sample.py](samples/sample.py)\n\n### \u72ec\u81ea\u8f9e\u66f8\u306e\u4f5c\u308a\u65b9\n\n```python -m lexpp.dict_builder --input {your dictioanry} --output {output filename}```\n\n\u6ce8\u610f\u70b9: \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306f[synonym\u8f9e\u66f8](https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md)\u3068\u540c\u3058\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u30d3\u30eb\u30c9\u5f8c\uff0cLexpp\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n```python\npp = Lexpp(external_dict_path = {your dictionary})\n```\n\n### \u30e9\u30a4\u30bb\u30f3\u30b9\n\n[Apache 2.0\u30e9\u30a4\u30bb\u30f3\u30b9](http://www.apache.org/licenses/LICENSE-2.0)\u306e\u6761\u4ef6\u4e0b\u306b\u3066\uff0c\u5229\u7528\u3057\u3066\u3044\u305f\u3060\u3051\u307e\u3059\uff0e\n\u3053\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u306f, [Apache 2.0\u30e9\u30a4\u30bb\u30f3\u30b9](http://www.apache.org/licenses/LICENSE-2.0)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u88fd\u4f5c\u7269\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059.\n\n### \u53c2\u8003\u6587\u732e\n\n* \u6709\u7528\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u516c\u958b\u306b\u611f\u8b1d\u3057\u307e\u3059\uff0e[SudachiDict](https://github.com/WorksApplications/SudachiDict)\n\n------------------------------------\n\n## lexpp: lexical pre-processing module for Japanese text\n\n***THIS MODULE IS UNDER DEVELOPING***\n\n### What this module is\n\n  This module provides you to pre-process Japanese text by using lexical knowledge. The default dictionary is built based on [Sudachi synonym dict](https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md).\n\n\n### How to install\n```pip install lexpp```\n\n### How to use\n\n```python\nimport lexpp as lp\npp = lp.Lexpp()\n```\n\nThe current version of the software provides the following utilities.\n\n1. Lookup a key string from the dictionary to get lexical entities.    lookup(surface: str) -> Tuple(Entry)\n```python\nTESTCASE = \"\u30de\u30f3\u30ac\u55ab\u8336\"\nresult = pp.lookup(TESTCASE)\n```\n2. Lookup a key entry to obtain a synset(a set of synonyms).  get_synset(e: Entry) -> Tuple(str)\n```python\nentry = result[0]\nsynonyms = pp.get_synset(entry)\n# synonyms = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\n```\n3. Transform a key entry into a string of representive form.  get_representive_form(e: Entry) -> str\n```python\nrepr_form = pp.get_representive_form(entry)\n# repr_form = \"\u6f2b\u753b\u55ab\u8336\"\n```\n4. Lookup a set of group id which is commonly registered among the input surface list. If no groups existed , an empty set will be returned.  get_common_category_id_set(surfaces: List[str]) -> Set[int]\n```python\nTESTCASE_LIST = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\ngid_set = pp.get_common_category_id_set(TESTCASE_LIST)\n# gid_set = {27}\n```\n\nFor more details, See [samples/sample.py](samples/sample.py)\n\n### How to build your dictionary\n\n```python -m lexpp.dict_builder --input {your dictioanry} --output {output filename}```\n\nNOTE: The input file must be formatted by [the Sudachi synonym dict format]((https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md).\n\nWhen instantiating Lexpp class, specify to your dictionary as a parameter.\n\n```pp = Lexpp(external_dict_path = {your dictionary})```\n\n### License\n\nThis software is licensed under [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\nThis software contains the derivative from the product developed under [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n### References\n* Thanks to [SudachiDict](https://github.com/WorksApplications/SudachiDict) for releasing useful resources.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/earlsuke", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "lexpp", "package_url": "https://pypi.org/project/lexpp/", "platform": "", "project_url": "https://pypi.org/project/lexpp/", "project_urls": {"Homepage": "https://github.com/earlsuke"}, "release_url": "https://pypi.org/project/lexpp/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A lexical pre-processing module for Japanese text", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>## lexpp : \u540c\u7fa9\u8a9e\u8f9e\u66f8\u306b\u3088\u308b\u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u524d\u51e6\u7406\u30c4\u30fc\u30eb</p>\n<p><strong>\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u958b\u767a\u4e2d\u3067\u3059</strong></p>\n<p>### \u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066</p>\n<p>\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30c8\u30fc\u30af\u30ca\u30a4\u30ba\u3055\u308c\u305f\u8f9e\u66f8\u767b\u9332\u5358\u4f4d\u3078\u306e\u540c\u7fa9\u8a9e\u95a2\u9023\u306e\u51e6\u7406\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\n\u65e5\u672c\u8a9e\u306b\u304a\u3051\u308b\u540c\u7fa9\u8a9e\u304c\u53ce\u3081\u3089\u308c\u305f\u30c7\u30d5\u30a9\u30eb\u30c8\u8f9e\u66f8\u3068\u3057\u3066[SudachiDict](<a href=\"https://github.com/WorksApplications/SudachiDict\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict</a>)\u306e[synonym\u8f9e\u66f8](<a href=\"https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md</a>)\n\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e</p>\n<p>### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5</p>\n<p><tt>`pip install lexpp`</tt></p>\n<p>### \u4f7f\u3044\u65b9</p>\n<p><tt>`python\nimport lexpp as lp\npp = lp.Lexpp()\n`</tt></p>\n<p>\u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\uff0c\u4e0b\u8a18\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e</p>\n<p>1. \u6587\u5b57\u5217\u3092\u8f9e\u66f8\u5f15\u304d\u3057\u3066\uff0c\u8f9e\u66f8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u60c5\u5831(Entry)\u3092\u547c\u3073\u51fa\u3059\uff0e  lookup(surface: str) -&gt; Tuple(Entry)\n<tt>`python\nTESTCASE = \"\u30de\u30f3\u30ac\u55ab\u8336\"\nresult = pp.lookup(TESTCASE)\n`</tt></p>\n<p>2. Entry\u3092\u30ad\u30fc\u3068\u3057\u3066\uff0c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u96c6\u5408\u3092\u5f97\u308b\uff0e  get_synset(e: Entry) -&gt; Tuple(str)\n<tt>`python\nentry = result[0]\nsynonyms = pp.get_synset(entry)\n# synonyms = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\n`</tt></p>\n<p>3. Entry\u3092\u30ad\u30fc\u3068\u3057\u3066\uff0c\u4ee3\u8868\u8868\u8a18\u3068\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u5f97\u308b\uff0e      get_representive_form(e: Entry) -&gt; str\n<tt>`python\nrepr_form = pp.get_representive_form(entry)\n# repr_form = \"\u6f2b\u753b\u55ab\u8336\"\n`</tt></p>\n<p>4. \u8907\u6570\u306e\u6587\u5b57\u5217\u3092\u30af\u30a8\u30ea\u3068\u3057\u3066\uff0c\u5171\u901a\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7ID\u306e\u96c6\u5408\u3092\u5f97\u307e\u3059\uff0e\u5171\u901a\u3057\u3066\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\uff0c\u7a7a\u306e\u96c6\u5408\u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e get_common_category_id_set(surfaces: List[str]) -&gt; Set[int]\n<tt>`python\nTESTCASE_LIST = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\ngid_set = pp.get_common_category_id_set(TESTCASE_LIST)\n# gid_set = {27}\n`</tt></p>\n<p>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4e0b\u8a18\u306b\u793a\u3057\u307e\u3059\uff0e</p>\n<p>[samples/sample.py](samples/sample.py)</p>\n<p>### \u72ec\u81ea\u8f9e\u66f8\u306e\u4f5c\u308a\u65b9</p>\n<p><tt>`python <span class=\"pre\">-m</span> lexpp.dict_builder <span class=\"pre\">--input</span> {your dictioanry} <span class=\"pre\">--output</span> {output filename}`</tt></p>\n<p>\u6ce8\u610f\u70b9: \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u306f[synonym\u8f9e\u66f8](<a href=\"https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md</a>)\u3068\u540c\u3058\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e</p>\n<p>\u30d3\u30eb\u30c9\u5f8c\uff0cLexpp\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff0e</p>\n<p><tt>`python\npp = Lexpp(external_dict_path = {your dictionary})\n`</tt></p>\n<p>### \u30e9\u30a4\u30bb\u30f3\u30b9</p>\n<p>[Apache 2.0\u30e9\u30a4\u30bb\u30f3\u30b9](<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>)\u306e\u6761\u4ef6\u4e0b\u306b\u3066\uff0c\u5229\u7528\u3057\u3066\u3044\u305f\u3060\u3051\u307e\u3059\uff0e\n\u3053\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u306f, [Apache 2.0\u30e9\u30a4\u30bb\u30f3\u30b9](<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u88fd\u4f5c\u7269\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059.</p>\n<p>### \u53c2\u8003\u6587\u732e</p>\n<ul>\n<li>\u6709\u7528\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u516c\u958b\u306b\u611f\u8b1d\u3057\u307e\u3059\uff0e[SudachiDict](<a href=\"https://github.com/WorksApplications/SudachiDict\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict</a>)</li>\n</ul>\n<hr class=\"docutils\">\n<p>## lexpp: lexical pre-processing module for Japanese text</p>\n<p><strong>*THIS MODULE IS UNDER DEVELOPING*</strong></p>\n<p>### What this module is</p>\n<blockquote>\nThis module provides you to pre-process Japanese text by using lexical knowledge. The default dictionary is built based on [Sudachi synonym dict](<a href=\"https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md</a>).</blockquote>\n<p>### How to install\n<tt>`pip install lexpp`</tt></p>\n<p>### How to use</p>\n<p><tt>`python\nimport lexpp as lp\npp = lp.Lexpp()\n`</tt></p>\n<p>The current version of the software provides the following utilities.</p>\n<p>1. Lookup a key string from the dictionary to get lexical entities.    lookup(surface: str) -&gt; Tuple(Entry)\n<tt>`python\nTESTCASE = \"\u30de\u30f3\u30ac\u55ab\u8336\"\nresult = pp.lookup(TESTCASE)\n`</tt>\n2. Lookup a key entry to obtain a synset(a set of synonyms).  get_synset(e: Entry) -&gt; Tuple(str)\n<tt>`python\nentry = result[0]\nsynonyms = pp.get_synset(entry)\n# synonyms = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\n`</tt>\n3. Transform a key entry into a string of representive form.  get_representive_form(e: Entry) -&gt; str\n<tt>`python\nrepr_form = pp.get_representive_form(entry)\n# repr_form = \"\u6f2b\u753b\u55ab\u8336\"\n`</tt>\n4. Lookup a set of group id which is commonly registered among the input surface list. If no groups existed , an empty set will be returned.  get_common_category_id_set(surfaces: List[str]) -&gt; Set[int]\n<tt>`python\nTESTCASE_LIST = [\"\u6f2b\u753b\u55ab\u8336\", \"\u307e\u3093\u304c\u55ab\u8336\", \"\u30de\u30f3\u30ac\u55ab\u8336\", \"\u6f2b\u55ab\", \"\u307e\u3093\u55ab\", \"\u30de\u30f3\u55ab\"]\ngid_set = pp.get_common_category_id_set(TESTCASE_LIST)\n# gid_set = {27}\n`</tt></p>\n<p>For more details, See [samples/sample.py](samples/sample.py)</p>\n<p>### How to build your dictionary</p>\n<p><tt>`python <span class=\"pre\">-m</span> lexpp.dict_builder <span class=\"pre\">--input</span> {your dictioanry} <span class=\"pre\">--output</span> {output filename}`</tt></p>\n<p>NOTE: The input file must be formatted by [the Sudachi synonym dict format]((<a href=\"https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict/blob/develop/docs/synonyms.md</a>).</p>\n<p>When instantiating Lexpp class, specify to your dictionary as a parameter.</p>\n<p><tt>`pp = Lexpp(external_dict_path = {your <span class=\"pre\">dictionary})`</span></tt></p>\n<p>### License</p>\n<p>This software is licensed under [Apache 2.0](<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>).</p>\n<p>This software contains the derivative from the product developed under [Apache 2.0](<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>).</p>\n<p>### References\n* Thanks to [SudachiDict](<a href=\"https://github.com/WorksApplications/SudachiDict\" rel=\"nofollow\">https://github.com/WorksApplications/SudachiDict</a>) for releasing useful resources.</p>\n\n          </div>"}, "last_serial": 6376064, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f9f59b039f7ae45e0cec34267a435f7c", "sha256": "d2938369932269187d4d398b289f66d468427fe543065742ad396f174549da1c"}, "downloads": -1, "filename": "lexpp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9f59b039f7ae45e0cec34267a435f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1549609, "upload_time": "2019-11-23T09:36:26", "upload_time_iso_8601": "2019-11-23T09:36:26.053412Z", "url": "https://files.pythonhosted.org/packages/cf/78/ebfb3bc7c70875b991e7315abf5aadc4a1d92e56988a2c79a380b7d9f76a/lexpp-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e2d057a09ce5ac939e294a5876f4a16e", "sha256": "9c74c4a783849cf904f885d553eb4d187e15dae62123d9b24ddb77b2d92fee1b"}, "downloads": -1, "filename": "lexpp-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e2d057a09ce5ac939e294a5876f4a16e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1554726, "upload_time": "2019-12-30T17:14:48", "upload_time_iso_8601": "2019-12-30T17:14:48.425197Z", "url": "https://files.pythonhosted.org/packages/90/69/c7a9cdd2cc32dc4ec675eb78fc76b88cca8369bd3474a9d965b66a9b22e4/lexpp-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81ec135bf72946be372feecbb458ecea", "sha256": "b206b0c5b3fc176abb11ddadaccf2dee2783566b7ade350775ca156c246cfb29"}, "downloads": -1, "filename": "lexpp-1.1.0.tar.gz", "has_sig": false, "md5_digest": "81ec135bf72946be372feecbb458ecea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1550925, "upload_time": "2019-12-30T17:14:51", "upload_time_iso_8601": "2019-12-30T17:14:51.550764Z", "url": "https://files.pythonhosted.org/packages/df/9a/225374070d4f7d6fc11bb4a25cd76abc26c1a52d7fb531c5cb24da052134/lexpp-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2d057a09ce5ac939e294a5876f4a16e", "sha256": "9c74c4a783849cf904f885d553eb4d187e15dae62123d9b24ddb77b2d92fee1b"}, "downloads": -1, "filename": "lexpp-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e2d057a09ce5ac939e294a5876f4a16e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1554726, "upload_time": "2019-12-30T17:14:48", "upload_time_iso_8601": "2019-12-30T17:14:48.425197Z", "url": "https://files.pythonhosted.org/packages/90/69/c7a9cdd2cc32dc4ec675eb78fc76b88cca8369bd3474a9d965b66a9b22e4/lexpp-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81ec135bf72946be372feecbb458ecea", "sha256": "b206b0c5b3fc176abb11ddadaccf2dee2783566b7ade350775ca156c246cfb29"}, "downloads": -1, "filename": "lexpp-1.1.0.tar.gz", "has_sig": false, "md5_digest": "81ec135bf72946be372feecbb458ecea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1550925, "upload_time": "2019-12-30T17:14:51", "upload_time_iso_8601": "2019-12-30T17:14:51.550764Z", "url": "https://files.pythonhosted.org/packages/df/9a/225374070d4f7d6fc11bb4a25cd76abc26c1a52d7fb531c5cb24da052134/lexpp-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:49 2020"}