{"info": {"author": "Jake", "author_email": "ble-serial-pypi@ja-ke.tech", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# BLE Serial\nA tool to connect Bluetooth 4.0+ Low Energy to UART modules and normal PCs/laptops/RaspberryPi. \nIt fulfills the same purpose as `rfcomm bind` for the old Bluetooth 2.0, creating a virtual serial port in `/dev/pts/x`, which makes it usable with any terminal or application.\n\n### Installation\nThe software is written completely in Python and packaged as module, so it can be easily installed with pip:\n```\npip install ble-serial\npip install git+https://github.com/edwios/bluepy.git@10f1cee90afb416f139949b86b491e4cfa98c886\n```\nIf you are wondering why the second command is required: It depends on the bluepy library, but unfortunately there are [bugs](https://github.com/IanHarvey/bluepy/issues/253) in the original version and there was no development since a year, so it is important to specifically install this fork with a few fixes.\n\nNow you should have 2 new scripts: `ble-scan` and the main `ble-serial`.\n\n### Finding devices\nFirst make sure the bluetooth adapter is enabled, for example with `bluetoothctl power on`, then the scan function can be used (note: root is required for this step):\n```\n# ble-scan\n```\n```\nDiscovered device: 20:91:48:4c:4c:54 -> UT61E - JK\n...\nFound 2 devices!\n\nDevice 20:91:48:4c:4c:54 (public), RSSI=-58 dB\n    01: Flags = 06\n    ff: Manufacturer = 484d2091484c4c54\n    16: 16b Service Data = 00b000000000\n    02: Incomplete 16b Services = 0000ffe0-0000-1000-8000-00805f9b34fb\n    09: Complete Local Name = UT61E -  JK\n    0a: Tx Power = 00\n\nDevice ...\n```\nThe output is a list of the recognized nearby devices. After the MAC address it prints out the device name, if it can be resolved.\n\nIf there are devices not found it might help to increase the scan time. All discoverable devices must actively send advertisements, to save power the intervall of this can be quite slow, so try for example 30 seconds then.\n```\noptional arguments:\n  -h, --help            show this help message and exit\n  -t SEC, --scan-time SEC\n                        Duration of the scan in seconds (default: 5.0)\n  -d, --deep-scan       Try to connect to the devices and read out the service/characteristic UUIDs (default: False)\n```\nOn Bluetooth 2.0 there was a \"serial port profile\", with 4.0 BLE there is unfortunately no standardized mode anymore, every chip manufacturer chooses their own ID to implement the features there. \n```py\n'0000ff02-0000-1000-8000-00805f9b34fb', # LithiumBatteryPCB adapter\n'0000ffe1-0000-1000-8000-00805f9b34fb', # TI CC245x (HM-10, HM-11)\n```\nSome usual IDs are included in ble-serial, these will be tried automatically if nothing is specified.\nYou might skip this part and start directly with the connection.\n\nTo find the correct ID otherwise i added a deep scan option, it will go through the devices and show all provided interfaces. This scan can take long, especially if there are many devices in the area, so only use it if you want to find the right write characteristic ID.\n```\n# ble-scan -d\n```\n```\n  Device ...\n  ...\n  Service: 00001800-0000-1000-8000-00805f9b34fb\n    Characteristic: 00002a00-0000-1000-8000-00805f9b34fb READ \n    Characteristic: 00002a01-0000-1000-8000-00805f9b34fb READ \n    Characteristic: 00002a02-0000-1000-8000-00805f9b34fb READ WRITE \n    Characteristic: 00002a03-0000-1000-8000-00805f9b34fb READ WRITE \n    Characteristic: 00002a04-0000-1000-8000-00805f9b34fb READ \n  Service: 00001801-0000-1000-8000-00805f9b34fb\n    Characteristic: 00002a05-0000-1000-8000-00805f9b34fb INDICATE \n  Service: 0000ffe0-0000-1000-8000-00805f9b34fb\n    Characteristic: 0000ffe1-0000-1000-8000-00805f9b34fb READ WRITE NO RESPONSE NOTIFY \n```\nNow in addition to the previous output there are all characteristics listed, grouped into services. The characteristics in the first service starting with `00002a` are not interesting in this case, because they are standard values (for example the device name), if you want to know more look at [this list](https://gist.github.com/sam016/4abe921b5a9ee27f67b3686910293026#file-allgattcharacteristics-java-L57).\n\nAfter the (U)ID the permissions are listed. We are searching for a characteristic that allows writing = sending to the device, the only candidate in here is `0000ffe1-0000-1000-8000-00805f9b34fb` (spoiler: a HM-11 module again).\n\n\n\n### Connecting a device\nThe `ble-serial` tool itself has a few more options:\n```\n  -h, --help            show this help message and exit\n  -v                    Increase verbosity (logs all data going through)\n  -d DEVICE, --dev DEVICE\n                        BLE device address to connect (hex format, can be seperated by colons)\n  -w WRITE_UUID, --write-uuid WRITE_UUID\n                        The GATT chracteristic to write the serial data, you might use \"scan.py -d\" to find it out\n  -l FILENAME, --log FILENAME\n                        Enable optional logging of all bluetooth traffic to file\n  -p PORT, --port PORT  Symlink to virtual serial port (default = /tmp/ttyBLE)\n```\nOnly the device address is always required:\n```\n$ ble-serial -d 20:91:48:4c:4c:54\n```\n```\n21:02:55.823 | INFO | virtual_serial.py: Slave created on /tmp/ttyBLE -> /dev/pts/8\n21:02:56.410 | INFO | interface.py: Connected device 20:91:48:4c:4c:54\n21:02:56.909 | INFO | interface.py: Receiver set up\n21:02:56.909 | INFO | __main__.py: Running main loop!\n```\nThis log shows a successful start, the virtual serial port was opened on `/dev/pts/8`, the number at the end changes, depending on how many pseudo terminals are already open on the system. In addition it creates automatically a symlink to `/tmp/ttyBLE`, so you can easily access it there always on the same file, the default can be changed with the `-p`/`--port` option.\n\nNow it is possible to use any serial monitor program, just connect to that port, baud rate etc. does not matter, it will work with any value (ignored it is only virtual).\nThe software acts as transparent bridge, everything that is sent to that virtual port gets transmitted to the BLE module and comes out of the TX pin there. Same in the other direction, everything that the BLE module receives on the RX pin gets transmitted to the PC and shows up in the virtual serial port. This makes also possible to add ble module to create a wireless serial connection with existing hard/software.\n\nAs mentioned before, the start might fail because the ID is not in the list, then you have can manually specify the correct characteristic ID like this:\n```\n$ ble-serial -d 20:91:48:4c:4c:54 -w 0000ffe1-0000-1000-8000-00805f9b34fb\n```\n\nAlso there is an option to log all traffic on the link to a text file:\n```\n$ ble-serial -d 20:91:48:4c:4c:54 -l demo.txt\ncat demo.txt\n```\n```\n2019-12-09 21:15:53.282805 <- BLE-OUT: 48 65 6c 6c 6f 20 77 6f 72 6c 64\n2019-12-09 21:15:53.491681 -> BLE-IN: b0 b0 b0 b0 b0 b0 3b b0 b0 b0 ba b0 0d 8a\n2019-12-09 21:15:53.999795 -> BLE-IN: b0 b0 b0 b0 b0 b0 3b b0 b0 b0 ba b0 0d 8a\n```\n\nAs always, i hope it was helpful. If you encounter problems, please use the issue tracker on [GitHub](https://github.com/Jakeler/ble-serial).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jakeler/ble-serial", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ble-serial", "package_url": "https://pypi.org/project/ble-serial/", "platform": "", "project_url": "https://pypi.org/project/ble-serial/", "project_urls": {"Homepage": "https://github.com/Jakeler/ble-serial"}, "release_url": "https://pypi.org/project/ble-serial/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package to connect BLE serial adapters", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BLE Serial</h1>\n<p>A tool to connect Bluetooth 4.0+ Low Energy to UART modules and normal PCs/laptops/RaspberryPi.\nIt fulfills the same purpose as <code>rfcomm bind</code> for the old Bluetooth 2.0, creating a virtual serial port in <code>/dev/pts/x</code>, which makes it usable with any terminal or application.</p>\n<h3>Installation</h3>\n<p>The software is written completely in Python and packaged as module, so it can be easily installed with pip:</p>\n<pre><code>pip install ble-serial\npip install git+https://github.com/edwios/bluepy.git@10f1cee90afb416f139949b86b491e4cfa98c886\n</code></pre>\n<p>If you are wondering why the second command is required: It depends on the bluepy library, but unfortunately there are <a href=\"https://github.com/IanHarvey/bluepy/issues/253\" rel=\"nofollow\">bugs</a> in the original version and there was no development since a year, so it is important to specifically install this fork with a few fixes.</p>\n<p>Now you should have 2 new scripts: <code>ble-scan</code> and the main <code>ble-serial</code>.</p>\n<h3>Finding devices</h3>\n<p>First make sure the bluetooth adapter is enabled, for example with <code>bluetoothctl power on</code>, then the scan function can be used (note: root is required for this step):</p>\n<pre><code># ble-scan\n</code></pre>\n<pre><code>Discovered device: 20:91:48:4c:4c:54 -&gt; UT61E - JK\n...\nFound 2 devices!\n\nDevice 20:91:48:4c:4c:54 (public), RSSI=-58 dB\n    01: Flags = 06\n    ff: Manufacturer = 484d2091484c4c54\n    16: 16b Service Data = 00b000000000\n    02: Incomplete 16b Services = 0000ffe0-0000-1000-8000-00805f9b34fb\n    09: Complete Local Name = UT61E -  JK\n    0a: Tx Power = 00\n\nDevice ...\n</code></pre>\n<p>The output is a list of the recognized nearby devices. After the MAC address it prints out the device name, if it can be resolved.</p>\n<p>If there are devices not found it might help to increase the scan time. All discoverable devices must actively send advertisements, to save power the intervall of this can be quite slow, so try for example 30 seconds then.</p>\n<pre><code>optional arguments:\n  -h, --help            show this help message and exit\n  -t SEC, --scan-time SEC\n                        Duration of the scan in seconds (default: 5.0)\n  -d, --deep-scan       Try to connect to the devices and read out the service/characteristic UUIDs (default: False)\n</code></pre>\n<p>On Bluetooth 2.0 there was a \"serial port profile\", with 4.0 BLE there is unfortunately no standardized mode anymore, every chip manufacturer chooses their own ID to implement the features there.</p>\n<pre><span class=\"s1\">'0000ff02-0000-1000-8000-00805f9b34fb'</span><span class=\"p\">,</span> <span class=\"c1\"># LithiumBatteryPCB adapter</span>\n<span class=\"s1\">'0000ffe1-0000-1000-8000-00805f9b34fb'</span><span class=\"p\">,</span> <span class=\"c1\"># TI CC245x (HM-10, HM-11)</span>\n</pre>\n<p>Some usual IDs are included in ble-serial, these will be tried automatically if nothing is specified.\nYou might skip this part and start directly with the connection.</p>\n<p>To find the correct ID otherwise i added a deep scan option, it will go through the devices and show all provided interfaces. This scan can take long, especially if there are many devices in the area, so only use it if you want to find the right write characteristic ID.</p>\n<pre><code># ble-scan -d\n</code></pre>\n<pre><code>  Device ...\n  ...\n  Service: 00001800-0000-1000-8000-00805f9b34fb\n    Characteristic: 00002a00-0000-1000-8000-00805f9b34fb READ \n    Characteristic: 00002a01-0000-1000-8000-00805f9b34fb READ \n    Characteristic: 00002a02-0000-1000-8000-00805f9b34fb READ WRITE \n    Characteristic: 00002a03-0000-1000-8000-00805f9b34fb READ WRITE \n    Characteristic: 00002a04-0000-1000-8000-00805f9b34fb READ \n  Service: 00001801-0000-1000-8000-00805f9b34fb\n    Characteristic: 00002a05-0000-1000-8000-00805f9b34fb INDICATE \n  Service: 0000ffe0-0000-1000-8000-00805f9b34fb\n    Characteristic: 0000ffe1-0000-1000-8000-00805f9b34fb READ WRITE NO RESPONSE NOTIFY \n</code></pre>\n<p>Now in addition to the previous output there are all characteristics listed, grouped into services. The characteristics in the first service starting with <code>00002a</code> are not interesting in this case, because they are standard values (for example the device name), if you want to know more look at <a href=\"https://gist.github.com/sam016/4abe921b5a9ee27f67b3686910293026#file-allgattcharacteristics-java-L57\" rel=\"nofollow\">this list</a>.</p>\n<p>After the (U)ID the permissions are listed. We are searching for a characteristic that allows writing = sending to the device, the only candidate in here is <code>0000ffe1-0000-1000-8000-00805f9b34fb</code> (spoiler: a HM-11 module again).</p>\n<h3>Connecting a device</h3>\n<p>The <code>ble-serial</code> tool itself has a few more options:</p>\n<pre><code>  -h, --help            show this help message and exit\n  -v                    Increase verbosity (logs all data going through)\n  -d DEVICE, --dev DEVICE\n                        BLE device address to connect (hex format, can be seperated by colons)\n  -w WRITE_UUID, --write-uuid WRITE_UUID\n                        The GATT chracteristic to write the serial data, you might use \"scan.py -d\" to find it out\n  -l FILENAME, --log FILENAME\n                        Enable optional logging of all bluetooth traffic to file\n  -p PORT, --port PORT  Symlink to virtual serial port (default = /tmp/ttyBLE)\n</code></pre>\n<p>Only the device address is always required:</p>\n<pre><code>$ ble-serial -d 20:91:48:4c:4c:54\n</code></pre>\n<pre><code>21:02:55.823 | INFO | virtual_serial.py: Slave created on /tmp/ttyBLE -&gt; /dev/pts/8\n21:02:56.410 | INFO | interface.py: Connected device 20:91:48:4c:4c:54\n21:02:56.909 | INFO | interface.py: Receiver set up\n21:02:56.909 | INFO | __main__.py: Running main loop!\n</code></pre>\n<p>This log shows a successful start, the virtual serial port was opened on <code>/dev/pts/8</code>, the number at the end changes, depending on how many pseudo terminals are already open on the system. In addition it creates automatically a symlink to <code>/tmp/ttyBLE</code>, so you can easily access it there always on the same file, the default can be changed with the <code>-p</code>/<code>--port</code> option.</p>\n<p>Now it is possible to use any serial monitor program, just connect to that port, baud rate etc. does not matter, it will work with any value (ignored it is only virtual).\nThe software acts as transparent bridge, everything that is sent to that virtual port gets transmitted to the BLE module and comes out of the TX pin there. Same in the other direction, everything that the BLE module receives on the RX pin gets transmitted to the PC and shows up in the virtual serial port. This makes also possible to add ble module to create a wireless serial connection with existing hard/software.</p>\n<p>As mentioned before, the start might fail because the ID is not in the list, then you have can manually specify the correct characteristic ID like this:</p>\n<pre><code>$ ble-serial -d 20:91:48:4c:4c:54 -w 0000ffe1-0000-1000-8000-00805f9b34fb\n</code></pre>\n<p>Also there is an option to log all traffic on the link to a text file:</p>\n<pre><code>$ ble-serial -d 20:91:48:4c:4c:54 -l demo.txt\ncat demo.txt\n</code></pre>\n<pre><code>2019-12-09 21:15:53.282805 &lt;- BLE-OUT: 48 65 6c 6c 6f 20 77 6f 72 6c 64\n2019-12-09 21:15:53.491681 -&gt; BLE-IN: b0 b0 b0 b0 b0 b0 3b b0 b0 b0 ba b0 0d 8a\n2019-12-09 21:15:53.999795 -&gt; BLE-IN: b0 b0 b0 b0 b0 b0 3b b0 b0 b0 ba b0 0d 8a\n</code></pre>\n<p>As always, i hope it was helpful. If you encounter problems, please use the issue tracker on <a href=\"https://github.com/Jakeler/ble-serial\" rel=\"nofollow\">GitHub</a>.</p>\n\n          </div>"}, "last_serial": 6914528, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "ce13327c6698ee85de39456d53a1854d", "sha256": "9d0408de784f74d4a14f165d1c3ca742cddc61c41ce5d6acf69b25997b989d09"}, "downloads": -1, "filename": "ble_serial-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ce13327c6698ee85de39456d53a1854d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7108, "upload_time": "2019-12-09T18:37:17", "upload_time_iso_8601": "2019-12-09T18:37:17.191468Z", "url": "https://files.pythonhosted.org/packages/66/cc/e45a6e88c6ecd43f2f457a245676c335881f45599f00947f11db321bc436/ble_serial-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d764472f3b567f2ba69a2cd17c732f73", "sha256": "855cc81ecf94740b30b71af265c44f3c5aa5de603b53065f21e4f1f3cd396adf"}, "downloads": -1, "filename": "ble-serial-0.9.0.tar.gz", "has_sig": false, "md5_digest": "d764472f3b567f2ba69a2cd17c732f73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4602, "upload_time": "2019-12-09T18:37:19", "upload_time_iso_8601": "2019-12-09T18:37:19.498902Z", "url": "https://files.pythonhosted.org/packages/85/f2/f703480a06f4883d39b13f568145dbb4cfc494e8cfabf7d60d9c244540be/ble-serial-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "fa2f245213a16bb4ffd6447da8eb9fc0", "sha256": "9ed814044732ee4f5b9c5ad1feaa82ddfec74d7d4a8543e013eb61353d944f10"}, "downloads": -1, "filename": "ble_serial-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fa2f245213a16bb4ffd6447da8eb9fc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9638, "upload_time": "2019-12-19T22:42:59", "upload_time_iso_8601": "2019-12-19T22:42:59.270796Z", "url": "https://files.pythonhosted.org/packages/de/03/18991cd20849d6c48ce312e0fedf1636b59bc70039f3a15f59f839c216f1/ble_serial-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33c7dbd747678952a6deedf307c66e6c", "sha256": "91fa119376953259914e6aeb46da3b0494c26a321685eb03331378931bbf52be"}, "downloads": -1, "filename": "ble-serial-1.0.0.tar.gz", "has_sig": false, "md5_digest": "33c7dbd747678952a6deedf307c66e6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9627, "upload_time": "2019-12-19T22:43:01", "upload_time_iso_8601": "2019-12-19T22:43:01.796217Z", "url": "https://files.pythonhosted.org/packages/1c/7d/e6f0fa15e61a72f9ce84999ec5c234c5757330274f2fdf8c211e6cc269f3/ble-serial-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ff18c7515f78ebfa6ac839831ac0de6b", "sha256": "db99f3085c29d03afafe90a76d9427fcacee2b231eeba4f1fa293b9451ff92b2"}, "downloads": -1, "filename": "ble_serial-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ff18c7515f78ebfa6ac839831ac0de6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9771, "upload_time": "2019-12-19T22:47:00", "upload_time_iso_8601": "2019-12-19T22:47:00.542784Z", "url": "https://files.pythonhosted.org/packages/4d/82/9ff8737be017f10909bf3f516356ed09adeaec45dd3384c205113d804018/ble_serial-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff95fe440a64e2ebf555af17a31ec543", "sha256": "a23861d851fca3cfadbcc06ae518ad78af2940fda394af67926387ea1261a0b5"}, "downloads": -1, "filename": "ble-serial-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ff95fe440a64e2ebf555af17a31ec543", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9652, "upload_time": "2019-12-19T22:47:02", "upload_time_iso_8601": "2019-12-19T22:47:02.352908Z", "url": "https://files.pythonhosted.org/packages/e5/4a/1dd755f36258add30abfc6d9182ab39ca9f1c0daa19affa5aeebfdc462be/ble-serial-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ffd1049057b59cf7876dc5d04e48b3fa", "sha256": "c0eb42be3d74d11b594206b76b3c322e6c4ad8575876d6be96c6ba2f4846fb57"}, "downloads": -1, "filename": "ble_serial-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd1049057b59cf7876dc5d04e48b3fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9998, "upload_time": "2020-03-30T17:36:05", "upload_time_iso_8601": "2020-03-30T17:36:05.333375Z", "url": "https://files.pythonhosted.org/packages/61/05/cc377637c8344e51eb5c448b8a4f7587748f393529553f5c4b2ea6edd930/ble_serial-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55bff57c86cc66790ee446977c533872", "sha256": "ed934b0939d24e0f472aa856d8a600dfa81dff06114c6a19413c53ea775d50a9"}, "downloads": -1, "filename": "ble-serial-1.1.0.tar.gz", "has_sig": false, "md5_digest": "55bff57c86cc66790ee446977c533872", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9980, "upload_time": "2020-03-30T17:36:06", "upload_time_iso_8601": "2020-03-30T17:36:06.841055Z", "url": "https://files.pythonhosted.org/packages/a4/97/83c0e0193734851739a980608471f03d7605ed7d013bfa07ed23432d60eb/ble-serial-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffd1049057b59cf7876dc5d04e48b3fa", "sha256": "c0eb42be3d74d11b594206b76b3c322e6c4ad8575876d6be96c6ba2f4846fb57"}, "downloads": -1, "filename": "ble_serial-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd1049057b59cf7876dc5d04e48b3fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9998, "upload_time": "2020-03-30T17:36:05", "upload_time_iso_8601": "2020-03-30T17:36:05.333375Z", "url": "https://files.pythonhosted.org/packages/61/05/cc377637c8344e51eb5c448b8a4f7587748f393529553f5c4b2ea6edd930/ble_serial-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55bff57c86cc66790ee446977c533872", "sha256": "ed934b0939d24e0f472aa856d8a600dfa81dff06114c6a19413c53ea775d50a9"}, "downloads": -1, "filename": "ble-serial-1.1.0.tar.gz", "has_sig": false, "md5_digest": "55bff57c86cc66790ee446977c533872", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9980, "upload_time": "2020-03-30T17:36:06", "upload_time_iso_8601": "2020-03-30T17:36:06.841055Z", "url": "https://files.pythonhosted.org/packages/a4/97/83c0e0193734851739a980608471f03d7605ed7d013bfa07ed23432d60eb/ble-serial-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:06 2020"}