{"info": {"author": "Alex Markov", "author_email": "alex@markovs.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "====\ns3io\n====\n\nAbout\n-----\n\ns3io is a minimalistic python module which provides file object access to data on S3.\n\nAll data manipulations are done via temporary local files - so you will actually work with local temp file which is a file object with all its methods supported.\n\nJust keep in mind these facts:\n\n1. Reading: the whole file will be downloaded to local temporary location at entering the context.\n2. Writing: temp file will be provided at entering the context. Actual saving to S3 will be performed at exit from context. Thus such methods as ``flush`` will not influence the process of saving to S3.\n\nDependencies\n------------\n\n- `boto <https://github.com/boto/boto>`_\n\nExamples\n--------\n\ns3io is intended to be used via context manager only.\n\nThere are three ways to provide access to s3:\n\n1. Directly providing ``s3_connection``.\n2. Providing credentials: ``aws_access_key_id`` and ``aws_secret_access_key``.\n3. Providing ``profile_name``. This method is recommended to use. See `boto docs <http://boto.readthedocs.org/en/latest/boto_config_tut.html>`_ for more info.\n\nReading file using existing S3 connection::\n\n        import s3io\n\n        s3 = boto.connect_s3()\n        with s3io.open('s3://<bucket>/<key>', s3_connection=s3) as s3_file:\n            contents = s3_file.read()\n\nReading file using credentials::\n\n        credentials = dict(\n            aws_access_key_id='<ACCESS_KEY>',\n            aws_secret_access_key='<SECRET_KEY>',\n        )\n        with s3io.open('s3://<bucket>/<key>', **credentials) as s3_file:\n            contents = s3_file.read()\n\nReading file using profile::\n\n        with s3io.open('s3://<bucket>/<key>', profile_name='<profile>') as s3_file:\n            contents = s3_file.read()\n\nWriting file using profile::\n\n        with s3io.open('s3://<bucket>/<key>', mode='w', profile_name='<profile>') as s3_file:\n            s3_file.write('Some data.')\n\nExceptions\n----------\n\nPossible exceptions:\n\n1. s3io.BucketNotFoundError\n2. s3io.KeyNotFoundError\n3. s3io.UrlParseError", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/malexer/s3io", "keywords": "amazon aws s3 file", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "s3io", "package_url": "https://pypi.org/project/s3io/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/s3io/", "project_urls": {"Homepage": "https://github.com/malexer/s3io"}, "release_url": "https://pypi.org/project/s3io/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Access resources on Amazon S3 as a File Object.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>s3io is a minimalistic python module which provides file object access to data on S3.</p>\n<p>All data manipulations are done via temporary local files - so you will actually work with local temp file which is a file object with all its methods supported.</p>\n<p>Just keep in mind these facts:</p>\n<ol>\n<li>Reading: the whole file will be downloaded to local temporary location at entering the context.</li>\n<li>Writing: temp file will be provided at entering the context. Actual saving to S3 will be performed at exit from context. Thus such methods as <tt>flush</tt> will not influence the process of saving to S3.</li>\n</ol>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/boto/boto\" rel=\"nofollow\">boto</a></li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>s3io is intended to be used via context manager only.</p>\n<p>There are three ways to provide access to s3:</p>\n<ol>\n<li>Directly providing <tt>s3_connection</tt>.</li>\n<li>Providing credentials: <tt>aws_access_key_id</tt> and <tt>aws_secret_access_key</tt>.</li>\n<li>Providing <tt>profile_name</tt>. This method is recommended to use. See <a href=\"http://boto.readthedocs.org/en/latest/boto_config_tut.html\" rel=\"nofollow\">boto docs</a> for more info.</li>\n</ol>\n<p>Reading file using existing S3 connection:</p>\n<pre>import s3io\n\ns3 = boto.connect_s3()\nwith s3io.open('s3://&lt;bucket&gt;/&lt;key&gt;', s3_connection=s3) as s3_file:\n    contents = s3_file.read()\n</pre>\n<p>Reading file using credentials:</p>\n<pre>credentials = dict(\n    aws_access_key_id='&lt;ACCESS_KEY&gt;',\n    aws_secret_access_key='&lt;SECRET_KEY&gt;',\n)\nwith s3io.open('s3://&lt;bucket&gt;/&lt;key&gt;', **credentials) as s3_file:\n    contents = s3_file.read()\n</pre>\n<p>Reading file using profile:</p>\n<pre>with s3io.open('s3://&lt;bucket&gt;/&lt;key&gt;', profile_name='&lt;profile&gt;') as s3_file:\n    contents = s3_file.read()\n</pre>\n<p>Writing file using profile:</p>\n<pre>with s3io.open('s3://&lt;bucket&gt;/&lt;key&gt;', mode='w', profile_name='&lt;profile&gt;') as s3_file:\n    s3_file.write('Some data.')\n</pre>\n</div>\n<div id=\"exceptions\">\n<h2>Exceptions</h2>\n<p>Possible exceptions:</p>\n<ol>\n<li>s3io.BucketNotFoundError</li>\n<li>s3io.KeyNotFoundError</li>\n<li>s3io.UrlParseError</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1577811, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4e845d298526d65863c1a2cf04a96b25", "sha256": "900ab05ff902b20ab712cd64b2e5b4e6f49d935f28671a9e6472ea72602a1ad4"}, "downloads": -1, "filename": "s3io-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4e845d298526d65863c1a2cf04a96b25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2969, "upload_time": "2015-06-02T13:35:32", "upload_time_iso_8601": "2015-06-02T13:35:32.481021Z", "url": "https://files.pythonhosted.org/packages/f8/c7/8ec77ea83c9dab597cfa8037d4b10df7d4522b57522c79c3eb8999ade35a/s3io-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e78a222cdc51c57df0925baf6fad8fa0", "sha256": "b80687a7f448855fe76e2089d39df293bf810a4274882688e36237a22d148c71"}, "downloads": -1, "filename": "s3io-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e78a222cdc51c57df0925baf6fad8fa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2978, "upload_time": "2015-06-04T07:33:14", "upload_time_iso_8601": "2015-06-04T07:33:14.663158Z", "url": "https://files.pythonhosted.org/packages/53/4d/1787b26b76c5a01525e07626a64b3a77b8c77cd275e8cfd56e0d9ae97dd5/s3io-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e78a222cdc51c57df0925baf6fad8fa0", "sha256": "b80687a7f448855fe76e2089d39df293bf810a4274882688e36237a22d148c71"}, "downloads": -1, "filename": "s3io-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e78a222cdc51c57df0925baf6fad8fa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2978, "upload_time": "2015-06-04T07:33:14", "upload_time_iso_8601": "2015-06-04T07:33:14.663158Z", "url": "https://files.pythonhosted.org/packages/53/4d/1787b26b76c5a01525e07626a64b3a77b8c77cd275e8cfd56e0d9ae97dd5/s3io-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:37 2020"}