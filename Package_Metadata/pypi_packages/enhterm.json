{"info": {"author": "Nicu Tofan", "author_email": "nicu.tofan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# enhterm\n\nenhterm is Cmd-based framework for writing line-oriented command interpreters.\n\nIt provides a class that extends [cmd.Cmd](https://docs.python.org/3/library/cmd.html) \nand which is also intended to be inherited by a user class to create a shell.\n\nFunctionality provided by this package is split among mixins, allowing you\nto construct your own base class if EnhTerm is not suitable.\n\nAs with [cmd.Cmd](https://docs.python.org/3/library/cmd.html), the class\nconstructed as described above can be used like so:\n\n    from enhterm import EnhTerm\n    class ExampleShell(EnhTerm):\n        pass\n    \n    if __name__ == '__main__':\n        ExampleShell().cmdloop()\n\nWhat is included\n----------------\n\nEach of the elements below are implemented in a distinct \"mixin\" class,\nwhich mean that you can create your own combination using EnhTerm class as\na template.\n\n### Command\n\nAllows python strings to be executed as if the user typed the input at the\nprompt. This is the base for executing commands in a file.\n\n### Exit\n\nProvides the `exit` command that terminates command loop.\n\n### Help\n\nProvides the `help` command which prints information about\nthe use of the command while accounting for custom commands \nand shortcuts.\n\n### Log Level\n\nAllows changing logging verbosity by issuing commands like \n`set loglevel debug`. \n\n### Macro\n\nCan record, remove, list and execute previously recorded commands.\n\n### Messages\n\nDoes not expose any commands but provides the class with a standardized\nway of issuing messages distinct from the logging mechanism.\n\n### Run\n\nAllows executing multiple commands from a string or from a file.\n\n### Sub-commands\n\nCommands are usually identified by using the first word the user types.\nThis mixin allows for a more natural way of issuing commands like \n`new macro` instead of `macro new`. Other mixins then add subcommands\nin their `__init__` method.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyl1b/enhterm", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "enhterm", "package_url": "https://pypi.org/project/enhterm/", "platform": "", "project_url": "https://pypi.org/project/enhterm/", "project_urls": {"Homepage": "https://github.com/pyl1b/enhterm"}, "release_url": "https://pypi.org/project/enhterm/0.1.0/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "A Cmd-based framework for writing line-oriented command interpreters.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>enhterm</h1>\n<p>enhterm is Cmd-based framework for writing line-oriented command interpreters.</p>\n<p>It provides a class that extends <a href=\"https://docs.python.org/3/library/cmd.html\" rel=\"nofollow\">cmd.Cmd</a>\nand which is also intended to be inherited by a user class to create a shell.</p>\n<p>Functionality provided by this package is split among mixins, allowing you\nto construct your own base class if EnhTerm is not suitable.</p>\n<p>As with <a href=\"https://docs.python.org/3/library/cmd.html\" rel=\"nofollow\">cmd.Cmd</a>, the class\nconstructed as described above can be used like so:</p>\n<pre><code>from enhterm import EnhTerm\nclass ExampleShell(EnhTerm):\n    pass\n\nif __name__ == '__main__':\n    ExampleShell().cmdloop()\n</code></pre>\n<h2>What is included</h2>\n<p>Each of the elements below are implemented in a distinct \"mixin\" class,\nwhich mean that you can create your own combination using EnhTerm class as\na template.</p>\n<h3>Command</h3>\n<p>Allows python strings to be executed as if the user typed the input at the\nprompt. This is the base for executing commands in a file.</p>\n<h3>Exit</h3>\n<p>Provides the <code>exit</code> command that terminates command loop.</p>\n<h3>Help</h3>\n<p>Provides the <code>help</code> command which prints information about\nthe use of the command while accounting for custom commands\nand shortcuts.</p>\n<h3>Log Level</h3>\n<p>Allows changing logging verbosity by issuing commands like\n<code>set loglevel debug</code>.</p>\n<h3>Macro</h3>\n<p>Can record, remove, list and execute previously recorded commands.</p>\n<h3>Messages</h3>\n<p>Does not expose any commands but provides the class with a standardized\nway of issuing messages distinct from the logging mechanism.</p>\n<h3>Run</h3>\n<p>Allows executing multiple commands from a string or from a file.</p>\n<h3>Sub-commands</h3>\n<p>Commands are usually identified by using the first word the user types.\nThis mixin allows for a more natural way of issuing commands like\n<code>new macro</code> instead of <code>macro new</code>. Other mixins then add subcommands\nin their <code>__init__</code> method.</p>\n\n          </div>"}, "last_serial": 6105334, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "12845d3c22fe99c73f55008f5c509c1c", "sha256": "bc2a9d12ace73e73a5757d5ea762813670cd4ecc11f46a22b51545a363605aff"}, "downloads": -1, "filename": "enhterm-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "12845d3c22fe99c73f55008f5c509c1c", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.0", "size": 29022, "upload_time": "2019-11-09T10:25:53", "upload_time_iso_8601": "2019-11-09T10:25:53.258891Z", "url": "https://files.pythonhosted.org/packages/4b/c7/e0f2c616510afbbd4c4f27d80eedb762559c20c1659211b10466c2e112ab/enhterm-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a955a040785e3c3a1a3196152a62e4d", "sha256": "9210760b20d0eeda912ba5c70046e5b3d051ade4a3d25016730dedcc6c7da7a5"}, "downloads": -1, "filename": "enhterm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a955a040785e3c3a1a3196152a62e4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11620, "upload_time": "2019-11-09T10:25:55", "upload_time_iso_8601": "2019-11-09T10:25:55.656202Z", "url": "https://files.pythonhosted.org/packages/88/0e/6c7da819eecfd93df831c1b61f16383c0f134cdf0c170981156842f0ba02/enhterm-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12845d3c22fe99c73f55008f5c509c1c", "sha256": "bc2a9d12ace73e73a5757d5ea762813670cd4ecc11f46a22b51545a363605aff"}, "downloads": -1, "filename": "enhterm-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "12845d3c22fe99c73f55008f5c509c1c", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.0", "size": 29022, "upload_time": "2019-11-09T10:25:53", "upload_time_iso_8601": "2019-11-09T10:25:53.258891Z", "url": "https://files.pythonhosted.org/packages/4b/c7/e0f2c616510afbbd4c4f27d80eedb762559c20c1659211b10466c2e112ab/enhterm-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a955a040785e3c3a1a3196152a62e4d", "sha256": "9210760b20d0eeda912ba5c70046e5b3d051ade4a3d25016730dedcc6c7da7a5"}, "downloads": -1, "filename": "enhterm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6a955a040785e3c3a1a3196152a62e4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11620, "upload_time": "2019-11-09T10:25:55", "upload_time_iso_8601": "2019-11-09T10:25:55.656202Z", "url": "https://files.pythonhosted.org/packages/88/0e/6c7da819eecfd93df831c1b61f16383c0f134cdf0c170981156842f0ba02/enhterm-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:20 2020"}