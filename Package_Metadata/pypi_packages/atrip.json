{"info": {"author": "Rob McMullen", "author_email": "feedback@playermissile.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "=======\nATRip\n=======\n\nPython library for hierarchical filesystem parsing on Atari 8-bit and Apple ][\ndisk images. The successor to atrcopy, this is under heavy development and is\nstill in a beta state. It is the basis for disk image support in `Omnivore 2\n<https://github.com/robmcmullen/omnivore>`_.\n\nPronounced \"uh-trip\", the name is a happy coincidence that a dictionary word\nexists that is the quasi-portmanteau of \"ATR\" (the Atari 8 bit disk image\ncontainer) & \"rip\" (extracting stuff from images). The actual word is a\nnautical term: \"atrip\" as in \"the anchor is atrip\", meaning the ship's anchor\nis off the bottom. I have no particular affinity for ships, but that I had some\njustification in the portmanteau is enough for me.\n\n.. contents:: **Contents**\n\nPrerequisites\n=============\n\nPython\n------\n\nSupported Python versions:\n\n* Python 3.6 (and later)\n\nRuntime Dependencies\n---------------------\n\n* numpy\n* jsonpickle\n* lz4\n\nIt will be automatically installed when installing with ``pip`` as described\nbelow.\n\nDevelopment Dependencies\n------------------------\n\n* pytest\n* pytest-cov (optional)\n\nThe test suite uses pytest and pytest-cov, but these are not required for\nnormal installation.\n\nInstallation\n============\n\n``ATRip`` is available in the `PyPI <https://pypi.org/atrip/>`_\nand installable using ``pip``::\n\n    pip install atrip\n\nLinux and macOS note: if numpy needs to be installed on your system, it may be\ncompiled from source which can take several minutes.\n\nFeatures\n========\n\n* list contents of disk images\n* copy files to and from disk images\n* delete files from disk images\n* create new disk images\n* concatenate binary data together into a file on the disk image\n* compile assembly source into binary files if `pyatasm <https://pypi.org/pyatasm>`_ is installed\n\n\nSupported Formats\n=================\n\nSupported Disk Image Types\n--------------------------\n\n* ``XFD``: XFormer images, basically raw disk dumps\n* ``ATR``: Nick Kennedy's disk image format; includes 16 byte header\n* ``DCM``: Disk Communicator images, Bob Puff's compression format for Atari disk images\n* ``CAS``: Atari cassette images\n* ``DSK``: Apple ][ DOS 3.3 disk image; raw sector dump\n\nSupported File System Formats\n-----------------------------\n\n+----------------+-------------+---------+-------+-------------------+\n| File System    | Platform    | Read    | Write | Status            |\n+================+=============+=========+=======+===================+\n| DOS 2 (90K)    | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 2 (180K)   | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 2.5 (130K) | Atari 8-bit | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 3 (130K)   | Atari 8-bit | No      | No    | Unimplemented     |\n+----------------+-------------+---------+-------+-------------------+\n| SpartaDOS      | Atari 8-bit | No      | No    | Under development |\n+----------------+-------------+---------+-------+-------------------+\n| MyDOS          | Atari 8-bit | Partial | No    | Under development |\n+----------------+-------------+---------+-------+-------------------+\n| DOS 3.3        | Apple ][    | Yes     | Yes   | Fully supported   |\n+----------------+-------------+---------+-------+-------------------+\n| ProDOS 8       | Apple ][    | No      | No    | Unimplemented     |\n+----------------+-------------+---------+-------+-------------------+\n\n\nOther Supported Formats\n-----------------------\n\n+----------+----------------------------------+---------+-------+-----------------+\n| Format   | Platform/description             | Read    | Write | Status          |\n+==========+==================================+=========+=======+=================+\n| ``.xex`` | Atari 8-bit executable files     | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n| KBoot    | Atari 8-bit ``xex`` in boot disk | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n| ``.car`` | Atari 8-bit cartridge images     | Yes     | No    | Read only       |\n+----------+----------------------------------+---------+-------+-----------------+\n| BSAVE    | Apple ][ ``BSAVE`` data          | Yes     | Yes   | Fully supported |\n+----------+----------------------------------+---------+-------+-----------------+\n\n**Note:** Atari ROM cartridges are supported in both both plain binary and\natari800 ``.car`` format\n\n\nArchives\n-----------------\n\nArchives containing multiple disk images are supported, where each disk image\nwithin the archive will be given a disk number and is addressable using that\nprefix.\n\n+---------------------+----------+------+-------+------------------------------+\n| Container           | File Ext | Read | Write | Status                       |\n+=====================+==========+======+=======+==============================+\n| Zip File            | .zip     | Yes  | Yes   | Fully supported              |\n+---------------------+----------+------+-------+------------------------------+\n| Tar File            | .tar     | Yes  | Yes   | Fully supported              |\n+---------------------+----------+------+-------+------------------------------+\n\nArchives may also be compressed with any of the general purpose compression\nformats listed below.\n\n\nSupported Compression Formats\n---------------------------------------\n\nCompression is supported transparently, so any type of disk image compressed\nwith any of the following formats can be used directly, without first\ndecompressing it before running ``ATRip``.\n\nChaining is supported to an arbitrary depth, meaning that one compression\nalgorithm can be applied to the output of another. This is not practical except\nin limited cases, as in a Disk Communicator image that is subsequently gzipped\n(image.dcm.gz). But cases that actually make compression worse will be handled\nas well, like image.gz.bz2.xz.bz2.gz.gz.gz.\n\n\n+---------------------+------------+------+-------+------------------------------+\n| Compression Format  | File Ext   | Read | Write | Status                       |\n+=====================+============+======+=======+==============================+\n| gzip                | .gz        | Yes  | Yes   | Fully supported              |\n+---------------------+------------+------+-------+------------------------------+\n| bzip2               | .bz2       | Yes  | Yes   | Fully supported              |\n+---------------------+------------+------+-------+------------------------------+\n| lzma                | .xz, .lzma | Yes  | Yes   | Fully supported              |\n+---------------------+------------+------+-------+------------------------------+\n| lzw (Unix compress) | .Z         | Yes  | No    | Read only [#]_               |\n+---------------------+------------+------+-------+------------------------------+\n| lz4                 | .lz4       | Yes  | Yes   | Fully supported              |\n+---------------------+------------+------+-------+------------------------------+\n| Disk Communicator   | .dcm       | Yes  | Yes   | Atari images only [#]_       |\n+---------------------+------------+------+-------+------------------------------+\n\n.. [#] Contains code from the\n   `BSD-licensed python implementation <https://github.com/umeat/unlzw>`_\n   of Mark Adler's reference C implementation of unlzw. See LICENSE.unlzw in the\n   source distribution for more details.\n\n.. [#] Not general purpose compression; Atari 720 or 1040 sector disk images only.\n   Contains my own python reimplementation of the DCM algorithms based on the\n   `GPL code in acvt <http://ftp.pigwa.net/stuff/collections/holmes%20cd/Holmes%202/PC%20Atari%20Programming%20Utils/Acvt%20v1.04/index.html>`_\n\n\nSegment Structure\n==================\n\n::\n\n    Collection:      example.atr: plain file\n    Container:          D1: 92176 bytes, compression=none\n    Header:                 ATR Header (16 bytes)\n    DiskImage:              Atari SD (90K) Floppy Disk Image, size=92160, filesystem=Atari DOS 2\n    BootSegment:                Boot Sectors (384 bytes)\n    Segment:                        Boot Header (6 bytes)\n    Segment:                        Boot Code (378 bytes @ 0006)\n    VTOC:                       DOS2 SD VTOC (128 bytes)\n    Directory:                  Directory (1024 bytes)\n    Dirent:                         File #0  (.2.u. ) 004 DOS     SYS  035\n    FileType:                           DOS.SYS (4375 bytes) Unknown file type\n    Dirent:                         File #1  (.2.u. ) 039 DUP     SYS  054\n    AtariObjectFile:                    DUP.SYS (6708 bytes) Atari 8-bit Object File\n    ObjSegment:                             Segment #1 (6706 bytes)\n    Segment:                                    [$2949-$4376] (6702 bytes)\n\n\n\nReferences\n==========\n\n* http://www.atariarchives.org/dere/chapt09.php\n* http://atari.kensclassics.org/dos.htm\n* http://www.crowcastle.net/preston/atari/\n* http://www.atarimax.com/jindroush.atari.org/afmtatr.html\n* https://archive.org/details/Beneath_Apple_DOS_OCR\n\nRelated Atari Projects\n----------------------\n\n* `atrcopy <http://pypi.org/atrcopy>`_: Precursor to ``ATRip``; stable and includes command line utility to manipulate disk images.\n* `franny <http://atari8.sourceforge.net/franny.html>`_: (C, macOS/linux) Command line program to manage Atari DOS 2 and SpartaDOS II image and file systems\n* `dir2atr <http://www.horus.com/~hias/atari/>`_: (Win) Suite of command line programs to manage Atari disk images and DOS 2/MyDOS file systems\n* `atadim <http://raster.infos.cz/atari/forpc/atadim.htm>`_: (Win) Graphical program to manage Atari disk images and DOS 2/MyDOS file systems\n\nRelated Apple Projects\n----------------------\n\nTurns out there are a ton of Apple ][ disk image viewers and editors! I was pointed to the list from the `diskii project <https://github.com/zellyn/diskii>`_, so I've included most of that list here.\n\n* `a2disk <https://github.com/jtauber/a2disk>`_ (Python 3) DOS 3.3 reader and Applesoft BASIC detokenizer\n* `cppo <https://github.com/RasppleII/a2server/blob/master/scripts/tools/cppo>`_ (Python) a script from the `a2server <http://ivanx.com/a2server/>`_ project to read DOS 3.3 and ProDOS disk images\n* `Driv3rs <https://github.com/thecompu/Driv3rs>`_ (Python) Apple III SOS DSK image utility\n* `c2d <https://github.com/datajerk/c2d>`_: (C, Win/macOS/linux) Command line program to create bootable Apple disk images (no file system)\n* `Apple Commander <http://applecommander.sourceforge.net/>`_: (Java) Command line program to manage Apple disk images and file systems\n* `Cider Press <http://a2ciderpress.com/>`_: (Win) Graphical program to manage Apple disk images and file systems\n* `diskii <https://github.com/zellyn/diskii>`_: (Go) Command line tool, under development\n* `Cadius <http://brutaldeluxe.fr/products/crossdevtools/cadius/index.html>`_ (Win) Brutal Deluxe's commandline tools\n* `dsktool <https://github.com/cybernesto/dsktool.rb>`_ (Ruby)\n* `Apple II Disk Tools <https://github.com/cmosher01/Apple-II-Disk-Tools>`_ (C)\n* `libA2 <https://github.com/madsen/perl-libA2>`_ (Perl)\n* `AppleSAWS <https://github.com/markdavidlong/AppleSAWS>`_ (Qt, Win/macOS/linux) very cool looking GUI\n* `DiskBrowser <https://github.com/dmolony/DiskBrowser>`_ (Java) GUI tool that even displays Wizardry levels and VisiCalc files!\n* `dos33fsprogs <https://github.com/deater/dos33fsprogs>`_ (C)\n* `apple2-disk-util <https://github.com/slotek/apple2-disk-util>`_ (Ruby)\n* `dsk2nib <https://github.com/slotek/dsk2nib>`_ (C)\n* `standard-delivery <https://github.com/peterferrie/standard-delivery>`_ (6502 assembly) Apple II single-sector fast boot-loader", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robmcmullen/atrip", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "atrip", "package_url": "https://pypi.org/project/atrip/", "platform": "", "project_url": "https://pypi.org/project/atrip/", "project_urls": {"Homepage": "https://github.com/robmcmullen/atrip"}, "release_url": "https://pypi.org/project/atrip/0.5.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Utility to manage file systems on retro computer disk images", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library for hierarchical filesystem parsing on Atari 8-bit and Apple ][\ndisk images. The successor to atrcopy, this is under heavy development and is\nstill in a beta state. It is the basis for disk image support in <a href=\"https://github.com/robmcmullen/omnivore\" rel=\"nofollow\">Omnivore 2</a>.</p>\n<p>Pronounced \u201cuh-trip\u201d, the name is a happy coincidence that a dictionary word\nexists that is the quasi-portmanteau of \u201cATR\u201d (the Atari 8 bit disk image\ncontainer) &amp; \u201crip\u201d (extracting stuff from images). The actual word is a\nnautical term: \u201catrip\u201d as in \u201cthe anchor is atrip\u201d, meaning the ship\u2019s anchor\nis off the bottom. I have no particular affinity for ships, but that I had some\njustification in the portmanteau is enough for me.</p>\n<div id=\"contents\">\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href=\"#prerequisites\" id=\"id5\" rel=\"nofollow\">Prerequisites</a><ul>\n<li><a href=\"#python\" id=\"id6\" rel=\"nofollow\">Python</a></li>\n<li><a href=\"#runtime-dependencies\" id=\"id7\" rel=\"nofollow\">Runtime Dependencies</a></li>\n<li><a href=\"#development-dependencies\" id=\"id8\" rel=\"nofollow\">Development Dependencies</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id9\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#features\" id=\"id10\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#supported-formats\" id=\"id11\" rel=\"nofollow\">Supported Formats</a><ul>\n<li><a href=\"#supported-disk-image-types\" id=\"id12\" rel=\"nofollow\">Supported Disk Image Types</a></li>\n<li><a href=\"#supported-file-system-formats\" id=\"id13\" rel=\"nofollow\">Supported File System Formats</a></li>\n<li><a href=\"#other-supported-formats\" id=\"id14\" rel=\"nofollow\">Other Supported Formats</a></li>\n<li><a href=\"#archives\" id=\"id15\" rel=\"nofollow\">Archives</a></li>\n<li><a href=\"#supported-compression-formats\" id=\"id16\" rel=\"nofollow\">Supported Compression Formats</a></li>\n</ul>\n</li>\n<li><a href=\"#segment-structure\" id=\"id17\" rel=\"nofollow\">Segment Structure</a></li>\n<li><a href=\"#references\" id=\"id18\" rel=\"nofollow\">References</a><ul>\n<li><a href=\"#related-atari-projects\" id=\"id19\" rel=\"nofollow\">Related Atari Projects</a></li>\n<li><a href=\"#related-apple-projects\" id=\"id20\" rel=\"nofollow\">Related Apple Projects</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"prerequisites\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Prerequisites</a></h2>\n<div id=\"python\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Python</a></h3>\n<p>Supported Python versions:</p>\n<ul>\n<li>Python 3.6 (and later)</li>\n</ul>\n</div>\n<div id=\"runtime-dependencies\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Runtime Dependencies</a></h3>\n<ul>\n<li>numpy</li>\n<li>jsonpickle</li>\n<li>lz4</li>\n</ul>\n<p>It will be automatically installed when installing with <tt>pip</tt> as described\nbelow.</p>\n</div>\n<div id=\"development-dependencies\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Development Dependencies</a></h3>\n<ul>\n<li>pytest</li>\n<li>pytest-cov (optional)</li>\n</ul>\n<p>The test suite uses pytest and pytest-cov, but these are not required for\nnormal installation.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Installation</a></h2>\n<p><tt>ATRip</tt> is available in the <a href=\"https://pypi.org/atrip/\" rel=\"nofollow\">PyPI</a>\nand installable using <tt>pip</tt>:</p>\n<pre>pip install atrip\n</pre>\n<p>Linux and macOS note: if numpy needs to be installed on your system, it may be\ncompiled from source which can take several minutes.</p>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>list contents of disk images</li>\n<li>copy files to and from disk images</li>\n<li>delete files from disk images</li>\n<li>create new disk images</li>\n<li>concatenate binary data together into a file on the disk image</li>\n<li>compile assembly source into binary files if <a href=\"https://pypi.org/pyatasm\" rel=\"nofollow\">pyatasm</a> is installed</li>\n</ul>\n</div>\n<div id=\"supported-formats\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Supported Formats</a></h2>\n<div id=\"supported-disk-image-types\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Supported Disk Image Types</a></h3>\n<ul>\n<li><tt>XFD</tt>: XFormer images, basically raw disk dumps</li>\n<li><tt>ATR</tt>: Nick Kennedy\u2019s disk image format; includes 16 byte header</li>\n<li><tt>DCM</tt>: Disk Communicator images, Bob Puff\u2019s compression format for Atari disk images</li>\n<li><tt>CAS</tt>: Atari cassette images</li>\n<li><tt>DSK</tt>: Apple ][ DOS 3.3 disk image; raw sector dump</li>\n</ul>\n</div>\n<div id=\"supported-file-system-formats\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Supported File System Formats</a></h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>File System</th>\n<th>Platform</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>DOS 2 (90K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 2 (180K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 2.5 (130K)</td>\n<td>Atari 8-bit</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>DOS 3 (130K)</td>\n<td>Atari 8-bit</td>\n<td>No</td>\n<td>No</td>\n<td>Unimplemented</td>\n</tr>\n<tr><td>SpartaDOS</td>\n<td>Atari 8-bit</td>\n<td>No</td>\n<td>No</td>\n<td>Under development</td>\n</tr>\n<tr><td>MyDOS</td>\n<td>Atari 8-bit</td>\n<td>Partial</td>\n<td>No</td>\n<td>Under development</td>\n</tr>\n<tr><td>DOS 3.3</td>\n<td>Apple ][</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>ProDOS 8</td>\n<td>Apple ][</td>\n<td>No</td>\n<td>No</td>\n<td>Unimplemented</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"other-supported-formats\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Other Supported Formats</a></h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Format</th>\n<th>Platform/description</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>.xex</tt></td>\n<td>Atari 8-bit executable files</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>KBoot</td>\n<td>Atari 8-bit <tt>xex</tt> in boot disk</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td><tt>.car</tt></td>\n<td>Atari 8-bit cartridge images</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only</td>\n</tr>\n<tr><td>BSAVE</td>\n<td>Apple ][ <tt>BSAVE</tt> data</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> Atari ROM cartridges are supported in both both plain binary and\natari800 <tt>.car</tt> format</p>\n</div>\n<div id=\"archives\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Archives</a></h3>\n<p>Archives containing multiple disk images are supported, where each disk image\nwithin the archive will be given a disk number and is addressable using that\nprefix.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Container</th>\n<th>File Ext</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Zip File</td>\n<td>.zip</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>Tar File</td>\n<td>.tar</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n</tbody>\n</table>\n<p>Archives may also be compressed with any of the general purpose compression\nformats listed below.</p>\n</div>\n<div id=\"supported-compression-formats\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Supported Compression Formats</a></h3>\n<p>Compression is supported transparently, so any type of disk image compressed\nwith any of the following formats can be used directly, without first\ndecompressing it before running <tt>ATRip</tt>.</p>\n<p>Chaining is supported to an arbitrary depth, meaning that one compression\nalgorithm can be applied to the output of another. This is not practical except\nin limited cases, as in a Disk Communicator image that is subsequently gzipped\n(image.dcm.gz). But cases that actually make compression worse will be handled\nas well, like image.gz.bz2.xz.bz2.gz.gz.gz.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Compression Format</th>\n<th>File Ext</th>\n<th>Read</th>\n<th>Write</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>gzip</td>\n<td>.gz</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>bzip2</td>\n<td>.bz2</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>lzma</td>\n<td>.xz, .lzma</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>lzw (Unix compress)</td>\n<td>.Z</td>\n<td>Yes</td>\n<td>No</td>\n<td>Read only <a href=\"#id3\" id=\"id1\" rel=\"nofollow\">[1]</a></td>\n</tr>\n<tr><td>lz4</td>\n<td>.lz4</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Fully supported</td>\n</tr>\n<tr><td>Disk Communicator</td>\n<td>.dcm</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Atari images only <a href=\"#id4\" id=\"id2\" rel=\"nofollow\">[2]</a></td>\n</tr>\n</tbody>\n</table>\n<table id=\"id3\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Contains code from the\n<a href=\"https://github.com/umeat/unlzw\" rel=\"nofollow\">BSD-licensed python implementation</a>\nof Mark Adler\u2019s reference C implementation of unlzw. See LICENSE.unlzw in the\nsource distribution for more details.</td></tr>\n</tbody>\n</table>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td>Not general purpose compression; Atari 720 or 1040 sector disk images only.\nContains my own python reimplementation of the DCM algorithms based on the\n<a href=\"http://ftp.pigwa.net/stuff/collections/holmes%20cd/Holmes%202/PC%20Atari%20Programming%20Utils/Acvt%20v1.04/index.html\" rel=\"nofollow\">GPL code in acvt</a></td></tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"segment-structure\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Segment Structure</a></h2>\n<pre>Collection:      example.atr: plain file\nContainer:          D1: 92176 bytes, compression=none\nHeader:                 ATR Header (16 bytes)\nDiskImage:              Atari SD (90K) Floppy Disk Image, size=92160, filesystem=Atari DOS 2\nBootSegment:                Boot Sectors (384 bytes)\nSegment:                        Boot Header (6 bytes)\nSegment:                        Boot Code (378 bytes @ 0006)\nVTOC:                       DOS2 SD VTOC (128 bytes)\nDirectory:                  Directory (1024 bytes)\nDirent:                         File #0  (.2.u. ) 004 DOS     SYS  035\nFileType:                           DOS.SYS (4375 bytes) Unknown file type\nDirent:                         File #1  (.2.u. ) 039 DUP     SYS  054\nAtariObjectFile:                    DUP.SYS (6708 bytes) Atari 8-bit Object File\nObjSegment:                             Segment #1 (6706 bytes)\nSegment:                                    [$2949-$4376] (6702 bytes)\n</pre>\n</div>\n<div id=\"references\">\n<h2><a href=\"#id18\" rel=\"nofollow\">References</a></h2>\n<ul>\n<li><a href=\"http://www.atariarchives.org/dere/chapt09.php\" rel=\"nofollow\">http://www.atariarchives.org/dere/chapt09.php</a></li>\n<li><a href=\"http://atari.kensclassics.org/dos.htm\" rel=\"nofollow\">http://atari.kensclassics.org/dos.htm</a></li>\n<li><a href=\"http://www.crowcastle.net/preston/atari/\" rel=\"nofollow\">http://www.crowcastle.net/preston/atari/</a></li>\n<li><a href=\"http://www.atarimax.com/jindroush.atari.org/afmtatr.html\" rel=\"nofollow\">http://www.atarimax.com/jindroush.atari.org/afmtatr.html</a></li>\n<li><a href=\"https://archive.org/details/Beneath_Apple_DOS_OCR\" rel=\"nofollow\">https://archive.org/details/Beneath_Apple_DOS_OCR</a></li>\n</ul>\n<div id=\"related-atari-projects\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Related Atari Projects</a></h3>\n<ul>\n<li><a href=\"http://pypi.org/atrcopy\" rel=\"nofollow\">atrcopy</a>: Precursor to <tt>ATRip</tt>; stable and includes command line utility to manipulate disk images.</li>\n<li><a href=\"http://atari8.sourceforge.net/franny.html\" rel=\"nofollow\">franny</a>: (C, macOS/linux) Command line program to manage Atari DOS 2 and SpartaDOS II image and file systems</li>\n<li><a href=\"http://www.horus.com/~hias/atari/\" rel=\"nofollow\">dir2atr</a>: (Win) Suite of command line programs to manage Atari disk images and DOS 2/MyDOS file systems</li>\n<li><a href=\"http://raster.infos.cz/atari/forpc/atadim.htm\" rel=\"nofollow\">atadim</a>: (Win) Graphical program to manage Atari disk images and DOS 2/MyDOS file systems</li>\n</ul>\n</div>\n<div id=\"related-apple-projects\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Related Apple Projects</a></h3>\n<p>Turns out there are a ton of Apple ][ disk image viewers and editors! I was pointed to the list from the <a href=\"https://github.com/zellyn/diskii\" rel=\"nofollow\">diskii project</a>, so I\u2019ve included most of that list here.</p>\n<ul>\n<li><a href=\"https://github.com/jtauber/a2disk\" rel=\"nofollow\">a2disk</a> (Python 3) DOS 3.3 reader and Applesoft BASIC detokenizer</li>\n<li><a href=\"https://github.com/RasppleII/a2server/blob/master/scripts/tools/cppo\" rel=\"nofollow\">cppo</a> (Python) a script from the <a href=\"http://ivanx.com/a2server/\" rel=\"nofollow\">a2server</a> project to read DOS 3.3 and ProDOS disk images</li>\n<li><a href=\"https://github.com/thecompu/Driv3rs\" rel=\"nofollow\">Driv3rs</a> (Python) Apple III SOS DSK image utility</li>\n<li><a href=\"https://github.com/datajerk/c2d\" rel=\"nofollow\">c2d</a>: (C, Win/macOS/linux) Command line program to create bootable Apple disk images (no file system)</li>\n<li><a href=\"http://applecommander.sourceforge.net/\" rel=\"nofollow\">Apple Commander</a>: (Java) Command line program to manage Apple disk images and file systems</li>\n<li><a href=\"http://a2ciderpress.com/\" rel=\"nofollow\">Cider Press</a>: (Win) Graphical program to manage Apple disk images and file systems</li>\n<li><a href=\"https://github.com/zellyn/diskii\" rel=\"nofollow\">diskii</a>: (Go) Command line tool, under development</li>\n<li><a href=\"http://brutaldeluxe.fr/products/crossdevtools/cadius/index.html\" rel=\"nofollow\">Cadius</a> (Win) Brutal Deluxe\u2019s commandline tools</li>\n<li><a href=\"https://github.com/cybernesto/dsktool.rb\" rel=\"nofollow\">dsktool</a> (Ruby)</li>\n<li><a href=\"https://github.com/cmosher01/Apple-II-Disk-Tools\" rel=\"nofollow\">Apple II Disk Tools</a> (C)</li>\n<li><a href=\"https://github.com/madsen/perl-libA2\" rel=\"nofollow\">libA2</a> (Perl)</li>\n<li><a href=\"https://github.com/markdavidlong/AppleSAWS\" rel=\"nofollow\">AppleSAWS</a> (Qt, Win/macOS/linux) very cool looking GUI</li>\n<li><a href=\"https://github.com/dmolony/DiskBrowser\" rel=\"nofollow\">DiskBrowser</a> (Java) GUI tool that even displays Wizardry levels and VisiCalc files!</li>\n<li><a href=\"https://github.com/deater/dos33fsprogs\" rel=\"nofollow\">dos33fsprogs</a> (C)</li>\n<li><a href=\"https://github.com/slotek/apple2-disk-util\" rel=\"nofollow\">apple2-disk-util</a> (Ruby)</li>\n<li><a href=\"https://github.com/slotek/dsk2nib\" rel=\"nofollow\">dsk2nib</a> (C)</li>\n<li><a href=\"https://github.com/peterferrie/standard-delivery\" rel=\"nofollow\">standard-delivery</a> (6502 assembly) Apple II single-sector fast boot-loader</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5493251, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d4424df7223a8ad822a653b0b2878c4d", "sha256": "a3f00b87d602f433cee5f920211032ce85f2b1d4d74ca475788451278f3dbbc2"}, "downloads": -1, "filename": "atrip-0.1.tar.gz", "has_sig": false, "md5_digest": "d4424df7223a8ad822a653b0b2878c4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 376217, "upload_time": "2019-04-08T22:01:55", "upload_time_iso_8601": "2019-04-08T22:01:55.869225Z", "url": "https://files.pythonhosted.org/packages/38/8c/73c2add7562e6a4aaaa0066a95044026d21bd70fc3d2841745736f5696ad/atrip-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5dd0614e1d5861d976926a0fae5a6118", "sha256": "5328132fadace9eee57691c2b57c24605a3a02d4090965642547dc612ce15325"}, "downloads": -1, "filename": "atrip-0.2.tar.gz", "has_sig": false, "md5_digest": "5dd0614e1d5861d976926a0fae5a6118", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 613595, "upload_time": "2019-06-02T18:11:56", "upload_time_iso_8601": "2019-06-02T18:11:56.899642Z", "url": "https://files.pythonhosted.org/packages/86/0f/288e907f6c042fc342b7cc7ef5ee61c52b18b31669d0495f544376c6646c/atrip-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b7be982435d38438cdc24f661fef9641", "sha256": "ca9969274377a64ee8a76d61d1e83ffa67e74500571da07d3b4f3418d736e625"}, "downloads": -1, "filename": "atrip-0.3.tar.gz", "has_sig": false, "md5_digest": "b7be982435d38438cdc24f661fef9641", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 613597, "upload_time": "2019-06-02T19:05:42", "upload_time_iso_8601": "2019-06-02T19:05:42.501242Z", "url": "https://files.pythonhosted.org/packages/10/44/5cb0107a0bc32c770ee5e48e36647cbb4e05a2b0692fa384402b9a36567a/atrip-0.3.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "158c4e04546862ab78499fccfaf35c4c", "sha256": "7c4027dfeae3de7e01e90f4b2f5608fc342b7740fbe41c8394afb9241c4f8f40"}, "downloads": -1, "filename": "atrip-0.4.1.tar.gz", "has_sig": false, "md5_digest": "158c4e04546862ab78499fccfaf35c4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 616673, "upload_time": "2019-06-14T06:12:02", "upload_time_iso_8601": "2019-06-14T06:12:02.657639Z", "url": "https://files.pythonhosted.org/packages/05/05/20fdb0e4bec7882c429afe9717d94e7fe9c627cd61c76dafa114bde1127f/atrip-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "86a573e779f3916d49261fa6c30057eb", "sha256": "20346f45a3694ffe9fc50ef6b8006e12f256d178b5263409c20f6aa2516818b7"}, "downloads": -1, "filename": "atrip-0.4.2.tar.gz", "has_sig": false, "md5_digest": "86a573e779f3916d49261fa6c30057eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 617067, "upload_time": "2019-07-01T18:46:59", "upload_time_iso_8601": "2019-07-01T18:46:59.832598Z", "url": "https://files.pythonhosted.org/packages/88/e5/0a3dc4f8002a54925158cf6b535498a1b33deeea795484e2fba3d0106533/atrip-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b2fba49525a0791df8aa95bec1336d8e", "sha256": "bcc7bc7849518fba628ac83e395864c4daf07870b55fed0604ecb3c29e95fc80"}, "downloads": -1, "filename": "atrip-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b2fba49525a0791df8aa95bec1336d8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 632533, "upload_time": "2019-07-05T22:19:34", "upload_time_iso_8601": "2019-07-05T22:19:34.528618Z", "url": "https://files.pythonhosted.org/packages/87/5c/c4b337126d9b2cebf947093c9b7eb215c3e3cab42ab7dd72250f3187e8e2/atrip-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2fba49525a0791df8aa95bec1336d8e", "sha256": "bcc7bc7849518fba628ac83e395864c4daf07870b55fed0604ecb3c29e95fc80"}, "downloads": -1, "filename": "atrip-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b2fba49525a0791df8aa95bec1336d8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 632533, "upload_time": "2019-07-05T22:19:34", "upload_time_iso_8601": "2019-07-05T22:19:34.528618Z", "url": "https://files.pythonhosted.org/packages/87/5c/c4b337126d9b2cebf947093c9b7eb215c3e3cab42ab7dd72250f3187e8e2/atrip-0.5.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:31 2020"}