{"info": {"author": "Johnson Earls", "author_email": "johnson.earls@oracle.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.3", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: XML"], "description": "EasyXML presents a simplified view of an XML document.\n\nElements in the XML document, including the root-level document,\nare represented by EasyXML objects.  Each EasyXML object has a\n`_name` attribute holding the name of the element represented by\nthe EasyXML object, a dictionary called `_attrs` holding the element's\nattributes, and a sequence called `_content` holding the content\nof the element.  The `_content` sequence contains strings for the\ncharacter data within the element (with whitespace stripped from\nthe beginning and end), and other EasyXML objects for nested XML\nelements.\n\nThe content of the EasyXML object can be accessed directly as if it\nwere a sequence itself.  In addition, the element's attributes\nthemselves may be accessed by name on the EasyXML object.\n\nFor example, the XML fragment ``<zip code=\"12345\">Schenectady,\nNY</zip>`` would be returned as an EasyXML object where *name*.``_name``\nis ``'zip'``, *name*.``_attrs`` is ``{'code': '12345'}``, *name*.\n``_content`` is ``['Schenectady, NY']``, *name*.``code`` is ``'12345'``,\nand *name*.``[0]`` is ``'Schenectady, NY'``.\n\nUsage:\n\n::\n\n    # Import the EasyXML class\n    from easy_xml import EasyXML\n\n    # Parse the file-like object `stream` into an EasyXML structure.\n    xmldoc = EasyXML.parseXML(stream)\n\n    # Find the first ``<hello>`` node in the document.\n    # If it exists, record its content in the `hello` variable.\n    # If not, record ``world`` in `hello`, and create a new\n    # ``<hello>world</hello>`` XML element at the top of the document.\n\n    for element in xmldoc:\n        if isinstance(element,EasyXML) and element._name == 'hello':\n            hello = ' '.join(element._content)\n            break\n\n    if hello is None:\n        hello = 'world'\n        element = EasyXML('hello', content=[hello])\n        xmldoc._content.insert(0, element)\n\n    # Convert the EasyXML structure back into a valid XML document.\n    xmlfile = str(xmldoc)\n\nNotes:\n\n* Processing instructions and comments are ignored.\n* Only basic entity processing (``&lt;``, ``&gt;``, and ``&amp;``)\n  is performed.\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/darkfoxprime/python-easy_xml", "keywords": "xml", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "easy-xml", "package_url": "https://pypi.org/project/easy-xml/", "platform": "", "project_url": "https://pypi.org/project/easy-xml/", "project_urls": {"Homepage": "https://github.com/darkfoxprime/python-easy_xml"}, "release_url": "https://pypi.org/project/easy-xml/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "EasyXML is a simple object representation of an XML document.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>EasyXML presents a simplified view of an XML document.</p>\n<p>Elements in the XML document, including the root-level document,\nare represented by EasyXML objects.  Each EasyXML object has a\n<cite>_name</cite> attribute holding the name of the element represented by\nthe EasyXML object, a dictionary called <cite>_attrs</cite> holding the element\u2019s\nattributes, and a sequence called <cite>_content</cite> holding the content\nof the element.  The <cite>_content</cite> sequence contains strings for the\ncharacter data within the element (with whitespace stripped from\nthe beginning and end), and other EasyXML objects for nested XML\nelements.</p>\n<p>The content of the EasyXML object can be accessed directly as if it\nwere a sequence itself.  In addition, the element\u2019s attributes\nthemselves may be accessed by name on the EasyXML object.</p>\n<p>For example, the XML fragment <tt>&lt;zip <span class=\"pre\">code=\"12345\"&gt;Schenectady,</span>\n<span class=\"pre\">NY&lt;/zip&gt;</span></tt> would be returned as an EasyXML object where <em>name</em>.``_name``\nis <tt>'zip'</tt>, <em>name</em>.``_attrs`` is <tt>{'code': '12345'}</tt>, <em>name</em>.\n<tt>_content</tt> is <tt>['Schenectady, NY']</tt>, <em>name</em>.``code`` is <tt>'12345'</tt>,\nand <em>name</em>.``[0]`` is <tt>'Schenectady, NY'</tt>.</p>\n<p>Usage:</p>\n<pre># Import the EasyXML class\nfrom easy_xml import EasyXML\n\n# Parse the file-like object `stream` into an EasyXML structure.\nxmldoc = EasyXML.parseXML(stream)\n\n# Find the first ``&lt;hello&gt;`` node in the document.\n# If it exists, record its content in the `hello` variable.\n# If not, record ``world`` in `hello`, and create a new\n# ``&lt;hello&gt;world&lt;/hello&gt;`` XML element at the top of the document.\n\nfor element in xmldoc:\n    if isinstance(element,EasyXML) and element._name == 'hello':\n        hello = ' '.join(element._content)\n        break\n\nif hello is None:\n    hello = 'world'\n    element = EasyXML('hello', content=[hello])\n    xmldoc._content.insert(0, element)\n\n# Convert the EasyXML structure back into a valid XML document.\nxmlfile = str(xmldoc)\n</pre>\n<p>Notes:</p>\n<ul>\n<li>Processing instructions and comments are ignored.</li>\n<li>Only basic entity processing (<tt>&amp;lt;</tt>, <tt>&amp;gt;</tt>, and <tt>&amp;amp;</tt>)\nis performed.</li>\n</ul>\n\n          </div>"}, "last_serial": 4429809, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "82583c6a29b73e170c0fbaf3d3d2e14b", "sha256": "9d43dc7eada1fdfb8481f3a9f37d0d4200702ba3b7f06d6a12268b3cbd62d899"}, "downloads": -1, "filename": "easy_xml-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "82583c6a29b73e170c0fbaf3d3d2e14b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6403, "upload_time": "2018-10-30T02:28:15", "upload_time_iso_8601": "2018-10-30T02:28:15.259507Z", "url": "https://files.pythonhosted.org/packages/8f/68/66b8325f4573c3750494ec6dc8c0252e746c4d6b9cfbac725208cb11d1f1/easy_xml-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b0a701dbc86a89ee568acf54822db9f", "sha256": "811ae78947de36295614e033156406f28e631251ab71e0d53814b3e978eab580"}, "downloads": -1, "filename": "easy_xml-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3b0a701dbc86a89ee568acf54822db9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8508, "upload_time": "2018-10-30T02:28:17", "upload_time_iso_8601": "2018-10-30T02:28:17.455473Z", "url": "https://files.pythonhosted.org/packages/0e/b7/8ada47b23920655e89d90598e9577db6d1de08ddc6507d4d3bd9699dbae4/easy_xml-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82583c6a29b73e170c0fbaf3d3d2e14b", "sha256": "9d43dc7eada1fdfb8481f3a9f37d0d4200702ba3b7f06d6a12268b3cbd62d899"}, "downloads": -1, "filename": "easy_xml-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "82583c6a29b73e170c0fbaf3d3d2e14b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6403, "upload_time": "2018-10-30T02:28:15", "upload_time_iso_8601": "2018-10-30T02:28:15.259507Z", "url": "https://files.pythonhosted.org/packages/8f/68/66b8325f4573c3750494ec6dc8c0252e746c4d6b9cfbac725208cb11d1f1/easy_xml-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b0a701dbc86a89ee568acf54822db9f", "sha256": "811ae78947de36295614e033156406f28e631251ab71e0d53814b3e978eab580"}, "downloads": -1, "filename": "easy_xml-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3b0a701dbc86a89ee568acf54822db9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8508, "upload_time": "2018-10-30T02:28:17", "upload_time_iso_8601": "2018-10-30T02:28:17.455473Z", "url": "https://files.pythonhosted.org/packages/0e/b7/8ada47b23920655e89d90598e9577db6d1de08ddc6507d4d3bd9699dbae4/easy_xml-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:12 2020"}