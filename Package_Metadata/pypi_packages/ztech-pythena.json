{"info": {"author": "felipe.tancredo", "author_email": "felipetancredo@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# pythena\n\nThis is a simple python module that will allow you to query athena the same way the AWS Athena console would. It only requires a database name and query string.\n\n## Install\n```bash\npip install ztech-pythena\n```\n\n## Setup\nBe sure to set up your AWS authentication credentials. You can do so by using the aws cli and running\n```\npip install awscli\naws configure\n```\nMore help on configuring the aws cli here https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\n\n\n## Simple Usage\n\n```python\nimport pythena\n\nathena_client = pythena.Athena(\"mydatabase\") \n\n# Returns results as a pandas dataframe\ndf = athena_client.execute(\"select * from mytable\")\n\nprint(df.sample(n=2)) # Prints 2 rows from your dataframe\n```\n\n## Connect to Database\n```python\nimport pythena\n\n# Connect to a database\nathena_client = pythena.Athena(database=\"mydatabase\")\n# Connect to a database and override default aws region in your aws configuration\nathena_client = pythena.Athena(database=\"mydatabase\", region='us-east-1')\n\n```\n\n## athena_client.execute()\n```\nexecute(\n  query = 'SQL_QUERY',                 # Required\n  s3_output_url='FULL_S3_PATH',        # Optional (Format example: 's3://mybucket/mydir'\n  save_results=TRUE | FALSE            # Optional. Defaults to True only when 's3_output_url' is provided. If True, the s3 results will not be deleted and an tuple is returned with the execution_id.\n  run_async=TRUE | FALSE               # Optional. If True, allows you to run the query asynchronously. Returns execution_id, use get_result(execution_id) to fetch it when finished\n)\n```\n\n## Full Usage Examples\n\n```python\nimport pythena\n\n# Prints out all databases listed in the glue catalog\npythena.print_databases()\npythena.print_databases(region='us-east-1') # Overrides default region\n\n# Gets all databases and returns as a list\npythena.get_databases()\npythena.get_databases(region='us-east-1') # Overrides default region\n\n# Connect to a database\nathena_client = pythena.Athena(database=\"mydatabase\")\n\n# Prints out all tables in a database\nathena_client.print_tables()\n\n# Gets all tables in the database you are connected to and returns as a list\nathena_client.get_tables()\n\n# Execute a query\ndataframe = athena_client.execute(query=\"select * from my_table\") # Results are  returned as a dataframe\n\n# Execute a query and save results to s3\ndataframe = athena_client.execute(query=\"select * from my_table\", s3_output_url=\"s3://mybucket/mydir\") # Results are  returned as a dataframe\n\n# Get Execution Id and save results\ndataframe, execution_id = athena_client.execute(query=\"select * from my_table\", save_results=True)\n\n# Execute a query asynchronously\nexecution_id = athena_client.execute(query=\"select * from my_table\", run_async=True) # Returns just the execution id \ndataframe = athena_client.get_result(execution_id) # Will report errors if query failed or let you know if it is still running\n\n# With asynchronous queries, can check status, get error, or cancel\npythena.get_query_status(execution_id)\npythena.get_query_error(execution_id)\npythena.cancel_query(execution_id)\n\n```\n\n## Note\nBy default, when executing athena queries, via boto3 or the AWS athena console, the results are saved in an s3 bucket. This module by default, assuming a successful execution, will delete the s3 result file to keep s3 clean. If an s3_output_url is provided, then the results will be saved to that location and will not be deleted.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ztech-company/pythena", "keywords": "", "license": "Mozilla Public License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "ztech-pythena", "package_url": "https://pypi.org/project/ztech-pythena/", "platform": "", "project_url": "https://pypi.org/project/ztech-pythena/", "project_urls": {"Homepage": "https://github.com/ztech-company/pythena"}, "release_url": "https://pypi.org/project/ztech-pythena/0.0.3/", "requires_dist": ["pandas (>=0.22.0)", "boto3 (>=1.9.90)", "botocore (>=1.12.90)", "retrying (>=1.3.3)"], "requires_python": "", "summary": "A simple athena wrapper (forked from chris.pruitt) leveraging boto3 to execute queries and return results while only requiring a database and a query string.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pythena</h1>\n<p>This is a simple python module that will allow you to query athena the same way the AWS Athena console would. It only requires a database name and query string.</p>\n<h2>Install</h2>\n<pre>pip install ztech-pythena\n</pre>\n<h2>Setup</h2>\n<p>Be sure to set up your AWS authentication credentials. You can do so by using the aws cli and running</p>\n<pre><code>pip install awscli\naws configure\n</code></pre>\n<p>More help on configuring the aws cli here <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html\" rel=\"nofollow\">https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html</a></p>\n<h2>Simple Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pythena</span>\n\n<span class=\"n\">athena_client</span> <span class=\"o\">=</span> <span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">Athena</span><span class=\"p\">(</span><span class=\"s2\">\"mydatabase\"</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Returns results as a pandas dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"select * from mytable\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\"># Prints 2 rows from your dataframe</span>\n</pre>\n<h2>Connect to Database</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pythena</span>\n\n<span class=\"c1\"># Connect to a database</span>\n<span class=\"n\">athena_client</span> <span class=\"o\">=</span> <span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">Athena</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"mydatabase\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Connect to a database and override default aws region in your aws configuration</span>\n<span class=\"n\">athena_client</span> <span class=\"o\">=</span> <span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">Athena</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"mydatabase\"</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'us-east-1'</span><span class=\"p\">)</span>\n</pre>\n<h2>athena_client.execute()</h2>\n<pre><code>execute(\n  query = 'SQL_QUERY',                 # Required\n  s3_output_url='FULL_S3_PATH',        # Optional (Format example: 's3://mybucket/mydir'\n  save_results=TRUE | FALSE            # Optional. Defaults to True only when 's3_output_url' is provided. If True, the s3 results will not be deleted and an tuple is returned with the execution_id.\n  run_async=TRUE | FALSE               # Optional. If True, allows you to run the query asynchronously. Returns execution_id, use get_result(execution_id) to fetch it when finished\n)\n</code></pre>\n<h2>Full Usage Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pythena</span>\n\n<span class=\"c1\"># Prints out all databases listed in the glue catalog</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">print_databases</span><span class=\"p\">()</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">print_databases</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'us-east-1'</span><span class=\"p\">)</span> <span class=\"c1\"># Overrides default region</span>\n\n<span class=\"c1\"># Gets all databases and returns as a list</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">get_databases</span><span class=\"p\">()</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">get_databases</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'us-east-1'</span><span class=\"p\">)</span> <span class=\"c1\"># Overrides default region</span>\n\n<span class=\"c1\"># Connect to a database</span>\n<span class=\"n\">athena_client</span> <span class=\"o\">=</span> <span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">Athena</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"mydatabase\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prints out all tables in a database</span>\n<span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">print_tables</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Gets all tables in the database you are connected to and returns as a list</span>\n<span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">get_tables</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Execute a query</span>\n<span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"select * from my_table\"</span><span class=\"p\">)</span> <span class=\"c1\"># Results are  returned as a dataframe</span>\n\n<span class=\"c1\"># Execute a query and save results to s3</span>\n<span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"select * from my_table\"</span><span class=\"p\">,</span> <span class=\"n\">s3_output_url</span><span class=\"o\">=</span><span class=\"s2\">\"s3://mybucket/mydir\"</span><span class=\"p\">)</span> <span class=\"c1\"># Results are  returned as a dataframe</span>\n\n<span class=\"c1\"># Get Execution Id and save results</span>\n<span class=\"n\">dataframe</span><span class=\"p\">,</span> <span class=\"n\">execution_id</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"select * from my_table\"</span><span class=\"p\">,</span> <span class=\"n\">save_results</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Execute a query asynchronously</span>\n<span class=\"n\">execution_id</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"select * from my_table\"</span><span class=\"p\">,</span> <span class=\"n\">run_async</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># Returns just the execution id </span>\n<span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">athena_client</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">(</span><span class=\"n\">execution_id</span><span class=\"p\">)</span> <span class=\"c1\"># Will report errors if query failed or let you know if it is still running</span>\n\n<span class=\"c1\"># With asynchronous queries, can check status, get error, or cancel</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">get_query_status</span><span class=\"p\">(</span><span class=\"n\">execution_id</span><span class=\"p\">)</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">get_query_error</span><span class=\"p\">(</span><span class=\"n\">execution_id</span><span class=\"p\">)</span>\n<span class=\"n\">pythena</span><span class=\"o\">.</span><span class=\"n\">cancel_query</span><span class=\"p\">(</span><span class=\"n\">execution_id</span><span class=\"p\">)</span>\n</pre>\n<h2>Note</h2>\n<p>By default, when executing athena queries, via boto3 or the AWS athena console, the results are saved in an s3 bucket. This module by default, assuming a successful execution, will delete the s3 result file to keep s3 clean. If an s3_output_url is provided, then the results will be saved to that location and will not be deleted.</p>\n\n          </div>"}, "last_serial": 6915911, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ac6870e5e1a96916c3e031075ea0c0d3", "sha256": "23a6af8b6bbe575844e4ecb8e7f8dc03be11d9c6be4b732842be2f6497626cb2"}, "downloads": -1, "filename": "ztech_pythena-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac6870e5e1a96916c3e031075ea0c0d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11198, "upload_time": "2019-11-07T20:25:38", "upload_time_iso_8601": "2019-11-07T20:25:38.751658Z", "url": "https://files.pythonhosted.org/packages/70/90/9591fb61180fd2e873956b0e727866aa3ef5c6607fadab9c4fa49ee0c248/ztech_pythena-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6bd5727900bc1f21434ffb7a2b59299", "sha256": "5b4b65245254764e50930cfcc57c98bcf1b63cc4111a6fe2f44892e5ef4f4a9f"}, "downloads": -1, "filename": "ztech-pythena-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d6bd5727900bc1f21434ffb7a2b59299", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4882, "upload_time": "2019-11-07T20:25:41", "upload_time_iso_8601": "2019-11-07T20:25:41.256883Z", "url": "https://files.pythonhosted.org/packages/b0/2d/e7c72ac6e3489beaf01bd165e2369fdce4e7e67e8ec867d1ea97638d0f87/ztech-pythena-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "149f67818e4e806c6cced20efc4d1532", "sha256": "7b536cce6bc1bd7d0eb4ab7aa2484fc35ea20d121c9cba20d6d4512117f30b6a"}, "downloads": -1, "filename": "ztech_pythena-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "149f67818e4e806c6cced20efc4d1532", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11200, "upload_time": "2019-11-07T20:29:13", "upload_time_iso_8601": "2019-11-07T20:29:13.636228Z", "url": "https://files.pythonhosted.org/packages/c2/53/abbbdc736ebefb1c2fe7ff70184a3b50878702b76b9b7091630bfccddff8/ztech_pythena-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9e00652d5cea1aa4e4185fbe83ee1da", "sha256": "831c6b32d8c1f845110d198560884ba44da545a1531443c9d36e0ff3104b1fb1"}, "downloads": -1, "filename": "ztech-pythena-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d9e00652d5cea1aa4e4185fbe83ee1da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4887, "upload_time": "2019-11-07T20:29:15", "upload_time_iso_8601": "2019-11-07T20:29:15.477843Z", "url": "https://files.pythonhosted.org/packages/e3/eb/042bd4a52be8a7e8611f64295a87dc79936eb602e17ff7b600321026a039/ztech-pythena-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fe540498190c4c371aaa4babe7ee531d", "sha256": "2dd00e305a1e321b2f049c3e81a54c5ad5126b5ec4170af6468fb88d5342929a"}, "downloads": -1, "filename": "ztech_pythena-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe540498190c4c371aaa4babe7ee531d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11219, "upload_time": "2020-03-30T20:23:58", "upload_time_iso_8601": "2020-03-30T20:23:58.370088Z", "url": "https://files.pythonhosted.org/packages/0b/e5/2f5ff0c6621e9f643b600f239129bd24c62108ceae4aa44d581fe03b4b17/ztech_pythena-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "377407b64957397a00f5fa5ae1efcd71", "sha256": "d80caac104215308d8dfc0f91ca6fbf3123a06edd3e1a408de4f1fb28f8b71e4"}, "downloads": -1, "filename": "ztech-pythena-0.0.3.tar.gz", "has_sig": false, "md5_digest": "377407b64957397a00f5fa5ae1efcd71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4932, "upload_time": "2020-03-30T20:24:00", "upload_time_iso_8601": "2020-03-30T20:24:00.355800Z", "url": "https://files.pythonhosted.org/packages/ac/1b/dc2587fe8b8757e5c93786853c63ef5b6f71d23fd61f66dac75ce563704b/ztech-pythena-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe540498190c4c371aaa4babe7ee531d", "sha256": "2dd00e305a1e321b2f049c3e81a54c5ad5126b5ec4170af6468fb88d5342929a"}, "downloads": -1, "filename": "ztech_pythena-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe540498190c4c371aaa4babe7ee531d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11219, "upload_time": "2020-03-30T20:23:58", "upload_time_iso_8601": "2020-03-30T20:23:58.370088Z", "url": "https://files.pythonhosted.org/packages/0b/e5/2f5ff0c6621e9f643b600f239129bd24c62108ceae4aa44d581fe03b4b17/ztech_pythena-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "377407b64957397a00f5fa5ae1efcd71", "sha256": "d80caac104215308d8dfc0f91ca6fbf3123a06edd3e1a408de4f1fb28f8b71e4"}, "downloads": -1, "filename": "ztech-pythena-0.0.3.tar.gz", "has_sig": false, "md5_digest": "377407b64957397a00f5fa5ae1efcd71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4932, "upload_time": "2020-03-30T20:24:00", "upload_time_iso_8601": "2020-03-30T20:24:00.355800Z", "url": "https://files.pythonhosted.org/packages/ac/1b/dc2587fe8b8757e5c93786853c63ef5b6f71d23fd61f66dac75ce563704b/ztech-pythena-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:54 2020"}