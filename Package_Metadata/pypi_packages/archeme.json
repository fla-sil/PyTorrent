{"info": {"author": "Artemy Lomov", "author_email": "artemy@lomov.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Documentation", "Topic :: Utilities"], "description": "# Archeme\n\nArcheme is a tool to describe and visualize schemes and diagrams. It\u2019s designed primarily for architectural schemes.\n\nArcheme may be used as a stand-alone command-line tool, or as a Python package.\n\nTo describe schemes and diagrams, Archeme provides YAML-based DSL (domain-specific language).\n\nTo draw them, Archeme uses [Graphviz](https://www.graphviz.org/). The engines `dot`, `neato`, and `fdp` are supported.\n\nIn fact, Archeme provides some new abstraction level over Graphviz. Unlike PlantUML, Archeme almost doesn\u2019t limit your ability to use the flexible functionality of Graphviz. However, Archeme provides more convenient means to describe elements of the same types using classes, to specify the relative positions of elements, etc. Using YAML as the base of DSL makes it possible to work with diagram descriptions as with data structures\u2014in Archeme itself and in applications integrated with it. So, Archeme can easily combine several scheme descriptions into one.\n\nBy using SVG as an output format, you may assign hyperlinks to scheme elements and thereby organize relationships between schemes\u2014for example, in accordance with the [C4 methodology](https://c4model.com/).\n\n## Installation\n\nTo install Archeme, run the command:\n\n```bash\n$ pip install archeme\n```\n\nAfter installation, the command `archeme` will be available in your system.\n\n## CLI Usage\n\nCurrently Archeme provides 2 actions (commands):\n\n* `generate`\u2014to generate graph description that can be drawn with Graphviz from YAML-based DSL source;\n* `merge`\u2014to merge (combine, join) multiple DSL sources into a single DSL source.\n\n### The `generate` Command Syntax\n\nGeneralized syntax of the `generate` command is the following:\n\n```bash\n$ archeme generate [-c|--config <config_file>] -i|--input <input_file> -o|--output <output_file> [-d|--draw <format>]\n```\n\nThe `-i`/`--input` and `-o`/`--output` arguments are required, other arguments are optional.\n\nThe `-i`/`--input` parameter is used to specify YAML-based DSL source.\n\nThe `-o`/`--output` parameter points to the output file\u2014graph description for Graphviz.\n\nYou may specify an optional config file by using the `-c`/`--config` argument. Both config and scheme description files use the same YAML-based DSL. It\u2019s recommended to use a separate config file to specify some common settings that may be reused in multiple scheme descriptions of the same style. If both config file and scheme description set the parameter of the same name, the value specified in scheme description will override the value specified in config.\n\nIf the `-d`/`--draw` argument is given, Archeme will try to call Graphviz to draw an image from generated graph description, and the Graphviz calling command will be displayed. By default, Archeme doesn\u2019t call Graphviz to visualize generated graph descriptions. The `-d`/`--draw` argument may take any output format value allowed by Graphviz (`png`, `svg`, etc.). By default, the `dot` engine is used. You may specify the necessary engine explicitly in DSL, see below.\n\n### The `merge` Command Syntax\n\nGeneralized syntax of the `merge` command is more simple:\n\n```bash\n$ archeme merge -i|--input <input_file> -o|--output <output_file>\n```\n\nThe command takes 2 mandatory arguments: `-i`/`--input` for input YAML-based DSL file, and `-o`/`--output` for output YAML-based DSL file. Output files of the `merge` command should be used as input files for the `generate` command. YAML-based DSL is described below.\n\n## YAML-Based DSL\n\n* See also: [Archeme DSL Quick Reference](https://github.com/foliant-docs/archeme/blob/master/dsl_reference.md)\n\nTo describe schemes and diagrams, YAML-based DSL is provided.\n\nDSL, same as Graphviz, operates the graph theory terms: so, *graph* is the whole drawing; *node* is a functional component of a scheme or a diagram; *cluster* is a group of nodes that is usually highlighted visually; *edge* is a line that represents a relation between two nodes.\n\nDSL may be used to:\n\n* specify common settings of multiple elements;\n* define scheme structure and relations between elements;\n* describe each separate element\u2014node, cluster, edge;\n* set relative positions of elements;\n* describe how it\u2019s needed to combine multiple scheme descriptions into a single one.\n\n### Common Setting\n\nCommon settings for multiple elements usually should be specified in the config file.\n\n#### Graphviz Engine\n\nThe `engine` parameter sets the certain Graphviz engine to draw images. Archeme supports the `dot`, `neato`, and `fdp` engines. The default engine is `dot`.\n\nCode example:\n\n```yaml\nengine: neato\n```\n\nYou may read about the difference between engines in the [Graphviz documentation](https://www.graphviz.org/about/).\n\nIn relation to architectural schemes:\n\n* `dot` is suitable for models with hierarchical relations; using `dot`, you can\u2019t strictly control relative positions of elements\u2014the positions depend of ranks of elements; `dot` supports clusters;\n* `neato` allows to set strict fixed positions to each node; it doesn\u2019t support clusters;\n* `fdp` is similar to `neato` but it supports clusters; however, if clusters are used, `fdp` re-calculates the positions of nodes, they can\u2019t be strictly fixed.\n\n#### Settings Of Elements\n\nIn `elements` section, you may specify common settings of the element of different types\u2014graph, node, cluster, edge. In the simplest case, DSL maps to Graphviz syntax. DSL code example:\n\n```yaml\nelements:\n    graph:\n        newrank: true\n        rankdir: TB\n    node:\n        shape: box\n        fixedsize: true\n        width: 4\n        height: 1\n        style:\n            - filled\n            - rounded\n    edge:\n        dir: both\n        arrowtail: dot\n```\n\nThis example will be converted into the following description for Graphviz:\n\n```\ngraph [newrank = \"true\", rankdir: \"TB\"]\nnode [shape = \"box\", fixedsize = \"true\", width = \"4\", height = \"1\", style = \"filled, rounded\"]\nedge [dir = \"both\", arrowtail = \"dot\"]\n```\n\nAll available parameters for graphs, nodes, edges are described in the [Graphviz documentation](https://www.graphviz.org/doc/info/attrs.html).\n\nIn addition to `graph`, `node`, and `edge` parameters, Archeme supports the analogous `cluster` parameter that allows to specify default settings for clusters. Code example:\n\n```yaml\nelements:\n    cluster:\n        labelloc: b\n        labeljust: l\n        shape: box\n```\n\nNote that you may reduce the number of lines of YAML-based DSL code. So, node settings from the example above may look like this:\n\n```yaml\nnode {shape: box, fixedsize: true, width: 4, height: 1, style: [filled, rounded]}\n```\n\nArcheme allows to specify parameters that take lists of values, in different ways. The constructions `style: [filled, rounded]`, `style: filled, rounded`, `style: [filled]`, `style: filled` are valid.\n\nNote that if a node, cluster, or edge has some custom `style` or another parameter with a list of values, it will **fully** override the default `style` or whatever. This is how it works in Graphviz, and Archeme doesn\u2019t change this behavior for compatibility reasons.\n\nFor example, if the default `style` for nodes is `[filled, rounded]`, and the custom `style` of some node is `dashed`, only `dashed` will be applied to this node.\n\nTo control the settings of elements more flexible, classes are provided.\n\n##### Classes Definition\n\nYou may define one or more classes for each type of elements (`node`, `cluster`, `edge`), and then assign any combination of defined classes to any separate element. Code example:\n\n```yaml\nelements:\n    node:\n        fixedsize: true\n        penwidth: 3\n        classes:\n            generic:\n                shape: box\n                width: 4\n                height: 1\n                style: rounded\n            database:\n                shape: cylinder\n                width: 3\n                height: 3\n            external_network:\n                shape: circle\n                width: 2.5\n                height: 2.5\n                style: filled\n                fillcolor: '#f0f0f0'\n```\n\nIn this example, 3 classes of nodes with the names `generic`, `database`, and `external_network` are defined. Note that using of classes doesn\u2019t disallow to use global default settings.\n\n##### Grid Settings\n\nTo control the relative positions of elements, Archeme provides the ability to describe nodes arrangement as a text grid. In the `elements` section of common settings you may define the horizontal and vertical intervals of the grid step. Code example:\n\n```yaml\nelements:\n    grid:\n        spacing_x: 400\n        spacing_y: 250\n```\n\nThe `spacing_x` parameter sets the horizontal interval and defaults to `500`; the `spacing_y` parameter sets the vertical interval and defaults to `200`. Grid spacing units are *points*; 1 point equals to 1/72 inch.\n\nNote that `neato` and `fdp` engines use different units for the `pos` attribute: points and inches respectively. Archeme takes it into account. If you specify `engine: neato`, do not try to draw the resulting graph description with `fdp`, and vice versa. The `dot` engine doesn\u2019t support positioning at all.\n\n### Scheme Description\n\nTo describe a scheme or a diagram, it\u2019s needed to:\n\n* specify scheme structure\u2014define nodes and clusters;\n* specify relations between nodes\u2014define edges;\n* control the relative positions of nodes:\n    * define a text grid, if the `neato` or `fdp` engine is used;\n    * specify which nodes should have the same rank, if the `dot` engine is used.\n\n#### Structure\n\nTo define nodes and clusters, Archeme DSL provides the `structure` section. You may assign Graphviz attributes and Archeme classes to any node and any cluster. For nodes, the `id` parameter is only required. All other parameters are optional. The `id` parameter is used to assign a text identifier to a certain node.\n\nSimple code example:\n\n```yaml\nstructure:\n    - node:\n        id: first\n    - node:\n        id: second\n```\n\nIn this example, 2 nodes with the identifiers `first` and `second` are defined.\n\nNote that the value of the `structure` parameter must be a list. If the `dot` engine is used, the order of nodes matters for their positioning. If the `neato` or `fdp` engine is used, the order of nodes doesn\u2019t matter.\n\nClusters should be specified at the same level as nodes. Each cluster has nested `structure` that may include nodes and nested clusters. Code example:\n\n```yaml\nstructure:\n    - node:\n        id: first\n    - node:\n        id: second\n    - cluster:\n        structure:\n            - node:\n                id: third\n            - node:\n                id: fourth\n```\n\nThe following code example shows how it\u2019s possible to assign Graphviz attributes and Archeme classes to nodes and clusters:\n\n```yaml\nstructure:\n    - node:\n        id: first\n        label: The First Node\n        class:\n            - amazing\n            - awesome\n    - cluster:\n        label: The Wonderful Cluster\n        style: filled\n        fillcolor: '#cccccc'\n        class: wonderful\n        structure:\n            ...\n```\n\nSingle class name may be specified as a string; multiple class names should be specified as a list.\n\nArcheme merges attributes of classes. Suppose 2 classes are defined as the following:\n\n```yaml\nclasses:\n    amazing:\n        shape: box\n        width: 4\n        height: 1\n        style:\n            - rounded\n            - filled\n    awesome:\n        height: 2\n        style:\n            - dashed\n        fillcolor: '#99ccff'\n```\n\nIf both styles are assigned to some node in the order: `[amazing, awesome]`, the resulting attributes assigned to the node will be:\n\n```yaml\nshape: box\nwidth: 4\nheight: 2\nstyle:\n    - rounded\n    - filled\n    - dashed\nfillcolor: '#99ccff'\n```\n\nSo, the `style` attributes will be combined. Contradicting values of the attributes of the same names will be taken from the last class in the sequence (like `height` in this example).\n\n#### Relations\n\nTo show relations between nodes, edges are used. To define a list of edges, use the `edges` section. Simple code example:\n\n```yaml\nedges:\n    -   tail: first\n        head: second\n    -   tail: second\n        head: third\n```\n\nIn this example, 2 edges are defined. These edges specify relations between 3 nodes with the identifiers `first`, `second`, and `third`.\n\nArcheme uses directed graphs only. So each edge should have a tail (\u201csource,\u201d \u201cbeginning\u201d) and a head (\u201ctarget,\u201d \u201cending\u201d). For example, if an edge represents interaction between a client and a server, it will be alright if a tail will be assigned to a client, and a head\u2014to a server. However, client requests and server responses may be shown as two different counter-directed edges.\n\nYou may assign Graphviz attributes and classes to edges like in case with nodes and clusters. Example:\n\n```yaml\nedges:\n    -   tail: first\n        head: second\n        label: HTTP API\n        class: two_arrows\n```\n\nArcheme provides extended syntax for the `label` and `xlabel` attributes of edges. You may specify protocol and describe transferred data:\n\n```yaml\n    -   tail: first\n        head: second\n        label:\n            protocol: HTTP\n            data: Admin API\n```\n\nThis code will be transformed into the following construction in a graph description:\n\n```\n\"first\" -> \"second\" [label = <<b>HTTP</b><br />Admin API>];\n```\n\n#### Positioning\n\nArcheme implements a powerful concept to control relative positions of scheme elements. Positioning may be described as a multiline text grid. Suppose you have 10 nodes with the identifiers from `first` to `tenth`. Feel free to set their positions in this visual way:\n\n```yaml\ngrid: |\n    -        -    second    sixth\n    first         third\n                  fourth               eighth\n                                       ninth\n                  fifth     seventh\n                                       -\n                                       tenth\n```\n\nIf the engine `neato` or `fdp` is used, the nodes will be strictly positioned with the `pos` attribute. Positions will be calculated using the values of the `elements.grid.spacing_x` and `elements.grid.spacing_y` parameters. A hyphen (`-`) means skipped step if it\u2019s necessary not to place any nodes to the respective horizontal or vertical coordinate.\n\nGrid steps are defined by start positions of node identifiers. So, the nodes `second`, `third`, `fourth`, and `fifth` from the example will be placed to the third horizontal step of the grid.\n\nThe `dot` engine ignores the `pos` attribute, but it allows to place nodes with the same rank to the same hierarchy level of the resulting layout. If the `dot` engine is used, Archeme analyzes a grid and defines groups (subgraphs) of nodes with the same ranks. For the example above and the `elements.graph.rankdir` attribute set to `LR` (left to right), Archeme will generate the following groups:\n\n* `second`, `third`, `fourth`, `fifth`;\n* `sixth`, `seventh`;\n* `eighth`, `ninth`, `tenth`.\n\nIf the `elements.graph.rankdir` attribute is set to `TB` (top to bottom, default in Graphviz), for the example above Archeme will make the following groups:\n\n* `second`, `sixth`;\n* `first`, `third`;\n* `fourth`, `eighth`;\n* `fifth`, `seventh`.\n\nIf you don\u2019t plan to use the engines `neato` and `fdp` to draw a certain scheme, and use only `dot`, you don\u2019t need to describe grids. For `dot`, instead of using grids, you may define groups of nodes of the same ranks explicitly. Example of code that represents the last described case:\n\n```yaml\ngroups:\n    -   - second\n        - sixth\n    -   - first\n        - third\n    -   - fourth\n        - eighth\n    -   - fifth\n        - seventh\n```\n\n### Combining Multiple Schemes\n\nTo combine multiple schemes or diagrams into a single one, the `merge` Archeme command is used. Archeme merges multiple scheme descriptions using the concept of modules.\n\nA module is a scheme description that is used as a part of the structure of the resulting combined scheme description. Optionally some nodes of a certain module may be excluded from the resulting combined scheme description.\n\nEach module should have an identifier. To avoid conflicts when some nodes have the same identifiers in different modules, node identifiers are combined with module identifiers in the resulting scheme description. For example, the node `api` from the module `backend` will get the identifier `backend.api` in the resulting combined scheme description.\n\nArcheme works with modules that are described in separate files. To include some module into the resulting scheme structure, you should specify module identifier and module description file. Code example:\n\n```yaml\nstructure:\n    - module:\n        id: backend\n        file: path/to/backend.yml\n    - module:\n        id: frontend\n        file: path/to/frontend.yml\n```\n\nIt seems most convenient to describe modules in separate files, if Archeme is used as a stand-alone command-line tool. However, Archeme allows to specify a module description directly as a value of the `description` parameter that should be used instead of the `file` parameter. This way may be preferred when Archeme is used as a Python package in a third-party application.\n\nIn this example, 2 modules with the identifiers `backend` and `frontend` are added to the resulting structure.\n\nIf you need not to include some module nodes into the resulting structure, use the optional `exclude` parameter:\n\n```yaml\nstructure:\n    - module:\n        id: frontend\n        file: path/to/frontend.yml\n        exclude:\n            - client_device\n            - cdn\n```\n\nIn this example, the nodes with the identifiers `client_device` and `cdn` of the module `frontend` will not be taken into account in the resulting combined scheme description.\n\nFeel free to add nodes, clusters, and edges to the resulting scheme description in the usual way:\n\n```yaml\nstructure:\n    - module:\n        id: backend\n        file: path/to/backend.yml\n    - module:\n        id: frontend\n        file: path/to/frontend.yml\n    - node:\n        id: middleware\nedges:\n    -   tail: frontend.application\n        head: middleware\n    -   tail: middleware\n        head: backend.api\n```\n\nArcheme provides smart merging of grids. Suppose you need to combine 4 modules with the identifiers `one`, `two`, `three`, and `four`. You may describe a grid that should be used in the resulting scheme description:\n\n```yaml\ngrid: |\n    one      two\n    three    four\n```\n\nArcheme will generate the resulting grid in which, for example, the leftmost nodes of the module `two` will be placed at the same horizontal position as the leftmost nodes of the module `four`.\n\nWhen merging modules, Archeme deeply processes the `structure`, `edges`, `grid`, and `groups` parameters of each module. Common parameters for multiple elements such as `engine` and `elements` will be merged using the simplest algorithm. It\u2019s best to specify them in a separate config file that will not be involved in the merge process.\n\n## Examples\n\nArcheme repository includes [some examples](https://github.com/foliant-docs/archeme/tree/master/examples/) of architectural schemes.\n\nEach example is located in its own folder that has the following structure:\n\n* `source/*`\u2014YAML-based DSL sources;\n* `target/*`\u2014generated graph descriptions for Graphviz, and resulting PNG images;\n* `draw.sh`\u2014shell script that executes the commands which create target files.\n\nPNG images drawn with Graphviz are shown below.\n\n### 1. Foliant Architecture, Simple, Drawn With `neato`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/01_foliant_architecture_simple/)\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/01_foliant_architecture_simple/target/architecture.png)\n\n### 2. Foliant Architecture, Pretty, Drawn With `neato`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/02_foliant_architecture_pretty/)\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/02_foliant_architecture_pretty/target/architecture.png)\n\n### 3. Foliant Architecture, With A Cluster, Drawn With `fdp`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/03_foliant_architecture_with_cluster/)\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/03_foliant_architecture_with_cluster/target/architecture.png)\n\n### 4. Foliant Architecture, With More Clusters, Drawn With `fdp`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/04_foliant_architecture_more_clusters/)\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/04_foliant_architecture_more_clusters/target/architecture.png)\n\n### 5. Foliant Architecture, With Many Nested Clusters, Drawn With `dot`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/05_foliant_architecture_many_nested_clusters/)\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/05_foliant_architecture_many_nested_clusters/target/architecture.png)\n\n### 6. Digital Television System, Two Subsystems, Two Styles, Drawn With `dot`\n\n* [Directory with the example files](https://github.com/foliant-docs/archeme/tree/master/examples/06_digital_tv_architecture/)\n\n#### Style 1\n\n##### Subsystem 1\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_1/ott_dvr_subsystem.png)\n\n##### Subsystem 2\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_1/service_backend.png)\n\n##### Whole System, Reuses Subsystems Descriptions\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_1/combined.png)\n\n#### Style 2\n\n##### Subsystem 1\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_2/ott_dvr_subsystem.png)\n\n##### Subsystem 2\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_2/service_backend.png)\n\n##### Whole System, Reuses Subsystems Descriptions\n\n![](https://raw.githubusercontent.com/foliant-docs/archeme/master/examples/06_digital_tv_architecture/target/style_2/combined.png)\n\nClouds and client devices icons are made by [iconixar](https://www.flaticon.com/authors/iconixar/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/archeme", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/foliant-docs/archeme", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "archeme", "package_url": "https://pypi.org/project/archeme/", "platform": "any", "project_url": "https://pypi.org/project/archeme/", "project_urls": {"Download": "https://pypi.org/project/archeme", "Homepage": "https://github.com/foliant-docs/archeme"}, "release_url": "https://pypi.org/project/archeme/1.0.2/", "requires_dist": ["PyYAML (>=5.1.1)"], "requires_python": "", "summary": "Command-line tool to describe and visualize architecture schemes.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Archeme</h1>\n<p>Archeme is a tool to describe and visualize schemes and diagrams. It\u2019s designed primarily for architectural schemes.</p>\n<p>Archeme may be used as a stand-alone command-line tool, or as a Python package.</p>\n<p>To describe schemes and diagrams, Archeme provides YAML-based DSL (domain-specific language).</p>\n<p>To draw them, Archeme uses <a href=\"https://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a>. The engines <code>dot</code>, <code>neato</code>, and <code>fdp</code> are supported.</p>\n<p>In fact, Archeme provides some new abstraction level over Graphviz. Unlike PlantUML, Archeme almost doesn\u2019t limit your ability to use the flexible functionality of Graphviz. However, Archeme provides more convenient means to describe elements of the same types using classes, to specify the relative positions of elements, etc. Using YAML as the base of DSL makes it possible to work with diagram descriptions as with data structures\u2014in Archeme itself and in applications integrated with it. So, Archeme can easily combine several scheme descriptions into one.</p>\n<p>By using SVG as an output format, you may assign hyperlinks to scheme elements and thereby organize relationships between schemes\u2014for example, in accordance with the <a href=\"https://c4model.com/\" rel=\"nofollow\">C4 methodology</a>.</p>\n<h2>Installation</h2>\n<p>To install Archeme, run the command:</p>\n<pre>$ pip install archeme\n</pre>\n<p>After installation, the command <code>archeme</code> will be available in your system.</p>\n<h2>CLI Usage</h2>\n<p>Currently Archeme provides 2 actions (commands):</p>\n<ul>\n<li><code>generate</code>\u2014to generate graph description that can be drawn with Graphviz from YAML-based DSL source;</li>\n<li><code>merge</code>\u2014to merge (combine, join) multiple DSL sources into a single DSL source.</li>\n</ul>\n<h3>The <code>generate</code> Command Syntax</h3>\n<p>Generalized syntax of the <code>generate</code> command is the following:</p>\n<pre>$ archeme generate <span class=\"o\">[</span>-c<span class=\"p\">|</span>--config &lt;config_file&gt;<span class=\"o\">]</span> -i<span class=\"p\">|</span>--input &lt;input_file&gt; -o<span class=\"p\">|</span>--output &lt;output_file&gt; <span class=\"o\">[</span>-d<span class=\"p\">|</span>--draw &lt;format&gt;<span class=\"o\">]</span>\n</pre>\n<p>The <code>-i</code>/<code>--input</code> and <code>-o</code>/<code>--output</code> arguments are required, other arguments are optional.</p>\n<p>The <code>-i</code>/<code>--input</code> parameter is used to specify YAML-based DSL source.</p>\n<p>The <code>-o</code>/<code>--output</code> parameter points to the output file\u2014graph description for Graphviz.</p>\n<p>You may specify an optional config file by using the <code>-c</code>/<code>--config</code> argument. Both config and scheme description files use the same YAML-based DSL. It\u2019s recommended to use a separate config file to specify some common settings that may be reused in multiple scheme descriptions of the same style. If both config file and scheme description set the parameter of the same name, the value specified in scheme description will override the value specified in config.</p>\n<p>If the <code>-d</code>/<code>--draw</code> argument is given, Archeme will try to call Graphviz to draw an image from generated graph description, and the Graphviz calling command will be displayed. By default, Archeme doesn\u2019t call Graphviz to visualize generated graph descriptions. The <code>-d</code>/<code>--draw</code> argument may take any output format value allowed by Graphviz (<code>png</code>, <code>svg</code>, etc.). By default, the <code>dot</code> engine is used. You may specify the necessary engine explicitly in DSL, see below.</p>\n<h3>The <code>merge</code> Command Syntax</h3>\n<p>Generalized syntax of the <code>merge</code> command is more simple:</p>\n<pre>$ archeme merge -i<span class=\"p\">|</span>--input &lt;input_file&gt; -o<span class=\"p\">|</span>--output &lt;output_file&gt;\n</pre>\n<p>The command takes 2 mandatory arguments: <code>-i</code>/<code>--input</code> for input YAML-based DSL file, and <code>-o</code>/<code>--output</code> for output YAML-based DSL file. Output files of the <code>merge</code> command should be used as input files for the <code>generate</code> command. YAML-based DSL is described below.</p>\n<h2>YAML-Based DSL</h2>\n<ul>\n<li>See also: <a href=\"https://github.com/foliant-docs/archeme/blob/master/dsl_reference.md\" rel=\"nofollow\">Archeme DSL Quick Reference</a></li>\n</ul>\n<p>To describe schemes and diagrams, YAML-based DSL is provided.</p>\n<p>DSL, same as Graphviz, operates the graph theory terms: so, <em>graph</em> is the whole drawing; <em>node</em> is a functional component of a scheme or a diagram; <em>cluster</em> is a group of nodes that is usually highlighted visually; <em>edge</em> is a line that represents a relation between two nodes.</p>\n<p>DSL may be used to:</p>\n<ul>\n<li>specify common settings of multiple elements;</li>\n<li>define scheme structure and relations between elements;</li>\n<li>describe each separate element\u2014node, cluster, edge;</li>\n<li>set relative positions of elements;</li>\n<li>describe how it\u2019s needed to combine multiple scheme descriptions into a single one.</li>\n</ul>\n<h3>Common Setting</h3>\n<p>Common settings for multiple elements usually should be specified in the config file.</p>\n<h4>Graphviz Engine</h4>\n<p>The <code>engine</code> parameter sets the certain Graphviz engine to draw images. Archeme supports the <code>dot</code>, <code>neato</code>, and <code>fdp</code> engines. The default engine is <code>dot</code>.</p>\n<p>Code example:</p>\n<pre><span class=\"nt\">engine</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">neato</span>\n</pre>\n<p>You may read about the difference between engines in the <a href=\"https://www.graphviz.org/about/\" rel=\"nofollow\">Graphviz documentation</a>.</p>\n<p>In relation to architectural schemes:</p>\n<ul>\n<li><code>dot</code> is suitable for models with hierarchical relations; using <code>dot</code>, you can\u2019t strictly control relative positions of elements\u2014the positions depend of ranks of elements; <code>dot</code> supports clusters;</li>\n<li><code>neato</code> allows to set strict fixed positions to each node; it doesn\u2019t support clusters;</li>\n<li><code>fdp</code> is similar to <code>neato</code> but it supports clusters; however, if clusters are used, <code>fdp</code> re-calculates the positions of nodes, they can\u2019t be strictly fixed.</li>\n</ul>\n<h4>Settings Of Elements</h4>\n<p>In <code>elements</code> section, you may specify common settings of the element of different types\u2014graph, node, cluster, edge. In the simplest case, DSL maps to Graphviz syntax. DSL code example:</p>\n<pre><span class=\"nt\">elements</span><span class=\"p\">:</span>\n    <span class=\"nt\">graph</span><span class=\"p\">:</span>\n        <span class=\"nt\">newrank</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n        <span class=\"nt\">rankdir</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">TB</span>\n    <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box</span>\n        <span class=\"nt\">fixedsize</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n        <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n        <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"nt\">style</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">filled</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">rounded</span>\n    <span class=\"nt\">edge</span><span class=\"p\">:</span>\n        <span class=\"nt\">dir</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">both</span>\n        <span class=\"nt\">arrowtail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dot</span>\n</pre>\n<p>This example will be converted into the following description for Graphviz:</p>\n<pre><code>graph [newrank = \"true\", rankdir: \"TB\"]\nnode [shape = \"box\", fixedsize = \"true\", width = \"4\", height = \"1\", style = \"filled, rounded\"]\nedge [dir = \"both\", arrowtail = \"dot\"]\n</code></pre>\n<p>All available parameters for graphs, nodes, edges are described in the <a href=\"https://www.graphviz.org/doc/info/attrs.html\" rel=\"nofollow\">Graphviz documentation</a>.</p>\n<p>In addition to <code>graph</code>, <code>node</code>, and <code>edge</code> parameters, Archeme supports the analogous <code>cluster</code> parameter that allows to specify default settings for clusters. Code example:</p>\n<pre><span class=\"nt\">elements</span><span class=\"p\">:</span>\n    <span class=\"nt\">cluster</span><span class=\"p\">:</span>\n        <span class=\"nt\">labelloc</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">b</span>\n        <span class=\"nt\">labeljust</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">l</span>\n        <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box</span>\n</pre>\n<p>Note that you may reduce the number of lines of YAML-based DSL code. So, node settings from the example above may look like this:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">node {shape</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box, fixedsize</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true, width</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4, height</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1, style</span><span class=\"p p-Indicator\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">filled</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">rounded</span><span class=\"p p-Indicator\">]</span><span class=\"err\">}</span>\n</pre>\n<p>Archeme allows to specify parameters that take lists of values, in different ways. The constructions <code>style: [filled, rounded]</code>, <code>style: filled, rounded</code>, <code>style: [filled]</code>, <code>style: filled</code> are valid.</p>\n<p>Note that if a node, cluster, or edge has some custom <code>style</code> or another parameter with a list of values, it will <strong>fully</strong> override the default <code>style</code> or whatever. This is how it works in Graphviz, and Archeme doesn\u2019t change this behavior for compatibility reasons.</p>\n<p>For example, if the default <code>style</code> for nodes is <code>[filled, rounded]</code>, and the custom <code>style</code> of some node is <code>dashed</code>, only <code>dashed</code> will be applied to this node.</p>\n<p>To control the settings of elements more flexible, classes are provided.</p>\n<h5>Classes Definition</h5>\n<p>You may define one or more classes for each type of elements (<code>node</code>, <code>cluster</code>, <code>edge</code>), and then assign any combination of defined classes to any separate element. Code example:</p>\n<pre><span class=\"nt\">elements</span><span class=\"p\">:</span>\n    <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">fixedsize</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n        <span class=\"nt\">penwidth</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n        <span class=\"nt\">classes</span><span class=\"p\">:</span>\n            <span class=\"nt\">generic</span><span class=\"p\">:</span>\n                <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box</span>\n                <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n                <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n                <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">rounded</span>\n            <span class=\"nt\">database</span><span class=\"p\">:</span>\n                <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cylinder</span>\n                <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n                <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n            <span class=\"nt\">external_network</span><span class=\"p\">:</span>\n                <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">circle</span>\n                <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2.5</span>\n                <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2.5</span>\n                <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">filled</span>\n                <span class=\"nt\">fillcolor</span><span class=\"p\">:</span> <span class=\"s\">'#f0f0f0'</span>\n</pre>\n<p>In this example, 3 classes of nodes with the names <code>generic</code>, <code>database</code>, and <code>external_network</code> are defined. Note that using of classes doesn\u2019t disallow to use global default settings.</p>\n<h5>Grid Settings</h5>\n<p>To control the relative positions of elements, Archeme provides the ability to describe nodes arrangement as a text grid. In the <code>elements</code> section of common settings you may define the horizontal and vertical intervals of the grid step. Code example:</p>\n<pre><span class=\"nt\">elements</span><span class=\"p\">:</span>\n    <span class=\"nt\">grid</span><span class=\"p\">:</span>\n        <span class=\"nt\">spacing_x</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">400</span>\n        <span class=\"nt\">spacing_y</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">250</span>\n</pre>\n<p>The <code>spacing_x</code> parameter sets the horizontal interval and defaults to <code>500</code>; the <code>spacing_y</code> parameter sets the vertical interval and defaults to <code>200</code>. Grid spacing units are <em>points</em>; 1 point equals to 1/72 inch.</p>\n<p>Note that <code>neato</code> and <code>fdp</code> engines use different units for the <code>pos</code> attribute: points and inches respectively. Archeme takes it into account. If you specify <code>engine: neato</code>, do not try to draw the resulting graph description with <code>fdp</code>, and vice versa. The <code>dot</code> engine doesn\u2019t support positioning at all.</p>\n<h3>Scheme Description</h3>\n<p>To describe a scheme or a diagram, it\u2019s needed to:</p>\n<ul>\n<li>specify scheme structure\u2014define nodes and clusters;</li>\n<li>specify relations between nodes\u2014define edges;</li>\n<li>control the relative positions of nodes:\n<ul>\n<li>define a text grid, if the <code>neato</code> or <code>fdp</code> engine is used;</li>\n<li>specify which nodes should have the same rank, if the <code>dot</code> engine is used.</li>\n</ul>\n</li>\n</ul>\n<h4>Structure</h4>\n<p>To define nodes and clusters, Archeme DSL provides the <code>structure</code> section. You may assign Graphviz attributes and Archeme classes to any node and any cluster. For nodes, the <code>id</code> parameter is only required. All other parameters are optional. The <code>id</code> parameter is used to assign a text identifier to a certain node.</p>\n<p>Simple code example:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n</pre>\n<p>In this example, 2 nodes with the identifiers <code>first</code> and <code>second</code> are defined.</p>\n<p>Note that the value of the <code>structure</code> parameter must be a list. If the <code>dot</code> engine is used, the order of nodes matters for their positioning. If the <code>neato</code> or <code>fdp</code> engine is used, the order of nodes doesn\u2019t matter.</p>\n<p>Clusters should be specified at the same level as nodes. Each cluster has nested <code>structure</code> that may include nodes and nested clusters. Code example:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">cluster</span><span class=\"p\">:</span>\n        <span class=\"nt\">structure</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n                <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">third</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n                <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">fourth</span>\n</pre>\n<p>The following code example shows how it\u2019s possible to assign Graphviz attributes and Archeme classes to nodes and clusters:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n        <span class=\"nt\">label</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The First Node</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">amazing</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">awesome</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">cluster</span><span class=\"p\">:</span>\n        <span class=\"nt\">label</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Wonderful Cluster</span>\n        <span class=\"nt\">style</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">filled</span>\n        <span class=\"nt\">fillcolor</span><span class=\"p\">:</span> <span class=\"s\">'#cccccc'</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">wonderful</span>\n        <span class=\"nt\">structure</span><span class=\"p\">:</span>\n            <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>Single class name may be specified as a string; multiple class names should be specified as a list.</p>\n<p>Archeme merges attributes of classes. Suppose 2 classes are defined as the following:</p>\n<pre><span class=\"nt\">classes</span><span class=\"p\">:</span>\n    <span class=\"nt\">amazing</span><span class=\"p\">:</span>\n        <span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box</span>\n        <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n        <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"nt\">style</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">rounded</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">filled</span>\n    <span class=\"nt\">awesome</span><span class=\"p\">:</span>\n        <span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n        <span class=\"nt\">style</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">dashed</span>\n        <span class=\"nt\">fillcolor</span><span class=\"p\">:</span> <span class=\"s\">'#99ccff'</span>\n</pre>\n<p>If both styles are assigned to some node in the order: <code>[amazing, awesome]</code>, the resulting attributes assigned to the node will be:</p>\n<pre><span class=\"nt\">shape</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">box</span>\n<span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4</span>\n<span class=\"nt\">height</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n<span class=\"nt\">style</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">rounded</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">filled</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">dashed</span>\n<span class=\"nt\">fillcolor</span><span class=\"p\">:</span> <span class=\"s\">'#99ccff'</span>\n</pre>\n<p>So, the <code>style</code> attributes will be combined. Contradicting values of the attributes of the same names will be taken from the last class in the sequence (like <code>height</code> in this example).</p>\n<h4>Relations</h4>\n<p>To show relations between nodes, edges are used. To define a list of edges, use the <code>edges</code> section. Simple code example:</p>\n<pre><span class=\"nt\">edges</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">third</span>\n</pre>\n<p>In this example, 2 edges are defined. These edges specify relations between 3 nodes with the identifiers <code>first</code>, <code>second</code>, and <code>third</code>.</p>\n<p>Archeme uses directed graphs only. So each edge should have a tail (\u201csource,\u201d \u201cbeginning\u201d) and a head (\u201ctarget,\u201d \u201cending\u201d). For example, if an edge represents interaction between a client and a server, it will be alright if a tail will be assigned to a client, and a head\u2014to a server. However, client requests and server responses may be shown as two different counter-directed edges.</p>\n<p>You may assign Graphviz attributes and classes to edges like in case with nodes and clusters. Example:</p>\n<pre><span class=\"nt\">edges</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n        <span class=\"nt\">label</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">HTTP API</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">two_arrows</span>\n</pre>\n<p>Archeme provides extended syntax for the <code>label</code> and <code>xlabel</code> attributes of edges. You may specify protocol and describe transferred data:</p>\n<pre>    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n        <span class=\"nt\">label</span><span class=\"p\">:</span>\n            <span class=\"nt\">protocol</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">HTTP</span>\n            <span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Admin API</span>\n</pre>\n<p>This code will be transformed into the following construction in a graph description:</p>\n<pre><code>\"first\" -&gt; \"second\" [label = &lt;&lt;b&gt;HTTP&lt;/b&gt;&lt;br /&gt;Admin API&gt;];\n</code></pre>\n<h4>Positioning</h4>\n<p>Archeme implements a powerful concept to control relative positions of scheme elements. Positioning may be described as a multiline text grid. Suppose you have 10 nodes with the identifiers from <code>first</code> to <code>tenth</code>. Feel free to set their positions in this visual way:</p>\n<pre><span class=\"nt\">grid</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n    <span class=\"no\">-        -    second    sixth</span>\n    <span class=\"no\">first         third</span>\n                  <span class=\"no\">fourth               eighth</span>\n                                       <span class=\"no\">ninth</span>\n                  <span class=\"no\">fifth     seventh</span>\n                                       <span class=\"no\">-</span>\n                                       <span class=\"no\">tenth</span>\n</pre>\n<p>If the engine <code>neato</code> or <code>fdp</code> is used, the nodes will be strictly positioned with the <code>pos</code> attribute. Positions will be calculated using the values of the <code>elements.grid.spacing_x</code> and <code>elements.grid.spacing_y</code> parameters. A hyphen (<code>-</code>) means skipped step if it\u2019s necessary not to place any nodes to the respective horizontal or vertical coordinate.</p>\n<p>Grid steps are defined by start positions of node identifiers. So, the nodes <code>second</code>, <code>third</code>, <code>fourth</code>, and <code>fifth</code> from the example will be placed to the third horizontal step of the grid.</p>\n<p>The <code>dot</code> engine ignores the <code>pos</code> attribute, but it allows to place nodes with the same rank to the same hierarchy level of the resulting layout. If the <code>dot</code> engine is used, Archeme analyzes a grid and defines groups (subgraphs) of nodes with the same ranks. For the example above and the <code>elements.graph.rankdir</code> attribute set to <code>LR</code> (left to right), Archeme will generate the following groups:</p>\n<ul>\n<li><code>second</code>, <code>third</code>, <code>fourth</code>, <code>fifth</code>;</li>\n<li><code>sixth</code>, <code>seventh</code>;</li>\n<li><code>eighth</code>, <code>ninth</code>, <code>tenth</code>.</li>\n</ul>\n<p>If the <code>elements.graph.rankdir</code> attribute is set to <code>TB</code> (top to bottom, default in Graphviz), for the example above Archeme will make the following groups:</p>\n<ul>\n<li><code>second</code>, <code>sixth</code>;</li>\n<li><code>first</code>, <code>third</code>;</li>\n<li><code>fourth</code>, <code>eighth</code>;</li>\n<li><code>fifth</code>, <code>seventh</code>.</li>\n</ul>\n<p>If you don\u2019t plan to use the engines <code>neato</code> and <code>fdp</code> to draw a certain scheme, and use only <code>dot</code>, you don\u2019t need to describe grids. For <code>dot</code>, instead of using grids, you may define groups of nodes of the same ranks explicitly. Example of code that represents the last described case:</p>\n<pre><span class=\"nt\">groups</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">sixth</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">third</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fourth</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">eighth</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">fifth</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">seventh</span>\n</pre>\n<h3>Combining Multiple Schemes</h3>\n<p>To combine multiple schemes or diagrams into a single one, the <code>merge</code> Archeme command is used. Archeme merges multiple scheme descriptions using the concept of modules.</p>\n<p>A module is a scheme description that is used as a part of the structure of the resulting combined scheme description. Optionally some nodes of a certain module may be excluded from the resulting combined scheme description.</p>\n<p>Each module should have an identifier. To avoid conflicts when some nodes have the same identifiers in different modules, node identifiers are combined with module identifiers in the resulting scheme description. For example, the node <code>api</code> from the module <code>backend</code> will get the identifier <code>backend.api</code> in the resulting combined scheme description.</p>\n<p>Archeme works with modules that are described in separate files. To include some module into the resulting scheme structure, you should specify module identifier and module description file. Code example:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">module</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">backend</span>\n        <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">path/to/backend.yml</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">module</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">frontend</span>\n        <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">path/to/frontend.yml</span>\n</pre>\n<p>It seems most convenient to describe modules in separate files, if Archeme is used as a stand-alone command-line tool. However, Archeme allows to specify a module description directly as a value of the <code>description</code> parameter that should be used instead of the <code>file</code> parameter. This way may be preferred when Archeme is used as a Python package in a third-party application.</p>\n<p>In this example, 2 modules with the identifiers <code>backend</code> and <code>frontend</code> are added to the resulting structure.</p>\n<p>If you need not to include some module nodes into the resulting structure, use the optional <code>exclude</code> parameter:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">module</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">frontend</span>\n        <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">path/to/frontend.yml</span>\n        <span class=\"nt\">exclude</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">client_device</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cdn</span>\n</pre>\n<p>In this example, the nodes with the identifiers <code>client_device</code> and <code>cdn</code> of the module <code>frontend</code> will not be taken into account in the resulting combined scheme description.</p>\n<p>Feel free to add nodes, clusters, and edges to the resulting scheme description in the usual way:</p>\n<pre><span class=\"nt\">structure</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">module</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">backend</span>\n        <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">path/to/backend.yml</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">module</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">frontend</span>\n        <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">path/to/frontend.yml</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">node</span><span class=\"p\">:</span>\n        <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">middleware</span>\n<span class=\"nt\">edges</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">frontend.application</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">middleware</span>\n    <span class=\"p p-Indicator\">-</span>   <span class=\"nt\">tail</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">middleware</span>\n        <span class=\"nt\">head</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">backend.api</span>\n</pre>\n<p>Archeme provides smart merging of grids. Suppose you need to combine 4 modules with the identifiers <code>one</code>, <code>two</code>, <code>three</code>, and <code>four</code>. You may describe a grid that should be used in the resulting scheme description:</p>\n<pre><span class=\"nt\">grid</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n    <span class=\"no\">one      two</span>\n    <span class=\"no\">three    four</span>\n</pre>\n<p>Archeme will generate the resulting grid in which, for example, the leftmost nodes of the module <code>two</code> will be placed at the same horizontal position as the leftmost nodes of the module <code>four</code>.</p>\n<p>When merging modules, Archeme deeply processes the <code>structure</code>, <code>edges</code>, <code>grid</code>, and <code>groups</code> parameters of each module. Common parameters for multiple elements such as <code>engine</code> and <code>elements</code> will be merged using the simplest algorithm. It\u2019s best to specify them in a separate config file that will not be involved in the merge process.</p>\n<h2>Examples</h2>\n<p>Archeme repository includes <a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/\" rel=\"nofollow\">some examples</a> of architectural schemes.</p>\n<p>Each example is located in its own folder that has the following structure:</p>\n<ul>\n<li><code>source/*</code>\u2014YAML-based DSL sources;</li>\n<li><code>target/*</code>\u2014generated graph descriptions for Graphviz, and resulting PNG images;</li>\n<li><code>draw.sh</code>\u2014shell script that executes the commands which create target files.</li>\n</ul>\n<p>PNG images drawn with Graphviz are shown below.</p>\n<h3>1. Foliant Architecture, Simple, Drawn With <code>neato</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/01_foliant_architecture_simple/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79fbbeb18ff187234842f2f7ea988ad14766034c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30315f666f6c69616e745f6172636869746563747572655f73696d706c652f7461726765742f6172636869746563747572652e706e67\"></p>\n<h3>2. Foliant Architecture, Pretty, Drawn With <code>neato</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/02_foliant_architecture_pretty/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/530f60133498408f5257ce8d012997e35fb8470d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30325f666f6c69616e745f6172636869746563747572655f7072657474792f7461726765742f6172636869746563747572652e706e67\"></p>\n<h3>3. Foliant Architecture, With A Cluster, Drawn With <code>fdp</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/03_foliant_architecture_with_cluster/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a302e359bcbb5adad0c0f36310ac42143d7a1f3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30335f666f6c69616e745f6172636869746563747572655f776974685f636c75737465722f7461726765742f6172636869746563747572652e706e67\"></p>\n<h3>4. Foliant Architecture, With More Clusters, Drawn With <code>fdp</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/04_foliant_architecture_more_clusters/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/025c61a54238446a4fdd96adaa5df3d0ec0b3fd0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30345f666f6c69616e745f6172636869746563747572655f6d6f72655f636c7573746572732f7461726765742f6172636869746563747572652e706e67\"></p>\n<h3>5. Foliant Architecture, With Many Nested Clusters, Drawn With <code>dot</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/05_foliant_architecture_many_nested_clusters/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41d4f9d2209071b588c5abfe57139b14c2bb6c99/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30355f666f6c69616e745f6172636869746563747572655f6d616e795f6e65737465645f636c7573746572732f7461726765742f6172636869746563747572652e706e67\"></p>\n<h3>6. Digital Television System, Two Subsystems, Two Styles, Drawn With <code>dot</code></h3>\n<ul>\n<li><a href=\"https://github.com/foliant-docs/archeme/tree/master/examples/06_digital_tv_architecture/\" rel=\"nofollow\">Directory with the example files</a></li>\n</ul>\n<h4>Style 1</h4>\n<h5>Subsystem 1</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dd0a1eb964bf42fdccff59e3a9bb067aa8f8b30/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f312f6f74745f6476725f73756273797374656d2e706e67\"></p>\n<h5>Subsystem 2</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7043d92eff746379249ee6b4c8b74c4b760e1310/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f312f736572766963655f6261636b656e642e706e67\"></p>\n<h5>Whole System, Reuses Subsystems Descriptions</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/396c904737744ceac38a960e727aa9e70f2cb6cf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f312f636f6d62696e65642e706e67\"></p>\n<h4>Style 2</h4>\n<h5>Subsystem 1</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09945510f51f83531dd66f444abe49db4abd8123/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f322f6f74745f6476725f73756273797374656d2e706e67\"></p>\n<h5>Subsystem 2</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c3f3ef58f7a880619ef1f55791106f01e38c80c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f322f736572766963655f6261636b656e642e706e67\"></p>\n<h5>Whole System, Reuses Subsystems Descriptions</h5>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/673a771e14134b7f82d45c126e5d2a7b647d18ff/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666f6c69616e742d646f63732f61726368656d652f6d61737465722f6578616d706c65732f30365f6469676974616c5f74765f6172636869746563747572652f7461726765742f7374796c655f322f636f6d62696e65642e706e67\"></p>\n<p>Clouds and client devices icons are made by <a href=\"https://www.flaticon.com/authors/iconixar/\" rel=\"nofollow\">iconixar</a>.</p>\n\n          </div>"}, "last_serial": 6945406, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1629397ca276b04cdfdfeb1514688788", "sha256": "882c615b98eb2b8c4ba18632ce4bf792019ecf493007816c3cdbfd789a1bdf2e"}, "downloads": -1, "filename": "archeme-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1629397ca276b04cdfdfeb1514688788", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15759, "upload_time": "2020-03-26T15:38:26", "upload_time_iso_8601": "2020-03-26T15:38:26.277587Z", "url": "https://files.pythonhosted.org/packages/5e/ad/d0972a13bce24482f398ce8d1b91bd8c4968fec54c0dd251732e55028434/archeme-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd585e1ffd40996244cced22933f688a", "sha256": "1417baac601ba34ae79304015642fdcf41b13facefc173017fda0c7528a6bec1"}, "downloads": -1, "filename": "archeme-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bd585e1ffd40996244cced22933f688a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16819, "upload_time": "2020-03-26T15:38:28", "upload_time_iso_8601": "2020-03-26T15:38:28.760142Z", "url": "https://files.pythonhosted.org/packages/00/e2/383e770382533526ee80f2bc810cbbfabd31108c16ffebf321e989c13d55/archeme-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7cb822df9bacb3d7a394e6f38315c4d9", "sha256": "4d6e1a321ff31174516f073ed66fb76394dd050d43737f45ebf094dff0e82a3e"}, "downloads": -1, "filename": "archeme-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7cb822df9bacb3d7a394e6f38315c4d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15922, "upload_time": "2020-03-27T21:19:18", "upload_time_iso_8601": "2020-03-27T21:19:18.103600Z", "url": "https://files.pythonhosted.org/packages/cf/8b/12eee56237bb16760f049356d30dccdfa253ae3df67a9e2ee906a809f293/archeme-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "866f63642ef5de43603bcea1f2ff085f", "sha256": "635107cfa1467942bbf7cc4358cb4b16e35783110470a75a05478cc8f4325912"}, "downloads": -1, "filename": "archeme-1.0.1.tar.gz", "has_sig": false, "md5_digest": "866f63642ef5de43603bcea1f2ff085f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17877, "upload_time": "2020-03-27T21:19:19", "upload_time_iso_8601": "2020-03-27T21:19:19.820483Z", "url": "https://files.pythonhosted.org/packages/a2/f8/2fa8ff14d13704c1985c11ee168ee8ccf37f6ce02b6de574e258a844a4a5/archeme-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "82254e608f584b2ac133059832d16ed2", "sha256": "5c68381dd3d7bf45475ccb0406e9130b5ab83aa1a5caf97a025f16659f58dcb5"}, "downloads": -1, "filename": "archeme-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82254e608f584b2ac133059832d16ed2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15996, "upload_time": "2020-04-03T18:59:31", "upload_time_iso_8601": "2020-04-03T18:59:31.210107Z", "url": "https://files.pythonhosted.org/packages/b2/f0/2997dc78fce635216ff6cd0504ff42e2fad8621c5c5c84a74f85911ee632/archeme-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69e63b5e239ef4820566c66bf551fd3d", "sha256": "d3086a36645edc7e1ce494a867ea3bde1edd7da1ab673bc878b2b93c6950f30d"}, "downloads": -1, "filename": "archeme-1.0.2.tar.gz", "has_sig": false, "md5_digest": "69e63b5e239ef4820566c66bf551fd3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17941, "upload_time": "2020-04-03T18:59:32", "upload_time_iso_8601": "2020-04-03T18:59:32.929173Z", "url": "https://files.pythonhosted.org/packages/12/f6/e836f1cd58b880947d48df949249d764f6d5af8d7741ba66b5dd9a8a08ee/archeme-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82254e608f584b2ac133059832d16ed2", "sha256": "5c68381dd3d7bf45475ccb0406e9130b5ab83aa1a5caf97a025f16659f58dcb5"}, "downloads": -1, "filename": "archeme-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82254e608f584b2ac133059832d16ed2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15996, "upload_time": "2020-04-03T18:59:31", "upload_time_iso_8601": "2020-04-03T18:59:31.210107Z", "url": "https://files.pythonhosted.org/packages/b2/f0/2997dc78fce635216ff6cd0504ff42e2fad8621c5c5c84a74f85911ee632/archeme-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69e63b5e239ef4820566c66bf551fd3d", "sha256": "d3086a36645edc7e1ce494a867ea3bde1edd7da1ab673bc878b2b93c6950f30d"}, "downloads": -1, "filename": "archeme-1.0.2.tar.gz", "has_sig": false, "md5_digest": "69e63b5e239ef4820566c66bf551fd3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17941, "upload_time": "2020-04-03T18:59:32", "upload_time_iso_8601": "2020-04-03T18:59:32.929173Z", "url": "https://files.pythonhosted.org/packages/12/f6/e836f1cd58b880947d48df949249d764f6d5af8d7741ba66b5dd9a8a08ee/archeme-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:24 2020"}