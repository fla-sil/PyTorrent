{"info": {"author": "ussserrr", "author_email": "andrei4.2008@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Embedded Systems"], "description": "# stm32pio\nSmall cross-platform Python app that can create and update [PlatformIO](https://platformio.org) projects from [STM32CubeMX](https://www.st.com/en/development-tools/stm32cubemx.html) `.ioc` files.\n\nIt uses STM32CubeMX to generate a HAL-framework-based code and alongside creates PlatformIO project with compatible parameters to stick them both together.\n\nThe [GUI version](/stm32pio_gui) is available, too.\n\n![Logo](/screenshots/logo.png)\n\n\n## Table of contents\n> - [Features](#features)\n> - [Requirements](#requirements)\n> - [Installation](#installation)\n> - [Usage](#usage)\n>   - [GUI from CLI](#gui-from-cli)\n>   - [Project patching](#project-patching)\n>   - [Embedding](#embedding)\n> - [Example](#example)\n> - [Testing](#testing)\n> - [Restrictions](#restrictions)\n\n\n## Features\n  - Start the new complete project in a single directory using only an `.ioc` file\n  - Update an existing project after changing hardware options in CubeMX\n  - Clean-up the project\n  - Get the status information\n  - *[optional]* Automatically run your favorite editor in the end\n  - *[optional]* Automatically make an initial build of the project\n  - *[optional]* GUI version (beta) (see stm32pio-gui sub-folder for the dedicated README)\n\n\n## Requirements:\n  - For this app:\n    - Python 3.6 and above\n  - For usage:\n    - macOS, Linux, Windows\n    - STM32CubeMX with desired downloaded frameworks (F0, F1, etc.)\n    - Java CLI (JRE) (likely is already installed if the STM32CubeMX is working)\n    - PlatformIO CLI (already presented if you have installed PlatformIO via some package manager or need to be installed as the \"command line extension\" from IDE)\n\nA general recommendation there would be to test both CubeMX (code generation) and PlatformIO (project creation, building) at least once before using stm32pio to make sure that all tools work properly even without any \"glue\".\n\n\n## Installation\nYou can run the app in a portable way by downloading or cloning the snapshot of the repository and invoking the main script or Python module:\n```shell script\nstm32pio-repo/ $   python3 stm32pio/app.py  # or\nstm32pio-repo/ $   python3 -m stm32pio  # or\nany-path/ $   python3 path/to/stm32pio-repo/stm32pio/app.py\n```\n(we assume `python3` and `pip3` hereinafter). It is possible to run the app like this from anywhere.\n\nHowever, it's handier to install the utility to be able to run stm32pio from anywhere. Use\n```shell script\nstm32pio-repo/ $   pip install wheel\nstm32pio-repo/ $   python setup.py sdist bdist_wheel\nstm32pio-repo/ $   pip install dist/stm32pio-X.XX-py3-none-any.whl\n```\ncommands to launch the setup process. Now you can simply type `stm32pio` in the terminal to run the utility in any directory.\n\nFinally, the PyPI distribution (starting from v0.95) is available:\n```shell script\n$ pip install stm32pio\n```\n\nTo uninstall in both cases run\n```shell script\n$ pip uninstall stm32pio\n```\n\n\n## Usage\nBasically, you need to follow such a pattern:\n  1. Create CubeMX project (.ioc file), set-up your hardware configuration, save with the compatible parameters\n  2. Run the stm32pio that automatically invokes CubeMX to generate the code, creates PlatformIO project, patches a `platformio.ini` file and so on\n  3. Work on the project in your editor as usual, compile/upload/debug etc.\n  4. Edit the configuration in CubeMX when necessary, then run stm32pio to re-generate the code\n\nRefer to Example section on more detailed steps. If you face off with some error try to enable a verbose output to get more information about a problem:\n```shell script\n$ stm32pio -v [command] [options]\n```\n\nOn the first run stm32pio will create a config file `stm32pio.ini`, syntax of which is similar to the `platformio.ini`. You can also create this config without any following operations by initializing the project:\n```shell script\n$ stm32pio init -d path/to/project\n```\nIt may be useful to tweak some parameters before proceeding. The structure of the config is separated in two sections: `app` and `project`. Options of the first one is related to the global settings such as commands to invoke different instruments though they can be adjusted on the per-project base while the second section contains of project-related parameters. See comments in the [`settings.py`](/stm32pio/settings.py) file for parameters description.\n\nYou can always run\n```shell script\n$ python app.py --help\n```\nto see help on available commands. Find the copy of its output on the [project wiki](https://github.com/ussserrr/stm32pio/wiki/stm32pio-help) page, also.\n\n### GUI from CLI\nYou can start the [GUI version](/stm32pio_gui) using `gui` subcommand and pass some of the arguments to it:\n```shell script\n$ stm32pio gui -d ./sample-project -b discovery_f4\n```\n\n### Project patching\n\nNote, that the patch operation (which takes the CubeMX code and PlatformIO project to the compliance) erases all the comments (lines starting with `;`) inside the `platformio.ini` file. They are not required anyway, in general, but if you need them for some reason please consider to save the information somewhere else.\n\nFor those who want to modify the patch (default one is at [`settings.py`](/stm32pio/settings.py), project one in a config file `stm32pio.ini`): it can has a general-form .INI content so it is possible to specify several sections and apply composite patches. This works totally fine for the most cases except, perhaps, some really big complex patches involving, say, the parameters interpolation feature. It is turned off for both `platformio.ini` and user's patch parsing by default. If there are some problems you've met due to a such behavior please modify the source code to match the parameters interpolation kind for the configs you need to. Seems like `platformio.ini` uses `ExtendedInterpolation` for its needs, by the way.\n\n### Embedding\n\nYou can also use stm32pio as an ordinary Python package and embed it in your own application. Find the minimal example at the [examples](/examples) to see some possible ways of implementing this. Basically, you need to import `stm32pio.lib` module (where the main `Stm32pio` class resides), (optionally) set up a logger and you are good to go. If you prefer higher-level API similar to the CLI version, use `main()` function in `app.py` passing the same CLI arguments to it (except the actual script name). Also, take a look at the CLI ([`app.py`](/stm32pio/app.py)) or GUI versions.\n\n\n## Example\n1. Run CubeMX, choose MCU/board, do all necessary tweaking\n2. Select `Project Manager -> Project` tab, specify \"Project Name\", choose \"Other Toolchains (GPDSC)\". In `Code Generator` tab check \"Copy only the necessary library files\" and \"Generate periphery initialization as a pair of '.c/.h' files per peripheral\" options\n\n![Code Generator tab](/screenshots/tab_CodeGenerator.png)\n\n3. Back in the first tab (Project) copy the \"Toolchain Folder Location\" string (you maybe not be able to copy it in modern CubeMX versions so use terminal or file manager to do this). Save the project, close CubeMX\n\n![Project tab](/screenshots/tab_Project.png)\n\n4. Use a copied string (project folder) as a `-d` argument for stm32pio (can be omitted if your current working directory is already a project directory).\n5. Run `platformio boards` (`pio boards`) or go to [boards](https://docs.platformio.org/en/latest/boards) to list all supported devices. Pick one and use its ID as a `-b` argument (for example, `nucleo_f031k6`)\n6. All done! You can now run\n   ```shell script\n   $ stm32pio new -d path/to/cubemx/project/ -b nucleo_f031k6 --start-editor=code --with-build\n   ```\n   to trigger the code generation, compile the project and start the VSCode editor with opened folder (last 2 options are given as an example and they are not required). Make sure you have all the tools in PATH (`java` (or set its path in `stm32pio.ini`), `platformio`, `python`, editor). You can use a slightly shorter form if you are already located in the project directory:\n   ```shell script\n   path/to/cubemx/project/ $   stm32pio new -b nucleo_f031k6\n   ```\n7. To get the information about the current state of the project use `status` command.\n8. If you will be in need to update hardware configuration in the future, make all the necessary stuff in CubeMX and run `generate` command in a similar way:\n   ```shell script\n   $ stm32pio generate -d /path/to/cubemx/project\n   ```\n9. To clean-up the folder and keep only the `.ioc` file run `clean` command.\n\n\n## Testing\nThere are some tests in file [`test.py`](/stm32pio/tests/test.py) (based on the unittest module). Run\n```shell script\nstm32pio-repo/ $   python -m unittest -b -v\n```\nto test the app. It uses STM32F0 framework to generate and build a code from the test [`stm32pio-test-project.ioc`](/stm32pio-test-project/stm32pio-test-project.ioc) project file. Please make sure that the test project folder is clean (i.e. contains only an .ioc file) before running the test otherwise it can lead to some cases failing. Tests automatically create temporary directory (using `tempfile` Python standard module) where all actions are performed.\n\nFor the specific test suite or case you can use\n```shell script\nstm32pio-repo/ $   python -m unittest tests.test_integration.TestIntegration -b -v\nstm32pio-repo/ $   python -m unittest tests.test_cli.TestCLI.test_verbosity -b -v\n```\n\n\n## Restrictions\n  - The tool doesn't check for different parameters compatibility, e.g. CPU frequency, memory sizes and so on. It simply eases your workflow with these 2 programs (PlatformIO and STM32CubeMX) a little bit.\n  - CubeMX middlewares are not supported yet because it's hard to be prepared for every possible configuration. You need to manually adjust them to build appropriately. For example, FreeRTOS can be added via PlatformIO' `lib` feature or be directly compiled in its own directory using `lib_extra_dirs` option:\n    ```ini\n    lib_extra_dirs = Middlewares/Third_Party/FreeRTOS\n    ```\n    You also need to move all `.c`/`.h` files to the appropriate folders respectively. See PlatformIO documentation for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ussserrr/stm32pio", "keywords": "platformio,stm32,stm32cubemx,cubemx", "license": "", "maintainer": "", "maintainer_email": "", "name": "stm32pio", "package_url": "https://pypi.org/project/stm32pio/", "platform": "", "project_url": "https://pypi.org/project/stm32pio/", "project_urls": {"Homepage": "https://github.com/ussserrr/stm32pio"}, "release_url": "https://pypi.org/project/stm32pio/1.30/", "requires_dist": ["PySide2 ; extra == 'gui'"], "requires_python": ">=3.6", "summary": "Small cross-platform Python app that can create and update PlatformIO projects from STM32CubeMX .ioc files. It uses STM32CubeMX to generate a HAL-framework-based code and alongside creates PlatformIO project with compatible parameters to stick them both together", "version": "1.30", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>stm32pio</h1>\n<p>Small cross-platform Python app that can create and update <a href=\"https://platformio.org\" rel=\"nofollow\">PlatformIO</a> projects from <a href=\"https://www.st.com/en/development-tools/stm32cubemx.html\" rel=\"nofollow\">STM32CubeMX</a> <code>.ioc</code> files.</p>\n<p>It uses STM32CubeMX to generate a HAL-framework-based code and alongside creates PlatformIO project with compatible parameters to stick them both together.</p>\n<p>The <a href=\"/stm32pio_gui\" rel=\"nofollow\">GUI version</a> is available, too.</p>\n<p><img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/479a9ccb56f94dfd51936082819cade8a454acd1/2f73637265656e73686f74732f6c6f676f2e706e67\"></p>\n<h2>Table of contents</h2>\n<blockquote>\n<ul>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#gui-from-cli\" rel=\"nofollow\">GUI from CLI</a></li>\n<li><a href=\"#project-patching\" rel=\"nofollow\">Project patching</a></li>\n<li><a href=\"#embedding\" rel=\"nofollow\">Embedding</a></li>\n</ul>\n</li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#restrictions\" rel=\"nofollow\">Restrictions</a></li>\n</ul>\n</blockquote>\n<h2>Features</h2>\n<ul>\n<li>Start the new complete project in a single directory using only an <code>.ioc</code> file</li>\n<li>Update an existing project after changing hardware options in CubeMX</li>\n<li>Clean-up the project</li>\n<li>Get the status information</li>\n<li><em>[optional]</em> Automatically run your favorite editor in the end</li>\n<li><em>[optional]</em> Automatically make an initial build of the project</li>\n<li><em>[optional]</em> GUI version (beta) (see stm32pio-gui sub-folder for the dedicated README)</li>\n</ul>\n<h2>Requirements:</h2>\n<ul>\n<li>For this app:\n<ul>\n<li>Python 3.6 and above</li>\n</ul>\n</li>\n<li>For usage:\n<ul>\n<li>macOS, Linux, Windows</li>\n<li>STM32CubeMX with desired downloaded frameworks (F0, F1, etc.)</li>\n<li>Java CLI (JRE) (likely is already installed if the STM32CubeMX is working)</li>\n<li>PlatformIO CLI (already presented if you have installed PlatformIO via some package manager or need to be installed as the \"command line extension\" from IDE)</li>\n</ul>\n</li>\n</ul>\n<p>A general recommendation there would be to test both CubeMX (code generation) and PlatformIO (project creation, building) at least once before using stm32pio to make sure that all tools work properly even without any \"glue\".</p>\n<h2>Installation</h2>\n<p>You can run the app in a portable way by downloading or cloning the snapshot of the repository and invoking the main script or Python module:</p>\n<pre>stm32pio-repo/ $   python3 stm32pio/app.py  <span class=\"c1\"># or</span>\nstm32pio-repo/ $   python3 -m stm32pio  <span class=\"c1\"># or</span>\nany-path/ $   python3 path/to/stm32pio-repo/stm32pio/app.py\n</pre>\n<p>(we assume <code>python3</code> and <code>pip3</code> hereinafter). It is possible to run the app like this from anywhere.</p>\n<p>However, it's handier to install the utility to be able to run stm32pio from anywhere. Use</p>\n<pre>stm32pio-repo/ $   pip install wheel\nstm32pio-repo/ $   python setup.py sdist bdist_wheel\nstm32pio-repo/ $   pip install dist/stm32pio-X.XX-py3-none-any.whl\n</pre>\n<p>commands to launch the setup process. Now you can simply type <code>stm32pio</code> in the terminal to run the utility in any directory.</p>\n<p>Finally, the PyPI distribution (starting from v0.95) is available:</p>\n<pre>$ pip install stm32pio\n</pre>\n<p>To uninstall in both cases run</p>\n<pre>$ pip uninstall stm32pio\n</pre>\n<h2>Usage</h2>\n<p>Basically, you need to follow such a pattern:</p>\n<ol>\n<li>Create CubeMX project (.ioc file), set-up your hardware configuration, save with the compatible parameters</li>\n<li>Run the stm32pio that automatically invokes CubeMX to generate the code, creates PlatformIO project, patches a <code>platformio.ini</code> file and so on</li>\n<li>Work on the project in your editor as usual, compile/upload/debug etc.</li>\n<li>Edit the configuration in CubeMX when necessary, then run stm32pio to re-generate the code</li>\n</ol>\n<p>Refer to Example section on more detailed steps. If you face off with some error try to enable a verbose output to get more information about a problem:</p>\n<pre>$ stm32pio -v <span class=\"o\">[</span>command<span class=\"o\">]</span> <span class=\"o\">[</span>options<span class=\"o\">]</span>\n</pre>\n<p>On the first run stm32pio will create a config file <code>stm32pio.ini</code>, syntax of which is similar to the <code>platformio.ini</code>. You can also create this config without any following operations by initializing the project:</p>\n<pre>$ stm32pio init -d path/to/project\n</pre>\n<p>It may be useful to tweak some parameters before proceeding. The structure of the config is separated in two sections: <code>app</code> and <code>project</code>. Options of the first one is related to the global settings such as commands to invoke different instruments though they can be adjusted on the per-project base while the second section contains of project-related parameters. See comments in the <a href=\"/stm32pio/settings.py\" rel=\"nofollow\"><code>settings.py</code></a> file for parameters description.</p>\n<p>You can always run</p>\n<pre>$ python app.py --help\n</pre>\n<p>to see help on available commands. Find the copy of its output on the <a href=\"https://github.com/ussserrr/stm32pio/wiki/stm32pio-help\" rel=\"nofollow\">project wiki</a> page, also.</p>\n<h3>GUI from CLI</h3>\n<p>You can start the <a href=\"/stm32pio_gui\" rel=\"nofollow\">GUI version</a> using <code>gui</code> subcommand and pass some of the arguments to it:</p>\n<pre>$ stm32pio gui -d ./sample-project -b discovery_f4\n</pre>\n<h3>Project patching</h3>\n<p>Note, that the patch operation (which takes the CubeMX code and PlatformIO project to the compliance) erases all the comments (lines starting with <code>;</code>) inside the <code>platformio.ini</code> file. They are not required anyway, in general, but if you need them for some reason please consider to save the information somewhere else.</p>\n<p>For those who want to modify the patch (default one is at <a href=\"/stm32pio/settings.py\" rel=\"nofollow\"><code>settings.py</code></a>, project one in a config file <code>stm32pio.ini</code>): it can has a general-form .INI content so it is possible to specify several sections and apply composite patches. This works totally fine for the most cases except, perhaps, some really big complex patches involving, say, the parameters interpolation feature. It is turned off for both <code>platformio.ini</code> and user's patch parsing by default. If there are some problems you've met due to a such behavior please modify the source code to match the parameters interpolation kind for the configs you need to. Seems like <code>platformio.ini</code> uses <code>ExtendedInterpolation</code> for its needs, by the way.</p>\n<h3>Embedding</h3>\n<p>You can also use stm32pio as an ordinary Python package and embed it in your own application. Find the minimal example at the <a href=\"/examples\" rel=\"nofollow\">examples</a> to see some possible ways of implementing this. Basically, you need to import <code>stm32pio.lib</code> module (where the main <code>Stm32pio</code> class resides), (optionally) set up a logger and you are good to go. If you prefer higher-level API similar to the CLI version, use <code>main()</code> function in <code>app.py</code> passing the same CLI arguments to it (except the actual script name). Also, take a look at the CLI (<a href=\"/stm32pio/app.py\" rel=\"nofollow\"><code>app.py</code></a>) or GUI versions.</p>\n<h2>Example</h2>\n<ol>\n<li>Run CubeMX, choose MCU/board, do all necessary tweaking</li>\n<li>Select <code>Project Manager -&gt; Project</code> tab, specify \"Project Name\", choose \"Other Toolchains (GPDSC)\". In <code>Code Generator</code> tab check \"Copy only the necessary library files\" and \"Generate periphery initialization as a pair of '.c/.h' files per peripheral\" options</li>\n</ol>\n<p><img alt=\"Code Generator tab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbbdb44715ddec4ceb29ac1f7626786088c24c7b/2f73637265656e73686f74732f7461625f436f646547656e657261746f722e706e67\"></p>\n<ol>\n<li>Back in the first tab (Project) copy the \"Toolchain Folder Location\" string (you maybe not be able to copy it in modern CubeMX versions so use terminal or file manager to do this). Save the project, close CubeMX</li>\n</ol>\n<p><img alt=\"Project tab\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/119ead9157229f3fd7a1b6e48033e9987a875b5a/2f73637265656e73686f74732f7461625f50726f6a6563742e706e67\"></p>\n<ol>\n<li>Use a copied string (project folder) as a <code>-d</code> argument for stm32pio (can be omitted if your current working directory is already a project directory).</li>\n<li>Run <code>platformio boards</code> (<code>pio boards</code>) or go to <a href=\"https://docs.platformio.org/en/latest/boards\" rel=\"nofollow\">boards</a> to list all supported devices. Pick one and use its ID as a <code>-b</code> argument (for example, <code>nucleo_f031k6</code>)</li>\n<li>All done! You can now run\n<pre>$ stm32pio new -d path/to/cubemx/project/ -b nucleo_f031k6 --start-editor<span class=\"o\">=</span>code --with-build\n</pre>\nto trigger the code generation, compile the project and start the VSCode editor with opened folder (last 2 options are given as an example and they are not required). Make sure you have all the tools in PATH (<code>java</code> (or set its path in <code>stm32pio.ini</code>), <code>platformio</code>, <code>python</code>, editor). You can use a slightly shorter form if you are already located in the project directory:\n<pre>path/to/cubemx/project/ $   stm32pio new -b nucleo_f031k6\n</pre>\n</li>\n<li>To get the information about the current state of the project use <code>status</code> command.</li>\n<li>If you will be in need to update hardware configuration in the future, make all the necessary stuff in CubeMX and run <code>generate</code> command in a similar way:\n<pre>$ stm32pio generate -d /path/to/cubemx/project\n</pre>\n</li>\n<li>To clean-up the folder and keep only the <code>.ioc</code> file run <code>clean</code> command.</li>\n</ol>\n<h2>Testing</h2>\n<p>There are some tests in file <a href=\"/stm32pio/tests/test.py\" rel=\"nofollow\"><code>test.py</code></a> (based on the unittest module). Run</p>\n<pre>stm32pio-repo/ $   python -m unittest -b -v\n</pre>\n<p>to test the app. It uses STM32F0 framework to generate and build a code from the test <a href=\"/stm32pio-test-project/stm32pio-test-project.ioc\" rel=\"nofollow\"><code>stm32pio-test-project.ioc</code></a> project file. Please make sure that the test project folder is clean (i.e. contains only an .ioc file) before running the test otherwise it can lead to some cases failing. Tests automatically create temporary directory (using <code>tempfile</code> Python standard module) where all actions are performed.</p>\n<p>For the specific test suite or case you can use</p>\n<pre>stm32pio-repo/ $   python -m unittest tests.test_integration.TestIntegration -b -v\nstm32pio-repo/ $   python -m unittest tests.test_cli.TestCLI.test_verbosity -b -v\n</pre>\n<h2>Restrictions</h2>\n<ul>\n<li>The tool doesn't check for different parameters compatibility, e.g. CPU frequency, memory sizes and so on. It simply eases your workflow with these 2 programs (PlatformIO and STM32CubeMX) a little bit.</li>\n<li>CubeMX middlewares are not supported yet because it's hard to be prepared for every possible configuration. You need to manually adjust them to build appropriately. For example, FreeRTOS can be added via PlatformIO' <code>lib</code> feature or be directly compiled in its own directory using <code>lib_extra_dirs</code> option:\n<pre><span class=\"na\">lib_extra_dirs</span> <span class=\"o\">=</span> <span class=\"s\">Middlewares/Third_Party/FreeRTOS</span>\n</pre>\nYou also need to move all <code>.c</code>/<code>.h</code> files to the appropriate folders respectively. See PlatformIO documentation for more information.</li>\n</ul>\n\n          </div>"}, "last_serial": 7175569, "releases": {"0.95": [{"comment_text": "", "digests": {"md5": "35d5da4d10403079379bd1b2df3cb246", "sha256": "48f60e881d207c0b420101aa6a4d33c716e240f6ed4ccb6829497b1a21918f0e"}, "downloads": -1, "filename": "stm32pio-0.95-py3-none-any.whl", "has_sig": false, "md5_digest": "35d5da4d10403079379bd1b2df3cb246", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21580, "upload_time": "2019-12-15T20:18:20", "upload_time_iso_8601": "2019-12-15T20:18:20.187555Z", "url": "https://files.pythonhosted.org/packages/a2/08/62beb51bad3b7a454c3c9a37a93870c7b3cfc2a584c61ad8feb11565c60a/stm32pio-0.95-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f71eb7aefab8ce9eb6ddd40e72221c8a", "sha256": "28901fc7c981da1a8538142c0418d54f5cc02231bcebd422520dbf6a1133c17a"}, "downloads": -1, "filename": "stm32pio-0.95.tar.gz", "has_sig": false, "md5_digest": "f71eb7aefab8ce9eb6ddd40e72221c8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 372535, "upload_time": "2019-12-15T20:18:24", "upload_time_iso_8601": "2019-12-15T20:18:24.133151Z", "url": "https://files.pythonhosted.org/packages/9c/a8/05e45584d910f94e959958f984ed13e41a079658c8af8b1683f311d4f438/stm32pio-0.95.tar.gz", "yanked": false}], "0.96": [{"comment_text": "", "digests": {"md5": "f5b956686af9075bb8d5ec0e7c179032", "sha256": "948e1c5482e0262a15fe17b439f1e6396c0ac2a8ba18e337891f2c230778693f"}, "downloads": -1, "filename": "stm32pio-0.96-py3-none-any.whl", "has_sig": false, "md5_digest": "f5b956686af9075bb8d5ec0e7c179032", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22907, "upload_time": "2019-12-17T20:32:07", "upload_time_iso_8601": "2019-12-17T20:32:07.082401Z", "url": "https://files.pythonhosted.org/packages/5c/3b/8263a84b2c58c399a60797bc4aaec542b6d8553284c63fe674729f6c18c5/stm32pio-0.96-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09df910e7f418fdb20e276eb19307a41", "sha256": "560b0e9facd9ed415967c4bca5674899924a45fe87eeb5931fe48101aab1c670"}, "downloads": -1, "filename": "stm32pio-0.96.tar.gz", "has_sig": false, "md5_digest": "09df910e7f418fdb20e276eb19307a41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 374397, "upload_time": "2019-12-17T20:32:11", "upload_time_iso_8601": "2019-12-17T20:32:11.022913Z", "url": "https://files.pythonhosted.org/packages/ac/77/4f3e52eed5460e03ba3c25335601bdbcd74d1a999f51aaf5feed13e4528c/stm32pio-0.96.tar.gz", "yanked": false}], "1.10": [{"comment_text": "", "digests": {"md5": "70e3406c8e2d459d78b3d4681e98395f", "sha256": "8012973c945b87363ffc4f8b8164f61131a470059782504119b0a4acd39dc682"}, "downloads": -1, "filename": "stm32pio-1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "70e3406c8e2d459d78b3d4681e98395f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38615, "upload_time": "2020-03-15T18:44:46", "upload_time_iso_8601": "2020-03-15T18:44:46.466047Z", "url": "https://files.pythonhosted.org/packages/8e/c4/7c1496c829c83d89b76241b7e49a67e1e995399f2d00af9f6c5510c4328f/stm32pio-1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9bd08b589c0edb15402d4fa8e1a988c", "sha256": "ba0a81b2393bc08bd56447cde3e81fd75fc7b9b652ab557f3328738ab966a682"}, "downloads": -1, "filename": "stm32pio-1.10.tar.gz", "has_sig": false, "md5_digest": "b9bd08b589c0edb15402d4fa8e1a988c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 387101, "upload_time": "2020-03-15T18:44:50", "upload_time_iso_8601": "2020-03-15T18:44:50.393803Z", "url": "https://files.pythonhosted.org/packages/5a/43/96af60ab15ee6769c7bb66d7a32d5043c5ed4939971307dd571913dcef39/stm32pio-1.10.tar.gz", "yanked": false}], "1.20": [{"comment_text": "", "digests": {"md5": "480811a8d25f5645b5be01ca9eabaf7a", "sha256": "c860f7687b43089b0c770da9eb784ea93c9e99da239ad75c5058c786c30c9c29"}, "downloads": -1, "filename": "stm32pio-1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "480811a8d25f5645b5be01ca9eabaf7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47398, "upload_time": "2020-04-18T21:25:19", "upload_time_iso_8601": "2020-04-18T21:25:19.267801Z", "url": "https://files.pythonhosted.org/packages/1e/56/0b0e00eee706b7b677c7b490590899cb089c85cbcdd7e8894a7d2c0b7577/stm32pio-1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d210c51ba5b5b908c5bfc170b8764ba9", "sha256": "0655955ebd139a1629b4fe53483df477967b31657b014a8509225f59113bc2b7"}, "downloads": -1, "filename": "stm32pio-1.20.tar.gz", "has_sig": false, "md5_digest": "d210c51ba5b5b908c5bfc170b8764ba9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 56959, "upload_time": "2020-04-18T21:25:22", "upload_time_iso_8601": "2020-04-18T21:25:22.176740Z", "url": "https://files.pythonhosted.org/packages/51/4b/8cc0d606aac49669c3006453531141c730495bfcb3f1aad8e1f94c54799f/stm32pio-1.20.tar.gz", "yanked": false}], "1.21": [{"comment_text": "", "digests": {"md5": "656a4735686271bae1a58a2e7498140f", "sha256": "aecc2853ac7cf735448c6d79faae87bbee2322d8259160b4a33966d9d0045ee5"}, "downloads": -1, "filename": "stm32pio-1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "656a4735686271bae1a58a2e7498140f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47455, "upload_time": "2020-04-19T00:52:56", "upload_time_iso_8601": "2020-04-19T00:52:56.019808Z", "url": "https://files.pythonhosted.org/packages/31/a5/bcd9a4f044e5543e7eaeb306ff7a5748e00d740e1b69e81c065201f9ad9e/stm32pio-1.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a0b1e94589fd298e7dd1a1060de5cbd", "sha256": "54beb5a936613049d094a359c067436ecd484af387923c9dd549c4b5993d26c3"}, "downloads": -1, "filename": "stm32pio-1.21.tar.gz", "has_sig": false, "md5_digest": "0a0b1e94589fd298e7dd1a1060de5cbd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 56802, "upload_time": "2020-04-19T00:53:00", "upload_time_iso_8601": "2020-04-19T00:53:00.559866Z", "url": "https://files.pythonhosted.org/packages/e1/ec/9386225358cbb4c4ae47816c151c7866df3d1cbbea3372dc9ed3fc73ccaa/stm32pio-1.21.tar.gz", "yanked": false}], "1.30": [{"comment_text": "", "digests": {"md5": "88263f6ba56d3641e5c4343306536b07", "sha256": "f05b40c419d593b69e54756efe3e81b1eee17dc629ec23aae9fe0469b1b49df1"}, "downloads": -1, "filename": "stm32pio-1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "88263f6ba56d3641e5c4343306536b07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 54459, "upload_time": "2020-05-05T20:13:55", "upload_time_iso_8601": "2020-05-05T20:13:55.200395Z", "url": "https://files.pythonhosted.org/packages/f7/1e/9fbf20d0d80c14baa115c646f7396b386fa33893141ce191c998c355aff3/stm32pio-1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be27338a0ad65e14ddcd386e276a8fb", "sha256": "5656aaecfcfbf39ffe0e285d556511d421f489b0ff08651af53f746934cd1555"}, "downloads": -1, "filename": "stm32pio-1.30.tar.gz", "has_sig": false, "md5_digest": "2be27338a0ad65e14ddcd386e276a8fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 63462, "upload_time": "2020-05-05T20:13:57", "upload_time_iso_8601": "2020-05-05T20:13:57.280739Z", "url": "https://files.pythonhosted.org/packages/0f/69/d53410e06ad263485ba7975d79fe674cce27f4270f87dd5fc4d4ab93da66/stm32pio-1.30.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88263f6ba56d3641e5c4343306536b07", "sha256": "f05b40c419d593b69e54756efe3e81b1eee17dc629ec23aae9fe0469b1b49df1"}, "downloads": -1, "filename": "stm32pio-1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "88263f6ba56d3641e5c4343306536b07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 54459, "upload_time": "2020-05-05T20:13:55", "upload_time_iso_8601": "2020-05-05T20:13:55.200395Z", "url": "https://files.pythonhosted.org/packages/f7/1e/9fbf20d0d80c14baa115c646f7396b386fa33893141ce191c998c355aff3/stm32pio-1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be27338a0ad65e14ddcd386e276a8fb", "sha256": "5656aaecfcfbf39ffe0e285d556511d421f489b0ff08651af53f746934cd1555"}, "downloads": -1, "filename": "stm32pio-1.30.tar.gz", "has_sig": false, "md5_digest": "2be27338a0ad65e14ddcd386e276a8fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 63462, "upload_time": "2020-05-05T20:13:57", "upload_time_iso_8601": "2020-05-05T20:13:57.280739Z", "url": "https://files.pythonhosted.org/packages/0f/69/d53410e06ad263485ba7975d79fe674cce27f4270f87dd5fc4d4ab93da66/stm32pio-1.30.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:50 2020"}