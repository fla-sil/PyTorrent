{"info": {"author": "salpreh", "author_email": "salva.perez46@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# clinlog\n\n[![PyPI version](https://badge.fury.io/py/clinlog.svg)](https://badge.fury.io/py/clinlog)\n[![PyPI version](https://img.shields.io/github/license/salpreh/clinlog.svg)](https://img.shields.io/github/license/salpreh/clinlog.svg)\n\n**Package to easily log styled messages on console**\n\n---\n## Basic usage\nCreate a `Logger` object and use his convenient methods to print styled messages in console. You can define a default tag for each kind of message on the `Logger` instance. There is a custom handler to use clinlog with default loggign package of python stdlib (Using custom handler expanation below).\n\n### Print style methods\n- `confirm()`\n- `error()`\n- `warning()`\n- `info()`\n- `debug()`\n- `print()`\n\nThe signature for all print methods are the same:\n1. **message _(str)_**: Message to print.\n2. **tag _(str)_**: (Optional) Prefix tag to print with the message. If `None` the default tag for this kind of messages is used. An empty string will remove the tag for this print.\n3. **bold _(bool)_**: (Optional) `True` to use bright style to print the message (kind of bold font). By default `False`.\n4. **highlight _(bool)_**: `True` to use the color on the background and a high contrast color for the message text.\n5. **invert_color _(bool)_**: `True` to invert font color when highlight flag is on, this will switch between black and white. By default `False`.\n\n### Default print tag attributes\nWhen a `Logger` object is created all default tags are an empty string _(no tag)_\n- `confirm_tag`\n- `error_tag`\n- `warn_tag`\n- `info_tag`\n- `print_tag`\n\n### Log level param\nYou can provide a log level parameter to control the verbosity of the logger, this parameter can be provided during construction or via setter method. By default `Logger` class takes max verbosity level _(debug)_\n```py\nfrom clinlog import Logger\n\n# Creating a Logger with warining log level\nlog = Logger(log_level='warning')\n\n# Updating log level via setter\nlog.log_level = 'debug'\n\n```\n\n\n### Code Sample\n```py\nfrom clinlog import Logger\n\n# Create the logger\nlog = Logger()\n\n# Set default error tag\nlog.error_tag = '[ERROR]: '\n\n# Print error styled message\nlog.error('Unable to access config file', bold=True)\n\n# Print warning highlighted and bold\nlog.warning('The execution will continue with default configuration', None, True, True)\n\n# Confirmation log with provided tag\nlog.confirm('Execution completed', '[SUCCESS]')\n\n# Debug log with provided tag\nlog.debug('DB returned 8 entries for the user', '[DEBUG] ')\n```\n\n### Output\n<img src=\"https://raw.githubusercontent.com/salpreh/clinlog/master/assets/output.png\" alt=\"tree_output\">\n\n### Different styes sample\n<img src=\"https://raw.githubusercontent.com/salpreh/clinlog/master/assets/sample.png\" alt=\"tree_output\">\n\n### ClinlogHandler and python logging package\nTo use Clinlog with python (logging package)[https://docs.python.org/3/library/logging.html] you can create an instance of `ClinlogHandler` and add it to your custom logger handlers. There are two convinent funcions to create a `logging.Logger` whith this handler setted.\n\nFirst here is an example of how to create a logger from logging package and add ClinlogHandler to print styled messages when logging.\n```py\nimport logging\n\nfrom clinlog.logging import ClinlogHandler\n\n\n# Create logger and handler\nlogger = logging.getLogger('clinlog')\ncl_handler = ClinlogHandler()\n\n# Set log level and add Clinlog handler to logger\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(cl_handler)\n\nlogger.critical('This is a critical error!')\nlogger.error('This is an error')\nlogger.warning('Some warning')\nlogger.info('Everithing is going right for now')\nlogger.debug('User input was 4')\n```\n\nAbout the helper functions you can use them to create (`create_logger()`) or get the logger (`get_logger()`) directly.\n```py\nimport logging\n\nfrom clinlog.logging import get_logger, create_logger\n\n# Creates logger with name 'clinlog'\ncreate_logger()\n\n# You can get the logger with logging\nlogger = logging.getLogger('clinlog')\n\n# For ease of use get_logger() creates (if needed, so you don't need to call creeate_logger before this) clinlog logger and returns it\nlogger = get_logger()\n\nlogger.info('Logging setted up')\n```\n\n#### ClinlogHandler details\n- `ClinlogHandler` extends from `StreamHandler` from logging package, so you can expect same methods as this handler.\n- The handles is by default in `DEBUG` level.\n- The message formater is by default with format: `[%(levelname)s] %(message)s` (you can see an output examples below)\n\n### ClinlogHandler output\n<img src=\"https://raw.githubusercontent.com/salpreh/clinlog/master/assets/handler_sample.png\" alt=\"handler_output\">\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/salpreh/clinlog", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "clinlog", "package_url": "https://pypi.org/project/clinlog/", "platform": "", "project_url": "https://pypi.org/project/clinlog/", "project_urls": {"Homepage": "https://github.com/salpreh/clinlog"}, "release_url": "https://pypi.org/project/clinlog/0.2.0/", "requires_dist": ["colorama (>=0.3.8)"], "requires_python": "", "summary": "Package to log styled messages on console", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>clinlog</h1>\n<p><a href=\"https://badge.fury.io/py/clinlog\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28db352e30c8ad71c8c110d7a3faa29141084061/68747470733a2f2f62616467652e667572792e696f2f70792f636c696e6c6f672e737667\"></a>\n<a href=\"https://img.shields.io/github/license/salpreh/clinlog.svg\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2289e63e527f4547ebb7d74195792abd24de774b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73616c707265682f636c696e6c6f672e737667\"></a></p>\n<p><strong>Package to easily log styled messages on console</strong></p>\n<hr>\n<h2>Basic usage</h2>\n<p>Create a <code>Logger</code> object and use his convenient methods to print styled messages in console. You can define a default tag for each kind of message on the <code>Logger</code> instance. There is a custom handler to use clinlog with default loggign package of python stdlib (Using custom handler expanation below).</p>\n<h3>Print style methods</h3>\n<ul>\n<li><code>confirm()</code></li>\n<li><code>error()</code></li>\n<li><code>warning()</code></li>\n<li><code>info()</code></li>\n<li><code>debug()</code></li>\n<li><code>print()</code></li>\n</ul>\n<p>The signature for all print methods are the same:</p>\n<ol>\n<li><strong>message <em>(str)</em></strong>: Message to print.</li>\n<li><strong>tag <em>(str)</em></strong>: (Optional) Prefix tag to print with the message. If <code>None</code> the default tag for this kind of messages is used. An empty string will remove the tag for this print.</li>\n<li><strong>bold <em>(bool)</em></strong>: (Optional) <code>True</code> to use bright style to print the message (kind of bold font). By default <code>False</code>.</li>\n<li><strong>highlight <em>(bool)</em></strong>: <code>True</code> to use the color on the background and a high contrast color for the message text.</li>\n<li><strong>invert_color <em>(bool)</em></strong>: <code>True</code> to invert font color when highlight flag is on, this will switch between black and white. By default <code>False</code>.</li>\n</ol>\n<h3>Default print tag attributes</h3>\n<p>When a <code>Logger</code> object is created all default tags are an empty string <em>(no tag)</em></p>\n<ul>\n<li><code>confirm_tag</code></li>\n<li><code>error_tag</code></li>\n<li><code>warn_tag</code></li>\n<li><code>info_tag</code></li>\n<li><code>print_tag</code></li>\n</ul>\n<h3>Log level param</h3>\n<p>You can provide a log level parameter to control the verbosity of the logger, this parameter can be provided during construction or via setter method. By default <code>Logger</code> class takes max verbosity level <em>(debug)</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clinlog</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"c1\"># Creating a Logger with warining log level</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'warning'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Updating log level via setter</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log_level</span> <span class=\"o\">=</span> <span class=\"s1\">'debug'</span>\n</pre>\n<h3>Code Sample</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clinlog</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"c1\"># Create the logger</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set default error tag</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error_tag</span> <span class=\"o\">=</span> <span class=\"s1\">'[ERROR]: '</span>\n\n<span class=\"c1\"># Print error styled message</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'Unable to access config file'</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print warning highlighted and bold</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'The execution will continue with default configuration'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Confirmation log with provided tag</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">confirm</span><span class=\"p\">(</span><span class=\"s1\">'Execution completed'</span><span class=\"p\">,</span> <span class=\"s1\">'[SUCCESS]'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Debug log with provided tag</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'DB returned 8 entries for the user'</span><span class=\"p\">,</span> <span class=\"s1\">'[DEBUG] '</span><span class=\"p\">)</span>\n</pre>\n<h3>Output</h3>\n<img alt=\"tree_output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2b496a8a2d9ae6f0a0c5cf52cbd695a4e456b1f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f636c696e6c6f672f6d61737465722f6173736574732f6f75747075742e706e67\">\n<h3>Different styes sample</h3>\n<img alt=\"tree_output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ef051860aa81c3d47ccf187b929e6ed29cea52b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f636c696e6c6f672f6d61737465722f6173736574732f73616d706c652e706e67\">\n<h3>ClinlogHandler and python logging package</h3>\n<p>To use Clinlog with python (logging package)[https://docs.python.org/3/library/logging.html] you can create an instance of <code>ClinlogHandler</code> and add it to your custom logger handlers. There are two convinent funcions to create a <code>logging.Logger</code> whith this handler setted.</p>\n<p>First here is an example of how to create a logger from logging package and add ClinlogHandler to print styled messages when logging.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">clinlog.logging</span> <span class=\"kn\">import</span> <span class=\"n\">ClinlogHandler</span>\n\n\n<span class=\"c1\"># Create logger and handler</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'clinlog'</span><span class=\"p\">)</span>\n<span class=\"n\">cl_handler</span> <span class=\"o\">=</span> <span class=\"n\">ClinlogHandler</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set log level and add Clinlog handler to logger</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">cl_handler</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">'This is a critical error!'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'This is an error'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'Some warning'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Everithing is going right for now'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'User input was 4'</span><span class=\"p\">)</span>\n</pre>\n<p>About the helper functions you can use them to create (<code>create_logger()</code>) or get the logger (<code>get_logger()</code>) directly.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">clinlog.logging</span> <span class=\"kn\">import</span> <span class=\"n\">get_logger</span><span class=\"p\">,</span> <span class=\"n\">create_logger</span>\n\n<span class=\"c1\"># Creates logger with name 'clinlog'</span>\n<span class=\"n\">create_logger</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># You can get the logger with logging</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'clinlog'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For ease of use get_logger() creates (if needed, so you don't need to call creeate_logger before this) clinlog logger and returns it</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">get_logger</span><span class=\"p\">()</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Logging setted up'</span><span class=\"p\">)</span>\n</pre>\n<h4>ClinlogHandler details</h4>\n<ul>\n<li><code>ClinlogHandler</code> extends from <code>StreamHandler</code> from logging package, so you can expect same methods as this handler.</li>\n<li>The handles is by default in <code>DEBUG</code> level.</li>\n<li>The message formater is by default with format: <code>[%(levelname)s] %(message)s</code> (you can see an output examples below)</li>\n</ul>\n<h3>ClinlogHandler output</h3>\n<img alt=\"handler_output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb7c70979c0f99367cec2f6d00197d96de393cc1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616c707265682f636c696e6c6f672f6d61737465722f6173736574732f68616e646c65725f73616d706c652e706e67\">\n\n          </div>"}, "last_serial": 6907017, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "58861b47aa64097a0d67f5a9e3faa78e", "sha256": "29b5eccff05b066ca423b61d668c884d00487f5695131f34cad5740e1cc2b806"}, "downloads": -1, "filename": "clinlog-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "58861b47aa64097a0d67f5a9e3faa78e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4146, "upload_time": "2019-04-25T18:00:49", "upload_time_iso_8601": "2019-04-25T18:00:49.318779Z", "url": "https://files.pythonhosted.org/packages/f8/1f/f08c4d2d7ab09bd93186eb219a85f93644f45597ca185e2c991f6634c855/clinlog-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3280ef3cd40077a1c6ef8f6710ab5ff", "sha256": "701fcd3ebf21caf69aa1bc11832886524b7d002b27b97517bf56fb6455f109a3"}, "downloads": -1, "filename": "clinlog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3280ef3cd40077a1c6ef8f6710ab5ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3033, "upload_time": "2019-04-25T18:00:57", "upload_time_iso_8601": "2019-04-25T18:00:57.535040Z", "url": "https://files.pythonhosted.org/packages/07/75/12c58c14e745c529e935d51649ece329852354d4fac24f0ed8e7dc391f30/clinlog-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cf5f179cceb58c4cca209d4c67584151", "sha256": "dab09519210cd7ae864bccebcc9bd5aea200d1d16fef090c6677ecaa4f49ea9f"}, "downloads": -1, "filename": "clinlog-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cf5f179cceb58c4cca209d4c67584151", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4787, "upload_time": "2019-08-25T00:58:40", "upload_time_iso_8601": "2019-08-25T00:58:40.828841Z", "url": "https://files.pythonhosted.org/packages/9d/55/7409774b276720cf5a5403beb5782d8d575acceecf87bfba02c0e8ad8801/clinlog-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29fc059fa3c5ab382f00398931c32e0b", "sha256": "25733bfcc28b66291c3d99c72a8737172324b251eae42967a71e9201c2721182"}, "downloads": -1, "filename": "clinlog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "29fc059fa3c5ab382f00398931c32e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3747, "upload_time": "2019-08-25T00:58:42", "upload_time_iso_8601": "2019-08-25T00:58:42.422937Z", "url": "https://files.pythonhosted.org/packages/2e/48/f5293cd6daf1884561d832c1d45081be58138a0b91916f7ea93ab6510500/clinlog-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "46f555d3e2e2395e2c62e92b6dd9046f", "sha256": "fb8c4ebbe7b75d9471338fe1c131dd69581256b09ef2d07b2c00b5c570d582f7"}, "downloads": -1, "filename": "clinlog-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "46f555d3e2e2395e2c62e92b6dd9046f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6947, "upload_time": "2020-03-29T14:59:33", "upload_time_iso_8601": "2020-03-29T14:59:33.581238Z", "url": "https://files.pythonhosted.org/packages/6a/65/90f4461eb111bb917f81427f9a658494421b4add8eb52a1bb6bfdce02263/clinlog-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d04bc9ff6b628937ee2e853b60bddd45", "sha256": "41adf611c7994a6c85712b6cab571a07d497c40ee855d655f071a68e7db10661"}, "downloads": -1, "filename": "clinlog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d04bc9ff6b628937ee2e853b60bddd45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5884, "upload_time": "2020-03-29T14:59:35", "upload_time_iso_8601": "2020-03-29T14:59:35.067482Z", "url": "https://files.pythonhosted.org/packages/15/c2/afaaac793ccfa1e6558472ab5fdfd3e41ba32906d3fe91bd56d63fc8463a/clinlog-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46f555d3e2e2395e2c62e92b6dd9046f", "sha256": "fb8c4ebbe7b75d9471338fe1c131dd69581256b09ef2d07b2c00b5c570d582f7"}, "downloads": -1, "filename": "clinlog-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "46f555d3e2e2395e2c62e92b6dd9046f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6947, "upload_time": "2020-03-29T14:59:33", "upload_time_iso_8601": "2020-03-29T14:59:33.581238Z", "url": "https://files.pythonhosted.org/packages/6a/65/90f4461eb111bb917f81427f9a658494421b4add8eb52a1bb6bfdce02263/clinlog-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d04bc9ff6b628937ee2e853b60bddd45", "sha256": "41adf611c7994a6c85712b6cab571a07d497c40ee855d655f071a68e7db10661"}, "downloads": -1, "filename": "clinlog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d04bc9ff6b628937ee2e853b60bddd45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5884, "upload_time": "2020-03-29T14:59:35", "upload_time_iso_8601": "2020-03-29T14:59:35.067482Z", "url": "https://files.pythonhosted.org/packages/15/c2/afaaac793ccfa1e6558472ab5fdfd3e41ba32906d3fe91bd56d63fc8463a/clinlog-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:58 2020"}