{"info": {"author": "Matan Perelman", "author_email": "matan1008@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "        \r\r\n        A pure python ARM emulator\r\r\n        \r\r\n        ## Getting Started\r\r\n        \r\r\n        ### Prerequisites\r\r\n        \r\r\n        The only package required is `bitstring`.\r\r\n        In order to run the tests, `pytest` is required.\r\r\n        \r\r\n        ```\r\r\n        pip install bitstring\r\r\n        pip install pytest\r\r\n        ```\r\r\n        \r\r\n        ### Installing\r\r\n        \r\r\n        Installing the `armulator` is pretty simple. All you need to do is:\r\r\n        \r\r\n        ```\r\r\n        pip install armulator\r\r\n        ```\r\r\n        \r\r\n        ### Usage\r\r\n        \r\r\n        To create a processor object, you need to import it first:\r\r\n        ```\r\r\n        from armulator.armv6.arm_v6 import ArmV6\r\r\n        ```\r\r\n        \r\r\n        Then you can just create it:\r\r\n        \r\r\n        ```\r\r\n        arm = ArmV6()\r\r\n        ```\r\r\n        In order to really use the processor it is crutcial to came familiar with the Memory controller concept.  \r\r\n        The main idea of this concept is that there is one \"hub\" to which you can connect several controllers.  \r\r\n        A \"Memory Controller\" can be a stick of RAM, Memory mapped LCD screen or whatever you wish.  \r\r\n          \r\r\n        For example, let's create a RAM controller:\r\r\n        \r\r\n        ```\r\r\n        from armulator.armv6.memory_types import RAM\r\r\n        from armulator.armv6.memory_controller_hub import MemoryController\r\r\n        mem = RAM(0x100)\r\r\n        mc = MemoryController(mem, 0xF0000000, 0xF0000100)\r\r\n        arm.mem.memories.append(mc)\r\r\n        ```\r\r\n        \r\r\n        Now, any try to access a memory between 0xF0000000 and 0xF0000100, will access the `mem` object.  \r\r\n        You can also change the memory manually:\r\r\n        \r\r\n        ```\r\r\n        mem.write(0, 2, \"\\xfe\\xe7\")\r\r\n        ```\r\r\n        \r\r\n        Another useful feature is playing with the memory protection or management unit,\r\r\n        for example cancelling memory protection will look like:\r\r\n        ```\r\r\n        arm.registers.sctlr.set_m(False)\r\r\n        arm.take_reset()\r\r\n        ```\r\r\n        Please note that after changing internal features it is recommended to reset the processor.  \r\r\n          \r\r\n        When running the armulator, you will probably want to start from a defined address, so:\r\r\n        ```\r\r\n        from bitstring import BitArray\r\r\n        arm.registers.branch_to(BitArray(uint=0x100, length=32))\r\r\n        ```\r\r\n        \r\r\n        The last thing we need to do is to really run the processor, which can be done with:\r\r\n        ```\r\r\n        arm.emulate_cycle()\r\r\n        ```\r\r\n        \r\r\n        \r\r\n        ## Running the tests\r\r\n        \r\r\n        Running the tests can be done easily with pytest:\r\r\n        \r\r\n        ```\r\r\n        python -m pytest tests -vv\r\r\n        ```\r\r\n        \r\r\n        More tests will be added soon.\r\r\n        \r\r\n        ## Built With\r\r\n        \r\r\n        * [bitstring](http://scott-griffiths.github.io/bitstring/) - Used for bits operations\r\r\n        \r\r\n        ## Authors\r\r\n        \r\r\n        * **Matan Perelman** - [matan1008](https://github.com/matan1008)\r\r\n        \r\r\n        ## License\r\r\n        \r\r\n        This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\r\r\n        \r\r\n        ## Acknowledgments\r\r\n        \r\r\n        * At first, I did it to learn the ARM architecture better. I guess I was carried away.\r\r\n        * Feel free to report bugs.\r\r\n        * Feel free to ask for more features.\r\r\n        \r\nKeywords: arm emulator\r\nPlatform: UNKNOWN\r\nClassifier: Development Status :: 3 - Alpha\r\nClassifier: Programming Language :: Python :: 2\r\nClassifier: Programming Language :: Python :: 2.7\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matan1008/armulator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "armulator", "package_url": "https://pypi.org/project/armulator/", "platform": "", "project_url": "https://pypi.org/project/armulator/", "project_urls": {"Homepage": "https://github.com/matan1008/armulator"}, "release_url": "https://pypi.org/project/armulator/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "A pure Python ARM processor emulator", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>        A pure python ARM emulator\n\n<br>        \n\n<br>        ## Getting Started\n\n<br>        \n\n<br>        ### Prerequisites\n\n<br>        \n\n<br>        The only package required is `bitstring`.\n\n<br>        In order to run the tests, `pytest` is required.\n\n<br>        \n\n<br>        ```\n\n<br>        pip install bitstring\n\n<br>        pip install pytest\n\n<br>        ```\n\n<br>        \n\n<br>        ### Installing\n\n<br>        \n\n<br>        Installing the `armulator` is pretty simple. All you need to do is:\n\n<br>        \n\n<br>        ```\n\n<br>        pip install armulator\n\n<br>        ```\n\n<br>        \n\n<br>        ### Usage\n\n<br>        \n\n<br>        To create a processor object, you need to import it first:\n\n<br>        ```\n\n<br>        from armulator.armv6.arm_v6 import ArmV6\n\n<br>        ```\n\n<br>        \n\n<br>        Then you can just create it:\n\n<br>        \n\n<br>        ```\n\n<br>        arm = ArmV6()\n\n<br>        ```\n\n<br>        In order to really use the processor it is crutcial to came familiar with the Memory controller concept.  \n\n<br>        The main idea of this concept is that there is one \"hub\" to which you can connect several controllers.  \n\n<br>        A \"Memory Controller\" can be a stick of RAM, Memory mapped LCD screen or whatever you wish.  \n\n<br>          \n\n<br>        For example, let's create a RAM controller:\n\n<br>        \n\n<br>        ```\n\n<br>        from armulator.armv6.memory_types import RAM\n\n<br>        from armulator.armv6.memory_controller_hub import MemoryController\n\n<br>        mem = RAM(0x100)\n\n<br>        mc = MemoryController(mem, 0xF0000000, 0xF0000100)\n\n<br>        arm.mem.memories.append(mc)\n\n<br>        ```\n\n<br>        \n\n<br>        Now, any try to access a memory between 0xF0000000 and 0xF0000100, will access the `mem` object.  \n\n<br>        You can also change the memory manually:\n\n<br>        \n\n<br>        ```\n\n<br>        mem.write(0, 2, \"\\xfe\\xe7\")\n\n<br>        ```\n\n<br>        \n\n<br>        Another useful feature is playing with the memory protection or management unit,\n\n<br>        for example cancelling memory protection will look like:\n\n<br>        ```\n\n<br>        arm.registers.sctlr.set_m(False)\n\n<br>        arm.take_reset()\n\n<br>        ```\n\n<br>        Please note that after changing internal features it is recommended to reset the processor.  \n\n<br>          \n\n<br>        When running the armulator, you will probably want to start from a defined address, so:\n\n<br>        ```\n\n<br>        from bitstring import BitArray\n\n<br>        arm.registers.branch_to(BitArray(uint=0x100, length=32))\n\n<br>        ```\n\n<br>        \n\n<br>        The last thing we need to do is to really run the processor, which can be done with:\n\n<br>        ```\n\n<br>        arm.emulate_cycle()\n\n<br>        ```\n\n<br>        \n\n<br>        \n\n<br>        ## Running the tests\n\n<br>        \n\n<br>        Running the tests can be done easily with pytest:\n\n<br>        \n\n<br>        ```\n\n<br>        python -m pytest tests -vv\n\n<br>        ```\n\n<br>        \n\n<br>        More tests will be added soon.\n\n<br>        \n\n<br>        ## Built With\n\n<br>        \n\n<br>        * [bitstring](http://scott-griffiths.github.io/bitstring/) - Used for bits operations\n\n<br>        \n\n<br>        ## Authors\n\n<br>        \n\n<br>        * **Matan Perelman** - [matan1008](https://github.com/matan1008)\n\n<br>        \n\n<br>        ## License\n\n<br>        \n\n<br>        This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n<br>        \n\n<br>        ## Acknowledgments\n\n<br>        \n\n<br>        * At first, I did it to learn the ARM architecture better. I guess I was carried away.\n\n<br>        * Feel free to report bugs.\n\n<br>        * Feel free to ask for more features.\n\n<br>        \n<br>Keywords: arm emulator\n<br>Platform: UNKNOWN\n<br>Classifier: Development Status :: 3 - Alpha\n<br>Classifier: Programming Language :: Python :: 2\n<br>Classifier: Programming Language :: Python :: 2.7\n<br>\n          </div>"}, "last_serial": 3920186, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "1e3a2a968f2568d9a10998a2ea2cd807", "sha256": "b5e06e4bde84f244ef20cc16d856aa6677dc766f425ed40b26ba9ab77400f97a"}, "downloads": -1, "filename": "armulator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1e3a2a968f2568d9a10998a2ea2cd807", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126388, "upload_time": "2017-12-23T19:27:32", "upload_time_iso_8601": "2017-12-23T19:27:32.323641Z", "url": "https://files.pythonhosted.org/packages/5c/90/ae639cbbb1de8047a1b07a15d9a83587f1a26d43da05e8e8975137fd3654/armulator-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "893d4b83ff6f4d1092bc677c821a27bc", "sha256": "48df21dc7106472aaba8b0462dc78de64b8ba36ec91fd2cf50c4e7eda64c5284"}, "downloads": -1, "filename": "armulator-1.0.2.tar.gz", "has_sig": false, "md5_digest": "893d4b83ff6f4d1092bc677c821a27bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126406, "upload_time": "2017-12-23T22:40:28", "upload_time_iso_8601": "2017-12-23T22:40:28.561644Z", "url": "https://files.pythonhosted.org/packages/7f/69/0eab6e632819a647595bf4c2faa61d0586805b8475058d564df1232a4805/armulator-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b89091fa5b91ffb65efa3d1dd5f5750f", "sha256": "800a213a78870a239d47fe55407addf5c33b362c24fbe4d56f0fc409725ada89"}, "downloads": -1, "filename": "armulator-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b89091fa5b91ffb65efa3d1dd5f5750f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126460, "upload_time": "2018-03-30T09:52:49", "upload_time_iso_8601": "2018-03-30T09:52:49.023777Z", "url": "https://files.pythonhosted.org/packages/c6/d3/88a6c7591b765aa9125ba0d0293f8849d0234dec16b08095dde3b66354a4/armulator-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "0c3e5859727bcc9ea6e3a97381f5d2f2", "sha256": "fb94c2c25a09fcfd3bcba347f99fbed0074a86d05bd2aa2ee5f61ef10d4a7d05"}, "downloads": -1, "filename": "armulator-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0c3e5859727bcc9ea6e3a97381f5d2f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128889, "upload_time": "2018-06-01T10:21:21", "upload_time_iso_8601": "2018-06-01T10:21:21.654179Z", "url": "https://files.pythonhosted.org/packages/9d/81/4f52844d38550265d56911605001d9f4f54ddefec9f15b05e907f665d9ce/armulator-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c3e5859727bcc9ea6e3a97381f5d2f2", "sha256": "fb94c2c25a09fcfd3bcba347f99fbed0074a86d05bd2aa2ee5f61ef10d4a7d05"}, "downloads": -1, "filename": "armulator-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0c3e5859727bcc9ea6e3a97381f5d2f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128889, "upload_time": "2018-06-01T10:21:21", "upload_time_iso_8601": "2018-06-01T10:21:21.654179Z", "url": "https://files.pythonhosted.org/packages/9d/81/4f52844d38550265d56911605001d9f4f54ddefec9f15b05e907f665d9ce/armulator-1.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:12 2020"}