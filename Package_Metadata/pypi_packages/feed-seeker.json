{"info": {"author": "Colin Carroll", "author_email": "ccarroll@mit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "===========\nFeed Seeker\n===========\n*It slant rhymes with \"heat seeker\"*\n\n|Build Status| |Coverage|\n\nA library for finding atom, rss, rdf, and xml feeds from web pages. Produced at the `mediacloud <https://mediacloud.org>`_ project. An incremental improvement over `feedfinder2 <https://github.com/dfm/feedfinder2>`_, which was itself based on `feedfinder <http://www.aaronsw.com/2002/feedfinder/>`_, written by Mark Pilgrim, and maintained by Aaron Swartz until his untimely death. \n\n\nInstallation\n------------\n\nThe library is available on `PyPI <https://pypi.org/project/feed_seeker/>`_:\n\n.. code-block:: bash\n\n    pip install feed_seeker\n\nQuickstart\n----------\nBy default, the library uses :code:`requests` to grab html and inspect it and find the most\nlikely feed url:\n\n.. code-block:: python\n\n    from feed_seeker import find_feed_url\n\n    >>> find_feed_url('https://github.com/mitmedialab/feed_seeker') \n    'https://github.com/mitmedialab/feed_seeker/commits/master.atom'\n\n\nTo do a more thorough search, use :code:`generate_feed_urls`, which returns more likely candidates first.\n\n.. code-block:: python\n\n    from feed_seeker import generate_feed_urls\n\n    >>> for url in generate_feed_urls('https://xkcd.com'):\n    ...     print(url)\n    ... \n    https://xkcd.com/atom.xml\n    https://xkcd.com/rss.xml\n\n\nFor the most thorough search, add a :code:`spider` argument to do depth-first spidering of urls on the same hostname. Note the below call takes nearly four minutes, compared to 0.5 seconds for :code:`find_feed_url`.\n\n\n.. code-block:: python\n\n    >>> for url in generate_feed_urls('https://github.com/mitmedialab/feed_seeker', spider=1):\n    ...     print(url)\n    ... \n\thttps://github.com/mitmedialab/feed_seeker/commits/master.atom,\n\thttps://github.com/mitmedialab/feed_seeker/commits/95cf320796c487df8b70f9c42281d8f26452cc31.atom,\n\thttps://github.com/mitmedialab/feed_seeker/commits/3e93490cb91f7652325c2fe41ef29a5be4558d6a.atom,\n\thttps://github.com/mitmedialab/feed_seeker/commits/659311b8853c4c4a67e3b4bc67a78461d825a064.atom,\n\thttps://github.com/mitmedialab/feed_seeker/commits/a8f7b86eac2cedd9209ac5d2ddcceb293d2404c9.atom,\n\thttps://github.com/index.atom,\n\thttps://github.com/articles.atom,\n\thttps://github.com/dfm/feedfinder2/commits/master.atom,\n\thttps://github.com/blog.atom,\n\thttps://github.com/blog/all.atom,\n\thttps://github.com/blog/broadcasts.atom,\n\thttps://github.com/ColCarroll.atom\n\nIn a hurry?\n-----------\n\nIf you have a long list of urls, you might want to set a timeout with :code:`max_time`:\n\n.. code-block:: python\n\n\t>>> for url in ('https://httpstat.us/200?sleep=5000', 'https://github.com/mitmedialab/feed_seeker'):\n\t   ...     try:\n\t   ...         print('found feed:\\t{}'.format(find_feed_url(url, max_time=3)))\n\t   ...     except TimeoutError:\n\t   ...         print('skipping {}'.format(url))\n\t   skipping https://httpstat.us/200?sleep=5000\n       found feed:\thttps://github.com/mitmedialab/feed_seeker/commits/master.atom\n\n\nDifferences with :code:`feedfinder2`\n====================================\nThe biggest difference is that all functions are implemented as generators, and are evaluated lazily. Candidate feed links are actually accessed and inspected to determine whether or not they are a feed, which can be quite time consuming. We expose a function to find the most likely feed link, and another to lazily generate links in rough order from most prominent to least.\n\nThere are also a few more heuristics based on our experience at `mediacloud <https://mediacloud.org>`_.\n\n.. |Build Status| image:: https://travis-ci.org/mitmedialab/feed_seeker.png?branch=master\n   :target: https://travis-ci.org/mitmedialab/feed_seeker\n.. |Coverage| image:: https://coveralls.io/repos/github/mitmedialab/feed_seeker/badge.svg?branch=master\n   :target: https://coveralls.io/github/mitmedialab/feed_seeker?branch=master\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mitmedialab/feed_seeker", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "feed-seeker", "package_url": "https://pypi.org/project/feed-seeker/", "platform": "", "project_url": "https://pypi.org/project/feed-seeker/", "project_urls": {"Homepage": "https://github.com/mitmedialab/feed_seeker"}, "release_url": "https://pypi.org/project/feed-seeker/1.0.0/", "requires_dist": ["beautifulsoup4 (>=4.6.0)", "lxml (>=4.1.1)", "requests (>=2.18.4)"], "requires_python": "", "summary": "Extract rss, atom, and other feeds from webpages", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>It slant rhymes with \u201cheat seeker\u201d</em></p>\n<p><a href=\"https://travis-ci.org/mitmedialab/feed_seeker\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d35730e37627fdc445a068c8f129127f538b496/68747470733a2f2f7472617669732d63692e6f72672f6d69746d656469616c61622f666565645f7365656b65722e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/mitmedialab/feed_seeker?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f2d03d4f1e98673e2b33246ccacc7033c85f98f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d69746d656469616c61622f666565645f7365656b65722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A library for finding atom, rss, rdf, and xml feeds from web pages. Produced at the <a href=\"https://mediacloud.org\" rel=\"nofollow\">mediacloud</a> project. An incremental improvement over <a href=\"https://github.com/dfm/feedfinder2\" rel=\"nofollow\">feedfinder2</a>, which was itself based on <a href=\"http://www.aaronsw.com/2002/feedfinder/\" rel=\"nofollow\">feedfinder</a>, written by Mark Pilgrim, and maintained by Aaron Swartz until his untimely death.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The library is available on <a href=\"https://pypi.org/project/feed_seeker/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install feed_seeker\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>By default, the library uses <code>requests</code> to grab html and inspect it and find the most\nlikely feed url:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">feed_seeker</span> <span class=\"kn\">import</span> <span class=\"n\">find_feed_url</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">find_feed_url</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/mitmedialab/feed_seeker'</span><span class=\"p\">)</span>\n<span class=\"s1\">'https://github.com/mitmedialab/feed_seeker/commits/master.atom'</span>\n</pre>\n<p>To do a more thorough search, use <code>generate_feed_urls</code>, which returns more likely candidates first.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">feed_seeker</span> <span class=\"kn\">import</span> <span class=\"n\">generate_feed_urls</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">generate_feed_urls</span><span class=\"p\">(</span><span class=\"s1\">'https://xkcd.com'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">xkcd</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">atom</span><span class=\"o\">.</span><span class=\"n\">xml</span>\n<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">xkcd</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">rss</span><span class=\"o\">.</span><span class=\"n\">xml</span>\n</pre>\n<p>For the most thorough search, add a <code>spider</code> argument to do depth-first spidering of urls on the same hostname. Note the below call takes nearly four minutes, compared to 0.5 seconds for <code>find_feed_url</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">generate_feed_urls</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/mitmedialab/feed_seeker'</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"mi\">95</span><span class=\"n\">cf320796c487df8b70f9c42281d8f26452cc31</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"mf\">3e93490</span><span class=\"n\">cb91f7652325c2fe41ef29a5be4558d6a</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"mi\">659311</span><span class=\"n\">b8853c4c4a67e3b4bc67a78461d825a064</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"n\">a8f7b86eac2cedd9209ac5d2ddcceb293d2404c9</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">articles</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">dfm</span><span class=\"o\">/</span><span class=\"n\">feedfinder2</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">blog</span><span class=\"o\">/</span><span class=\"nb\">all</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">blog</span><span class=\"o\">/</span><span class=\"n\">broadcasts</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span>\n    <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ColCarroll</span><span class=\"o\">.</span><span class=\"n\">atom</span>\n</pre>\n</div>\n<div id=\"in-a-hurry\">\n<h2>In a hurry?</h2>\n<p>If you have a long list of urls, you might want to set a timeout with <code>max_time</code>:</p>\n<pre> <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'https://httpstat.us/200?sleep=5000'</span><span class=\"p\">,</span> <span class=\"s1\">'https://github.com/mitmedialab/feed_seeker'</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>     <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'found feed:</span><span class=\"se\">\\t</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">find_feed_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n    <span class=\"o\">...</span>     <span class=\"k\">except</span> <span class=\"ne\">TimeoutError</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'skipping </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">))</span>\n    <span class=\"n\">skipping</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">httpstat</span><span class=\"o\">.</span><span class=\"n\">us</span><span class=\"o\">/</span><span class=\"mi\">200</span><span class=\"err\">?</span><span class=\"n\">sleep</span><span class=\"o\">=</span><span class=\"mi\">5000</span>\n<span class=\"n\">found</span> <span class=\"n\">feed</span><span class=\"p\">:</span>      <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">mitmedialab</span><span class=\"o\">/</span><span class=\"n\">feed_seeker</span><span class=\"o\">/</span><span class=\"n\">commits</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">atom</span>\n</pre>\n<div id=\"differences-with-feedfinder2\">\n<h3>Differences with <code>feedfinder2</code></h3>\n<p>The biggest difference is that all functions are implemented as generators, and are evaluated lazily. Candidate feed links are actually accessed and inspected to determine whether or not they are a feed, which can be quite time consuming. We expose a function to find the most likely feed link, and another to lazily generate links in rough order from most prominent to least.</p>\n<p>There are also a few more heuristics based on our experience at <a href=\"https://mediacloud.org\" rel=\"nofollow\">mediacloud</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4694813, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "660b7254fd3b59324edca81f318cdd0b", "sha256": "b90ac6a0b25e94df865d24dc04d88e9ccbda708405b9ff41a1ff6bbe257e2c76"}, "downloads": -1, "filename": "feed_seeker-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "660b7254fd3b59324edca81f318cdd0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9634, "upload_time": "2018-01-17T23:48:48", "upload_time_iso_8601": "2018-01-17T23:48:48.966668Z", "url": "https://files.pythonhosted.org/packages/31/8d/136edb21436b54c56224aebc6cfdf62ac2b0d1e66ee70abbcfab385e387d/feed_seeker-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf9db97133cf26bb6bef25ff96113fb7", "sha256": "a70e38e72e7c4aa69101d7d00f61060dcf756ae48d261530a482f4a55ab61ded"}, "downloads": -1, "filename": "feed_seeker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bf9db97133cf26bb6bef25ff96113fb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8641, "upload_time": "2018-01-17T23:48:50", "upload_time_iso_8601": "2018-01-17T23:48:50.005602Z", "url": "https://files.pythonhosted.org/packages/cb/0e/17b911821c6406ae66aace1c7ab7fa163cf0487e57ef6fc118c8a03cdcef/feed_seeker-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "25d07d4a9b175577dcd09c12acc45a32", "sha256": "0fb4769d9081dd64b6262b4bc362a9b651b0e61c5adc045d3b27e9f2654656e7"}, "downloads": -1, "filename": "feed_seeker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25d07d4a9b175577dcd09c12acc45a32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9580, "upload_time": "2018-01-18T20:51:30", "upload_time_iso_8601": "2018-01-18T20:51:30.371874Z", "url": "https://files.pythonhosted.org/packages/c9/9a/f415118b580c4c759e637baa94c062ee8f9fc624fa3e6c383e020450eb0c/feed_seeker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02d874a653cd60eb6eeb21006d9dff03", "sha256": "9bb3bd705a21772124013b74b5012abd6558f641c4a4c267daa0196e75dbdb88"}, "downloads": -1, "filename": "feed_seeker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "02d874a653cd60eb6eeb21006d9dff03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8840, "upload_time": "2018-01-18T20:51:31", "upload_time_iso_8601": "2018-01-18T20:51:31.191056Z", "url": "https://files.pythonhosted.org/packages/fa/5e/ec1666a581b15829bbf2d4f83013e47f8ad89d99de82f905c73f13befe15/feed_seeker-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25d07d4a9b175577dcd09c12acc45a32", "sha256": "0fb4769d9081dd64b6262b4bc362a9b651b0e61c5adc045d3b27e9f2654656e7"}, "downloads": -1, "filename": "feed_seeker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25d07d4a9b175577dcd09c12acc45a32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9580, "upload_time": "2018-01-18T20:51:30", "upload_time_iso_8601": "2018-01-18T20:51:30.371874Z", "url": "https://files.pythonhosted.org/packages/c9/9a/f415118b580c4c759e637baa94c062ee8f9fc624fa3e6c383e020450eb0c/feed_seeker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02d874a653cd60eb6eeb21006d9dff03", "sha256": "9bb3bd705a21772124013b74b5012abd6558f641c4a4c267daa0196e75dbdb88"}, "downloads": -1, "filename": "feed_seeker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "02d874a653cd60eb6eeb21006d9dff03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8840, "upload_time": "2018-01-18T20:51:31", "upload_time_iso_8601": "2018-01-18T20:51:31.191056Z", "url": "https://files.pythonhosted.org/packages/fa/5e/ec1666a581b15829bbf2d4f83013e47f8ad89d99de82f905c73f13befe15/feed_seeker-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:59 2020"}