{"info": {"author": "Leon Xiao", "author_email": "i@xlhaw.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# Wafer Heatmap Visualization\n\nHeatmap sometime could be extremely useful, you can gain intuitive insight from the plot which contains   information on both location and distribution, and manage to find potential pattern behind it. \n\nThis package is implemented on the top of _seaborn_, and further customized by _matplotlib_. It provides an easy way to visualize wafer map data, both numerical and categorical data are supported.\n\nBefore you start, you should have some knowledge on _pandas_ and transform your data into `pd.DataFrame`, then make sure that positional data (x/row,y/col)  are included in separate columns and encoded as integer.\n\n\n\n\n## Installation\n\n\nTo install wfmap via PyPI using pip:\n\n```bash\npip install wfmap\n```\nor build the latest release from Github:\n\n```bash\ngit clone https://github.com/xlhaw/wfmap.git\ncd wfmap\npython setup.py install\n```\n\n\n\n## Basic Usage\n\nFor demonstration, I generate some dummy data under the `/data` folder. Let's load the data at first and explore the usage of this package.\n\n```python\nimport pandas as pd\nfrom wfmap import wafermap\ndata=pd.read_csv('/data/demo.csv')\n```\n\nTo better understand the data, take the first entry for example, it suggests that the _Die#0_ which located at `#11 ` row and `#60` col in wafer map, is `OK`  defined by _Defect Code_  and its _Metrics_ is `84.3`.\n\n\n\n**Numerical Data**\n\n'MAP_ROW' and 'MAP_COL' are the default column name for wafer mapping.  If you have preprocessed your data as the same format as I did above. The command required could be as simple as follows:\n\n```python\nwafermap(data,value='DATA',dtype='num')\n```\n\n![DATA](/img/Figure_2.png)\n\nOn the left side of  heatmap is the horizontal histogram plot of `DATA`, with colorized y-axis and invisible x-axis for visual aesthetics.\n\n\n\n**Categorical Data **\n\nSimilar to above numerical/continuous data, categorical data such as _Defect Code_ `CODE` can also be visualized as below.\n\n```python\nwafermap(data,value='CODE',dtype='cat')\n```\n\n![CODE](/img/Figure_1.png)\n\nIn addition to the regular heatmap, I put the histogram subplot and pie chart inset on the right half. For the sake of simplicity, only the ratio of  top 5 categories will be annotated. \n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xlhaw/wfmap", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "wfmap", "package_url": "https://pypi.org/project/wfmap/", "platform": "any", "project_url": "https://pypi.org/project/wfmap/", "project_urls": {"Homepage": "https://github.com/xlhaw/wfmap"}, "release_url": "https://pypi.org/project/wfmap/0.0.7.dev0/", "requires_dist": ["matplotlib", "numpy", "pandas", "seaborn"], "requires_python": "", "summary": "Wafer heatmaps from Pandas DataFrame", "version": "0.0.7.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Wafer Heatmap Visualization</h1>\n<p>Heatmap sometime could be extremely useful, you can gain intuitive insight from the plot which contains   information on both location and distribution, and manage to find potential pattern behind it.</p>\n<p>This package is implemented on the top of <em>seaborn</em>, and further customized by <em>matplotlib</em>. It provides an easy way to visualize wafer map data, both numerical and categorical data are supported.</p>\n<p>Before you start, you should have some knowledge on <em>pandas</em> and transform your data into <code>pd.DataFrame</code>, then make sure that positional data (x/row,y/col)  are included in separate columns and encoded as integer.</p>\n<h2>Installation</h2>\n<p>To install wfmap via PyPI using pip:</p>\n<pre>pip install wfmap\n</pre>\n<p>or build the latest release from Github:</p>\n<pre>git clone https://github.com/xlhaw/wfmap.git\n<span class=\"nb\">cd</span> wfmap\npython setup.py install\n</pre>\n<h2>Basic Usage</h2>\n<p>For demonstration, I generate some dummy data under the <code>/data</code> folder. Let's load the data at first and explore the usage of this package.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wfmap</span> <span class=\"kn\">import</span> <span class=\"n\">wafermap</span>\n<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'/data/demo.csv'</span><span class=\"p\">)</span>\n</pre>\n<p>To better understand the data, take the first entry for example, it suggests that the <em>Die#0</em> which located at <code>#11</code> row and <code>#60</code> col in wafer map, is <code>OK</code>  defined by <em>Defect Code</em>  and its <em>Metrics</em> is <code>84.3</code>.</p>\n<p><strong>Numerical Data</strong></p>\n<p>'MAP_ROW' and 'MAP_COL' are the default column name for wafer mapping.  If you have preprocessed your data as the same format as I did above. The command required could be as simple as follows:</p>\n<pre><span class=\"n\">wafermap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'DATA'</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'num'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"DATA\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd3f7486e71703c0e594bfbf2816efe3c32f6dc1/2f696d672f4669677572655f322e706e67\"></p>\n<p>On the left side of  heatmap is the horizontal histogram plot of <code>DATA</code>, with colorized y-axis and invisible x-axis for visual aesthetics.</p>\n<p>**Categorical Data **</p>\n<p>Similar to above numerical/continuous data, categorical data such as <em>Defect Code</em> <code>CODE</code> can also be visualized as below.</p>\n<pre><span class=\"n\">wafermap</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'CODE'</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'cat'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"CODE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49de88b7868935f372a4d5e6788dfd99bee87b2b/2f696d672f4669677572655f312e706e67\"></p>\n<p>In addition to the regular heatmap, I put the histogram subplot and pie chart inset on the right half. For the sake of simplicity, only the ratio of  top 5 categories will be annotated.</p>\n\n          </div>"}, "last_serial": 6654618, "releases": {"0.0.7.dev0": [{"comment_text": "", "digests": {"md5": "39b237ee11e67be59446de9174617859", "sha256": "fd45eaced25accd85afa5bd3f64b63ddd5e03ad79a437af8b3160b2b5bc72fd5"}, "downloads": -1, "filename": "wfmap-0.0.7.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "39b237ee11e67be59446de9174617859", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5552, "upload_time": "2020-02-18T17:02:36", "upload_time_iso_8601": "2020-02-18T17:02:36.170922Z", "url": "https://files.pythonhosted.org/packages/f3/10/9535d85f4df1f4265f2fa1219b6bbf203692f30702267175efa6e4924898/wfmap-0.0.7.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcd215b0fc0266ea40304070074232b5", "sha256": "0972ff6738b67c0ac415eed9d46d2ab156c3f73e8ec896ad7b53b28dd95c231f"}, "downloads": -1, "filename": "wfmap-0.0.7.dev0.tar.gz", "has_sig": false, "md5_digest": "dcd215b0fc0266ea40304070074232b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4799, "upload_time": "2020-02-18T17:02:48", "upload_time_iso_8601": "2020-02-18T17:02:48.781099Z", "url": "https://files.pythonhosted.org/packages/94/27/86789710e413e14a433be5c277f6abdb420eba2c9047752a6500210f068d/wfmap-0.0.7.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39b237ee11e67be59446de9174617859", "sha256": "fd45eaced25accd85afa5bd3f64b63ddd5e03ad79a437af8b3160b2b5bc72fd5"}, "downloads": -1, "filename": "wfmap-0.0.7.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "39b237ee11e67be59446de9174617859", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5552, "upload_time": "2020-02-18T17:02:36", "upload_time_iso_8601": "2020-02-18T17:02:36.170922Z", "url": "https://files.pythonhosted.org/packages/f3/10/9535d85f4df1f4265f2fa1219b6bbf203692f30702267175efa6e4924898/wfmap-0.0.7.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcd215b0fc0266ea40304070074232b5", "sha256": "0972ff6738b67c0ac415eed9d46d2ab156c3f73e8ec896ad7b53b28dd95c231f"}, "downloads": -1, "filename": "wfmap-0.0.7.dev0.tar.gz", "has_sig": false, "md5_digest": "dcd215b0fc0266ea40304070074232b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4799, "upload_time": "2020-02-18T17:02:48", "upload_time_iso_8601": "2020-02-18T17:02:48.781099Z", "url": "https://files.pythonhosted.org/packages/94/27/86789710e413e14a433be5c277f6abdb420eba2c9047752a6500210f068d/wfmap-0.0.7.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:05 2020"}