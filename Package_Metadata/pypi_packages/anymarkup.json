{"info": {"author": "Slavek Kabrda", "author_email": "slavek.kabrda@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "anymarkup\n=========\n\n.. image:: https://travis-ci.org/bkabrda/anymarkup.svg?branch=master\n   :target: https://travis-ci.org/bkabrda/anymarkup\n   :alt: Build Status\n\n.. image:: https://landscape.io/github/bkabrda/anymarkup/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/bkabrda/anymarkup/master\n   :alt: Code Health\n\n.. image:: https://coveralls.io/repos/bkabrda/anymarkup/badge.svg?branch=master\n   :target: https://coveralls.io/r/bkabrda/anymarkup?branch=master\n   :alt: Coverage\n\nParse or serialize any markup. Currently supports ini, json, json5, toml, xml and yaml.\nReport bugs and new functionality requests at https://github.com/bkabrda/anymarkup/issues.\n\nParsing::\n\n  >>> import anymarkup\n  >>> anymarkup.parse('foo: bar')\n  {'foo': 'bar'}\n  >>> anymarkup.parse_file('foo/bar.ini')\n  {'section': {'subsection': {'opt2': 'bar'}, 'opt1': 'foo'}}\n\n  $ cat foo/bar.ini\n  [section]\n  opt1=foo\n  [[subsection]]\n  opt2=bar\n\nSerializing::\n\n  >>> import anymarkup\n  >>> anymarkup.serialize({'foo': 'bar'}, 'json')\n  b'{\\n  \"foo\": \"bar\"\\n}'\n  >>> anymarkup.serialize_file({'foo': 'bar'}, 'foo/bar.json')\n\n  $ cat foo/bar.json\n  {\n    \"foo\": \"bar\"\n  }\n\n``anymarkup`` is licensed under BSD license. You can download official releases\nfrom https://pypi.python.org/pypi/anymarkup or install them via ``pip install anymarkup``.\n\n``anymarkup`` works with Python 2.7 and >= 3.3.\n\nAutomatic Markup Language Recognition\n-------------------------------------\n\nWhen using ``anymarkup.parse(input)``, anymarkup will try to guess markup language of input.\nThis usually works fine except:\n\n* ini vs toml: These two look almost the same and in fact have common subset (which,\n  however, yields different parsing result). Because of this, anything with an ini-like\n  look will be parsed with ini parser. If you want an input string to be parsed as toml,\n  you have to explicitly specify that using ``format=toml`` (see below for examples).\n* json vs json5: json5 is superset of json, but not very widely used. Because of practicality\n  of json usage, everything that looks like json is parsed as json. If you want input string\n  to be parsed as json5, you have to explicitly specify that using ``format=json5``.\n\nWhen using ``anymarkup.parse_file(path)``, anymarkup will try to guess format based on file\nextension and then fallback to guessing as explained above. This means that if the file has\n``.toml`` pr ``.json5`` extension, you don't have to provide ``format=<format>`` explicitly.\n\nNotes on Parsing Basic Types\n----------------------------\n\nWhen parsing, ``anymarkup`` recognizes basic types - ``NoneType``, ``int``, ``float`` and ``bool``\n(and ``long`` on Python 2) and converts all values to these types. If you want to get\neverything as strings, just use ``force_types=False`` with ``parse`` or ``parse_file``. Finally,\nyou can also use ``force_types=None`` to get whatever the parsing backend returned::\n\n  >>> anymarkup.parse('a: 1')\n  {'a': 1}\n  >>> anymarkup.parse('a: 1', force_types=False)\n  {'a': '1'}\n  >>> anymarkup.parse('a: 1', force_types=None)\n  {'a': 1}\n\n\nCLI\n--------\nTo install the CLI, run the following command:\n\n  pip install anymarkup\n\nExample of conversion from JSON to XML:\n\n  anymarkup convert --from-format json --to-format xml <somefile.json\n\nFor full help on the CLI run the following commands:\n\n  anymarkup --help\n  anymarkup convert --help\n\n\nBackends\n--------\n\n``anymarkup`` uses:\n\n- https://pypi.python.org/pypi/configobj/ for ``ini`` parsing\n- https://docs.python.org/library/json.html for ``json`` parsing\n- https://pypi.python.org/pypi/toml/ for ``toml`` parsing\n- https://pypi.python.org/pypi/xmltodict for ``xml`` parsing\n- https://pypi.python.org/pypi/PyYAML for ``yaml`` parsing\n\nNotes on OrderedDict\n--------------------\n\nParsing certain types of markup can yield Python's ``OrderedDict`` type - namely\nXML documents and YAML ``!!omap`` (see http://yaml.org/type/omap.html). ``anymarkup``\nhandles this without a problem, but note that if you serialize these as JSON or INI\nand then parse again, you'll lose the ordering information (meaning you'll get just\n``dict`` back).\n\nThis is because JSON and INI parsers (to my knowledge) don't consider\nordering key-value structures important and there's no direct means in these\nmarkup languages to express ordering key-value structures.\n\n\nNotes on Dependencies\n---------------------\n\nRead this section if you want anymarkup functionality only for subset of supported\nmarkup languages without the need to install all parsers.\n\nSince version 0.5.0, anymarkup is just a wrapper library around anymarkup-core\n(https://github.com/bkabrda/anymarkup-core) and doesn't actually contain any code,\nexcept of imports from anymarkup-core.\n\nanymarkup-core goal is to not explicitly depend on any of the parsers, so people\ncan install it with only a specified subset of dependencies. For example, you can\ninstall anymarkup-core only with PyYAML, if you know you'll only be parsing YAML.\n\nIf you install anymarkup, you will always get a full set of dependencies\nand you will be able to parse any markup language that's supported.\n\nThe CLI requires click as indicated in the requirements.txt file.\n\nExamples\n--------\n\nParsing examples::\n\n  ini = \"\"\"\n  [a]\n  foo = bar\"\"\"\n\n  json = \"\"\"\n  {\"a\": {\n      \"foo\": \"bar\"\n  }}\"\"\"\n\n  xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <a>\n      <foo>bar</foo>\n  </a>\"\"\"\n\n  yaml = \"\"\"\n  a:\n    foo: bar\n  \"\"\"\n\n  # these will all yield the same value (except that xml parsing will yield OrderedDict)\n  anymarkup.parse(ini)\n  anymarkup.parse(json)\n  anymarkup.parse(xml)\n  anymarkup.parse(yaml)\n\n  # explicitly specify a type of format to expect and/or encoding (utf-8 is default)\n  anymarkup.parse('foo: bar', format='yaml', encoding='ascii')\n\n  # by default, anymarkup recognizes basic types (None, booleans, ints and floats)\n  #   if you want to get everything as strings, just use force_types=False\n\n  # will yield {'a': 1, 'b': True, 'c': None}\n  anymarkup.parse('a: 1\\nb: True\\nc: None')\n  # will yield {'a': '1', 'b': 'True', 'c': 'None'}\n  anymarkup.parse('a: 1\\nb: True\\nc: None', force_types=False)\n\n  # or parse a file\n  anymarkup.parse_file('foo.ini')\n\n  # if a file doesn't have a format extension, pass it explicitly\n  anymarkup.parse_file('foo', format='json')\n\n  # you can also pass encoding explicitly (utf-8 is default)\n  anymarkup.parse_file('bar', format='xml', encoding='ascii')\n\n\nSerializing examples::\n\n  struct = {'a': ['b', 'c']}\n\n  for fmt in ['ini', 'json', 'xml', 'yaml']:\n      # any of the above formats can be used for serializing\n      anymarkup.serialize(struct, fmt)\n\n  # explicitly specify encoding (utf-8 is default)\n  anymarkup.serialize(struct, 'json', encoding='utf-8')\n\n  # or serialize directly to a file\n  anymarkup.serialize_file(struct, 'foo/bar.ini')\n\n  # if a file doesn't have a format extension, pass it explicitly\n  anymarkup.serialize_file(struct, 'foo/bar', format='json')\n\n  # you can also pass encoding explicitly (utf-8 is default)\n  anymarkup.serialize_file(struct, 'foo/bar', format='json', encoding='ascii')", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bkabrda/anymarkup", "keywords": "xml,yaml,toml,json,json5,ini", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "anymarkup", "package_url": "https://pypi.org/project/anymarkup/", "platform": "", "project_url": "https://pypi.org/project/anymarkup/", "project_urls": {"Homepage": "https://github.com/bkabrda/anymarkup"}, "release_url": "https://pypi.org/project/anymarkup/0.8.1/", "requires_dist": null, "requires_python": "", "summary": "Parse/serialize any markup format", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/bkabrda/anymarkup\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68b518c83a0c66b0e877f106dc6e7ac9a41af9cd/68747470733a2f2f7472617669732d63692e6f72672f626b61627264612f616e796d61726b75702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://landscape.io/github/bkabrda/anymarkup/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5af4d69a198f4cc996d8ffc2f6a50c843725d4c6/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f626b61627264612f616e796d61726b75702f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/bkabrda/anymarkup?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b60e904e8899f0317c7275d6c7b108fa74ee3e9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f626b61627264612f616e796d61726b75702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Parse or serialize any markup. Currently supports ini, json, json5, toml, xml and yaml.\nReport bugs and new functionality requests at <a href=\"https://github.com/bkabrda/anymarkup/issues\" rel=\"nofollow\">https://github.com/bkabrda/anymarkup/issues</a>.</p>\n<p>Parsing:</p>\n<pre>&gt;&gt;&gt; import anymarkup\n&gt;&gt;&gt; anymarkup.parse('foo: bar')\n{'foo': 'bar'}\n&gt;&gt;&gt; anymarkup.parse_file('foo/bar.ini')\n{'section': {'subsection': {'opt2': 'bar'}, 'opt1': 'foo'}}\n\n$ cat foo/bar.ini\n[section]\nopt1=foo\n[[subsection]]\nopt2=bar\n</pre>\n<p>Serializing:</p>\n<pre>&gt;&gt;&gt; import anymarkup\n&gt;&gt;&gt; anymarkup.serialize({'foo': 'bar'}, 'json')\nb'{\\n  \"foo\": \"bar\"\\n}'\n&gt;&gt;&gt; anymarkup.serialize_file({'foo': 'bar'}, 'foo/bar.json')\n\n$ cat foo/bar.json\n{\n  \"foo\": \"bar\"\n}\n</pre>\n<p><tt>anymarkup</tt> is licensed under BSD license. You can download official releases\nfrom <a href=\"https://pypi.python.org/pypi/anymarkup\" rel=\"nofollow\">https://pypi.python.org/pypi/anymarkup</a> or install them via <tt>pip install anymarkup</tt>.</p>\n<p><tt>anymarkup</tt> works with Python 2.7 and &gt;= 3.3.</p>\n<div id=\"automatic-markup-language-recognition\">\n<h2>Automatic Markup Language Recognition</h2>\n<p>When using <tt>anymarkup.parse(input)</tt>, anymarkup will try to guess markup language of input.\nThis usually works fine except:</p>\n<ul>\n<li>ini vs toml: These two look almost the same and in fact have common subset (which,\nhowever, yields different parsing result). Because of this, anything with an ini-like\nlook will be parsed with ini parser. If you want an input string to be parsed as toml,\nyou have to explicitly specify that using <tt>format=toml</tt> (see below for examples).</li>\n<li>json vs json5: json5 is superset of json, but not very widely used. Because of practicality\nof json usage, everything that looks like json is parsed as json. If you want input string\nto be parsed as json5, you have to explicitly specify that using <tt>format=json5</tt>.</li>\n</ul>\n<p>When using <tt>anymarkup.parse_file(path)</tt>, anymarkup will try to guess format based on file\nextension and then fallback to guessing as explained above. This means that if the file has\n<tt>.toml</tt> pr <tt>.json5</tt> extension, you don\u2019t have to provide <tt><span class=\"pre\">format=&lt;format&gt;</span></tt> explicitly.</p>\n</div>\n<div id=\"notes-on-parsing-basic-types\">\n<h2>Notes on Parsing Basic Types</h2>\n<p>When parsing, <tt>anymarkup</tt> recognizes basic types - <tt>NoneType</tt>, <tt>int</tt>, <tt>float</tt> and <tt>bool</tt>\n(and <tt>long</tt> on Python 2) and converts all values to these types. If you want to get\neverything as strings, just use <tt>force_types=False</tt> with <tt>parse</tt> or <tt>parse_file</tt>. Finally,\nyou can also use <tt>force_types=None</tt> to get whatever the parsing backend returned:</p>\n<pre>&gt;&gt;&gt; anymarkup.parse('a: 1')\n{'a': 1}\n&gt;&gt;&gt; anymarkup.parse('a: 1', force_types=False)\n{'a': '1'}\n&gt;&gt;&gt; anymarkup.parse('a: 1', force_types=None)\n{'a': 1}\n</pre>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>To install the CLI, run the following command:</p>\n<blockquote>\npip install anymarkup</blockquote>\n<p>Example of conversion from JSON to XML:</p>\n<blockquote>\nanymarkup convert \u2013from-format json \u2013to-format xml &lt;somefile.json</blockquote>\n<p>For full help on the CLI run the following commands:</p>\n<blockquote>\nanymarkup \u2013help\nanymarkup convert \u2013help</blockquote>\n</div>\n<div id=\"backends\">\n<h2>Backends</h2>\n<p><tt>anymarkup</tt> uses:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/configobj/\" rel=\"nofollow\">https://pypi.python.org/pypi/configobj/</a> for <tt>ini</tt> parsing</li>\n<li><a href=\"https://docs.python.org/library/json.html\" rel=\"nofollow\">https://docs.python.org/library/json.html</a> for <tt>json</tt> parsing</li>\n<li><a href=\"https://pypi.python.org/pypi/toml/\" rel=\"nofollow\">https://pypi.python.org/pypi/toml/</a> for <tt>toml</tt> parsing</li>\n<li><a href=\"https://pypi.python.org/pypi/xmltodict\" rel=\"nofollow\">https://pypi.python.org/pypi/xmltodict</a> for <tt>xml</tt> parsing</li>\n<li><a href=\"https://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">https://pypi.python.org/pypi/PyYAML</a> for <tt>yaml</tt> parsing</li>\n</ul>\n</div>\n<div id=\"notes-on-ordereddict\">\n<h2>Notes on OrderedDict</h2>\n<p>Parsing certain types of markup can yield Python\u2019s <tt>OrderedDict</tt> type - namely\nXML documents and YAML <tt>!!omap</tt> (see <a href=\"http://yaml.org/type/omap.html\" rel=\"nofollow\">http://yaml.org/type/omap.html</a>). <tt>anymarkup</tt>\nhandles this without a problem, but note that if you serialize these as JSON or INI\nand then parse again, you\u2019ll lose the ordering information (meaning you\u2019ll get just\n<tt>dict</tt> back).</p>\n<p>This is because JSON and INI parsers (to my knowledge) don\u2019t consider\nordering key-value structures important and there\u2019s no direct means in these\nmarkup languages to express ordering key-value structures.</p>\n</div>\n<div id=\"notes-on-dependencies\">\n<h2>Notes on Dependencies</h2>\n<p>Read this section if you want anymarkup functionality only for subset of supported\nmarkup languages without the need to install all parsers.</p>\n<p>Since version 0.5.0, anymarkup is just a wrapper library around anymarkup-core\n(<a href=\"https://github.com/bkabrda/anymarkup-core\" rel=\"nofollow\">https://github.com/bkabrda/anymarkup-core</a>) and doesn\u2019t actually contain any code,\nexcept of imports from anymarkup-core.</p>\n<p>anymarkup-core goal is to not explicitly depend on any of the parsers, so people\ncan install it with only a specified subset of dependencies. For example, you can\ninstall anymarkup-core only with PyYAML, if you know you\u2019ll only be parsing YAML.</p>\n<p>If you install anymarkup, you will always get a full set of dependencies\nand you will be able to parse any markup language that\u2019s supported.</p>\n<p>The CLI requires click as indicated in the requirements.txt file.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Parsing examples:</p>\n<pre>ini = \"\"\"\n[a]\nfoo = bar\"\"\"\n\njson = \"\"\"\n{\"a\": {\n    \"foo\": \"bar\"\n}}\"\"\"\n\nxml = \"\"\"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;a&gt;\n    &lt;foo&gt;bar&lt;/foo&gt;\n&lt;/a&gt;\"\"\"\n\nyaml = \"\"\"\na:\n  foo: bar\n\"\"\"\n\n# these will all yield the same value (except that xml parsing will yield OrderedDict)\nanymarkup.parse(ini)\nanymarkup.parse(json)\nanymarkup.parse(xml)\nanymarkup.parse(yaml)\n\n# explicitly specify a type of format to expect and/or encoding (utf-8 is default)\nanymarkup.parse('foo: bar', format='yaml', encoding='ascii')\n\n# by default, anymarkup recognizes basic types (None, booleans, ints and floats)\n#   if you want to get everything as strings, just use force_types=False\n\n# will yield {'a': 1, 'b': True, 'c': None}\nanymarkup.parse('a: 1\\nb: True\\nc: None')\n# will yield {'a': '1', 'b': 'True', 'c': 'None'}\nanymarkup.parse('a: 1\\nb: True\\nc: None', force_types=False)\n\n# or parse a file\nanymarkup.parse_file('foo.ini')\n\n# if a file doesn't have a format extension, pass it explicitly\nanymarkup.parse_file('foo', format='json')\n\n# you can also pass encoding explicitly (utf-8 is default)\nanymarkup.parse_file('bar', format='xml', encoding='ascii')\n</pre>\n<p>Serializing examples:</p>\n<pre>struct = {'a': ['b', 'c']}\n\nfor fmt in ['ini', 'json', 'xml', 'yaml']:\n    # any of the above formats can be used for serializing\n    anymarkup.serialize(struct, fmt)\n\n# explicitly specify encoding (utf-8 is default)\nanymarkup.serialize(struct, 'json', encoding='utf-8')\n\n# or serialize directly to a file\nanymarkup.serialize_file(struct, 'foo/bar.ini')\n\n# if a file doesn't have a format extension, pass it explicitly\nanymarkup.serialize_file(struct, 'foo/bar', format='json')\n\n# you can also pass encoding explicitly (utf-8 is default)\nanymarkup.serialize_file(struct, 'foo/bar', format='json', encoding='ascii')\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5581797, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e092546aa92848b0aa10074144576c2f", "sha256": "51c312bad499b853078ca1332bb7e664a2c5b0dd78b05dcc502dfdefdf06d157"}, "downloads": -1, "filename": "anymarkup-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e092546aa92848b0aa10074144576c2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6574, "upload_time": "2015-03-02T16:32:40", "upload_time_iso_8601": "2015-03-02T16:32:40.725125Z", "url": "https://files.pythonhosted.org/packages/53/c5/5f12021e8406b863969271c41bee37657897a25fb640681380165280629a/anymarkup-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2573d25a69111eff268f0c72fc06c90c", "sha256": "e5e4e45aca9ef89eb9524cdb4a846c03246f48eac5c2a4a04e2a7ada0e1d52d5"}, "downloads": -1, "filename": "anymarkup-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2573d25a69111eff268f0c72fc06c90c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6502, "upload_time": "2015-03-02T17:15:45", "upload_time_iso_8601": "2015-03-02T17:15:45.568178Z", "url": "https://files.pythonhosted.org/packages/25/40/dfbe1d08689b753dd7eb1b29421649f773a61ac33de79d676187f1c2177e/anymarkup-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8d08d25a367143b7119edf6ebf5a114d", "sha256": "4c6542839fd9df83acf74706374f779606ba5a58f04f18a884ea7dea7f44f86c"}, "downloads": -1, "filename": "anymarkup-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8d08d25a367143b7119edf6ebf5a114d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9282, "upload_time": "2015-03-11T15:48:40", "upload_time_iso_8601": "2015-03-11T15:48:40.479120Z", "url": "https://files.pythonhosted.org/packages/f5/99/30d2b08a7b611bb55207793fe337f90ca25efe7e90308d590f540c0b3340/anymarkup-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1e124a7297af113cdb4314674cab3e11", "sha256": "3962a6b343f29c97ff68cb638f6dbb4fcea720f4c7b13b8b91d60ce5a8b64c5c"}, "downloads": -1, "filename": "anymarkup-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1e124a7297af113cdb4314674cab3e11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10323, "upload_time": "2015-03-11T19:08:15", "upload_time_iso_8601": "2015-03-11T19:08:15.279898Z", "url": "https://files.pythonhosted.org/packages/7e/0d/2bbdfe37ac0d317b790e42f01245746a81684a0df7fae147abb49033f9d8/anymarkup-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9fd75f6f31975a8a65ecb5c9f1e5f996", "sha256": "311268eae70f211ae4f34927f1f75c3a3ee7096a697d4b9b30d5e7a52ee2f61e"}, "downloads": -1, "filename": "anymarkup-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9fd75f6f31975a8a65ecb5c9f1e5f996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10470, "upload_time": "2015-03-27T13:36:34", "upload_time_iso_8601": "2015-03-27T13:36:34.595090Z", "url": "https://files.pythonhosted.org/packages/f4/b6/e99ea6b37f7aa80f5ebd0853b33c6090eb7599203569ca899e4149d87cb6/anymarkup-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b29ec2c2241fe69d9a0bffb93ce44979", "sha256": "0f72110f8c39c1768234fd136dc88c23d84f2112d9717e11d0805739f4661464"}, "downloads": -1, "filename": "anymarkup-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b29ec2c2241fe69d9a0bffb93ce44979", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11701, "upload_time": "2015-04-14T00:33:11", "upload_time_iso_8601": "2015-04-14T00:33:11.539132Z", "url": "https://files.pythonhosted.org/packages/fb/ae/4d0b31c8c420c77f36873f995c55ef34b9d0199ec724dd11046149b63e4f/anymarkup-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "55342262533ae90d80d40cd72f7ee003", "sha256": "e84c93f8b250aec4cb813b32dd3325ff4cdbdff2fc0ffd571077857ae706092d"}, "downloads": -1, "filename": "anymarkup-0.4.1.tar.gz", "has_sig": false, "md5_digest": "55342262533ae90d80d40cd72f7ee003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11910, "upload_time": "2015-05-19T15:18:37", "upload_time_iso_8601": "2015-05-19T15:18:37.691125Z", "url": "https://files.pythonhosted.org/packages/0d/03/9dfe6a3bd3d06d0127fe2913a1202f5bfe9cef3e6447e7e5821defe73d67/anymarkup-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "4818700784e15dd3dcb422745580c91f", "sha256": "de12e9e7512bfaa232c532f3bee2f19206711105773436ba3d6ac14141284ea5"}, "downloads": -1, "filename": "anymarkup-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4818700784e15dd3dcb422745580c91f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12647, "upload_time": "2015-05-25T08:24:50", "upload_time_iso_8601": "2015-05-25T08:24:50.074523Z", "url": "https://files.pythonhosted.org/packages/fd/4f/28147cc39157288061cb54e9e8b38bb342934efe158b133171787af52456/anymarkup-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "dc71872f40ce5f69a37993f556f3f7f0", "sha256": "d60b15d9631c2d898fc8dd6f84aaef332418197023374f8780aac4ee1fc2a96a"}, "downloads": -1, "filename": "anymarkup-0.4.3.tar.gz", "has_sig": false, "md5_digest": "dc71872f40ce5f69a37993f556f3f7f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12662, "upload_time": "2015-06-16T12:23:57", "upload_time_iso_8601": "2015-06-16T12:23:57.807514Z", "url": "https://files.pythonhosted.org/packages/4e/45/a7cf3240b33d3401ef9aa206749b54381e346d974d6b064a932d3167f63b/anymarkup-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "fe6bf4befe3a3dbf97f4f56f20d984b5", "sha256": "bbe344a814b3b476f15a01a11c4a0ec075633e80585772ee96446776b50da855"}, "downloads": -1, "filename": "anymarkup-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fe6bf4befe3a3dbf97f4f56f20d984b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5009, "upload_time": "2015-10-19T10:57:59", "upload_time_iso_8601": "2015-10-19T10:57:59.015935Z", "url": "https://files.pythonhosted.org/packages/8f/e6/be981ceaf3404e2bb27e77723ae7203bde11c2d242a8e46f6ede6fb8ef51/anymarkup-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "419cb853a955c8ce1d3f83554be4bc38", "sha256": "a91ddc143dbeeefc702298a3008e1425b3289e4c7ea116eaba3bbfc02a818dd4"}, "downloads": -1, "filename": "anymarkup-0.6.0.tar.gz", "has_sig": false, "md5_digest": "419cb853a955c8ce1d3f83554be4bc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5472, "upload_time": "2016-05-06T14:01:48", "upload_time_iso_8601": "2016-05-06T14:01:48.368662Z", "url": "https://files.pythonhosted.org/packages/30/d3/a7d696af4233b9e75e3158e774ca085f8c881ae0f3b4df952966a18c8f6c/anymarkup-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a68f6b4e02c67d1bd39bc1bc399389f3", "sha256": "641a14cf64cfc1f108d19fd286edab4c05bf6126a91b425c960505a7fcb6ae84"}, "downloads": -1, "filename": "anymarkup-0.7.0.tar.gz", "has_sig": false, "md5_digest": "a68f6b4e02c67d1bd39bc1bc399389f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5590, "upload_time": "2016-05-07T14:16:51", "upload_time_iso_8601": "2016-05-07T14:16:51.008354Z", "url": "https://files.pythonhosted.org/packages/45/5d/309924a49723b774754a16b3cc0cd21f4e6d451cf79b1302bf8e55b08e08/anymarkup-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "08432b9c21748ddca271daf26916a69b", "sha256": "5c9fd53c680e05b795f9371bff9a98f48bdeaa57eb519acedd50b6d67ac9ff92"}, "downloads": -1, "filename": "anymarkup-0.8.0.tar.gz", "has_sig": false, "md5_digest": "08432b9c21748ddca271daf26916a69b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7500, "upload_time": "2019-07-23T11:58:21", "upload_time_iso_8601": "2019-07-23T11:58:21.834699Z", "url": "https://files.pythonhosted.org/packages/bc/af/48d7ddf10c10560561dd8cf91661dce9ee10e7bcdddce8b6108f6c1b794c/anymarkup-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "25dc3d226bcbcce6d557ad20887238cf", "sha256": "d125c795bd47c5f7dd5ec6aedd0691f7aa7b9ed619fde87eb56ddff17ee3e844"}, "downloads": -1, "filename": "anymarkup-0.8.1.tar.gz", "has_sig": false, "md5_digest": "25dc3d226bcbcce6d557ad20887238cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7720, "upload_time": "2019-07-25T07:10:45", "upload_time_iso_8601": "2019-07-25T07:10:45.279592Z", "url": "https://files.pythonhosted.org/packages/23/cd/33df5e9ce5dcf72a55e39432a0d6bbc77aa7857b536a063c368aa48bdd8f/anymarkup-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25dc3d226bcbcce6d557ad20887238cf", "sha256": "d125c795bd47c5f7dd5ec6aedd0691f7aa7b9ed619fde87eb56ddff17ee3e844"}, "downloads": -1, "filename": "anymarkup-0.8.1.tar.gz", "has_sig": false, "md5_digest": "25dc3d226bcbcce6d557ad20887238cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7720, "upload_time": "2019-07-25T07:10:45", "upload_time_iso_8601": "2019-07-25T07:10:45.279592Z", "url": "https://files.pythonhosted.org/packages/23/cd/33df5e9ce5dcf72a55e39432a0d6bbc77aa7857b536a063c368aa48bdd8f/anymarkup-0.8.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:56 2020"}