{"info": {"author": "Yoeri Otten, Mathieu Hinderyckx", "author_email": "yoeri@vck.utwente.nl, mathieu.hinderyckx@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Security", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "flasksaml2idp\n===============\n\n\n.. image:: https://img.shields.io/pypi/v/flasksaml2idp.svg\n    :scale: 100%\n    :target: https://pypi.python.org/pypi/flasksaml2idp\n    :alt: PyPi\n\n.. image:: https://readthedocs.org/projects/flasksaml2idp/badge/?version=latest\n    :scale: 100%\n    :target: https://djangosaml2idp.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :scale: 100%\n    :target: https://www.apache.org/licenses/LICENSE-2.0\n    :alt: Apache 2.0 License\n\n\nflaskosaml2idp implements the Identity Provider side of the SAML2 protocol for Flask.\nIt is based upon a similar project for django: `djangosaml2idp <https://github.com/OTA-Insight/djangosaml2idp>`.\nIt builds on top of `PySAML2 <https://github.com/IdentityPython/pysaml2>`_.\n\nThis package is currently in development and should NOT be used in a production environment.\n\nAny contributions, feature requests, proposals, ideas ... are welcome! See the `CONTRIBUTING document <https://github.com/verenigingcampuskabel/djangosaml2idp/blob/master/CONTRIBUTING.md>`_ for some info.\n\nInstallation\n============\n\nPySAML2 uses `XML Security Library <http://www.aleksey.com/xmlsec/>`_ binary to sign SAML assertions, so you need to install\nit either through your operating system package or by compiling the source code. It doesn't matter where the final executable is installed because\nyou will need to set the full path to it in the configuration stage. XmlSec is available (at least) for Debian, OSX and Alpine Linux.\n\nNow you can install the flasksaml2idp package using pip. This will also install PySAML2 and its dependencies automatically::\n\n    pip install flasksaml2idp\n\n\nConfiguration & Usage\n=====================\n\nTODO\n\nFurther optional configuration options\n======================================\n\nIn the ``SAML_IDP_SPCONFIG`` setting you can define a ``processor``, its value being a string with dotted path to a class.\nThis is a hook to customize some access control checks. By default, the included `BaseProcessor` is used, which allows every user to login on the IdP.\nYou can customize this behaviour by subclassing the `BaseProcessor` and overriding its `has_access(self, request)` method. This method should return true or false, depending if the user has permission to log in for the SP / IdP.\nThe processor has the SP entity ID available as `self._entity_id`, and received the request (with an authenticated request.user on it) as parameter to the `has_access` function.\nThis way, you should have the necessary flexibility to perform whatever checks you need.\nAn example `processor subclass <https://github.com/OTA-Insight/djangosaml2idp/blob/master/example_setup/idp/idp/processors.py>`_ can be found in the IdP of the included example.\n\nWithout custom setting, users will be identified by the ``USERNAME_FIELD`` property on the user Model you use. By Django defaults this will be the username.\nYou can customize which field is used for the identifier by adding ``SAML_IDP_DJANGO_USERNAME_FIELD`` to your settings with as value the attribute to use on your user instance.\n\nCustomizing error handling\n==========================\n\ndjangosaml2idp renders a very basic error page if it encounters an error, indicating an error occured, which error, and possibly an extra message.\nThe HTTP status code is also set if possible depending on which error occured.\nYou can customize this by using the ``SAML_IDP_ERROR_VIEW_CLASS`` setting. Set this to a dotted import path to your custom (class based) view in order to use that one.\nIf you subclass the provided `djangosaml2idp.error_views.SamlIDPErrorView`, you have the following variables available for use in the template:\n\nexception_type\n  the class of the exception that occurred\n\nexception_msg\n  the message from the exception (by doing `str(exception)`)\n\nextra_message\n  if no specific exception given, a message indicating something went wrong, or an additional message next to the `exception_msg`\n\nThe simplest override is to subclass the `SamlIDPErrorView` and only using your own error template.\nYou can use any Class-Based-View for this; it's not necessary to subclass the builtin error view.\nThe example project contains a ready to use example of this; uncomment the `SAML_IDP_ERROR_VIEW_CLASS` setting and it will use a custom view with custom template.\n\n\nMulti Factor Authentication support\n===================================\n\nThere are three main components to adding multiple factor support.\n\n\n1. Subclass flasksaml2idp.processors.BaseProcessor as outlined above. You will need to override the `enable_multifactor()` method to check whether or not multifactor should be enabled for a user. (If it should allways be enabled for all users simply hard code to True). By default it unconditionally returns False and no multifactor is enforced.\n\n2. Sublass the `flasksaml2idp.views.ProcessMultiFactorView` view to make the appropriate calls for your environment. Implement your custom verification logic in the `multifactor_is_valid` method: this could call a helper script, an internal SMS triggering service, a data source only the IdP can access or an external second factor provider (e.g. Symantec VIP). By default this view will log that it was called then redirect.\n\n3. Update your urls.py and add an override for name='saml_multi_factor' - ensure it comes before importing the flasksaml2idp urls file so your custom view is used instead of the built-in one.\n\n\nRunning the test suite\n======================\nInstall the dev dependencies in ``requirements-dev.txt``::\n\n  pip install -r requirements-dev.txt\n\nRun ``py.test`` from the project root::\n\n  py.test\n\n\n\nExample project\n---------------\nThe directory ``example_project`` contains a barebone demo setup to demonstrate the login-logout functionality.\nIt consists of a Service Provider implemented with `djangosaml2 <https://github.com/knaperek/djangosaml2/>`_ and an Identity Provider using ``djangosaml2idp``.\nThe readme in that folder contains more information on how to run it.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/verenigingcampuskabel/flask-saml2idp/", "keywords": "flask,pysaml2,sso,saml2,federated authentication,authentication,idp", "license": "Apache Software License 2.0", "maintainer": "Yoeri Otten", "maintainer_email": "", "name": "flasksaml2idp", "package_url": "https://pypi.org/project/flasksaml2idp/", "platform": "", "project_url": "https://pypi.org/project/flasksaml2idp/", "project_urls": {"Homepage": "https://github.com/verenigingcampuskabel/flask-saml2idp/"}, "release_url": "https://pypi.org/project/flasksaml2idp/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "SAML 2.0 Identity Provider for Flask", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flasksaml2idp\">\n<h2>flasksaml2idp</h2>\n<a href=\"https://pypi.python.org/pypi/flasksaml2idp\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5cb77507bc560453d3a8f4a0b7203f4f6ac1e98a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b73616d6c326964702e737667\"></a>\n<a href=\"https://djangosaml2idp.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/462846e14b50de94f4592fd457d45eca7ec488a9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f666c61736b73616d6c326964702f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"Apache 2.0 License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<p>flaskosaml2idp implements the Identity Provider side of the SAML2 protocol for Flask.\nIt is based upon a similar project for django: <cite>djangosaml2idp &lt;https://github.com/OTA-Insight/djangosaml2idp&gt;</cite>.\nIt builds on top of <a href=\"https://github.com/IdentityPython/pysaml2\" rel=\"nofollow\">PySAML2</a>.</p>\n<p>This package is currently in development and should NOT be used in a production environment.</p>\n<p>Any contributions, feature requests, proposals, ideas \u2026 are welcome! See the <a href=\"https://github.com/verenigingcampuskabel/djangosaml2idp/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING document</a> for some info.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PySAML2 uses <a href=\"http://www.aleksey.com/xmlsec/\" rel=\"nofollow\">XML Security Library</a> binary to sign SAML assertions, so you need to install\nit either through your operating system package or by compiling the source code. It doesn\u2019t matter where the final executable is installed because\nyou will need to set the full path to it in the configuration stage. XmlSec is available (at least) for Debian, OSX and Alpine Linux.</p>\n<p>Now you can install the flasksaml2idp package using pip. This will also install PySAML2 and its dependencies automatically:</p>\n<pre>pip install flasksaml2idp\n</pre>\n</div>\n<div id=\"configuration-usage\">\n<h2>Configuration &amp; Usage</h2>\n<p>TODO</p>\n</div>\n<div id=\"further-optional-configuration-options\">\n<h2>Further optional configuration options</h2>\n<p>In the <tt>SAML_IDP_SPCONFIG</tt> setting you can define a <tt>processor</tt>, its value being a string with dotted path to a class.\nThis is a hook to customize some access control checks. By default, the included <cite>BaseProcessor</cite> is used, which allows every user to login on the IdP.\nYou can customize this behaviour by subclassing the <cite>BaseProcessor</cite> and overriding its <cite>has_access(self, request)</cite> method. This method should return true or false, depending if the user has permission to log in for the SP / IdP.\nThe processor has the SP entity ID available as <cite>self._entity_id</cite>, and received the request (with an authenticated request.user on it) as parameter to the <cite>has_access</cite> function.\nThis way, you should have the necessary flexibility to perform whatever checks you need.\nAn example <a href=\"https://github.com/OTA-Insight/djangosaml2idp/blob/master/example_setup/idp/idp/processors.py\" rel=\"nofollow\">processor subclass</a> can be found in the IdP of the included example.</p>\n<p>Without custom setting, users will be identified by the <tt>USERNAME_FIELD</tt> property on the user Model you use. By Django defaults this will be the username.\nYou can customize which field is used for the identifier by adding <tt>SAML_IDP_DJANGO_USERNAME_FIELD</tt> to your settings with as value the attribute to use on your user instance.</p>\n</div>\n<div id=\"customizing-error-handling\">\n<h2>Customizing error handling</h2>\n<p>djangosaml2idp renders a very basic error page if it encounters an error, indicating an error occured, which error, and possibly an extra message.\nThe HTTP status code is also set if possible depending on which error occured.\nYou can customize this by using the <tt>SAML_IDP_ERROR_VIEW_CLASS</tt> setting. Set this to a dotted import path to your custom (class based) view in order to use that one.\nIf you subclass the provided <cite>djangosaml2idp.error_views.SamlIDPErrorView</cite>, you have the following variables available for use in the template:</p>\n<dl>\n<dt>exception_type</dt>\n<dd>the class of the exception that occurred</dd>\n<dt>exception_msg</dt>\n<dd>the message from the exception (by doing <cite>str(exception)</cite>)</dd>\n<dt>extra_message</dt>\n<dd>if no specific exception given, a message indicating something went wrong, or an additional message next to the <cite>exception_msg</cite></dd>\n</dl>\n<p>The simplest override is to subclass the <cite>SamlIDPErrorView</cite> and only using your own error template.\nYou can use any Class-Based-View for this; it\u2019s not necessary to subclass the builtin error view.\nThe example project contains a ready to use example of this; uncomment the <cite>SAML_IDP_ERROR_VIEW_CLASS</cite> setting and it will use a custom view with custom template.</p>\n</div>\n<div id=\"multi-factor-authentication-support\">\n<h2>Multi Factor Authentication support</h2>\n<p>There are three main components to adding multiple factor support.</p>\n<ol>\n<li>Subclass flasksaml2idp.processors.BaseProcessor as outlined above. You will need to override the <cite>enable_multifactor()</cite> method to check whether or not multifactor should be enabled for a user. (If it should allways be enabled for all users simply hard code to True). By default it unconditionally returns False and no multifactor is enforced.</li>\n<li>Sublass the <cite>flasksaml2idp.views.ProcessMultiFactorView</cite> view to make the appropriate calls for your environment. Implement your custom verification logic in the <cite>multifactor_is_valid</cite> method: this could call a helper script, an internal SMS triggering service, a data source only the IdP can access or an external second factor provider (e.g. Symantec VIP). By default this view will log that it was called then redirect.</li>\n<li>Update your urls.py and add an override for name=\u2019saml_multi_factor\u2019 - ensure it comes before importing the flasksaml2idp urls file so your custom view is used instead of the built-in one.</li>\n</ol>\n</div>\n<div id=\"running-the-test-suite\">\n<h2>Running the test suite</h2>\n<p>Install the dev dependencies in <tt><span class=\"pre\">requirements-dev.txt</span></tt>:</p>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>Run <tt>py.test</tt> from the project root:</p>\n<pre>py.test\n</pre>\n<div id=\"example-project\">\n<h3>Example project</h3>\n<p>The directory <tt>example_project</tt> contains a barebone demo setup to demonstrate the login-logout functionality.\nIt consists of a Service Provider implemented with <a href=\"https://github.com/knaperek/djangosaml2/\" rel=\"nofollow\">djangosaml2</a> and an Identity Provider using <tt>djangosaml2idp</tt>.\nThe readme in that folder contains more information on how to run it.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6307077, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6cd7214bc99cfba935e5dc19c1acff2c", "sha256": "1313c3617ff6dce8959e1b7ce2c8c5e0514372d6551941ab0a23bf87b223659b"}, "downloads": -1, "filename": "flasksaml2idp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6cd7214bc99cfba935e5dc19c1acff2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16643, "upload_time": "2019-12-14T20:03:22", "upload_time_iso_8601": "2019-12-14T20:03:22.216525Z", "url": "https://files.pythonhosted.org/packages/78/a0/5040ea18f56bacdf21829a40cbd11bde2510dac1f9ed8ab6046441f76dd8/flasksaml2idp-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "7804877f9bd9ff28232114c4312d396f", "sha256": "00537df1724929a592fd8ff4d0b1d2482d4f0e93a691707676b366fc4aa5a68e"}, "downloads": -1, "filename": "flasksaml2idp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7804877f9bd9ff28232114c4312d396f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17282, "upload_time": "2019-12-15T16:41:01", "upload_time_iso_8601": "2019-12-15T16:41:01.454777Z", "url": "https://files.pythonhosted.org/packages/df/9c/2e44af482a5ce73f1815423adac3a3bfcd6dda0da7987bbdabb33feb593b/flasksaml2idp-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7804877f9bd9ff28232114c4312d396f", "sha256": "00537df1724929a592fd8ff4d0b1d2482d4f0e93a691707676b366fc4aa5a68e"}, "downloads": -1, "filename": "flasksaml2idp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7804877f9bd9ff28232114c4312d396f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17282, "upload_time": "2019-12-15T16:41:01", "upload_time_iso_8601": "2019-12-15T16:41:01.454777Z", "url": "https://files.pythonhosted.org/packages/df/9c/2e44af482a5ce73f1815423adac3a3bfcd6dda0da7987bbdabb33feb593b/flasksaml2idp-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:21 2020"}