{"info": {"author": "Chalmers University of Technology / Jens Ahrens", "author_email": "jens.ahrens@chalmers.se", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio"], "description": "Sound Field Analysis toolbox for Python\n=======================================\n.. image:: https://api.travis-ci.org/QULab/sound_field_analysis-py.svg\n.. image:: https://ci.appveyor.com/api/projects/status/u0koxo5vcitmbghc?svg=true\n\nThe *sound\\_field\\_analysis* toolbox (short: *sfa*) is a Python port of the `Sound Field Analysis \nToolbox (SOFiA) toolbox`_, originally by Benjamin Bernsch\u00fctz `[1]`_. The main goal of the *sfa* \ntoolbox is to analyze, visualize and process sound field data recorded by spherical microphone \narrays. Furthermore, various types of test-data may be generated to evaluate the implemented \nfunctions. It is an essential building block of `ReTiSAR`_, an implementation  of real time \nbinaural rendering of spherical microphone array data.\n\n\nRequirements\n------------\n\nWe use Python 3.7 for development. Chances are that earlier version will work too but this is currently untested.\n\nThe following external libraries are required:\n\n-  `NumPy`_\n-  `SciPy`_\n-  `Pysofaconventions`_\n-  `Jupyter`_ (for running *Notebooks* locally)\n-  `Plotly`_ (for plotting)\n\n\nInstallation\n------------\n\nFor performance and convenience reasons we highly recommend to use `Conda`_ (miniconda for simplicity) to manage your Python installation. Once installed, you can use the following steps to receive and use *sfa*, depending on your use case:\n\nA.  From PyPI:\n\n    Install into an existing environment (without example *Jupyter Notebooks*):\n    ``pip install sound_field_analysis``\n\nB.  By cloning (or downloading) the repository and setting up a new environment:\n\n    ``git clone https://github.com/AppliedAcousticsChalmers/sound_field_analysis-py.git``\n\n    ``cd sound_field_analysis-py/``\n\n    Create a new Conda environment from the specified requirements:\n    ``conda env create --file environment.yml``\n\n    Activate the environment:\n    ``source activate sfa``\n\n    **Optional:** Install additional requirements in case you want to locally run the *Jupyter Notebooks* with examples:\n    ``conda env update --file environment_jupyter.yml``\n\n.. C.  From `conda-forge`_ channel: **[outdated]**\n\n    Install into an existing environment:\n    ``conda install -c conda-forge sound_field_analysis``\n\n\nDocumentation\n-------------\n\nFind the full documentation at https://appliedacousticschalmers.github.io/sound_field_analysis-py/.\n\n\nExamples\n--------\n\nThe following examples are available as Jupyter notebooks, either statically on `GitHub`_ or interactively on\n`nbviewer`_. You can of course also simply download the examples and run them locally!\n\n\nExp1: Ideal plane wave\n~~~~~~~~~~~~~~~~~~~~~~\n\nIdeal unity plane wave simulation and 3D plot.\n\n`View interactively on nbviewer <https://nbviewer.jupyter\n.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp1_IdealPlaneWave.ipynb>`__\n\n|AE1_img|_\n\n.. |AE1_img| image:: examples/img/AE1_shape.png?raw=true\n.. _AE1_img: https://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp1_IdealPlaneWave.ipynb\n\n\nExp2: Measured plane wave\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA measured plane wave from AZ=180\u00b0, EL=90\u00b0 in the anechoic chamber using a cardioid mic.\n\n`View interactively on nbviewer <https://nbviewer.jupyter\n.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp2_MeasuredWave.ipynb>`__\n\n|AE3_img|_\n\n.. |AE3_img| image:: examples/img/AE3_shape.png?raw=true\n.. _AE3_img: https://nbviewer.jupyterorg/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp2_MeasuredWave.ipynb\n\n\nExp4: Binaural rendering\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nRender a spherical microphone array impulse response measurement binaurally. The example shows examples for loading\nmiro or `SOFA`_ files.\n\n`View interactively on nbviewer <https://nbviewer.jupyter\n.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp4_BinauralRendering.ipynb>`__\n\n\nVersion history\n---------------\n\n*v2020.1.30*\n    * Update of README and PyPI package\n\n*v2019.11.6*\n    * Update of internal documentation and string formatting\n\n*v2019.8.15*\n    * Change of version number scheme to CalVer\n    * Improvement of Exp4\n    * Update of read_SOFA_file\n    * Update of 2D plotting functions\n    * Improvement of write_SSR_IRs\n    * Improved environment setup for jupyter notebook\n    * Update of miro_to_struct\n\n*2019-07-30 v0.9*\n    * Implement SOFA import\n    * Update Exp4 to contain SOFA import\n    * Delete obsolete Exp3\n    * Add named tuple HRIRSignal\n    * Implement cart2sph and sph2cart utility functions\n    * Add conda environment file for convenient installation of required packages\n\n*2019-07-11 v0.8*\n    * Implement Spherical Harmonics coefficients tapering\n    * Adaption of associated Spherical Head Filter\n\n*2019-06-17 v0.7*\n    * Implement Bandwidth Extension for Microphone Arrays (BEMA)\n    * Edit read_miro_struct, named tuple ArraySignal and miro_to_struct.m to load center measurements\n\n*2019-06-11 v0.6*\n    * Port of Radial Filter Improvement from SOFiA\n\n*2019-05-23 v0.5*\n    * Implement Spherical Head Filter\n    * Implement Spherical Fourier Transform using pseudo-inverse\n    * Extract real time capable Spatial Fourier Transform\n    * Outsource reversed m index function (Exp4)\n\n\nReferences\n----------\n\nThe *sound_field_analysis* toolbox is based on the Matlab/C++ `Sound Field Analysis Toolbox (SOFiA) toolbox`_ by\nBenjamin Bernsch\u00fctz. For more information you may refer to the original publication:\n\n[1] `Bernsch\u00fctz, B., P\u00f6rschmann, C., Spors, S., and Weinzierl, S. (2011). SOFiA Sound Field Analysis Toolbox.\nProceedings of the ICSA International Conference on Spatial Audio <http://spatialaudio\n.net/sofia-sound-field-analysis-toolbox-2/>`_\n\nThe Lebedev grid generation was adapted from an implementation by `Richard P. Muller <https://github\n.com/gabrielelanaro/pyquante/blob/master/Data/lebedev_write.py>`_.\n\n.. _Sound Field Analysis Toolbox (SOFiA) toolbox: http://audiogroup.web.th-koeln.de/SOFiA_wiki/WELCOME.html\n.. _RETiSAR: https://github.com/AppliedAcousticsChalmers/ReTiSAR\n.. _[1]: #references\n.. _NumPy: http://www.numpy.org\n.. _SciPy: http://www.scipy.org\n.. _Pysofaconventions: https://github.com/andresperezlopez/pysofaconventions\n.. _Jupyter: https://jupyter.org/\n.. _Plotly: https://plot.ly/python/\n.. _Conda: https://www.continuum.io/downloads\n.. _conda-forge: https://conda-forge.github.io\n.. _GitHub: examples/\n.. _nbviewer: http://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/tree/master/examples/\n.. _SOFA: https://www.sofaconventions.org/mediawiki/index.php/SOFA_(Spatially_Oriented_Format_for_Acoustics)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AppliedAcousticsChalmers/sound_field_analysis-py/", "keywords": "sound field analysis spherical microphone array", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "sound-field-analysis", "package_url": "https://pypi.org/project/sound-field-analysis/", "platform": "", "project_url": "https://pypi.org/project/sound-field-analysis/", "project_urls": {"Homepage": "https://github.com/AppliedAcousticsChalmers/sound_field_analysis-py/"}, "release_url": "https://pypi.org/project/sound-field-analysis/2020.1.30/", "requires_dist": ["scipy", "numpy", "pysofaconventions", "jupyter ; extra == 'examples'", "plotly ; extra == 'plotting'"], "requires_python": ">=3.7", "summary": "Analyze, visualize and process sound field data recorded by spherical microphone arrays.", "version": "2020.1.30", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://api.travis-ci.org/QULab/sound_field_analysis-py.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86a3c16f2418a9a645eb2540a48e1a346d7fd17f/68747470733a2f2f6170692e7472617669732d63692e6f72672f51554c61622f736f756e645f6669656c645f616e616c797369732d70792e737667\">\n<img alt=\"https://ci.appveyor.com/api/projects/status/u0koxo5vcitmbghc?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66ed552bdc04c2dcac957605a2d99683894c502c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f75306b6f786f35766369746d626768633f7376673d74727565\">\n<p>The <em>sound_field_analysis</em> toolbox (short: <em>sfa</em>) is a Python port of the <a href=\"http://audiogroup.web.th-koeln.de/SOFiA_wiki/WELCOME.html\" rel=\"nofollow\">Sound Field Analysis\nToolbox (SOFiA) toolbox</a>, originally by Benjamin Bernsch\u00fctz <a href=\"#references\" rel=\"nofollow\">[1]</a>. The main goal of the <em>sfa</em>\ntoolbox is to analyze, visualize and process sound field data recorded by spherical microphone\narrays. Furthermore, various types of test-data may be generated to evaluate the implemented\nfunctions. It is an essential building block of <a href=\"https://github.com/AppliedAcousticsChalmers/ReTiSAR\" rel=\"nofollow\">ReTiSAR</a>, an implementation  of real time\nbinaural rendering of spherical microphone array data.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>We use Python 3.7 for development. Chances are that earlier version will work too but this is currently untested.</p>\n<p>The following external libraries are required:</p>\n<ul>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">NumPy</a></li>\n<li><a href=\"http://www.scipy.org\" rel=\"nofollow\">SciPy</a></li>\n<li><a href=\"https://github.com/andresperezlopez/pysofaconventions\" rel=\"nofollow\">Pysofaconventions</a></li>\n<li><a href=\"https://jupyter.org/\" rel=\"nofollow\">Jupyter</a> (for running <em>Notebooks</em> locally)</li>\n<li><a href=\"https://plot.ly/python/\" rel=\"nofollow\">Plotly</a> (for plotting)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For performance and convenience reasons we highly recommend to use <a href=\"https://www.continuum.io/downloads\" rel=\"nofollow\">Conda</a> (miniconda for simplicity) to manage your Python installation. Once installed, you can use the following steps to receive and use <em>sfa</em>, depending on your use case:</p>\n<ol>\n<li><p>From PyPI:</p>\n<p>Install into an existing environment (without example <em>Jupyter Notebooks</em>):\n<tt>pip install sound_field_analysis</tt></p>\n</li>\n<li><p>By cloning (or downloading) the repository and setting up a new environment:</p>\n<p><tt>git clone <span class=\"pre\">https://github.com/AppliedAcousticsChalmers/sound_field_analysis-py.git</span></tt></p>\n<p><tt>cd <span class=\"pre\">sound_field_analysis-py/</span></tt></p>\n<p>Create a new Conda environment from the specified requirements:\n<tt>conda env create <span class=\"pre\">--file</span> environment.yml</tt></p>\n<p>Activate the environment:\n<tt>source activate sfa</tt></p>\n<p><strong>Optional:</strong> Install additional requirements in case you want to locally run the <em>Jupyter Notebooks</em> with examples:\n<tt>conda env update <span class=\"pre\">--file</span> environment_jupyter.yml</tt></p>\n</li>\n</ol>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Find the full documentation at <a href=\"https://appliedacousticschalmers.github.io/sound_field_analysis-py/\" rel=\"nofollow\">https://appliedacousticschalmers.github.io/sound_field_analysis-py/</a>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The following examples are available as Jupyter notebooks, either statically on <a href=\"examples/\" rel=\"nofollow\">GitHub</a> or interactively on\n<a href=\"http://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/tree/master/examples/\" rel=\"nofollow\">nbviewer</a>. You can of course also simply download the examples and run them locally!</p>\n<div id=\"exp1-ideal-plane-wave\">\n<h3>Exp1: Ideal plane wave</h3>\n<p>Ideal unity plane wave simulation and 3D plot.</p>\n<p><a href=\"https://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp1_IdealPlaneWave.ipynb\" rel=\"nofollow\">View interactively on nbviewer</a></p>\n<p><a href=\"https://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp1_IdealPlaneWave.ipynb\" rel=\"nofollow\"><img alt=\"AE1_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0cade242481eba08df599adefb2c5efa732e243/6578616d706c65732f696d672f4145315f73686170652e706e673f7261773d74727565\"></a></p>\n</div>\n<div id=\"exp2-measured-plane-wave\">\n<h3>Exp2: Measured plane wave</h3>\n<p>A measured plane wave from AZ=180\u00b0, EL=90\u00b0 in the anechoic chamber using a cardioid mic.</p>\n<p><a href=\"https://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp2_MeasuredWave.ipynb\" rel=\"nofollow\">View interactively on nbviewer</a></p>\n<p><a href=\"https://nbviewer.jupyterorg/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp2_MeasuredWave.ipynb\" rel=\"nofollow\"><img alt=\"AE3_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a788b430aeec0c9d30b2bc6c72325c126db4bbb4/6578616d706c65732f696d672f4145335f73686170652e706e673f7261773d74727565\"></a></p>\n<div id=\"exp4-binaural-rendering\">\n<h4>Exp4: Binaural rendering</h4>\n<p>Render a spherical microphone array impulse response measurement binaurally. The example shows examples for loading\nmiro or <a href=\"https://www.sofaconventions.org/mediawiki/index.php/SOFA_(Spatially_Oriented_Format_for_Acoustics)\" rel=\"nofollow\">SOFA</a> files.</p>\n<p><a href=\"https://nbviewer.jupyter.org/github/AppliedAcousticsChalmers/sound_field_analysis-py/blob/master/examples/Exp4_BinauralRendering.ipynb\" rel=\"nofollow\">View interactively on nbviewer</a></p>\n</div>\n</div>\n</div>\n<div id=\"version-history\">\n<h2>Version history</h2>\n<dl>\n<dt><em>v2020.1.30</em></dt>\n<dd><ul>\n<li>Update of README and PyPI package</li>\n</ul>\n</dd>\n<dt><em>v2019.11.6</em></dt>\n<dd><ul>\n<li>Update of internal documentation and string formatting</li>\n</ul>\n</dd>\n<dt><em>v2019.8.15</em></dt>\n<dd><ul>\n<li>Change of version number scheme to CalVer</li>\n<li>Improvement of Exp4</li>\n<li>Update of read_SOFA_file</li>\n<li>Update of 2D plotting functions</li>\n<li>Improvement of write_SSR_IRs</li>\n<li>Improved environment setup for jupyter notebook</li>\n<li>Update of miro_to_struct</li>\n</ul>\n</dd>\n<dt><em>2019-07-30 v0.9</em></dt>\n<dd><ul>\n<li>Implement SOFA import</li>\n<li>Update Exp4 to contain SOFA import</li>\n<li>Delete obsolete Exp3</li>\n<li>Add named tuple HRIRSignal</li>\n<li>Implement cart2sph and sph2cart utility functions</li>\n<li>Add conda environment file for convenient installation of required packages</li>\n</ul>\n</dd>\n<dt><em>2019-07-11 v0.8</em></dt>\n<dd><ul>\n<li>Implement Spherical Harmonics coefficients tapering</li>\n<li>Adaption of associated Spherical Head Filter</li>\n</ul>\n</dd>\n<dt><em>2019-06-17 v0.7</em></dt>\n<dd><ul>\n<li>Implement Bandwidth Extension for Microphone Arrays (BEMA)</li>\n<li>Edit read_miro_struct, named tuple ArraySignal and miro_to_struct.m to load center measurements</li>\n</ul>\n</dd>\n<dt><em>2019-06-11 v0.6</em></dt>\n<dd><ul>\n<li>Port of Radial Filter Improvement from SOFiA</li>\n</ul>\n</dd>\n<dt><em>2019-05-23 v0.5</em></dt>\n<dd><ul>\n<li>Implement Spherical Head Filter</li>\n<li>Implement Spherical Fourier Transform using pseudo-inverse</li>\n<li>Extract real time capable Spatial Fourier Transform</li>\n<li>Outsource reversed m index function (Exp4)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>The <em>sound_field_analysis</em> toolbox is based on the Matlab/C++ <a href=\"http://audiogroup.web.th-koeln.de/SOFiA_wiki/WELCOME.html\" rel=\"nofollow\">Sound Field Analysis Toolbox (SOFiA) toolbox</a> by\nBenjamin Bernsch\u00fctz. For more information you may refer to the original publication:</p>\n<p>[1] <a href=\"http://spatialaudio.net/sofia-sound-field-analysis-toolbox-2/\" rel=\"nofollow\">Bernsch\u00fctz, B., P\u00f6rschmann, C., Spors, S., and Weinzierl, S. (2011). SOFiA Sound Field Analysis Toolbox.\nProceedings of the ICSA International Conference on Spatial Audio</a></p>\n<p>The Lebedev grid generation was adapted from an implementation by <a href=\"https://github.com/gabrielelanaro/pyquante/blob/master/Data/lebedev_write.py\" rel=\"nofollow\">Richard P. Muller</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6543232, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "4e744c193ce560bc7ccfbe38cf55294f", "sha256": "6aa0b31a0ae4f88121cdc7225b61f0a4f0f1da75a5d87d74dd62f92d4b586517"}, "downloads": -1, "filename": "sound_field_analysis-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "4e744c193ce560bc7ccfbe38cf55294f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24637, "upload_time": "2016-08-09T13:12:28", "upload_time_iso_8601": "2016-08-09T13:12:28.601670Z", "url": "https://files.pythonhosted.org/packages/8a/8d/78bd7f764c78858c8192b636a41992f8d2fd16d943464c266bf7359cd1a9/sound_field_analysis-0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4e06256261835b893ee9da1d108e4f9", "sha256": "b159c27ea0ac15962bb596172827eddacf492298b78580b21e9587c1ea2436ac"}, "downloads": -1, "filename": "sound_field_analysis-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "c4e06256261835b893ee9da1d108e4f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22036, "upload_time": "2016-08-09T13:12:31", "upload_time_iso_8601": "2016-08-09T13:12:31.128236Z", "url": "https://files.pythonhosted.org/packages/a5/f8/aa5ad92e34ff5a7e476b899a2c4eaff25dce26ead54d2657c31ccdd58e27/sound_field_analysis-0.1.dev0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e333853d853b7dfce837418fcadf60df", "sha256": "af75e3aaf28abca3ddad0d4889038d87e0efcf041845ca1d3604f401db3766cc"}, "downloads": -1, "filename": "sound_field_analysis-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e333853d853b7dfce837418fcadf60df", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 25405, "upload_time": "2016-11-01T11:45:10", "upload_time_iso_8601": "2016-11-01T11:45:10.530327Z", "url": "https://files.pythonhosted.org/packages/a3/97/ae119f03a353aca3de884c5cfee9340af38a24e7e80ee54af1186709adcb/sound_field_analysis-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fb0c92ae98f7eb4832855d62c8fa5c1", "sha256": "f8d52d3b67fff6d9a92508552e698dadb0100d202f2d6805356007a9dcdaae4f"}, "downloads": -1, "filename": "sound_field_analysis-0.2.tar.gz", "has_sig": false, "md5_digest": "0fb0c92ae98f7eb4832855d62c8fa5c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22480, "upload_time": "2016-11-01T11:44:54", "upload_time_iso_8601": "2016-11-01T11:44:54.366764Z", "url": "https://files.pythonhosted.org/packages/fd/c1/c3ba5d907a89e02798449b76e7d8f4f949dbdc5b2f9a473c5ad06c72376f/sound_field_analysis-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "615d05e826a97b2c9e3f8c1717ba4461", "sha256": "537b2a8f8733fee7b2b2f273600c62d95b5156d98c6ede656a09d218f3ab952b"}, "downloads": -1, "filename": "sound_field_analysis-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "615d05e826a97b2c9e3f8c1717ba4461", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28167, "upload_time": "2017-02-20T18:24:44", "upload_time_iso_8601": "2017-02-20T18:24:44.013400Z", "url": "https://files.pythonhosted.org/packages/ee/07/ab9fde133c248a05e435c97a72260a7314cb5167ec37bc6b3e54b4d217e3/sound_field_analysis-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa2e5ff7c4d02ae30eccabdec2a19c4f", "sha256": "7a5887e94e268c2bb63b141b811f68c2a94d11692a6817e310c92d919500fe07"}, "downloads": -1, "filename": "sound_field_analysis-0.3.tar.gz", "has_sig": false, "md5_digest": "fa2e5ff7c4d02ae30eccabdec2a19c4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29957, "upload_time": "2017-02-20T18:24:46", "upload_time_iso_8601": "2017-02-20T18:24:46.365763Z", "url": "https://files.pythonhosted.org/packages/05/b0/c69a8b8eaa470f77c1cad490a58677acb47bc5e73ecfbc3d45092974a5dc/sound_field_analysis-0.3.tar.gz", "yanked": false}], "2020.1.30": [{"comment_text": "", "digests": {"md5": "34f03bd880e2aa24e8cb69a5fabc7087", "sha256": "e0bf15abb5e86fb67b2b52442d12f62830dbcac64ee8bceb1ab549e142a8a9d8"}, "downloads": -1, "filename": "sound_field_analysis-2020.1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "34f03bd880e2aa24e8cb69a5fabc7087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37733, "upload_time": "2020-01-30T12:41:45", "upload_time_iso_8601": "2020-01-30T12:41:45.429823Z", "url": "https://files.pythonhosted.org/packages/65/0e/f80922673b3e181823d60903b01f09230e382d0301b89a88f9f5fa6c3a86/sound_field_analysis-2020.1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99598761f366e7aa76b8903d50d93c35", "sha256": "3cd7a98913f9489aa2900a14a97ed8b3b56cb827b66fe60b3dc41a77bfc5d97a"}, "downloads": -1, "filename": "sound_field_analysis-2020.1.30.tar.gz", "has_sig": false, "md5_digest": "99598761f366e7aa76b8903d50d93c35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 43488, "upload_time": "2020-01-30T12:41:47", "upload_time_iso_8601": "2020-01-30T12:41:47.303651Z", "url": "https://files.pythonhosted.org/packages/42/f7/d9a009d73c7619a6d55db2886a94b3cf48053532324836cae79c17f08a9f/sound_field_analysis-2020.1.30.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34f03bd880e2aa24e8cb69a5fabc7087", "sha256": "e0bf15abb5e86fb67b2b52442d12f62830dbcac64ee8bceb1ab549e142a8a9d8"}, "downloads": -1, "filename": "sound_field_analysis-2020.1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "34f03bd880e2aa24e8cb69a5fabc7087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37733, "upload_time": "2020-01-30T12:41:45", "upload_time_iso_8601": "2020-01-30T12:41:45.429823Z", "url": "https://files.pythonhosted.org/packages/65/0e/f80922673b3e181823d60903b01f09230e382d0301b89a88f9f5fa6c3a86/sound_field_analysis-2020.1.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99598761f366e7aa76b8903d50d93c35", "sha256": "3cd7a98913f9489aa2900a14a97ed8b3b56cb827b66fe60b3dc41a77bfc5d97a"}, "downloads": -1, "filename": "sound_field_analysis-2020.1.30.tar.gz", "has_sig": false, "md5_digest": "99598761f366e7aa76b8903d50d93c35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 43488, "upload_time": "2020-01-30T12:41:47", "upload_time_iso_8601": "2020-01-30T12:41:47.303651Z", "url": "https://files.pythonhosted.org/packages/42/f7/d9a009d73c7619a6d55db2886a94b3cf48053532324836cae79c17f08a9f/sound_field_analysis-2020.1.30.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:21 2020"}