{"info": {"author": "Matt GdV", "author_email": "matthewgdv@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 3.8"], "description": "PLEASE NOTE:\n====================\n\nThis library is currently still under development. The API will likely undergo significant changes that may break any code you write with it.\nThe documentation will fall out of sync with the updates regularly until development slows down. Use it at your own risk.\n\nOverview\n====================\n\nProvides several utilities for handling I/O:\n\nThe `IOHandler` class\n--------------------\n\n* Api similar to `argparse.ArgumentParser()`. Must be used as a context manager, and while in scope the `Argument.add()` method will act equivalent to `ArgumentParser.add_argument()`.\n* `IOHandler.process()` (equivalent to `ArgumentParser.parse_args()`) returns a `subtypes.Dict_` holding the argument values if no callback is provided to the `IOHandler()`\n  constructor, otherwise it passes on the return value of the callback function, which will be passed a `Dict_` as its single positional argument.\n* Has various run-modes (in the provided `RunMode` `Enum`) `RunMode.SMART` will attempt to choose the appropriate run-mode for the situation.\n* Under `RunMode.COMMANDLINE` argparse is used under-the-hood to process the `sys.argv` arguments, but with additional features and custom-built help interface that is more\n  readable (and way prettier!)\n* Under `RunMode.GUI`, it will programatically build a GUI to collect user input, with widgets picked based on the 'argtype' argument of `Argument()`. The argument defaults can be\n  overriden at point-in-time by passing a `dict` of argument name-value pairs directly to `IOHandler.process()`. Further calls to `IOHandler.process()` will still have the base\n  defaults\n* Under `RunMode.PROGRAMMATIC`, the argument values can be passed directly to `IOHandler.process()` as a `dict` of argument name-value pairs\n* `IOHandler.add_subhandler()` will add a new subhandler which will act as a subcommand under `RunMode.COMMANDLINE`, and will act as a tabbed sheet under `RunMode.GUI`. The handlers\n  exist in a hierarchy, meaning that arguments passed to all parents on the way to the lowest child sheet (on the gui) or final used subcommand (in the commandline) are still handled.\n\n\nThe `Argument` class\n--------------------\n\n* The `Argument()` constructor arguments tell the IOHandler how to handle nullability, default values, implicit coercion to the right type, whether the argument is optional,\n  commandline aliases, conditions, dependencies, etc.\n* An `ArgType` `Enum` is provided to be passed to the `Argument(argtype=)` constructor argument. This will let the `IOHandler` perform type checking and coercion. Currently the\n  recognized types are:\n\n    | member    | with IOHandler(subtypes=True) | with IOHandler(subtypes=False)                        |\n    | --------- | ----------------------------- | ----------------------------------------------------- |\n    | STRING    | subtypes.Str                  | str                                                   |\n    | INTEGER   | int                           | int                                                   |\n    | FLOAT     | float                         | float                                                 |\n    | DECIMAL   | decimal.Decimal               | decimal.Decimal                                       |\n    | BOOLEAN   | bool                          | bool                                                  |\n    | LIST      | subtypes.List_                | list                                                  |\n    | DICT      | subtypes.Dict_                | dict                                                  |\n    | SET       | set                           | set                                                   |\n    | PATH      | pathlib.Path                  | pathlib.Path                                          |\n    | FILE      | pathmagic.File                | pathmagic.File                                        |\n    | DIR       | pathmagic.Dir                 | pathmagic.Dir                                         |\n    | DATETIME  | subtypes.DateTime             | datetime.datetime                                     |\n    | FRAME     | subtypes.Frame                | pandas.DataFrame                                      |\n\n\nThe `Validate` class\n--------------------\n\n* An accessor class granting access to several Validator classes through attribute access.\n* Currently supports type checking and implicit coercion of the input value to the following supported types (`int`, `float`, `bool`, `str`, `list`, `set`, `dict`,\n  `subtypes.DateTime`, `pathlib.Path`, `pathmagic.File`, `pathmagic.Dir`)\n* Its attributes are: `Validate.Int`, `Validate.Float`, `Validate.Bool`, `Validate.Str`, `Validate.List`, `Validate.Set`, `Validate.Dict`, `Validate.DateTime`, `Validate.Path`,\n  `Validate.File`, `Validate.Dir`\n\nThe `Validator` classes\n--------------------\n\n* Currently there are `IntegerValidator`, `FloatValidator`, `BoolValidator`, `StringValidator`, `ListValidator`, `SetValidator`, `DictionaryValidator`, `DateTimeValidator`,\n  `PathValidator`, `FileValidator`, `DirValidator`\n* Some of these validators are implemented as a wrapper over typepy, but the api is different.\n* Validators can handle nullability as desired.\n* Some validators have additional validation methods to check for values in valid ranges. For example: `Validate.Int().max_value(7).is_valid(9)` would return False.\n* Additional conditions can be added to a validator by passing callbacks that return boolean values to `Validator.add_condition()`\n* The validator can be reused for any number of values once initially set up.\n* `ListValidator` and `DictionaryValidator` will coerce strings by using eval (safely), rather than coercing a string to a list by calling `list()` on it\n\nThe `Gui` class and its various template subclasses\n--------------------\n\n* Gui class and several template subclasses that can be used alongside the various `WidgetManager` objects to easily set up a GUI, with the exact internals of the\n  underlying QT classes abstracted away behind a consistent API. Makes it very quick and easy to set up a simple GUI. Is a thin wrapper around PyQt5.\n* `ThreePartGui` class for quickly setting up Horizontal-Vertical-Horizontal guis\n* `HTMLGui` class for Rendering HTML in a separate window\n\nThe `WidgetManager` class and its various widget subclasses\n--------------------\n\n* Currently supports the following widgets: `Label`, `Button`, `Checkbox`, `CheckBar`, `DropDown`, `Entry`, `Text`, `FileSelect`, `DirSelect`, `Calendar`, `DateTimeEdit`,\n  `HtmlDisplay`, `ProgressBar`, `Table`, `ListTable`, `DictTable`, `WidgetFrame`, `HorizontalFrame`, `VerticalFrame`\n* Have a consistent API primarily using the properties `WidgetManager.active`, `WidgetManager.state`, `WidgetManager.text`, and `WidgetManager.parent`.\n\nThe `Console` class\n--------------------\n\n* Offer choices inveractively on the console, allowing navigation using arrow keys\n* Supports multi-select\n* Offer YES/NO\n* Hide/show console\n* Clear existing lines from console\n\nThe `Script` class\n--------------------\n\n* Uses a metaclass that wraps every method and the methods of inner classes (recursively) in a profiler, showing duration, arguments, and return value of each method call,\n  and a `repr()` of the script object\n* Writes this profiling information and `print()` statements to a log file\n* Upon exiting the constructor, optionally serializes the object to the same directory as the log\n* Any `**kwargs` passed to the constructor are stored in the `Script.arguments` attribute\n* The `Script.name` attribute is automatically set to the name of the file the class is defined in\n* For use with `IOHandler`, the `Script.run_mode` attribute is automatically 'smart' by default, but can be overriden by setting it as a class attribute\n\nThe `Cache` class\n--------------------\n\n* Serializes any python object that can be pickled by Dill into a file\n* Interface similar to a `dict` for interacting with the items in the cache: `Cache.put()`, `Cache.get()`, `Cache.pop()`, and `Cache.setdefault()`\n\nThe `Serializer` class\n--------------------\n\n* Serialize/deserialize any object that is pickleable by Dill\n* Discard unpickleable attributes recursively and replace them with `LostObject` instances\n\nThe `Secrets` class\n--------------------\n\n* Serialize, then encrypt any python object and write it to a file and vice-versa.\n* Encryption key must be set before first use. It will be persisted to a json config file at an os-appropriate appdir.\n\n\nInstallation\n====================\n\nTo install use pip:\n\n    $ pip install pyiotools\n\n\nOr clone the repo:\n\n    $ git clone https://github.com/matthewgdv/iotools.git\n    $ python setup.py install\n\n\nUsage\n====================\n\nUsage examples coming soon.\n\nContributing\n====================\n\nContributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.\n\nYou can contribute in many ways:\n\nReport Bugs\n--------------------\n\nReport bugs at https://github.com/matthewgdv/iotools/issues\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting.\n* Detailed steps to reproduce the bug.\n\nFix Bugs\n--------------------\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.\n\nImplement Features\n--------------------\n\nLook through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.\n\nWrite Documentation\n--------------------\n\nThe repository could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.\n\nSubmit Feedback\n--------------------\n\nThe best way to send feedback is to file an issue at https://github.com/matthewgdv/iotools/issues.\n\nIf you are proposing a new feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions are welcome :)\n\nGet Started!\n--------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n1.  If the pull request adds functionality, it should include tests and the docs should be updated. Write docstrings for any functions that are part of the external API, and add\n    the feature to the README.md.\n\n2.  If the pull request fixes a bug, tests should be added proving that the bug has been fixed. However, no update to the docs is necessary for bugfixes.\n\n3.  The pull request should work for the newest version of Python (currently 3.7). Older versions may incidentally work, but are not officially supported.\n\n4.  Inline type hints should be used, with an emphasis on ensuring that introspection and autocompletion tools such as Jedi are able to understand the code wherever possible.\n\n5.  PEP8 guidelines should be followed where possible, but deviations from it where it makes sense and improves legibility are encouraged. The following PEP8 error codes can be\n    safely ignored: E121, E123, E126, E226, E24, E704, W503\n\n6.  This repository intentionally disallows the PEP8 79-character limit. Therefore, any contributions adhering to this convention will be rejected. As a rule of thumb you should\n    endeavor to stay under 200 characters except where going over preserves alignment, or where the line is mostly non-algorythmic code, such as extremely long strings or function\n    calls.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matthewgdv/iotools", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyiotools", "package_url": "https://pypi.org/project/pyiotools/", "platform": "", "project_url": "https://pypi.org/project/pyiotools/", "project_urls": {"Homepage": "https://github.com/matthewgdv/iotools"}, "release_url": "https://pypi.org/project/pyiotools/0.3.7/", "requires_dist": ["dill", "cryptography", "cursor", "readchar", "colorama", "infi.systray", "PyQt5", "maybe-else", "pandas", "pathmagic", "pymiscutils", "pysubtypes", "typepy"], "requires_python": "", "summary": "Provides several utilities for handling I/O", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PLEASE NOTE:</h1>\n<p>This library is currently still under development. The API will likely undergo significant changes that may break any code you write with it.\nThe documentation will fall out of sync with the updates regularly until development slows down. Use it at your own risk.</p>\n<h1>Overview</h1>\n<p>Provides several utilities for handling I/O:</p>\n<h2>The <code>IOHandler</code> class</h2>\n<ul>\n<li>Api similar to <code>argparse.ArgumentParser()</code>. Must be used as a context manager, and while in scope the <code>Argument.add()</code> method will act equivalent to <code>ArgumentParser.add_argument()</code>.</li>\n<li><code>IOHandler.process()</code> (equivalent to <code>ArgumentParser.parse_args()</code>) returns a <code>subtypes.Dict_</code> holding the argument values if no callback is provided to the <code>IOHandler()</code>\nconstructor, otherwise it passes on the return value of the callback function, which will be passed a <code>Dict_</code> as its single positional argument.</li>\n<li>Has various run-modes (in the provided <code>RunMode</code> <code>Enum</code>) <code>RunMode.SMART</code> will attempt to choose the appropriate run-mode for the situation.</li>\n<li>Under <code>RunMode.COMMANDLINE</code> argparse is used under-the-hood to process the <code>sys.argv</code> arguments, but with additional features and custom-built help interface that is more\nreadable (and way prettier!)</li>\n<li>Under <code>RunMode.GUI</code>, it will programatically build a GUI to collect user input, with widgets picked based on the 'argtype' argument of <code>Argument()</code>. The argument defaults can be\noverriden at point-in-time by passing a <code>dict</code> of argument name-value pairs directly to <code>IOHandler.process()</code>. Further calls to <code>IOHandler.process()</code> will still have the base\ndefaults</li>\n<li>Under <code>RunMode.PROGRAMMATIC</code>, the argument values can be passed directly to <code>IOHandler.process()</code> as a <code>dict</code> of argument name-value pairs</li>\n<li><code>IOHandler.add_subhandler()</code> will add a new subhandler which will act as a subcommand under <code>RunMode.COMMANDLINE</code>, and will act as a tabbed sheet under <code>RunMode.GUI</code>. The handlers\nexist in a hierarchy, meaning that arguments passed to all parents on the way to the lowest child sheet (on the gui) or final used subcommand (in the commandline) are still handled.</li>\n</ul>\n<h2>The <code>Argument</code> class</h2>\n<ul>\n<li>\n<p>The <code>Argument()</code> constructor arguments tell the IOHandler how to handle nullability, default values, implicit coercion to the right type, whether the argument is optional,\ncommandline aliases, conditions, dependencies, etc.</p>\n</li>\n<li>\n<p>An <code>ArgType</code> <code>Enum</code> is provided to be passed to the <code>Argument(argtype=)</code> constructor argument. This will let the <code>IOHandler</code> perform type checking and coercion. Currently the\nrecognized types are:</p>\n<table>\n<thead>\n<tr>\n<th>member</th>\n<th>with IOHandler(subtypes=True)</th>\n<th>with IOHandler(subtypes=False)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>STRING</td>\n<td>subtypes.Str</td>\n<td>str</td>\n</tr>\n<tr>\n<td>INTEGER</td>\n<td>int</td>\n<td>int</td>\n</tr>\n<tr>\n<td>FLOAT</td>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>DECIMAL</td>\n<td>decimal.Decimal</td>\n<td>decimal.Decimal</td>\n</tr>\n<tr>\n<td>BOOLEAN</td>\n<td>bool</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>LIST</td>\n<td>subtypes.List_</td>\n<td>list</td>\n</tr>\n<tr>\n<td>DICT</td>\n<td>subtypes.Dict_</td>\n<td>dict</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>set</td>\n<td>set</td>\n</tr>\n<tr>\n<td>PATH</td>\n<td>pathlib.Path</td>\n<td>pathlib.Path</td>\n</tr>\n<tr>\n<td>FILE</td>\n<td>pathmagic.File</td>\n<td>pathmagic.File</td>\n</tr>\n<tr>\n<td>DIR</td>\n<td>pathmagic.Dir</td>\n<td>pathmagic.Dir</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>subtypes.DateTime</td>\n<td>datetime.datetime</td>\n</tr>\n<tr>\n<td>FRAME</td>\n<td>subtypes.Frame</td>\n<td>pandas.DataFrame</td>\n</tr></tbody></table>\n</li>\n</ul>\n<h2>The <code>Validate</code> class</h2>\n<ul>\n<li>An accessor class granting access to several Validator classes through attribute access.</li>\n<li>Currently supports type checking and implicit coercion of the input value to the following supported types (<code>int</code>, <code>float</code>, <code>bool</code>, <code>str</code>, <code>list</code>, <code>set</code>, <code>dict</code>,\n<code>subtypes.DateTime</code>, <code>pathlib.Path</code>, <code>pathmagic.File</code>, <code>pathmagic.Dir</code>)</li>\n<li>Its attributes are: <code>Validate.Int</code>, <code>Validate.Float</code>, <code>Validate.Bool</code>, <code>Validate.Str</code>, <code>Validate.List</code>, <code>Validate.Set</code>, <code>Validate.Dict</code>, <code>Validate.DateTime</code>, <code>Validate.Path</code>,\n<code>Validate.File</code>, <code>Validate.Dir</code></li>\n</ul>\n<h2>The <code>Validator</code> classes</h2>\n<ul>\n<li>Currently there are <code>IntegerValidator</code>, <code>FloatValidator</code>, <code>BoolValidator</code>, <code>StringValidator</code>, <code>ListValidator</code>, <code>SetValidator</code>, <code>DictionaryValidator</code>, <code>DateTimeValidator</code>,\n<code>PathValidator</code>, <code>FileValidator</code>, <code>DirValidator</code></li>\n<li>Some of these validators are implemented as a wrapper over typepy, but the api is different.</li>\n<li>Validators can handle nullability as desired.</li>\n<li>Some validators have additional validation methods to check for values in valid ranges. For example: <code>Validate.Int().max_value(7).is_valid(9)</code> would return False.</li>\n<li>Additional conditions can be added to a validator by passing callbacks that return boolean values to <code>Validator.add_condition()</code></li>\n<li>The validator can be reused for any number of values once initially set up.</li>\n<li><code>ListValidator</code> and <code>DictionaryValidator</code> will coerce strings by using eval (safely), rather than coercing a string to a list by calling <code>list()</code> on it</li>\n</ul>\n<h2>The <code>Gui</code> class and its various template subclasses</h2>\n<ul>\n<li>Gui class and several template subclasses that can be used alongside the various <code>WidgetManager</code> objects to easily set up a GUI, with the exact internals of the\nunderlying QT classes abstracted away behind a consistent API. Makes it very quick and easy to set up a simple GUI. Is a thin wrapper around PyQt5.</li>\n<li><code>ThreePartGui</code> class for quickly setting up Horizontal-Vertical-Horizontal guis</li>\n<li><code>HTMLGui</code> class for Rendering HTML in a separate window</li>\n</ul>\n<h2>The <code>WidgetManager</code> class and its various widget subclasses</h2>\n<ul>\n<li>Currently supports the following widgets: <code>Label</code>, <code>Button</code>, <code>Checkbox</code>, <code>CheckBar</code>, <code>DropDown</code>, <code>Entry</code>, <code>Text</code>, <code>FileSelect</code>, <code>DirSelect</code>, <code>Calendar</code>, <code>DateTimeEdit</code>,\n<code>HtmlDisplay</code>, <code>ProgressBar</code>, <code>Table</code>, <code>ListTable</code>, <code>DictTable</code>, <code>WidgetFrame</code>, <code>HorizontalFrame</code>, <code>VerticalFrame</code></li>\n<li>Have a consistent API primarily using the properties <code>WidgetManager.active</code>, <code>WidgetManager.state</code>, <code>WidgetManager.text</code>, and <code>WidgetManager.parent</code>.</li>\n</ul>\n<h2>The <code>Console</code> class</h2>\n<ul>\n<li>Offer choices inveractively on the console, allowing navigation using arrow keys</li>\n<li>Supports multi-select</li>\n<li>Offer YES/NO</li>\n<li>Hide/show console</li>\n<li>Clear existing lines from console</li>\n</ul>\n<h2>The <code>Script</code> class</h2>\n<ul>\n<li>Uses a metaclass that wraps every method and the methods of inner classes (recursively) in a profiler, showing duration, arguments, and return value of each method call,\nand a <code>repr()</code> of the script object</li>\n<li>Writes this profiling information and <code>print()</code> statements to a log file</li>\n<li>Upon exiting the constructor, optionally serializes the object to the same directory as the log</li>\n<li>Any <code>**kwargs</code> passed to the constructor are stored in the <code>Script.arguments</code> attribute</li>\n<li>The <code>Script.name</code> attribute is automatically set to the name of the file the class is defined in</li>\n<li>For use with <code>IOHandler</code>, the <code>Script.run_mode</code> attribute is automatically 'smart' by default, but can be overriden by setting it as a class attribute</li>\n</ul>\n<h2>The <code>Cache</code> class</h2>\n<ul>\n<li>Serializes any python object that can be pickled by Dill into a file</li>\n<li>Interface similar to a <code>dict</code> for interacting with the items in the cache: <code>Cache.put()</code>, <code>Cache.get()</code>, <code>Cache.pop()</code>, and <code>Cache.setdefault()</code></li>\n</ul>\n<h2>The <code>Serializer</code> class</h2>\n<ul>\n<li>Serialize/deserialize any object that is pickleable by Dill</li>\n<li>Discard unpickleable attributes recursively and replace them with <code>LostObject</code> instances</li>\n</ul>\n<h2>The <code>Secrets</code> class</h2>\n<ul>\n<li>Serialize, then encrypt any python object and write it to a file and vice-versa.</li>\n<li>Encryption key must be set before first use. It will be persisted to a json config file at an os-appropriate appdir.</li>\n</ul>\n<h1>Installation</h1>\n<p>To install use pip:</p>\n<pre><code>$ pip install pyiotools\n</code></pre>\n<p>Or clone the repo:</p>\n<pre><code>$ git clone https://github.com/matthewgdv/iotools.git\n$ python setup.py install\n</code></pre>\n<h1>Usage</h1>\n<p>Usage examples coming soon.</p>\n<h1>Contributing</h1>\n<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>\n<p>You can contribute in many ways:</p>\n<h2>Report Bugs</h2>\n<p>Report bugs at <a href=\"https://github.com/matthewgdv/iotools/issues\" rel=\"nofollow\">https://github.com/matthewgdv/iotools/issues</a></p>\n<p>If you are reporting a bug, please include:</p>\n<ul>\n<li>Your operating system name and version.</li>\n<li>Any details about your local setup that might be helpful in troubleshooting.</li>\n<li>Detailed steps to reproduce the bug.</li>\n</ul>\n<h2>Fix Bugs</h2>\n<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>\n<h2>Implement Features</h2>\n<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>\n<h2>Write Documentation</h2>\n<p>The repository could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>\n<h2>Submit Feedback</h2>\n<p>The best way to send feedback is to file an issue at <a href=\"https://github.com/matthewgdv/iotools/issues\" rel=\"nofollow\">https://github.com/matthewgdv/iotools/issues</a>.</p>\n<p>If you are proposing a new feature:</p>\n<ul>\n<li>Explain in detail how it would work.</li>\n<li>Keep the scope as narrow as possible, to make it easier to implement.</li>\n<li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li>\n</ul>\n<h2>Get Started!</h2>\n<p>Before you submit a pull request, check that it meets these guidelines:</p>\n<ol>\n<li>\n<p>If the pull request adds functionality, it should include tests and the docs should be updated. Write docstrings for any functions that are part of the external API, and add\nthe feature to the README.md.</p>\n</li>\n<li>\n<p>If the pull request fixes a bug, tests should be added proving that the bug has been fixed. However, no update to the docs is necessary for bugfixes.</p>\n</li>\n<li>\n<p>The pull request should work for the newest version of Python (currently 3.7). Older versions may incidentally work, but are not officially supported.</p>\n</li>\n<li>\n<p>Inline type hints should be used, with an emphasis on ensuring that introspection and autocompletion tools such as Jedi are able to understand the code wherever possible.</p>\n</li>\n<li>\n<p>PEP8 guidelines should be followed where possible, but deviations from it where it makes sense and improves legibility are encouraged. The following PEP8 error codes can be\nsafely ignored: E121, E123, E126, E226, E24, E704, W503</p>\n</li>\n<li>\n<p>This repository intentionally disallows the PEP8 79-character limit. Therefore, any contributions adhering to this convention will be rejected. As a rule of thumb you should\nendeavor to stay under 200 characters except where going over preserves alignment, or where the line is mostly non-algorythmic code, such as extremely long strings or function\ncalls.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6805105, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "12ea05186c81423367c53513b3a191ec", "sha256": "c3997fd02d5316d2b97c93d37a56561c81df8dad0b6f097ebce2aac9eac70eed"}, "downloads": -1, "filename": "pyiotools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "12ea05186c81423367c53513b3a191ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19725, "upload_time": "2019-07-29T15:58:11", "upload_time_iso_8601": "2019-07-29T15:58:11.241071Z", "url": "https://files.pythonhosted.org/packages/e3/73/050363fecc1e52fc79330e0b57b684d2b964f9c2526179b77c387fd373fb/pyiotools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a4b7eaa49ad071d0c6cbda12d5839cf", "sha256": "a5d4382abf9148dfdb551a7a5100a4b19fff653afb0d1855e28b818cc189f7d3"}, "downloads": -1, "filename": "pyiotools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1a4b7eaa49ad071d0c6cbda12d5839cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18661, "upload_time": "2019-07-29T15:58:13", "upload_time_iso_8601": "2019-07-29T15:58:13.347362Z", "url": "https://files.pythonhosted.org/packages/ae/6a/55611558ff451e0904ed74d7785d358b1a64b3798003183d72895baa59c7/pyiotools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a1de775ffa91f748a8d2337f44a37c7f", "sha256": "985068a30d95d4012fef04638d17aabdbff622b0c1bc02a9f1c57019f04a8d33"}, "downloads": -1, "filename": "pyiotools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a1de775ffa91f748a8d2337f44a37c7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18303, "upload_time": "2019-10-11T11:00:28", "upload_time_iso_8601": "2019-10-11T11:00:28.921223Z", "url": "https://files.pythonhosted.org/packages/1c/3b/0ff5d9955e67fb46fc4ed98c676559938e778dad6ca50b557d439c974e2c/pyiotools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "925525185b5b22f1bc711baec5a96166", "sha256": "ecf967f05042563109c81b669a753471cc18b0e5a6b8259043cd2444ef388221"}, "downloads": -1, "filename": "pyiotools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "925525185b5b22f1bc711baec5a96166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18307, "upload_time": "2019-10-11T11:00:30", "upload_time_iso_8601": "2019-10-11T11:00:30.566684Z", "url": "https://files.pythonhosted.org/packages/8a/f9/cb0457f214a0f936da8357d52156ccc950d975674003ab2ef10000987ec1/pyiotools-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "eaa4854a5d85e62ca18afea5814916cc", "sha256": "139fb51f456a25158edecc515d28e0f5d0a2f0b38d6bce061f87832794661fec"}, "downloads": -1, "filename": "pyiotools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eaa4854a5d85e62ca18afea5814916cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38212, "upload_time": "2019-11-08T09:07:16", "upload_time_iso_8601": "2019-11-08T09:07:16.897862Z", "url": "https://files.pythonhosted.org/packages/6e/df/cdaa23db84aaabda9d8aba8b3244d9ce746a583861c06dc545910d067c43/pyiotools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c10c7dd687cfd04c9e9d3e66bbb83da", "sha256": "44d916ef73805474d86b77d998817a5ec313183cb4d7ee7d112c119b37b0b4c5"}, "downloads": -1, "filename": "pyiotools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7c10c7dd687cfd04c9e9d3e66bbb83da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35412, "upload_time": "2019-11-08T09:07:18", "upload_time_iso_8601": "2019-11-08T09:07:18.297973Z", "url": "https://files.pythonhosted.org/packages/cb/54/a48246401d71a6fcd9ea92a0cbf55b1ae7779a3ef671ddeda55e5faa1f00/pyiotools-0.1.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3f2847c76f3fdeac3f0848c94db3edbc", "sha256": "23e88e495b141911ebcc0ddc2ab2e1fde53578862df8ac59fab851eb078abb01"}, "downloads": -1, "filename": "pyiotools-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f2847c76f3fdeac3f0848c94db3edbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7001, "upload_time": "2019-11-21T17:18:19", "upload_time_iso_8601": "2019-11-21T17:18:19.873689Z", "url": "https://files.pythonhosted.org/packages/6d/a6/fa4e5f5a9795a41fd24902905727f1306b42ecd8db1dc00d3950b9b9b1ef/pyiotools-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4798aa04a62247115adc13557cd6c04b", "sha256": "445e7df7e6c75207c80147b53f8a2f5c2c659ca2c052095379520ce5d705c05b"}, "downloads": -1, "filename": "pyiotools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4798aa04a62247115adc13557cd6c04b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7664, "upload_time": "2019-11-21T17:18:21", "upload_time_iso_8601": "2019-11-21T17:18:21.259237Z", "url": "https://files.pythonhosted.org/packages/94/84/df1c72907adc99831443f8884617fb2ab4d35481e69132f172465d34a7e0/pyiotools-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7483a160d4df402addd6f67db86c5821", "sha256": "fdb435f284118c1f3f799edc85cb1adfc0797a2e31fdcbe91c3af7bcc3a9fc74"}, "downloads": -1, "filename": "pyiotools-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7483a160d4df402addd6f67db86c5821", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7001, "upload_time": "2019-11-22T13:25:09", "upload_time_iso_8601": "2019-11-22T13:25:09.345796Z", "url": "https://files.pythonhosted.org/packages/52/d1/bc000f9363a7a7e987612c0ab2f553472d64805c8d9556566de8cd1dc650/pyiotools-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e991b898ba2596238b3b76fa0bc2369", "sha256": "6fd2dda7e4b9ebe74a44be9c7f9bb64779116258157c3c35af95a8e226cc85dd"}, "downloads": -1, "filename": "pyiotools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2e991b898ba2596238b3b76fa0bc2369", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7664, "upload_time": "2019-11-22T13:25:10", "upload_time_iso_8601": "2019-11-22T13:25:10.711276Z", "url": "https://files.pythonhosted.org/packages/79/e9/db3eeabeffc7ff3f776431a6c8794da2066f1a4faf852262478d7d2b4ccf/pyiotools-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "0009ef8b4122eaa70d78a791d02148db", "sha256": "ad48566ae1e5a699833510d2b7e3e8a5ced02d215df496ddac2880a68918060c"}, "downloads": -1, "filename": "pyiotools-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0009ef8b4122eaa70d78a791d02148db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7000, "upload_time": "2019-11-22T16:57:21", "upload_time_iso_8601": "2019-11-22T16:57:21.513585Z", "url": "https://files.pythonhosted.org/packages/ee/f8/afa9438bc7d904536f74246083f9d7392d3a265d739d9f35acb81298ba35/pyiotools-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1710ba51669e73b2f395a5c1a31e2e3e", "sha256": "ccfe21fb1c4611f03ac68b66df3ff81e36ba2f54ff183240f6ff3718df3e453b"}, "downloads": -1, "filename": "pyiotools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "1710ba51669e73b2f395a5c1a31e2e3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7684, "upload_time": "2019-11-22T16:57:22", "upload_time_iso_8601": "2019-11-22T16:57:22.554303Z", "url": "https://files.pythonhosted.org/packages/93/17/54ad244d858619afcdf38c8948b6c1b0b82d61a6476af359dfcb7959cc73/pyiotools-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "1fa23931be1294cd2db110a6db2843ab", "sha256": "93e3c6f472c7c1b9672c98b602e0a33902e72ac58c72f308f4a0ef5bebaab696"}, "downloads": -1, "filename": "pyiotools-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1fa23931be1294cd2db110a6db2843ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7000, "upload_time": "2019-12-09T01:55:50", "upload_time_iso_8601": "2019-12-09T01:55:50.212560Z", "url": "https://files.pythonhosted.org/packages/3f/88/bac5274fad8a9eac6c7b5bc027c4ea599f512814ab714579c76c5265bfab/pyiotools-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "728ce47602d168dbc9fd7dddd1720e89", "sha256": "48b131f86071d067f9c4abc5e3deb7cf39b0e2729d93e209a756e297b9985114"}, "downloads": -1, "filename": "pyiotools-0.3.3.tar.gz", "has_sig": false, "md5_digest": "728ce47602d168dbc9fd7dddd1720e89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7663, "upload_time": "2019-12-09T01:55:52", "upload_time_iso_8601": "2019-12-09T01:55:52.314703Z", "url": "https://files.pythonhosted.org/packages/13/1d/a3ad64c09ef3d0a4e4c52b0a584c6e4b4d3614001a216bcae6f4d67fa779/pyiotools-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "0609073d2467d07c57e7750178a1d690", "sha256": "dc79dfe757afc03930b2bfe4b26db3774d1d347f5b9d51aab9463e4648783ae8"}, "downloads": -1, "filename": "pyiotools-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0609073d2467d07c57e7750178a1d690", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40879, "upload_time": "2020-01-19T12:51:54", "upload_time_iso_8601": "2020-01-19T12:51:54.150785Z", "url": "https://files.pythonhosted.org/packages/11/d9/874fec29bc01af58cac9570b2a21e186e02a4ce5ca1694c54d46c54de124/pyiotools-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd39839c530b7baf95543e1e92017727", "sha256": "acd8202a38cb93507372de5da2526af08d24a0f5bb4fa0a64be1a25d26c20838"}, "downloads": -1, "filename": "pyiotools-0.3.4.tar.gz", "has_sig": false, "md5_digest": "cd39839c530b7baf95543e1e92017727", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37976, "upload_time": "2020-01-19T12:51:55", "upload_time_iso_8601": "2020-01-19T12:51:55.714096Z", "url": "https://files.pythonhosted.org/packages/9c/cf/90f5b51cf167a8ccf1ebf5a8f0c65a1e472c455856a893fea48e7e5b2572/pyiotools-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "2cc5022445ffef8c4f6c7581b00ff5bc", "sha256": "197e77f7b243c2f2f11f648950551a880186cb2285defec9713217e831b321b1"}, "downloads": -1, "filename": "pyiotools-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2cc5022445ffef8c4f6c7581b00ff5bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41734, "upload_time": "2020-02-19T09:27:00", "upload_time_iso_8601": "2020-02-19T09:27:00.763689Z", "url": "https://files.pythonhosted.org/packages/f4/e6/73042895d4fbd0688e4ff02890c6d0ce52b93a11c852794e9720e305cf72/pyiotools-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "250e41cc16f14579d2ed043c4415792b", "sha256": "48541fd070641bb66324d41c59d9a7ff33d44e2d9492197cce572c47683e4b40"}, "downloads": -1, "filename": "pyiotools-0.3.5.tar.gz", "has_sig": false, "md5_digest": "250e41cc16f14579d2ed043c4415792b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38470, "upload_time": "2020-02-19T09:27:02", "upload_time_iso_8601": "2020-02-19T09:27:02.105779Z", "url": "https://files.pythonhosted.org/packages/81/16/39062445bf0b064856ff65c138aa1ba99b0aaa6647a14615165bbde20c15/pyiotools-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "1b01bc3826cd64a38115adfe14b04c4b", "sha256": "4bf5bdf7e75ce8ddb795f6443d7b0298a4c32e44798578a17431af25b0d510ee"}, "downloads": -1, "filename": "pyiotools-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1b01bc3826cd64a38115adfe14b04c4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41734, "upload_time": "2020-02-20T20:22:44", "upload_time_iso_8601": "2020-02-20T20:22:44.660172Z", "url": "https://files.pythonhosted.org/packages/3a/12/96bb0a539adf305480600b77748eec51cb293252db59054649be18870c95/pyiotools-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4863f76d37fbe457c49598a824740706", "sha256": "aaec8031fef6e3910f648bacebcc2a0247dd3fb6b9afeb91dde093fd4b7f80fc"}, "downloads": -1, "filename": "pyiotools-0.3.6.tar.gz", "has_sig": false, "md5_digest": "4863f76d37fbe457c49598a824740706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38462, "upload_time": "2020-02-20T20:22:46", "upload_time_iso_8601": "2020-02-20T20:22:46.270928Z", "url": "https://files.pythonhosted.org/packages/c8/66/2c2759bbc65a5db7da307c9b9214316478a4bace649b43280286dd30fd64/pyiotools-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "b090d4c883404e49cd36cd707ed8c3c0", "sha256": "5656f90517a1ff74f6d4b16be4ca2c479b557ebb0813757c9c835fe8e72e11ec"}, "downloads": -1, "filename": "pyiotools-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b090d4c883404e49cd36cd707ed8c3c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43017, "upload_time": "2020-03-13T11:10:54", "upload_time_iso_8601": "2020-03-13T11:10:54.678189Z", "url": "https://files.pythonhosted.org/packages/d5/a5/b0e003d4aa2ec53a44a3cd5e5df779dfe3a785a7168c249458ce27722884/pyiotools-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e2cfca4f4fdfc8893b3b038ee05762", "sha256": "6d516fd919b4d2424c2900a6ef38f94dd661caafe9d7390329d8fd1cca51fc21"}, "downloads": -1, "filename": "pyiotools-0.3.7.tar.gz", "has_sig": false, "md5_digest": "e5e2cfca4f4fdfc8893b3b038ee05762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39553, "upload_time": "2020-03-13T11:10:55", "upload_time_iso_8601": "2020-03-13T11:10:55.938850Z", "url": "https://files.pythonhosted.org/packages/97/27/15d1a80b28dda2d19647de42f000ed95b875070b5ec5b73ee13faddda48b/pyiotools-0.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b090d4c883404e49cd36cd707ed8c3c0", "sha256": "5656f90517a1ff74f6d4b16be4ca2c479b557ebb0813757c9c835fe8e72e11ec"}, "downloads": -1, "filename": "pyiotools-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b090d4c883404e49cd36cd707ed8c3c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 43017, "upload_time": "2020-03-13T11:10:54", "upload_time_iso_8601": "2020-03-13T11:10:54.678189Z", "url": "https://files.pythonhosted.org/packages/d5/a5/b0e003d4aa2ec53a44a3cd5e5df779dfe3a785a7168c249458ce27722884/pyiotools-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e2cfca4f4fdfc8893b3b038ee05762", "sha256": "6d516fd919b4d2424c2900a6ef38f94dd661caafe9d7390329d8fd1cca51fc21"}, "downloads": -1, "filename": "pyiotools-0.3.7.tar.gz", "has_sig": false, "md5_digest": "e5e2cfca4f4fdfc8893b3b038ee05762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39553, "upload_time": "2020-03-13T11:10:55", "upload_time_iso_8601": "2020-03-13T11:10:55.938850Z", "url": "https://files.pythonhosted.org/packages/97/27/15d1a80b28dda2d19647de42f000ed95b875070b5ec5b73ee13faddda48b/pyiotools-0.3.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:55 2020"}