{"info": {"author": "Eric Van Albert", "author_email": "eric@van.al", "bugtrack_url": null, "classifiers": [], "description": "Outputting to lights from Radiance\n##################################\n\n`Radiance <https://radiance.video>`_ provides a simple way to output to light displays.\nA python library is provided for easy implementation on your device or middleware.\nAll you have to do is instantiate a LightOutputNode and point it to your device.\n\nExample device\n**************\n\nTo try it out, run it in the background. Then, open Radiance and create a new ``LightOutputNode`` pointing at ``localhost``.\nAdd a full-screen pattern such as ``purple`` before the ``LightOutputNode`` to fill the display with color.\nYou should see a circle of lights that correspond to the edges of the frame.\n\nIf you restart the server and want to reconnect, simply select the ``LightOutputNode`` and hit ``R``.\n\n.. code-block:: python\n\n    #!/usr/bin/env python3\n    \n    import logging\n    import math\n    import radiance\n    \n    # This example shows how to interface custom hardware to radiance.\n    \n    # This basic idea here is to subclasses radiance.LightOutputNode\n    # and override callback methods in it\n    # with custom functionality.\n    \n    class Example(radiance.LightOutputNode):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n    \n            # This tells Radiance the name of our device, and how big the sampled canvas should be.\n            self.description = {\n                \"name\": \"Python Example\",\n                \"size\": [100, 100]\n            }\n    \n            # This would request 5 pixels at the corners and center.\n            #self.lookup_2d([(0, 0), (0, 1), (1, 0), (1, 1), (0.5, 0.5)])\n    \n            # Instead, lets request 120 pixels around the border.\n            N = 30\n            self.lookup_2d = [(0, i / N) for i in range(N)]\n            self.lookup_2d += [(i / N, 0) for i in range(N)]\n            self.lookup_2d += [(1, 1 - i / N) for i in range(N)]\n            self.lookup_2d += [(1 - i / N, 1) for i in range(N)]\n    \n            # If we stopped here, Radiance would visualize this display using the lookup coordinates\n            # and show a square.\n            # If the physical display looks different, we tell Radiance about it with the\n            # \"physical coordinates\" command.\n            # Lets tell Radiance to visualize the points as a circle instead.\n    \n            def moveToCircle(x, y):\n                l = math.hypot(x - 0.5, y - 0.5)\n                return (0.5 * (x - 0.5) / l + 0.5, 0.5 * (y - 0.5) / l + 0.5)\n            self.physical_2d = [moveToCircle(x, y) for (x, y) in self.lookup_2d]\n    \n            # We can send radiance a PNG file to be used as a background image for visualization.\n            # This logo image is not very useful, but perhaps some line-art of your venue would work well.\n    \n            #with open(\"../resources/library/images/logo.png\", \"rb\") as f:\n            #    self.geometry_2d = f.read()\n    \n            # Ask for frames from Radiance every 20 ms (50 FPS).\n            # On flaky connections, set this to zero.\n            # Doing so will request frames one-by-one in a synchronous manner,\n            # which will avoid network congestion.\n            self.period = 20\n    \n        # This gets called every time a frame is received.\n        def on_frame(self, frame):\n            # This is where you would output to LED strips\n            # or whatever hardware you have.\n    \n            # For now, lets just print out the RGB values for the first few pixels\n            # to the console.\n            # Print the RGB values for the first few pixels to the console\n            print(frame[0:5])\n    \n    # Turn on logging so we can see debug messages\n    logging.basicConfig(level=logging.DEBUG)\n    \n    # Construct our device\n    device = Example()\n    \n    # Start it going\n    device.serve_forever()\n    ", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://radiance.video", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "radiance", "package_url": "https://pypi.org/project/radiance/", "platform": "", "project_url": "https://pypi.org/project/radiance/", "project_urls": {"Homepage": "https://radiance.video"}, "release_url": "https://pypi.org/project/radiance/0.1dev5/", "requires_dist": null, "requires_python": "", "summary": "Python tools for the Radiance video art system", "version": "0.1dev5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://radiance.video\" rel=\"nofollow\">Radiance</a> provides a simple way to output to light displays.\nA python library is provided for easy implementation on your device or middleware.\nAll you have to do is instantiate a LightOutputNode and point it to your device.</p>\n<div id=\"example-device\">\n<h2>Example device</h2>\n<p>To try it out, run it in the background. Then, open Radiance and create a new <tt>LightOutputNode</tt> pointing at <tt>localhost</tt>.\nAdd a full-screen pattern such as <tt>purple</tt> before the <tt>LightOutputNode</tt> to fill the display with color.\nYou should see a circle of lights that correspond to the edges of the frame.</p>\n<p>If you restart the server and want to reconnect, simply select the <tt>LightOutputNode</tt> and hit <tt>R</tt>.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">radiance</span>\n\n<span class=\"c1\"># This example shows how to interface custom hardware to radiance.</span>\n\n<span class=\"c1\"># This basic idea here is to subclasses radiance.LightOutputNode</span>\n<span class=\"c1\"># and override callback methods in it</span>\n<span class=\"c1\"># with custom functionality.</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">radiance</span><span class=\"o\">.</span><span class=\"n\">LightOutputNode</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># This tells Radiance the name of our device, and how big the sampled canvas should be.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Python Example\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"size\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># This would request 5 pixels at the corners and center.</span>\n        <span class=\"c1\">#self.lookup_2d([(0, 0), (0, 1), (1, 0), (1, 1), (0.5, 0.5)])</span>\n\n        <span class=\"c1\"># Instead, lets request 120 pixels around the border.</span>\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_2d</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_2d</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_2d</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_2d</span> <span class=\"o\">+=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># If we stopped here, Radiance would visualize this display using the lookup coordinates</span>\n        <span class=\"c1\"># and show a square.</span>\n        <span class=\"c1\"># If the physical display looks different, we tell Radiance about it with the</span>\n        <span class=\"c1\"># \"physical coordinates\" command.</span>\n        <span class=\"c1\"># Lets tell Radiance to visualize the points as a circle instead.</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">moveToCircle</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n            <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">hypot</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">physical_2d</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">moveToCircle</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_2d</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># We can send radiance a PNG file to be used as a background image for visualization.</span>\n        <span class=\"c1\"># This logo image is not very useful, but perhaps some line-art of your venue would work well.</span>\n\n        <span class=\"c1\">#with open(\"../resources/library/images/logo.png\", \"rb\") as f:</span>\n        <span class=\"c1\">#    self.geometry_2d = f.read()</span>\n\n        <span class=\"c1\"># Ask for frames from Radiance every 20 ms (50 FPS).</span>\n        <span class=\"c1\"># On flaky connections, set this to zero.</span>\n        <span class=\"c1\"># Doing so will request frames one-by-one in a synchronous manner,</span>\n        <span class=\"c1\"># which will avoid network congestion.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">period</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n\n    <span class=\"c1\"># This gets called every time a frame is received.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_frame</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">frame</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is where you would output to LED strips</span>\n        <span class=\"c1\"># or whatever hardware you have.</span>\n\n        <span class=\"c1\"># For now, lets just print out the RGB values for the first few pixels</span>\n        <span class=\"c1\"># to the console.</span>\n        <span class=\"c1\"># Print the RGB values for the first few pixels to the console</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Turn on logging so we can see debug messages</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct our device</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">Example</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Start it going</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5227105, "releases": {"0.1dev5": [{"comment_text": "", "digests": {"md5": "ed9c5dacc1459f53bf323013b1aada36", "sha256": "870d0076f8c4da1803aa3798039a86c65b683c04d722dcd259dffb63176dc0e6"}, "downloads": -1, "filename": "radiance-0.1dev5.tar.gz", "has_sig": false, "md5_digest": "ed9c5dacc1459f53bf323013b1aada36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3392, "upload_time": "2019-05-05T01:09:09", "upload_time_iso_8601": "2019-05-05T01:09:09.507875Z", "url": "https://files.pythonhosted.org/packages/fc/66/3f3e2ec1d26b04d0bd0355b02456020f2ba0f1eb13ea69754b5fe7edb88b/radiance-0.1dev5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed9c5dacc1459f53bf323013b1aada36", "sha256": "870d0076f8c4da1803aa3798039a86c65b683c04d722dcd259dffb63176dc0e6"}, "downloads": -1, "filename": "radiance-0.1dev5.tar.gz", "has_sig": false, "md5_digest": "ed9c5dacc1459f53bf323013b1aada36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3392, "upload_time": "2019-05-05T01:09:09", "upload_time_iso_8601": "2019-05-05T01:09:09.507875Z", "url": "https://files.pythonhosted.org/packages/fc/66/3f3e2ec1d26b04d0bd0355b02456020f2ba0f1eb13ea69754b5fe7edb88b/radiance-0.1dev5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:03 2020"}