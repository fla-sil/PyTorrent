{"info": {"author": "Sean Hammond", "author_email": "deadoralive@seanh.cc", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Other Audience", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: Site Management :: Link Checking"], "description": "[![Build Status](https://travis-ci.org/ckan/deadoralive.svg)](https://travis-ci.org/ckan/deadoralive)\n[![Coverage Status](https://img.shields.io/coveralls/ckan/deadoralive.svg)](https://coveralls.io/r/ckan/deadoralive)\n\nDead or Alive\n=============\n\nDead or Alive is a simple dead link checker service: it's a command-line script\nor cron job that checks your site for broken links and posts the results back\nto your site using an API (defined below) that your site must implement.\n\nFor [CKAN](http://ckan.org/) sites you can install\n[ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) to add Dead\nor Alive support.\n\nIn the future we'd like to make this into a web service rather than just a\ncron job.  This will enable _ad-hoc_ link checking in response to user\ninteractions (i.e. the user clicks on a \"check this link/these links now\"\nbutton on the client website, or checking a new resource as soon as a user\ncreates it) as well as the currently implemented automatic hourly checks.\nSee <https://github.com/ckan/deadoralive/issues/1>.\n\n\nRequirements\n------------\n\nPython 2.6 or 2.7.\n\n\nInstallation\n------------\n\nTo install run:\n\n    pip install deadoralive\n\nIf you want to check a CKAN site for broken links you also need to install\n[ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) on your\nCKAN site.\n\nTo install for development, create and activate a Python virtual environment\nthen do:\n\n    git clone https://github.com/ckan/deadoralive.git\n    cd deadoralive\n    python setup.py develop\n\n\nUsage\n-----\n\nTo check a site for broken links run:\n\n    deadoralive --url <your_site> --apikey <your_api_key>\n\nReplace `<your_site>` with the URL of the CKAN or other client\nsite you want to check (e.g. `http://demo.ckan.org`).\n\nReplace `<your_api_key>` with the API key of the site user that you want the\nlink checker to run as.\n\nIf the site is a CKAN site the API key should be the CKAN API key of one of the\nusers listed in the `ckanext.deadoralive.authorized_users` config setting in\nyour CKAN config file (see\n[ckanext-deadoralive's docs](https://github.com/ckan/ckanext-deadoralive) for\ndetails).\n\n\nAdding a Cron Job\n-----------------\n\nTo setup the link checker to run automatically you can add a cron job for it.\nOn most UNIX systems you can add a cron job by running `crontab -e` to edit\nyour crontab file. Add a line like the following to the file and save it:\n\n    @hourly deadoralive --url '<your_site>' --apikey <your_api_key>\n\nAs before replace `<your_site>` with the URL of the site you want to check,\nand `<your_api_key>` with an API key from the site.\n\nYou can also use `@daily` or `@weekly` instead of `@hourly` if you want link\nchecking to happen less often.\n\n\nRunning the Link Checker on a Different Machine\n-----------------------------------------------\n\nAlthough the ckanext-deadoralive extension has to be installed and activated on\nthe CKAN site that you want to check the links of, the link checker script\nitself does not need to be run from the same machine. Because it does all\ncommunication with the CKAN site via CKAN's API, you can run it from a\ndifferent server or from your laptop: just install and run deadoralive\nas described above.\n\n\nRunning Multiple Link Checkers at Once\n--------------------------------------\n\nIt's perfectly fine to run multiple instances of the `deadoralive` link\nchecker script at once. For example:\n\n* Have a cron job setup on the server to run the link checker hourly, but\n  occassionally run another copy of the link checker manually on your laptop.\n\n* Have multiple cron jobs on multiple servers running link checkers against\n  the same CKAN site.\n\nCKAN will hand out different resources to each link checker, and won't let two\ncheckers check the same resource at the same time.\n\n\n### Running Multiple Link Checkers on the Same Machine\n\nBy default deadoralive uses a socket to prevent two instances of the\nscript from running at the same time on the same machine. This is to prevent\nlink checker processes from piling up when the link checker is being run as a\ncron job and doesn't finish checking all the links before cron runs it again.\n\nIf you _want_ to run multiple instances on the same machine at the same time,\njust use the `--port` option to specify a different port for each.\nFor example:\n\n    deadoralive --url '<url>' --apikey <apikey> --port 4567\n    deadoralive --url '<url>' --apikey <apikey> --port 4568\n    deadoralive --url '<url>' --apikey <apikey> --port 4569\n\n(deadoralive doesn't actually do anything with the port, it just binds a\nsocket to it to prevent any other deadoralive processes with the same port\nfrom running.)\n\n\nChecking Multiple Sites\n-----------------------\n\nYou can use a single instance of the link checker to check multiple sites:\njust pass it different `--url` and `--apikey` arguments.\n\nFor example you might setup three cron jobs to check three different sites,\ngiving each job a different port so that they can run simultaneously:\n\n    @hourly deadoralive --url '<first_site>' --apikey <first_api_key> --port 4567\n    @hourly deadoralive --url '<second_site>' --apikey <second_api_key> --port 4568\n    @hourly deadoralive --url '<third_site>' --apikey <third_key> --port 4569\n\n\nAPI\n---\n\nThe API that a site must implement to be compatible with deadoralive is as\nfollows:\n\n* All request and response bodies are in JSON-formatted text.\n\n* deadoralive sends the API key (from its `--apikey` option) in all HTTP\n  requests as an Authorization header.\n\n  For example `deadoralive --url <url> --apikey foo` will send requests with\n  header `Authorization: foo`.\n\n* `GET /deadoralive/get_resources_to_check`\n\n  Return a list of IDs of resources to be checked. An ID can be any string that\n  uniquely identifies a resource that has a URL.\n\n  deadoralive will request this endpoint once at the start of each run.\n\n  Example output: `[\"id_1\", \"id_2\", ...]`.\n\n* `GET /deadoralive/get_url_for_resource?resource_id=<resource_id>`\n\n  Return the URL of the link to be checked for the given resource ID.\n\n  deadoralive will request this endpoint once for each of the resource IDs\n  it was given by the previous request.\n\n  Example output: `{\"url\": \"http://demo.ckan.org/data.csv\"}`\n\n* `POST /deadoralive/upsert`\n\n  deadoralive will post to this endpoint to report the result of each link\n  check that it does.\n\n  Example post body:\n\n      {\"resource_id\": \"id_1\",\n       \"alive\": false,\n       \"status\": 500,\n       \"reason\": \"Internal Server Error\",\n       \"url\": \"http://demo.ckan.org/data.csv\"\n      }\n\nSee [ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) for a\nreference implementation.\n\n\nRunning the Tests\n-----------------\n\nFirst activate your virtualenv then install the dev requirements:\n\n    pip install -r dev-requirements.txt\n\nThen to run the tests do:\n\n    nosetests\n\nTo run the tests and produce a test coverage report do:\n\n    nosetests --with-coverage --cover-inclusive --cover-erase --cover-tests", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ckan/deadoralive", "keywords": "ckan", "license": "AGPL", "maintainer": null, "maintainer_email": null, "name": "deadoralive", "package_url": "https://pypi.org/project/deadoralive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/deadoralive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ckan/deadoralive"}, "release_url": "https://pypi.org/project/deadoralive/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A broken link checker service", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/ckan/deadoralive.svg)](https://travis-ci.org/ckan/deadoralive)<br>[![Coverage Status](https://img.shields.io/coveralls/ckan/deadoralive.svg)](https://coveralls.io/r/ckan/deadoralive)<br><br>Dead or Alive<br>=============<br><br>Dead or Alive is a simple dead link checker service: it's a command-line script<br>or cron job that checks your site for broken links and posts the results back<br>to your site using an API (defined below) that your site must implement.<br><br>For [CKAN](http://ckan.org/) sites you can install<br>[ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) to add Dead<br>or Alive support.<br><br>In the future we'd like to make this into a web service rather than just a<br>cron job.  This will enable _ad-hoc_ link checking in response to user<br>interactions (i.e. the user clicks on a \"check this link/these links now\"<br>button on the client website, or checking a new resource as soon as a user<br>creates it) as well as the currently implemented automatic hourly checks.<br>See &lt;https://github.com/ckan/deadoralive/issues/1&gt;.<br><br><br>Requirements<br>------------<br><br>Python 2.6 or 2.7.<br><br><br>Installation<br>------------<br><br>To install run:<br><br>    pip install deadoralive<br><br>If you want to check a CKAN site for broken links you also need to install<br>[ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) on your<br>CKAN site.<br><br>To install for development, create and activate a Python virtual environment<br>then do:<br><br>    git clone https://github.com/ckan/deadoralive.git<br>    cd deadoralive<br>    python setup.py develop<br><br><br>Usage<br>-----<br><br>To check a site for broken links run:<br><br>    deadoralive --url &lt;your_site&gt; --apikey &lt;your_api_key&gt;<br><br>Replace `&lt;your_site&gt;` with the URL of the CKAN or other client<br>site you want to check (e.g. `http://demo.ckan.org`).<br><br>Replace `&lt;your_api_key&gt;` with the API key of the site user that you want the<br>link checker to run as.<br><br>If the site is a CKAN site the API key should be the CKAN API key of one of the<br>users listed in the `ckanext.deadoralive.authorized_users` config setting in<br>your CKAN config file (see<br>[ckanext-deadoralive's docs](https://github.com/ckan/ckanext-deadoralive) for<br>details).<br><br><br>Adding a Cron Job<br>-----------------<br><br>To setup the link checker to run automatically you can add a cron job for it.<br>On most UNIX systems you can add a cron job by running `crontab -e` to edit<br>your crontab file. Add a line like the following to the file and save it:<br><br>    @hourly deadoralive --url '&lt;your_site&gt;' --apikey &lt;your_api_key&gt;<br><br>As before replace `&lt;your_site&gt;` with the URL of the site you want to check,<br>and `&lt;your_api_key&gt;` with an API key from the site.<br><br>You can also use `@daily` or `@weekly` instead of `@hourly` if you want link<br>checking to happen less often.<br><br><br>Running the Link Checker on a Different Machine<br>-----------------------------------------------<br><br>Although the ckanext-deadoralive extension has to be installed and activated on<br>the CKAN site that you want to check the links of, the link checker script<br>itself does not need to be run from the same machine. Because it does all<br>communication with the CKAN site via CKAN's API, you can run it from a<br>different server or from your laptop: just install and run deadoralive<br>as described above.<br><br><br>Running Multiple Link Checkers at Once<br>--------------------------------------<br><br>It's perfectly fine to run multiple instances of the `deadoralive` link<br>checker script at once. For example:<br><br>* Have a cron job setup on the server to run the link checker hourly, but<br>  occassionally run another copy of the link checker manually on your laptop.<br><br>* Have multiple cron jobs on multiple servers running link checkers against<br>  the same CKAN site.<br><br>CKAN will hand out different resources to each link checker, and won't let two<br>checkers check the same resource at the same time.<br><br><br>### Running Multiple Link Checkers on the Same Machine<br><br>By default deadoralive uses a socket to prevent two instances of the<br>script from running at the same time on the same machine. This is to prevent<br>link checker processes from piling up when the link checker is being run as a<br>cron job and doesn't finish checking all the links before cron runs it again.<br><br>If you _want_ to run multiple instances on the same machine at the same time,<br>just use the `--port` option to specify a different port for each.<br>For example:<br><br>    deadoralive --url '&lt;url&gt;' --apikey &lt;apikey&gt; --port 4567<br>    deadoralive --url '&lt;url&gt;' --apikey &lt;apikey&gt; --port 4568<br>    deadoralive --url '&lt;url&gt;' --apikey &lt;apikey&gt; --port 4569<br><br>(deadoralive doesn't actually do anything with the port, it just binds a<br>socket to it to prevent any other deadoralive processes with the same port<br>from running.)<br><br><br>Checking Multiple Sites<br>-----------------------<br><br>You can use a single instance of the link checker to check multiple sites:<br>just pass it different `--url` and `--apikey` arguments.<br><br>For example you might setup three cron jobs to check three different sites,<br>giving each job a different port so that they can run simultaneously:<br><br>    @hourly deadoralive --url '&lt;first_site&gt;' --apikey &lt;first_api_key&gt; --port 4567<br>    @hourly deadoralive --url '&lt;second_site&gt;' --apikey &lt;second_api_key&gt; --port 4568<br>    @hourly deadoralive --url '&lt;third_site&gt;' --apikey &lt;third_key&gt; --port 4569<br><br><br>API<br>---<br><br>The API that a site must implement to be compatible with deadoralive is as<br>follows:<br><br>* All request and response bodies are in JSON-formatted text.<br><br>* deadoralive sends the API key (from its `--apikey` option) in all HTTP<br>  requests as an Authorization header.<br><br>  For example `deadoralive --url &lt;url&gt; --apikey foo` will send requests with<br>  header `Authorization: foo`.<br><br>* `GET /deadoralive/get_resources_to_check`<br><br>  Return a list of IDs of resources to be checked. An ID can be any string that<br>  uniquely identifies a resource that has a URL.<br><br>  deadoralive will request this endpoint once at the start of each run.<br><br>  Example output: `[\"id_1\", \"id_2\", ...]`.<br><br>* `GET /deadoralive/get_url_for_resource?resource_id=&lt;resource_id&gt;`<br><br>  Return the URL of the link to be checked for the given resource ID.<br><br>  deadoralive will request this endpoint once for each of the resource IDs<br>  it was given by the previous request.<br><br>  Example output: `{\"url\": \"http://demo.ckan.org/data.csv\"}`<br><br>* `POST /deadoralive/upsert`<br><br>  deadoralive will post to this endpoint to report the result of each link<br>  check that it does.<br><br>  Example post body:<br><br>      {\"resource_id\": \"id_1\",<br>       \"alive\": false,<br>       \"status\": 500,<br>       \"reason\": \"Internal Server Error\",<br>       \"url\": \"http://demo.ckan.org/data.csv\"<br>      }<br><br>See [ckanext-deadoralive](https://github.com/ckan/ckanext-deadoralive) for a<br>reference implementation.<br><br><br>Running the Tests<br>-----------------<br><br>First activate your virtualenv then install the dev requirements:<br><br>    pip install -r dev-requirements.txt<br><br>Then to run the tests do:<br><br>    nosetests<br><br>To run the tests and produce a test coverage report do:<br><br>    nosetests --with-coverage --cover-inclusive --cover-erase --cover-tests\n          </div>"}, "last_serial": 1381096, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "32ea51a9b6f72a619a24c280ebdbd9fd", "sha256": "12ff9bef4517650aa31ba849da10bb93c1136b4294efd6e10cb2f23223f77a67"}, "downloads": -1, "filename": "deadoralive-0.1.0.tar.gz", "has_sig": false, "md5_digest": "32ea51a9b6f72a619a24c280ebdbd9fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8042, "upload_time": "2014-10-01T19:33:45", "upload_time_iso_8601": "2014-10-01T19:33:45.501046Z", "url": "https://files.pythonhosted.org/packages/f4/f4/d64b1992db70a7e48062e27d8dbb67bb2cdb306e0f296a48e12548c57aba/deadoralive-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "73a3938a830714723602182533858cfd", "sha256": "f581d2a029ad98b2d33cf8176326a6df4364eba45b0e579668a573836d3619a8"}, "downloads": -1, "filename": "deadoralive-0.1.1.tar.gz", "has_sig": false, "md5_digest": "73a3938a830714723602182533858cfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9941, "upload_time": "2014-10-13T20:52:22", "upload_time_iso_8601": "2014-10-13T20:52:22.276511Z", "url": "https://files.pythonhosted.org/packages/fd/f8/9397b6ba75b0f17e4d514dd0469e8a94b17f377a346d9e4a578fd9d3c255/deadoralive-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73a3938a830714723602182533858cfd", "sha256": "f581d2a029ad98b2d33cf8176326a6df4364eba45b0e579668a573836d3619a8"}, "downloads": -1, "filename": "deadoralive-0.1.1.tar.gz", "has_sig": false, "md5_digest": "73a3938a830714723602182533858cfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9941, "upload_time": "2014-10-13T20:52:22", "upload_time_iso_8601": "2014-10-13T20:52:22.276511Z", "url": "https://files.pythonhosted.org/packages/fd/f8/9397b6ba75b0f17e4d514dd0469e8a94b17f377a346d9e4a578fd9d3c255/deadoralive-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:41 2020"}