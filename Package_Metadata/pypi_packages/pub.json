{"info": {"author": "Bill Mill", "author_email": "bill.mill@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha"], "description": "pub - the Python Utility Belt\r\n=============================\r\n\r\n``pub`` is a tool to help you automate those tasks you don't want to do\r\nmanually. It attempts to provide the cleanest, sanest interface for your\r\nbuilding, cleaning, and deploying needs.\r\n\r\nPub code is simply python code, allowing you to leverage the skills and\r\ntools you're already familiar with.\r\n\r\nSimply install ``pub``, save a ``pub.py`` file in a dir, and start\r\ncoding.\r\n\r\nHere's an example pub.py with two tasks, one to build a project and one\r\nto deploy it to a server:\r\n\r\n::\r\n\r\n    from pub import task\r\n    from pub.shortcuts import mkdir, cp, rsync\r\n\r\n    @task\r\n    def build():\r\n        mkdir(\"build\")\r\n        cp(\"src/binary\", \"build\")\r\n\r\n    @task(\"build\")\r\n    def deploy():\r\n        rsync(\"build\", \"user@server:~\")\r\n\r\nThe pub.shortcuts module gives us handy shortcuts to access command-line\r\nfunctionality.\r\n\r\nThe ``deploy`` task depends on the ``build`` task, so calling\r\n``pub deploy`` will first run the build task, then deploy.\r\n\r\nInstallation\r\n------------\r\n\r\n``pip install pub``\r\n\r\nTasks\r\n-----\r\n\r\nThe ``task`` decorator in the pub module will be your code's main\r\ninterface to pub.\r\n\r\nYou may create a task with no arguments:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task\r\n    def zomg():\r\n        print \"omgbbq\"\r\n\r\nIf you run ``pub zomg`` on a pub.py file containing this function, you\r\nwill see \"omgbbq\" printed out.\r\n\r\nYou may also create a task with arguments. Each argument should be the\r\nname of another function. The functions in the argument list will all be\r\nexecuted before your task.\r\n\r\nFor example:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task\r\n    def foo():\r\n        print \"foo\"\r\n\r\n    @task(\"foo\")\r\n    def bar():\r\n        print \"bar\"\r\n\r\n    @task(\"foo\", \"bar\")\r\n    def baz():\r\n        print \"baz\"\r\n\r\nIf you run ``pub foo``, you will see \"foo\".\r\n\r\nIf you run ``pub bar``, you will see \"foo\" followed by \"bar\".\r\n\r\nIf you run ``pub baz``, you will see \"foo\" followed by \"bar\" followed by\r\n\"baz\".\r\n\r\nDependencies will be resolved left-to-right, meaning that there's an\r\nimplied dependency of each item in a dependency list on its left-hand\r\nneighbor. Be careful that you don't create a circular dependency like\r\nso:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task\r\n    def foo():\r\n        print \"foo\"\r\n\r\n    @task(\"foo\")\r\n    def bar():\r\n        print \"bar\"\r\n\r\n    @task(\"bar\", \"foo\")\r\n    def baz():\r\n        print \"baz\"\r\n\r\nIn this case, ``bar`` depends on ``foo`` by the definition of ``bar``,\r\nbut ``foo`` depends on ``bar`` by the definition of ``baz``. Pub will be\r\nconfused about this situation, and resolve it by quitting out with an\r\nerror.\r\n\r\nThere are two legal keywords you can use with the task decorator:\r\n``private`` and ``default``. ``private`` just means that ``pub -l``\r\nwon't list your task; if you have a ``pub.py`` file like:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task(private=True)\r\n    def private_func(): pass\r\n\r\nand you run ``pub -l``, which normally lists all tasks, ``private_func``\r\nwill not be listed.\r\n\r\n``default`` marks the task as a default action. If you have a ``pub.py``\r\nlike:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task(default=True)\r\n    def do_something(): print \"got here\"\r\n\r\nand run ``pub`` with no arguments, you should see \"got here\" printed.\r\n\r\nYou may mark any number of tasks as ``default``; they will all be run if\r\n``pub`` is invoked without arguments. While their dependency information\r\nwill never be ignored, there is no defined order in which they will be\r\nrun.\r\n\r\nTasks are documented simply by giving them docstrings. Given this\r\n``pub.py``:\r\n\r\n::\r\n\r\n    from pub import task\r\n\r\n    @task\r\n    def gotit():\r\n        \"\"\"You've got it!\"\"\"\r\n        pass\r\n\r\n    @task\r\n    def noyou():\r\n        \"\"\"I thought you had it.\"\"\"\r\n        pass\r\n\r\nWe can see how they are displayed by pub:\r\n\r\n::\r\n\r\n    $ pub -l\r\n    gotit: You've got it!\r\n    noyou: I thought you had it.\r\n\r\nShortcuts\r\n---------\r\n\r\nThe ``pub.shortcuts`` module builds on @kennethreitz's fine\r\n`envoy <https://github.com/kennethreitz/envoy>`_ module to provide a\r\nconvenient command-line interface for pub.\r\n\r\nYou can see all the commands that are available `in the\r\nsource <https://github.com/llimllib/pub/blob/master/pub/shortcuts/__init__.py>`_,\r\nor you can make your own:\r\n\r\n::\r\n\r\n    from pub.shortcuts import make_shortcut\r\n\r\n    gcc = make_shortcut(\"gcc\")\r\n\r\n    #then use it like so:\r\n    gcc(\"-o guildenstern.exe rosencrantz.c\")\r\n\r\nThe invocation of the ``gcc`` funciton at the end will translate into\r\n``gcc -o guildenstern.exe rosencrantz.c`` and be run.\r\n\r\nWe can also use our shortcuts to inspect the input, output, and status\r\ncode of the command; the return value of a shortcut will be an\r\n`envoy <https://github.com/kennethreitz/envoy>`_ result. Check their\r\ndocumentation for specifics, but basically you can see its output with:\r\n\r\n::\r\n\r\n    from pub.shortcuts import make_shortcut\r\n\r\n    echo = make_shortcut(\"echo\")\r\n\r\n    out = echo(\"A conspiracy of cartographers\")\r\n\r\n    assert out.std_out == \"A conspiracy of cartographers\\n\"\r\n\r\nThe ``pub.shortcuts`` module also contains one utility function,\r\n``newer``. It simply accepts two arguments and returns True if the mtime\r\nof the first is newer than the mtime of the second. Its entire defintion\r\nfollows:\r\n\r\n::\r\n\r\n    def newer(f1, f2):\r\n        return stat(f1).st_mtime > stat(f2).st_mtime\r\n\r\nThe ``pub`` command\r\n-------------------\r\n\r\nThe pub command is best described by its ``--help`` output:\r\n\r\n::\r\n\r\n    usage: pub [-h] [-l] [-f FILE] [task [task ...]]\r\n\r\n    Python Utility Belt v0.0.4\r\n\r\n    positional arguments:\r\n      task                  the tasks to run\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -l                    list available tasks\r\n      -f FILE, --pubfile FILE \r\n                            The file to use as a pubfile\r\n\r\nContributing\r\n------------\r\n\r\nPlease do! Patches and issues will be gladly accepted.\r\n\r\nTo run ``pub``'s tests, just run ``pub test``; you'll need to have\r\ninstalled `nose <https://github.com/nose-devs/nose>`_ first.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/llimllib/pub", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pub", "package_url": "https://pypi.org/project/pub/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pub/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/llimllib/pub"}, "release_url": "https://pypi.org/project/pub/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "Python Utility Belt", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>pub</tt> is a tool to help you automate those tasks you don\u2019t want to do\nmanually. It attempts to provide the cleanest, sanest interface for your\nbuilding, cleaning, and deploying needs.</p>\n<p>Pub code is simply python code, allowing you to leverage the skills and\ntools you\u2019re already familiar with.</p>\n<p>Simply install <tt>pub</tt>, save a <tt>pub.py</tt> file in a dir, and start\ncoding.</p>\n<p>Here\u2019s an example pub.py with two tasks, one to build a project and one\nto deploy it to a server:</p>\n<pre>from pub import task\nfrom pub.shortcuts import mkdir, cp, rsync\n\n@task\ndef build():\n    mkdir(\"build\")\n    cp(\"src/binary\", \"build\")\n\n@task(\"build\")\ndef deploy():\n    rsync(\"build\", \"user@server:~\")\n</pre>\n<p>The pub.shortcuts module gives us handy shortcuts to access command-line\nfunctionality.</p>\n<p>The <tt>deploy</tt> task depends on the <tt>build</tt> task, so calling\n<tt>pub deploy</tt> will first run the build task, then deploy.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install pub</tt></p>\n</div>\n<div id=\"tasks\">\n<h2>Tasks</h2>\n<p>The <tt>task</tt> decorator in the pub module will be your code\u2019s main\ninterface to pub.</p>\n<p>You may create a task with no arguments:</p>\n<pre>from pub import task\n\n@task\ndef zomg():\n    print \"omgbbq\"\n</pre>\n<p>If you run <tt>pub zomg</tt> on a pub.py file containing this function, you\nwill see \u201comgbbq\u201d printed out.</p>\n<p>You may also create a task with arguments. Each argument should be the\nname of another function. The functions in the argument list will all be\nexecuted before your task.</p>\n<p>For example:</p>\n<pre>from pub import task\n\n@task\ndef foo():\n    print \"foo\"\n\n@task(\"foo\")\ndef bar():\n    print \"bar\"\n\n@task(\"foo\", \"bar\")\ndef baz():\n    print \"baz\"\n</pre>\n<p>If you run <tt>pub foo</tt>, you will see \u201cfoo\u201d.</p>\n<p>If you run <tt>pub bar</tt>, you will see \u201cfoo\u201d followed by \u201cbar\u201d.</p>\n<p>If you run <tt>pub baz</tt>, you will see \u201cfoo\u201d followed by \u201cbar\u201d followed by\n\u201cbaz\u201d.</p>\n<p>Dependencies will be resolved left-to-right, meaning that there\u2019s an\nimplied dependency of each item in a dependency list on its left-hand\nneighbor. Be careful that you don\u2019t create a circular dependency like\nso:</p>\n<pre>from pub import task\n\n@task\ndef foo():\n    print \"foo\"\n\n@task(\"foo\")\ndef bar():\n    print \"bar\"\n\n@task(\"bar\", \"foo\")\ndef baz():\n    print \"baz\"\n</pre>\n<p>In this case, <tt>bar</tt> depends on <tt>foo</tt> by the definition of <tt>bar</tt>,\nbut <tt>foo</tt> depends on <tt>bar</tt> by the definition of <tt>baz</tt>. Pub will be\nconfused about this situation, and resolve it by quitting out with an\nerror.</p>\n<p>There are two legal keywords you can use with the task decorator:\n<tt>private</tt> and <tt>default</tt>. <tt>private</tt> just means that <tt>pub <span class=\"pre\">-l</span></tt>\nwon\u2019t list your task; if you have a <tt>pub.py</tt> file like:</p>\n<pre>from pub import task\n\n@task(private=True)\ndef private_func(): pass\n</pre>\n<p>and you run <tt>pub <span class=\"pre\">-l</span></tt>, which normally lists all tasks, <tt>private_func</tt>\nwill not be listed.</p>\n<p><tt>default</tt> marks the task as a default action. If you have a <tt>pub.py</tt>\nlike:</p>\n<pre>from pub import task\n\n@task(default=True)\ndef do_something(): print \"got here\"\n</pre>\n<p>and run <tt>pub</tt> with no arguments, you should see \u201cgot here\u201d printed.</p>\n<p>You may mark any number of tasks as <tt>default</tt>; they will all be run if\n<tt>pub</tt> is invoked without arguments. While their dependency information\nwill never be ignored, there is no defined order in which they will be\nrun.</p>\n<p>Tasks are documented simply by giving them docstrings. Given this\n<tt>pub.py</tt>:</p>\n<pre>from pub import task\n\n@task\ndef gotit():\n    \"\"\"You've got it!\"\"\"\n    pass\n\n@task\ndef noyou():\n    \"\"\"I thought you had it.\"\"\"\n    pass\n</pre>\n<p>We can see how they are displayed by pub:</p>\n<pre>$ pub -l\ngotit: You've got it!\nnoyou: I thought you had it.\n</pre>\n</div>\n<div id=\"shortcuts\">\n<h2>Shortcuts</h2>\n<p>The <tt>pub.shortcuts</tt> module builds on @kennethreitz\u2019s fine\n<a href=\"https://github.com/kennethreitz/envoy\" rel=\"nofollow\">envoy</a> module to provide a\nconvenient command-line interface for pub.</p>\n<p>You can see all the commands that are available <a href=\"https://github.com/llimllib/pub/blob/master/pub/shortcuts/__init__.py\" rel=\"nofollow\">in the\nsource</a>,\nor you can make your own:</p>\n<pre>from pub.shortcuts import make_shortcut\n\ngcc = make_shortcut(\"gcc\")\n\n#then use it like so:\ngcc(\"-o guildenstern.exe rosencrantz.c\")\n</pre>\n<p>The invocation of the <tt>gcc</tt> funciton at the end will translate into\n<tt>gcc <span class=\"pre\">-o</span> guildenstern.exe rosencrantz.c</tt> and be run.</p>\n<p>We can also use our shortcuts to inspect the input, output, and status\ncode of the command; the return value of a shortcut will be an\n<a href=\"https://github.com/kennethreitz/envoy\" rel=\"nofollow\">envoy</a> result. Check their\ndocumentation for specifics, but basically you can see its output with:</p>\n<pre>from pub.shortcuts import make_shortcut\n\necho = make_shortcut(\"echo\")\n\nout = echo(\"A conspiracy of cartographers\")\n\nassert out.std_out == \"A conspiracy of cartographers\\n\"\n</pre>\n<p>The <tt>pub.shortcuts</tt> module also contains one utility function,\n<tt>newer</tt>. It simply accepts two arguments and returns True if the mtime\nof the first is newer than the mtime of the second. Its entire defintion\nfollows:</p>\n<pre>def newer(f1, f2):\n    return stat(f1).st_mtime &gt; stat(f2).st_mtime\n</pre>\n</div>\n<div id=\"the-pub-command\">\n<h2>The <tt>pub</tt> command</h2>\n<p>The pub command is best described by its <tt><span class=\"pre\">--help</span></tt> output:</p>\n<pre>usage: pub [-h] [-l] [-f FILE] [task [task ...]]\n\nPython Utility Belt v0.0.4\n\npositional arguments:\n  task                  the tasks to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l                    list available tasks\n  -f FILE, --pubfile FILE\n                        The file to use as a pubfile\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Please do! Patches and issues will be gladly accepted.</p>\n<p>To run <tt>pub</tt>\u2019s tests, just run <tt>pub test</tt>; you\u2019ll need to have\ninstalled <a href=\"https://github.com/nose-devs/nose\" rel=\"nofollow\">nose</a> first.</p>\n</div>\n\n          </div>"}, "last_serial": 796787, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "063bfee2da5056bd3690921516bad266", "sha256": "67f704abab0ac2f8da70e1213d52a413e9f1dc4e807d8490625855ea97ed1fd5"}, "downloads": -1, "filename": "pub-0.0.1.tar.gz", "has_sig": false, "md5_digest": "063bfee2da5056bd3690921516bad266", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6166, "upload_time": "2012-04-03T01:50:55", "upload_time_iso_8601": "2012-04-03T01:50:55.488233Z", "url": "https://files.pythonhosted.org/packages/01/9d/1ff9cab41843f6341553d6e5839ffcd0aa34c8993cf042956f9182601059/pub-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "467cfa26b41956781b72b267f9180c30", "sha256": "865f8622e6d3f8dd6080d2084a2881eb6369b76e550f6ad1b725850fef86112e"}, "downloads": -1, "filename": "pub-0.0.2.tar.gz", "has_sig": false, "md5_digest": "467cfa26b41956781b72b267f9180c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6177, "upload_time": "2012-04-03T01:54:33", "upload_time_iso_8601": "2012-04-03T01:54:33.767866Z", "url": "https://files.pythonhosted.org/packages/74/7b/3ef187bd99c472bf7eeeda80d01964014b3cfe985353e6f3d57c96b78ce6/pub-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "65c26381efe8059895db9d5c6a8fa06c", "sha256": "5e9797a33ee860efbf771fa30b82bcc1aab8bead93346765d18ddd84d857a9d2"}, "downloads": -1, "filename": "pub-0.0.3.tar.gz", "has_sig": false, "md5_digest": "65c26381efe8059895db9d5c6a8fa06c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6220, "upload_time": "2012-04-03T15:44:03", "upload_time_iso_8601": "2012-04-03T15:44:03.923659Z", "url": "https://files.pythonhosted.org/packages/83/cc/f0f3b399e5ff8812c6f5c51fd9246cea0f6404f6ad7fbcab5873cd28f44d/pub-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "172114feae371460c4cfa750fd4a591f", "sha256": "298c857b183681bd6c5d3d0735c75b79af3ccc02ea3086d6defe33095a6f8a43"}, "downloads": -1, "filename": "pub-0.0.4.tar.gz", "has_sig": false, "md5_digest": "172114feae371460c4cfa750fd4a591f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6234, "upload_time": "2012-04-03T16:54:53", "upload_time_iso_8601": "2012-04-03T16:54:53.435148Z", "url": "https://files.pythonhosted.org/packages/fa/0c/ac75b8b7e69375331e00d4645484046e8b1f491c605782839d7e041d3ad9/pub-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "172114feae371460c4cfa750fd4a591f", "sha256": "298c857b183681bd6c5d3d0735c75b79af3ccc02ea3086d6defe33095a6f8a43"}, "downloads": -1, "filename": "pub-0.0.4.tar.gz", "has_sig": false, "md5_digest": "172114feae371460c4cfa750fd4a591f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6234, "upload_time": "2012-04-03T16:54:53", "upload_time_iso_8601": "2012-04-03T16:54:53.435148Z", "url": "https://files.pythonhosted.org/packages/fa/0c/ac75b8b7e69375331e00d4645484046e8b1f491c605782839d7e041d3ad9/pub-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:56 2020"}