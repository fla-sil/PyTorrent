{"info": {"author": "Adam Migus", "author_email": "adam@migus.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# The Thycotic Secret Server Python SDK\n\nThe [Thycotic](https://thycotic.com/)\n[Secret Server](https://thycotic.com/products/secret-server/)\nPython SDK contains classes that interact with Secret Server via the REST API.\n\n## Install\n\n```shell\npython -m pip install python-tss-sdk\n```\n\n## Settings\n\nThe SDK API requires a `username` and `password`, and either a `base_url` or `tenant`.\n\n`tenant` simplifies the configuration when using Secret Server Cloud by assuming\nthe default folder structure and creating the base URL from a template that takes\nthe `tenant` and an optional top-level domain (TLD) that defaults to `com`, as\nparameters.\n\nWhen `base_url` is used, the default `api_path_uri` and `token_path_uri` may be\noverridden. The defaults values are `/api/v1` and `/oauth2/token`,\nrespectively.\n\n## Use\n\nSimply instantiate `SecretServer` or `SecretServerCloud`:\n\n```python\nfrom thycotic.secrets.server import SecretServer\n\nsecret_server = SecretServer(\"https://hostname/SecretServer\", \"myusername\", \"mypassword\")\n```\n\nOr:\n\n```python\nfrom thycotic.secrets.server import SecretServerCloud\n\nsecret_server = SecretServerCloud(\"mytenant\", \"myusername\", \"mypassword\")\n```\n\nThen pass an integer `id` to `get_secret()` which will return the secret as a JSON\nencoded string. The SDK API also contains a `Secret` `@dataclass` containing\na subset of the Secret's attributes and a dictionary of all the fields keyed\nby the Secret's `slug`.\n\n```python\nfrom thycotic.secrets.dataclasses import Secret\n\nsecret = ServerSecret(**secret_server.get_secret(1))\n\nprint(f\"username: {secret.fields['username'].value}\\npassword: {secret.fields['password'].value}\")\n```\n\n## Create a Build Environment (optional)\n\nThe SDK requires [Python 3.6](https://www.python.org/downloads/) or higher,\nand the [Requests](https://2.python-requests.org/en/master/) library.\n\nFirst, ensure Python 3.6 is in `$PATH` then run:\n\n```shell\ngit clone https://github.com/thycotic/python-tss-sdk\ncd python-tss-sdk\npython -m venv venv\n. venv/bin/activate\npip install -r requirements.txt\n```\n\nBoth `example.py` and the unit tests pull the settings from a JSON file.\n\n```python\nwith open('server_config.json') as f:\n    config = json.load(f)\n```\n\nThey also assume that the user associated with the specified `username` and `password`\ncan read the secret with ID `1`, and that the Secret itself contains `username` and\n`password` fields.\n\nCreate `server_config.json`:\n\n```json\n{\n    \"username\": \"app_user\",\n    \"password\": \"Passw0rd!\",\n    \"tenant\": \"mytenant\"\n}\n```\n\nFinally, run `pytest` then build the package:\n\n```shell\npytest\npython setup.py bdist\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thycotic/python-tss-sdk", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-tss-sdk", "package_url": "https://pypi.org/project/python-tss-sdk/", "platform": "", "project_url": "https://pypi.org/project/python-tss-sdk/", "project_urls": {"Homepage": "https://github.com/thycotic/python-tss-sdk"}, "release_url": "https://pypi.org/project/python-tss-sdk/0.0.1/", "requires_dist": ["requests (>=2.12.5)"], "requires_python": ">=3.6", "summary": "The Thycotic Secret Server Python SDK", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>The Thycotic Secret Server Python SDK</h1>\n<p>The <a href=\"https://thycotic.com/\" rel=\"nofollow\">Thycotic</a>\n<a href=\"https://thycotic.com/products/secret-server/\" rel=\"nofollow\">Secret Server</a>\nPython SDK contains classes that interact with Secret Server via the REST API.</p>\n<h2>Install</h2>\n<pre>python -m pip install python-tss-sdk\n</pre>\n<h2>Settings</h2>\n<p>The SDK API requires a <code>username</code> and <code>password</code>, and either a <code>base_url</code> or <code>tenant</code>.</p>\n<p><code>tenant</code> simplifies the configuration when using Secret Server Cloud by assuming\nthe default folder structure and creating the base URL from a template that takes\nthe <code>tenant</code> and an optional top-level domain (TLD) that defaults to <code>com</code>, as\nparameters.</p>\n<p>When <code>base_url</code> is used, the default <code>api_path_uri</code> and <code>token_path_uri</code> may be\noverridden. The defaults values are <code>/api/v1</code> and <code>/oauth2/token</code>,\nrespectively.</p>\n<h2>Use</h2>\n<p>Simply instantiate <code>SecretServer</code> or <code>SecretServerCloud</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thycotic.secrets.server</span> <span class=\"kn\">import</span> <span class=\"n\">SecretServer</span>\n\n<span class=\"n\">secret_server</span> <span class=\"o\">=</span> <span class=\"n\">SecretServer</span><span class=\"p\">(</span><span class=\"s2\">\"https://hostname/SecretServer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myusername\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mypassword\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thycotic.secrets.server</span> <span class=\"kn\">import</span> <span class=\"n\">SecretServerCloud</span>\n\n<span class=\"n\">secret_server</span> <span class=\"o\">=</span> <span class=\"n\">SecretServerCloud</span><span class=\"p\">(</span><span class=\"s2\">\"mytenant\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myusername\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mypassword\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then pass an integer <code>id</code> to <code>get_secret()</code> which will return the secret as a JSON\nencoded string. The SDK API also contains a <code>Secret</code> <code>@dataclass</code> containing\na subset of the Secret's attributes and a dictionary of all the fields keyed\nby the Secret's <code>slug</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thycotic.secrets.dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">Secret</span>\n\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">ServerSecret</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">secret_server</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"username: </span><span class=\"si\">{</span><span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">password: </span><span class=\"si\">{</span><span class=\"n\">secret</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Create a Build Environment (optional)</h2>\n<p>The SDK requires <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.6</a> or higher,\nand the <a href=\"https://2.python-requests.org/en/master/\" rel=\"nofollow\">Requests</a> library.</p>\n<p>First, ensure Python 3.6 is in <code>$PATH</code> then run:</p>\n<pre>git clone https://github.com/thycotic/python-tss-sdk\n<span class=\"nb\">cd</span> python-tss-sdk\npython -m venv venv\n. venv/bin/activate\npip install -r requirements.txt\n</pre>\n<p>Both <code>example.py</code> and the unit tests pull the settings from a JSON file.</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'server_config.json'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>They also assume that the user associated with the specified <code>username</code> and <code>password</code>\ncan read the secret with ID <code>1</code>, and that the Secret itself contains <code>username</code> and\n<code>password</code> fields.</p>\n<p>Create <code>server_config.json</code>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"app_user\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Passw0rd!\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tenant\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mytenant\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Finally, run <code>pytest</code> then build the package:</p>\n<pre>pytest\npython setup.py bdist\n</pre>\n\n          </div>"}, "last_serial": 6916107, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5fc19722f87fad3b56ccf234909ec5f6", "sha256": "26ff125057222a0648b02b93723c514fd70f82d93a5beeb7949e8e16ea11d5b0"}, "downloads": -1, "filename": "python_tss_sdk-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5fc19722f87fad3b56ccf234909ec5f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10576, "upload_time": "2020-03-30T20:50:59", "upload_time_iso_8601": "2020-03-30T20:50:59.349342Z", "url": "https://files.pythonhosted.org/packages/eb/fc/adeaaced2fcb3d71be65174b73b231c86fb944ee174d36963bef9252b086/python_tss_sdk-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1806fdc5dda703eadbdeedd216e3609", "sha256": "5b1ec8f28b69340ac8e70d825ad6153c53dc6c107d38dbaa8fea97556461f5f0"}, "downloads": -1, "filename": "python-tss-sdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a1806fdc5dda703eadbdeedd216e3609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5687, "upload_time": "2020-03-30T20:51:01", "upload_time_iso_8601": "2020-03-30T20:51:01.472263Z", "url": "https://files.pythonhosted.org/packages/ed/51/263ee91a7d5056a9717924a7e228ff71c23c6444166c269a6bf5c25b76d3/python-tss-sdk-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5fc19722f87fad3b56ccf234909ec5f6", "sha256": "26ff125057222a0648b02b93723c514fd70f82d93a5beeb7949e8e16ea11d5b0"}, "downloads": -1, "filename": "python_tss_sdk-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5fc19722f87fad3b56ccf234909ec5f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10576, "upload_time": "2020-03-30T20:50:59", "upload_time_iso_8601": "2020-03-30T20:50:59.349342Z", "url": "https://files.pythonhosted.org/packages/eb/fc/adeaaced2fcb3d71be65174b73b231c86fb944ee174d36963bef9252b086/python_tss_sdk-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1806fdc5dda703eadbdeedd216e3609", "sha256": "5b1ec8f28b69340ac8e70d825ad6153c53dc6c107d38dbaa8fea97556461f5f0"}, "downloads": -1, "filename": "python-tss-sdk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a1806fdc5dda703eadbdeedd216e3609", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5687, "upload_time": "2020-03-30T20:51:01", "upload_time_iso_8601": "2020-03-30T20:51:01.472263Z", "url": "https://files.pythonhosted.org/packages/ed/51/263ee91a7d5056a9717924a7e228ff71c23c6444166c269a6bf5c25b76d3/python-tss-sdk-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:54 2020"}