{"info": {"author": "Facebook", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "# Marketing API SDK for Python\n\n[![Build Status](https://travis-ci.org/facebook/facebook-python-ads-sdk.svg)](https://travis-ci.org/facebook/facebook-python-ads-sdk)\n\n## The Ads SDK for Python provides an easy interface and abstraction to the Marketing API.\n\nPython is currently the most popular language for our third party ads\ndevelopers. ``facebookads`` is a Python package that provides an interface\nbetween your Python application and Facebook's\n<a href=\"https://developers.facebook.com/docs/marketing-apis\">Marketing API</a>. This\ntutorial covers the basics knowledge needed to use the SDK and provide some\nexercises for the reader.\n\n**NOTE**: ``facebookads`` package is compatible with Python 2 and 3!\n\n## Pre-requisites\n\n### An App\n\nTo get started with the SDK you must have a Facebook app\n<a href=\"https://developers.facebook.com/\">registered on\ndevelopers.facebook.com</a>.\n\n**IMPORTANT**: Enable all migrations in the App's Settings->Migrations page.\n\n**IMPORTANT**: For extra security, the SDK requires that you set 'Require App Secret' to *Yes* on your app's Settings->Advanced page.\n\nYour app should now be able to use the Marketing API!\n\n### An Access Token\n\nYou need to generate a user access token for your app and ask for the\n``ads_management`` permission. It is expected that an app in production will\nbuild its own infrastructure to interact with a user to generate an access token\nand choose an account to manage.\n<a href=\"https://developers.facebook.com/docs/marketing-api/using-the-api\">Learn\nmore about access tokens here</a>.\n\nFor now, we can use the\n<a href=\"https://developers.facebook.com/tools/explorer\">Graph Explorer</a> to\nget an access token. Select your App from the dropdown in the top right, and then generate a token with the premissions you want to test with.\n\n## Install package\n\nThe easiest way to install the SDK is via ``pip`` in your shell.\n\n**NOTE**: For Python 3, use ``pip3`` and ``python3`` instead.\n\n**NOTE**: Use ``sudo`` if any of these complain about permissions. (This might\nhappen if you are using a system installed Python.)\n\nIf you don't have pip:\n\n```\neasy_install pip\n```\n\nNow execute when you have pip:\n\n```\npip install facebookads\n```\n\nIf you care for the latest version instead of a possibly outdated version in the\n<a href=\"https://pypi.python.org\">pypi.python.org</a> repository,\n<a href=\"https://github.com/facebook/facebook-python-ads-sdk\">check out the\nrepository from GitHub or download a release tarball</a>. Once you've got the\npackage downloaded and unzipped, install it:\n\n```\npython setup.py install\n```\n\nGreat, now you are ready to use the SDK!\n\n## Bootstrapping\n\nThe rest of the example code given will assume you have bootstrapped the api\ninto your program like the following sample app:\n\n```python\nfrom facebookads.api import FacebookAdsApi\nfrom facebookads import adobjects\n\nmy_app_id = '<APP_ID>'\nmy_app_secret = '<APP_SECRET>'\nmy_access_token = '<ACCESS_TOKEN>'\nproxies = {'http': '<HTTP_PROXY>', 'https': '<HTTPS_PROXY>'} # add proxies if needed\nFacebookAdsApi.init(my_app_id, my_app_secret, my_access_token, proxies)\n```\n\n**NOTE**: We shall use the adobjects module throughout the rest of the tutorial. You can \nalso use the individual class files under adobjects directly. \n\n## SDK Structure\n\nThe SDK contains the object module which has classes for every adobject. You\nwill notice that these classes are essentially extending individual class from \n``adobjects`` folder. We encourage you to use these files directly.We maintain the objects module \nfor compatibility and this will be removed starting 2.7.\n\n## Understanding CRUD\n\nThe SDK implements a CRUD (create, read, update, delete) design. Objects\nrelevant to exploring the graph are located in the objects module of the\nfacebookads package.\n\nAll objects on the graph are instances of ``AbstractObject``. Some objects can\nbe directly queried and thus are instances of ``AbstractCrudObject`` (a subclass\nof ``AbstractObject``). Both these abstract classes are located in\n``facebookads.adobjects``.\n\nAbstractCrudObject can have all or some of the following methods:\n\n* ``remote_create`` \n* ``remote_read``\n* ``remote_update``\n* ``remote_delete``\n\nIn the newest version of the SDK, you will notice an additional folder \n``adobjects`` under facebookads. Under this you will see a file for every ad object \nin our Marketing API. These files are autogenerated from our API and therefore \nare close in parity with what API has to offer. Based on what CRUD operations can be \nperformed on each object, you will see the presensce of the following methods in them:\n\n* ``api_create`` \n* ``api_get``\n* ``api_update``\n* ``api_delete``\n\nThe above methods have a one to one correspondence with the remote methods. \n\nFor example, Campaign has all these methods but AdAccount does not. Read the\nMarketing API documentation for more information about\n<a href=\"https://developers.facebook.com/docs/marketing-api/reference\">how different ad\nobjects are used</a>.\n\nYou can choose to continue to use the remote_* methods or the new methods. We offer \nboth so as to aviod breaking existing codes.\n\n## Exploring the Graph\n\nThe way the SDK abstracts the API is by defining classes that represent objects\non the graph. These class definitions and their helpers are located in\n``facebookads.adobjects``.\n\n### Initializing Objects\n\nLook at ``AbstractObject``'s and ``AbstractCrudObject``'s ``__init__`` method\nfor more information. Most objects on the graph subclass from one of the two.\n\nWhen instantiating an ad object, you can specify its id if it already exists by\ndefining ``fbid`` argument. You can specify an object's parent id as well by\ndefining the ``parent_id`` argument. Lastly, if you want to interact with the\nAPI using a specific api object instead of the default, you can specify the\n``api`` argument.\n\n### Edges\n\nLook at the methods of an object to see what associations over which we can\niterate. For example an ``AdAccountUser`` object has a method ``get_ad_accounts`` which\nreturns an iterator of ``AdAccount`` objects.\n\n### Ad Account\n\nMost ad-related operations are in the context of an ad account. You can go to\n<a href=\"https://www.facebook.com/ads/manage\">Ads Manager</a> to see accounts\nfor which you have permission. Most of you probably have a personal account.\n\nLet's get all the ad accounts for the user with the given access token. I only\nhave one account so the following is printed:\n\n```python\n>>> me = adobjects.AdAccountUser(fbid='me')\n>>> my_accounts = list(me.get_ad_accounts())\n>>> print(my_accounts)\n[{   'account_id': u'17842443', 'id': u'act_17842443'}]\n>>> type(my_accounts[0])\n<class 'facebookads.adobjects.AdAccount'>\n```\n\n**WARNING**: We do not specify a keyword argument ``api=api`` when instantiating\nthe ``AdAccountUser`` object here because we've already set the default api when\nbootstrapping.\n\n**NOTE**: We wrap the return value of ``get_ad_accounts`` with ``list()``\nbecause ``get_ad_accounts`` returns an ``EdgeIterator`` object (located in\n``facebookads.adobjects``) and we want to get the full list right away instead of\nhaving the iterator lazily loading accounts.\n\nFor our purposes, we can just pick an account and do our experiments in its\ncontext:\n\n```python\n>>> my_account = my_accounts[0]\n```\n\nOr if you already know your account id:\n\n```python\n>>> my_account = objects.AdAccount('act_17842443')\n```\n\n## Create\n\nLet's create a campaign. It's in the context of the account, i.e. its parent\nshould be the account.\n\n```python\ncampaign = objects.Campaign(parent_id = my_account.get_id_assured())\n```\n\nThen we specify some details about the campaign. To figure out what properties\nto define, you should look at the available fields of the object (located in\n``Campaign.Field``) and also look at the ad object's documentation (e.g.\n<a href=\"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group\">\nCampaign</a>).\n\n**NOTE**: To find out the fields, look at the individual class file under adobjects \ndirectory. \n\n```python\ncampaign[objects.Campaign.Field.name] = \"Potato Campain\" # sic\ncampaign[objects.Campaign.Field.configured_status] = objects.Campaign.Status.paused\n```\n\nFinally, we make the create request by calling the ``remote_create`` method.\n\n```python\ncampaign.remote_create()\n```\n\nIf there's an error, an exception will be raised. Possible exceptions and their\ndescriptions are listed in ``facebookads.exceptions``.\n\n## Read\n\nWe can also read properties of an object from the api assuming that the object\nis already created and has a node path. Accessing properties of an object is\nsimple since ``AbstractObject`` implements the ``collections.MutableMapping``.\nYou can access them just like accessing a key of a dictionary:\n\n```python\n>>> print(my_account)\n{'account_id': u'17842443', 'id': u'act_17842443'}\n>>> my_account.remote_read(fields=[objects.AdAccount.Field.amount_spent])\n>>> print(my_account[objects.AdAccount.Field.amount_spent])\n{'amount_spent': 21167, 'account_id': u'17842443', 'id': u'act_17842443'}\n```\n\n## Update\n\nTo update an object, we can modify its properties and then call the\n``remote_update`` method to sync the object with the server. Let's correct the\ntypo \"Campain\" to \"Campaign\":\n\n```python\n>>> campaign[objects.Campaign.Field.name] = \"Potato Campaign\"\n>>> campaign.remote_update()\n```\n\nYou can see the results in ads manager.\n\n## Delete\n\nIf we decide we don't want the campaign we created anymore:\n\n```python\ncampaign.remote_delete()\n```\n\n## Useful Arguments\n\n### MULTIPLE ACCESS TOKENS\n\nThroughout the docs, the method FacebookAdsApi.init is called before making any API calls. This\nmethod set up a default FacebookAdsApi object to be used everywhere. That simplifies the usage\nbut it's not feasible when a system using the SDK will make calls on behalf of multiple users.\n\nThe reason why this is not feasible is because each user should have its own FacebookSession, with its own\naccess token, rather than using the same session for every one. Each session should be used to create a\nseparate FacebookAdsApi object. See example below:\n\n\n```python\nmy_app_id = '<APP_ID>'\nmy_app_secret = '<APP_SECRET>'\nmy_access_token_1 = '<ACCESS_TOKEN_1>'\nmy_access_token_2 = '<ACCESS_TOKEN_2>'\nproxies = {'http': '<HTTP_PROXY>', 'https': '<HTTPS_PROXY>'} # add proxies if needed\n\nsession1 = FacebookSession(\n    my_app_id,\n    my_app_secret,\n    my_access_token_1,\n    proxies,\n)\n\nsession2 = FacebookSession(\n    my_app_id,\n    my_app_secret,\n    my_access_token_2,\n    proxies,\n)\n\napi1 = FacebookAdsApi(session1)\napi2 = FacebookAdsApi(session2)\n```\nIn the SDK examples, we always set a single FacebookAdsApi object as the default one.\nHowever, working with multiples access_tokens, require us to use multiples apis. We may set a default\napi for a user, but, for the other users,  we shall use its the api object as a param. In the example below,\nwe create two AdAccountUsers, the first one using the default api and the second one using its api object:\n\n```python\nFacebookAdsApi.set_default_api(api1)\n\nme1 = AdAccountUser(fbid='me')\nme2 = AdAccountUser(fbid='me', api=api2)\n```\nAnother way to create the same objects from above would be:\n\n```python\nme1 = AdAccountUser(fbid='me', api=api1)\nme2 = AdAccountUser(fbid='me', api=api2)\n```\nFrom here, all the following workflow for these objects remains the same. The only exceptions are\nthe classmethods calls, where we now should pass the api we want to use as the last parameter\non every call. For instance, a call to the AdAccountUser.get_by_ids method should be like this:\n\n```python\nsession = FacebookSession(\n my_app_id,\n my_app_secret,\n my_access_token_1,\n proxies,\n)\n\napi = FacebookAdsApi(session1)\nAdAccountUser.get_by_ids(ids=['<UID_1>', '<UID_2>'], api=api)\n```\n### CRUD\n\nAll CRUD calls support a ``params`` keyword argument which takes a dictionary\nmapping parameter names to values in case advanced modification is required. You\ncan find the list of parameter names as attributes of\n``{your object class}.Field``. Under the Field class there may be other classes\nwhich contain, as attributes, valid fields of the value of one of the parent\nproperties.\n\n``remote_create`` and ``remote_update`` support a ``files`` keyword argument\nwhich takes a dictionary mapping file reference names to binary opened file\nobjects.\n\n``remote_read`` supports a ``fields`` keyword argument which is a convenient way\nof specifying the 'fields' parameter. ``fields`` takes a list of fields which\nshould be read during the call. The valid fields can be found as attributes of\nthe class Field.\n\n### Edges\n\nWhen initializing an ``EdgeIterator`` or when calling a method such as\n``AdAccount.get_ad_campaigns``:\n\n* You can specify a ``fields`` argument which takes a list of fields to read for\nthe objects being read.\n* You can specify a ``params`` argument that can help you specify or filter the\nedge more precisely.\n\n## Batch Calling\n\nIt is efficient to group together large numbers of calls into one http request.\nThe SDK makes this process simple. You can group together calls into an instance\nof ``FacebookAdsApiBatch`` (available in facebookads.api). To easily get one\nfor your api instance:\n\n```python\nmy_api_batch = api.new_batch()\n```\n\nCalls can be added to the batch instead of being executed immediately:\n\n```python\ncampaign.remote_delete(batch=my_api_batch)\n```\n\nRequests can be saved to load the response after the batch call:\n\n```python\nrequest = campaign.get_insights(batch=my_api_batch)\n```\n\nOnce you're finished adding calls to the batch, you can send off the request:\n\n```python\nmy_api_batch.execute()\n```\n\nAfter the batch call you may load your response: \n```python\nresponse = request.load()\n```\n\nPlease follow <a href=\"https://developers.facebook.com/docs/graph-api/making-multiple-requests\">\nbatch call guidelines in the Marketing API documentation</a>. There are optimal\nnumbers of calls per batch. In addition, you may need to watch out that for rate\nlimiting as a batch call simply improves network performance and each call does\ncount individually towards rate limiting.\n\n## Exceptions\n\nSee ``facebookads.exceptions`` for a list of exceptions which may be thrown by\nthe SDK.\n\n## Tests\n\n### Unit tests\n\nThe unit tests don't require an access token or network access. Run them\nwith your default installed Python as follows:\n\n```\npython -m facebookads.test.unit\n```\n\nYou can also use tox to run the unit tests with multiple Python versions:\n\n```\nsudo apt-get install python-tox  # Debian/Ubuntu\nsudo yum install python-tox      # Fedora\ntox --skip-missing-interpreters\n```\n\nYou can increase interpreter coverage by installing additional versions of\nPython. On Ubuntu you can use the\n[deadsnakes PPA](https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes).\nOn other distributions you can\n[build from source](https://www.python.org/downloads/) and then use\n`sudo make altinstall` to avoid conflicts with your system-installed\nversion.\n\n### Integration tests\n\nThe integration tests require an access token with ads_management scope.\nYou can obtain a short-lived token from the\n[Graph API Explorer](https://developers.facebook.com/tools/explorer/).\nThese tests access the live Facebook API but shouldn't actually\nlaunch an ad or spend any money.\n\nCopy the `config.json.example` to `config.json` and fill in the appropriate\ndetails.\n\n```\npython -m facebookads.test.integration <ACCESS_TOKEN>\n# Access token not required if it's defined in config.json\n```\n\n## Examples\n\nExamples of usage are located in the ``examples/`` folder.\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/facebook/facebook-python-ads-sdk/tarball/2.11.4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/facebook/facebook-python-ads-sdk", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "facebookads", "package_url": "https://pypi.org/project/facebookads/", "platform": "", "project_url": "https://pypi.org/project/facebookads/", "project_urls": {"Download": "https://github.com/facebook/facebook-python-ads-sdk/tarball/2.11.4", "Homepage": "https://github.com/facebook/facebook-python-ads-sdk"}, "release_url": "https://pypi.org/project/facebookads/2.11.4/", "requires_dist": null, "requires_python": "", "summary": "Facebook Ads API SDK", "version": "2.11.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Marketing API SDK for Python<br><br>[![Build Status](https://travis-ci.org/facebook/facebook-python-ads-sdk.svg)](https://travis-ci.org/facebook/facebook-python-ads-sdk)<br><br>## The Ads SDK for Python provides an easy interface and abstraction to the Marketing API.<br><br>Python is currently the most popular language for our third party ads<br>developers. ``facebookads`` is a Python package that provides an interface<br>between your Python application and Facebook's<br>&lt;a href=\"https://developers.facebook.com/docs/marketing-apis\"&gt;Marketing API&lt;/a&gt;. This<br>tutorial covers the basics knowledge needed to use the SDK and provide some<br>exercises for the reader.<br><br>**NOTE**: ``facebookads`` package is compatible with Python 2 and 3!<br><br>## Pre-requisites<br><br>### An App<br><br>To get started with the SDK you must have a Facebook app<br>&lt;a href=\"https://developers.facebook.com/\"&gt;registered on<br>developers.facebook.com&lt;/a&gt;.<br><br>**IMPORTANT**: Enable all migrations in the App's Settings-&gt;Migrations page.<br><br>**IMPORTANT**: For extra security, the SDK requires that you set 'Require App Secret' to *Yes* on your app's Settings-&gt;Advanced page.<br><br>Your app should now be able to use the Marketing API!<br><br>### An Access Token<br><br>You need to generate a user access token for your app and ask for the<br>``ads_management`` permission. It is expected that an app in production will<br>build its own infrastructure to interact with a user to generate an access token<br>and choose an account to manage.<br>&lt;a href=\"https://developers.facebook.com/docs/marketing-api/using-the-api\"&gt;Learn<br>more about access tokens here&lt;/a&gt;.<br><br>For now, we can use the<br>&lt;a href=\"https://developers.facebook.com/tools/explorer\"&gt;Graph Explorer&lt;/a&gt; to<br>get an access token. Select your App from the dropdown in the top right, and then generate a token with the premissions you want to test with.<br><br>## Install package<br><br>The easiest way to install the SDK is via ``pip`` in your shell.<br><br>**NOTE**: For Python 3, use ``pip3`` and ``python3`` instead.<br><br>**NOTE**: Use ``sudo`` if any of these complain about permissions. (This might<br>happen if you are using a system installed Python.)<br><br>If you don't have pip:<br><br>```<br>easy_install pip<br>```<br><br>Now execute when you have pip:<br><br>```<br>pip install facebookads<br>```<br><br>If you care for the latest version instead of a possibly outdated version in the<br>&lt;a href=\"https://pypi.python.org\"&gt;pypi.python.org&lt;/a&gt; repository,<br>&lt;a href=\"https://github.com/facebook/facebook-python-ads-sdk\"&gt;check out the<br>repository from GitHub or download a release tarball&lt;/a&gt;. Once you've got the<br>package downloaded and unzipped, install it:<br><br>```<br>python setup.py install<br>```<br><br>Great, now you are ready to use the SDK!<br><br>## Bootstrapping<br><br>The rest of the example code given will assume you have bootstrapped the api<br>into your program like the following sample app:<br><br>```python<br>from facebookads.api import FacebookAdsApi<br>from facebookads import adobjects<br><br>my_app_id = '&lt;APP_ID&gt;'<br>my_app_secret = '&lt;APP_SECRET&gt;'<br>my_access_token = '&lt;ACCESS_TOKEN&gt;'<br>proxies = {'http': '&lt;HTTP_PROXY&gt;', 'https': '&lt;HTTPS_PROXY&gt;'} # add proxies if needed<br>FacebookAdsApi.init(my_app_id, my_app_secret, my_access_token, proxies)<br>```<br><br>**NOTE**: We shall use the adobjects module throughout the rest of the tutorial. You can <br>also use the individual class files under adobjects directly. <br><br>## SDK Structure<br><br>The SDK contains the object module which has classes for every adobject. You<br>will notice that these classes are essentially extending individual class from <br>``adobjects`` folder. We encourage you to use these files directly.We maintain the objects module <br>for compatibility and this will be removed starting 2.7.<br><br>## Understanding CRUD<br><br>The SDK implements a CRUD (create, read, update, delete) design. Objects<br>relevant to exploring the graph are located in the objects module of the<br>facebookads package.<br><br>All objects on the graph are instances of ``AbstractObject``. Some objects can<br>be directly queried and thus are instances of ``AbstractCrudObject`` (a subclass<br>of ``AbstractObject``). Both these abstract classes are located in<br>``facebookads.adobjects``.<br><br>AbstractCrudObject can have all or some of the following methods:<br><br>* ``remote_create`` <br>* ``remote_read``<br>* ``remote_update``<br>* ``remote_delete``<br><br>In the newest version of the SDK, you will notice an additional folder <br>``adobjects`` under facebookads. Under this you will see a file for every ad object <br>in our Marketing API. These files are autogenerated from our API and therefore <br>are close in parity with what API has to offer. Based on what CRUD operations can be <br>performed on each object, you will see the presensce of the following methods in them:<br><br>* ``api_create`` <br>* ``api_get``<br>* ``api_update``<br>* ``api_delete``<br><br>The above methods have a one to one correspondence with the remote methods. <br><br>For example, Campaign has all these methods but AdAccount does not. Read the<br>Marketing API documentation for more information about<br>&lt;a href=\"https://developers.facebook.com/docs/marketing-api/reference\"&gt;how different ad<br>objects are used&lt;/a&gt;.<br><br>You can choose to continue to use the remote_* methods or the new methods. We offer <br>both so as to aviod breaking existing codes.<br><br>## Exploring the Graph<br><br>The way the SDK abstracts the API is by defining classes that represent objects<br>on the graph. These class definitions and their helpers are located in<br>``facebookads.adobjects``.<br><br>### Initializing Objects<br><br>Look at ``AbstractObject``'s and ``AbstractCrudObject``'s ``__init__`` method<br>for more information. Most objects on the graph subclass from one of the two.<br><br>When instantiating an ad object, you can specify its id if it already exists by<br>defining ``fbid`` argument. You can specify an object's parent id as well by<br>defining the ``parent_id`` argument. Lastly, if you want to interact with the<br>API using a specific api object instead of the default, you can specify the<br>``api`` argument.<br><br>### Edges<br><br>Look at the methods of an object to see what associations over which we can<br>iterate. For example an ``AdAccountUser`` object has a method ``get_ad_accounts`` which<br>returns an iterator of ``AdAccount`` objects.<br><br>### Ad Account<br><br>Most ad-related operations are in the context of an ad account. You can go to<br>&lt;a href=\"https://www.facebook.com/ads/manage\"&gt;Ads Manager&lt;/a&gt; to see accounts<br>for which you have permission. Most of you probably have a personal account.<br><br>Let's get all the ad accounts for the user with the given access token. I only<br>have one account so the following is printed:<br><br>```python<br>&gt;&gt;&gt; me = adobjects.AdAccountUser(fbid='me')<br>&gt;&gt;&gt; my_accounts = list(me.get_ad_accounts())<br>&gt;&gt;&gt; print(my_accounts)<br>[{   'account_id': u'17842443', 'id': u'act_17842443'}]<br>&gt;&gt;&gt; type(my_accounts[0])<br>&lt;class 'facebookads.adobjects.AdAccount'&gt;<br>```<br><br>**WARNING**: We do not specify a keyword argument ``api=api`` when instantiating<br>the ``AdAccountUser`` object here because we've already set the default api when<br>bootstrapping.<br><br>**NOTE**: We wrap the return value of ``get_ad_accounts`` with ``list()``<br>because ``get_ad_accounts`` returns an ``EdgeIterator`` object (located in<br>``facebookads.adobjects``) and we want to get the full list right away instead of<br>having the iterator lazily loading accounts.<br><br>For our purposes, we can just pick an account and do our experiments in its<br>context:<br><br>```python<br>&gt;&gt;&gt; my_account = my_accounts[0]<br>```<br><br>Or if you already know your account id:<br><br>```python<br>&gt;&gt;&gt; my_account = objects.AdAccount('act_17842443')<br>```<br><br>## Create<br><br>Let's create a campaign. It's in the context of the account, i.e. its parent<br>should be the account.<br><br>```python<br>campaign = objects.Campaign(parent_id = my_account.get_id_assured())<br>```<br><br>Then we specify some details about the campaign. To figure out what properties<br>to define, you should look at the available fields of the object (located in<br>``Campaign.Field``) and also look at the ad object's documentation (e.g.<br>&lt;a href=\"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group\"&gt;<br>Campaign&lt;/a&gt;).<br><br>**NOTE**: To find out the fields, look at the individual class file under adobjects <br>directory. <br><br>```python<br>campaign[objects.Campaign.Field.name] = \"Potato Campain\" # sic<br>campaign[objects.Campaign.Field.configured_status] = objects.Campaign.Status.paused<br>```<br><br>Finally, we make the create request by calling the ``remote_create`` method.<br><br>```python<br>campaign.remote_create()<br>```<br><br>If there's an error, an exception will be raised. Possible exceptions and their<br>descriptions are listed in ``facebookads.exceptions``.<br><br>## Read<br><br>We can also read properties of an object from the api assuming that the object<br>is already created and has a node path. Accessing properties of an object is<br>simple since ``AbstractObject`` implements the ``collections.MutableMapping``.<br>You can access them just like accessing a key of a dictionary:<br><br>```python<br>&gt;&gt;&gt; print(my_account)<br>{'account_id': u'17842443', 'id': u'act_17842443'}<br>&gt;&gt;&gt; my_account.remote_read(fields=[objects.AdAccount.Field.amount_spent])<br>&gt;&gt;&gt; print(my_account[objects.AdAccount.Field.amount_spent])<br>{'amount_spent': 21167, 'account_id': u'17842443', 'id': u'act_17842443'}<br>```<br><br>## Update<br><br>To update an object, we can modify its properties and then call the<br>``remote_update`` method to sync the object with the server. Let's correct the<br>typo \"Campain\" to \"Campaign\":<br><br>```python<br>&gt;&gt;&gt; campaign[objects.Campaign.Field.name] = \"Potato Campaign\"<br>&gt;&gt;&gt; campaign.remote_update()<br>```<br><br>You can see the results in ads manager.<br><br>## Delete<br><br>If we decide we don't want the campaign we created anymore:<br><br>```python<br>campaign.remote_delete()<br>```<br><br>## Useful Arguments<br><br>### MULTIPLE ACCESS TOKENS<br><br>Throughout the docs, the method FacebookAdsApi.init is called before making any API calls. This<br>method set up a default FacebookAdsApi object to be used everywhere. That simplifies the usage<br>but it's not feasible when a system using the SDK will make calls on behalf of multiple users.<br><br>The reason why this is not feasible is because each user should have its own FacebookSession, with its own<br>access token, rather than using the same session for every one. Each session should be used to create a<br>separate FacebookAdsApi object. See example below:<br><br><br>```python<br>my_app_id = '&lt;APP_ID&gt;'<br>my_app_secret = '&lt;APP_SECRET&gt;'<br>my_access_token_1 = '&lt;ACCESS_TOKEN_1&gt;'<br>my_access_token_2 = '&lt;ACCESS_TOKEN_2&gt;'<br>proxies = {'http': '&lt;HTTP_PROXY&gt;', 'https': '&lt;HTTPS_PROXY&gt;'} # add proxies if needed<br><br>session1 = FacebookSession(<br>    my_app_id,<br>    my_app_secret,<br>    my_access_token_1,<br>    proxies,<br>)<br><br>session2 = FacebookSession(<br>    my_app_id,<br>    my_app_secret,<br>    my_access_token_2,<br>    proxies,<br>)<br><br>api1 = FacebookAdsApi(session1)<br>api2 = FacebookAdsApi(session2)<br>```<br>In the SDK examples, we always set a single FacebookAdsApi object as the default one.<br>However, working with multiples access_tokens, require us to use multiples apis. We may set a default<br>api for a user, but, for the other users,  we shall use its the api object as a param. In the example below,<br>we create two AdAccountUsers, the first one using the default api and the second one using its api object:<br><br>```python<br>FacebookAdsApi.set_default_api(api1)<br><br>me1 = AdAccountUser(fbid='me')<br>me2 = AdAccountUser(fbid='me', api=api2)<br>```<br>Another way to create the same objects from above would be:<br><br>```python<br>me1 = AdAccountUser(fbid='me', api=api1)<br>me2 = AdAccountUser(fbid='me', api=api2)<br>```<br>From here, all the following workflow for these objects remains the same. The only exceptions are<br>the classmethods calls, where we now should pass the api we want to use as the last parameter<br>on every call. For instance, a call to the AdAccountUser.get_by_ids method should be like this:<br><br>```python<br>session = FacebookSession(<br> my_app_id,<br> my_app_secret,<br> my_access_token_1,<br> proxies,<br>)<br><br>api = FacebookAdsApi(session1)<br>AdAccountUser.get_by_ids(ids=['&lt;UID_1&gt;', '&lt;UID_2&gt;'], api=api)<br>```<br>### CRUD<br><br>All CRUD calls support a ``params`` keyword argument which takes a dictionary<br>mapping parameter names to values in case advanced modification is required. You<br>can find the list of parameter names as attributes of<br>``{your object class}.Field``. Under the Field class there may be other classes<br>which contain, as attributes, valid fields of the value of one of the parent<br>properties.<br><br>``remote_create`` and ``remote_update`` support a ``files`` keyword argument<br>which takes a dictionary mapping file reference names to binary opened file<br>objects.<br><br>``remote_read`` supports a ``fields`` keyword argument which is a convenient way<br>of specifying the 'fields' parameter. ``fields`` takes a list of fields which<br>should be read during the call. The valid fields can be found as attributes of<br>the class Field.<br><br>### Edges<br><br>When initializing an ``EdgeIterator`` or when calling a method such as<br>``AdAccount.get_ad_campaigns``:<br><br>* You can specify a ``fields`` argument which takes a list of fields to read for<br>the objects being read.<br>* You can specify a ``params`` argument that can help you specify or filter the<br>edge more precisely.<br><br>## Batch Calling<br><br>It is efficient to group together large numbers of calls into one http request.<br>The SDK makes this process simple. You can group together calls into an instance<br>of ``FacebookAdsApiBatch`` (available in facebookads.api). To easily get one<br>for your api instance:<br><br>```python<br>my_api_batch = api.new_batch()<br>```<br><br>Calls can be added to the batch instead of being executed immediately:<br><br>```python<br>campaign.remote_delete(batch=my_api_batch)<br>```<br><br>Requests can be saved to load the response after the batch call:<br><br>```python<br>request = campaign.get_insights(batch=my_api_batch)<br>```<br><br>Once you're finished adding calls to the batch, you can send off the request:<br><br>```python<br>my_api_batch.execute()<br>```<br><br>After the batch call you may load your response: <br>```python<br>response = request.load()<br>```<br><br>Please follow &lt;a href=\"https://developers.facebook.com/docs/graph-api/making-multiple-requests\"&gt;<br>batch call guidelines in the Marketing API documentation&lt;/a&gt;. There are optimal<br>numbers of calls per batch. In addition, you may need to watch out that for rate<br>limiting as a batch call simply improves network performance and each call does<br>count individually towards rate limiting.<br><br>## Exceptions<br><br>See ``facebookads.exceptions`` for a list of exceptions which may be thrown by<br>the SDK.<br><br>## Tests<br><br>### Unit tests<br><br>The unit tests don't require an access token or network access. Run them<br>with your default installed Python as follows:<br><br>```<br>python -m facebookads.test.unit<br>```<br><br>You can also use tox to run the unit tests with multiple Python versions:<br><br>```<br>sudo apt-get install python-tox  # Debian/Ubuntu<br>sudo yum install python-tox      # Fedora<br>tox --skip-missing-interpreters<br>```<br><br>You can increase interpreter coverage by installing additional versions of<br>Python. On Ubuntu you can use the<br>[deadsnakes PPA](https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes).<br>On other distributions you can<br>[build from source](https://www.python.org/downloads/) and then use<br>`sudo make altinstall` to avoid conflicts with your system-installed<br>version.<br><br>### Integration tests<br><br>The integration tests require an access token with ads_management scope.<br>You can obtain a short-lived token from the<br>[Graph API Explorer](https://developers.facebook.com/tools/explorer/).<br>These tests access the live Facebook API but shouldn't actually<br>launch an ad or spend any money.<br><br>Copy the `config.json.example` to `config.json` and fill in the appropriate<br>details.<br><br>```<br>python -m facebookads.test.integration &lt;ACCESS_TOKEN&gt;<br># Access token not required if it's defined in config.json<br>```<br><br>## Examples<br><br>Examples of usage are located in the ``examples/`` folder.<br>\n          </div>"}, "last_serial": 4338618, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "598357d5bf40d5a320869bd734ca8246", "sha256": "747647c67fc549e5d3a160f20403a424774bbe07471ea5571d638d4702fb3d8d"}, "downloads": -1, "filename": "facebookads-0.1.tar.gz", "has_sig": false, "md5_digest": "598357d5bf40d5a320869bd734ca8246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584590, "upload_time": "2014-09-03T04:58:09", "upload_time_iso_8601": "2014-09-03T04:58:09.394975Z", "url": "https://files.pythonhosted.org/packages/b0/cc/38b628fa0872b1c5d577425631c35ce8e5bd10c58cc7c585c87720728704/facebookads-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fc944a6bc9b28cd121ea86da851cec13", "sha256": "40f5e5b83f26a05f3c3d6b9bc61545c714c5ff5b9c8b5017a51519f4256e5535"}, "downloads": -1, "filename": "facebookads-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fc944a6bc9b28cd121ea86da851cec13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584818, "upload_time": "2014-09-08T21:45:31", "upload_time_iso_8601": "2014-09-08T21:45:31.144025Z", "url": "https://files.pythonhosted.org/packages/f3/7b/dce2b76c47ebce0cdf198a6209f99ae2c1b673bede6b827141f01802cd56/facebookads-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "58e690e765715d91a50e211a9f1f159a", "sha256": "fb4d2a0c3e06da663e55b4db6bbb87494587e319acadf2329af6639274e39537"}, "downloads": -1, "filename": "facebookads-0.2.0.tar.gz", "has_sig": false, "md5_digest": "58e690e765715d91a50e211a9f1f159a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 377256, "upload_time": "2014-10-24T00:55:57", "upload_time_iso_8601": "2014-10-24T00:55:57.248815Z", "url": "https://files.pythonhosted.org/packages/83/f7/62af39ba025d906776c98f97a512257dbe4c81b0a0ce960a221df00977b8/facebookads-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e7f44295bc162c52ac594c9db7b152ea", "sha256": "22ae05b22340c35971d1be5e82a6fcef55d34f897f5aa2db941c5a18e65ce5be"}, "downloads": -1, "filename": "facebookads-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e7f44295bc162c52ac594c9db7b152ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 377220, "upload_time": "2014-10-26T01:04:04", "upload_time_iso_8601": "2014-10-26T01:04:04.146389Z", "url": "https://files.pythonhosted.org/packages/52/db/77cd96a1b5d8dcb58ac7904d753d51e42ecc874a2b3238b72ae8ad4e578f/facebookads-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "192d56878f27de56cb9fcbf002399609", "sha256": "a09e1a090b32e3e77c922c4dab65bd8c6306acb949bf9eb1f9cc2fee61fe6c5f"}, "downloads": -1, "filename": "facebookads-0.2.2.tar.gz", "has_sig": false, "md5_digest": "192d56878f27de56cb9fcbf002399609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 377273, "upload_time": "2014-10-28T17:10:13", "upload_time_iso_8601": "2014-10-28T17:10:13.127588Z", "url": "https://files.pythonhosted.org/packages/4c/b7/1aeb6273e6d7570f4948ca19c6b82c723a4d595e18acb02c9962a6427ff5/facebookads-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3530aabc9270cc77e3a6af5c4cfbfe6d", "sha256": "09a1909da0305a23bb490de504363c208ca25356d51814ae8fdf63845e9db7ab"}, "downloads": -1, "filename": "facebookads-0.2.3.tar.gz", "has_sig": false, "md5_digest": "3530aabc9270cc77e3a6af5c4cfbfe6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378067, "upload_time": "2014-10-28T17:57:34", "upload_time_iso_8601": "2014-10-28T17:57:34.995014Z", "url": "https://files.pythonhosted.org/packages/8d/30/3e5fecd31dc0a436c8a5bdc52a92d178aca9665ce2a3bd0e48285fdf9616/facebookads-0.2.3.tar.gz", "yanked": false}], "2.10.1": [{"comment_text": "", "digests": {"md5": "2f12c88d41848748c6f88ab8f20526b6", "sha256": "6b32fd54dc5cc976f44e3fcb0d2df2fe0aff148208902f7c982963d6d11d62bd"}, "downloads": -1, "filename": "facebookads-2.10.1.tar.gz", "has_sig": false, "md5_digest": "2f12c88d41848748c6f88ab8f20526b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 287384, "upload_time": "2017-07-18T21:56:00", "upload_time_iso_8601": "2017-07-18T21:56:00.650504Z", "url": "https://files.pythonhosted.org/packages/a9/bc/a72ebf1461ace28779cbd4bc12894af968761c5629e652cfea9c722c7574/facebookads-2.10.1.tar.gz", "yanked": false}], "2.11.1": [{"comment_text": "", "digests": {"md5": "50ce9979b3d5bd5b3af3e8355e270a3a", "sha256": "6f0ddf41ce4a0a2577099f6ba5a6028e1ed677a31d68a4f24182d65b83d2a150"}, "downloads": -1, "filename": "facebookads-2.11.1.tar.gz", "has_sig": false, "md5_digest": "50ce9979b3d5bd5b3af3e8355e270a3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 294138, "upload_time": "2017-11-08T10:37:39", "upload_time_iso_8601": "2017-11-08T10:37:39.241445Z", "url": "https://files.pythonhosted.org/packages/d7/47/cafb0863c86226be8ac2c27df356b63b8106f1cd3ed8431a1b8e848e5cdf/facebookads-2.11.1.tar.gz", "yanked": false}], "2.11.3": [{"comment_text": "", "digests": {"md5": "35586da062432fe539433e29d295e403", "sha256": "d01194bb7966e09961e3436137fd8b2077ab81a92b98d0e5f914a602a02e760d"}, "downloads": -1, "filename": "facebookads-2.11.3.tar.gz", "has_sig": false, "md5_digest": "35586da062432fe539433e29d295e403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 296358, "upload_time": "2018-01-22T23:05:19", "upload_time_iso_8601": "2018-01-22T23:05:19.614830Z", "url": "https://files.pythonhosted.org/packages/b4/38/ae43fee543fd7612e62b508cd233743b8960b147e57c8bd97afa64f4ae6f/facebookads-2.11.3.tar.gz", "yanked": false}], "2.11.4": [{"comment_text": "", "digests": {"md5": "85b0cc6937e38093fcbffdb15065808e", "sha256": "47820e2f7a237c793425e4228f49e430a0b83a892aeaa77dcdd00c1ad920470c"}, "downloads": -1, "filename": "facebookads-2.11.4.tar.gz", "has_sig": false, "md5_digest": "85b0cc6937e38093fcbffdb15065808e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 295722, "upload_time": "2018-03-26T21:22:41", "upload_time_iso_8601": "2018-03-26T21:22:41.103388Z", "url": "https://files.pythonhosted.org/packages/98/23/49d291a5bbecca7a9c63a81bdbd19ee28e48763a1a46de93cb235110d651/facebookads-2.11.4.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "ebb859b31c4465ecfb3c5a291fb9a558", "sha256": "1aea7c21ac01fce9ff361bf1f718048e1e64d992c7de8df54b0dff3559fe41b8"}, "downloads": -1, "filename": "facebookads-2.2.0.tar.gz", "has_sig": false, "md5_digest": "ebb859b31c4465ecfb3c5a291fb9a558", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 379745, "upload_time": "2014-10-30T20:34:56", "upload_time_iso_8601": "2014-10-30T20:34:56.707828Z", "url": "https://files.pythonhosted.org/packages/f7/fd/3d35536611e97c39ff4dc65dc46e347307d711b504b1e44c01a96b651091/facebookads-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "995084e887544f498bdb156ca246985f", "sha256": "73bd4ee1c989c2ae710ce6269a094c97471ff4295b8de413d3e1929a25c42211"}, "downloads": -1, "filename": "facebookads-2.2.1.tar.gz", "has_sig": false, "md5_digest": "995084e887544f498bdb156ca246985f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 380418, "upload_time": "2014-11-07T22:07:48", "upload_time_iso_8601": "2014-11-07T22:07:48.131277Z", "url": "https://files.pythonhosted.org/packages/27/5c/eb9601c2e3a5947ae998e154c84d06339584eeab238f1ac7f6aa050b9643/facebookads-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "eeee32cc3c4785e49d2867690e209408", "sha256": "2d03484680e2046b8fb0baff39487322b70c183fa246bddf7d545899b4ccedc8"}, "downloads": -1, "filename": "facebookads-2.2.2.tar.gz", "has_sig": false, "md5_digest": "eeee32cc3c4785e49d2867690e209408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 181077, "upload_time": "2014-11-21T16:41:06", "upload_time_iso_8601": "2014-11-21T16:41:06.604262Z", "url": "https://files.pythonhosted.org/packages/7b/ec/31a3d459b916962514b7e65361eb1afa73905d3b5283cccea8a80087c3c3/facebookads-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "07fde3410c133d0a6b89f43df6de3c7c", "sha256": "df0a27c00ca76367b0de7a262887f2dfe47d66800a455d2b747afa7ad658f0a4"}, "downloads": -1, "filename": "facebookads-2.2.3.tar.gz", "has_sig": false, "md5_digest": "07fde3410c133d0a6b89f43df6de3c7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 181921, "upload_time": "2014-12-12T18:59:18", "upload_time_iso_8601": "2014-12-12T18:59:18.398243Z", "url": "https://files.pythonhosted.org/packages/b6/04/b764f366ec769a4448f6c45913ea57b1cde12e3e52c312fffb87396c468d/facebookads-2.2.3.tar.gz", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "55ec16ae774f223b316f1ff0ba0b71d9", "sha256": "aab2b498536625b913cb479b658a1f399514dde82d570cde9042b4a4c834a43e"}, "downloads": -1, "filename": "facebookads-2.2.4.tar.gz", "has_sig": false, "md5_digest": "55ec16ae774f223b316f1ff0ba0b71d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186666, "upload_time": "2015-01-24T00:24:52", "upload_time_iso_8601": "2015-01-24T00:24:52.021684Z", "url": "https://files.pythonhosted.org/packages/70/1d/693682b248c40e0474d15aa745942825abb7d7d3c2ebbc0058b3f082d121/facebookads-2.2.4.tar.gz", "yanked": false}], "2.2.5": [{"comment_text": "", "digests": {"md5": "ddf339e756f45880d16f4ea7fb0739d9", "sha256": "689d55c5b81fa93362913119cd5b836ab4e25c849a4a9109d56ba1170eb3bfae"}, "downloads": -1, "filename": "facebookads-2.2.5.tar.gz", "has_sig": false, "md5_digest": "ddf339e756f45880d16f4ea7fb0739d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 188079, "upload_time": "2015-02-17T17:52:40", "upload_time_iso_8601": "2015-02-17T17:52:40.145850Z", "url": "https://files.pythonhosted.org/packages/a0/ef/98a943eb5d27f5cc9134434f4c63e6264afdfaf14c332b5350021106ec62/facebookads-2.2.5.tar.gz", "yanked": false}], "2.2.6": [{"comment_text": "", "digests": {"md5": "3a93d77e08bacfae0654125d829a803e", "sha256": "b3a1713a8e2a36aadc5f54d350e7ecdabe1a070786dfbf8ef6518e5e88e0f849"}, "downloads": -1, "filename": "facebookads-2.2.6.tar.gz", "has_sig": false, "md5_digest": "3a93d77e08bacfae0654125d829a803e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 188101, "upload_time": "2015-03-03T01:25:48", "upload_time_iso_8601": "2015-03-03T01:25:48.395516Z", "url": "https://files.pythonhosted.org/packages/d4/c4/f894d0da8db65cd3d409f12ea0e920d097da0cacba33d8641e2acd74e197/facebookads-2.2.6.tar.gz", "yanked": false}], "2.2.7": [{"comment_text": "", "digests": {"md5": "648005781b2bc82183363f76ba09ddf1", "sha256": "1d86333de5c0c4bf0b7bd96f2e38c1f2f253f784aab54c4170709be54f515972"}, "downloads": -1, "filename": "facebookads-2.2.7.tar.gz", "has_sig": false, "md5_digest": "648005781b2bc82183363f76ba09ddf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 188369, "upload_time": "2015-03-11T17:41:38", "upload_time_iso_8601": "2015-03-11T17:41:38.580494Z", "url": "https://files.pythonhosted.org/packages/3d/cd/3a2e96c1d3e7d77c01744fd029557c20b29fc6986f398a9ab0a609588506/facebookads-2.2.7.tar.gz", "yanked": false}], "2.3.0": [], "2.3.1": [{"comment_text": "", "digests": {"md5": "beda83281bd1ed87e3034cc7e390251d", "sha256": "a56f0108a6db37a6819288d6dce5e95ce39e3b6e8e7a230c9a00f24ea2312a83"}, "downloads": -1, "filename": "facebookads-2.3.1.tar.gz", "has_sig": false, "md5_digest": "beda83281bd1ed87e3034cc7e390251d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 192998, "upload_time": "2015-03-25T22:19:07", "upload_time_iso_8601": "2015-03-25T22:19:07.241521Z", "url": "https://files.pythonhosted.org/packages/8b/82/b10290a37d3bbdd1ea0e4b7b2c37cec0fede07b87c09f3d8c1accc51c2c8/facebookads-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "9d65301b59f8675c6eeef8239b398ed4", "sha256": "62e5b12ce625f46992ea84318cfc7b8e3addc04056faa39f6538e767d637cd2c"}, "downloads": -1, "filename": "facebookads-2.3.2.tar.gz", "has_sig": false, "md5_digest": "9d65301b59f8675c6eeef8239b398ed4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 199151, "upload_time": "2015-05-18T21:12:58", "upload_time_iso_8601": "2015-05-18T21:12:58.361736Z", "url": "https://files.pythonhosted.org/packages/57/6b/c3449ecf7c3e4bef738d4559acc19b355fbcc5f25f368842d56e936c95c7/facebookads-2.3.2.tar.gz", "yanked": false}], "2.3.3": [{"comment_text": "", "digests": {"md5": "1000c068c6d8726a201caf693faf2951", "sha256": "0ff4c2e787c8ff8928a1396b5e44a53221ce86380078ae6b959296fb8f0a08c0"}, "downloads": -1, "filename": "facebookads-2.3.3.tar.gz", "has_sig": false, "md5_digest": "1000c068c6d8726a201caf693faf2951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 200766, "upload_time": "2015-05-27T16:51:54", "upload_time_iso_8601": "2015-05-27T16:51:54.996306Z", "url": "https://files.pythonhosted.org/packages/cf/da/ebbab78864e496847c0e5621a7a1d26a4488988e542d63265d7dc36dbac3/facebookads-2.3.3.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "d2f9cf46eaf9d853317e69aec1532263", "sha256": "9f041ff803d5193edbebf844017a1f7ab9095901d98799f8192fe8187d81dc7d"}, "downloads": -1, "filename": "facebookads-2.4.0.tar.gz", "has_sig": false, "md5_digest": "d2f9cf46eaf9d853317e69aec1532263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210531, "upload_time": "2015-07-16T01:15:48", "upload_time_iso_8601": "2015-07-16T01:15:48.831956Z", "url": "https://files.pythonhosted.org/packages/68/48/9eb15cd4d9054b9191ce4e0a38f6da877113d5be89b2171158305a0a0c2a/facebookads-2.4.0.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "13a7be4c6fd97badcdd4d541cacda5e8", "sha256": "98103f99cb0d8fd315a9f1567d9038c241b1f745843becf0f5b942254882aebe"}, "downloads": -1, "filename": "facebookads-2.4.1.tar.gz", "has_sig": false, "md5_digest": "13a7be4c6fd97badcdd4d541cacda5e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210590, "upload_time": "2015-07-16T20:11:18", "upload_time_iso_8601": "2015-07-16T20:11:18.041551Z", "url": "https://files.pythonhosted.org/packages/22/a9/bbe1ff6045184f8ce8bb00e8fce2f7af7e7cbe8015887bebf5c48c223c38/facebookads-2.4.1.tar.gz", "yanked": false}], "2.4.2": [{"comment_text": "", "digests": {"md5": "d56a40ea42b65fd17340bc5b619916dd", "sha256": "9686288b847db35721adfbc2ed2d09cd944d4af762dc9b6e4a9a641295deab34"}, "downloads": -1, "filename": "facebookads-2.4.2.tar.gz", "has_sig": false, "md5_digest": "d56a40ea42b65fd17340bc5b619916dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213734, "upload_time": "2015-07-29T19:04:06", "upload_time_iso_8601": "2015-07-29T19:04:06.119075Z", "url": "https://files.pythonhosted.org/packages/15/d0/c6fab1ea5bc7bb5e88946cc8d91955981df9ebe509b21b095872cb188fb1/facebookads-2.4.2.tar.gz", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "c3b3f417fae07b869e9b825880411141", "sha256": "8f9aeb04a0939b4ba7d026b8935f67d13d68adb8e9f2dab5eb0bf0dded6b7873"}, "downloads": -1, "filename": "facebookads-2.5.0.tar.gz", "has_sig": false, "md5_digest": "c3b3f417fae07b869e9b825880411141", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232969, "upload_time": "2015-10-08T00:50:59", "upload_time_iso_8601": "2015-10-08T00:50:59.208655Z", "url": "https://files.pythonhosted.org/packages/c2/c8/8aaefa5ef731d0227f4943aa5cc1be4465572cc1c27c384a2b73bcf9dca5/facebookads-2.5.0.tar.gz", "yanked": false}], "2.5.1": [{"comment_text": "", "digests": {"md5": "169c8535b7f94b4957844258f1b75198", "sha256": "5c584aca99835150b5fc286844f4f2ca7174092ff4f1e225282399597fc4e201"}, "downloads": -1, "filename": "facebookads-2.5.1.tar.gz", "has_sig": false, "md5_digest": "169c8535b7f94b4957844258f1b75198", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 241619, "upload_time": "2015-10-20T00:19:14", "upload_time_iso_8601": "2015-10-20T00:19:14.085383Z", "url": "https://files.pythonhosted.org/packages/1e/dd/6efc4a0aa765aa9ddda49bd59c51db3b02bfc9e25cf79a34fe452e03d783/facebookads-2.5.1.tar.gz", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "a12711370c9fae0511898655f5debc50", "sha256": "63ed357376ebc6a7b572692d13cc6e545a9398c5db54f25bd61dc9a5d30beb85"}, "downloads": -1, "filename": "facebookads-2.6.0.tar.gz", "has_sig": false, "md5_digest": "a12711370c9fae0511898655f5debc50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 327171, "upload_time": "2016-04-12T22:28:52", "upload_time_iso_8601": "2016-04-12T22:28:52.984857Z", "url": "https://files.pythonhosted.org/packages/5b/4f/a5420e388d34b4627f637ea455eee6cef4dac75cb6163ebc5b8afb801811/facebookads-2.6.0.tar.gz", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "35923a0e2851be38d5d4086bbe092df0", "sha256": "b0ae708a6473b47ed0f779d6a6e7c4586fea93c5d7787a0f63106073b49b811e"}, "downloads": -1, "filename": "facebookads-2.6.1.tar.gz", "has_sig": false, "md5_digest": "35923a0e2851be38d5d4086bbe092df0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 327256, "upload_time": "2016-04-13T16:56:41", "upload_time_iso_8601": "2016-04-13T16:56:41.386497Z", "url": "https://files.pythonhosted.org/packages/1c/3a/39405a6d74e08238bafc7bc8cd7dd05cea11708b4deda163bd7b860f5838/facebookads-2.6.1.tar.gz", "yanked": false}], "2.6.2": [{"comment_text": "", "digests": {"md5": "84b6b9e1f18cb528c74b269f0810c092", "sha256": "c5debbd5ede46761f646981e584d032cb70157d4544939a9c666fad0ca2d7c22"}, "downloads": -1, "filename": "facebookads-2.6.2.tar.gz", "has_sig": false, "md5_digest": "84b6b9e1f18cb528c74b269f0810c092", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 328082, "upload_time": "2016-04-18T19:42:03", "upload_time_iso_8601": "2016-04-18T19:42:03.595303Z", "url": "https://files.pythonhosted.org/packages/a0/af/c5672b325157111738aa4296d998084f8da797420c9764e802ec765d4ffb/facebookads-2.6.2.tar.gz", "yanked": false}], "2.6.2.0": [{"comment_text": "", "digests": {"md5": "9f94c88445005c41d04eba8c8c8ce5dc", "sha256": "9ab789dbe034a30c9b3863101e24cf1ba6d1d109825d76ed3625b724a85f399b"}, "downloads": -1, "filename": "facebookads-2.6.2.0.tar.gz", "has_sig": false, "md5_digest": "9f94c88445005c41d04eba8c8c8ce5dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283052, "upload_time": "2016-07-08T21:10:20", "upload_time_iso_8601": "2016-07-08T21:10:20.347836Z", "url": "https://files.pythonhosted.org/packages/49/ae/2a59b0fd32e521de211d2fb503ebdd37a69ab7056f801909a324107c7018/facebookads-2.6.2.0.tar.gz", "yanked": false}], "2.6.2.1": [], "2.7.1": [{"comment_text": "", "digests": {"md5": "8eaa87b5ff442435b1149f9b7a96a0cc", "sha256": "65deadfa0e0a0379c3132ae542366809ff2167c15b78c06a23d1f255a57841f8"}, "downloads": -1, "filename": "facebookads-2.7.1.tar.gz", "has_sig": false, "md5_digest": "8eaa87b5ff442435b1149f9b7a96a0cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 280545, "upload_time": "2016-07-14T22:00:37", "upload_time_iso_8601": "2016-07-14T22:00:37.870317Z", "url": "https://files.pythonhosted.org/packages/88/5b/36017d3f47c88c3ed49fbc0eff5e95593371e2d541aac3f879f61568d830/facebookads-2.7.1.tar.gz", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "069f7a0edd9275fd59da96b91275e0e1", "sha256": "8e6d011b0421d7636e1c47827d42c4f83213c635b3b272f2a38ffbbcfa4cb002"}, "downloads": -1, "filename": "facebookads-2.8.1.tar.gz", "has_sig": false, "md5_digest": "069f7a0edd9275fd59da96b91275e0e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 282637, "upload_time": "2016-10-06T19:49:41", "upload_time_iso_8601": "2016-10-06T19:49:41.906624Z", "url": "https://files.pythonhosted.org/packages/b1/cd/b96b096f8a396c33455332275b5a43945cf5481bf6c0d133a50df0561433/facebookads-2.8.1.tar.gz", "yanked": false}], "2.8.2": [{"comment_text": "", "digests": {"md5": "9fe1d108d17596505a031b5739f5a324", "sha256": "a3202767c8698c95c87dd70b4b292269930df2a62fcdee262493cfd1aabe831a"}, "downloads": -1, "filename": "facebookads-2.8.2.tar.gz", "has_sig": false, "md5_digest": "9fe1d108d17596505a031b5739f5a324", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283775, "upload_time": "2017-04-24T17:54:09", "upload_time_iso_8601": "2017-04-24T17:54:09.333366Z", "url": "https://files.pythonhosted.org/packages/01/fb/5f97c3b35c8d8ea3db8b065d28bff5df8e7805b5cd1966ec412095080efe/facebookads-2.8.2.tar.gz", "yanked": false}], "2.9.1": [{"comment_text": "", "digests": {"md5": "44a5aaac95af8e3b8dc9e901e72126f0", "sha256": "a9fee5391bab99f4d1c32de4f975156a2dc53bd579e85a8b9024450fb633e361"}, "downloads": -1, "filename": "facebookads-2.9.1.tar.gz", "has_sig": false, "md5_digest": "44a5aaac95af8e3b8dc9e901e72126f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283618, "upload_time": "2017-04-24T20:33:03", "upload_time_iso_8601": "2017-04-24T20:33:03.250517Z", "url": "https://files.pythonhosted.org/packages/8c/5b/c62055574d8fde878cd42499f7437c80822d17320c9390da6aac2437e0da/facebookads-2.9.1.tar.gz", "yanked": false}], "2.9.2": [{"comment_text": "", "digests": {"md5": "531bee72513748e31eecc2a9c87712bd", "sha256": "07aa0a9c24fed37288d12dcf713d953d996cc3a33ae879d24e6c5fac9f57a5e0"}, "downloads": -1, "filename": "facebookads-2.9.2.tar.gz", "has_sig": false, "md5_digest": "531bee72513748e31eecc2a9c87712bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283971, "upload_time": "2017-06-06T23:56:44", "upload_time_iso_8601": "2017-06-06T23:56:44.285288Z", "url": "https://files.pythonhosted.org/packages/1f/7f/bdb5668934ec08d34152aab77985e2d626cfd53cb54a84b7190059dc6ad7/facebookads-2.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85b0cc6937e38093fcbffdb15065808e", "sha256": "47820e2f7a237c793425e4228f49e430a0b83a892aeaa77dcdd00c1ad920470c"}, "downloads": -1, "filename": "facebookads-2.11.4.tar.gz", "has_sig": false, "md5_digest": "85b0cc6937e38093fcbffdb15065808e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 295722, "upload_time": "2018-03-26T21:22:41", "upload_time_iso_8601": "2018-03-26T21:22:41.103388Z", "url": "https://files.pythonhosted.org/packages/98/23/49d291a5bbecca7a9c63a81bdbd19ee28e48763a1a46de93cb235110d651/facebookads-2.11.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:10 2020"}