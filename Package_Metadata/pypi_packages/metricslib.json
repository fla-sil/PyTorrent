{"info": {"author": "Panagiotis Matigakis", "author_email": "pmatigakis@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython"], "description": "Metricslib is a package that can be used to send application metrics to metric\ncollections services.\n\n##### Supported metric collection services\n\n* [statsd](https://github.com/statsd/statsd)\n\n## Installation\n\nMetricslib requires python >= 3.5. Install the latest version using pip\n\n```bash\npip install metricslib \n```\n\n## Usage\n\nMetricslib provides a decorator that can be used on a function where we want to\ncollect metrics about how many times it was called, how many times it executed\nsuccessfully, how many times it was executed with errors and how long it took\nto run.\n\nFor the moment the only supported metric collection service is Statsd.\n\n```python\nfrom metricslib.utils import configure_metrics_from_dict\nfrom metricslib.decorators import capture_metrics\n\n@capture_metrics(\n    request_metric=\"myapp.do_something.request\",\n    error_metric=\"myapp.do_something.error\",\n    success_metric=\"myapp.do_something.success\",\n    execution_time_metric=\"myapp.do_something.execution\"\n)\ndef do_something():\n    print(\"hello world\")\n\n\n@capture_metrics(\n    request_metric=\"myapp.do_something.request\",\n    error_metric=\"myapp.do_something.error\",\n    success_metric=\"myapp.do_something.success\",\n    execution_time_metric=\"myapp.do_something.execution\"\n)\ndef do_something_bad():\n    raise Exception()\n\n\ndef main():\n    config = {\n        \"STATSD_HOST\": \"localhost\",\n        \"STATSD_PORT\": 8125\n    }\n    configure_metrics_from_dict(config)\n\n    do_something()\n\n    # we want this function to raise an exception in order to test the error\n    # metric\n    do_something_bad()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nInstead of using the decorator you can create counter objects.\n\n```python\nfrom metricslib.config import configure_metrics_from_dict\nfrom metricslib.utils import get_metrics\n\n\ndef main():\n    config = {\n        \"STATSD_HOST\": \"localhost\",\n        \"STATSD_PORT\": 8125\n    }\n\n    configure_metrics_from_dict(config)\n\n    metrics = get_metrics()\n    counter = metrics.counter(\"myapp.count\")\n    counter.incr()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nYou can also measure the time duration of an operation.\n\n```python\nfrom time import sleep\n\nfrom metricslib.config import configure_metrics_from_dict\nfrom metricslib.utils import get_metrics\n\n\ndef main():\n    config = {\n        \"STATSD_HOST\": \"localhost\",\n        \"STATSD_PORT\": 8125\n    }\n\n    configure_metrics_from_dict(config)\n\n    metrics = get_metrics()\n    duration = metrics.duration(\"myapp.time\")\n\n    duration_measurement = duration.begin()\n    sleep(2.0)\n    duration_measurement.end()\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pmatigakis/metricslib", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "metricslib", "package_url": "https://pypi.org/project/metricslib/", "platform": "", "project_url": "https://pypi.org/project/metricslib/", "project_urls": {"Homepage": "https://github.com/pmatigakis/metricslib"}, "release_url": "https://pypi.org/project/metricslib/0.2.1/", "requires_dist": ["statsd (<=3.3.0,>=3.2.1)"], "requires_python": ">=3.5", "summary": "Metrics collection library", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Metricslib is a package that can be used to send application metrics to metric\ncollections services.</p>\n<h5>Supported metric collection services</h5>\n<ul>\n<li><a href=\"https://github.com/statsd/statsd\" rel=\"nofollow\">statsd</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Metricslib requires python &gt;= 3.5. Install the latest version using pip</p>\n<pre>pip install metricslib \n</pre>\n<h2>Usage</h2>\n<p>Metricslib provides a decorator that can be used on a function where we want to\ncollect metrics about how many times it was called, how many times it executed\nsuccessfully, how many times it was executed with errors and how long it took\nto run.</p>\n<p>For the moment the only supported metric collection service is Statsd.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">metricslib.utils</span> <span class=\"kn\">import</span> <span class=\"n\">configure_metrics_from_dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metricslib.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">capture_metrics</span>\n\n<span class=\"nd\">@capture_metrics</span><span class=\"p\">(</span>\n    <span class=\"n\">request_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.request\"</span><span class=\"p\">,</span>\n    <span class=\"n\">error_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.error\"</span><span class=\"p\">,</span>\n    <span class=\"n\">success_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.success\"</span><span class=\"p\">,</span>\n    <span class=\"n\">execution_time_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.execution\"</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@capture_metrics</span><span class=\"p\">(</span>\n    <span class=\"n\">request_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.request\"</span><span class=\"p\">,</span>\n    <span class=\"n\">error_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.error\"</span><span class=\"p\">,</span>\n    <span class=\"n\">success_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.success\"</span><span class=\"p\">,</span>\n    <span class=\"n\">execution_time_metric</span><span class=\"o\">=</span><span class=\"s2\">\"myapp.do_something.execution\"</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_something_bad</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"STATSD_HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"STATSD_PORT\"</span><span class=\"p\">:</span> <span class=\"mi\">8125</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">configure_metrics_from_dict</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">do_something</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># we want this function to raise an exception in order to test the error</span>\n    <span class=\"c1\"># metric</span>\n    <span class=\"n\">do_something_bad</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Instead of using the decorator you can create counter objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">metricslib.config</span> <span class=\"kn\">import</span> <span class=\"n\">configure_metrics_from_dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metricslib.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_metrics</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"STATSD_HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"STATSD_PORT\"</span><span class=\"p\">:</span> <span class=\"mi\">8125</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">configure_metrics_from_dict</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">get_metrics</span><span class=\"p\">()</span>\n    <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">counter</span><span class=\"p\">(</span><span class=\"s2\">\"myapp.count\"</span><span class=\"p\">)</span>\n    <span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>You can also measure the time duration of an operation.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">metricslib.config</span> <span class=\"kn\">import</span> <span class=\"n\">configure_metrics_from_dict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metricslib.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_metrics</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"STATSD_HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"STATSD_PORT\"</span><span class=\"p\">:</span> <span class=\"mi\">8125</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">configure_metrics_from_dict</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">get_metrics</span><span class=\"p\">()</span>\n    <span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"p\">(</span><span class=\"s2\">\"myapp.time\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">duration_measurement</span> <span class=\"o\">=</span> <span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n    <span class=\"n\">duration_measurement</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6999085, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "f080f061b6788d9940763d50e17d639b", "sha256": "8ac085e927b40ec59eb0e39c69c623d82cb91ecfe569141e131c712d87f7065a"}, "downloads": -1, "filename": "metricslib-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f080f061b6788d9940763d50e17d639b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7322, "upload_time": "2020-04-11T10:47:00", "upload_time_iso_8601": "2020-04-11T10:47:00.254320Z", "url": "https://files.pythonhosted.org/packages/1c/9c/62e9399b0ba935610b6b7a621e6431a658dd9e7e89efeb99e775098fd728/metricslib-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec208d72f177aca919cae252147af9cb", "sha256": "fc7711faa19d45b6ab76478bb65c736c9b10a0e9ab123057eaee70ff980ca5c9"}, "downloads": -1, "filename": "metricslib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ec208d72f177aca919cae252147af9cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5593, "upload_time": "2020-04-11T10:47:02", "upload_time_iso_8601": "2020-04-11T10:47:02.522774Z", "url": "https://files.pythonhosted.org/packages/33/74/ac757f445a82058c1363c4006b617796ceb3097add49901e4663ff4993e9/metricslib-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f080f061b6788d9940763d50e17d639b", "sha256": "8ac085e927b40ec59eb0e39c69c623d82cb91ecfe569141e131c712d87f7065a"}, "downloads": -1, "filename": "metricslib-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f080f061b6788d9940763d50e17d639b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7322, "upload_time": "2020-04-11T10:47:00", "upload_time_iso_8601": "2020-04-11T10:47:00.254320Z", "url": "https://files.pythonhosted.org/packages/1c/9c/62e9399b0ba935610b6b7a621e6431a658dd9e7e89efeb99e775098fd728/metricslib-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec208d72f177aca919cae252147af9cb", "sha256": "fc7711faa19d45b6ab76478bb65c736c9b10a0e9ab123057eaee70ff980ca5c9"}, "downloads": -1, "filename": "metricslib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ec208d72f177aca919cae252147af9cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5593, "upload_time": "2020-04-11T10:47:02", "upload_time_iso_8601": "2020-04-11T10:47:02.522774Z", "url": "https://files.pythonhosted.org/packages/33/74/ac757f445a82058c1363c4006b617796ceb3097add49901e4663ff4993e9/metricslib-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}