{"info": {"author": "Valentine Svensson", "author_email": "valentine@nxn.se", "bugtrack_url": null, "classifiers": [], "description": "# umis\n\n\n**umis** provides tools for estimating expression in RNA-Seq data which performs\nsequencing of end tags of transcript, and incorporate molecular tags to\ncorrect for amplification bias.\n\nThere are four steps in this process.\n\n 1. Formatting reads\n 2. Filtering noisy cellular barcodes\n 3. Pseudo-mapping to cDNAs\n 4. Counting molecular identifiers\n\n## 1. Formatting reads\n\nWe want to strip out all non-biological segments of the sequenced reads for\nthe sake of mapping. While also keeping this information for later use. We\nconsider non-biological information such as Cellular Barcode and Molecular\nBarcode. To later be able to extract the optional CB and the MB these are put\nin the read header, with the following format.\n\n    @HWI-ST808:130:H0B8YADXX:1:1101:2088:2222:CELL_GGTCCA:UMI_CCCT\n    AGGAAGATGGAGGAGAGAAGGCGGTGAAAGAGACCTGTAAAAAGCCACCGN\n    +\n    @@@DDBD>=AFCF+<CAFHDECII:DGGGHGIGGIIIEHGIIIGIIDHII#\n\nThe command `umis fastqtransform` is for transforming a (pair of) read(s) to\nthis format based on a _transform file_. The transform file is a json file\nwhich has a Python flavored regular expression for each read, made to extract\nthe necessary components of the reads.\n\n## 2. Filtering noisy cellular barcodes\nNot all cellular barcodes identified in the transformation will be real. Some\nwill be low abundance barcodes that do not represent an actual cell. Others\nwill be barcodes that don't come from a set of known barcodes. The `umi cb_filter`\ncommand can be used to filter a transformed FASTQ file, dropping unknown\nbarcodes. The `--nedit` option can be supplied to correct barcodes `--nedit`\ndistance away from known barcodes. After barcode filtering,\nthe `umis cb_histogram` command will generate a file of counts for\neach cellular barcode. This file can be used to find a count cut-off for barcodes\nthat are high abundance for downstream quantitation.\n\n## 3. Pseudo-mapping to cDNAs\n\nThis is done by pseudo-aligners, either Kallisto or RapMap. The SAM (or BAM) file output\nfrom these tools need to be saved.\n\n## 4. Counting molecular identifiers\n\nThe final step is to infer which cDNA was the origin of the tag a UMI was\nattached to. We use the pseudo-alignments to the cDNAs, and consider a tag\nassigned to a cDNA as a partial _evidence_ for a (cDNA, UMI) pairing. For\nactual counting, we only count unique UMIs for (gene, UMI) pairings with\nsufficient evidence.\n\nTo count, use the command `umis tagcount`. This requires a SAM or BAM file as input.\n\nBy default, the read name will be used to cell barcodes and UMI sequences. Optionally,\nwhen using the `--parse_tags` option, the `CR` and `UM` bam tags will be used to\nextract the cell barcode and UMI, respectively.\n\nThe recommended workflow is to map reads to cDNA, in which case the target name in the BAM\nwill be a transcript ID. If the BAM has been mapped to a genome (e.g. with STAR) `tagcount`\ncan use the optional `GX` BAM tag to get the gene name. In this case, use the option `--gene_tags`.\n\n## kallisto\nThe quantitation used in `umis` handles reads that could come from multiple\ntranscripts by assigning a fractional count to each transcript and then\nfiltering for a minimum count at the end. Many single-cell analyses use\nsomething similar to this type of counting, but it has drawbacks\n(see\n[this paper](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-0970-8)).\nFor more principled UMI quantification,\nsee [Kallisto](https://github.com/pachterlab/kallisto). kallisto needs the files\nin a certain format: each cellular barcode has its own FASTQ file and a file\nthat lists the UMI for each read. The `umis kallisto` command can reformat your\nfastq files to that format.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vals/umis", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "umis", "package_url": "https://pypi.org/project/umis/", "platform": "", "project_url": "https://pypi.org/project/umis/", "project_urls": {"Homepage": "https://github.com/vals/umis"}, "release_url": "https://pypi.org/project/umis/1.0.3/", "requires_dist": ["click", "pysam (>=0.8.3)", "pandas", "regex", "scipy", "toolz"], "requires_python": "", "summary": "Package for estimating UMI counts in Transcript Tag Counting data.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            # umis<br><br><br>**umis** provides tools for estimating expression in RNA-Seq data which performs<br>sequencing of end tags of transcript, and incorporate molecular tags to<br>correct for amplification bias.<br><br>There are four steps in this process.<br><br> 1. Formatting reads<br> 2. Filtering noisy cellular barcodes<br> 3. Pseudo-mapping to cDNAs<br> 4. Counting molecular identifiers<br><br>## 1. Formatting reads<br><br>We want to strip out all non-biological segments of the sequenced reads for<br>the sake of mapping. While also keeping this information for later use. We<br>consider non-biological information such as Cellular Barcode and Molecular<br>Barcode. To later be able to extract the optional CB and the MB these are put<br>in the read header, with the following format.<br><br>    @HWI-ST808:130:H0B8YADXX:1:1101:2088:2222:CELL_GGTCCA:UMI_CCCT<br>    AGGAAGATGGAGGAGAGAAGGCGGTGAAAGAGACCTGTAAAAAGCCACCGN<br>    +<br>    @@@DDBD&gt;=AFCF+&lt;CAFHDECII:DGGGHGIGGIIIEHGIIIGIIDHII#<br><br>The command `umis fastqtransform` is for transforming a (pair of) read(s) to<br>this format based on a _transform file_. The transform file is a json file<br>which has a Python flavored regular expression for each read, made to extract<br>the necessary components of the reads.<br><br>## 2. Filtering noisy cellular barcodes<br>Not all cellular barcodes identified in the transformation will be real. Some<br>will be low abundance barcodes that do not represent an actual cell. Others<br>will be barcodes that don't come from a set of known barcodes. The `umi cb_filter`<br>command can be used to filter a transformed FASTQ file, dropping unknown<br>barcodes. The `--nedit` option can be supplied to correct barcodes `--nedit`<br>distance away from known barcodes. After barcode filtering,<br>the `umis cb_histogram` command will generate a file of counts for<br>each cellular barcode. This file can be used to find a count cut-off for barcodes<br>that are high abundance for downstream quantitation.<br><br>## 3. Pseudo-mapping to cDNAs<br><br>This is done by pseudo-aligners, either Kallisto or RapMap. The SAM (or BAM) file output<br>from these tools need to be saved.<br><br>## 4. Counting molecular identifiers<br><br>The final step is to infer which cDNA was the origin of the tag a UMI was<br>attached to. We use the pseudo-alignments to the cDNAs, and consider a tag<br>assigned to a cDNA as a partial _evidence_ for a (cDNA, UMI) pairing. For<br>actual counting, we only count unique UMIs for (gene, UMI) pairings with<br>sufficient evidence.<br><br>To count, use the command `umis tagcount`. This requires a SAM or BAM file as input.<br><br>By default, the read name will be used to cell barcodes and UMI sequences. Optionally,<br>when using the `--parse_tags` option, the `CR` and `UM` bam tags will be used to<br>extract the cell barcode and UMI, respectively.<br><br>The recommended workflow is to map reads to cDNA, in which case the target name in the BAM<br>will be a transcript ID. If the BAM has been mapped to a genome (e.g. with STAR) `tagcount`<br>can use the optional `GX` BAM tag to get the gene name. In this case, use the option `--gene_tags`.<br><br>## kallisto<br>The quantitation used in `umis` handles reads that could come from multiple<br>transcripts by assigning a fractional count to each transcript and then<br>filtering for a minimum count at the end. Many single-cell analyses use<br>something similar to this type of counting, but it has drawbacks<br>(see<br>[this paper](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-0970-8)).<br>For more principled UMI quantification,<br>see [Kallisto](https://github.com/pachterlab/kallisto). kallisto needs the files<br>in a certain format: each cellular barcode has its own FASTQ file and a file<br>that lists the UMI for each read. The `umis kallisto` command can reformat your<br>fastq files to that format.<br><br><br>\n          </div>"}, "last_serial": 5240455, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2eee568041c91f948c77898a12f4a0a1", "sha256": "04b3f96a1fafeaf0de0cef1caa83313a54ecf093b1a3ddb47a45ec312627906b"}, "downloads": -1, "filename": "umis-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2eee568041c91f948c77898a12f4a0a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3710, "upload_time": "2015-08-10T16:17:55", "upload_time_iso_8601": "2015-08-10T16:17:55.443742Z", "url": "https://files.pythonhosted.org/packages/d0/89/59d1499724a83cd3f7add6ba84f107351e44a514f086640ec29f14bd2bfd/umis-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a31b3f36e138ad70e5007e3ddbe15f23", "sha256": "0d2075d26da9c62ea5bc21c0a7e99f031aaa8df86f9b604784468491061d95d2"}, "downloads": -1, "filename": "umis-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a31b3f36e138ad70e5007e3ddbe15f23", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6368, "upload_time": "2015-08-19T08:01:41", "upload_time_iso_8601": "2015-08-19T08:01:41.149003Z", "url": "https://files.pythonhosted.org/packages/7d/55/cb49accfde920a1face60c23518b6e2bcee1c7e696502c771ff4cc5391c4/umis-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0689d36024a2750f811de062e5d9167a", "sha256": "21438b02ee9af86eea999b9e0d7b508add30f1dc50f3ade0fbfa8b4663fced3d"}, "downloads": -1, "filename": "umis-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0689d36024a2750f811de062e5d9167a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4223, "upload_time": "2015-08-19T08:01:36", "upload_time_iso_8601": "2015-08-19T08:01:36.675131Z", "url": "https://files.pythonhosted.org/packages/d8/6b/89d23d5a120173124d5a3bd75355d0798d7dcda9ffc4ff59eb7880fefbc1/umis-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d90e9c4b3495d36f29b84d528a2b8e3f", "sha256": "c820869f777c269520176caeb37f439899f79eee886bebc3724eb8f71f8e639e"}, "downloads": -1, "filename": "umis-0.2.1-cp27-none-macosx_10_5_x86_64.whl", "has_sig": false, "md5_digest": "d90e9c4b3495d36f29b84d528a2b8e3f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 12302, "upload_time": "2016-02-22T13:38:18", "upload_time_iso_8601": "2016-02-22T13:38:18.483118Z", "url": "https://files.pythonhosted.org/packages/7c/82/d1ddc82de957dafb894aafbb46e24497826b5eb0695c4a2816c8c6133e6d/umis-0.2.1-cp27-none-macosx_10_5_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "532d48cc0d651475dcd1eed9ec1e67de", "sha256": "bb64f67a71e9de874a054fb2fac1294e7bf7e1edb3ba0f199c258502820c96e4"}, "downloads": -1, "filename": "umis-0.2.1.tar.gz", "has_sig": false, "md5_digest": "532d48cc0d651475dcd1eed9ec1e67de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4836, "upload_time": "2016-02-22T13:37:52", "upload_time_iso_8601": "2016-02-22T13:37:52.202164Z", "url": "https://files.pythonhosted.org/packages/b7/a4/c895bc17b793bd736f4ef3c2c597b2092b1eba28754b71e9171b7fc842e6/umis-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7cc0dbc4dd90512f8311a2e2e3509b62", "sha256": "aac6b22130604202803c5fc771456554c6dd893da753fb21172c2d1ce91a1aef"}, "downloads": -1, "filename": "umis-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7cc0dbc4dd90512f8311a2e2e3509b62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6243, "upload_time": "2016-06-15T08:52:30", "upload_time_iso_8601": "2016-06-15T08:52:30.233258Z", "url": "https://files.pythonhosted.org/packages/d3/93/a6f2aea3602ef80b48a2d0da6b6bac3af7f2e77bcb414745bf08f18f2f11/umis-0.2.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "built for Darwin-15.6.0", "digests": {"md5": "253732519370e2360d4e760507c671a4", "sha256": "660db26599f43f9c1ef5dd9451ea12662d8d5b7ea0550a247d084ef9566f9c80"}, "downloads": -1, "filename": "umis-0.3.macosx-10.6-x86_64.tar.gz", "has_sig": false, "md5_digest": "253732519370e2360d4e760507c671a4", "packagetype": "bdist_dumb", "python_version": "3.5", "requires_python": null, "size": 17893, "upload_time": "2016-08-16T10:28:52", "upload_time_iso_8601": "2016-08-16T10:28:52.531280Z", "url": "https://files.pythonhosted.org/packages/0d/0c/0510cbd2ba7e784b73c2f25e5d7fab2ebba5ae0e59a37321e32df4487a7d/umis-0.3.macosx-10.6-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "03c3a38883dc5c53fa174ea369d19afa", "sha256": "225051fd062e3142645d4a5e4868df028972feb7bc90f674d3ab053f38607584"}, "downloads": -1, "filename": "umis-0.3.tar.gz", "has_sig": false, "md5_digest": "03c3a38883dc5c53fa174ea369d19afa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22128, "upload_time": "2016-08-16T10:28:37", "upload_time_iso_8601": "2016-08-16T10:28:37.355833Z", "url": "https://files.pythonhosted.org/packages/78/84/ffef30c86b2d87c886af892807a7349343dba9263ad6de52dd1e6642fbc6/umis-0.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "eb1eca19041d13d7e5cd21ed813576b3", "sha256": "aa6e1cec7dac12eb0388af75ef14220e405faf6fc99bace5e3e59bbf91954298"}, "downloads": -1, "filename": "umis-0.5.0.tar.gz", "has_sig": false, "md5_digest": "eb1eca19041d13d7e5cd21ed813576b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28134, "upload_time": "2017-02-06T11:50:00", "upload_time_iso_8601": "2017-02-06T11:50:00.360432Z", "url": "https://files.pythonhosted.org/packages/13/8a/426be78f1bc319da4f61705102d686084c6bfab5343f02f8b5b6aa2c9058/umis-0.5.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "9abbc7058d88aaca2b7fac859163ad3b", "sha256": "9574343eea135c5429de6b8a9cbc609aa354c7fe3798489f3b687e61bae455ee"}, "downloads": -1, "filename": "umis-0.7.0-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "9abbc7058d88aaca2b7fac859163ad3b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 21791, "upload_time": "2017-07-04T12:11:46", "upload_time_iso_8601": "2017-07-04T12:11:46.666390Z", "url": "https://files.pythonhosted.org/packages/b2/e9/62f0119dd5e80c78ceccd412065ec63050258b3af13bb16026d6ba9a8ad2/umis-0.7.0-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b2052355020b3ebf453c6d86f7db37a", "sha256": "a2db241fa5c388e8316657cc8ea484048d6bdff599dfeef561e171b3ff0f76b8"}, "downloads": -1, "filename": "umis-0.7.0.tar.gz", "has_sig": false, "md5_digest": "5b2052355020b3ebf453c6d86f7db37a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29704, "upload_time": "2017-07-04T12:12:30", "upload_time_iso_8601": "2017-07-04T12:12:30.278238Z", "url": "https://files.pythonhosted.org/packages/b2/ab/7c7e36e34ab5c83aaecca98f2cc0d67a2664947088dff49520461dde4bab/umis-0.7.0.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "628b99473b6a76c325fd598c9f9bed84", "sha256": "6e7242931999bbd933f25429506cd42331b783267f7e3a4ecc16096c81693c1d"}, "downloads": -1, "filename": "umis-1.0.3-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "628b99473b6a76c325fd598c9f9bed84", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 25402, "upload_time": "2019-05-07T22:05:48", "upload_time_iso_8601": "2019-05-07T22:05:48.501093Z", "url": "https://files.pythonhosted.org/packages/0b/30/489213cb0c7b9d65524465e12867d8bd1422423c928c757e6872a5503969/umis-1.0.3-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be5686fff73e0c205b5c30a7365aaec5", "sha256": "7535affabe6665370a8c9a8fef26d1fad3289441118ef607a29bbc7e9047fb49"}, "downloads": -1, "filename": "umis-1.0.3.tar.gz", "has_sig": false, "md5_digest": "be5686fff73e0c205b5c30a7365aaec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18203, "upload_time": "2019-05-07T22:05:49", "upload_time_iso_8601": "2019-05-07T22:05:49.803630Z", "url": "https://files.pythonhosted.org/packages/86/3d/1c0eb82e68cfdaf5cf1c91fd1d999aa8397e087d8784e932b8ea324ee58f/umis-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "628b99473b6a76c325fd598c9f9bed84", "sha256": "6e7242931999bbd933f25429506cd42331b783267f7e3a4ecc16096c81693c1d"}, "downloads": -1, "filename": "umis-1.0.3-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "628b99473b6a76c325fd598c9f9bed84", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 25402, "upload_time": "2019-05-07T22:05:48", "upload_time_iso_8601": "2019-05-07T22:05:48.501093Z", "url": "https://files.pythonhosted.org/packages/0b/30/489213cb0c7b9d65524465e12867d8bd1422423c928c757e6872a5503969/umis-1.0.3-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be5686fff73e0c205b5c30a7365aaec5", "sha256": "7535affabe6665370a8c9a8fef26d1fad3289441118ef607a29bbc7e9047fb49"}, "downloads": -1, "filename": "umis-1.0.3.tar.gz", "has_sig": false, "md5_digest": "be5686fff73e0c205b5c30a7365aaec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18203, "upload_time": "2019-05-07T22:05:49", "upload_time_iso_8601": "2019-05-07T22:05:49.803630Z", "url": "https://files.pythonhosted.org/packages/86/3d/1c0eb82e68cfdaf5cf1c91fd1d999aa8397e087d8784e932b8ea324ee58f/umis-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:03 2020"}