{"info": {"author": "Christophe-Marie Duquesne", "author_email": "chm.duquesne@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "I needed a console friendly tool to print dates, so I made one, basing it\non python-dateutil. Here is the output of --help:\n\nNAME\n    dates - prints a list of dates\n\nSYNOPSIS\n    dates [OPTIONS]\n\nOPTIONS\n    --help:\n        Print this help\n\n    --freq <frequency>:\n        Choose frequency (values admitted: YEARLY, MONTHLY, WEEKLY,\n        DAILY). Defaults to DAILY.\n\n    --from, --dtstart:\n        Recurrence start\n\n    --to, --until:\n        limit of the recurrence\n\n    --step, --interval:\n        The interval between each freq iteration. For example, when using\n        YEARLY, an interval of 2 means once every two years.\n\n    --wkst:\n        The week start day. Must be one of the MO, TU, WE constants, or an\n        integer, specifying the first day of the week.\n\n    --count:\n        How many occurrences will be generated.\n\n    --byweekday:\n        If given, it must be either an integer (0 == MO), a sequence of\n        integers, one of the weekday constants (MO, TU, etc), or a\n        sequence of these constants. When given, these variables will\n        define the weekdays where the recurrence will be applied.\n\n    --bysetpos:\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each given integer will specify an\n        occurrence number, corresponding to the nth occurrence of the rule\n        inside the frequency period. For example, a bysetpos of -1 if\n        combined with a MONTHLY frequency, and a byweekday of (MO, TU, WE,\n        TH, FR), will result in the last work day of every month. )\n\n    --bymonth:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the months to apply the recurrence to.\n\n    --bymonthday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the month days to apply the recurrence to.\n\n    --byyearday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the year days to apply the recurrence to.\n\n    --byweekno:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the week numbers to apply the recurrence to. Week numbers\n        have the meaning described in ISO8601, that is, the first week of\n        the year is that containing at least four days of the new year.\n\n    --byweekday:\n        If given, it must be either an integer (0 == MO) or a sequence of\n        integers. When given, these variables will define the weekdays\n        where the recurrence will be applied.\n\n    --byeaster\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each integer will define an offset from the\n        Easter Sunday. Passing the offset 0 to byeaster will yield the\n        Easter Sunday itself.\n\nEXAMPLES:\n    Prints the Mondays and Tuesdays that occur every 5 days in 2010:\n    dates --from 2010-01-01 --to 2011-01-01 --step 5 --byweekday '[\"MO\",\"TU\"]'\n\n    Prints the last friday of each month of 2010:\n    dates --freq MONTHLY --from 2010-01-01 --to 2011-01-01 --byweekday 'FR(-1)'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chmduquesne/dates", "keywords": null, "license": "Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  * Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright notice, this\n    list of conditions and the following disclaimer in the documentation and/or\n    other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "maintainer": null, "maintainer_email": null, "name": "dates", "package_url": "https://pypi.org/project/dates/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dates/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chmduquesne/dates"}, "release_url": "https://pypi.org/project/dates/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A small tool based on python-dateutil that just prints dates", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>I needed a console friendly tool to print dates, so I made one, basing it\non python-dateutil. Here is the output of \u2013help:</p>\n<dl>\n<dt>NAME</dt>\n<dd>dates - prints a list of dates</dd>\n<dt>SYNOPSIS</dt>\n<dd>dates [OPTIONS]</dd>\n<dt>OPTIONS</dt>\n<dd><dl>\n<dt>\u2013help:</dt>\n<dd>Print this help</dd>\n<dt>\u2013freq &lt;frequency&gt;:</dt>\n<dd>Choose frequency (values admitted: YEARLY, MONTHLY, WEEKLY,\nDAILY). Defaults to DAILY.</dd>\n<dt>\u2013from, \u2013dtstart:</dt>\n<dd>Recurrence start</dd>\n<dt>\u2013to, \u2013until:</dt>\n<dd>limit of the recurrence</dd>\n<dt>\u2013step, \u2013interval:</dt>\n<dd>The interval between each freq iteration. For example, when using\nYEARLY, an interval of 2 means once every two years.</dd>\n<dt>\u2013wkst:</dt>\n<dd>The week start day. Must be one of the MO, TU, WE constants, or an\ninteger, specifying the first day of the week.</dd>\n<dt>\u2013count:</dt>\n<dd>How many occurrences will be generated.</dd>\n<dt>\u2013byweekday:</dt>\n<dd>If given, it must be either an integer (0 == MO), a sequence of\nintegers, one of the weekday constants (MO, TU, etc), or a\nsequence of these constants. When given, these variables will\ndefine the weekdays where the recurrence will be applied.</dd>\n<dt>\u2013bysetpos:</dt>\n<dd>If given, it must be either an integer, or a sequence of integers,\npositive or negative. Each given integer will specify an\noccurrence number, corresponding to the nth occurrence of the rule\ninside the frequency period. For example, a bysetpos of -1 if\ncombined with a MONTHLY frequency, and a byweekday of (MO, TU, WE,\nTH, FR), will result in the last work day of every month. )</dd>\n<dt>\u2013bymonth:</dt>\n<dd>If given, it must be either an integer, or a sequence of integers,\nmeaning the months to apply the recurrence to.</dd>\n<dt>\u2013bymonthday:</dt>\n<dd>If given, it must be either an integer, or a sequence of integers,\nmeaning the month days to apply the recurrence to.</dd>\n<dt>\u2013byyearday:</dt>\n<dd>If given, it must be either an integer, or a sequence of integers,\nmeaning the year days to apply the recurrence to.</dd>\n<dt>\u2013byweekno:</dt>\n<dd>If given, it must be either an integer, or a sequence of integers,\nmeaning the week numbers to apply the recurrence to. Week numbers\nhave the meaning described in ISO8601, that is, the first week of\nthe year is that containing at least four days of the new year.</dd>\n<dt>\u2013byweekday:</dt>\n<dd>If given, it must be either an integer (0 == MO) or a sequence of\nintegers. When given, these variables will define the weekdays\nwhere the recurrence will be applied.</dd>\n</dl>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">--byeaster</span></kbd></td>\n<td>If given, it must be either an integer, or a sequence of integers,\npositive or negative. Each integer will define an offset from the\nEaster Sunday. Passing the offset 0 to byeaster will yield the\nEaster Sunday itself.</td></tr>\n</tbody>\n</table>\n</dd>\n<dt>EXAMPLES:</dt>\n<dd><p>Prints the Mondays and Tuesdays that occur every 5 days in 2010:\ndates \u2013from 2010-01-01 \u2013to 2011-01-01 \u2013step 5 \u2013byweekday \u2018[\u201cMO\u201d,\u201dTU\u201d]\u2019</p>\n<p>Prints the last friday of each month of 2010:\ndates \u2013freq MONTHLY \u2013from 2010-01-01 \u2013to 2011-01-01 \u2013byweekday \u2018FR(-1)\u2019</p>\n</dd>\n</dl>\n\n          </div>"}, "last_serial": 788831, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f1b0659e3624a7e426d2493ec07c5751", "sha256": "a0ca95e2c34e82f87657ff5f4d9c82d6f5338c0b7c7d5243eea2227e2e783779"}, "downloads": -1, "filename": "dates-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f1b0659e3624a7e426d2493ec07c5751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4409, "upload_time": "2012-01-06T15:58:03", "upload_time_iso_8601": "2012-01-06T15:58:03.538786Z", "url": "https://files.pythonhosted.org/packages/fb/cd/f1d8a8c2354581a3076f9d1dd9a011593885ff311b3ccc2d9a85f04a6c87/dates-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1b0659e3624a7e426d2493ec07c5751", "sha256": "a0ca95e2c34e82f87657ff5f4d9c82d6f5338c0b7c7d5243eea2227e2e783779"}, "downloads": -1, "filename": "dates-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f1b0659e3624a7e426d2493ec07c5751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4409, "upload_time": "2012-01-06T15:58:03", "upload_time_iso_8601": "2012-01-06T15:58:03.538786Z", "url": "https://files.pythonhosted.org/packages/fb/cd/f1d8a8c2354581a3076f9d1dd9a011593885ff311b3ccc2d9a85f04a6c87/dates-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:05 2020"}