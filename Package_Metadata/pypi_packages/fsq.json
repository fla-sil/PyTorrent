{"info": {"author": "Matthew Story", "author_email": "matt.story@axial.net", "bugtrack_url": null, "classifiers": [], "description": "===\r\nFSQ\r\n===\r\n\r\nfsq is a standard for implementing queueing structures in POSIX file-systems.\r\nfsq provides a standard for both directory layouts and work-item naming, which\r\nallow for idempotent work-item construction, atomic enqueueing, and atomic\r\ncompletion.\r\n\r\nThe fsq python library (``import fsq``) provides a programattic way to\r\nenqueue, scan, introspect and manipulate queues from Python.\r\n\r\nThe fsq program provides mechanisms for enqueueing, scanning, introspecting,\r\nauditing and repairing queues from the command line.\r\n\r\nFor more on the fsq standard see ``man 7 fsq``, for more on the fsq program\r\nsee ``man 1 fsq``.\r\n\r\nInstalling\r\n==========\r\n\r\nThe fsq project lives on github_, and is available via pip_.\r\n\r\n.. _github: https://github.com/axialmarket/fsq\r\n.. _pip: https://pypi.python.org/pypi?:action=display&name=fsq\r\n\r\nInstalling v0.2.5 From Pip\r\n--------------------------\r\n\r\n::\r\n\r\n    sudo pip install fsq==0.2.5\r\n\r\nInstalling v0.2.5 From Source\r\n-----------------------------\r\n\r\n::\r\n\r\n    curl https://github.com/axialmarket/fsq/archive/version_0.2.5.tar.gz | tar vzxf -\r\n    cd fsq\r\n    sudo python setup.py install\r\n\r\nQuick Overview\r\n==============\r\n\r\nInstalling Queues\r\n-----------------\r\n\r\nTo install a queue, simply run::\r\n\r\n    $ fsq install a_queue\r\n\r\nOr via the Python API::\r\n\r\n    >>> import fsq\r\n    >>> fsq.install(a_queue)\r\n\r\nInstalling a queue will create a directory in ``FSQ_ROOT`` (``/var/fsq/``)::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    \u251c\u2500\u2500 fail\r\n    \u251c\u2500\u2500 queue\r\n    \u2514\u2500\u2500 tmp\r\n\r\nEnqueueing Work\r\n---------------\r\n\r\nTo enqueue work to the ``a_queue`` queue, simply run::\r\n\r\n    $ echo \"data\" | fsq enqueue a_queue args to enqueue\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> # enqueue a string\r\n    >>> fsq.senqueue('a_queue', 'data', 'args', 'to', 'enqueue')\r\n    >>> # ... or a file\r\n    >>> fsq.senqueue('a_queue', '/path/to/data.file', 'args', 'to', 'enqueue')\r\n\r\nEnqueueing adds a file to the ``queue`` directory of ``a_queue``::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    \u251c\u2500\u2500 fail\r\n    \u251c\u2500\u2500 queue\r\n    |   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\r\n    \u2514\u2500\u2500 tmp\r\n\r\nProcessing Work\r\n---------------\r\n\r\nTo process jobs, use the ``fsq scan`` program::\r\n\r\n    $ # echo gets \"args\", \"to\", \"enqueue\" as $1..$3 and \"data\" on stdin\r\n    $ fsq scan a_queue echo\r\n    args to enqueue\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> for work in fsq.scan('a_queue'):\r\n    ...     print \" \".join(work.arguments)\r\n    ...     fsq.done('a_queue')\r\n    args to enqueue\r\n\r\nWork that is successfully completed moves to the done directory::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    |   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\r\n    \u251c\u2500\u2500 fail\r\n    \u251c\u2500\u2500 queue\r\n    \u2514\u2500\u2500 tmp\r\n\r\nAs fsq scans each work item, it obtains an exclusive lock on the work item\r\nfile, so it is safe to run multiple scan processes (or threads) in parallel on\r\nthe same queue with no fear of duplicating effort.\r\n\r\nFailures in Processing Work\r\n---------------------------\r\n\r\nShould work fail during processing::\r\n\r\n    $ fsq scan a_queue sh -c 'exit 100'\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> for work in fsq.scan('a_queue'):\r\n    ...     fsq.fail('a_queue')\r\n\r\nThe failed work will be moved to the fail directory::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    \u251c\u2500\u2500 fail\r\n    |   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\r\n    \u251c\u2500\u2500 queue\r\n    \u2514\u2500\u2500 tmp\r\n\r\nWork can also fail temporarily, which will cause the work to remain in the\r\n``queue`` directory until it is older than ``FSQ_TTL`` seconds old, or until\r\nit has been tried more than ``FSQ_MAX_TRIES`` times unsuccessfully::\r\n\r\n    $ # exit code 111 indicates temporary failure\r\n    $ FSQ_MAX_TRIES=2 fsq scan a_queue sh -c 'exit 100'\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> fsq.set_const('FSQ_MAX_TRIES', 2)\r\n    >>> for work in fsq.scan('a_queue'):\r\n    ...     fsq.fail_tmp(work)\r\n\r\nThe name of the work item will change to indicate that the item has failed\r\nonce::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    \u251c\u2500\u2500 fail\r\n    \u251c\u2500\u2500 queue\r\n    |   \u2514\u2500\u2500 _20131005205643_0_25577_mss_1_args_to_enqueue\r\n    \u2514\u2500\u2500 tmp\r\n\r\n\r\nTaking Queues Down\r\n------------------\r\n\r\nTo temporaily stop all scanning of any queue, you simply use the ``fsq down``\r\nprogram::\r\n\r\n    $ fsq down a_queue\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> fsq.down('a_queue')\r\n\r\nWhich creates a regular file named ``down`` in the ``a_queue`` directory\r\npreventing scan from working on the queue::\r\n\r\n    /var/fsq/a_queue\r\n    \u251c\u2500\u2500 done\r\n    \u251c\u2500\u2500 down\r\n    \u251c\u2500\u2500 fail\r\n    \u251c\u2500\u2500 queue\r\n    |   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\r\n    \u2514\u2500\u2500 tmp\r\n\r\nTo bring a queue back up again, you simply use the ``fsq up`` program::\r\n\r\n    $ fsq up a_queue\r\n\r\nOr from the Python API::\r\n\r\n    >>> import fsq\r\n    >>> fsq.up('a_queue')\r\n\r\nWhich removes the ``down`` file, and allows the queue to be scanned properly\r\nagain.\r\n\r\nThe tmp Directory\r\n-----------------\r\n\r\nThe tmp directory within a_queue is used by fsq under the hood to ensure that\r\nall items are enqueued atomically.\r\n\r\nThe fsq File Name\r\n-----------------\r\n\r\n::\r\n\r\n    _20120710213904_0_13044_mss_0_args_to_enqueue\r\n    _20120710213904_1_13044_mss_0_args_to_enqueue\r\n    +|-----+------| + |-+-| |+| + |------+------|\r\n    |      |        |   |    |  |        |\r\n    |      |        |   |    |  |        +-> FSQ_DELIMITER seperated\r\n    |      |        |   |    |  |            arguments\r\n    |      |        |   |    |  +-> tries: number of failed attempts\r\n    |      |        |   |    |      to process\r\n    |      |        |   |    +-> hostname: the name of the host on\r\n    |      |        |   |        which the work-item was enqueued.\r\n    |      |        |   +-> pid of the process which enqueued the\r\n    |      |        |       work-item\r\n    |      |        +-> entropy: should a work-item be generated\r\n    |      |            with the same arguments, pid, hostname\r\n    |      |            and timestamp, entropy is incremented to\r\n    |      |            generate uniqueness.\r\n    |      +-> timestamp in FSQ_TIMEFMT format\r\n    +-> FSQ_DELIMITER used at enqueue time\r\n\r\nENVIRONMENT\r\n===========\r\n\r\nThe fsq suite and python library makes use of a number of environment\r\nvariables (each prefixed by ``FSQ_``), which modify its behavior.  Each\r\nenvironment variable is also available as a package-level constant.\r\n\r\nPlease refer to ``man 7 fsq`` for a complete list.\r\n\r\nAUTHORS\r\n=======\r\n\r\n| Matthew Story <matt.story@axial.net>\r\n| Isaac (.ike) Levy <ike@blackskyresearch.net>\r\n| Will O'Meara <will.omeara@axial.net>\r\n| Jeff Rand <jeff.rand@axial.net>\r\n\r\nWith Additional Contributions From:\r\n-----------------------------------\r\n\r\n| Will Martino\r\n| Will Slippey\r\n| Jacob Yuan\r\n\r\nAnd Thanks To:\r\n--------------\r\n\r\n| William Baxter (For trigger, and for inspiring fsq)\r\n| Bruce Guenter (For nullmailer, featuring a simpler file-system queue)\r\n| Daniel J Bernstein (For QMail, inspiring trigger and nullmailer)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/axialmarket/fsq", "keywords": "", "license": "3-BSD", "maintainer": "", "maintainer_email": "", "name": "fsq", "package_url": "https://pypi.org/project/fsq/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fsq/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/axialmarket/fsq"}, "release_url": "https://pypi.org/project/fsq/0.2.5/", "requires_dist": null, "requires_python": null, "summary": "File System Queue", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>fsq is a standard for implementing queueing structures in POSIX file-systems.\nfsq provides a standard for both directory layouts and work-item naming, which\nallow for idempotent work-item construction, atomic enqueueing, and atomic\ncompletion.</p>\n<p>The fsq python library (<tt>import fsq</tt>) provides a programattic way to\nenqueue, scan, introspect and manipulate queues from Python.</p>\n<p>The fsq program provides mechanisms for enqueueing, scanning, introspecting,\nauditing and repairing queues from the command line.</p>\n<p>For more on the fsq standard see <tt>man 7 fsq</tt>, for more on the fsq program\nsee <tt>man 1 fsq</tt>.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>The fsq project lives on <a href=\"https://github.com/axialmarket/fsq\" rel=\"nofollow\">github</a>, and is available via <a href=\"https://pypi.python.org/pypi?:action=display&amp;name=fsq\" rel=\"nofollow\">pip</a>.</p>\n<div id=\"installing-v0-2-5-from-pip\">\n<h3>Installing v0.2.5 From Pip</h3>\n<pre>sudo pip install fsq==0.2.5\n</pre>\n</div>\n<div id=\"installing-v0-2-5-from-source\">\n<h3>Installing v0.2.5 From Source</h3>\n<pre>curl https://github.com/axialmarket/fsq/archive/version_0.2.5.tar.gz | tar vzxf -\ncd fsq\nsudo python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"quick-overview\">\n<h2>Quick Overview</h2>\n<div id=\"installing-queues\">\n<h3>Installing Queues</h3>\n<p>To install a queue, simply run:</p>\n<pre>$ fsq install a_queue\n</pre>\n<p>Or via the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; fsq.install(a_queue)\n</pre>\n<p>Installing a queue will create a directory in <tt>FSQ_ROOT</tt> (<tt>/var/fsq/</tt>):</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n\u251c\u2500\u2500 fail\n\u251c\u2500\u2500 queue\n\u2514\u2500\u2500 tmp\n</pre>\n</div>\n<div id=\"enqueueing-work\">\n<h3>Enqueueing Work</h3>\n<p>To enqueue work to the <tt>a_queue</tt> queue, simply run:</p>\n<pre>$ echo \"data\" | fsq enqueue a_queue args to enqueue\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; # enqueue a string\n&gt;&gt;&gt; fsq.senqueue('a_queue', 'data', 'args', 'to', 'enqueue')\n&gt;&gt;&gt; # ... or a file\n&gt;&gt;&gt; fsq.senqueue('a_queue', '/path/to/data.file', 'args', 'to', 'enqueue')\n</pre>\n<p>Enqueueing adds a file to the <tt>queue</tt> directory of <tt>a_queue</tt>:</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n\u251c\u2500\u2500 fail\n\u251c\u2500\u2500 queue\n|   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\n\u2514\u2500\u2500 tmp\n</pre>\n</div>\n<div id=\"processing-work\">\n<h3>Processing Work</h3>\n<p>To process jobs, use the <tt>fsq scan</tt> program:</p>\n<pre>$ # echo gets \"args\", \"to\", \"enqueue\" as $1..$3 and \"data\" on stdin\n$ fsq scan a_queue echo\nargs to enqueue\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; for work in fsq.scan('a_queue'):\n...     print \" \".join(work.arguments)\n...     fsq.done('a_queue')\nargs to enqueue\n</pre>\n<p>Work that is successfully completed moves to the done directory:</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n|   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\n\u251c\u2500\u2500 fail\n\u251c\u2500\u2500 queue\n\u2514\u2500\u2500 tmp\n</pre>\n<p>As fsq scans each work item, it obtains an exclusive lock on the work item\nfile, so it is safe to run multiple scan processes (or threads) in parallel on\nthe same queue with no fear of duplicating effort.</p>\n</div>\n<div id=\"failures-in-processing-work\">\n<h3>Failures in Processing Work</h3>\n<p>Should work fail during processing:</p>\n<pre>$ fsq scan a_queue sh -c 'exit 100'\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; for work in fsq.scan('a_queue'):\n...     fsq.fail('a_queue')\n</pre>\n<p>The failed work will be moved to the fail directory:</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n\u251c\u2500\u2500 fail\n|   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\n\u251c\u2500\u2500 queue\n\u2514\u2500\u2500 tmp\n</pre>\n<p>Work can also fail temporarily, which will cause the work to remain in the\n<tt>queue</tt> directory until it is older than <tt>FSQ_TTL</tt> seconds old, or until\nit has been tried more than <tt>FSQ_MAX_TRIES</tt> times unsuccessfully:</p>\n<pre>$ # exit code 111 indicates temporary failure\n$ FSQ_MAX_TRIES=2 fsq scan a_queue sh -c 'exit 100'\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; fsq.set_const('FSQ_MAX_TRIES', 2)\n&gt;&gt;&gt; for work in fsq.scan('a_queue'):\n...     fsq.fail_tmp(work)\n</pre>\n<p>The name of the work item will change to indicate that the item has failed\nonce:</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n\u251c\u2500\u2500 fail\n\u251c\u2500\u2500 queue\n|   \u2514\u2500\u2500 _20131005205643_0_25577_mss_1_args_to_enqueue\n\u2514\u2500\u2500 tmp\n</pre>\n</div>\n<div id=\"taking-queues-down\">\n<h3>Taking Queues Down</h3>\n<p>To temporaily stop all scanning of any queue, you simply use the <tt>fsq down</tt>\nprogram:</p>\n<pre>$ fsq down a_queue\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; fsq.down('a_queue')\n</pre>\n<p>Which creates a regular file named <tt>down</tt> in the <tt>a_queue</tt> directory\npreventing scan from working on the queue:</p>\n<pre>/var/fsq/a_queue\n\u251c\u2500\u2500 done\n\u251c\u2500\u2500 down\n\u251c\u2500\u2500 fail\n\u251c\u2500\u2500 queue\n|   \u2514\u2500\u2500 _20131005205643_0_25577_mss_0_args_to_enqueue\n\u2514\u2500\u2500 tmp\n</pre>\n<p>To bring a queue back up again, you simply use the <tt>fsq up</tt> program:</p>\n<pre>$ fsq up a_queue\n</pre>\n<p>Or from the Python API:</p>\n<pre>&gt;&gt;&gt; import fsq\n&gt;&gt;&gt; fsq.up('a_queue')\n</pre>\n<p>Which removes the <tt>down</tt> file, and allows the queue to be scanned properly\nagain.</p>\n</div>\n<div id=\"the-tmp-directory\">\n<h3>The tmp Directory</h3>\n<p>The tmp directory within a_queue is used by fsq under the hood to ensure that\nall items are enqueued atomically.</p>\n</div>\n<div id=\"the-fsq-file-name\">\n<h3>The fsq File Name</h3>\n<pre>_20120710213904_0_13044_mss_0_args_to_enqueue\n_20120710213904_1_13044_mss_0_args_to_enqueue\n+|-----+------| + |-+-| |+| + |------+------|\n|      |        |   |    |  |        |\n|      |        |   |    |  |        +-&gt; FSQ_DELIMITER seperated\n|      |        |   |    |  |            arguments\n|      |        |   |    |  +-&gt; tries: number of failed attempts\n|      |        |   |    |      to process\n|      |        |   |    +-&gt; hostname: the name of the host on\n|      |        |   |        which the work-item was enqueued.\n|      |        |   +-&gt; pid of the process which enqueued the\n|      |        |       work-item\n|      |        +-&gt; entropy: should a work-item be generated\n|      |            with the same arguments, pid, hostname\n|      |            and timestamp, entropy is incremented to\n|      |            generate uniqueness.\n|      +-&gt; timestamp in FSQ_TIMEFMT format\n+-&gt; FSQ_DELIMITER used at enqueue time\n</pre>\n</div>\n</div>\n<div id=\"environment\">\n<h2>ENVIRONMENT</h2>\n<p>The fsq suite and python library makes use of a number of environment\nvariables (each prefixed by <tt>FSQ_</tt>), which modify its behavior.  Each\nenvironment variable is also available as a package-level constant.</p>\n<p>Please refer to <tt>man 7 fsq</tt> for a complete list.</p>\n</div>\n<div id=\"authors\">\n<h2>AUTHORS</h2>\n<div>\n<div>Matthew Story &lt;<a href=\"mailto:matt.story%40axial.net\">matt<span>.</span>story<span>@</span>axial<span>.</span>net</a>&gt;</div>\n<div>Isaac (.ike) Levy &lt;<a href=\"mailto:ike%40blackskyresearch.net\">ike<span>@</span>blackskyresearch<span>.</span>net</a>&gt;</div>\n<div>Will O\u2019Meara &lt;<a href=\"mailto:will.omeara%40axial.net\">will<span>.</span>omeara<span>@</span>axial<span>.</span>net</a>&gt;</div>\n<div>Jeff Rand &lt;<a href=\"mailto:jeff.rand%40axial.net\">jeff<span>.</span>rand<span>@</span>axial<span>.</span>net</a>&gt;</div>\n</div>\n<div id=\"with-additional-contributions-from\">\n<h3>With Additional Contributions From:</h3>\n<div>\n<div>Will Martino</div>\n<div>Will Slippey</div>\n<div>Jacob Yuan</div>\n</div>\n</div>\n<div id=\"and-thanks-to\">\n<h3>And Thanks To:</h3>\n<div>\n<div>William Baxter (For trigger, and for inspiring fsq)</div>\n<div>Bruce Guenter (For nullmailer, featuring a simpler file-system queue)</div>\n<div>Daniel J Bernstein (For QMail, inspiring trigger and nullmailer)</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1054158, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3b6842cfd842cd8d6bfa7e0b93c2081e", "sha256": "3ca7f48e5933079460b73d966bd5c3ec59e96e2c39e7960801cdbf388f1506d0"}, "downloads": -1, "filename": "fsq-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3b6842cfd842cd8d6bfa7e0b93c2081e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45419, "upload_time": "2013-04-03T13:02:35", "upload_time_iso_8601": "2013-04-03T13:02:35.593575Z", "url": "https://files.pythonhosted.org/packages/3c/72/358a776dde6f37b23bd8aac1de6a1924098796255e39ce4bb548ccabb241/fsq-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ac64907f55871c35bc2711c93d77d648", "sha256": "d992b1a7df25b61ba69361e3d525715af5c8ef1811ea88a73333cded22727165"}, "downloads": -1, "filename": "fsq-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ac64907f55871c35bc2711c93d77d648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45427, "upload_time": "2013-04-03T18:03:53", "upload_time_iso_8601": "2013-04-03T18:03:53.099713Z", "url": "https://files.pythonhosted.org/packages/06/f1/e04e218eff7277d4d5edee121b02b36516fd8afe7e6045deac1bac7b3a5f/fsq-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c04b7bb836fe17e2ce26988a4cb46117", "sha256": "5e043383bb90eedf5d570906f9805dd955dcd6e269a7c61a6ef43cae9ad91edb"}, "downloads": -1, "filename": "fsq-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c04b7bb836fe17e2ce26988a4cb46117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85805, "upload_time": "2013-10-06T01:30:07", "upload_time_iso_8601": "2013-10-06T01:30:07.029467Z", "url": "https://files.pythonhosted.org/packages/51/da/56da2ba20c04881d72919a61818307637f022e9f58af66edc9072d0e68eb/fsq-0.2.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "6422127c064e5cbbd9278cf331afb0c0", "sha256": "a17cd60e088d282678e8e740153e434f2a059e49b02cd4a918cf17f68fdab5da"}, "downloads": -1, "filename": "fsq-0.2.5-py27-none-any.whl", "has_sig": false, "md5_digest": "6422127c064e5cbbd9278cf331afb0c0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 96756, "upload_time": "2014-04-07T20:01:56", "upload_time_iso_8601": "2014-04-07T20:01:56.193003Z", "url": "https://files.pythonhosted.org/packages/6a/da/543285e1977edbf1954eada9cda63b2645e8cb88137c53b212919e661e38/fsq-0.2.5-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4155733d089354d2afc87d9dd6f65f85", "sha256": "bb6b17ba94b3ad429eb8e94c52939204f361ed73da6b7617d317400d0dde9dc9"}, "downloads": -1, "filename": "fsq-0.2.5.tar.gz", "has_sig": false, "md5_digest": "4155733d089354d2afc87d9dd6f65f85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73056, "upload_time": "2014-04-07T20:01:53", "upload_time_iso_8601": "2014-04-07T20:01:53.757396Z", "url": "https://files.pythonhosted.org/packages/a2/8d/883268754f95e966fb9d686f0adf6b432e751d1a14750afeb5f648d50b9d/fsq-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6422127c064e5cbbd9278cf331afb0c0", "sha256": "a17cd60e088d282678e8e740153e434f2a059e49b02cd4a918cf17f68fdab5da"}, "downloads": -1, "filename": "fsq-0.2.5-py27-none-any.whl", "has_sig": false, "md5_digest": "6422127c064e5cbbd9278cf331afb0c0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 96756, "upload_time": "2014-04-07T20:01:56", "upload_time_iso_8601": "2014-04-07T20:01:56.193003Z", "url": "https://files.pythonhosted.org/packages/6a/da/543285e1977edbf1954eada9cda63b2645e8cb88137c53b212919e661e38/fsq-0.2.5-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4155733d089354d2afc87d9dd6f65f85", "sha256": "bb6b17ba94b3ad429eb8e94c52939204f361ed73da6b7617d317400d0dde9dc9"}, "downloads": -1, "filename": "fsq-0.2.5.tar.gz", "has_sig": false, "md5_digest": "4155733d089354d2afc87d9dd6f65f85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73056, "upload_time": "2014-04-07T20:01:53", "upload_time_iso_8601": "2014-04-07T20:01:53.757396Z", "url": "https://files.pythonhosted.org/packages/a2/8d/883268754f95e966fb9d686f0adf6b432e751d1a14750afeb5f648d50b9d/fsq-0.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:02 2020"}