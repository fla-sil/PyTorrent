{"info": {"author": "Avi Aryan", "author_email": "avi.aryan123@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "# playlist-dl\n\nYoutube playlist downloader. Based on the majestic [youtube-dl](http://youtube-dl.org/)\n\n\n### Features\n\n* Resumable downloading\n* Video resolution, video format, audio bitrate, audio format can be configured\n* Video Output format (via conversion) can also be specified\n* Other [youtube-dl options](https://github.com/rg3/youtube-dl/blob/master/README.md) are also supported\n\n\n### Installation\n\nPython 3 only.  \nGet it from pip\n```\npip install playlist-dl\n```\n\nor download the zip and execute the following\n```\npython setup.py install\n```\n\n\n### Tutorial\n\n* To start a new playlist download, create a new folder and open terminal (cmd) in it.\n* Then run `playlist-dl`\n* Give the playlist link and playlist-dl (actually youtube-dl) will start scanning the playlist.\n* After that it will create a config.json file in that folder. Edit that if needed.\n* Videos will start downloading one by one.\n* You can close the terminal any time. Reopening the terminal in that folder and running `playlist-dl` will resume the downloads.\n\n\n### Config.json\n\n* `start` - The item in playlist from where the download will be started.\n* `end` - The item in playlist till where downloading will be done.\n* `output_format` - The format to convert the downloaded video to. (eg > mkv,mp4,flv,webm)\n* `download.resolution` - The height of the video to download. If set to 0, then bestvideo will be downloaded.\n* `download.video_format` - The format of the video stream to download. Note that this is different from `output_format` (eg > flv,webm,mp4).\n* `download.bitrate` - The bitrate of the audio to download. If set to 0, then bestaudio will be downloaded.\n* `download.audio_format` - The format of the audio stream to download. (eg > webm,m4a)\n* `download.more_options` - More download options. See [youtube-dl README](https://github.com/rg3/youtube-dl/blob/master/README.md) for the complete list.\n\n**NOTE** - If the program finds no match with your `download.` audio/video settings, then it will automatically settle with the most preferable audio/video options. So if you leave `video_format` blank and just specify resolution, it will look in all formats for that resolution. Therefore it is recommended to specify `output_format` for consistency.\n\n\n##### Example of a config.json\n\n```json\n{\n    \"start\": 37,\n    \"output_format\": \"mkv\",\n    \"url\": \"https://www.youtube.com/watch?v=6m44ul3fzH4&list=PLfP-5ohlBRxXUWCJRrR0i4Eft02OB_XkE&index=1\",\n    \"download\": {\n        \"video_format\": \"webm\",\n        \"more_options\": \"-o \\\"%(title)s.%(ext)s\\\" --external-downloader aria2c --external-downloader-args \\\"-x 16 -s 16 -k 5M\\\"\",\n        \"audio_format\": \"webm\",\n        \"bitrate\": 128,\n        \"resolution\": 480\n    },\n    \"end\": 49\n}\n```", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/aviaryan/playlist-dl", "keywords": "youtube playlist download youtube-dl ytd", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "playlist-dl", "package_url": "https://pypi.org/project/playlist-dl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/playlist-dl/", "project_urls": {"Homepage": "http://github.com/aviaryan/playlist-dl"}, "release_url": "https://pypi.org/project/playlist-dl/0.2/", "requires_dist": null, "requires_python": "", "summary": "Configurable Youtube Playlist downloader", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # playlist-dl<br><br>Youtube playlist downloader. Based on the majestic [youtube-dl](http://youtube-dl.org/)<br><br><br>### Features<br><br>* Resumable downloading<br>* Video resolution, video format, audio bitrate, audio format can be configured<br>* Video Output format (via conversion) can also be specified<br>* Other [youtube-dl options](https://github.com/rg3/youtube-dl/blob/master/README.md) are also supported<br><br><br>### Installation<br><br>Python 3 only.  <br>Get it from pip<br>```<br>pip install playlist-dl<br>```<br><br>or download the zip and execute the following<br>```<br>python setup.py install<br>```<br><br><br>### Tutorial<br><br>* To start a new playlist download, create a new folder and open terminal (cmd) in it.<br>* Then run `playlist-dl`<br>* Give the playlist link and playlist-dl (actually youtube-dl) will start scanning the playlist.<br>* After that it will create a config.json file in that folder. Edit that if needed.<br>* Videos will start downloading one by one.<br>* You can close the terminal any time. Reopening the terminal in that folder and running `playlist-dl` will resume the downloads.<br><br><br>### Config.json<br><br>* `start` - The item in playlist from where the download will be started.<br>* `end` - The item in playlist till where downloading will be done.<br>* `output_format` - The format to convert the downloaded video to. (eg &gt; mkv,mp4,flv,webm)<br>* `download.resolution` - The height of the video to download. If set to 0, then bestvideo will be downloaded.<br>* `download.video_format` - The format of the video stream to download. Note that this is different from `output_format` (eg &gt; flv,webm,mp4).<br>* `download.bitrate` - The bitrate of the audio to download. If set to 0, then bestaudio will be downloaded.<br>* `download.audio_format` - The format of the audio stream to download. (eg &gt; webm,m4a)<br>* `download.more_options` - More download options. See [youtube-dl README](https://github.com/rg3/youtube-dl/blob/master/README.md) for the complete list.<br><br>**NOTE** - If the program finds no match with your `download.` audio/video settings, then it will automatically settle with the most preferable audio/video options. So if you leave `video_format` blank and just specify resolution, it will look in all formats for that resolution. Therefore it is recommended to specify `output_format` for consistency.<br><br><br>##### Example of a config.json<br><br>```json<br>{<br>    \"start\": 37,<br>    \"output_format\": \"mkv\",<br>    \"url\": \"https://www.youtube.com/watch?v=6m44ul3fzH4&amp;list=PLfP-5ohlBRxXUWCJRrR0i4Eft02OB_XkE&amp;index=1\",<br>    \"download\": {<br>        \"video_format\": \"webm\",<br>        \"more_options\": \"-o \\\"%(title)s.%(ext)s\\\" --external-downloader aria2c --external-downloader-args \\\"-x 16 -s 16 -k 5M\\\"\",<br>        \"audio_format\": \"webm\",<br>        \"bitrate\": 128,<br>        \"resolution\": 480<br>    },<br>    \"end\": 49<br>}<br>```\n          </div>"}, "last_serial": 1796807, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "85b65d370c6238c82910c31ed4b47e9a", "sha256": "8e04f71faf88c63ce14a0180bbd8ade1ee7a72645d49b0565bd7bd06e01b471e"}, "downloads": -1, "filename": "playlist_dl-0.1-py3.4.egg", "has_sig": false, "md5_digest": "85b65d370c6238c82910c31ed4b47e9a", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 12559, "upload_time": "2015-11-02T09:09:35", "upload_time_iso_8601": "2015-11-02T09:09:35.605674Z", "url": "https://files.pythonhosted.org/packages/6a/ff/8071c1b7e79710dfac38b6b581b555744c9ad60611f45852460b3a799ee1/playlist_dl-0.1-py3.4.egg", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4a1029e59733bdbb2f0656e4516efac1", "sha256": "d6fd7180509d6c307e14ce38cff32f6ac1a62aa9bdabd3d00f5d08d08a2bb27d"}, "downloads": -1, "filename": "playlist_dl-0.2-py3.4.egg", "has_sig": false, "md5_digest": "4a1029e59733bdbb2f0656e4516efac1", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 13306, "upload_time": "2015-11-02T10:14:35", "upload_time_iso_8601": "2015-11-02T10:14:35.261371Z", "url": "https://files.pythonhosted.org/packages/fb/d0/8364df830a2fd38056a24883893bb5e171f607269e78767724bc360eb3cf/playlist_dl-0.2-py3.4.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a1029e59733bdbb2f0656e4516efac1", "sha256": "d6fd7180509d6c307e14ce38cff32f6ac1a62aa9bdabd3d00f5d08d08a2bb27d"}, "downloads": -1, "filename": "playlist_dl-0.2-py3.4.egg", "has_sig": false, "md5_digest": "4a1029e59733bdbb2f0656e4516efac1", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 13306, "upload_time": "2015-11-02T10:14:35", "upload_time_iso_8601": "2015-11-02T10:14:35.261371Z", "url": "https://files.pythonhosted.org/packages/fb/d0/8364df830a2fd38056a24883893bb5e171f607269e78767724bc360eb3cf/playlist_dl-0.2-py3.4.egg", "yanked": false}], "timestamp": "Fri May  8 02:53:34 2020"}