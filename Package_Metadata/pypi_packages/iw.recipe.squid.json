{"info": {"author": "Ingeniweb", "author_email": "support@ingeniweb.com", "bugtrack_url": null, "classifiers": ["Framework :: Zope2", "Programming Language :: Python", "Topic :: Internet :: Proxy Servers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=======================\niw.recipe.squid package\n=======================\n\n.. contents::\n\nWhat is iw.recipe.squid ?\n=========================\n\nInstall squid proxy server and all specific python script in order to work with\nan zope server or an zeo cluster\n\nDo you have an example of build out ?\n=====================================\n\nAdd into your `buildout.cfg` a section::\n\n    [buildout]\n    parts =\n       ...\n       squid\n\n    [squid]\n    recipe = iw.recipe.squid\n\n    squid_accelerated_hosts =\n        www.mysite.org: 127.0.0.1:8080/mysite\n\nwhere options are:\n\n\n- squid_accelerated_hosts : a list that configure your zope backend like this\n  pattern::\n\n    visible_host_name: <zope ip_or_host_name>:<zope list port>/<zope path>\n\noptionnal options are:\n\n- url : url to download squid src in order to compile it (todo)\n- squid_owner : squid_owner of squid process (user login by default)\n- location: location of squid install (by default parts-directory/squid of buildout)\n- squid_visible_hostname: host name show in error messages (by default the first\n  visible_host_name in squid_accelerated_host , www.mysite.org )\n- squid_port : port of squid (3128 by default)\n- squid_version : version of squid (2.6 by default)\n- squid_localisation : where squid is for apache (127.0.0.1 by default, squid and\n  apache are in the same host)\n- squid_executable : location of squid binary executable (by default /usr/sbin/squid)\n- squid_admin_email : email of the admin squid (by default webmaster@www.mysite.org)\n- squid_cache_size_mb : size disk cache in mb (1000 by default)\n- squid_config_dir : the config directory of squid ( parts-directory/squid/etc by default)\n- squid_cache_dir : the cache localisation of squid (parts-directory/squid/cache by default)\n- squid_log_dir : the log localisation of squid (parts-directory/squid/log by default)\n- apache_conf_dir : the apache config dir (parts-directory/squid/apache by default)\n- front_http : 1 by default (ie apache serve http request)\n- front_https : 0 by default (ie apache serve https request)\n- debug_redirector : 0 by default (ie debug squid redirector)\n- debug_squid_acl : 0 by default (ie debug squid acl)\n- debug_squid_rewrite_rules : 0 by default (ie debug squid acl)\n- debug_apache_rewrite_rules : 0 by default (ie debug apache rewrite rules , 9 for full debug)\n- zope_cache_key : a list of zope cache key (if you want to cache specific\n  zone of your site add specific acl)\n- bind_apache_http : binding ip\\:port of apache (80 by default in http, can be only port configure)\n- bind_apache_https : binding ip\\:port of apache (443 by default in https, can be only port configure)\n- squid_extra_conf : extra conf for squid \n\nbuildout command create a directory structure like that::\n\n    parts/squid/apache/vhost_www.mysite.org_80.conf : virtual host to include to apache\n    parts/squid/etc/ : all config file for squid\n    parts/squid/etc/squid.conf : main squid conf\n    parts/squid/etc/iRedirector.py : to launch squidRewriteRules\n    parts/squid/etc/squidAcl.py : avoid cache for authenticated user by squid\n    parts/squid/etc/squidRewriteRules.py : rewrite engine for squid\n    parts/squid/etc/squid_logrotate.conf : config for log rotate system (for logrotate system)\n    parts/squid/cache/ : cache directory\n    parts/squid/log/ : logs directory\n    parts/squid/var/ : var directory, contains pid file\n    bin/squidctl : squid controler shell script (for unix),\n    Usage: squidctl {start|stop|reload|restart|status|debug|purgecache|createswap|configtest|rotate}\n\n\n\nWhat about squid and apache after conf generation ?\n===================================================\n\nApache\n++++++\n\nActivate virtual hosts by making a symbolic link\n\nIn debian::\n\n    ln -s .../parts/squid/apache/vhost_www.mysite.org_80.conf /etc/apache2/sites-enabled/\n\nMake sure that mod_rewrite, mod_proxy are enabled for apache\n\nLogs are in parts/squid/log\n\nSquid\n+++++\n\nTo populate squid directory cache::\n\n    /usr/sbin/squid -z -f parts/squid/etc/squid.conf OR\n    bin/squidctl createswap\n\nTo launch squid the generated config::\n\n    /usr/sbin/squid -f parts/squid/etc/squid.conf OR\n    bin/squidctl start\n\nThat all's folk\n\n\nHow to use iw.recipe.squid ?\n============================\n\n\nAs a recipe, you have to provide a part in your buildout file\nTest first the most simple part that we can configure::\n\n\n    >>> import getpass\n    >>> owner = group = getpass.getuser()\n    >>> import os\n    >>> data_dir = os.path.join(test_dir, 'data')\n    >>> parts_dir = os.path.join(data_dir, 'parts')\n    >>> buildout = {'instance': {'location': test_dir},\n    ...             'buildout': {'directory': test_dir,\n    ...                          'parts-directory': test_dir}}\n    >>> name = 'squid'\n    >>> options = {'url': 'mypackage.tgz', #url where we download squid src\n    ...            'squid_owner' : 'proxy',\n    ...            }\n    >>> options['squid_accelerated_hosts'] = \"\"\"\n    ...    www.mysite.com: 127.0.0.1:8080/mysite\n    ... \"\"\"\n    >>> options['squid_extra_conf'] = \"\"\"\n    ... refresh_pattern . 0 20%    1440 \n    ... \"\"\"\n\n    Creating the recipe::\n\n    >>> from iw.recipe.squid import Recipe\n    >>> recipe = Recipe(buildout, name, options)\n\n    Test that zope conf is good::\n\n    >>> recipe.zope_confs\n    [{'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'www.mysite.com', 'zope_port': '8080'}]\n\n    >>> recipe.options['squid_visible_hostname']\n    'www.mysite.com'\n\n    >>> recipe.options['front_https']\n    '0'\n\n    >>> recipe.options['squid_admin_email']\n    'webmaster@www.mysite.com'\n\n    >>> recipe.options['squid_version']\n    '2.6'\n\n    >>> recipe.options['binary_location']\n    '.../bin'\n\n    >>> paths = recipe.install()\n\nChecking the files created::\n\n\n    >>> paths.sort()\n    >>> paths\n    ['...squid/tests/bin/squidctl', '...squid/tests/squid/apache/vhost_www.mysite.com_80.conf', '...squid/tests/squid/etc/iRedirector.py', '...squid/tests/squid/etc/squid.conf', '...squid/tests/squid/etc/squidAcl.py', '...squid/tests/squid/etc/squidRewriteRules.py', '...squid/tests/squid/etc/squid_logrotate.conf']\n\n\n\nThe default generated squid.conf\n++++++++++++++++++++++++++++++++\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'etc', 'squid.conf')\n    >>> print open(cfg).read()\n    # squid configuration file\n    <BLANKLINE>\n    # BASIC CONFIGURATION\n    # ------------------------------------------------------------------------------\n    #  TAG: visible_hostname\n    #    If you want to present a special hostname in error messages, etc,\n    #    define this.  Otherwise, the return value of gethostname()\n    #    will be used. If you have multiple caches in a cluster and\n    #    get errors about IP-forwarding you must set them to have individual\n    #    names with this setting.\n    visible_hostname www.mysite.com\n    <BLANKLINE>\n    cache_effective_user proxy\n    cache_effective_group proxy\n    <BLANKLINE>\n    # port on which to listen\n    <BLANKLINE>\n    http_port 3128 vhost defaultsite=www.mysite.com\n    <BLANKLINE>\n    <BLANKLINE>\n    cache_dir ufs .../squid/cache 1000  16     256\n    cache_mgr webmaster@www.mysite.com\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    # LOGS\n    # ------------------------------------------------------------------------------\n    log_icp_queries off\n    cache_access_log .../squid/log/access.log\n    cache_log .../squid/log/cache.log\n    cache_store_log .../squid/log/store.log\n    # emulate_httpd_log off\n    <BLANKLINE>\n    <BLANKLINE>\n    # RESOURCES\n    # ------------------------------------------------------------------------------\n    # amount of memory used for caching recently accessed objects - defaults to 8 MB\n    cache_mem 64 MB\n    maximum_object_size 10 MB         # max cached object size\n    maximum_object_size_in_memory 300 KB    # max cached-in-memory object size\n    <BLANKLINE>\n    <BLANKLINE>\n    # ACCESS CONTROL\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    # Basic ACLs\n    acl all src 0.0.0.0/0.0.0.0\n    acl localhost src 127.0.0.1/32\n    acl ssl_ports port 443 563\n    acl safe_ports port 80 443\n    <BLANKLINE>\n    <BLANKLINE>\n    acl zope_servers src 127.0.0.1\n    #acl zope_servers src 127.0.0.1\n    <BLANKLINE>\n    acl manager proto cache_object\n    acl connect method connect\n    <BLANKLINE>\n    # Assumes apache rewrite rule looks like this:\n    # RewriteRule ^/(.*)/$ http://127.0.0.1:3128/http/%{SERVER_NAME}/80/$1 [L,P]\n    <BLANKLINE>\n    acl accelerated_protocols proto http\n    acl accelerated_hosts dst 127.0.0.0/8\n    acl accelerated_ports myport 3128\n    acl accelerated_urls urlpath_regex __original_url__\n    acl accelerated_urls urlpath_regex __zope_cache_key__.*__cache_url__\n    <BLANKLINE>\n    <BLANKLINE>\n    http_access allow accelerated_hosts\n    http_access allow accelerated_ports\n    http_access allow accelerated_urls\n    http_access allow accelerated_protocols\n    <BLANKLINE>\n    always_direct allow accelerated_hosts\n    always_direct allow accelerated_ports\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    # Purge access - zope servers can purge but nobody else\n    acl purge method PURGE\n    http_access allow zope_servers purge\n    http_access deny purge\n    <BLANKLINE>\n    # Reply access\n    # http_reply_access allow all\n    <BLANKLINE>\n    # Cache manager setup - cache manager can only connect from localhost\n    # only allow cache manager access from localhost\n    http_access allow manager localhost\n    http_access deny manager\n    # deny connect to other than ssl ports\n    http_access deny connect !ssl_ports\n    <BLANKLINE>\n    # ICP access - anybody can access icp methods\n    icp_access allow localhost zope_servers\n    <BLANKLINE>\n    # And finally deny all other access to this proxy\n    http_access deny all\n    <BLANKLINE>\n    <BLANKLINE>\n    # CACHE PEERS\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    # CONFIGURE THE CACHE PEERS. FIRST PORT IS THE HTTP PORT, SECOND PORT\n    # IS THE ICP PORT. REMEMBER TO ENABLE 'icp-server' ON YOUR 'zope.conf'\n    # LISTENING ON THE ICP PORT YOU USE HERE.\n    # acl in_backendpool dstdomain backendpool\n    # cache_peer 127.0.0.1 parent 8080 9090 no-digest no-netdb-exchange\n    # cache_peer 192.168.0.3 parent 8081 9091 no-digest no-netdb-exchange\n    <BLANKLINE>\n    # cache_peer_access 127.0.0.1 allow in_backendpool\n    # cache_peer_access 127.0.0.1 deny all\n    <BLANKLINE>\n    # cache_peer_access 192.168.0.3 allow in_backendpool\n    # cache_peer_access 192.168.0.3 deny all\n    <BLANKLINE>\n    # IF YOU NEED TO FORWARD REQUESTS TO HOSTS NOT IN THE POOL THIS IS\n    # WHERE YOU ALLOW THE TARGET DOMAINS\n    # acl local_servers dstdomain some.mysite.com other.mysite.com\n    # always_direct allow local_servers\n    <BLANKLINE>\n    # THE FOLLOWING DIRECTIVE IS NEEDED TO MAKE 'backendpool' RESOLVE TO\n    # THE POOL OF CACHE PEERS.\n    # never_direct allow all\n    # icp_access allow all\n    <BLANKLINE>\n    # PROXY ON, NEEDED TO MAKE CACHE PEERS INTERCOMMUNICATE\n    # httpd_accel_with_proxy on\n    <BLANKLINE>\n    <BLANKLINE>\n    # REDIRECTOR PROGRAM\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    <BLANKLINE>\n    redirect_program .../squid/etc/iRedirector.py\n    url_rewrite_children 1\n    url_rewrite_concurrency 20\n    url_rewrite_host_header off\n    <BLANKLINE>\n    <BLANKLINE>\n    # SPECIFY WHAT REQUESTS SQUID SHOULD CACHE\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    # Control what squid caches.  We want to have squid handle content that is not\n    # personalized and that does not require any kind of authorization.\n    # 1) Always cache static content in squid\n    <BLANKLINE>\n    acl static_content urlpath_regex -i \\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$\n    no_cache allow static_content\n    <BLANKLINE>\n    # 2) (OPTIONAL) Prevent squid from caching an item that is the result of a POST\n    <BLANKLINE>\n    acl post_requests method POST\n    no_cache deny post_requests\n    <BLANKLINE>\n    # 3) (OPTIONAL) Prevent squid from caching items with items in the query string\n    # If this is uncommented, squid will treat a url with 2 different query strings\n    # as 2 different urls when caching.\n    <BLANKLINE>\n    # XXX: where did this example go?\n    <BLANKLINE>\n    <BLANKLINE>\n    acl zope_key_caching urlpath_regex d41d8cd98f00b204e9800998ecf8427e\n    no_cache allow zope_key_caching\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    # 4) Prevent squid from caching requests from authenticated users or conditional\n    # GETs with an If-None-Match header (since squid doesn't know about ETags)\n    # We use an external python method to check these conditions and pass in the\n    # value of the __ac cookie (two different ways to allow for different cookie\n    # delimiters), the HTTP Authorization header, and the If-None-Match header.\n    # Squid caches the results of the external python method, so for debugging, set\n    # the options ttl=0 negative_ttl=0 so you can see what is going on\n    <BLANKLINE>\n    # external_acl_type is_cacheable_type children=20 ttl=0 negative_ttl=0 %{Cookie:__ac} %{Cookie:;__ac} %{Authorization} %{If-None-Match} .../squid/etc/squidAcl.py\n    <BLANKLINE>\n    external_acl_type is_cacheable_type protocol=2.5 children=20 %{Cookie:__ac} %{Cookie:;__ac} %{Authorization} %{If-None-Match} .../squid/etc/squidAcl.py\n    acl is_cacheable external is_cacheable_type\n    no_cache allow is_cacheable\n    <BLANKLINE>\n    collapsed_forwarding on\n    <BLANKLINE>\n    # Explicitly disallow squid from handling anything else\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    no_cache deny all\n    <BLANKLINE>\n    <BLANKLINE>\n    # SPECIFY EFFECTS OF A BROWSER REFRESH\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    # RELOAD_INTO_IMS CAUSES WEIRD SQUID BEHAVIOR - IT APPEARS TO CAUSE FILES WITH\n    # INAPPROPRIATE HEADERS TO END UP IN THE CACHE, AND AS A RESULT BROWSERS END\n    # UP MAKING LOTS OF EXTRA (CONDITIONAL) REQUESTS WHEN THEY WOULD OTHERWISE MAKE\n    # NO REQUESTS.  DO NOT USE!\n    <BLANKLINE>\n    # Tell squid how to handle expiration times for content with no explicit expiration\n    # Assume static content is fresh for at least an hour and at most a day\n    #refresh_pattern -i  \\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$ 60 50% 1440 reload-into-ims\n    #refresh_pattern . 0 20%    1440\n    <BLANKLINE>\n    # Change force-refresh requests into conditional gets using if-modified-since\n    #reload_into_ims on\n    <BLANKLINE>\n    # DEBUGGING\n    # ------------------------------------------------------------------------------\n    # debug_options ALL,1 33,2 # use this for debugging acls\n    # debug_options ALL,8\n    <BLANKLINE>\n    <BLANKLINE>\n    # MISCELLANEOUS\n    # ------------------------------------------------------------------------------\n    # have squid handle all requests with ranges\n    # range_offset_limit -1\n    <BLANKLINE>\n    # amount of time squid waits for existing requests to be serviced before shutting down\n    shutdown_lifetime 1 seconds\n    <BLANKLINE>\n    # allow squid to process multiple requests simultaneously if client is pipelining\n    pipeline_prefetch on\n    <BLANKLINE>\n    # allow white spaces to be included in URLs\n    uri_whitespace allow\n    <BLANKLINE>\n    <BLANKLINE>\n    # OTHER PARAMETERS THAT MAY BE OF INTEREST\n    # ------------------------------------------------------------------------------\n    <BLANKLINE>\n    # logfile_rotate 0\n    # reload_into_ims off\n    # error_directory /usr/share/squid/errors/\n    <BLANKLINE>\n    pid_filename .../squid/var/squid.pid\n    <BLANKLINE>\n    <BLANKLINE>\n    refresh_pattern . 0 20%    1440 \n    <BLANKLINE>\n\nThe default generated squidRewriteRules.py\n++++++++++++++++++++++++++++++++++++++++++\n\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'etc', 'squidRewriteRules.py')\n    >>> print open(cfg).read()\n    #!...\n    rewrites = (\n    (r'http://[^/]+/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)/__original_url__/(.*)',\n    r'http://\\1:\\2/VirtualHostBase/\\3/\\4:\\5/\\6/VirtualHostRoot/\\7', 'P,L'),\n    (r'http://[^/]+/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)/__zope_cache_key__/(.*)/__cache_url__/(.*)',\n    r'http://\\1:\\2/VirtualHostBase/\\3/\\4:\\5/\\6/VirtualHostRoot/\\7/\\8', 'P,L'),\n    <BLANKLINE>\n        )\n    ...\n\nThe default generated conf for apache\n+++++++++++++++++++++++++++++++++++++\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'etc', 'squidRewriteRules.py')\n    >>> print open(cfg).read()\n    #!...\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n    >>> print open(cfg).read()\n    NameVirtualHost *:80\n    <VirtualHost *:80>\n        ServerName www.mysite.com\n    <BLANKLINE>\n        <Proxy http://127.0.0.1:3128>\n                Allow from all\n        </Proxy>\n    <BLANKLINE>\n    <BLANKLINE>\n        RewriteEngine On\n        RewriteLog .../squid/log/rewrite_www.mysite.com.log\n        RewriteLogLevel 0\n    <BLANKLINE>\n        CustomLog .../squid/log/access_www.mysite.com.log common\n        ErrorLog .../squid/log/error_www.mysite.com.log\n    <BLANKLINE>\n        RewriteRule ^(.*)$ - [E=BACKEND_LOCATION:127.0.0.1]\n        RewriteRule ^(.*)$ - [E=BACKEND_PORT:8080]\n        RewriteRule ^(.*)$ - [E=BACKEND_PATH:mysite]\n    <BLANKLINE>\n    <BLANKLINE>\n        RewriteRule  ^/(.*)/$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/http/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n        RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/http/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n    <BLANKLINE>\n    <BLANKLINE>\n    </VirtualHost>\n    <BLANKLINE>\n\n/bin/squidacl file\n++++++++++++++++++\n\n    >>> f = open(os.path.join(recipe.options['binary_location'],'squidctl'))\n    >>> print f.read()\n    #!/bin/sh\n    ...\n    DAEMON=/usr/sbin/squid\n    CONFIG=.../squid/etc/squid.conf\n    CACHE_DIR=.../squid/cache\n    ...\n\netc/squid_logrotate.conf\n++++++++++++++++++++++++\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'etc', 'squid_logrotate.conf')\n    >>> print open(cfg).read()\n    /.../squid/var/*.log {\n        weekly\n        compress\n        delaycompress\n        maxage 730\n        rotate 104\n        size=+4096k\n        notifempty\n        missingok\n        create 740 proxy proxy\n        postrotate\n        .../bin/squidctl rotate\n        endscript\n    }\n\n\n\nMore options\n++++++++++++\n\nGive more options to the recipe::\n\n    >>> options = {'url': 'mypackage.tgz', #url where we download squid src\n    ...            'squid_owner': owner, #owner of squid process\n    ...            'squid_group' : group, #group of squid process\n    ...            'squid_port' : '3128', #listen port of proxy\n    ...            'squid_version' : '2.5',\n    ...            'squid_localisation': '127.0.0.1', #host or ip that apache use to request apache\n    ...\n    ...            'squid_admin_email' : 'myemail@mycompany.com', #name appear in error message\n    ...            'squid_cache_size_mb' : '1000', #total cache in disk\n    ...            'squid_visible_hostname' : 'mysite', #public name of your site, appear in error message\n    ...            'front_https': '1', # does front server (apache, iis)\n    ...                              # serve https url O by default\n    ...            'front_http':'1', # does front server (apache, iis) serve http url\n    ...            'bind_apache_http':'81', # change the default binding port of apache\n    ...            'debug_redirector':'1', #debug iRedirector 0 by default\n    ...            'debug_squid_acl' : '0', #debug squidacl 0 by default\n    ...            'debug_squid_rewrite_rules' : '1', #debug squidtrewriterule 0 by default\n    ...            'debug_apache_rewrite_rules' : '9', #debug apache rewrite engine\n    ...           }\n\n\nYours accelerated hosts ( zeo client or pound load balancer ,\nurls to be accelerated wich corresponding of zope urls, ports, and directories)::\n\n    >>> options['squid_accelerated_hosts'] = \"\"\"\n    ...    www.mysite.com: 127.0.0.1:8080/mysite\n    ...    mysite.com: 127.0.0.1:8080/mysite\n    ...    www.mysecondsite.com: 127.0.0.2:9080/mysite2\n    ...    mysecondsite.com: 127.0.0.2:9080/mysite2\n    ... \"\"\"\n\nThis parts is optionnal. We can cache in proxy some part of navigation via\nspecific configuration. This is sometimes usefull to cache zope pages per groups\nor via specific cookies rules. This configuration is done by zope_cache_keys.\nBe carefull : CMFSquid don't purge this url without an intervention of your part.\nAssumes that zope_cache_keys are cookies that is send by zope\nand you have created a folder in zodb name as your cache key to do job acquisition\nSpecific rewrites rules and squid are build::\n\n    >>> options['zope_cache_key'] = \"\"\"\n    ...    my_key_one\n    ...    my_key_two\n    ...    my_key_three\n    ... \"\"\"\n\n\nCreating the recipe::\n\n    >>> from iw.recipe.squid import Recipe\n    >>> recipe = Recipe(buildout, name, options)\n\nTest that zope conf is good::\n\n    >>> recipe.zope_confs\n    [{'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'www.mysite.com', 'zope_port': '8080'}, {'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'mysite.com', 'zope_port': '8080'}, {'zope_host': '127.0.0.2', 'zope_path': 'mysite2', 'host_name': 'www.mysecondsite.com', 'zope_port': '9080'}, {'zope_host': '127.0.0.2', 'zope_path': 'mysite2', 'host_name': 'mysecondsite.com', 'zope_port': '9080'}]\n\n\nZope acl are ip or host that is configure in squid in order\nto be host or ip authorized to purge cache squid.\n\nTest zope acl::\n\n    >>> recipe.options['acl_zope_hosts']\n    '127.0.0.2 127.0.0.1'\n\nTest rewrites rules::\n\n    >>> recipe.cache_key\n    ['my_key_one', 'my_key_two', 'my_key_three']\n\n\n\nRunning it::\n\n\n    >>> paths = recipe.install()\n\nChecking the files created::\n\n    >>> path = recipe.options['prefix']\n\nChecking the squid.conf created::\n\n    >>> cfg = os.path.join(path, 'etc', 'squid.conf')\n    >>> print open(cfg).read()\n    # squid configuration file\n    ...\n    http_port 3128\n    ...\n    httpd_accel_host virtual\n    httpd_accel_port 81\n    httpd_accel_uses_host_header on\n    ...\n    redirect_children 20\n    redirect_rewrites_host_header off\n    ...\n\nChecking if we have generate iRedirector conf::\n\n    >>> cfg = os.path.join(path, 'etc', 'iRedirector.py')\n    >>> print open(cfg).read()\n    #!...\n    threaded =  0...\n\n    >>> cfg = os.path.join(path, 'etc', 'squidAcl.py')\n    >>> print open(cfg).read()\n    #!...\n\nTest the change of default apache binding\n\n    >>> cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_81.conf')\n    >>> print open(cfg).read()\n    Listen *:81\n    NameVirtualHost *:81\n    ...\n\n\n\nRechange apache config::\n\n   >>> options['bind_apache_http'] = '80'\n   >>> recipe = Recipe(buildout, name, options)\n   >>> paths = recipe.install()\n   >>> cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n   >>> print open(cfg).read()\n   NameVirtualHost *:80\n   ...\n\n   >>> options['bind_apache_http'] = '192.168.2.1:80'\n   >>> recipe = Recipe(buildout, name, options)\n   >>> paths = recipe.install()\n   >>> cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n   >>> print open(cfg).read()\n   Listen 192.168.2.1:80\n   NameVirtualHost 192.168.2.1:80\n   ...\n\nView cache key generation config in apache::\n\n   >>> print open(cfg).read()\n   Listen 192.168.2.1:80\n   ...\n   <BLANKLINE>\n       RewriteRule ^(.*)$ - [E=BACKEND_LOCATION:127.0.0.1]\n       RewriteRule ^(.*)$ - [E=BACKEND_PORT:8080]\n       RewriteRule ^(.*)$ - [E=BACKEND_PATH:mysite]\n   <BLANKLINE>\n       RewriteRule ^(.*)$ - [E=have_cookie:1]\n       RewriteCond %{HTTP_COOKIE} my_key_one=\"([^\"]+) [NC]\n       RewriteRule ^(.*)$ - [E=my_key_one:%1]\n       #test if have cookie\n       RewriteCond %{HTTP_COOKIE} !^.*my_key_one.*$ [NC]\n       RewriteRule ^(.*)$ - [E=have_cookie:0]\n       RewriteCond %{HTTP_COOKIE} my_key_two=\"([^\"]+) [NC]\n       RewriteRule ^(.*)$ - [E=my_key_two:%1]\n       #test if have cookie\n       RewriteCond %{HTTP_COOKIE} !^.*my_key_two.*$ [NC]\n       RewriteRule ^(.*)$ - [E=have_cookie:0]\n       RewriteCond %{HTTP_COOKIE} my_key_three=\"([^\"]+) [NC]\n       RewriteRule ^(.*)$ - [E=my_key_three:%1]\n       #test if have cookie\n       RewriteCond %{HTTP_COOKIE} !^.*my_key_three.*$ [NC]\n       RewriteRule ^(.*)$ - [E=have_cookie:0]\n   <BLANKLINE>\n       RewriteCond %{ENV:have_cookie} 1\n       RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__zope_cache_key__/41d154089fd778d8efbd889dffc18dbd:%{ENV:my_key_one}:%{ENV:my_key_two}:%{ENV:my_key_three}/__cache_url__/$1 [L,P]\n   <BLANKLINE>\n       RewriteRule  ^/(.*)/$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n       RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n   ...\n\nNow test a 2.6 config::\n\n    >>> options['squid_version'] = '2.6'\n    >>> buildout = {'instance': {'location': test_dir},\n    ...             'buildout': {'directory': test_dir,\n    ...                          'parts-directory': test_dir}}\n    >>> name = 'squid'\n    >>> recipe = Recipe(buildout, name, options)\n    >>> recipe.options['squid_version']\n    '2.6'\n    >>> paths = recipe.install()\n    >>> cfg = os.path.join(path, 'etc', 'squid.conf')\n\n\n\nTest if redirector is threaded::\n\n    >>> cfg = os.path.join(path, 'etc', 'iRedirector.py')\n    >>> print open(cfg).read()\n    #!...\n    threaded =  1...\n\n    >>> cfg = os.path.join(path, 'etc', 'squidAcl.py')\n    >>> print open(cfg).read()\n    #!...\n    debug = 0...\n    logfile = ...squid/log...\n\nChange default location of installation::\n\n    >>> options = {'url': 'mypackage.tgz', #url where we download squid src\n    ...            'squid_owner': owner, #owner of squid process\n    ...            'squid_group' : group, #group of squid process\n    ...            'squid_port' : '3128', #listen port of proxy\n    ...            'squid_version' : '2.5',\n    ...            'squid_localisation': '127.0.0.1', #host or ip that apache use to request apache\n    ...            'squid_log_dir' : '/var/log/dir',\n    ...            'squid_config_dir' : '/usr/local/squid/etc',\n    ...            'apache_conf_dir' : '/etc/apache2/conf',\n    ...            'squid_admin_email' : 'myemail@mycompany.com', #name appear in error message\n    ...            'squid_cache_size_mb' : '1000', #total cache in disk\n    ...            'squid_visible_hostname' : 'mysite', #public name of your site, appear in error message\n    ...            'front_https': '1', # does front server (apache, iis)\n    ...                              # serve https url O by default\n    ...            'front_http':'1', # does front server (apache, iis) serve http url\n    ...            'debug_redirector':'1', #debug iRedirector 0 by default\n    ...            'debug_squid_acl' : '0', #debug squidacl 0 by default\n    ...            'debug_squid_rewrite_rules' : '1', #debug squidtrewriterule 0 by default\n    ...\n    ...           }\n\n    >>> from iw.recipe.squid import Recipe\n\n    >>> options['squid_accelerated_hosts'] = \"\"\"\n    ...    www.mysite.com: 127.0.0.1:8080/mysite\n    ...    mysite.com: 127.0.0.1:8080/mysite\n    ...    www.mysecondsite.com: 127.0.0.2:9080/mysite2\n    ...    mysecondsite.com: 127.0.0.2:9080/mysite2\n    ... \"\"\"\n\n    >>> recipe = Recipe(buildout, name, options)\n    >>> recipe.options['apache_conf_dir']\n    '/etc/apache2/conf'\n    >>> recipe.options['squid_config_dir']\n    '/usr/local/squid/etc'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://plone.org/products/iw-recipes", "keywords": "squid for zope", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "iw.recipe.squid", "package_url": "https://pypi.org/project/iw.recipe.squid/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iw.recipe.squid/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://plone.org/products/iw-recipes"}, "release_url": "https://pypi.org/project/iw.recipe.squid/1.0/", "requires_dist": null, "requires_python": null, "summary": "ZC buildout recipe to configure an squid proxy for zope", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#what-is-iw-recipe-squid\" id=\"id1\" rel=\"nofollow\">What is iw.recipe.squid ?</a></li>\n<li><a href=\"#do-you-have-an-example-of-build-out\" id=\"id2\" rel=\"nofollow\">Do you have an example of build out ?</a></li>\n<li><a href=\"#what-about-squid-and-apache-after-conf-generation\" id=\"id3\" rel=\"nofollow\">What about squid and apache after conf generation ?</a><ul>\n<li><a href=\"#apache\" id=\"id4\" rel=\"nofollow\">Apache</a></li>\n<li><a href=\"#squid\" id=\"id5\" rel=\"nofollow\">Squid</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-use-iw-recipe-squid\" id=\"id6\" rel=\"nofollow\">How to use iw.recipe.squid ?</a><ul>\n<li><a href=\"#the-default-generated-squid-conf\" id=\"id7\" rel=\"nofollow\">The default generated squid.conf</a></li>\n<li><a href=\"#the-default-generated-squidrewriterules-py\" id=\"id8\" rel=\"nofollow\">The default generated squidRewriteRules.py</a></li>\n<li><a href=\"#the-default-generated-conf-for-apache\" id=\"id9\" rel=\"nofollow\">The default generated conf for apache</a></li>\n<li><a href=\"#bin-squidacl-file\" id=\"id10\" rel=\"nofollow\">/bin/squidacl file</a></li>\n<li><a href=\"#etc-squid-logrotate-conf\" id=\"id11\" rel=\"nofollow\">etc/squid_logrotate.conf</a></li>\n<li><a href=\"#more-options\" id=\"id12\" rel=\"nofollow\">More options</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"what-is-iw-recipe-squid\">\n<h2><a href=\"#id1\" rel=\"nofollow\">What is iw.recipe.squid ?</a></h2>\n<p>Install squid proxy server and all specific python script in order to work with\nan zope server or an zeo cluster</p>\n</div>\n<div id=\"do-you-have-an-example-of-build-out\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Do you have an example of build out ?</a></h2>\n<p>Add into your <cite>buildout.cfg</cite> a section:</p>\n<pre>[buildout]\nparts =\n   ...\n   squid\n\n[squid]\nrecipe = iw.recipe.squid\n\nsquid_accelerated_hosts =\n    www.mysite.org: 127.0.0.1:8080/mysite\n</pre>\n<p>where options are:</p>\n<ul>\n<li><p>squid_accelerated_hosts : a list that configure your zope backend like this\npattern:</p>\n<pre>visible_host_name: &lt;zope ip_or_host_name&gt;:&lt;zope list port&gt;/&lt;zope path&gt;\n</pre>\n</li>\n</ul>\n<p>optionnal options are:</p>\n<ul>\n<li>url : url to download squid src in order to compile it (todo)</li>\n<li>squid_owner : squid_owner of squid process (user login by default)</li>\n<li>location: location of squid install (by default parts-directory/squid of buildout)</li>\n<li>squid_visible_hostname: host name show in error messages (by default the first\nvisible_host_name in squid_accelerated_host , www.mysite.org )</li>\n<li>squid_port : port of squid (3128 by default)</li>\n<li>squid_version : version of squid (2.6 by default)</li>\n<li>squid_localisation : where squid is for apache (127.0.0.1 by default, squid and\napache are in the same host)</li>\n<li>squid_executable : location of squid binary executable (by default /usr/sbin/squid)</li>\n<li>squid_admin_email : email of the admin squid (by default <a href=\"mailto:webmaster%40www.mysite.org\">webmaster<span>@</span>www<span>.</span>mysite<span>.</span>org</a>)</li>\n<li>squid_cache_size_mb : size disk cache in mb (1000 by default)</li>\n<li>squid_config_dir : the config directory of squid ( parts-directory/squid/etc by default)</li>\n<li>squid_cache_dir : the cache localisation of squid (parts-directory/squid/cache by default)</li>\n<li>squid_log_dir : the log localisation of squid (parts-directory/squid/log by default)</li>\n<li>apache_conf_dir : the apache config dir (parts-directory/squid/apache by default)</li>\n<li>front_http : 1 by default (ie apache serve http request)</li>\n<li>front_https : 0 by default (ie apache serve https request)</li>\n<li>debug_redirector : 0 by default (ie debug squid redirector)</li>\n<li>debug_squid_acl : 0 by default (ie debug squid acl)</li>\n<li>debug_squid_rewrite_rules : 0 by default (ie debug squid acl)</li>\n<li>debug_apache_rewrite_rules : 0 by default (ie debug apache rewrite rules , 9 for full debug)</li>\n<li>zope_cache_key : a list of zope cache key (if you want to cache specific\nzone of your site add specific acl)</li>\n<li>bind_apache_http : binding ip:port of apache (80 by default in http, can be only port configure)</li>\n<li>bind_apache_https : binding ip:port of apache (443 by default in https, can be only port configure)</li>\n<li>squid_extra_conf : extra conf for squid</li>\n</ul>\n<p>buildout command create a directory structure like that:</p>\n<pre>parts/squid/apache/vhost_www.mysite.org_80.conf : virtual host to include to apache\nparts/squid/etc/ : all config file for squid\nparts/squid/etc/squid.conf : main squid conf\nparts/squid/etc/iRedirector.py : to launch squidRewriteRules\nparts/squid/etc/squidAcl.py : avoid cache for authenticated user by squid\nparts/squid/etc/squidRewriteRules.py : rewrite engine for squid\nparts/squid/etc/squid_logrotate.conf : config for log rotate system (for logrotate system)\nparts/squid/cache/ : cache directory\nparts/squid/log/ : logs directory\nparts/squid/var/ : var directory, contains pid file\nbin/squidctl : squid controler shell script (for unix),\nUsage: squidctl {start|stop|reload|restart|status|debug|purgecache|createswap|configtest|rotate}\n</pre>\n</div>\n<div id=\"what-about-squid-and-apache-after-conf-generation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">What about squid and apache after conf generation ?</a></h2>\n<div id=\"apache\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Apache</a></h3>\n<p>Activate virtual hosts by making a symbolic link</p>\n<p>In debian:</p>\n<pre>ln -s .../parts/squid/apache/vhost_www.mysite.org_80.conf /etc/apache2/sites-enabled/\n</pre>\n<p>Make sure that mod_rewrite, mod_proxy are enabled for apache</p>\n<p>Logs are in parts/squid/log</p>\n</div>\n<div id=\"squid\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Squid</a></h3>\n<p>To populate squid directory cache:</p>\n<pre>/usr/sbin/squid -z -f parts/squid/etc/squid.conf OR\nbin/squidctl createswap\n</pre>\n<p>To launch squid the generated config:</p>\n<pre>/usr/sbin/squid -f parts/squid/etc/squid.conf OR\nbin/squidctl start\n</pre>\n<p>That all\u2019s folk</p>\n</div>\n</div>\n<div id=\"how-to-use-iw-recipe-squid\">\n<h2><a href=\"#id6\" rel=\"nofollow\">How to use iw.recipe.squid ?</a></h2>\n<p>As a recipe, you have to provide a part in your buildout file\nTest first the most simple part that we can configure:</p>\n<pre>&gt;&gt;&gt; import getpass\n&gt;&gt;&gt; owner = group = getpass.getuser()\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; data_dir = os.path.join(test_dir, 'data')\n&gt;&gt;&gt; parts_dir = os.path.join(data_dir, 'parts')\n&gt;&gt;&gt; buildout = {'instance': {'location': test_dir},\n...             'buildout': {'directory': test_dir,\n...                          'parts-directory': test_dir}}\n&gt;&gt;&gt; name = 'squid'\n&gt;&gt;&gt; options = {'url': 'mypackage.tgz', #url where we download squid src\n...            'squid_owner' : 'proxy',\n...            }\n&gt;&gt;&gt; options['squid_accelerated_hosts'] = \"\"\"\n...    www.mysite.com: 127.0.0.1:8080/mysite\n... \"\"\"\n&gt;&gt;&gt; options['squid_extra_conf'] = \"\"\"\n... refresh_pattern . 0 20%    1440\n... \"\"\"\n\nCreating the recipe::\n\n&gt;&gt;&gt; from iw.recipe.squid import Recipe\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n\nTest that zope conf is good::\n\n&gt;&gt;&gt; recipe.zope_confs\n[{'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'www.mysite.com', 'zope_port': '8080'}]\n\n&gt;&gt;&gt; recipe.options['squid_visible_hostname']\n'www.mysite.com'\n\n&gt;&gt;&gt; recipe.options['front_https']\n'0'\n\n&gt;&gt;&gt; recipe.options['squid_admin_email']\n'webmaster@www.mysite.com'\n\n&gt;&gt;&gt; recipe.options['squid_version']\n'2.6'\n\n&gt;&gt;&gt; recipe.options['binary_location']\n'.../bin'\n\n&gt;&gt;&gt; paths = recipe.install()\n</pre>\n<p>Checking the files created:</p>\n<pre>&gt;&gt;&gt; paths.sort()\n&gt;&gt;&gt; paths\n['...squid/tests/bin/squidctl', '...squid/tests/squid/apache/vhost_www.mysite.com_80.conf', '...squid/tests/squid/etc/iRedirector.py', '...squid/tests/squid/etc/squid.conf', '...squid/tests/squid/etc/squidAcl.py', '...squid/tests/squid/etc/squidRewriteRules.py', '...squid/tests/squid/etc/squid_logrotate.conf']\n</pre>\n<div id=\"the-default-generated-squid-conf\">\n<h3><a href=\"#id7\" rel=\"nofollow\">The default generated squid.conf</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'etc', 'squid.conf')\n&gt;&gt;&gt; print open(cfg).read()\n# squid configuration file\n&lt;BLANKLINE&gt;\n# BASIC CONFIGURATION\n# ------------------------------------------------------------------------------\n#  TAG: visible_hostname\n#    If you want to present a special hostname in error messages, etc,\n#    define this.  Otherwise, the return value of gethostname()\n#    will be used. If you have multiple caches in a cluster and\n#    get errors about IP-forwarding you must set them to have individual\n#    names with this setting.\nvisible_hostname www.mysite.com\n&lt;BLANKLINE&gt;\ncache_effective_user proxy\ncache_effective_group proxy\n&lt;BLANKLINE&gt;\n# port on which to listen\n&lt;BLANKLINE&gt;\nhttp_port 3128 vhost defaultsite=www.mysite.com\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\ncache_dir ufs .../squid/cache 1000  16     256\ncache_mgr webmaster@www.mysite.com\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# LOGS\n# ------------------------------------------------------------------------------\nlog_icp_queries off\ncache_access_log .../squid/log/access.log\ncache_log .../squid/log/cache.log\ncache_store_log .../squid/log/store.log\n# emulate_httpd_log off\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# RESOURCES\n# ------------------------------------------------------------------------------\n# amount of memory used for caching recently accessed objects - defaults to 8 MB\ncache_mem 64 MB\nmaximum_object_size 10 MB         # max cached object size\nmaximum_object_size_in_memory 300 KB    # max cached-in-memory object size\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# ACCESS CONTROL\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n# Basic ACLs\nacl all src 0.0.0.0/0.0.0.0\nacl localhost src 127.0.0.1/32\nacl ssl_ports port 443 563\nacl safe_ports port 80 443\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nacl zope_servers src 127.0.0.1\n#acl zope_servers src 127.0.0.1\n&lt;BLANKLINE&gt;\nacl manager proto cache_object\nacl connect method connect\n&lt;BLANKLINE&gt;\n# Assumes apache rewrite rule looks like this:\n# RewriteRule ^/(.*)/$ http://127.0.0.1:3128/http/%{SERVER_NAME}/80/$1 [L,P]\n&lt;BLANKLINE&gt;\nacl accelerated_protocols proto http\nacl accelerated_hosts dst 127.0.0.0/8\nacl accelerated_ports myport 3128\nacl accelerated_urls urlpath_regex __original_url__\nacl accelerated_urls urlpath_regex __zope_cache_key__.*__cache_url__\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nhttp_access allow accelerated_hosts\nhttp_access allow accelerated_ports\nhttp_access allow accelerated_urls\nhttp_access allow accelerated_protocols\n&lt;BLANKLINE&gt;\nalways_direct allow accelerated_hosts\nalways_direct allow accelerated_ports\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# Purge access - zope servers can purge but nobody else\nacl purge method PURGE\nhttp_access allow zope_servers purge\nhttp_access deny purge\n&lt;BLANKLINE&gt;\n# Reply access\n# http_reply_access allow all\n&lt;BLANKLINE&gt;\n# Cache manager setup - cache manager can only connect from localhost\n# only allow cache manager access from localhost\nhttp_access allow manager localhost\nhttp_access deny manager\n# deny connect to other than ssl ports\nhttp_access deny connect !ssl_ports\n&lt;BLANKLINE&gt;\n# ICP access - anybody can access icp methods\nicp_access allow localhost zope_servers\n&lt;BLANKLINE&gt;\n# And finally deny all other access to this proxy\nhttp_access deny all\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# CACHE PEERS\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n# CONFIGURE THE CACHE PEERS. FIRST PORT IS THE HTTP PORT, SECOND PORT\n# IS THE ICP PORT. REMEMBER TO ENABLE 'icp-server' ON YOUR 'zope.conf'\n# LISTENING ON THE ICP PORT YOU USE HERE.\n# acl in_backendpool dstdomain backendpool\n# cache_peer 127.0.0.1 parent 8080 9090 no-digest no-netdb-exchange\n# cache_peer 192.168.0.3 parent 8081 9091 no-digest no-netdb-exchange\n&lt;BLANKLINE&gt;\n# cache_peer_access 127.0.0.1 allow in_backendpool\n# cache_peer_access 127.0.0.1 deny all\n&lt;BLANKLINE&gt;\n# cache_peer_access 192.168.0.3 allow in_backendpool\n# cache_peer_access 192.168.0.3 deny all\n&lt;BLANKLINE&gt;\n# IF YOU NEED TO FORWARD REQUESTS TO HOSTS NOT IN THE POOL THIS IS\n# WHERE YOU ALLOW THE TARGET DOMAINS\n# acl local_servers dstdomain some.mysite.com other.mysite.com\n# always_direct allow local_servers\n&lt;BLANKLINE&gt;\n# THE FOLLOWING DIRECTIVE IS NEEDED TO MAKE 'backendpool' RESOLVE TO\n# THE POOL OF CACHE PEERS.\n# never_direct allow all\n# icp_access allow all\n&lt;BLANKLINE&gt;\n# PROXY ON, NEEDED TO MAKE CACHE PEERS INTERCOMMUNICATE\n# httpd_accel_with_proxy on\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# REDIRECTOR PROGRAM\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nredirect_program .../squid/etc/iRedirector.py\nurl_rewrite_children 1\nurl_rewrite_concurrency 20\nurl_rewrite_host_header off\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# SPECIFY WHAT REQUESTS SQUID SHOULD CACHE\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n# Control what squid caches.  We want to have squid handle content that is not\n# personalized and that does not require any kind of authorization.\n# 1) Always cache static content in squid\n&lt;BLANKLINE&gt;\nacl static_content urlpath_regex -i \\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tgz|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$\nno_cache allow static_content\n&lt;BLANKLINE&gt;\n# 2) (OPTIONAL) Prevent squid from caching an item that is the result of a POST\n&lt;BLANKLINE&gt;\nacl post_requests method POST\nno_cache deny post_requests\n&lt;BLANKLINE&gt;\n# 3) (OPTIONAL) Prevent squid from caching items with items in the query string\n# If this is uncommented, squid will treat a url with 2 different query strings\n# as 2 different urls when caching.\n&lt;BLANKLINE&gt;\n# XXX: where did this example go?\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nacl zope_key_caching urlpath_regex d41d8cd98f00b204e9800998ecf8427e\nno_cache allow zope_key_caching\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# 4) Prevent squid from caching requests from authenticated users or conditional\n# GETs with an If-None-Match header (since squid doesn't know about ETags)\n# We use an external python method to check these conditions and pass in the\n# value of the __ac cookie (two different ways to allow for different cookie\n# delimiters), the HTTP Authorization header, and the If-None-Match header.\n# Squid caches the results of the external python method, so for debugging, set\n# the options ttl=0 negative_ttl=0 so you can see what is going on\n&lt;BLANKLINE&gt;\n# external_acl_type is_cacheable_type children=20 ttl=0 negative_ttl=0 %{Cookie:__ac} %{Cookie:;__ac} %{Authorization} %{If-None-Match} .../squid/etc/squidAcl.py\n&lt;BLANKLINE&gt;\nexternal_acl_type is_cacheable_type protocol=2.5 children=20 %{Cookie:__ac} %{Cookie:;__ac} %{Authorization} %{If-None-Match} .../squid/etc/squidAcl.py\nacl is_cacheable external is_cacheable_type\nno_cache allow is_cacheable\n&lt;BLANKLINE&gt;\ncollapsed_forwarding on\n&lt;BLANKLINE&gt;\n# Explicitly disallow squid from handling anything else\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nno_cache deny all\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# SPECIFY EFFECTS OF A BROWSER REFRESH\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n# RELOAD_INTO_IMS CAUSES WEIRD SQUID BEHAVIOR - IT APPEARS TO CAUSE FILES WITH\n# INAPPROPRIATE HEADERS TO END UP IN THE CACHE, AND AS A RESULT BROWSERS END\n# UP MAKING LOTS OF EXTRA (CONDITIONAL) REQUESTS WHEN THEY WOULD OTHERWISE MAKE\n# NO REQUESTS.  DO NOT USE!\n&lt;BLANKLINE&gt;\n# Tell squid how to handle expiration times for content with no explicit expiration\n# Assume static content is fresh for at least an hour and at most a day\n#refresh_pattern -i  \\.(jpg|jpeg|gif|png|tiff|tif|svg|swf|ico|css|js|vsd|doc|ppt|pps|xls|pdf|mp3|mp4|m4a|ogg|mov|avi|wmv|sxw|zip|gz|bz2|tar|rar|odc|odb|odf|odg|odi|odp|ods|odt|sxc|sxd|sxi|sxw|dmg|torrent|deb|msi|iso|rpm)$ 60 50% 1440 reload-into-ims\n#refresh_pattern . 0 20%    1440\n&lt;BLANKLINE&gt;\n# Change force-refresh requests into conditional gets using if-modified-since\n#reload_into_ims on\n&lt;BLANKLINE&gt;\n# DEBUGGING\n# ------------------------------------------------------------------------------\n# debug_options ALL,1 33,2 # use this for debugging acls\n# debug_options ALL,8\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# MISCELLANEOUS\n# ------------------------------------------------------------------------------\n# have squid handle all requests with ranges\n# range_offset_limit -1\n&lt;BLANKLINE&gt;\n# amount of time squid waits for existing requests to be serviced before shutting down\nshutdown_lifetime 1 seconds\n&lt;BLANKLINE&gt;\n# allow squid to process multiple requests simultaneously if client is pipelining\npipeline_prefetch on\n&lt;BLANKLINE&gt;\n# allow white spaces to be included in URLs\nuri_whitespace allow\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n# OTHER PARAMETERS THAT MAY BE OF INTEREST\n# ------------------------------------------------------------------------------\n&lt;BLANKLINE&gt;\n# logfile_rotate 0\n# reload_into_ims off\n# error_directory /usr/share/squid/errors/\n&lt;BLANKLINE&gt;\npid_filename .../squid/var/squid.pid\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\nrefresh_pattern . 0 20%    1440\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"the-default-generated-squidrewriterules-py\">\n<h3><a href=\"#id8\" rel=\"nofollow\">The default generated squidRewriteRules.py</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'etc', 'squidRewriteRules.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\nrewrites = (\n(r'http://[^/]+/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)/__original_url__/(.*)',\nr'http://\\1:\\2/VirtualHostBase/\\3/\\4:\\5/\\6/VirtualHostRoot/\\7', 'P,L'),\n(r'http://[^/]+/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(.*)/__zope_cache_key__/(.*)/__cache_url__/(.*)',\nr'http://\\1:\\2/VirtualHostBase/\\3/\\4:\\5/\\6/VirtualHostRoot/\\7/\\8', 'P,L'),\n&lt;BLANKLINE&gt;\n    )\n...\n</pre>\n</blockquote>\n</div>\n<div id=\"the-default-generated-conf-for-apache\">\n<h3><a href=\"#id9\" rel=\"nofollow\">The default generated conf for apache</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'etc', 'squidRewriteRules.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\n</pre>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n&gt;&gt;&gt; print open(cfg).read()\nNameVirtualHost *:80\n&lt;VirtualHost *:80&gt;\n    ServerName www.mysite.com\n&lt;BLANKLINE&gt;\n    &lt;Proxy http://127.0.0.1:3128&gt;\n            Allow from all\n    &lt;/Proxy&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n    RewriteEngine On\n    RewriteLog .../squid/log/rewrite_www.mysite.com.log\n    RewriteLogLevel 0\n&lt;BLANKLINE&gt;\n    CustomLog .../squid/log/access_www.mysite.com.log common\n    ErrorLog .../squid/log/error_www.mysite.com.log\n&lt;BLANKLINE&gt;\n    RewriteRule ^(.*)$ - [E=BACKEND_LOCATION:127.0.0.1]\n    RewriteRule ^(.*)$ - [E=BACKEND_PORT:8080]\n    RewriteRule ^(.*)$ - [E=BACKEND_PATH:mysite]\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n    RewriteRule  ^/(.*)/$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/http/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n    RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/http/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n&lt;/VirtualHost&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"bin-squidacl-file\">\n<h3><a href=\"#id10\" rel=\"nofollow\">/bin/squidacl file</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; f = open(os.path.join(recipe.options['binary_location'],'squidctl'))\n&gt;&gt;&gt; print f.read()\n#!/bin/sh\n...\nDAEMON=/usr/sbin/squid\nCONFIG=.../squid/etc/squid.conf\nCACHE_DIR=.../squid/cache\n...\n</pre>\n</blockquote>\n</div>\n<div id=\"etc-squid-logrotate-conf\">\n<h3><a href=\"#id11\" rel=\"nofollow\">etc/squid_logrotate.conf</a></h3>\n<blockquote>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'etc', 'squid_logrotate.conf')\n&gt;&gt;&gt; print open(cfg).read()\n/.../squid/var/*.log {\n    weekly\n    compress\n    delaycompress\n    maxage 730\n    rotate 104\n    size=+4096k\n    notifempty\n    missingok\n    create 740 proxy proxy\n    postrotate\n    .../bin/squidctl rotate\n    endscript\n}\n</pre>\n</blockquote>\n</div>\n<div id=\"more-options\">\n<h3><a href=\"#id12\" rel=\"nofollow\">More options</a></h3>\n<p>Give more options to the recipe:</p>\n<pre>&gt;&gt;&gt; options = {'url': 'mypackage.tgz', #url where we download squid src\n...            'squid_owner': owner, #owner of squid process\n...            'squid_group' : group, #group of squid process\n...            'squid_port' : '3128', #listen port of proxy\n...            'squid_version' : '2.5',\n...            'squid_localisation': '127.0.0.1', #host or ip that apache use to request apache\n...\n...            'squid_admin_email' : 'myemail@mycompany.com', #name appear in error message\n...            'squid_cache_size_mb' : '1000', #total cache in disk\n...            'squid_visible_hostname' : 'mysite', #public name of your site, appear in error message\n...            'front_https': '1', # does front server (apache, iis)\n...                              # serve https url O by default\n...            'front_http':'1', # does front server (apache, iis) serve http url\n...            'bind_apache_http':'81', # change the default binding port of apache\n...            'debug_redirector':'1', #debug iRedirector 0 by default\n...            'debug_squid_acl' : '0', #debug squidacl 0 by default\n...            'debug_squid_rewrite_rules' : '1', #debug squidtrewriterule 0 by default\n...            'debug_apache_rewrite_rules' : '9', #debug apache rewrite engine\n...           }\n</pre>\n<p>Yours accelerated hosts ( zeo client or pound load balancer ,\nurls to be accelerated wich corresponding of zope urls, ports, and directories):</p>\n<pre>&gt;&gt;&gt; options['squid_accelerated_hosts'] = \"\"\"\n...    www.mysite.com: 127.0.0.1:8080/mysite\n...    mysite.com: 127.0.0.1:8080/mysite\n...    www.mysecondsite.com: 127.0.0.2:9080/mysite2\n...    mysecondsite.com: 127.0.0.2:9080/mysite2\n... \"\"\"\n</pre>\n<p>This parts is optionnal. We can cache in proxy some part of navigation via\nspecific configuration. This is sometimes usefull to cache zope pages per groups\nor via specific cookies rules. This configuration is done by zope_cache_keys.\nBe carefull : CMFSquid don\u2019t purge this url without an intervention of your part.\nAssumes that zope_cache_keys are cookies that is send by zope\nand you have created a folder in zodb name as your cache key to do job acquisition\nSpecific rewrites rules and squid are build:</p>\n<pre>&gt;&gt;&gt; options['zope_cache_key'] = \"\"\"\n...    my_key_one\n...    my_key_two\n...    my_key_three\n... \"\"\"\n</pre>\n<p>Creating the recipe:</p>\n<pre>&gt;&gt;&gt; from iw.recipe.squid import Recipe\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n</pre>\n<p>Test that zope conf is good:</p>\n<pre>&gt;&gt;&gt; recipe.zope_confs\n[{'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'www.mysite.com', 'zope_port': '8080'}, {'zope_host': '127.0.0.1', 'zope_path': 'mysite', 'host_name': 'mysite.com', 'zope_port': '8080'}, {'zope_host': '127.0.0.2', 'zope_path': 'mysite2', 'host_name': 'www.mysecondsite.com', 'zope_port': '9080'}, {'zope_host': '127.0.0.2', 'zope_path': 'mysite2', 'host_name': 'mysecondsite.com', 'zope_port': '9080'}]\n</pre>\n<p>Zope acl are ip or host that is configure in squid in order\nto be host or ip authorized to purge cache squid.</p>\n<p>Test zope acl:</p>\n<pre>&gt;&gt;&gt; recipe.options['acl_zope_hosts']\n'127.0.0.2 127.0.0.1'\n</pre>\n<p>Test rewrites rules:</p>\n<pre>&gt;&gt;&gt; recipe.cache_key\n['my_key_one', 'my_key_two', 'my_key_three']\n</pre>\n<p>Running it:</p>\n<pre>&gt;&gt;&gt; paths = recipe.install()\n</pre>\n<p>Checking the files created:</p>\n<pre>&gt;&gt;&gt; path = recipe.options['prefix']\n</pre>\n<p>Checking the squid.conf created:</p>\n<pre>&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'squid.conf')\n&gt;&gt;&gt; print open(cfg).read()\n# squid configuration file\n...\nhttp_port 3128\n...\nhttpd_accel_host virtual\nhttpd_accel_port 81\nhttpd_accel_uses_host_header on\n...\nredirect_children 20\nredirect_rewrites_host_header off\n...\n</pre>\n<p>Checking if we have generate iRedirector conf:</p>\n<pre>&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'iRedirector.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\nthreaded =  0...\n\n&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'squidAcl.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\n</pre>\n<p>Test the change of default apache binding</p>\n<blockquote>\n<pre>&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_81.conf')\n&gt;&gt;&gt; print open(cfg).read()\nListen *:81\nNameVirtualHost *:81\n...\n</pre>\n</blockquote>\n<p>Rechange apache config:</p>\n<pre>&gt;&gt;&gt; options['bind_apache_http'] = '80'\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n&gt;&gt;&gt; paths = recipe.install()\n&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n&gt;&gt;&gt; print open(cfg).read()\nNameVirtualHost *:80\n...\n\n&gt;&gt;&gt; options['bind_apache_http'] = '192.168.2.1:80'\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n&gt;&gt;&gt; paths = recipe.install()\n&gt;&gt;&gt; cfg = os.path.join(recipe.options['prefix'], 'apache', 'vhost_www.mysite.com_80.conf')\n&gt;&gt;&gt; print open(cfg).read()\nListen 192.168.2.1:80\nNameVirtualHost 192.168.2.1:80\n...\n</pre>\n<p>View cache key generation config in apache:</p>\n<pre>&gt;&gt;&gt; print open(cfg).read()\nListen 192.168.2.1:80\n...\n&lt;BLANKLINE&gt;\n    RewriteRule ^(.*)$ - [E=BACKEND_LOCATION:127.0.0.1]\n    RewriteRule ^(.*)$ - [E=BACKEND_PORT:8080]\n    RewriteRule ^(.*)$ - [E=BACKEND_PATH:mysite]\n&lt;BLANKLINE&gt;\n    RewriteRule ^(.*)$ - [E=have_cookie:1]\n    RewriteCond %{HTTP_COOKIE} my_key_one=\"([^\"]+) [NC]\n    RewriteRule ^(.*)$ - [E=my_key_one:%1]\n    #test if have cookie\n    RewriteCond %{HTTP_COOKIE} !^.*my_key_one.*$ [NC]\n    RewriteRule ^(.*)$ - [E=have_cookie:0]\n    RewriteCond %{HTTP_COOKIE} my_key_two=\"([^\"]+) [NC]\n    RewriteRule ^(.*)$ - [E=my_key_two:%1]\n    #test if have cookie\n    RewriteCond %{HTTP_COOKIE} !^.*my_key_two.*$ [NC]\n    RewriteRule ^(.*)$ - [E=have_cookie:0]\n    RewriteCond %{HTTP_COOKIE} my_key_three=\"([^\"]+) [NC]\n    RewriteRule ^(.*)$ - [E=my_key_three:%1]\n    #test if have cookie\n    RewriteCond %{HTTP_COOKIE} !^.*my_key_three.*$ [NC]\n    RewriteRule ^(.*)$ - [E=have_cookie:0]\n&lt;BLANKLINE&gt;\n    RewriteCond %{ENV:have_cookie} 1\n    RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__zope_cache_key__/41d154089fd778d8efbd889dffc18dbd:%{ENV:my_key_one}:%{ENV:my_key_two}:%{ENV:my_key_three}/__cache_url__/$1 [L,P]\n&lt;BLANKLINE&gt;\n    RewriteRule  ^/(.*)/$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n    RewriteRule  ^/(.*)$ http://127.0.0.1:3128/%{ENV:BACKEND_LOCATION}/%{ENV:BACKEND_PORT}/https/%{SERVER_NAME}/80/%{ENV:BACKEND_PATH}/__original_url__/$1 [L,P]\n...\n</pre>\n<p>Now test a 2.6 config:</p>\n<pre>&gt;&gt;&gt; options['squid_version'] = '2.6'\n&gt;&gt;&gt; buildout = {'instance': {'location': test_dir},\n...             'buildout': {'directory': test_dir,\n...                          'parts-directory': test_dir}}\n&gt;&gt;&gt; name = 'squid'\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n&gt;&gt;&gt; recipe.options['squid_version']\n'2.6'\n&gt;&gt;&gt; paths = recipe.install()\n&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'squid.conf')\n</pre>\n<p>Test if redirector is threaded:</p>\n<pre>&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'iRedirector.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\nthreaded =  1...\n\n&gt;&gt;&gt; cfg = os.path.join(path, 'etc', 'squidAcl.py')\n&gt;&gt;&gt; print open(cfg).read()\n#!...\ndebug = 0...\nlogfile = ...squid/log...\n</pre>\n<p>Change default location of installation:</p>\n<pre>&gt;&gt;&gt; options = {'url': 'mypackage.tgz', #url where we download squid src\n...            'squid_owner': owner, #owner of squid process\n...            'squid_group' : group, #group of squid process\n...            'squid_port' : '3128', #listen port of proxy\n...            'squid_version' : '2.5',\n...            'squid_localisation': '127.0.0.1', #host or ip that apache use to request apache\n...            'squid_log_dir' : '/var/log/dir',\n...            'squid_config_dir' : '/usr/local/squid/etc',\n...            'apache_conf_dir' : '/etc/apache2/conf',\n...            'squid_admin_email' : 'myemail@mycompany.com', #name appear in error message\n...            'squid_cache_size_mb' : '1000', #total cache in disk\n...            'squid_visible_hostname' : 'mysite', #public name of your site, appear in error message\n...            'front_https': '1', # does front server (apache, iis)\n...                              # serve https url O by default\n...            'front_http':'1', # does front server (apache, iis) serve http url\n...            'debug_redirector':'1', #debug iRedirector 0 by default\n...            'debug_squid_acl' : '0', #debug squidacl 0 by default\n...            'debug_squid_rewrite_rules' : '1', #debug squidtrewriterule 0 by default\n...\n...           }\n\n&gt;&gt;&gt; from iw.recipe.squid import Recipe\n\n&gt;&gt;&gt; options['squid_accelerated_hosts'] = \"\"\"\n...    www.mysite.com: 127.0.0.1:8080/mysite\n...    mysite.com: 127.0.0.1:8080/mysite\n...    www.mysecondsite.com: 127.0.0.2:9080/mysite2\n...    mysecondsite.com: 127.0.0.2:9080/mysite2\n... \"\"\"\n\n&gt;&gt;&gt; recipe = Recipe(buildout, name, options)\n&gt;&gt;&gt; recipe.options['apache_conf_dir']\n'/etc/apache2/conf'\n&gt;&gt;&gt; recipe.options['squid_config_dir']\n'/usr/local/squid/etc'\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 755388, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "c0e4c057983a57a9f185dfdcd6ad5d12", "sha256": "c60cf609ba3c7d80596821c59c143457d1c79db79931201ad90b7dedde385fb8"}, "downloads": -1, "filename": "iw.recipe.squid-0.2-py2.4.egg", "has_sig": false, "md5_digest": "c0e4c057983a57a9f185dfdcd6ad5d12", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 45314, "upload_time": "2007-12-12T14:43:33", "upload_time_iso_8601": "2007-12-12T14:43:33Z", "url": "https://files.pythonhosted.org/packages/63/aa/67642d02ebd87dd61b935d026e1ac680088cb7994d13bf39fdbeddb32359/iw.recipe.squid-0.2-py2.4.egg", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2c7aa3247b67ca0de1933dc702d486a9", "sha256": "55c7e6e9ffec2c14ae9c7f6aa236b90c42626d5139371b766703731036767bbf"}, "downloads": -1, "filename": "iw.recipe.squid-0.3-py2.4.egg", "has_sig": false, "md5_digest": "2c7aa3247b67ca0de1933dc702d486a9", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 46071, "upload_time": "2008-02-26T10:57:26", "upload_time_iso_8601": "2008-02-26T10:57:26Z", "url": "https://files.pythonhosted.org/packages/0a/d7/579d71ac7c860749f59c5c0e717ca7f8a812b8f77ba8d5c75e548a0f40e3/iw.recipe.squid-0.3-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "32a342fead137b223c2c9ec6ad5ce2d3", "sha256": "eb1eb6c81e6fae2ec0acbf55e9e65f343b2827c6a06f520fb3ac9ce8ba087e93"}, "downloads": -1, "filename": "iw.recipe.squid-0.3.tar.gz", "has_sig": false, "md5_digest": "32a342fead137b223c2c9ec6ad5ce2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25668, "upload_time": "2008-02-26T10:57:25", "upload_time_iso_8601": "2008-02-26T10:57:25Z", "url": "https://files.pythonhosted.org/packages/9f/bf/838b52ccb74436faf4ad8200eed821111ac564abe022b30ab2458416dc8b/iw.recipe.squid-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "f1508995a0bb32e7a84e86b8ee3b861e", "sha256": "9cd21463a5f1fc022fc016c3602dbdd6a4652f0c049a518970ebc0e4027776ac"}, "downloads": -1, "filename": "iw.recipe.squid-0.4-py2.4.egg", "has_sig": false, "md5_digest": "f1508995a0bb32e7a84e86b8ee3b861e", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 46727, "upload_time": "2008-07-02T15:12:50", "upload_time_iso_8601": "2008-07-02T15:12:50Z", "url": "https://files.pythonhosted.org/packages/4a/61/67ff29583902c421321906796a8a6b8e2bd16f263e21d807d3fd9edd2052/iw.recipe.squid-0.4-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "88f73c5a0769d21f196436986c7e90de", "sha256": "a99c63cff03f7195f031e4842940728805d9f9a9fe476a3a81baf9d5a939fc37"}, "downloads": -1, "filename": "iw.recipe.squid-0.4.tar.gz", "has_sig": false, "md5_digest": "88f73c5a0769d21f196436986c7e90de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32038, "upload_time": "2008-07-02T15:12:48", "upload_time_iso_8601": "2008-07-02T15:12:48Z", "url": "https://files.pythonhosted.org/packages/81/40/85f7a33160d0c8f5cfe7afea0b19450fe88d66949482a93d3e7da51015f9/iw.recipe.squid-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ffd5113ad921a83a7dcd7a7b9a3f3cdb", "sha256": "498ba81b0264a3a44bb1d14f32c547c09e30b1c3918b6b49a6a7689a1b0d90ab"}, "downloads": -1, "filename": "iw.recipe.squid-0.5-py2.4.egg", "has_sig": false, "md5_digest": "ffd5113ad921a83a7dcd7a7b9a3f3cdb", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 47139, "upload_time": "2008-08-25T09:28:37", "upload_time_iso_8601": "2008-08-25T09:28:37Z", "url": "https://files.pythonhosted.org/packages/be/41/d61fe291bbff8c678a156ee2182652b0352b4838999084dffbb2be0b1a46/iw.recipe.squid-0.5-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "85cd7c78ef4dd20e74ef0b37dc4b5082", "sha256": "917156eb28ed72a373a417b2ace5c8677a5170bc47a95741fc95e22e1cee4ec4"}, "downloads": -1, "filename": "iw.recipe.squid-0.5.tar.gz", "has_sig": false, "md5_digest": "85cd7c78ef4dd20e74ef0b37dc4b5082", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32541, "upload_time": "2008-08-25T09:28:34", "upload_time_iso_8601": "2008-08-25T09:28:34Z", "url": "https://files.pythonhosted.org/packages/68/05/e4465f100ae4425a6d51ed21506e4b5055e25518cbe2cd4c178d009a6933/iw.recipe.squid-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "782dd20cb97b5aac4aa9c047b9a47653", "sha256": "5fc3dacbbd1d84813a659030dc751ec0b4209b4965f4d1a814715889e157fa87"}, "downloads": -1, "filename": "iw.recipe.squid-0.6-py2.4.egg", "has_sig": false, "md5_digest": "782dd20cb97b5aac4aa9c047b9a47653", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 47269, "upload_time": "2008-09-01T11:58:17", "upload_time_iso_8601": "2008-09-01T11:58:17Z", "url": "https://files.pythonhosted.org/packages/97/0c/ab64601bb78821be0ecfbbbd04595a9708fce8635bd753e91ee203d0e63b/iw.recipe.squid-0.6-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b76a7448c5000653e28eb6d086eb9856", "sha256": "382d0af25fcac1d0cb856be31330f195bc6d532afe395ec914b562f15694fe37"}, "downloads": -1, "filename": "iw.recipe.squid-0.6.tar.gz", "has_sig": false, "md5_digest": "b76a7448c5000653e28eb6d086eb9856", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32703, "upload_time": "2008-09-01T11:58:15", "upload_time_iso_8601": "2008-09-01T11:58:15Z", "url": "https://files.pythonhosted.org/packages/59/1d/ce9415ce4022e032d8faf45f1b6df261cbe1502800a58bb2659dacb8bacd/iw.recipe.squid-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "4f4e3614d5e89db6fb85a9b1b81c0558", "sha256": "f1a57f2aed3b63598d55b3842cd211cdc3f4671cfffdaa7b6ae4e44fc6a53a53"}, "downloads": -1, "filename": "iw.recipe.squid-0.7-py2.4.egg", "has_sig": false, "md5_digest": "4f4e3614d5e89db6fb85a9b1b81c0558", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 47340, "upload_time": "2008-11-14T21:22:22", "upload_time_iso_8601": "2008-11-14T21:22:22Z", "url": "https://files.pythonhosted.org/packages/74/66/8615cdf30f7644e4a247873cf7dff982f25a9772cf79b92eaddb51434c12/iw.recipe.squid-0.7-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fa180486a82bd7bad2b1bc015e35af0", "sha256": "e5db474f4711db2aa0e949988f4625f06f1e1a583fc8f0bacd1d50f7e90ccaf8"}, "downloads": -1, "filename": "iw.recipe.squid-0.7.tar.gz", "has_sig": false, "md5_digest": "9fa180486a82bd7bad2b1bc015e35af0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32859, "upload_time": "2008-11-14T21:22:20", "upload_time_iso_8601": "2008-11-14T21:22:20Z", "url": "https://files.pythonhosted.org/packages/16/79/5d7afa95fe6f89d6d6fa3b9d6a7f5feae07b566962f1fc735eb161762606/iw.recipe.squid-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "221957ac32e798a712a672d2c2c1223c", "sha256": "bb8c092fc6780ebd39a4cb4d5fe939fb796a11a1e8d2753161c2f78aaea5a6d6"}, "downloads": -1, "filename": "iw.recipe.squid-0.8.tar.gz", "has_sig": false, "md5_digest": "221957ac32e798a712a672d2c2c1223c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33623, "upload_time": "2008-11-18T14:33:47", "upload_time_iso_8601": "2008-11-18T14:33:47Z", "url": "https://files.pythonhosted.org/packages/06/1e/19b8508a613a5c511aec0477f0e0a28c487cc66182a8c63e106664aab47a/iw.recipe.squid-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "0d274583761f66c9dfbc725d4ff5f71f", "sha256": "b4342e7d7fd1964b6d6943b1ada4f0f6830503c423e04ac8dbf92ce818a5d125"}, "downloads": -1, "filename": "iw.recipe.squid-0.9-py2.4.egg", "has_sig": false, "md5_digest": "0d274583761f66c9dfbc725d4ff5f71f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 42697, "upload_time": "2008-11-20T11:42:02", "upload_time_iso_8601": "2008-11-20T11:42:02Z", "url": "https://files.pythonhosted.org/packages/f2/0a/40002415b38a64f9feebf9fc2469136b95865c7b19354c9cfc37fa8e0b92/iw.recipe.squid-0.9-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "14bf60b3094d3bb90e2417b54cd0c3bd", "sha256": "386b0ea1bafa7d2b8a7227b9c6c6b5908b47841de08b9f2656d8dc2e4d904ad9"}, "downloads": -1, "filename": "iw.recipe.squid-0.9.tar.gz", "has_sig": false, "md5_digest": "14bf60b3094d3bb90e2417b54cd0c3bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34387, "upload_time": "2008-11-20T11:42:00", "upload_time_iso_8601": "2008-11-20T11:42:00Z", "url": "https://files.pythonhosted.org/packages/ea/7a/9f8c5694a97c4dd33f9a0a396487ce80ca97627d06fe174f0b62a7d2cd35/iw.recipe.squid-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "cf70d5892c003224cd8621b827db0973", "sha256": "3935b3066b862fd06de5fc9eb7da4a8827b367ec5387dacfd1704d463cb030a6"}, "downloads": -1, "filename": "iw.recipe.squid-1.0.tar.gz", "has_sig": false, "md5_digest": "cf70d5892c003224cd8621b827db0973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37240, "upload_time": "2010-02-26T11:46:05", "upload_time_iso_8601": "2010-02-26T11:46:05.320796Z", "url": "https://files.pythonhosted.org/packages/8a/29/849e2f5046af383eabca18d25de245a9f2710d289e94fd4851d3a7bd568a/iw.recipe.squid-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf70d5892c003224cd8621b827db0973", "sha256": "3935b3066b862fd06de5fc9eb7da4a8827b367ec5387dacfd1704d463cb030a6"}, "downloads": -1, "filename": "iw.recipe.squid-1.0.tar.gz", "has_sig": false, "md5_digest": "cf70d5892c003224cd8621b827db0973", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37240, "upload_time": "2010-02-26T11:46:05", "upload_time_iso_8601": "2010-02-26T11:46:05.320796Z", "url": "https://files.pythonhosted.org/packages/8a/29/849e2f5046af383eabca18d25de245a9f2710d289e94fd4851d3a7bd568a/iw.recipe.squid-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:31 2020"}