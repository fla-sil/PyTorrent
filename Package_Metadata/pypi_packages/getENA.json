{"info": {"author": "Enzo Guerrero-Araya", "author_email": "biologoenzo@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![PyPI release](https://img.shields.io/pypi/v/ncbi-genome-download.svg)](https://pypi.python.org/pypi/getENA/)\n# getENA\nSometimes we need to download a sequencing project from ENA; fortunately ENA offers in its platform a link to the \nfile that we need. However, we can spend a lot of time downloading files manually if the amount of files is large.\n\nI have developed a small project in Python to be able to do this work in an automated and parallel way to increase the performance.\n## Installation\n`pip install getENA`\n\nAlternatively, from GitHub\n\n`pip install git+https://github.com/EnzoAndree/getENA`\n## Usage\nLet's say I'm interested in _Clostridium perfringens_ sequencing projects; we have to search ENA for public sequencing projects at https://www.ebi.ac.uk/ena/browser/text-search?query=clostridium%20perfringens. Here, we choose the codes that we need, for example:\n\n`PRJNA350702 PRJNA285473 PRJNA508810`\n\nWe have 2 options to download the FASTQ files, (1) add the project codes to the command line separated by spaces as an argument, or (2) make a file containing a list of all the project codes that need.\n\nFor the first option (recommended for few projects, e.g. >= 5) we run the following\n\n`getENA.py -acc PRJNA350702 PRJNA285473 PRJNA508810`\n\nFor the second option (recommended for many projects, e.g. >= 5) we run the following\n\n`getENA.py -accfile ena.list.txt`\n\nWhere ena.list.txt is the file containing a list of all the project codes.\n\nInstead, if you only want to download a few selected genomes from the project, simply add the run_accession as a parameter\n\n`getENA.py -acc SRR096826 SRR8867692 SRR7601184`\n\n\nIf you want, you can increase the performance by increasing the number of reads that are downloaded in parallel (-t option). However, be careful, because ENA aborts the connection if it detects that you have many connections at the same time with its FTP. Empirically I have observed that 12 parallel connections work properly without ENA cancelling the download.\n\nAs a crazy example of many parallel connections of the above commands would be the following:\n\n`getENA.py -t 64 -acc PRJNA350702 PRJNA285473 PRJNA508810`\n\nOne of the main features of `getENA.py` is that it automatically confirms the integrity of the FASTQ file when you download it. If the connection is lost, if ENA cancels the connection or if the `getENA.py` is stopped, you can run the program again and restart the download without losing the files that were already downloaded.\n\nBy default the output directory of `getENA.py` is a folder called ENA_out in the current directory. It can be modified with the -o argument. For example:\n\n`getENA.py -o Cperfringens -t 64 -acc PRJNA350702 PRJNA285473 PRJNA508810`\n\n\n# Output files\n\nThe scheme of the files and folders created follows the next format:\n\n``` \n|ENA_out\n|-- metadata.tsv\n|-- ERR0001_1.fastq.gz\n|-- ERR0001_2.fastq.gz\n|-- ...\n|-- ERR0009_1.fastq.gz\n|-- ERR0009_2.fastq.gz\n|-- tmp\n|---- PRJNA350702.tsv\n|---- PRJNA285473.tsv\n|---- PRJNA508810.tsv\n\n```\n\nWhere `PRJNA350702.tsv`, `PRJNA285473.tsv` and `PRJNA508810.tsv` are the metadata of selected projects and `metadata.tsv` is a merge of this three files. The folder `ENA_out`, contain all FASTQ file of each project\n\nIf you only want to get the assemblies reported in ENA, you can get all the FASTA files for a given taxon ID. In this case the taxon id of _Clostridium perfringens_ is `1502`. So the command line to download all assemblies of this species is:\n\n`getENA.py -o Cperfringens -tax 1502`\n\nThis command line will generate a `genomes` directory within the Cperfringens folder where all assemblies reported to date are placed\n\n# Licence\n\n[GPL v3](https://raw.githubusercontent.com/EnzoAndree/getENA/master/LICENSE)\n\n## Author\n\n* Enzo Guerrero-Araya\n* Twitter: [@eguerreroaraya](https://twitter.com/eguerreroaraya)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EnzoAndree/getENA", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "getENA", "package_url": "https://pypi.org/project/getENA/", "platform": "", "project_url": "https://pypi.org/project/getENA/", "project_urls": {"Homepage": "https://github.com/EnzoAndree/getENA"}, "release_url": "https://pypi.org/project/getENA/1.2.2/", "requires_dist": ["tqdm", "pandas"], "requires_python": "", "summary": "Read the latest Real Python tutorials", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b8e7bd0619920735e058483fd428ecbeb267eb7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/getENA/\" rel=\"nofollow\"><img alt=\"PyPI release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0894c9a4752624fa659ee2ba2fe7b961ce089eda/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6362692d67656e6f6d652d646f776e6c6f61642e737667\"></a></p>\n<h1>getENA</h1>\n<p>Sometimes we need to download a sequencing project from ENA; fortunately ENA offers in its platform a link to the\nfile that we need. However, we can spend a lot of time downloading files manually if the amount of files is large.</p>\n<p>I have developed a small project in Python to be able to do this work in an automated and parallel way to increase the performance.</p>\n<h2>Installation</h2>\n<p><code>pip install getENA</code></p>\n<p>Alternatively, from GitHub</p>\n<p><code>pip install git+https://github.com/EnzoAndree/getENA</code></p>\n<h2>Usage</h2>\n<p>Let's say I'm interested in <em>Clostridium perfringens</em> sequencing projects; we have to search ENA for public sequencing projects at <a href=\"https://www.ebi.ac.uk/ena/browser/text-search?query=clostridium%20perfringens\" rel=\"nofollow\">https://www.ebi.ac.uk/ena/browser/text-search?query=clostridium%20perfringens</a>. Here, we choose the codes that we need, for example:</p>\n<p><code>PRJNA350702 PRJNA285473 PRJNA508810</code></p>\n<p>We have 2 options to download the FASTQ files, (1) add the project codes to the command line separated by spaces as an argument, or (2) make a file containing a list of all the project codes that need.</p>\n<p>For the first option (recommended for few projects, e.g. &gt;= 5) we run the following</p>\n<p><code>getENA.py -acc PRJNA350702 PRJNA285473 PRJNA508810</code></p>\n<p>For the second option (recommended for many projects, e.g. &gt;= 5) we run the following</p>\n<p><code>getENA.py -accfile ena.list.txt</code></p>\n<p>Where ena.list.txt is the file containing a list of all the project codes.</p>\n<p>Instead, if you only want to download a few selected genomes from the project, simply add the run_accession as a parameter</p>\n<p><code>getENA.py -acc SRR096826 SRR8867692 SRR7601184</code></p>\n<p>If you want, you can increase the performance by increasing the number of reads that are downloaded in parallel (-t option). However, be careful, because ENA aborts the connection if it detects that you have many connections at the same time with its FTP. Empirically I have observed that 12 parallel connections work properly without ENA cancelling the download.</p>\n<p>As a crazy example of many parallel connections of the above commands would be the following:</p>\n<p><code>getENA.py -t 64 -acc PRJNA350702 PRJNA285473 PRJNA508810</code></p>\n<p>One of the main features of <code>getENA.py</code> is that it automatically confirms the integrity of the FASTQ file when you download it. If the connection is lost, if ENA cancels the connection or if the <code>getENA.py</code> is stopped, you can run the program again and restart the download without losing the files that were already downloaded.</p>\n<p>By default the output directory of <code>getENA.py</code> is a folder called ENA_out in the current directory. It can be modified with the -o argument. For example:</p>\n<p><code>getENA.py -o Cperfringens -t 64 -acc PRJNA350702 PRJNA285473 PRJNA508810</code></p>\n<h1>Output files</h1>\n<p>The scheme of the files and folders created follows the next format:</p>\n<pre><code>|ENA_out\n|-- metadata.tsv\n|-- ERR0001_1.fastq.gz\n|-- ERR0001_2.fastq.gz\n|-- ...\n|-- ERR0009_1.fastq.gz\n|-- ERR0009_2.fastq.gz\n|-- tmp\n|---- PRJNA350702.tsv\n|---- PRJNA285473.tsv\n|---- PRJNA508810.tsv\n\n</code></pre>\n<p>Where <code>PRJNA350702.tsv</code>, <code>PRJNA285473.tsv</code> and <code>PRJNA508810.tsv</code> are the metadata of selected projects and <code>metadata.tsv</code> is a merge of this three files. The folder <code>ENA_out</code>, contain all FASTQ file of each project</p>\n<p>If you only want to get the assemblies reported in ENA, you can get all the FASTA files for a given taxon ID. In this case the taxon id of <em>Clostridium perfringens</em> is <code>1502</code>. So the command line to download all assemblies of this species is:</p>\n<p><code>getENA.py -o Cperfringens -tax 1502</code></p>\n<p>This command line will generate a <code>genomes</code> directory within the Cperfringens folder where all assemblies reported to date are placed</p>\n<h1>Licence</h1>\n<p><a href=\"https://raw.githubusercontent.com/EnzoAndree/getENA/master/LICENSE\" rel=\"nofollow\">GPL v3</a></p>\n<h2>Author</h2>\n<ul>\n<li>Enzo Guerrero-Araya</li>\n<li>Twitter: <a href=\"https://twitter.com/eguerreroaraya\" rel=\"nofollow\">@eguerreroaraya</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6438995, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "fe9471da7b4ec9a498b3b10f03982fd3", "sha256": "f2426bd0d685107ccb68248615afc3cf87a96db58a831ddb3359865ba2477d0d"}, "downloads": -1, "filename": "getENA-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fe9471da7b4ec9a498b3b10f03982fd3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16324, "upload_time": "2019-12-22T13:10:20", "upload_time_iso_8601": "2019-12-22T13:10:20.325842Z", "url": "https://files.pythonhosted.org/packages/49/91/3a231e81b703f51fe6ceaa14af2e78b882c58d8cc4bf8dcbd592c066e144/getENA-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "82eea0ea81a96550096a287174878601", "sha256": "b37f6f6773072aac5736945c930429bf1fd8947bc654b74574dd323029f591b2"}, "downloads": -1, "filename": "getENA-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82eea0ea81a96550096a287174878601", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17166, "upload_time": "2019-12-22T13:17:25", "upload_time_iso_8601": "2019-12-22T13:17:25.856393Z", "url": "https://files.pythonhosted.org/packages/5c/c2/7d572fc1c25db80304e1c99bad2549c2fda53925444ecf1aef2de1854e64/getENA-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2403c36a5bd6d5406066455a2a191c5f", "sha256": "4708da0f2c6aaae23a0ac1cfd23fd3de863a4b718ab72a3755b0e0abe265eb6b"}, "downloads": -1, "filename": "getENA-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2403c36a5bd6d5406066455a2a191c5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17471, "upload_time": "2019-12-22T14:10:10", "upload_time_iso_8601": "2019-12-22T14:10:10.981858Z", "url": "https://files.pythonhosted.org/packages/89/aa/2244d5c24e267428e11756d108bfe3c1f67db3ca5e7f034203b87e865c13/getENA-1.0.3-py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "60b5243f143ccd5cbe453b8a26c41326", "sha256": "0a24cc5cad3a58f67b576b12dd081ce857f91d348b5285ad0a203e1e8f460082"}, "downloads": -1, "filename": "getENA-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "60b5243f143ccd5cbe453b8a26c41326", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17471, "upload_time": "2019-12-22T14:17:51", "upload_time_iso_8601": "2019-12-22T14:17:51.909396Z", "url": "https://files.pythonhosted.org/packages/0f/23/ec496cf80a5ba4391c469019a75c9c678b1e1ec0684a740e2547f7e9273d/getENA-1.0.4-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f9dc52a4f046ab863b7f14febd995fa2", "sha256": "e7eba21f1b625865f672824c21ef9c613c3f0314e7b15397c2c2dd23225618e0"}, "downloads": -1, "filename": "getENA-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f9dc52a4f046ab863b7f14febd995fa2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18124, "upload_time": "2019-12-27T00:18:53", "upload_time_iso_8601": "2019-12-27T00:18:53.997639Z", "url": "https://files.pythonhosted.org/packages/4f/22/35a1f6b6322ddd99fc22a23097138602849e02c38ec23fa3028c6d037694/getENA-1.1.0-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "0b44e54bb7abd6eff4b977b41c9ee265", "sha256": "63bbd9a161edea6f3dbdce6f9d0fbdf0fa951d50d2190615b7e255603ddcbee3"}, "downloads": -1, "filename": "getENA-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0b44e54bb7abd6eff4b977b41c9ee265", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18968, "upload_time": "2020-01-12T07:03:12", "upload_time_iso_8601": "2020-01-12T07:03:12.335571Z", "url": "https://files.pythonhosted.org/packages/4d/09/f54cf8efc172a653d82af94112536f5d321a4703ba65abddcddfd91d8dae/getENA-1.2.0-py3-none-any.whl", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "c72a58462bfd184b2699f22b89f3ad90", "sha256": "5c6309a65d660a7aa35409ee743d44a1e009431d4a675af100a02f1fd8b22fae"}, "downloads": -1, "filename": "getENA-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c72a58462bfd184b2699f22b89f3ad90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19033, "upload_time": "2020-01-12T07:32:50", "upload_time_iso_8601": "2020-01-12T07:32:50.647739Z", "url": "https://files.pythonhosted.org/packages/98/c1/934c908855d2bd7265eb93146d59a070b9a008fa1ad9c60ab8ff0c273f49/getENA-1.2.1-py3-none-any.whl", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "c1abf186a0922f13a9ee57fe1526aa04", "sha256": "a7ea818ee03ba1b23c3b6a22b62a874cc8f3924e87317a9320743ac9a63a8fe0"}, "downloads": -1, "filename": "getENA-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c1abf186a0922f13a9ee57fe1526aa04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19080, "upload_time": "2020-01-12T08:03:52", "upload_time_iso_8601": "2020-01-12T08:03:52.335425Z", "url": "https://files.pythonhosted.org/packages/b9/79/aaf72825669d929c9d2121a716cd38db5533806f3e3661dd3027b4b0b606/getENA-1.2.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1abf186a0922f13a9ee57fe1526aa04", "sha256": "a7ea818ee03ba1b23c3b6a22b62a874cc8f3924e87317a9320743ac9a63a8fe0"}, "downloads": -1, "filename": "getENA-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c1abf186a0922f13a9ee57fe1526aa04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19080, "upload_time": "2020-01-12T08:03:52", "upload_time_iso_8601": "2020-01-12T08:03:52.335425Z", "url": "https://files.pythonhosted.org/packages/b9/79/aaf72825669d929c9d2121a716cd38db5533806f3e3661dd3027b4b0b606/getENA-1.2.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:57:48 2020"}