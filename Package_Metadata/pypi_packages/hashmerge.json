{"info": {"author": "Sylvain Baubeau", "author_email": "bob@glumol.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development :: Libraries"], "description": "hashmerge: a Python library to merge deep hashes\n================================================\n\nhashmerge is a port of the excellent Perl module [Hash::Merge](http://search.cpan.org/~rehsack/Hash-Merge/)\nwritten by Jens Rehsack.\n\nIt merges two arbitrarily deep hashes into a single hash. That\nis, at any level, it will add non-conflicting key-value pairs from one\nhash to the other, and follows a set of specific rules when there are key\nvalue conflicts (as outlined below).  The hash is followed recursively,\nso that deeply nested hashes that are at the same level will be merged \nwhen the parent hashes are merged. Please note that self-referencing\nhashes, or recursive references, are not handled well by this method.\n\nValues in hashes are considered to be either lists or tuples (`ARRAY`),\ndictionaries (`HASH`), or otherwise are treated as `SCALAR`s. By default,\nthe data passed to the merge function will be cloned using the `copy.deepcopy`\nmethod; however, if necessary, this behavior can be changed to use as many of\nthe original values as possible, using `set_clone_behavior`.\n\nBecause there are a number of possible ways that one may want to merge\nvalues when keys are conflicting, hashmerge provides several preset\nmethods for your convenience, as well as a way to define you own.  \nThese are (currently):\n\n## Usage\n\n```\n    import hashmerge\n    merger = hashmerge.HashMerge()\n    print(merger.merge({'d': 123, 'l': [1]}, {'e': 456, 'l': [2]}))\n\n    merger2 = hashmerge.HashMerge(hashmerge.RIGHT_PRECEDENT)\n    print(merger2.merge({'d': 123, 'l': [1]}, {'e': 456, 'l': [2]}))\n```\n\n## Left Precedence\n\nThis is the default behavior.\n\nThe values buried in the left hash will never\nbe lost; any values that can be added from the right hash will be\nattempted.\n\n## Right Precedence\n\nSame as Left Precedence, but with the right\nhash values never being lost\n\n## Storage Precedence\n\nIf conflicting keys have two different\nstorage mediums, the 'bigger' medium will win; arrays are preferred over\nscalars, hashes over either.  The other medium will try to be fitted in\nthe other, but if this isn't possible, the data is dropped.\n\n## Retainment Precedence\n\nNo data will be lost; scalars will be joined\nwith arrays, and scalars and arrays will be 'hashified' to fit them into\na hash.\n\n## Notes\n\nNow you can safely abandon Perl.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lebauce/hashmerge", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hashmerge", "package_url": "https://pypi.org/project/hashmerge/", "platform": "", "project_url": "https://pypi.org/project/hashmerge/", "project_urls": {"Homepage": "https://github.com/lebauce/hashmerge"}, "release_url": "https://pypi.org/project/hashmerge/0.2/", "requires_dist": null, "requires_python": "", "summary": "Merges two arbitrarily deep hashes into a single hash.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hashmerge: a Python library to merge deep hashes</h1>\n<p>hashmerge is a port of the excellent Perl module <a href=\"http://search.cpan.org/%7Erehsack/Hash-Merge/\" rel=\"nofollow\">Hash::Merge</a>\nwritten by Jens Rehsack.</p>\n<p>It merges two arbitrarily deep hashes into a single hash. That\nis, at any level, it will add non-conflicting key-value pairs from one\nhash to the other, and follows a set of specific rules when there are key\nvalue conflicts (as outlined below).  The hash is followed recursively,\nso that deeply nested hashes that are at the same level will be merged\nwhen the parent hashes are merged. Please note that self-referencing\nhashes, or recursive references, are not handled well by this method.</p>\n<p>Values in hashes are considered to be either lists or tuples (<code>ARRAY</code>),\ndictionaries (<code>HASH</code>), or otherwise are treated as <code>SCALAR</code>s. By default,\nthe data passed to the merge function will be cloned using the <code>copy.deepcopy</code>\nmethod; however, if necessary, this behavior can be changed to use as many of\nthe original values as possible, using <code>set_clone_behavior</code>.</p>\n<p>Because there are a number of possible ways that one may want to merge\nvalues when keys are conflicting, hashmerge provides several preset\nmethods for your convenience, as well as a way to define you own.<br>\nThese are (currently):</p>\n<h2>Usage</h2>\n<pre><code>    import hashmerge\n    merger = hashmerge.HashMerge()\n    print(merger.merge({'d': 123, 'l': [1]}, {'e': 456, 'l': [2]}))\n\n    merger2 = hashmerge.HashMerge(hashmerge.RIGHT_PRECEDENT)\n    print(merger2.merge({'d': 123, 'l': [1]}, {'e': 456, 'l': [2]}))\n</code></pre>\n<h2>Left Precedence</h2>\n<p>This is the default behavior.</p>\n<p>The values buried in the left hash will never\nbe lost; any values that can be added from the right hash will be\nattempted.</p>\n<h2>Right Precedence</h2>\n<p>Same as Left Precedence, but with the right\nhash values never being lost</p>\n<h2>Storage Precedence</h2>\n<p>If conflicting keys have two different\nstorage mediums, the 'bigger' medium will win; arrays are preferred over\nscalars, hashes over either.  The other medium will try to be fitted in\nthe other, but if this isn't possible, the data is dropped.</p>\n<h2>Retainment Precedence</h2>\n<p>No data will be lost; scalars will be joined\nwith arrays, and scalars and arrays will be 'hashified' to fit them into\na hash.</p>\n<h2>Notes</h2>\n<p>Now you can safely abandon Perl.</p>\n\n          </div>"}, "last_serial": 6588103, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "685c7b44ee1a5352b6cfe8c1cae887db", "sha256": "3a46ae30b8521a19e2c6398783b8ddb278852011d75e92a3e53a9e46238ca891"}, "downloads": -1, "filename": "hashmerge-0.1.tar.gz", "has_sig": false, "md5_digest": "685c7b44ee1a5352b6cfe8c1cae887db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1888, "upload_time": "2016-01-06T16:25:35", "upload_time_iso_8601": "2016-01-06T16:25:35.557464Z", "url": "https://files.pythonhosted.org/packages/71/80/686eadf4469c4ce5c10fe582b043efc1aa05e454cf806654daa7088501dd/hashmerge-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c166ecc31ddcefb5e3b580c65427a9a4", "sha256": "65c78b1b5e7221ce93fd529d803a4486c36138a37d45c0a5ea054fb7bf080f59"}, "downloads": -1, "filename": "hashmerge-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c166ecc31ddcefb5e3b580c65427a9a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4175, "upload_time": "2020-02-07T12:12:18", "upload_time_iso_8601": "2020-02-07T12:12:18.150696Z", "url": "https://files.pythonhosted.org/packages/78/c5/efbd540a7655dd95beea50a9a1a733bd2f1c66948ea294026b91240f298e/hashmerge-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6aab36f82c03d75cb957e0f199ec3d", "sha256": "b46f6be49c2381c8644ff8f3a3cea0b4b12cb35d6a0ce638f468ffe352e9697e"}, "downloads": -1, "filename": "hashmerge-0.2.tar.gz", "has_sig": false, "md5_digest": "ff6aab36f82c03d75cb957e0f199ec3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3289, "upload_time": "2020-02-07T12:12:19", "upload_time_iso_8601": "2020-02-07T12:12:19.522510Z", "url": "https://files.pythonhosted.org/packages/b9/34/0b12354828fe0637858af502e2f8828773aafd4faced7293201524296cc5/hashmerge-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c166ecc31ddcefb5e3b580c65427a9a4", "sha256": "65c78b1b5e7221ce93fd529d803a4486c36138a37d45c0a5ea054fb7bf080f59"}, "downloads": -1, "filename": "hashmerge-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c166ecc31ddcefb5e3b580c65427a9a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4175, "upload_time": "2020-02-07T12:12:18", "upload_time_iso_8601": "2020-02-07T12:12:18.150696Z", "url": "https://files.pythonhosted.org/packages/78/c5/efbd540a7655dd95beea50a9a1a733bd2f1c66948ea294026b91240f298e/hashmerge-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff6aab36f82c03d75cb957e0f199ec3d", "sha256": "b46f6be49c2381c8644ff8f3a3cea0b4b12cb35d6a0ce638f468ffe352e9697e"}, "downloads": -1, "filename": "hashmerge-0.2.tar.gz", "has_sig": false, "md5_digest": "ff6aab36f82c03d75cb957e0f199ec3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3289, "upload_time": "2020-02-07T12:12:19", "upload_time_iso_8601": "2020-02-07T12:12:19.522510Z", "url": "https://files.pythonhosted.org/packages/b9/34/0b12354828fe0637858af502e2f8828773aafd4faced7293201524296cc5/hashmerge-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:20 2020"}