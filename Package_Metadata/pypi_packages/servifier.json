{"info": {"author": "Nikolay Lysenko", "author_email": "nikolay-lysenco@yandex.ru", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/Nikolay-Lysenko/servifier.svg?branch=master)](https://travis-ci.org/Nikolay-Lysenko/servifier)\n[![codecov](https://codecov.io/gh/Nikolay-Lysenko/servifier/branch/master/graph/badge.svg)](https://codecov.io/gh/Nikolay-Lysenko/servifier)\n[![Maintainability](https://api.codeclimate.com/v1/badges/b9203957727d2ea2d808/maintainability)](https://codeclimate.com/github/Nikolay-Lysenko/servifier/maintainability)\n[![PyPI version](https://badge.fury.io/py/servifier.svg)](https://badge.fury.io/py/servifier)\n\n# Servifier\n\n## Overview\n\nIt is an easy-to-use tool for making web service with API from your own Python functions.\n\nThe list of the features is as follows:\n* fault tolerance,\n* customizable requests validation,\n* concise error messages for end user,\n* authentication.\n\n## Minimal Example\n\nSuppose that you have a file named `simple_service.py` that looks like this:\n\n```python\nfrom servifier import HandleSpec, create_app\n\n\ndef add_numbers(first: int, second: int) -> int:\n    \"\"\"Add two numbers.\"\"\"\n    return first + second\n\n\ndef subtract_numbers(first: int, second: int) -> int:\n    \"\"\"Subtract two numbers.\"\"\"\n    return first - second\n\n\nhandle_spec_for_adding = HandleSpec(add_numbers, '/add')\nhandle_spec_for_subtraction = HandleSpec(subtract_numbers, '/subtract')\n\nhandle_specs = [handle_spec_for_adding, handle_spec_for_subtraction]\n\napp = create_app(handle_specs)\napp.run()\n```\n\nRun this script. A demo server starts and after that you can send requests to it:\n\n```bash\n>>> curl -X POST -H \"Content-Type: application/json\" -d '{\"first\": 1, \"second\": 3}' http://127.0.0.1:5000/add\n{\"response\":4,\"status\":200}\n>>> curl -X POST -H \"Content-Type: application/json\" -d '{\"first\": 1, \"second\": 3}' http://127.0.0.1:5000/subtract\n{\"response\":-2,\"status\":200}\n```\n\n## Installation\n\nA stable version of the package can be collected from PyPI:\n\n```pip install servifier```\n\n## Tips on Usage\n\n#### Deployment on a Production Server\n\nIn the above minimal example, the development server provided by `Flask` is used. It is not suitable for production usage.\n\nThere are [plenty of ways](http://flask.pocoo.org/docs/1.0/deploying/) to deploy a Flask application on a production server. For example, you can use [Waitress](http://flask.pocoo.org/docs/1.0/tutorial/deploy/#run-with-a-production-server) or uWSGI.\n\nLet us discuss uWSGI a bit more. You can create `uwsgi.ini` config:\n\n```\n[uwsgi]\n# {Python module}:{Flask app from there}\nmodule = simple_service:app\n# If it is true, there is a master process, not only workers.\nmaster = true\n# Number of workers.\nprocesses = 4\n# Host and port for API, '0.0.0.0' means to use web address.\nhttp = 0.0.0.0:7070\n# Directory with code to be imported.\npythonpath = ./venv/lib/python3.6/site-packages/\n# If it is not set, logs are printed. If it is set, logs are written to this file.\nlogto = /tmp/servifier.log\n```\n\nTo use it, you need to install `uWSGI` Python package:\n```\npip install uwsgi\n```\n\nTo start a production server, delete `app.run()` line from `simple_service.py` (it launches demo server) and run:\n```\nuwsgi --ini uwsgi.ini\n```\n\nIt may be enough to have just uWSGI. However, you can also add Nginx in front of uWSGI as a load balancer and a reverse proxy.\n\n#### Input Data Validation\n\nIt is possible to configure `servifier` so that requests with invalid data are rejected with a proper error code before your function is called.\n\nThe minimal example with a simple service can be modified in the following manner:\n\n```python\nfrom servifier import HandleSpec, create_app\nfrom servifier.validation import IntegerField\n\n\ndef add_numbers(first: int, second: int) -> int:\n    \"\"\"Add two numbers.\"\"\"\n    return first + second\n\n\ndef subtract_numbers(first: int, second: int) -> int:\n    \"\"\"Subtract two numbers.\"\"\"\n    return first - second\n    \n    \nclass IntegerPair:\n    \"\"\"A pair of two integers.\"\"\"\n    \n    first = IntegerField(required=True)\n    second = IntegerField(required=True)\n    \n    def __init__(self, first: int, second: int):\n        \"\"\"Initialize an instance with parameters validation.\"\"\"\n        self.first = first\n        self.second = second\n\n\nhandle_spec_for_adding = HandleSpec(\n    add_numbers, '/add', IntegerPair\n)\nhandle_spec_for_subtraction = HandleSpec(\n    subtract_numbers, '/subtract', IntegerPair\n)\n\nhandle_specs = [handle_spec_for_adding, handle_spec_for_subtraction]\n\napp = create_app(handle_specs)\napp.run()\n```\n\nBehavior of the service is demonstrated below:\n\n```bash\n>>> curl -X POST -H \"Content-Type: application/json\" -d '{\"first\": \"1\", \"second\": 3}' http://127.0.0.1:5000/add\n{\"error\":\"Invalid Request: check your JSON\",\"status\":422}\n```\n\nComparing to the minimal example, this service returns \"Invalid Request\" status instead of \"Internal Error\" status which is harder to debug for end user.\n\nIf you need more info about how this example works, read about [Python descriptors](https://www.codevoila.com/post/69/python-descriptors-example).\n\n#### Authentication\n\nIt is possible to deny requests that does not include login and token where proper value of token is defined by login and arbitrary salt.\n\nMinimal example with authentication enabled looks like this:\n\n```python\nfrom servifier import HandleSpec, create_app\n\n\ndef add_numbers(first: int, second: int) -> int:\n    \"\"\"Add two numbers.\"\"\"\n    return first + second\n\n\ndef subtract_numbers(first: int, second: int) -> int:\n    \"\"\"Subtract two numbers.\"\"\"\n    return first - second\n\n\nhandle_spec_for_adding = HandleSpec(\n    add_numbers, '/add', auth_salt='abcd'\n)\nhandle_spec_for_subtraction = HandleSpec(\n    subtract_numbers, '/subtract', auth_salt='1234'\n)\n\nhandle_specs = [handle_spec_for_adding, handle_spec_for_subtraction]\n\napp = create_app(handle_specs)\napp.run()\n```\n\nFor a particular login, you can generate its token with `servifier.auth.generate_token` function and tell this value to someone sending requests under this login. JSON attachment from a request must include two additional fields ('login' and 'token') besides fields with arguments for a Python function.\n\n```bash\n>>> curl -X POST -H \"Content-Type: application/json\" -d '{\"login\": \"a\", \"token\": \"6491cacf01b2e1c6d08a5609d2f570ea57d71ae7f06e0391276d70d935d29aa51888d566751aa36dc5e12e18da693ece36427c167e2a7a67e48aca8928ba3979\", \"first\": 1, \"second\": 3}' http://127.0.0.1:5000/subtract\n{\"result\":-2,\"status\":200}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Nikolay-Lysenko/servifier", "keywords": "web_service api_maker apify ml_engineering model_to_production", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "servifier", "package_url": "https://pypi.org/project/servifier/", "platform": "", "project_url": "https://pypi.org/project/servifier/", "project_urls": {"Homepage": "https://github.com/Nikolay-Lysenko/servifier"}, "release_url": "https://pypi.org/project/servifier/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "An easy-to-use tool for making web service with API from your own Python functions", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Nikolay-Lysenko/servifier\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fc4866f1df158d5a8f5897ec4023a1657e50e62/68747470733a2f2f7472617669732d63692e6f72672f4e696b6f6c61792d4c7973656e6b6f2f7365727669666965722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Nikolay-Lysenko/servifier\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6e313acb91b05e758ff9e99707adf39fb894262/68747470733a2f2f636f6465636f762e696f2f67682f4e696b6f6c61792d4c7973656e6b6f2f7365727669666965722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://codeclimate.com/github/Nikolay-Lysenko/servifier/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2694385ff4e5494df4b83557a76031bdff8461cf/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62393230333935373732376432656132643830382f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://badge.fury.io/py/servifier\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4df2ede69a16b07fa8a3307e8142064d2552aac3/68747470733a2f2f62616467652e667572792e696f2f70792f7365727669666965722e737667\"></a></p>\n<h1>Servifier</h1>\n<h2>Overview</h2>\n<p>It is an easy-to-use tool for making web service with API from your own Python functions.</p>\n<p>The list of the features is as follows:</p>\n<ul>\n<li>fault tolerance,</li>\n<li>customizable requests validation,</li>\n<li>concise error messages for end user,</li>\n<li>authentication.</li>\n</ul>\n<h2>Minimal Example</h2>\n<p>Suppose that you have a file named <code>simple_service.py</code> that looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servifier</span> <span class=\"kn\">import</span> <span class=\"n\">HandleSpec</span><span class=\"p\">,</span> <span class=\"n\">create_app</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Add two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">subtract_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Subtract two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">-</span> <span class=\"n\">second</span>\n\n\n<span class=\"n\">handle_spec_for_adding</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span><span class=\"n\">add_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/add'</span><span class=\"p\">)</span>\n<span class=\"n\">handle_spec_for_subtraction</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span><span class=\"n\">subtract_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/subtract'</span><span class=\"p\">)</span>\n\n<span class=\"n\">handle_specs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">handle_spec_for_adding</span><span class=\"p\">,</span> <span class=\"n\">handle_spec_for_subtraction</span><span class=\"p\">]</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">(</span><span class=\"n\">handle_specs</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Run this script. A demo server starts and after that you can send requests to it:</p>\n<pre>&gt;&gt;&gt; curl -X POST -H <span class=\"s2\">\"Content-Type: application/json\"</span> -d <span class=\"s1\">'{\"first\": 1, \"second\": 3}'</span> http://127.0.0.1:5000/add\n<span class=\"o\">{</span><span class=\"s2\">\"response\"</span>:4,<span class=\"s2\">\"status\"</span>:200<span class=\"o\">}</span>\n&gt;&gt;&gt; curl -X POST -H <span class=\"s2\">\"Content-Type: application/json\"</span> -d <span class=\"s1\">'{\"first\": 1, \"second\": 3}'</span> http://127.0.0.1:5000/subtract\n<span class=\"o\">{</span><span class=\"s2\">\"response\"</span>:-2,<span class=\"s2\">\"status\"</span>:200<span class=\"o\">}</span>\n</pre>\n<h2>Installation</h2>\n<p>A stable version of the package can be collected from PyPI:</p>\n<p><code>pip install servifier</code></p>\n<h2>Tips on Usage</h2>\n<h4>Deployment on a Production Server</h4>\n<p>In the above minimal example, the development server provided by <code>Flask</code> is used. It is not suitable for production usage.</p>\n<p>There are <a href=\"http://flask.pocoo.org/docs/1.0/deploying/\" rel=\"nofollow\">plenty of ways</a> to deploy a Flask application on a production server. For example, you can use <a href=\"http://flask.pocoo.org/docs/1.0/tutorial/deploy/#run-with-a-production-server\" rel=\"nofollow\">Waitress</a> or uWSGI.</p>\n<p>Let us discuss uWSGI a bit more. You can create <code>uwsgi.ini</code> config:</p>\n<pre><code>[uwsgi]\n# {Python module}:{Flask app from there}\nmodule = simple_service:app\n# If it is true, there is a master process, not only workers.\nmaster = true\n# Number of workers.\nprocesses = 4\n# Host and port for API, '0.0.0.0' means to use web address.\nhttp = 0.0.0.0:7070\n# Directory with code to be imported.\npythonpath = ./venv/lib/python3.6/site-packages/\n# If it is not set, logs are printed. If it is set, logs are written to this file.\nlogto = /tmp/servifier.log\n</code></pre>\n<p>To use it, you need to install <code>uWSGI</code> Python package:</p>\n<pre><code>pip install uwsgi\n</code></pre>\n<p>To start a production server, delete <code>app.run()</code> line from <code>simple_service.py</code> (it launches demo server) and run:</p>\n<pre><code>uwsgi --ini uwsgi.ini\n</code></pre>\n<p>It may be enough to have just uWSGI. However, you can also add Nginx in front of uWSGI as a load balancer and a reverse proxy.</p>\n<h4>Input Data Validation</h4>\n<p>It is possible to configure <code>servifier</code> so that requests with invalid data are rejected with a proper error code before your function is called.</p>\n<p>The minimal example with a simple service can be modified in the following manner:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servifier</span> <span class=\"kn\">import</span> <span class=\"n\">HandleSpec</span><span class=\"p\">,</span> <span class=\"n\">create_app</span>\n<span class=\"kn\">from</span> <span class=\"nn\">servifier.validation</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerField</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Add two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">subtract_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Subtract two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">-</span> <span class=\"n\">second</span>\n    \n    \n<span class=\"k\">class</span> <span class=\"nc\">IntegerPair</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"A pair of two integers.\"\"\"</span>\n    \n    <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initialize an instance with parameters validation.\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">second</span>\n\n\n<span class=\"n\">handle_spec_for_adding</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span>\n    <span class=\"n\">add_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/add'</span><span class=\"p\">,</span> <span class=\"n\">IntegerPair</span>\n<span class=\"p\">)</span>\n<span class=\"n\">handle_spec_for_subtraction</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span>\n    <span class=\"n\">subtract_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/subtract'</span><span class=\"p\">,</span> <span class=\"n\">IntegerPair</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">handle_specs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">handle_spec_for_adding</span><span class=\"p\">,</span> <span class=\"n\">handle_spec_for_subtraction</span><span class=\"p\">]</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">(</span><span class=\"n\">handle_specs</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Behavior of the service is demonstrated below:</p>\n<pre>&gt;&gt;&gt; curl -X POST -H <span class=\"s2\">\"Content-Type: application/json\"</span> -d <span class=\"s1\">'{\"first\": \"1\", \"second\": 3}'</span> http://127.0.0.1:5000/add\n<span class=\"o\">{</span><span class=\"s2\">\"error\"</span>:<span class=\"s2\">\"Invalid Request: check your JSON\"</span>,<span class=\"s2\">\"status\"</span>:422<span class=\"o\">}</span>\n</pre>\n<p>Comparing to the minimal example, this service returns \"Invalid Request\" status instead of \"Internal Error\" status which is harder to debug for end user.</p>\n<p>If you need more info about how this example works, read about <a href=\"https://www.codevoila.com/post/69/python-descriptors-example\" rel=\"nofollow\">Python descriptors</a>.</p>\n<h4>Authentication</h4>\n<p>It is possible to deny requests that does not include login and token where proper value of token is defined by login and arbitrary salt.</p>\n<p>Minimal example with authentication enabled looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">servifier</span> <span class=\"kn\">import</span> <span class=\"n\">HandleSpec</span><span class=\"p\">,</span> <span class=\"n\">create_app</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">add_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Add two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">subtract_numbers</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Subtract two numbers.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">first</span> <span class=\"o\">-</span> <span class=\"n\">second</span>\n\n\n<span class=\"n\">handle_spec_for_adding</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span>\n    <span class=\"n\">add_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/add'</span><span class=\"p\">,</span> <span class=\"n\">auth_salt</span><span class=\"o\">=</span><span class=\"s1\">'abcd'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">handle_spec_for_subtraction</span> <span class=\"o\">=</span> <span class=\"n\">HandleSpec</span><span class=\"p\">(</span>\n    <span class=\"n\">subtract_numbers</span><span class=\"p\">,</span> <span class=\"s1\">'/subtract'</span><span class=\"p\">,</span> <span class=\"n\">auth_salt</span><span class=\"o\">=</span><span class=\"s1\">'1234'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">handle_specs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">handle_spec_for_adding</span><span class=\"p\">,</span> <span class=\"n\">handle_spec_for_subtraction</span><span class=\"p\">]</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">(</span><span class=\"n\">handle_specs</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>For a particular login, you can generate its token with <code>servifier.auth.generate_token</code> function and tell this value to someone sending requests under this login. JSON attachment from a request must include two additional fields ('login' and 'token') besides fields with arguments for a Python function.</p>\n<pre>&gt;&gt;&gt; curl -X POST -H <span class=\"s2\">\"Content-Type: application/json\"</span> -d <span class=\"s1\">'{\"login\": \"a\", \"token\": \"6491cacf01b2e1c6d08a5609d2f570ea57d71ae7f06e0391276d70d935d29aa51888d566751aa36dc5e12e18da693ece36427c167e2a7a67e48aca8928ba3979\", \"first\": 1, \"second\": 3}'</span> http://127.0.0.1:5000/subtract\n<span class=\"o\">{</span><span class=\"s2\">\"result\"</span>:-2,<span class=\"s2\">\"status\"</span>:200<span class=\"o\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 5526857, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4df9179e5fd08b6f1e31f05cb029ccb0", "sha256": "01fc8960336f661ceae795e3063d5ed687bc9d1add64cc67b1dc1af9ac6fcd3a"}, "downloads": -1, "filename": "servifier-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4df9179e5fd08b6f1e31f05cb029ccb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7162, "upload_time": "2019-04-29T21:09:13", "upload_time_iso_8601": "2019-04-29T21:09:13.969806Z", "url": "https://files.pythonhosted.org/packages/05/67/856ab0012819a7fe73f217f8e2098f8dccf371a29a6b8a7682aff4651522/servifier-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "26a58cd5b846384991ec2ba40704eb6f", "sha256": "cb0309c0c45aeff5334ef9b8622058be28e8eb4c6f9fff5e214cf5948be1f302"}, "downloads": -1, "filename": "servifier-0.1.1.tar.gz", "has_sig": false, "md5_digest": "26a58cd5b846384991ec2ba40704eb6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7206, "upload_time": "2019-07-13T13:12:24", "upload_time_iso_8601": "2019-07-13T13:12:24.045561Z", "url": "https://files.pythonhosted.org/packages/e1/54/1977e2ea000e20404b1a2316ab0e0e621fb76b177d0025edef243b2d2eee/servifier-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26a58cd5b846384991ec2ba40704eb6f", "sha256": "cb0309c0c45aeff5334ef9b8622058be28e8eb4c6f9fff5e214cf5948be1f302"}, "downloads": -1, "filename": "servifier-0.1.1.tar.gz", "has_sig": false, "md5_digest": "26a58cd5b846384991ec2ba40704eb6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7206, "upload_time": "2019-07-13T13:12:24", "upload_time_iso_8601": "2019-07-13T13:12:24.045561Z", "url": "https://files.pythonhosted.org/packages/e1/54/1977e2ea000e20404b1a2316ab0e0e621fb76b177d0025edef243b2d2eee/servifier-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:53 2020"}