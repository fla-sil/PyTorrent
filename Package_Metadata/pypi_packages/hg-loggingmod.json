{"info": {"author": "Georges Racinet", "author_email": "georges.racinet@octobus.net", "bugtrack_url": null, "classifiers": [], "description": "# Mercurial logs through the `logging` module\n\nThis extension redirects most user feedback meant for terminals to the\nPython `logging` module of the standard library.\n\nThis is intended intended primarily for server-side use cases, and is unlikely\nto be useful for client-side operation.\n\nIndeed on a server, many messages are useful for the systems administrator\nonly, and would be unwanted pollution if seen by the client.\nA notable exception is `ui.status` which is really used\nto report back meaningful information over the wire.\n\nUsing logging is more robust and flexible than using flags such as\n`ui.debug` and redirecting `stderr`. It also provides integration with\nSentry (see below). Many other logs aggregation systems that have a `logging`\nhandler could be directly used.\n\nAt the time of this writing, it has the side effect to disable other extensions\nmeant for logs, such as `blackbox`.\n\n## Installation\n\nWARNING: this is completely untested at this point with Python 3, expected not\nto really work.\n\nInstall from the source tree using `pip install .`. Then,\nin your HGRC, include this:\n\n```ini\n[extensions]\nloggingmod =\n```\n\n## Configuration\n\nAll parameters are to be set within the `[logging]` hgrc section.\n\n### Basic configuration\n\nThese are applied first, using mostly\n[`logging.basicConfig`](https://docs.python.org/library/logging.html?highlight=basicconfig#logging.basicConfig)\n\nExample (these are the default values):\n\n```ini\n[logging]\nlevel = info\nformat = [%(asctime)s] [%(process)d] [%(levelname)s] [%(name)s] %(message)s\nhg_format = [%(asctime)s] [%(process)d] repo:%(repo)s [%(levelname)s] [%(name)s] %(message)s\n```\n\n#### Logging to a file\n\n```ini\n[logging]\nfile = /var/log/mercurial.log\n```\n\n#### Format\n\nThe `format` string is a regular logging format string, see\n[LogRecord attributes](https://docs.python.org/library/logging.html#logrecord-attributes) for a full list of the keys that can be used there.\n\nThe `hg_format` string is also a regular logging format string, but it\ncan additionally make use of the **`repo` parameter**: the full path to the\ncurrent repository on the file system, if relevant to the given log record.\nThis format is used in the `hg` logger and its descendants, such as\n`hg.logging`, `hg.discovery` etc.\n\nThe times will include the timezone by default.\n\n### Advanced configuration through files\n\n#### JSON\n\nThis is the most complete, as it leverages [`dictConfig()`](https://docs.python.org/library/logging.config.html#logging.config.dictConfig)\n\n```\n[logging]\nconfig.json = /etc/hg-logging.json\n```\n\nThe basic configuration above is done first nevertheless, but it is wiped out\nunless one uses the `incremental` keyword.\n\n### INI\n\nThis is forwarded to [`fileConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig)\n\n```\n[logging]\nconfig.ini = /etc/hg-logging.ini\n```\n\n## Using with Sentry\n\n### Prerequisites\n\nThe `sentry_sdk` package should be importable from the Mercurial process, see\n[Sentry install instructions](https://docs.sentry.io/platforms/python/#integrating-the-sdk)\n\nIn our experience, `pip install sentry-sdk` has not been enough, we had to also\ninstall [Brotli](https://pypi.org/project/Brotli/) as well. Your mileage may\nvary.\n\n\nIn doubt, [test it first](https://docs.sentry.io/platforms/python/#verifying-your-setup)\n\n### Activation\n\nTo forward logs to Sentry, just specify the DSN in the hgrc:\n\n```[ini]\n[logging]\nsentry.dsn = https://<key>@sentry.example.net/<project>\n```\n\nWarning : don't use quotes above.\n\n### Basic configuration\n\nThe Sentry default integration catches all logging calls, and is orthogonal\nto the regular `logging` configuration, except for the logger levels.\n\nThis extension has several knobs to tweak it.\nHere's an example\n\n```ini\n[logging]\nsentry.ignore_loggers = discovery extension\n\n# these are the default values:\nsentry.event_level = error\nsentry.breadcrumb_level = info\n```\n\n### Fine configuration\n\nInstead of the flat configuration as above, you can disable the blanket\nintegration and resort to explicit configuration with the `config.json`\ndirective and Sentry's handlers\n\n```ini\n[logging]\nconfig.json = /etc/hg-config-with-sentry.conf\nsentry.dsn = https://<key>@sentry.example.net/<project>\nsentry.default_integration = false\n```\n\nOf course, this also disables the `sentry.event_level` and\n`sentry.breadcrumbs_level` config items.\n\nAt the time of this writing, these handlers are\n\n- `sentry_sdk.integrations.logging.EventHandler`\n- `sentry_sdk.integrations.logging.BreadCrumbHandler`\n\nSee also: [Handler classes](https://docs.sentry.io/platforms/python/logging/#handler-classes) in Sentry documentation", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dev.heptapod.net/heptapod/hgext-loggingmod", "keywords": "hg mercurial", "license": "GPLv2+", "maintainer": "", "maintainer_email": "", "name": "hg-loggingmod", "package_url": "https://pypi.org/project/hg-loggingmod/", "platform": "", "project_url": "https://pypi.org/project/hg-loggingmod/", "project_urls": {"Homepage": "https://dev.heptapod.net/heptapod/hgext-loggingmod"}, "release_url": "https://pypi.org/project/hg-loggingmod/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Managing Mercurial logs with the standard Python logging module", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mercurial logs through the <code>logging</code> module</h1>\n<p>This extension redirects most user feedback meant for terminals to the\nPython <code>logging</code> module of the standard library.</p>\n<p>This is intended intended primarily for server-side use cases, and is unlikely\nto be useful for client-side operation.</p>\n<p>Indeed on a server, many messages are useful for the systems administrator\nonly, and would be unwanted pollution if seen by the client.\nA notable exception is <code>ui.status</code> which is really used\nto report back meaningful information over the wire.</p>\n<p>Using logging is more robust and flexible than using flags such as\n<code>ui.debug</code> and redirecting <code>stderr</code>. It also provides integration with\nSentry (see below). Many other logs aggregation systems that have a <code>logging</code>\nhandler could be directly used.</p>\n<p>At the time of this writing, it has the side effect to disable other extensions\nmeant for logs, such as <code>blackbox</code>.</p>\n<h2>Installation</h2>\n<p>WARNING: this is completely untested at this point with Python 3, expected not\nto really work.</p>\n<p>Install from the source tree using <code>pip install .</code>. Then,\nin your HGRC, include this:</p>\n<pre><span class=\"k\">[extensions]</span>\n<span class=\"na\">loggingmod</span> <span class=\"o\">=</span>\n</pre>\n<h2>Configuration</h2>\n<p>All parameters are to be set within the <code>[logging]</code> hgrc section.</p>\n<h3>Basic configuration</h3>\n<p>These are applied first, using mostly\n<a href=\"https://docs.python.org/library/logging.html?highlight=basicconfig#logging.basicConfig\" rel=\"nofollow\"><code>logging.basicConfig</code></a></p>\n<p>Example (these are the default values):</p>\n<pre><span class=\"k\">[logging]</span>\n<span class=\"na\">level</span> <span class=\"o\">=</span> <span class=\"s\">info</span>\n<span class=\"na\">format</span> <span class=\"o\">=</span> <span class=\"s\">[%(asctime)s] [%(process)d] [%(levelname)s] [%(name)s] %(message)s</span>\n<span class=\"na\">hg_format</span> <span class=\"o\">=</span> <span class=\"s\">[%(asctime)s] [%(process)d] repo:%(repo)s [%(levelname)s] [%(name)s] %(message)s</span>\n</pre>\n<h4>Logging to a file</h4>\n<pre><span class=\"k\">[logging]</span>\n<span class=\"na\">file</span> <span class=\"o\">=</span> <span class=\"s\">/var/log/mercurial.log</span>\n</pre>\n<h4>Format</h4>\n<p>The <code>format</code> string is a regular logging format string, see\n<a href=\"https://docs.python.org/library/logging.html#logrecord-attributes\" rel=\"nofollow\">LogRecord attributes</a> for a full list of the keys that can be used there.</p>\n<p>The <code>hg_format</code> string is also a regular logging format string, but it\ncan additionally make use of the <strong><code>repo</code> parameter</strong>: the full path to the\ncurrent repository on the file system, if relevant to the given log record.\nThis format is used in the <code>hg</code> logger and its descendants, such as\n<code>hg.logging</code>, <code>hg.discovery</code> etc.</p>\n<p>The times will include the timezone by default.</p>\n<h3>Advanced configuration through files</h3>\n<h4>JSON</h4>\n<p>This is the most complete, as it leverages <a href=\"https://docs.python.org/library/logging.config.html#logging.config.dictConfig\" rel=\"nofollow\"><code>dictConfig()</code></a></p>\n<pre><code>[logging]\nconfig.json = /etc/hg-logging.json\n</code></pre>\n<p>The basic configuration above is done first nevertheless, but it is wiped out\nunless one uses the <code>incremental</code> keyword.</p>\n<h3>INI</h3>\n<p>This is forwarded to <a href=\"https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig\" rel=\"nofollow\"><code>fileConfig()</code></a></p>\n<pre><code>[logging]\nconfig.ini = /etc/hg-logging.ini\n</code></pre>\n<h2>Using with Sentry</h2>\n<h3>Prerequisites</h3>\n<p>The <code>sentry_sdk</code> package should be importable from the Mercurial process, see\n<a href=\"https://docs.sentry.io/platforms/python/#integrating-the-sdk\" rel=\"nofollow\">Sentry install instructions</a></p>\n<p>In our experience, <code>pip install sentry-sdk</code> has not been enough, we had to also\ninstall <a href=\"https://pypi.org/project/Brotli/\" rel=\"nofollow\">Brotli</a> as well. Your mileage may\nvary.</p>\n<p>In doubt, <a href=\"https://docs.sentry.io/platforms/python/#verifying-your-setup\" rel=\"nofollow\">test it first</a></p>\n<h3>Activation</h3>\n<p>To forward logs to Sentry, just specify the DSN in the hgrc:</p>\n<pre>[logging]\nsentry.dsn = https://&lt;key&gt;@sentry.example.net/&lt;project&gt;\n</pre>\n<p>Warning : don't use quotes above.</p>\n<h3>Basic configuration</h3>\n<p>The Sentry default integration catches all logging calls, and is orthogonal\nto the regular <code>logging</code> configuration, except for the logger levels.</p>\n<p>This extension has several knobs to tweak it.\nHere's an example</p>\n<pre><span class=\"k\">[logging]</span>\n<span class=\"na\">sentry.ignore_loggers</span> <span class=\"o\">=</span> <span class=\"s\">discovery extension</span>\n\n<span class=\"c1\"># these are the default values:</span>\n<span class=\"na\">sentry.event_level</span> <span class=\"o\">=</span> <span class=\"s\">error</span>\n<span class=\"na\">sentry.breadcrumb_level</span> <span class=\"o\">=</span> <span class=\"s\">info</span>\n</pre>\n<h3>Fine configuration</h3>\n<p>Instead of the flat configuration as above, you can disable the blanket\nintegration and resort to explicit configuration with the <code>config.json</code>\ndirective and Sentry's handlers</p>\n<pre><span class=\"k\">[logging]</span>\n<span class=\"na\">config.json</span> <span class=\"o\">=</span> <span class=\"s\">/etc/hg-config-with-sentry.conf</span>\n<span class=\"na\">sentry.dsn</span> <span class=\"o\">=</span> <span class=\"s\">https://&lt;key&gt;@sentry.example.net/&lt;project&gt;</span>\n<span class=\"na\">sentry.default_integration</span> <span class=\"o\">=</span> <span class=\"s\">false</span>\n</pre>\n<p>Of course, this also disables the <code>sentry.event_level</code> and\n<code>sentry.breadcrumbs_level</code> config items.</p>\n<p>At the time of this writing, these handlers are</p>\n<ul>\n<li><code>sentry_sdk.integrations.logging.EventHandler</code></li>\n<li><code>sentry_sdk.integrations.logging.BreadCrumbHandler</code></li>\n</ul>\n<p>See also: <a href=\"https://docs.sentry.io/platforms/python/logging/#handler-classes\" rel=\"nofollow\">Handler classes</a> in Sentry documentation</p>\n\n          </div>"}, "last_serial": 6885724, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "f771eac674614de633795c0027282d77", "sha256": "1c4e3dd1513c5f512e95a1478d8d2cdab02606e64e12947b3260387cdb5f9e0d"}, "downloads": -1, "filename": "hg-loggingmod-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f771eac674614de633795c0027282d77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12444, "upload_time": "2020-03-25T23:28:06", "upload_time_iso_8601": "2020-03-25T23:28:06.108053Z", "url": "https://files.pythonhosted.org/packages/10/22/c4947b87f5abd16da3d6fd8286b6e29376ebcbc7cb3c3cc55e051ae98716/hg-loggingmod-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f771eac674614de633795c0027282d77", "sha256": "1c4e3dd1513c5f512e95a1478d8d2cdab02606e64e12947b3260387cdb5f9e0d"}, "downloads": -1, "filename": "hg-loggingmod-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f771eac674614de633795c0027282d77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12444, "upload_time": "2020-03-25T23:28:06", "upload_time_iso_8601": "2020-03-25T23:28:06.108053Z", "url": "https://files.pythonhosted.org/packages/10/22/c4947b87f5abd16da3d6fd8286b6e29376ebcbc7cb3c3cc55e051ae98716/hg-loggingmod-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:22 2020"}