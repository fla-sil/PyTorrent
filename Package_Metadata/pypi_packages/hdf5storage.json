{"info": {"author": "Freja Nordsiek", "author_email": "fnordsie@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Overview\n========\n\nThis Python package provides high level utilities to read/write a\nvariety of Python types to/from HDF5 (Heirarchal Data Format) formatted\nfiles. This package also provides support for MATLAB MAT v7.3 formatted\nfiles, which are just HDF5 files with a different extension and some\nextra meta-data.\n\nAll of this is done without pickling data. Pickling is bad for security\nbecause it allows arbitrary code to be executed in the interpreter. One\nwants to be able to read possibly HDF5 and MAT files from untrusted\nsources, so pickling is avoided in this package.\n\nThe package's documetation is found at\nhttp://pythonhosted.org/hdf5storage/\n\nThe package's source code is found at\nhttps://github.com/frejanordsiek/hdf5storage\n\nThe package is licensed under a 2-clause BSD license\n(https://github.com/frejanordsiek/hdf5storage/blob/master/COPYING.txt).\n\nInstallation\n============\n\nDependencies\n------------\n\nThis package only supports Python >= 2.6.\n\nThis package requires the numpy and h5py (>= 2.1) packages to run. Note\nthat full functionality requires h5py >= 2.3. An optional dependency is\nthe scipy package.\n\nInstalling by pip\n-----------------\n\nThis package is on `PyPI <https://pypi.python.org/pypi/hdf5storage>`_.\nTo install hdf5storage using pip, run the command::\n\n    pip install hdf5storage\n\nInstalling from Source\n----------------------\n\nTo install hdf5storage from source, download the package and then\ninstall the dependencies ::\n\n    pip install -r requirements.txt\n\nThen to install the package, run the command with Python ::\n\n    python setup.py install\n\nRunning Tests\n-------------\n\nFor testing, the package nose (>= 1.0) is required as well as unittest2\non Python 2.6. There are some tests that require Matlab and scipy to be\ninstalled and be in the executable path. Not having them means that\nthose tests cannot be run (they will be skipped) but all the other\ntests will run. To install all testing dependencies, other than scipy,\nrun ::\n\n    pip install -r requirements_tests.txt.\n\nTo run the tests ::\n\n    python setup.py nosetests\n\n\nBuilding Documentation\n----------------------\n\nThe documentation additionally requires sphinx (>= 1.7). The\ndocumentation dependencies can be installed by ::\n\n    pip install -r requirements_doc.txt\n\nTo build the documentation ::\n\n    python setup.py build_sphinx\n\nPython 2\n========\n\nThis package was designed and written for Python 3, with Python 2.7 and\n2.6 support added later. This does mean that a few things are a little\nclunky in Python 2. Examples include requiring ``unicode`` keys for\ndictionaries, the ``int`` and ``long`` types both being mapped to the\nPython 3 ``int`` type, etc. The storage format's metadata looks more\nfamiliar from a Python 3 standpoint as well.\n\nThe documentation is written in terms of Python 3 syntax and types\nprimarily. Important Python 2 information beyond direct translations of\nsyntax and types will be pointed out.\n\nHierarchal Data Format 5 (HDF5)\n===============================\n\nHDF5 files (see http://www.hdfgroup.org/HDF5/) are a commonly used file\nformat for exchange of numerical data. It has built in support for a\nlarge variety of number formats (un/signed integers, floating point\nnumbers, strings, etc.) as scalars and arrays, enums and compound types.\nIt also handles differences in data representation on different hardware\nplatforms (endianness, different floating point formats, etc.). As can\nbe imagined from the name, data is represented in an HDF5 file in a\nhierarchal form modelling a Unix filesystem (Datasets are equivalent to\nfiles, Groups are equivalent to directories, and links are supported).\n\nThis package interfaces HDF5 files using the h5py package\n(http://www.h5py.org/) as opposed to the PyTables package\n(http://www.pytables.org/).\n\nMATLAB MAT v7.3 file support\n============================\n\nMATLAB (http://www.mathworks.com/) MAT files version 7.3 and later are\nHDF5 files with a different file extension (``.mat``) and a very\nspecific set of meta-data and storage conventions. This package provides\nread and write support for a limited set of Python and MATLAB types.\n\nSciPy (http://scipy.org/) has functions to read and write the older MAT\nfile formats. This package has functions modeled after the\n``scipy.io.savemat`` and ``scipy.io.loadmat`` functions, that have the\nsame names and similar arguments. The dispatch to the SciPy versions if\nthe MAT file format is not an HDF5 based one.\n\nSupported Types\n===============\n\nThe supported Python and MATLAB types are given in the tables below.\nThe tables assume that one has imported collections and numpy as::\n\n    import collections as cl\n    import numpy as np\n\nThe table gives which Python types can be read and written, the first\nversion of this package to support it, the numpy type it gets\nconverted to for storage (if type information is not written, that\nwill be what it is read back as) the MATLAB class it becomes if\ntargetting a MAT file, and the first version of this package to\nsupport writing it so MATlAB can read it.\n\n===============  =======  ==========================  ===========  ==============\nPython                                                MATLAB\n----------------------------------------------------  ---------------------------\nType             Version  Converted to                Class        Version\n===============  =======  ==========================  ===========  ==============\nbool             0.1      np.bool\\_ or np.uint8       logical      0.1 [1]_\nNone             0.1      ``np.float64([])``          ``[]``       0.1\nint [2]_ [3]_    0.1      np.int64 [2]_               int64        0.1\nlong [3]_ [4]_   0.1      np.int64                    int64        0.1\nfloat            0.1      np.float64                  double       0.1\ncomplex          0.1      np.complex128               double       0.1\nstr              0.1      np.uint32/16                char         0.1 [5]_\nbytes            0.1      np.bytes\\_ or np.uint16     char         0.1 [6]_\nbytearray        0.1      np.bytes\\_ or np.uint16     char         0.1 [6]_\nlist             0.1      np.object\\_                 cell         0.1\ntuple            0.1      np.object\\_                 cell         0.1\nset              0.1      np.object\\_                 cell         0.1\nfrozenset        0.1      np.object\\_                 cell         0.1\ncl.deque         0.1      np.object\\_                 cell         0.1\ndict             0.1                                  struct       0.1 [7]_\nnp.bool\\_        0.1                                  logical      0.1\nnp.void          0.1\nnp.uint8         0.1                                  uint8        0.1\nnp.uint16        0.1                                  uint16       0.1\nnp.uint32        0.1                                  uint32       0.1\nnp.uint64        0.1                                  uint64       0.1\nnp.uint8         0.1                                  int8         0.1\nnp.int16         0.1                                  int16        0.1\nnp.int32         0.1                                  int32        0.1\nnp.int64         0.1                                  int64        0.1\nnp.float16 [8]_  0.1\nnp.float32       0.1                                  single       0.1\nnp.float64       0.1                                  double       0.1\nnp.complex64     0.1                                  single       0.1\nnp.complex128    0.1                                  double       0.1\nnp.str\\_         0.1      np.uint32/16                char/uint32  0.1 [5]_\nnp.bytes\\_       0.1      np.bytes\\_ or np.uint16     char         0.1 [6]_\nnp.object\\_      0.1                                  cell         0.1\nnp.ndarray       0.1      [9]_ [10]_                  [9]_ [10]_   0.1 [9]_ [11]_\nnp.matrix        0.1      [9]_                        [9]_         0.1 [9]_\nnp.chararray     0.1      [9]_                        [9]_         0.1 [9]_\nnp.recarray      0.1      structured np.ndarray       [9]_ [10]_   0.1 [9]_\n===============  =======  ==========================  ===========  ==============\n\n.. [1] Depends on the selected options. Always ``np.uint8`` when doing\n       MATLAB compatiblity, or if the option is explicitly set.\n.. [2] In Python 2.x, it may be read back as a ``long`` if it can't fit\n       in the size of an ``int``.\n.. [3] Must be small enough to fit into an ``np.int64``.\n.. [4] Type found only in Python 2.x. Python 2.x's ``long`` and ``int``\n       are unified into a single ``int`` type in Python 3.x. Read as an\n       ``int`` in Python 3.x.\n.. [5] Depends on the selected options and whether it can be converted\n       to UTF-16 without using doublets. If the option is explicity set\n       (or implicitly when doing MATLAB compatibility) and it can be\n       converted to UTF-16 without losing any characters that can't be\n       represented in UTF-16 or using UTF-16 doublets (MATLAB doesn't\n       support them), then it is written as ``np.uint16`` in UTF-16\n       encoding. Otherwise, it is stored at ``np.uint32`` in UTF-32\n       encoding.\n.. [6] Depends on the selected options. If the option is explicitly set\n       (or implicitly when doing MATLAB compatibility), it will be\n       stored as ``np.uint16`` in UTF-16 encoding unless it has\n       non-ASCII characters in which case a ``NotImplementedError`` is\n       thrown). Otherwise, it is just written as ``np.bytes_``.\n.. [7] All keys must be ``str`` in Python 3 or ``unicode`` in Python 2.\n       They cannot have null characters (``'\\x00'``) or forward slashes\n       (``'/'``) in them.\n.. [8] ``np.float16`` are not supported for h5py versions before\n       ``2.2``.\n.. [9] Container types are only supported if their underlying dtype is\n       supported. Data conversions are done based on its dtype.\n.. [10] Structured ``np.ndarray`` s (have fields in their dtypes) can be\n        written as an HDF5 COMPOUND type or as an HDF5 Group with\n        Datasets holding its fields (either the values directly, or as\n        an HDF5 Reference array to the values for the different elements\n        of the data). Can only be written as an HDF5 COMPOUND type if\n        none of its field are of dtype ``'object'``. Field names cannot\n        have null characters (``'\\x00'``) and, when writing as an HDF5\n        GROUP, forward slashes (``'/'``) in them.\n.. [11] Structured ``np.ndarray`` s with no elements, when written like a\n        structure, will not be read back with the right dtypes for their\n        fields (will all become 'object').\n\nThis table gives the MATLAB classes that can be read from a MAT file,\nthe first version of this package that can read them, and the Python\ntype they are read as.\n\n===============  =======  =================================\nMATLAB Class     Version  Python Type\n===============  =======  =================================\nlogical          0.1      np.bool\\_\nsingle           0.1      np.float32 or np.complex64 [12]_\ndouble           0.1      np.float64 or np.complex128 [12]_\nuint8            0.1      np.uint8\nuint16           0.1      np.uint16\nuint32           0.1      np.uint32\nuint64           0.1      np.uint64\nint8             0.1      np.int8\nint16            0.1      np.int16\nint32            0.1      np.int32\nint64            0.1      np.int64\nchar             0.1      np.str\\_\nstruct           0.1      structured np.ndarray\ncell             0.1      np.object\\_\ncanonical empty  0.1      ``np.float64([])``\n===============  =======  =================================\n\n.. [12] Depends on whether there is a complex part or not.\n\n\nVersions\n========\n\n0.1.15. Bugfix release that fixed the following bugs.\n        * Issue #68. Fixed bug where ``str`` and ``numpy.unicode_``\n          strings (but not ndarrays of them) were saved in\n          ``uint32`` format regardless of the value of\n          ``Options.convert_numpy_bytes_to_utf16``.\n        * Issue #70. Updated ``setup.py`` and ``requirements.txt`` to specify\n          the maximum versions of numpy and h5py that can be used for specific\n          python versions (avoid version with dropped support).\n        * Issue #71. Fixed bug where the ``'python_fields'`` attribute wouldn't\n          always be written when doing python metadata for data written in\n          a struct-like fashion. The bug caused the field order to not be\n          preserved when writing and reading.\n        * Fixed an assertion in the tests to handle field re-ordering when\n          no metadata is used for structured dtypes that only worked on\n          older versions of numpy.\n        * Issue #72. Fixed bug where python collections filled with ndarrays\n          that all have the same shape were converted to multi-dimensional\n          object ndarrays instead of a 1D object ndarray of the elements.\n\n0.1.14. Bugfix release that also added a couple features.\n        * Issue #45. Fixed syntax errors in unicode strings for Python\n          3.0 to 3.2.\n        * Issues #44 and #47. Fixed bugs in testing of conversion and\n          storage of string types.\n        * Issue #46. Fixed raising of ``RuntimeWarnings`` in tests due\n          to signalling NaNs.\n        * Added requirements files for building documentation and\n          running tests.\n        * Made it so that Matlab compatability tests are skipped if\n          Matlab is not found, instead of raising errors.\n\n0.1.13. Bugfix release fixing the following bug.\n        * Issue #36. Fixed bugs in writing ``int`` and ``long`` to HDF5\n          and their tests on 32 bit systems.\n\n0.1.12. Bugfix release fixing the following bugs. In addition, copyright years were also updated and notices put in the Matlab files used for testing.\n        * Issue #32. Fixed transposing before reshaping ``np.ndarray``\n          when reading from HDF5 files where python metadata was stored\n          but not Matlab metadata.\n        * Issue #33. Fixed the loss of the number of characters when\n          reading empty numpy string arrays.\n        * Issue #34. Fixed a conversion error when ``np.chararray`` are\n          written with Matlab metadata.\n\n0.1.11. Bugfix release fixing the following.\n        * Issue #30. Fixed ``loadmat`` not opening files in read mode.\n\n0.1.10. Minor feature/performance fix release doing the following.\n        * Issue #29. Added ``writes`` and ``reads`` functions to write\n          and read more than one piece of data at a time and made\n          ``savemat`` and ``loadmat`` use them to increase performance.\n          Previously, the HDF5 file was being opened and closed for\n          each piece of data, which impacted performance, especially\n\t  for large files.\n\n0.1.9. Bugfix and minor feature release doing the following.\n       * Issue #23. Fixed bug where a structured ``np.ndarray`` with\n         a field name of ``'O'`` could never be written as an\n         HDF5 COMPOUND Dataset (falsely thought a field's dtype was\n         object).\n       * Issue #6. Added optional data compression and the storage of\n         data checksums. Controlled by several new options.\n\n0.1.8. Bugfix release fixing the following two bugs.\n       * Issue #21. Fixed bug where the ``'MATLAB_class'`` Attribute is\n         not set when writing ``dict`` types when writing MATLAB\n         metadata.\n       * Issue #22. Fixed bug where null characters (``'\\x00'``) and\n         forward slashes (``'/'``) were allowed in ``dict`` keys and the\n         field names of structured ``np.ndarray`` (except that forward\n         slashes are allowed when the\n         ``structured_numpy_ndarray_as_struct`` is not set as is the\n         case when the ``matlab_compatible`` option is set). These\n         cause problems for the ``h5py`` package and the HDF5 library.\n         ``NotImplementedError`` is now thrown in these cases.\n\n0.1.7. Bugfix release with an added compatibility option and some added test code. Did the following.\n       * Fixed an issue reading variables larger than 2 GB in MATLAB\n         MAT v7.3 files when no explicit variable names to read are\n         given to ``hdf5storage.loadmat``. Fix also reduces memory\n         consumption and processing time a little bit by removing an\n         unneeded memory copy.\n       * ``Options`` now will accept any additional keyword arguments it\n         doesn't support, ignoring them, to be API compatible with future\n         package versions with added options.\n       * Added tests for reading data that has been compressed or had\n         other HDF5 filters applied.\n\n0.1.6. Bugfix release fixing a bug with determining the maximum size of a Python 2.x ``int`` on a 32-bit system.\n\n0.1.5. Bugfix release fixing the following bug.\n       * Fixed bug where an ``int`` could be stored that is too big to\n         fit into an ``int`` when read back in Python 2.x. When it is\n         too big, it is converted to a ``long``.\n       * Fixed a bug where an ``int`` or ``long`` that is too big to\n\t big to fit into an ``np.int64`` raised the wrong exception.\n       * Fixed bug where fields names for structured ``np.ndarray`` with\n         non-ASCII characters (assumed to be UTF-8 encoded in\n         Python 2.x) can't be read or written properly.\n       * Fixed bug where ``np.bytes_`` with non-ASCII characters can\n         were converted incorrectly to UTF-16 when that option is set\n         (set implicitly when doing MATLAB compatibility). Now, it throws\n         a ``NotImplementedError``.\n\n0.1.4. Bugfix release fixing the following bugs. Thanks goes to `mrdomino <https://github.com/mrdomino>`_ for writing the bug fixes.\n       * Fixed bug where ``dtype`` is used as a keyword parameter of\n         ``np.ndarray.astype`` when it is a positional argument.\n       * Fixed error caused by ``h5py.__version__`` being absent on\n         Ubuntu 12.04.\n\n0.1.3. Bugfix release fixing the following bug.\n       * Fixed broken ability to correctly read and write empty\n         structured ``np.ndarray`` (has fields).\n\n0.1.2. Bugfix release fixing the following bugs.\n       * Removed mistaken support for ``np.float16`` for h5py versions\n         before ``2.2`` since that was when support for it was\n         introduced.\n       * Structured ``np.ndarray`` where one or more fields is of the\n         ``'object'`` dtype can now be written without an error when\n         the ``structured_numpy_ndarray_as_struct`` option is not set.\n         They are written as an HDF5 Group, as if the option was set.\n       * Support for the ``'MATLAB_fields'`` Attribute for data types\n         that are structures in MATLAB has been added for when the\n         version of the h5py package being used is ``2.3`` or greater.\n         Support is still missing for earlier versions (this package\n         requires a minimum version of ``2.1``).\n       * The check for non-unicode string keys (``str`` in Python 3 and\n         ``unicode`` in Python 2) in the type ``dict`` is done right\n         before any changes are made to the HDF5 file instead of in the\n         middle so that no changes are applied if an invalid key is\n         present.\n       * HDF5 userblock set with the proper metadata for MATLAB support\n         right at the beginning of when data is being written to an HDF5\n         file instead of at the end, meaning the writing can crash and\n         the file will still be a valid MATLAB file.\n\n0.1.1. Bugfix release fixing the following bugs.\n       * ``str`` is now written like ``numpy.str_`` instead of\n         ``numpy.bytes_``.\n       * Complex numbers where the real or imaginary part are ``nan``\n         but the other part are not are now read correctly as opposed\n         to setting both parts to ``nan``.\n       * Fixed bugs in string conversions on Python 2 resulting from\n         ``str.decode()`` and ``unicode.encode()`` not taking the same\n         keyword arguments as in Python 3.\n       * MATLAB structure arrays can now be read without producing an\n         error on Python 2.\n       * ``numpy.str_`` now written as ``numpy.uint16`` on Python 2 if\n         the ``convert_numpy_str_to_utf16`` option is set and the\n         conversion can be done without using UTF-16 doublets, instead\n         of always writing them as ``numpy.uint32``.\n\n0.1. Initial version.\n\n\n", "description_content_type": "", "docs_url": "https://pythonhosted.org/hdf5storage/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frejanordsiek/hdf5storage", "keywords": "hdf5 matlab", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "hdf5storage", "package_url": "https://pypi.org/project/hdf5storage/", "platform": "", "project_url": "https://pypi.org/project/hdf5storage/", "project_urls": {"Homepage": "https://github.com/frejanordsiek/hdf5storage"}, "release_url": "https://pypi.org/project/hdf5storage/0.1.15/", "requires_dist": ["h5py (>=2.1); python_version == \"2.6\"", "numpy (<1.12.0); python_version == \"2.6\"", "h5py (>=2.1); python_version == \"2.7\"", "numpy; python_version == \"2.7\"", "h5py (<2.4,>=2.1); python_version == \"3.0\"", "numpy (<1.6.0); python_version == \"3.0\"", "h5py (<2.7,>=2.1); python_version == \"3.1\"", "numpy (<1.8.0); python_version == \"3.1\"", "h5py (<2.7,>=2.1); python_version == \"3.2\"", "numpy (<1.12.0); python_version == \"3.2\"", "numpy (<1.12.0); python_version == \"3.3\"", "h5py (>=2.1); python_version >= \"3.3\"", "numpy; python_version >= \"3.4\""], "requires_python": "", "summary": "Utilities to read/write Python types to/from HDF5 files, including MATLAB v7.3 MAT files.", "version": "0.1.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>This Python package provides high level utilities to read/write a\nvariety of Python types to/from HDF5 (Heirarchal Data Format) formatted\nfiles. This package also provides support for MATLAB MAT v7.3 formatted\nfiles, which are just HDF5 files with a different extension and some\nextra meta-data.</p>\n<p>All of this is done without pickling data. Pickling is bad for security\nbecause it allows arbitrary code to be executed in the interpreter. One\nwants to be able to read possibly HDF5 and MAT files from untrusted\nsources, so pickling is avoided in this package.</p>\n<p>The package\u2019s documetation is found at\n<a href=\"http://pythonhosted.org/hdf5storage/\" rel=\"nofollow\">http://pythonhosted.org/hdf5storage/</a></p>\n<p>The package\u2019s source code is found at\n<a href=\"https://github.com/frejanordsiek/hdf5storage\" rel=\"nofollow\">https://github.com/frejanordsiek/hdf5storage</a></p>\n<p>The package is licensed under a 2-clause BSD license\n(<a href=\"https://github.com/frejanordsiek/hdf5storage/blob/master/COPYING.txt\" rel=\"nofollow\">https://github.com/frejanordsiek/hdf5storage/blob/master/COPYING.txt</a>).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>This package only supports Python &gt;= 2.6.</p>\n<p>This package requires the numpy and h5py (&gt;= 2.1) packages to run. Note\nthat full functionality requires h5py &gt;= 2.3. An optional dependency is\nthe scipy package.</p>\n</div>\n<div id=\"installing-by-pip\">\n<h3>Installing by pip</h3>\n<p>This package is on <a href=\"https://pypi.python.org/pypi/hdf5storage\" rel=\"nofollow\">PyPI</a>.\nTo install hdf5storage using pip, run the command:</p>\n<pre>pip install hdf5storage\n</pre>\n</div>\n<div id=\"installing-from-source\">\n<h3>Installing from Source</h3>\n<p>To install hdf5storage from source, download the package and then\ninstall the dependencies</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>Then to install the package, run the command with Python</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"running-tests\">\n<h3>Running Tests</h3>\n<p>For testing, the package nose (&gt;= 1.0) is required as well as unittest2\non Python 2.6. There are some tests that require Matlab and scipy to be\ninstalled and be in the executable path. Not having them means that\nthose tests cannot be run (they will be skipped) but all the other\ntests will run. To install all testing dependencies, other than scipy,\nrun</p>\n<pre>pip install -r requirements_tests.txt.\n</pre>\n<p>To run the tests</p>\n<pre>python setup.py nosetests\n</pre>\n</div>\n<div id=\"building-documentation\">\n<h3>Building Documentation</h3>\n<p>The documentation additionally requires sphinx (&gt;= 1.7). The\ndocumentation dependencies can be installed by</p>\n<pre>pip install -r requirements_doc.txt\n</pre>\n<p>To build the documentation</p>\n<pre>python setup.py build_sphinx\n</pre>\n</div>\n</div>\n<div id=\"python-2\">\n<h2>Python 2</h2>\n<p>This package was designed and written for Python 3, with Python 2.7 and\n2.6 support added later. This does mean that a few things are a little\nclunky in Python 2. Examples include requiring <tt>unicode</tt> keys for\ndictionaries, the <tt>int</tt> and <tt>long</tt> types both being mapped to the\nPython 3 <tt>int</tt> type, etc. The storage format\u2019s metadata looks more\nfamiliar from a Python 3 standpoint as well.</p>\n<p>The documentation is written in terms of Python 3 syntax and types\nprimarily. Important Python 2 information beyond direct translations of\nsyntax and types will be pointed out.</p>\n</div>\n<div id=\"hierarchal-data-format-5-hdf5\">\n<h2>Hierarchal Data Format 5 (HDF5)</h2>\n<p>HDF5 files (see <a href=\"http://www.hdfgroup.org/HDF5/\" rel=\"nofollow\">http://www.hdfgroup.org/HDF5/</a>) are a commonly used file\nformat for exchange of numerical data. It has built in support for a\nlarge variety of number formats (un/signed integers, floating point\nnumbers, strings, etc.) as scalars and arrays, enums and compound types.\nIt also handles differences in data representation on different hardware\nplatforms (endianness, different floating point formats, etc.). As can\nbe imagined from the name, data is represented in an HDF5 file in a\nhierarchal form modelling a Unix filesystem (Datasets are equivalent to\nfiles, Groups are equivalent to directories, and links are supported).</p>\n<p>This package interfaces HDF5 files using the h5py package\n(<a href=\"http://www.h5py.org/\" rel=\"nofollow\">http://www.h5py.org/</a>) as opposed to the PyTables package\n(<a href=\"http://www.pytables.org/\" rel=\"nofollow\">http://www.pytables.org/</a>).</p>\n</div>\n<div id=\"matlab-mat-v7-3-file-support\">\n<h2>MATLAB MAT v7.3 file support</h2>\n<p>MATLAB (<a href=\"http://www.mathworks.com/\" rel=\"nofollow\">http://www.mathworks.com/</a>) MAT files version 7.3 and later are\nHDF5 files with a different file extension (<tt>.mat</tt>) and a very\nspecific set of meta-data and storage conventions. This package provides\nread and write support for a limited set of Python and MATLAB types.</p>\n<p>SciPy (<a href=\"http://scipy.org/\" rel=\"nofollow\">http://scipy.org/</a>) has functions to read and write the older MAT\nfile formats. This package has functions modeled after the\n<tt>scipy.io.savemat</tt> and <tt>scipy.io.loadmat</tt> functions, that have the\nsame names and similar arguments. The dispatch to the SciPy versions if\nthe MAT file format is not an HDF5 based one.</p>\n</div>\n<div id=\"supported-types\">\n<h2>Supported Types</h2>\n<p>The supported Python and MATLAB types are given in the tables below.\nThe tables assume that one has imported collections and numpy as:</p>\n<pre>import collections as cl\nimport numpy as np\n</pre>\n<p>The table gives which Python types can be read and written, the first\nversion of this package to support it, the numpy type it gets\nconverted to for storage (if type information is not written, that\nwill be what it is read back as) the MATLAB class it becomes if\ntargetting a MAT file, and the first version of this package to\nsupport writing it so MATlAB can read it.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>MATLAB</th>\n</tr>\n<tr><th>Type</th>\n<th>Version</th>\n<th>Converted to</th>\n<th>Class</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>bool</td>\n<td>0.1</td>\n<td>np.bool_ or np.uint8</td>\n<td>logical</td>\n<td>0.1 <a href=\"#id29\" id=\"id1\" rel=\"nofollow\">[1]</a></td>\n</tr>\n<tr><td>None</td>\n<td>0.1</td>\n<td><tt><span class=\"pre\">np.float64([])</span></tt></td>\n<td><tt>[]</tt></td>\n<td>0.1</td>\n</tr>\n<tr><td>int <a href=\"#id30\" id=\"id2\" rel=\"nofollow\">[2]</a> <a href=\"#id31\" id=\"id3\" rel=\"nofollow\">[3]</a></td>\n<td>0.1</td>\n<td>np.int64 <a href=\"#id30\" id=\"id4\" rel=\"nofollow\">[2]</a></td>\n<td>int64</td>\n<td>0.1</td>\n</tr>\n<tr><td>long <a href=\"#id31\" id=\"id5\" rel=\"nofollow\">[3]</a> <a href=\"#id32\" id=\"id6\" rel=\"nofollow\">[4]</a></td>\n<td>0.1</td>\n<td>np.int64</td>\n<td>int64</td>\n<td>0.1</td>\n</tr>\n<tr><td>float</td>\n<td>0.1</td>\n<td>np.float64</td>\n<td>double</td>\n<td>0.1</td>\n</tr>\n<tr><td>complex</td>\n<td>0.1</td>\n<td>np.complex128</td>\n<td>double</td>\n<td>0.1</td>\n</tr>\n<tr><td>str</td>\n<td>0.1</td>\n<td>np.uint32/16</td>\n<td>char</td>\n<td>0.1 <a href=\"#id33\" id=\"id7\" rel=\"nofollow\">[5]</a></td>\n</tr>\n<tr><td>bytes</td>\n<td>0.1</td>\n<td>np.bytes_ or np.uint16</td>\n<td>char</td>\n<td>0.1 <a href=\"#id34\" id=\"id8\" rel=\"nofollow\">[6]</a></td>\n</tr>\n<tr><td>bytearray</td>\n<td>0.1</td>\n<td>np.bytes_ or np.uint16</td>\n<td>char</td>\n<td>0.1 <a href=\"#id34\" id=\"id9\" rel=\"nofollow\">[6]</a></td>\n</tr>\n<tr><td>list</td>\n<td>0.1</td>\n<td>np.object_</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>tuple</td>\n<td>0.1</td>\n<td>np.object_</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>set</td>\n<td>0.1</td>\n<td>np.object_</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>frozenset</td>\n<td>0.1</td>\n<td>np.object_</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>cl.deque</td>\n<td>0.1</td>\n<td>np.object_</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>dict</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>struct</td>\n<td>0.1 <a href=\"#id35\" id=\"id10\" rel=\"nofollow\">[7]</a></td>\n</tr>\n<tr><td>np.bool_</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>logical</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.void</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>np.uint8</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>uint8</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.uint16</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>uint16</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.uint32</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>uint32</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.uint64</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>uint64</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.uint8</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>int8</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.int16</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>int16</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.int32</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>int32</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.int64</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>int64</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.float16 <a href=\"#id36\" id=\"id11\" rel=\"nofollow\">[8]</a></td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>np.float32</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>single</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.float64</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>double</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.complex64</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>single</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.complex128</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>double</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.str_</td>\n<td>0.1</td>\n<td>np.uint32/16</td>\n<td>char/uint32</td>\n<td>0.1 <a href=\"#id33\" id=\"id12\" rel=\"nofollow\">[5]</a></td>\n</tr>\n<tr><td>np.bytes_</td>\n<td>0.1</td>\n<td>np.bytes_ or np.uint16</td>\n<td>char</td>\n<td>0.1 <a href=\"#id34\" id=\"id13\" rel=\"nofollow\">[6]</a></td>\n</tr>\n<tr><td>np.object_</td>\n<td>0.1</td>\n<td>\u00a0</td>\n<td>cell</td>\n<td>0.1</td>\n</tr>\n<tr><td>np.ndarray</td>\n<td>0.1</td>\n<td><a href=\"#id37\" id=\"id14\" rel=\"nofollow\">[9]</a> <a href=\"#id38\" id=\"id15\" rel=\"nofollow\">[10]</a></td>\n<td><a href=\"#id37\" id=\"id16\" rel=\"nofollow\">[9]</a> <a href=\"#id38\" id=\"id17\" rel=\"nofollow\">[10]</a></td>\n<td>0.1 <a href=\"#id37\" id=\"id18\" rel=\"nofollow\">[9]</a> <a href=\"#id39\" id=\"id19\" rel=\"nofollow\">[11]</a></td>\n</tr>\n<tr><td>np.matrix</td>\n<td>0.1</td>\n<td><a href=\"#id37\" id=\"id20\" rel=\"nofollow\">[9]</a></td>\n<td><a href=\"#id37\" id=\"id21\" rel=\"nofollow\">[9]</a></td>\n<td>0.1 <a href=\"#id37\" id=\"id22\" rel=\"nofollow\">[9]</a></td>\n</tr>\n<tr><td>np.chararray</td>\n<td>0.1</td>\n<td><a href=\"#id37\" id=\"id23\" rel=\"nofollow\">[9]</a></td>\n<td><a href=\"#id37\" id=\"id24\" rel=\"nofollow\">[9]</a></td>\n<td>0.1 <a href=\"#id37\" id=\"id25\" rel=\"nofollow\">[9]</a></td>\n</tr>\n<tr><td>np.recarray</td>\n<td>0.1</td>\n<td>structured np.ndarray</td>\n<td><a href=\"#id37\" id=\"id26\" rel=\"nofollow\">[9]</a> <a href=\"#id38\" id=\"id27\" rel=\"nofollow\">[10]</a></td>\n<td>0.1 <a href=\"#id37\" id=\"id28\" rel=\"nofollow\">[9]</a></td>\n</tr>\n</tbody>\n</table>\n<table id=\"id29\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Depends on the selected options. Always <tt>np.uint8</tt> when doing\nMATLAB compatiblity, or if the option is explicitly set.</td></tr>\n</tbody>\n</table>\n<table id=\"id30\">\n<col><col>\n<tbody>\n<tr><td>[2]</td><td><em>(<a href=\"#id2\" rel=\"nofollow\">1</a>, <a href=\"#id4\" rel=\"nofollow\">2</a>)</em> In Python 2.x, it may be read back as a <tt>long</tt> if it can\u2019t fit\nin the size of an <tt>int</tt>.</td></tr>\n</tbody>\n</table>\n<table id=\"id31\">\n<col><col>\n<tbody>\n<tr><td>[3]</td><td><em>(<a href=\"#id3\" rel=\"nofollow\">1</a>, <a href=\"#id5\" rel=\"nofollow\">2</a>)</em> Must be small enough to fit into an <tt>np.int64</tt>.</td></tr>\n</tbody>\n</table>\n<table id=\"id32\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id6\" rel=\"nofollow\">[4]</a></td><td>Type found only in Python 2.x. Python 2.x\u2019s <tt>long</tt> and <tt>int</tt>\nare unified into a single <tt>int</tt> type in Python 3.x. Read as an\n<tt>int</tt> in Python 3.x.</td></tr>\n</tbody>\n</table>\n<table id=\"id33\">\n<col><col>\n<tbody>\n<tr><td>[5]</td><td><em>(<a href=\"#id7\" rel=\"nofollow\">1</a>, <a href=\"#id12\" rel=\"nofollow\">2</a>)</em> Depends on the selected options and whether it can be converted\nto UTF-16 without using doublets. If the option is explicity set\n(or implicitly when doing MATLAB compatibility) and it can be\nconverted to UTF-16 without losing any characters that can\u2019t be\nrepresented in UTF-16 or using UTF-16 doublets (MATLAB doesn\u2019t\nsupport them), then it is written as <tt>np.uint16</tt> in UTF-16\nencoding. Otherwise, it is stored at <tt>np.uint32</tt> in UTF-32\nencoding.</td></tr>\n</tbody>\n</table>\n<table id=\"id34\">\n<col><col>\n<tbody>\n<tr><td>[6]</td><td><em>(<a href=\"#id8\" rel=\"nofollow\">1</a>, <a href=\"#id9\" rel=\"nofollow\">2</a>, <a href=\"#id13\" rel=\"nofollow\">3</a>)</em> Depends on the selected options. If the option is explicitly set\n(or implicitly when doing MATLAB compatibility), it will be\nstored as <tt>np.uint16</tt> in UTF-16 encoding unless it has\nnon-ASCII characters in which case a <tt>NotImplementedError</tt> is\nthrown). Otherwise, it is just written as <tt>np.bytes_</tt>.</td></tr>\n</tbody>\n</table>\n<table id=\"id35\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id10\" rel=\"nofollow\">[7]</a></td><td>All keys must be <tt>str</tt> in Python 3 or <tt>unicode</tt> in Python 2.\nThey cannot have null characters (<tt>'\\x00'</tt>) or forward slashes\n(<tt>'/'</tt>) in them.</td></tr>\n</tbody>\n</table>\n<table id=\"id36\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id11\" rel=\"nofollow\">[8]</a></td><td><tt>np.float16</tt> are not supported for h5py versions before\n<tt>2.2</tt>.</td></tr>\n</tbody>\n</table>\n<table id=\"id37\">\n<col><col>\n<tbody>\n<tr><td>[9]</td><td><em>(<a href=\"#id14\" rel=\"nofollow\">1</a>, <a href=\"#id16\" rel=\"nofollow\">2</a>, <a href=\"#id18\" rel=\"nofollow\">3</a>, <a href=\"#id20\" rel=\"nofollow\">4</a>, <a href=\"#id21\" rel=\"nofollow\">5</a>, <a href=\"#id22\" rel=\"nofollow\">6</a>, <a href=\"#id23\" rel=\"nofollow\">7</a>, <a href=\"#id24\" rel=\"nofollow\">8</a>, <a href=\"#id25\" rel=\"nofollow\">9</a>, <a href=\"#id26\" rel=\"nofollow\">10</a>, <a href=\"#id28\" rel=\"nofollow\">11</a>)</em> Container types are only supported if their underlying dtype is\nsupported. Data conversions are done based on its dtype.</td></tr>\n</tbody>\n</table>\n<table id=\"id38\">\n<col><col>\n<tbody>\n<tr><td>[10]</td><td><em>(<a href=\"#id15\" rel=\"nofollow\">1</a>, <a href=\"#id17\" rel=\"nofollow\">2</a>, <a href=\"#id27\" rel=\"nofollow\">3</a>)</em> Structured <tt>np.ndarray</tt> s (have fields in their dtypes) can be\nwritten as an HDF5 COMPOUND type or as an HDF5 Group with\nDatasets holding its fields (either the values directly, or as\nan HDF5 Reference array to the values for the different elements\nof the data). Can only be written as an HDF5 COMPOUND type if\nnone of its field are of dtype <tt>'object'</tt>. Field names cannot\nhave null characters (<tt>'\\x00'</tt>) and, when writing as an HDF5\nGROUP, forward slashes (<tt>'/'</tt>) in them.</td></tr>\n</tbody>\n</table>\n<table id=\"id39\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id19\" rel=\"nofollow\">[11]</a></td><td>Structured <tt>np.ndarray</tt> s with no elements, when written like a\nstructure, will not be read back with the right dtypes for their\nfields (will all become \u2018object\u2019).</td></tr>\n</tbody>\n</table>\n<p>This table gives the MATLAB classes that can be read from a MAT file,\nthe first version of this package that can read them, and the Python\ntype they are read as.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>MATLAB Class</th>\n<th>Version</th>\n<th>Python Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>logical</td>\n<td>0.1</td>\n<td>np.bool_</td>\n</tr>\n<tr><td>single</td>\n<td>0.1</td>\n<td>np.float32 or np.complex64 <a href=\"#id42\" id=\"id40\" rel=\"nofollow\">[12]</a></td>\n</tr>\n<tr><td>double</td>\n<td>0.1</td>\n<td>np.float64 or np.complex128 <a href=\"#id42\" id=\"id41\" rel=\"nofollow\">[12]</a></td>\n</tr>\n<tr><td>uint8</td>\n<td>0.1</td>\n<td>np.uint8</td>\n</tr>\n<tr><td>uint16</td>\n<td>0.1</td>\n<td>np.uint16</td>\n</tr>\n<tr><td>uint32</td>\n<td>0.1</td>\n<td>np.uint32</td>\n</tr>\n<tr><td>uint64</td>\n<td>0.1</td>\n<td>np.uint64</td>\n</tr>\n<tr><td>int8</td>\n<td>0.1</td>\n<td>np.int8</td>\n</tr>\n<tr><td>int16</td>\n<td>0.1</td>\n<td>np.int16</td>\n</tr>\n<tr><td>int32</td>\n<td>0.1</td>\n<td>np.int32</td>\n</tr>\n<tr><td>int64</td>\n<td>0.1</td>\n<td>np.int64</td>\n</tr>\n<tr><td>char</td>\n<td>0.1</td>\n<td>np.str_</td>\n</tr>\n<tr><td>struct</td>\n<td>0.1</td>\n<td>structured np.ndarray</td>\n</tr>\n<tr><td>cell</td>\n<td>0.1</td>\n<td>np.object_</td>\n</tr>\n<tr><td>canonical empty</td>\n<td>0.1</td>\n<td><tt><span class=\"pre\">np.float64([])</span></tt></td>\n</tr>\n</tbody>\n</table>\n<table id=\"id42\">\n<col><col>\n<tbody>\n<tr><td>[12]</td><td><em>(<a href=\"#id40\" rel=\"nofollow\">1</a>, <a href=\"#id41\" rel=\"nofollow\">2</a>)</em> Depends on whether there is a complex part or not.</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"versions\">\n<h2>Versions</h2>\n<dl>\n<dt>0.1.15. Bugfix release that fixed the following bugs.</dt>\n<dd><ul>\n<li>Issue #68. Fixed bug where <tt>str</tt> and <tt>numpy.unicode_</tt>\nstrings (but not ndarrays of them) were saved in\n<tt>uint32</tt> format regardless of the value of\n<tt>Options.convert_numpy_bytes_to_utf16</tt>.</li>\n<li>Issue #70. Updated <tt>setup.py</tt> and <tt>requirements.txt</tt> to specify\nthe maximum versions of numpy and h5py that can be used for specific\npython versions (avoid version with dropped support).</li>\n<li>Issue #71. Fixed bug where the <tt>'python_fields'</tt> attribute wouldn\u2019t\nalways be written when doing python metadata for data written in\na struct-like fashion. The bug caused the field order to not be\npreserved when writing and reading.</li>\n<li>Fixed an assertion in the tests to handle field re-ordering when\nno metadata is used for structured dtypes that only worked on\nolder versions of numpy.</li>\n<li>Issue #72. Fixed bug where python collections filled with ndarrays\nthat all have the same shape were converted to multi-dimensional\nobject ndarrays instead of a 1D object ndarray of the elements.</li>\n</ul>\n</dd>\n<dt>0.1.14. Bugfix release that also added a couple features.</dt>\n<dd><ul>\n<li>Issue #45. Fixed syntax errors in unicode strings for Python\n3.0 to 3.2.</li>\n<li>Issues #44 and #47. Fixed bugs in testing of conversion and\nstorage of string types.</li>\n<li>Issue #46. Fixed raising of <tt>RuntimeWarnings</tt> in tests due\nto signalling NaNs.</li>\n<li>Added requirements files for building documentation and\nrunning tests.</li>\n<li>Made it so that Matlab compatability tests are skipped if\nMatlab is not found, instead of raising errors.</li>\n</ul>\n</dd>\n<dt>0.1.13. Bugfix release fixing the following bug.</dt>\n<dd><ul>\n<li>Issue #36. Fixed bugs in writing <tt>int</tt> and <tt>long</tt> to HDF5\nand their tests on 32 bit systems.</li>\n</ul>\n</dd>\n<dt>0.1.12. Bugfix release fixing the following bugs. In addition, copyright years were also updated and notices put in the Matlab files used for testing.</dt>\n<dd><ul>\n<li>Issue #32. Fixed transposing before reshaping <tt>np.ndarray</tt>\nwhen reading from HDF5 files where python metadata was stored\nbut not Matlab metadata.</li>\n<li>Issue #33. Fixed the loss of the number of characters when\nreading empty numpy string arrays.</li>\n<li>Issue #34. Fixed a conversion error when <tt>np.chararray</tt> are\nwritten with Matlab metadata.</li>\n</ul>\n</dd>\n<dt>0.1.11. Bugfix release fixing the following.</dt>\n<dd><ul>\n<li>Issue #30. Fixed <tt>loadmat</tt> not opening files in read mode.</li>\n</ul>\n</dd>\n<dt>0.1.10. Minor feature/performance fix release doing the following.</dt>\n<dd><ul>\n<li>Issue #29. Added <tt>writes</tt> and <tt>reads</tt> functions to write\nand read more than one piece of data at a time and made\n<tt>savemat</tt> and <tt>loadmat</tt> use them to increase performance.\nPreviously, the HDF5 file was being opened and closed for\neach piece of data, which impacted performance, especially\nfor large files.</li>\n</ul>\n</dd>\n<dt>0.1.9. Bugfix and minor feature release doing the following.</dt>\n<dd><ul>\n<li>Issue #23. Fixed bug where a structured <tt>np.ndarray</tt> with\na field name of <tt>'O'</tt> could never be written as an\nHDF5 COMPOUND Dataset (falsely thought a field\u2019s dtype was\nobject).</li>\n<li>Issue #6. Added optional data compression and the storage of\ndata checksums. Controlled by several new options.</li>\n</ul>\n</dd>\n<dt>0.1.8. Bugfix release fixing the following two bugs.</dt>\n<dd><ul>\n<li>Issue #21. Fixed bug where the <tt>'MATLAB_class'</tt> Attribute is\nnot set when writing <tt>dict</tt> types when writing MATLAB\nmetadata.</li>\n<li>Issue #22. Fixed bug where null characters (<tt>'\\x00'</tt>) and\nforward slashes (<tt>'/'</tt>) were allowed in <tt>dict</tt> keys and the\nfield names of structured <tt>np.ndarray</tt> (except that forward\nslashes are allowed when the\n<tt>structured_numpy_ndarray_as_struct</tt> is not set as is the\ncase when the <tt>matlab_compatible</tt> option is set). These\ncause problems for the <tt>h5py</tt> package and the HDF5 library.\n<tt>NotImplementedError</tt> is now thrown in these cases.</li>\n</ul>\n</dd>\n<dt>0.1.7. Bugfix release with an added compatibility option and some added test code. Did the following.</dt>\n<dd><ul>\n<li>Fixed an issue reading variables larger than 2 GB in MATLAB\nMAT v7.3 files when no explicit variable names to read are\ngiven to <tt>hdf5storage.loadmat</tt>. Fix also reduces memory\nconsumption and processing time a little bit by removing an\nunneeded memory copy.</li>\n<li><tt>Options</tt> now will accept any additional keyword arguments it\ndoesn\u2019t support, ignoring them, to be API compatible with future\npackage versions with added options.</li>\n<li>Added tests for reading data that has been compressed or had\nother HDF5 filters applied.</li>\n</ul>\n</dd>\n</dl>\n<p>0.1.6. Bugfix release fixing a bug with determining the maximum size of a Python 2.x <tt>int</tt> on a 32-bit system.</p>\n<dl>\n<dt>0.1.5. Bugfix release fixing the following bug.</dt>\n<dd><ul>\n<li>Fixed bug where an <tt>int</tt> could be stored that is too big to\nfit into an <tt>int</tt> when read back in Python 2.x. When it is\ntoo big, it is converted to a <tt>long</tt>.</li>\n<li>Fixed a bug where an <tt>int</tt> or <tt>long</tt> that is too big to\nbig to fit into an <tt>np.int64</tt> raised the wrong exception.</li>\n<li>Fixed bug where fields names for structured <tt>np.ndarray</tt> with\nnon-ASCII characters (assumed to be UTF-8 encoded in\nPython 2.x) can\u2019t be read or written properly.</li>\n<li>Fixed bug where <tt>np.bytes_</tt> with non-ASCII characters can\nwere converted incorrectly to UTF-16 when that option is set\n(set implicitly when doing MATLAB compatibility). Now, it throws\na <tt>NotImplementedError</tt>.</li>\n</ul>\n</dd>\n<dt>0.1.4. Bugfix release fixing the following bugs. Thanks goes to <a href=\"https://github.com/mrdomino\" rel=\"nofollow\">mrdomino</a> for writing the bug fixes.</dt>\n<dd><ul>\n<li>Fixed bug where <tt>dtype</tt> is used as a keyword parameter of\n<tt>np.ndarray.astype</tt> when it is a positional argument.</li>\n<li>Fixed error caused by <tt>h5py.__version__</tt> being absent on\nUbuntu 12.04.</li>\n</ul>\n</dd>\n<dt>0.1.3. Bugfix release fixing the following bug.</dt>\n<dd><ul>\n<li>Fixed broken ability to correctly read and write empty\nstructured <tt>np.ndarray</tt> (has fields).</li>\n</ul>\n</dd>\n<dt>0.1.2. Bugfix release fixing the following bugs.</dt>\n<dd><ul>\n<li>Removed mistaken support for <tt>np.float16</tt> for h5py versions\nbefore <tt>2.2</tt> since that was when support for it was\nintroduced.</li>\n<li>Structured <tt>np.ndarray</tt> where one or more fields is of the\n<tt>'object'</tt> dtype can now be written without an error when\nthe <tt>structured_numpy_ndarray_as_struct</tt> option is not set.\nThey are written as an HDF5 Group, as if the option was set.</li>\n<li>Support for the <tt>'MATLAB_fields'</tt> Attribute for data types\nthat are structures in MATLAB has been added for when the\nversion of the h5py package being used is <tt>2.3</tt> or greater.\nSupport is still missing for earlier versions (this package\nrequires a minimum version of <tt>2.1</tt>).</li>\n<li>The check for non-unicode string keys (<tt>str</tt> in Python 3 and\n<tt>unicode</tt> in Python 2) in the type <tt>dict</tt> is done right\nbefore any changes are made to the HDF5 file instead of in the\nmiddle so that no changes are applied if an invalid key is\npresent.</li>\n<li>HDF5 userblock set with the proper metadata for MATLAB support\nright at the beginning of when data is being written to an HDF5\nfile instead of at the end, meaning the writing can crash and\nthe file will still be a valid MATLAB file.</li>\n</ul>\n</dd>\n<dt>0.1.1. Bugfix release fixing the following bugs.</dt>\n<dd><ul>\n<li><tt>str</tt> is now written like <tt>numpy.str_</tt> instead of\n<tt>numpy.bytes_</tt>.</li>\n<li>Complex numbers where the real or imaginary part are <tt>nan</tt>\nbut the other part are not are now read correctly as opposed\nto setting both parts to <tt>nan</tt>.</li>\n<li>Fixed bugs in string conversions on Python 2 resulting from\n<tt>str.decode()</tt> and <tt>unicode.encode()</tt> not taking the same\nkeyword arguments as in Python 3.</li>\n<li>MATLAB structure arrays can now be read without producing an\nerror on Python 2.</li>\n<li><tt>numpy.str_</tt> now written as <tt>numpy.uint16</tt> on Python 2 if\nthe <tt>convert_numpy_str_to_utf16</tt> option is set and the\nconversion can be done without using UTF-16 doublets, instead\nof always writing them as <tt>numpy.uint32</tt>.</li>\n</ul>\n</dd>\n</dl>\n<p>0.1. Initial version.</p>\n</div>\n\n          </div>"}, "last_serial": 4019833, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "55b13271c2fc99281b6a16aa827f5ae1", "sha256": "e3c2ae538f82d0e22010510bf9a2523a6958af6290949118bc118515c30d033b"}, "downloads": -1, "filename": "hdf5storage-0.1.zip", "has_sig": false, "md5_digest": "55b13271c2fc99281b6a16aa827f5ae1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85546, "upload_time": "2014-02-16T10:08:32", "upload_time_iso_8601": "2014-02-16T10:08:32.949977Z", "url": "https://files.pythonhosted.org/packages/aa/db/0be87e8752f01624fbf7104e348bf4cbc16e9a93234cd7c521fd9f96f2bd/hdf5storage-0.1.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "582cf246de46efd6d861cdcf0c140420", "sha256": "540a15be8c7a887eddc207c3c31a1ba784d152b307e2eee6749fa673e1e64f99"}, "downloads": -1, "filename": "hdf5storage-0.1.1.zip", "has_sig": false, "md5_digest": "582cf246de46efd6d861cdcf0c140420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87042, "upload_time": "2014-03-08T00:36:41", "upload_time_iso_8601": "2014-03-08T00:36:41.413075Z", "url": "https://files.pythonhosted.org/packages/39/e5/cca34256d3b34a02e61850a5ba50543ef54f90922cbd2f3bf1dbd22d0384/hdf5storage-0.1.1.zip", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "96b992d23b73ebfcc185822df83f0ce8", "sha256": "118ccfb445ddfa5059213a3a7bd518961d46e9cb19ded8d26d9182c89bbc4226"}, "downloads": -1, "filename": "hdf5storage-0.1.10.zip", "has_sig": false, "md5_digest": "96b992d23b73ebfcc185822df83f0ce8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112273, "upload_time": "2015-11-29T16:25:25", "upload_time_iso_8601": "2015-11-29T16:25:25.637158Z", "url": "https://files.pythonhosted.org/packages/7a/87/6c8e8f5eb4579499f2e36131fdf5e73e82394d1afbe40dbae4f592cc0180/hdf5storage-0.1.10.zip", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "aedd7292dc2cc9c21c669fbb27946048", "sha256": "1eb56cba56a057b4bb27e8547789376d130c1c589f5677d0a7b576524ff0de49"}, "downloads": -1, "filename": "hdf5storage-0.1.11.zip", "has_sig": false, "md5_digest": "aedd7292dc2cc9c21c669fbb27946048", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112352, "upload_time": "2015-12-27T14:44:30", "upload_time_iso_8601": "2015-12-27T14:44:30.800209Z", "url": "https://files.pythonhosted.org/packages/9a/6b/a6e7c1bf996c816d919f6d55ca46835ba9fd7663306fae359b18ef0b5ef7/hdf5storage-0.1.11.zip", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "244daa53013e5fb626f53fe2accf0621", "sha256": "9e40d4d8032e753c92ddf3cb94a76a2de948a49cdf4b9f2cab61fe9b734bde7e"}, "downloads": -1, "filename": "hdf5storage-0.1.12.zip", "has_sig": false, "md5_digest": "244daa53013e5fb626f53fe2accf0621", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115024, "upload_time": "2016-02-13T20:53:37", "upload_time_iso_8601": "2016-02-13T20:53:37.584157Z", "url": "https://files.pythonhosted.org/packages/f8/90/6baa780e63ab5a5a59f4b1ca09ffeda15038289c225f3d9feab0082e33b5/hdf5storage-0.1.12.zip", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "b7f4b4f08010c96048203f79d10e89ac", "sha256": "e3d88297f7100812ab8d92e0bb718f6b0e8ef1d3cc202f2dd00f467834d362f8"}, "downloads": -1, "filename": "hdf5storage-0.1.13.zip", "has_sig": false, "md5_digest": "b7f4b4f08010c96048203f79d10e89ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115134, "upload_time": "2016-02-29T00:07:19", "upload_time_iso_8601": "2016-02-29T00:07:19.578175Z", "url": "https://files.pythonhosted.org/packages/61/ea/568a890c63d227e8c93a277ff7f933ce2f9c8feffa10cb7ea27e08c0f3c5/hdf5storage-0.1.13.zip", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "b0ea703ceb2306979232d535f4eb2256", "sha256": "534e973e4e8b0434206f3ba956a0b52e918f75f2368191e46032c992f170dafc"}, "downloads": -1, "filename": "hdf5storage-0.1.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0ea703ceb2306979232d535f4eb2256", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 55760, "upload_time": "2016-09-13T14:20:30", "upload_time_iso_8601": "2016-09-13T14:20:30.997277Z", "url": "https://files.pythonhosted.org/packages/00/91/4e6098a40a3072d99259d5de21cd7c84c6d393cdc50b8eeed48da261db28/hdf5storage-0.1.14-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a1a2e6d2a0ead653d80172bf60a859", "sha256": "180593f91325c952346010dde32b359563f69d2760b6e7d25a8d2d851b93b1ab"}, "downloads": -1, "filename": "hdf5storage-0.1.14.zip", "has_sig": false, "md5_digest": "56a1a2e6d2a0ead653d80172bf60a859", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118087, "upload_time": "2016-09-13T14:20:10", "upload_time_iso_8601": "2016-09-13T14:20:10.150274Z", "url": "https://files.pythonhosted.org/packages/cc/d5/ff101fb07d2cc1765517396dc937b69b8a19dc38e2bcb1d63de726c70466/hdf5storage-0.1.14.zip", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "bc0c63904cc1abaa074ae88c49df75a3", "sha256": "19c5848f147e3021720856796499e1d56c0c6531e7751358e27114b73761cd57"}, "downloads": -1, "filename": "hdf5storage-0.1.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc0c63904cc1abaa074ae88c49df75a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56914, "upload_time": "2018-07-01T09:24:59", "upload_time_iso_8601": "2018-07-01T09:24:59.769834Z", "url": "https://files.pythonhosted.org/packages/79/e0/5dd25068a231cd817265529368aca2f918049b290dcb2fd9b24ce136adf4/hdf5storage-0.1.15-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "663c5e9dca7e873f1c71a9f7349fcf5c", "sha256": "79d23ad4ca89b8824b4ff98764ff9403a9830caa7497cae75e001d2dfbbf4e8e"}, "downloads": -1, "filename": "hdf5storage-0.1.15.zip", "has_sig": false, "md5_digest": "663c5e9dca7e873f1c71a9f7349fcf5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129691, "upload_time": "2018-07-01T09:25:01", "upload_time_iso_8601": "2018-07-01T09:25:01.196798Z", "url": "https://files.pythonhosted.org/packages/ec/3b/7d87101eaf28cc8a9a36c0d9a6315bb3cf76775115f064a8ba3f9242789c/hdf5storage-0.1.15.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "eaaf7700068e318b513d4ce920570698", "sha256": "654dd5a0a612683f5d6de0f0d06a78db3d2e71d820fef14be74d76f8d838841e"}, "downloads": -1, "filename": "hdf5storage-0.1.2.zip", "has_sig": false, "md5_digest": "eaaf7700068e318b513d4ce920570698", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90099, "upload_time": "2014-08-14T22:45:20", "upload_time_iso_8601": "2014-08-14T22:45:20.116048Z", "url": "https://files.pythonhosted.org/packages/65/6a/115c437ff16d0f867d348e3033bf1dd4b7ebfff931cb50807e3a41a4434c/hdf5storage-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1bdda81bd88ce2f23adbda0217e16375", "sha256": "a2605247c652af2fa9ebab0b851af5139dca10633fbb1f233292e0fc487838b1"}, "downloads": -1, "filename": "hdf5storage-0.1.3.zip", "has_sig": false, "md5_digest": "1bdda81bd88ce2f23adbda0217e16375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93036, "upload_time": "2014-09-17T01:30:16", "upload_time_iso_8601": "2014-09-17T01:30:16.614006Z", "url": "https://files.pythonhosted.org/packages/c6/5d/fb16e837e93b5a6bac8d51955b079c89bb361b2cfb5a7d00a94500307957/hdf5storage-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b02c2511ba85c5e6af06ab73d8f6c468", "sha256": "ff6ab433f0cde4c305c13778b015e5506696bc50873948d1be1af2d78f21653f"}, "downloads": -1, "filename": "hdf5storage-0.1.4.zip", "has_sig": false, "md5_digest": "b02c2511ba85c5e6af06ab73d8f6c468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93507, "upload_time": "2015-02-10T03:32:34", "upload_time_iso_8601": "2015-02-10T03:32:34.601686Z", "url": "https://files.pythonhosted.org/packages/cc/93/00bbe2ad62186e5662700d546a492cfb329ec55825ea8e2c89814af8ec5a/hdf5storage-0.1.4.zip", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "9dc058ba03d3f9fe88948c7072ccef75", "sha256": "7f05632fdff88e4878197ef35a4e6590055daeb017f6356745c7b204e84eb462"}, "downloads": -1, "filename": "hdf5storage-0.1.5.zip", "has_sig": false, "md5_digest": "9dc058ba03d3f9fe88948c7072ccef75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96405, "upload_time": "2015-05-18T00:41:03", "upload_time_iso_8601": "2015-05-18T00:41:03.736597Z", "url": "https://files.pythonhosted.org/packages/a2/d7/a9ebefb724a102169b603d12ecff150a839947d590f4b1aeddfd08c6e477/hdf5storage-0.1.5.zip", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "7e68a1ca6e4ed779380beba2ee03f540", "sha256": "58a87e6de6fc2f1d7db8ff7703a752a7c968b140346ff0c7204322dbe44a9f0c"}, "downloads": -1, "filename": "hdf5storage-0.1.6.0.zip", "has_sig": false, "md5_digest": "7e68a1ca6e4ed779380beba2ee03f540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96540, "upload_time": "2015-07-07T04:51:23", "upload_time_iso_8601": "2015-07-07T04:51:23.039321Z", "url": "https://files.pythonhosted.org/packages/71/79/bcd61be34cb21a79cb231de0b848578f0ae69ff645b8b44e121a3f9ece47/hdf5storage-0.1.6.0.zip", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "8ca3ca667d5d89406e5e3a3f0c13f182", "sha256": "dd67e9c9690ff4b2d539bae4c5f40c7236bf0ea05d52fdeb6dd048d6f343b467"}, "downloads": -1, "filename": "hdf5storage-0.1.7.zip", "has_sig": false, "md5_digest": "8ca3ca667d5d89406e5e3a3f0c13f182", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100562, "upload_time": "2015-08-22T03:50:44", "upload_time_iso_8601": "2015-08-22T03:50:44.017573Z", "url": "https://files.pythonhosted.org/packages/10/ee/4d718a1e4f390bf372260949ba9052f32f90dcc6dfa075bdebf7a49cc7d7/hdf5storage-0.1.7.zip", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "01f9b9a7923b95a7d971354fe1d48210", "sha256": "7804337ddc359b0dbd339b783e2484c0f3b0eb1bf64da886b221e4e2f8082901"}, "downloads": -1, "filename": "hdf5storage-0.1.8.zip", "has_sig": false, "md5_digest": "01f9b9a7923b95a7d971354fe1d48210", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102064, "upload_time": "2015-08-22T18:30:42", "upload_time_iso_8601": "2015-08-22T18:30:42.426347Z", "url": "https://files.pythonhosted.org/packages/67/e2/90b1ffdf06db1c19c825f80548c69696a46aefbf852f975c578681d0f97b/hdf5storage-0.1.8.zip", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "da408f545b6827496b0c73ba854c26b8", "sha256": "809d459ec2942b41b620e5228c5adffadc5e75f5362daced56dcebcfb100bbed"}, "downloads": -1, "filename": "hdf5storage-0.1.9.zip", "has_sig": false, "md5_digest": "da408f545b6827496b0c73ba854c26b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109192, "upload_time": "2015-09-08T00:24:01", "upload_time_iso_8601": "2015-09-08T00:24:01.162245Z", "url": "https://files.pythonhosted.org/packages/7f/ac/80a8e88d25df5ef4ba942cdcd368a2dfb9e7ef10b9d82e03caf951a94fe2/hdf5storage-0.1.9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc0c63904cc1abaa074ae88c49df75a3", "sha256": "19c5848f147e3021720856796499e1d56c0c6531e7751358e27114b73761cd57"}, "downloads": -1, "filename": "hdf5storage-0.1.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc0c63904cc1abaa074ae88c49df75a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 56914, "upload_time": "2018-07-01T09:24:59", "upload_time_iso_8601": "2018-07-01T09:24:59.769834Z", "url": "https://files.pythonhosted.org/packages/79/e0/5dd25068a231cd817265529368aca2f918049b290dcb2fd9b24ce136adf4/hdf5storage-0.1.15-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "663c5e9dca7e873f1c71a9f7349fcf5c", "sha256": "79d23ad4ca89b8824b4ff98764ff9403a9830caa7497cae75e001d2dfbbf4e8e"}, "downloads": -1, "filename": "hdf5storage-0.1.15.zip", "has_sig": false, "md5_digest": "663c5e9dca7e873f1c71a9f7349fcf5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129691, "upload_time": "2018-07-01T09:25:01", "upload_time_iso_8601": "2018-07-01T09:25:01.196798Z", "url": "https://files.pythonhosted.org/packages/ec/3b/7d87101eaf28cc8a9a36c0d9a6315bb3cf76775115f064a8ba3f9242789c/hdf5storage-0.1.15.zip", "yanked": false}], "timestamp": "Fri May  8 00:52:04 2020"}