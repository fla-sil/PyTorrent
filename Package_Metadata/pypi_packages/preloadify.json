{"info": {"author": "Tobias Glaesser", "author_email": "tobimensch@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "preloadify\n==========\n\nCreate fat binaries with ease\n\nThis script is not a development of 2020, this GitHub repository could\ncreate a false impression. It was lurking around on my computer for\nyears, because I never thought it was quite finished, and therefore\nnever got around to releasing it. In truth it worked the whole time for\nthe current set of features, and I wanted to add some more before\nreleasing it.\n\nThis script can be a great alternative to static compilation, or to\ncases where you have a dynamically linked binary, that you\u2019d like to\nport to other systems, but you aren\u2019t willing to compile from source, or\nfor some reason can\u2019t. To make this work preloadify uses LD_PRELOAD, a\nunpacking/run script at the beginning of the created binary, tar,\noptional compression, and patchelf.\n\nPreloadify goes so far as to include the ld.so in the created binary\n(which is a sort of self-contained package) in order to make absolutely\nsure that it will run on every Linux system with compatible processor\narchitecture, in example all 64bit-x86 Linux systems. This allows for\nporting binaries from a full-fledged GNU/Linux to a bare-bones embedded\nLinux system, that has for example BusyBox, or some uncommon libc, or no\nld.so at all.\n\nThe \u2013pack command line option allows you to pack other binaries into the\nsame final fat binary, the kicker here is that for those additional\nbinaries preloadify also searches for needed dynamic libraries and packs\nthem into the fat binary, too. This means that the executable you wanted\nto convert into a fat executable can also call those other packed\nexecutables at runtime and they are also garantueed not to be missing\nany dynamic library dependencies.\n\nDependencies: - docopt (pip3 install docopt) - patchelf - tar\n\nThe help output (preloadify \u2013help) should be sufficient to understand\nhow it works:\n\n::\n\n   Usage: preloadify [options] EXECUTABLE OUTPUTFILE\n\n   Create an executable self-containing all dynamic library dependencies of the original.\n\n   Options:\n     -l, --list                  Alphabetically sorted list of all dynamic libraries\n                                 that are included in the preloadified executable.\n     -s, --size                  Lists the size of all dynamic libraries included in the\n                                 preloadified executable sorted by size.\n     -b, --blacklist FILE        Using a blacklist you can exclude dynamic libraries\n                                 from being included in the preloadified executable.\n                                 Blacklist files have the following format:\n                                     libsomelib\n                                     libsomeotherlib\n     -a, --addlist FILE          Include libraries and their respective dependencies\n                                 from a list in preloadified executable.\n                                 These usually are libraries that get dynamically\n                                 linked at runtime.\n                                 Addlist files have the following format:\n                                     libsomelib\n                                     libsomeotherlib\n                                     /path/to/lib\n     -c, --compression METHOD    One of gzip, bzip2 and xz.\n                                 By default compression is disabled.\n                                 Note that compression can influence portability negatively.\n     -t, --tmpdir TMPDIR         Set a different tmp directory. Default is /tmp.\n     -r, --run                   Run preloadified executable as soon as it is created.\n                                 (For testing purposes)\n     --chrootify                 With this option the wrapper creates a chroot environment\n                                 for the executable emulating the system without its libraries.\n                                 This can be useful to test whether all library dependencies\n                                 have been taken care of through preloadifying.\n     --pack EXECUTABLES          List of additional executables that should be part of the\n                                 preloadified executable separated by comma.\n                                 i.e. --pack bash,/path/to/program\n                                 Note that only the main executable will be executed\n                                 when executing the generated outputfile.\n     -h, --help                  Show this help message and exit\n     -v, --version               Display version information", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tobimensch/preloadify/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "preloadify", "package_url": "https://pypi.org/project/preloadify/", "platform": "", "project_url": "https://pypi.org/project/preloadify/", "project_urls": {"Homepage": "https://github.com/tobimensch/preloadify/"}, "release_url": "https://pypi.org/project/preloadify/1.0/", "requires_dist": null, "requires_python": "", "summary": "Create fat binaries with ease.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Create fat binaries with ease</p>\n<p>This script is not a development of 2020, this GitHub repository could\ncreate a false impression. It was lurking around on my computer for\nyears, because I never thought it was quite finished, and therefore\nnever got around to releasing it. In truth it worked the whole time for\nthe current set of features, and I wanted to add some more before\nreleasing it.</p>\n<p>This script can be a great alternative to static compilation, or to\ncases where you have a dynamically linked binary, that you\u2019d like to\nport to other systems, but you aren\u2019t willing to compile from source, or\nfor some reason can\u2019t. To make this work preloadify uses LD_PRELOAD, a\nunpacking/run script at the beginning of the created binary, tar,\noptional compression, and patchelf.</p>\n<p>Preloadify goes so far as to include the ld.so in the created binary\n(which is a sort of self-contained package) in order to make absolutely\nsure that it will run on every Linux system with compatible processor\narchitecture, in example all 64bit-x86 Linux systems. This allows for\nporting binaries from a full-fledged GNU/Linux to a bare-bones embedded\nLinux system, that has for example BusyBox, or some uncommon libc, or no\nld.so at all.</p>\n<p>The \u2013pack command line option allows you to pack other binaries into the\nsame final fat binary, the kicker here is that for those additional\nbinaries preloadify also searches for needed dynamic libraries and packs\nthem into the fat binary, too. This means that the executable you wanted\nto convert into a fat executable can also call those other packed\nexecutables at runtime and they are also garantueed not to be missing\nany dynamic library dependencies.</p>\n<p>Dependencies: - docopt (pip3 install docopt) - patchelf - tar</p>\n<p>The help output (preloadify \u2013help) should be sufficient to understand\nhow it works:</p>\n<pre>Usage: preloadify [options] EXECUTABLE OUTPUTFILE\n\nCreate an executable self-containing all dynamic library dependencies of the original.\n\nOptions:\n  -l, --list                  Alphabetically sorted list of all dynamic libraries\n                              that are included in the preloadified executable.\n  -s, --size                  Lists the size of all dynamic libraries included in the\n                              preloadified executable sorted by size.\n  -b, --blacklist FILE        Using a blacklist you can exclude dynamic libraries\n                              from being included in the preloadified executable.\n                              Blacklist files have the following format:\n                                  libsomelib\n                                  libsomeotherlib\n  -a, --addlist FILE          Include libraries and their respective dependencies\n                              from a list in preloadified executable.\n                              These usually are libraries that get dynamically\n                              linked at runtime.\n                              Addlist files have the following format:\n                                  libsomelib\n                                  libsomeotherlib\n                                  /path/to/lib\n  -c, --compression METHOD    One of gzip, bzip2 and xz.\n                              By default compression is disabled.\n                              Note that compression can influence portability negatively.\n  -t, --tmpdir TMPDIR         Set a different tmp directory. Default is /tmp.\n  -r, --run                   Run preloadified executable as soon as it is created.\n                              (For testing purposes)\n  --chrootify                 With this option the wrapper creates a chroot environment\n                              for the executable emulating the system without its libraries.\n                              This can be useful to test whether all library dependencies\n                              have been taken care of through preloadifying.\n  --pack EXECUTABLES          List of additional executables that should be part of the\n                              preloadified executable separated by comma.\n                              i.e. --pack bash,/path/to/program\n                              Note that only the main executable will be executed\n                              when executing the generated outputfile.\n  -h, --help                  Show this help message and exit\n  -v, --version               Display version information\n</pre>\n\n          </div>"}, "last_serial": 7138742, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7aba58cd3a008853b33cd6d59be26508", "sha256": "80c08540079549b09e87e9d1ba829582fc646fc0c582d9e5d31a8cf968a561d8"}, "downloads": -1, "filename": "preloadify-1.0.tar.gz", "has_sig": false, "md5_digest": "7aba58cd3a008853b33cd6d59be26508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6018, "upload_time": "2020-04-30T16:49:21", "upload_time_iso_8601": "2020-04-30T16:49:21.825769Z", "url": "https://files.pythonhosted.org/packages/eb/09/c318b18183b1da2fc379be4310a48d9c1747ffd7ccdd5f33331bded60f15/preloadify-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7aba58cd3a008853b33cd6d59be26508", "sha256": "80c08540079549b09e87e9d1ba829582fc646fc0c582d9e5d31a8cf968a561d8"}, "downloads": -1, "filename": "preloadify-1.0.tar.gz", "has_sig": false, "md5_digest": "7aba58cd3a008853b33cd6d59be26508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6018, "upload_time": "2020-04-30T16:49:21", "upload_time_iso_8601": "2020-04-30T16:49:21.825769Z", "url": "https://files.pythonhosted.org/packages/eb/09/c318b18183b1da2fc379be4310a48d9c1747ffd7ccdd5f33331bded60f15/preloadify-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:55 2020"}