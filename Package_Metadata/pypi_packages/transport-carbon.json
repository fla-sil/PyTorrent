{"info": {"author": "Jamie Bull", "author_email": "jamie.bull@oco-carbon.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Database :: Front-Ends"], "description": "**Introduction**\n\nThis library provides an open source Python package for calculating the carbon footprint of transport (UK-focused to begin with). The final version will include transport by land, sea or air, whether freight or business travel, by any mode covered in the *Defra GHG Emissions Factors for Company Reporting*.\n\nIt is currently in pre-alpha stage as several of the distance functions are incomplete (see *Contributing* and *To-do List* section).\n\n**distance:** provide the distance between two locations using a given transport mode\nThese functions are provided from a range of sources at present, some of which need more work, and some of which need replacing.\n\nAll distance functions are in the format ``distance.[mode]_distance(origin, destination, units)``, and the units default to \"km\".\n\n    >>> from transport_carbon import *\n    >>> road_distance('London', 'Leeds')\n    313.473    \n    \nThe available functions are:\n\n``air_distance(origin, destination[, units])``\n\nThis function is complete. It calculates the great circle distance between two points. The emissions factors already include an uplift to account for non-optimal routing and stacking at airports.\n\n``rail_distance(origin, destination[, units])``\n\nThis function has a working prototype. It is quite successful when used on journeys that are on a single train line (as they should be), however in trying to calculate more complicated journeys it often fails to find a route.\n\n``road_distance(origin, destination[, mode[, units])``\n\nThis function is complete. It is based on the Google Directions API as implemented in the ``g_directions`` module. ``mode`` defaults to \"driving\" and ``units`` defaults to \"km\".\n\n``sea_distance(origin, destination[, units])``\n\n**carbon:** provide the GHG emissions associated with a form of freight pr business transport\nThe GHG emissions factors are based on the data provided by Defra in their [2013 Government GHG Conversion Factors for Company Reporting](http://www.ukconversionfactorscarbonsmart.co.uk/) now provided in a web service from Ricardo-AEA.\n\nFor all functions, ``ghg_units`` defaults to \"kgCO2e\". Well to tank (upstream) emissions are available using \"kgCO2eWTT\". Other emissions factors available are \"kgCO2\", \"kgCH4\" and \"kgN2O\".\n\n    >>> from transport_carbon import *\n    >>> motorbike_ghg(size=\"Small\")\n    0.11890999999999999 \n    \n*Business travel*\n\n``air_ghg([origin[, destination[, ghg_units[, haul[, travel_class[, radiative_forcing]]]]]]``\n\nRequires either origin and destination, or haul to be passed. If unspecified radiative_forcing defaults to ``True``.\n\n``bus_ghg([ghg_units[, bus_type]])``  \n\nIf unspecified, ``bus_type`` defaults to \"AverageLocalBus\".\n\n``car_ghg([ghg_units[, select_by[, size[, market_segment[, fuel[, unit]]]]]])``\n\nIf unspecified, ``select_by`` defaults to \"Size\", ``size`` defaults to \"Average\", ``market_segment`` defaults to \"UpperMedium\", ``fuel`` defaults to \"Unknown\", and ``unit`` defaults to \"km\".\n\n``motorbike_ghg([ghg_units[, size])``\n\nIf unspecified, ``size`` defaults to \"Average\".\n\n``rail_ghg([ghg_units[, ghg_units[, rail_type]])``\n\nIf unspecified, ``rail_type`` defaults to \"NationalRail\".\n\n``ferry_ghg([ghg_units[, passenger_type]])``\n\nIf unspecified, ``passenger_type`` defaults to \"Average\".\n\n``taxi_ghg([ghg_units[, taxi_type[, unit]]])``\n\nIf unspecified, ``taxi_type`` defaults to \"RegularTaxi\", and ``units`` defaults to \"PassengerKm\".\n\n*Freight transport*\n\n``air_freight_ghg()([origin[, destination[, ghg_units[, haul[, radiative_forcing]]]]]]``\n\nRequires either origin and destination, or haul to be passed. ghg_units defaults to kgCO2e and radiative_forcing defaults to True.\n\n``cargo_ship_ghg([ghg_units[, ship_type[, capacity[, capacity_unit]]]])``\n\nIf unspecified, ``ship_type`` defaults to \"BulkCarrier\". ``capacity`` and ``capacity_units`` default to ``None``. The capacity units are looked up from the ship type, and the formula returns the average emissions factor for the ship type.\n\n``hgv_ghg([ghg_units[, refrigerated[, percent_laden[, hgv_type[, tonnage[, unit]]]]]])``\n\nIf unspecified, ``refrigerated`` defaults to ``False``, ``percent_laden`` defaults to \"Average\", ``hgv_type`` defaults to \"All\", ``tonnage`` defaults to ``None`` and the formula returns the average emissions factor for the HGV type, and ``unit`` deafults to 'km'.\n\n``rail_freight_ghg([ghg_units[, rail_type]])``\n\nIf unspecified, ``rail_type`` defaults to \"FreightTrain\".\n\n``sea_tanker_ghg([ghg_units[, ship_type[, capacity[, capacity_unit]]]])``\n\nIf unspecified, ``ship_type`` defaults to \"ProductsTanker\". ``capacity`` and ``capacity_units`` default to ``None``. The capacity units are looked up from the ship type, and the formula returns the average emissions factor for the tanker type.\n\n``van_ghg([ghg_units[, van_class[, tonnage[, fuel[, unit]]]]])``\n\nIf unspecified, ``van_class`` defaults to \"Average\", ``tonnage`` defaults to ``None`` and the formula returns the average emissions factor, ``fuel`` defaults to \"Unknown\", and ``unit`` defaults to \"km\".\n\n**Carbon Intensity database**\n\nNo API exists to serve GHG intensity data from Defra so we have created a database ourselves, ``defra_carbon.py``. All business transport and freight transport options have been added for 2013.\n\nThe tables are:\n\n* Activities\n* BusinessBus\n* BusinessCarsByMarketSegment\n* BusinessCarsBySize\n* BusinessFlights\n* BusinessFerries\n* BusinessMotorbike\n* BusinessRail\n* BusinessTaxi\n* FreightCargoShip\n* FreightFlights\n* FreightHGV\n* FreightRail\n* FreightSeaTanker\n* FreightVan\n\n**Contributing**\n\nPlease contact Jamie Bull at jamie.bull@oco-carbon.com if you would like to assist in developing this package\n\n**To-do list**\n\n1. Add other years to the database. Data for 2012 is available in the same format and so should be easy to add. Other years may be more difficult.\n\n2. Create public functions which link distance and carbon calculations. The intended syntax is ``travel_carbon.travel_carbon(origin, destination, mode, **kwargs)``\n\n3. Create the ``sea_distance()`` function. Some thought has gone into this so please contact if you would like to contribute.\n\n4. Improve the ``rail_distance()`` function. A new data source, choosing the start and end station appropriately.\n\n5. Improve test coverage.", "description_content_type": null, "docs_url": null, "download_url": "http://windows.github.com/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamiebull1/transport-carbon", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "transport-carbon", "package_url": "https://pypi.org/project/transport-carbon/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/transport-carbon/", "project_urls": {"Download": "http://windows.github.com/", "Homepage": "https://github.com/jamiebull1/transport-carbon"}, "release_url": "https://pypi.org/project/transport-carbon/0.0.5/", "requires_dist": null, "requires_python": null, "summary": "Python Transport GHG Emissions", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Introduction</strong></p>\n<p>This library provides an open source Python package for calculating the carbon footprint of transport (UK-focused to begin with). The final version will include transport by land, sea or air, whether freight or business travel, by any mode covered in the <em>Defra GHG Emissions Factors for Company Reporting</em>.</p>\n<p>It is currently in pre-alpha stage as several of the distance functions are incomplete (see <em>Contributing</em> and <em>To-do List</em> section).</p>\n<p><strong>distance:</strong> provide the distance between two locations using a given transport mode\nThese functions are provided from a range of sources at present, some of which need more work, and some of which need replacing.</p>\n<p>All distance functions are in the format <tt><span class=\"pre\">distance.[mode]_distance(origin,</span> destination, units)</tt>, and the units default to \u201ckm\u201d.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from transport_carbon import *\n&gt;&gt;&gt; road_distance('London', 'Leeds')\n313.473\n</pre>\n</blockquote>\n<p>The available functions are:</p>\n<p><tt>air_distance(origin, destination[, units])</tt></p>\n<p>This function is complete. It calculates the great circle distance between two points. The emissions factors already include an uplift to account for non-optimal routing and stacking at airports.</p>\n<p><tt>rail_distance(origin, destination[, units])</tt></p>\n<p>This function has a working prototype. It is quite successful when used on journeys that are on a single train line (as they should be), however in trying to calculate more complicated journeys it often fails to find a route.</p>\n<p><tt>road_distance(origin, destination[, mode[, units])</tt></p>\n<p>This function is complete. It is based on the Google Directions API as implemented in the <tt>g_directions</tt> module. <tt>mode</tt> defaults to \u201cdriving\u201d and <tt>units</tt> defaults to \u201ckm\u201d.</p>\n<p><tt>sea_distance(origin, destination[, units])</tt></p>\n<p><strong>carbon:</strong> provide the GHG emissions associated with a form of freight pr business transport\nThe GHG emissions factors are based on the data provided by Defra in their [2013 Government GHG Conversion Factors for Company Reporting](<a href=\"http://www.ukconversionfactorscarbonsmart.co.uk/\" rel=\"nofollow\">http://www.ukconversionfactorscarbonsmart.co.uk/</a>) now provided in a web service from Ricardo-AEA.</p>\n<p>For all functions, <tt>ghg_units</tt> defaults to \u201ckgCO2e\u201d. Well to tank (upstream) emissions are available using \u201ckgCO2eWTT\u201d. Other emissions factors available are \u201ckgCO2\u201d, \u201ckgCH4\u201d and \u201ckgN2O\u201d.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from transport_carbon import *\n&gt;&gt;&gt; motorbike_ghg(size=\"Small\")\n0.11890999999999999\n</pre>\n</blockquote>\n<p><em>Business travel</em></p>\n<p><tt><span class=\"pre\">air_ghg([origin[,</span> destination[, ghg_units[, haul[, travel_class[, <span class=\"pre\">radiative_forcing]]]]]]</span></tt></p>\n<p>Requires either origin and destination, or haul to be passed. If unspecified radiative_forcing defaults to <tt>True</tt>.</p>\n<p><tt><span class=\"pre\">bus_ghg([ghg_units[,</span> <span class=\"pre\">bus_type]])</span></tt></p>\n<p>If unspecified, <tt>bus_type</tt> defaults to \u201cAverageLocalBus\u201d.</p>\n<p><tt><span class=\"pre\">car_ghg([ghg_units[,</span> select_by[, size[, market_segment[, fuel[, <span class=\"pre\">unit]]]]]])</span></tt></p>\n<p>If unspecified, <tt>select_by</tt> defaults to \u201cSize\u201d, <tt>size</tt> defaults to \u201cAverage\u201d, <tt>market_segment</tt> defaults to \u201cUpperMedium\u201d, <tt>fuel</tt> defaults to \u201cUnknown\u201d, and <tt>unit</tt> defaults to \u201ckm\u201d.</p>\n<p><tt><span class=\"pre\">motorbike_ghg([ghg_units[,</span> size])</tt></p>\n<p>If unspecified, <tt>size</tt> defaults to \u201cAverage\u201d.</p>\n<p><tt><span class=\"pre\">rail_ghg([ghg_units[,</span> ghg_units[, <span class=\"pre\">rail_type]])</span></tt></p>\n<p>If unspecified, <tt>rail_type</tt> defaults to \u201cNationalRail\u201d.</p>\n<p><tt><span class=\"pre\">ferry_ghg([ghg_units[,</span> <span class=\"pre\">passenger_type]])</span></tt></p>\n<p>If unspecified, <tt>passenger_type</tt> defaults to \u201cAverage\u201d.</p>\n<p><tt><span class=\"pre\">taxi_ghg([ghg_units[,</span> taxi_type[, <span class=\"pre\">unit]]])</span></tt></p>\n<p>If unspecified, <tt>taxi_type</tt> defaults to \u201cRegularTaxi\u201d, and <tt>units</tt> defaults to \u201cPassengerKm\u201d.</p>\n<p><em>Freight transport</em></p>\n<p><tt><span class=\"pre\">air_freight_ghg()([origin[,</span> destination[, ghg_units[, haul[, <span class=\"pre\">radiative_forcing]]]]]]</span></tt></p>\n<p>Requires either origin and destination, or haul to be passed. ghg_units defaults to kgCO2e and radiative_forcing defaults to True.</p>\n<p><tt><span class=\"pre\">cargo_ship_ghg([ghg_units[,</span> ship_type[, capacity[, <span class=\"pre\">capacity_unit]]]])</span></tt></p>\n<p>If unspecified, <tt>ship_type</tt> defaults to \u201cBulkCarrier\u201d. <tt>capacity</tt> and <tt>capacity_units</tt> default to <tt>None</tt>. The capacity units are looked up from the ship type, and the formula returns the average emissions factor for the ship type.</p>\n<p><tt><span class=\"pre\">hgv_ghg([ghg_units[,</span> refrigerated[, percent_laden[, hgv_type[, tonnage[, <span class=\"pre\">unit]]]]]])</span></tt></p>\n<p>If unspecified, <tt>refrigerated</tt> defaults to <tt>False</tt>, <tt>percent_laden</tt> defaults to \u201cAverage\u201d, <tt>hgv_type</tt> defaults to \u201cAll\u201d, <tt>tonnage</tt> defaults to <tt>None</tt> and the formula returns the average emissions factor for the HGV type, and <tt>unit</tt> deafults to \u2018km\u2019.</p>\n<p><tt><span class=\"pre\">rail_freight_ghg([ghg_units[,</span> <span class=\"pre\">rail_type]])</span></tt></p>\n<p>If unspecified, <tt>rail_type</tt> defaults to \u201cFreightTrain\u201d.</p>\n<p><tt><span class=\"pre\">sea_tanker_ghg([ghg_units[,</span> ship_type[, capacity[, <span class=\"pre\">capacity_unit]]]])</span></tt></p>\n<p>If unspecified, <tt>ship_type</tt> defaults to \u201cProductsTanker\u201d. <tt>capacity</tt> and <tt>capacity_units</tt> default to <tt>None</tt>. The capacity units are looked up from the ship type, and the formula returns the average emissions factor for the tanker type.</p>\n<p><tt><span class=\"pre\">van_ghg([ghg_units[,</span> van_class[, tonnage[, fuel[, <span class=\"pre\">unit]]]]])</span></tt></p>\n<p>If unspecified, <tt>van_class</tt> defaults to \u201cAverage\u201d, <tt>tonnage</tt> defaults to <tt>None</tt> and the formula returns the average emissions factor, <tt>fuel</tt> defaults to \u201cUnknown\u201d, and <tt>unit</tt> defaults to \u201ckm\u201d.</p>\n<p><strong>Carbon Intensity database</strong></p>\n<p>No API exists to serve GHG intensity data from Defra so we have created a database ourselves, <tt>defra_carbon.py</tt>. All business transport and freight transport options have been added for 2013.</p>\n<p>The tables are:</p>\n<ul>\n<li>Activities</li>\n<li>BusinessBus</li>\n<li>BusinessCarsByMarketSegment</li>\n<li>BusinessCarsBySize</li>\n<li>BusinessFlights</li>\n<li>BusinessFerries</li>\n<li>BusinessMotorbike</li>\n<li>BusinessRail</li>\n<li>BusinessTaxi</li>\n<li>FreightCargoShip</li>\n<li>FreightFlights</li>\n<li>FreightHGV</li>\n<li>FreightRail</li>\n<li>FreightSeaTanker</li>\n<li>FreightVan</li>\n</ul>\n<p><strong>Contributing</strong></p>\n<p>Please contact Jamie Bull at <a href=\"mailto:jamie.bull%40oco-carbon.com\">jamie<span>.</span>bull<span>@</span>oco-carbon<span>.</span>com</a> if you would like to assist in developing this package</p>\n<p><strong>To-do list</strong></p>\n<ol>\n<li>Add other years to the database. Data for 2012 is available in the same format and so should be easy to add. Other years may be more difficult.</li>\n<li>Create public functions which link distance and carbon calculations. The intended syntax is <tt>travel_carbon.travel_carbon(origin, destination, mode, **kwargs)</tt></li>\n<li>Create the <tt>sea_distance()</tt> function. Some thought has gone into this so please contact if you would like to contribute.</li>\n<li>Improve the <tt>rail_distance()</tt> function. A new data source, choosing the start and end station appropriately.</li>\n<li>Improve test coverage.</li>\n</ol>\n\n          </div>"}, "last_serial": 974907, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "08b5afc2e643eb6c7e88d1cbb250c095", "sha256": "556300e8619a5e7e5b5468a59be32dd6fe63648f504c18c0a84bf6d0c5eb5a82"}, "downloads": -1, "filename": "transport-carbon-0.0.4.win32.exe", "has_sig": false, "md5_digest": "08b5afc2e643eb6c7e88d1cbb250c095", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 353218, "upload_time": "2014-01-20T16:20:38", "upload_time_iso_8601": "2014-01-20T16:20:38.860535Z", "url": "https://files.pythonhosted.org/packages/e3/13/f652894cbeaa26f9d9f9eb592bfce64ae01a2ff33b43aa5e12e0750d396d/transport-carbon-0.0.4.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "33a3c08cd83ed008ad132938c98e2099", "sha256": "883917b8fb2cf42bfc784ce30f5ce0aa4cb7a0e0d0644c3e69b51043dbff466d"}, "downloads": -1, "filename": "transport-carbon-0.0.4.zip", "has_sig": false, "md5_digest": "33a3c08cd83ed008ad132938c98e2099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153049, "upload_time": "2014-01-20T16:20:29", "upload_time_iso_8601": "2014-01-20T16:20:29.542981Z", "url": "https://files.pythonhosted.org/packages/fd/0e/e03c1595e09682518df3f0a73108333162b062a5ffbc550ac988bafdb97a/transport-carbon-0.0.4.zip", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "49d5805ca6eaf7bc4029d26411aadd8d", "sha256": "5a995e6265a68969d74e94dd443fd5b76b7589990931295ebd6fe3336c13a3af"}, "downloads": -1, "filename": "transport-carbon-0.0.5.win32.exe", "has_sig": false, "md5_digest": "49d5805ca6eaf7bc4029d26411aadd8d", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 353217, "upload_time": "2014-01-20T16:28:15", "upload_time_iso_8601": "2014-01-20T16:28:15.557848Z", "url": "https://files.pythonhosted.org/packages/e9/e1/ca2e11fca7ece7464c84b476c2659cc52cb27ac8397a24444d2aa2810b7e/transport-carbon-0.0.5.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "32256f42fe994831585fce3b35a870df", "sha256": "20bc79809f3fc085fa16e0bece65236f5ad25a77aff567425c17b208f119feab"}, "downloads": -1, "filename": "transport-carbon-0.0.5.zip", "has_sig": false, "md5_digest": "32256f42fe994831585fce3b35a870df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151659, "upload_time": "2014-01-20T16:28:05", "upload_time_iso_8601": "2014-01-20T16:28:05.789916Z", "url": "https://files.pythonhosted.org/packages/89/20/9b9a3b58f52187da3487abe71124e8bfe2cd3fe6b9c57501aa832fd0071a/transport-carbon-0.0.5.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49d5805ca6eaf7bc4029d26411aadd8d", "sha256": "5a995e6265a68969d74e94dd443fd5b76b7589990931295ebd6fe3336c13a3af"}, "downloads": -1, "filename": "transport-carbon-0.0.5.win32.exe", "has_sig": false, "md5_digest": "49d5805ca6eaf7bc4029d26411aadd8d", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 353217, "upload_time": "2014-01-20T16:28:15", "upload_time_iso_8601": "2014-01-20T16:28:15.557848Z", "url": "https://files.pythonhosted.org/packages/e9/e1/ca2e11fca7ece7464c84b476c2659cc52cb27ac8397a24444d2aa2810b7e/transport-carbon-0.0.5.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "32256f42fe994831585fce3b35a870df", "sha256": "20bc79809f3fc085fa16e0bece65236f5ad25a77aff567425c17b208f119feab"}, "downloads": -1, "filename": "transport-carbon-0.0.5.zip", "has_sig": false, "md5_digest": "32256f42fe994831585fce3b35a870df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151659, "upload_time": "2014-01-20T16:28:05", "upload_time_iso_8601": "2014-01-20T16:28:05.789916Z", "url": "https://files.pythonhosted.org/packages/89/20/9b9a3b58f52187da3487abe71124e8bfe2cd3fe6b9c57501aa832fd0071a/transport-carbon-0.0.5.zip", "yanked": false}], "timestamp": "Fri May  8 03:47:56 2020"}