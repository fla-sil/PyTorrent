{"info": {"author": "Tim Heap", "author_email": "tim@timheap.me", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "==============================================\ndjango-pronouns - Correctly address your users\n==============================================\n\nPronouns are tricky. Writing correspondence or copy with your users preferred pronoun in mind is even harder.\nWanting to break out of the gender binary damn near impossible - until now. ``django-pronouns`` is here to help!\n\nWhen a user is signing up, they can select their preferred pronouns (usually disguised as a gender option).\nThe usual suspects (s/he) are there, as well as more neutral ones (they, it, xir, etc). Using them in your\ncopy is as simple as working out which form you need, and ``django-pronouns`` will do the rest. Observe:\n\n.. code:: python\n\n\t>>> \"{{ user.pronoun.subject|title }} is awesome.\"\n\t\"She is awesome.\"\n\n\t>>> \"It is {{ user.name|pluralize }} birthday today. Go wish {{ user.pronoun.object }} a happy birthday!\"\n\t\"It is Tims birthday today. Go wish him happy birthday!\"\n\n\t>>> \"{{ user.name }} looked at {{ user.pronoun.reflexive }} in the mirror.\"\n\t\"Alex looked at himself in the mirror.\"\n\n\t>>> \"{{ user.pronoun.possessive_determiner|title }} stuff is on the table.\"\n\t\"Her stuff is on the table.\"\n\n\t>>> \"This guitar is {{ user.pronoun.possessive_pronoun }}.\"\n\t\"This guitar is hers.\"\n\nIf working out which form is too annoying, we can help there as well. Each of the five forms has a number of\naliases, consisting of the feminine and masculine forms joined with an underscore, as well as the (new) Spivak\nforms:\n\n* **Subject**: ``he_she``, ``shen_he``, ``ey``\n* **Object**: ``him_her``, ``her_him``, ``em``\n* **Reflexive**: ``himself_herself``, ``herself_himself``, ``emself``\n* **Possessive determiner**: ``his_her``, ``her_his``, ``eir``\n* **Possessive pronoun**: ``his_hers``, ``hers_his``, ``eirs``\n\nThe female and male pronouns are combined, as by themselves they are ambiguous. ``his`` may refer to either the\npossessive determiner, or the possessive pronoun, while ``her`` may refer to a possessive determiner or an\nobjective form. Spivak was chosen as it is one of the only forms that is unambiguous across all five forms.\n\nInstalling\n==========\n\nInstall via pip:\n\n.. code:: sh\n\n\t$ pip install django-pronouns\n\nAdd it to your ``INSTALLED_APPS`` in Django:\n\n.. code:: python\n\n\tINSTALLED_APPS = (\n\t\t# ...\n\t\t\"django_pronouns\",\n\t\t# ...\n\t)\n\nAnd finally, add the default pronoun set, if you want:\n\n.. code:: sh\n\n\t$ python manage.py loaddata pronouns\n\nYou can edit these pronouns, add more, or remove some later, via the administration area.\n\nUsing\n=====\n\nSimply add a ``ForeignKey`` link to the Pronoun model to add pronouns to any model. Pronouns work very well when coupled with a UserProfile:\n\n.. code:: python\n\n\tfrom django.db import models\n\tfrom django.contrib.auth.models import User\n\n\tfrom django_pronouns.models import Pronoun\n\n\tclass UserProfile(models.Model):\n\t\tuser = models.OneToOneField(User)\n\n\t\tname = models.CharField(max_length=255)\n\t\tdob = models.DateField()\n\t\tpronoun = models.ForeignKey(Pronoun)\n\nUse them like you would any other ForeignKey in forms.\n\nIn your templates, you can request any of the pronoun forms:\n\n.. code:: html+django\n\n\t{{ user.pronoun.subject|title }} is awesome.\n\n\tIt is {{ user.name|pluralize }} birthday today. Go wish {{ user.pronoun.object }} happy birthday!\n\n\t{{ user.name }} looked at {{ user.pronoun.reflexive }} in the mirror.\n\n\t{{ user.pronoun.possessive_determiner|title }} stuff is on the table.\n\n\tThis guitar is {{ user.pronoun.possessive_pronoun }}.\n\nA bunch of shortcut have also been provided, as working out which form to use is annoying. Each of the five forms has a\nnumber of aliases, consisting of the feminine and masculine forms joined with an underscore, as well as the Spivak\nforms:\n\n* **Subject**: ``he_she``, ``she_he``, ``ey``\n* **Object**: ``him_her``, ``her_him``, ``em``\n* **Reflexive**: ``himself_herself``, ``herself_himself``, ``emself``\n* **Possessive determiner**: ``his_her``, ``her_his``, ``eir``\n* **Possessive pronoun**: ``his_hers``, ``hers_his``, ``eirs``\n\nUsing them is the same as using the names forms:\n\n.. code:: html+django\n\n\t{{ user.pronoun.she_he|title }} is awesome.\n\n\tIt is {{ user.name|pluralize }} birthday today. Go wish {{ user.pronoun.him_her }} a happy birthday!\n\n\t{{ user.name }} looked at {{ user.pronoun.emself }} in the mirror.\n\n\t{{ user.pronoun.his_her|title }} stuff is on the table.\n\n\tThis guitar is {{ user.pronoun.hers_his }}.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tim_heap/django-pronouns", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-pronouns", "package_url": "https://pypi.org/project/django-pronouns/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pronouns/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tim_heap/django-pronouns"}, "release_url": "https://pypi.org/project/django-pronouns/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Generic pronoun handling for Django applications", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pronouns are tricky. Writing correspondence or copy with your users preferred pronoun in mind is even harder.\nWanting to break out of the gender binary damn near impossible - until now. <tt><span class=\"pre\">django-pronouns</span></tt> is here to help!</p>\n<p>When a user is signing up, they can select their preferred pronouns (usually disguised as a gender option).\nThe usual suspects (s/he) are there, as well as more neutral ones (they, it, xir, etc). Using them in your\ncopy is as simple as working out which form you need, and <tt><span class=\"pre\">django-pronouns</span></tt> will do the rest. Observe:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s2\">\"{{ user.pronoun.subject|title }} is awesome.\"</span>\n<span class=\"s2\">\"She is awesome.\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s2\">\"It is {{ user.name|pluralize }} birthday today. Go wish {{ user.pronoun.object }} a happy birthday!\"</span>\n<span class=\"s2\">\"It is Tims birthday today. Go wish him happy birthday!\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s2\">\"{{ user.name }} looked at {{ user.pronoun.reflexive }} in the mirror.\"</span>\n<span class=\"s2\">\"Alex looked at himself in the mirror.\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s2\">\"{{ user.pronoun.possessive_determiner|title }} stuff is on the table.\"</span>\n<span class=\"s2\">\"Her stuff is on the table.\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s2\">\"This guitar is {{ user.pronoun.possessive_pronoun }}.\"</span>\n<span class=\"s2\">\"This guitar is hers.\"</span>\n</pre>\n<p>If working out which form is too annoying, we can help there as well. Each of the five forms has a number of\naliases, consisting of the feminine and masculine forms joined with an underscore, as well as the (new) Spivak\nforms:</p>\n<ul>\n<li><strong>Subject</strong>: <tt>he_she</tt>, <tt>shen_he</tt>, <tt>ey</tt></li>\n<li><strong>Object</strong>: <tt>him_her</tt>, <tt>her_him</tt>, <tt>em</tt></li>\n<li><strong>Reflexive</strong>: <tt>himself_herself</tt>, <tt>herself_himself</tt>, <tt>emself</tt></li>\n<li><strong>Possessive determiner</strong>: <tt>his_her</tt>, <tt>her_his</tt>, <tt>eir</tt></li>\n<li><strong>Possessive pronoun</strong>: <tt>his_hers</tt>, <tt>hers_his</tt>, <tt>eirs</tt></li>\n</ul>\n<p>The female and male pronouns are combined, as by themselves they are ambiguous. <tt>his</tt> may refer to either the\npossessive determiner, or the possessive pronoun, while <tt>her</tt> may refer to a possessive determiner or an\nobjective form. Spivak was chosen as it is one of the only forms that is unambiguous across all five forms.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install via pip:</p>\n<pre>$ pip install django-pronouns\n</pre>\n<p>Add it to your <tt>INSTALLED_APPS</tt> in Django:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"s2\">\"django_pronouns\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>And finally, add the default pronoun set, if you want:</p>\n<pre>$ python manage.py loaddata pronouns\n</pre>\n<p>You can edit these pronouns, add more, or remove some later, via the administration area.</p>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>Simply add a <tt>ForeignKey</tt> link to the Pronoun model to add pronouns to any model. Pronouns work very well when coupled with a UserProfile:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_pronouns.models</span> <span class=\"kn\">import</span> <span class=\"n\">Pronoun</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserProfile</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n        <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n        <span class=\"n\">pronoun</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Pronoun</span><span class=\"p\">)</span>\n</pre>\n<p>Use them like you would any other ForeignKey in forms.</p>\n<p>In your templates, you can request any of the pronoun forms:</p>\n<pre><span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.subject</span><span class=\"o\">|</span><span class=\"nf\">title</span> <span class=\"cp\">}}</span> is awesome.\n\nIt is <span class=\"cp\">{{</span> <span class=\"nv\">user.name</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span> <span class=\"cp\">}}</span> birthday today. Go wish <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.object</span> <span class=\"cp\">}}</span> happy birthday!\n\n<span class=\"cp\">{{</span> <span class=\"nv\">user.name</span> <span class=\"cp\">}}</span> looked at <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.reflexive</span> <span class=\"cp\">}}</span> in the mirror.\n\n<span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.possessive_determiner</span><span class=\"o\">|</span><span class=\"nf\">title</span> <span class=\"cp\">}}</span> stuff is on the table.\n\nThis guitar is <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.possessive_pronoun</span> <span class=\"cp\">}}</span>.\n</pre>\n<p>A bunch of shortcut have also been provided, as working out which form to use is annoying. Each of the five forms has a\nnumber of aliases, consisting of the feminine and masculine forms joined with an underscore, as well as the Spivak\nforms:</p>\n<ul>\n<li><strong>Subject</strong>: <tt>he_she</tt>, <tt>she_he</tt>, <tt>ey</tt></li>\n<li><strong>Object</strong>: <tt>him_her</tt>, <tt>her_him</tt>, <tt>em</tt></li>\n<li><strong>Reflexive</strong>: <tt>himself_herself</tt>, <tt>herself_himself</tt>, <tt>emself</tt></li>\n<li><strong>Possessive determiner</strong>: <tt>his_her</tt>, <tt>her_his</tt>, <tt>eir</tt></li>\n<li><strong>Possessive pronoun</strong>: <tt>his_hers</tt>, <tt>hers_his</tt>, <tt>eirs</tt></li>\n</ul>\n<p>Using them is the same as using the names forms:</p>\n<pre><span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.she_he</span><span class=\"o\">|</span><span class=\"nf\">title</span> <span class=\"cp\">}}</span> is awesome.\n\nIt is <span class=\"cp\">{{</span> <span class=\"nv\">user.name</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span> <span class=\"cp\">}}</span> birthday today. Go wish <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.him_her</span> <span class=\"cp\">}}</span> a happy birthday!\n\n<span class=\"cp\">{{</span> <span class=\"nv\">user.name</span> <span class=\"cp\">}}</span> looked at <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.emself</span> <span class=\"cp\">}}</span> in the mirror.\n\n<span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.his_her</span><span class=\"o\">|</span><span class=\"nf\">title</span> <span class=\"cp\">}}</span> stuff is on the table.\n\nThis guitar is <span class=\"cp\">{{</span> <span class=\"nv\">user.pronoun.hers_his</span> <span class=\"cp\">}}</span>.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1240805, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d7421e15d92fe4bf2513e4f664baa222", "sha256": "0ac68d8e003252af1b9e3a07ebfb1d875c2728a46646168a72c96060b63743c9"}, "downloads": -1, "filename": "django-pronouns-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d7421e15d92fe4bf2513e4f664baa222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1488, "upload_time": "2012-08-03T07:08:45", "upload_time_iso_8601": "2012-08-03T07:08:45.588760Z", "url": "https://files.pythonhosted.org/packages/87/07/8fc5cccdf0fd57acb42b697c0298be3b03d73c573dee4a2075359a714464/django-pronouns-0.1.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4ad443d6f15715a39d43751e2fb1c0c4", "sha256": "afdb0dd7cda80ac7ba3fec53cf472f97242f5692620036cc04f4ae8e14ed47d4"}, "downloads": -1, "filename": "django-pronouns-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4ad443d6f15715a39d43751e2fb1c0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3676, "upload_time": "2014-09-28T21:26:36", "upload_time_iso_8601": "2014-09-28T21:26:36.153133Z", "url": "https://files.pythonhosted.org/packages/c1/b4/b425f6db18cd088e7b3a8caa8c2fe556067a20b8e982d3246dac603b33cb/django-pronouns-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ad443d6f15715a39d43751e2fb1c0c4", "sha256": "afdb0dd7cda80ac7ba3fec53cf472f97242f5692620036cc04f4ae8e14ed47d4"}, "downloads": -1, "filename": "django-pronouns-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4ad443d6f15715a39d43751e2fb1c0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3676, "upload_time": "2014-09-28T21:26:36", "upload_time_iso_8601": "2014-09-28T21:26:36.153133Z", "url": "https://files.pythonhosted.org/packages/c1/b4/b425f6db18cd088e7b3a8caa8c2fe556067a20b8e982d3246dac603b33cb/django-pronouns-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:40 2020"}