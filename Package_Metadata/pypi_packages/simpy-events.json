{"info": {"author": "Lo\u00efc Peron", "author_email": "peronloic.us@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "simpy-events\n============  \n\n|license| |python version| |build-status| |docs| |coverage| |pypi package|\n\n.. |license| image:: https://img.shields.io/github/license/loicpw/simpy-events.svg\n.. |build-status| image:: https://travis-ci.org/loicpw/simpy-events.svg?branch=master\n    :target: https://travis-ci.org/loicpw/simpy-events\n.. |docs| image:: https://readthedocs.org/projects/simpy-events/badge/?version=latest\n    :target: http://simpy-events.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. |coverage| image:: https://coveralls.io/repos/github/loicpw/simpy-events/badge.svg?branch=master\n    :target: https://coveralls.io/github/loicpw/simpy-events?branch=master\n.. |pypi package| image:: https://badge.fury.io/py/simpy-events.svg\n    :target: https://badge.fury.io/py/simpy-events\n.. |python version| image:: https://img.shields.io/pypi/pyversions/simpy-events.svg\n   :target: https://pypi.python.org/pypi/simpy-events\n\nevent system with `SimPy`_ to decouple simulation code and increase reusability\n\n\n\n( >>>>>>> **WORK IN PROGRESS** <<<<<<< )\n\n\n\nA basic example\n=======================\n\n.. note:: `SimPy`_ is a process-based discrete-event simulation framework based on standard Python.\n\n+ Our simplified scenario is composed of:\n\n    - satellites emitting signals\n    - receivers receiving and processing signals\n\n+ basic imports and creating the root namespace:\n\n .. code-block:: python\n\n    from simpy_events.manager import RootNameSpace\n    import simpy\n\n    root = RootNameSpace()\n\n+ implementing a satellite model:\n\n .. code-block:: python\n\n    sat = root.ns('satellite')\n\n    class Satellite:\n        chunk = 4\n\n        def __init__(self, name, data):\n            self.signal = sat.event('signal', sat=name)\n            self.data = tuple(map(str, data))\n\n        def process(self, env):\n            signal = self.signal\n            data = self.data\n            chunk = self.chunk\n            # slice data in chunks\n            for chunk in [data[chunk*i:chunk*i+chunk]\n                          for i in range(int(len(data) / chunk))]:\n                event = env.timeout(1, ','.join(chunk))\n                yield signal(event)\n\n+ implementing a receiver model:\n\n .. code-block:: python\n\n    receiver = root.ns('receiver')\n    signals = receiver.topic('signals') \n\n    @signals.after\n    def receive_signal(context, event):\n        env = event.env\n        metadata = context.event.metadata\n        header = str({key: val for key, val in metadata.items()\n                      if key not in ('name', 'ns')})\n        env.process(process_signal(env, header, event.value))\n\n    def process_signal(env, header, signal):\n        receive = receiver.event('process')\n        for data in signal.split(','):\n            yield receive(env.timeout(0, f'{header}: {data}'))\n\n+ creating code to analyse what's going on:\n\n .. code-block:: python\n\n    @root.enable('analyse')\n    def new_process(context, event):\n        metadata = context.event.metadata\n        context = {key: str(val) for key, val in metadata.items()}\n        print(f'new signal process: {context}')\n\n    @root.after('analyse')\n    def signal(context, event):\n        metadata = context.event.metadata\n        ns = metadata['ns']\n        print(f'signal: {ns.path}: {event.value}') \n\n+ setting up our simulation:\n\n .. code-block:: python\n\n    root.topic('receiver::signals').extend([\n        '::satellite::signal',\n    ])\n    root.topic('analyse').extend([\n        '::satellite::signal',\n        '::receiver::process',\n    ])\n\n    def run(env):\n        # create some actors\n        s1 = Satellite('sat1', range(8))\n        s2 = Satellite('sat2', range(100, 108))\n        env.process(s1.process(env))\n        env.process(s2.process(env))\n\n        # execute\n        root.enabled = True\n        env.run()\n\n+ running the simulation ::\n\n    new signal process: {'ns': '::satellite', 'name': 'signal', 'sat': 'sat1'}\n    new signal process: {'ns': '::satellite', 'name': 'signal', 'sat': 'sat2'}\n    signal: ::satellite: 0,1,2,3\n    new signal process: {'ns': '::receiver', 'name': 'process'}\n    signal: ::satellite: 100,101,102,103\n    new signal process: {'ns': '::receiver', 'name': 'process'}\n    signal: ::receiver: {'sat': 'sat1'}: 0\n    signal: ::receiver: {'sat': 'sat2'}: 100\n    signal: ::receiver: {'sat': 'sat1'}: 1\n    signal: ::receiver: {'sat': 'sat2'}: 101\n    signal: ::receiver: {'sat': 'sat1'}: 2\n    signal: ::receiver: {'sat': 'sat2'}: 102\n    signal: ::receiver: {'sat': 'sat1'}: 3\n    signal: ::receiver: {'sat': 'sat2'}: 103\n    signal: ::satellite: 4,5,6,7\n    new signal process: {'ns': '::receiver', 'name': 'process'}\n    signal: ::satellite: 104,105,106,107\n    new signal process: {'ns': '::receiver', 'name': 'process'}\n    signal: ::receiver: {'sat': 'sat1'}: 4\n    signal: ::receiver: {'sat': 'sat2'}: 104\n    signal: ::receiver: {'sat': 'sat1'}: 5\n    signal: ::receiver: {'sat': 'sat2'}: 105\n    signal: ::receiver: {'sat': 'sat1'}: 6\n    signal: ::receiver: {'sat': 'sat2'}: 106\n    signal: ::receiver: {'sat': 'sat1'}: 7\n    signal: ::receiver: {'sat': 'sat2'}: 107\n\ninstall and test\n=======================\n\ninstall from pypi\n********************\n\nusing pip:\n\n.. code-block:: bash\n\n    $ pip install simpy-events\n\ndev install\n****************\n\nThere is a makefile in the project root directory:\n\n.. code-block:: bash\n\n    $ make dev\n\nUsing pip, the above is equivalent to:\n\n.. code-block:: bash\n\n    $ pip install -r requirements-dev.txt                                             \n    $ pip install -e .\n\nrun the tests\n******************\n\nUse the makefile in the project root directory:\n\n.. code-block:: bash\n\n    $ make test\n\nThis runs the tests generating a coverage html report\n\nbuild the doc\n******************\n\nThe documentation is made with sphinx, you can use the makefile in the\nproject root directory to build html doc:\n\n.. code-block:: bash\n\n    $ make doc\n\nDocumentation\n=======================\n\nDocumentation on `Read The Docs`_.\n\nMeta\n=======================\n\nloicpw - peronloic.us@gmail.com\n\nDistributed under the MIT license. See ``LICENSE.txt`` for more information.\n\nhttps://github.com/loicpw\n\n\n.. _Read The Docs: http://simpy-events.readthedocs.io/en/latest/\n.. _SimPy: https://simpy.readthedocs.org\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/loicpw/simpy-events.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loicpw/simpy-events", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "simpy-events", "package_url": "https://pypi.org/project/simpy-events/", "platform": "", "project_url": "https://pypi.org/project/simpy-events/", "project_urls": {"Download": "https://github.com/loicpw/simpy-events.git", "Homepage": "https://github.com/loicpw/simpy-events"}, "release_url": "https://pypi.org/project/simpy-events/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "event system with simpy to decouple simulation code and increase reusability", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"simpy-events\">\n<h2>simpy-events</h2>\n<p><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/168882672fe937114d718deef7f29db3f707a6d4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6c6f696370772f73696d70792d6576656e74732e737667\"> <a href=\"https://pypi.python.org/pypi/simpy-events\" rel=\"nofollow\"><img alt=\"python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bfd307fa7da01cdc983fc010e287ab8b4db713a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73696d70792d6576656e74732e737667\"></a> <a href=\"https://travis-ci.org/loicpw/simpy-events\" rel=\"nofollow\"><img alt=\"build-status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52ae820464331bcb274fd1a1eb733286be078007/68747470733a2f2f7472617669732d63692e6f72672f6c6f696370772f73696d70792d6576656e74732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://simpy-events.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29e65982038188a3dec391233d725c5af83b8462/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73696d70792d6576656e74732f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://coveralls.io/github/loicpw/simpy-events?branch=master\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b95fd67728a77153a1b8a7c80e045e4b0f8b766/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c6f696370772f73696d70792d6576656e74732f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/simpy-events\" rel=\"nofollow\"><img alt=\"pypi package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd5fa5880a756e9367482ecd0148c07dc24f9718/68747470733a2f2f62616467652e667572792e696f2f70792f73696d70792d6576656e74732e737667\"></a></p>\n<p>event system with <a href=\"https://simpy.readthedocs.org\" rel=\"nofollow\">SimPy</a> to decouple simulation code and increase reusability</p>\n<p>( &gt;&gt;&gt;&gt;&gt;&gt;&gt; <strong>WORK IN PROGRESS</strong> &lt;&lt;&lt;&lt;&lt;&lt;&lt; )</p>\n</div>\n<div id=\"a-basic-example\">\n<h2>A basic example</h2>\n<div>\n<p>Note</p>\n<p><a href=\"https://simpy.readthedocs.org\" rel=\"nofollow\">SimPy</a> is a process-based discrete-event simulation framework based on standard Python.</p>\n</div>\n<ul>\n<li><p>Our simplified scenario is composed of:</p>\n<blockquote>\n<ul>\n<li>satellites emitting signals</li>\n<li>receivers receiving and processing signals</li>\n</ul>\n</blockquote>\n</li>\n<li><p>basic imports and creating the root namespace:</p>\n</li>\n</ul>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simpy_events.manager</span> <span class=\"kn\">import</span> <span class=\"n\">RootNameSpace</span>\n<span class=\"kn\">import</span> <span class=\"nn\">simpy</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">RootNameSpace</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<ul>\n<li>implementing a satellite model:</li>\n</ul>\n<blockquote>\n<pre><span class=\"n\">sat</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">ns</span><span class=\"p\">(</span><span class=\"s1\">'satellite'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Satellite</span><span class=\"p\">:</span>\n    <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">sat</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"p\">(</span><span class=\"s1\">'signal'</span><span class=\"p\">,</span> <span class=\"n\">sat</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">):</span>\n        <span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span>\n        <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">chunk</span>\n        <span class=\"c1\"># slice data in chunks</span>\n        <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">chunk</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">chunk</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">chunk</span><span class=\"p\">]</span>\n                      <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">chunk</span><span class=\"p\">))]:</span>\n            <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">))</span>\n            <span class=\"k\">yield</span> <span class=\"n\">signal</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<ul>\n<li>implementing a receiver model:</li>\n</ul>\n<blockquote>\n<pre><span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">ns</span><span class=\"p\">(</span><span class=\"s1\">'receiver'</span><span class=\"p\">)</span>\n<span class=\"n\">signals</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"o\">.</span><span class=\"n\">topic</span><span class=\"p\">(</span><span class=\"s1\">'signals'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@signals</span><span class=\"o\">.</span><span class=\"n\">after</span>\n<span class=\"k\">def</span> <span class=\"nf\">receive_signal</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">env</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n    <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">({</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">val</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n                  <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'ns'</span><span class=\"p\">)})</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">process_signal</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_signal</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">):</span>\n    <span class=\"n\">receive</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"p\">(</span><span class=\"s1\">'process'</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"n\">receive</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">header</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n</pre>\n</blockquote>\n<ul>\n<li>creating code to analyse what\u2019s going on:</li>\n</ul>\n<blockquote>\n<pre><span class=\"nd\">@root</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"s1\">'analyse'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">new_process</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'new signal process: </span><span class=\"si\">{</span><span class=\"n\">context</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@root</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">(</span><span class=\"s1\">'analyse'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">signal</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n    <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">'ns'</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'signal: </span><span class=\"si\">{</span><span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<ul>\n<li>setting up our simulation:</li>\n</ul>\n<blockquote>\n<pre><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">topic</span><span class=\"p\">(</span><span class=\"s1\">'receiver::signals'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span>\n    <span class=\"s1\">'::satellite::signal'</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">topic</span><span class=\"p\">(</span><span class=\"s1\">'analyse'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span>\n    <span class=\"s1\">'::satellite::signal'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'::receiver::process'</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create some actors</span>\n    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">Satellite</span><span class=\"p\">(</span><span class=\"s1\">'sat1'</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n    <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">Satellite</span><span class=\"p\">(</span><span class=\"s1\">'sat2'</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">))</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">))</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># execute</span>\n    <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<ul>\n<li><p>running the simulation</p>\n<pre>new signal process: {'ns': '::satellite', 'name': 'signal', 'sat': 'sat1'}\nnew signal process: {'ns': '::satellite', 'name': 'signal', 'sat': 'sat2'}\nsignal: ::satellite: 0,1,2,3\nnew signal process: {'ns': '::receiver', 'name': 'process'}\nsignal: ::satellite: 100,101,102,103\nnew signal process: {'ns': '::receiver', 'name': 'process'}\nsignal: ::receiver: {'sat': 'sat1'}: 0\nsignal: ::receiver: {'sat': 'sat2'}: 100\nsignal: ::receiver: {'sat': 'sat1'}: 1\nsignal: ::receiver: {'sat': 'sat2'}: 101\nsignal: ::receiver: {'sat': 'sat1'}: 2\nsignal: ::receiver: {'sat': 'sat2'}: 102\nsignal: ::receiver: {'sat': 'sat1'}: 3\nsignal: ::receiver: {'sat': 'sat2'}: 103\nsignal: ::satellite: 4,5,6,7\nnew signal process: {'ns': '::receiver', 'name': 'process'}\nsignal: ::satellite: 104,105,106,107\nnew signal process: {'ns': '::receiver', 'name': 'process'}\nsignal: ::receiver: {'sat': 'sat1'}: 4\nsignal: ::receiver: {'sat': 'sat2'}: 104\nsignal: ::receiver: {'sat': 'sat1'}: 5\nsignal: ::receiver: {'sat': 'sat2'}: 105\nsignal: ::receiver: {'sat': 'sat1'}: 6\nsignal: ::receiver: {'sat': 'sat2'}: 106\nsignal: ::receiver: {'sat': 'sat1'}: 7\nsignal: ::receiver: {'sat': 'sat2'}: 107\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"install-and-test\">\n<h2>install and test</h2>\n<div id=\"install-from-pypi\">\n<h3>install from pypi</h3>\n<p>using pip:</p>\n<pre>$ pip install simpy-events\n</pre>\n</div>\n<div id=\"dev-install\">\n<h3>dev install</h3>\n<p>There is a makefile in the project root directory:</p>\n<pre>$ make dev\n</pre>\n<p>Using pip, the above is equivalent to:</p>\n<pre>$ pip install -r requirements-dev.txt\n$ pip install -e .\n</pre>\n</div>\n<div id=\"run-the-tests\">\n<h3>run the tests</h3>\n<p>Use the makefile in the project root directory:</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>This runs the tests generating a coverage html report</p>\n</div>\n<div id=\"build-the-doc\">\n<h3>build the doc</h3>\n<p>The documentation is made with sphinx, you can use the makefile in the\nproject root directory to build html doc:</p>\n<pre>$ make doc\n</pre>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation on <a href=\"http://simpy-events.readthedocs.io/en/latest/\" rel=\"nofollow\">Read The Docs</a>.</p>\n</div>\n<div id=\"meta\">\n<h2>Meta</h2>\n<p>loicpw - <a href=\"mailto:peronloic.us%40gmail.com\">peronloic<span>.</span>us<span>@</span>gmail<span>.</span>com</a></p>\n<p>Distributed under the MIT license. See <tt>LICENSE.txt</tt> for more information.</p>\n<p><a href=\"https://github.com/loicpw\" rel=\"nofollow\">https://github.com/loicpw</a></p>\n</div>\n\n          </div>"}, "last_serial": 4956013, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "148b65940566b48fd993c7ab02782fad", "sha256": "9d4da355d7e70df73c3cdd4d8faaeef94309bd3f3421ac35ad1185a8204031fc"}, "downloads": -1, "filename": "simpy_events-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "148b65940566b48fd993c7ab02782fad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21256, "upload_time": "2019-03-18T21:40:13", "upload_time_iso_8601": "2019-03-18T21:40:13.832133Z", "url": "https://files.pythonhosted.org/packages/51/df/17936d35c0b340e2e0b2061bba5c61fc4625616d9809a89b9654f6f8bf3d/simpy_events-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b7d144182f9094873ffd0da1df2ed3b", "sha256": "3b831f0f5ff15e6a4348207822fd88fa4384e2f60243015015c6be3c8ab168b2"}, "downloads": -1, "filename": "simpy_events-0.0.0.tar.gz", "has_sig": false, "md5_digest": "5b7d144182f9094873ffd0da1df2ed3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20573, "upload_time": "2019-03-18T21:40:15", "upload_time_iso_8601": "2019-03-18T21:40:15.255192Z", "url": "https://files.pythonhosted.org/packages/54/eb/2774b1ec4b669b2a90ecc7f4a8c0cbacdfa14b27fd9fe23835f4b225871f/simpy_events-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "d61de20b1535393d9f448012ceadc0c1", "sha256": "9260a788b0f902509475349471b560dc37b47a77bf5f7a1ab21aef20b194eaa2"}, "downloads": -1, "filename": "simpy_events-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d61de20b1535393d9f448012ceadc0c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21256, "upload_time": "2019-03-18T21:39:53", "upload_time_iso_8601": "2019-03-18T21:39:53.471991Z", "url": "https://files.pythonhosted.org/packages/a4/d3/e9cf700baff92ac8e562dfec9ff38e2f64bb3d1973dce4fc376400f63a15/simpy_events-0.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d61de20b1535393d9f448012ceadc0c1", "sha256": "9260a788b0f902509475349471b560dc37b47a77bf5f7a1ab21aef20b194eaa2"}, "downloads": -1, "filename": "simpy_events-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d61de20b1535393d9f448012ceadc0c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21256, "upload_time": "2019-03-18T21:39:53", "upload_time_iso_8601": "2019-03-18T21:39:53.471991Z", "url": "https://files.pythonhosted.org/packages/a4/d3/e9cf700baff92ac8e562dfec9ff38e2f64bb3d1973dce4fc376400f63a15/simpy_events-0.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:09:42 2020"}