{"info": {"author": "Matthew Betts, Aidan Houlihan", "author_email": "aidan@publons.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "=====================\nDjango Model Builders\n=====================\n\n.. image:: https://travis-ci.com/publons/django-test-model-builder.svg?token=WSHb2ssbuqzAyoqCvdCs&branch=master\n    :target: https://travis-ci.com/publons/django-test-model-builder\n\nA small python / django model designed to decouple creation of models for\ntesting from the creation of models in production to make updating tests\nless painful.\n\nQuickstart\n----------\n\n**Create generic models without defining fields**\n\n.. code-block:: python\n\n    class User(AbstractBaseUser):\n        username = models.CharField()\n\n    class UserBuilder(ModelBuilder):\n        model = User\n\n        def get_default_fields(self):\n            return {'username': 'test_username'}\n\n    user = UserBuilder().build()\n    print(user.username)\n    >>> test_username\n\n\n**Override defaults when required**\n\n.. code-block:: python\n\n    user = UserBuilder().with_username('test').build()\n    >>> user.username\n    >>> test\n\n\n**Create multiple models with the same values**\n\n.. code-block:: python\n\n    builder = UserBuilder().with_username('test')\n    user_1 = builder.build()\n    user_2 = builder.build()\n\n    user_1.username == user_2.username\n    >>> True\n\n    user_1 == user_2\n    >>> False\n\n**Update models without updating tests**\n\n.. code-block:: python\n\n    class User(AbstractBaseUser):\n        username = models.CharField()\n        dob = models.DateField()\n\n    class UserBuilder(ModelBuilder):\n        model = User\n        def get_default_fields(self):\n            return {\n                'username': random_string,\n                'dob': date(1990, 1, 1),\n            }\n\n    user = UserBuilder().build()\n\n    user.dob\n    >>> date(1990, 1, 1)\n\n    user = (\n        UserBuilder()\n        .with_dob(date(2000, 1, 1))\n        .build()\n    )\n\n    user.dob\n    >>> date(2000, 1, 1)\n\n**Setting defaults**\n\nThe :code:`get_default_fields` returns a dictionary used to populate any unset\nmodel fields when the model is created. These can be values or callables if you\nneed to delay the creation of models until it is needed or want to generate\nrandom data for each instance to avoid breaking database constraints.\n\n.. code-block:: python\n\n    class UserBuilder(ModelBuilder):\n        model = User\n\n        def get_default_fields():\n            return {\n                # Callable, each user will have a random username.\n                'username': random_string,\n\n                # Value, each user will have the same date of birth.\n                'dob': date(1990, 1, 1),\n\n                # Called with uninitiated build() call so duplicate model isn't\n                # generated until comparison with any custom `with_` setter\n                # functions, this field will be thrown away\n                # if custom setter is present. You can also use a\n                # lambda to achieve the same thing.\n                'user': UserBuilder().build\n        }\n\n\n**Providing custom values using the \"with_\" prefix**\n\n:code:`with_` functions are dynamically generated, these are used to override\ndefaults.\n\n.. code-block:: python\n\n    class UserBuilder(ModelBuilder):\n        model = User\n        def get_default_fields():\n            return {\n                'username': random_string,\n                'dob': date(1990, 1, 1),\n            }\n\n    user = UserBuilder().with_dob(date(2019, 10, 10)).build()\n    user.dob\n    >>> date(2019, 10, 10)\n\nAll these functions do is set the passed in value as the function name in an\ninternal dictionary. This pattern can be used to create more readable tests.\n\nAny function prefixed with :code:`with_` is automatically wrapped with a function\nthat returns a copy of the builder for side-effect-free chaining.\n\nYou can also explicitly define these :code:`with_<>` on the ModelBuilder subclass\nto add your own implementation.\n\n.. code-block:: python\n\n    from datetime import timedelta\n\n    class UserBuilder(ModelBuilder):\n        model = User\n        def get_default_fields():\n            return {\n                'username': random_string,\n                'dob': date(1990, 1, 1)\n            }\n\n        def with_under_18():\n            self.data['dob'] = date.today() - timedelta(years=17)\n\n    UserBuilder().under_18().build()\n\nFinally the :code:`with_` prefix is adjustable in case you have a blocking field that\nyou want use. For example you can change this to use the prefix :code:`set_` by going\n\n.. code-block:: python\n\n        class CustomAuthorBuilder(AuthorBuilder):\n            dynamic_field_setter_prefix = 'set_'\n\n        author = (\n            CustomAuthorBuilder()\n            .set_publishing_name('Billy Fakeington')\n            .build()\n        )\n\n        author.publishing_name\n        >>> 'Billy Fakeington'\n\n**Calling .build()**\n\nBuilding the model is broken into four steps.\n\n- Prepare the data dictionary.\n- Perform pre processing.\n- Create the instance.\n- Perform post possessing.\n\nThere is also a :code:`save_to_db` kwarg that can be set to optionally persist the\nbuilt model to memory only for use in more complicated tests.\n\n**Perform pre processing**\n\nBy default this method changes models to their their :code:`_id` suffix. This can be\nextended to perform additional preprocessing of fields.\n\n.. code-block:: python\n\n    from datetime import timedelta\n\n    class UserBuilder(ModelBuilder):\n        model = User\n        def get_default_fields():\n            return {\n                'username': random_string,\n                'dob': date(1990, 1, 1),\n            }\n\n        def pre(self):\n            self['dob'] += timedelta(days=1)\n\n    UserBuilder().build().dob\n    # date(1990, 1, 2)\n\nIf you wanting to add non field values for accession by the pre/post hooks\nyou can override the :code:`get_builder_context` call to load any extra fields\nwhich will be made available to the self.data dict after the initial model\nfields have been set, for instance:\n\n.. code-block:: python\n\n    class AuthorBuilder(ModelBuilder):\n\n        def get_default_fields():\n            return {\n                'username': random_string,\n                'dob': date(1990, 1, 1)\n            }\n\n        def get_builder_context(self):\n            return {\n                'email_address': fake_email\n            }\n\n        def post(self):\n            print(self.dict)\n\n    AuthorBuilder().build()\n    >>> {\n    >>>     'username': random_string,\n    >>>     'dob': date(1990, 1, 1),\n    >>>     'email_address': fake_email\n    >>> }\n\n**Create the instance**\n\nBy default instances are created by calling :code:`model.objects.create`\nwith the models fields from the data dictionary. This behavior can be changed\nby overriding the builders `.create` method, this method must set the builders\ninstance attribute`self.instance = ...`.\n\n.. code-block:: python\n\n    class UserBuilder(ModelBuilder):\n        model = User\n\n        def get_default_fields():\n            return {\n                'username': random_string,\n            }\n\n        def create(self):\n            model = self.get_model()\n            try:\n                instance = self.model.objects.get(\n                    username=self.data['username']\n                )\n            except model.objects.DoesNotExist:\n                super(UserBuilder, self).create()\n\n    builder = UserBuilder().with_username('test')\n    user_1 = builder.build()\n    user_2 = builder.build()\n\n    user_1 == user_2\n    >>> True\n\n**Preform post processing**\n\nPost processing is carried out after the instance has been created. By default\nit does nothing, but provides a useful place to do things like add related\nmodels.\n\n.. code-block:: python\n\n    class UserBuilder(ModelBuilder):\n        model = User\n\n        def get_default_fields():\n            return {\n                'username': random_string,\n            }\n\n        def with_emails(*args):\n            self.data['emails'] = args\n\n        def post(self):\n            for email in self.data.get('emails', []):\n                (\n                    EmailBuilder()\n                    .with_address(email)\n                    .with_user(self.instance)\n                    .build()\n                )\n\n    user = (\n        UserBuilder()\n        .with_emails(random_email(), random_email())\n        .build()\n    )\n\n    user.email_set.count()\n    >>> 2\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/publons/django-test-model-builder", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "django-test-model-builder", "package_url": "https://pypi.org/project/django-test-model-builder/", "platform": "", "project_url": "https://pypi.org/project/django-test-model-builder/", "project_urls": {"Homepage": "https://github.com/publons/django-test-model-builder"}, "release_url": "https://pypi.org/project/django-test-model-builder/0.0.2/", "requires_dist": ["Django"], "requires_python": "", "summary": "A small python / django model designed to decouple creation of models for testing from the creation of models in production to make updating tests less painful.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/publons/django-test-model-builder\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/publons/django-test-model-builder.svg?token=WSHb2ssbuqzAyoqCvdCs&amp;branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7ed66b7933b904d48ff32eed697a77acd30a7d1/68747470733a2f2f7472617669732d63692e636f6d2f7075626c6f6e732f646a616e676f2d746573742d6d6f64656c2d6275696c6465722e7376673f746f6b656e3d575348623273736275717a41796f714376644373266272616e63683d6d6173746572\"></a>\n<p>A small python / django model designed to decouple creation of models for\ntesting from the creation of models in production to make updating tests\nless painful.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p><strong>Create generic models without defining fields</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'test_username'</span><span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test_username</span>\n</pre>\n<p><strong>Override defaults when required</strong></p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_username</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test</span>\n</pre>\n<p><strong>Create multiple models with the same values</strong></p>\n<pre><span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_username</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">user_1</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"n\">user_2</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n\n<span class=\"n\">user_1</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"n\">user_2</span><span class=\"o\">.</span><span class=\"n\">username</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">user_1</span> <span class=\"o\">==</span> <span class=\"n\">user_2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">False</span>\n</pre>\n<p><strong>Update models without updating tests</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n    <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dob</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">UserBuilder</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">with_dob</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dob</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Setting defaults</strong></p>\n<p>The <code>get_default_fields</code> returns a dictionary used to populate any unset\nmodel fields when the model is created. These can be values or callables if you\nneed to delay the creation of models until it is needed or want to generate\nrandom data for each instance to avoid breaking database constraints.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># Callable, each user will have a random username.</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n\n            <span class=\"c1\"># Value, each user will have the same date of birth.</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n\n            <span class=\"c1\"># Called with uninitiated build() call so duplicate model isn't</span>\n            <span class=\"c1\"># generated until comparison with any custom `with_` setter</span>\n            <span class=\"c1\"># functions, this field will be thrown away</span>\n            <span class=\"c1\"># if custom setter is present. You can also use a</span>\n            <span class=\"c1\"># lambda to achieve the same thing.</span>\n            <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span>\n    <span class=\"p\">}</span>\n</pre>\n<p><strong>Providing custom values using the \u201cwith_\u201d prefix</strong></p>\n<p><code>with_</code> functions are dynamically generated, these are used to override\ndefaults.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_dob</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dob</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>All these functions do is set the passed in value as the function name in an\ninternal dictionary. This pattern can be used to create more readable tests.</p>\n<p>Any function prefixed with <code>with_</code> is automatically wrapped with a function\nthat returns a copy of the builder for side-effect-free chaining.</p>\n<p>You can also explicitly define these <code>with_&lt;&gt;</code> on the ModelBuilder subclass\nto add your own implementation.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">with_under_18</span><span class=\"p\">():</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'dob'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">years</span><span class=\"o\">=</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n\n<span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">under_18</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n</pre>\n<p>Finally the <code>with_</code> prefix is adjustable in case you have a blocking field that\nyou want use. For example you can change this to use the prefix <code>set_</code> by going</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomAuthorBuilder</span><span class=\"p\">(</span><span class=\"n\">AuthorBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">dynamic_field_setter_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'set_'</span>\n\n<span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">CustomAuthorBuilder</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">set_publishing_name</span><span class=\"p\">(</span><span class=\"s1\">'Billy Fakeington'</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">publishing_name</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'Billy Fakeington'</span>\n</pre>\n<p><strong>Calling .build()</strong></p>\n<p>Building the model is broken into four steps.</p>\n<ul>\n<li>Prepare the data dictionary.</li>\n<li>Perform pre processing.</li>\n<li>Create the instance.</li>\n<li>Perform post possessing.</li>\n</ul>\n<p>There is also a <code>save_to_db</code> kwarg that can be set to optionally persist the\nbuilt model to memory only for use in more complicated tests.</p>\n<p><strong>Perform pre processing</strong></p>\n<p>By default this method changes models to their their <code>_id</code> suffix. This can be\nextended to perform additional preprocessing of fields.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pre</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s1\">'dob'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dob</span>\n<span class=\"c1\"># date(1990, 1, 2)</span>\n</pre>\n<p>If you wanting to add non field values for accession by the pre/post hooks\nyou can override the <code>get_builder_context</code> call to load any extra fields\nwhich will be made available to the self.data dict after the initial model\nfields have been set, for instance:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AuthorBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n            <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_builder_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'email_address'</span><span class=\"p\">:</span> <span class=\"n\">fake_email</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">)</span>\n\n<span class=\"n\">AuthorBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'dob'</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'email_address'</span><span class=\"p\">:</span> <span class=\"n\">fake_email</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n</pre>\n<p><strong>Create the instance</strong></p>\n<p>By default instances are created by calling <code>model.objects.create</code>\nwith the models fields from the data dictionary. This behavior can be changed\nby overriding the builders <cite>.create</cite> method, this method must set the builders\ninstance attribute`self.instance = \u2026`.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">UserBuilder</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">UserBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_username</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">user_1</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"n\">user_2</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n\n<span class=\"n\">user_1</span> <span class=\"o\">==</span> <span class=\"n\">user_2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n</pre>\n<p><strong>Preform post processing</strong></p>\n<p>Post processing is carried out after the instance has been created. By default\nit does nothing, but provides a useful place to do things like add related\nmodels.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserBuilder</span><span class=\"p\">(</span><span class=\"n\">ModelBuilder</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_default_fields</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">random_string</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">with_emails</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'emails'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">email</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'emails'</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n            <span class=\"p\">(</span>\n                <span class=\"n\">EmailBuilder</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"n\">with_address</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">with_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">UserBuilder</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">with_emails</span><span class=\"p\">(</span><span class=\"n\">random_email</span><span class=\"p\">(),</span> <span class=\"n\">random_email</span><span class=\"p\">())</span>\n    <span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email_set</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6501695, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "223f39f2694d9ee1afb1a671ce90545e", "sha256": "89a142b88de5ac2ba5964e340624d63c8bbdd401f3df04ee868486dc9a7f7165"}, "downloads": -1, "filename": "django_test_model_builder-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "223f39f2694d9ee1afb1a671ce90545e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6909, "upload_time": "2020-01-18T05:09:10", "upload_time_iso_8601": "2020-01-18T05:09:10.748832Z", "url": "https://files.pythonhosted.org/packages/72/aa/7aea980798962f8c0f3ef57a5616054bc74cbfa57265e23ad27fd4d41413/django_test_model_builder-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87d99502570de13e9cbbaf40bac54265", "sha256": "0c54f1a22d07161f2040cf162e5f42a05233b6a6c8b3095df933d3c929decd3e"}, "downloads": -1, "filename": "django-test-model-builder-0.0.1.tar.gz", "has_sig": false, "md5_digest": "87d99502570de13e9cbbaf40bac54265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5886, "upload_time": "2020-01-18T05:09:14", "upload_time_iso_8601": "2020-01-18T05:09:14.085646Z", "url": "https://files.pythonhosted.org/packages/94/51/2a9ba115591f5c0816fa116cdbd4c091db0e4378a6a474686b12e5659684/django-test-model-builder-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "25163fee888b2044176fad5c34924089", "sha256": "b515eb8d3c3a328ca038b155f1b8e5616ca99dd48c7cf487c271eaf486a51b46"}, "downloads": -1, "filename": "django_test_model_builder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25163fee888b2044176fad5c34924089", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6784, "upload_time": "2020-01-22T17:57:19", "upload_time_iso_8601": "2020-01-22T17:57:19.712478Z", "url": "https://files.pythonhosted.org/packages/f4/59/e887dc56a75f17241456746931ef7c32d519f8f4a49b852246da0bfaa306/django_test_model_builder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "216b2efeea95dd35878b18e640e4546e", "sha256": "1ed3b00a09bb7a92d0d357d8a118eba9924ac900d7e21ac0fde82cd6237521fb"}, "downloads": -1, "filename": "django-test-model-builder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "216b2efeea95dd35878b18e640e4546e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5767, "upload_time": "2020-01-22T17:57:22", "upload_time_iso_8601": "2020-01-22T17:57:22.297168Z", "url": "https://files.pythonhosted.org/packages/2b/cb/b4240e41628314fdbfa938a9f9102a9639f776329890452fb7ba56341e20/django-test-model-builder-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25163fee888b2044176fad5c34924089", "sha256": "b515eb8d3c3a328ca038b155f1b8e5616ca99dd48c7cf487c271eaf486a51b46"}, "downloads": -1, "filename": "django_test_model_builder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25163fee888b2044176fad5c34924089", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6784, "upload_time": "2020-01-22T17:57:19", "upload_time_iso_8601": "2020-01-22T17:57:19.712478Z", "url": "https://files.pythonhosted.org/packages/f4/59/e887dc56a75f17241456746931ef7c32d519f8f4a49b852246da0bfaa306/django_test_model_builder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "216b2efeea95dd35878b18e640e4546e", "sha256": "1ed3b00a09bb7a92d0d357d8a118eba9924ac900d7e21ac0fde82cd6237521fb"}, "downloads": -1, "filename": "django-test-model-builder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "216b2efeea95dd35878b18e640e4546e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5767, "upload_time": "2020-01-22T17:57:22", "upload_time_iso_8601": "2020-01-22T17:57:22.297168Z", "url": "https://files.pythonhosted.org/packages/2b/cb/b4240e41628314fdbfa938a9f9102a9639f776329890452fb7ba56341e20/django-test-model-builder-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:33 2020"}