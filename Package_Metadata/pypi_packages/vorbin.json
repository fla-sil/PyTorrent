{"info": {"author": "Michele Cappellari", "author_email": "michele.cappellari@physics.ox.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "**VorBin: Adaptive Voronoi Binning of Two Dimensional Data**\n\n.. image:: http://www-astro.physics.ox.ac.uk/~mxc/software/vorbin_logo.png\n.. image:: https://img.shields.io/pypi/v/vorbin.svg\n        :target: https://pypi.org/project/vorbin/\n.. image:: https://img.shields.io/badge/arXiv-astroph:0302262-orange.svg\n    :target: https://arxiv.org/abs/astro-ph/0302262\n.. image:: https://img.shields.io/badge/DOI-10.1046/...-green.svg\n        :target: https://doi.org/10.1046/j.1365-8711.2003.06541.x\n\nThis VorBin package is a Python implementation of the two-dimensional adaptive\nspatial binning method of `Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_. \nIt uses Voronoi tessellations to bin data to a given minimum signal-to-noise ratio.\n\n.. contents:: :depth: 1\n\nAttribution\n-----------\n\nIf you use this software for your research, please cite\n`Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_\nThe BibTeX entry for the paper is::\n\n    @ARTICLE{Cappellari2003,\n        author = {{Cappellari}, M. and {Copin}, Y.},\n        title = \"{Adaptive spatial binning of integral-field spectroscopic\n            data using Voronoi tessellations}\",\n        journal = {MNRAS},\n        eprint = {astro-ph/0302262},\n        year = 2003,\n        volume = 342,\n        pages = {345-354},\n        doi = {10.1046/j.1365-8711.2003.06541.x}\n    }\n\nInstallation\n------------\n\ninstall with::\n\n    pip install vorbin\n\nWithout writing access to the global ``site-packages`` directory, use::\n\n    pip install --user vorbin\n\nUsage Example\n-------------\n\nTo learn how to use the package ``VorBin`` run ``voronoi_2d_binning_example.py`` in the\n``vorbin/examples`` directory, within the main package installation folder inside\n``site-packages``, and read the detailed documentation in the docstring of the\nfile ``voronoi_2d_binning.py``, on `PyPi <https://pypi.org/project/vorbin/>`_ or as \nPDF from `<https://purl.org/cappellari/software>`_.\n\nPerform the following simple steps to bin you own 2D data with minimal Python interaction:\n\n1. Write your data vectors [X, Y, Signal, Noise] in the text file\n   ``voronoi_2d_binning_example.txt``, following the example provided;\n\n2. Change the line ``targetSN = 50.0`` in the procedure ``voronoi_2d_binning_example.py``,\n   to specify the desired target S/N of your final bins;\n\n3. Run the program ``voronoi_2d_binning_example`` and wait for the final plot to appear.\n   The output is saved in the text file ``voronoi_2d_binning_output.txt``. The\n   last column BIN_NUM in the file is *all* that is needed to actually bin the data;\n\n4. Read the documentation at the beginning of the file ``voronoi_2d_binning.py`` to\n   fully understand the meaning of the various optional output parameters.\n\nVorBin Purpose\n--------------\n\nPerform adaptive spatial binning of two-dimensional data\nto reach a chosen constant signal-to-noise ratio per bin.\nThis program implements the algorithm described in section 5.1 of\n`Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_\n\nCalling Sequence\n----------------\n\n.. code-block:: python\n\n    binNum, xBin, yBin, xBar, yBar, sn, nPixels, scale = \\\n        voronoi_2d_binning(x, y, signal, noise, targetSN,\n                           cvt=True, pixelsize=None, plot=True,\n                           quiet=True, sn_func=None, wvt=True)\n\n\nInput Parameters\n----------------\n\nx:\n    Vector containing the X coordinate of the pixels to bin.\n    Arbitrary units can be used (e.g. arcsec or pixels).\n    In what follows the term \"pixel\" refers to a given\n    spatial element of the dataset (sometimes called \"spaxel\" in\n    the IFS community): it can be an actual pixel of a CCD\n    image, or a spectrum position along the slit of a long-slit\n    spectrograph or in the field of view of an IFS\n    (e.g. a lenslet or a fiber).\n    It is assumed here that pixels are arranged in a regular\n    grid, so that the pixel size is a well-defined quantity.\n    The pixel grid, however, can contain holes (some pixels can be\n    excluded from the binning) and can have an irregular boundary.\n    See the above reference for an example and details.\ny:\n    Vector (same size as X) containing the Y coordinate\n    of the pixels to bin.\nsignal:\n    Vector (same size as X) containing the signal\n    associated with each pixel, having coordinates (X,Y).\n    If the \"pixels\" are actually the apertures of an\n    integral-field spectrograph, then the signal can be\n    defined as the average flux in the spectral range under\n    study, for each aperture.\n    If pixels are the actual pixels of the CCD in a galaxy\n    image, the signal will be simply the counts in each pixel.\nnoise:\n    Vector (same size as X) containing the corresponding\n    noise (1 sigma error) associated with each pixel.\ntargetsn:\n    The desired signal-to-noise ratio in the final\n    2D-binned data. E.g. a S/N~50 per pixel may be a\n    reasonable value to extract stellar kinematics\n    information from galaxy spectra.\n\nOptional Keywords\n-----------------\n\ncvt:\n    Set this keyword to skip the Centroidal Voronoi Tessellation\n    (CVT) step (vii) of the algorithm in Section 5.1 of\n    Cappellari & Copin (2003).\n    This may be useful if the noise is strongly non-Poissonian,\n    the pixels are not optimally weighted, and the CVT step\n    appears to introduce significant gradients in the S/N.\n    A similar alternative consists of using the /WVT keyword below.\n    PLOT: Set this keyword to produce a plot of the two-dimensional\n    bins and of the corresponding S/N at the end of the\n    computation.\npixsize:\n    Optional pixel scale of the input data.\n    This can be the size of a pixel of an image or the size\n    of a spaxel or lenslet in an integral-field spectrograph.\n\n    The value is computed automatically by the program, but\n    this can take a long time when (X, Y) have many elements.\n    In those cases, the PIXSIZE keyword should be given.\nsn_func:\n    Generic function to calculate the S/N of a bin with spaxels\n    \"index\" with the form: \"sn = func(index, signal, noise)\".\n    If this keyword is not set, or is set to None, the program\n    uses the _sn_func(), included in the program file, but\n    another function can be adopted if needed.\n    See the documentation of _sn_func() for more details.\nquiet:\n    by default, the program shows the progress while accreting\n    pixels and then while iterating the CVT. Set this keyword\n    to avoid printing progress results.\nwvt:\n    When this keyword is set, the routine bin2d_cvt_equal_mass is\n    modified as proposed by Diehl & Statler (2006, MNRAS, 368, 497).\n    In this case the final step of the algorithm, after the bin-accretion\n    stage, is not a modified Centroidal Voronoi Tessellation, but it uses\n    a Weighted Voronoi Tessellation.\n    This may be useful if the noise is strongly non-Poissonian,\n    the pixels are not optimally weighted, and the CVT step\n    appears to introduce significant gradients in the S/N.\n    A similar alternative consists of using the /NO_CVT keyword above.\n    If you use the /WVT keyword you should also include a reference to\n    \"the WVT modification proposed by Diehl & Statler (2006).\"\n\nOutput Parameters\n-----------------\n\nbinnumber:\n    Vector (same size as X) containing the bin number assigned\n    to each input pixel. The index goes from zero to Nbins-1.\n    IMPORTANT: THIS VECTOR ALONE IS ENOUGH TO MAKE *ANY* SUBSEQUENT\n    COMPUTATION ON THE BINNED DATA. EVERYTHING ELSE IS OPTIONAL!\n\nxbin:\n    Vector (size Nbins) of the X coordinates of the bin generators.\n    These generators uniquely define the Voronoi tessellation.\n    Note: USAGE OF THIS VECTOR IS DEPRECATED AS IT CAN CAUSE CONFUSION\nybin:\n    Vector (size Nbins) of Y coordinates of the bin generators.\n    Note: USAGE OF THIS VECTOR IS DEPRECATED AS IT CAN CAUSE CONFUSION\nxbar:\n    Vector (size Nbins) of X coordinates of the bins luminosity\n    weighted centroids. Useful for plotting interpolated data.\nybar:\n    Vector (size Nbins) of Y coordinates of the bins luminosity\n    weighted centroids.\nsn:\n    Vector (size Nbins) with the final SN of each bin.\nnpixels:\n    Vector (size Nbins) with the number of pixels of each bin.\nscale:\n    Vector (size Nbins) with the scale length of the Weighted\n    Voronoi Tessellation, when the /WVT keyword is set.\n    In that case SCALE is *needed* together with the coordinates\n    XBIN and YBIN of the generators, to compute the tessellation\n    (but one can also simply use the BINNUMBER vector).\n\nWhen some pixels have no signal\n-------------------------------\n\nBinning should not be used blindly when some pixels contain significant noise\nbut virtually no signal. This situation may happen e.g. when extracting the gas\nkinematics from observed galaxy spectra. One way of using voronoi_2d_binning\nconsists of first selecting the pixels with S/N above a minimum threshold and\nthen binning each set of connected pixels *separately*. Alternatively one may\noptimally weight the pixels before binning. For details, see Sec. 2.1 of\n`Cappellari & Copin (2003) <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_.\n\nBinning X-ray data\n------------------\n\nFor X-ray data, or other data coming from photon-counting devices the noise is\ngenerally accurately Poissonian. In the Poissonian case, the S/N in a bin can\nnever decrease by adding a pixel (see Sec.2.1 of\n`Cappellari & Copin 2003 <http://adsabs.harvard.edu/abs/2003MNRAS.342..345C>`_),\nand it is preferable to bin the data *without* first removing the observed pixels\nwith no signal.\n\nBinning very big images\n-----------------------\n\nComputation time in voronoi_2d_binning scales nearly as npixels^1.5, so it may\nbecome a problem for large images (e.g. at the time of writing npixels > 1000x1000).\nLet's assume that we really need to bin the image as a whole and that the S/N in\na significant number of pixels is well above our target S/N. As for many other\ncomputational problems, a way to radically decrease the computation time consists\nof proceeding in a hierarchical manner. Suppose for example we have a 4000x4000\npixels image, we can do the following:\n\n1. Rebin the image regularly (e.g. in groups of 8x8 pixels) to a manageable\n   size of 500x500 pixels;\n2. Apply the standard Voronoi 2D-binning procedure to the 500x500 image;\n3. Transform all unbinned pixels (which already have enough S/N) of the\n   500x500 Voronoi 2D-binned image back into their original individual\n   full-resolution pixels;\n4. Now apply Voronoi 2D-binning only to the connected regions of\n   full-resolution pixels;\n5. Merge the set of lower resolution bins with the higher resolution ones.\n\n\n\nLicense\n-------\n\nOther/Proprietary License\n\nCopyright (c) 2001-2020 Michele Cappellari\n\nThis software is provided as is without any warranty whatsoever.\nPermission to use, for non-commercial purposes is granted.\nPermission to modify for personal or internal use is granted,\nprovided this copyright and disclaimer are included in all \ncopies of the software. All other rights are reserved.\nIn particular, redistribution of the code is not allowed.\n\nChangelog\n---------\n\nV3.1.4: MC, Oxford, 19 February 2020\n++++++++++++++++++++++++++++++++++++\n\n- Formatted documentation as docstring. \n\nV3.1.3: MC, Oxford, 27 September 2018\n+++++++++++++++++++++++++++++++++++++\n\n- Fixed clock DeprecationWarning in Python 3.7.\n\nV3.1.2: MC, Oxford, 10 May 2018\n+++++++++++++++++++++++++++++++\n\n- Dropped legacy Python 2.7 support. \n\nV3.1.1: MC, Oxford, 15 September 2017\n+++++++++++++++++++++++++++++++++++++\n\n- Stops if unbinned pixels do not have enough S/N.\n- Removed weighted centroid function. \n\nV3.1.0: MC, Oxford, 17 July 2017\n++++++++++++++++++++++++++++++++\n\n- Use cKDTree for much faster un-weighted Voronoi Tessellation.\n- Removed loop over bins from Lloyd's algorithm with CVT.\n      \nV3.0.9: MC, Oxford, 10 July 2017\n++++++++++++++++++++++++++++++++\n\n- Do not iterate down to diff==0 in _cvt_equal_mass().\n- Request `pixelsize` when dataset is large. Thanks to Davor Krajnovic\n  (Potsdam) for the feedback. \n- Make `quiet` really quiet.\n- Fixed some instances where sn_func() was not being used (only relevant\n  when passing the `sn_func` keyword). \n\nV3.0.8: MC, Oxford, 15 February 2017\n++++++++++++++++++++++++++++++++++++\n\n- New voronoi_tessellation() function. \n\nV3.0.7: MC, Oxford, 23 January 2017 \n+++++++++++++++++++++++++++++++++++\n\n- Print execution time. \n\nV3.0.6: MC, Oxford, 14 June 2016\n++++++++++++++++++++++++++++++++\n\n- Use interpolation='nearest' to avoid crash on MacOS.\n- Thanks to Kyle Westfall (Portsmouth) for reporting the problem.\n- Allow for zero noise. \n\nV3.0.5: MC, Oxford, 18 April 2016\n+++++++++++++++++++++++++++++++++\n\n- Fixed deprecation warning in Numpy 1.11. \n\nV3.0.4: MC, Oxford, 12 April 2016\n+++++++++++++++++++++++++++++++++\n\n- Included keyword \"sn_func\" to pass a function which\n- calculates the S/N of a bin, rather than editing _sn_func().\n- Included test to prevent the addition of a pixel from\n  ever decreasing the S/N during the accretion stage.\n      \nV3.0.3: MC, Oxford, 31 March 2016\n+++++++++++++++++++++++++++++++++\n\n- Use for loop to calculate Voronoi tessellation of large arrays\n  to reduce memory usage. Thanks to Peter Weilbacher (Potsdam) for\n  reporting the problem and providing the solution.\n      \nV3.0.2: MC, Oxford, 2 October 2014\n++++++++++++++++++++++++++++++++++\n\n- Avoid potential runtime warning while plotting.\n\nV3.0.1: MC, Oxford, 25 May 2014\n+++++++++++++++++++++++++++++++\n\n- Support both Python 2.7 and Python 3. \n      \nV3.0.0: MC, London, 19 March 2014\n+++++++++++++++++++++++++++++++++\n\n- Translated from IDL into Python and tested against the original.\n      \nV2.6.0: MC, London, 19 March 2014\n+++++++++++++++++++++++++++++++++\n\n- Included new SN_FUNCTION to illustrate the fact that the user can\n  define his own function to estimate the S/N of a bin if needed.\n      \nV2.5.8: MC, La Palma, 15 May 2012\n+++++++++++++++++++++++++++++++++\n\n- Update Voronoi tessellation at the exit of bin2d_cvt_equal_mass.\n  This is only done when using /WVT, as DIFF may not be zero at the\n  last iteration. \n\nV2.5.7: MC, Oxford, 24 March 2012\n+++++++++++++++++++++++++++++++++\n\n- Included safety termination criterion of Lloyd algorithm\n  to prevent loops using /WVT. \n\nV2.5.6: MC, Oxford, 11 November 2011\n++++++++++++++++++++++++++++++++++++\n\n- Use IDL intrinsic function DISTANCE_MEASURE for automatic pixelSize, \n  when PIXSIZE keyword is not given.\n      \nV2.5.5: MC, Oxford, 28 April 2010\n+++++++++++++++++++++++++++++++++\n\n- Added PIXSIZE keyword. \n      \nV2.5.4: MC, Oxford, 30 November 2009\n++++++++++++++++++++++++++++++++++++\n\n- Improved color shuffling for final plot.\n\nV2.5.3: MC, Oxford, 3 December 2007\n+++++++++++++++++++++++++++++++++++\n\n- Fixed program stop, introduced in V2.5.0, with /NO_CVT keyword.\n      \nV2.5.2: MC, Oxford, 28 March 2007\n+++++++++++++++++++++++++++++++++\n\n- Print number of unbinned pixels. \n      \nV2.5.1: MC, Oxford, 3 November 2006\n+++++++++++++++++++++++++++++++++++\n\n- Updated documentation. \n\nV2.5.0: MC, Leiden, 9 March 2006\n++++++++++++++++++++++++++++++++\n\n- Added two new lines of code and the corresponding /WVT keyword\n  to implement the nice modification to the algorithm proposed by\n  Diehl & Statler (2006). \n\nV2.4.8: MC, Leiden, 23 December 2005\n++++++++++++++++++++++++++++++++++++\n\n- Use geometric centroid of a bin during the bin-accretion stage,\n  to allow the routine to deal with negative signal (e.g. in\n  background-subtracted X-ray images). Thanks to Steven Diehl for\n  pointing out the usefulness of dealing with negative signal.\n      \nV2.4.7: MC, Leiden, 27 September 2005\n+++++++++++++++++++++++++++++++++++++\n\n- Verify that SIGNAL and NOISE are non negative vectors.\n      \nV2.4.6: MC, Leiden, 27 August 2005\n++++++++++++++++++++++++++++++++++\n\n- Added /NO_CVT keyword to optionally skip the CVT step of\n  the algorithm. \n\nV2.4.5: MC, Leiden, 3 December 2004\n+++++++++++++++++++++++++++++++++++\n\n- Added BIN2D prefix to internal routines to avoid possible\n  naming conflicts. \n\nV2.4.4: MC, Leiden, 30 November 2004\n++++++++++++++++++++++++++++++++++++\n\n- Prevent division by zero for pixels with signal=0\n  and noise=sqrt(signal)=0, as can happen from X-ray data.\n      \nV2.4.3: MC, Leiden, 29 November 2004\n++++++++++++++++++++++++++++++++++++\n\n- Corrected bug introduced in version 2.3.1. It went undetected\n  for a long time because it could only happen in special conditions.\n  Now we recompute the index of the good bins after computing all\n  centroids of the reassigned bins in reassign_bad_bins. Many thanks\n  to Simona Ghizzardi for her clear analysis of the problem and\n  the solution. \n\nV2.4.2: MC, Leiden, 4 August 2004\n+++++++++++++++++++++++++++++++++\n\n- Use LONARR instead of INTARR to define the CLASS vector,\n  to be able to deal with big images. Thanks to Tom Statler.\n      \nV2.4.1: MC, Leiden, 14 December 2003\n++++++++++++++++++++++++++++++++++++\n\n- Added /QUIET keyword and verbose output during the computation.\n  After suggestion by Richard McDermid. \n\nV2.4.0: MC, Leiden, 10 December 2003\n++++++++++++++++++++++++++++++++++++\n\n- Addedd basic error checking of input S/N. \n- Reintroduced the treatment for zero-size bins in CVT, which \n  was deleted in V2.2. Thanks to Robert Sharp and Kambiz Fathi \n  for reporting problems.\n\nV2.3.1: MC, Leiden, 13 April 2003\n+++++++++++++++++++++++++++++++++\n\n- Do *not* assume the first bin is made of one single pixel.\n- Added computation of S/N scatter and plotting of 1-pixel bins.\n      \nV2.3.0: MC, Leiden, 9 April 2003\n++++++++++++++++++++++++++++++++\n\n- Unified the three tests to stop the accretion of one bin.\n  This can improve some bins at the border. \n\nV2.2.0: MC, Leiden, 11 March 2003\n+++++++++++++++++++++++++++++++++\n\n- Added computation of useful bin quantities in output. Deleted some\n  safety checks for zero size bins in CVT. Minor polishing of the code.\n      \nV2.1.0: MC, Vicenza, 13 February 2003\n+++++++++++++++++++++++++++++++++++++\n\n- First released version. Written documentation.\n      \nV2.0.0: MC, Leiden, 11 September 2001\n+++++++++++++++++++++++++++++++++++++\n\n- Major revisions. Stable version. \n\nV1.0.0: Michele Cappellari, Leiden, June 2001\n+++++++++++++++++++++++++++++++++++++++++++++\n\n- First working implementation.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://purl.org/cappellari/software", "keywords": "", "license": "Other/Proprietary License", "maintainer": "", "maintainer_email": "", "name": "vorbin", "package_url": "https://pypi.org/project/vorbin/", "platform": "", "project_url": "https://pypi.org/project/vorbin/", "project_urls": {"Homepage": "http://purl.org/cappellari/software"}, "release_url": "https://pypi.org/project/vorbin/3.1.4/", "requires_dist": null, "requires_python": "", "summary": "VorBin: Voronoi Binning of Two Dimensional Data", "version": "3.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>VorBin: Adaptive Voronoi Binning of Two Dimensional Data</strong></p>\n<img alt=\"http://www-astro.physics.ox.ac.uk/~mxc/software/vorbin_logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d197df447e15fd4c52dbb1ec946adc3026931c52/687474703a2f2f7777772d617374726f2e706879736963732e6f782e61632e756b2f7e6d78632f736f6674776172652f766f7262696e5f6c6f676f2e706e67\">\n<a href=\"https://pypi.org/project/vorbin/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/vorbin.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1c2ab36f01b96e48d795f047cf6d285f619a1d8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f766f7262696e2e737667\"></a>\n<a href=\"https://arxiv.org/abs/astro-ph/0302262\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/arXiv-astroph:0302262-orange.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e36b527e0e6d1fd775ea2575b25f0b16103b6cdd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d617374726f70683a303330323236322d6f72616e67652e737667\"></a>\n<a href=\"https://doi.org/10.1046/j.1365-8711.2003.06541.x\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/DOI-10.1046/...-green.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0ce726b0ebe8cc606d5c77cbd27b5833962e993/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f444f492d31302e313034362f2e2e2e2d677265656e2e737667\"></a>\n<p>This VorBin package is a Python implementation of the two-dimensional adaptive\nspatial binning method of <a href=\"http://adsabs.harvard.edu/abs/2003MNRAS.342..345C\" rel=\"nofollow\">Cappellari &amp; Copin (2003)</a>.\nIt uses Voronoi tessellations to bin data to a given minimum signal-to-noise ratio.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#attribution\" id=\"id5\" rel=\"nofollow\">Attribution</a></li>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage-example\" id=\"id7\" rel=\"nofollow\">Usage Example</a></li>\n<li><a href=\"#vorbin-purpose\" id=\"id8\" rel=\"nofollow\">VorBin Purpose</a></li>\n<li><a href=\"#calling-sequence\" id=\"id9\" rel=\"nofollow\">Calling Sequence</a></li>\n<li><a href=\"#input-parameters\" id=\"id10\" rel=\"nofollow\">Input Parameters</a></li>\n<li><a href=\"#optional-keywords\" id=\"id11\" rel=\"nofollow\">Optional Keywords</a></li>\n<li><a href=\"#output-parameters\" id=\"id12\" rel=\"nofollow\">Output Parameters</a></li>\n<li><a href=\"#when-some-pixels-have-no-signal\" id=\"id13\" rel=\"nofollow\">When some pixels have no signal</a></li>\n<li><a href=\"#binning-x-ray-data\" id=\"id14\" rel=\"nofollow\">Binning X-ray data</a></li>\n<li><a href=\"#binning-very-big-images\" id=\"id15\" rel=\"nofollow\">Binning very big images</a></li>\n<li><a href=\"#license\" id=\"id16\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#changelog\" id=\"id17\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n</div>\n<div id=\"attribution\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Attribution</a></h2>\n<p>If you use this software for your research, please cite\n<a href=\"http://adsabs.harvard.edu/abs/2003MNRAS.342..345C\" rel=\"nofollow\">Cappellari &amp; Copin (2003)</a>\nThe BibTeX entry for the paper is:</p>\n<pre>@ARTICLE{Cappellari2003,\n    author = {{Cappellari}, M. and {Copin}, Y.},\n    title = \"{Adaptive spatial binning of integral-field spectroscopic\n        data using Voronoi tessellations}\",\n    journal = {MNRAS},\n    eprint = {astro-ph/0302262},\n    year = 2003,\n    volume = 342,\n    pages = {345-354},\n    doi = {10.1046/j.1365-8711.2003.06541.x}\n}\n</pre>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Installation</a></h2>\n<p>install with:</p>\n<pre>pip install vorbin\n</pre>\n<p>Without writing access to the global <tt><span class=\"pre\">site-packages</span></tt> directory, use:</p>\n<pre>pip install --user vorbin\n</pre>\n</div>\n<div id=\"usage-example\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Usage Example</a></h2>\n<p>To learn how to use the package <tt>VorBin</tt> run <tt>voronoi_2d_binning_example.py</tt> in the\n<tt>vorbin/examples</tt> directory, within the main package installation folder inside\n<tt><span class=\"pre\">site-packages</span></tt>, and read the detailed documentation in the docstring of the\nfile <tt>voronoi_2d_binning.py</tt>, on <a href=\"https://pypi.org/project/vorbin/\" rel=\"nofollow\">PyPi</a> or as\nPDF from <a href=\"https://purl.org/cappellari/software\" rel=\"nofollow\">https://purl.org/cappellari/software</a>.</p>\n<p>Perform the following simple steps to bin you own 2D data with minimal Python interaction:</p>\n<ol>\n<li>Write your data vectors [X, Y, Signal, Noise] in the text file\n<tt>voronoi_2d_binning_example.txt</tt>, following the example provided;</li>\n<li>Change the line <tt>targetSN = 50.0</tt> in the procedure <tt>voronoi_2d_binning_example.py</tt>,\nto specify the desired target S/N of your final bins;</li>\n<li>Run the program <tt>voronoi_2d_binning_example</tt> and wait for the final plot to appear.\nThe output is saved in the text file <tt>voronoi_2d_binning_output.txt</tt>. The\nlast column BIN_NUM in the file is <em>all</em> that is needed to actually bin the data;</li>\n<li>Read the documentation at the beginning of the file <tt>voronoi_2d_binning.py</tt> to\nfully understand the meaning of the various optional output parameters.</li>\n</ol>\n</div>\n<div id=\"vorbin-purpose\">\n<h2><a href=\"#id8\" rel=\"nofollow\">VorBin Purpose</a></h2>\n<p>Perform adaptive spatial binning of two-dimensional data\nto reach a chosen constant signal-to-noise ratio per bin.\nThis program implements the algorithm described in section 5.1 of\n<a href=\"http://adsabs.harvard.edu/abs/2003MNRAS.342..345C\" rel=\"nofollow\">Cappellari &amp; Copin (2003)</a></p>\n</div>\n<div id=\"calling-sequence\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Calling Sequence</a></h2>\n<pre><span class=\"n\">binNum</span><span class=\"p\">,</span> <span class=\"n\">xBin</span><span class=\"p\">,</span> <span class=\"n\">yBin</span><span class=\"p\">,</span> <span class=\"n\">xBar</span><span class=\"p\">,</span> <span class=\"n\">yBar</span><span class=\"p\">,</span> <span class=\"n\">sn</span><span class=\"p\">,</span> <span class=\"n\">nPixels</span><span class=\"p\">,</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">voronoi_2d_binning</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"p\">,</span> <span class=\"n\">targetSN</span><span class=\"p\">,</span>\n                       <span class=\"n\">cvt</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pixelsize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                       <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">sn_func</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">wvt</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"input-parameters\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Input Parameters</a></h2>\n<dl>\n<dt>x:</dt>\n<dd>Vector containing the X coordinate of the pixels to bin.\nArbitrary units can be used (e.g. arcsec or pixels).\nIn what follows the term \u201cpixel\u201d refers to a given\nspatial element of the dataset (sometimes called \u201cspaxel\u201d in\nthe IFS community): it can be an actual pixel of a CCD\nimage, or a spectrum position along the slit of a long-slit\nspectrograph or in the field of view of an IFS\n(e.g. a lenslet or a fiber).\nIt is assumed here that pixels are arranged in a regular\ngrid, so that the pixel size is a well-defined quantity.\nThe pixel grid, however, can contain holes (some pixels can be\nexcluded from the binning) and can have an irregular boundary.\nSee the above reference for an example and details.</dd>\n<dt>y:</dt>\n<dd>Vector (same size as X) containing the Y coordinate\nof the pixels to bin.</dd>\n<dt>signal:</dt>\n<dd>Vector (same size as X) containing the signal\nassociated with each pixel, having coordinates (X,Y).\nIf the \u201cpixels\u201d are actually the apertures of an\nintegral-field spectrograph, then the signal can be\ndefined as the average flux in the spectral range under\nstudy, for each aperture.\nIf pixels are the actual pixels of the CCD in a galaxy\nimage, the signal will be simply the counts in each pixel.</dd>\n<dt>noise:</dt>\n<dd>Vector (same size as X) containing the corresponding\nnoise (1 sigma error) associated with each pixel.</dd>\n<dt>targetsn:</dt>\n<dd>The desired signal-to-noise ratio in the final\n2D-binned data. E.g. a S/N~50 per pixel may be a\nreasonable value to extract stellar kinematics\ninformation from galaxy spectra.</dd>\n</dl>\n</div>\n<div id=\"optional-keywords\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Optional Keywords</a></h2>\n<dl>\n<dt>cvt:</dt>\n<dd>Set this keyword to skip the Centroidal Voronoi Tessellation\n(CVT) step (vii) of the algorithm in Section 5.1 of\nCappellari &amp; Copin (2003).\nThis may be useful if the noise is strongly non-Poissonian,\nthe pixels are not optimally weighted, and the CVT step\nappears to introduce significant gradients in the S/N.\nA similar alternative consists of using the /WVT keyword below.\nPLOT: Set this keyword to produce a plot of the two-dimensional\nbins and of the corresponding S/N at the end of the\ncomputation.</dd>\n<dt>pixsize:</dt>\n<dd><p>Optional pixel scale of the input data.\nThis can be the size of a pixel of an image or the size\nof a spaxel or lenslet in an integral-field spectrograph.</p>\n<p>The value is computed automatically by the program, but\nthis can take a long time when (X, Y) have many elements.\nIn those cases, the PIXSIZE keyword should be given.</p>\n</dd>\n<dt>sn_func:</dt>\n<dd>Generic function to calculate the S/N of a bin with spaxels\n\u201cindex\u201d with the form: \u201csn = func(index, signal, noise)\u201d.\nIf this keyword is not set, or is set to None, the program\nuses the _sn_func(), included in the program file, but\nanother function can be adopted if needed.\nSee the documentation of _sn_func() for more details.</dd>\n<dt>quiet:</dt>\n<dd>by default, the program shows the progress while accreting\npixels and then while iterating the CVT. Set this keyword\nto avoid printing progress results.</dd>\n<dt>wvt:</dt>\n<dd>When this keyword is set, the routine bin2d_cvt_equal_mass is\nmodified as proposed by Diehl &amp; Statler (2006, MNRAS, 368, 497).\nIn this case the final step of the algorithm, after the bin-accretion\nstage, is not a modified Centroidal Voronoi Tessellation, but it uses\na Weighted Voronoi Tessellation.\nThis may be useful if the noise is strongly non-Poissonian,\nthe pixels are not optimally weighted, and the CVT step\nappears to introduce significant gradients in the S/N.\nA similar alternative consists of using the /NO_CVT keyword above.\nIf you use the /WVT keyword you should also include a reference to\n\u201cthe WVT modification proposed by Diehl &amp; Statler (2006).\u201d</dd>\n</dl>\n</div>\n<div id=\"output-parameters\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Output Parameters</a></h2>\n<dl>\n<dt>binnumber:</dt>\n<dd>Vector (same size as X) containing the bin number assigned\nto each input pixel. The index goes from zero to Nbins-1.\nIMPORTANT: THIS VECTOR ALONE IS ENOUGH TO MAKE <em>ANY</em> SUBSEQUENT\nCOMPUTATION ON THE BINNED DATA. EVERYTHING ELSE IS OPTIONAL!</dd>\n<dt>xbin:</dt>\n<dd>Vector (size Nbins) of the X coordinates of the bin generators.\nThese generators uniquely define the Voronoi tessellation.\nNote: USAGE OF THIS VECTOR IS DEPRECATED AS IT CAN CAUSE CONFUSION</dd>\n<dt>ybin:</dt>\n<dd>Vector (size Nbins) of Y coordinates of the bin generators.\nNote: USAGE OF THIS VECTOR IS DEPRECATED AS IT CAN CAUSE CONFUSION</dd>\n<dt>xbar:</dt>\n<dd>Vector (size Nbins) of X coordinates of the bins luminosity\nweighted centroids. Useful for plotting interpolated data.</dd>\n<dt>ybar:</dt>\n<dd>Vector (size Nbins) of Y coordinates of the bins luminosity\nweighted centroids.</dd>\n<dt>sn:</dt>\n<dd>Vector (size Nbins) with the final SN of each bin.</dd>\n<dt>npixels:</dt>\n<dd>Vector (size Nbins) with the number of pixels of each bin.</dd>\n<dt>scale:</dt>\n<dd>Vector (size Nbins) with the scale length of the Weighted\nVoronoi Tessellation, when the /WVT keyword is set.\nIn that case SCALE is <em>needed</em> together with the coordinates\nXBIN and YBIN of the generators, to compute the tessellation\n(but one can also simply use the BINNUMBER vector).</dd>\n</dl>\n</div>\n<div id=\"when-some-pixels-have-no-signal\">\n<h2><a href=\"#id13\" rel=\"nofollow\">When some pixels have no signal</a></h2>\n<p>Binning should not be used blindly when some pixels contain significant noise\nbut virtually no signal. This situation may happen e.g. when extracting the gas\nkinematics from observed galaxy spectra. One way of using voronoi_2d_binning\nconsists of first selecting the pixels with S/N above a minimum threshold and\nthen binning each set of connected pixels <em>separately</em>. Alternatively one may\noptimally weight the pixels before binning. For details, see Sec. 2.1 of\n<a href=\"http://adsabs.harvard.edu/abs/2003MNRAS.342..345C\" rel=\"nofollow\">Cappellari &amp; Copin (2003)</a>.</p>\n</div>\n<div id=\"binning-x-ray-data\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Binning X-ray data</a></h2>\n<p>For X-ray data, or other data coming from photon-counting devices the noise is\ngenerally accurately Poissonian. In the Poissonian case, the S/N in a bin can\nnever decrease by adding a pixel (see Sec.2.1 of\n<a href=\"http://adsabs.harvard.edu/abs/2003MNRAS.342..345C\" rel=\"nofollow\">Cappellari &amp; Copin 2003</a>),\nand it is preferable to bin the data <em>without</em> first removing the observed pixels\nwith no signal.</p>\n</div>\n<div id=\"binning-very-big-images\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Binning very big images</a></h2>\n<p>Computation time in voronoi_2d_binning scales nearly as npixels^1.5, so it may\nbecome a problem for large images (e.g. at the time of writing npixels &gt; 1000x1000).\nLet\u2019s assume that we really need to bin the image as a whole and that the S/N in\na significant number of pixels is well above our target S/N. As for many other\ncomputational problems, a way to radically decrease the computation time consists\nof proceeding in a hierarchical manner. Suppose for example we have a 4000x4000\npixels image, we can do the following:</p>\n<ol>\n<li>Rebin the image regularly (e.g. in groups of 8x8 pixels) to a manageable\nsize of 500x500 pixels;</li>\n<li>Apply the standard Voronoi 2D-binning procedure to the 500x500 image;</li>\n<li>Transform all unbinned pixels (which already have enough S/N) of the\n500x500 Voronoi 2D-binned image back into their original individual\nfull-resolution pixels;</li>\n<li>Now apply Voronoi 2D-binning only to the connected regions of\nfull-resolution pixels;</li>\n<li>Merge the set of lower resolution bins with the higher resolution ones.</li>\n</ol>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id16\" rel=\"nofollow\">License</a></h2>\n<p>Other/Proprietary License</p>\n<p>Copyright (c) 2001-2020 Michele Cappellari</p>\n<p>This software is provided as is without any warranty whatsoever.\nPermission to use, for non-commercial purposes is granted.\nPermission to modify for personal or internal use is granted,\nprovided this copyright and disclaimer are included in all\ncopies of the software. All other rights are reserved.\nIn particular, redistribution of the code is not allowed.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"v3-1-4-mc-oxford-19-february-2020\">\n<h3>V3.1.4: MC, Oxford, 19 February 2020</h3>\n<ul>\n<li>Formatted documentation as docstring.</li>\n</ul>\n</div>\n<div id=\"v3-1-3-mc-oxford-27-september-2018\">\n<h3>V3.1.3: MC, Oxford, 27 September 2018</h3>\n<ul>\n<li>Fixed clock DeprecationWarning in Python 3.7.</li>\n</ul>\n</div>\n<div id=\"v3-1-2-mc-oxford-10-may-2018\">\n<h3>V3.1.2: MC, Oxford, 10 May 2018</h3>\n<ul>\n<li>Dropped legacy Python 2.7 support.</li>\n</ul>\n</div>\n<div id=\"v3-1-1-mc-oxford-15-september-2017\">\n<h3>V3.1.1: MC, Oxford, 15 September 2017</h3>\n<ul>\n<li>Stops if unbinned pixels do not have enough S/N.</li>\n<li>Removed weighted centroid function.</li>\n</ul>\n</div>\n<div id=\"v3-1-0-mc-oxford-17-july-2017\">\n<h3>V3.1.0: MC, Oxford, 17 July 2017</h3>\n<ul>\n<li>Use cKDTree for much faster un-weighted Voronoi Tessellation.</li>\n<li>Removed loop over bins from Lloyd\u2019s algorithm with CVT.</li>\n</ul>\n</div>\n<div id=\"v3-0-9-mc-oxford-10-july-2017\">\n<h3>V3.0.9: MC, Oxford, 10 July 2017</h3>\n<ul>\n<li>Do not iterate down to diff==0 in _cvt_equal_mass().</li>\n<li>Request <cite>pixelsize</cite> when dataset is large. Thanks to Davor Krajnovic\n(Potsdam) for the feedback.</li>\n<li>Make <cite>quiet</cite> really quiet.</li>\n<li>Fixed some instances where sn_func() was not being used (only relevant\nwhen passing the <cite>sn_func</cite> keyword).</li>\n</ul>\n</div>\n<div id=\"v3-0-8-mc-oxford-15-february-2017\">\n<h3>V3.0.8: MC, Oxford, 15 February 2017</h3>\n<ul>\n<li>New voronoi_tessellation() function.</li>\n</ul>\n</div>\n<div id=\"v3-0-7-mc-oxford-23-january-2017\">\n<h3>V3.0.7: MC, Oxford, 23 January 2017</h3>\n<ul>\n<li>Print execution time.</li>\n</ul>\n</div>\n<div id=\"v3-0-6-mc-oxford-14-june-2016\">\n<h3>V3.0.6: MC, Oxford, 14 June 2016</h3>\n<ul>\n<li>Use interpolation=\u2019nearest\u2019 to avoid crash on MacOS.</li>\n<li>Thanks to Kyle Westfall (Portsmouth) for reporting the problem.</li>\n<li>Allow for zero noise.</li>\n</ul>\n</div>\n<div id=\"v3-0-5-mc-oxford-18-april-2016\">\n<h3>V3.0.5: MC, Oxford, 18 April 2016</h3>\n<ul>\n<li>Fixed deprecation warning in Numpy 1.11.</li>\n</ul>\n</div>\n<div id=\"v3-0-4-mc-oxford-12-april-2016\">\n<h3>V3.0.4: MC, Oxford, 12 April 2016</h3>\n<ul>\n<li>Included keyword \u201csn_func\u201d to pass a function which</li>\n<li>calculates the S/N of a bin, rather than editing _sn_func().</li>\n<li>Included test to prevent the addition of a pixel from\never decreasing the S/N during the accretion stage.</li>\n</ul>\n</div>\n<div id=\"v3-0-3-mc-oxford-31-march-2016\">\n<h3>V3.0.3: MC, Oxford, 31 March 2016</h3>\n<ul>\n<li>Use for loop to calculate Voronoi tessellation of large arrays\nto reduce memory usage. Thanks to Peter Weilbacher (Potsdam) for\nreporting the problem and providing the solution.</li>\n</ul>\n</div>\n<div id=\"v3-0-2-mc-oxford-2-october-2014\">\n<h3>V3.0.2: MC, Oxford, 2 October 2014</h3>\n<ul>\n<li>Avoid potential runtime warning while plotting.</li>\n</ul>\n</div>\n<div id=\"v3-0-1-mc-oxford-25-may-2014\">\n<h3>V3.0.1: MC, Oxford, 25 May 2014</h3>\n<ul>\n<li>Support both Python 2.7 and Python 3.</li>\n</ul>\n</div>\n<div id=\"v3-0-0-mc-london-19-march-2014\">\n<h3>V3.0.0: MC, London, 19 March 2014</h3>\n<ul>\n<li>Translated from IDL into Python and tested against the original.</li>\n</ul>\n</div>\n<div id=\"v2-6-0-mc-london-19-march-2014\">\n<h3>V2.6.0: MC, London, 19 March 2014</h3>\n<ul>\n<li>Included new SN_FUNCTION to illustrate the fact that the user can\ndefine his own function to estimate the S/N of a bin if needed.</li>\n</ul>\n</div>\n<div id=\"v2-5-8-mc-la-palma-15-may-2012\">\n<h3>V2.5.8: MC, La Palma, 15 May 2012</h3>\n<ul>\n<li>Update Voronoi tessellation at the exit of bin2d_cvt_equal_mass.\nThis is only done when using /WVT, as DIFF may not be zero at the\nlast iteration.</li>\n</ul>\n</div>\n<div id=\"v2-5-7-mc-oxford-24-march-2012\">\n<h3>V2.5.7: MC, Oxford, 24 March 2012</h3>\n<ul>\n<li>Included safety termination criterion of Lloyd algorithm\nto prevent loops using /WVT.</li>\n</ul>\n</div>\n<div id=\"v2-5-6-mc-oxford-11-november-2011\">\n<h3>V2.5.6: MC, Oxford, 11 November 2011</h3>\n<ul>\n<li>Use IDL intrinsic function DISTANCE_MEASURE for automatic pixelSize,\nwhen PIXSIZE keyword is not given.</li>\n</ul>\n</div>\n<div id=\"v2-5-5-mc-oxford-28-april-2010\">\n<h3>V2.5.5: MC, Oxford, 28 April 2010</h3>\n<ul>\n<li>Added PIXSIZE keyword.</li>\n</ul>\n</div>\n<div id=\"v2-5-4-mc-oxford-30-november-2009\">\n<h3>V2.5.4: MC, Oxford, 30 November 2009</h3>\n<ul>\n<li>Improved color shuffling for final plot.</li>\n</ul>\n</div>\n<div id=\"v2-5-3-mc-oxford-3-december-2007\">\n<h3>V2.5.3: MC, Oxford, 3 December 2007</h3>\n<ul>\n<li>Fixed program stop, introduced in V2.5.0, with /NO_CVT keyword.</li>\n</ul>\n</div>\n<div id=\"v2-5-2-mc-oxford-28-march-2007\">\n<h3>V2.5.2: MC, Oxford, 28 March 2007</h3>\n<ul>\n<li>Print number of unbinned pixels.</li>\n</ul>\n</div>\n<div id=\"v2-5-1-mc-oxford-3-november-2006\">\n<h3>V2.5.1: MC, Oxford, 3 November 2006</h3>\n<ul>\n<li>Updated documentation.</li>\n</ul>\n</div>\n<div id=\"v2-5-0-mc-leiden-9-march-2006\">\n<h3>V2.5.0: MC, Leiden, 9 March 2006</h3>\n<ul>\n<li>Added two new lines of code and the corresponding /WVT keyword\nto implement the nice modification to the algorithm proposed by\nDiehl &amp; Statler (2006).</li>\n</ul>\n</div>\n<div id=\"v2-4-8-mc-leiden-23-december-2005\">\n<h3>V2.4.8: MC, Leiden, 23 December 2005</h3>\n<ul>\n<li>Use geometric centroid of a bin during the bin-accretion stage,\nto allow the routine to deal with negative signal (e.g. in\nbackground-subtracted X-ray images). Thanks to Steven Diehl for\npointing out the usefulness of dealing with negative signal.</li>\n</ul>\n</div>\n<div id=\"v2-4-7-mc-leiden-27-september-2005\">\n<h3>V2.4.7: MC, Leiden, 27 September 2005</h3>\n<ul>\n<li>Verify that SIGNAL and NOISE are non negative vectors.</li>\n</ul>\n</div>\n<div id=\"v2-4-6-mc-leiden-27-august-2005\">\n<h3>V2.4.6: MC, Leiden, 27 August 2005</h3>\n<ul>\n<li>Added /NO_CVT keyword to optionally skip the CVT step of\nthe algorithm.</li>\n</ul>\n</div>\n<div id=\"v2-4-5-mc-leiden-3-december-2004\">\n<h3>V2.4.5: MC, Leiden, 3 December 2004</h3>\n<ul>\n<li>Added BIN2D prefix to internal routines to avoid possible\nnaming conflicts.</li>\n</ul>\n</div>\n<div id=\"v2-4-4-mc-leiden-30-november-2004\">\n<h3>V2.4.4: MC, Leiden, 30 November 2004</h3>\n<ul>\n<li>Prevent division by zero for pixels with signal=0\nand noise=sqrt(signal)=0, as can happen from X-ray data.</li>\n</ul>\n</div>\n<div id=\"v2-4-3-mc-leiden-29-november-2004\">\n<h3>V2.4.3: MC, Leiden, 29 November 2004</h3>\n<ul>\n<li>Corrected bug introduced in version 2.3.1. It went undetected\nfor a long time because it could only happen in special conditions.\nNow we recompute the index of the good bins after computing all\ncentroids of the reassigned bins in reassign_bad_bins. Many thanks\nto Simona Ghizzardi for her clear analysis of the problem and\nthe solution.</li>\n</ul>\n</div>\n<div id=\"v2-4-2-mc-leiden-4-august-2004\">\n<h3>V2.4.2: MC, Leiden, 4 August 2004</h3>\n<ul>\n<li>Use LONARR instead of INTARR to define the CLASS vector,\nto be able to deal with big images. Thanks to Tom Statler.</li>\n</ul>\n</div>\n<div id=\"v2-4-1-mc-leiden-14-december-2003\">\n<h3>V2.4.1: MC, Leiden, 14 December 2003</h3>\n<ul>\n<li>Added /QUIET keyword and verbose output during the computation.\nAfter suggestion by Richard McDermid.</li>\n</ul>\n</div>\n<div id=\"v2-4-0-mc-leiden-10-december-2003\">\n<h3>V2.4.0: MC, Leiden, 10 December 2003</h3>\n<ul>\n<li>Addedd basic error checking of input S/N.</li>\n<li>Reintroduced the treatment for zero-size bins in CVT, which\nwas deleted in V2.2. Thanks to Robert Sharp and Kambiz Fathi\nfor reporting problems.</li>\n</ul>\n</div>\n<div id=\"v2-3-1-mc-leiden-13-april-2003\">\n<h3>V2.3.1: MC, Leiden, 13 April 2003</h3>\n<ul>\n<li>Do <em>not</em> assume the first bin is made of one single pixel.</li>\n<li>Added computation of S/N scatter and plotting of 1-pixel bins.</li>\n</ul>\n</div>\n<div id=\"v2-3-0-mc-leiden-9-april-2003\">\n<h3>V2.3.0: MC, Leiden, 9 April 2003</h3>\n<ul>\n<li>Unified the three tests to stop the accretion of one bin.\nThis can improve some bins at the border.</li>\n</ul>\n</div>\n<div id=\"v2-2-0-mc-leiden-11-march-2003\">\n<h3>V2.2.0: MC, Leiden, 11 March 2003</h3>\n<ul>\n<li>Added computation of useful bin quantities in output. Deleted some\nsafety checks for zero size bins in CVT. Minor polishing of the code.</li>\n</ul>\n</div>\n<div id=\"v2-1-0-mc-vicenza-13-february-2003\">\n<h3>V2.1.0: MC, Vicenza, 13 February 2003</h3>\n<ul>\n<li>First released version. Written documentation.</li>\n</ul>\n</div>\n<div id=\"v2-0-0-mc-leiden-11-september-2001\">\n<h3>V2.0.0: MC, Leiden, 11 September 2001</h3>\n<ul>\n<li>Major revisions. Stable version.</li>\n</ul>\n</div>\n<div id=\"v1-0-0-michele-cappellari-leiden-june-2001\">\n<h3>V1.0.0: Michele Cappellari, Leiden, June 2001</h3>\n<ul>\n<li>First working implementation.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6662418, "releases": {"3.1.3": [{"comment_text": "", "digests": {"md5": "bb95393c70360ad3ee6c100e1fc8be06", "sha256": "b5cfbda9432c3cede89a05e93a405af408bee6401c3c22032b0e6f9e01bea2dd"}, "downloads": -1, "filename": "vorbin-3.1.3.tar.gz", "has_sig": false, "md5_digest": "bb95393c70360ad3ee6c100e1fc8be06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83625, "upload_time": "2018-05-21T11:07:17", "upload_time_iso_8601": "2018-05-21T11:07:17.542689Z", "url": "https://files.pythonhosted.org/packages/57/62/28a014b314c785700642b29ddf3df50b1785a3bc7caadf93f877893c5952/vorbin-3.1.3.tar.gz", "yanked": false}], "3.1.4": [{"comment_text": "", "digests": {"md5": "8cd74efa41cad29a66537b1d753d5f00", "sha256": "bdaf878a4b2c07d2c2204cef5699097494aeadf67238ce0e28fd2d313790cce8"}, "downloads": -1, "filename": "vorbin-3.1.4.tar.gz", "has_sig": false, "md5_digest": "8cd74efa41cad29a66537b1d753d5f00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69009, "upload_time": "2020-02-19T17:55:12", "upload_time_iso_8601": "2020-02-19T17:55:12.495880Z", "url": "https://files.pythonhosted.org/packages/50/6e/080c96e2fbb042b3635649c28c9cdc1c4946adff7238429fc27063c7954d/vorbin-3.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cd74efa41cad29a66537b1d753d5f00", "sha256": "bdaf878a4b2c07d2c2204cef5699097494aeadf67238ce0e28fd2d313790cce8"}, "downloads": -1, "filename": "vorbin-3.1.4.tar.gz", "has_sig": false, "md5_digest": "8cd74efa41cad29a66537b1d753d5f00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69009, "upload_time": "2020-02-19T17:55:12", "upload_time_iso_8601": "2020-02-19T17:55:12.495880Z", "url": "https://files.pythonhosted.org/packages/50/6e/080c96e2fbb042b3635649c28c9cdc1c4946adff7238429fc27063c7954d/vorbin-3.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:22 2020"}