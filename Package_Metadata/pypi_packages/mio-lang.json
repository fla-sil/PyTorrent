{"info": {"author": "James Mills", "author_email": "James Mills, prologic at shortcircuit dot net dot au", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Assemblers", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Compilers", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Interpreters"], "description": ".. _Python Programming Language: http://www.python.org/\n.. _How To Create Your Own Freaking Awesome Programming Language: http://createyourproglang.com/\n.. _Marc-Andre Cournoye: http://macournoyer.com/\n.. _Project Website: http://mio-lang.org/\n.. _PyPi Page: http://pypi.python.org/pypi/mio-lang\n.. _Read the Docs: http://mio-lang.readthedocs.org/en/latest/\n.. _Read the Tutorial: http://mio-lang.readthedocs.org/en/latest/tutorial.html\n.. _Downloads Page: https://bitbucket.org/prologic/mio-lang/downloads\n\n\nmio is a minimalistic IO programming language written in the\n`Python Programming Language`_ based on MIo (*a port from Ruby to Python*)\nin the book `How To Create Your Own Freaking Awesome Programming Language`_ by\n`Marc-Andre Cournoye`_.\n\nThis project is being developed for educational purposes only and should serve as\na teaching tool for others wanting to learn how to implement your own programming\nlanguage (*albeit in the style of Smalltalk, Io, etc*). Many thanks go to `Marc-Andre Cournoye`_\nand his wonderful book which was a great refresher and overview of the overall processing\nand techniques involved in programming language design and implementation. Thanks also go to the\nguys in the ``#io`` channel on the FreeNode IRC Network specifically **jer** nad **locks**\nfor their many valuable tips and help.\n\nThe overall goal for this project is to create a fully useable and working programming language\nimplementation of a langauge quite similar to `Io <http://iolanguage.com>`_ with heavy influence\nfrom `Python <http://python.org>`_ (*because Python is awesome!*). This has already largely been\nachived in the current version. See the `RoadMap <http://mio-lang.readthedocs.org/en/latest/roadmap.html>`_\nfor what might be coming up next.\n\n.. warning:: mio is a new programming language in early **Planning** and **Development**.\n             DO NOT USE IN PRODUCTION! USE AT YOUR OWN RISK!\n\n- Visit the `Project Website`_\n- `Read the Docs`_\n- `Read the Tutorial`_\n- Download it from the `Downloads Page`_\n\n.. image:: https://pypip.in/v/mio-lang/badge.png\n   :target: https://crate.io/packages/mio-lang/\n   :alt: Latest PyPI version\n\n.. image:: https://pypip.in/d/mio-lang/badge.png\n   :target: https://crate.io/packages/mio-lang/\n   :alt: Number of PyPI downloads\n\n.. image:: https://jenkins.shiningpanda-ci.com/prologic/job/mio-lang/badge/icon\n   :target: https://jenkins.shiningpanda-ci.com/prologic/job/mio-lang/\n   :alt: Build Status\n\n.. image:: https://requires.io/bitbucket/prologic/mio-lang/requirements.png?branch=default\n   :target: https://requires.io/bitbucket/prologic/mio-lang/requirements/?branch=default\n   :alt: Requirements Status\n\n\nExamples\n--------\n\nFactorial::\n    \n    Number fact = method(reduce(block(a, x, a * x), range(1, self)))\n    \nHello World::\n    \n    print(\"Hello World!\")\n    \n\nFeatures\n--------\n\n- Homoiconic\n- Message Passing\n- Higher Order Messages\n- Higher Order Functions\n- Full support for Traits\n- Object Orienated Language\n- Written in an easy to understand language\n- Supports Imperative, Functional, Object Oriented and Behavior Driven Development styles.\n\n\nInstallation\n------------\n\nThe simplest and recommended way to install mio is with pip.\nYou may install the latest stable release from PyPI with pip::\n\n    > pip install mio-lang\n\nIf you do not have pip, you may use easy_install::\n\n    > easy_install mio-lang\n\nAlternatively, you may download the source package from the\n`PyPI Page`_ or the `Downloads page`_ on the `Project Website`_;\nextract it and install using::\n\n    > python setup.py install\n\nYou can also install the\n`latest-development version <https://bitbucket.org/prologic/mio-lang/get/tip.tar.gz#egg=mio-lang-dev>`_ by using ``pip`` or ``easy_install``::\n    \n    > pip install mio-lang==dev\n\nor::\n    \n    > easy_install mio-lang==dev\n\n\nFor further information see the `mio documentation <http://mio-lag.readthedocs.org/>`_.\n\n\nChanges\n-------\n\n\nmio 0.1.8 (*2013-12-24*)\n........................\n\n- Implemented ``caller()`` [**functools**]\n- Fixed parser support for ``[1] + [2]`` --> ``[](1} +([](2))``\n- Fixed ``List extend()`` to take another list, not ``*args``.\n- Implemented ``+`` List operator.\n- Implemented ``min`` and ``max`` and added to the mio std. lib.\n\n\nmio 0.1.7 (*2013-12-09*)\n........................\n\n- Fixed ``Object evalArg()`` so it can take zero arguments and return ``None``. e.g: ``() a``\n- Implemented ``identity()`` and ``constantly()`` in ``functools`` std. lib and added unit tests.\n- Fixed typos in ``operators`` module.\n- Moved all trait related user methods to ``TAdaptable`` core trait.\n- Added ``adapt()`` method to ``TAdaptable``.\n\n.. note:: This is more or less an alias of ``use()`` except the object\n          being adapted is cloned and the original left in tact. The\n          adaptation is therefore temporary.\n\n- Added support for contextually aware tab completion.\n- Test Coverage back up to 100%\n\n\nmio 0.1.6 (*2013-12-04*)\n........................\n\n- Added support for packaging Python `wheels <http://pythonwheels.com/>`_.\n- Define a default ``init()`` method on ``Object`` and just make ``TCloneable init()`` just call ``init()``.\n- Added ``String strip()`` method.\n- Make ``String`` use ``TIterable``.\n- Implemented ``input()`` builtin.\n- Implemented a special object ``Trait`` which all traits are cloend from.\n\n  - This means traits now cannot contain state and a ``TypeError`` is raised.\n  - Objects can only use or add traits that are inherited from the ``Trait`` object.\n\nA simple trait thus looks like::\n    \n    TFoo = Trait clone() do (\n        foo = method(\n            print(\"Foo!\")\n        )\n    )\n    \n- Implemented ``Trait requires()`` so that traits can declare the names of methods and attribute they depend on.\n\ne.g::\n    \n    TGreetable = Trait clone() do (\n        requires(\"name\")\n    \n        hello = method(\n            print(\"Hello \", self name)\n        )\n    )\n    \n    World = Object clone() do (\n        name = \"World!\"\n        uses(TGreetable)\n    )\n    \n    World hello()\n    \n- Added conflict resolution for traits.\n- Remvoed ``uses`` in favor of single ``use(trait, resolution)`` where **resolution** is a dict of key->value pairs that rename\n  conflicting methods of the trait being used.\n- Make ``Object hasTrait()`` lookup the parent chain.\n- Abuse the ``is`` method of ``TComparble`` to be used as short-cut for: ``foo hasTrait(TFoo)``.\n\n\nmio 0.1.5 (*2013-11-28*)\n........................\n\n- Don't look into ``builtins`` module for the tab-completer function of the REPL if there are no builtins. i.e: ``mio -S``\n- Added a nice big shiny red warning about mio's status.\n\n\nmio 0.1.4 (*2013-11-27*)\n........................\n\n- Added \"Functions\" to the tutorial.\n- Added \"Objects\" to the tutorial.\n- Added \"Traits\" to the tutorial.\n- Added the start of a small ``functools`` library to the mio std. lib.\n- Added ``test_builtins`` to mio. std library as a tests package.\n- Added operators module to mio std. lib.\n- Rought cut of generators implemented in CPython and mio.\n- Implemented ``KeyError`` exception type and used this to guard non-existent key lookups on dicts.\n- Somewhat improved the error handling and tracebacks.\n- Improved the way generators work.\n- Added ``yield`` to the mio std lib builtins.\n- Added ``TypeError`` guard around opening non-files with the ``Path`` object.\n- Rewrote the tutorial to utilize ``sphinxcontrib-autorun`` extension with custom ``miointerpreter.py`` module.\n- Improved REPL continuation output of unclosed parens.\n- Removed docs dependencies of unused sphinx extensions.\n- Added ``mio.state.State.runsource()`` which simplifies ``mio.state.State.repl()`` a bit and allows our custom ``sphinxcontrib-autorun`` ext to work.\n- Added API Docs.\n\n\nmio 0.1.3 (*2013-11-19*)\n........................\n\n- Fixed tutorial by writing a bash script that generates it (*Read the Docs forbids program-output extension*).\n\n\nmio 0.1.2 (*2013-11-19*)\n........................\n\n- Moved ``File`` from types to core.\n- Allow multiple ``-e expr`` options to be given on the CLI.\n- Implemented ``len`` builtin.\n- Implemented ``List remove()`` method.\n- Implemented ``String split()`` method. \n- Implemented ``String __getitem__()`` and ``String __len__()`` methods.\n- Implemented ``Bytes __getitem__()`` and ``Bytes __len__()`` methods.\n- Added ``[]`` syntactic sugar to ``Bytes`` and ``String`` objects.\n- Wrote a basic `mio tutorial <http://mio-lang.readthedocs.org/en/latest/tutorial.html>`_\n- Updated the factorial example to be a little clearer.\n- Improved Test Coverage of new features and objects.\n\n\nmio 0.1.1  (*2013-11-18*)\n.........................\n\n- The beginnings of a testing framework.\n- Implemented unit tests for mio builtins: ``abs``, ``all`` and ``any``.\n- Added paren detection to the REPL so you start write long functions over multiple lines. (*Borrowed from: https://bitbucket.org/pypy/lang-scheme/src/b1d5a1b8744f3c7c844775cb420c1a5d4c584592/scheme/interactive.py?at=default*).\n- Added basic tab completion support to the REPL.\n\n.. note:: This is not context aware and build up a list of known objects from ``Root``, ``Types``, ``Core`` and ``builtins``.\n\n- Many RPython compilation issues fixed.\n- Implemented ``Path`` object.\n\n\nmio 0.1 (*2013-11-14*)\n......................\n\n- Updated factorial examples\n- Added support for and a ``fab compile`` task for compiling mio with RPython\n\n.. warning:: This does not work yet!\n\n- Changed the way results are printed on the REPL by implementing a ``format_value(...)`` utility function.\n- Added ``assert`` as a special name (*operator*).\n- Added optional message argument to ``assert``.\n- Improved repr of ``Core`` and ``Types`` objects.\n- Fixed a bug in the parser so that we can use ``[]`` and ``{}`` as methods.\n\n::\n    \n    xs = [1, 2, 3, 4]\n    xs[0]\n    \n- Implemented dict literals.\n\n::\n    \n    {\"a\": 1, \"b\": 2}\n    \n.. note:: This only works with keys as strings for the moment.\n\n- Added a ``hash`` builtin.\n- Improved ``{}`` dict literal so that any hashable keys can be used.\n\n.. note:: Like Python this means any object whoose ``__hash__()`` method\n          returns a non-``None`` value.\n\n- Fixed ``any`` and ``all`` builtins.\n- IMplemented ``in`` method of ``TComparable``\n\n::\n    \n    1 in(1, 0)\n    \n- Changed the semantics of closures.\n\n  - ``this`` is a new attribute of ``Locals`` that always references the\n    current block scope.\n  - ``self`` is a reference to the current object in scope (*if there is one*).\n\n.. warning:: This behavior may change as I'm not 100% happy with this.\n\n.. note:: This is sort of a work-around to allow blocks to access the\n          currently scoped object ``self`` inside the scope of a method\n          or nested blocks within a method.\n\n\nmio 0.0.9 (*2013-11-10*)\n........................\n\n- Fixed ``[]`` syntax for creating lists.\n- Fixed ``TIterable foreac`` to work more like a for loop.\n- Introduced properties for internal Python Functions exposed to mio.\n- Adopted calling with ``(...)``'s for all methods.\n- Also format functions in ``format_object(...)``.\n- Added ``__call__`` to ``Error`` objects. This allows:\n\n::\n    \n    raise TypeError(\"foo\")\n\n- Added iterator support for ``Range`` object.\n- Renamed ``str`` and ``repr`` methods of ``Object`` to ``__str__`` and ``__str__`` respectively and implemtned ``str`` and ``repr`` builtins.\n- Optimized the tokenizer\n- Added ``ifError``, ``ifNonError`` and ``catch`` to the ``Object`` object to deal with non-errors.\n- Improved and fixed a lot of the builtins.\n- Improved the way ``*args`` is handled (*still needs more work*).\n- Implemented ``assert`` builtin.\n\n\nmio 0.0.8 (*2013-11-07*)\n........................\n\n- Removed operator precedence parsing.\n\n  - Operator precedence is **HARD**\n  - Operator precedence rules hare **HARD** to remember\n  - Operator precedence is not the main goal of mio right now.\n\n- Tidied up the builtins module.\n- ``from foo import *`` works again (*operator precedence parsing broke it*).\n\n\nmio 0.0.7 (*2013-11-06*)\n........................\n\n- Added rudamentary stack trace support to errors. A somewhat \"okay\" stack trace is displayed on error(s).\n- Added ``String format`` method for performing string iterpolation. Only supports ``{0}``, ``{1}``, etc.\n- Implemented ``ListIterator`` iterable object with ``iter`` added to mio std. lib. This works similiarly to Python's iterators:\n\n::\n    \n    mio> xs = [1, 2, 3, 4]\n    ===> list(1, 2, 3, 4)\n    mio> it = iter(xs)\n    ===> ListIterator(list(1, 2, 3, 4))\n    mio> it next()\n    ===> 1\n    mio> it next()\n    ===> 2\n    mio> it next()\n    ===> 3\n    mio> it next()\n    ===> 4\n    \nA further iteration would result in:\n\n::\n    \n    mio> it next()\n\n      StopIteration: \n      --------------\n      next\n    ifFalse(\n     raise(StopIteration) \n    ) \n\n    raise(StopIteration) \n    \n- Re-implemented ``return`` function as part of the mio std. lib.\n- Don't allow ``return`` to be called outside of a ``Block`` (*block/method*) as this is illegal.\n- Implemented ``while`` builtin as part of the mio std. lib.\n  (*no break or continue support yet*)\n- Implemented ``loop`` builtin as part of the mio std. lib.\n  (*no break or continue support yet*)\n- Implemented basic support for reshuffling messages before chaining to support ``x is not None`` --> ``not(x is None)``.\n- Finally implemented operator precedence support (*which seems to cover most edge cases*).\n\n.. note:: Need to write lots of unit tests for this!\n\n- Fixed all found edge cases with the new operator precedence lexer/parser.\n- Improved ``Error`` object and added ``Error catch`` method for catching errors.\n- Implemented ``reduce`` builtin.\n- Implemented TComparable trait\n- Implemented TCloneable trait\n- Iterpret ``call message args`` to mean \"pass all args to the callable\"\n- Imroved Dict and List objects.\n- Implemented ``__call__`` calling semantics whereby an object can implement this as a method and ``Foo()`` will invoke ``Foo __call__`` if it exists.\n- IMplemented the ``__get__`` part of the Data Descriptor protocol.\n\n\nmio 0.0.6 (*2013-11-02*)\n........................\n\n- Allow an optional object to be passed to the ``Object id`` method.\n- Implemented ``hex`` builtin.\n- Implemented ``Bytes`` and ``Tuple`` objects.\n- Implemented ``State`` core object and sample ``loop`` builtin (*in testing*).\n- Refactored all of the context state management code (*stopStatus*) and exposed it to the end user.\n\n  - This means we can now write flow based constructs such as loops directly in mio.\n\n- Fixed a minor bug in the parser where ``not(0) ifTrue(print(\"foo\"))`` would parse as ``not(0, ifTrue(print(\"foo\")))``\n- Fixed a minor bug in the parser where ``isError`` would parse as ``is(Error)``. Parse identifiers before operators.\n- Implemented basic excpetion handling and error object(s) (*no stack traces yet*).\n- Moved ``exit`` to builtins.\n- Moved the setting of ``.binding`` attribute to ``Object`` ``set/del`` methods.\n- Added support for ``..`` operator and added this to ``Number``. This allows you to write:\n\n::\n    \n    x = 1 .. 5  # a Range from 1 to 5\n    \n- Added ``+`` and ``-`` operators to the ``Range`` object so you can do things like:\n\n::\n    \n    x = (1 .. 5) + 2  # a Range from 1 to 5 in increment of 2\n    \n- Changed default REPL prompt to: \n\n::\n    \n    $ mio\n    mio 0.0.6.dev\n    mio>\n    \n- Implemented ``sum`` builtin.\n- Added ``try`` and ``raise`` builtins. (*``raise`` is not implemented yet...*).\n- Added support for User level Error(s) and implemented ``Exception raise``\n- Replaced ``Continuation call`` with activatable object semantics. This means:\n\n::\n    \n    c = Continuation current()\n    print(\"foo\")\n    c()\n    \n- ``Object evalArg`` should evaluate the argument with context as the receiver.\n- Added ``List __getitem__`` and ``List __len__`` methods.\n- Added ``TIterable`` trait to the mio bootstrap library and added this to ``List``.\n- Removed ``foreach``, ``whilte``, ``continue``, ``break`` and ``return`` ``Object`` methods. These will be re-implemented as traits and builtins.\n- Changed the way the parser parses and treats operators. They are no longer parsed in a deep right tree.\n\nExample::\n    \n    1 + 2 * 3\n\nOLD::\n    \n    1 +(2 *(3))\n    \nNEW::\n    \n    1 +(2) *(3)\n    \n- This will probably make reshuffling and therefore implementing operator precedence a lot easier.\n- This also makes the following expressions possible (*used in the builtins module*):\n\n::\n    \n    from foo import *\n    \n- Added ``TypeError``, ``KeyError`` and ``AttributeError`` to the mio std. lib.\n- Made it possible to import members from a module with: ``from foo import bar``\n\n\nmio 0.0.5 (*2013-10-29*)\n........................\n\n- Split up core into core and types.\n- Re-implemented ``True``, ``False`` and ``None`` in mio.\n- Implemented ``bin`` builtin.\n- Implemented ``bool`` builtin.\n- Implemented ``callable`` builtin.\n- Implemented ``cha`` builtin.\n- IMplemented ``from`` and ``import`` builtins.\n- Make the ``Object pimitive`` ``:foo`` method return the internal Python data type.\n- Fixed the ``abs`` builtin to return an newly cloned Number.\n- Implemented support for packages ala Python.\n- Restructured the mio std. lib\n- mio nwo bootstraps itself via an import of the \"bootstrap\" package.\n- Reimplemented ``Object clone`` in the mio std. lib.\n\n\nmio 0.0.4 (*2013-10-27*)\n........................\n\n- Moved the implementation of ``super`` to the mio std. lib\n- Only set ``_`` as the last result in the Root object (*the Lobby*)\n- Added support for ``()``, ``[]`` and ``{}`` special messages that can be used to define syntactic suguar for lists, dicts, etc.\n- Implemented ``Dict`` object type and ``{a=1, b=2}`` syntactic sugar to the builtint (*mio std. lib*) ``dict()`` method.\n- Refactored the ``File`` object implementation and made it's repr more consistent with other objects in mio.\n- Fixed keyword argument support.\n- Fixed a few minor bugs in the ``Message`` object and improved test coverage.\n- Added ``?`` as a valid operator and an implementation of ``Object ?message`` in the mio std. lib.\n- Fixed a bug with ``Range``'s internal iterator causing ``Range asList`` not to work.\n- Fixed a bug with ``Object foreach`` and ``continue``.\n- **Achived 100% test coverage!**\n- Implemented ``*args`` and ``**kwargs`` support for methods and blocks.\n- Removed ``Object`` methods ``print``, ``println``, ``write`` and ``writeln`` in favor of the new builtin ``print`` function in the mio std. lib\n- Added an implemenation of ``map`` to the mio std. lib\n- Fixed a bug with the parser where an argument's previous attribute was not getting set correctly.\n- Reimplemented ``not`` in the mio std. lib and added ``-=``, ``*=`` and ``/=`` operators.\n- Added a ``Object :foo`` (*primitive*) method using the ``:`` operator. This allows us to dig into the host object's internal methods.\n- Added an implementation of ``abs`` builtin using the primitive method.\n- Changed the ``import`` function to return the imported module (*instead of ``None``*) so you can bind imported modules to explicitly bound names.\n- Added ``from`` an alias to ``import`` and ``Module import`` so you can do:\n\n::\n    \n    bar = from(foo) import(bar)\n    \n- Fixed some minor bugs in ``Object foreach`` and ``Object while`` where a ReturnState was not passed up to the callee.\n- Added implementations of ``all`` and ``any`` to the mio std. lib.\n- Added this.mio (The Zen of mio ala Zen of Python)\n- Added List insert method and internal __len__.\n- Moved the implementations of the ``Importer`` and ``Module`` objects to the host language (*Python*).\n- Added support for modifying the ``Importer`` search path.\n- Restructured the mio std. library and moved all bootstrap modules into ./lib/bootstrap\n- Added (almost) Python-style string literal support. Triple Quote, Double, Quote, Single Quote, Short and Long Strings\n- Added support for exponents with number literals.\n- Added internal ``tomio`` and ``frommio`` type converion function.\n- Added an ``FFI`` implementation that hooks directly into the host language (*Python*).\n- Implemented the ``antigravity`` module in mio.\n- Added support for exposing builtin functions as well in the FFI.\n- Simplified the two examples used in the docs and readme and write a simple bash script to profile the factorial example.\n- Changed the calling semantics so that calls to methods/blocks are explicitly made with ``()``.\n- Added a new internal attribute to ``Object`` called ``binding`` used to show the binding of a bound object in repr(s).\n\n\nmio 0.0.3 (*2013-10-20*)\n........................\n\n- Improved test coverage\n- Improved the ``Range`` object\n- Fixed the scoping of ``block`` (s).\n- Fixed the ``write`` and ``writeln`` methods of ``Object`` to not join arguments by a single space.\n- Don't display ``None`` results in the REPL.\n- Improved the ``__repr__`` of the ``File`` object.\n- Added ``open`` and ``with`` builtins to the mio standard library.\n- Implemented a basic import system in the mio standard library.\n- Implemented ``Dict items`` method.\n\n\nmio 0.0.2 (*2013-10-19*)\n........................\n\n- Include lib as package data\n- Allow mio modules to be loaded from anywhere so mio can be more usefully run from anywhere\n- Added bool type converion\n- Improved the documentation and added docs for the grammar\n- Changed Lobby object to be called Root\n- Added an -S option (don't load system libraries).\n- Added unit test around testing for last value with return\n- Refactored Message.eval to be non-recursive\n- Set _ in the context as the last valeu\n- Implemented Blocks and Methods\n- Fixed return/state issue by implementing Object evalArg and Object evalArgAndReturnSelf in Python (not sure why this doesn't work in mio itself)\n- Implemented Object evalArgAndReturnNone\n\n\nmio 0.0.1 (*2013-10-19*)\n........................\n\n- Initial Release", "description_content_type": null, "docs_url": "https://pythonhosted.org/mio-lang/", "download_url": "http://bitbucket.org/prologic/mio-lang/downloads/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/prologic/mio-lang/", "keywords": "toy programming language io mio message", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mio-lang", "package_url": "https://pypi.org/project/mio-lang/", "platform": "POSIX", "project_url": "https://pypi.org/project/mio-lang/", "project_urls": {"Download": "http://bitbucket.org/prologic/mio-lang/downloads/", "Homepage": "http://bitbucket.org/prologic/mio-lang/"}, "release_url": "https://pypi.org/project/mio-lang/0.1.8/", "requires_dist": null, "requires_python": null, "summary": "A Toy Programming Language written in Python", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>mio is a minimalistic IO programming language written in the\n<a href=\"http://www.python.org/\" rel=\"nofollow\">Python Programming Language</a> based on MIo (<em>a port from Ruby to Python</em>)\nin the book <a href=\"http://createyourproglang.com/\" rel=\"nofollow\">How To Create Your Own Freaking Awesome Programming Language</a> by\n<a href=\"http://macournoyer.com/\" rel=\"nofollow\">Marc-Andre Cournoye</a>.</p>\n<p>This project is being developed for educational purposes only and should serve as\na teaching tool for others wanting to learn how to implement your own programming\nlanguage (<em>albeit in the style of Smalltalk, Io, etc</em>). Many thanks go to <a href=\"http://macournoyer.com/\" rel=\"nofollow\">Marc-Andre Cournoye</a>\nand his wonderful book which was a great refresher and overview of the overall processing\nand techniques involved in programming language design and implementation. Thanks also go to the\nguys in the <tt>#io</tt> channel on the FreeNode IRC Network specifically <strong>jer</strong> nad <strong>locks</strong>\nfor their many valuable tips and help.</p>\n<p>The overall goal for this project is to create a fully useable and working programming language\nimplementation of a langauge quite similar to <a href=\"http://iolanguage.com\" rel=\"nofollow\">Io</a> with heavy influence\nfrom <a href=\"http://python.org\" rel=\"nofollow\">Python</a> (<em>because Python is awesome!</em>). This has already largely been\nachived in the current version. See the <a href=\"http://mio-lang.readthedocs.org/en/latest/roadmap.html\" rel=\"nofollow\">RoadMap</a>\nfor what might be coming up next.</p>\n<div>\n<p>Warning</p>\n<p>mio is a new programming language in early <strong>Planning</strong> and <strong>Development</strong>.\nDO NOT USE IN PRODUCTION! USE AT YOUR OWN RISK!</p>\n</div>\n<ul>\n<li>Visit the <a href=\"http://mio-lang.org/\" rel=\"nofollow\">Project Website</a></li>\n<li><a href=\"http://mio-lang.readthedocs.org/en/latest/\" rel=\"nofollow\">Read the Docs</a></li>\n<li><a href=\"http://mio-lang.readthedocs.org/en/latest/tutorial.html\" rel=\"nofollow\">Read the Tutorial</a></li>\n<li>Download it from the <a href=\"https://bitbucket.org/prologic/mio-lang/downloads\" rel=\"nofollow\">Downloads Page</a></li>\n</ul>\n<a href=\"https://crate.io/packages/mio-lang/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad97e330aa4fe86d6a64fc5a56e98eb6bb4e27d5/68747470733a2f2f70797069702e696e2f762f6d696f2d6c616e672f62616467652e706e67\"></a>\n<a href=\"https://crate.io/packages/mio-lang/\" rel=\"nofollow\"><img alt=\"Number of PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa93fc23415f8719a12d2a9a70177dc93cb3a545/68747470733a2f2f70797069702e696e2f642f6d696f2d6c616e672f62616467652e706e67\"></a>\n<a href=\"https://jenkins.shiningpanda-ci.com/prologic/job/mio-lang/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/216ddc2d868e07db7c99e630f22312b2e6b0d8f3/68747470733a2f2f6a656e6b696e732e7368696e696e6770616e64612d63692e636f6d2f70726f6c6f6769632f6a6f622f6d696f2d6c616e672f62616467652f69636f6e\"></a>\n<a href=\"https://requires.io/bitbucket/prologic/mio-lang/requirements/?branch=default\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbf9ba76b881b26e36989923c016654b584fc3b2/68747470733a2f2f72657175697265732e696f2f6269746275636b65742f70726f6c6f6769632f6d696f2d6c616e672f726571756972656d656e74732e706e673f6272616e63683d64656661756c74\"></a>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Factorial:</p>\n<pre>Number fact = method(reduce(block(a, x, a * x), range(1, self)))\n</pre>\n<p>Hello World:</p>\n<pre>print(\"Hello World!\")\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Homoiconic</li>\n<li>Message Passing</li>\n<li>Higher Order Messages</li>\n<li>Higher Order Functions</li>\n<li>Full support for Traits</li>\n<li>Object Orienated Language</li>\n<li>Written in an easy to understand language</li>\n<li>Supports Imperative, Functional, Object Oriented and Behavior Driven Development styles.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The simplest and recommended way to install mio is with pip.\nYou may install the latest stable release from PyPI with pip:</p>\n<pre>&gt; pip install mio-lang\n</pre>\n<p>If you do not have pip, you may use easy_install:</p>\n<pre>&gt; easy_install mio-lang\n</pre>\n<p>Alternatively, you may download the source package from the\n<a href=\"http://pypi.python.org/pypi/mio-lang\" rel=\"nofollow\">PyPI Page</a> or the <a href=\"https://bitbucket.org/prologic/mio-lang/downloads\" rel=\"nofollow\">Downloads page</a> on the <a href=\"http://mio-lang.org/\" rel=\"nofollow\">Project Website</a>;\nextract it and install using:</p>\n<pre>&gt; python setup.py install\n</pre>\n<p>You can also install the\n<a href=\"https://bitbucket.org/prologic/mio-lang/get/tip.tar.gz#egg=mio-lang-dev\" rel=\"nofollow\">latest-development version</a> by using <tt>pip</tt> or <tt>easy_install</tt>:</p>\n<pre>&gt; pip install mio-lang==dev\n</pre>\n<p>or:</p>\n<pre>&gt; easy_install mio-lang==dev\n</pre>\n<p>For further information see the <a href=\"http://mio-lag.readthedocs.org/\" rel=\"nofollow\">mio documentation</a>.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"mio-0-1-8-2013-12-24\">\n<h3>mio 0.1.8 (<em>2013-12-24</em>)</h3>\n<ul>\n<li>Implemented <tt>caller()</tt> [<strong>functools</strong>]</li>\n<li>Fixed parser support for <tt>[1] + [2]</tt> \u2013&gt; <tt><span class=\"pre\">[](1}</span> <span class=\"pre\">+([](2))</span></tt></li>\n<li>Fixed <tt>List extend()</tt> to take another list, not <tt>*args</tt>.</li>\n<li>Implemented <tt>+</tt> List operator.</li>\n<li>Implemented <tt>min</tt> and <tt>max</tt> and added to the mio std. lib.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-7-2013-12-09\">\n<h3>mio 0.1.7 (<em>2013-12-09</em>)</h3>\n<ul>\n<li>Fixed <tt>Object evalArg()</tt> so it can take zero arguments and return <tt>None</tt>. e.g: <tt>() a</tt></li>\n<li>Implemented <tt>identity()</tt> and <tt>constantly()</tt> in <tt>functools</tt> std. lib and added unit tests.</li>\n<li>Fixed typos in <tt>operators</tt> module.</li>\n<li>Moved all trait related user methods to <tt>TAdaptable</tt> core trait.</li>\n<li>Added <tt>adapt()</tt> method to <tt>TAdaptable</tt>.</li>\n</ul>\n<div>\n<p>Note</p>\n<p>This is more or less an alias of <tt>use()</tt> except the object\nbeing adapted is cloned and the original left in tact. The\nadaptation is therefore temporary.</p>\n</div>\n<ul>\n<li>Added support for contextually aware tab completion.</li>\n<li>Test Coverage back up to 100%</li>\n</ul>\n</div>\n<div id=\"mio-0-1-6-2013-12-04\">\n<h3>mio 0.1.6 (<em>2013-12-04</em>)</h3>\n<ul>\n<li>Added support for packaging Python <a href=\"http://pythonwheels.com/\" rel=\"nofollow\">wheels</a>.</li>\n<li>Define a default <tt>init()</tt> method on <tt>Object</tt> and just make <tt>TCloneable init()</tt> just call <tt>init()</tt>.</li>\n<li>Added <tt>String strip()</tt> method.</li>\n<li>Make <tt>String</tt> use <tt>TIterable</tt>.</li>\n<li>Implemented <tt>input()</tt> builtin.</li>\n<li>Implemented a special object <tt>Trait</tt> which all traits are cloend from.<ul>\n<li>This means traits now cannot contain state and a <tt>TypeError</tt> is raised.</li>\n<li>Objects can only use or add traits that are inherited from the <tt>Trait</tt> object.</li>\n</ul>\n</li>\n</ul>\n<p>A simple trait thus looks like:</p>\n<pre>TFoo = Trait clone() do (\n    foo = method(\n        print(\"Foo!\")\n    )\n)\n</pre>\n<ul>\n<li>Implemented <tt>Trait requires()</tt> so that traits can declare the names of methods and attribute they depend on.</li>\n</ul>\n<p>e.g:</p>\n<pre>TGreetable = Trait clone() do (\n    requires(\"name\")\n\n    hello = method(\n        print(\"Hello \", self name)\n    )\n)\n\nWorld = Object clone() do (\n    name = \"World!\"\n    uses(TGreetable)\n)\n\nWorld hello()\n</pre>\n<ul>\n<li>Added conflict resolution for traits.</li>\n<li>Remvoed <tt>uses</tt> in favor of single <tt>use(trait, resolution)</tt> where <strong>resolution</strong> is a dict of key-&gt;value pairs that rename\nconflicting methods of the trait being used.</li>\n<li>Make <tt>Object hasTrait()</tt> lookup the parent chain.</li>\n<li>Abuse the <tt>is</tt> method of <tt>TComparble</tt> to be used as short-cut for: <tt>foo hasTrait(TFoo)</tt>.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-5-2013-11-28\">\n<h3>mio 0.1.5 (<em>2013-11-28</em>)</h3>\n<ul>\n<li>Don\u2019t look into <tt>builtins</tt> module for the tab-completer function of the REPL if there are no builtins. i.e: <tt>mio <span class=\"pre\">-S</span></tt></li>\n<li>Added a nice big shiny red warning about mio\u2019s status.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-4-2013-11-27\">\n<h3>mio 0.1.4 (<em>2013-11-27</em>)</h3>\n<ul>\n<li>Added \u201cFunctions\u201d to the tutorial.</li>\n<li>Added \u201cObjects\u201d to the tutorial.</li>\n<li>Added \u201cTraits\u201d to the tutorial.</li>\n<li>Added the start of a small <tt>functools</tt> library to the mio std. lib.</li>\n<li>Added <tt>test_builtins</tt> to mio. std library as a tests package.</li>\n<li>Added operators module to mio std. lib.</li>\n<li>Rought cut of generators implemented in CPython and mio.</li>\n<li>Implemented <tt>KeyError</tt> exception type and used this to guard non-existent key lookups on dicts.</li>\n<li>Somewhat improved the error handling and tracebacks.</li>\n<li>Improved the way generators work.</li>\n<li>Added <tt>yield</tt> to the mio std lib builtins.</li>\n<li>Added <tt>TypeError</tt> guard around opening non-files with the <tt>Path</tt> object.</li>\n<li>Rewrote the tutorial to utilize <tt><span class=\"pre\">sphinxcontrib-autorun</span></tt> extension with custom <tt>miointerpreter.py</tt> module.</li>\n<li>Improved REPL continuation output of unclosed parens.</li>\n<li>Removed docs dependencies of unused sphinx extensions.</li>\n<li>Added <tt>mio.state.State.runsource()</tt> which simplifies <tt>mio.state.State.repl()</tt> a bit and allows our custom <tt><span class=\"pre\">sphinxcontrib-autorun</span></tt> ext to work.</li>\n<li>Added API Docs.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-3-2013-11-19\">\n<h3>mio 0.1.3 (<em>2013-11-19</em>)</h3>\n<ul>\n<li>Fixed tutorial by writing a bash script that generates it (<em>Read the Docs forbids program-output extension</em>).</li>\n</ul>\n</div>\n<div id=\"mio-0-1-2-2013-11-19\">\n<h3>mio 0.1.2 (<em>2013-11-19</em>)</h3>\n<ul>\n<li>Moved <tt>File</tt> from types to core.</li>\n<li>Allow multiple <tt><span class=\"pre\">-e</span> expr</tt> options to be given on the CLI.</li>\n<li>Implemented <tt>len</tt> builtin.</li>\n<li>Implemented <tt>List remove()</tt> method.</li>\n<li>Implemented <tt>String split()</tt> method.</li>\n<li>Implemented <tt>String __getitem__()</tt> and <tt>String __len__()</tt> methods.</li>\n<li>Implemented <tt>Bytes __getitem__()</tt> and <tt>Bytes __len__()</tt> methods.</li>\n<li>Added <tt>[]</tt> syntactic sugar to <tt>Bytes</tt> and <tt>String</tt> objects.</li>\n<li>Wrote a basic <a href=\"http://mio-lang.readthedocs.org/en/latest/tutorial.html\" rel=\"nofollow\">mio tutorial</a></li>\n<li>Updated the factorial example to be a little clearer.</li>\n<li>Improved Test Coverage of new features and objects.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-1-2013-11-18\">\n<h3>mio 0.1.1  (<em>2013-11-18</em>)</h3>\n<ul>\n<li>The beginnings of a testing framework.</li>\n<li>Implemented unit tests for mio builtins: <tt>abs</tt>, <tt>all</tt> and <tt>any</tt>.</li>\n<li>Added paren detection to the REPL so you start write long functions over multiple lines. (<em>Borrowed from: https://bitbucket.org/pypy/lang-scheme/src/b1d5a1b8744f3c7c844775cb420c1a5d4c584592/scheme/interactive.py?at=default</em>).</li>\n<li>Added basic tab completion support to the REPL.</li>\n</ul>\n<div>\n<p>Note</p>\n<p>This is not context aware and build up a list of known objects from <tt>Root</tt>, <tt>Types</tt>, <tt>Core</tt> and <tt>builtins</tt>.</p>\n</div>\n<ul>\n<li>Many RPython compilation issues fixed.</li>\n<li>Implemented <tt>Path</tt> object.</li>\n</ul>\n</div>\n<div id=\"mio-0-1-2013-11-14\">\n<h3>mio 0.1 (<em>2013-11-14</em>)</h3>\n<ul>\n<li>Updated factorial examples</li>\n<li>Added support for and a <tt>fab compile</tt> task for compiling mio with RPython</li>\n</ul>\n<div>\n<p>Warning</p>\n<p>This does not work yet!</p>\n</div>\n<ul>\n<li>Changed the way results are printed on the REPL by implementing a <tt><span class=\"pre\">format_value(...)</span></tt> utility function.</li>\n<li>Added <tt>assert</tt> as a special name (<em>operator</em>).</li>\n<li>Added optional message argument to <tt>assert</tt>.</li>\n<li>Improved repr of <tt>Core</tt> and <tt>Types</tt> objects.</li>\n<li>Fixed a bug in the parser so that we can use <tt>[]</tt> and <tt>{}</tt> as methods.</li>\n</ul>\n<pre>xs = [1, 2, 3, 4]\nxs[0]\n</pre>\n<ul>\n<li>Implemented dict literals.</li>\n</ul>\n<pre>{\"a\": 1, \"b\": 2}\n</pre>\n<div>\n<p>Note</p>\n<p>This only works with keys as strings for the moment.</p>\n</div>\n<ul>\n<li>Added a <tt>hash</tt> builtin.</li>\n<li>Improved <tt>{}</tt> dict literal so that any hashable keys can be used.</li>\n</ul>\n<div>\n<p>Note</p>\n<p>Like Python this means any object whoose <tt>__hash__()</tt> method\nreturns a non-<tt>None</tt> value.</p>\n</div>\n<ul>\n<li>Fixed <tt>any</tt> and <tt>all</tt> builtins.</li>\n<li>IMplemented <tt>in</tt> method of <tt>TComparable</tt></li>\n</ul>\n<pre>1 in(1, 0)\n</pre>\n<ul>\n<li>Changed the semantics of closures.<ul>\n<li><tt>this</tt> is a new attribute of <tt>Locals</tt> that always references the\ncurrent block scope.</li>\n<li><tt>self</tt> is a reference to the current object in scope (<em>if there is one</em>).</li>\n</ul>\n</li>\n</ul>\n<div>\n<p>Warning</p>\n<p>This behavior may change as I\u2019m not 100% happy with this.</p>\n</div>\n<div>\n<p>Note</p>\n<p>This is sort of a work-around to allow blocks to access the\ncurrently scoped object <tt>self</tt> inside the scope of a method\nor nested blocks within a method.</p>\n</div>\n</div>\n<div id=\"mio-0-0-9-2013-11-10\">\n<h3>mio 0.0.9 (<em>2013-11-10</em>)</h3>\n<ul>\n<li>Fixed <tt>[]</tt> syntax for creating lists.</li>\n<li>Fixed <tt>TIterable foreac</tt> to work more like a for loop.</li>\n<li>Introduced properties for internal Python Functions exposed to mio.</li>\n<li>Adopted calling with <tt><span class=\"pre\">(...)</span></tt>\u2019s for all methods.</li>\n<li>Also format functions in <tt><span class=\"pre\">format_object(...)</span></tt>.</li>\n<li>Added <tt>__call__</tt> to <tt>Error</tt> objects. This allows:</li>\n</ul>\n<pre>raise TypeError(\"foo\")\n</pre>\n<ul>\n<li>Added iterator support for <tt>Range</tt> object.</li>\n<li>Renamed <tt>str</tt> and <tt>repr</tt> methods of <tt>Object</tt> to <tt>__str__</tt> and <tt>__str__</tt> respectively and implemtned <tt>str</tt> and <tt>repr</tt> builtins.</li>\n<li>Optimized the tokenizer</li>\n<li>Added <tt>ifError</tt>, <tt>ifNonError</tt> and <tt>catch</tt> to the <tt>Object</tt> object to deal with non-errors.</li>\n<li>Improved and fixed a lot of the builtins.</li>\n<li>Improved the way <tt>*args</tt> is handled (<em>still needs more work</em>).</li>\n<li>Implemented <tt>assert</tt> builtin.</li>\n</ul>\n</div>\n<div id=\"mio-0-0-8-2013-11-07\">\n<h3>mio 0.0.8 (<em>2013-11-07</em>)</h3>\n<ul>\n<li>Removed operator precedence parsing.<ul>\n<li>Operator precedence is <strong>HARD</strong></li>\n<li>Operator precedence rules hare <strong>HARD</strong> to remember</li>\n<li>Operator precedence is not the main goal of mio right now.</li>\n</ul>\n</li>\n<li>Tidied up the builtins module.</li>\n<li><tt>from foo import *</tt> works again (<em>operator precedence parsing broke it</em>).</li>\n</ul>\n</div>\n<div id=\"mio-0-0-7-2013-11-06\">\n<h3>mio 0.0.7 (<em>2013-11-06</em>)</h3>\n<ul>\n<li>Added rudamentary stack trace support to errors. A somewhat \u201cokay\u201d stack trace is displayed on error(s).</li>\n<li>Added <tt>String format</tt> method for performing string iterpolation. Only supports <tt>{0}</tt>, <tt>{1}</tt>, etc.</li>\n<li>Implemented <tt>ListIterator</tt> iterable object with <tt>iter</tt> added to mio std. lib. This works similiarly to Python\u2019s iterators:</li>\n</ul>\n<pre>mio&gt; xs = [1, 2, 3, 4]\n===&gt; list(1, 2, 3, 4)\nmio&gt; it = iter(xs)\n===&gt; ListIterator(list(1, 2, 3, 4))\nmio&gt; it next()\n===&gt; 1\nmio&gt; it next()\n===&gt; 2\nmio&gt; it next()\n===&gt; 3\nmio&gt; it next()\n===&gt; 4\n</pre>\n<p>A further iteration would result in:</p>\n<pre>mio&gt; it next()\n\n  StopIteration:\n  --------------\n  next\nifFalse(\n raise(StopIteration)\n)\n\nraise(StopIteration)\n</pre>\n<ul>\n<li>Re-implemented <tt>return</tt> function as part of the mio std. lib.</li>\n<li>Don\u2019t allow <tt>return</tt> to be called outside of a <tt>Block</tt> (<em>block/method</em>) as this is illegal.</li>\n<li>Implemented <tt>while</tt> builtin as part of the mio std. lib.\n(<em>no break or continue support yet</em>)</li>\n<li>Implemented <tt>loop</tt> builtin as part of the mio std. lib.\n(<em>no break or continue support yet</em>)</li>\n<li>Implemented basic support for reshuffling messages before chaining to support <tt>x is not None</tt> \u2013&gt; <tt>not(x is None)</tt>.</li>\n<li>Finally implemented operator precedence support (<em>which seems to cover most edge cases</em>).</li>\n</ul>\n<div>\n<p>Note</p>\n<p>Need to write lots of unit tests for this!</p>\n</div>\n<ul>\n<li>Fixed all found edge cases with the new operator precedence lexer/parser.</li>\n<li>Improved <tt>Error</tt> object and added <tt>Error catch</tt> method for catching errors.</li>\n<li>Implemented <tt>reduce</tt> builtin.</li>\n<li>Implemented TComparable trait</li>\n<li>Implemented TCloneable trait</li>\n<li>Iterpret <tt>call message args</tt> to mean \u201cpass all args to the callable\u201d</li>\n<li>Imroved Dict and List objects.</li>\n<li>Implemented <tt>__call__</tt> calling semantics whereby an object can implement this as a method and <tt>Foo()</tt> will invoke <tt>Foo __call__</tt> if it exists.</li>\n<li>IMplemented the <tt>__get__</tt> part of the Data Descriptor protocol.</li>\n</ul>\n</div>\n<div id=\"mio-0-0-6-2013-11-02\">\n<h3>mio 0.0.6 (<em>2013-11-02</em>)</h3>\n<ul>\n<li>Allow an optional object to be passed to the <tt>Object id</tt> method.</li>\n<li>Implemented <tt>hex</tt> builtin.</li>\n<li>Implemented <tt>Bytes</tt> and <tt>Tuple</tt> objects.</li>\n<li>Implemented <tt>State</tt> core object and sample <tt>loop</tt> builtin (<em>in testing</em>).</li>\n<li>Refactored all of the context state management code (<em>stopStatus</em>) and exposed it to the end user.<ul>\n<li>This means we can now write flow based constructs such as loops directly in mio.</li>\n</ul>\n</li>\n<li>Fixed a minor bug in the parser where <tt>not(0) <span class=\"pre\">ifTrue(print(\"foo\"))</span></tt> would parse as <tt>not(0, <span class=\"pre\">ifTrue(print(\"foo\")))</span></tt></li>\n<li>Fixed a minor bug in the parser where <tt>isError</tt> would parse as <tt>is(Error)</tt>. Parse identifiers before operators.</li>\n<li>Implemented basic excpetion handling and error object(s) (<em>no stack traces yet</em>).</li>\n<li>Moved <tt>exit</tt> to builtins.</li>\n<li>Moved the setting of <tt>.binding</tt> attribute to <tt>Object</tt> <tt>set/del</tt> methods.</li>\n<li>Added support for <tt>..</tt> operator and added this to <tt>Number</tt>. This allows you to write:</li>\n</ul>\n<pre>x = 1 .. 5  # a Range from 1 to 5\n</pre>\n<ul>\n<li>Added <tt>+</tt> and <tt>-</tt> operators to the <tt>Range</tt> object so you can do things like:</li>\n</ul>\n<pre>x = (1 .. 5) + 2  # a Range from 1 to 5 in increment of 2\n</pre>\n<ul>\n<li>Changed default REPL prompt to:</li>\n</ul>\n<pre>$ mio\nmio 0.0.6.dev\nmio&gt;\n</pre>\n<ul>\n<li>Implemented <tt>sum</tt> builtin.</li>\n<li>Added <tt>try</tt> and <tt>raise</tt> builtins. (<em>``raise`` is not implemented yet\u2026</em>).</li>\n<li>Added support for User level Error(s) and implemented <tt>Exception raise</tt></li>\n<li>Replaced <tt>Continuation call</tt> with activatable object semantics. This means:</li>\n</ul>\n<pre>c = Continuation current()\nprint(\"foo\")\nc()\n</pre>\n<ul>\n<li><tt>Object evalArg</tt> should evaluate the argument with context as the receiver.</li>\n<li>Added <tt>List __getitem__</tt> and <tt>List __len__</tt> methods.</li>\n<li>Added <tt>TIterable</tt> trait to the mio bootstrap library and added this to <tt>List</tt>.</li>\n<li>Removed <tt>foreach</tt>, <tt>whilte</tt>, <tt>continue</tt>, <tt>break</tt> and <tt>return</tt> <tt>Object</tt> methods. These will be re-implemented as traits and builtins.</li>\n<li>Changed the way the parser parses and treats operators. They are no longer parsed in a deep right tree.</li>\n</ul>\n<p>Example:</p>\n<pre>1 + 2 * 3\n</pre>\n<p>OLD:</p>\n<pre>1 +(2 *(3))\n</pre>\n<p>NEW:</p>\n<pre>1 +(2) *(3)\n</pre>\n<ul>\n<li>This will probably make reshuffling and therefore implementing operator precedence a lot easier.</li>\n<li>This also makes the following expressions possible (<em>used in the builtins module</em>):</li>\n</ul>\n<pre>from foo import *\n</pre>\n<ul>\n<li>Added <tt>TypeError</tt>, <tt>KeyError</tt> and <tt>AttributeError</tt> to the mio std. lib.</li>\n<li>Made it possible to import members from a module with: <tt>from foo import bar</tt></li>\n</ul>\n</div>\n<div id=\"mio-0-0-5-2013-10-29\">\n<h3>mio 0.0.5 (<em>2013-10-29</em>)</h3>\n<ul>\n<li>Split up core into core and types.</li>\n<li>Re-implemented <tt>True</tt>, <tt>False</tt> and <tt>None</tt> in mio.</li>\n<li>Implemented <tt>bin</tt> builtin.</li>\n<li>Implemented <tt>bool</tt> builtin.</li>\n<li>Implemented <tt>callable</tt> builtin.</li>\n<li>Implemented <tt>cha</tt> builtin.</li>\n<li>IMplemented <tt>from</tt> and <tt>import</tt> builtins.</li>\n<li>Make the <tt>Object pimitive</tt> <tt>:foo</tt> method return the internal Python data type.</li>\n<li>Fixed the <tt>abs</tt> builtin to return an newly cloned Number.</li>\n<li>Implemented support for packages ala Python.</li>\n<li>Restructured the mio std. lib</li>\n<li>mio nwo bootstraps itself via an import of the \u201cbootstrap\u201d package.</li>\n<li>Reimplemented <tt>Object clone</tt> in the mio std. lib.</li>\n</ul>\n</div>\n<div id=\"mio-0-0-4-2013-10-27\">\n<h3>mio 0.0.4 (<em>2013-10-27</em>)</h3>\n<ul>\n<li>Moved the implementation of <tt>super</tt> to the mio std. lib</li>\n<li>Only set <tt>_</tt> as the last result in the Root object (<em>the Lobby</em>)</li>\n<li>Added support for <tt>()</tt>, <tt>[]</tt> and <tt>{}</tt> special messages that can be used to define syntactic suguar for lists, dicts, etc.</li>\n<li>Implemented <tt>Dict</tt> object type and <tt>{a=1, b=2}</tt> syntactic sugar to the builtint (<em>mio std. lib</em>) <tt>dict()</tt> method.</li>\n<li>Refactored the <tt>File</tt> object implementation and made it\u2019s repr more consistent with other objects in mio.</li>\n<li>Fixed keyword argument support.</li>\n<li>Fixed a few minor bugs in the <tt>Message</tt> object and improved test coverage.</li>\n<li>Added <tt>?</tt> as a valid operator and an implementation of <tt>Object <span class=\"pre\">?message</span></tt> in the mio std. lib.</li>\n<li>Fixed a bug with <tt>Range</tt>\u2019s internal iterator causing <tt>Range asList</tt> not to work.</li>\n<li>Fixed a bug with <tt>Object foreach</tt> and <tt>continue</tt>.</li>\n<li><strong>Achived 100% test coverage!</strong></li>\n<li>Implemented <tt>*args</tt> and <tt>**kwargs</tt> support for methods and blocks.</li>\n<li>Removed <tt>Object</tt> methods <tt>print</tt>, <tt>println</tt>, <tt>write</tt> and <tt>writeln</tt> in favor of the new builtin <tt>print</tt> function in the mio std. lib</li>\n<li>Added an implemenation of <tt>map</tt> to the mio std. lib</li>\n<li>Fixed a bug with the parser where an argument\u2019s previous attribute was not getting set correctly.</li>\n<li>Reimplemented <tt>not</tt> in the mio std. lib and added <tt><span class=\"pre\">-=</span></tt>, <tt>*=</tt> and <tt>/=</tt> operators.</li>\n<li>Added a <tt>Object :foo</tt> (<em>primitive</em>) method using the <tt>:</tt> operator. This allows us to dig into the host object\u2019s internal methods.</li>\n<li>Added an implementation of <tt>abs</tt> builtin using the primitive method.</li>\n<li>Changed the <tt>import</tt> function to return the imported module (<em>instead of ``None``</em>) so you can bind imported modules to explicitly bound names.</li>\n<li>Added <tt>from</tt> an alias to <tt>import</tt> and <tt>Module import</tt> so you can do:</li>\n</ul>\n<pre>bar = from(foo) import(bar)\n</pre>\n<ul>\n<li>Fixed some minor bugs in <tt>Object foreach</tt> and <tt>Object while</tt> where a ReturnState was not passed up to the callee.</li>\n<li>Added implementations of <tt>all</tt> and <tt>any</tt> to the mio std. lib.</li>\n<li>Added this.mio (The Zen of mio ala Zen of Python)</li>\n<li>Added List insert method and internal __len__.</li>\n<li>Moved the implementations of the <tt>Importer</tt> and <tt>Module</tt> objects to the host language (<em>Python</em>).</li>\n<li>Added support for modifying the <tt>Importer</tt> search path.</li>\n<li>Restructured the mio std. library and moved all bootstrap modules into ./lib/bootstrap</li>\n<li>Added (almost) Python-style string literal support. Triple Quote, Double, Quote, Single Quote, Short and Long Strings</li>\n<li>Added support for exponents with number literals.</li>\n<li>Added internal <tt>tomio</tt> and <tt>frommio</tt> type converion function.</li>\n<li>Added an <tt>FFI</tt> implementation that hooks directly into the host language (<em>Python</em>).</li>\n<li>Implemented the <tt>antigravity</tt> module in mio.</li>\n<li>Added support for exposing builtin functions as well in the FFI.</li>\n<li>Simplified the two examples used in the docs and readme and write a simple bash script to profile the factorial example.</li>\n<li>Changed the calling semantics so that calls to methods/blocks are explicitly made with <tt>()</tt>.</li>\n<li>Added a new internal attribute to <tt>Object</tt> called <tt>binding</tt> used to show the binding of a bound object in repr(s).</li>\n</ul>\n</div>\n<div id=\"mio-0-0-3-2013-10-20\">\n<h3>mio 0.0.3 (<em>2013-10-20</em>)</h3>\n<ul>\n<li>Improved test coverage</li>\n<li>Improved the <tt>Range</tt> object</li>\n<li>Fixed the scoping of <tt>block</tt> (s).</li>\n<li>Fixed the <tt>write</tt> and <tt>writeln</tt> methods of <tt>Object</tt> to not join arguments by a single space.</li>\n<li>Don\u2019t display <tt>None</tt> results in the REPL.</li>\n<li>Improved the <tt>__repr__</tt> of the <tt>File</tt> object.</li>\n<li>Added <tt>open</tt> and <tt>with</tt> builtins to the mio standard library.</li>\n<li>Implemented a basic import system in the mio standard library.</li>\n<li>Implemented <tt>Dict items</tt> method.</li>\n</ul>\n</div>\n<div id=\"mio-0-0-2-2013-10-19\">\n<h3>mio 0.0.2 (<em>2013-10-19</em>)</h3>\n<ul>\n<li>Include lib as package data</li>\n<li>Allow mio modules to be loaded from anywhere so mio can be more usefully run from anywhere</li>\n<li>Added bool type converion</li>\n<li>Improved the documentation and added docs for the grammar</li>\n<li>Changed Lobby object to be called Root</li>\n<li>Added an -S option (don\u2019t load system libraries).</li>\n<li>Added unit test around testing for last value with return</li>\n<li>Refactored Message.eval to be non-recursive</li>\n<li>Set _ in the context as the last valeu</li>\n<li>Implemented Blocks and Methods</li>\n<li>Fixed return/state issue by implementing Object evalArg and Object evalArgAndReturnSelf in Python (not sure why this doesn\u2019t work in mio itself)</li>\n<li>Implemented Object evalArgAndReturnNone</li>\n</ul>\n</div>\n<div id=\"mio-0-0-1-2013-10-19\">\n<h3>mio 0.0.1 (<em>2013-10-19</em>)</h3>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 953799, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "012eaf60d3d452304057a126446a6719", "sha256": "71d4877d00e43e423b99186e80fd4bf3cf0460d2ed067672f435e4aab14f684b"}, "downloads": -1, "filename": "mio_lang-0.0.1-py2.7.egg", "has_sig": false, "md5_digest": "012eaf60d3d452304057a126446a6719", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 71969, "upload_time": "2013-10-13T07:33:26", "upload_time_iso_8601": "2013-10-13T07:33:26.633992Z", "url": "https://files.pythonhosted.org/packages/9d/7b/20df7ddb980687767370b1b169ec4bed7f43ae893f740aec2cd719397c47/mio_lang-0.0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ce43b4d752d822138fc1e9f1ee2342", "sha256": "0f438bcb3389ba5b9774e83f7375aeb1ec54c33c5a1e2476e02ec23836a21a5d"}, "downloads": -1, "filename": "mio-lang-0.0.1.tar.gz", "has_sig": false, "md5_digest": "74ce43b4d752d822138fc1e9f1ee2342", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101510, "upload_time": "2013-10-13T07:33:23", "upload_time_iso_8601": "2013-10-13T07:33:23.735132Z", "url": "https://files.pythonhosted.org/packages/b4/36/9c7ca1c5bb57d5541156a87d31d24c31ec0ec122b4867ee8f16642eaf150/mio-lang-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b4f3a11a966ec15ccc7cf1198e9cbd63", "sha256": "437845c9774d816430a70a834bf44b379d6e7b59726d94203821e5193ed62ae1"}, "downloads": -1, "filename": "mio_lang-0.0.2-py2.7.egg", "has_sig": false, "md5_digest": "b4f3a11a966ec15ccc7cf1198e9cbd63", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 108211, "upload_time": "2013-10-19T03:45:08", "upload_time_iso_8601": "2013-10-19T03:45:08.995668Z", "url": "https://files.pythonhosted.org/packages/44/5c/762664323bdb8577d5a982001ddb9627a4079e669b2dbf25d4552d81a33c/mio_lang-0.0.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b82af0992461730d89a8faae38871ed8", "sha256": "772352864f6ee7d3e1b7de5b855ecdfc3eff5ba0f5600692ec8ae0a53f9e2905"}, "downloads": -1, "filename": "mio-lang-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b82af0992461730d89a8faae38871ed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159862, "upload_time": "2013-10-19T03:45:04", "upload_time_iso_8601": "2013-10-19T03:45:04.650451Z", "url": "https://files.pythonhosted.org/packages/cf/4d/f0d67952a940d2fe3669e45f8657c09ecaed11cebbae95fcd24ba9d60f49/mio-lang-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9fe94a7c3e493d5640807feed6ee01f3", "sha256": "4ac1f457299f16f1295e567229dfc326ba32c48fa92ea460c808c9764e6fa9d3"}, "downloads": -1, "filename": "mio_lang-0.0.3-py2.7.egg", "has_sig": false, "md5_digest": "9fe94a7c3e493d5640807feed6ee01f3", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 120245, "upload_time": "2013-10-20T03:17:57", "upload_time_iso_8601": "2013-10-20T03:17:57.550311Z", "url": "https://files.pythonhosted.org/packages/96/9b/5efe14dfd7b16a2c34a3560947c90571fd7119bcbf6512ecd5ea38bcac0d/mio_lang-0.0.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "90ec51045c71063046d63844f58516f4", "sha256": "57c105c11195efd71ea4bf1f3e4e364a4beb9c9c115175b936869e4d3919921b"}, "downloads": -1, "filename": "mio-lang-0.0.3.tar.gz", "has_sig": false, "md5_digest": "90ec51045c71063046d63844f58516f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175042, "upload_time": "2013-10-20T03:17:52", "upload_time_iso_8601": "2013-10-20T03:17:52.416635Z", "url": "https://files.pythonhosted.org/packages/f3/f3/1bb6db8588ea5009c49cadd4540cd5d96da8521ad1a399bd7dc0ede9d207/mio-lang-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "9acbcdbf8d3af3fc9a99b4a995d3d4ca", "sha256": "d2404b7b59c725bd956a0a13764d259d4a28970961ab59c7567e205294b891b9"}, "downloads": -1, "filename": "mio_lang-0.0.4-py2.7.egg", "has_sig": false, "md5_digest": "9acbcdbf8d3af3fc9a99b4a995d3d4ca", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 172824, "upload_time": "2013-10-27T06:29:28", "upload_time_iso_8601": "2013-10-27T06:29:28.170161Z", "url": "https://files.pythonhosted.org/packages/c9/3e/e157a2ab632404334f14c725ccb5b09128f4809a812333cddf5bae7939b9/mio_lang-0.0.4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eca7f6192125752126c2d49d52b7ef1", "sha256": "d7178074ab2c06b5f222665bc8f6ca2e0aaebf12e984e9dbfb836921e2af1a10"}, "downloads": -1, "filename": "mio-lang-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7eca7f6192125752126c2d49d52b7ef1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 220169, "upload_time": "2013-10-27T06:29:23", "upload_time_iso_8601": "2013-10-27T06:29:23.125002Z", "url": "https://files.pythonhosted.org/packages/b3/64/ea48bcc3ad1f061126dfff13420448fd28fa9a036a705f20dd28259e3a47/mio-lang-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "48651a5910d08c4fa6fce8c5cf6070fb", "sha256": "a17e301eff4faf7f394705fed4b783197e494d062a679728c5820167b638cd06"}, "downloads": -1, "filename": "mio_lang-0.0.5-py2.7.egg", "has_sig": false, "md5_digest": "48651a5910d08c4fa6fce8c5cf6070fb", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 249482, "upload_time": "2013-10-29T13:26:33", "upload_time_iso_8601": "2013-10-29T13:26:33.130527Z", "url": "https://files.pythonhosted.org/packages/61/4b/b85170d5a649cfc832b8da403b0bfa2a6759676e898ceba18c0f65aca10c/mio_lang-0.0.5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "042777e248804b3114d1ca99a7fd2d2e", "sha256": "4f71d08f9646d41aaa0b8d68babb1e333aa91ad9914fbb384ef8a28f205f59e8"}, "downloads": -1, "filename": "mio-lang-0.0.5.tar.gz", "has_sig": false, "md5_digest": "042777e248804b3114d1ca99a7fd2d2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 279597, "upload_time": "2013-10-29T13:26:27", "upload_time_iso_8601": "2013-10-29T13:26:27.802415Z", "url": "https://files.pythonhosted.org/packages/c0/95/fae501fcad544644cd141a37da3517110370cec079d3b252e62e09925101/mio-lang-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "1a890069c0dfad303fb29b3eb461cff5", "sha256": "f37ec9a69fee8574b0ac7873048e55ca5a4dad247b2b3f9f9129c181c0387dec"}, "downloads": -1, "filename": "mio_lang-0.0.6-py2.7.egg", "has_sig": false, "md5_digest": "1a890069c0dfad303fb29b3eb461cff5", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 187241, "upload_time": "2013-11-02T06:02:40", "upload_time_iso_8601": "2013-11-02T06:02:40.699995Z", "url": "https://files.pythonhosted.org/packages/75/f7/c3179f2e2fd619d13f87a71ae886e6aed51f8aec72dbe23e999cce596078/mio_lang-0.0.6-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cee1e92fe2d2dc3afb3ea263422516ec", "sha256": "9fe599efb14c47e7c6cef70440b371b0975d3944700f88829cfd8ac49b1befc8"}, "downloads": -1, "filename": "mio-lang-0.0.6.tar.gz", "has_sig": false, "md5_digest": "cee1e92fe2d2dc3afb3ea263422516ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236456, "upload_time": "2013-11-02T06:02:36", "upload_time_iso_8601": "2013-11-02T06:02:36.221916Z", "url": "https://files.pythonhosted.org/packages/a5/b4/5fb40f66ea08445717f17e6bb93fd157a77eb7b0c54d83c4b71aeee754e2/mio-lang-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "59997dbfc631ad0e4141b99af99506b7", "sha256": "26e6b0a1410a9152c4268ddd972318a70510a6e8c408b9813efa9dfc80d04f60"}, "downloads": -1, "filename": "mio_lang-0.0.7-py2.7.egg", "has_sig": false, "md5_digest": "59997dbfc631ad0e4141b99af99506b7", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 195359, "upload_time": "2013-11-06T11:45:54", "upload_time_iso_8601": "2013-11-06T11:45:54.062911Z", "url": "https://files.pythonhosted.org/packages/9e/d6/00d3dd62d0e120305f89b97fe42003fceda2e5fe7322ae6f6494de5ffea0/mio_lang-0.0.7-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "07bfc21c5042faf062457133513de256", "sha256": "89243bca51390ac1b5c633567153758270bdf2075a80850900e2874641ff1a4f"}, "downloads": -1, "filename": "mio-lang-0.0.7.tar.gz", "has_sig": false, "md5_digest": "07bfc21c5042faf062457133513de256", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 249330, "upload_time": "2013-11-06T11:45:49", "upload_time_iso_8601": "2013-11-06T11:45:49.296025Z", "url": "https://files.pythonhosted.org/packages/31/61/458bbd01655293b70210ec75f28fb31f98d2cd7faae75d1deb103de256d5/mio-lang-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "ad9c04f307387c81fa5f089ed577a8c9", "sha256": "1c7e9d72955abe34a985a080f776a2eb3b59c759b0656574bf10d17fa51b5e03"}, "downloads": -1, "filename": "mio_lang-0.0.8-py2.7.egg", "has_sig": false, "md5_digest": "ad9c04f307387c81fa5f089ed577a8c9", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 194256, "upload_time": "2013-11-07T12:09:12", "upload_time_iso_8601": "2013-11-07T12:09:12.891255Z", "url": "https://files.pythonhosted.org/packages/0f/9f/1f172656d4ac2c6d08aa80ac70a9d93216ad8b8ee6ba18907f171a4d8142/mio_lang-0.0.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "247e42b5a156cdd0ae5f416258830609", "sha256": "370371722b0469af31fbd97aa113716bf566814a47206a790347c665051989c0"}, "downloads": -1, "filename": "mio-lang-0.0.8.tar.gz", "has_sig": false, "md5_digest": "247e42b5a156cdd0ae5f416258830609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 249231, "upload_time": "2013-11-07T12:09:07", "upload_time_iso_8601": "2013-11-07T12:09:07.382953Z", "url": "https://files.pythonhosted.org/packages/16/0b/26438c34b460996811b93961526aaa30831d5785f3753e80df7243fa6da3/mio-lang-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "99e7e61c75e5f99452c06a1d1487cf35", "sha256": "2ac394ac2032dd776083ea57383da3b32e8b91fc59fe76057fd5e493dca9f83e"}, "downloads": -1, "filename": "mio_lang-0.0.9-py2.7.egg", "has_sig": false, "md5_digest": "99e7e61c75e5f99452c06a1d1487cf35", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 198908, "upload_time": "2013-11-09T23:58:15", "upload_time_iso_8601": "2013-11-09T23:58:15.423655Z", "url": "https://files.pythonhosted.org/packages/5c/2c/f61dc9b7fcd32613ca2e90a79070c816211dec24a336b2ccb0556008a68a/mio_lang-0.0.9-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "205a9d950c13017a7d1a124df5bede7c", "sha256": "c71048c219c74a16f64e682368329ba25a3953a7b60a52c8cf8fd0bdb2e94c75"}, "downloads": -1, "filename": "mio-lang-0.0.9.tar.gz", "has_sig": false, "md5_digest": "205a9d950c13017a7d1a124df5bede7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254153, "upload_time": "2013-11-09T23:58:10", "upload_time_iso_8601": "2013-11-09T23:58:10.057435Z", "url": "https://files.pythonhosted.org/packages/81/50/aa9e6ea4c7a5993bf83498367ae4acba0139bd758ad921f7e9561feb6546/mio-lang-0.0.9.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "4e3e2c6d661ac84bf6e897caa59b3bd1", "sha256": "5564ad2902d7a8027b13796310ca6059a668b16212daf369ab93514228f4a694"}, "downloads": -1, "filename": "mio_lang-0.1-py2.7.egg", "has_sig": false, "md5_digest": "4e3e2c6d661ac84bf6e897caa59b3bd1", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 294732, "upload_time": "2013-11-13T15:36:15", "upload_time_iso_8601": "2013-11-13T15:36:15.999813Z", "url": "https://files.pythonhosted.org/packages/5d/1c/332887afda8758952b2199f05c10bf09c4e2d9382d356d61eb0621b62dd9/mio_lang-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cb946927b6882b56e2695807f800887", "sha256": "24e4653e595e6132eb63bc8e5f8d784b9aa782ce389c1c3e1dfb6309ff0194cd"}, "downloads": -1, "filename": "mio-lang-0.1.tar.gz", "has_sig": false, "md5_digest": "8cb946927b6882b56e2695807f800887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 330590, "upload_time": "2013-11-13T15:36:09", "upload_time_iso_8601": "2013-11-13T15:36:09.398460Z", "url": "https://files.pythonhosted.org/packages/b1/45/d63b89784aa83052980492559cb96b98b06258c9ae337f4f9a4faf9c7b19/mio-lang-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4c85b06cfe59a777c3a8e864e98c7b16", "sha256": "894d76fb3b5d1ad0d747067b40163c86ef07632e3c6795294393a37d00051f42"}, "downloads": -1, "filename": "mio_lang-0.1.1-py2.7.egg", "has_sig": false, "md5_digest": "4c85b06cfe59a777c3a8e864e98c7b16", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 215353, "upload_time": "2013-11-17T23:30:09", "upload_time_iso_8601": "2013-11-17T23:30:09.554127Z", "url": "https://files.pythonhosted.org/packages/ba/e0/33d5a4e509ec3230767b0bcb4e51854cdf9abbc820f0a6297f3615229083/mio_lang-0.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "acdf52cbff6af357ca18c519d31dd4f9", "sha256": "04aefbfdf3267286232e22305f715576ea9358f41f8927e4b9ef6877d7fded6e"}, "downloads": -1, "filename": "mio-lang-0.1.1.tar.gz", "has_sig": false, "md5_digest": "acdf52cbff6af357ca18c519d31dd4f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 273830, "upload_time": "2013-11-17T23:30:04", "upload_time_iso_8601": "2013-11-17T23:30:04.949268Z", "url": "https://files.pythonhosted.org/packages/51/ea/ceb54649d80508088efd534efe7bfaf2522ccfc9424d6d5f27464d4736fb/mio-lang-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "739f279830278a57f4dee12e59c91e0b", "sha256": "a461c48714719b137ea0ba3179815decba154091db015ec9322c1ff178eb0e9b"}, "downloads": -1, "filename": "mio_lang-0.1.2-py2.7.egg", "has_sig": false, "md5_digest": "739f279830278a57f4dee12e59c91e0b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 213908, "upload_time": "2013-11-18T14:43:13", "upload_time_iso_8601": "2013-11-18T14:43:13.408454Z", "url": "https://files.pythonhosted.org/packages/be/64/ae1187ec4a047dedd964ac4d7ebed7874f6b3aa81a1c237cdd4149c8b8bb/mio_lang-0.1.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "594c1a62ea02c5640a3c9bbb96c191f0", "sha256": "d91bcf32d87f2125b33305b2c7e6a578ea271a0d8c75dab6dab9db9f4aa40a43"}, "downloads": -1, "filename": "mio-lang-0.1.2.tar.gz", "has_sig": false, "md5_digest": "594c1a62ea02c5640a3c9bbb96c191f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 284118, "upload_time": "2013-11-18T14:43:07", "upload_time_iso_8601": "2013-11-18T14:43:07.908491Z", "url": "https://files.pythonhosted.org/packages/a0/40/0a8941f10aab14f59258d597bab27a0b9d015a3414e0010bb18d27235175/mio-lang-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f6aa246b91c3caddb961c8a20250b8c6", "sha256": "fb6346dd54611aafa96d437c60be55eee8169e93503ab9663071c8f6f4ade310"}, "downloads": -1, "filename": "mio_lang-0.1.3-py2.7.egg", "has_sig": false, "md5_digest": "f6aa246b91c3caddb961c8a20250b8c6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 213966, "upload_time": "2013-11-18T15:56:58", "upload_time_iso_8601": "2013-11-18T15:56:58.190644Z", "url": "https://files.pythonhosted.org/packages/00/64/ad651ce48395d0aa9284596a228a10bbb02a672cfbeed46f71341d99d134/mio_lang-0.1.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "da680362a887ea62e1d096573e493a24", "sha256": "793fcaed5f728eedcf10d51e32e4a8b63fa78b99b8fbfd5e46fdd5e56f857717"}, "downloads": -1, "filename": "mio-lang-0.1.3.tar.gz", "has_sig": false, "md5_digest": "da680362a887ea62e1d096573e493a24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 284640, "upload_time": "2013-11-18T15:56:52", "upload_time_iso_8601": "2013-11-18T15:56:52.550157Z", "url": "https://files.pythonhosted.org/packages/80/f7/8650ad44dc9614d691c7b42c820889c34a4d230450f292e6faa64d720cca/mio-lang-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "59d749295fdc6496157f84386d3fe5d2", "sha256": "ad46f322323af0cd3fb1586d99fd3bade83d7b6e650002c978996082d08828ba"}, "downloads": -1, "filename": "mio_lang-0.1.4-py2.7.egg", "has_sig": false, "md5_digest": "59d749295fdc6496157f84386d3fe5d2", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 228645, "upload_time": "2013-11-26T15:52:23", "upload_time_iso_8601": "2013-11-26T15:52:23.726524Z", "url": "https://files.pythonhosted.org/packages/b2/30/51341e5b6f7a5402d0697513787f58458287017aa719a642115a4b13128e/mio_lang-0.1.4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "53d878adaf5e61463b347000bc5e53b0", "sha256": "35529bbd7d9c768a7387c2825432e0f595740c21c69ce36bd956d97608bf922a"}, "downloads": -1, "filename": "mio-lang-0.1.4.tar.gz", "has_sig": false, "md5_digest": "53d878adaf5e61463b347000bc5e53b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 440489, "upload_time": "2013-11-26T15:52:18", "upload_time_iso_8601": "2013-11-26T15:52:18.624693Z", "url": "https://files.pythonhosted.org/packages/89/73/e38ff0d20b1d12e886f058283baa7b3579d01bf96db58f2e7a32611aa85b/mio-lang-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2a11edd25201cc5c8fabd475538f3a9c", "sha256": "dd2c63be031d54f05ac7aed9afce1718b3d96fe8b50af983d683ef9cfbdab9e4"}, "downloads": -1, "filename": "mio_lang-0.1.5-py2.7.egg", "has_sig": false, "md5_digest": "2a11edd25201cc5c8fabd475538f3a9c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 228839, "upload_time": "2013-11-27T20:54:21", "upload_time_iso_8601": "2013-11-27T20:54:21.662300Z", "url": "https://files.pythonhosted.org/packages/e8/37/73b9d6e20ce0a2be7ca47301ff100f6a5110601eb15e681486afde76d8cf/mio_lang-0.1.5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b826208c6c3397cd86514c41c32f6ff3", "sha256": "d5eac74b23b5b47ea221c9ea0c11f28c22d2a88ae22e6fdc946f70d257be5cdd"}, "downloads": -1, "filename": "mio-lang-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b826208c6c3397cd86514c41c32f6ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 442692, "upload_time": "2013-11-27T20:54:15", "upload_time_iso_8601": "2013-11-27T20:54:15.098493Z", "url": "https://files.pythonhosted.org/packages/c4/a1/526482afd6b7c97331e86933feb897327de3b6ed634731d8552dc01e75e6/mio-lang-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "a79238ad32c6baca6c450ffe709716d6", "sha256": "e29e641bf0f2afe3c6675bb886d57123e2721a2db25338ccb2009af49683ba52"}, "downloads": -1, "filename": "mio_lang-0.1.6-py2.7.egg", "has_sig": false, "md5_digest": "a79238ad32c6baca6c450ffe709716d6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 235506, "upload_time": "2013-12-04T09:40:54", "upload_time_iso_8601": "2013-12-04T09:40:54.347924Z", "url": "https://files.pythonhosted.org/packages/a6/36/162c7407e72f0eda137f8e4962a537cc84dc4cea87ff21c2f159d8fa0a0e/mio_lang-0.1.6-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "afb7203b171e6f32fedc4dcdad2dcb19", "sha256": "43ef0628501ff88f3618922fe4d78d87a88e668b6f692117266edb82246f7425"}, "downloads": -1, "filename": "mio_lang-0.1.6-py27-none-any.whl", "has_sig": false, "md5_digest": "afb7203b171e6f32fedc4dcdad2dcb19", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 210598, "upload_time": "2013-12-04T09:40:58", "upload_time_iso_8601": "2013-12-04T09:40:58.505112Z", "url": "https://files.pythonhosted.org/packages/f5/09/6b0a772c8b5e9d9f81c7c492282eaa8cbd7d08527a3af26b254090401404/mio_lang-0.1.6-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01a2793a24f38ea066ae3726acd66837", "sha256": "2002dee85798fe447af28a11e6d282a7ea7cdb70887177b6c094d95f37acebb2"}, "downloads": -1, "filename": "mio-lang-0.1.6.tar.gz", "has_sig": false, "md5_digest": "01a2793a24f38ea066ae3726acd66837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 454369, "upload_time": "2013-12-04T09:40:49", "upload_time_iso_8601": "2013-12-04T09:40:49.733802Z", "url": "https://files.pythonhosted.org/packages/fa/a2/0afb45ca939d6da17281c03493e49f9a5e60bfbdfcbbd9688aced3986694/mio-lang-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "ababd03784966e745c28a63fdcfcbbcb", "sha256": "83e8fe20acffc1cfa1bed8df9b25af1c7cc000fffd3aaed8e0c97005b62eb0ed"}, "downloads": -1, "filename": "mio_lang-0.1.7-py2.7.egg", "has_sig": false, "md5_digest": "ababd03784966e745c28a63fdcfcbbcb", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 257897, "upload_time": "2013-12-08T20:47:51", "upload_time_iso_8601": "2013-12-08T20:47:51.963718Z", "url": "https://files.pythonhosted.org/packages/52/a8/8ccb714d8dfeb32d2c04d7e1d0e8c3c7f4ffe1c820cf03bd57dd881f8407/mio_lang-0.1.7-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7efb264244e452e65803ee0d34a07bb2", "sha256": "8b6a6e0ac8a563289e331b7aef8c7b9ef19dec40586c737be6ae40c01bf8e5f5"}, "downloads": -1, "filename": "mio_lang-0.1.7-py27-none-any.whl", "has_sig": false, "md5_digest": "7efb264244e452e65803ee0d34a07bb2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 228749, "upload_time": "2013-12-08T20:47:57", "upload_time_iso_8601": "2013-12-08T20:47:57.303597Z", "url": "https://files.pythonhosted.org/packages/ce/9a/ded1836b2635d01cd63818bba92b25460c3d99330c7d992c204b2cc77a59/mio_lang-0.1.7-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27cff8190713c755bd3cf6baa86c8e3b", "sha256": "9e9267f332020e1ecdc103f7b69a4cf38d3147d84e451c7378ee8222361ab8f1"}, "downloads": -1, "filename": "mio-lang-0.1.7.tar.gz", "has_sig": false, "md5_digest": "27cff8190713c755bd3cf6baa86c8e3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 474076, "upload_time": "2013-12-08T20:47:46", "upload_time_iso_8601": "2013-12-08T20:47:46.439488Z", "url": "https://files.pythonhosted.org/packages/d8/53/09d13a3f2806eb2c982f4dbdf8739725ca6d7a0bbb8ab78c58315a3fc733/mio-lang-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "22f92badf4945bb0c2c1fd871708a149", "sha256": "3569be2cc708db58cf6b1b4827a8bc6d580613cf8726c3b6f3c1784c4534f74a"}, "downloads": -1, "filename": "mio_lang-0.1.8-py2.7.egg", "has_sig": false, "md5_digest": "22f92badf4945bb0c2c1fd871708a149", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 258269, "upload_time": "2013-12-24T05:53:04", "upload_time_iso_8601": "2013-12-24T05:53:04.142864Z", "url": "https://files.pythonhosted.org/packages/e7/2b/f77cac97c3038b118cec7e5ed0667e9fc2947fa18a7b442264a69a995b66/mio_lang-0.1.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3bca39820f2fb97c696bd95b7e2b5aa", "sha256": "a3484064fd8e4b04171f485815bfab10b1d7723992cf48316d2c0d0453958d61"}, "downloads": -1, "filename": "mio_lang-0.1.8-py27-none-any.whl", "has_sig": false, "md5_digest": "b3bca39820f2fb97c696bd95b7e2b5aa", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 229201, "upload_time": "2013-12-24T05:53:09", "upload_time_iso_8601": "2013-12-24T05:53:09.065816Z", "url": "https://files.pythonhosted.org/packages/6f/f2/0562d8c63bf22f6e600409adb39125526df6b90345cbf9f37e613046394e/mio_lang-0.1.8-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4109955cfb080b58e0ab1597e0fb4730", "sha256": "34df5766b667efcf566a9bcb956bcf0e38d538bad1366ea92a16bbc0c86ae396"}, "downloads": -1, "filename": "mio-lang-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4109955cfb080b58e0ab1597e0fb4730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 486416, "upload_time": "2013-12-24T05:52:59", "upload_time_iso_8601": "2013-12-24T05:52:59.252166Z", "url": "https://files.pythonhosted.org/packages/cc/9e/939938fc4fd2d0fafa1db16d82dd47bbe53fddb89b5157b2868b56827ada/mio-lang-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22f92badf4945bb0c2c1fd871708a149", "sha256": "3569be2cc708db58cf6b1b4827a8bc6d580613cf8726c3b6f3c1784c4534f74a"}, "downloads": -1, "filename": "mio_lang-0.1.8-py2.7.egg", "has_sig": false, "md5_digest": "22f92badf4945bb0c2c1fd871708a149", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 258269, "upload_time": "2013-12-24T05:53:04", "upload_time_iso_8601": "2013-12-24T05:53:04.142864Z", "url": "https://files.pythonhosted.org/packages/e7/2b/f77cac97c3038b118cec7e5ed0667e9fc2947fa18a7b442264a69a995b66/mio_lang-0.1.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3bca39820f2fb97c696bd95b7e2b5aa", "sha256": "a3484064fd8e4b04171f485815bfab10b1d7723992cf48316d2c0d0453958d61"}, "downloads": -1, "filename": "mio_lang-0.1.8-py27-none-any.whl", "has_sig": false, "md5_digest": "b3bca39820f2fb97c696bd95b7e2b5aa", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 229201, "upload_time": "2013-12-24T05:53:09", "upload_time_iso_8601": "2013-12-24T05:53:09.065816Z", "url": "https://files.pythonhosted.org/packages/6f/f2/0562d8c63bf22f6e600409adb39125526df6b90345cbf9f37e613046394e/mio_lang-0.1.8-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4109955cfb080b58e0ab1597e0fb4730", "sha256": "34df5766b667efcf566a9bcb956bcf0e38d538bad1366ea92a16bbc0c86ae396"}, "downloads": -1, "filename": "mio-lang-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4109955cfb080b58e0ab1597e0fb4730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 486416, "upload_time": "2013-12-24T05:52:59", "upload_time_iso_8601": "2013-12-24T05:52:59.252166Z", "url": "https://files.pythonhosted.org/packages/cc/9e/939938fc4fd2d0fafa1db16d82dd47bbe53fddb89b5157b2868b56827ada/mio-lang-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:11 2020"}