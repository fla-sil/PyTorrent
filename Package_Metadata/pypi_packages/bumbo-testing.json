{"info": {"author": "Michael Herman", "author_email": "michael@testdriven.io", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6"], "description": "\n# Bumbo: Python Web Framework built for learning purposes\n\n![purpose](https://img.shields.io/badge/purpose-learning-green.svg)\n![PyPI](https://img.shields.io/pypi/v/bumbo_testing.svg)\n\nBumbo is a Python web framework built for learning purposes. It's a WSGI framework and can be used with any WSGI application server such as Gunicorn.\n\n## Installation\n\n```shell\npip install bumbo\n```\n\n## How to use it\n\n### Basic usage:\n\n```python\nfrom bumbo.api import API\n\napp = API()\n\n\n@app.route(\"/home\")\ndef home(request, response):\n    response.text = \"Hello from the HOME page\"\n\n\n@app.route(\"/hello/{name}\")\ndef greeting(request, response, name):\n    response.text = f\"Hello, {name}\"\n\n\n@app.route(\"/book\")\nclass BooksResource:\n    def get(self, req, resp):\n        resp.text = \"Books Page\"\n\n    def post(self, req, resp):\n        resp.text = \"Endpoint to create a book\"\n\n\n@app.route(\"/template\")\ndef template_handler(req, resp):\n    resp.body = app.template(\n        \"index.html\", context={\"name\": \"Bumbo\", \"title\": \"Best Framework\"}).encode()\n```\n\n### Unit Tests\n\nThe recommended way of writing unit tests is with [pytest](https://docs.pytest.org/en/latest/). There are two built in fixtures\nthat you may want to use when writing unit tests with Bumbo. The first one is `app` which is an instance of the main `API` class:\n\n```python\ndef test_route_overlap_throws_exception(app):\n    @app.route(\"/\")\n    def home(req, resp):\n        resp.text = \"Welcome Home.\"\n\n    with pytest.raises(AssertionError):\n        @app.route(\"/\")\n        def home2(req, resp):\n            resp.text = \"Welcome Home2.\"\n```\n\nThe other one is `client` that you can use to send HTTP requests to your handlers. It is based on the famous [requests](http://docs.python-requests.org/en/master/) and it should feel very familiar:\n\n```python\ndef test_parameterized_route(app, client):\n    @app.route(\"/{name}\")\n    def hello(req, resp, name):\n        resp.text = f\"hey {name}\"\n\n    assert client.get(\"http://testserver/matthew\").text == \"hey matthew\"\n```\n\n## Templates\n\nThe default folder for templates is `templates`. You can change it when initializing the main `API()` class:\n\n```python\napp = API(templates_dir=\"templates_dir_name\")\n```\n\nThen you can use HTML files in that folder like so in a handler:\n\n```python\n@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\n        \"example.html\", context={\"title\": \"Awesome Framework\", \"body\": \"welcome to the future!\"})\n```\n\n## Static Files\n\nJust like templates, the default folder for static files is `static` and you can override it:\n\n```python\napp = API(static_dir=\"static_dir_name\")\n```\n\nThen you can use the files inside this folder in HTML files:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{title}}</title>\n\n  <link href=\"/static/main.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n\n<body>\n    <h1>{{body}}</h1>\n    <p>This is a paragraph</p>\n</body>\n</html>\n```\n\n### Middleware\n\nYou can create custom middleware classes by inheriting from the `bumbo.middleware.Middleware` class and overriding its two methods\nthat are called before and after each request:\n\n```python\nfrom bumbo.api import API\nfrom bumbo.middleware import Middleware\n\n\napp = API()\n\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\n\napp.add_middleware(SimpleCustomMiddleware)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bumbo-testing", "package_url": "https://pypi.org/project/bumbo-testing/", "platform": "", "project_url": "https://pypi.org/project/bumbo-testing/", "project_urls": null, "release_url": "https://pypi.org/project/bumbo-testing/0.0.2/", "requires_dist": ["Jinja2 (==2.10.1)", "requests-wsgi-adapter (==0.4.1)", "parse (==1.12.0)", "requests (==2.22.0)", "WebOb (==1.8.5)", "whitenoise (==4.1.2)"], "requires_python": ">=3.6.0", "summary": "Bumbo Python Web Framework built for learning purposes.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bumbo: Python Web Framework built for learning purposes</h1>\n<p><img alt=\"purpose\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecc4fbe0ecba552b3f912f14745221a472c6b300/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707572706f73652d6c6561726e696e672d677265656e2e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98b75db0a4a3c1e77a9c4d074865112fcd5e4d5e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f62756d626f5f74657374696e672e737667\"></p>\n<p>Bumbo is a Python web framework built for learning purposes. It's a WSGI framework and can be used with any WSGI application server such as Gunicorn.</p>\n<h2>Installation</h2>\n<pre>pip install bumbo\n</pre>\n<h2>How to use it</h2>\n<h3>Basic usage:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bumbo.api</span> <span class=\"kn\">import</span> <span class=\"n\">API</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/home\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello from the HOME page\"</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/hello/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/book\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">BooksResource</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Books Page\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Endpoint to create a book\"</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/template\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">template_handler</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bumbo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Best Framework\"</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n</pre>\n<h3>Unit Tests</h3>\n<p>The recommended way of writing unit tests is with <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>. There are two built in fixtures\nthat you may want to use when writing unit tests with Bumbo. The first one is <code>app</code> which is an instance of the main <code>API</code> class:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_route_overlap_throws_exception</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Welcome Home.\"</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">AssertionError</span><span class=\"p\">):</span>\n        <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">home2</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Welcome Home2.\"</span>\n</pre>\n<p>The other one is <code>client</code> that you can use to send HTTP requests to your handlers. It is based on the famous <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">requests</a> and it should feel very familiar:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_parameterized_route</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"hey </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://testserver/matthew\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s2\">\"hey matthew\"</span>\n</pre>\n<h2>Templates</h2>\n<p>The default folder for templates is <code>templates</code>. You can change it when initializing the main <code>API()</code> class:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">templates_dir</span><span class=\"o\">=</span><span class=\"s2\">\"templates_dir_name\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can use HTML files in that folder like so in a handler:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/show/template\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler_with_template</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"example.html\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Awesome Framework\"</span><span class=\"p\">,</span> <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"s2\">\"welcome to the future!\"</span><span class=\"p\">})</span>\n</pre>\n<h2>Static Files</h2>\n<p>Just like templates, the default folder for static files is <code>static</code> and you can override it:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">static_dir</span><span class=\"o\">=</span><span class=\"s2\">\"static_dir_name\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can use the files inside this folder in HTML files:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"UTF-8\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>{{title}}<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/static/main.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/css\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>{{body}}<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This is a paragraph<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<h3>Middleware</h3>\n<p>You can create custom middleware classes by inheriting from the <code>bumbo.middleware.Middleware</code> class and overriding its two methods\nthat are called before and after each request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bumbo.api</span> <span class=\"kn\">import</span> <span class=\"n\">API</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bumbo.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleCustomMiddleware</span><span class=\"p\">(</span><span class=\"n\">Middleware</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Before dispatch\"</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"After dispatch\"</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">SimpleCustomMiddleware</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5470895, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b8d68ba3c305796c85bef0da073d0db9", "sha256": "a3680045639c02bf9d41b38e02533d1c3b2cee50804d990f6bab2fea4ce891c5"}, "downloads": -1, "filename": "bumbo_testing-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b8d68ba3c305796c85bef0da073d0db9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 3681, "upload_time": "2019-07-01T01:11:09", "upload_time_iso_8601": "2019-07-01T01:11:09.257404Z", "url": "https://files.pythonhosted.org/packages/bf/1b/7ae271f7f866681d7193a605ceb922db69158fd8779b34b454a62743cf14/bumbo_testing-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5bbe3c186e1be790c4ff9b0f91200a3", "sha256": "c2f4e9f3a14cf12157f33196ffcb5dba470ad5d0aea6c260fa08655a2193b8e4"}, "downloads": -1, "filename": "bumbo_testing-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b5bbe3c186e1be790c4ff9b0f91200a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 3077, "upload_time": "2019-07-01T01:11:11", "upload_time_iso_8601": "2019-07-01T01:11:11.470749Z", "url": "https://files.pythonhosted.org/packages/f0/4e/502aeabc139a6c862f04f881ac2ee8301ddace17b628de627ae9fdd947a6/bumbo_testing-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d5e8d24b47528aa22c23582e69795dd8", "sha256": "37ac431696d01705170871bddd4347de7067276a1ab0a2f8a7a4258ba0b7e9f4"}, "downloads": -1, "filename": "bumbo_testing-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d5e8d24b47528aa22c23582e69795dd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5094, "upload_time": "2019-07-01T12:49:02", "upload_time_iso_8601": "2019-07-01T12:49:02.699646Z", "url": "https://files.pythonhosted.org/packages/a0/38/5d198b8b84fbabc2a29a35acd8df2a481bce1c69c20ed3ec18a407cf62be/bumbo_testing-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5e8d24b47528aa22c23582e69795dd8", "sha256": "37ac431696d01705170871bddd4347de7067276a1ab0a2f8a7a4258ba0b7e9f4"}, "downloads": -1, "filename": "bumbo_testing-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d5e8d24b47528aa22c23582e69795dd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5094, "upload_time": "2019-07-01T12:49:02", "upload_time_iso_8601": "2019-07-01T12:49:02.699646Z", "url": "https://files.pythonhosted.org/packages/a0/38/5d198b8b84fbabc2a29a35acd8df2a481bce1c69c20ed3ec18a407cf62be/bumbo_testing-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:35:59 2020"}