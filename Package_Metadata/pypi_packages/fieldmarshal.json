{"info": {"author": "Stanis Trendelenburg", "author_email": "stanis.trendelenburg@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# fieldmarshal \u2013 marshal/unmarshal attrs-based data classes to and from JSON\n\n[![Build Status](https://travis-ci.org/trendels/fieldmarshal.svg?branch=master)](https://travis-ci.org/trendels/fieldmarshal)\n\n**Note: This is module is still in development - APIs might change in\nbackwards-incompatible ways.**\n\n## Example\n\n~~~python\n>>> from fieldmarshal import struct, field, marshal, unmarshal\n>>> from typing import List, Set\n>>> @struct\n... class Post:\n...     title: str\n...     tags: Set[str]\n... \n>>> @struct\n... class User:\n...     id: int\n...     name: str\n...     posts: List[Post]\n...     is_admin: bool = field(\"is-admin\", default=False)\n... \n>>> fred = User(1, \"fred\", [Post(\"hello world!\", tags={\"a\", \"b\"})])\n>>> data = marshal(fred)\n>>> data\n{'id': 1, 'name': 'fred', 'posts': [{'title': 'hello world!', 'tags': ['a', 'b']}], 'is-admin': False}\n>>> assert unmarshal(data, User) == fred\n>>>\n~~~\n\nThe `struct` and `field` helpers are just convenience wrappers around `attr.s`\nand `attr.ib`. The equivalent code with `attrs` is:\n\n~~~python\n>>> import attr\n>>> from fieldmarshal import Options\n>>> @attr.s(slots=True, auto_attribs=True)\n... class User:\n...     # ...\n...     is_admin: bool = attr.ib(\n...         default=False,\n...         metadata={'fieldmarshal': Options(name=\"is-admin\")},\n...     )\n>>>\n~~~\n\nThis module provides marshalling/unmarshalling (or\nserialization/deserialization) of [attrs][1]-based \"data classes\" to and from JSON.\n\nThe main goal is to make it easy to quickly build useful (partial) class\nrepresentations for real-world JSON data, such as those received from HTTP APIs\n(See the `examples` subdirectory), and to allow efficient\nmarshalling/unmarshalling to and from JSON.\n\nFeatures:\n\n-   Support for renaming fields (see Example above).\n-   Unknown/extra JSON keys are ignored by default.\n-   Hook system to customize marshalling/unmarshalling of custom or complex\n    types (e.g. `Union`s)\n-   Built-in handling of common cases, such as `Enums`, simple `Union`s.\n-   Limited support for non-string dict keys (bool, int, float, Enum).\n-   Tries to be unobtrusive: Does not require subclassing and can work with\n    plain `attr`s-based classes.\n\nThe API is inspired by Go's [`json.Marshal/json.Unmarshal`][2] and [cattrs][3].\n\n[1]: https://www.attrs.org/\n[2]: https://golang.org/pkg/encoding/json/\n[3]: https://pypi.org/project/cattrs/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trendels/fieldmarshal", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fieldmarshal", "package_url": "https://pypi.org/project/fieldmarshal/", "platform": "", "project_url": "https://pypi.org/project/fieldmarshal/", "project_urls": {"Homepage": "https://github.com/trendels/fieldmarshal"}, "release_url": "https://pypi.org/project/fieldmarshal/0.0.2/", "requires_dist": ["attrs (>=17.4.0)"], "requires_python": "", "summary": "Marshal/unmarshal attrs-based data classes to and from JSON", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fieldmarshal \u2013 marshal/unmarshal attrs-based data classes to and from JSON</h1>\n<p><a href=\"https://travis-ci.org/trendels/fieldmarshal\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b125feec813c1a5c1ade8d43387a1a4bbff1915c/68747470733a2f2f7472617669732d63692e6f72672f7472656e64656c732f6669656c646d61727368616c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>Note: This is module is still in development - APIs might change in\nbackwards-incompatible ways.</strong></p>\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">fieldmarshal</span> <span class=\"kn\">import</span> <span class=\"n\">struct</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">marshal</span><span class=\"p\">,</span> <span class=\"n\">unmarshal</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Set</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@struct</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n<span class=\"o\">...</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@struct</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">posts</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Post</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>     <span class=\"n\">is_admin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"s2\">\"is-admin\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fred</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"fred\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Post</span><span class=\"p\">(</span><span class=\"s2\">\"hello world!\"</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">})])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">marshal</span><span class=\"p\">(</span><span class=\"n\">fred</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span>\n<span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'fred'</span><span class=\"p\">,</span> <span class=\"s1\">'posts'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'hello world!'</span><span class=\"p\">,</span> <span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">]}],</span> <span class=\"s1\">'is-admin'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">unmarshal</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">fred</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>The <code>struct</code> and <code>field</code> helpers are just convenience wrappers around <code>attr.s</code>\nand <code>attr.ib</code>. The equivalent code with <code>attrs</code> is:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">attr</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">fieldmarshal</span> <span class=\"kn\">import</span> <span class=\"n\">Options</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@attr</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">slots</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">auto_attribs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># ...</span>\n<span class=\"o\">...</span>     <span class=\"n\">is_admin</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">attr</span><span class=\"o\">.</span><span class=\"n\">ib</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'fieldmarshal'</span><span class=\"p\">:</span> <span class=\"n\">Options</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"is-admin\"</span><span class=\"p\">)},</span>\n<span class=\"o\">...</span>     <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>This module provides marshalling/unmarshalling (or\nserialization/deserialization) of <a href=\"https://www.attrs.org/\" rel=\"nofollow\">attrs</a>-based \"data classes\" to and from JSON.</p>\n<p>The main goal is to make it easy to quickly build useful (partial) class\nrepresentations for real-world JSON data, such as those received from HTTP APIs\n(See the <code>examples</code> subdirectory), and to allow efficient\nmarshalling/unmarshalling to and from JSON.</p>\n<p>Features:</p>\n<ul>\n<li>Support for renaming fields (see Example above).</li>\n<li>Unknown/extra JSON keys are ignored by default.</li>\n<li>Hook system to customize marshalling/unmarshalling of custom or complex\ntypes (e.g. <code>Union</code>s)</li>\n<li>Built-in handling of common cases, such as <code>Enums</code>, simple <code>Union</code>s.</li>\n<li>Limited support for non-string dict keys (bool, int, float, Enum).</li>\n<li>Tries to be unobtrusive: Does not require subclassing and can work with\nplain <code>attr</code>s-based classes.</li>\n</ul>\n<p>The API is inspired by Go's <a href=\"https://golang.org/pkg/encoding/json/\" rel=\"nofollow\"><code>json.Marshal/json.Unmarshal</code></a> and <a href=\"https://pypi.org/project/cattrs/\" rel=\"nofollow\">cattrs</a>.</p>\n\n          </div>"}, "last_serial": 6157659, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f6e13948f73c27224d3542024584f749", "sha256": "79afadcae34bc9c2a1b38c9e2900fd555b6df98bf4945cbff6b7423d4f8213db"}, "downloads": -1, "filename": "fieldmarshal-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f6e13948f73c27224d3542024584f749", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7419, "upload_time": "2019-11-09T21:36:30", "upload_time_iso_8601": "2019-11-09T21:36:30.123258Z", "url": "https://files.pythonhosted.org/packages/ee/b4/591a2622cac93c2ff410d0e50797149b2e82f49853afc83c514b266eaa87/fieldmarshal-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75283d6d06fcd2838ad8fd38cfa4afe4", "sha256": "cd0f26dda1cccde3a0f20719de66e3f35643f40168375dab842e8d1747809e9d"}, "downloads": -1, "filename": "fieldmarshal-0.0.1.tar.gz", "has_sig": false, "md5_digest": "75283d6d06fcd2838ad8fd38cfa4afe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13235, "upload_time": "2019-11-09T21:36:32", "upload_time_iso_8601": "2019-11-09T21:36:32.736918Z", "url": "https://files.pythonhosted.org/packages/cf/a2/9703fd39a6e03d83de865a0e1243a5f84b31f6859a69c4947d7f838d29c0/fieldmarshal-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "085575157725026e06fb849dc87e5822", "sha256": "df934aa6889dc14d4fd54f6e054aec1a4a40b796a706edd94fa452296227badb"}, "downloads": -1, "filename": "fieldmarshal-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "085575157725026e06fb849dc87e5822", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8538, "upload_time": "2019-11-18T18:58:22", "upload_time_iso_8601": "2019-11-18T18:58:22.528037Z", "url": "https://files.pythonhosted.org/packages/0c/28/3a5862bfcc3c3fdd59dfc13eb14245e5da3dfc16f04ffdbb4232ffdef2d0/fieldmarshal-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "babadff1958b023c174cfe9a4985a2b6", "sha256": "7131489b3d2744a0df0aa5177065a4fe7ec152e04ff30fcf4fed0e10b64fedda"}, "downloads": -1, "filename": "fieldmarshal-0.0.2.tar.gz", "has_sig": false, "md5_digest": "babadff1958b023c174cfe9a4985a2b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14093, "upload_time": "2019-11-18T18:58:24", "upload_time_iso_8601": "2019-11-18T18:58:24.135915Z", "url": "https://files.pythonhosted.org/packages/8b/8f/60c5f50b0f103ab4af12ffe3615bb78df96b40b92f99e6cacd65579ed30a/fieldmarshal-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "085575157725026e06fb849dc87e5822", "sha256": "df934aa6889dc14d4fd54f6e054aec1a4a40b796a706edd94fa452296227badb"}, "downloads": -1, "filename": "fieldmarshal-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "085575157725026e06fb849dc87e5822", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8538, "upload_time": "2019-11-18T18:58:22", "upload_time_iso_8601": "2019-11-18T18:58:22.528037Z", "url": "https://files.pythonhosted.org/packages/0c/28/3a5862bfcc3c3fdd59dfc13eb14245e5da3dfc16f04ffdbb4232ffdef2d0/fieldmarshal-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "babadff1958b023c174cfe9a4985a2b6", "sha256": "7131489b3d2744a0df0aa5177065a4fe7ec152e04ff30fcf4fed0e10b64fedda"}, "downloads": -1, "filename": "fieldmarshal-0.0.2.tar.gz", "has_sig": false, "md5_digest": "babadff1958b023c174cfe9a4985a2b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14093, "upload_time": "2019-11-18T18:58:24", "upload_time_iso_8601": "2019-11-18T18:58:24.135915Z", "url": "https://files.pythonhosted.org/packages/8b/8f/60c5f50b0f103ab4af12ffe3615bb78df96b40b92f99e6cacd65579ed30a/fieldmarshal-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:41 2020"}