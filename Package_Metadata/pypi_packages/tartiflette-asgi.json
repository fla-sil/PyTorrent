{"info": {"author": "Florimond Manca", "author_email": "florimond.manca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/158689/58954519-b05ad680-8799-11e9-9134-90622e7731f3.png\" alt=\"tartiflette-asgi logo\"/>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/tartiflette/tartiflette-asgi\">\n    <img src=\"https://travis-ci.org/tartiflette/tartiflette-asgi.svg?branch=master\" alt=\"Build status\">\n  </a>\n  <a href=\"https://pypi.org/project/tartiflette-asgi\">\n    <img src=\"https://badge.fury.io/py/tartiflette-asgi.svg\" alt=\"Package version\">\n  </a>\n  <a href=\"https://github.com/ambv/black\">\n    <img src=\"https://img.shields.io/badge/code_style-black-000000.svg\" alt=\"Code style\">\n    </a>\n</p>\n\n`tartiflette-asgi` (previously `tartiflette-starlette`) is a wrapper that provides ASGI support for the [Tartiflette] Python GraphQL engine.\n\n[tartiflette]: https://tartiflette.io\n\nBuild your GraphQL API with Tartiflette, then use the included `TartifletteApp` and get the following:\n\n- Compatibility with any ASGI server and framework.\n- Standalone and sub-app serving.\n- Built-in [GraphiQL] client.\n- Support for [GraphQL subscriptions over WebSocket](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md).\n\n[graphiql]: https://github.com/graphql/graphiql\n\n---\n\n**Note**: `tartiflette-asgi >= 0.7` (and `tartiflette-starlette == 0.6.*`) is only compatible with Tartiflette 1.x. For compatibility with Tartiflette 0.x, please install `tartiflette-starlette == 0.5.*`.\n\n---\n\n**Table of contents**\n\n- [Quickstart](#quickstart)\n- [Installation](#installation)\n- [User guide](#user-guide)\n  - [Standalone serving](#standalone-serving)\n  - [ASGI submounting](#asgi-submounting)\n  - [Making requests](#making-requests)\n  - [Accessing request information](#accessing-request-information)\n  - [GraphiQL client](#graphiql-client)\n  - [WebSocket subscriptions (Advanced)](#websocket-subscriptions-advanced)\n- [API Reference](#api-reference)\n- [FAQ](#faq)\n\n## Quickstart\n\n```python\nfrom tartiflette import Resolver\nfrom tartiflette_asgi import TartifletteApp\n\n@Resolver(\"Query.hello\")\nasync def hello(parent, args, context, info):\n    name = args[\"name\"]\n    return f\"Hello, {name}!\"\n\nsdl = \"\"\"\n  type Query {\n    hello(name: String): String\n  }\n\"\"\"\n\napp = TartifletteApp(sdl=sdl)\n```\n\nSave the file as `graphql.py` and start a [uvicorn] server:\n\n[uvicorn]: https://www.uvicorn.org\n\n```bash\nuvicorn graphql:app\n```\n\n> **Note**: the GraphQL endpoint is exposed on `/` by default.\n\nMake a request:\n\n```bash\ncurl -H \"Content-Type: application/graphql\"  -d '{ hello(name: \"Chuck\") }' http://localhost:8000\n```\n\nResponse:\n\n```json\n{ \"data\": { \"hello\": \"Hello, Chuck!\" } }\n```\n\nOr access `http://localhost:8000` in a browser to make interactive queries using the built-in [GraphiQL] client:\n\n![](https://github.com/tartiflette/tartiflette-asgi/raw/master/img/graphiql.png)\n\n## Installation\n\n1. Install Tartiflette's external dependencies as explained in the [Tartiflette tutorial](https://tartiflette.io/docs/tutorial/install-tartiflette).\n2. Install `tartiflette-asgi` from PyPI:\n\n```bash\npip install \"tartiflette-asgi==0.*\"\n```\n\nThis will also install [Tartiflette] and [Starlette], so you're good to go!\n\n[starlette]: https://www.starlette.io\n\n**Note**: `tartiflette-asgi` requires Python 3.6+.\n\n## User guide\n\nThe [`TartifletteApp`](#tartifletteapp) class is an ASGI3-compliant application. There are two ways to use it:\n\n- Serve it as a standalone ASGI app.\n- Mount it as an endpoint of another ASGI app (e.g. a Starlette application).\n\n### Standalone serving\n\nThe [Quickstart](#quickstart) example shows how to build a `TartifletteApp` and serve it as a standalone ASGI app.\n\nThe app is served using Uvicorn, but any other ASGI web server will do, for example:\n\n- [uvicorn]\n- [hypercorn](https://github.com/pgjones/hypercorn)\n- [daphne](https://github.com/django/daphne)\n\n### ASGI submounting\n\nMost ASGI web frameworks provide a way to **mount** another ASGI app at a given URL prefix. You can use this to serve a `TartifletteApp` at an endpoint such as `/graphql` on the root ASGI application.\n\nThis is useful to have **a GraphQL endpoint _and_ other (non-GraphQL) endpoints** within a single application. For example, to have a REST endpoint at `/api/users` and a GraphQL endpoint at `/graphql`.\n\n> **Important**: this should work with _**any**_ web framework that supports ASGI submounting \u2014 it doesn't have to be Starlette. See also: [What is the role of Starlette?](#what-is-the-role-of-starlette)\n\n#### Starlette example\n\n```python\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom tartiflette import Resolver\nfrom tartiflette_asgi import TartifletteApp, mount\n\napp = Starlette()\n\n@app.route(\"/\")\nasync def home(request):\n  return PlainTextResponse(\"Hello, world!\")\n\n@Resolver(\"Query.hello\")\nasync def hello(parent, args, context, info):\n    name = args[\"name\"]\n    return f\"Hello, {name}!\"\n\nsdl = \"\"\"\n  type Query {\n    hello(name: String): String\n  }\n\"\"\"\n\ngraphql = TartifletteApp(sdl=sdl)\nmount.starlette(app, \"/graphql\", graphql)  # (*)\n```\n\n> (\\*) This is a shorthand for:\n>\n> ```python\n> app.mount(\"/graphql\", graphql)\n> app.add_event_handler(\"startup\", graphql.startup)\n> ```\n\nSave the file as `app.py`, and serve it with [uvicorn]:\n\n```bash\nuvicorn app:app\n```\n\nMake a request:\n\n```bash\ncurl -H \"Content-Type: application/graphql/\"  -d '{ hello(name: \"Chuck\") }' http://localhost:8000\n```\n\n> **Note**: if you receive a `307 Temporary Redirect` response, make sure to include the trailing slash: `/graphql/`.\n\nResponse:\n\n```json\n{ \"data\": { \"hello\": \"Hello, Chuck!\" } }\n```\n\n#### General approach\n\nAssuming you have an instance of `TartifletteApp` called `graphql`, you need to:\n\n1. Add the `graphql` app as a sub-application (also known as \"mounting\"). The parent ASGI application may expose a method such as `.mount()` for this purpose.\n2. Add `graphql.startup` as a startup event handler so that the Tartiflette engine is built upon application startup. Note that:\n\n- Not doing this will result in a `RuntimeError` when requesting the GraphQL endpoint.\n- The parent ASGI application may expose a method such as `.add_event_handler()` for this purpose.\n- This is only required if the parent ASGI application does not call lifespan event handlers for sub-applications, as is the case for Starlette.\n\n**Tip**: the [`mount`](#mount) module provides mounting helpers for various ASGI frameworks.\n\n### Making requests\n\n`tartiflette-asgi` complies with the [GraphQL spec](https://graphql.org/learn/serving-over-http/#http-methods-headers-and-body), which allows you to pass the query in several ways:\n\n- **URL query string** (methods: `GET`, `POST`):\n\n```bash\ncurl 'http://localhost:8000?query=\\{hello(name:\"Chuck\")\\}'\n```\n\n- **JSON-encoded body** (methods: `POST`):\n\n```bash\ncurl \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"{ hello(name: \\\"Chuck\\\") }\"}' \\\n  http://localhost:8000\n```\n\n- **Raw body** with the `application/graphql` content type (methods: `POST`):\n\n```bash\ncurl \\\n  -H \"Content-Type: application/graphql\" \\\n  -d '{ hello(name: \"Chuck\") }' \\\n  http://localhost:8000\n```\n\n**Note**: you may have your GraphQL API served at a different endpoint.\n\n### Accessing request information\n\nYou can access the Starlette `Request` object from resolvers using `context[\"req\"]`:\n\n```python\n@Resolver(\"Query.whoami\")\nasync def resolve_whoami(parent, args, context, info) -> str:\n    request = context[\"req\"]\n    return getattr(request.state, \"user\", \"a mystery\")\n```\n\nSee also [Requests](https://www.starlette.io/requests/) in the Starlette documentation.\n\n### GraphiQL client\n\nBy default, the GraphQL endpoint provided by `TartifletteApp` serves a [GraphiQL] client when it is accessed from a web browser. It can be customized using the `GraphiQL` helper.\n\nHere's an example:\n\n```python\nfrom tartiflette_asgi import TartifletteApp, GraphiQL\n\napp = TartifletteApp(\n    sdl=\"\"\"\n    type Query {\n        hello(name: String): String\n    }\n    \"\"\",\n    graphiql=GraphiQL(\n        path=\"/graphiql\",\n        default_headers={\"Authorization\": \"Bearer 123\"},\n        default_variables={\"name\": \"world\"},\n        default_query=\"\"\"\n        query Hello($name: String) {\n            hello(name: $name)\n        }\n        \"\"\",\n    ),\n)\n```\n\nSave this as `graphql.py` and run `uvicorn graphql:app`. You should see the customized GraphiQL client when accessing http://127.0.0.1/graphiql:\n\n![](https://github.com/tartiflette/tartiflette-asgi/raw/master/img/graphiql-custom.png)\n\nSee [`GraphiQL`](#graphiql) in the API reference for a complete description of the available options.\n\n### Providing additional context to resolvers\n\nYou can inject your own services, functions or data into the GraphQL `context` using the `context` option.\n\nFor example, assuming you use a publish/subscribe library named `pubsub`, you could write:\n\n```python\nfrom pubsub import PubSub  # Fake\n\n@Resolver(\"Query.human\")\nasync def resolve_human(parent, args, context, info):\n    pubsub = context[\"pubsub\"]\n    # ...\n    await pubsub.publish(\"human_fetched\", args)\n\ngraphql = TartifletteApp(\n  # ...,\n  context={\"pubsub\": PubSub()},\n)\n```\n\n### WebSocket subscriptions (Advanced)\n\nThis package provides support for [GraphQL subscriptions](https://graphql.org/blog/subscriptions-in-graphql-and-relay/) over WebSocket. Subscription queries can be issued via the built-in GraphiQL client, as well as [Apollo GraphQL](https://www.apollographql.com/docs/react/advanced/subscriptions/) and any other client that uses the [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md) protocol.\n\nExample:\n\n```python\nimport asyncio\nfrom tartiflette import Subscription\nfrom tartiflette_asgi import TartifletteApp, GraphiQL\n\nsdl = \"\"\"\ntype Query {\n  _: Boolean\n}\n\ntype Subscription {\n  timer(seconds: Int!): Timer\n}\n\nenum Status {\n  RUNNING\n  DONE\n}\n\ntype Timer {\n  remainingTime: Int!\n  status: Status!\n}\n\"\"\"\n\n@Subscription(\"Subscription.timer\")\nasync def on_timer(parent, args, context, info):\n    seconds = args[\"seconds\"]\n    for i in range(seconds):\n        yield {\"timer\": {\"remainingTime\": seconds - i, \"status\": \"RUNNING\"}}\n        await asyncio.sleep(1)\n    yield {\"timer\": {\"remainingTime\": 0, \"status\": \"DONE\"}}\n\napp = TartifletteApp(\n    sdl=sdl,\n    subscriptions=True,\n    graphiql=GraphiQL(\n        default_query=\"\"\"\n        subscription {\n          timer(seconds: 5) {\n            remainingTime\n            status\n          }\n        }\n        \"\"\"\n    ),\n)\n```\n\n> **Note**: the subscriptions endpoint is exposed on `/subscriptions` by default.\n\nSave this file as `graphql.py`, then run `$ uvicorn graphql:app`. Open the GraphiQL client at http://localhost:8000, and hit \"Play\"! The timer should update on real-time.\n\n![](https://github.com/tartiflette/tartiflette-asgi/raw/master/img/graphiql-subscriptions.png)\n\nSee [`Subscriptions`](#subscriptions) in the API reference for a complete description of the available options.\n\nFor more information on using subscriptions in Tartiflette, see the [Tartiflette documentation](https://tartiflette.io/docs/api/subscription).\n\n## API Reference\n\n> **Note**: unless specified, components documented here can be imported from `tartiflette_asgi` directly, e.g. `from tartiflette_asgi import TartifletteApp`.\n\n### `TartifletteApp`\n\n#### Parameters\n\n**Note**: all parameters are keyword-only.\n\n- `engine` (`Engine`): a Tartiflette [engine](https://tartiflette.io/docs/api/engine). Required if `sdl` is not given.\n- `sdl` (`str`): a GraphQL schema defined using the [GraphQL Schema Definition Language](https://graphql.org/learn/schema/). Required if `engine` is not given.\n- `path` (`str`, optional): the path which clients should make GraphQL queries to. Defaults to `\"/\"`.\n- `graphiql` (`GraphiQL` or `bool`, optional): configuration for the GraphiQL client. Defaults to `True`, which is equivalent to `GraphiQL()`. Use `False` to not register the GraphiQL client.\n- `subscriptions` (`Subscriptions` or `bool`, optional): subscriptions configuration. Defaults to `True`, which is equivalent to `Subscriptions(path=\"/subscriptions\")`. Leave empty or pass `None` to not register the subscription WebSocket endpoint.\n- `context` (`dict`, optional): a copy of this dictionary is passed to resolvers when executing a query. Defaults to `{}`. Note: the Starlette `Request` object is always present as `req`.\n- `schema_name` (`str`, optional): name of the GraphQL schema from the [Schema Registry](https://tartiflette.io/docs/api/schema-registry/) which should be used \u2014 mostly for advanced usage. Defaults to `\"default\"`.\n\n#### Methods\n\n- `__call__(scope, receive, send)`: ASGI3 implementation.\n\n#### Error responses\n\n| Status code                | Description                                                                                                                      |\n| -------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| 400 Bad Request            | The GraphQL query could not be found in the request data.                                                                        |\n| 404 Not Found              | The request does not match the GraphQL or GraphiQL endpoint paths.                                                               |\n| 405 Method Not Allowed     | The HTTP method is not one of `GET`, `HEAD` or `POST`.                                                                           |\n| 415 Unsupported Media Type | The POST request made to the GraphQL endpoint uses a `Content-Type` different from `application/json` and `application/graphql`. |\n\n### `GraphiQL`\n\nConfiguration helper for the GraphiQL client.\n\n#### Parameters\n\n**Note**: all parameters are keyword-only.\n\n- `path` (`str`, optional): the path of the GraphiQL endpoint, **relative to the root path which `TartifletteApp` is served at**. If not given, defaults to the `path` given to `TartifletteApp`.\n- `default_headers` (`dict`, optional): extra HTTP headers to send when calling the GraphQL endpoint.\n- `default_query` (`str`, optional): the default query to display when accessing the GraphiQL interface.\n- `default_variables` (`dict`, optional): default [variables][graphql-variables] to display when accessing the GraphiQL interface.\n- `template` (`str`, optional): an HTML template to use instead of the default one. In the template, `default_headers`, `default_query` and `default_variables`, as well as the GraphQL `endpoint`, are available as strings (JSON-encoded if needed) using template string substitutions, e.g.:\n\n```js\nconst endpoint = `${endpoint}`; // This is where the API call should be made.\nconst defaultHeaders = JSON.parse(`${default_headers}`);\n```\n\n[graphql-variables]: https://graphql.org/learn/queries/#variables\n\n### `Subscriptions`\n\nConfiguration helper for WebSocket subscriptions.\n\n#### Parameters\n\n**Note**: all parameters are keyword-only.\n\n- `path` (`str`): the path of the subscriptions WebSocket endpoint, **relative to the root path which `TartifletteApp` is served at**. If not given, defaults to `/subscriptions`.\n\n### `mount`\n\nThis module contains helpers for mounting a `TartifletteApp` on other ASGI applications. Use these helpers to make sure you comply with the steps described in [General approach](#general-approach).\n\n#### Parameters\n\nAll mounting helpers expect the same parameters:\n\n- `parent` (ASGI app): the parent ASGI application which the `TartifletteApp` must be mounted onto.\n- `path` (`str`): the URL path where the `TartifletteApp` should be mounted.\n- `app` (`TartifletteApp`): the `TartifletteApp` to mount.\n- `**kwargs` (any): extra keyword arguments passed to the mount implementation of the `parent` app.\n\n#### Available helpers\n\n| Helper              | Mount implementation | Startup event handler implementation |\n| ------------------- | -------------------- | ------------------------------------ |\n| `mount.starlette()` | `parent.mount()`     | `parent.add_event_handler()`         |\n\n> Missing a helper for your favorite framework? Feel free to [open a pull request](https://github.com/tartiflette/tartiflette-asgi/compare)!\n\n## FAQ\n\n### Does this package ship with Tartiflette?\n\n**Yes**. Everything is included, which allows you to start building your GraphQL API right away. See also [Installation](#installation).\n\n### Do I need to learn GraphQL/Tartiflette to use this package?\n\n**Yes**: once you've got the `TartifletteApp` ASGI app up and running, you're in Tartiflette territory.\n\nHere are some resources to get you started:\n\n- [Tartiflette tutorial](https://tartiflette.io/docs/tutorial/getting-started)\n- [Introduction to GraphQL](https://graphql.org/learn/)\n- [Tartiflette API reference](https://tartiflette.io/docs/api/engine)\n\n### What is the role of Starlette?\n\n`tartiflette-asgi` uses Starlette as a lightweight ASGI toolkit: internally, it uses Starlette's request and response classes, and some other components.\n\nLuckily, this does not require your applications to use Starlette at all.\n\nFor example, if you are [submounting your GraphQL app](#submounting-on-another-asgi-app) on an app built with an async web framework, this framework does not need to use Starlette \u2014 it just needs to speak ASGI.\n\n### What is ASGI?\n\nASGI provides a standard interface between async-capable Python web servers, frameworks, and applications.\n\nSee also the [ASGI documentation](https://asgi.readthedocs.io/en/latest/).\n\n## Contributing\n\nWant to contribute? Awesome! Be sure to read our [Contributing guidelines](https://github.com/tartiflette/tartiflette-asgi/tree/master/CONTRIBUTING.md).\n\n## Changelog\n\nChanges to this project are recorded in the [changelog](https://github.com/tartiflette/tartiflette-asgi/tree/master/CHANGELOG.md).\n\n## License\n\nMIT\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## 0.7.1 - 2019-10-28\n\n### Fixed\n\n- Requests containing malformed JSON now return a 400 Bad Request error response instead of 500 Internal Server Error. (Pull #81)\n\n## 0.7.0 - 2019-10-27\n\n### Changed\n\n- Renamed project to `tartiflette-asgi`.\n\n## 0.6.0 - 2019-10-18\n\n### Added\n\n- Add support for Tartiflette 1.x. (Pull #58)\n- Officialize support for Python 3.8. (Pull #80)\n\n### Removed\n\n- Drop support for Tartiflette 0.x. (Pull #58)\n\n## 0.5.2 - 2019-10-09\n\n### Added\n\n- Add support for Python 3.8. (Pull #55)\n\n### Fixed\n\n- Type annotations are now correctly detected by `mypy`. (Pull #66)\n- Fix a bug that prevented the GraphiQL web interface from making queries when the application was mounted on a parent ASGI app. (Pull #51)\n\n## 0.5.1 - 2019-07-16\n\n### Fixed\n\n- Fixed a bug that prevented accessing the GraphiQL interface when subscriptions were not enabled.\n\n## 0.5.0 - 2019-07-12\n\n### Added\n\n- WebSocket subscriptions, configurable with the new `subscriptions` option on `TartifletteApp`.\n- Pass extra context to resolvers using the new `context` option on `TartifletteApp`.\n\n## 0.4.0 - 2019-07-04\n\n### Added\n\n- Support for Tartiflette 0.12.x.\n- Add a `mount` module with submounting helpers.\n- Add `mount.starlette()`.\n\n### Changed\n\n- Due to the new [engine cooking API](https://tartiflette.io/docs/api/engine#cook-your-tartiflette) in Tartiflette 0.12, `TartifletteApp` now includes a startup event handler responsible for building the GraphQL engine. If submounting, it **must** be registered on the parent ASGI app. Helpers in the `mount` module take care of this for you.\n\n### Removed\n\n- Drop support for Tartiflette 0.11.x and below.\n\n## 0.3.0 - 2019-07-03\n\n### Added\n\n- GraphiQL configuration via the `GraphiQL` helper. Options: `path`, `default_query`, `default_headers`, `default_variables`, `template`.\n\n### Changed\n\n- Internal refactoring that leverages more of Starlette's capabilities.\n- Documentation improvements.\n\n## 0.2.0 - 2019-06-10\n\n### Added\n\n- Support for `starlette>=0.12` (previously `>=0.12.0b3`).\n- Tartiflette is now installed too when installing `tartiflette-asgi`.\n\n### Changed\n\n- The default `path` is now `\"\"` (previously `\"/\"`).\n- The request is now accessible in the GraphQL context via `context[\"req\"]` (previously `context[\"request\"]`).\n- If no error occurred, the `errors` field is not present in the response anymore (previously was `None`).\n\n### Fixed\n\n- More robust URL matching on `TartifletteApp`.\n\n## 0.1.1 - 2019-04-28\n\n### Fixed\n\n- Add missing `graphiql.html` package asset.\n\n## 0.1.0 - 2019-04-26\n\n### Added\n\nFeatures:\n\n- `TartifletteApp` ASGI application.\n- Built-in GraphiQL client.\n\nProject-related additions:\n\n- Package setup.\n- Changelog.\n- Contributing guide.\n- README and documentation.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tartiflette/tartiflette-asgi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tartiflette-asgi", "package_url": "https://pypi.org/project/tartiflette-asgi/", "platform": "", "project_url": "https://pypi.org/project/tartiflette-asgi/", "project_urls": {"Homepage": "https://github.com/tartiflette/tartiflette-asgi"}, "release_url": "https://pypi.org/project/tartiflette-asgi/0.7.1/", "requires_dist": ["starlette (<0.13,>=0.12)", "tartiflette (<1.2,>=1.0)"], "requires_python": ">=3.6", "summary": "ASGI support for the Tartiflette Python GraphQL engine", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n  <img alt=\"tartiflette-asgi logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92d33a5015083807464c742286f6c7ed38faf465/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3135383638392f35383935343531392d62303561643638302d383739392d313165392d393133342d3930363232653737333166332e706e67\">\n</div>\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/tartiflette/tartiflette-asgi\" rel=\"nofollow\">\n    <img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37982ac53ffe9d298721bf3b1c6834d123d6002f/68747470733a2f2f7472617669732d63692e6f72672f7461727469666c657474652f7461727469666c657474652d617367692e7376673f6272616e63683d6d6173746572\">\n  </a>\n  <a href=\"https://pypi.org/project/tartiflette-asgi\" rel=\"nofollow\">\n    <img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27f7a68e29999332699d1fc63f05b2ae1d578d6e/68747470733a2f2f62616467652e667572792e696f2f70792f7461727469666c657474652d617367692e737667\">\n  </a>\n  <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">\n    <img alt=\"Code style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60c9766d3e4743ac1ccc37cf3755aa6609b5ce47/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d626c61636b2d3030303030302e737667\">\n    </a>\n</p>\n<p><code>tartiflette-asgi</code> (previously <code>tartiflette-starlette</code>) is a wrapper that provides ASGI support for the <a href=\"https://tartiflette.io\" rel=\"nofollow\">Tartiflette</a> Python GraphQL engine.</p>\n<p>Build your GraphQL API with Tartiflette, then use the included <code>TartifletteApp</code> and get the following:</p>\n<ul>\n<li>Compatibility with any ASGI server and framework.</li>\n<li>Standalone and sub-app serving.</li>\n<li>Built-in <a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> client.</li>\n<li>Support for <a href=\"https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md\" rel=\"nofollow\">GraphQL subscriptions over WebSocket</a>.</li>\n</ul>\n<hr>\n<p><strong>Note</strong>: <code>tartiflette-asgi &gt;= 0.7</code> (and <code>tartiflette-starlette == 0.6.*</code>) is only compatible with Tartiflette 1.x. For compatibility with Tartiflette 0.x, please install <code>tartiflette-starlette == 0.5.*</code>.</p>\n<hr>\n<p><strong>Table of contents</strong></p>\n<ul>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#user-guide\" rel=\"nofollow\">User guide</a>\n<ul>\n<li><a href=\"#standalone-serving\" rel=\"nofollow\">Standalone serving</a></li>\n<li><a href=\"#asgi-submounting\" rel=\"nofollow\">ASGI submounting</a></li>\n<li><a href=\"#making-requests\" rel=\"nofollow\">Making requests</a></li>\n<li><a href=\"#accessing-request-information\" rel=\"nofollow\">Accessing request information</a></li>\n<li><a href=\"#graphiql-client\" rel=\"nofollow\">GraphiQL client</a></li>\n<li><a href=\"#websocket-subscriptions-advanced\" rel=\"nofollow\">WebSocket subscriptions (Advanced)</a></li>\n</ul>\n</li>\n<li><a href=\"#api-reference\" rel=\"nofollow\">API Reference</a></li>\n<li><a href=\"#faq\" rel=\"nofollow\">FAQ</a></li>\n</ul>\n<h2>Quickstart</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tartiflette</span> <span class=\"kn\">import</span> <span class=\"n\">Resolver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette_asgi</span> <span class=\"kn\">import</span> <span class=\"n\">TartifletteApp</span>\n\n<span class=\"nd\">@Resolver</span><span class=\"p\">(</span><span class=\"s2\">\"Query.hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span>\n\n<span class=\"n\">sdl</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  type Query {</span>\n<span class=\"s2\">    hello(name: String): String</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">(</span><span class=\"n\">sdl</span><span class=\"o\">=</span><span class=\"n\">sdl</span><span class=\"p\">)</span>\n</pre>\n<p>Save the file as <code>graphql.py</code> and start a <a href=\"https://www.uvicorn.org\" rel=\"nofollow\">uvicorn</a> server:</p>\n<pre>uvicorn graphql:app\n</pre>\n<blockquote>\n<p><strong>Note</strong>: the GraphQL endpoint is exposed on <code>/</code> by default.</p>\n</blockquote>\n<p>Make a request:</p>\n<pre>curl -H <span class=\"s2\">\"Content-Type: application/graphql\"</span>  -d <span class=\"s1\">'{ hello(name: \"Chuck\") }'</span> http://localhost:8000\n</pre>\n<p>Response:</p>\n<pre><span class=\"p\">{</span> <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, Chuck!\"</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<p>Or access <code>http://localhost:8000</code> in a browser to make interactive queries using the built-in <a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> client:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92f08e849e3b3236f6970fa50f0b2e56e83cb064/68747470733a2f2f6769746875622e636f6d2f7461727469666c657474652f7461727469666c657474652d617367692f7261772f6d61737465722f696d672f677261706869716c2e706e67\"></p>\n<h2>Installation</h2>\n<ol>\n<li>Install Tartiflette's external dependencies as explained in the <a href=\"https://tartiflette.io/docs/tutorial/install-tartiflette\" rel=\"nofollow\">Tartiflette tutorial</a>.</li>\n<li>Install <code>tartiflette-asgi</code> from PyPI:</li>\n</ol>\n<pre>pip install <span class=\"s2\">\"tartiflette-asgi==0.*\"</span>\n</pre>\n<p>This will also install <a href=\"https://tartiflette.io\" rel=\"nofollow\">Tartiflette</a> and <a href=\"https://www.starlette.io\" rel=\"nofollow\">Starlette</a>, so you're good to go!</p>\n<p><strong>Note</strong>: <code>tartiflette-asgi</code> requires Python 3.6+.</p>\n<h2>User guide</h2>\n<p>The <a href=\"#tartifletteapp\" rel=\"nofollow\"><code>TartifletteApp</code></a> class is an ASGI3-compliant application. There are two ways to use it:</p>\n<ul>\n<li>Serve it as a standalone ASGI app.</li>\n<li>Mount it as an endpoint of another ASGI app (e.g. a Starlette application).</li>\n</ul>\n<h3>Standalone serving</h3>\n<p>The <a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a> example shows how to build a <code>TartifletteApp</code> and serve it as a standalone ASGI app.</p>\n<p>The app is served using Uvicorn, but any other ASGI web server will do, for example:</p>\n<ul>\n<li><a href=\"https://www.uvicorn.org\" rel=\"nofollow\">uvicorn</a></li>\n<li><a href=\"https://github.com/pgjones/hypercorn\" rel=\"nofollow\">hypercorn</a></li>\n<li><a href=\"https://github.com/django/daphne\" rel=\"nofollow\">daphne</a></li>\n</ul>\n<h3>ASGI submounting</h3>\n<p>Most ASGI web frameworks provide a way to <strong>mount</strong> another ASGI app at a given URL prefix. You can use this to serve a <code>TartifletteApp</code> at an endpoint such as <code>/graphql</code> on the root ASGI application.</p>\n<p>This is useful to have <strong>a GraphQL endpoint <em>and</em> other (non-GraphQL) endpoints</strong> within a single application. For example, to have a REST endpoint at <code>/api/users</code> and a GraphQL endpoint at <code>/graphql</code>.</p>\n<blockquote>\n<p><strong>Important</strong>: this should work with <em><strong>any</strong></em> web framework that supports ASGI submounting \u2014 it doesn't have to be Starlette. See also: <a href=\"#what-is-the-role-of-starlette\" rel=\"nofollow\">What is the role of Starlette?</a></p>\n</blockquote>\n<h4>Starlette example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.responses</span> <span class=\"kn\">import</span> <span class=\"n\">PlainTextResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette</span> <span class=\"kn\">import</span> <span class=\"n\">Resolver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette_asgi</span> <span class=\"kn\">import</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">,</span> <span class=\"n\">mount</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">PlainTextResponse</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@Resolver</span><span class=\"p\">(</span><span class=\"s2\">\"Query.hello\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">!\"</span>\n\n<span class=\"n\">sdl</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  type Query {</span>\n<span class=\"s2\">    hello(name: String): String</span>\n<span class=\"s2\">  }</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">graphql</span> <span class=\"o\">=</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">(</span><span class=\"n\">sdl</span><span class=\"o\">=</span><span class=\"n\">sdl</span><span class=\"p\">)</span>\n<span class=\"n\">mount</span><span class=\"o\">.</span><span class=\"n\">starlette</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s2\">\"/graphql\"</span><span class=\"p\">,</span> <span class=\"n\">graphql</span><span class=\"p\">)</span>  <span class=\"c1\"># (*)</span>\n</pre>\n<blockquote>\n<p>(*) This is a shorthand for:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">mount</span><span class=\"p\">(</span><span class=\"s2\">\"/graphql\"</span><span class=\"p\">,</span> <span class=\"n\">graphql</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_event_handler</span><span class=\"p\">(</span><span class=\"s2\">\"startup\"</span><span class=\"p\">,</span> <span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">startup</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>Save the file as <code>app.py</code>, and serve it with <a href=\"https://www.uvicorn.org\" rel=\"nofollow\">uvicorn</a>:</p>\n<pre>uvicorn app:app\n</pre>\n<p>Make a request:</p>\n<pre>curl -H <span class=\"s2\">\"Content-Type: application/graphql/\"</span>  -d <span class=\"s1\">'{ hello(name: \"Chuck\") }'</span> http://localhost:8000\n</pre>\n<blockquote>\n<p><strong>Note</strong>: if you receive a <code>307 Temporary Redirect</code> response, make sure to include the trailing slash: <code>/graphql/</code>.</p>\n</blockquote>\n<p>Response:</p>\n<pre><span class=\"p\">{</span> <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, Chuck!\"</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<h4>General approach</h4>\n<p>Assuming you have an instance of <code>TartifletteApp</code> called <code>graphql</code>, you need to:</p>\n<ol>\n<li>Add the <code>graphql</code> app as a sub-application (also known as \"mounting\"). The parent ASGI application may expose a method such as <code>.mount()</code> for this purpose.</li>\n<li>Add <code>graphql.startup</code> as a startup event handler so that the Tartiflette engine is built upon application startup. Note that:</li>\n</ol>\n<ul>\n<li>Not doing this will result in a <code>RuntimeError</code> when requesting the GraphQL endpoint.</li>\n<li>The parent ASGI application may expose a method such as <code>.add_event_handler()</code> for this purpose.</li>\n<li>This is only required if the parent ASGI application does not call lifespan event handlers for sub-applications, as is the case for Starlette.</li>\n</ul>\n<p><strong>Tip</strong>: the <a href=\"#mount\" rel=\"nofollow\"><code>mount</code></a> module provides mounting helpers for various ASGI frameworks.</p>\n<h3>Making requests</h3>\n<p><code>tartiflette-asgi</code> complies with the <a href=\"https://graphql.org/learn/serving-over-http/#http-methods-headers-and-body\" rel=\"nofollow\">GraphQL spec</a>, which allows you to pass the query in several ways:</p>\n<ul>\n<li><strong>URL query string</strong> (methods: <code>GET</code>, <code>POST</code>):</li>\n</ul>\n<pre>curl <span class=\"s1\">'http://localhost:8000?query=\\{hello(name:\"Chuck\")\\}'</span>\n</pre>\n<ul>\n<li><strong>JSON-encoded body</strong> (methods: <code>POST</code>):</li>\n</ul>\n<pre>curl <span class=\"se\">\\</span>\n  -H <span class=\"s2\">\"Content-Type: application/json\"</span> <span class=\"se\">\\</span>\n  -d <span class=\"s1\">'{\"query\": \"{ hello(name: \\\"Chuck\\\") }\"}'</span> <span class=\"se\">\\</span>\n  http://localhost:8000\n</pre>\n<ul>\n<li><strong>Raw body</strong> with the <code>application/graphql</code> content type (methods: <code>POST</code>):</li>\n</ul>\n<pre>curl <span class=\"se\">\\</span>\n  -H <span class=\"s2\">\"Content-Type: application/graphql\"</span> <span class=\"se\">\\</span>\n  -d <span class=\"s1\">'{ hello(name: \"Chuck\") }'</span> <span class=\"se\">\\</span>\n  http://localhost:8000\n</pre>\n<p><strong>Note</strong>: you may have your GraphQL API served at a different endpoint.</p>\n<h3>Accessing request information</h3>\n<p>You can access the Starlette <code>Request</code> object from resolvers using <code>context[\"req\"]</code>:</p>\n<pre><span class=\"nd\">@Resolver</span><span class=\"p\">(</span><span class=\"s2\">\"Query.whoami\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">resolve_whoami</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"req\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a mystery\"</span><span class=\"p\">)</span>\n</pre>\n<p>See also <a href=\"https://www.starlette.io/requests/\" rel=\"nofollow\">Requests</a> in the Starlette documentation.</p>\n<h3>GraphiQL client</h3>\n<p>By default, the GraphQL endpoint provided by <code>TartifletteApp</code> serves a <a href=\"https://github.com/graphql/graphiql\" rel=\"nofollow\">GraphiQL</a> client when it is accessed from a web browser. It can be customized using the <code>GraphiQL</code> helper.</p>\n<p>Here's an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tartiflette_asgi</span> <span class=\"kn\">import</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">,</span> <span class=\"n\">GraphiQL</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">(</span>\n    <span class=\"n\">sdl</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    type Query {</span>\n<span class=\"s2\">        hello(name: String): String</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">graphiql</span><span class=\"o\">=</span><span class=\"n\">GraphiQL</span><span class=\"p\">(</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/graphiql\"</span><span class=\"p\">,</span>\n        <span class=\"n\">default_headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"Authorization\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer 123\"</span><span class=\"p\">},</span>\n        <span class=\"n\">default_variables</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">},</span>\n        <span class=\"n\">default_query</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        query Hello($name: String) {</span>\n<span class=\"s2\">            hello(name: $name)</span>\n<span class=\"s2\">        }</span>\n<span class=\"s2\">        \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Save this as <code>graphql.py</code> and run <code>uvicorn graphql:app</code>. You should see the customized GraphiQL client when accessing <a href=\"http://127.0.0.1/graphiql\" rel=\"nofollow\">http://127.0.0.1/graphiql</a>:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0751c263218de28b6ef723def3043cad5c7120df/68747470733a2f2f6769746875622e636f6d2f7461727469666c657474652f7461727469666c657474652d617367692f7261772f6d61737465722f696d672f677261706869716c2d637573746f6d2e706e67\"></p>\n<p>See <a href=\"#graphiql\" rel=\"nofollow\"><code>GraphiQL</code></a> in the API reference for a complete description of the available options.</p>\n<h3>Providing additional context to resolvers</h3>\n<p>You can inject your own services, functions or data into the GraphQL <code>context</code> using the <code>context</code> option.</p>\n<p>For example, assuming you use a publish/subscribe library named <code>pubsub</code>, you could write:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pubsub</span> <span class=\"kn\">import</span> <span class=\"n\">PubSub</span>  <span class=\"c1\"># Fake</span>\n\n<span class=\"nd\">@Resolver</span><span class=\"p\">(</span><span class=\"s2\">\"Query.human\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">resolve_human</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">pubsub</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"pubsub\"</span><span class=\"p\">]</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">await</span> <span class=\"n\">pubsub</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"s2\">\"human_fetched\"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"n\">graphql</span> <span class=\"o\">=</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">(</span>\n  <span class=\"c1\"># ...,</span>\n  <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"pubsub\"</span><span class=\"p\">:</span> <span class=\"n\">PubSub</span><span class=\"p\">()},</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>WebSocket subscriptions (Advanced)</h3>\n<p>This package provides support for <a href=\"https://graphql.org/blog/subscriptions-in-graphql-and-relay/\" rel=\"nofollow\">GraphQL subscriptions</a> over WebSocket. Subscription queries can be issued via the built-in GraphiQL client, as well as <a href=\"https://www.apollographql.com/docs/react/advanced/subscriptions/\" rel=\"nofollow\">Apollo GraphQL</a> and any other client that uses the <a href=\"https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md\" rel=\"nofollow\">subscriptions-transport-ws</a> protocol.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette</span> <span class=\"kn\">import</span> <span class=\"n\">Subscription</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette_asgi</span> <span class=\"kn\">import</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">,</span> <span class=\"n\">GraphiQL</span>\n\n<span class=\"n\">sdl</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">type Query {</span>\n<span class=\"s2\">  _: Boolean</span>\n<span class=\"s2\">}</span>\n\n<span class=\"s2\">type Subscription {</span>\n<span class=\"s2\">  timer(seconds: Int!): Timer</span>\n<span class=\"s2\">}</span>\n\n<span class=\"s2\">enum Status {</span>\n<span class=\"s2\">  RUNNING</span>\n<span class=\"s2\">  DONE</span>\n<span class=\"s2\">}</span>\n\n<span class=\"s2\">type Timer {</span>\n<span class=\"s2\">  remainingTime: Int!</span>\n<span class=\"s2\">  status: Status!</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"nd\">@Subscription</span><span class=\"p\">(</span><span class=\"s2\">\"Subscription.timer\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_timer</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">\"seconds\"</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"p\">{</span><span class=\"s2\">\"timer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"remainingTime\"</span><span class=\"p\">:</span> <span class=\"n\">seconds</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"RUNNING\"</span><span class=\"p\">}}</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"p\">{</span><span class=\"s2\">\"timer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"remainingTime\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DONE\"</span><span class=\"p\">}}</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">TartifletteApp</span><span class=\"p\">(</span>\n    <span class=\"n\">sdl</span><span class=\"o\">=</span><span class=\"n\">sdl</span><span class=\"p\">,</span>\n    <span class=\"n\">subscriptions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">graphiql</span><span class=\"o\">=</span><span class=\"n\">GraphiQL</span><span class=\"p\">(</span>\n        <span class=\"n\">default_query</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        subscription {</span>\n<span class=\"s2\">          timer(seconds: 5) {</span>\n<span class=\"s2\">            remainingTime</span>\n<span class=\"s2\">            status</span>\n<span class=\"s2\">          }</span>\n<span class=\"s2\">        }</span>\n<span class=\"s2\">        \"\"\"</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p><strong>Note</strong>: the subscriptions endpoint is exposed on <code>/subscriptions</code> by default.</p>\n</blockquote>\n<p>Save this file as <code>graphql.py</code>, then run <code>$ uvicorn graphql:app</code>. Open the GraphiQL client at <a href=\"http://localhost:8000\" rel=\"nofollow\">http://localhost:8000</a>, and hit \"Play\"! The timer should update on real-time.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00ea2f013c6fedff1dc8f4f246cc68e7b1e05af3/68747470733a2f2f6769746875622e636f6d2f7461727469666c657474652f7461727469666c657474652d617367692f7261772f6d61737465722f696d672f677261706869716c2d737562736372697074696f6e732e706e67\"></p>\n<p>See <a href=\"#subscriptions\" rel=\"nofollow\"><code>Subscriptions</code></a> in the API reference for a complete description of the available options.</p>\n<p>For more information on using subscriptions in Tartiflette, see the <a href=\"https://tartiflette.io/docs/api/subscription\" rel=\"nofollow\">Tartiflette documentation</a>.</p>\n<h2>API Reference</h2>\n<blockquote>\n<p><strong>Note</strong>: unless specified, components documented here can be imported from <code>tartiflette_asgi</code> directly, e.g. <code>from tartiflette_asgi import TartifletteApp</code>.</p>\n</blockquote>\n<h3><code>TartifletteApp</code></h3>\n<h4>Parameters</h4>\n<p><strong>Note</strong>: all parameters are keyword-only.</p>\n<ul>\n<li><code>engine</code> (<code>Engine</code>): a Tartiflette <a href=\"https://tartiflette.io/docs/api/engine\" rel=\"nofollow\">engine</a>. Required if <code>sdl</code> is not given.</li>\n<li><code>sdl</code> (<code>str</code>): a GraphQL schema defined using the <a href=\"https://graphql.org/learn/schema/\" rel=\"nofollow\">GraphQL Schema Definition Language</a>. Required if <code>engine</code> is not given.</li>\n<li><code>path</code> (<code>str</code>, optional): the path which clients should make GraphQL queries to. Defaults to <code>\"/\"</code>.</li>\n<li><code>graphiql</code> (<code>GraphiQL</code> or <code>bool</code>, optional): configuration for the GraphiQL client. Defaults to <code>True</code>, which is equivalent to <code>GraphiQL()</code>. Use <code>False</code> to not register the GraphiQL client.</li>\n<li><code>subscriptions</code> (<code>Subscriptions</code> or <code>bool</code>, optional): subscriptions configuration. Defaults to <code>True</code>, which is equivalent to <code>Subscriptions(path=\"/subscriptions\")</code>. Leave empty or pass <code>None</code> to not register the subscription WebSocket endpoint.</li>\n<li><code>context</code> (<code>dict</code>, optional): a copy of this dictionary is passed to resolvers when executing a query. Defaults to <code>{}</code>. Note: the Starlette <code>Request</code> object is always present as <code>req</code>.</li>\n<li><code>schema_name</code> (<code>str</code>, optional): name of the GraphQL schema from the <a href=\"https://tartiflette.io/docs/api/schema-registry/\" rel=\"nofollow\">Schema Registry</a> which should be used \u2014 mostly for advanced usage. Defaults to <code>\"default\"</code>.</li>\n</ul>\n<h4>Methods</h4>\n<ul>\n<li><code>__call__(scope, receive, send)</code>: ASGI3 implementation.</li>\n</ul>\n<h4>Error responses</h4>\n<table>\n<thead>\n<tr>\n<th>Status code</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>400 Bad Request</td>\n<td>The GraphQL query could not be found in the request data.</td>\n</tr>\n<tr>\n<td>404 Not Found</td>\n<td>The request does not match the GraphQL or GraphiQL endpoint paths.</td>\n</tr>\n<tr>\n<td>405 Method Not Allowed</td>\n<td>The HTTP method is not one of <code>GET</code>, <code>HEAD</code> or <code>POST</code>.</td>\n</tr>\n<tr>\n<td>415 Unsupported Media Type</td>\n<td>The POST request made to the GraphQL endpoint uses a <code>Content-Type</code> different from <code>application/json</code> and <code>application/graphql</code>.</td>\n</tr></tbody></table>\n<h3><code>GraphiQL</code></h3>\n<p>Configuration helper for the GraphiQL client.</p>\n<h4>Parameters</h4>\n<p><strong>Note</strong>: all parameters are keyword-only.</p>\n<ul>\n<li><code>path</code> (<code>str</code>, optional): the path of the GraphiQL endpoint, <strong>relative to the root path which <code>TartifletteApp</code> is served at</strong>. If not given, defaults to the <code>path</code> given to <code>TartifletteApp</code>.</li>\n<li><code>default_headers</code> (<code>dict</code>, optional): extra HTTP headers to send when calling the GraphQL endpoint.</li>\n<li><code>default_query</code> (<code>str</code>, optional): the default query to display when accessing the GraphiQL interface.</li>\n<li><code>default_variables</code> (<code>dict</code>, optional): default <a href=\"https://graphql.org/learn/queries/#variables\" rel=\"nofollow\">variables</a> to display when accessing the GraphiQL interface.</li>\n<li><code>template</code> (<code>str</code>, optional): an HTML template to use instead of the default one. In the template, <code>default_headers</code>, <code>default_query</code> and <code>default_variables</code>, as well as the GraphQL <code>endpoint</code>, are available as strings (JSON-encoded if needed) using template string substitutions, e.g.:</li>\n</ul>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">endpoint</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span> <span class=\"c1\">// This is where the API call should be made.</span>\n<span class=\"kr\">const</span> <span class=\"nx\">defaultHeaders</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">default_headers</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n</pre>\n<h3><code>Subscriptions</code></h3>\n<p>Configuration helper for WebSocket subscriptions.</p>\n<h4>Parameters</h4>\n<p><strong>Note</strong>: all parameters are keyword-only.</p>\n<ul>\n<li><code>path</code> (<code>str</code>): the path of the subscriptions WebSocket endpoint, <strong>relative to the root path which <code>TartifletteApp</code> is served at</strong>. If not given, defaults to <code>/subscriptions</code>.</li>\n</ul>\n<h3><code>mount</code></h3>\n<p>This module contains helpers for mounting a <code>TartifletteApp</code> on other ASGI applications. Use these helpers to make sure you comply with the steps described in <a href=\"#general-approach\" rel=\"nofollow\">General approach</a>.</p>\n<h4>Parameters</h4>\n<p>All mounting helpers expect the same parameters:</p>\n<ul>\n<li><code>parent</code> (ASGI app): the parent ASGI application which the <code>TartifletteApp</code> must be mounted onto.</li>\n<li><code>path</code> (<code>str</code>): the URL path where the <code>TartifletteApp</code> should be mounted.</li>\n<li><code>app</code> (<code>TartifletteApp</code>): the <code>TartifletteApp</code> to mount.</li>\n<li><code>**kwargs</code> (any): extra keyword arguments passed to the mount implementation of the <code>parent</code> app.</li>\n</ul>\n<h4>Available helpers</h4>\n<table>\n<thead>\n<tr>\n<th>Helper</th>\n<th>Mount implementation</th>\n<th>Startup event handler implementation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>mount.starlette()</code></td>\n<td><code>parent.mount()</code></td>\n<td><code>parent.add_event_handler()</code></td>\n</tr></tbody></table>\n<blockquote>\n<p>Missing a helper for your favorite framework? Feel free to <a href=\"https://github.com/tartiflette/tartiflette-asgi/compare\" rel=\"nofollow\">open a pull request</a>!</p>\n</blockquote>\n<h2>FAQ</h2>\n<h3>Does this package ship with Tartiflette?</h3>\n<p><strong>Yes</strong>. Everything is included, which allows you to start building your GraphQL API right away. See also <a href=\"#installation\" rel=\"nofollow\">Installation</a>.</p>\n<h3>Do I need to learn GraphQL/Tartiflette to use this package?</h3>\n<p><strong>Yes</strong>: once you've got the <code>TartifletteApp</code> ASGI app up and running, you're in Tartiflette territory.</p>\n<p>Here are some resources to get you started:</p>\n<ul>\n<li><a href=\"https://tartiflette.io/docs/tutorial/getting-started\" rel=\"nofollow\">Tartiflette tutorial</a></li>\n<li><a href=\"https://graphql.org/learn/\" rel=\"nofollow\">Introduction to GraphQL</a></li>\n<li><a href=\"https://tartiflette.io/docs/api/engine\" rel=\"nofollow\">Tartiflette API reference</a></li>\n</ul>\n<h3>What is the role of Starlette?</h3>\n<p><code>tartiflette-asgi</code> uses Starlette as a lightweight ASGI toolkit: internally, it uses Starlette's request and response classes, and some other components.</p>\n<p>Luckily, this does not require your applications to use Starlette at all.</p>\n<p>For example, if you are <a href=\"#submounting-on-another-asgi-app\" rel=\"nofollow\">submounting your GraphQL app</a> on an app built with an async web framework, this framework does not need to use Starlette \u2014 it just needs to speak ASGI.</p>\n<h3>What is ASGI?</h3>\n<p>ASGI provides a standard interface between async-capable Python web servers, frameworks, and applications.</p>\n<p>See also the <a href=\"https://asgi.readthedocs.io/en/latest/\" rel=\"nofollow\">ASGI documentation</a>.</p>\n<h2>Contributing</h2>\n<p>Want to contribute? Awesome! Be sure to read our <a href=\"https://github.com/tartiflette/tartiflette-asgi/tree/master/CONTRIBUTING.md\" rel=\"nofollow\">Contributing guidelines</a>.</p>\n<h2>Changelog</h2>\n<p>Changes to this project are recorded in the <a href=\"https://github.com/tartiflette/tartiflette-asgi/tree/master/CHANGELOG.md\" rel=\"nofollow\">changelog</a>.</p>\n<h2>License</h2>\n<p>MIT</p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>,\nand this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2>Unreleased</h2>\n<h2>0.7.1 - 2019-10-28</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Requests containing malformed JSON now return a 400 Bad Request error response instead of 500 Internal Server Error. (Pull #81)</li>\n</ul>\n<h2>0.7.0 - 2019-10-27</h2>\n<h3>Changed</h3>\n<ul>\n<li>Renamed project to <code>tartiflette-asgi</code>.</li>\n</ul>\n<h2>0.6.0 - 2019-10-18</h2>\n<h3>Added</h3>\n<ul>\n<li>Add support for Tartiflette 1.x. (Pull #58)</li>\n<li>Officialize support for Python 3.8. (Pull #80)</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>Drop support for Tartiflette 0.x. (Pull #58)</li>\n</ul>\n<h2>0.5.2 - 2019-10-09</h2>\n<h3>Added</h3>\n<ul>\n<li>Add support for Python 3.8. (Pull #55)</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Type annotations are now correctly detected by <code>mypy</code>. (Pull #66)</li>\n<li>Fix a bug that prevented the GraphiQL web interface from making queries when the application was mounted on a parent ASGI app. (Pull #51)</li>\n</ul>\n<h2>0.5.1 - 2019-07-16</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Fixed a bug that prevented accessing the GraphiQL interface when subscriptions were not enabled.</li>\n</ul>\n<h2>0.5.0 - 2019-07-12</h2>\n<h3>Added</h3>\n<ul>\n<li>WebSocket subscriptions, configurable with the new <code>subscriptions</code> option on <code>TartifletteApp</code>.</li>\n<li>Pass extra context to resolvers using the new <code>context</code> option on <code>TartifletteApp</code>.</li>\n</ul>\n<h2>0.4.0 - 2019-07-04</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for Tartiflette 0.12.x.</li>\n<li>Add a <code>mount</code> module with submounting helpers.</li>\n<li>Add <code>mount.starlette()</code>.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Due to the new <a href=\"https://tartiflette.io/docs/api/engine#cook-your-tartiflette\" rel=\"nofollow\">engine cooking API</a> in Tartiflette 0.12, <code>TartifletteApp</code> now includes a startup event handler responsible for building the GraphQL engine. If submounting, it <strong>must</strong> be registered on the parent ASGI app. Helpers in the <code>mount</code> module take care of this for you.</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>Drop support for Tartiflette 0.11.x and below.</li>\n</ul>\n<h2>0.3.0 - 2019-07-03</h2>\n<h3>Added</h3>\n<ul>\n<li>GraphiQL configuration via the <code>GraphiQL</code> helper. Options: <code>path</code>, <code>default_query</code>, <code>default_headers</code>, <code>default_variables</code>, <code>template</code>.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Internal refactoring that leverages more of Starlette's capabilities.</li>\n<li>Documentation improvements.</li>\n</ul>\n<h2>0.2.0 - 2019-06-10</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for <code>starlette&gt;=0.12</code> (previously <code>&gt;=0.12.0b3</code>).</li>\n<li>Tartiflette is now installed too when installing <code>tartiflette-asgi</code>.</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>The default <code>path</code> is now <code>\"\"</code> (previously <code>\"/\"</code>).</li>\n<li>The request is now accessible in the GraphQL context via <code>context[\"req\"]</code> (previously <code>context[\"request\"]</code>).</li>\n<li>If no error occurred, the <code>errors</code> field is not present in the response anymore (previously was <code>None</code>).</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>More robust URL matching on <code>TartifletteApp</code>.</li>\n</ul>\n<h2>0.1.1 - 2019-04-28</h2>\n<h3>Fixed</h3>\n<ul>\n<li>Add missing <code>graphiql.html</code> package asset.</li>\n</ul>\n<h2>0.1.0 - 2019-04-26</h2>\n<h3>Added</h3>\n<p>Features:</p>\n<ul>\n<li><code>TartifletteApp</code> ASGI application.</li>\n<li>Built-in GraphiQL client.</li>\n</ul>\n<p>Project-related additions:</p>\n<ul>\n<li>Package setup.</li>\n<li>Changelog.</li>\n<li>Contributing guide.</li>\n<li>README and documentation.</li>\n</ul>\n\n          </div>"}, "last_serial": 6043325, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "6f48d1f596867da2ec001c5325fc9be0", "sha256": "971f55b6b488441ec3786fe248733f5a2f6b8b0ada488e3e81f5c15e8e2ead2c"}, "downloads": -1, "filename": "tartiflette_asgi-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f48d1f596867da2ec001c5325fc9be0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 18856, "upload_time": "2019-10-27T14:28:36", "upload_time_iso_8601": "2019-10-27T14:28:36.287376Z", "url": "https://files.pythonhosted.org/packages/f5/9a/ba16e5a323a8e8b0625f2898017f8a4d8c6ff64a441db08a5e2c2e30e619/tartiflette_asgi-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a6d9141774aba5f61da302759793926", "sha256": "6e78073a7f7599fe9c6e911f56b602e46d8907011eddbe20cb2d6e63bbd06e95"}, "downloads": -1, "filename": "tartiflette-asgi-0.7.0.tar.gz", "has_sig": false, "md5_digest": "1a6d9141774aba5f61da302759793926", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23788, "upload_time": "2019-10-27T14:28:39", "upload_time_iso_8601": "2019-10-27T14:28:39.431634Z", "url": "https://files.pythonhosted.org/packages/c2/14/71c37764f7e9b067a78aff103238573311dadd67e94c59bf010dbb8123a1/tartiflette-asgi-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "e79e41e54cfba308cf6fb6c03cfdc9a0", "sha256": "a186d455ab63e3b147f4bcea6efdd6856d099b5c65691738d09e5b64386dc341"}, "downloads": -1, "filename": "tartiflette_asgi-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e79e41e54cfba308cf6fb6c03cfdc9a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 18960, "upload_time": "2019-10-28T18:36:36", "upload_time_iso_8601": "2019-10-28T18:36:36.370709Z", "url": "https://files.pythonhosted.org/packages/ff/d7/86063781723740d6dca36c9dfe8888e7d46c120e9b445c8c09cf4f434d8f/tartiflette_asgi-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0111586b3dc3bbb0d35db02b12c08346", "sha256": "a0f3eb1bc7b98c6d5357b1f894e0dfcf9767241ca55dc2fe1ad066a01672f6bb"}, "downloads": -1, "filename": "tartiflette-asgi-0.7.1.tar.gz", "has_sig": false, "md5_digest": "0111586b3dc3bbb0d35db02b12c08346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23944, "upload_time": "2019-10-28T18:36:38", "upload_time_iso_8601": "2019-10-28T18:36:38.233456Z", "url": "https://files.pythonhosted.org/packages/2c/97/2244959fef487c364c1eee79d5aba29c45b257e2ec5110b2e86aa252e3ca/tartiflette-asgi-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e79e41e54cfba308cf6fb6c03cfdc9a0", "sha256": "a186d455ab63e3b147f4bcea6efdd6856d099b5c65691738d09e5b64386dc341"}, "downloads": -1, "filename": "tartiflette_asgi-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e79e41e54cfba308cf6fb6c03cfdc9a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 18960, "upload_time": "2019-10-28T18:36:36", "upload_time_iso_8601": "2019-10-28T18:36:36.370709Z", "url": "https://files.pythonhosted.org/packages/ff/d7/86063781723740d6dca36c9dfe8888e7d46c120e9b445c8c09cf4f434d8f/tartiflette_asgi-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0111586b3dc3bbb0d35db02b12c08346", "sha256": "a0f3eb1bc7b98c6d5357b1f894e0dfcf9767241ca55dc2fe1ad066a01672f6bb"}, "downloads": -1, "filename": "tartiflette-asgi-0.7.1.tar.gz", "has_sig": false, "md5_digest": "0111586b3dc3bbb0d35db02b12c08346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23944, "upload_time": "2019-10-28T18:36:38", "upload_time_iso_8601": "2019-10-28T18:36:38.233456Z", "url": "https://files.pythonhosted.org/packages/2c/97/2244959fef487c364c1eee79d5aba29c45b257e2ec5110b2e86aa252e3ca/tartiflette-asgi-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:53 2020"}