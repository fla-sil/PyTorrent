{"info": {"author": "gocept gmbh & co. kg", "author_email": "mail@gocept.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=========\nFilestore\n=========\n\nThe filestore is an easy way to to process files with multiple processes\nwithout needing locks.\n\n\nInitialize a FileStore\n======================\n\nCreate a filestore in a temporary area:\n\n>>> import tempfile, os\n>>> temp_dir = tempfile.mkdtemp()\n>>> store_dir = os.path.join(temp_dir, 'store1')\n>>> os.mkdir(store_dir)\n>>> from gocept.filestore import FileStore\n>>> filestore = FileStore(store_dir)\n>>> filestore\n<gocept.filestore.filestore.FileStore object at 0x...>\n\nSo far nothing has happend:\n\n>>> import os\n>>> os.listdir(store_dir)\n[]\n\nBefore using the store we need to prepare it:\n\n>>> filestore.prepare()\n\nPrepare has created the tmp/new/cur directory structure:\n\n>>> sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n\nCalling prepare again does nothing:\n\n>>> filestore.prepare()\n>>> sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n\nIf the store_dir is removed, it is created again by calling prepare.\n\n>>> import shutil\n>>> shutil.rmtree(store_dir)\n>>> os.listdir(temp_dir)\n[]\n>>> filestore.prepare()\n>>> os.listdir(temp_dir)\n['store1']\n>>> sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n\n\nUse a FileStore\n===============\n\nAdding files to the store works with the `create` method:\n\n>>> f = filestore.create('a-file')\n\nFiles are created in the 'tmp' area with the 'w' mode (if not specified):\n\n>>> f.name\n'.../tmp/a-file'\n>>> f.mode\n'w'\n\nWe find the file in the tmp area. Note that `filestore.list` lists files with\ntheir full path names, so we could feed the name directly to file/open:\n\n>>> filestore.list('tmp')\n['.../tmp/a-file']\n\nWe got a plain file back, so write to it:\n\n>>> _ = f.write('Die Ente bleibt draussen!')\n>>> f.close()\n\nWe have finished writing our file, so we can move it to the `new` space for\nother applications to pick it up:\n\n>>> filestore.move('a-file', 'tmp', 'new')\n>>> filestore.list('tmp')\n[]\n>>> filestore.list('new')\n['.../new/a-file']\n\nThe move operation uses os.move which is supposed to be atomic. When another\nprocesses \"sees\" the file it can directly work with it and move it to 'cur':\n\n>>> filestore.move('a-file', 'new', 'cur')\n>>> filestore.list('new')\n[]\n>>> filestore.list('cur')\n['.../cur/a-file']\n\nFiles can be copied, too:\n\n>>> filestore.copy('a-file', 'cur', 'tmp')\n>>> filestore.list('cur')\n['.../cur/a-file']\n>>> filestore.list('tmp')\n['.../tmp/a-file']\n\nFinally, files can be removed:\n\n>>> filestore.remove('a-file', 'cur')\n>>> filestore.list('cur')\n[]\n\nCleanup\n=======\n\nRemove the temporary directory after testing:\n\n>>> import shutil\n>>> shutil.rmtree(store_dir)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gocept/gocept.filestore", "keywords": "filesystem consistency", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "gocept.filestore", "package_url": "https://pypi.org/project/gocept.filestore/", "platform": "", "project_url": "https://pypi.org/project/gocept.filestore/", "project_urls": {"Homepage": "https://github.com/gocept/gocept.filestore"}, "release_url": "https://pypi.org/project/gocept.filestore/0.4/", "requires_dist": null, "requires_python": "", "summary": "Provides maildir like access to files", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The filestore is an easy way to to process files with multiple processes\nwithout needing locks.</p>\n<div id=\"initialize-a-filestore\">\n<h2>Initialize a FileStore</h2>\n<p>Create a filestore in a temporary area:</p>\n<pre>&gt;&gt;&gt; import tempfile, os\n&gt;&gt;&gt; temp_dir = tempfile.mkdtemp()\n&gt;&gt;&gt; store_dir = os.path.join(temp_dir, 'store1')\n&gt;&gt;&gt; os.mkdir(store_dir)\n&gt;&gt;&gt; from gocept.filestore import FileStore\n&gt;&gt;&gt; filestore = FileStore(store_dir)\n&gt;&gt;&gt; filestore\n&lt;gocept.filestore.filestore.FileStore object at 0x...&gt;\n</pre>\n<p>So far nothing has happend:</p>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.listdir(store_dir)\n[]\n</pre>\n<p>Before using the store we need to prepare it:</p>\n<pre>&gt;&gt;&gt; filestore.prepare()\n</pre>\n<p>Prepare has created the tmp/new/cur directory structure:</p>\n<pre>&gt;&gt;&gt; sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n</pre>\n<p>Calling prepare again does nothing:</p>\n<pre>&gt;&gt;&gt; filestore.prepare()\n&gt;&gt;&gt; sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n</pre>\n<p>If the store_dir is removed, it is created again by calling prepare.</p>\n<pre>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree(store_dir)\n&gt;&gt;&gt; os.listdir(temp_dir)\n[]\n&gt;&gt;&gt; filestore.prepare()\n&gt;&gt;&gt; os.listdir(temp_dir)\n['store1']\n&gt;&gt;&gt; sorted(os.listdir(store_dir))\n['cur', 'new', 'tmp']\n</pre>\n</div>\n<div id=\"use-a-filestore\">\n<h2>Use a FileStore</h2>\n<p>Adding files to the store works with the <cite>create</cite> method:</p>\n<pre>&gt;&gt;&gt; f = filestore.create('a-file')\n</pre>\n<p>Files are created in the \u2018tmp\u2019 area with the \u2018w\u2019 mode (if not specified):</p>\n<pre>&gt;&gt;&gt; f.name\n'.../tmp/a-file'\n&gt;&gt;&gt; f.mode\n'w'\n</pre>\n<p>We find the file in the tmp area. Note that <cite>filestore.list</cite> lists files with\ntheir full path names, so we could feed the name directly to file/open:</p>\n<pre>&gt;&gt;&gt; filestore.list('tmp')\n['.../tmp/a-file']\n</pre>\n<p>We got a plain file back, so write to it:</p>\n<pre>&gt;&gt;&gt; _ = f.write('Die Ente bleibt draussen!')\n&gt;&gt;&gt; f.close()\n</pre>\n<p>We have finished writing our file, so we can move it to the <cite>new</cite> space for\nother applications to pick it up:</p>\n<pre>&gt;&gt;&gt; filestore.move('a-file', 'tmp', 'new')\n&gt;&gt;&gt; filestore.list('tmp')\n[]\n&gt;&gt;&gt; filestore.list('new')\n['.../new/a-file']\n</pre>\n<p>The move operation uses os.move which is supposed to be atomic. When another\nprocesses \u201csees\u201d the file it can directly work with it and move it to \u2018cur\u2019:</p>\n<pre>&gt;&gt;&gt; filestore.move('a-file', 'new', 'cur')\n&gt;&gt;&gt; filestore.list('new')\n[]\n&gt;&gt;&gt; filestore.list('cur')\n['.../cur/a-file']\n</pre>\n<p>Files can be copied, too:</p>\n<pre>&gt;&gt;&gt; filestore.copy('a-file', 'cur', 'tmp')\n&gt;&gt;&gt; filestore.list('cur')\n['.../cur/a-file']\n&gt;&gt;&gt; filestore.list('tmp')\n['.../tmp/a-file']\n</pre>\n<p>Finally, files can be removed:</p>\n<pre>&gt;&gt;&gt; filestore.remove('a-file', 'cur')\n&gt;&gt;&gt; filestore.list('cur')\n[]\n</pre>\n</div>\n<div id=\"cleanup\">\n<h2>Cleanup</h2>\n<p>Remove the temporary directory after testing:</p>\n<pre>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree(store_dir)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6217220, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "9ffc895c96d1f090dcfd75d4c0d220e6", "sha256": "b4aa426dc7ceca6924f149578fb2bdc7336e0c469b6bc6dd9cbfb2539d21744c"}, "downloads": -1, "filename": "gocept.filestore-0.2.tar.gz", "has_sig": true, "md5_digest": "9ffc895c96d1f090dcfd75d4c0d220e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4287, "upload_time": "2007-08-30T16:28:37", "upload_time_iso_8601": "2007-08-30T16:28:37Z", "url": "https://files.pythonhosted.org/packages/fc/03/b3723903fddd9d8d75d7ecc8c2a258624646f70e69ea01ae1aab57676cc1/gocept.filestore-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e979329793f8bd58fafa1a03c0f9a855", "sha256": "2722834c0d6cf7124b021970bc780d37d60a8664822f3935dfdfcf66a0bff648"}, "downloads": -1, "filename": "gocept.filestore-0.3.tar.gz", "has_sig": false, "md5_digest": "e979329793f8bd58fafa1a03c0f9a855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4470, "upload_time": "2009-10-08T15:13:10", "upload_time_iso_8601": "2009-10-08T15:13:10.329629Z", "url": "https://files.pythonhosted.org/packages/74/59/62c2228cfacac302771b8701f229df8a6f7cf5646b2d94c1b8739c246617/gocept.filestore-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0ea70daeb1696f4be98a658562c2d66a", "sha256": "1fadb679cdb0cfdb04151755bd4f54e61cac1ea7c5f1de134fbcdc58937ba566"}, "downloads": -1, "filename": "gocept.filestore-0.4.tar.gz", "has_sig": false, "md5_digest": "0ea70daeb1696f4be98a658562c2d66a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5345, "upload_time": "2019-11-29T08:33:03", "upload_time_iso_8601": "2019-11-29T08:33:03.338784Z", "url": "https://files.pythonhosted.org/packages/23/37/ce96145d80603a44f5977e19804a8d1612a24d30807be6293cfc5c6c9f06/gocept.filestore-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ea70daeb1696f4be98a658562c2d66a", "sha256": "1fadb679cdb0cfdb04151755bd4f54e61cac1ea7c5f1de134fbcdc58937ba566"}, "downloads": -1, "filename": "gocept.filestore-0.4.tar.gz", "has_sig": false, "md5_digest": "0ea70daeb1696f4be98a658562c2d66a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5345, "upload_time": "2019-11-29T08:33:03", "upload_time_iso_8601": "2019-11-29T08:33:03.338784Z", "url": "https://files.pythonhosted.org/packages/23/37/ce96145d80603a44f5977e19804a8d1612a24d30807be6293cfc5c6c9f06/gocept.filestore-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:03 2020"}