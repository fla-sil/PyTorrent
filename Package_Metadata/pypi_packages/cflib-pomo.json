{"info": {"author": "Dominik Schrempf", "author_email": "dominik.schrempf@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research"], "description": "# Counts file library\n\nThis python library `cflib` provides scripts to convert between fasta, VCF and\ncounts files. Counts files are used by\n[PoMo](http://www.cibiv.at/software/iqtree/doc/Polymorphism-Aware-Models/), an\nimplementation of a polymorphism-aware phylogenetic model. We advice you to use\nPoMo implemented in [IQ-TREE](http://www.cibiv.at/software/iqtree/).\n\nFor a reference, please see and cite:\n\n    Schrempf, D., Minh, B. Q., De Maio, N., von Haeseler, A., &\n    Kosiol, C. (2016). Reversible Polmorphism-Aware Phylotenetic\n    Models and their Application to Tree Inference. Journal of\n    Theoretical Biology, in press.\n\n# Requirements\n\n`cflib` requires [`python` (Version 3.x)](https://www.python.org/) to be\ninstalled. `cflib` also uses the following python libraries that will be\nautomatically pulled when installing `cflib`:\n\n- [scipy](http://www.scipy.org/),\n- [numpy](http://www.numpy.org/) and\n- [pysam](http://code.google.com/p/pysam/).\n\n# Installation\n\nInstall `cflib` and the conversion scripts with\n\n```sh\npip install --user cflib-pomo\n```\n\nNote that the name of `cflib` on the PyPI repository (which is used by `pip`) is\n`cflib-pomo`, since the name `cflib` was taken!\n\nIf the standard Python version of your operation system is still 2.x (e.g.,\nOSX), make sure that you use, `pip3`.\n\nThe `--user` flag is optional and tells Python to install `cflib` and\nthe scripts only for this user but not system wide.\n\nIf you want to uninstall `cflib`,\n\n```sh\npip uninstall cflib-pomo\n```\n\nThe [conversion scripts](#Conversion scripts) should be directly available if\nyour `PATH` environment variable is setup correctly. For my Linux installation,\nthe Python path `~/.local/bin` had to be included. This may vary for your\noperating system.\n\n# Example\n\nSample data can be found in [examples](./examples). Assuming that have installed\n`cflib` we will now convert [`example.fasta`](./examples/example.fasta) to a\ncounts file named `example_from_fasta.cf`. The [script](#conversion-scripts)\nthat we will use is called [`FastaToCounts.py`](./scripts/FastaToCounts.py).\nFirst, we have a look at the help message:\n\n```sh\nFastaToCounts.py --help\n```\n\n    usage: FastaToCounts.py [-h] [-v] [--iupac] fastaFile output\n\n    Convert fasta to counts format.\n\n    The (aligned) sequences in the fasta file are read in and the data is\n    written to a counts format file.\n\n    Sequence names are stripped at the first dash.  If the stripped\n    sequence name coincide, individuals are put into the same population.\n\n    E.g., homo_sapiens-XXX and homo_sapiens-YYY will be in the same\n    population homo_sapiens.\n\n    Take care with large files, this uses a lot of memory.\n\n    The input as well as the output files can additionally be gzipped\n    (indicated by a .gz file ending).\n\n    If heterozygotes are encoded with IUPAC codes (e.g., 'r' for A or G),\n    homozygotes need to be counted twice so that the level of polymorphism\n    stays correct.  This can be done with the `--iupac` flag.\n\n    positional arguments:\n      fastaFile      path to (gzipped) fasta file\n      output         name of (gzipped) outputfile in counts format\n\n    optional arguments:\n      -h, --help     show this help message and exit\n      -v, --verbose  turn on verbosity (-v or -vv)\n      --iupac        heteorzygotes are encoded with IUPAC codes\n\nAs requested, the sequence names in `example.fasta` are, e.g.,\n`Sheep-1`, `Sheep-2`, and so on.  The following code converts the file\n`example.fasta` into the counts file `example_from_fasta.cf`:\n\n```sh\nFastaToCounts.py example.fasta example_from_fasta.cf\n```\n\n# Conversion scripts\n\n- [CountsToFasta.py](./scripts/CountsToFasta.py): Convert a counts file to a\n  fasta file.\n- [FastaToCounts.py](./scripts/FastaToCounts.py): Convert a fasta file to counts\n  format.\n- [FastaToVCF.py](./scripts/FastaToVCF.py): Convert a fasta file to variant call\n  format.\n- [FastaVCFToCounts.py](./scripts/FastaVCFToCounts.py): Convert a fasta\n  reference with VCF files to counts format.\n- [FilterMSA.py](./scripts/FilterMSA.py): Filter a multiple sequence alignment\n  file (apply standard filters; cf. `libPoMo`).\n- [GPToCounts.py](./scripts/GPToCounts.py): Experimental. Convert gene\n  prediction files with reference to counts format.\n- [MSAToCounts.py](./scripts/MSAToCounts.py): Convert multiple sequence\n  alignments with VCF files to counts format.\n\nEach script comes with its own documentation. Please execute, e.g.,\n\n```sh\nFastaToCounts.py --help\n```\n\nAll conversion scripts can be found in the [scripts](./scripts) folder.\n\n\n# Documentation\n\nIf you are interested in `cflib` itself, please refer to the\n[cflib reference manual](http://cflib.readthedocs.io/en/latest/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pomo-dev/cflib", "keywords": "counts fasta files multi sequence alignments", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cflib-pomo", "package_url": "https://pypi.org/project/cflib-pomo/", "platform": "", "project_url": "https://pypi.org/project/cflib-pomo/", "project_urls": {"Homepage": "https://github.com/pomo-dev/cflib"}, "release_url": "https://pypi.org/project/cflib-pomo/1.2.1/", "requires_dist": ["scipy", "numpy", "pysam"], "requires_python": "", "summary": "Counts file library and conversion scripts.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Counts file library</h1>\n<p>This python library <code>cflib</code> provides scripts to convert between fasta, VCF and\ncounts files. Counts files are used by\n<a href=\"http://www.cibiv.at/software/iqtree/doc/Polymorphism-Aware-Models/\" rel=\"nofollow\">PoMo</a>, an\nimplementation of a polymorphism-aware phylogenetic model. We advice you to use\nPoMo implemented in <a href=\"http://www.cibiv.at/software/iqtree/\" rel=\"nofollow\">IQ-TREE</a>.</p>\n<p>For a reference, please see and cite:</p>\n<pre><code>Schrempf, D., Minh, B. Q., De Maio, N., von Haeseler, A., &amp;\nKosiol, C. (2016). Reversible Polmorphism-Aware Phylotenetic\nModels and their Application to Tree Inference. Journal of\nTheoretical Biology, in press.\n</code></pre>\n<h1>Requirements</h1>\n<p><code>cflib</code> requires <a href=\"https://www.python.org/\" rel=\"nofollow\"><code>python</code> (Version 3.x)</a> to be\ninstalled. <code>cflib</code> also uses the following python libraries that will be\nautomatically pulled when installing <code>cflib</code>:</p>\n<ul>\n<li><a href=\"http://www.scipy.org/\" rel=\"nofollow\">scipy</a>,</li>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a> and</li>\n<li><a href=\"http://code.google.com/p/pysam/\" rel=\"nofollow\">pysam</a>.</li>\n</ul>\n<h1>Installation</h1>\n<p>Install <code>cflib</code> and the conversion scripts with</p>\n<pre>pip install --user cflib-pomo\n</pre>\n<p>Note that the name of <code>cflib</code> on the PyPI repository (which is used by <code>pip</code>) is\n<code>cflib-pomo</code>, since the name <code>cflib</code> was taken!</p>\n<p>If the standard Python version of your operation system is still 2.x (e.g.,\nOSX), make sure that you use, <code>pip3</code>.</p>\n<p>The <code>--user</code> flag is optional and tells Python to install <code>cflib</code> and\nthe scripts only for this user but not system wide.</p>\n<p>If you want to uninstall <code>cflib</code>,</p>\n<pre>pip uninstall cflib-pomo\n</pre>\n<p>The [conversion scripts](#Conversion scripts) should be directly available if\nyour <code>PATH</code> environment variable is setup correctly. For my Linux installation,\nthe Python path <code>~/.local/bin</code> had to be included. This may vary for your\noperating system.</p>\n<h1>Example</h1>\n<p>Sample data can be found in <a href=\"./examples\" rel=\"nofollow\">examples</a>. Assuming that have installed\n<code>cflib</code> we will now convert <a href=\"./examples/example.fasta\" rel=\"nofollow\"><code>example.fasta</code></a> to a\ncounts file named <code>example_from_fasta.cf</code>. The <a href=\"#conversion-scripts\" rel=\"nofollow\">script</a>\nthat we will use is called <a href=\"./scripts/FastaToCounts.py\" rel=\"nofollow\"><code>FastaToCounts.py</code></a>.\nFirst, we have a look at the help message:</p>\n<pre>FastaToCounts.py --help\n</pre>\n<pre><code>usage: FastaToCounts.py [-h] [-v] [--iupac] fastaFile output\n\nConvert fasta to counts format.\n\nThe (aligned) sequences in the fasta file are read in and the data is\nwritten to a counts format file.\n\nSequence names are stripped at the first dash.  If the stripped\nsequence name coincide, individuals are put into the same population.\n\nE.g., homo_sapiens-XXX and homo_sapiens-YYY will be in the same\npopulation homo_sapiens.\n\nTake care with large files, this uses a lot of memory.\n\nThe input as well as the output files can additionally be gzipped\n(indicated by a .gz file ending).\n\nIf heterozygotes are encoded with IUPAC codes (e.g., 'r' for A or G),\nhomozygotes need to be counted twice so that the level of polymorphism\nstays correct.  This can be done with the `--iupac` flag.\n\npositional arguments:\n  fastaFile      path to (gzipped) fasta file\n  output         name of (gzipped) outputfile in counts format\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --verbose  turn on verbosity (-v or -vv)\n  --iupac        heteorzygotes are encoded with IUPAC codes\n</code></pre>\n<p>As requested, the sequence names in <code>example.fasta</code> are, e.g.,\n<code>Sheep-1</code>, <code>Sheep-2</code>, and so on.  The following code converts the file\n<code>example.fasta</code> into the counts file <code>example_from_fasta.cf</code>:</p>\n<pre>FastaToCounts.py example.fasta example_from_fasta.cf\n</pre>\n<h1>Conversion scripts</h1>\n<ul>\n<li><a href=\"./scripts/CountsToFasta.py\" rel=\"nofollow\">CountsToFasta.py</a>: Convert a counts file to a\nfasta file.</li>\n<li><a href=\"./scripts/FastaToCounts.py\" rel=\"nofollow\">FastaToCounts.py</a>: Convert a fasta file to counts\nformat.</li>\n<li><a href=\"./scripts/FastaToVCF.py\" rel=\"nofollow\">FastaToVCF.py</a>: Convert a fasta file to variant call\nformat.</li>\n<li><a href=\"./scripts/FastaVCFToCounts.py\" rel=\"nofollow\">FastaVCFToCounts.py</a>: Convert a fasta\nreference with VCF files to counts format.</li>\n<li><a href=\"./scripts/FilterMSA.py\" rel=\"nofollow\">FilterMSA.py</a>: Filter a multiple sequence alignment\nfile (apply standard filters; cf. <code>libPoMo</code>).</li>\n<li><a href=\"./scripts/GPToCounts.py\" rel=\"nofollow\">GPToCounts.py</a>: Experimental. Convert gene\nprediction files with reference to counts format.</li>\n<li><a href=\"./scripts/MSAToCounts.py\" rel=\"nofollow\">MSAToCounts.py</a>: Convert multiple sequence\nalignments with VCF files to counts format.</li>\n</ul>\n<p>Each script comes with its own documentation. Please execute, e.g.,</p>\n<pre>FastaToCounts.py --help\n</pre>\n<p>All conversion scripts can be found in the <a href=\"./scripts\" rel=\"nofollow\">scripts</a> folder.</p>\n<h1>Documentation</h1>\n<p>If you are interested in <code>cflib</code> itself, please refer to the\n<a href=\"http://cflib.readthedocs.io/en/latest/\" rel=\"nofollow\">cflib reference manual</a>.</p>\n\n          </div>"}, "last_serial": 4559294, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "0c0b0a94b9c6feaa0c5b9dd80538b1a3", "sha256": "e007855909e544bb75ee91e0b6aa9094ba15820243387645615997c76ecb2f76"}, "downloads": -1, "filename": "cflib_pomo-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c0b0a94b9c6feaa0c5b9dd80538b1a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47270, "upload_time": "2018-12-04T11:14:46", "upload_time_iso_8601": "2018-12-04T11:14:46.556843Z", "url": "https://files.pythonhosted.org/packages/86/c8/01d76806631a6570492877567dfe1e3cb54fa6b66b0022d9ddf3e26a1ced/cflib_pomo-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99935a457fd32ad7803ee8091a079a47", "sha256": "65e5d6a2f061e6623c35ac715200ab337f22fb78d29845c14cf14063e0122a75"}, "downloads": -1, "filename": "cflib-pomo-1.1.tar.gz", "has_sig": false, "md5_digest": "99935a457fd32ad7803ee8091a079a47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40474, "upload_time": "2018-12-04T11:14:49", "upload_time_iso_8601": "2018-12-04T11:14:49.422234Z", "url": "https://files.pythonhosted.org/packages/53/a4/ec601ebf0bc8ea50b61f4b641b56f3585626027447f5d096717ff1680d17/cflib-pomo-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "8fda24524dd1e03cfac4b59b1ecf8541", "sha256": "76e5b34ceccb359d015fb3d7c01f0efa479c667ca55410bf84f27afbe4f37b01"}, "downloads": -1, "filename": "cflib_pomo-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8fda24524dd1e03cfac4b59b1ecf8541", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47295, "upload_time": "2018-12-04T11:26:06", "upload_time_iso_8601": "2018-12-04T11:26:06.818952Z", "url": "https://files.pythonhosted.org/packages/ec/c9/c1db0982080c10bbbf86e5b98f6529f1aab92f220e6fea88d4c83e9b6e8d/cflib_pomo-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a48b0609d53d021c5c30d9e9e5396d2", "sha256": "70dc40fe4f0f9b6d321efbf51f752899ce6bf60606b08af0542b381d51ce5832"}, "downloads": -1, "filename": "cflib-pomo-1.2.tar.gz", "has_sig": false, "md5_digest": "7a48b0609d53d021c5c30d9e9e5396d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40533, "upload_time": "2018-12-04T11:26:08", "upload_time_iso_8601": "2018-12-04T11:26:08.721849Z", "url": "https://files.pythonhosted.org/packages/8d/d6/564ee4c18758618390ca85089222e160703f84894de781f0d4448ee24a68/cflib-pomo-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "b1638d2a85584c8bc1a8a45db58badb3", "sha256": "bd70aad175034433fe9340ed51a447498274562b8b6895495c0f64ef84a743e6"}, "downloads": -1, "filename": "cflib_pomo-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1638d2a85584c8bc1a8a45db58badb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47404, "upload_time": "2018-12-04T11:43:25", "upload_time_iso_8601": "2018-12-04T11:43:25.278647Z", "url": "https://files.pythonhosted.org/packages/5d/65/15f9e0c0a5fd7eb5523fd67b9342b6e56a54f78516bbd6a63a59759634ce/cflib_pomo-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa9fee8772510c10eff5940ffba2a0d0", "sha256": "e99fb730056289693b55b4ca28f0c666a9d950828d7163b7f854194e1fac0754"}, "downloads": -1, "filename": "cflib-pomo-1.2.1.tar.gz", "has_sig": false, "md5_digest": "aa9fee8772510c10eff5940ffba2a0d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40672, "upload_time": "2018-12-04T11:43:27", "upload_time_iso_8601": "2018-12-04T11:43:27.625398Z", "url": "https://files.pythonhosted.org/packages/f2/81/df12e49f16e7ead5945863d65a718828a7f2fead5e30d6de0877a226d291/cflib-pomo-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1638d2a85584c8bc1a8a45db58badb3", "sha256": "bd70aad175034433fe9340ed51a447498274562b8b6895495c0f64ef84a743e6"}, "downloads": -1, "filename": "cflib_pomo-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b1638d2a85584c8bc1a8a45db58badb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47404, "upload_time": "2018-12-04T11:43:25", "upload_time_iso_8601": "2018-12-04T11:43:25.278647Z", "url": "https://files.pythonhosted.org/packages/5d/65/15f9e0c0a5fd7eb5523fd67b9342b6e56a54f78516bbd6a63a59759634ce/cflib_pomo-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa9fee8772510c10eff5940ffba2a0d0", "sha256": "e99fb730056289693b55b4ca28f0c666a9d950828d7163b7f854194e1fac0754"}, "downloads": -1, "filename": "cflib-pomo-1.2.1.tar.gz", "has_sig": false, "md5_digest": "aa9fee8772510c10eff5940ffba2a0d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40672, "upload_time": "2018-12-04T11:43:27", "upload_time_iso_8601": "2018-12-04T11:43:27.625398Z", "url": "https://files.pythonhosted.org/packages/f2/81/df12e49f16e7ead5945863d65a718828a7f2fead5e30d6de0877a226d291/cflib-pomo-1.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:39 2020"}