{"info": {"author": "Quantum_Wizard", "author_email": "minecraftcrusher100@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# EasyAI-Py:\n\n  An easy to use artificial intelligence with multiple frameworks already made or custom frameworks. That are used to analyze environments (Environment_Processor obejct), and can also use the other half of it brain to process directives and \n\n## Setup:\n\n  Start off with specifying your AI token specific to this project like this:\n\n  ```\n  >>> from easyaipy.brain.Brain import ProjectToken\n  >>> ProjectToken(<your choice of any string combo>)\n  ```\n\n  > You will need to create two json files, an admin json and an args json, to pass to the Admin object later on. (See below for a discord_admin.json example)\n\n  > The Admin Object supports 4 arm_types discord, flask, gmail, console.\n\n\n  **JSON file formats:**\n\n   discord_admin.json\n\n      {\n          \"admin_name\": \"<Whatever name you want>\",\n          \"auth_token\": \"<token that you specified to the ProjectToken object.>\"\n          \"arm_type\": \"discord\"\n      }\n\n\ndiscord_args.json\n\n      {\n          \"question\": \"\", # Keep this empty \n          \"bot_token\": \"Njc1NTM2MTMyOTY4MDIyMDI3.Xj4k5A.JiiaTCPB0sFahg63iwT7OWKif1g\",\n          \"server\": \"<name of the desired server>\",\n          \"channel\": \"<name of the desired channel>\"\n      }\n\nflask_admin.json\n\n      {\n          \"admin_name\": \"<Whatever name you want>\",\n          \"auth_token\": \"<token that you specified to the ProjectToken object.>\"\n          \"arm_type\": \"flask\"\n      }\n\n\nflask_args.json\n\n      {\n        \"no_host\": \"<bool>\",\n        \"host\": \"<flask host>\",\n        \"port\": \"flask port\"\n       }\n\n\ngmail_admin.json\n\n      {\n          \"admin_name\": \"<Whatever name you want>\",\n          \"auth_token\": \"<token that you specified to the ProjectToken object.>\"\n          \"arm_type\": \"gmail\"\n      }\n\n\ngmail_args.json\n\n      {\n        \"self_email\": \"<host email>\",\n        \"app_password\": \"<host emails app password>\",\n        \"admin_email\": \"<you>\"\n      }\n\n\nconsole_admin.json\n\n      {\n          \"admin_name\": \"<Whatever name you want>\",\n          \"auth_token\": \"<token that you specified to the ProjectToken object.>\"\n          \"arm_type\": \"console\"\n      }\n\n\n> Note: You do not need to pass an args json for the console arm_type.\n\n\n## Usage:\n```\n  import easyaipy as ai\n  adm = ai.Admin('<admin json path>,<admin args path>)'\n  # Create an Admin Obect that lets you control which one person has access to the ai.\n  ```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GrandMoff100/EasyAI-py", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "EasyAIPy", "package_url": "https://pypi.org/project/EasyAIPy/", "platform": "", "project_url": "https://pypi.org/project/EasyAIPy/", "project_urls": {"Homepage": "https://github.com/GrandMoff100/EasyAI-py"}, "release_url": "https://pypi.org/project/EasyAIPy/0.0.0b0/", "requires_dist": ["flask", "discord.py (==0.16.12)", "gmail"], "requires_python": "", "summary": "An easy to use artificial intelligence with multiple environement frameworks.", "version": "0.0.0b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EasyAI-Py:</h1>\n<p>An easy to use artificial intelligence with multiple frameworks already made or custom frameworks. That are used to analyze environments (Environment_Processor obejct), and can also use the other half of it brain to process directives and</p>\n<h2>Setup:</h2>\n<p>Start off with specifying your AI token specific to this project like this:</p>\n<pre><code>&gt;&gt;&gt; from easyaipy.brain.Brain import ProjectToken\n&gt;&gt;&gt; ProjectToken(&lt;your choice of any string combo&gt;)\n</code></pre>\n<blockquote>\n<p>You will need to create two json files, an admin json and an args json, to pass to the Admin object later on. (See below for a discord_admin.json example)</p>\n</blockquote>\n<blockquote>\n<p>The Admin Object supports 4 arm_types discord, flask, gmail, console.</p>\n</blockquote>\n<p><strong>JSON file formats:</strong></p>\n<p>discord_admin.json</p>\n<pre><code>  {\n      \"admin_name\": \"&lt;Whatever name you want&gt;\",\n      \"auth_token\": \"&lt;token that you specified to the ProjectToken object.&gt;\"\n      \"arm_type\": \"discord\"\n  }\n</code></pre>\n<p>discord_args.json</p>\n<pre><code>  {\n      \"question\": \"\", # Keep this empty \n      \"bot_token\": \"Njc1NTM2MTMyOTY4MDIyMDI3.Xj4k5A.JiiaTCPB0sFahg63iwT7OWKif1g\",\n      \"server\": \"&lt;name of the desired server&gt;\",\n      \"channel\": \"&lt;name of the desired channel&gt;\"\n  }\n</code></pre>\n<p>flask_admin.json</p>\n<pre><code>  {\n      \"admin_name\": \"&lt;Whatever name you want&gt;\",\n      \"auth_token\": \"&lt;token that you specified to the ProjectToken object.&gt;\"\n      \"arm_type\": \"flask\"\n  }\n</code></pre>\n<p>flask_args.json</p>\n<pre><code>  {\n    \"no_host\": \"&lt;bool&gt;\",\n    \"host\": \"&lt;flask host&gt;\",\n    \"port\": \"flask port\"\n   }\n</code></pre>\n<p>gmail_admin.json</p>\n<pre><code>  {\n      \"admin_name\": \"&lt;Whatever name you want&gt;\",\n      \"auth_token\": \"&lt;token that you specified to the ProjectToken object.&gt;\"\n      \"arm_type\": \"gmail\"\n  }\n</code></pre>\n<p>gmail_args.json</p>\n<pre><code>  {\n    \"self_email\": \"&lt;host email&gt;\",\n    \"app_password\": \"&lt;host emails app password&gt;\",\n    \"admin_email\": \"&lt;you&gt;\"\n  }\n</code></pre>\n<p>console_admin.json</p>\n<pre><code>  {\n      \"admin_name\": \"&lt;Whatever name you want&gt;\",\n      \"auth_token\": \"&lt;token that you specified to the ProjectToken object.&gt;\"\n      \"arm_type\": \"console\"\n  }\n</code></pre>\n<blockquote>\n<p>Note: You do not need to pass an args json for the console arm_type.</p>\n</blockquote>\n<h2>Usage:</h2>\n<pre><code>  import easyaipy as ai\n  adm = ai.Admin('&lt;admin json path&gt;,&lt;admin args path&gt;)'\n  # Create an Admin Obect that lets you control which one person has access to the ai.\n</code></pre>\n\n          </div>"}, "last_serial": 6613825, "releases": {"0.0.0a0": [{"comment_text": "", "digests": {"md5": "a047672e319e1908caeab5201aa948df", "sha256": "35b6b3d6eb270adbe14b96c4b5e9562f10ad96b6f0918087212013c7743c4291"}, "downloads": -1, "filename": "EasyAIPy-0.0.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "a047672e319e1908caeab5201aa948df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10164, "upload_time": "2020-02-12T00:56:37", "upload_time_iso_8601": "2020-02-12T00:56:37.987122Z", "url": "https://files.pythonhosted.org/packages/36/ce/f48a29e0b353055a2443e2500928239c57966559b76ee295933ace678881/EasyAIPy-0.0.0a0-py3-none-any.whl", "yanked": false}], "0.0.0b0": [{"comment_text": "", "digests": {"md5": "f616a2dc64c829b274796140a1729a6e", "sha256": "59de4cb78943d79b823bd0b42c7ddfe8af8a773aed40d0a2024e16e0ca8f06b4"}, "downloads": -1, "filename": "EasyAIPy-0.0.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "f616a2dc64c829b274796140a1729a6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10965, "upload_time": "2020-02-12T02:48:50", "upload_time_iso_8601": "2020-02-12T02:48:50.519949Z", "url": "https://files.pythonhosted.org/packages/89/06/d8f2a0893941495adfe02fc821a7f4f8c11754d8bd28c5ea062f18c64ed6/EasyAIPy-0.0.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "231933a381f30ced76cb03749bdbf764", "sha256": "b959735cb224e1ebbd5b5635492bcb79508f632f8efa01ef2299960312883d07"}, "downloads": -1, "filename": "EasyAIPy-0.0.0b0.tar.gz", "has_sig": false, "md5_digest": "231933a381f30ced76cb03749bdbf764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7949, "upload_time": "2020-02-12T02:48:51", "upload_time_iso_8601": "2020-02-12T02:48:51.918430Z", "url": "https://files.pythonhosted.org/packages/d3/34/caa07d145ddcfe284fdb85de8396d3227c5325123f224c6e6f99ed42e292/EasyAIPy-0.0.0b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f616a2dc64c829b274796140a1729a6e", "sha256": "59de4cb78943d79b823bd0b42c7ddfe8af8a773aed40d0a2024e16e0ca8f06b4"}, "downloads": -1, "filename": "EasyAIPy-0.0.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "f616a2dc64c829b274796140a1729a6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10965, "upload_time": "2020-02-12T02:48:50", "upload_time_iso_8601": "2020-02-12T02:48:50.519949Z", "url": "https://files.pythonhosted.org/packages/89/06/d8f2a0893941495adfe02fc821a7f4f8c11754d8bd28c5ea062f18c64ed6/EasyAIPy-0.0.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "231933a381f30ced76cb03749bdbf764", "sha256": "b959735cb224e1ebbd5b5635492bcb79508f632f8efa01ef2299960312883d07"}, "downloads": -1, "filename": "EasyAIPy-0.0.0b0.tar.gz", "has_sig": false, "md5_digest": "231933a381f30ced76cb03749bdbf764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7949, "upload_time": "2020-02-12T02:48:51", "upload_time_iso_8601": "2020-02-12T02:48:51.918430Z", "url": "https://files.pythonhosted.org/packages/d3/34/caa07d145ddcfe284fdb85de8396d3227c5325123f224c6e6f99ed42e292/EasyAIPy-0.0.0b0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:28 2020"}