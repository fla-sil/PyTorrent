{"info": {"author": "Sam Steffl", "author_email": "sam@ssteffl.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "Directed Cyclic Graph Utilities for Python\n==========================================\n\ninstalling\n----------\n```pip install dcggraph```\n\ndescription\n-----------\nThis package currently used for doing predicated searches from a given\nnode in a directed graph that is allowed to be cyclic. Some points to clear\nup confusion:\n- __directed__: means an edge between 2 nodes can only be travelled in one\n  direction _(although there can be two edges going opposite directions between the same two nodes)\n- __predicated__: means that even if a node is reachable, it still has to\n  pass a prediate test (i.e. `predicate(node) == True`) in order to be\n  returned.\n    - this means there are really 2 search filters in the graph:\n        1) the node has to be reachable without any filtering\n        2) the node has to pass the predicate test\n- __cyclic__: means that if you start from a node, and follow a bunch of\n  paths, you can end up at the same node. This makes things a lot harder\n  than if you were working with DAGs.\n\ncycles are tricky\n-----------------\nThe main trick used to deal with cycles is having the predicate return 3 states:\n  1) `PASS`: means the node confidently passes the predicate\n  2) `FAIL`: means the node confidently fails the predicate\n  3) `WAIT`: means the node is unsure if it passes yet, and would like to defer giving a\n     confident answer until more nodes are seen (since starting point matters in cyclical graphs)\n\nNodes that return the `WAIT` state from a predicate get put in the `unresolved` list, and are re-evaluated every time another node returns `PASS` or `FAIL`.  After all reachable nodes have been evaluated, any remaining nodes in the `unresolved` list are demoted to the `FAIL` state, since they couldn't make up their mind, and there are no more chances for them to give a real answer.\n\nThis algorithm seems to work well for the cases I use predicated searches in a graph. I'm __positive__ better algorithms exist than what is implemented here.\n\nAPI\n---\nThe main feature is predicated graph compression and search. \nIn addition to the snippet below, look at the tests for example usage\n```python\nimport re\nfrom dcggraph import DCGnode, DCGedge, DCGgraph\nfrom dcggraph.search import PredicateResult, DCGsearch\n\ng = DCGgraph()\nn0 = g.create_node(\"n0\")\nn1 = g.create_node(\"n1\")\nn2 = g.create_node(\"n2\")\nn3 = g.create_node(\"n3\")\nn4 = g.create_node(\"n4\")\ng.create_edge(n0, n1)\ng.create_edge(n0, n2)\ng.create_edge(n1, n3)\ng.create_edge(n1, n4)\n\ndef even(node, visited, passed, failed):\n   if f re.match(\"[a-z][02468]\", node.name):\n       return PredicateResult.PASS\n   else:\n       return PredicateResult.FAIL\n\ns1 = DCGsearch(g, even)\n\n# reuse the search object to cache FAIL/PASS results between searches\nassertEqual(len(s1.search(n0)), 3)\nassertEqual(len(s1.search(n1)), 1)\nassertEqual(len(s1.search(n2)), 1)\nassertEqual(len(s1.search(n3)), 0)\nassertEqual(len(s1.search(n4)), 1)\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ssteffl/python-dcggraph", "keywords": "directed cyclic graph traversal", "license": "", "maintainer": "", "maintainer_email": "", "name": "dcggraph", "package_url": "https://pypi.org/project/dcggraph/", "platform": "", "project_url": "https://pypi.org/project/dcggraph/", "project_urls": {"Bug Reports": "https://github.com/ssteffl/python-dcggraph", "Homepage": "https://github.com/ssteffl/python-dcggraph", "Source": "https://github.com/ssteffl/python-dcggraph"}, "release_url": "https://pypi.org/project/dcggraph/0.0.9/", "requires_dist": ["typing"], "requires_python": ">=3.6", "summary": "Directed Cyclic Graph Utilities for Python", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Directed Cyclic Graph Utilities for Python</h1>\n<h2>installing</h2>\n<p><code>pip install dcggraph</code></p>\n<h2>description</h2>\n<p>This package currently used for doing predicated searches from a given\nnode in a directed graph that is allowed to be cyclic. Some points to clear\nup confusion:</p>\n<ul>\n<li><strong>directed</strong>: means an edge between 2 nodes can only be travelled in one\ndirection _(although there can be two edges going opposite directions between the same two nodes)</li>\n<li><strong>predicated</strong>: means that even if a node is reachable, it still has to\npass a prediate test (i.e. <code>predicate(node) == True</code>) in order to be\nreturned.\n<ul>\n<li>this means there are really 2 search filters in the graph:\n<ol>\n<li>the node has to be reachable without any filtering</li>\n<li>the node has to pass the predicate test</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><strong>cyclic</strong>: means that if you start from a node, and follow a bunch of\npaths, you can end up at the same node. This makes things a lot harder\nthan if you were working with DAGs.</li>\n</ul>\n<h2>cycles are tricky</h2>\n<p>The main trick used to deal with cycles is having the predicate return 3 states:</p>\n<ol>\n<li><code>PASS</code>: means the node confidently passes the predicate</li>\n<li><code>FAIL</code>: means the node confidently fails the predicate</li>\n<li><code>WAIT</code>: means the node is unsure if it passes yet, and would like to defer giving a\nconfident answer until more nodes are seen (since starting point matters in cyclical graphs)</li>\n</ol>\n<p>Nodes that return the <code>WAIT</code> state from a predicate get put in the <code>unresolved</code> list, and are re-evaluated every time another node returns <code>PASS</code> or <code>FAIL</code>.  After all reachable nodes have been evaluated, any remaining nodes in the <code>unresolved</code> list are demoted to the <code>FAIL</code> state, since they couldn't make up their mind, and there are no more chances for them to give a real answer.</p>\n<p>This algorithm seems to work well for the cases I use predicated searches in a graph. I'm <strong>positive</strong> better algorithms exist than what is implemented here.</p>\n<h2>API</h2>\n<p>The main feature is predicated graph compression and search.\nIn addition to the snippet below, look at the tests for example usage</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dcggraph</span> <span class=\"kn\">import</span> <span class=\"n\">DCGnode</span><span class=\"p\">,</span> <span class=\"n\">DCGedge</span><span class=\"p\">,</span> <span class=\"n\">DCGgraph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dcggraph.search</span> <span class=\"kn\">import</span> <span class=\"n\">PredicateResult</span><span class=\"p\">,</span> <span class=\"n\">DCGsearch</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">DCGgraph</span><span class=\"p\">()</span>\n<span class=\"n\">n0</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_node</span><span class=\"p\">(</span><span class=\"s2\">\"n0\"</span><span class=\"p\">)</span>\n<span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_node</span><span class=\"p\">(</span><span class=\"s2\">\"n1\"</span><span class=\"p\">)</span>\n<span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_node</span><span class=\"p\">(</span><span class=\"s2\">\"n2\"</span><span class=\"p\">)</span>\n<span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_node</span><span class=\"p\">(</span><span class=\"s2\">\"n3\"</span><span class=\"p\">)</span>\n<span class=\"n\">n4</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_node</span><span class=\"p\">(</span><span class=\"s2\">\"n4\"</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_edge</span><span class=\"p\">(</span><span class=\"n\">n0</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_edge</span><span class=\"p\">(</span><span class=\"n\">n0</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_edge</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n3</span><span class=\"p\">)</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">create_edge</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n4</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">even</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">,</span> <span class=\"n\">passed</span><span class=\"p\">,</span> <span class=\"n\">failed</span><span class=\"p\">):</span>\n   <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s2\">\"[a-z][02468]\"</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">):</span>\n       <span class=\"k\">return</span> <span class=\"n\">PredicateResult</span><span class=\"o\">.</span><span class=\"n\">PASS</span>\n   <span class=\"k\">else</span><span class=\"p\">:</span>\n       <span class=\"k\">return</span> <span class=\"n\">PredicateResult</span><span class=\"o\">.</span><span class=\"n\">FAIL</span>\n\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">DCGsearch</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">even</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># reuse the search object to cache FAIL/PASS results between searches</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">n0</span><span class=\"p\">)),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">)),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">n4</span><span class=\"p\">)),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6155728, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "876662ecd20d5432fc1b138ae54e3aaa", "sha256": "8874d97dbe1ed81e581968709cc178d48bf8e6768d2a01dfeae45d2fee2fa378"}, "downloads": -1, "filename": "dcggraph-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "876662ecd20d5432fc1b138ae54e3aaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6228, "upload_time": "2019-11-16T17:37:05", "upload_time_iso_8601": "2019-11-16T17:37:05.976352Z", "url": "https://files.pythonhosted.org/packages/49/6a/0d5726a77b991c0d0d598798480fb7bece4c8c5d3378450fbfd0106932ec/dcggraph-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eb3ef34d0ef0408d79c0e517a44c3fe", "sha256": "4107d90e05e166e02862d6a534ab6923113d1c8308170bb4e1e573c15fa90250"}, "downloads": -1, "filename": "dcggraph-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6eb3ef34d0ef0408d79c0e517a44c3fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6257, "upload_time": "2019-11-16T17:37:08", "upload_time_iso_8601": "2019-11-16T17:37:08.088506Z", "url": "https://files.pythonhosted.org/packages/d7/73/f61ee2b3f7144b61e102c03d7ae4d9b4bcf187a9f6aa754328daffb2046f/dcggraph-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "29f949d646b207f3a1f675e966d9beb5", "sha256": "6df4a52ebfbf377c5ad68673a9b0e12e2baba2e2d0702ada7e8979d51a2bb93b"}, "downloads": -1, "filename": "dcggraph-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "29f949d646b207f3a1f675e966d9beb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6519, "upload_time": "2019-11-16T17:49:12", "upload_time_iso_8601": "2019-11-16T17:49:12.374217Z", "url": "https://files.pythonhosted.org/packages/ba/2a/ebb649b2b0a862595e28145052c219b0e1b9f2d6cfde2c484bb7630c3be9/dcggraph-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04f3f05b0af754d87863c91179b750c3", "sha256": "c4f27e06681b8f02f131c247f09c321d4b0d196cfc8d41ed13279fb0a8fdb4ca"}, "downloads": -1, "filename": "dcggraph-0.0.2.tar.gz", "has_sig": false, "md5_digest": "04f3f05b0af754d87863c91179b750c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6497, "upload_time": "2019-11-16T17:49:13", "upload_time_iso_8601": "2019-11-16T17:49:13.806464Z", "url": "https://files.pythonhosted.org/packages/dc/aa/cdfbfcfe4b2e576b9560ce4151c71ba2e17470286dc9a3de17b19b57626b/dcggraph-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "93de73e71a52fcc9a6afeb2cb316f913", "sha256": "ee4e2732daf47e4d6f4fdf3d8874186d7f1ef1c7c1e8f614aa895c5d62c2062a"}, "downloads": -1, "filename": "dcggraph-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "93de73e71a52fcc9a6afeb2cb316f913", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9117, "upload_time": "2019-11-16T23:41:54", "upload_time_iso_8601": "2019-11-16T23:41:54.178744Z", "url": "https://files.pythonhosted.org/packages/f2/4e/ac81334879b5f3474b00db60747ea2c07def5528e917cc319db161387b30/dcggraph-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f36651c548d572a02b2d9312a4f4dd39", "sha256": "81e6dc744ea59563d609e9d62287b65d3b0477a9a6da364b1d83f7b48920755d"}, "downloads": -1, "filename": "dcggraph-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f36651c548d572a02b2d9312a4f4dd39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8123, "upload_time": "2019-11-16T23:41:55", "upload_time_iso_8601": "2019-11-16T23:41:55.752154Z", "url": "https://files.pythonhosted.org/packages/46/84/7a12ad688edd8fb539aaf294c2fca7b72ace0c27752cdf958a36e9c0b15e/dcggraph-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "42ff623b13adac19bd2a01b392d5c7d0", "sha256": "1dc1536805df78c90eee52feb1fb47e555497081250ec7ced6a5350359c9fc5e"}, "downloads": -1, "filename": "dcggraph-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "42ff623b13adac19bd2a01b392d5c7d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7633, "upload_time": "2019-11-17T16:11:31", "upload_time_iso_8601": "2019-11-17T16:11:31.212888Z", "url": "https://files.pythonhosted.org/packages/f2/9f/937340fe6455b143ed9c72686451f6b84247b7f230d2e2af7e42a4b5dc81/dcggraph-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c3b9397f307a2773f711c79adfb6347", "sha256": "8d4dd4c89a5225c9d4068410f632c8bfebf75a30fc4b072cafca902e945c0188"}, "downloads": -1, "filename": "dcggraph-0.0.4.tar.gz", "has_sig": false, "md5_digest": "9c3b9397f307a2773f711c79adfb6347", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7945, "upload_time": "2019-11-17T16:11:32", "upload_time_iso_8601": "2019-11-17T16:11:32.422781Z", "url": "https://files.pythonhosted.org/packages/cd/98/ceeaaeaf3f686f65c4f5db913b838e8f66d0e3ad822ccd8a21f3fee1eb1c/dcggraph-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "dc5b812d8643bf8e6ed2bb1cfc98bf55", "sha256": "c9e2040e2a4eefb71ad9010df2603026cb4cb55c2390f725d71a84eda5fff6a3"}, "downloads": -1, "filename": "dcggraph-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dc5b812d8643bf8e6ed2bb1cfc98bf55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7711, "upload_time": "2019-11-17T17:42:25", "upload_time_iso_8601": "2019-11-17T17:42:25.265321Z", "url": "https://files.pythonhosted.org/packages/79/fb/98b71b0bb69ad5541b91f1676cd41af0298d5287ee2927a33de0f5bf328c/dcggraph-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "579cee09c53d2f337442d61d943f44b1", "sha256": "1533deaf938a30e9337a1ead03dc8ad6a8474b3b2ed76eeeb9405dfad8f82d0b"}, "downloads": -1, "filename": "dcggraph-0.0.5.tar.gz", "has_sig": false, "md5_digest": "579cee09c53d2f337442d61d943f44b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8023, "upload_time": "2019-11-17T17:42:26", "upload_time_iso_8601": "2019-11-17T17:42:26.869288Z", "url": "https://files.pythonhosted.org/packages/6d/25/c0974cb9b194d99108e86aa554aeb1ebe61dba6598b3e3b5d4ef04a3720b/dcggraph-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "5d3eb136a761eabd80938f9fb6f8b79a", "sha256": "9a9bf2fe544f2bd11c46c96b298935de33b1d488c1eb66a34952a3c77e421591"}, "downloads": -1, "filename": "dcggraph-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5d3eb136a761eabd80938f9fb6f8b79a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7933, "upload_time": "2019-11-17T18:36:47", "upload_time_iso_8601": "2019-11-17T18:36:47.806786Z", "url": "https://files.pythonhosted.org/packages/92/cb/54d68f0c1bdc41473e2c1997f78e4de92b61f2282d5f49f68f900f2834ba/dcggraph-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd5c0d35deac34a7c3c3ff3ecbc8a961", "sha256": "ea15a9c03583df481a4a0668374b0117073223fdcf182b60a65b7b4999f470eb"}, "downloads": -1, "filename": "dcggraph-0.0.6.tar.gz", "has_sig": false, "md5_digest": "cd5c0d35deac34a7c3c3ff3ecbc8a961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8352, "upload_time": "2019-11-17T18:36:49", "upload_time_iso_8601": "2019-11-17T18:36:49.427372Z", "url": "https://files.pythonhosted.org/packages/c7/5e/81818a6f78a1b347d6f0d512e2e98ec7ed19aa0b07f988ba8981828d2d9e/dcggraph-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "9261125e4bdc5c64f8fbf34b0472ab51", "sha256": "63a8aef08bd8457469e54e142f5df03b24033ecd6ff2a3a7df9b4ca31ea1265e"}, "downloads": -1, "filename": "dcggraph-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9261125e4bdc5c64f8fbf34b0472ab51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7947, "upload_time": "2019-11-18T03:59:50", "upload_time_iso_8601": "2019-11-18T03:59:50.815671Z", "url": "https://files.pythonhosted.org/packages/23/05/0c5185da379b8ac77bc33b95f28a6fd830293b02c620e6d9470e46a71943/dcggraph-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3dbbbf4a0918482d9115d8a0fd51bcde", "sha256": "152b389e0662184b5dc2b0f8817a7d16d111d5b96c26e8c9a19eb22faeaaaeed"}, "downloads": -1, "filename": "dcggraph-0.0.7.tar.gz", "has_sig": false, "md5_digest": "3dbbbf4a0918482d9115d8a0fd51bcde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8412, "upload_time": "2019-11-18T03:59:51", "upload_time_iso_8601": "2019-11-18T03:59:51.920721Z", "url": "https://files.pythonhosted.org/packages/35/6b/bbdb708a8ac30e29adab61e2c5c8fe5d65881394fe07c77155d525886209/dcggraph-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "74a55bbf5d04ff3e101241dff99d0e75", "sha256": "beba1f86091c29662e56e4987694ff36d7fb393cb9a7e7e532a4fe0ec71c3111"}, "downloads": -1, "filename": "dcggraph-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "74a55bbf5d04ff3e101241dff99d0e75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8102, "upload_time": "2019-11-18T12:27:39", "upload_time_iso_8601": "2019-11-18T12:27:39.814786Z", "url": "https://files.pythonhosted.org/packages/56/91/94791e4e6ec54dc51fae2222d2011a03d46cedb76f2ebd2da5442313ae0b/dcggraph-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c35b027017fec2c17f52cc03fecdca3", "sha256": "3141d4e0afbb5a12b7c508eca754ec91766434f79bdd5784c98358b81f871a68"}, "downloads": -1, "filename": "dcggraph-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6c35b027017fec2c17f52cc03fecdca3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8793, "upload_time": "2019-11-18T12:27:41", "upload_time_iso_8601": "2019-11-18T12:27:41.125187Z", "url": "https://files.pythonhosted.org/packages/51/da/f43f2d456ffbfca6e10b75b6805f908aee4c254eacc013b260cd65693f92/dcggraph-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "e925178842d48bbb8cdf45ba92f791a5", "sha256": "a06e59302f04fb0c7278f60cab288aaf6c51d45a70eec949e528df00aed77bad"}, "downloads": -1, "filename": "dcggraph-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e925178842d48bbb8cdf45ba92f791a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8128, "upload_time": "2019-11-18T13:20:39", "upload_time_iso_8601": "2019-11-18T13:20:39.649026Z", "url": "https://files.pythonhosted.org/packages/aa/96/ade7dd97b31818b70d1a36def838bf364c104eecfcb1a0146a001472acbd/dcggraph-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d96ab64ccb383688520968bbf489442", "sha256": "84acb243aba1029dd000af47ab4b40b3859299fda75c2dbe0fffbfb38cd51f2d"}, "downloads": -1, "filename": "dcggraph-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d96ab64ccb383688520968bbf489442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8832, "upload_time": "2019-11-18T13:20:41", "upload_time_iso_8601": "2019-11-18T13:20:41.630784Z", "url": "https://files.pythonhosted.org/packages/49/38/f88fad7d7564ebd81770f45132d58cbab5121443489ad5aa7c64bfc6982e/dcggraph-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e925178842d48bbb8cdf45ba92f791a5", "sha256": "a06e59302f04fb0c7278f60cab288aaf6c51d45a70eec949e528df00aed77bad"}, "downloads": -1, "filename": "dcggraph-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e925178842d48bbb8cdf45ba92f791a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8128, "upload_time": "2019-11-18T13:20:39", "upload_time_iso_8601": "2019-11-18T13:20:39.649026Z", "url": "https://files.pythonhosted.org/packages/aa/96/ade7dd97b31818b70d1a36def838bf364c104eecfcb1a0146a001472acbd/dcggraph-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d96ab64ccb383688520968bbf489442", "sha256": "84acb243aba1029dd000af47ab4b40b3859299fda75c2dbe0fffbfb38cd51f2d"}, "downloads": -1, "filename": "dcggraph-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d96ab64ccb383688520968bbf489442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8832, "upload_time": "2019-11-18T13:20:41", "upload_time_iso_8601": "2019-11-18T13:20:41.630784Z", "url": "https://files.pythonhosted.org/packages/49/38/f88fad7d7564ebd81770f45132d58cbab5121443489ad5aa7c64bfc6982e/dcggraph-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:49 2020"}