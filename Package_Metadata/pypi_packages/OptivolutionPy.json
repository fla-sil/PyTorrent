{"info": {"author": "Mohamed Hisham", "author_email": "Mohamed00Hisham@Gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n# OptivolutionPy\nA flexible genetic algorithm library written purly in Python3.\n\n## Installation\n\nFor python3, simply run:\n```sh\n$ pip3 install OptivolutionPy\n\n```\n\nOr clone this repository and run python3 setup.py install from within the project directory. e.g.:\n```sh\n$ git clone https://github.com/Mhmd-Hisham/OptivolutionPy.git\n$ cd OptivolutionPy\n$ python3 setup.py install\n```\n\n## Advanced Example\n#### Smart Ants using OptivolutionPy & Processing3. check this [repo](https://github.com/Mhmd-Hisham/SmartAntsGA) for more details.\n\n![SmartAntsDemo](https://raw.githubusercontent.com/Mhmd-Hisham/SmartAntsGA/master/SmartAntsSmallDemo.gif)\n\n\n## Simple example\n### Solving the one-dimensional [knapsack problem](http://en.wikipedia.org/wiki/Knapsack_problem):\n\n```python3\n#!/usr/bin/env python3\n\nimport random\n\nfrom optivolution.population import Population\nfrom optivolution.chromosome import Chromosome\n\nclass OneDimensinalKnapsack(Chromosome):\n    \"\"\" Inidividual knapsack object. \"\"\"\n    maximum_weight = 15\n    knapsack_data = [{'name': 'box1', 'value': 4, 'weight': 12},\n                     {'name': 'box2', 'value': 2, 'weight': 1},\n                     {'name': 'box3', 'value': 10, 'weight': 4},\n                     {'name': 'box4', 'value': 1, 'weight': 1},\n                     {'name': 'box5', 'value': 2, 'weight': 2}]\n\n    def __init__(self, genes_length=len(knapsack_data), genes=[]):\n        super().__init__(genes_length, genes)\n\n    @Chromosome.fitness_property\n    def fitness(self):        \n        \"\"\" Defining the fitness function. \"\"\"\n        # Use the knapsack value as the fitness value\n        total_value = 0\n        total_weight = 0\n\n        for i in range(self.genes_length):\n            if (self.genes[i] == True):\n                total_value += self.knapsack_data[i]['value']\n                total_weight += self.knapsack_data[i]['weight']\n\n        if total_weight > self.maximum_weight:\n            total_value = 0\n\n        return total_value\n\n    def random_gene(self):\n        \"\"\" Defining the random gene. \"\"\"\n        return random.choice((0, 1))\n\nclass KnapscakPopulation(Population):\n    tournament_sample_percentage = 10\n\n    def random_individual(self):\n        \"\"\" Defining the random individual in the population. \"\"\"\n        return OneDimensinalKnapsack()\n\ndef main():\n    population = KnapscakPopulation(population_size=20)    \n    population.run(20)\n\n    print(f\"Generation {population.generation_number}\")\n    best = population.get_best_individual()\n\n    # The optimal answer for this test case is\n    # (15, [0, 1, 1, 1, 1])\n    print((best.fitness, best.genes))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nOutput:\n```\n(15, [0, 1, 1, 1, 1])\n```\n\n## Meta\n\nMohamed Hisham \u2013 [G-Mail](mailto:Mohamed00Hisham@Gmail.com) | [GitHub](https://github.com/Mhmd-Hisham) | [LinkedIn](https://www.linkedin.com/in/Mhmd-Hisham/)\n\n\nThis project is licensed under the GNU GPLv3 License - check [LICENSE](https://github.com/Mhmd-Hisham/OptivolutionPy/blob/master/LICENSE) for more details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Mhmd-Hisham/OptivolutionPy", "keywords": "", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "OptivolutionPy", "package_url": "https://pypi.org/project/OptivolutionPy/", "platform": "", "project_url": "https://pypi.org/project/OptivolutionPy/", "project_urls": {"Homepage": "https://github.com/Mhmd-Hisham/OptivolutionPy"}, "release_url": "https://pypi.org/project/OptivolutionPy/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A flexible genetic algorithm library written in Python3.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OptivolutionPy</h1>\n<p>A flexible genetic algorithm library written purly in Python3.</p>\n<h2>Installation</h2>\n<p>For python3, simply run:</p>\n<pre>$ pip3 install OptivolutionPy\n</pre>\n<p>Or clone this repository and run python3 setup.py install from within the project directory. e.g.:</p>\n<pre>$ git clone https://github.com/Mhmd-Hisham/OptivolutionPy.git\n$ <span class=\"nb\">cd</span> OptivolutionPy\n$ python3 setup.py install\n</pre>\n<h2>Advanced Example</h2>\n<h4>Smart Ants using OptivolutionPy &amp; Processing3. check this <a href=\"https://github.com/Mhmd-Hisham/SmartAntsGA\" rel=\"nofollow\">repo</a> for more details.</h4>\n<p><img alt=\"SmartAntsDemo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e94e31adeb1dd021c7ed1e90493a578321fb005/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4d686d642d48697368616d2f536d617274416e747347412f6d61737465722f536d617274416e7473536d616c6c44656d6f2e676966\"></p>\n<h2>Simple example</h2>\n<h3>Solving the one-dimensional <a href=\"http://en.wikipedia.org/wiki/Knapsack_problem\" rel=\"nofollow\">knapsack problem</a>:</h3>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">optivolution.population</span> <span class=\"kn\">import</span> <span class=\"n\">Population</span>\n<span class=\"kn\">from</span> <span class=\"nn\">optivolution.chromosome</span> <span class=\"kn\">import</span> <span class=\"n\">Chromosome</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OneDimensinalKnapsack</span><span class=\"p\">(</span><span class=\"n\">Chromosome</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Inidividual knapsack object. \"\"\"</span>\n    <span class=\"n\">maximum_weight</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n    <span class=\"n\">knapsack_data</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'box1'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'box2'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'box3'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'box4'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n                     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'box5'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'weight'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">genes_length</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">knapsack_data</span><span class=\"p\">),</span> <span class=\"n\">genes</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">genes_length</span><span class=\"p\">,</span> <span class=\"n\">genes</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@Chromosome</span><span class=\"o\">.</span><span class=\"n\">fitness_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fitness</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        \n        <span class=\"sd\">\"\"\" Defining the fitness function. \"\"\"</span>\n        <span class=\"c1\"># Use the knapsack value as the fitness value</span>\n        <span class=\"n\">total_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">total_weight</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">genes_length</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">genes</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n                <span class=\"n\">total_value</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knapsack_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"s1\">'value'</span><span class=\"p\">]</span>\n                <span class=\"n\">total_weight</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knapsack_data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"s1\">'weight'</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">total_weight</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maximum_weight</span><span class=\"p\">:</span>\n            <span class=\"n\">total_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">total_value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">random_gene</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Defining the random gene. \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">KnapscakPopulation</span><span class=\"p\">(</span><span class=\"n\">Population</span><span class=\"p\">):</span>\n    <span class=\"n\">tournament_sample_percentage</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">random_individual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Defining the random individual in the population. \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">OneDimensinalKnapsack</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">population</span> <span class=\"o\">=</span> <span class=\"n\">KnapscakPopulation</span><span class=\"p\">(</span><span class=\"n\">population_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>    \n    <span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Generation </span><span class=\"si\">{</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">generation_number</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">best</span> <span class=\"o\">=</span> <span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">get_best_individual</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># The optimal answer for this test case is</span>\n    <span class=\"c1\"># (15, [0, 1, 1, 1, 1])</span>\n    <span class=\"nb\">print</span><span class=\"p\">((</span><span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">fitness</span><span class=\"p\">,</span> <span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">genes</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<pre><code>(15, [0, 1, 1, 1, 1])\n</code></pre>\n<h2>Meta</h2>\n<p>Mohamed Hisham \u2013 <a href=\"mailto:Mohamed00Hisham@Gmail.com\">G-Mail</a> | <a href=\"https://github.com/Mhmd-Hisham\" rel=\"nofollow\">GitHub</a> | <a href=\"https://www.linkedin.com/in/Mhmd-Hisham/\" rel=\"nofollow\">LinkedIn</a></p>\n<p>This project is licensed under the GNU GPLv3 License - check <a href=\"https://github.com/Mhmd-Hisham/OptivolutionPy/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> for more details.</p>\n\n          </div>"}, "last_serial": 5699464, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6c5d64a073473a5917ef873455fa4f4b", "sha256": "1e13708cfaa060d5939265cca925def80524c5e59dc645ebd0b3f8f058f7aec5"}, "downloads": -1, "filename": "OptivolutionPy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6c5d64a073473a5917ef873455fa4f4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17565, "upload_time": "2019-08-19T15:26:52", "upload_time_iso_8601": "2019-08-19T15:26:52.315911Z", "url": "https://files.pythonhosted.org/packages/4f/a8/f8d99b832723cda56bf77124e6720b8faf3f40fe7968552bb4c9a9ffe3d3/OptivolutionPy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0acc23828932164d43e0e07a287f425", "sha256": "e04dae13c7c1835b57613462154e2b0513735f37e0405f387c3c2f816bf58477"}, "downloads": -1, "filename": "OptivolutionPy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a0acc23828932164d43e0e07a287f425", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4350, "upload_time": "2019-08-19T15:26:55", "upload_time_iso_8601": "2019-08-19T15:26:55.086551Z", "url": "https://files.pythonhosted.org/packages/b7/6c/d323bc81ea7f2f44f26ce18895bbb46ba9baf331f175ada0ab5eb36cfe8f/OptivolutionPy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4d24c88a36b015cc3e50a4efe6a51e55", "sha256": "64f7da38edfd55b1f313552c7f2ce3c65789c6186b4ec500dba90bde51bbb72d"}, "downloads": -1, "filename": "OptivolutionPy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d24c88a36b015cc3e50a4efe6a51e55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17592, "upload_time": "2019-08-19T17:09:03", "upload_time_iso_8601": "2019-08-19T17:09:03.549061Z", "url": "https://files.pythonhosted.org/packages/fe/25/3b3c4f59bd1933b67af829eb72b153d58e60a290b6e1c68c0c0eadabc423/OptivolutionPy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "773508a6250d56a06bad98a2017179a5", "sha256": "c24cbd7c38a665d55b4fb8b4094814be0e3947c09fe4a70b3dd6af2876c4ff2a"}, "downloads": -1, "filename": "OptivolutionPy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "773508a6250d56a06bad98a2017179a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4422, "upload_time": "2019-08-19T17:09:05", "upload_time_iso_8601": "2019-08-19T17:09:05.214860Z", "url": "https://files.pythonhosted.org/packages/98/a2/9d8364cd3d442f1f715440f3c522697005994bba8dc4eabe2e2861ceef67/OptivolutionPy-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d24c88a36b015cc3e50a4efe6a51e55", "sha256": "64f7da38edfd55b1f313552c7f2ce3c65789c6186b4ec500dba90bde51bbb72d"}, "downloads": -1, "filename": "OptivolutionPy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d24c88a36b015cc3e50a4efe6a51e55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17592, "upload_time": "2019-08-19T17:09:03", "upload_time_iso_8601": "2019-08-19T17:09:03.549061Z", "url": "https://files.pythonhosted.org/packages/fe/25/3b3c4f59bd1933b67af829eb72b153d58e60a290b6e1c68c0c0eadabc423/OptivolutionPy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "773508a6250d56a06bad98a2017179a5", "sha256": "c24cbd7c38a665d55b4fb8b4094814be0e3947c09fe4a70b3dd6af2876c4ff2a"}, "downloads": -1, "filename": "OptivolutionPy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "773508a6250d56a06bad98a2017179a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4422, "upload_time": "2019-08-19T17:09:05", "upload_time_iso_8601": "2019-08-19T17:09:05.214860Z", "url": "https://files.pythonhosted.org/packages/98/a2/9d8364cd3d442f1f715440f3c522697005994bba8dc4eabe2e2861ceef67/OptivolutionPy-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:59 2020"}