{"info": {"author": "Eric Torstenson", "author_email": "eric.s.torstenson@vanderbilt.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "libGWAS - A GWAS Parser Library for Python\n******************************************\n\n* Installation\n\n  * Install with PIP\n\n  * Manual Installation\n\n  * System Requirements\n\n  * Running Unit Tests\n\n  * Virtual Env\n\n  * Miniconda\n\n* Changelog\n\nInstallation\n************\n\nlibGWAS requires python 2.7.x as well as the following libraries:\n\n* NumPy (version 1.7.2 or later)   www.numpy.org\n\n* SciPY (version 0.13.2 or later)  www.scipy.org\n\nlibGWAS's installation will attempt to install these required\ncomponents for you, however, it requires that you have write\npermission to the installation directory. If you are using a shared\nsystem and lack the necessary privileges to install libraries and\nsoftware yourself, you should please see one of the sections,\nMiniconda or virtual-env below for instructions on different options\nfor setting up your own python environement which will exist entirely\nunder your own control.\n\nInstallation can be done in two ways:\n\n\nInstall with PIP\n================\n\nTo install using python's package manager, pip, simply use the\nfollowing command:\n\n$ *pip install libGWAS*\n\nIf you have proper permission to install packages, this will attempt\nto download and install all dependencies along with libGWAS itself.\n\n\nManual Installation\n===================\n\nFor users who do not use pip or wish to run the bundled tests as well\nas have a local copy of the manuals, manual installation is almost as\neasy.\n\nFor users with Git installed, you can simply clone the sources using\nthe following command:\n\n$ *git clone https://github.com/edwards-lab/libGWAS*\n\nOr you may visit the website and download the tarball directly from\ngithub: https://github.com/edwards-lab/libGWAS\n\nOnce you have downloaded the software, simply extract the contents and\nrun the following command to install it:\n\n$ *python setup.py install*\n\nIf no errors are reported, it should be installed and ready to use.\n\n**Regarding PYTHON 3** I began the process of updating the code to\nwork with both python versions 2 and 3, however, there are some real\nissues with some library support of version 3 that is discouraging.\nSo, until those have been resolved, I have no plans to invest further\ntime toward support for python 3.\n\n\nSystem Requirements\n+++++++++++++++++++\nBecause libGWAS is simply a set of classes and functions, it has no specific\nsystem requirements. However, developers using the library should be aware of\nthe fact that some parsers, such as the pedigree_parser will require that the\nentire dataset be loaded into memory, regardless of the filters that are in \nplay (i.e. positional filters, such as --from-kb and --to-kb). \n\n\n\nRunning Unit Tests\n==================\n\nlibGWAS comes with a unit test suite which can be run prior to\ninstallation. To run the tests, simply run the following command from\nwithin the root directory of the extracted archive's contents:\n\n$ *python setup.py test*\n\nIf no errors are reported, then libGWAS should run correctly on your\nsystem.\n\n\nVirtual Env\n===========\n\nVirtual ENV is a powerful too for python programmers and end users\nalike as it allows for users to deploy different versions of python\napplications without the need for root access to the machine.\n\nBecause libGWAS requires version 2.7, you'll need to ensure that your\nmachine's python version is in compliance. Virtual Env basically uses\nthe the system version of python, but creates a user owned environment\nwrapper allowing users to install libraries easily without\nadministrative rights to the machine.\n\nFor a helpful introduction to VirtualEnv, please have a look at the\ntutorial: http://www.simononsoftware.com/virtualenv-tutorial/\n\n\nMiniconda\n=========\n\nMiniconda is a minimal version of the package manager used by the\nAnaconda python distribution. It makes it easy to create local\ninstallations of python with the latest versions of the common\nscientific libraries for users who don't have root access to their\ntarget machines. Basically, when you use miniconda, you'll be\ninstalling your own version of Python into a directory under your\ncontrol which allows you to install anything else you need without\nhaving to submit a helpdesk ticket for administrative assistance.\n\nUnlike pip, the folks behind the conda distributions provide binary\ndownloads of it's selected library components. As such, only the most\npopular libraries, such as pip, NumPY and SciPy, are supported by\nconda itself. However, these do not require compilation and may be\neasier to get installed than when using pip alone. I have experienced\ndifficulty installing SciPy through pip and setup tools on our cluster\nhere at vanderbilt due to non-standard paths for certain required\ncomponents, but mini-conda always comes through.\n\nFirstly, download and install the appropriate version of miniconda at\nthe project website. Please be sure to choose the Python 2 version:\nhttp://conda.pydata.org/miniconda.html\n\nWhile it is doing the installation, please allow it to update your\nPATH information. If you prefer not to always use this version of\npython in the future, simple tell it not to update your .bashrc file\nand note the instructions for loading and unloading your new python\nenvironment. Please note that even if you chose to update your .bashrc\nfile, you will need to follow directions for loading the changes into\nyour current shell.\n\nOnce those changes have taken effect, install setuptools and scipy: $\n*conda install pip scipy*\n\nInstalling SciPy will also force the installation of NumPy, which is\nalso required for running libGWAS. (setuptools includes easy_install).\n\nOnce that has been completed successfully, you should be ready to\nfollow the standard instructions for installing libGWAS.\n\n\n\n\nChangelog\n=========\n\nlibGWAS.py: 1.0.0 released\n\t* Migrated library out from libGWAS in preparation for release of new analysis program", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/edwards-lab/libGWAS/archive/v1.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/edwards-lab/libGWAS", "keywords": "GWAS,genetic analysis", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "libgwas", "package_url": "https://pypi.org/project/libgwas/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/libgwas/", "project_urls": {"Download": "https://github.com/edwards-lab/libGWAS/archive/v1.0.0.tar.gz", "Homepage": "https://github.com/edwards-lab/libGWAS"}, "release_url": "https://pypi.org/project/libgwas/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "['GWAS Parser Library']", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"libgwas-a-gwas-parser-library-for-python\">\n<h2>libGWAS - A GWAS Parser Library for Python</h2>\n<ul>\n<li>Installation<ul>\n<li>Install with PIP</li>\n<li>Manual Installation</li>\n<li>System Requirements</li>\n<li>Running Unit Tests</li>\n<li>Virtual Env</li>\n<li>Miniconda</li>\n</ul>\n</li>\n<li>Changelog</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>libGWAS requires python 2.7.x as well as the following libraries:</p>\n<ul>\n<li>NumPy (version 1.7.2 or later)   www.numpy.org</li>\n<li>SciPY (version 0.13.2 or later)  www.scipy.org</li>\n</ul>\n<p>libGWAS\u2019s installation will attempt to install these required\ncomponents for you, however, it requires that you have write\npermission to the installation directory. If you are using a shared\nsystem and lack the necessary privileges to install libraries and\nsoftware yourself, you should please see one of the sections,\nMiniconda or virtual-env below for instructions on different options\nfor setting up your own python environement which will exist entirely\nunder your own control.</p>\n<p>Installation can be done in two ways:</p>\n<div id=\"install-with-pip\">\n<h3>Install with PIP</h3>\n<p>To install using python\u2019s package manager, pip, simply use the\nfollowing command:</p>\n<p>$ <em>pip install libGWAS</em></p>\n<p>If you have proper permission to install packages, this will attempt\nto download and install all dependencies along with libGWAS itself.</p>\n</div>\n<div id=\"manual-installation\">\n<h3>Manual Installation</h3>\n<p>For users who do not use pip or wish to run the bundled tests as well\nas have a local copy of the manuals, manual installation is almost as\neasy.</p>\n<p>For users with Git installed, you can simply clone the sources using\nthe following command:</p>\n<p>$ <em>git clone https://github.com/edwards-lab/libGWAS</em></p>\n<p>Or you may visit the website and download the tarball directly from\ngithub: <a href=\"https://github.com/edwards-lab/libGWAS\" rel=\"nofollow\">https://github.com/edwards-lab/libGWAS</a></p>\n<p>Once you have downloaded the software, simply extract the contents and\nrun the following command to install it:</p>\n<p>$ <em>python setup.py install</em></p>\n<p>If no errors are reported, it should be installed and ready to use.</p>\n<p><strong>Regarding PYTHON 3</strong> I began the process of updating the code to\nwork with both python versions 2 and 3, however, there are some real\nissues with some library support of version 3 that is discouraging.\nSo, until those have been resolved, I have no plans to invest further\ntime toward support for python 3.</p>\n<div id=\"system-requirements\">\n<h4>System Requirements</h4>\n<p>Because libGWAS is simply a set of classes and functions, it has no specific\nsystem requirements. However, developers using the library should be aware of\nthe fact that some parsers, such as the pedigree_parser will require that the\nentire dataset be loaded into memory, regardless of the filters that are in\nplay (i.e. positional filters, such as \u2013from-kb and \u2013to-kb).</p>\n</div>\n</div>\n<div id=\"running-unit-tests\">\n<h3>Running Unit Tests</h3>\n<p>libGWAS comes with a unit test suite which can be run prior to\ninstallation. To run the tests, simply run the following command from\nwithin the root directory of the extracted archive\u2019s contents:</p>\n<p>$ <em>python setup.py test</em></p>\n<p>If no errors are reported, then libGWAS should run correctly on your\nsystem.</p>\n</div>\n<div id=\"virtual-env\">\n<h3>Virtual Env</h3>\n<p>Virtual ENV is a powerful too for python programmers and end users\nalike as it allows for users to deploy different versions of python\napplications without the need for root access to the machine.</p>\n<p>Because libGWAS requires version 2.7, you\u2019ll need to ensure that your\nmachine\u2019s python version is in compliance. Virtual Env basically uses\nthe the system version of python, but creates a user owned environment\nwrapper allowing users to install libraries easily without\nadministrative rights to the machine.</p>\n<p>For a helpful introduction to VirtualEnv, please have a look at the\ntutorial: <a href=\"http://www.simononsoftware.com/virtualenv-tutorial/\" rel=\"nofollow\">http://www.simononsoftware.com/virtualenv-tutorial/</a></p>\n</div>\n<div id=\"miniconda\">\n<h3>Miniconda</h3>\n<p>Miniconda is a minimal version of the package manager used by the\nAnaconda python distribution. It makes it easy to create local\ninstallations of python with the latest versions of the common\nscientific libraries for users who don\u2019t have root access to their\ntarget machines. Basically, when you use miniconda, you\u2019ll be\ninstalling your own version of Python into a directory under your\ncontrol which allows you to install anything else you need without\nhaving to submit a helpdesk ticket for administrative assistance.</p>\n<p>Unlike pip, the folks behind the conda distributions provide binary\ndownloads of it\u2019s selected library components. As such, only the most\npopular libraries, such as pip, NumPY and SciPy, are supported by\nconda itself. However, these do not require compilation and may be\neasier to get installed than when using pip alone. I have experienced\ndifficulty installing SciPy through pip and setup tools on our cluster\nhere at vanderbilt due to non-standard paths for certain required\ncomponents, but mini-conda always comes through.</p>\n<p>Firstly, download and install the appropriate version of miniconda at\nthe project website. Please be sure to choose the Python 2 version:\n<a href=\"http://conda.pydata.org/miniconda.html\" rel=\"nofollow\">http://conda.pydata.org/miniconda.html</a></p>\n<p>While it is doing the installation, please allow it to update your\nPATH information. If you prefer not to always use this version of\npython in the future, simple tell it not to update your .bashrc file\nand note the instructions for loading and unloading your new python\nenvironment. Please note that even if you chose to update your .bashrc\nfile, you will need to follow directions for loading the changes into\nyour current shell.</p>\n<p>Once those changes have taken effect, install setuptools and scipy: $\n<em>conda install pip scipy</em></p>\n<p>Installing SciPy will also force the installation of NumPy, which is\nalso required for running libGWAS. (setuptools includes easy_install).</p>\n<p>Once that has been completed successfully, you should be ready to\nfollow the standard instructions for installing libGWAS.</p>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<dl>\n<dt>libGWAS.py: 1.0.0 released</dt>\n<dd><ul>\n<li>Migrated library out from libGWAS in preparation for release of new analysis program</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2492310, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "29d474bf783f5caafdf99aaf0ac4f4f6", "sha256": "8cfd5aa3d80ca44bc3c5e08d78d36c6b9fd4f08ef014f0073f473bb2eb6b4db8"}, "downloads": -1, "filename": "libgwas-1.0.0.tar.gz", "has_sig": false, "md5_digest": "29d474bf783f5caafdf99aaf0ac4f4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 445451, "upload_time": "2016-11-30T18:53:06", "upload_time_iso_8601": "2016-11-30T18:53:06.335702Z", "url": "https://files.pythonhosted.org/packages/bf/4d/d70bc45a8bd83245859c4d46c3718e243f8989bdee7e9a65de32eb6c6e72/libgwas-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29d474bf783f5caafdf99aaf0ac4f4f6", "sha256": "8cfd5aa3d80ca44bc3c5e08d78d36c6b9fd4f08ef014f0073f473bb2eb6b4db8"}, "downloads": -1, "filename": "libgwas-1.0.0.tar.gz", "has_sig": false, "md5_digest": "29d474bf783f5caafdf99aaf0ac4f4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 445451, "upload_time": "2016-11-30T18:53:06", "upload_time_iso_8601": "2016-11-30T18:53:06.335702Z", "url": "https://files.pythonhosted.org/packages/bf/4d/d70bc45a8bd83245859c4d46c3718e243f8989bdee7e9a65de32eb6c6e72/libgwas-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:35 2020"}