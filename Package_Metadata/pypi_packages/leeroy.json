{"info": {"author": "Joe Shaw", "author_email": "joeshaw@litl.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "# Leeroy: Jenkins integration with GitHub pull requests\n\nLeeroy is a Python [Flask](http://flask.pocoo.org) service which\nintegrates Jenkins with GitHub pull requests.  Leeroy uses [GitHub\nhooks](http://developer.github.com/v3/repos/hooks/) to listen for pull\nrequest notifications and starts jobs on your Jenkins server.  Using the\nJenkins [notification plugin][jnp], Leeroy updates the pull request using\nGitHub's [status API](http://developer.github.com/v3/repos/statuses/)\nwith pending, success, failure, or error statuses.\n\n## Installation\n\nInstall the package using pip:\n\n    $ pip install leeroy\n\n## Configuration\n\nLeeroy needs to be configured to point to your GitHub repositories,\nto your Jenkins server and its jobs.  Leeroy will attempt to automatically\ninstall the GitHub hook for you.  You will also need to configure your\nJenkins jobs to pull the right repositories and commits.\n\n### Leeroy Configuration\n\nYou may either edit the `leeroy/settings.py` file or create a new file and\nset the `LEEROY_CONFIG` environment variable to point to that file.  It\nshould look something like:\n\n[embedmd]:# (leeroy/settings.py python)\n```python\nDEBUG = True\nLOGGING_CONF = \"logging.conf\"\nLOGGER_NAME = \"leeroy\"\n\n# The hostname (and :port, if necessary) of this server\nSERVER_NAME = \"leeroy.example.com\"\n\n# The hostname (and :port, if necessary) of the server GitHub should send\n# notification to. It can be different from SERVER_NAME when another server is\n# proxying requests to leeroy.  Falls back to SERVER_NAME if not provided.\n# GITHUB_NOTIFICATION_SERVER_NAME = \"leeroy.example.com\"\n# GITHUB_NOTIFICATION_SERVER_SCHEME = \"http\"\n\n# GitHub configuration\n# The base URL for GitHub's API. If using GitHub Enterprise, change this to\n# https://servername/api/v3\n# GITHUB_API_BASE = \"https://github.example.com/api/v3\"\nGITHUB_API_BASE = \"https://api.github.com\"\n\n# Verify SSL certificate. Always set this to True unless using GitHub\n# Enterprise with a self signed certificate.\nGITHUB_VERIFY = True\n\n# Verify SSL certificate for Jenkins server. Always set this to True unless\n# using Jenkins with a self signed certificate. Optionally use a path\n# to the Jenkins CA bundle.\n# JENKINS_VERIFY = \"/etc/nginx/ssl/\"\nJENKINS_VERIFY = True\n\n# Create and use a GitHub API token or supply a user and password.\nGITHUB_TOKEN = \"\"\n# GITHUB_USER = \"octocat\"\n# GITHUB_PASSWORD = \"\"\n\n# GitHub build context\nGITHUB_CONTEXT = \"leeroy/jenkins\"\n\n# Register per-repo webhooks.  Defaults to true\nGITHUB_REGISTER_REPO_HOOKS = True\n\n# Jenkins configuration\n# JENKINS_USER and JENKINS_PASSWORD assume you're using basic HTTP\n# authentication, not Jenkins's built in auth system.\n# JENKINS_BUILD_TOKEN can be used with the \"Trigger builds remotely\"\n# build trigger configuration\nJENKINS_URL = \"https://jenkins.example.com\"\nJENKINS_USER = \"\"\nJENKINS_PASSWORD = \"\"\nJENKINS_BUILD_TOKEN = None\n\n# Use the Build Authorization Token Root Plugin's alternative URL for\n# triggering builds.  Handy when using build tokens and no\n# authentication.\nJENKINS_AUTH_TOKEN_ROOT_BUILD = False\n\n# Whether a Jenkins job is created for each commit in a pull request,\n# or only one for the last one.\n# What commits to build in a pull request. There are three options:\n# 'ALL': build all commits in the pull request.\n# 'LAST': build only the last commit in the pull request.\n# 'NEW': build only commits that don't already have a commit status set.\n#        (default)\nBUILD_COMMITS = 'NEW'\n\n# A list of dicts containing configuration for each GitHub repository &\n# Jenkins job pair you want to join together.\n#\n# An example entry:\n#\n# {\"github_repo\": \"litl/leeroy\",\n#  \"jenkins_job_name\": \"leeroy-github\",\n#  \"github_api_base\": \"https://github.example.com/api/v3\",\n#  \"github_token\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\n#  \"github_user\": \"litl\",\n#  \"github_password\": \"password\",\n#  \"github_context\": \"leeroy\",\n#  \"jenkins_url\": \"\"https://jenkins2.example.com\"\",\n#  \"jenkins_user\": \"litl\",\n#  \"jenkins_password\": \"password\",\n#  \"jenkins_build_token\": \"abc123\",\n#  \"build_commits\": \"LAST\"}\n#\n# github_api_base, github_token, github_user, github_password, jenkins_url,\n# jenkins_user, jenkins_password, and build_commits are optional.  If not\n# present, they'll pull from the toplevel configuration options (GITHUB_USER,\n# etc.)\nREPOSITORIES = [\n    {\"github_repo\": \"litl/leeroy\",\n     \"jenkins_job_name\": \"leeroy-github\"}\n]\n```\n\n### Jenkins Configuration\n\n1. Install the Jenkins [git plugin][jgp] and [notification plugin][jnp].\n\n2. Create a Jenkins job.  Under \"Job Notifications\", set a Notification\nEndpoint with protocol HTTP and the URL pointing to `/notification/jenkins`\non your Leeroy server.  If your Leeroy server is `leeroy.example.com`, set\nthis to `http://leeroy.example.com/notification/jenkins`.\n\n3. Check the \"This build is parameterized\" checkbox, and add 4 string\nparameters: `GIT_BASE_REPO`, `GIT_HEAD_REPO`, `GIT_SHA1`, and `GITHUB_URL`.\nDefault values like `username/repo` for `GIT_BASE_REPO` and `GIT_HEAD_REPO`,\nand `master` for `GIT_SHA1` are a good idea, but not required.\n\n4. Under \"Source Code Management\", select Git.  Set the \"Repository URL\" to\n`git@github.com:$GIT_HEAD_REPO.git`.  Set \"Branch Specifier\" to `$GIT_SHA1`.\n\n5. Configure the rest of the job however you would otherwise.\n\n[jgp]: https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin\n[jnp]: https://wiki.jenkins-ci.org/display/JENKINS/Notification+Plugin\n\n## Running Leeroy\n\nAfter configuring your service, you can start Leeroy:\n\n    $ uwsgi uwsgi.ini\n\nEnsure that the GitHub hook has been installed by visiting\n`https://github.com/<user>/<repo>/admin/hooks` for your project, or by\nchecking the Leeroy logs.\n\nSubmit a pull request for one of your watched GitHub repositories.  You\nshould shortly see a build scheduled for its corresponding Jenkins job.\nSoon after that, you should see a \"pending\" status on the pull request\nin GitHub.  Once the build finishes, you should see either a \"success\"\nor \"failure\" status on your pull request.  Congratulations!\n\nA `Procfile` is included so you can easily run Leeroy on Heroku.\n\n## Cron task to fix missing statuses\n\nSometimes Github doesn't fire a hook, or Jenkins forgets to build a job.  You\ncan take care of this wonderful edge-case by running the following in a\ncron-task:\n\n    $ leeroy-cron\n\nYou can add it to your crontab to run at whatever interval suits you.\n\n## Commandline tool to (re)try pull requests\n\nSometimes you want to replay a pull-request job.  Maybe the status failed\neratically.  Maybe you don't have the Jenkins Rebuild plugin.  Whatever your\nreason you can try:\n\n    $ leeroy-retry foo/bar 1234\n\nAnd leeroy will re-test pull request 1234 in the foo/bar\n\n## Contribution\n\nContributions are welcome!  Here's the best way to do that:\n\n1. Fork the repo\n2. Make your changes, preferably in a feature branch on your repo.  Don't\nforget to update the AUTHORS.md file!\n3. Submit a pull request\n\nPlease make sure that `python setup.py flake8` does not return any PEP-8 or\npyflakes errors before submitting your pull request.\n\n## FAQ\n\n### Why is this a server instead of a Jenkins plugin?\n\nThe honest answer is that I spend most of my day developing a Flask\napplication in Python, and that's the environment I have set up, feel\nvery comfortable in, and where I knew I could get something up and\nrunning quickly.\n\nThe delusional answer is that this makes it possible to integrate\nother CI services fairly easily in the future.\n\n### What's with the name Leeroy?\n\n[Know your meme.](http://knowyourmeme.com/memes/leeroy-jenkins)\n\n## Copyright and License\n\nLeeroy is Copyright (c) 2012 litl, LLC and licensed under the MIT license.\nSee the LICENSE file for full details.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/litl/leeroy", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "leeroy", "package_url": "https://pypi.org/project/leeroy/", "platform": "any", "project_url": "https://pypi.org/project/leeroy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/litl/leeroy"}, "release_url": "https://pypi.org/project/leeroy/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Leeroy integrates Jenkins CI with GitHub pull requests", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Leeroy: Jenkins integration with GitHub pull requests<br><br>Leeroy is a Python [Flask](http://flask.pocoo.org) service which<br>integrates Jenkins with GitHub pull requests.  Leeroy uses [GitHub<br>hooks](http://developer.github.com/v3/repos/hooks/) to listen for pull<br>request notifications and starts jobs on your Jenkins server.  Using the<br>Jenkins [notification plugin][jnp], Leeroy updates the pull request using<br>GitHub's [status API](http://developer.github.com/v3/repos/statuses/)<br>with pending, success, failure, or error statuses.<br><br>## Installation<br><br>Install the package using pip:<br><br>    $ pip install leeroy<br><br>## Configuration<br><br>Leeroy needs to be configured to point to your GitHub repositories,<br>to your Jenkins server and its jobs.  Leeroy will attempt to automatically<br>install the GitHub hook for you.  You will also need to configure your<br>Jenkins jobs to pull the right repositories and commits.<br><br>### Leeroy Configuration<br><br>You may either edit the `leeroy/settings.py` file or create a new file and<br>set the `LEEROY_CONFIG` environment variable to point to that file.  It<br>should look something like:<br><br>[embedmd]:# (leeroy/settings.py python)<br>```python<br>DEBUG = True<br>LOGGING_CONF = \"logging.conf\"<br>LOGGER_NAME = \"leeroy\"<br><br># The hostname (and :port, if necessary) of this server<br>SERVER_NAME = \"leeroy.example.com\"<br><br># The hostname (and :port, if necessary) of the server GitHub should send<br># notification to. It can be different from SERVER_NAME when another server is<br># proxying requests to leeroy.  Falls back to SERVER_NAME if not provided.<br># GITHUB_NOTIFICATION_SERVER_NAME = \"leeroy.example.com\"<br># GITHUB_NOTIFICATION_SERVER_SCHEME = \"http\"<br><br># GitHub configuration<br># The base URL for GitHub's API. If using GitHub Enterprise, change this to<br># https://servername/api/v3<br># GITHUB_API_BASE = \"https://github.example.com/api/v3\"<br>GITHUB_API_BASE = \"https://api.github.com\"<br><br># Verify SSL certificate. Always set this to True unless using GitHub<br># Enterprise with a self signed certificate.<br>GITHUB_VERIFY = True<br><br># Verify SSL certificate for Jenkins server. Always set this to True unless<br># using Jenkins with a self signed certificate. Optionally use a path<br># to the Jenkins CA bundle.<br># JENKINS_VERIFY = \"/etc/nginx/ssl/\"<br>JENKINS_VERIFY = True<br><br># Create and use a GitHub API token or supply a user and password.<br>GITHUB_TOKEN = \"\"<br># GITHUB_USER = \"octocat\"<br># GITHUB_PASSWORD = \"\"<br><br># GitHub build context<br>GITHUB_CONTEXT = \"leeroy/jenkins\"<br><br># Register per-repo webhooks.  Defaults to true<br>GITHUB_REGISTER_REPO_HOOKS = True<br><br># Jenkins configuration<br># JENKINS_USER and JENKINS_PASSWORD assume you're using basic HTTP<br># authentication, not Jenkins's built in auth system.<br># JENKINS_BUILD_TOKEN can be used with the \"Trigger builds remotely\"<br># build trigger configuration<br>JENKINS_URL = \"https://jenkins.example.com\"<br>JENKINS_USER = \"\"<br>JENKINS_PASSWORD = \"\"<br>JENKINS_BUILD_TOKEN = None<br><br># Use the Build Authorization Token Root Plugin's alternative URL for<br># triggering builds.  Handy when using build tokens and no<br># authentication.<br>JENKINS_AUTH_TOKEN_ROOT_BUILD = False<br><br># Whether a Jenkins job is created for each commit in a pull request,<br># or only one for the last one.<br># What commits to build in a pull request. There are three options:<br># 'ALL': build all commits in the pull request.<br># 'LAST': build only the last commit in the pull request.<br># 'NEW': build only commits that don't already have a commit status set.<br>#        (default)<br>BUILD_COMMITS = 'NEW'<br><br># A list of dicts containing configuration for each GitHub repository &amp;<br># Jenkins job pair you want to join together.<br>#<br># An example entry:<br>#<br># {\"github_repo\": \"litl/leeroy\",<br>#  \"jenkins_job_name\": \"leeroy-github\",<br>#  \"github_api_base\": \"https://github.example.com/api/v3\",<br>#  \"github_token\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",<br>#  \"github_user\": \"litl\",<br>#  \"github_password\": \"password\",<br>#  \"github_context\": \"leeroy\",<br>#  \"jenkins_url\": \"\"https://jenkins2.example.com\"\",<br>#  \"jenkins_user\": \"litl\",<br>#  \"jenkins_password\": \"password\",<br>#  \"jenkins_build_token\": \"abc123\",<br>#  \"build_commits\": \"LAST\"}<br>#<br># github_api_base, github_token, github_user, github_password, jenkins_url,<br># jenkins_user, jenkins_password, and build_commits are optional.  If not<br># present, they'll pull from the toplevel configuration options (GITHUB_USER,<br># etc.)<br>REPOSITORIES = [<br>    {\"github_repo\": \"litl/leeroy\",<br>     \"jenkins_job_name\": \"leeroy-github\"}<br>]<br>```<br><br>### Jenkins Configuration<br><br>1. Install the Jenkins [git plugin][jgp] and [notification plugin][jnp].<br><br>2. Create a Jenkins job.  Under \"Job Notifications\", set a Notification<br>Endpoint with protocol HTTP and the URL pointing to `/notification/jenkins`<br>on your Leeroy server.  If your Leeroy server is `leeroy.example.com`, set<br>this to `http://leeroy.example.com/notification/jenkins`.<br><br>3. Check the \"This build is parameterized\" checkbox, and add 4 string<br>parameters: `GIT_BASE_REPO`, `GIT_HEAD_REPO`, `GIT_SHA1`, and `GITHUB_URL`.<br>Default values like `username/repo` for `GIT_BASE_REPO` and `GIT_HEAD_REPO`,<br>and `master` for `GIT_SHA1` are a good idea, but not required.<br><br>4. Under \"Source Code Management\", select Git.  Set the \"Repository URL\" to<br>`git@github.com:$GIT_HEAD_REPO.git`.  Set \"Branch Specifier\" to `$GIT_SHA1`.<br><br>5. Configure the rest of the job however you would otherwise.<br><br>[jgp]: https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin<br>[jnp]: https://wiki.jenkins-ci.org/display/JENKINS/Notification+Plugin<br><br>## Running Leeroy<br><br>After configuring your service, you can start Leeroy:<br><br>    $ uwsgi uwsgi.ini<br><br>Ensure that the GitHub hook has been installed by visiting<br>`https://github.com/&lt;user&gt;/&lt;repo&gt;/admin/hooks` for your project, or by<br>checking the Leeroy logs.<br><br>Submit a pull request for one of your watched GitHub repositories.  You<br>should shortly see a build scheduled for its corresponding Jenkins job.<br>Soon after that, you should see a \"pending\" status on the pull request<br>in GitHub.  Once the build finishes, you should see either a \"success\"<br>or \"failure\" status on your pull request.  Congratulations!<br><br>A `Procfile` is included so you can easily run Leeroy on Heroku.<br><br>## Cron task to fix missing statuses<br><br>Sometimes Github doesn't fire a hook, or Jenkins forgets to build a job.  You<br>can take care of this wonderful edge-case by running the following in a<br>cron-task:<br><br>    $ leeroy-cron<br><br>You can add it to your crontab to run at whatever interval suits you.<br><br>## Commandline tool to (re)try pull requests<br><br>Sometimes you want to replay a pull-request job.  Maybe the status failed<br>eratically.  Maybe you don't have the Jenkins Rebuild plugin.  Whatever your<br>reason you can try:<br><br>    $ leeroy-retry foo/bar 1234<br><br>And leeroy will re-test pull request 1234 in the foo/bar<br><br>## Contribution<br><br>Contributions are welcome!  Here's the best way to do that:<br><br>1. Fork the repo<br>2. Make your changes, preferably in a feature branch on your repo.  Don't<br>forget to update the AUTHORS.md file!<br>3. Submit a pull request<br><br>Please make sure that `python setup.py flake8` does not return any PEP-8 or<br>pyflakes errors before submitting your pull request.<br><br>## FAQ<br><br>### Why is this a server instead of a Jenkins plugin?<br><br>The honest answer is that I spend most of my day developing a Flask<br>application in Python, and that's the environment I have set up, feel<br>very comfortable in, and where I knew I could get something up and<br>running quickly.<br><br>The delusional answer is that this makes it possible to integrate<br>other CI services fairly easily in the future.<br><br>### What's with the name Leeroy?<br><br>[Know your meme.](http://knowyourmeme.com/memes/leeroy-jenkins)<br><br>## Copyright and License<br><br>Leeroy is Copyright (c) 2012 litl, LLC and licensed under the MIT license.<br>See the LICENSE file for full details.<br>\n          </div>"}, "last_serial": 2210194, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ab449908d656b6a9a323e9129e67c8cc", "sha256": "317262b44000230c519e926885cefdf17454e203a3bb79cdef20004f93c28413"}, "downloads": -1, "filename": "leeroy-0.1.tar.gz", "has_sig": false, "md5_digest": "ab449908d656b6a9a323e9129e67c8cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1583, "upload_time": "2012-09-05T21:19:41", "upload_time_iso_8601": "2012-09-05T21:19:41.848420Z", "url": "https://files.pythonhosted.org/packages/ff/6d/456074f7fd0a8d00155b6068d442de6e87d7eccaaf5eab1e192316ad434f/leeroy-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a7b54cc31d1402c405b56d5eb9b1ec57", "sha256": "0ddf4f33129a3d4c22a5a54fbf6e0ebce5831df45833e673a3e475d6069ad0cf"}, "downloads": -1, "filename": "leeroy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a7b54cc31d1402c405b56d5eb9b1ec57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4563, "upload_time": "2012-09-05T21:23:35", "upload_time_iso_8601": "2012-09-05T21:23:35.043393Z", "url": "https://files.pythonhosted.org/packages/6e/22/e6f6b2828e42fcfcf08be45f16b0dd794c0bfbf3dba6740f531e5cfaf827/leeroy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a9e250eb87111e4b10c921c926ac49e7", "sha256": "d888c4ae1fd7531eadec7c465e7df94c21b1c0055120671e243f8f3cf81a0e87"}, "downloads": -1, "filename": "leeroy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a9e250eb87111e4b10c921c926ac49e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4617, "upload_time": "2012-09-14T15:31:23", "upload_time_iso_8601": "2012-09-14T15:31:23.726642Z", "url": "https://files.pythonhosted.org/packages/80/6c/37ae15b9c704694bf9ebf23fa41e397b8e872ee5fad510b64d9bfe7ee49d/leeroy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "58ac26ee6c94e10dc7814ded344ca302", "sha256": "bf3f8176c2065616761cba959e693e1b52782e1a45f9c9c974db952b5031dc8d"}, "downloads": -1, "filename": "leeroy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "58ac26ee6c94e10dc7814ded344ca302", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7764, "upload_time": "2012-09-14T18:06:43", "upload_time_iso_8601": "2012-09-14T18:06:43.482341Z", "url": "https://files.pythonhosted.org/packages/fb/46/01891e79b6bc28fd2b683247fdf5c3c3e1be2adbe6514b896f2f4dfc362c/leeroy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "ff9b6a1b94f9d68afbee0733685225a9", "sha256": "f905ba8a7c15883573cf328f016560b7c5f5f12645a853ee8b296b1fe957945a"}, "downloads": -1, "filename": "leeroy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ff9b6a1b94f9d68afbee0733685225a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8163, "upload_time": "2013-05-08T14:49:55", "upload_time_iso_8601": "2013-05-08T14:49:55.907405Z", "url": "https://files.pythonhosted.org/packages/66/a8/dc885c0d097585fa20241e789ba34936c5982e17c66a147f1349d58882fd/leeroy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "fd0d56b532a0ffbd7b172bea1fac6bf0", "sha256": "65551b6eb1e342b6ace6ec99d3065ebf0220697f041c5bb5e60f8170c8517368"}, "downloads": -1, "filename": "leeroy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "fd0d56b532a0ffbd7b172bea1fac6bf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8653, "upload_time": "2013-07-15T13:57:59", "upload_time_iso_8601": "2013-07-15T13:57:59.649194Z", "url": "https://files.pythonhosted.org/packages/ee/ff/9c6f5686cd87e0be7da6dcf054c770d26ade623bf778fda68a5efd9e821a/leeroy-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "09322765433b245eab377097bdc34a87", "sha256": "da7c5b9bd4172611a14dffbda67aca0eb8790925363930867e8df94095a4fc7e"}, "downloads": -1, "filename": "leeroy-0.1.6.tar.gz", "has_sig": false, "md5_digest": "09322765433b245eab377097bdc34a87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9250, "upload_time": "2013-08-02T18:41:44", "upload_time_iso_8601": "2013-08-02T18:41:44.484768Z", "url": "https://files.pythonhosted.org/packages/2c/30/cdaca9788cb1c89989d6c7df55c6fe7979c841b12b25ca86280e69f3f81d/leeroy-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "61e39b62460958ab67c27d82faf01c01", "sha256": "17855f7efb1a9b79a894c1407a176b49ff9119b6d3e0edb88b334c39efcb37a4"}, "downloads": -1, "filename": "leeroy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "61e39b62460958ab67c27d82faf01c01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10670, "upload_time": "2013-10-18T15:48:40", "upload_time_iso_8601": "2013-10-18T15:48:40.436895Z", "url": "https://files.pythonhosted.org/packages/71/df/78a9defe2d8ff7588ddb02c58b573d519bbecb5bf9f81e790665142f8b63/leeroy-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "38217d3081b0216b6aefcc65a0d8c818", "sha256": "35c3a76f21e277534d85ef36c2f21d939069275804cd4567c7b34a18dfd4fd5f"}, "downloads": -1, "filename": "leeroy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "38217d3081b0216b6aefcc65a0d8c818", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10802, "upload_time": "2014-02-25T17:39:11", "upload_time_iso_8601": "2014-02-25T17:39:11.413368Z", "url": "https://files.pythonhosted.org/packages/1c/a4/e9cb70f2bc878be6c1f188ac620b0b7fd06bebdeed9c7b28199e80009441/leeroy-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "91716823f03f313dc0e59ddcf7aaba92", "sha256": "e376cd06125dcfaa6ff39e6fdec662769f7769e41afd05d9f09325b82cea92ee"}, "downloads": -1, "filename": "leeroy-0.2.2.tar.gz", "has_sig": false, "md5_digest": "91716823f03f313dc0e59ddcf7aaba92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10802, "upload_time": "2014-03-25T13:18:46", "upload_time_iso_8601": "2014-03-25T13:18:46.320751Z", "url": "https://files.pythonhosted.org/packages/16/eb/bb4ddf2b89b7a9e82b92b749fd895cedbb841cdbdfc7d448fd3d28e931c9/leeroy-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f40d675b52d572eb5079d049a2698b26", "sha256": "0bc52c5de7a1fa1625808697cf0f84031ecb7edcfc80b0266699264d120bb1b0"}, "downloads": -1, "filename": "leeroy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f40d675b52d572eb5079d049a2698b26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11740, "upload_time": "2016-07-08T14:37:27", "upload_time_iso_8601": "2016-07-08T14:37:27.492478Z", "url": "https://files.pythonhosted.org/packages/2f/48/3877a580ac52730890baa22c32f70c51a3fcb2a3bdf6d7d0c42e56191a8e/leeroy-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f40d675b52d572eb5079d049a2698b26", "sha256": "0bc52c5de7a1fa1625808697cf0f84031ecb7edcfc80b0266699264d120bb1b0"}, "downloads": -1, "filename": "leeroy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f40d675b52d572eb5079d049a2698b26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11740, "upload_time": "2016-07-08T14:37:27", "upload_time_iso_8601": "2016-07-08T14:37:27.492478Z", "url": "https://files.pythonhosted.org/packages/2f/48/3877a580ac52730890baa22c32f70c51a3fcb2a3bdf6d7d0c42e56191a8e/leeroy-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:14 2020"}