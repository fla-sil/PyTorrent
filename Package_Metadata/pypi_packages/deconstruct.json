{"info": {"author": "biqqles", "author_email": "biqqles@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# deconstruct\n**deconstruct** provides a Pythonic analogue of C's `struct`, primarily for the purpose of interpreting (i.e. _deconstructing_) contiguous binary data.\n\nInternally, deconstruct uses Python's [struct module](https://docs.python.org/3/library/struct.html) and can be considered an abstraction of sorts. struct (the module) can be frustrating to use: its format strings appear arcane and furthermore separate the description of the data from its representation, a definite strength of C's struct.\n\nIn contrast, deconstruct allows structs to be defined and used using a syntax that is Pythonic while maintaining close correspondence to C.  \n\n### Usage  \nWith deconstruct, the struct definition (adapted from [input.h](https://github.com/torvalds/linux/blob/master/include/uapi/linux/input.h)):\n\n```C\n#include <stdint.h>\n\nstruct input_event {  \n    uint64_t time[2];\n    int16_t type;\n    int16_t code;\n    int32_t value;\n};\n```\n\ncan be represented as:\n\n```Python\nimport deconstruct as c\n\nclass InputEvent(c.Struct):\n    time: c.uint64[2]\n    type: c.int16\n    code: c.int16\n    value: c.int32\n```\n\nThis definition can be used to interpret and then access binary data:\n\n```Python\n>>> buffer = b'Some  arbitrary  buffer!'\n>>> event = InputEvent(buffer)\n>>> event.code\n26229\n>>> event.time\n(8241904116577431379, 2340027244253309282)\n>>> print(event)\nstruct InputEvent [ByteOrder.NATIVE, TypeWidth.STANDARD] {\n    time: uint64 = (8241904116577431379, 2340027244253309282)\n    type: int16 = 25120\n    code: int16 = 26229\n    value: int32 = 561145190\n}\n```\n\nOf course, in reality the buffer passed in is more likely to come from something more useful, like a file. Notice that fixed-size, n-dimensional arrays can be specified using the syntax `type[length]`, a further improvement on Python's struct.\n\n### Installation\ndeconstruct is now on PyPI:\n\n```sh\npip install deconstruct\n```\n\nAlternatively you can install straight from this repository:\n\n```sh\npip install https://github.com/biqqles/deconstruct/archive/master.zip\n```\n\nBuilt wheels are also available under [Releases](https://github.com/biqqles/deconstruct/releases), as is a changelog. The latest release is version 0.5.\n\ndeconstruct has no dependencies but requires Python >= 3.6 as it makes use of the class annotation syntax added in that release (see [PEP 526](https://www.python.org/dev/peps/pep-0526/)).\n\n## API listing\n\n### Struct(buffer: bytes)\nSubclass this to define your own structs. Subclasses should only declare fields of C types defined in this package.\n\nWhen you instantiate your Struct with a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object), deconstruct creates a format string and uses it to unpack that buffer. In the instance, C types will be replaced with their equivalent Python types for use (e.g. `bytes` for `char`, `int` for `schar` and `float` for `double`). All types available for use in struct field definitions and their details are documented in the table [below](#c-types).\n\n#### Attributes\n|Name            |Type       |Description   |\n|----------------|-----------|--------------|\n|`__byte_order__`|`ByteOrder`|Set this in your subclass definition to define the byte order used when unpacking the struct. One of:<ul><li>`ByteOrder.NATIVE` (default value)</li><li>`ByteOrder.BIG_ENDIAN`</li><li>`ByteOrder.LITTLE_ENDIAN`</li></ul>|\n|`__type_width__`|`TypeWidth`|Set this in your subclass definition to define the type width and padding used for the struct. One of:<ul><li>`TypeWidth.NATIVE`</li><li>`TypeWidth.STANDARD` (default value)</li></ul>When `TypeWidth.NATIVE` is set, the struct will use native type widths and alignment. When `TypeWidth.STANDARD` is used, the struct will use Python's struct's \"standard\" widths<sup>[1](#f_st)</sup> and no padding.|\n\nNote that `TypeWidth.NATIVE` can only be used with `ByteOrder.NATIVE`. This is a limitation of Python's struct.\n\n#### Properties\n|Name            |Type       |Description   |\n|----------------|-----------|--------------|\n|`format_string` |`str`      |The struct.py-compatible format string for this struct|\n|`sizeof`        |`int`      |The total size in bytes of the struct. Equivalent to C's `sizeof`|\n\n#### Methods\n|Signature       |Return type|Description   |\n|----------------|-----------|--------------|\n\t|`to_bytes()`    |`bytes`    |Returns the in-memory (\"packed\") representation of this struct instance|\n\nYou can also `print` Struct instances for easier debugging and compare them using the `==` operator.\n\n### C types\ndeconstruct defines the following special types for use in Struct definitions:<sup>[2](#f_ty)</sup>\n\n|deconstruct type|C99 type            |Python format character|\"Standard\" width (bytes)<sup>[1](#f_st)</sup>|Resolves to Python type|\n|----------------|--------------------|-----------------------|------------------------|--------------------------------------------|\n|`char`          |`char`              |`c`                    |1                       |`bytes` of length 1                         |\n|`schar`         |`signed char`       |`b`                    |1                       |`int`                                       |\n|`uchar`         |`unsigned char`     |`B`                    |1                       |`int`                                       |\n|`short`         |`short`             |`h`                    |2                       |`int`                                       |\n|`ushort`        |`unsigned short`    |`H`                    |2                       |`int`                                       |\n|`int`           |`int`               |`i`                    |2                       |`int`                                       |\n|`uint`          |`unsigned int`      |`I`                    |2                       |`int`                                       |\n|`long`          |`long`              |`l`                    |4                       |`int`                                       |\n|`ulong`         |`unsigned long`     |`L`                    |4                       |`int`                                       |\n|`longlong`      |`long long`         |`q`                    |8                       |`int`                                       |\n|`ulonglong`     |`unsigned long long`|`Q`                    |8                       |`int`                                       |\n|`bool`          |`bool` (`_Bool`)    |`?`                    |1                       |`bool`                                      |\n|`float`         |`float`             |`f`                    |4                       |`float`                                     |\n|`double`        |`double`            |`d`                    |8                       |`float`                                     |\n|`int8`          |`int8_t`            |`b`*                   |1                       |`int`                                       |\n|`uint8`         |`uint8_t`           |`B`*                   |1                       |`int`                                       |\n|`int16`         |`int16_t`           |`h`*                   |2                       |`int`                                       |\n|`uint16`        |`uint16_t`          |`H`*                   |2                       |`int`                                       |\n|`int32`         |`int32_t`           |`l`*                   |4                       |`int`                                       |\n|`uint32`        |`uint32_t`          |`L`*                   |4                       |`int`                                       |\n|`int64`         |`int64_t`           |`q`*                   |8                       |`int`                                       |\n|`uint64`        |`uint64_t`          |`Q`*                   |8                       |`int`                                       |\n|`ptr`           |`void*`/`intptr_t`/`uintptr_t`|`P`          |N/A**                   |`int`                                       |\n|`size`          |`size_t`            |`n`                    |N/A**                   |`int`                                       |\n|`ssize`         |`ssize_t`           |`N`                    |N/A**                   |`int`                                       |\n\n<sup>\n* format character with <code>__type_width__ = TypeWidth.STANDARD</code> - platform specific otherwise.<br>\n** only available with <code>__type_width__ = TypeWidth.NATIVE</code>.\n</sup>\n\n### Arrays\nAs mentioned earlier, all the types above support a `type[length]` syntax to define arrays. Multidimensional arrays work as you would expect, with `int[2][2]` declaring a 2-D array of type `int` and total length 4. When a Struct is used to unpack a buffer, each array will resolve to a tuple (or in the case of a multidimensional array, a nested tuple) of their equivalent Python types, as documented in the table above. The only exception to this is `char`, an array of which will be automatically concatenated to a single `bytes` object (if this behaviour is undesirable, use `schar` or `uchar` instead).\n\n---\n\n<b id=\"f_st\">1.</b> Python's struct has the concept of \"standard\" type sizes. This is somewhat confusing coming from C as its standards go to some length not to define a standard ABI. However, as this terminology is so fundamental to the documentation of Python's struct it is replicated here for simplicity's sake. These sizes correspond with the *minimum* sizes [implied](https://en.wikipedia.org/wiki/C_data_types#Basic_types) for C's types.\t\n\n<b id=\"f_ty\">2.</b> Because some of these conflict with Python's primitives, it is not recommended to `import * from deconstruct` as this will severely pollute your namespace (in fact this is a bad idea in general). I like to `import deconstruct as c` as shown above.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/biqqles/deconstruct", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "deconstruct", "package_url": "https://pypi.org/project/deconstruct/", "platform": "", "project_url": "https://pypi.org/project/deconstruct/", "project_urls": {"Homepage": "https://github.com/biqqles/deconstruct"}, "release_url": "https://pypi.org/project/deconstruct/0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Pythonic C-style structs for parsing binary data", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>deconstruct</h1>\n<p><strong>deconstruct</strong> provides a Pythonic analogue of C's <code>struct</code>, primarily for the purpose of interpreting (i.e. <em>deconstructing</em>) contiguous binary data.</p>\n<p>Internally, deconstruct uses Python's <a href=\"https://docs.python.org/3/library/struct.html\" rel=\"nofollow\">struct module</a> and can be considered an abstraction of sorts. struct (the module) can be frustrating to use: its format strings appear arcane and furthermore separate the description of the data from its representation, a definite strength of C's struct.</p>\n<p>In contrast, deconstruct allows structs to be defined and used using a syntax that is Pythonic while maintaining close correspondence to C.</p>\n<h3>Usage</h3>\n<p>With deconstruct, the struct definition (adapted from <a href=\"https://github.com/torvalds/linux/blob/master/include/uapi/linux/input.h\" rel=\"nofollow\">input.h</a>):</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span> <span class=\"n\">input_event</span> <span class=\"p\">{</span>  \n    <span class=\"kt\">uint64_t</span> <span class=\"n\">time</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n    <span class=\"kt\">int16_t</span> <span class=\"n\">type</span><span class=\"p\">;</span>\n    <span class=\"kt\">int16_t</span> <span class=\"n\">code</span><span class=\"p\">;</span>\n    <span class=\"kt\">int32_t</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>\n<p>can be represented as:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">deconstruct</span> <span class=\"k\">as</span> <span class=\"nn\">c</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">InputEvent</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">uint64</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">int16</span>\n    <span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">int16</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">int32</span>\n</pre>\n<p>This definition can be used to interpret and then access binary data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'Some  arbitrary  buffer!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">InputEvent</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">code</span>\n<span class=\"mi\">26229</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">time</span>\n<span class=\"p\">(</span><span class=\"mi\">8241904116577431379</span><span class=\"p\">,</span> <span class=\"mi\">2340027244253309282</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n<span class=\"n\">struct</span> <span class=\"n\">InputEvent</span> <span class=\"p\">[</span><span class=\"n\">ByteOrder</span><span class=\"o\">.</span><span class=\"n\">NATIVE</span><span class=\"p\">,</span> <span class=\"n\">TypeWidth</span><span class=\"o\">.</span><span class=\"n\">STANDARD</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">uint64</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">8241904116577431379</span><span class=\"p\">,</span> <span class=\"mi\">2340027244253309282</span><span class=\"p\">)</span>\n    <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">int16</span> <span class=\"o\">=</span> <span class=\"mi\">25120</span>\n    <span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"n\">int16</span> <span class=\"o\">=</span> <span class=\"mi\">26229</span>\n    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">int32</span> <span class=\"o\">=</span> <span class=\"mi\">561145190</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Of course, in reality the buffer passed in is more likely to come from something more useful, like a file. Notice that fixed-size, n-dimensional arrays can be specified using the syntax <code>type[length]</code>, a further improvement on Python's struct.</p>\n<h3>Installation</h3>\n<p>deconstruct is now on PyPI:</p>\n<pre>pip install deconstruct\n</pre>\n<p>Alternatively you can install straight from this repository:</p>\n<pre>pip install https://github.com/biqqles/deconstruct/archive/master.zip\n</pre>\n<p>Built wheels are also available under <a href=\"https://github.com/biqqles/deconstruct/releases\" rel=\"nofollow\">Releases</a>, as is a changelog. The latest release is version 0.5.</p>\n<p>deconstruct has no dependencies but requires Python &gt;= 3.6 as it makes use of the class annotation syntax added in that release (see <a href=\"https://www.python.org/dev/peps/pep-0526/\" rel=\"nofollow\">PEP 526</a>).</p>\n<h2>API listing</h2>\n<h3>Struct(buffer: bytes)</h3>\n<p>Subclass this to define your own structs. Subclasses should only declare fields of C types defined in this package.</p>\n<p>When you instantiate your Struct with a <a href=\"https://docs.python.org/3/glossary.html#term-bytes-like-object\" rel=\"nofollow\">bytes-like object</a>, deconstruct creates a format string and uses it to unpack that buffer. In the instance, C types will be replaced with their equivalent Python types for use (e.g. <code>bytes</code> for <code>char</code>, <code>int</code> for <code>schar</code> and <code>float</code> for <code>double</code>). All types available for use in struct field definitions and their details are documented in the table <a href=\"#c-types\" rel=\"nofollow\">below</a>.</p>\n<h4>Attributes</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>__byte_order__</code></td>\n<td><code>ByteOrder</code></td>\n<td>Set this in your subclass definition to define the byte order used when unpacking the struct. One of:<ul><li><code>ByteOrder.NATIVE</code> (default value)</li><li><code>ByteOrder.BIG_ENDIAN</code></li><li><code>ByteOrder.LITTLE_ENDIAN</code></li></ul></td>\n</tr>\n<tr>\n<td><code>__type_width__</code></td>\n<td><code>TypeWidth</code></td>\n<td>Set this in your subclass definition to define the type width and padding used for the struct. One of:<ul><li><code>TypeWidth.NATIVE</code></li><li><code>TypeWidth.STANDARD</code> (default value)</li></ul>When <code>TypeWidth.NATIVE</code> is set, the struct will use native type widths and alignment. When <code>TypeWidth.STANDARD</code> is used, the struct will use Python's struct's \"standard\" widths<sup><a href=\"#f_st\" rel=\"nofollow\">1</a></sup> and no padding.</td>\n</tr></tbody></table>\n<p>Note that <code>TypeWidth.NATIVE</code> can only be used with <code>ByteOrder.NATIVE</code>. This is a limitation of Python's struct.</p>\n<h4>Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>format_string</code></td>\n<td><code>str</code></td>\n<td>The struct.py-compatible format string for this struct</td>\n</tr>\n<tr>\n<td><code>sizeof</code></td>\n<td><code>int</code></td>\n<td>The total size in bytes of the struct. Equivalent to C's <code>sizeof</code></td>\n</tr></tbody></table>\n<h4>Methods</h4>\n<table>\n<thead>\n<tr>\n<th>Signature</th>\n<th>Return type</th>\n<th>Description</th>\n</tr>\n</thead></table>\n<pre><code>|`to_bytes()`    |`bytes`    |Returns the in-memory (\"packed\") representation of this struct instance|\n</code></pre>\n<p>You can also <code>print</code> Struct instances for easier debugging and compare them using the <code>==</code> operator.</p>\n<h3>C types</h3>\n<p>deconstruct defines the following special types for use in Struct definitions:<sup><a href=\"#f_ty\" rel=\"nofollow\">2</a></sup></p>\n<table>\n<thead>\n<tr>\n<th>deconstruct type</th>\n<th>C99 type</th>\n<th>Python format character</th>\n<th>\"Standard\" width (bytes)<sup><a href=\"#f_st\" rel=\"nofollow\">1</a></sup></th>\n<th>Resolves to Python type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>char</code></td>\n<td><code>char</code></td>\n<td><code>c</code></td>\n<td>1</td>\n<td><code>bytes</code> of length 1</td>\n</tr>\n<tr>\n<td><code>schar</code></td>\n<td><code>signed char</code></td>\n<td><code>b</code></td>\n<td>1</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uchar</code></td>\n<td><code>unsigned char</code></td>\n<td><code>B</code></td>\n<td>1</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><code>short</code></td>\n<td><code>h</code></td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>ushort</code></td>\n<td><code>unsigned short</code></td>\n<td><code>H</code></td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><code>int</code></td>\n<td><code>i</code></td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uint</code></td>\n<td><code>unsigned int</code></td>\n<td><code>I</code></td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><code>long</code></td>\n<td><code>l</code></td>\n<td>4</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>ulong</code></td>\n<td><code>unsigned long</code></td>\n<td><code>L</code></td>\n<td>4</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>longlong</code></td>\n<td><code>long long</code></td>\n<td><code>q</code></td>\n<td>8</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>ulonglong</code></td>\n<td><code>unsigned long long</code></td>\n<td><code>Q</code></td>\n<td>8</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td><code>bool</code> (<code>_Bool</code>)</td>\n<td><code>?</code></td>\n<td>1</td>\n<td><code>bool</code></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><code>float</code></td>\n<td><code>f</code></td>\n<td>4</td>\n<td><code>float</code></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><code>double</code></td>\n<td><code>d</code></td>\n<td>8</td>\n<td><code>float</code></td>\n</tr>\n<tr>\n<td><code>int8</code></td>\n<td><code>int8_t</code></td>\n<td><code>b</code>*</td>\n<td>1</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uint8</code></td>\n<td><code>uint8_t</code></td>\n<td><code>B</code>*</td>\n<td>1</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>int16</code></td>\n<td><code>int16_t</code></td>\n<td><code>h</code>*</td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uint16</code></td>\n<td><code>uint16_t</code></td>\n<td><code>H</code>*</td>\n<td>2</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>int32</code></td>\n<td><code>int32_t</code></td>\n<td><code>l</code>*</td>\n<td>4</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uint32</code></td>\n<td><code>uint32_t</code></td>\n<td><code>L</code>*</td>\n<td>4</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>int64</code></td>\n<td><code>int64_t</code></td>\n<td><code>q</code>*</td>\n<td>8</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>uint64</code></td>\n<td><code>uint64_t</code></td>\n<td><code>Q</code>*</td>\n<td>8</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>ptr</code></td>\n<td><code>void*</code>/<code>intptr_t</code>/<code>uintptr_t</code></td>\n<td><code>P</code></td>\n<td>N/A**</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td><code>size_t</code></td>\n<td><code>n</code></td>\n<td>N/A**</td>\n<td><code>int</code></td>\n</tr>\n<tr>\n<td><code>ssize</code></td>\n<td><code>ssize_t</code></td>\n<td><code>N</code></td>\n<td>N/A**</td>\n<td><code>int</code></td>\n</tr></tbody></table>\n<sup>\n* format character with <code>__type_width__ = TypeWidth.STANDARD</code> - platform specific otherwise.<br>\n** only available with <code>__type_width__ = TypeWidth.NATIVE</code>.\n</sup>\n<h3>Arrays</h3>\n<p>As mentioned earlier, all the types above support a <code>type[length]</code> syntax to define arrays. Multidimensional arrays work as you would expect, with <code>int[2][2]</code> declaring a 2-D array of type <code>int</code> and total length 4. When a Struct is used to unpack a buffer, each array will resolve to a tuple (or in the case of a multidimensional array, a nested tuple) of their equivalent Python types, as documented in the table above. The only exception to this is <code>char</code>, an array of which will be automatically concatenated to a single <code>bytes</code> object (if this behaviour is undesirable, use <code>schar</code> or <code>uchar</code> instead).</p>\n<hr>\n<p><b id=\"f_st\">1.</b> Python's struct has the concept of \"standard\" type sizes. This is somewhat confusing coming from C as its standards go to some length not to define a standard ABI. However, as this terminology is so fundamental to the documentation of Python's struct it is replicated here for simplicity's sake. These sizes correspond with the <em>minimum</em> sizes <a href=\"https://en.wikipedia.org/wiki/C_data_types#Basic_types\" rel=\"nofollow\">implied</a> for C's types.</p>\n<p><b id=\"f_ty\">2.</b> Because some of these conflict with Python's primitives, it is not recommended to <code>import * from deconstruct</code> as this will severely pollute your namespace (in fact this is a bad idea in general). I like to <code>import deconstruct as c</code> as shown above.</p>\n\n          </div>"}, "last_serial": 6989715, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "1b363b038b08c46b5eb74848a1ac86f1", "sha256": "7c10159ad0cbb7fee57cfe12033b3100081d3b9e1b807e101e865d7d1a400324"}, "downloads": -1, "filename": "deconstruct-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1b363b038b08c46b5eb74848a1ac86f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17650, "upload_time": "2020-01-09T21:17:11", "upload_time_iso_8601": "2020-01-09T21:17:11.191692Z", "url": "https://files.pythonhosted.org/packages/2a/81/e9930b222d4aa04796ba9b91dcce30ac91ab9e43ff77380ac01e1db39555/deconstruct-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d20f70ca5a245f03b91bbb2f08f3dca", "sha256": "6db8c75735568099635c805f28e02e411b72d3007df0f34b70d0a06c14631eb9"}, "downloads": -1, "filename": "deconstruct-0.3.tar.gz", "has_sig": false, "md5_digest": "4d20f70ca5a245f03b91bbb2f08f3dca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7194, "upload_time": "2020-01-09T21:17:13", "upload_time_iso_8601": "2020-01-09T21:17:13.946872Z", "url": "https://files.pythonhosted.org/packages/3d/9f/3732556ee1c29d3651bb850e1a6a99b8fb8426565938f8a9a1d9ec74ac97/deconstruct-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "504ab2bbf175efadc9d0bb47f2b5035d", "sha256": "e02310463b1429dfeb06de14d2b3c09ab460e7e9bd0195084a2833cc0eaf70ca"}, "downloads": -1, "filename": "deconstruct-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "504ab2bbf175efadc9d0bb47f2b5035d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17961, "upload_time": "2020-01-15T18:58:22", "upload_time_iso_8601": "2020-01-15T18:58:22.319660Z", "url": "https://files.pythonhosted.org/packages/06/a7/902ee384e996ff8a2cb1245ad94f48cabb052d24891bfe0d9a2cba9fa6af/deconstruct-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7f17573db286a4c859c5f57a19d76a", "sha256": "0d1cd388c9ad2c5d1fed97926f90025df927effb515b0c4e8e8b0758fd7ff2ff"}, "downloads": -1, "filename": "deconstruct-0.4.tar.gz", "has_sig": false, "md5_digest": "2f7f17573db286a4c859c5f57a19d76a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7478, "upload_time": "2020-01-15T18:58:24", "upload_time_iso_8601": "2020-01-15T18:58:24.414983Z", "url": "https://files.pythonhosted.org/packages/d6/0e/6306ee0c4c4767cc823eb1332252b7b6c08ab292297af5357238ad25e59e/deconstruct-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "03c7dbfbf6433e02648d80a98b9d336b", "sha256": "f32f7551cfe3ca0a86d86db60d85eadd94ef6e3e02ee93f31167b052443ade13"}, "downloads": -1, "filename": "deconstruct-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "03c7dbfbf6433e02648d80a98b9d336b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14744, "upload_time": "2020-04-09T22:54:59", "upload_time_iso_8601": "2020-04-09T22:54:59.141786Z", "url": "https://files.pythonhosted.org/packages/f3/97/165caa43875c57ad2852b72694fbc482101e7bb324d60c8de105c7d1c117/deconstruct-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af220bbdd3ff282a0a7665091be7e451", "sha256": "56125706e182a667d81123fc3922ff1fbbb1449c295229f40ffcd5452d2bcdbc"}, "downloads": -1, "filename": "deconstruct-0.5.tar.gz", "has_sig": false, "md5_digest": "af220bbdd3ff282a0a7665091be7e451", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7857, "upload_time": "2020-04-09T22:55:00", "upload_time_iso_8601": "2020-04-09T22:55:00.475131Z", "url": "https://files.pythonhosted.org/packages/f9/23/9e56d7d9006dc4fbaa6aa02e2e14592759a531cc2d9a72ac041195235f07/deconstruct-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03c7dbfbf6433e02648d80a98b9d336b", "sha256": "f32f7551cfe3ca0a86d86db60d85eadd94ef6e3e02ee93f31167b052443ade13"}, "downloads": -1, "filename": "deconstruct-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "03c7dbfbf6433e02648d80a98b9d336b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14744, "upload_time": "2020-04-09T22:54:59", "upload_time_iso_8601": "2020-04-09T22:54:59.141786Z", "url": "https://files.pythonhosted.org/packages/f3/97/165caa43875c57ad2852b72694fbc482101e7bb324d60c8de105c7d1c117/deconstruct-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af220bbdd3ff282a0a7665091be7e451", "sha256": "56125706e182a667d81123fc3922ff1fbbb1449c295229f40ffcd5452d2bcdbc"}, "downloads": -1, "filename": "deconstruct-0.5.tar.gz", "has_sig": false, "md5_digest": "af220bbdd3ff282a0a7665091be7e451", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7857, "upload_time": "2020-04-09T22:55:00", "upload_time_iso_8601": "2020-04-09T22:55:00.475131Z", "url": "https://files.pythonhosted.org/packages/f9/23/9e56d7d9006dc4fbaa6aa02e2e14592759a531cc2d9a72ac041195235f07/deconstruct-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:34 2020"}