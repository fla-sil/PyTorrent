{"info": {"author": "Milan Straka", "author_email": "straka@ufal.mff.cuni.cz", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: C++", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "ufal.nametag\n============\n\nThe ``ufal.nametag`` is a Python binding to NameTag library <http://ufal.mff.cuni.cz/nametag>.\n\nThe bindings is a straightforward conversion of the ``C++`` bindings API.\nIn Python 2, strings can be both ``unicode`` and UTF-8 encoded ``str``, and the\nlibrary always produces ``unicode``. In Python 3, strings must be only ``str``.\n\n\nWrapped C++ API\n---------------\n\nThe C++ API being wrapped follows. For a API reference of the original\nC++ API, see <http://ufal.mff.cuni.cz/nametag/api-reference>.\n\n::\n\n  Helper Structures\n  -----------------\n\n    typedef vector<string> Forms;\n\n    struct TokenRange {\n      size_t start;\n      size_t length;\n    };\n    typedef vector<TokenRange> TokenRanges;\n\n    struct NamedEntity {\n      size_t start;\n      size_t length;\n      string type;\n\n      NamedEntity();\n      NamedEntity(size_t start, size_t length, const string& type);\n    };\n    typedef vector<NamedEntity> NamedEntities;\n\n\n  Main Classes\n  ------------\n\n    class Version {\n     public:\n      unsigned major;\n      unsigned minor;\n      unsigned patch;\n      string prerelease;\n\n      static Version current();\n    };\n\n    class Tokenizer {\n     public:\n      virtual void setText(const char* text);\n      virtual bool nextSentence(Forms* forms, TokenRanges* tokens);\n\n      static Tokenizer* newVerticalTokenizer();\n    };\n\n    class Ner {\n      static ner* load(const char* fname);\n\n      virtual void recognize(Forms& forms, NamedEntities& entities) const;\n\n      virtual Tokenizer* newTokenizer() const;\n    };\n\n\nExamples\n========\n\nrun_ner\n-------\n\nSimple example performing named entity recognition::\n\n  import sys\n\n  from ufal.nametag import *\n\n  def encode_entities(text):\n    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;')\n\n  def sort_entities(entities):\n    return sorted(entities, key=lambda entity: (entity.start, -entity.length))\n\n  # In Python2, wrap sys.stdin and sys.stdout to work with unicode.\n  if sys.version_info[0] < 3:\n    import codecs\n    import locale\n    encoding = locale.getpreferredencoding()\n    sys.stdin = codecs.getreader(encoding)(sys.stdin)\n    sys.stdout = codecs.getwriter(encoding)(sys.stdout)\n\n  if len(sys.argv) == 1:\n    sys.stderr.write('Usage: %s recognizer_model\\n' % sys.argv[0])\n    sys.exit(1)\n\n  sys.stderr.write('Loading ner: ')\n  ner = Ner.load(sys.argv[1])\n  if not ner:\n    sys.stderr.write(\"Cannot load recognizer from file '%s'\\n\" % sys.argv[1])\n    sys.exit(1)\n  sys.stderr.write('done\\n')\n\n  forms = Forms()\n  tokens = TokenRanges()\n  entities = NamedEntities()\n  sortedEntities = []\n  openEntities = []\n  tokenizer = ner.newTokenizer()\n  if tokenizer is None:\n    sys.stderr.write(\"No tokenizer is defined for the supplied model!\")\n    sys.exit(1)\n\n  not_eof = True\n  while not_eof:\n    text = ''\n\n    # Read block\n    while True:\n      line = sys.stdin.readline()\n      not_eof = bool(line)\n      if not not_eof: break\n      line = line.rstrip('\\r\\n')\n      text += line\n      text += '\\n';\n      if not line: break\n\n    # Tokenize and recognize\n    tokenizer.setText(text)\n    t = 0\n    while tokenizer.nextSentence(forms, tokens):\n      ner.recognize(forms, entities)\n      sortedEntities = sort_entities(entities)\n\n      # Write entities\n      e = 0\n      for i in range(len(tokens)):\n        sys.stdout.write(encode_entities(text[t:tokens[i].start]))\n        if (i == 0): sys.stdout.write(\"<sentence>\")\n\n        # Open entities starting at current token\n        while (e < len(sortedEntities) and sortedEntities[e].start == i):\n          sys.stdout.write('<ne type=\"%s\">' % encode_entities(sortedEntities[e].type))\n          openEntities.append(sortedEntities[e].start + sortedEntities[e].length - 1)\n          e = e + 1\n\n        # The token itself\n        sys.stdout.write('<token>%s</token>' % encode_entities(text[tokens[i].start : tokens[i].start + tokens[i].length]))\n\n        # Close entities ending after current token\n        while openEntities and openEntities[-1] == i:\n          sys.stdout.write('</ne>')\n          openEntities.pop()\n        if (i + 1 == len(tokens)): sys.stdout.write(\"</sentence>\")\n        t = tokens[i].start + tokens[i].length\n    # Write rest of the text\n    sys.stdout.write(encode_entities(text[t:]))\n\n\nAUTHORS\n=======\n\nMilan Straka <straka@ufal.mff.cuni.cz>\n\nJana Strakov\u00e1 <strakova@ufal.mff.cuni.cz>\n\n\nCOPYRIGHT AND LICENCE\n=====================\n\nCopyright 2016 Institute of Formal and Applied Linguistics, Faculty of\nMathematics and Physics, Charles University in Prague, Czech Republic.\n\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://ufal.mff.cuni.cz/nametag", "keywords": null, "license": "MPL 2.0", "maintainer": null, "maintainer_email": null, "name": "ufal.nametag", "package_url": "https://pypi.org/project/ufal.nametag/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ufal.nametag/", "project_urls": {"Homepage": "http://ufal.mff.cuni.cz/nametag"}, "release_url": "https://pypi.org/project/ufal.nametag/1.1.2.1/", "requires_dist": null, "requires_python": null, "summary": "Bindings to NameTag library", "version": "1.1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ufal-nametag\">\n<h2>ufal.nametag</h2>\n<p>The <tt>ufal.nametag</tt> is a Python binding to NameTag library &lt;<a href=\"http://ufal.mff.cuni.cz/nametag\" rel=\"nofollow\">http://ufal.mff.cuni.cz/nametag</a>&gt;.</p>\n<p>The bindings is a straightforward conversion of the <tt>C++</tt> bindings API.\nIn Python 2, strings can be both <tt>unicode</tt> and UTF-8 encoded <tt>str</tt>, and the\nlibrary always produces <tt>unicode</tt>. In Python 3, strings must be only <tt>str</tt>.</p>\n<div id=\"wrapped-c-api\">\n<h3>Wrapped C++ API</h3>\n<p>The C++ API being wrapped follows. For a API reference of the original\nC++ API, see &lt;<a href=\"http://ufal.mff.cuni.cz/nametag/api-reference\" rel=\"nofollow\">http://ufal.mff.cuni.cz/nametag/api-reference</a>&gt;.</p>\n<pre>Helper Structures\n-----------------\n\n  typedef vector&lt;string&gt; Forms;\n\n  struct TokenRange {\n    size_t start;\n    size_t length;\n  };\n  typedef vector&lt;TokenRange&gt; TokenRanges;\n\n  struct NamedEntity {\n    size_t start;\n    size_t length;\n    string type;\n\n    NamedEntity();\n    NamedEntity(size_t start, size_t length, const string&amp; type);\n  };\n  typedef vector&lt;NamedEntity&gt; NamedEntities;\n\n\nMain Classes\n------------\n\n  class Version {\n   public:\n    unsigned major;\n    unsigned minor;\n    unsigned patch;\n    string prerelease;\n\n    static Version current();\n  };\n\n  class Tokenizer {\n   public:\n    virtual void setText(const char* text);\n    virtual bool nextSentence(Forms* forms, TokenRanges* tokens);\n\n    static Tokenizer* newVerticalTokenizer();\n  };\n\n  class Ner {\n    static ner* load(const char* fname);\n\n    virtual void recognize(Forms&amp; forms, NamedEntities&amp; entities) const;\n\n    virtual Tokenizer* newTokenizer() const;\n  };\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<h2 id=\"run-ner\"><span class=\"section-subtitle\">run_ner</span></h2>\n<p>Simple example performing named entity recognition:</p>\n<pre>import sys\n\nfrom ufal.nametag import *\n\ndef encode_entities(text):\n  return text.replace('&amp;', '&amp;amp;').replace('&lt;', '&amp;lt;').replace('&gt;', '&amp;gt;').replace('\"', '&amp;quot;')\n\ndef sort_entities(entities):\n  return sorted(entities, key=lambda entity: (entity.start, -entity.length))\n\n# In Python2, wrap sys.stdin and sys.stdout to work with unicode.\nif sys.version_info[0] &lt; 3:\n  import codecs\n  import locale\n  encoding = locale.getpreferredencoding()\n  sys.stdin = codecs.getreader(encoding)(sys.stdin)\n  sys.stdout = codecs.getwriter(encoding)(sys.stdout)\n\nif len(sys.argv) == 1:\n  sys.stderr.write('Usage: %s recognizer_model\\n' % sys.argv[0])\n  sys.exit(1)\n\nsys.stderr.write('Loading ner: ')\nner = Ner.load(sys.argv[1])\nif not ner:\n  sys.stderr.write(\"Cannot load recognizer from file '%s'\\n\" % sys.argv[1])\n  sys.exit(1)\nsys.stderr.write('done\\n')\n\nforms = Forms()\ntokens = TokenRanges()\nentities = NamedEntities()\nsortedEntities = []\nopenEntities = []\ntokenizer = ner.newTokenizer()\nif tokenizer is None:\n  sys.stderr.write(\"No tokenizer is defined for the supplied model!\")\n  sys.exit(1)\n\nnot_eof = True\nwhile not_eof:\n  text = ''\n\n  # Read block\n  while True:\n    line = sys.stdin.readline()\n    not_eof = bool(line)\n    if not not_eof: break\n    line = line.rstrip('\\r\\n')\n    text += line\n    text += '\\n';\n    if not line: break\n\n  # Tokenize and recognize\n  tokenizer.setText(text)\n  t = 0\n  while tokenizer.nextSentence(forms, tokens):\n    ner.recognize(forms, entities)\n    sortedEntities = sort_entities(entities)\n\n    # Write entities\n    e = 0\n    for i in range(len(tokens)):\n      sys.stdout.write(encode_entities(text[t:tokens[i].start]))\n      if (i == 0): sys.stdout.write(\"&lt;sentence&gt;\")\n\n      # Open entities starting at current token\n      while (e &lt; len(sortedEntities) and sortedEntities[e].start == i):\n        sys.stdout.write('&lt;ne type=\"%s\"&gt;' % encode_entities(sortedEntities[e].type))\n        openEntities.append(sortedEntities[e].start + sortedEntities[e].length - 1)\n        e = e + 1\n\n      # The token itself\n      sys.stdout.write('&lt;token&gt;%s&lt;/token&gt;' % encode_entities(text[tokens[i].start : tokens[i].start + tokens[i].length]))\n\n      # Close entities ending after current token\n      while openEntities and openEntities[-1] == i:\n        sys.stdout.write('&lt;/ne&gt;')\n        openEntities.pop()\n      if (i + 1 == len(tokens)): sys.stdout.write(\"&lt;/sentence&gt;\")\n      t = tokens[i].start + tokens[i].length\n  # Write rest of the text\n  sys.stdout.write(encode_entities(text[t:]))\n</pre>\n</div>\n<div id=\"authors\">\n<h2>AUTHORS</h2>\n<p>Milan Straka &lt;<a href=\"mailto:straka%40ufal.mff.cuni.cz\">straka<span>@</span>ufal<span>.</span>mff<span>.</span>cuni<span>.</span>cz</a>&gt;</p>\n<p>Jana Strakov\u00e1 &lt;<a href=\"mailto:strakova%40ufal.mff.cuni.cz\">strakova<span>@</span>ufal<span>.</span>mff<span>.</span>cuni<span>.</span>cz</a>&gt;</p>\n</div>\n<div id=\"copyright-and-licence\">\n<h2>COPYRIGHT AND LICENCE</h2>\n<p>Copyright 2016 Institute of Formal and Applied Linguistics, Faculty of\nMathematics and Physics, Charles University in Prague, Czech Republic.</p>\n<p>This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\" rel=\"nofollow\">http://mozilla.org/MPL/2.0/</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2991934, "releases": {"1.0.0.1": [{"comment_text": "", "digests": {"md5": "adb32c31eb405bc4c46ed5ef5ee6aeb3", "sha256": "0ab59f6cd96d341376b9badf3a7e5ce36c2e84fd99eab8a4c5bce1fb25f75606"}, "downloads": -1, "filename": "ufal.nametag-1.0.0.1.tar.gz", "has_sig": false, "md5_digest": "adb32c31eb405bc4c46ed5ef5ee6aeb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256344, "upload_time": "2014-04-11T11:30:39", "upload_time_iso_8601": "2014-04-11T11:30:39.560697Z", "url": "https://files.pythonhosted.org/packages/ef/24/8c0521b166d09732ee34566f1c9d7da19360e33f34197239d8d6be0faeb3/ufal.nametag-1.0.0.1.tar.gz", "yanked": false}], "1.1.1.2": [{"comment_text": "", "digests": {"md5": "c28efefb2a6ad01c4c580c5f5ddbca8e", "sha256": "f0a575717afed2f326e79bfc155aff5c1f8a6ef39132a303cefcf898910d4830"}, "downloads": -1, "filename": "ufal.nametag-1.1.1.2.tar.gz", "has_sig": false, "md5_digest": "c28efefb2a6ad01c4c580c5f5ddbca8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183626, "upload_time": "2016-05-05T19:21:09", "upload_time_iso_8601": "2016-05-05T19:21:09.098899Z", "url": "https://files.pythonhosted.org/packages/6a/b7/9dbf07a4df913b96979fb9b7da8ab8bbf1fbcd9e961e68d787b5b695cb09/ufal.nametag-1.1.1.2.tar.gz", "yanked": false}], "1.1.2.1": [{"comment_text": "", "digests": {"md5": "839f35e866e164f46130d493beed5b52", "sha256": "0eea18c2166c4dcdb8b1d8c6af45de33676fe98113f377ff49254c1daa2ad296"}, "downloads": -1, "filename": "ufal.nametag-1.1.2.1.tar.gz", "has_sig": false, "md5_digest": "839f35e866e164f46130d493beed5b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 184743, "upload_time": "2017-07-01T06:10:38", "upload_time_iso_8601": "2017-07-01T06:10:38.209723Z", "url": "https://files.pythonhosted.org/packages/da/f9/5a8e66b3dec64cd96f2c034b02a2847ae16591c12a405d28165b71cc8493/ufal.nametag-1.1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "839f35e866e164f46130d493beed5b52", "sha256": "0eea18c2166c4dcdb8b1d8c6af45de33676fe98113f377ff49254c1daa2ad296"}, "downloads": -1, "filename": "ufal.nametag-1.1.2.1.tar.gz", "has_sig": false, "md5_digest": "839f35e866e164f46130d493beed5b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 184743, "upload_time": "2017-07-01T06:10:38", "upload_time_iso_8601": "2017-07-01T06:10:38.209723Z", "url": "https://files.pythonhosted.org/packages/da/f9/5a8e66b3dec64cd96f2c034b02a2847ae16591c12a405d28165b71cc8493/ufal.nametag-1.1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:45 2020"}