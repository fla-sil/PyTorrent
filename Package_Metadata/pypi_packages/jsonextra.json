{"info": {"author": "Denis Sazonov", "author_email": "den@saz.lt", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "jsonextra\n=====\n[![Build Status](https://travis-ci.org/den4uk/jsonextra.svg?branch=master)](https://travis-ci.org/den4uk/jsonextra)\n[![Codecov](https://codecov.io/gh/den4uk/jsonextra/branch/master/graph/badge.svg)](https://codecov.io/gh/den4uk/jsonextra)\n[![PyPI Version](http://img.shields.io/pypi/v/jsonextra.svg)](https://pypi.python.org/pypi/jsonextra)\n[![License](https://img.shields.io/github/license/den4uk/jsonextra.svg)](https://pypi.python.org/pypi/jsonextra)\n\n_same as `json` library, but with extra support for `bytes`, `uuid` and `datetime` data classes_\n\n## Installation\n\n```\n$ pip install jsonextra\n```\n\n\n## Usage\n\nUse just like `json` as normal once imported, but with addition of extra data classes.\n\n```python\nimport uuid, datetime  # for creation of `my_data` object\nimport jsonextra\n\nmy_data = {'id': uuid.uuid4(), 'created': datetime.date.today()}\n# my_data --> {'id': uuid.UUID('5f7660c5-88ea-46b6-93e2-860d5b7a0271'), 'created': datetime.date(2019, 6, 16)}\n\n# Serializes the key values to stringified versions\nmy_json = jsonextra.dumps(my_data)\n# my_json --> '{\"id\": \"5f7660c5-88ea-46b6-93e2-860d5b7a0271\", \"created\": \"2019-06-16\"}'\n\n# Deserializes the object and confirms the output matches `my_data`\nassert jsonextra.loads(my_json) == my_data  # True\n```\n\n\n##### `.dump(obj, fp, **kwargs)` & `.dumps(obj, **kwargs)`\nWill serialize extra data classes into their string (`__str__`) or special representations (_eg: `.isoformat`, etc._).\n\n\n##### `.load(fp, **kwargs)` & `.loads(s, **kwargs)`\nWill deserialize any stings, which match patterns of extra supported data classes.\nFor example, if something looks like a _uuid_ - it will be converted to `uuid.UUID`.\nIf this behaviour is undesired, please use the built-in `json.loads` method instead of `jsonextra.loads`.\n\n\n## Supported extra data classes\n\n| Python Data Class | Python Object (deserialized) | JSON Object (serialized) |\n|-------------------|------------------------------|--------------------------|\n| `datetime.date` | `datetime.date(2019, 1, 1)` | `\"2019-01-01\"` |\n| `datetime.time` | `datetime.time(23, 59, 11)` | `\"23:59:11\"`  |\n| `datetime.datetime` | `datetime.datetime(2019, 1, 1, 23, 59, 11)` | `\"2019-01-01T23:59:11\"` |\n| `uuid.UUID` | `uuid.UUID('5f7660c5-88ea-46b6-93e2-860d5b7a0271')` | `\"5f7660c5-88ea-46b6-93e2-860d5b7a0271\"` |\n| `bytes` | `b'\\xd6aO\\x1d\\xd71Y\\x05'` | `\"base64:1mFPHdcxWQU=\"` |\n\nMore examples of serialized/deserialized values can be found in tests ;p\n\n\n## Why?\n\n_Why would you want to use this library?_\n\n- If you work with a model-less data structures, and its data types expend beyond the JSON standard supports.\n- If your model schemas are too dynamic to be able to use model-based serializers, and requires to store more data types.\n- If your data structure does not fit with the JSON standard, and it needs expanding to support one or more data types.\n\n\n## How it works\n\nAn extra supported python object is dumped to a _string_ value.\nWhen loading a serialized json object, any values matching the string supported data class, will be converted to their expected data class instances.\n> _If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck_.\n\n\n## Contributions\n\nContibutions are welcome, please submit your pull requests into `dev` branch for a review.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/den4uk/jsonextra", "keywords": "json,uuid,datetime,date,bytes", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "jsonextra", "package_url": "https://pypi.org/project/jsonextra/", "platform": "", "project_url": "https://pypi.org/project/jsonextra/", "project_urls": {"Homepage": "https://github.com/den4uk/jsonextra"}, "release_url": "https://pypi.org/project/jsonextra/0.3.2/", "requires_dist": ["python-dateutil (<3,>=2.8.0)", "dateutils (==0.6.6)"], "requires_python": ">=3.5", "summary": "JSON Extra | JSON that gives you extra datetime, uuid and bytes data types", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jsonextra</h1>\n<p><a href=\"https://travis-ci.org/den4uk/jsonextra\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52a0ab7a3a406fb72bd1e5b0a79d3cc61eb7014f/68747470733a2f2f7472617669732d63692e6f72672f64656e34756b2f6a736f6e65787472612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/den4uk/jsonextra\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9b0a6f255c4b5c0915a1495d488bb7ab2d9ab93/68747470733a2f2f636f6465636f762e696f2f67682f64656e34756b2f6a736f6e65787472612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonextra\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2207ce40a1f1d46e9372de82114298efc911b80/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e65787472612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonextra\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a5bc666e3f8bda1f83901b04a781b826d284fa1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f64656e34756b2f6a736f6e65787472612e737667\"></a></p>\n<p><em>same as <code>json</code> library, but with extra support for <code>bytes</code>, <code>uuid</code> and <code>datetime</code> data classes</em></p>\n<h2>Installation</h2>\n<pre><code>$ pip install jsonextra\n</code></pre>\n<h2>Usage</h2>\n<p>Use just like <code>json</code> as normal once imported, but with addition of extra data classes.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uuid</span><span class=\"o\">,</span> <span class=\"nn\">datetime</span>  <span class=\"c1\"># for creation of `my_data` object</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jsonextra</span>\n\n<span class=\"n\">my_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">(),</span> <span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()}</span>\n<span class=\"c1\"># my_data --&gt; {'id': uuid.UUID('5f7660c5-88ea-46b6-93e2-860d5b7a0271'), 'created': datetime.date(2019, 6, 16)}</span>\n\n<span class=\"c1\"># Serializes the key values to stringified versions</span>\n<span class=\"n\">my_json</span> <span class=\"o\">=</span> <span class=\"n\">jsonextra</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">my_data</span><span class=\"p\">)</span>\n<span class=\"c1\"># my_json --&gt; '{\"id\": \"5f7660c5-88ea-46b6-93e2-860d5b7a0271\", \"created\": \"2019-06-16\"}'</span>\n\n<span class=\"c1\"># Deserializes the object and confirms the output matches `my_data`</span>\n<span class=\"k\">assert</span> <span class=\"n\">jsonextra</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">my_json</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">my_data</span>  <span class=\"c1\"># True</span>\n</pre>\n<h5><code>.dump(obj, fp, **kwargs)</code> &amp; <code>.dumps(obj, **kwargs)</code></h5>\n<p>Will serialize extra data classes into their string (<code>__str__</code>) or special representations (<em>eg: <code>.isoformat</code>, etc.</em>).</p>\n<h5><code>.load(fp, **kwargs)</code> &amp; <code>.loads(s, **kwargs)</code></h5>\n<p>Will deserialize any stings, which match patterns of extra supported data classes.\nFor example, if something looks like a <em>uuid</em> - it will be converted to <code>uuid.UUID</code>.\nIf this behaviour is undesired, please use the built-in <code>json.loads</code> method instead of <code>jsonextra.loads</code>.</p>\n<h2>Supported extra data classes</h2>\n<table>\n<thead>\n<tr>\n<th>Python Data Class</th>\n<th>Python Object (deserialized)</th>\n<th>JSON Object (serialized)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>datetime.date</code></td>\n<td><code>datetime.date(2019, 1, 1)</code></td>\n<td><code>\"2019-01-01\"</code></td>\n</tr>\n<tr>\n<td><code>datetime.time</code></td>\n<td><code>datetime.time(23, 59, 11)</code></td>\n<td><code>\"23:59:11\"</code></td>\n</tr>\n<tr>\n<td><code>datetime.datetime</code></td>\n<td><code>datetime.datetime(2019, 1, 1, 23, 59, 11)</code></td>\n<td><code>\"2019-01-01T23:59:11\"</code></td>\n</tr>\n<tr>\n<td><code>uuid.UUID</code></td>\n<td><code>uuid.UUID('5f7660c5-88ea-46b6-93e2-860d5b7a0271')</code></td>\n<td><code>\"5f7660c5-88ea-46b6-93e2-860d5b7a0271\"</code></td>\n</tr>\n<tr>\n<td><code>bytes</code></td>\n<td><code>b'\\xd6aO\\x1d\\xd71Y\\x05'</code></td>\n<td><code>\"base64:1mFPHdcxWQU=\"</code></td>\n</tr></tbody></table>\n<p>More examples of serialized/deserialized values can be found in tests ;p</p>\n<h2>Why?</h2>\n<p><em>Why would you want to use this library?</em></p>\n<ul>\n<li>If you work with a model-less data structures, and its data types expend beyond the JSON standard supports.</li>\n<li>If your model schemas are too dynamic to be able to use model-based serializers, and requires to store more data types.</li>\n<li>If your data structure does not fit with the JSON standard, and it needs expanding to support one or more data types.</li>\n</ul>\n<h2>How it works</h2>\n<p>An extra supported python object is dumped to a <em>string</em> value.\nWhen loading a serialized json object, any values matching the string supported data class, will be converted to their expected data class instances.</p>\n<blockquote>\n<p><em>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck</em>.</p>\n</blockquote>\n<h2>Contributions</h2>\n<p>Contibutions are welcome, please submit your pull requests into <code>dev</code> branch for a review.</p>\n\n          </div>"}, "last_serial": 5765364, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "66c139f1685d9872a906d923bbfc329f", "sha256": "842e4e55a7495750ba62e4ce785bf35489f20bace3c4727bb3b68f8ed99a9b0e"}, "downloads": -1, "filename": "jsonextra-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "66c139f1685d9872a906d923bbfc329f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4301, "upload_time": "2019-06-15T08:56:25", "upload_time_iso_8601": "2019-06-15T08:56:25.642412Z", "url": "https://files.pythonhosted.org/packages/7f/42/629c08a33ae766674bcb2728f84083bd566b4376bbabf813fa8e7060177a/jsonextra-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3cb45add3e83bbdb3a1fb75872ca6dbe", "sha256": "84bccfe3362c3cc11f20f581d2094f15b1480d35ecf7cb00ddf074d956a37db1"}, "downloads": -1, "filename": "jsonextra-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3cb45add3e83bbdb3a1fb75872ca6dbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3456, "upload_time": "2019-06-15T15:48:03", "upload_time_iso_8601": "2019-06-15T15:48:03.039992Z", "url": "https://files.pythonhosted.org/packages/f9/a6/4839b1389d796fd8cac8537502064af6aaed7c217cc899b5cb350f4fd00c/jsonextra-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d8b78a89827b2edbd8f649c75331cd93", "sha256": "2512dd89842a20b068fde382c9a6bac63a83dcc6317c537d880c81407087d19c"}, "downloads": -1, "filename": "jsonextra-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d8b78a89827b2edbd8f649c75331cd93", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 4162, "upload_time": "2019-06-16T13:01:19", "upload_time_iso_8601": "2019-06-16T13:01:19.345534Z", "url": "https://files.pythonhosted.org/packages/b3/84/3fd1b7b1ba469660a85123c28f780ce2950d6bd9a64281cb526e4f9afd01/jsonextra-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b80d5c3f3be776c913ad0f8fc79eb684", "sha256": "1bb08d95a48aa1873a8062f3139ad4c9a51c9ed9464a18e62254adb729e320e5"}, "downloads": -1, "filename": "jsonextra-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b80d5c3f3be776c913ad0f8fc79eb684", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 4341, "upload_time": "2019-07-07T13:45:11", "upload_time_iso_8601": "2019-07-07T13:45:11.335254Z", "url": "https://files.pythonhosted.org/packages/09/34/f594e9f66fdfc972972cca459f6912ee7efecf36fd7b829acdc8c223b07a/jsonextra-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "6d99a5422ecf9d7e9b93e6d08e0f394c", "sha256": "39b9087ac18aea6fa79cde114bf6167aa21fc538f5766a4cc665539b11aea9ad"}, "downloads": -1, "filename": "jsonextra-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d99a5422ecf9d7e9b93e6d08e0f394c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 4881, "upload_time": "2019-07-10T22:19:04", "upload_time_iso_8601": "2019-07-10T22:19:04.446930Z", "url": "https://files.pythonhosted.org/packages/98/f3/be52d72deb49c9a1508d25550b6fd05ce1604dee05081ee148984e55ef9b/jsonextra-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "0713c85ca6930c435645f8fb08ba0adf", "sha256": "b072c201e0feaeeef2897e1f63421ff7e398655415881fccf2e1b98f6cf6617c"}, "downloads": -1, "filename": "jsonextra-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0713c85ca6930c435645f8fb08ba0adf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5026, "upload_time": "2019-08-31T21:17:35", "upload_time_iso_8601": "2019-08-31T21:17:35.827825Z", "url": "https://files.pythonhosted.org/packages/5b/b4/686b3b4b590c6cc6f0715e862b01ecb483ef1b3a22243af72564d11d99c4/jsonextra-0.3.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0713c85ca6930c435645f8fb08ba0adf", "sha256": "b072c201e0feaeeef2897e1f63421ff7e398655415881fccf2e1b98f6cf6617c"}, "downloads": -1, "filename": "jsonextra-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0713c85ca6930c435645f8fb08ba0adf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5026, "upload_time": "2019-08-31T21:17:35", "upload_time_iso_8601": "2019-08-31T21:17:35.827825Z", "url": "https://files.pythonhosted.org/packages/5b/b4/686b3b4b590c6cc6f0715e862b01ecb483ef1b3a22243af72564d11d99c4/jsonextra-0.3.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:48 2020"}