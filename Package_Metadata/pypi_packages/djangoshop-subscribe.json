{"info": {"author": "Richard Case", "author_email": "rich@racitup.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "djangoshop-subscribe\n====================\n\nDjango-SHOP plugin for email subscriptions\n\nIntroduction\n------------\n\nThis plugin allows Django-SHOP implementations to add email\nsubscriptions for their customers.\n\nThe module is currently compatible with Django v1.10.7. This\ndocumentation assumes a working knowledge of Django and\n`Django-SHOP <http://django-shop.readthedocs.io/en/latest/>`__.\n\nRelease History\n~~~~~~~~~~~~~~~\n\n- 0.2.x - `Django-SHOP <https://github.com/awesto/django-shop>`__ v0.11.x compatibility\n- 0.1.x - `Django-SHOP <https://github.com/awesto/django-shop>`__ v0.10.2 compatibility\n\nFeatures\n~~~~~~~~\n\nThis plugin currently has the following features:\n\n-  Django-angular & bootstrap3 based subscription and confirmation forms\n   that can be included in normal templates.\n-  Automatic pickup of any Customer model fields that start with\n   ``subscription_`` for inclusion in forms.\n-  A CMS plugin for inclusion of either form in CMS placeholders.\n-  Default confirmation and subscription management form, or use your\n   own page.\n-  A minimal customer form for the standard Django-SHOP checkout to\n   prevent all fields annoying customers on every checkout.\n-  Email link authentication for management of subscriptions.\n-  Overridable forms and email templates including `Email\n   Framework <https://github.com/g13nn/Email-Framework>`__ compatibility\n   with the majority of email clients.\n-  Rate limit for subscriptions from each ip address.\n-  Email integration with post_office templates.\n\nTODO\n~~~~\n\nPlease let me know of you have any feature suggestions, or wish to\nimplement any of the below:\n\n-  Admin interface to allow emails to be authored and sent out to\n   subscribed users.\n-  Tests.\n-  Remove included email framework.\n-  Continuous build integration including compatibility testing with\n   various python, Django and Django-SHOP versions.\n\nIntegration Guide\n-----------------\n\nPlease follow the guide below to integrate the plugin into your own\nshop.\n\nConfiguration\n~~~~~~~~~~~~~\n\nPlease add the following to your Django settings. If you do not use CMS\nyou do not need the CMS plugin.\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'shop',\n        'shop_subscribe',\n        ...\n    ]\n\n    CMSPLUGIN_CASCADE_PLUGINS = [\n        ...\n        'shop_subscribe.cmsplugin_cascade',\n    ]\n\nA logging configuration similar to below is also recommended to catch a few warnings\ngiven off by this module. This configuration will also catch messages given off by\nother modules for which there is no specific configuration. If you want to add a\nspecific configuration for this module, use the module name ``shop_subscribe``.\n\n.. code:: python\n\n    LOGGING = {\n        'version': 1,\n        # Use False to see deprecation warnings, etc\n        'disable_existing_loggers': False,\n        'filters': {\n             'require_debug_false': {\n                 '()': 'django.utils.log.RequireDebugFalse',\n             }\n        },\n        'formatters': {\n            'simple': {\n                'format': '[%(asctime)s %(name)s] %(levelname)s: %(message)s'\n            },\n        },\n        'handlers': {\n            'console': {\n                'level': 'INFO',\n                'class': 'logging.StreamHandler',\n                'formatter': 'simple',\n            },\n        },\n        'loggers': {\n            '': {\n                'handlers': ['console'],\n                # default is WARNING\n                'level': 'INFO',\n            },\n        },\n    }\n\nCustomer Model\n~~~~~~~~~~~~~~\n\nFor the subscription plugin to work, you must create your own customer\nmodel that extends the provided shop customer model. There are two\nrequirements:\n\n-  Add the ``SubscriptionCustomerManagerMixin`` to a manager class\n-  Add your own subscription options to the customer model which MUST be\n   prefixed with ``subscription_``\n\nFor example:\n\n.. code:: python\n\n    from shop.models.customer import BaseCustomer, CustomerManager as BaseCustomerManager\n    from shop_subscribe.models import SubscriptionCustomerManagerMixin\n\n\n    class CustomerManager(SubscriptionCustomerManagerMixin, BaseCustomerManager):\n        pass\n\n    class Customer(BaseCustomer):\n        \"\"\"\n        Specialised customer class for our additional fields\n        \"\"\"\n        subscription_newsletter = models.BooleanField(_(\"Newsletter\"), default=True,\n            help_text=_(\"Company news subscription\"))\n        subscription_cart_products = models.BooleanField(_(\"Watched Product Updates\"), default=True,\n            help_text=_(\"Subscription to product developments in your watch list or shopping trolley\"))\n        subscription_order_products = models.BooleanField(_(\"Purchased Product Updates\"), default=False,\n            help_text=_(\"Subscription to product developments you have purchased\"))\n\n        objects = CustomerManager()\n\nThe subscription management form will use the default Django modelform\nfields and widgets. Customising this form has not been considered!\n\nURLs\n~~~~\n\nThe subscribe plugin comes with two namespaced URLs that are Django REST\nFramework endpoints:\n\n-  subscribe: Used by the subscription form to sign up with just an\n   email address. Visitors will be added as 'Unrecognized'. The email\n   address used will receive an email asking the user to click a link to\n   confirm their subscription.\n-  confirm: The confirmation link contains a signature that\n   authenticates the user. The form first recognizes the user as\n   'Guest'. The form then allows users to manage their subscriptions.\n\nPlease include these urls in your own urlconf, for example:\n\n.. code:: python\n\n    api_urls = [\n        url(r'^api/', include([\n            url(r'^shop/', include('shop.urls', namespace='shop')),\n            url(r'^shop_subscribe/', include('shop_subscribe.urls')), # for email subscriptions\n        ]))\n    ]\n    urlpatterns += [url(r'', include(api_urls))]\n\nForms\n~~~~~\n\nTwo forms are provided, one for initial subscription, the other for\nconfirming and managing subscriptions without the need to log in. The\nlatter is useful for Guest users that are unable to log in.\n\nEither form can be integrated into existing CMS placeholders using the\nCMS plugin called *Subscriptions Form*, which can be found in the *Shop*\nplugin section. The template rendered for either form can be overridden\nby creating the following templates in your shop app:\n\n-  <SHOP_APP_LABEL>/shop\\_subscribe/subscribe-form.html\n-  <SHOP_APP_LABEL>/shop\\_subscribe/confirm-form.html\n\nThese templates will be rendered with ``form`` and ``action`` context\nvariables. Here is what the plugin should look like:\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/cms-plugin.png\n   :alt: CMS Plugin\n\n   CMS plugin image\n\nSubscription Form\n^^^^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/subscribe.png\n   :alt: Subscription form\n\n   Subscription form image\n\nIt is recommended that the subscription form is embedded into an\nexisting product page, for example the product detail page. This can be\nacheived using the CMS plugin as above. Alternatively you may include\nthe form directly into a template, for example:\n\n.. code:: html+django\n\n        <div class=\"col-md-4 text-center\">\n            ...\n            {% include \"shop_subscribe/subscribe-form.html\" %}\n            ...\n        </div>\n\nAn included template tag ensures the relevant context variables are\navailable for rendering.\n\nConfirmation Form\n^^^^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/confirm.png\n   :alt: Confirmation form\n\n   Confirmation form image\n\nThe confirmation form can be on a CMS page as above, included in a\nstandard Django template, or as a last resort, a default form is\nincluded that will be rendered by Django REST Framework.\n\nConfirmation form email link URL resolution order:\n\n1. CMS page id (aka reverse\\_id): ``shop-subscribe-confirm``;\n2. Django URL name: ``shop-subscribe-confirm``;\n3. Default URL ``shop_subscribe:confirm`` which renders a default form.\n\n**Note:** The confirmation page must be live when the subscription form\nis live and the URL must not be changed. Otherwise the confirmation\nemail links sent out will not point to the correct URL.\n\nMinimal Checkout Customer Form\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLook for the *Customer Form (minimal)* CMS plugin.\n*Note* that any fields added to the Customer Model must be configured to allow blank form entries\n(``blank=True`` and/or specify a default value) for correct operation.\n\nAdmin\n~~~~~\n\nTo add subscriptions management to the customer admin, you must create your own customer admin\nmodule derived from the shop base module, like so:\n\n.. code:: python\n\n    from django.contrib import admin\n    from shop.admin.customer import CustomerProxy, CustomerAdminBase\n    from shop_subscribe.admin import SubscriptionsInlineAdmin\n\n\n    # Because Customer is attached to the user model, use this proxy model:\n    @admin.register(CustomerProxy)\n    class CustomerAdmin(CustomerAdminBase):\n        \"\"\"Customised customeradmin class\"\"\"\n        inlines = (SubscriptionsInlineAdmin,)", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/racitup/djangoshop-subscribe", "keywords": "Django,Django-SHOP", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "djangoshop-subscribe", "package_url": "https://pypi.org/project/djangoshop-subscribe/", "platform": "OS Independent", "project_url": "https://pypi.org/project/djangoshop-subscribe/", "project_urls": {"Homepage": "https://github.com/racitup/djangoshop-subscribe"}, "release_url": "https://pypi.org/project/djangoshop-subscribe/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "An email subscription plugin for Django-SHOP", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-SHOP plugin for email subscriptions</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This plugin allows Django-SHOP implementations to add email\nsubscriptions for their customers.</p>\n<p>The module is currently compatible with Django v1.10.7. This\ndocumentation assumes a working knowledge of Django and\n<a href=\"http://django-shop.readthedocs.io/en/latest/\" rel=\"nofollow\">Django-SHOP</a>.</p>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<ul>\n<li>0.2.x - <a href=\"https://github.com/awesto/django-shop\" rel=\"nofollow\">Django-SHOP</a> v0.11.x compatibility</li>\n<li>0.1.x - <a href=\"https://github.com/awesto/django-shop\" rel=\"nofollow\">Django-SHOP</a> v0.10.2 compatibility</li>\n</ul>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<p>This plugin currently has the following features:</p>\n<ul>\n<li>Django-angular &amp; bootstrap3 based subscription and confirmation forms\nthat can be included in normal templates.</li>\n<li>Automatic pickup of any Customer model fields that start with\n<tt>subscription_</tt> for inclusion in forms.</li>\n<li>A CMS plugin for inclusion of either form in CMS placeholders.</li>\n<li>Default confirmation and subscription management form, or use your\nown page.</li>\n<li>A minimal customer form for the standard Django-SHOP checkout to\nprevent all fields annoying customers on every checkout.</li>\n<li>Email link authentication for management of subscriptions.</li>\n<li>Overridable forms and email templates including <a href=\"https://github.com/g13nn/Email-Framework\" rel=\"nofollow\">Email\nFramework</a> compatibility\nwith the majority of email clients.</li>\n<li>Rate limit for subscriptions from each ip address.</li>\n<li>Email integration with post_office templates.</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<p>Please let me know of you have any feature suggestions, or wish to\nimplement any of the below:</p>\n<ul>\n<li>Admin interface to allow emails to be authored and sent out to\nsubscribed users.</li>\n<li>Tests.</li>\n<li>Remove included email framework.</li>\n<li>Continuous build integration including compatibility testing with\nvarious python, Django and Django-SHOP versions.</li>\n</ul>\n</div>\n</div>\n<div id=\"integration-guide\">\n<h2>Integration Guide</h2>\n<p>Please follow the guide below to integrate the plugin into your own\nshop.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Please add the following to your Django settings. If you do not use CMS\nyou do not need the CMS plugin.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'shop'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'shop_subscribe'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">CMSPLUGIN_CASCADE_PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'shop_subscribe.cmsplugin_cascade'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>A logging configuration similar to below is also recommended to catch a few warnings\ngiven off by this module. This configuration will also catch messages given off by\nother modules for which there is no specific configuration. If you want to add a\nspecific configuration for this module, use the module name <tt>shop_subscribe</tt>.</p>\n<pre><span class=\"n\">LOGGING</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Use False to see deprecation warnings, etc</span>\n    <span class=\"s1\">'disable_existing_loggers'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'require_debug_false'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n             <span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"s1\">'django.utils.log.RequireDebugFalse'</span><span class=\"p\">,</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'simple'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'format'</span><span class=\"p\">:</span> <span class=\"s1\">'[</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(name)s</span><span class=\"s1\">] </span><span class=\"si\">%(levelname)s</span><span class=\"s1\">: </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'console'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.StreamHandler'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'simple'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'loggers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">''</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'console'</span><span class=\"p\">],</span>\n            <span class=\"c1\"># default is WARNING</span>\n            <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"customer-model\">\n<h3>Customer Model</h3>\n<p>For the subscription plugin to work, you must create your own customer\nmodel that extends the provided shop customer model. There are two\nrequirements:</p>\n<ul>\n<li>Add the <tt>SubscriptionCustomerManagerMixin</tt> to a manager class</li>\n<li>Add your own subscription options to the customer model which MUST be\nprefixed with <tt>subscription_</tt></li>\n</ul>\n<p>For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shop.models.customer</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCustomer</span><span class=\"p\">,</span> <span class=\"n\">CustomerManager</span> <span class=\"k\">as</span> <span class=\"n\">BaseCustomerManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shop_subscribe.models</span> <span class=\"kn\">import</span> <span class=\"n\">SubscriptionCustomerManagerMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomerManager</span><span class=\"p\">(</span><span class=\"n\">SubscriptionCustomerManagerMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseCustomerManager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Customer</span><span class=\"p\">(</span><span class=\"n\">BaseCustomer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Specialised customer class for our additional fields\n    \"\"\"</span>\n    <span class=\"n\">subscription_newsletter</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Newsletter\"</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Company news subscription\"</span><span class=\"p\">))</span>\n    <span class=\"n\">subscription_cart_products</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Watched Product Updates\"</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Subscription to product developments in your watch list or shopping trolley\"</span><span class=\"p\">))</span>\n    <span class=\"n\">subscription_order_products</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Purchased Product Updates\"</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Subscription to product developments you have purchased\"</span><span class=\"p\">))</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">CustomerManager</span><span class=\"p\">()</span>\n</pre>\n<p>The subscription management form will use the default Django modelform\nfields and widgets. Customising this form has not been considered!</p>\n</div>\n<div id=\"urls\">\n<h3>URLs</h3>\n<p>The subscribe plugin comes with two namespaced URLs that are Django REST\nFramework endpoints:</p>\n<ul>\n<li>subscribe: Used by the subscription form to sign up with just an\nemail address. Visitors will be added as \u2018Unrecognized\u2019. The email\naddress used will receive an email asking the user to click a link to\nconfirm their subscription.</li>\n<li>confirm: The confirmation link contains a signature that\nauthenticates the user. The form first recognizes the user as\n\u2018Guest\u2019. The form then allows users to manage their subscriptions.</li>\n</ul>\n<p>Please include these urls in your own urlconf, for example:</p>\n<pre><span class=\"n\">api_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^api/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">([</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^shop/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'shop.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'shop'</span><span class=\"p\">)),</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^shop_subscribe/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'shop_subscribe.urls'</span><span class=\"p\">)),</span> <span class=\"c1\"># for email subscriptions</span>\n    <span class=\"p\">]))</span>\n<span class=\"p\">]</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">api_urls</span><span class=\"p\">))]</span>\n</pre>\n</div>\n<div id=\"forms\">\n<h3>Forms</h3>\n<p>Two forms are provided, one for initial subscription, the other for\nconfirming and managing subscriptions without the need to log in. The\nlatter is useful for Guest users that are unable to log in.</p>\n<p>Either form can be integrated into existing CMS placeholders using the\nCMS plugin called <em>Subscriptions Form</em>, which can be found in the <em>Shop</em>\nplugin section. The template rendered for either form can be overridden\nby creating the following templates in your shop app:</p>\n<ul>\n<li>&lt;SHOP_APP_LABEL&gt;/shop_subscribe/subscribe-form.html</li>\n<li>&lt;SHOP_APP_LABEL&gt;/shop_subscribe/confirm-form.html</li>\n</ul>\n<p>These templates will be rendered with <tt>form</tt> and <tt>action</tt> context\nvariables. Here is what the plugin should look like:</p>\n<div>\n<img alt=\"CMS Plugin\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6749624debd2b2f5d3262417e93dd9cc6752dca/68747470733a2f2f6769746875622e636f6d2f726163697475702f646a616e676f73686f702d7375627363726962652f7261772f6d61737465722f646f632f696d672f636d732d706c7567696e2e706e67\">\n<p>CMS plugin image</p>\n</div>\n<div id=\"subscription-form\">\n<h4>Subscription Form</h4>\n<div>\n<img alt=\"Subscription form\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9ba27f7e698922cfdf450d5956a5b39e127e95b/68747470733a2f2f6769746875622e636f6d2f726163697475702f646a616e676f73686f702d7375627363726962652f7261772f6d61737465722f646f632f696d672f7375627363726962652e706e67\">\n<p>Subscription form image</p>\n</div>\n<p>It is recommended that the subscription form is embedded into an\nexisting product page, for example the product detail page. This can be\nacheived using the CMS plugin as above. Alternatively you may include\nthe form directly into a template, for example:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-md-4 text-center\"</span><span class=\"p\">&gt;</span>\n    ...\n    <span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">\"shop_subscribe/subscribe-form.html\"</span> <span class=\"cp\">%}</span>\n    ...\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>An included template tag ensures the relevant context variables are\navailable for rendering.</p>\n</div>\n<div id=\"confirmation-form\">\n<h4>Confirmation Form</h4>\n<div>\n<img alt=\"Confirmation form\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c48b7492f37e2498e6c064692101a6d9f58117ed/68747470733a2f2f6769746875622e636f6d2f726163697475702f646a616e676f73686f702d7375627363726962652f7261772f6d61737465722f646f632f696d672f636f6e6669726d2e706e67\">\n<p>Confirmation form image</p>\n</div>\n<p>The confirmation form can be on a CMS page as above, included in a\nstandard Django template, or as a last resort, a default form is\nincluded that will be rendered by Django REST Framework.</p>\n<p>Confirmation form email link URL resolution order:</p>\n<ol>\n<li>CMS page id (aka reverse_id): <tt><span class=\"pre\">shop-subscribe-confirm</span></tt>;</li>\n<li>Django URL name: <tt><span class=\"pre\">shop-subscribe-confirm</span></tt>;</li>\n<li>Default URL <tt>shop_subscribe:confirm</tt> which renders a default form.</li>\n</ol>\n<p><strong>Note:</strong> The confirmation page must be live when the subscription form\nis live and the URL must not be changed. Otherwise the confirmation\nemail links sent out will not point to the correct URL.</p>\n</div>\n<div id=\"minimal-checkout-customer-form\">\n<h4>Minimal Checkout Customer Form</h4>\n<p>Look for the <em>Customer Form (minimal)</em> CMS plugin.\n<em>Note</em> that any fields added to the Customer Model must be configured to allow blank form entries\n(<tt>blank=True</tt> and/or specify a default value) for correct operation.</p>\n</div>\n</div>\n<div id=\"admin\">\n<h3>Admin</h3>\n<p>To add subscriptions management to the customer admin, you must create your own customer admin\nmodule derived from the shop base module, like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shop.admin.customer</span> <span class=\"kn\">import</span> <span class=\"n\">CustomerProxy</span><span class=\"p\">,</span> <span class=\"n\">CustomerAdminBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shop_subscribe.admin</span> <span class=\"kn\">import</span> <span class=\"n\">SubscriptionsInlineAdmin</span>\n\n\n<span class=\"c1\"># Because Customer is attached to the user model, use this proxy model:</span>\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">CustomerProxy</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomerAdmin</span><span class=\"p\">(</span><span class=\"n\">CustomerAdminBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Customised customeradmin class\"\"\"</span>\n    <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">SubscriptionsInlineAdmin</span><span class=\"p\">,)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3276404, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cafe0dbbc9139f707cfb1480cde24e3d", "sha256": "32758507748f9bc302b5636214bcd45d6f01e0067ba4cde015baf82cccd27f0b"}, "downloads": -1, "filename": "djangoshop-subscribe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cafe0dbbc9139f707cfb1480cde24e3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41833, "upload_time": "2017-07-27T23:29:45", "upload_time_iso_8601": "2017-07-27T23:29:45.780375Z", "url": "https://files.pythonhosted.org/packages/16/bf/4e07f2b4f373e4b7c7339a0c7bcb6ef90db1201f3e3a31d9b24f10941034/djangoshop-subscribe-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7ed4132e7b081e7b5f2d5af034cd50f8", "sha256": "fa6de2577b6bacef7c5076bb1d645fdd6f0f4c2a40e1972543ee3a1ec879aab7"}, "downloads": -1, "filename": "djangoshop-subscribe-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7ed4132e7b081e7b5f2d5af034cd50f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42718, "upload_time": "2017-08-08T16:02:57", "upload_time_iso_8601": "2017-08-08T16:02:57.375810Z", "url": "https://files.pythonhosted.org/packages/61/35/68c315d19998887a8394c1c94fce9e1ab1e67965a4a6f4fac145de72ba5c/djangoshop-subscribe-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b3caae387ac848b3ffd20a85e7b0154a", "sha256": "56f4d8130c4804f32740cc04f9bac470612d6a12ead3314f58897c5f1df9bc87"}, "downloads": -1, "filename": "djangoshop-subscribe-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b3caae387ac848b3ffd20a85e7b0154a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42739, "upload_time": "2017-08-09T15:25:29", "upload_time_iso_8601": "2017-08-09T15:25:29.765455Z", "url": "https://files.pythonhosted.org/packages/39/7c/1f5111af4ef82e1ea0dcb4129d9824b9df40b1e031b40e5d2fd164a1e9d0/djangoshop-subscribe-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e7d6709e259634443b6666a05b29d299", "sha256": "20614dfc3f2589d11c5c64d1e6a39d5974b3bf8f94cfd214acacd9485f442df5"}, "downloads": -1, "filename": "djangoshop-subscribe-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e7d6709e259634443b6666a05b29d299", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43508, "upload_time": "2017-10-04T04:47:30", "upload_time_iso_8601": "2017-10-04T04:47:30.122599Z", "url": "https://files.pythonhosted.org/packages/78/cd/2d46e2a8c1ccd26f580ab6687a8ca07d45b2ed22f0ccc3a2014595e93174/djangoshop-subscribe-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e58921007dcf30d52dc8eb84303efec6", "sha256": "9a314c031a76b25dc61db6f405b4c2961a83241f6a1830e394276b0dff579ce8"}, "downloads": -1, "filename": "djangoshop-subscribe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e58921007dcf30d52dc8eb84303efec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42900, "upload_time": "2017-10-24T23:05:20", "upload_time_iso_8601": "2017-10-24T23:05:20.199593Z", "url": "https://files.pythonhosted.org/packages/61/c2/3ddc44b046d4facc1fdbf53ef46cd2ad0918794ea8e1db8aa18e7bdd1a2e/djangoshop-subscribe-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e58921007dcf30d52dc8eb84303efec6", "sha256": "9a314c031a76b25dc61db6f405b4c2961a83241f6a1830e394276b0dff579ce8"}, "downloads": -1, "filename": "djangoshop-subscribe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e58921007dcf30d52dc8eb84303efec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42900, "upload_time": "2017-10-24T23:05:20", "upload_time_iso_8601": "2017-10-24T23:05:20.199593Z", "url": "https://files.pythonhosted.org/packages/61/c2/3ddc44b046d4facc1fdbf53ef46cd2ad0918794ea8e1db8aa18e7bdd1a2e/djangoshop-subscribe-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:29 2020"}