{"info": {"author": "Francois Pieterse", "author_email": "francois.pieterse@greenferndynamics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Manufacturing", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# proc_plot\nQuick interactive trending of time series data for process control data analysis.\n\n\n## Usage\nTo start, read process data into a pandas Dataframe.  It will work best if the column names in the dataframe are DCS tagnames e.g. FIC101.SP.  Next, let proc_plot know which dataframe to use and call the show() function to show the main window.\n\n```\n%matplotlib qt\nimport matplotlib.pyplot as plt\nimport proc_plot\nimport pandas\ndf = pandas.read_excel('data.xlsx',parse_dates=True)\nproc_plot.set_dataframe(df)\nproc_plot.show()\n```\n\n## Grouping Rules\nproc_plot uses regular expression rules to group tags that should be plotted on the same axis.\nSee `help(proc_plot.add_grouping_rule)` for examples if you want to customise grouping rules.\n\n## %matplotlib magic\nThe intended use of the tool is to call it from a jupyter notebook.  The way the qt gui loop runs in jupyter is tricky.  proc_plot checks the current backend (plt.get_backend) to tell if the notebook is using `%matplotlib qt` or `%matplotlib notebook`.\n\nIt is possible to switch the backend after the %matplotlib magic, if the backend is switched before proc_plot is imported then proc_plot could break the qt gui loop.  I recommend using %matplotlib qt and then switching the backend with `plt.switch_backend('nbagg')` after importing proc_plot if you want interactive notebook plots.\n\n## Show Me\nThe tool has a button \"Show Me\" that will show you python code to generate the current trend.  The code assumes your dataframe is called `df` and that you imported `matplotlib.pyplot as plt`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/fpieterse/proc_plot/archive/v1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fpieterse/proc_plot", "keywords": "Trend,Process Control", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "proc-plot", "package_url": "https://pypi.org/project/proc-plot/", "platform": "", "project_url": "https://pypi.org/project/proc-plot/", "project_urls": {"Download": "https://github.com/fpieterse/proc_plot/archive/v1.2.tar.gz", "Homepage": "https://github.com/fpieterse/proc_plot"}, "release_url": "https://pypi.org/project/proc-plot/1.2/", "requires_dist": null, "requires_python": "", "summary": "Trending for Process Control Data Analysis", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>proc_plot</h1>\n<p>Quick interactive trending of time series data for process control data analysis.</p>\n<h2>Usage</h2>\n<p>To start, read process data into a pandas Dataframe.  It will work best if the column names in the dataframe are DCS tagnames e.g. FIC101.SP.  Next, let proc_plot know which dataframe to use and call the show() function to show the main window.</p>\n<pre><code>%matplotlib qt\nimport matplotlib.pyplot as plt\nimport proc_plot\nimport pandas\ndf = pandas.read_excel('data.xlsx',parse_dates=True)\nproc_plot.set_dataframe(df)\nproc_plot.show()\n</code></pre>\n<h2>Grouping Rules</h2>\n<p>proc_plot uses regular expression rules to group tags that should be plotted on the same axis.\nSee <code>help(proc_plot.add_grouping_rule)</code> for examples if you want to customise grouping rules.</p>\n<h2>%matplotlib magic</h2>\n<p>The intended use of the tool is to call it from a jupyter notebook.  The way the qt gui loop runs in jupyter is tricky.  proc_plot checks the current backend (plt.get_backend) to tell if the notebook is using <code>%matplotlib qt</code> or <code>%matplotlib notebook</code>.</p>\n<p>It is possible to switch the backend after the %matplotlib magic, if the backend is switched before proc_plot is imported then proc_plot could break the qt gui loop.  I recommend using %matplotlib qt and then switching the backend with <code>plt.switch_backend('nbagg')</code> after importing proc_plot if you want interactive notebook plots.</p>\n<h2>Show Me</h2>\n<p>The tool has a button \"Show Me\" that will show you python code to generate the current trend.  The code assumes your dataframe is called <code>df</code> and that you imported <code>matplotlib.pyplot as plt</code>.</p>\n\n          </div>"}, "last_serial": 7097235, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "eb90e2574618a96cb73ae26b8708dbd4", "sha256": "f40eeae8eb7cec4adabdda8209e48fbc97979ed15f1df0a07cb39df338afb7c7"}, "downloads": -1, "filename": "proc_plot-0.1.tar.gz", "has_sig": false, "md5_digest": "eb90e2574618a96cb73ae26b8708dbd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7245, "upload_time": "2020-04-11T22:21:41", "upload_time_iso_8601": "2020-04-11T22:21:41.124903Z", "url": "https://files.pythonhosted.org/packages/a1/f7/f02e8e31200274541441d334d4fa9b96d6da96cb1bffe32beace2289a756/proc_plot-0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "c75a8b45de128cddf4c773d20cc69b5b", "sha256": "386b1045810493746e60fa11e664dd955b20f1d46200ffc2200937eeb317de99"}, "downloads": -1, "filename": "proc_plot-1.1.tar.gz", "has_sig": false, "md5_digest": "c75a8b45de128cddf4c773d20cc69b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10070, "upload_time": "2020-04-18T03:52:59", "upload_time_iso_8601": "2020-04-18T03:52:59.328111Z", "url": "https://files.pythonhosted.org/packages/28/24/5739675b6a6ec066227b9e0bfd2974ba7801581726b5b0545efdfafcc8c4/proc_plot-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "827fa43cf9be9170d518ff6340ae7f7b", "sha256": "8c5c4f08b555551b4dbc8c43d7c91e9a4dd068a75c21a8de5ccff85ba52b0b8b"}, "downloads": -1, "filename": "proc_plot-1.2.tar.gz", "has_sig": false, "md5_digest": "827fa43cf9be9170d518ff6340ae7f7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22252, "upload_time": "2020-04-25T01:10:22", "upload_time_iso_8601": "2020-04-25T01:10:22.202308Z", "url": "https://files.pythonhosted.org/packages/28/7a/093cc6bf198ca7f2ca1ba8f5b68c9464f6d9df6e420216bab8b7788a3787/proc_plot-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "827fa43cf9be9170d518ff6340ae7f7b", "sha256": "8c5c4f08b555551b4dbc8c43d7c91e9a4dd068a75c21a8de5ccff85ba52b0b8b"}, "downloads": -1, "filename": "proc_plot-1.2.tar.gz", "has_sig": false, "md5_digest": "827fa43cf9be9170d518ff6340ae7f7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22252, "upload_time": "2020-04-25T01:10:22", "upload_time_iso_8601": "2020-04-25T01:10:22.202308Z", "url": "https://files.pythonhosted.org/packages/28/7a/093cc6bf198ca7f2ca1ba8f5b68c9464f6d9df6e420216bab8b7788a3787/proc_plot-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:50 2020"}