{"info": {"author": "Bob Green", "author_email": "rgreen@goscoutgo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "backoff\n=======\n\n.. image:: https://travis-ci.org/litl/backoff.svg?branch=master\n    :target: https://travis-ci.org/litl/backoff?branch=master\n.. image:: https://coveralls.io/repos/litl/backoff/badge.svg?branch=master\n    :target: https://coveralls.io/r/litl/backoff?branch=master\n.. image:: https://img.shields.io/pypi/v/backoff.svg\n    :target: https://pypi.python.org/pypi/backoff\n\n**Function decoration for backoff and retry**\n\nThis module provides function decorators which can be used to wrap a\nfunction such that it will be retried until some condition is met. It\nis meant to be of use when accessing unreliable resources with the\npotential for intermittent failures i.e. network resources and external\nAPIs. Somewhat more generally, it may also be of use for dynamically\npolling resources for externally generated content.\n\nDecorators support both regular functions for synchronous code and\n`asyncio <https://docs.python.org/3/library/asyncio.html>`_'s coroutines\nfor asynchronous code.\n\nExamples\n========\n\nSince Kenneth Reitz's `requests <http://python-requests.org>`_ module\nhas become a defacto standard for synchronous HTTP clients in Python,\nnetworking examples below are written using it, but it is in no way required\nby the backoff module.\n\n@backoff.on_exception\n---------------------\n\nThe ``on_exception`` decorator is used to retry when a specified exception\nis raised. Here's an example using exponential backoff when any\n``requests`` exception is raised:\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException)\n    def get_url(url):\n        return requests.get(url)\n\nThe decorator will also accept a tuple of exceptions for cases where\nthe same backoff behavior is desired for more than one exception type:\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo,\n                          (requests.exceptions.Timeout,\n                           requests.exceptions.ConnectionError))\n    def get_url(url):\n        return requests.get(url)\n\n**Give Up Conditions**\n\nOptional keyword arguments can specify conditions under which to give\nup.\n\nThe keyword argument ``max_time`` specifies the maximum amount\nof total time in seconds that can elapse before giving up.\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException,\n                          max_time=60)\n    def get_url(url):\n        return requests.get(url)\n\n\nKeyword argument ``max_tries`` specifies the maximum number of calls\nto make to the target function before giving up.\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException,\n                          max_tries=8,\n                          jitter=None)\n    def get_url(url):\n        return requests.get(url)\n\n\nIn some cases the raised exception instance itself may need to be\ninspected in order to determine if it is a retryable condition. The\n``giveup`` keyword arg can be used to specify a function which accepts\nthe exception and returns a truthy value if the exception should not\nbe retried:\n\n.. code-block:: python\n\n    def fatal_code(e):\n        return 400 <= e.response.status_code < 500\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException,\n                          max_time=300,\n                          giveup=fatal_code)\n    def get_url(url):\n        return requests.get(url)\n\nWhen a give up event occurs, the exception in question is reraised\nand so code calling an `on_exception`-decorated function may still\nneed to do exception handling.\n\n@backoff.on_predicate\n---------------------\n\nThe ``on_predicate`` decorator is used to retry when a particular\ncondition is true of the return value of the target function.  This may\nbe useful when polling a resource for externally generated content.\n\nHere's an example which uses a fibonacci sequence backoff when the\nreturn value of the target function is the empty list:\n\n.. code-block:: python\n\n    @backoff.on_predicate(backoff.fibo, lambda x: x == [], max_value=13)\n    def poll_for_messages(queue):\n        return queue.get()\n\nExtra keyword arguments are passed when initializing the\nwait generator, so the ``max_value`` param above is passed as a keyword\narg when initializing the fibo generator.\n\nWhen not specified, the predicate param defaults to the falsey test,\nso the above can more concisely be written:\n\n.. code-block:: python\n\n    @backoff.on_predicate(backoff.fibo, max_value=13)\n    def poll_for_message(queue)\n        return queue.get()\n\nMore simply, a function which continues polling every second until it\ngets a non-falsey result could be defined like like this:\n\n.. code-block:: python\n\n    @backoff.on_predicate(backoff.constant, interval=1)\n    def poll_for_message(queue)\n        return queue.get()\n\nJitter\n------\n\nA jitter algorithm can be supplied with the ``jitter`` keyword arg to\neither of the backoff decorators. This argument should be a function\naccepting the original unadulterated backoff value and returning it's\njittered counterpart.\n\nAs of version 1.2, the default jitter function ``backoff.full_jitter``\nimplements the 'Full Jitter' algorithm as defined in the AWS\nArchitecture Blog's `Exponential Backoff And Jitter\n<https://www.awsarchitectureblog.com/2015/03/backoff.html>`_ post.\nNote that with this algorithm, the time yielded by the wait generator\nis actually the *maximum* amount of time to wait.\n\nPrevious versions of backoff defaulted to adding some random number of\nmilliseconds (up to 1s) to the raw sleep value. If desired, this\nbehavior is now available as ``backoff.random_jitter``.\n\nUsing multiple decorators\n-------------------------\n\nThe backoff decorators may also be combined to specify different\nbackoff behavior for different cases:\n\n.. code-block:: python\n\n    @backoff.on_predicate(backoff.fibo, max_value=13)\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.HTTPError,\n                          max_time=60)\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.Timeout,\n                          max_time=300)\n    def poll_for_message(queue):\n        return queue.get()\n\nRuntime Configuration\n---------------------\n\nThe decorator functions ``on_exception`` and ``on_predicate`` are\ngenerally evaluated at import time. This is fine when the keyword args\nare passed as constant values, but suppose we want to consult a\ndictionary with configuration options that only become available at\nruntime. The relevant values are not available at import time. Instead,\ndecorator functions can be passed callables which are evaluated at\nruntime to obtain the value:\n\n.. code-block:: python\n\n    def lookup_max_time():\n        # pretend we have a global reference to 'app' here\n        # and that it has a dictionary-like 'config' property\n        return app.config[\"BACKOFF_MAX_TIME\"]\n\n    @backoff.on_exception(backoff.expo,\n                          ValueError,\n                          max_time=lookup_max_time)\n\nEvent handlers\n--------------\n\nBoth backoff decorators optionally accept event handler functions\nusing the keyword arguments ``on_success``, ``on_backoff``, and ``on_giveup``.\nThis may be useful in reporting statistics or performing other custom\nlogging.\n\nHandlers must be callables with a unary signature accepting a dict\nargument. This dict contains the details of the invocation. Valid keys\ninclude:\n\n* *target*: reference to the function or method being invoked\n* *args*: positional arguments to func\n* *kwargs*: keyword arguments to func\n* *tries*: number of invocation tries so far\n* *elapsed*: elapsed time in seconds so far\n* *wait*: seconds to wait (``on_backoff`` handler only)\n* *value*: value triggering backoff (``on_predicate`` decorator only)\n\nA handler which prints the details of the backoff event could be\nimplemented like so:\n\n.. code-block:: python\n\n    def backoff_hdlr(details):\n        print (\"Backing off {wait:0.1f} seconds afters {tries} tries \"\n               \"calling function {target} with args {args} and kwargs \"\n               \"{kwargs}\".format(**details))\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException,\n                          on_backoff=backoff_hdlr)\n    def get_url(url):\n        return requests.get(url)\n\n**Multiple handlers per event type**\n\nIn all cases, iterables of handler functions are also accepted, which\nare called in turn. For example, you might provide a simple list of\nhandler functions as the value of the ``on_backoff`` keyword arg:\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo,\n                          requests.exceptions.RequestException,\n                          on_backoff=[backoff_hdlr1, backoff_hdlr2])\n    def get_url(url):\n        return requests.get(url)\n\n**Getting exception info**\n\nIn the case of the ``on_exception`` decorator, all ``on_backoff`` and\n``on_giveup`` handlers are called from within the except block for the\nexception being handled. Therefore exception info is available to the\nhandler functions via the python standard library, specifically\n``sys.exc_info()`` or the ``traceback`` module.\n\nAsynchronous code\n-----------------\n\nBackoff supports asynchronous execution in Python 3.5 and above.\n\nTo use backoff in asynchronous code based on\n`asyncio <https://docs.python.org/3/library/asyncio.html>`_\nyou simply need to apply ``backoff.on_exception`` or ``backoff.on_predicate``\nto coroutines.\nYou can also use coroutines for the ``on_success``, ``on_backoff``, and\n``on_giveup`` event handlers, with the interface otherwise being identical.\n\nThe following examples use `aiohttp <https://aiohttp.readthedocs.io/>`_\nasynchronous HTTP client/server library.\n\n.. code-block:: python\n\n    @backoff.on_exception(backoff.expo, aiohttp.ClientError, max_time=60)\n    async def get_url(url):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                return await response.text()\n\nLogging configuration\n---------------------\n\nBy default, backoff and retry attempts are logged to the 'backoff'\nlogger. By default, this logger is configured with a NullHandler, so\nthere will be nothing output unless you configure a handler.\nProgrammatically, this might be accomplished with something as simple\nas:\n\n.. code-block:: python\n\n    logging.getLogger('backoff').addHandler(logging.StreamHandler())\n\nThe default logging level is INFO, which corresponds to logging\nanytime a retry event occurs. If you would instead like to log\nonly when a giveup event occurs, set the logger level to ERROR.\n\n.. code-block:: python\n\n    logging.getLogger('backoff').setLevel(logging.ERROR)\n\nIt is also possible to specify an alternate logger with the ``logger``\nkeyword argument.  If a string value is specified the logger will be\nlooked up by name.\n\n.. code-block:: python\n\n   @backoff.on_exception(backoff.expo,\n                         requests.exception.RequestException,\n\t\t\t logger='my_logger')\n   # ...\n\nIt is also supported to specify a Logger (or LoggerAdapter) object\ndirectly.\n\n.. code-block:: python\n\n    my_logger = logging.getLogger('my_logger')\n    my_handler = logging.StreamHandler()\n    my_logger.add_handler(my_handler)\n    my_logger.setLevel(logging.ERROR)\n\n    @backoff.on_exception(backoff.expo,\n                         requests.exception.RequestException,\n\t\t\t logger=my_logger)\n    # ...\n\nDefault logging can be disabled all together by specifying\n``logger=None``. In this case, if desired alternative logging behavior\ncould be defined by using custom event handlers.\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/litl/backoff", "keywords": "retry,backoff,decorators", "license": "MIT", "maintainer": "Bob Green", "maintainer_email": "rgreen@goscoutgo.com", "name": "backoff", "package_url": "https://pypi.org/project/backoff/", "platform": "", "project_url": "https://pypi.org/project/backoff/", "project_urls": {"Homepage": "https://github.com/litl/backoff", "Repository": "https://github.com/litl/backoff"}, "release_url": "https://pypi.org/project/backoff/1.10.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Function decoration for backoff and retry", "version": "1.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"backoff\">\n<h2>backoff</h2>\n<a href=\"https://travis-ci.org/litl/backoff?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/litl/backoff.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb695a30cace15fdf6698c255c757ffbc593d324/68747470733a2f2f7472617669732d63692e6f72672f6c69746c2f6261636b6f66662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/litl/backoff?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/litl/backoff/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76492703c2e4a99e1826f462c716c8641e3bd9de/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6c69746c2f6261636b6f66662f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/backoff\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/backoff.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9299c22e7633244069cf2d7b18014f14a6208d5d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6261636b6f66662e737667\"></a>\n<p><strong>Function decoration for backoff and retry</strong></p>\n<p>This module provides function decorators which can be used to wrap a\nfunction such that it will be retried until some condition is met. It\nis meant to be of use when accessing unreliable resources with the\npotential for intermittent failures i.e. network resources and external\nAPIs. Somewhat more generally, it may also be of use for dynamically\npolling resources for externally generated content.</p>\n<p>Decorators support both regular functions for synchronous code and\n<a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a>\u2019s coroutines\nfor asynchronous code.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Since Kenneth Reitz\u2019s <a href=\"http://python-requests.org\" rel=\"nofollow\">requests</a> module\nhas become a defacto standard for synchronous HTTP clients in Python,\nnetworking examples below are written using it, but it is in no way required\nby the backoff module.</p>\n<div id=\"backoff-on-exception\">\n<h3>@backoff.on_exception</h3>\n<p>The <tt>on_exception</tt> decorator is used to retry when a specified exception\nis raised. Here\u2019s an example using exponential backoff when any\n<tt>requests</tt> exception is raised:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>The decorator will also accept a tuple of exceptions for cases where\nthe same backoff behavior is desired for more than one exception type:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">Timeout</span><span class=\"p\">,</span>\n                       <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Give Up Conditions</strong></p>\n<p>Optional keyword arguments can specify conditions under which to give\nup.</p>\n<p>The keyword argument <tt>max_time</tt> specifies the maximum amount\nof total time in seconds that can elapse before giving up.</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>Keyword argument <tt>max_tries</tt> specifies the maximum number of calls\nto make to the target function before giving up.</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_tries</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                      <span class=\"n\">jitter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>In some cases the raised exception instance itself may need to be\ninspected in order to determine if it is a retryable condition. The\n<tt>giveup</tt> keyword arg can be used to specify a function which accepts\nthe exception and returns a truthy value if the exception should not\nbe retried:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">fatal_code</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">400</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">500</span>\n\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n                      <span class=\"n\">giveup</span><span class=\"o\">=</span><span class=\"n\">fatal_code</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>When a give up event occurs, the exception in question is reraised\nand so code calling an <cite>on_exception</cite>-decorated function may still\nneed to do exception handling.</p>\n</div>\n<div id=\"backoff-on-predicate\">\n<h3>@backoff.on_predicate</h3>\n<p>The <tt>on_predicate</tt> decorator is used to retry when a particular\ncondition is true of the return value of the target function.  This may\nbe useful when polling a resource for externally generated content.</p>\n<p>Here\u2019s an example which uses a fibonacci sequence backoff when the\nreturn value of the target function is the empty list:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_predicate</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">fibo</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"p\">[],</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">poll_for_messages</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>Extra keyword arguments are passed when initializing the\nwait generator, so the <tt>max_value</tt> param above is passed as a keyword\narg when initializing the fibo generator.</p>\n<p>When not specified, the predicate param defaults to the falsey test,\nso the above can more concisely be written:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_predicate</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">fibo</span><span class=\"p\">,</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">poll_for_message</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>More simply, a function which continues polling every second until it\ngets a non-falsey result could be defined like like this:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_predicate</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">poll_for_message</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"jitter\">\n<h3>Jitter</h3>\n<p>A jitter algorithm can be supplied with the <tt>jitter</tt> keyword arg to\neither of the backoff decorators. This argument should be a function\naccepting the original unadulterated backoff value and returning it\u2019s\njittered counterpart.</p>\n<p>As of version 1.2, the default jitter function <tt>backoff.full_jitter</tt>\nimplements the \u2018Full Jitter\u2019 algorithm as defined in the AWS\nArchitecture Blog\u2019s <a href=\"https://www.awsarchitectureblog.com/2015/03/backoff.html\" rel=\"nofollow\">Exponential Backoff And Jitter</a> post.\nNote that with this algorithm, the time yielded by the wait generator\nis actually the <em>maximum</em> amount of time to wait.</p>\n<p>Previous versions of backoff defaulted to adding some random number of\nmilliseconds (up to 1s) to the raw sleep value. If desired, this\nbehavior is now available as <tt>backoff.random_jitter</tt>.</p>\n</div>\n<div id=\"using-multiple-decorators\">\n<h3>Using multiple decorators</h3>\n<p>The backoff decorators may also be combined to specify different\nbackoff behavior for different cases:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_predicate</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">fibo</span><span class=\"p\">,</span> <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">HTTPError</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">Timeout</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">poll_for_message</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"runtime-configuration\">\n<h3>Runtime Configuration</h3>\n<p>The decorator functions <tt>on_exception</tt> and <tt>on_predicate</tt> are\ngenerally evaluated at import time. This is fine when the keyword args\nare passed as constant values, but suppose we want to consult a\ndictionary with configuration options that only become available at\nruntime. The relevant values are not available at import time. Instead,\ndecorator functions can be passed callables which are evaluated at\nruntime to obtain the value:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">lookup_max_time</span><span class=\"p\">():</span>\n    <span class=\"c1\"># pretend we have a global reference to 'app' here</span>\n    <span class=\"c1\"># and that it has a dictionary-like 'config' property</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"BACKOFF_MAX_TIME\"</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"ne\">ValueError</span><span class=\"p\">,</span>\n                      <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"n\">lookup_max_time</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"event-handlers\">\n<h3>Event handlers</h3>\n<p>Both backoff decorators optionally accept event handler functions\nusing the keyword arguments <tt>on_success</tt>, <tt>on_backoff</tt>, and <tt>on_giveup</tt>.\nThis may be useful in reporting statistics or performing other custom\nlogging.</p>\n<p>Handlers must be callables with a unary signature accepting a dict\nargument. This dict contains the details of the invocation. Valid keys\ninclude:</p>\n<ul>\n<li><em>target</em>: reference to the function or method being invoked</li>\n<li><em>args</em>: positional arguments to func</li>\n<li><em>kwargs</em>: keyword arguments to func</li>\n<li><em>tries</em>: number of invocation tries so far</li>\n<li><em>elapsed</em>: elapsed time in seconds so far</li>\n<li><em>wait</em>: seconds to wait (<tt>on_backoff</tt> handler only)</li>\n<li><em>value</em>: value triggering backoff (<tt>on_predicate</tt> decorator only)</li>\n</ul>\n<p>A handler which prints the details of the backoff event could be\nimplemented like so:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">backoff_hdlr</span><span class=\"p\">(</span><span class=\"n\">details</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"Backing off </span><span class=\"si\">{wait:0.1f}</span><span class=\"s2\"> seconds afters </span><span class=\"si\">{tries}</span><span class=\"s2\"> tries \"</span>\n           <span class=\"s2\">\"calling function </span><span class=\"si\">{target}</span><span class=\"s2\"> with args </span><span class=\"si\">{args}</span><span class=\"s2\"> and kwargs \"</span>\n           <span class=\"s2\">\"</span><span class=\"si\">{kwargs}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">details</span><span class=\"p\">))</span>\n\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">on_backoff</span><span class=\"o\">=</span><span class=\"n\">backoff_hdlr</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Multiple handlers per event type</strong></p>\n<p>In all cases, iterables of handler functions are also accepted, which\nare called in turn. For example, you might provide a simple list of\nhandler functions as the value of the <tt>on_backoff</tt> keyword arg:</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">on_backoff</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">backoff_hdlr1</span><span class=\"p\">,</span> <span class=\"n\">backoff_hdlr2</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Getting exception info</strong></p>\n<p>In the case of the <tt>on_exception</tt> decorator, all <tt>on_backoff</tt> and\n<tt>on_giveup</tt> handlers are called from within the except block for the\nexception being handled. Therefore exception info is available to the\nhandler functions via the python standard library, specifically\n<tt>sys.exc_info()</tt> or the <tt>traceback</tt> module.</p>\n</div>\n<div id=\"asynchronous-code\">\n<h3>Asynchronous code</h3>\n<p>Backoff supports asynchronous execution in Python 3.5 and above.</p>\n<p>To use backoff in asynchronous code based on\n<a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a>\nyou simply need to apply <tt>backoff.on_exception</tt> or <tt>backoff.on_predicate</tt>\nto coroutines.\nYou can also use coroutines for the <tt>on_success</tt>, <tt>on_backoff</tt>, and\n<tt>on_giveup</tt> event handlers, with the interface otherwise being identical.</p>\n<p>The following examples use <a href=\"https://aiohttp.readthedocs.io/\" rel=\"nofollow\">aiohttp</a>\nasynchronous HTTP client/server library.</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientError</span><span class=\"p\">,</span> <span class=\"n\">max_time</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"logging-configuration\">\n<h3>Logging configuration</h3>\n<p>By default, backoff and retry attempts are logged to the \u2018backoff\u2019\nlogger. By default, this logger is configured with a NullHandler, so\nthere will be nothing output unless you configure a handler.\nProgrammatically, this might be accomplished with something as simple\nas:</p>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'backoff'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n</pre>\n<p>The default logging level is INFO, which corresponds to logging\nanytime a retry event occurs. If you would instead like to log\nonly when a giveup event occurs, set the logger level to ERROR.</p>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'backoff'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to specify an alternate logger with the <tt>logger</tt>\nkeyword argument.  If a string value is specified the logger will be\nlooked up by name.</p>\n<pre><span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                      <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                      <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"s1\">'my_logger'</span><span class=\"p\">)</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p>It is also supported to specify a Logger (or LoggerAdapter) object\ndirectly.</p>\n<pre><span class=\"n\">my_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_logger'</span><span class=\"p\">)</span>\n<span class=\"n\">my_handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">my_logger</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">my_handler</span><span class=\"p\">)</span>\n<span class=\"n\">my_logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@backoff</span><span class=\"o\">.</span><span class=\"n\">on_exception</span><span class=\"p\">(</span><span class=\"n\">backoff</span><span class=\"o\">.</span><span class=\"n\">expo</span><span class=\"p\">,</span>\n                     <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">RequestException</span><span class=\"p\">,</span>\n                     <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">my_logger</span><span class=\"p\">)</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p>Default logging can be disabled all together by specifying\n<tt>logger=None</tt>. In this case, if desired alternative logging behavior\ncould be defined by using custom event handlers.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6259586, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "301de36460c25aeba204c00982f31864", "sha256": "06023112ec474e6e5feebf90a5c5494aa50c658abdc14cfd24f6e4d2397bf386"}, "downloads": -1, "filename": "backoff-1.0.tar.gz", "has_sig": false, "md5_digest": "301de36460c25aeba204c00982f31864", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3891, "upload_time": "2014-05-13T18:21:08", "upload_time_iso_8601": "2014-05-13T18:21:08.463820Z", "url": "https://files.pythonhosted.org/packages/23/2f/ea370996be40889c8edd61fa2e04dab22e40815f7bed57f16c7d3275dd1e/backoff-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d4990742571d714581d3de83e7999f9d", "sha256": "608c175d4fab67dfe06f692c4ba3214f59a032a1f5bae11684a74fe7d6a5b75f"}, "downloads": -1, "filename": "backoff-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d4990742571d714581d3de83e7999f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3898, "upload_time": "2014-05-14T12:09:37", "upload_time_iso_8601": "2014-05-14T12:09:37.565365Z", "url": "https://files.pythonhosted.org/packages/09/64/2c959b9ebb49a686b5ed63d44fe44e04c29411903dcf1c8e83d78d5a21d9/backoff-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9d8246178c7b600a7bd48d4ccf8634a8", "sha256": "d524530782f8a9cc7fcb510a16a4e89c83284cd440507a00b30275ac574ccd48"}, "downloads": -1, "filename": "backoff-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9d8246178c7b600a7bd48d4ccf8634a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3912, "upload_time": "2014-05-21T20:31:51", "upload_time_iso_8601": "2014-05-21T20:31:51.982250Z", "url": "https://files.pythonhosted.org/packages/8d/00/1314305d8380677bbf10104cd799a3d3044ae72b33e21a39bedf7976ca1f/backoff-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5f8f94dc51b0855f3679faa98be2bf67", "sha256": "c538bc8b518a3ea06fd06830548b41cd253271967a79046341fe5bc2204222b7"}, "downloads": -1, "filename": "backoff-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5f8f94dc51b0855f3679faa98be2bf67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3913, "upload_time": "2014-06-05T20:16:03", "upload_time_iso_8601": "2014-06-05T20:16:03.562218Z", "url": "https://files.pythonhosted.org/packages/4f/97/314cfe7fa0e2a98fe72d87ff045923ec7903d25da5b583e9fad1834e6aec/backoff-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "c28d195ca18f6b25d7059bf37692f2de", "sha256": "5787dae13d4977687a27916bcc9f0b8b2d61ff4cf1367415715beef15f365385"}, "downloads": -1, "filename": "backoff-1.0.4.tar.gz", "has_sig": false, "md5_digest": "c28d195ca18f6b25d7059bf37692f2de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3718, "upload_time": "2014-08-12T18:20:51", "upload_time_iso_8601": "2014-08-12T18:20:51.970431Z", "url": "https://files.pythonhosted.org/packages/37/3d/3e206f25efdf7b07687ba2b885549a2bc09bed90308858043ed7b9696e94/backoff-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "dd336ef8dea19060df747dadca919ca6", "sha256": "64f3a5625ef15b438e390edec9621c837a0370149e8f6a2d9cc6eca23f6dabff"}, "downloads": -1, "filename": "backoff-1.0.5.tar.gz", "has_sig": false, "md5_digest": "dd336ef8dea19060df747dadca919ca6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4163, "upload_time": "2015-02-03T19:06:29", "upload_time_iso_8601": "2015-02-03T19:06:29.316106Z", "url": "https://files.pythonhosted.org/packages/02/0f/d62e5735bd717e1af7b20c8b9fe4a9ceb431789840c6c628dc6feabb5fc5/backoff-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "5f0ca4a8ac39789e3ae66f0e361cf080", "sha256": "f936dd40a66ddffa7d9b7bcd79d6fda9799c5267cd827cd01dc812cd39f7061f"}, "downloads": -1, "filename": "backoff-1.0.6.tar.gz", "has_sig": false, "md5_digest": "5f0ca4a8ac39789e3ae66f0e361cf080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4184, "upload_time": "2015-02-10T16:37:10", "upload_time_iso_8601": "2015-02-10T16:37:10.007660Z", "url": "https://files.pythonhosted.org/packages/15/09/4e12f130e1ca56e52c65e1671c2b7a07344e47afbf2ba90877e8e5273bda/backoff-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "0f22c7f97d758252d31491171e6987a9", "sha256": "06100cfca49c2d5f570bbbf696a74e1d583ef0bd480633428196b247d9b48fa2"}, "downloads": -1, "filename": "backoff-1.0.7.tar.gz", "has_sig": false, "md5_digest": "0f22c7f97d758252d31491171e6987a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4127, "upload_time": "2015-02-10T17:07:07", "upload_time_iso_8601": "2015-02-10T17:07:07.900003Z", "url": "https://files.pythonhosted.org/packages/09/c2/eecd0063b4a1636e7d424db4843c746142e539974efbcc449c832bd8adb2/backoff-1.0.7.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "91a1761a314da130f210b3b9acbfc66a", "sha256": "0f71e033895a461743ea6c54272555e287d1ccb062cd84325d9524a416c9a7cd"}, "downloads": -1, "filename": "backoff-1.1.0.tar.gz", "has_sig": false, "md5_digest": "91a1761a314da130f210b3b9acbfc66a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5475, "upload_time": "2015-12-08T16:26:23", "upload_time_iso_8601": "2015-12-08T16:26:23.590339Z", "url": "https://files.pythonhosted.org/packages/c0/74/59b2e9f008e072ef2edceab0eeb360d37d23de0734353ed9194a4710b021/backoff-1.1.0.tar.gz", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "10854f383f44ff0650bf59b7eb017bb6", "sha256": "5e73e2cbe780e1915a204799dba0a01896f45f4385e636bcca7a0614d879d0cd"}, "downloads": -1, "filename": "backoff-1.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "10854f383f44ff0650bf59b7eb017bb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 31022, "upload_time": "2019-12-07T21:07:23", "upload_time_iso_8601": "2019-12-07T21:07:23.304659Z", "url": "https://files.pythonhosted.org/packages/f0/32/c5dd4f4b0746e9ec05ace2a5045c1fc375ae67ee94355344ad6c7005fd87/backoff-1.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e1ae4293fb6e5962083ca6de4f4249a", "sha256": "b8fba021fac74055ac05eb7c7bfce4723aedde6cd0a504e5326bcb0bdd6d19a4"}, "downloads": -1, "filename": "backoff-1.10.0.tar.gz", "has_sig": false, "md5_digest": "5e1ae4293fb6e5962083ca6de4f4249a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13652, "upload_time": "2019-12-07T21:07:25", "upload_time_iso_8601": "2019-12-07T21:07:25.377140Z", "url": "https://files.pythonhosted.org/packages/55/52/5c209d0e9f1ad857573be96b285626d5e081d86dd50d7617ff0874685dd4/backoff-1.10.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "fc0385f9560311a2927d29617362f7f8", "sha256": "ce1008c25ada98f55d6035264b1bac66b0a1c5d09d25ae1ada7fc7a76297a9f4"}, "downloads": -1, "filename": "backoff-1.2.0.tar.gz", "has_sig": false, "md5_digest": "fc0385f9560311a2927d29617362f7f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3777, "upload_time": "2016-05-27T12:51:33", "upload_time_iso_8601": "2016-05-27T12:51:33.867971Z", "url": "https://files.pythonhosted.org/packages/f5/d3/5d615dcd84f73cf1a2c9adaa19c5f833e535bb65c0f91aab962aa89dd4c8/backoff-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7bbdbb5d6baee5cbbcff30a9736c22c8", "sha256": "9980b16ad61736d8692cd93960021afeea551bb07795abdace2c8d06bfdcc993"}, "downloads": -1, "filename": "backoff-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7bbdbb5d6baee5cbbcff30a9736c22c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3808, "upload_time": "2016-05-27T15:03:46", "upload_time_iso_8601": "2016-05-27T15:03:46.805879Z", "url": "https://files.pythonhosted.org/packages/24/ca/2b15c69e797182aae03b42f06d30ddc195af6ae4d616d5c3f4f1cd5d8a28/backoff-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d3abde343ecca03c91fe79617d779e50", "sha256": "8d2b7537bd62079f87e6b1d42eb64c38fb727e9156bd5a4dbaad92e75baed593"}, "downloads": -1, "filename": "backoff-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d3abde343ecca03c91fe79617d779e50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6637, "upload_time": "2016-08-08T17:42:47", "upload_time_iso_8601": "2016-08-08T17:42:47.780498Z", "url": "https://files.pythonhosted.org/packages/28/da/a31315c5e58b6b3ff032f0c27691b47189988140b1c60fd01430c17e89aa/backoff-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "1c8ec7fd57981061e577c70e88e9f5f5", "sha256": "330e2cee2525ab49c8bf7d6ec7132635479ecb164c9cc69064c8b37715ff0fad"}, "downloads": -1, "filename": "backoff-1.3.1.tar.gz", "has_sig": false, "md5_digest": "1c8ec7fd57981061e577c70e88e9f5f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7227, "upload_time": "2016-08-08T17:54:48", "upload_time_iso_8601": "2016-08-08T17:54:48.103541Z", "url": "https://files.pythonhosted.org/packages/01/f1/f552c64714ba97f193550eec2e7c6c491b99ea5709cc98ee3d822bfd662a/backoff-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "8788257e9f4354ab15fab710ef6f42d9", "sha256": "608cd3c17c7ae541fb45454cf8236271d13f3cdae932e56879f26bd737344aa8"}, "downloads": -1, "filename": "backoff-1.3.2.tar.gz", "has_sig": false, "md5_digest": "8788257e9f4354ab15fab710ef6f42d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7135, "upload_time": "2016-11-18T15:07:59", "upload_time_iso_8601": "2016-11-18T15:07:59.644572Z", "url": "https://files.pythonhosted.org/packages/7a/ba/5786dfda66ee5e4d1fe09164a1e52c68cdb93205c81b8c0f22b4ccb1a1e7/backoff-1.3.2.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "ec23d322f41c4fa83182b88afaad3c68", "sha256": "cb54a7d00edbb691295058bb62ef50f9f24a300d41f2310b284282bd83f05bf7"}, "downloads": -1, "filename": "backoff-1.4.0.tar.gz", "has_sig": false, "md5_digest": "ec23d322f41c4fa83182b88afaad3c68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9068, "upload_time": "2017-02-05T14:36:35", "upload_time_iso_8601": "2017-02-05T14:36:35.648023Z", "url": "https://files.pythonhosted.org/packages/0e/56/0a16494223db7a3c7df5018c54f8681cdbbccde38d069b0b2c2ef5380ec1/backoff-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "a06188be0b366ab154978550454ad201", "sha256": "3734d59e7be395686369d79273666d4748b4b65ba04df1084b2714d5a7fabdd1"}, "downloads": -1, "filename": "backoff-1.4.1.tar.gz", "has_sig": false, "md5_digest": "a06188be0b366ab154978550454ad201", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9139, "upload_time": "2017-04-21T14:24:45", "upload_time_iso_8601": "2017-04-21T14:24:45.317279Z", "url": "https://files.pythonhosted.org/packages/f8/96/8ee92999fb576b2ce40abb6deebf092e8a803364b8e260656dadfd3b0b40/backoff-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "4ed952cea85ca5fa506ca65de1652431", "sha256": "55c4ee40582b9cf42ad366e9a06b79e8c7e6678d10b6266ec63e2ea11ef11864"}, "downloads": -1, "filename": "backoff-1.4.2.tar.gz", "has_sig": false, "md5_digest": "4ed952cea85ca5fa506ca65de1652431", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9153, "upload_time": "2017-04-25T16:33:03", "upload_time_iso_8601": "2017-04-25T16:33:03.901427Z", "url": "https://files.pythonhosted.org/packages/a0/89/469975b03b4e08ce1ab77ea047a5a363a6640ff0c2a86442918bd917beb5/backoff-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "d9978f2e812412812800b09b78cc5dbc", "sha256": "bc8ef5a3b0cc7e90d56dd4d9d385557ada1a6dbdfcdd2b44038beeabae119038"}, "downloads": -1, "filename": "backoff-1.4.3.tar.gz", "has_sig": false, "md5_digest": "d9978f2e812412812800b09b78cc5dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9887, "upload_time": "2017-05-22T16:32:58", "upload_time_iso_8601": "2017-05-22T16:32:58.882179Z", "url": "https://files.pythonhosted.org/packages/e8/f6/c77665cefc8c943c53857909c41cd7efe685ae02029762703e99f18ee7b3/backoff-1.4.3.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "8cc9b2a82bab4ed2453a47bb1fcd6f66", "sha256": "c1402291d7faca70ac3f2f7241e8942eb527f94945c7b2293030cfb6ce5a7805"}, "downloads": -1, "filename": "backoff-1.5.0.tar.gz", "has_sig": false, "md5_digest": "8cc9b2a82bab4ed2453a47bb1fcd6f66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10452, "upload_time": "2018-04-11T15:03:41", "upload_time_iso_8601": "2018-04-11T15:03:41.998150Z", "url": "https://files.pythonhosted.org/packages/99/c2/e8309fc7a635132df5731ec52a95bf9edee9d0214cafef22d2855a99748e/backoff-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "bf7d40200f3edac6a4d4fd7ea98af0bd", "sha256": "e3df718a774c456a516f7c88516e47a9f2d02aa562943cdfa274c439e9dbbfde"}, "downloads": -1, "filename": "backoff-1.6.0.tar.gz", "has_sig": false, "md5_digest": "bf7d40200f3edac6a4d4fd7ea98af0bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10474, "upload_time": "2018-07-14T13:36:53", "upload_time_iso_8601": "2018-07-14T13:36:53.827991Z", "url": "https://files.pythonhosted.org/packages/e7/00/1aa1ffe4668ddee7a381144bcf953835500387301a3202465e023ea44bcb/backoff-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "33cdc848fd90a3fa7be6abe8aff37afd", "sha256": "7ca32eab6fde2a6aff52f57c4f63fc704aac43fecfc210ff68972388693591ba"}, "downloads": -1, "filename": "backoff-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33cdc848fd90a3fa7be6abe8aff37afd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 42347, "upload_time": "2018-11-23T21:26:09", "upload_time_iso_8601": "2018-11-23T21:26:09.209079Z", "url": "https://files.pythonhosted.org/packages/26/d7/af79cf3976fd641c0ba928c68a1dca989d6f1b2c972338889bb623debef8/backoff-1.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f8541363822edede5bb6aa3a8287b64", "sha256": "b3a19ad74302fd8e8307239526b57bb338183ac690912d3fcdaa9f8ecff83a3d"}, "downloads": -1, "filename": "backoff-1.7.0.tar.gz", "has_sig": false, "md5_digest": "0f8541363822edede5bb6aa3a8287b64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 13241, "upload_time": "2018-11-23T21:26:10", "upload_time_iso_8601": "2018-11-23T21:26:10.951608Z", "url": "https://files.pythonhosted.org/packages/09/ab/35f0f18914f006104912e594b9d7fbbc1aa6868b8834b4ef1ace318cb61f/backoff-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "85c6cec669653c68cd8ac6eed7511564", "sha256": "a2d9e32819829be681e2a1264d55172e7ddbb409b93d7388b442b894f630ba33"}, "downloads": -1, "filename": "backoff-1.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85c6cec669653c68cd8ac6eed7511564", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 42258, "upload_time": "2018-11-27T20:58:20", "upload_time_iso_8601": "2018-11-27T20:58:20.598939Z", "url": "https://files.pythonhosted.org/packages/97/c2/96953dbfea5b46370edfcacb2ec2e02463061e9aff7370d0978bc25013ba/backoff-1.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "feda1941c307890ea2dab92448881f2a", "sha256": "dde694bf8df7478956e9ebc1fa1de48f04ba22de6798cb5e1a237320336fc0a8"}, "downloads": -1, "filename": "backoff-1.7.1.tar.gz", "has_sig": false, "md5_digest": "feda1941c307890ea2dab92448881f2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 13124, "upload_time": "2018-11-27T20:58:22", "upload_time_iso_8601": "2018-11-27T20:58:22.497847Z", "url": "https://files.pythonhosted.org/packages/84/1d/1b7c1502d91f86c3bd38f693c9c037bf45d2684eaf071426da27a8a2761c/backoff-1.7.1.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "ac2d777fe26bad4c79b1673e09e0e93d", "sha256": "d340bb6f36d025c04214b8925112d8456970e5f28dda46e4f1133bf5c622cb0a"}, "downloads": -1, "filename": "backoff-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac2d777fe26bad4c79b1673e09e0e93d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 45447, "upload_time": "2018-12-21T05:37:27", "upload_time_iso_8601": "2018-12-21T05:37:27.263374Z", "url": "https://files.pythonhosted.org/packages/00/b9/b045f0fe02aa80cefc5a6921d5f7674db58c1658d0e4b888562c15ef6aba/backoff-1.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b4bb276fb5350c3bc9d472accffb6a4", "sha256": "c7187f15339e775aec926dc6e5e42f8a3ad7d3c2b9a6ecae7b535000f70cd838"}, "downloads": -1, "filename": "backoff-1.8.0.tar.gz", "has_sig": false, "md5_digest": "9b4bb276fb5350c3bc9d472accffb6a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 13984, "upload_time": "2018-12-21T05:37:29", "upload_time_iso_8601": "2018-12-21T05:37:29.484764Z", "url": "https://files.pythonhosted.org/packages/37/0b/e6d0e14cf95039fbc3b0b0e8370e1cec7bd6294d05dcdb669d0edbfde102/backoff-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "44b49883b28750086c0f82e04b0aefdf", "sha256": "53531e45432b18795f808c28dd9c5a4b32fe44aa713780ea892f07c3e6b36c11"}, "downloads": -1, "filename": "backoff-1.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "44b49883b28750086c0f82e04b0aefdf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 17706, "upload_time": "2019-10-11T13:09:28", "upload_time_iso_8601": "2019-10-11T13:09:28.782783Z", "url": "https://files.pythonhosted.org/packages/a9/3b/daf9e1fe004e132aab6a96cf2a2e27a772c088f8addeee1d3fc0cf0d2dec/backoff-1.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d9c7150d38c8034d52dd61451c1fed2", "sha256": "3f1ed23d36c65ec16c143e432b12c19aaf12ed791317b91ab50dd14ac6255a3c"}, "downloads": -1, "filename": "backoff-1.8.1.tar.gz", "has_sig": false, "md5_digest": "1d9c7150d38c8034d52dd61451c1fed2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14953, "upload_time": "2019-10-11T13:09:31", "upload_time_iso_8601": "2019-10-11T13:09:31.026777Z", "url": "https://files.pythonhosted.org/packages/93/35/ccf4113a159b810f53b6c041529726159a89787b26e75b7b801c646adb99/backoff-1.8.1.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "0d49ad762c2f6e14cd44df5c37fb520d", "sha256": "3dd7a2da7ffc9d358bf383bbc85a015c4f5b83edfec4673da4ebf24d59602f3f"}, "downloads": -1, "filename": "backoff-1.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0d49ad762c2f6e14cd44df5c37fb520d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 17721, "upload_time": "2019-11-16T13:45:43", "upload_time_iso_8601": "2019-11-16T13:45:43.552589Z", "url": "https://files.pythonhosted.org/packages/7a/8a/e687eddbfaffadb216bab0a80532ffcc4fae5ed7731d7d03c9e6ff21af5d/backoff-1.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99803746fde5c7ca6ae27cf525d3d9cc", "sha256": "dc19c51cb9d67ec2ae2650d2bcaf5926bc53523b664201dc1db2d2b0a1a41a9d"}, "downloads": -1, "filename": "backoff-1.9.0.tar.gz", "has_sig": false, "md5_digest": "99803746fde5c7ca6ae27cf525d3d9cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 15011, "upload_time": "2019-11-16T13:45:45", "upload_time_iso_8601": "2019-11-16T13:45:45.542670Z", "url": "https://files.pythonhosted.org/packages/7c/99/0d2acada9a5c971788add6f85e94f5937fd68565dbbef721db9d29fe465b/backoff-1.9.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "b3703220b6f2e18450cf7a80dfa73a8f", "sha256": "b87511d94fe2fae567f4ab3b5d7fb447979ed002fe21358e6fa988b4a6533958"}, "downloads": -1, "filename": "backoff-1.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b3703220b6f2e18450cf7a80dfa73a8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 25750, "upload_time": "2019-11-19T01:56:00", "upload_time_iso_8601": "2019-11-19T01:56:00.305752Z", "url": "https://files.pythonhosted.org/packages/97/6a/1460165ff766044915017557edd28b3b621ef7579f0c14709ad1e6d4a40d/backoff-1.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4808fd4a9095dfeee49b5992919bf24", "sha256": "ff9c478499fac60075fd895cccc954dcfd1c23281af056dec5cc4731c6f5e070"}, "downloads": -1, "filename": "backoff-1.9.1.tar.gz", "has_sig": false, "md5_digest": "a4808fd4a9095dfeee49b5992919bf24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 20774, "upload_time": "2019-11-19T01:56:01", "upload_time_iso_8601": "2019-11-19T01:56:01.847510Z", "url": "https://files.pythonhosted.org/packages/5e/5b/b26f103ee3de2fd92bd88f2d976a4aaf67ea35a637f0079fedea729ad14e/backoff-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "2ce0034df913a2f3a28e1865af9d7c0c", "sha256": "76224b65f1808fd61dc14129e3e9de50cb1f7efaef608b657f7b108863ee15a7"}, "downloads": -1, "filename": "backoff-1.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2ce0034df913a2f3a28e1865af9d7c0c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13121, "upload_time": "2019-11-20T02:27:49", "upload_time_iso_8601": "2019-11-20T02:27:49.152111Z", "url": "https://files.pythonhosted.org/packages/8a/87/e9b3cba3a27e14a90e913a13122bb235f7b0c1215b022d709bcde963b367/backoff-1.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f2d8aaee760b3c5c8ef88913928384c", "sha256": "794e9765eb4acb5014c7e1e1fc4f69abc4d176a7c2b6753b8dae2f2e69af4df9"}, "downloads": -1, "filename": "backoff-1.9.2.tar.gz", "has_sig": false, "md5_digest": "7f2d8aaee760b3c5c8ef88913928384c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14853, "upload_time": "2019-11-20T02:27:50", "upload_time_iso_8601": "2019-11-20T02:27:50.711579Z", "url": "https://files.pythonhosted.org/packages/76/a4/bfbbbc7d0530c68318b0100715ec35aea3069dd4e87df92b60c4dba863ac/backoff-1.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10854f383f44ff0650bf59b7eb017bb6", "sha256": "5e73e2cbe780e1915a204799dba0a01896f45f4385e636bcca7a0614d879d0cd"}, "downloads": -1, "filename": "backoff-1.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "10854f383f44ff0650bf59b7eb017bb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 31022, "upload_time": "2019-12-07T21:07:23", "upload_time_iso_8601": "2019-12-07T21:07:23.304659Z", "url": "https://files.pythonhosted.org/packages/f0/32/c5dd4f4b0746e9ec05ace2a5045c1fc375ae67ee94355344ad6c7005fd87/backoff-1.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e1ae4293fb6e5962083ca6de4f4249a", "sha256": "b8fba021fac74055ac05eb7c7bfce4723aedde6cd0a504e5326bcb0bdd6d19a4"}, "downloads": -1, "filename": "backoff-1.10.0.tar.gz", "has_sig": false, "md5_digest": "5e1ae4293fb6e5962083ca6de4f4249a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13652, "upload_time": "2019-12-07T21:07:25", "upload_time_iso_8601": "2019-12-07T21:07:25.377140Z", "url": "https://files.pythonhosted.org/packages/55/52/5c209d0e9f1ad857573be96b285626d5e081d86dd50d7617ff0874685dd4/backoff-1.10.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:08 2020"}