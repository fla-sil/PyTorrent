{"info": {"author": "craft ai", "author_email": "contact@craft.ai", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# **craft ai** API python client #\n\n[![PyPI](https://img.shields.io/pypi/v/craft-ai.svg?style=flat-square)](https://pypi.python.org/pypi?:action=display&name=craft-ai) [![Build Status](https://img.shields.io/travis/craft-ai/craft-ai-client-python/master.svg?style=flat-square)](https://travis-ci.org/craft-ai/craft-ai-client-python) [![License](https://img.shields.io/badge/license-BSD--3--Clause-42358A.svg?style=flat-square)](LICENSE) [![python](https://img.shields.io/pypi/pyversions/craft-ai.svg?style=flat-square)](https://pypi.python.org/pypi?:action=display&name=craft-ai)\n\n[**craft ai**'s Explainable AI API](http://craft.ai) enables product & operational teams to quickly deploy and run explainable AIs. craft ai decodes your data streams to deliver self-learning services.\n\n## Get Started!\n\n### 0 - Signup\n\nIf you're reading this you are probably already registered with **craft ai**, if not, head to [`https://beta.craft.ai/signup`](https://beta.craft.ai/signup).\n\n### 1 - Create a project\n\nOnce your account is setup, let's create your first **project**! Go in the 'Projects' tab in the **craft ai** control center at [`https://beta.craft.ai/inspector`](https://beta.craft.ai/inspector), and press **Create a project**.\n\nOnce it's done, you can click on your newly created project to retrieve its tokens. There are two types of tokens: **read** and **write**. You'll need the **write** token to create, update and delete your agent.\n\n### 2 - Setup\n\n#### Install ####\n\n#### [PIP](https://pypi.python.org/pypi/pip/) / [PyPI](https://pypi.python.org/pypi) ####\n\nLet's first install the package from pip.\n\n```sh\npip install --upgrade craft-ai\n```\n_Depending on your setup you may need to use `pip3` or `pipenv` instead of `pip`._\n\nThen import it in your code\n\n```python\nimport craft_ai\n```\n> This client also provides helpers to use it in conjuction with [pandas](#pandas-support)\n\n#### Initialize ####\n\n```python\nclient = craft_ai.Client({\n  \"token\": \"{token}\"\n})\n```\n\n### 3 - Create an agent\n\n**craft ai** is based on the concept of **agents**. In most use cases, one agent is created per user or per device.\n\nAn agent is an independent module that stores the history of the **context** of its user or device's context, and learns which **decision** to take based on the evolution of this context in the form of a **decision tree**.\n\nIn this example, we will create an agent that learns the **decision model** of a light bulb based on the time of the day and the number of people in the room. This dataset is treated as continuous context updates. If your data is more like events, please refer to the [Advanced Configuration section](#advanced-configuration) to know how to configure your agent. Here, the agent's context has 4 properties:\n\n- `peopleCount` which is a `continuous` property,\n- `timeOfDay` which is a `time_of_day` property,\n- `timezone`, a property of type `timezone` needed to generate proper values for `timeOfDay` (cf. the [context properties type section](#context-properties-types) for further information),\n- and finally `lightbulbState` which is an `enum` property that is also the output.\n\n> :information_source: `timeOfDay` is auto-generated, you will find more information below.\n\n```python\nagent_id = \"my_first_agent\"\nconfiguration = {\n  \"context\": {\n    \"peopleCount\": {\n      \"type\": \"continuous\"\n    },\n    \"timeOfDay\": {\n      \"type\": \"time_of_day\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbState\"]\n}\n\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n```\n\nPretty straightforward to test! Open [`https://beta.craft.ai/inspector`](https://beta.craft.ai/inspector), select you project and your agent is now listed.\n\nNow, if you run that a second time, you'll get an error: the agent `'my_first_agent'` is already existing. Let's see how we can delete it before recreating it.\n\n```python\nagent_id = \"my_first_agent\"\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n```\n\n_For further information, check the ['create agent' reference documentation](#create)._\n\n### 4 - Add context operations\n\nWe have now created our first agent but it is not able to do much, yet. To learn a decision model it needs to be provided with data, in **craft ai** these are called context operations.\n\nPlease note that only value changes are sent, thus if an operation doesn't contain a value, the previous known value is used.\n\nIn the following we add 8 operations:\n\n1. The initial one sets the initial state of the agent, on July 25 2016 at 5:30, in Paris, nobody is there and the light is off;\n2. At 7:02, someone enters the room the light is turned on;\n3. At 7:15, someone else enters the room;\n4. At 7:31, the light is turned off;\n5. At 8:12, everyone leaves the room;\n6. At 19:23, 2 persons enter the room;\n7. At 22:35, the light is turned on;\n8. At 23:06, everyone leaves the room and the light is turned off.\n\n\n```python\nagent_id = \"my_first_agent\"\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = [\n  {\n    \"timestamp\": 1469410200,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"peopleCount\": 0,\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"peopleCount\": 1,\n      \"lightbulbState\": \"ON\"\n    }\n  },\n  {\n    \"timestamp\": 1469416500,\n    \"context\": {\n      \"peopleCount\": 2\n    }\n  },\n  {\n    \"timestamp\": 1469417460,\n    \"context\": {\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  {\n    \"timestamp\": 1469419920,\n    \"context\": {\n      \"peopleCount\": 0\n    }\n  },\n  {\n    \"timestamp\": 1469460180,\n    \"context\": {\n      \"peopleCount\": 2\n    }\n  },\n  {\n    \"timestamp\": 1469471700,\n    \"context\": {\n      \"lightbulbState\": \"ON\"\n    }\n  },\n  {\n    \"timestamp\": 1469473560,\n    \"context\": {\n      \"peopleCount\": 0,\n      \"lightbulbState\": \"OFF\"\n    }\n  }\n]\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n```\n\nIn real-world applications, you'll probably do the same kind of things when the agent is created and then, regularly throughout the lifetime of the agent with newer data.\n\n_For further information, check the ['add context operations' reference documentation](#add-operations)._\n\n### 5 - Compute the decision tree\n\nThe agent has acquired a context history, we can now compute a decision tree from it! A decision tree models the output, allowing us to estimate what the output would be in a given context.\n\nThe decision tree is computed at a given timestamp, which means it will consider the context history from the creation of this agent up to this moment. Let's first try to compute the decision tree at midnight on July 26, 2016.\n\n```python\nagent_id = \"my_first_agent\"\n\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = ...\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\ndt_timestamp = 1469476800\ndecision_tree = client.get_agent_decision_tree(agent_id, dt_timestamp)\nprint(\"The full decision tree at timestamp\", dt_timestamp, \"is the following:\")\nprint(decision_tree)\n\"\"\" Outputted tree is the following\n  {\n    \"_version\":\"2.0.0\",\n    \"trees\":{\n      \"lightbulbState\":{\n        \"output_values\" : [\"OFF\", \"ON\"],\n        \"children\":[\n          {\n            \"children\":[\n              {\n                \"prediction\":{\n                  \"confidence\":0.6774609088897705,\n                  \"distribution\":[0.8, 0.2],\n                  \"value\":\"OFF\",\n                  \"nb_samples\": 5\n                },\n                \"decision_rule\":{\n                  \"operand\":0.5,\n                  \"operator\":\"<\",\n                  \"property\":\"peopleCount\"\n                }\n              },\n              {\n                \"prediction\":{\n                  \"confidence\":0.8630361557006836,\n                  \"distribution\":[0.1, 0.9],\n                  \"value\":\"ON\",\n                  \"nb_samples\": 10\n                },\n                \"decision_rule\":{\n                  \"operand\":0.5,\n                  \"operator\":\">=\",\n                  \"property\":\"peopleCount\"\n                }\n              }\n            ],\n            \"decision_rule\":{\n              \"operand\":[\n                5,\n                5.6666665\n              ],\n              \"operator\":\"[in[\",\n              \"property\":\"timeOfDay\"\n            }\n          },\n          {\n            \"children\":[\n              {\n                \"prediction\":{\n                  \"confidence\":0.9947378635406494,\n                  \"distribution\":[1.0, 0.0],\n                  \"value\":\"ON\",\n                  \"nb_samples\": 10\n                },\n                \"decision_rule\":{\n                  \"operand\":[\n                    5.6666665,\n                    20.666666\n                  ],\n                  \"operator\":\"[in[\",\n                  \"property\":\"timeOfDay\"\n                }\n              },\n              {\n                \"children\":[\n                  {\n                    \"prediction\":{\n                      \"confidence\":0.969236433506012,\n                      \"distribution\":[0.95, 0.05],\n                      \"value\":\"OFF\",\n                      \"nb_samples\": 10\n                    },\n                    \"decision_rule\":{\n                      \"operand\":1,\n                      \"operator\":\"<\",\n                      \"property\":\"peopleCount\"\n                    }\n                  },\n                  {\n                    \"prediction\":{\n                      \"confidence\":0.8630361557006836,\n                      \"distribution\":[0.2, 0.8],\n                      \"value\":\"ON\",\n                      \"nb_samples\": 15\n                    },\n                    \"decision_rule\":{\n                      \"operand\":1,\n                      \"operator\":\">=\",\n                      \"property\":\"peopleCount\"\n                    }\n                  }\n                ],\n                \"decision_rule\":{\n                  \"operand\":[\n                    20.666666,\n                    5\n                  ],\n                  \"operator\":\"[in[\",\n                  \"property\":\"timeOfDay\"\n                }\n              }\n            ],\n            \"decision_rule\":{\n              \"operand\":[\n                5.6666665,\n                5\n              ],\n              \"operator\":\"[in[\",\n              \"property\":\"timeOfDay\"\n            }\n          }\n        ]\n      }\n    },\n    \"configuration\":{\n      \"time_quantum\":600,\n      \"learning_period\":9000000,\n      \"context\":{\n        \"peopleCount\":{\n          \"type\":\"continuous\"\n        },\n        \"timeOfDay\":{\n          \"type\":\"time_of_day\",\n          \"is_generated\":True\n        },\n        \"timezone\":{\n          \"type\":\"timezone\"\n        },\n        \"lightbulbState\":{\n          \"type\":\"enum\"\n        }\n      },\n      \"output\":[\n        \"lightbulbState\"\n      ]\n    }\n  }\n\"\"\"\n```\n\nTry to retrieve the tree at different timestamps to see how it gradually learns from the new operations. To visualize the trees, use the [inspector](https://beta.craft.ai/inspector)!\n\n_For further information, check the ['compute decision tree' reference documentation](#compute)._\n\n### 6 - Take a decision\n\nOnce the decision tree is computed it can be used to take a decision. In our case it is basically answering this type of question: \"What is the anticipated **state of the lightbulb** at 7:15 if there are 2 persons in the room ?\".\n\n```python\nagent_id = \"my_first_agent\"\n\nclient.delete_agent(agent_id)\nprint(\"Agent\", agent_id, \"no longer exists\")\n\nconfiguration = ...\nagent = client.create_agent(configuration, agent_id)\nprint(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\ncontext_list = ...\nclient.add_agent_operations(agent_id, context_list)\nprint(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\ndt_timestamp = 1469476800\ndecision_tree = client.get_agent_decision_tree(agent_id, dt_timestamp)\nprint(\"The decision tree at timestamp\", dt_timestamp, \"is the following:\")\nprint(decision_tree)\n\ncontext = {\n  \"timezone\": \"+02:00\",\n  \"timeOfDay\": 7.25,\n  \"peopleCount\": 2\n}\nresp = client.decide(decision_tree, context)\nprint(\"The anticipated lightbulb state is:\", resp[\"output\"][\"lightbulbState\"][\"predicted_value\"])\n```\n\n_For further information, check the ['take decision' reference documentation](#take-decision)._\n\n### Python starter kit ###\n\nIf you prefer to get started from an existing code base, the official Python starter kit can get you there! Retrieve the sources locally and follow the \"readme\" to get a fully working **Wellness Coach** example using _real-world_ data.\n\n> [:package: _Get the **craft ai** Python Starter Kit_](https://github.com/craft-ai/craft-ai-starterkit-python)\n\n## API\n\n### Project\n\n**craft ai** agents belong to **projects**. In the current version, each identified users defines a owner and can create projects for themselves, in the future we will introduce shared projects.\n\n### Configuration\n\nEach agent has a configuration defining:\n\n- the context schema, i.e. the list of property keys and their type (as defined in the following section),\n- the output properties, i.e. the list of property keys on which the agent takes decisions,\n\n> :warning: In the current version, only one output property can be provided.\n\n- the `time_quantum`, i.e. the minimum amount of time, in seconds, that is meaningful for an agent; context updates occurring faster than this quantum won't be taken into account. As a rule of thumb, you should always choose the largest value that seems right and reduce it, if necessary, after some tests.\n- the `learning_period`, i.e. the maximum amount of time, in seconds, that matters for an agent; the agent's decision model can ignore context that is older than this duration. You should generally choose the smallest value that fits this description.\n\n> :warning: if no time_quantum is specified, the default value is 600.\n\n> :warning: if no learning_period is specified, the default value is 15000 time quantums.\n\n> :warning: the maximum learning_period value is 55000 \\* time_quantum.\n\n#### Context properties types\n\n##### Base types: `enum`, `continuous` and `boolean`\n\n`enum`, `continuous` and `boolean` are the three base **craft ai** types:\n\n- an `enum` property is a string;\n- a `continuous` property is a real number.\n- a `boolean` property is a boolean value: `true` or `false`\n\n> :warning: the absolute value of a `continuous` property must be less than 10<sup>20</sup>.\n\nA base type property can be defined as *optional* if its value is likely to be unknown at some point in time and that it is to be considered as a normal behavior, and not as a missing property. You can achieve that by adding `is_optional: true` to the property definition in your configuration.\n\n> :warning: An optional property cannot be set as being an output of the agent.\n\nHere is a simple example of configuration :\n```json\n{\n  \"context\": {\n    \"timezone\": {\n      \"type\": \"enum\"\n    },\n    \"temperature\": {\n      \"type\": \"continuous\",\n      \"is_optional\": true\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbState\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\n##### Time types: `timezone`, `time_of_day`, `day_of_week`, `day_of_month` and `month_of_year`\n\n**craft ai** defines the following types related to time:\n\n- a `time_of_day` property is a real number belonging to **[0.0; 24.0[**, each value represents the number of hours in the day since midnight (e.g. 13.5 means 13:30),\n- a `day_of_week` property is an integer belonging to **[0, 6]**, each value represents a day of the week starting from Monday (0 is Monday, 6 is Sunday).\n- a `day_of_month` property is an integer belonging to **[1, 31]**, each value represents a day of the month.\n- a `month_of_year` property is an integer belonging to **[1, 12]**, each value represents a month of the year.\n- a `timezone` property can be:\n  * a string value representing the timezone as an offset from UTC, supported formats are:\n\n    - **\u00b1[hh]:[mm]**,\n    - **\u00b1[hh][mm]**,\n    - **\u00b1[hh]**,\n\n    where `hh` represent the hour and `mm` the minutes from UTC (eg. `+01:30`)), between `-12:00` and\n    `+14:00`.\n\n  * an integer belonging to **[-720, 840]** which represents the timezone as an offset from UTC:\n\n    - in hours if the integer belongs to **[-15, 15]**\n    - in minutes otherwise\n\n  * an abbreviation among the following:\n\n    - **UTC** or **Z** Universal Time Coordinated,\n    - **GMT** Greenwich Mean Time, as UTC,\n    - **BST** British Summer Time, as UTC+1 hour,\n    - **IST** Irish Summer Time, as UTC+1,\n    - **WET** Western Europe Time, as UTC,\n    - **WEST** Western Europe Summer Time, as UTC+1,\n    - **CET** Central Europe Time, as UTC+1,\n    - **CEST** Central Europe Summer Time, as UTC+2,\n    - **EET** Eastern Europe Time, as UTC+2,\n    - **EEST** Eastern Europe Summer Time, as UTC+3,\n    - **MSK** Moscow Time, as UTC+3,\n    - **MSD** Moscow Summer Time, as UTC+4,\n    - **AST** Atlantic Standard Time, as UTC-4,\n    - **ADT** Atlantic Daylight Time, as UTC-3,\n    - **EST** Eastern Standard Time, as UTC-5,\n    - **EDT** Eastern Daylight Saving Time, as UTC-4,\n    - **CST** Central Standard Time, as UTC-6,\n    - **CDT** Central Daylight Saving Time, as UTC-5,\n    - **MST** Mountain Standard Time, as UTC-7,\n    - **MDT** Mountain Daylight Saving Time, as UTC-6,\n    - **PST** Pacific Standard Time, as UTC-8,\n    - **PDT** Pacific Daylight Saving Time, as UTC-7,\n    - **HST** Hawaiian Standard Time, as UTC-10,\n    - **AKST** Alaska Standard Time, as UTC-9,\n    - **AKDT** Alaska Standard Daylight Saving Time, as UTC-8,\n    - **AEST** Australian Eastern Standard Time, as UTC+10,\n    - **AEDT** Australian Eastern Daylight Time, as UTC+11,\n    - **ACST** Australian Central Standard Time, as UTC+9.5,\n    - **ACDT** Australian Central Daylight Time, as UTC+10.5,\n    - **AWST** Australian Western Standard Time, as UTC+8.\n\n> :information_source: By default, the values of the `time_of_day` and `day_of_week`\n> properties are generated from the [`timestamp`](#timestamp) of an agent's\n> state and the agent's current `timezone`. Therefore, whenever you use generated\n> `time_of_day` and/or `day_of_week` in your configuration, you **must** provide a\n> `timezone` value in the context. There can only be one `timezone` property.\n>\n> If you wish to provide their values manually, add `is_generated: false` to the\n> time types properties in your configuration. In this case, since you provide the values, the\n> `timezone` property is not required, and you must update the context whenever\n> one of these time values changes in a way that is significant for your system.\n\n##### Examples\n\nLet's take a look at the following configuration. It is designed to model the **color** of a lightbulb (the `lightbulbColor` property, defined as an output) depending on the **outside light intensity** (the `lightIntensity` property), the **TV status** (the `TVactivated` property) the **time of the day** (the `time` property) and the **day of the week** (the `day` property). Since `TVactivated` doesn't make any sense if the TV isn't here, we also specify this property as `is_optional: true`.\n\n`day` and `time` values will be generated automatically, hence the need for\n`timezone`, the current Time Zone, to compute their value from given\n[`timestamps`](#timestamp).\n\nThe `time_quantum` is set to 100 seconds, which means that if the lightbulb\ncolor is changed from red to blue then from blue to purple in less that 1\nminutes and 40 seconds, only the change from red to purple will be taken into\naccount.\n\nThe `learning_period` is set to 108 000 seconds (one month) , which means that\nthe state of the lightbulb from more than a month ago can be ignored when learning\nthe decision model.\n\n```json\n{\n  \"context\": {\n    \"lightIntensity\": {\n      \"type\": \"continuous\"\n    },\n    \"TVactivated\": {\n      \"type\": \"boolean\",\n      \"is_optional\": true\n    },\n    \"time\": {\n      \"type\": \"time_of_day\"\n    },\n    \"day\": {\n      \"type\": \"day_of_week\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbColor\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbColor\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\nIn this second example, the `time` property is not generated, no property of\ntype `timezone` is therefore needed. However values of `time` must be manually\nprovided continuously.\n\n```json\n{\n  \"context\": {\n    \"time\": {\n      \"type\": \"time_of_day\",\n      \"is_generated\": false\n    },\n    \"lightIntensity\": {\n      \"type\": \"continuous\"\n    },\n      \"TVactivated\": {\n      \"type\": \"boolean\"\n    },\n    \"lightbulbColor\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbColor\"],\n  \"time_quantum\": 100,\n  \"learning_period\": 108000\n}\n```\n\n### Timestamp\n\n**craft ai** API heavily relies on `timestamps`. A `timestamp` is an instant represented as a [Unix time](https://en.wikipedia.org/wiki/Unix_time), that is to say the amount of seconds elapsed since Thursday, 1 January 1970 at midnight UTC. In most programming languages this representation is easy to retrieve, you can refer to [**this page**](https://github.com/techgaun/unix-time/blob/master/README.md) to find out how.\n\n#### `craft_ai.Time` #####\n\nThe `craft_ai.Time` class facilitates the handling of time types in **craft ai**. It is able to extract the different **craft ai** formats from various _datetime_ representations, thanks to [datetime](https://docs.python.org/3.5/library/datetime.html).\n\n```python\n# From a unix timestamp and an explicit UTC offset\nt1 = craft_ai.Time(1465496929, \"+10:00\")\n\n# t1 == {\n#   utc: \"2016-06-09T18:28:49.000Z\",\n#   timestamp: 1465496929,\n#   day_of_week: 4,\n#   time_of_day: 4.480277777777778,\n#   timezone: \"+10:00\"\n# }\n\n# From a unix timestamp and using the local UTC offset.\nt2 = craft_ai.Time(1465496929)\n\n# Value are valid if in Paris !\n# t2 == {\n#   utc: \"2016-06-09T18:28:49.000Z\",\n#   timestamp: 1465496929,\n#   day_of_week: 3,\n#   time_of_day: 20.480277777777776,\n#   timezone: \"+02:00\"\n# }\n\n# From a ISO 8601 string. Note that here it should not have any \":\" in the timezone part\nt3 = craft_ai.Time(\"1977-04-22T01:00:00-0500\")\n\n# t3 == {\n#   utc: \"1977-04-22T06:00:00.000Z\",\n#   timestamp: 230536800,\n#   day_of_week: 4,\n#   time_of_day: 1,\n#   timezone: \"-05:00\"\n# }\n\n# Retrieve the current time with the local UTC offset\nnow = craft_ai.Time()\n\n# Retrieve the current time with the given UTC offset\nnowP5 = craft_ai.Time(timezone=\"+05:00\")\n```\n\n### Advanced configuration\n\nThe following **advanced** configuration parameters can be set in specific cases. They are **optional**. Usually you would not need them.\n\n- **`operations_as_events`** is a boolean, either `true` or `false`. The default value is `false`. If it is set to true, all context operations are treated as events, as opposed to context updates. This is appropriate if the data for an agent is made of events that have no duration, and if many events are more significant than a few. If `operations_as_events` is `true`, `learning_period` and the advanced parameter `tree_max_operations` must be set as well. In that case, `time_quantum` is ignored because events have no duration, as opposed to the evolution of an agent's context over time.\n- **`tree_max_operations`** is a positive integer. It **can and must** be set only if `operations_as_events` is `true`. It defines the maximum number of events on which a single decision tree can be based. It is complementary to `learning_period`, which limits the maximum age of events on which a decision tree is based.\n- **`tree_max_depth`** is a positive integer. It defines the maximum depth of decision trees, which is the maximum distance between the root node and a leaf (terminal) node. A depth of 0 means that the tree is made of a single root node. By default, `tree_max_depth` is set to 6 if the output is categorical (e.g. `enum`), or to 4 if the output is numerical (e.g. `continuous`).\n\nThese advanced configuration parameters are optional, and will appear in the agent information returned by **craft ai** only if you set them to something other than their default value. If you intend to use them in a production environment, please get in touch with us.\n\n### Agent\n\n#### Create\n\nCreate a new agent, and define its [configuration](#configuration).\n\n> The agent's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression `/[a-zA-Z0-9_-]{1,36}/`).\n\n```python\nclient.create_agent(\n  { # The configuration\n    \"context\": {\n      \"peopleCount\": {\n        \"type\": \"continuous\"\n      },\n      \"timeOfDay\": {\n        \"type\": \"time_of_day\"\n      },\n      \"timezone\": {\n        \"type\": \"timezone\"\n      },\n      \"lightbulbState\": {\n        \"type\": \"enum\"\n      }\n    },\n    \"output\": [ \"lightbulbState\" ],\n    \"time_quantum\": 100,\n    \"learning_period\": 108000\n  },\n  \"my_new_agent\" # id for the agent, if undefined a random id is generated\n)\n```\n\n#### Delete\n\n```python\nclient.delete_agent(\n  \"my_new_agent\" # The agent id\n)\n```\n\n#### Retrieve\n\n```python\nclient.get_agent(\n  \"my_new_agent\" # The agent id\n)\n```\n\n#### List\n\n```python\nclient.list_agents()\n# Return a list of agents' name\n# Example: [ \"my_new_agent\", \"joyful_octopus\", ... ]\n\n```\n\n#### Create and retrieve shared url\n\nCreate and get a shareable url to view an agent tree.\nOnly one url can be created at a time.\n\n```python\nclient.get_shared_agent_inspector_url(\n  \"my_new_agent\", # The agent id.\n  1464600256 # optional, the timestamp for which you want to inspect the tree.\n)\n```\n\n#### Delete shared url\n\nDelete a shareable url.\nThe previous url cannot access the agent tree anymore.\n\n```python\nclient.delete_shared_agent_inspector_url(\n  'my_new_agent' # The agent id.\n)\n```\n\n\n\n### Generator\n\nThe craft ai API lets you generate decision trees built on data from one or several agents by creating a generator. It is useful to:\n  - test several hyper-parameters and features sets without reloading all the data for each try\n  - gather data from different agents to make new models on top of them, enhancing the possible data combinations and allowing you to inspect the global behavior across your agents\n\nWe define the data stream(s) used by a generator by specifying a list of agents as a filter in its configuration. Other than the filter, the configuration of a generator is similar to an agent's configuration. It has to verify some additional properties:\n\n- Every feature defined in the context configuration of the generator must be present in **all** the agent that match the filter, with the same context types.\n- The parameters `operations_as_events` must be set to true.\n- It follows that the parameters `tree_max_operations` and `learning_period` must be set with valid integers.\n- The agent names provided in the list must be valid agent identifiers.\n\n#### Create\n\nCreate a new generator, and define its [configuration](#configuration).\n\n> The generator's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression `/[a-zA-Z0-9_-]{1,36}/`).\n\n```python\n\nGENERATOR_NAME = 'smarthome_gen'\nGENERATOR_FILTER = ['smarthome']\nGENERATOR_CONFIGURATION = {\n  \"context\": {\n      \"light\": {\n          \"type\": \"enum\"\n      },\n      \"tz\": {\n          \"type\": \"timezone\"\n      },\n      \"movement\": {\n          \"type\": \"continuous\"\n      },\n      \"time\": {\n          \"type\": \"time_of_day\",\n          \"is_generated\": True\n      }\n  },\n  \"output\": [\n      \"light\"\n  ],\n  \"learning_period\": 1500000,\n  \"tree_max_operations\": 15000,\n  \"operations_as_events\": True,\n  'filter': GENERATOR_FILTER\n}\n\nclient.create_generator(\n  GENERATOR_CONFIGURATION, # A valid configuration.\n  GENERATOR_NAME # The generator id.\n)\n```\n\n#### Delete\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nclient.delete_generator(\n  GENERATOR_NAME\n)\n```\n\n#### Retrieve\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nclient.get_generator(\n  GENERATOR_NAME\n)\n\n### Ouputted info is the following\n\"\"\"{\n    \"_version\": \"2.0.0\"\n    \"id\": \"smarthome_gen\",\n    \"configuration\": {\n        \"operations_as_events\": True,\n        \"learning_period\": 1500000,\n        \"tree_max_operations\": 15000,\n        \"context\": {\n            \"light\": {\n                \"type\": \"enum\"\n            },\n            \"tz\": {\n                \"type\": \"timezone\"\n            },\n            \"movement\": {\n                \"type\": \"continuous\"\n            },\n            \"time\": {\n                \"type\": \"time_of_day\",\n                \"is_generated\": True\n            }\n        },\n        \"output\": [\n            \"light\"\n        ],\n        \"filter\": [\n            \"smarthome\"\n        ]\n    },\n    \"firstTimestamp\": 1254836352,\n    \"lastTimestamp\": 1272721522,\n    \"agents\": [\n        \"smarthome\"\n    ],\n  }\"\"\"\n###\n\n```\n\n#### Retrieve generators list\n\n```python\nclient.list_generators() # Return the list of generators in the project.\n```\n\n#### List operations in the generator\n\nRetrieve the context operations of agents matching the generator's filter. Each operation also contains the identifier of the agent for which it was added, in the `agent_id` property.\n\n```python\nGENERATOR_NAME = 'smarthome_gen'\nSTART_TIMESTAMP = 1478894153\nEND_TIMESTAMP = 1478895266\n\nclient.get_generator_operations(\n  GENERATOR_NAME,   # The generator id\n  START_TIMESTAMP,  # Optional, the **start** timestamp from which the\n                    # operations are retrieved (inclusive bound)\n  END_TIMESTAMP     # Optional, the **end** timestamp up to which the\n                    # operations are retrieved (inclusive bound)\n)\n```\n\n> This call can generate multiple requests to the craft ai API as results are paginated.\n\n#### Get decision tree\n\n```python\nDECISION_TREE_TIMESTAMP = 1469473600\nGENERATOR_NAME = 'smarthome_gen'\nclient.get_generator_decision_tree(\n  GENERATOR_NAME, # The generator id\n  DECISION_TREE_TIMESTAMP # The timestamp at which the decision tree is retrieved\n)\n\n\"\"\" Outputted tree is the following\n{\n  \"_version\": \"2.0.0\",\n  \"trees\": {\n    \"light\": {\n        \"children\": [\n            {\n                \"predicted_value\": \"OFF\",\n                \"confidence\": 0.9966583847999572,\n                \"decision_rule\": {\n                    \"operand\": [\n                        7.25,\n                        22.65\n                    ],\n                    \"operator\": \"[in[\",\n                    \"property\": \"time\"\n                }\n            },\n            {\n                \"children\": [\n                    {\n                        \"predicted_value\": \"ON\",\n                        \"confidence\": 0.9618390202522278,\n                        \"decision_rule\": {\n                            \"operand\": [\n                                22.65,\n                                0.06666667\n                            ],\n                            \"operator\": \"[in[\",\n                            \"property\": \"time\"\n                        }\n                    },\n                    {\n                        \"children\": [\n                            {\n                                \"predicted_value\": \"OFF\",\n                                \"confidence\": 0.9797198176383972,\n                                \"decision_rule\": {\n                                    \"operand\": [\n                                        0.06666667,\n                                        0.6\n                                    ],\n                                    \"operator\": \"[in[\",\n                                    \"property\": \"time\"\n                                }\n                            },\n                            {\n                                \"children\": [\n                                    {\n                                        \"predicted_value\": \"ON\",\n                                        \"confidence\": 0.9585137963294984,\n                                        \"decision_rule\": {\n                                            \"operand\": [\n                                                0.6,\n                                                2.25\n                                            ],\n                                            \"operator\": \"[in[\",\n                                            \"property\": \"time\"\n                                        }\n                                    },\n                                    {\n                                        \"children\": [\n                                            {\n                                                \"predicted_value\": \"OFF\",\n                                                \"confidence\": 0.8077218532562256,\n                                                \"decision_rule\": {\n                                                    \"operand\": [\n                                                        2.25,\n                                                        2.4666667\n                                                    ],\n                                                    \"operator\": \"[in[\",\n                                                    \"property\": \"time\"\n                                                }\n                                            },\n                                        ],\n                                        \"decision_rule\": {\n                                            \"operand\": [\n                                                2.25,\n                                                7.25\n                                            ],\n                                            \"operator\": \"[in[\",\n                                            \"property\": \"time\"\n                                        }\n                                    }\n                                ],\n                                \"decision_rule\": {\n                                    \"operand\": [\n                                        0.6,\n                                        7.25\n                                    ],\n                                    \"operator\": \"[in[\",\n                                    \"property\": \"time\"\n                                }\n                            }\n                        ],\n                        \"decision_rule\": {\n                            \"operand\": [\n                                0.06666667,\n                                7.25\n                            ],\n                            \"operator\": \"[in[\",\n                            \"property\": \"time\"\n                        }\n                    }\n                ],\n                \"decision_rule\": {\n                    \"operand\": [\n                        22.65,\n                        7.25\n                    ],\n                    \"operator\": \"[in[\",\n                    \"property\": \"time\"\n                }\n            }\n        ]\n    }\n},\n\"configuration\": {\n    \"operations_as_events\": True,\n    \"learning_period\": 1500000,\n    \"tree_max_operations\": 15000,\n    \"context\": {\n        \"light\": {\n            \"type\": \"enum\"\n        },\n        \"tz\": {\n            \"type\": \"timezone\"\n        },\n        \"movement\": {\n            \"type\": \"continuous\"\n        },\n        \"time\": {\n            \"type\": \"time_of_day\",\n            \"is_generated\": True\n        }\n    },\n    \"output\": [\n        \"light\"\n    ],\n    \"filter\": [\n        \"smarthome\"\n    ]\n  }\n}\n\"\"\"\n```\n\n#### Get decision\n\n```python\nconst CONTEXT_OPS = {\n  \"tz\": \"+02:00\",\n  \"movement\": 2,\n  \"time\": 7.5\n};\nconst DECISION_TREE_TIMESTAMP = 1469473600;\nconst GENERATOR_NAME = 'smarthome_gen';\n\nclient.computeGeneratorDecision(\n  GENERATOR_NAME, # The name of the generator\n  DECISION_TREE_TIMESTAMP, # The timestamp at which the decision tree is retrieved\n  CONTEXT_OPS # A valid context operation according to the generator configuration\n)\n\"\"\"\n{\n  \"_version\": \"2.0.0\",\n  \"context\": {\n      \"tz\": \"+02:00\",\n      \"movement\": 2,\n      \"time\": 7.5\n  },\n  \"output\": {\n    \"light\": {\n        \"predicted_value\": \"OFF\",\n        \"confidence\": 0.8386044502258301,\n        \"decision_rules\": [\n            {\n                \"operand\": [\n                    2.1166666,\n                    10.333333\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n            },\n            {\n                \"operand\": [\n                    2.1166666,\n                    9.3\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n            },\n            {\n                \"operand\": [\n                    2.1166666,\n                    8.883333\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n            },\n            {\n                \"operand\": [\n                    3.5333333,\n                    8.883333\n                ],\n                \"operator\": \"[in[\",\n                \"property\": \"time\"\n            }\n        ],\n        \"nb_samples\": 442,\n        \"decision_path\": \"0-0-0-0-1\",\n        \"distribution\": [\n            0.85067874,\n            0.14932127\n        ]\n    }\n  }\n}\"\"\"\n```\n\n### Context\n\n#### Add operations\n\n```python\nclient.add_agent_operations(\n  \"my_new_agent\", # The agent id\n  [ # The list of context operations\n    {\n      \"timestamp\": 1469410200,\n      \"context\": {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 0,\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469415720,\n      \"context\": {\n        \"peopleCount\": 1,\n        \"lightbulbState\": \"ON\"\n      }\n    },\n    {\n      \"timestamp\": 1469416500,\n      \"context\": {\n        \"peopleCount\": 2\n      }\n    },\n    {\n      \"timestamp\": 1469417460,\n      \"context\": {\n        \"lightbulbState\": \"OFF\"\n      }\n    },\n    {\n      \"timestamp\": 1469419920,\n      \"context\": {\n        \"peopleCount\": 0\n      }\n    },\n    {\n      \"timestamp\": 1469460180,\n      \"context\": {\n        \"peopleCount\": 2\n      }\n    },\n    {\n      \"timestamp\": 1469471700,\n      \"context\": {\n        \"lightbulbState\": \"ON\"\n      }\n    },\n    {\n      \"timestamp\": 1469473560,\n      \"context\": {\n        \"peopleCount\": 0,\n        \"lightbulbState\": \"OFF\"\n      }\n    }\n  ]\n)\n```\n\n##### Missing Values\n\nIf the value of a base type property is **missing**, you can send a `null` value. **craft ai** will take into account as much information as possible from this incomplete context.\n\nA context operation with a missing value looks like:\n```json\n[\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"peopleCount\": \"OFF\",\n      \"lightbulbState\": null\n    }\n  },\n  ...\n]\n```\n\n##### Optional Values\n\nIf the value of an **optional** property is not filled at some point\u2014as should be expected from an optional value\u2014send the empty JSON Object `{}` to **craft ai**:\n\nA context with an optional value looks like:\n```json\n[\n  {\n    \"timestamp\": 1469415720,\n    \"context\": {\n      \"timezone\": \"+02:00\",\n      \"temperature\": {},\n      \"lightbulbState\": \"OFF\"\n    }\n  },\n  ...\n]\n```\n\n#### List operations\n\n```python\nclient.get_agent_operations(\n  \"my_new_agent\", # The agent id\n  1478894153, # Optional, the **start** timestamp from which the\n              # operations are retrieved (inclusive bound)\n  1478895266, # Optional, the **end** timestamp up to which the\n              # operations are retrieved (inclusive bound)\n)\n```\n\n> This call can generate multiple requests to the craft ai API as results are paginated.\n\n#### Retrieve state\n\n```python\nclient.get_context_state(\n  \"my_new_agent\", # The agent id\n  1469473600 # The timestamp at which the context state is retrieved\n)\n```\n\n#### Retrieve state history\n\n```python\nclient.get_agent_states(\n  \"my_new_agent\", # The agent id\n  1478894153, # Optional, the **start** timestamp from which the\n              # operations are retrieved (inclusive bound)\n  1478895266, # Optional, the **end** timestamp up to which the\n              # operations are retrieved (inclusive bound)\n)\n```\n\n### Decision tree\n\nDecision trees are computed at specific timestamps, directly by **craft ai** which learns from the context operations [added](#add-operations) throughout time.\n\nWhen you [compute](#compute) a decision tree, **craft ai** returns an object containing:\n\n- the **API version**\n- the agent's configuration as specified during the agent's [creation](#create-agent)\n- the tree itself as a JSON object:\n\n  - Internal nodes are represented by a `\"decision_rule\"` object and a `\"children\"` array. The first one, contains the `\"property`, and the `\"property\"`'s value, to decide which child matches a context.\n  - Leaves have a `\"predicted_value\"`, `\"confidence\"` and `\"decision_rule\"` object for this value, instead of a `\"children\"` array. `\"predicted_value`\" is an estimation of the output in the contexts matching the node. `\"confidence\"` is a number between 0 and 1 that indicates how confident **craft ai** is that the output is a reliable prediction. When the output is a numerical type, leaves also have a `\"standard_deviation\"` that indicates a margin of error around the `\"predicted_value\"`.\n  - The root only contains a `\"children\"` array.\n\n#### Compute\n\n```python\nclient.get_agent_decision_tree(\n  \"my_new_agent\", # The agent id\n  1469473600 # Optional the timestamp at which we want the decision\n             # tree, default behavior is to return the decision tree\n             # from the latest timestamp in context operations\n)\n```\n\n#### Take decision\n\n> :information_source: To take a decision, first compute the decision tree then use the **offline interpreter**.\n\n### Bulk\n\nThe craft ai API includes a bulk route which provides a programmatic option to perform asynchronous operations on agents. It allows the user to create, delete, add operations and compute decision trees for several agents at once.\n\n> :warning: the bulk API is a quite advanced feature. It comes on top of the basic routes to create, delete, add context operations and compute decision tree. If messages are not self-explanatory, please refer to the basic routes that does the same operation for a single agent.\n\n\n\n#### Bulk - Create\n\nTo create several agents at once, use the method `create_agents_bulk` as the following:\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\nconfiguration_1 = {\n  \"context\": {\n    \"peopleCount\": {\n      \"type\": \"continuous\"\n    },\n    \"timeOfDay\": {\n      \"type\": \"time_of_day\"\n    },\n    \"timezone\": {\n      \"type\": \"timezone\"\n    },\n    \"lightbulbState\": {\n      \"type\": \"enum\"\n    }\n  },\n  \"output\": [\"lightbulbState\"]\n}\nconfiguration_2 = { ... }\n\ncreation_bulk_payload = [\n  {'id': agent_id_1, 'configuration': configuration_1},\n  {'id': agent_id_2, 'configuration': configuration_2}\n]\n\ncreated_agents = client.create_agents_bulk(creation_bulk_payload)\nprint(created_agents)\n```\nThe variable `created_agents` is an **array of responses**. If an agent has been successfully created, the corresponding response is an object similar to the classic `create_agent()` response. When there are **mixed results**, `created_agents` should looks like:\n```python\n[\n  {'_version': '2.0.0',                                 # creation succeeded\n   'configuration': {\n      'context': {\n        ...\n      },\n      'output': ...,\n      'learning_period': 1500000,\n      'time_quantum': 100\n   },\n   'id': 'my_first_agent'},\n  {'error': CraftAiBadRequestError('error-message'),    # creation failed\n   'id': 'my_second_agent'\n  }\n]\n```\n\n#### Bulk - Delete\n\nTo delete several agents at once, use the method `delete_agents_bulk` as the following:\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\ndeletion_bulk_payload = [\n  {'id': agent_id_1},\n  {'id': agent_id_2}\n]\n\ndeleted_agents = client.delete_agents_bulk(creation_bulk_payload)\nprint(agents_deleted)\n```\nThe variable `deleted_agents` is an **array of responses**. If an agent has been successfully deleted, the corresponding response is an object similar to the classic `delete_agent()` response. When there are **mixed results**, `deleted_agents` should looks like:\n\n```python\n[\n  {'id': 'my_first_agent',                              # deletion succeeded\n   'creationDate': 1557492944277,\n   'lastContextUpdate': 1557492944277,\n   'lastTreeUpdate': 1557492944277,\n   'configuration': {\n      'context': {\n        ...\n      },\n      'output': ...,\n      'learning_period': 1500000,\n      'time_quantum': 100\n   },\n   '_version': '2.0.0'\n  },\n  {'error': CraftAiBadRequestError('error-message'),    # deletion failed\n   'id': 'my_second_agent'\n  },\n  {'id': 'my_unknown_agent'}                            # deletion succeeded\n]\n```\n\n#### Bulk - Add context Operations\n\nTo add operations to several agents at once, use the method `add_agents_operations_bulk` as the following:\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\noperations_agent_1 = [\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'timezone': '+02:00',\n      'peopleCount': 0,\n      'lightbulbState': 'OFF'\n    }\n  },\n  {\n    'timestamp': 1469410200,\n    'context': {\n      'peopleCount': 1,\n      'lightbulbState': 'ON'\n    }\n  },\n    {\n    'timestamp': 1469410200,\n    'context': {\n      'peopleCount': 2\n    }\n  },\n    {\n    'timestamp': 1469410200,\n    'context': {\n      'lightbulbState': 'OFF'\n    }\n  }\n]\noperations_agent_2 = [ ... ]\n\naddition_operations_bulk_payload = [\n  {'id': agent_id_1, 'operations': operations_agent_1},\n  {'id': agent_id_2, 'operations': operations_agent_2}\n]\n\nagents = client.addAgentContextOperationsBulk(addition_operations_bulk_payload)\n```\nThe variable `agents` is an **array of responses**. If an agent has successfully received operations, the corresponding response is an object similar to the classic `add_agent_operations()` response. When there are **mixed results**, `agents` should looks like:\n\n```python\n[\n  {\n    'status': 201,                                # Addition of operation succeeded\n    'message': 'message',\n    'id': 'my_first_agent'\n  }\n  {\n    'status': 500,                                 # Addition of operation failed\n    'error': CraftAiBadRequestError('error_message'),\n    'id': 'my_second_agent'\n  }\n]\n```\n\n#### Bulk - Compute decision trees\n\nTo get the tree of several agents at once, use the method `get_agents_decision_trees_bulk` as the following:\n\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\ndecision_tree_bulk_payload =  [\n  {'id': agent_id_1},\n  {'id': agent_id_2}\n]\n\ntrees = client.get_agents_decision_trees_bulk(decision_tree_bulk_payload)\n```\nThe variable `trees` is an **array of responses**. If an agent\u2019s model has successfully been created, the corresponding response is an object similar to the classic `get_agents_decision_trees_bulk()` response. When there are **mixed results**, trees should looks like:\n\n```python\n[\n  {'id': 'my_first_agent',                              # Getting of the tree succeeded\n   'tree': {\n     'trees': { ... }\n     '_version': '1.1.0',\n     'configuration': { ... }\n   }\n   'timestamp': 1458741735\n   },\n   {\n   'error': CraftAiBadRequestError('error_message'),  # Getting of the tree failed\n   'id': 'my_second_agent'\n   }\n   {\n   'error': CraftAiNotFoundError('error_message'),    # Getting of the tree failed\n   'id': 'my_unknown_agent'\n   }\n]\n\n  ```\n\n### Advanced client configuration ###\n\nThe simple configuration to create the `client` is just the token. For special needs, additional advanced configuration can be provided.\n\n#### Amount of operations sent in one chunk ####\n\n`client.add_agent_operations` splits the provided operations into chunks in order to limit the size of the http requests to the craft ai API. In the client configuration, `operationsChunksSize` can be increased in order to limit the number of request, or decreased when large http requests cause errors.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, default value is 200\n    \"operationsChunksSize\": {max_number_of_operations_sent_at_once}\n})\n```\n\n#### Timeout duration for decision trees retrieval ####\n\nIt is possible to increase or decrease the timeout duration of `client.get_agent_decision_tree`, for exemple to account for especially long computations.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, default value is 600000 (10 minutes)\n    \"decisionTreeRetrievalTimeout\": \"{timeout_duration_for_decision_trees_retrieval}\"\n})\n```\n\n#### Proxy ####\n\nIt is possible to provide proxy configuration in the `proxy` property of the client configuration. It will be used to call the craft ai API (through HTTPS). The expected format is a host name or IP and port, optionally preceded by credentials such as `http://user:pass@10.10.1.10:1080`.\n\n```python\nclient = craft_ai.Client({\n    # Mandatory, the token\n    \"token\": \"{token}\",\n    # Optional, no default value\n    \"proxy\": \"http://{user}:{password}@{host_or_ip}:{port}\"\n})\n```\n\n#### Advanced network configuration ####\n\nFor more advanced network configuration, it is possible to access the [Requests Session](http://docs.python-requests.org/en/master/user/advanced/#session-objects) used by the client to send requests to the craft ai API, through `client._requests_session`.\n\n```python\n# Disable SSL certificate verification\nclient._requests_session.verify = False\n```\n## Interpreter ##\n\nThe decision tree interpreter can be used offline from decisions tree computed through the API.\n\n### Take decision ###\n\nNote that the python interpreter takes an array of contexts.\n\n```python\ntree = { ... } # Decision tree as retrieved through the craft ai REST API\n\n# Compute the decision on a fully described context\ndecision = craft_ai.Interpreter.decide(\n  tree,\n  [{ # The context on which the decision is taken\n    \"timezone\": \"+02:00\",\n    \"timeOfDay\": 7.5,\n    \"peopleCount\": 3\n  }]\n)\n\n# Or Compute the decision on a context created from the given one and filling the\n# `day_of_week`, `time_of_day` and `timezone` properties from the given `Time`\n\ndecision = craft_ai.Interpreter.decide(\n  tree,\n  [{\n    \"timezone\": \"+02:00\",\n    \"peopleCount\": 3\n  },\n  craft_ai.Time(\"2010-01-01T07:30:30+0200\")\n  ]\n)\n```\n\nA computed `decision` on an `enum` output type would look like:\n\n```python\n{\n  \"context\": { # In which context the decision was taken\n    \"timezone\": \"+02:00\",\n    \"timeOfDay\": 7.5,\n    \"peopleCount\": 3\n  },\n  \"output\": { # The decision itself\n    \"lightbulbState\": {\n      \"predicted_value\": \"ON\"\n      \"confidence\": 0.9937745256361138, # The confidence in the decision\n      \"decision_rules\": [ # The ordered list of decision_rules that were validated to reach this decision\n        {\n          \"property\": \"timeOfDay\",\n          \"operator\": \">=\",\n          \"operand\": 6\n        },\n        {\n          \"property\": \"peopleCount\",\n          \"operator\": \">=\",\n          \"operand\": 2\n        }\n      ],\n      \"nb_samples\": 25,\n      \"distribution\": [0.05, 0.95],\n      \"decision_path\" \"0-1-1\"\n    },\n  }\n}\n```\n\nA `decision` for a numerical output type would look like:\n\n```python\n  \"output\": {\n    \"lightbulbIntensity\": {\n      \"predicted_value\": 10.5,\n      \"standard_deviation\": 1.25, # For numerical types, this field is returned in decisions.\n      \"min\": 8.0,\n      \"max\": 11,\n      \"nb_samples\": 25,\n      \"decision_rules\": [ ... ],\n      \"confidence\": ...,\n      \"decision_path\" ...\n    }\n  }\n```\n\nA `decision` for a categorical output type would look like:\n\n```python\n  \"output\": {\n    \"lightbulbState\": {\n      \"predicted_value\": \"OFF\",\n      \"nb_samples\": 25,\n      \"distribution\" : [ ... ], # Distribution of the output classes normalized by the number of samples in the reached node.\n      \"decision_rules\": [ ... ],\n      \"confidence\": ...,\n      \"decision_path\" ...\n    }\n  }\n```\n\nA `decision` in a case where the tree cannot make a prediction:\n\n```python\n  \"output\": {\n    \"lightbulbState\": {\n      \"predicted_value\": None,\n      \"distribution\" : [ ... ], # Distribution of the output classes normalized by the number of samples in the reached node.\n      \"confidence\": 0, # Zero confidence if the decision is null\n      \"decision_rules\": [ ... ],\n      \"decision_path\" ...\n    }\n  }\n```\n\n### Reduce decision rules ###\n\nFrom a list of decision rules, as retrieved when taking a decision, when taking a decision compute an equivalent & minimal list of rules.\n\n```python\nfrom craft_ai import reduce_decision_rules\n\n# `decision` is the decision tree as retrieved from taking a decision\ndecision = craft_ai.Interpreter.decide( ... )\n\n# `decision_rules` is the decision rules that led to decision for the `lightBulbState` value\ndecision_rules = decision[\"output\"][\"lightBulbState\"][\"decision_rules\"]\n\n# `minimal_decision_rules` has the mininum list of rules strictly equivalent to `decision_rules`\nminimal_decision_rules = reduce_decision_rules(decisionRules)\n```\n\n### Format decision rules ###\n\nFrom a list of decision rules, compute a _human readable_ version of these rules, in english.\n\n```python\nfrom craft_ai import format_decision_rules\n\n# `decision` is the decision tree as retrieved from taking a decision\ndecision = craft_ai.Interpreter.decide( ... )\n\n# `decision_rules` is the decision rules that led to decision for the `lightBulbState` value\ndecision_rules = decision[\"output\"][\"lightbulbState\"][\"decision_rules\"]\n\n# `decision_rules_str` is a human readable string representation of the rules.\ndecision_rules_str = format_decision_rules(decision_rules)\n```\n\n## Error Handling ##\n\nWhen using this client, you should be careful wrapping calls to the API with `try/except` blocks, in accordance with the [EAFP](https://docs.python.org/3/glossary.html#term-eafp) principle.\n\nThe **craft ai** python client has its specific exception types, all of them inheriting from the `CraftAIError` type.\n\nAll methods which have to send an http request (all of them except `decide`) may raise either of these exceptions: `CraftAINotFoundError`, `CraftAIBadRequestError`, `CraftAICredentialsError` or `CraftAIUnknownError`.\n\nThe `decide`\u00a0method only raises `CrafAIDecisionError` of `CraftAiNullDecisionError` type of exceptions. The latter is raised when no the given context is valid but no decision can be taken.\n\n## Pandas support ##\n\nThe craft ai python client optionally supports [pandas](http://pandas.pydata.org/) a very popular library used for all things data.\n\nYou'll need to install `craft-ai` with its `pandas` [extra](https://packaging.python.org/tutorials/installing-packages/#installing-setuptools-extras)\n\n```sh\npip install --upgrade craft-ai[pandas]\n```\n\nThen, instead of importing the default module, do the following\n\n```python\nimport craft_ai.pandas\n\n# Most of the time you'll need the following\nimport numpy as np\nimport pandas as pd\n\n# Client must then be defined using craft_ai.pandas module\nclient = craft_ai.pandas.Client({\n  \"token\": \"{token}\"\n})\n```\n\nThe craft ai pandas module is derived for the _vanilla_ one, with the following methods are overriden to support pandas' [`DataFrame`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html).\n\n#### `craft_ai.pandas.Client.get_agent_operations` #####\n\nRetrieves the desired operations as a `DataFrame` where:\n\n- each operation is a row,\n- each context property is a column,\n- the index is [_time based_](https://pandas.pydata.org/pandas-docs/stable/timeseries.html), [timezone-aware](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones) and matching the operations timestamps,\n- `np.NaN` means no value were given at this property for this timestamp.\n\n```python\ndf = client.get_agent_operations(\"my_new_agent\")\n\n# `df` is a pd.DataFrame looking like\n#\n#                            peopleCount  lightbulbState   timezone\n# 2013-01-01 00:00:00+00:00   0            OFF              +02:00\n# 2013-01-02 00:00:00+00:00   1            ON               NaN\n# 2013-01-03 00:00:00+00:00   2            NaN              NaN\n# 2013-01-04 00:00:00+00:00   NaN          OFF              NaN\n# 2013-01-05 00:00:00+00:00   0            NaN              NaN\n```\n\n#### `craft_ai.pandas.Client.add_agent_operations` #####\n\nAdd a `DataFrame` of operations to the desired agent. The format is the same as above.\n\n```python\ndf = pd.DataFrame(\n  [\n    [0, \"OFF\", \"+02:00\"],\n    [1, \"ON\", np.nan], # timezone will be \"+02:00\"\n    [2, np.nan, np.nan],\n    [np.nan, \"OFF\", np.nan],\n    [0, np.nan, np.nan]\n  ],\n  columns=['peopleCount', 'lightbulbState', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\nclient.add_agent_operations(\"my_new_agent\", df)\n```\n\nGiven an object that is not a `DataFrame` this method behave like the _vanilla_ `craft_ai.Client.add_agent_operations`.\n\nFurthermore, missing values and optional values can be handled by the craft ai pandas client. To do so, we introduce two new types that are `craft_ai.pandas.MISSING_VALUE` for [missing values](#missing-values) and `craft_ai.pandas.OPTIONAL_VALUE` for [optional values](#optional-values).\nTo send your `DataFrame` with actual missing values or optional values, you must use one of these types:\n\n```python\nfrom craft_ai.pandas import MISSING_VALUE, OPTIONAL_VALUE\n\ndf = pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, MISSING_VALUE],\n    [2, MISSING_VALUE],\n    [1, OPTIONAL_VALUE],\n    [0, np.nan]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\nclient.add_agent_operations(\"my_new_agent\", df)\n```\n\nTo ensure that all the missing values contained in your `DataFrame` are to the right format and can be handled by the craft ai pandas client, it is suggested to preprocess this latter by replacing all `na` values by the desired one:\n\n```python\ncontexts_df.fillna(MISSING_VALUE) # Or OPTIONAL_VALUE\n```\n\n#### `craft_ai.pandas.Client.get_agent_states` #####\n\nRetrieves the desired state history as a `DataFrame` where:\n\n- each state is a row,\n- each context property is a column,\n- the index is [_time based_](https://pandas.pydata.org/pandas-docs/stable/timeseries.html), [timezone-aware](https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones) and matching the operations timestamps.\n\n```python\ndf = client.get_agent_states(\"my_new_agent\")\n\n# `df` is a pd.DataFrame looking like\n#\n#                            peopleCount  lightbulbState   timezone\n# 2013-01-01 00:00:00+00:00   0            OFF              +02:00\n# 2013-01-02 00:00:00+00:00   1            ON               +02:00\n# 2013-01-03 00:00:00+00:00   2            ON               +02:00\n# 2013-01-04 00:00:00+00:00   2            OFF              +02:00\n# 2013-01-05 00:00:00+00:00   0            OFF              +02:00\n```\n\n#### `craft_ai.pandas.Client.decide_from_contexts_df` #####\n\nTake multiple decisions on a given `DataFrame` following the same format as above.\n\n```python\ndecisions_df = client.decide_from_contexts_df(tree, pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [1, \"+02:00\"],\n    [2, \"+02:00\"],\n    [1, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n))\n# `decisions_df` is a pd.DataFrame looking like\n#\n#                            lightbulbState_predicted_value   lightbulbState_confidence  ...\n# 2013-01-01 00:00:00+00:00   OFF                              0.999449                  ...\n# 2013-01-02 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-03 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-04 00:00:00+00:00   ON                               0.970325                  ...\n# 2013-01-05 00:00:00+00:00   OFF                              0.999449                  ...\n```\n\nThis function also accepts craft ai missing values and optional values types, `craft_ai.pandas.MISSING_VALUE` and `craft_ai.pandas.OPTIONAL_VALUE`.\n\n```python\nfrom craft_ai.pandas import MISSING_VALUE, OPTIONAL_VALUE\n\ndecisions_df = client.decide_from_contexts_df(tree, pd.DataFrame(\n  [\n    [0, \"+02:00\"],\n    [MISSING_VALUE, \"+02:00\"],\n    [2, \"+02:00\"],\n    [MISSING_VALUE, \"+02:00\"],\n    [0, \"+02:00\"]\n  ],\n  columns=['peopleCount', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n))\n```\n\nThis function never raises `CraftAiNullDecisionError`, instead it inserts these errors in the result `Dataframe` in a specific `error` column.\n\n#### `craft_ai.pandas.utils.create_tree_html` #####\n\nReturns a HTML version of the given decision tree. If this latter is saved in a `.html` file, it can be opened in\na browser to be visualized.\n\n```python\n\nfrom  craft_ai.pandas.utils import create_tree_html\n\ntree = client.get_agent_decision_tree(\n  \"my_agent\", # The agent id\n  timestamp # The timestamp at which the decision tree is retrieved\n)\n\nhtml = create_tree_html(\n  tree, # The decision tree\n  decision_path, # (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"\n  edge_type, # (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"\n  folded_nodes, # (Optional) An array of nodes path to fold when the tree is plotted. Default: None\n  height # (Optional) The height in pixel of the created plot. Default: 500.\n)\n\n# ...\n# ... save the html string to visualize it in a browser\n# ...\n```\n\n#### `craft_ai.pandas.utils.display_tree` #####\n\nDisplay a decision tree in a Jupyter Notebook.\nThis function can be useful for analyzing the induced decision trees.\n\n```python\n\nfrom  craft_ai.pandas.utils import display_tree\n\ntree = client.get_agent_decision_tree(\n  \"my_agent\", # The agent id\n  timestamp # The timestamp at which the decision tree is retrieved\n)\n\ndisplay_tree(\n  tree, # The decision tree\n  decision_path, # (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"\n  edge_type, # (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"\n  folded_nodes, # (Optional) An array of nodes path to fold when the tree is plotted. Default: None\n  height # (Optional) The height in pixel of the created plot. Default: 500.\n)\n```\n\n#### `craft_ai.pandas.client.add_agents_operations_bulk` #####\n\nAdd operations to several agents at once.\n```python\nagent_id_1 = 'my_first_agent'\nagent_id_2 = 'my_second_agent'\n\noperations_agent_1 = pd.DataFrame(\n  [\n    [0, \"OFF\", \"+02:00\"],\n    [1, \"ON\", np.nan], # timezone will be \"+02:00\"\n    [2, np.nan, np.nan],\n    [np.nan, \"OFF\", np.nan],\n    [0, np.nan, np.nan]\n  ],\n  columns=['peopleCount', 'lightbulbState', 'timezone'],\n  index=pd.date_range('20130101', periods=5, freq='D').tz_localize(\"UTC\")\n)\noperations_agent_2 = pd.DataFrame([...])\n\naddition_operations_bulk_payload = [\n    {'id': agent_id_1, 'operations': operations_agent_1},\n    {'id': agent_id_2, 'operations': operations_agent_2}\n]\n\nclient.add_agents_operations_bulk(addition_operations_bulk_payload)\n```\nGiven an object that is not a `DataFrame` this method behave like the _vanilla_ `craft_ai.Client.add_agents_operations_bulk`.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://craft.ai", "keywords": "ai,craft-ai", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "craft-ai", "package_url": "https://pypi.org/project/craft-ai/", "platform": "", "project_url": "https://pypi.org/project/craft-ai/", "project_urls": {"Homepage": "https://craft.ai", "Repository": "https://github.com/craft-ai/craft-ai-client-python/"}, "release_url": "https://pypi.org/project/craft-ai/2.0.0/", "requires_dist": ["requests (>=2.20.1,<3.0.0)", "tzlocal (>=1.2.2,<2.0.0)", "semver (>=2.7.7,<3.0.0)", "python-dateutil (>=2.8.1,<3.0.0)", "pandas (>=1.0.1,<2.0.0); extra == \"pandas\"", "IPython (>=5.8.0,<8.0.0); extra == \"pandas\""], "requires_python": ">=3.6.1,<4.0.0", "summary": "craft ai API python 3 client", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><strong>craft ai</strong> API python client</h1>\n<p><a href=\"https://pypi.python.org/pypi?:action=display&amp;name=craft-ai\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a316e065777c7b0f0aab626204ccb50405e570e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63726166742d61692e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://travis-ci.org/craft-ai/craft-ai-client-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a492ee17ecd69620b5c77058fbbd7a31a851088/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f63726166742d61692f63726166742d61692d636c69656e742d707974686f6e2f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e737e0e8e622ff3e328ef8537a6118d9cb42254f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d2d332d2d436c617573652d3432333538412e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi?:action=display&amp;name=craft-ai\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f30a9ccb23fc3db25a6825deea36dac03338b430/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63726166742d61692e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p><a href=\"http://craft.ai\" rel=\"nofollow\"><strong>craft ai</strong>'s Explainable AI API</a> enables product &amp; operational teams to quickly deploy and run explainable AIs. craft ai decodes your data streams to deliver self-learning services.</p>\n<h2>Get Started!</h2>\n<h3>0 - Signup</h3>\n<p>If you're reading this you are probably already registered with <strong>craft ai</strong>, if not, head to <a href=\"https://beta.craft.ai/signup\" rel=\"nofollow\"><code>https://beta.craft.ai/signup</code></a>.</p>\n<h3>1 - Create a project</h3>\n<p>Once your account is setup, let's create your first <strong>project</strong>! Go in the 'Projects' tab in the <strong>craft ai</strong> control center at <a href=\"https://beta.craft.ai/inspector\" rel=\"nofollow\"><code>https://beta.craft.ai/inspector</code></a>, and press <strong>Create a project</strong>.</p>\n<p>Once it's done, you can click on your newly created project to retrieve its tokens. There are two types of tokens: <strong>read</strong> and <strong>write</strong>. You'll need the <strong>write</strong> token to create, update and delete your agent.</p>\n<h3>2 - Setup</h3>\n<h4>Install</h4>\n<h4><a href=\"https://pypi.python.org/pypi/pip/\" rel=\"nofollow\">PIP</a> / <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a></h4>\n<p>Let's first install the package from pip.</p>\n<pre>pip install --upgrade craft-ai\n</pre>\n<p><em>Depending on your setup you may need to use <code>pip3</code> or <code>pipenv</code> instead of <code>pip</code>.</em></p>\n<p>Then import it in your code</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">craft_ai</span>\n</pre>\n<blockquote>\n<p>This client also provides helpers to use it in conjuction with <a href=\"#pandas-support\" rel=\"nofollow\">pandas</a></p>\n</blockquote>\n<h4>Initialize</h4>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">({</span>\n  <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{token}</span><span class=\"s2\">\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>3 - Create an agent</h3>\n<p><strong>craft ai</strong> is based on the concept of <strong>agents</strong>. In most use cases, one agent is created per user or per device.</p>\n<p>An agent is an independent module that stores the history of the <strong>context</strong> of its user or device's context, and learns which <strong>decision</strong> to take based on the evolution of this context in the form of a <strong>decision tree</strong>.</p>\n<p>In this example, we will create an agent that learns the <strong>decision model</strong> of a light bulb based on the time of the day and the number of people in the room. This dataset is treated as continuous context updates. If your data is more like events, please refer to the <a href=\"#advanced-configuration\" rel=\"nofollow\">Advanced Configuration section</a> to know how to configure your agent. Here, the agent's context has 4 properties:</p>\n<ul>\n<li><code>peopleCount</code> which is a <code>continuous</code> property,</li>\n<li><code>timeOfDay</code> which is a <code>time_of_day</code> property,</li>\n<li><code>timezone</code>, a property of type <code>timezone</code> needed to generate proper values for <code>timeOfDay</code> (cf. the <a href=\"#context-properties-types\" rel=\"nofollow\">context properties type section</a> for further information),</li>\n<li>and finally <code>lightbulbState</code> which is an <code>enum</code> property that is also the output.</li>\n</ul>\n<blockquote>\n<p>:information_source: <code>timeOfDay</code> is auto-generated, you will find more information below.</p>\n</blockquote>\n<pre><span class=\"n\">agent_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_first_agent\"</span>\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timezone\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"s2\">\"has successfully been created\"</span><span class=\"p\">)</span>\n</pre>\n<p>Pretty straightforward to test! Open <a href=\"https://beta.craft.ai/inspector\" rel=\"nofollow\"><code>https://beta.craft.ai/inspector</code></a>, select you project and your agent is now listed.</p>\n<p>Now, if you run that a second time, you'll get an error: the agent <code>'my_first_agent'</code> is already existing. Let's see how we can delete it before recreating it.</p>\n<pre><span class=\"n\">agent_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_first_agent\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agent</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"no longer exists\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"s2\">\"has successfully been created\"</span><span class=\"p\">)</span>\n</pre>\n<p><em>For further information, check the <a href=\"#create\" rel=\"nofollow\">'create agent' reference documentation</a>.</em></p>\n<h3>4 - Add context operations</h3>\n<p>We have now created our first agent but it is not able to do much, yet. To learn a decision model it needs to be provided with data, in <strong>craft ai</strong> these are called context operations.</p>\n<p>Please note that only value changes are sent, thus if an operation doesn't contain a value, the previous known value is used.</p>\n<p>In the following we add 8 operations:</p>\n<ol>\n<li>The initial one sets the initial state of the agent, on July 25 2016 at 5:30, in Paris, nobody is there and the light is off;</li>\n<li>At 7:02, someone enters the room the light is turned on;</li>\n<li>At 7:15, someone else enters the room;</li>\n<li>At 7:31, the light is turned off;</li>\n<li>At 8:12, everyone leaves the room;</li>\n<li>At 19:23, 2 persons enter the room;</li>\n<li>At 22:35, the light is turned on;</li>\n<li>At 23:06, everyone leaves the room and the light is turned off.</li>\n</ol>\n<pre><span class=\"n\">agent_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_first_agent\"</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agent</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"no longer exists\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"s2\">\"has successfully been created\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">context_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469415720</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ON\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469416500</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469417460</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469419920</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469460180</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469471700</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ON\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469473560</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"n\">context_list</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Successfully added initial operations to agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"!\"</span><span class=\"p\">)</span>\n</pre>\n<p>In real-world applications, you'll probably do the same kind of things when the agent is created and then, regularly throughout the lifetime of the agent with newer data.</p>\n<p><em>For further information, check the <a href=\"#add-operations\" rel=\"nofollow\">'add context operations' reference documentation</a>.</em></p>\n<h3>5 - Compute the decision tree</h3>\n<p>The agent has acquired a context history, we can now compute a decision tree from it! A decision tree models the output, allowing us to estimate what the output would be in a given context.</p>\n<p>The decision tree is computed at a given timestamp, which means it will consider the context history from the creation of this agent up to this moment. Let's first try to compute the decision tree at midnight on July 26, 2016.</p>\n<pre><span class=\"n\">agent_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_first_agent\"</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agent</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"no longer exists\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"s2\">\"has successfully been created\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">context_list</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"n\">context_list</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Successfully added initial operations to agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">dt_timestamp</span> <span class=\"o\">=</span> <span class=\"mi\">1469476800</span>\n<span class=\"n\">decision_tree</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_decision_tree</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"n\">dt_timestamp</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The full decision tree at timestamp\"</span><span class=\"p\">,</span> <span class=\"n\">dt_timestamp</span><span class=\"p\">,</span> <span class=\"s2\">\"is the following:\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decision_tree</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\" Outputted tree is the following</span>\n<span class=\"sd\">  {</span>\n<span class=\"sd\">    \"_version\":\"2.0.0\",</span>\n<span class=\"sd\">    \"trees\":{</span>\n<span class=\"sd\">      \"lightbulbState\":{</span>\n<span class=\"sd\">        \"output_values\" : [\"OFF\", \"ON\"],</span>\n<span class=\"sd\">        \"children\":[</span>\n<span class=\"sd\">          {</span>\n<span class=\"sd\">            \"children\":[</span>\n<span class=\"sd\">              {</span>\n<span class=\"sd\">                \"prediction\":{</span>\n<span class=\"sd\">                  \"confidence\":0.6774609088897705,</span>\n<span class=\"sd\">                  \"distribution\":[0.8, 0.2],</span>\n<span class=\"sd\">                  \"value\":\"OFF\",</span>\n<span class=\"sd\">                  \"nb_samples\": 5</span>\n<span class=\"sd\">                },</span>\n<span class=\"sd\">                \"decision_rule\":{</span>\n<span class=\"sd\">                  \"operand\":0.5,</span>\n<span class=\"sd\">                  \"operator\":\"&lt;\",</span>\n<span class=\"sd\">                  \"property\":\"peopleCount\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">              },</span>\n<span class=\"sd\">              {</span>\n<span class=\"sd\">                \"prediction\":{</span>\n<span class=\"sd\">                  \"confidence\":0.8630361557006836,</span>\n<span class=\"sd\">                  \"distribution\":[0.1, 0.9],</span>\n<span class=\"sd\">                  \"value\":\"ON\",</span>\n<span class=\"sd\">                  \"nb_samples\": 10</span>\n<span class=\"sd\">                },</span>\n<span class=\"sd\">                \"decision_rule\":{</span>\n<span class=\"sd\">                  \"operand\":0.5,</span>\n<span class=\"sd\">                  \"operator\":\"&gt;=\",</span>\n<span class=\"sd\">                  \"property\":\"peopleCount\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">              }</span>\n<span class=\"sd\">            ],</span>\n<span class=\"sd\">            \"decision_rule\":{</span>\n<span class=\"sd\">              \"operand\":[</span>\n<span class=\"sd\">                5,</span>\n<span class=\"sd\">                5.6666665</span>\n<span class=\"sd\">              ],</span>\n<span class=\"sd\">              \"operator\":\"[in[\",</span>\n<span class=\"sd\">              \"property\":\"timeOfDay\"</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">          },</span>\n<span class=\"sd\">          {</span>\n<span class=\"sd\">            \"children\":[</span>\n<span class=\"sd\">              {</span>\n<span class=\"sd\">                \"prediction\":{</span>\n<span class=\"sd\">                  \"confidence\":0.9947378635406494,</span>\n<span class=\"sd\">                  \"distribution\":[1.0, 0.0],</span>\n<span class=\"sd\">                  \"value\":\"ON\",</span>\n<span class=\"sd\">                  \"nb_samples\": 10</span>\n<span class=\"sd\">                },</span>\n<span class=\"sd\">                \"decision_rule\":{</span>\n<span class=\"sd\">                  \"operand\":[</span>\n<span class=\"sd\">                    5.6666665,</span>\n<span class=\"sd\">                    20.666666</span>\n<span class=\"sd\">                  ],</span>\n<span class=\"sd\">                  \"operator\":\"[in[\",</span>\n<span class=\"sd\">                  \"property\":\"timeOfDay\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">              },</span>\n<span class=\"sd\">              {</span>\n<span class=\"sd\">                \"children\":[</span>\n<span class=\"sd\">                  {</span>\n<span class=\"sd\">                    \"prediction\":{</span>\n<span class=\"sd\">                      \"confidence\":0.969236433506012,</span>\n<span class=\"sd\">                      \"distribution\":[0.95, 0.05],</span>\n<span class=\"sd\">                      \"value\":\"OFF\",</span>\n<span class=\"sd\">                      \"nb_samples\": 10</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                    \"decision_rule\":{</span>\n<span class=\"sd\">                      \"operand\":1,</span>\n<span class=\"sd\">                      \"operator\":\"&lt;\",</span>\n<span class=\"sd\">                      \"property\":\"peopleCount\"</span>\n<span class=\"sd\">                    }</span>\n<span class=\"sd\">                  },</span>\n<span class=\"sd\">                  {</span>\n<span class=\"sd\">                    \"prediction\":{</span>\n<span class=\"sd\">                      \"confidence\":0.8630361557006836,</span>\n<span class=\"sd\">                      \"distribution\":[0.2, 0.8],</span>\n<span class=\"sd\">                      \"value\":\"ON\",</span>\n<span class=\"sd\">                      \"nb_samples\": 15</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                    \"decision_rule\":{</span>\n<span class=\"sd\">                      \"operand\":1,</span>\n<span class=\"sd\">                      \"operator\":\"&gt;=\",</span>\n<span class=\"sd\">                      \"property\":\"peopleCount\"</span>\n<span class=\"sd\">                    }</span>\n<span class=\"sd\">                  }</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"decision_rule\":{</span>\n<span class=\"sd\">                  \"operand\":[</span>\n<span class=\"sd\">                    20.666666,</span>\n<span class=\"sd\">                    5</span>\n<span class=\"sd\">                  ],</span>\n<span class=\"sd\">                  \"operator\":\"[in[\",</span>\n<span class=\"sd\">                  \"property\":\"timeOfDay\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">              }</span>\n<span class=\"sd\">            ],</span>\n<span class=\"sd\">            \"decision_rule\":{</span>\n<span class=\"sd\">              \"operand\":[</span>\n<span class=\"sd\">                5.6666665,</span>\n<span class=\"sd\">                5</span>\n<span class=\"sd\">              ],</span>\n<span class=\"sd\">              \"operator\":\"[in[\",</span>\n<span class=\"sd\">              \"property\":\"timeOfDay\"</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">          }</span>\n<span class=\"sd\">        ]</span>\n<span class=\"sd\">      }</span>\n<span class=\"sd\">    },</span>\n<span class=\"sd\">    \"configuration\":{</span>\n<span class=\"sd\">      \"time_quantum\":600,</span>\n<span class=\"sd\">      \"learning_period\":9000000,</span>\n<span class=\"sd\">      \"context\":{</span>\n<span class=\"sd\">        \"peopleCount\":{</span>\n<span class=\"sd\">          \"type\":\"continuous\"</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"timeOfDay\":{</span>\n<span class=\"sd\">          \"type\":\"time_of_day\",</span>\n<span class=\"sd\">          \"is_generated\":True</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"timezone\":{</span>\n<span class=\"sd\">          \"type\":\"timezone\"</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"lightbulbState\":{</span>\n<span class=\"sd\">          \"type\":\"enum\"</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">      },</span>\n<span class=\"sd\">      \"output\":[</span>\n<span class=\"sd\">        \"lightbulbState\"</span>\n<span class=\"sd\">      ]</span>\n<span class=\"sd\">    }</span>\n<span class=\"sd\">  }</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>Try to retrieve the tree at different timestamps to see how it gradually learns from the new operations. To visualize the trees, use the <a href=\"https://beta.craft.ai/inspector\" rel=\"nofollow\">inspector</a>!</p>\n<p><em>For further information, check the <a href=\"#compute\" rel=\"nofollow\">'compute decision tree' reference documentation</a>.</em></p>\n<h3>6 - Take a decision</h3>\n<p>Once the decision tree is computed it can be used to take a decision. In our case it is basically answering this type of question: \"What is the anticipated <strong>state of the lightbulb</strong> at 7:15 if there are 2 persons in the room ?\".</p>\n<pre><span class=\"n\">agent_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"my_first_agent\"</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agent</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"no longer exists\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"s2\">\"has successfully been created\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">context_list</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"n\">context_list</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Successfully added initial operations to agent\"</span><span class=\"p\">,</span> <span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"s2\">\"!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">dt_timestamp</span> <span class=\"o\">=</span> <span class=\"mi\">1469476800</span>\n<span class=\"n\">decision_tree</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_decision_tree</span><span class=\"p\">(</span><span class=\"n\">agent_id</span><span class=\"p\">,</span> <span class=\"n\">dt_timestamp</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The decision tree at timestamp\"</span><span class=\"p\">,</span> <span class=\"n\">dt_timestamp</span><span class=\"p\">,</span> <span class=\"s2\">\"is the following:\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decision_tree</span><span class=\"p\">)</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"mf\">7.25</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"p\">}</span>\n<span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">decide</span><span class=\"p\">(</span><span class=\"n\">decision_tree</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The anticipated lightbulb state is:\"</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">[</span><span class=\"s2\">\"output\"</span><span class=\"p\">][</span><span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">][</span><span class=\"s2\">\"predicted_value\"</span><span class=\"p\">])</span>\n</pre>\n<p><em>For further information, check the <a href=\"#take-decision\" rel=\"nofollow\">'take decision' reference documentation</a>.</em></p>\n<h3>Python starter kit</h3>\n<p>If you prefer to get started from an existing code base, the official Python starter kit can get you there! Retrieve the sources locally and follow the \"readme\" to get a fully working <strong>Wellness Coach</strong> example using <em>real-world</em> data.</p>\n<blockquote>\n<p><a href=\"https://github.com/craft-ai/craft-ai-starterkit-python\" rel=\"nofollow\">:package: <em>Get the <strong>craft ai</strong> Python Starter Kit</em></a></p>\n</blockquote>\n<h2>API</h2>\n<h3>Project</h3>\n<p><strong>craft ai</strong> agents belong to <strong>projects</strong>. In the current version, each identified users defines a owner and can create projects for themselves, in the future we will introduce shared projects.</p>\n<h3>Configuration</h3>\n<p>Each agent has a configuration defining:</p>\n<ul>\n<li>the context schema, i.e. the list of property keys and their type (as defined in the following section),</li>\n<li>the output properties, i.e. the list of property keys on which the agent takes decisions,</li>\n</ul>\n<blockquote>\n<p>:warning: In the current version, only one output property can be provided.</p>\n</blockquote>\n<ul>\n<li>the <code>time_quantum</code>, i.e. the minimum amount of time, in seconds, that is meaningful for an agent; context updates occurring faster than this quantum won't be taken into account. As a rule of thumb, you should always choose the largest value that seems right and reduce it, if necessary, after some tests.</li>\n<li>the <code>learning_period</code>, i.e. the maximum amount of time, in seconds, that matters for an agent; the agent's decision model can ignore context that is older than this duration. You should generally choose the smallest value that fits this description.</li>\n</ul>\n<blockquote>\n<p>:warning: if no time_quantum is specified, the default value is 600.</p>\n</blockquote>\n<blockquote>\n<p>:warning: if no learning_period is specified, the default value is 15000 time quantums.</p>\n</blockquote>\n<blockquote>\n<p>:warning: the maximum learning_period value is 55000 * time_quantum.</p>\n</blockquote>\n<h4>Context properties types</h4>\n<h5>Base types: <code>enum</code>, <code>continuous</code> and <code>boolean</code></h5>\n<p><code>enum</code>, <code>continuous</code> and <code>boolean</code> are the three base <strong>craft ai</strong> types:</p>\n<ul>\n<li>an <code>enum</code> property is a string;</li>\n<li>a <code>continuous</code> property is a real number.</li>\n<li>a <code>boolean</code> property is a boolean value: <code>true</code> or <code>false</code></li>\n</ul>\n<blockquote>\n<p>:warning: the absolute value of a <code>continuous</code> property must be less than 10<sup>20</sup>.</p>\n</blockquote>\n<p>A base type property can be defined as <em>optional</em> if its value is likely to be unknown at some point in time and that it is to be considered as a normal behavior, and not as a missing property. You can achieve that by adding <code>is_optional: true</code> to the property definition in your configuration.</p>\n<blockquote>\n<p>:warning: An optional property cannot be set as being an output of the agent.</p>\n</blockquote>\n<p>Here is a simple example of configuration :</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"temperature\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"is_optional\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"time_quantum\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"learning_period\"</span><span class=\"p\">:</span> <span class=\"mi\">108000</span>\n<span class=\"p\">}</span>\n</pre>\n<h5>Time types: <code>timezone</code>, <code>time_of_day</code>, <code>day_of_week</code>, <code>day_of_month</code> and <code>month_of_year</code></h5>\n<p><strong>craft ai</strong> defines the following types related to time:</p>\n<ul>\n<li>a <code>time_of_day</code> property is a real number belonging to <strong>[0.0; 24.0[</strong>, each value represents the number of hours in the day since midnight (e.g. 13.5 means 13:30),</li>\n<li>a <code>day_of_week</code> property is an integer belonging to <strong>[0, 6]</strong>, each value represents a day of the week starting from Monday (0 is Monday, 6 is Sunday).</li>\n<li>a <code>day_of_month</code> property is an integer belonging to <strong>[1, 31]</strong>, each value represents a day of the month.</li>\n<li>a <code>month_of_year</code> property is an integer belonging to <strong>[1, 12]</strong>, each value represents a month of the year.</li>\n<li>a <code>timezone</code> property can be:\n<ul>\n<li>\n<p>a string value representing the timezone as an offset from UTC, supported formats are:</p>\n<ul>\n<li><strong>\u00b1[hh]:[mm]</strong>,</li>\n<li><strong>\u00b1[hh][mm]</strong>,</li>\n<li><strong>\u00b1[hh]</strong>,</li>\n</ul>\n<p>where <code>hh</code> represent the hour and <code>mm</code> the minutes from UTC (eg. <code>+01:30</code>)), between <code>-12:00</code> and\n<code>+14:00</code>.</p>\n</li>\n<li>\n<p>an integer belonging to <strong>[-720, 840]</strong> which represents the timezone as an offset from UTC:</p>\n<ul>\n<li>in hours if the integer belongs to <strong>[-15, 15]</strong></li>\n<li>in minutes otherwise</li>\n</ul>\n</li>\n<li>\n<p>an abbreviation among the following:</p>\n<ul>\n<li><strong>UTC</strong> or <strong>Z</strong> Universal Time Coordinated,</li>\n<li><strong>GMT</strong> Greenwich Mean Time, as UTC,</li>\n<li><strong>BST</strong> British Summer Time, as UTC+1 hour,</li>\n<li><strong>IST</strong> Irish Summer Time, as UTC+1,</li>\n<li><strong>WET</strong> Western Europe Time, as UTC,</li>\n<li><strong>WEST</strong> Western Europe Summer Time, as UTC+1,</li>\n<li><strong>CET</strong> Central Europe Time, as UTC+1,</li>\n<li><strong>CEST</strong> Central Europe Summer Time, as UTC+2,</li>\n<li><strong>EET</strong> Eastern Europe Time, as UTC+2,</li>\n<li><strong>EEST</strong> Eastern Europe Summer Time, as UTC+3,</li>\n<li><strong>MSK</strong> Moscow Time, as UTC+3,</li>\n<li><strong>MSD</strong> Moscow Summer Time, as UTC+4,</li>\n<li><strong>AST</strong> Atlantic Standard Time, as UTC-4,</li>\n<li><strong>ADT</strong> Atlantic Daylight Time, as UTC-3,</li>\n<li><strong>EST</strong> Eastern Standard Time, as UTC-5,</li>\n<li><strong>EDT</strong> Eastern Daylight Saving Time, as UTC-4,</li>\n<li><strong>CST</strong> Central Standard Time, as UTC-6,</li>\n<li><strong>CDT</strong> Central Daylight Saving Time, as UTC-5,</li>\n<li><strong>MST</strong> Mountain Standard Time, as UTC-7,</li>\n<li><strong>MDT</strong> Mountain Daylight Saving Time, as UTC-6,</li>\n<li><strong>PST</strong> Pacific Standard Time, as UTC-8,</li>\n<li><strong>PDT</strong> Pacific Daylight Saving Time, as UTC-7,</li>\n<li><strong>HST</strong> Hawaiian Standard Time, as UTC-10,</li>\n<li><strong>AKST</strong> Alaska Standard Time, as UTC-9,</li>\n<li><strong>AKDT</strong> Alaska Standard Daylight Saving Time, as UTC-8,</li>\n<li><strong>AEST</strong> Australian Eastern Standard Time, as UTC+10,</li>\n<li><strong>AEDT</strong> Australian Eastern Daylight Time, as UTC+11,</li>\n<li><strong>ACST</strong> Australian Central Standard Time, as UTC+9.5,</li>\n<li><strong>ACDT</strong> Australian Central Daylight Time, as UTC+10.5,</li>\n<li><strong>AWST</strong> Australian Western Standard Time, as UTC+8.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>:information_source: By default, the values of the <code>time_of_day</code> and <code>day_of_week</code>\nproperties are generated from the <a href=\"#timestamp\" rel=\"nofollow\"><code>timestamp</code></a> of an agent's\nstate and the agent's current <code>timezone</code>. Therefore, whenever you use generated\n<code>time_of_day</code> and/or <code>day_of_week</code> in your configuration, you <strong>must</strong> provide a\n<code>timezone</code> value in the context. There can only be one <code>timezone</code> property.</p>\n<p>If you wish to provide their values manually, add <code>is_generated: false</code> to the\ntime types properties in your configuration. In this case, since you provide the values, the\n<code>timezone</code> property is not required, and you must update the context whenever\none of these time values changes in a way that is significant for your system.</p>\n</blockquote>\n<h5>Examples</h5>\n<p>Let's take a look at the following configuration. It is designed to model the <strong>color</strong> of a lightbulb (the <code>lightbulbColor</code> property, defined as an output) depending on the <strong>outside light intensity</strong> (the <code>lightIntensity</code> property), the <strong>TV status</strong> (the <code>TVactivated</code> property) the <strong>time of the day</strong> (the <code>time</code> property) and the <strong>day of the week</strong> (the <code>day</code> property). Since <code>TVactivated</code> doesn't make any sense if the TV isn't here, we also specify this property as <code>is_optional: true</code>.</p>\n<p><code>day</code> and <code>time</code> values will be generated automatically, hence the need for\n<code>timezone</code>, the current Time Zone, to compute their value from given\n<a href=\"#timestamp\" rel=\"nofollow\"><code>timestamps</code></a>.</p>\n<p>The <code>time_quantum</code> is set to 100 seconds, which means that if the lightbulb\ncolor is changed from red to blue then from blue to purple in less that 1\nminutes and 40 seconds, only the change from red to purple will be taken into\naccount.</p>\n<p>The <code>learning_period</code> is set to 108 000 seconds (one month) , which means that\nthe state of the lightbulb from more than a month ago can be ignored when learning\nthe decision model.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"lightIntensity\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"TVactivated\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"boolean\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"is_optional\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"day\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"day_of_week\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timezone\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"lightbulbColor\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"lightbulbColor\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"time_quantum\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"learning_period\"</span><span class=\"p\">:</span> <span class=\"mi\">108000</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this second example, the <code>time</code> property is not generated, no property of\ntype <code>timezone</code> is therefore needed. However values of <code>time</code> must be manually\nprovided continuously.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"is_generated\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"lightIntensity\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n    <span class=\"p\">},</span>\n      <span class=\"nt\">\"TVactivated\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"boolean\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"lightbulbColor\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"lightbulbColor\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"time_quantum\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"learning_period\"</span><span class=\"p\">:</span> <span class=\"mi\">108000</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Timestamp</h3>\n<p><strong>craft ai</strong> API heavily relies on <code>timestamps</code>. A <code>timestamp</code> is an instant represented as a <a href=\"https://en.wikipedia.org/wiki/Unix_time\" rel=\"nofollow\">Unix time</a>, that is to say the amount of seconds elapsed since Thursday, 1 January 1970 at midnight UTC. In most programming languages this representation is easy to retrieve, you can refer to <a href=\"https://github.com/techgaun/unix-time/blob/master/README.md\" rel=\"nofollow\"><strong>this page</strong></a> to find out how.</p>\n<h4><code>craft_ai.Time</code></h4>\n<p>The <code>craft_ai.Time</code> class facilitates the handling of time types in <strong>craft ai</strong>. It is able to extract the different <strong>craft ai</strong> formats from various <em>datetime</em> representations, thanks to <a href=\"https://docs.python.org/3.5/library/datetime.html\" rel=\"nofollow\">datetime</a>.</p>\n<pre><span class=\"c1\"># From a unix timestamp and an explicit UTC offset</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"mi\">1465496929</span><span class=\"p\">,</span> <span class=\"s2\">\"+10:00\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># t1 == {</span>\n<span class=\"c1\">#   utc: \"2016-06-09T18:28:49.000Z\",</span>\n<span class=\"c1\">#   timestamp: 1465496929,</span>\n<span class=\"c1\">#   day_of_week: 4,</span>\n<span class=\"c1\">#   time_of_day: 4.480277777777778,</span>\n<span class=\"c1\">#   timezone: \"+10:00\"</span>\n<span class=\"c1\"># }</span>\n\n<span class=\"c1\"># From a unix timestamp and using the local UTC offset.</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"mi\">1465496929</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Value are valid if in Paris !</span>\n<span class=\"c1\"># t2 == {</span>\n<span class=\"c1\">#   utc: \"2016-06-09T18:28:49.000Z\",</span>\n<span class=\"c1\">#   timestamp: 1465496929,</span>\n<span class=\"c1\">#   day_of_week: 3,</span>\n<span class=\"c1\">#   time_of_day: 20.480277777777776,</span>\n<span class=\"c1\">#   timezone: \"+02:00\"</span>\n<span class=\"c1\"># }</span>\n\n<span class=\"c1\"># From a ISO 8601 string. Note that here it should not have any \":\" in the timezone part</span>\n<span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"s2\">\"1977-04-22T01:00:00-0500\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># t3 == {</span>\n<span class=\"c1\">#   utc: \"1977-04-22T06:00:00.000Z\",</span>\n<span class=\"c1\">#   timestamp: 230536800,</span>\n<span class=\"c1\">#   day_of_week: 4,</span>\n<span class=\"c1\">#   time_of_day: 1,</span>\n<span class=\"c1\">#   timezone: \"-05:00\"</span>\n<span class=\"c1\"># }</span>\n\n<span class=\"c1\"># Retrieve the current time with the local UTC offset</span>\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Retrieve the current time with the given UTC offset</span>\n<span class=\"n\">nowP5</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s2\">\"+05:00\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Advanced configuration</h3>\n<p>The following <strong>advanced</strong> configuration parameters can be set in specific cases. They are <strong>optional</strong>. Usually you would not need them.</p>\n<ul>\n<li><strong><code>operations_as_events</code></strong> is a boolean, either <code>true</code> or <code>false</code>. The default value is <code>false</code>. If it is set to true, all context operations are treated as events, as opposed to context updates. This is appropriate if the data for an agent is made of events that have no duration, and if many events are more significant than a few. If <code>operations_as_events</code> is <code>true</code>, <code>learning_period</code> and the advanced parameter <code>tree_max_operations</code> must be set as well. In that case, <code>time_quantum</code> is ignored because events have no duration, as opposed to the evolution of an agent's context over time.</li>\n<li><strong><code>tree_max_operations</code></strong> is a positive integer. It <strong>can and must</strong> be set only if <code>operations_as_events</code> is <code>true</code>. It defines the maximum number of events on which a single decision tree can be based. It is complementary to <code>learning_period</code>, which limits the maximum age of events on which a decision tree is based.</li>\n<li><strong><code>tree_max_depth</code></strong> is a positive integer. It defines the maximum depth of decision trees, which is the maximum distance between the root node and a leaf (terminal) node. A depth of 0 means that the tree is made of a single root node. By default, <code>tree_max_depth</code> is set to 6 if the output is categorical (e.g. <code>enum</code>), or to 4 if the output is numerical (e.g. <code>continuous</code>).</li>\n</ul>\n<p>These advanced configuration parameters are optional, and will appear in the agent information returned by <strong>craft ai</strong> only if you set them to something other than their default value. If you intend to use them in a production environment, please get in touch with us.</p>\n<h3>Agent</h3>\n<h4>Create</h4>\n<p>Create a new agent, and define its <a href=\"#configuration\" rel=\"nofollow\">configuration</a>.</p>\n<blockquote>\n<p>The agent's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression <code>/[a-zA-Z0-9_-]{1,36}/</code>).</p>\n</blockquote>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agent</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span> <span class=\"c1\"># The configuration</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timezone\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"s2\">\"lightbulbState\"</span> <span class=\"p\">],</span>\n    <span class=\"s2\">\"time_quantum\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"learning_period\"</span><span class=\"p\">:</span> <span class=\"mi\">108000</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"my_new_agent\"</span> <span class=\"c1\"># id for the agent, if undefined a random id is generated</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Delete</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agent</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span> <span class=\"c1\"># The agent id</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Retrieve</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span> <span class=\"c1\"># The agent id</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>List</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_agents</span><span class=\"p\">()</span>\n<span class=\"c1\"># Return a list of agents' name</span>\n<span class=\"c1\"># Example: [ \"my_new_agent\", \"joyful_octopus\", ... ]</span>\n</pre>\n<h4>Create and retrieve shared url</h4>\n<p>Create and get a shareable url to view an agent tree.\nOnly one url can be created at a time.</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_shared_agent_inspector_url</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id.</span>\n  <span class=\"mi\">1464600256</span> <span class=\"c1\"># optional, the timestamp for which you want to inspect the tree.</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Delete shared url</h4>\n<p>Delete a shareable url.\nThe previous url cannot access the agent tree anymore.</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_shared_agent_inspector_url</span><span class=\"p\">(</span>\n  <span class=\"s1\">'my_new_agent'</span> <span class=\"c1\"># The agent id.</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Generator</h3>\n<p>The craft ai API lets you generate decision trees built on data from one or several agents by creating a generator. It is useful to:</p>\n<ul>\n<li>test several hyper-parameters and features sets without reloading all the data for each try</li>\n<li>gather data from different agents to make new models on top of them, enhancing the possible data combinations and allowing you to inspect the global behavior across your agents</li>\n</ul>\n<p>We define the data stream(s) used by a generator by specifying a list of agents as a filter in its configuration. Other than the filter, the configuration of a generator is similar to an agent's configuration. It has to verify some additional properties:</p>\n<ul>\n<li>Every feature defined in the context configuration of the generator must be present in <strong>all</strong> the agent that match the filter, with the same context types.</li>\n<li>The parameters <code>operations_as_events</code> must be set to true.</li>\n<li>It follows that the parameters <code>tree_max_operations</code> and <code>learning_period</code> must be set with valid integers.</li>\n<li>The agent names provided in the list must be valid agent identifiers.</li>\n</ul>\n<h4>Create</h4>\n<p>Create a new generator, and define its <a href=\"#configuration\" rel=\"nofollow\">configuration</a>.</p>\n<blockquote>\n<p>The generator's identifier is a case sensitive string between 1 and 36 characters long. It only accepts letters, digits, hyphen-minuses and underscores (i.e. the regular expression <code>/[a-zA-Z0-9_-]{1,36}/</code>).</p>\n</blockquote>\n<pre><span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span>\n<span class=\"n\">GENERATOR_FILTER</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'smarthome'</span><span class=\"p\">]</span>\n<span class=\"n\">GENERATOR_CONFIGURATION</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"light\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"tz\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timezone\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"movement\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"time\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"is_generated\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">\"light\"</span>\n  <span class=\"p\">],</span>\n  <span class=\"s2\">\"learning_period\"</span><span class=\"p\">:</span> <span class=\"mi\">1500000</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"tree_max_operations\"</span><span class=\"p\">:</span> <span class=\"mi\">15000</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"operations_as_events\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n  <span class=\"s1\">'filter'</span><span class=\"p\">:</span> <span class=\"n\">GENERATOR_FILTER</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_generator</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_CONFIGURATION</span><span class=\"p\">,</span> <span class=\"c1\"># A valid configuration.</span>\n  <span class=\"n\">GENERATOR_NAME</span> <span class=\"c1\"># The generator id.</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Delete</h4>\n<pre><span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_generator</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_NAME</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Retrieve</h4>\n<pre><span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_generator</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_NAME</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">### Ouputted info is the following</span>\n<span class=\"sd\">\"\"\"{</span>\n<span class=\"sd\">    \"_version\": \"2.0.0\"</span>\n<span class=\"sd\">    \"id\": \"smarthome_gen\",</span>\n<span class=\"sd\">    \"configuration\": {</span>\n<span class=\"sd\">        \"operations_as_events\": True,</span>\n<span class=\"sd\">        \"learning_period\": 1500000,</span>\n<span class=\"sd\">        \"tree_max_operations\": 15000,</span>\n<span class=\"sd\">        \"context\": {</span>\n<span class=\"sd\">            \"light\": {</span>\n<span class=\"sd\">                \"type\": \"enum\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            \"tz\": {</span>\n<span class=\"sd\">                \"type\": \"timezone\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            \"movement\": {</span>\n<span class=\"sd\">                \"type\": \"continuous\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            \"time\": {</span>\n<span class=\"sd\">                \"type\": \"time_of_day\",</span>\n<span class=\"sd\">                \"is_generated\": True</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"output\": [</span>\n<span class=\"sd\">            \"light\"</span>\n<span class=\"sd\">        ],</span>\n<span class=\"sd\">        \"filter\": [</span>\n<span class=\"sd\">            \"smarthome\"</span>\n<span class=\"sd\">        ]</span>\n<span class=\"sd\">    },</span>\n<span class=\"sd\">    \"firstTimestamp\": 1254836352,</span>\n<span class=\"sd\">    \"lastTimestamp\": 1272721522,</span>\n<span class=\"sd\">    \"agents\": [</span>\n<span class=\"sd\">        \"smarthome\"</span>\n<span class=\"sd\">    ],</span>\n<span class=\"sd\">  }\"\"\"</span>\n<span class=\"c1\">###</span>\n</pre>\n<h4>Retrieve generators list</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_generators</span><span class=\"p\">()</span> <span class=\"c1\"># Return the list of generators in the project.</span>\n</pre>\n<h4>List operations in the generator</h4>\n<p>Retrieve the context operations of agents matching the generator's filter. Each operation also contains the identifier of the agent for which it was added, in the <code>agent_id</code> property.</p>\n<pre><span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span>\n<span class=\"n\">START_TIMESTAMP</span> <span class=\"o\">=</span> <span class=\"mi\">1478894153</span>\n<span class=\"n\">END_TIMESTAMP</span> <span class=\"o\">=</span> <span class=\"mi\">1478895266</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_generator_operations</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_NAME</span><span class=\"p\">,</span>   <span class=\"c1\"># The generator id</span>\n  <span class=\"n\">START_TIMESTAMP</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional, the **start** timestamp from which the</span>\n                    <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n  <span class=\"n\">END_TIMESTAMP</span>     <span class=\"c1\"># Optional, the **end** timestamp up to which the</span>\n                    <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n<span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>This call can generate multiple requests to the craft ai API as results are paginated.</p>\n</blockquote>\n<h4>Get decision tree</h4>\n<pre><span class=\"n\">DECISION_TREE_TIMESTAMP</span> <span class=\"o\">=</span> <span class=\"mi\">1469473600</span>\n<span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_generator_decision_tree</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_NAME</span><span class=\"p\">,</span> <span class=\"c1\"># The generator id</span>\n  <span class=\"n\">DECISION_TREE_TIMESTAMP</span> <span class=\"c1\"># The timestamp at which the decision tree is retrieved</span>\n<span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\" Outputted tree is the following</span>\n<span class=\"sd\">{</span>\n<span class=\"sd\">  \"_version\": \"2.0.0\",</span>\n<span class=\"sd\">  \"trees\": {</span>\n<span class=\"sd\">    \"light\": {</span>\n<span class=\"sd\">        \"children\": [</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"predicted_value\": \"OFF\",</span>\n<span class=\"sd\">                \"confidence\": 0.9966583847999572,</span>\n<span class=\"sd\">                \"decision_rule\": {</span>\n<span class=\"sd\">                    \"operand\": [</span>\n<span class=\"sd\">                        7.25,</span>\n<span class=\"sd\">                        22.65</span>\n<span class=\"sd\">                    ],</span>\n<span class=\"sd\">                    \"operator\": \"[in[\",</span>\n<span class=\"sd\">                    \"property\": \"time\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"children\": [</span>\n<span class=\"sd\">                    {</span>\n<span class=\"sd\">                        \"predicted_value\": \"ON\",</span>\n<span class=\"sd\">                        \"confidence\": 0.9618390202522278,</span>\n<span class=\"sd\">                        \"decision_rule\": {</span>\n<span class=\"sd\">                            \"operand\": [</span>\n<span class=\"sd\">                                22.65,</span>\n<span class=\"sd\">                                0.06666667</span>\n<span class=\"sd\">                            ],</span>\n<span class=\"sd\">                            \"operator\": \"[in[\",</span>\n<span class=\"sd\">                            \"property\": \"time\"</span>\n<span class=\"sd\">                        }</span>\n<span class=\"sd\">                    },</span>\n<span class=\"sd\">                    {</span>\n<span class=\"sd\">                        \"children\": [</span>\n<span class=\"sd\">                            {</span>\n<span class=\"sd\">                                \"predicted_value\": \"OFF\",</span>\n<span class=\"sd\">                                \"confidence\": 0.9797198176383972,</span>\n<span class=\"sd\">                                \"decision_rule\": {</span>\n<span class=\"sd\">                                    \"operand\": [</span>\n<span class=\"sd\">                                        0.06666667,</span>\n<span class=\"sd\">                                        0.6</span>\n<span class=\"sd\">                                    ],</span>\n<span class=\"sd\">                                    \"operator\": \"[in[\",</span>\n<span class=\"sd\">                                    \"property\": \"time\"</span>\n<span class=\"sd\">                                }</span>\n<span class=\"sd\">                            },</span>\n<span class=\"sd\">                            {</span>\n<span class=\"sd\">                                \"children\": [</span>\n<span class=\"sd\">                                    {</span>\n<span class=\"sd\">                                        \"predicted_value\": \"ON\",</span>\n<span class=\"sd\">                                        \"confidence\": 0.9585137963294984,</span>\n<span class=\"sd\">                                        \"decision_rule\": {</span>\n<span class=\"sd\">                                            \"operand\": [</span>\n<span class=\"sd\">                                                0.6,</span>\n<span class=\"sd\">                                                2.25</span>\n<span class=\"sd\">                                            ],</span>\n<span class=\"sd\">                                            \"operator\": \"[in[\",</span>\n<span class=\"sd\">                                            \"property\": \"time\"</span>\n<span class=\"sd\">                                        }</span>\n<span class=\"sd\">                                    },</span>\n<span class=\"sd\">                                    {</span>\n<span class=\"sd\">                                        \"children\": [</span>\n<span class=\"sd\">                                            {</span>\n<span class=\"sd\">                                                \"predicted_value\": \"OFF\",</span>\n<span class=\"sd\">                                                \"confidence\": 0.8077218532562256,</span>\n<span class=\"sd\">                                                \"decision_rule\": {</span>\n<span class=\"sd\">                                                    \"operand\": [</span>\n<span class=\"sd\">                                                        2.25,</span>\n<span class=\"sd\">                                                        2.4666667</span>\n<span class=\"sd\">                                                    ],</span>\n<span class=\"sd\">                                                    \"operator\": \"[in[\",</span>\n<span class=\"sd\">                                                    \"property\": \"time\"</span>\n<span class=\"sd\">                                                }</span>\n<span class=\"sd\">                                            },</span>\n<span class=\"sd\">                                        ],</span>\n<span class=\"sd\">                                        \"decision_rule\": {</span>\n<span class=\"sd\">                                            \"operand\": [</span>\n<span class=\"sd\">                                                2.25,</span>\n<span class=\"sd\">                                                7.25</span>\n<span class=\"sd\">                                            ],</span>\n<span class=\"sd\">                                            \"operator\": \"[in[\",</span>\n<span class=\"sd\">                                            \"property\": \"time\"</span>\n<span class=\"sd\">                                        }</span>\n<span class=\"sd\">                                    }</span>\n<span class=\"sd\">                                ],</span>\n<span class=\"sd\">                                \"decision_rule\": {</span>\n<span class=\"sd\">                                    \"operand\": [</span>\n<span class=\"sd\">                                        0.6,</span>\n<span class=\"sd\">                                        7.25</span>\n<span class=\"sd\">                                    ],</span>\n<span class=\"sd\">                                    \"operator\": \"[in[\",</span>\n<span class=\"sd\">                                    \"property\": \"time\"</span>\n<span class=\"sd\">                                }</span>\n<span class=\"sd\">                            }</span>\n<span class=\"sd\">                        ],</span>\n<span class=\"sd\">                        \"decision_rule\": {</span>\n<span class=\"sd\">                            \"operand\": [</span>\n<span class=\"sd\">                                0.06666667,</span>\n<span class=\"sd\">                                7.25</span>\n<span class=\"sd\">                            ],</span>\n<span class=\"sd\">                            \"operator\": \"[in[\",</span>\n<span class=\"sd\">                            \"property\": \"time\"</span>\n<span class=\"sd\">                        }</span>\n<span class=\"sd\">                    }</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"decision_rule\": {</span>\n<span class=\"sd\">                    \"operand\": [</span>\n<span class=\"sd\">                        22.65,</span>\n<span class=\"sd\">                        7.25</span>\n<span class=\"sd\">                    ],</span>\n<span class=\"sd\">                    \"operator\": \"[in[\",</span>\n<span class=\"sd\">                    \"property\": \"time\"</span>\n<span class=\"sd\">                }</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        ]</span>\n<span class=\"sd\">    }</span>\n<span class=\"sd\">},</span>\n<span class=\"sd\">\"configuration\": {</span>\n<span class=\"sd\">    \"operations_as_events\": True,</span>\n<span class=\"sd\">    \"learning_period\": 1500000,</span>\n<span class=\"sd\">    \"tree_max_operations\": 15000,</span>\n<span class=\"sd\">    \"context\": {</span>\n<span class=\"sd\">        \"light\": {</span>\n<span class=\"sd\">            \"type\": \"enum\"</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"tz\": {</span>\n<span class=\"sd\">            \"type\": \"timezone\"</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"movement\": {</span>\n<span class=\"sd\">            \"type\": \"continuous\"</span>\n<span class=\"sd\">        },</span>\n<span class=\"sd\">        \"time\": {</span>\n<span class=\"sd\">            \"type\": \"time_of_day\",</span>\n<span class=\"sd\">            \"is_generated\": True</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    },</span>\n<span class=\"sd\">    \"output\": [</span>\n<span class=\"sd\">        \"light\"</span>\n<span class=\"sd\">    ],</span>\n<span class=\"sd\">    \"filter\": [</span>\n<span class=\"sd\">        \"smarthome\"</span>\n<span class=\"sd\">    ]</span>\n<span class=\"sd\">  }</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h4>Get decision</h4>\n<pre><span class=\"n\">const</span> <span class=\"n\">CONTEXT_OPS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"tz\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"movement\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"time\"</span><span class=\"p\">:</span> <span class=\"mf\">7.5</span>\n<span class=\"p\">};</span>\n<span class=\"n\">const</span> <span class=\"n\">DECISION_TREE_TIMESTAMP</span> <span class=\"o\">=</span> <span class=\"mi\">1469473600</span><span class=\"p\">;</span>\n<span class=\"n\">const</span> <span class=\"n\">GENERATOR_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'smarthome_gen'</span><span class=\"p\">;</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">computeGeneratorDecision</span><span class=\"p\">(</span>\n  <span class=\"n\">GENERATOR_NAME</span><span class=\"p\">,</span> <span class=\"c1\"># The name of the generator</span>\n  <span class=\"n\">DECISION_TREE_TIMESTAMP</span><span class=\"p\">,</span> <span class=\"c1\"># The timestamp at which the decision tree is retrieved</span>\n  <span class=\"n\">CONTEXT_OPS</span> <span class=\"c1\"># A valid context operation according to the generator configuration</span>\n<span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">{</span>\n<span class=\"sd\">  \"_version\": \"2.0.0\",</span>\n<span class=\"sd\">  \"context\": {</span>\n<span class=\"sd\">      \"tz\": \"+02:00\",</span>\n<span class=\"sd\">      \"movement\": 2,</span>\n<span class=\"sd\">      \"time\": 7.5</span>\n<span class=\"sd\">  },</span>\n<span class=\"sd\">  \"output\": {</span>\n<span class=\"sd\">    \"light\": {</span>\n<span class=\"sd\">        \"predicted_value\": \"OFF\",</span>\n<span class=\"sd\">        \"confidence\": 0.8386044502258301,</span>\n<span class=\"sd\">        \"decision_rules\": [</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"operand\": [</span>\n<span class=\"sd\">                    2.1166666,</span>\n<span class=\"sd\">                    10.333333</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"operator\": \"[in[\",</span>\n<span class=\"sd\">                \"property\": \"time\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"operand\": [</span>\n<span class=\"sd\">                    2.1166666,</span>\n<span class=\"sd\">                    9.3</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"operator\": \"[in[\",</span>\n<span class=\"sd\">                \"property\": \"time\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"operand\": [</span>\n<span class=\"sd\">                    2.1166666,</span>\n<span class=\"sd\">                    8.883333</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"operator\": \"[in[\",</span>\n<span class=\"sd\">                \"property\": \"time\"</span>\n<span class=\"sd\">            },</span>\n<span class=\"sd\">            {</span>\n<span class=\"sd\">                \"operand\": [</span>\n<span class=\"sd\">                    3.5333333,</span>\n<span class=\"sd\">                    8.883333</span>\n<span class=\"sd\">                ],</span>\n<span class=\"sd\">                \"operator\": \"[in[\",</span>\n<span class=\"sd\">                \"property\": \"time\"</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        ],</span>\n<span class=\"sd\">        \"nb_samples\": 442,</span>\n<span class=\"sd\">        \"decision_path\": \"0-0-0-0-1\",</span>\n<span class=\"sd\">        \"distribution\": [</span>\n<span class=\"sd\">            0.85067874,</span>\n<span class=\"sd\">            0.14932127</span>\n<span class=\"sd\">        ]</span>\n<span class=\"sd\">    }</span>\n<span class=\"sd\">  }</span>\n<span class=\"sd\">}\"\"\"</span>\n</pre>\n<h3>Context</h3>\n<h4>Add operations</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"p\">[</span> <span class=\"c1\"># The list of context operations</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469415720</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ON\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469416500</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469417460</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469419920</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469460180</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469471700</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ON\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469473560</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h5>Missing Values</h5>\n<p>If the value of a base type property is <strong>missing</strong>, you can send a <code>null</code> value. <strong>craft ai</strong> will take into account as much information as possible from this incomplete context.</p>\n<p>A context operation with a missing value looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469415720</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"kc\">null</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h5>Optional Values</h5>\n<p>If the value of an <strong>optional</strong> property is not filled at some point\u2014as should be expected from an optional value\u2014send the empty JSON Object <code>{}</code> to <strong>craft ai</strong>:</p>\n<p>A context with an optional value looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1469415720</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"temperature\"</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"nt\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>List operations</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_operations</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"mi\">1478894153</span><span class=\"p\">,</span> <span class=\"c1\"># Optional, the **start** timestamp from which the</span>\n              <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n  <span class=\"mi\">1478895266</span><span class=\"p\">,</span> <span class=\"c1\"># Optional, the **end** timestamp up to which the</span>\n              <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n<span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>This call can generate multiple requests to the craft ai API as results are paginated.</p>\n</blockquote>\n<h4>Retrieve state</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_context_state</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"mi\">1469473600</span> <span class=\"c1\"># The timestamp at which the context state is retrieved</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Retrieve state history</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_states</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"mi\">1478894153</span><span class=\"p\">,</span> <span class=\"c1\"># Optional, the **start** timestamp from which the</span>\n              <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n  <span class=\"mi\">1478895266</span><span class=\"p\">,</span> <span class=\"c1\"># Optional, the **end** timestamp up to which the</span>\n              <span class=\"c1\"># operations are retrieved (inclusive bound)</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Decision tree</h3>\n<p>Decision trees are computed at specific timestamps, directly by <strong>craft ai</strong> which learns from the context operations <a href=\"#add-operations\" rel=\"nofollow\">added</a> throughout time.</p>\n<p>When you <a href=\"#compute\" rel=\"nofollow\">compute</a> a decision tree, <strong>craft ai</strong> returns an object containing:</p>\n<ul>\n<li>\n<p>the <strong>API version</strong></p>\n</li>\n<li>\n<p>the agent's configuration as specified during the agent's <a href=\"#create-agent\" rel=\"nofollow\">creation</a></p>\n</li>\n<li>\n<p>the tree itself as a JSON object:</p>\n<ul>\n<li>Internal nodes are represented by a <code>\"decision_rule\"</code> object and a <code>\"children\"</code> array. The first one, contains the <code>\"property</code>, and the <code>\"property\"</code>'s value, to decide which child matches a context.</li>\n<li>Leaves have a <code>\"predicted_value\"</code>, <code>\"confidence\"</code> and <code>\"decision_rule\"</code> object for this value, instead of a <code>\"children\"</code> array. <code>\"predicted_value</code>\" is an estimation of the output in the contexts matching the node. <code>\"confidence\"</code> is a number between 0 and 1 that indicates how confident <strong>craft ai</strong> is that the output is a reliable prediction. When the output is a numerical type, leaves also have a <code>\"standard_deviation\"</code> that indicates a margin of error around the <code>\"predicted_value\"</code>.</li>\n<li>The root only contains a <code>\"children\"</code> array.</li>\n</ul>\n</li>\n</ul>\n<h4>Compute</h4>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_decision_tree</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"mi\">1469473600</span> <span class=\"c1\"># Optional the timestamp at which we want the decision</span>\n             <span class=\"c1\"># tree, default behavior is to return the decision tree</span>\n             <span class=\"c1\"># from the latest timestamp in context operations</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Take decision</h4>\n<blockquote>\n<p>:information_source: To take a decision, first compute the decision tree then use the <strong>offline interpreter</strong>.</p>\n</blockquote>\n<h3>Bulk</h3>\n<p>The craft ai API includes a bulk route which provides a programmatic option to perform asynchronous operations on agents. It allows the user to create, delete, add operations and compute decision trees for several agents at once.</p>\n<blockquote>\n<p>:warning: the bulk API is a quite advanced feature. It comes on top of the basic routes to create, delete, add context operations and compute decision tree. If messages are not self-explanatory, please refer to the basic routes that does the same operation for a single agent.</p>\n</blockquote>\n<h4>Bulk - Create</h4>\n<p>To create several agents at once, use the method <code>create_agents_bulk</code> as the following:</p>\n<pre><span class=\"n\">agent_id_1</span> <span class=\"o\">=</span> <span class=\"s1\">'my_first_agent'</span>\n<span class=\"n\">agent_id_2</span> <span class=\"o\">=</span> <span class=\"s1\">'my_second_agent'</span>\n\n<span class=\"n\">configuration_1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"continuous\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"time_of_day\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timezone\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"enum\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">configuration_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"n\">creation_bulk_payload</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_1</span><span class=\"p\">,</span> <span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"n\">configuration_1</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_2</span><span class=\"p\">,</span> <span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"n\">configuration_2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">created_agents</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_agents_bulk</span><span class=\"p\">(</span><span class=\"n\">creation_bulk_payload</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">created_agents</span><span class=\"p\">)</span>\n</pre>\n<p>The variable <code>created_agents</code> is an <strong>array of responses</strong>. If an agent has been successfully created, the corresponding response is an object similar to the classic <code>create_agent()</code> response. When there are <strong>mixed results</strong>, <code>created_agents</code> should looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'_version'</span><span class=\"p\">:</span> <span class=\"s1\">'2.0.0'</span><span class=\"p\">,</span>                                 <span class=\"c1\"># creation succeeded</span>\n   <span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n      <span class=\"p\">},</span>\n      <span class=\"s1\">'output'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n      <span class=\"s1\">'learning_period'</span><span class=\"p\">:</span> <span class=\"mi\">1500000</span><span class=\"p\">,</span>\n      <span class=\"s1\">'time_quantum'</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n   <span class=\"p\">},</span>\n   <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_first_agent'</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">CraftAiBadRequestError</span><span class=\"p\">(</span><span class=\"s1\">'error-message'</span><span class=\"p\">),</span>    <span class=\"c1\"># creation failed</span>\n   <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_second_agent'</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>Bulk - Delete</h4>\n<p>To delete several agents at once, use the method <code>delete_agents_bulk</code> as the following:</p>\n<pre><span class=\"n\">agent_id_1</span> <span class=\"o\">=</span> <span class=\"s1\">'my_first_agent'</span>\n<span class=\"n\">agent_id_2</span> <span class=\"o\">=</span> <span class=\"s1\">'my_second_agent'</span>\n\n<span class=\"n\">deletion_bulk_payload</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_1</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">deleted_agents</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_agents_bulk</span><span class=\"p\">(</span><span class=\"n\">creation_bulk_payload</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">agents_deleted</span><span class=\"p\">)</span>\n</pre>\n<p>The variable <code>deleted_agents</code> is an <strong>array of responses</strong>. If an agent has been successfully deleted, the corresponding response is an object similar to the classic <code>delete_agent()</code> response. When there are <strong>mixed results</strong>, <code>deleted_agents</code> should looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_first_agent'</span><span class=\"p\">,</span>                              <span class=\"c1\"># deletion succeeded</span>\n   <span class=\"s1\">'creationDate'</span><span class=\"p\">:</span> <span class=\"mi\">1557492944277</span><span class=\"p\">,</span>\n   <span class=\"s1\">'lastContextUpdate'</span><span class=\"p\">:</span> <span class=\"mi\">1557492944277</span><span class=\"p\">,</span>\n   <span class=\"s1\">'lastTreeUpdate'</span><span class=\"p\">:</span> <span class=\"mi\">1557492944277</span><span class=\"p\">,</span>\n   <span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n      <span class=\"p\">},</span>\n      <span class=\"s1\">'output'</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n      <span class=\"s1\">'learning_period'</span><span class=\"p\">:</span> <span class=\"mi\">1500000</span><span class=\"p\">,</span>\n      <span class=\"s1\">'time_quantum'</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n   <span class=\"p\">},</span>\n   <span class=\"s1\">'_version'</span><span class=\"p\">:</span> <span class=\"s1\">'2.0.0'</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">CraftAiBadRequestError</span><span class=\"p\">(</span><span class=\"s1\">'error-message'</span><span class=\"p\">),</span>    <span class=\"c1\"># deletion failed</span>\n   <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_second_agent'</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_unknown_agent'</span><span class=\"p\">}</span>                            <span class=\"c1\"># deletion succeeded</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>Bulk - Add context Operations</h4>\n<p>To add operations to several agents at once, use the method <code>add_agents_operations_bulk</code> as the following:</p>\n<pre><span class=\"n\">agent_id_1</span> <span class=\"o\">=</span> <span class=\"s1\">'my_first_agent'</span>\n<span class=\"n\">agent_id_2</span> <span class=\"o\">=</span> <span class=\"s1\">'my_second_agent'</span>\n\n<span class=\"n\">operations_agent_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n    <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'timezone'</span><span class=\"p\">:</span> <span class=\"s1\">'+02:00'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'peopleCount'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"s1\">'lightbulbState'</span><span class=\"p\">:</span> <span class=\"s1\">'OFF'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n    <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'peopleCount'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"s1\">'lightbulbState'</span><span class=\"p\">:</span> <span class=\"s1\">'ON'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n    <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'peopleCount'</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n    <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">1469410200</span><span class=\"p\">,</span>\n    <span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'lightbulbState'</span><span class=\"p\">:</span> <span class=\"s1\">'OFF'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">operations_agent_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n\n<span class=\"n\">addition_operations_bulk_payload</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_1</span><span class=\"p\">,</span> <span class=\"s1\">'operations'</span><span class=\"p\">:</span> <span class=\"n\">operations_agent_1</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_2</span><span class=\"p\">,</span> <span class=\"s1\">'operations'</span><span class=\"p\">:</span> <span class=\"n\">operations_agent_2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">agents</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">addAgentContextOperationsBulk</span><span class=\"p\">(</span><span class=\"n\">addition_operations_bulk_payload</span><span class=\"p\">)</span>\n</pre>\n<p>The variable <code>agents</code> is an <strong>array of responses</strong>. If an agent has successfully received operations, the corresponding response is an object similar to the classic <code>add_agent_operations()</code> response. When there are <strong>mixed results</strong>, <code>agents</code> should looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">201</span><span class=\"p\">,</span>                                <span class=\"c1\"># Addition of operation succeeded</span>\n    <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'message'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_first_agent'</span>\n  <span class=\"p\">}</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>                                 <span class=\"c1\"># Addition of operation failed</span>\n    <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">CraftAiBadRequestError</span><span class=\"p\">(</span><span class=\"s1\">'error_message'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_second_agent'</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>Bulk - Compute decision trees</h4>\n<p>To get the tree of several agents at once, use the method <code>get_agents_decision_trees_bulk</code> as the following:</p>\n<pre><span class=\"n\">agent_id_1</span> <span class=\"o\">=</span> <span class=\"s1\">'my_first_agent'</span>\n<span class=\"n\">agent_id_2</span> <span class=\"o\">=</span> <span class=\"s1\">'my_second_agent'</span>\n\n<span class=\"n\">decision_tree_bulk_payload</span> <span class=\"o\">=</span>  <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_1</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">trees</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agents_decision_trees_bulk</span><span class=\"p\">(</span><span class=\"n\">decision_tree_bulk_payload</span><span class=\"p\">)</span>\n</pre>\n<p>The variable <code>trees</code> is an <strong>array of responses</strong>. If an agent\u2019s model has successfully been created, the corresponding response is an object similar to the classic <code>get_agents_decision_trees_bulk()</code> response. When there are <strong>mixed results</strong>, trees should looks like:</p>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_first_agent'</span><span class=\"p\">,</span>                              <span class=\"c1\"># Getting of the tree succeeded</span>\n   <span class=\"s1\">'tree'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n     <span class=\"s1\">'trees'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n     <span class=\"s1\">'_version'</span><span class=\"p\">:</span> <span class=\"s1\">'1.1.0'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'configuration'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"mi\">1458741735</span>\n   <span class=\"p\">},</span>\n   <span class=\"p\">{</span>\n   <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">CraftAiBadRequestError</span><span class=\"p\">(</span><span class=\"s1\">'error_message'</span><span class=\"p\">),</span>  <span class=\"c1\"># Getting of the tree failed</span>\n   <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_second_agent'</span>\n   <span class=\"p\">}</span>\n   <span class=\"p\">{</span>\n   <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"n\">CraftAiNotFoundError</span><span class=\"p\">(</span><span class=\"s1\">'error_message'</span><span class=\"p\">),</span>    <span class=\"c1\"># Getting of the tree failed</span>\n   <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'my_unknown_agent'</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Advanced client configuration</h3>\n<p>The simple configuration to create the <code>client</code> is just the token. For special needs, additional advanced configuration can be provided.</p>\n<h4>Amount of operations sent in one chunk</h4>\n<p><code>client.add_agent_operations</code> splits the provided operations into chunks in order to limit the size of the http requests to the craft ai API. In the client configuration, <code>operationsChunksSize</code> can be increased in order to limit the number of request, or decreased when large http requests cause errors.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">({</span>\n    <span class=\"c1\"># Mandatory, the token</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{token}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Optional, default value is 200</span>\n    <span class=\"s2\">\"operationsChunksSize\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">max_number_of_operations_sent_at_once</span><span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Timeout duration for decision trees retrieval</h4>\n<p>It is possible to increase or decrease the timeout duration of <code>client.get_agent_decision_tree</code>, for exemple to account for especially long computations.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">({</span>\n    <span class=\"c1\"># Mandatory, the token</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{token}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Optional, default value is 600000 (10 minutes)</span>\n    <span class=\"s2\">\"decisionTreeRetrievalTimeout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{timeout_duration_for_decision_trees_retrieval}</span><span class=\"s2\">\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Proxy</h4>\n<p>It is possible to provide proxy configuration in the <code>proxy</code> property of the client configuration. It will be used to call the craft ai API (through HTTPS). The expected format is a host name or IP and port, optionally preceded by credentials such as <code>http://user:pass@10.10.1.10:1080</code>.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">({</span>\n    <span class=\"c1\"># Mandatory, the token</span>\n    <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{token}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Optional, no default value</span>\n    <span class=\"s2\">\"proxy\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://</span><span class=\"si\">{user}</span><span class=\"s2\">:</span><span class=\"si\">{password}</span><span class=\"s2\">@</span><span class=\"si\">{host_or_ip}</span><span class=\"s2\">:</span><span class=\"si\">{port}</span><span class=\"s2\">\"</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Advanced network configuration</h4>\n<p>For more advanced network configuration, it is possible to access the <a href=\"http://docs.python-requests.org/en/master/user/advanced/#session-objects\" rel=\"nofollow\">Requests Session</a> used by the client to send requests to the craft ai API, through <code>client._requests_session</code>.</p>\n<pre><span class=\"c1\"># Disable SSL certificate verification</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">_requests_session</span><span class=\"o\">.</span><span class=\"n\">verify</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<h2>Interpreter</h2>\n<p>The decision tree interpreter can be used offline from decisions tree computed through the API.</p>\n<h3>Take decision</h3>\n<p>Note that the python interpreter takes an array of contexts.</p>\n<pre><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"o\">...</span> <span class=\"p\">}</span> <span class=\"c1\"># Decision tree as retrieved through the craft ai REST API</span>\n\n<span class=\"c1\"># Compute the decision on a fully described context</span>\n<span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Interpreter</span><span class=\"o\">.</span><span class=\"n\">decide</span><span class=\"p\">(</span>\n  <span class=\"n\">tree</span><span class=\"p\">,</span>\n  <span class=\"p\">[{</span> <span class=\"c1\"># The context on which the decision is taken</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"mf\">7.5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n  <span class=\"p\">}]</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Or Compute the decision on a context created from the given one and filling the</span>\n<span class=\"c1\"># `day_of_week`, `time_of_day` and `timezone` properties from the given `Time`</span>\n\n<span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Interpreter</span><span class=\"o\">.</span><span class=\"n\">decide</span><span class=\"p\">(</span>\n  <span class=\"n\">tree</span><span class=\"p\">,</span>\n  <span class=\"p\">[{</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n  <span class=\"p\">},</span>\n  <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">(</span><span class=\"s2\">\"2010-01-01T07:30:30+0200\"</span><span class=\"p\">)</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>A computed <code>decision</code> on an <code>enum</code> output type would look like:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># In which context the decision was taken</span>\n    <span class=\"s2\">\"timezone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">:</span> <span class=\"mf\">7.5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># The decision itself</span>\n    <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"predicted_value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ON\"</span>\n      <span class=\"s2\">\"confidence\"</span><span class=\"p\">:</span> <span class=\"mf\">0.9937745256361138</span><span class=\"p\">,</span> <span class=\"c1\"># The confidence in the decision</span>\n      <span class=\"s2\">\"decision_rules\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"c1\"># The ordered list of decision_rules that were validated to reach this decision</span>\n        <span class=\"p\">{</span>\n          <span class=\"s2\">\"property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"timeOfDay\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&gt;=\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"operand\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"s2\">\"property\"</span><span class=\"p\">:</span> <span class=\"s2\">\"peopleCount\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&gt;=\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"operand\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">],</span>\n      <span class=\"s2\">\"nb_samples\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"distribution\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">],</span>\n      <span class=\"s2\">\"decision_path\"</span> <span class=\"s2\">\"0-1-1\"</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A <code>decision</code> for a numerical output type would look like:</p>\n<pre>  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"lightbulbIntensity\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"predicted_value\"</span><span class=\"p\">:</span> <span class=\"mf\">10.5</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"standard_deviation\"</span><span class=\"p\">:</span> <span class=\"mf\">1.25</span><span class=\"p\">,</span> <span class=\"c1\"># For numerical types, this field is returned in decisions.</span>\n      <span class=\"s2\">\"min\"</span><span class=\"p\">:</span> <span class=\"mf\">8.0</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"max\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"nb_samples\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"decision_rules\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">],</span>\n      <span class=\"s2\">\"confidence\"</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"decision_path\"</span> <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre>\n<p>A <code>decision</code> for a categorical output type would look like:</p>\n<pre>  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"predicted_value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"nb_samples\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"distribution\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">],</span> <span class=\"c1\"># Distribution of the output classes normalized by the number of samples in the reached node.</span>\n      <span class=\"s2\">\"decision_rules\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">],</span>\n      <span class=\"s2\">\"confidence\"</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"decision_path\"</span> <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre>\n<p>A <code>decision</code> in a case where the tree cannot make a prediction:</p>\n<pre>  <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"predicted_value\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"distribution\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">],</span> <span class=\"c1\"># Distribution of the output classes normalized by the number of samples in the reached node.</span>\n      <span class=\"s2\">\"confidence\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"c1\"># Zero confidence if the decision is null</span>\n      <span class=\"s2\">\"decision_rules\"</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"p\">],</span>\n      <span class=\"s2\">\"decision_path\"</span> <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre>\n<h3>Reduce decision rules</h3>\n<p>From a list of decision rules, as retrieved when taking a decision, when taking a decision compute an equivalent &amp; minimal list of rules.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">craft_ai</span> <span class=\"kn\">import</span> <span class=\"n\">reduce_decision_rules</span>\n\n<span class=\"c1\"># `decision` is the decision tree as retrieved from taking a decision</span>\n<span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Interpreter</span><span class=\"o\">.</span><span class=\"n\">decide</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># `decision_rules` is the decision rules that led to decision for the `lightBulbState` value</span>\n<span class=\"n\">decision_rules</span> <span class=\"o\">=</span> <span class=\"n\">decision</span><span class=\"p\">[</span><span class=\"s2\">\"output\"</span><span class=\"p\">][</span><span class=\"s2\">\"lightBulbState\"</span><span class=\"p\">][</span><span class=\"s2\">\"decision_rules\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># `minimal_decision_rules` has the mininum list of rules strictly equivalent to `decision_rules`</span>\n<span class=\"n\">minimal_decision_rules</span> <span class=\"o\">=</span> <span class=\"n\">reduce_decision_rules</span><span class=\"p\">(</span><span class=\"n\">decisionRules</span><span class=\"p\">)</span>\n</pre>\n<h3>Format decision rules</h3>\n<p>From a list of decision rules, compute a <em>human readable</em> version of these rules, in english.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">craft_ai</span> <span class=\"kn\">import</span> <span class=\"n\">format_decision_rules</span>\n\n<span class=\"c1\"># `decision` is the decision tree as retrieved from taking a decision</span>\n<span class=\"n\">decision</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">Interpreter</span><span class=\"o\">.</span><span class=\"n\">decide</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># `decision_rules` is the decision rules that led to decision for the `lightBulbState` value</span>\n<span class=\"n\">decision_rules</span> <span class=\"o\">=</span> <span class=\"n\">decision</span><span class=\"p\">[</span><span class=\"s2\">\"output\"</span><span class=\"p\">][</span><span class=\"s2\">\"lightbulbState\"</span><span class=\"p\">][</span><span class=\"s2\">\"decision_rules\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># `decision_rules_str` is a human readable string representation of the rules.</span>\n<span class=\"n\">decision_rules_str</span> <span class=\"o\">=</span> <span class=\"n\">format_decision_rules</span><span class=\"p\">(</span><span class=\"n\">decision_rules</span><span class=\"p\">)</span>\n</pre>\n<h2>Error Handling</h2>\n<p>When using this client, you should be careful wrapping calls to the API with <code>try/except</code> blocks, in accordance with the <a href=\"https://docs.python.org/3/glossary.html#term-eafp\" rel=\"nofollow\">EAFP</a> principle.</p>\n<p>The <strong>craft ai</strong> python client has its specific exception types, all of them inheriting from the <code>CraftAIError</code> type.</p>\n<p>All methods which have to send an http request (all of them except <code>decide</code>) may raise either of these exceptions: <code>CraftAINotFoundError</code>, <code>CraftAIBadRequestError</code>, <code>CraftAICredentialsError</code> or <code>CraftAIUnknownError</code>.</p>\n<p>The <code>decide</code>\u00a0method only raises <code>CrafAIDecisionError</code> of <code>CraftAiNullDecisionError</code> type of exceptions. The latter is raised when no the given context is valid but no decision can be taken.</p>\n<h2>Pandas support</h2>\n<p>The craft ai python client optionally supports <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">pandas</a> a very popular library used for all things data.</p>\n<p>You'll need to install <code>craft-ai</code> with its <code>pandas</code> <a href=\"https://packaging.python.org/tutorials/installing-packages/#installing-setuptools-extras\" rel=\"nofollow\">extra</a></p>\n<pre>pip install --upgrade craft-ai<span class=\"o\">[</span>pandas<span class=\"o\">]</span>\n</pre>\n<p>Then, instead of importing the default module, do the following</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">craft_ai.pandas</span>\n\n<span class=\"c1\"># Most of the time you'll need the following</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"c1\"># Client must then be defined using craft_ai.pandas module</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">craft_ai</span><span class=\"o\">.</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">({</span>\n  <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{token}</span><span class=\"s2\">\"</span>\n<span class=\"p\">})</span>\n</pre>\n<p>The craft ai pandas module is derived for the <em>vanilla</em> one, with the following methods are overriden to support pandas' <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" rel=\"nofollow\"><code>DataFrame</code></a>.</p>\n<h4><code>craft_ai.pandas.Client.get_agent_operations</code></h4>\n<p>Retrieves the desired operations as a <code>DataFrame</code> where:</p>\n<ul>\n<li>each operation is a row,</li>\n<li>each context property is a column,</li>\n<li>the index is <a href=\"https://pandas.pydata.org/pandas-docs/stable/timeseries.html\" rel=\"nofollow\"><em>time based</em></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones\" rel=\"nofollow\">timezone-aware</a> and matching the operations timestamps,</li>\n<li><code>np.NaN</code> means no value were given at this property for this timestamp.</li>\n</ul>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_operations</span><span class=\"p\">(</span><span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `df` is a pd.DataFrame looking like</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#                            peopleCount  lightbulbState   timezone</span>\n<span class=\"c1\"># 2013-01-01 00:00:00+00:00   0            OFF              +02:00</span>\n<span class=\"c1\"># 2013-01-02 00:00:00+00:00   1            ON               NaN</span>\n<span class=\"c1\"># 2013-01-03 00:00:00+00:00   2            NaN              NaN</span>\n<span class=\"c1\"># 2013-01-04 00:00:00+00:00   NaN          OFF              NaN</span>\n<span class=\"c1\"># 2013-01-05 00:00:00+00:00   0            NaN              NaN</span>\n</pre>\n<h4><code>craft_ai.pandas.Client.add_agent_operations</code></h4>\n<p>Add a <code>DataFrame</code> of operations to the desired agent. The format is the same as above.</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"ON\"</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"c1\"># timezone will be \"+02:00\"</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">]</span>\n  <span class=\"p\">],</span>\n  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'peopleCount'</span><span class=\"p\">,</span> <span class=\"s1\">'lightbulbState'</span><span class=\"p\">,</span> <span class=\"s1\">'timezone'</span><span class=\"p\">],</span>\n  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'20130101'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s2\">\"UTC\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span><span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>Given an object that is not a <code>DataFrame</code> this method behave like the <em>vanilla</em> <code>craft_ai.Client.add_agent_operations</code>.</p>\n<p>Furthermore, missing values and optional values can be handled by the craft ai pandas client. To do so, we introduce two new types that are <code>craft_ai.pandas.MISSING_VALUE</code> for <a href=\"#missing-values\" rel=\"nofollow\">missing values</a> and <code>craft_ai.pandas.OPTIONAL_VALUE</code> for <a href=\"#optional-values\" rel=\"nofollow\">optional values</a>.\nTo send your <code>DataFrame</code> with actual missing values or optional values, you must use one of these types:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">craft_ai.pandas</span> <span class=\"kn\">import</span> <span class=\"n\">MISSING_VALUE</span><span class=\"p\">,</span> <span class=\"n\">OPTIONAL_VALUE</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">MISSING_VALUE</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">MISSING_VALUE</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">OPTIONAL_VALUE</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">]</span>\n  <span class=\"p\">],</span>\n  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'peopleCount'</span><span class=\"p\">,</span> <span class=\"s1\">'timezone'</span><span class=\"p\">],</span>\n  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'20130101'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s2\">\"UTC\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agent_operations</span><span class=\"p\">(</span><span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>To ensure that all the missing values contained in your <code>DataFrame</code> are to the right format and can be handled by the craft ai pandas client, it is suggested to preprocess this latter by replacing all <code>na</code> values by the desired one:</p>\n<pre><span class=\"n\">contexts_df</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"n\">MISSING_VALUE</span><span class=\"p\">)</span> <span class=\"c1\"># Or OPTIONAL_VALUE</span>\n</pre>\n<h4><code>craft_ai.pandas.Client.get_agent_states</code></h4>\n<p>Retrieves the desired state history as a <code>DataFrame</code> where:</p>\n<ul>\n<li>each state is a row,</li>\n<li>each context property is a column,</li>\n<li>the index is <a href=\"https://pandas.pydata.org/pandas-docs/stable/timeseries.html\" rel=\"nofollow\"><em>time based</em></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/timeseries.html#working-with-time-zones\" rel=\"nofollow\">timezone-aware</a> and matching the operations timestamps.</li>\n</ul>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_states</span><span class=\"p\">(</span><span class=\"s2\">\"my_new_agent\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># `df` is a pd.DataFrame looking like</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#                            peopleCount  lightbulbState   timezone</span>\n<span class=\"c1\"># 2013-01-01 00:00:00+00:00   0            OFF              +02:00</span>\n<span class=\"c1\"># 2013-01-02 00:00:00+00:00   1            ON               +02:00</span>\n<span class=\"c1\"># 2013-01-03 00:00:00+00:00   2            ON               +02:00</span>\n<span class=\"c1\"># 2013-01-04 00:00:00+00:00   2            OFF              +02:00</span>\n<span class=\"c1\"># 2013-01-05 00:00:00+00:00   0            OFF              +02:00</span>\n</pre>\n<h4><code>craft_ai.pandas.Client.decide_from_contexts_df</code></h4>\n<p>Take multiple decisions on a given <code>DataFrame</code> following the same format as above.</p>\n<pre><span class=\"n\">decisions_df</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">decide_from_contexts_df</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">]</span>\n  <span class=\"p\">],</span>\n  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'peopleCount'</span><span class=\"p\">,</span> <span class=\"s1\">'timezone'</span><span class=\"p\">],</span>\n  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'20130101'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s2\">\"UTC\"</span><span class=\"p\">)</span>\n<span class=\"p\">))</span>\n<span class=\"c1\"># `decisions_df` is a pd.DataFrame looking like</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#                            lightbulbState_predicted_value   lightbulbState_confidence  ...</span>\n<span class=\"c1\"># 2013-01-01 00:00:00+00:00   OFF                              0.999449                  ...</span>\n<span class=\"c1\"># 2013-01-02 00:00:00+00:00   ON                               0.970325                  ...</span>\n<span class=\"c1\"># 2013-01-03 00:00:00+00:00   ON                               0.970325                  ...</span>\n<span class=\"c1\"># 2013-01-04 00:00:00+00:00   ON                               0.970325                  ...</span>\n<span class=\"c1\"># 2013-01-05 00:00:00+00:00   OFF                              0.999449                  ...</span>\n</pre>\n<p>This function also accepts craft ai missing values and optional values types, <code>craft_ai.pandas.MISSING_VALUE</code> and <code>craft_ai.pandas.OPTIONAL_VALUE</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">craft_ai.pandas</span> <span class=\"kn\">import</span> <span class=\"n\">MISSING_VALUE</span><span class=\"p\">,</span> <span class=\"n\">OPTIONAL_VALUE</span>\n\n<span class=\"n\">decisions_df</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">decide_from_contexts_df</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">MISSING_VALUE</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">MISSING_VALUE</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">]</span>\n  <span class=\"p\">],</span>\n  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'peopleCount'</span><span class=\"p\">,</span> <span class=\"s1\">'timezone'</span><span class=\"p\">],</span>\n  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'20130101'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s2\">\"UTC\"</span><span class=\"p\">)</span>\n<span class=\"p\">))</span>\n</pre>\n<p>This function never raises <code>CraftAiNullDecisionError</code>, instead it inserts these errors in the result <code>Dataframe</code> in a specific <code>error</code> column.</p>\n<h4><code>craft_ai.pandas.utils.create_tree_html</code></h4>\n<p>Returns a HTML version of the given decision tree. If this latter is saved in a <code>.html</code> file, it can be opened in\na browser to be visualized.</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">craft_ai.pandas.utils</span> <span class=\"kn\">import</span> <span class=\"n\">create_tree_html</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_decision_tree</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"n\">timestamp</span> <span class=\"c1\"># The timestamp at which the decision tree is retrieved</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">create_tree_html</span><span class=\"p\">(</span>\n  <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"c1\"># The decision tree</span>\n  <span class=\"n\">decision_path</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"</span>\n  <span class=\"n\">edge_type</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"</span>\n  <span class=\"n\">folded_nodes</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) An array of nodes path to fold when the tree is plotted. Default: None</span>\n  <span class=\"n\">height</span> <span class=\"c1\"># (Optional) The height in pixel of the created plot. Default: 500.</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># ... save the html string to visualize it in a browser</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<h4><code>craft_ai.pandas.utils.display_tree</code></h4>\n<p>Display a decision tree in a Jupyter Notebook.\nThis function can be useful for analyzing the induced decision trees.</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">craft_ai.pandas.utils</span> <span class=\"kn\">import</span> <span class=\"n\">display_tree</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_agent_decision_tree</span><span class=\"p\">(</span>\n  <span class=\"s2\">\"my_agent\"</span><span class=\"p\">,</span> <span class=\"c1\"># The agent id</span>\n  <span class=\"n\">timestamp</span> <span class=\"c1\"># The timestamp at which the decision tree is retrieved</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">display_tree</span><span class=\"p\">(</span>\n  <span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"c1\"># The decision tree</span>\n  <span class=\"n\">decision_path</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) The path to a node. This will plot the tree with this node already selected. Default: \"\"</span>\n  <span class=\"n\">edge_type</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) The way the decision tree edges are plotted - (\"constant\", \"absolute\" or \"relative\"). Default: \"constant\"</span>\n  <span class=\"n\">folded_nodes</span><span class=\"p\">,</span> <span class=\"c1\"># (Optional) An array of nodes path to fold when the tree is plotted. Default: None</span>\n  <span class=\"n\">height</span> <span class=\"c1\"># (Optional) The height in pixel of the created plot. Default: 500.</span>\n<span class=\"p\">)</span>\n</pre>\n<h4><code>craft_ai.pandas.client.add_agents_operations_bulk</code></h4>\n<p>Add operations to several agents at once.</p>\n<pre><span class=\"n\">agent_id_1</span> <span class=\"o\">=</span> <span class=\"s1\">'my_first_agent'</span>\n<span class=\"n\">agent_id_2</span> <span class=\"o\">=</span> <span class=\"s1\">'my_second_agent'</span>\n\n<span class=\"n\">operations_agent_1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n  <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span> <span class=\"s2\">\"+02:00\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"ON\"</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"c1\"># timezone will be \"+02:00\"</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"s2\">\"OFF\"</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">]</span>\n  <span class=\"p\">],</span>\n  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'peopleCount'</span><span class=\"p\">,</span> <span class=\"s1\">'lightbulbState'</span><span class=\"p\">,</span> <span class=\"s1\">'timezone'</span><span class=\"p\">],</span>\n  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s1\">'20130101'</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s2\">\"UTC\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">operations_agent_2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([</span><span class=\"o\">...</span><span class=\"p\">])</span>\n\n<span class=\"n\">addition_operations_bulk_payload</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_1</span><span class=\"p\">,</span> <span class=\"s1\">'operations'</span><span class=\"p\">:</span> <span class=\"n\">operations_agent_1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">agent_id_2</span><span class=\"p\">,</span> <span class=\"s1\">'operations'</span><span class=\"p\">:</span> <span class=\"n\">operations_agent_2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">add_agents_operations_bulk</span><span class=\"p\">(</span><span class=\"n\">addition_operations_bulk_payload</span><span class=\"p\">)</span>\n</pre>\n<p>Given an object that is not a <code>DataFrame</code> this method behave like the <em>vanilla</em> <code>craft_ai.Client.add_agents_operations_bulk</code>.</p>\n\n          </div>"}, "last_serial": 6834461, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "f1f361d77828a797f1d1d622b537770e", "sha256": "c7ea06000b1cf586271f6b64f19c7dbcb1dda6dcd142cf9cce6cc0c0fcf0fc92"}, "downloads": -1, "filename": "craft_ai-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f1f361d77828a797f1d1d622b537770e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9013, "upload_time": "2016-08-04T11:11:12", "upload_time_iso_8601": "2016-08-04T11:11:12.691649Z", "url": "https://files.pythonhosted.org/packages/b8/a7/8228880d36b7f4897b077df8b6d5ed19d56dfb87b6efef4b3c6246d5400f/craft_ai-0.2-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "959545c12d3b16695eeb2d5736a32925", "sha256": "667b5595b3ccd560feb0ff75483f02f4eab2f04707226616e0c9c2025541c6f5"}, "downloads": -1, "filename": "craft_ai-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "959545c12d3b16695eeb2d5736a32925", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16308, "upload_time": "2016-08-12T12:21:17", "upload_time_iso_8601": "2016-08-12T12:21:17.478222Z", "url": "https://files.pythonhosted.org/packages/85/0a/2df042f2e78de4cd8325fc2763dc5ee1419d48fbffcce6d4aa20e40105be/craft_ai-0.3-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b962b6c716b9429eb5909a46e6668494", "sha256": "18be2a81279ba24c99f26553a20fae5459b57b2421d6c1793a7ccbd3b4f9865d"}, "downloads": -1, "filename": "craft_ai-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b962b6c716b9429eb5909a46e6668494", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16349, "upload_time": "2016-08-12T14:51:39", "upload_time_iso_8601": "2016-08-12T14:51:39.821881Z", "url": "https://files.pythonhosted.org/packages/19/06/50d0820c73ff792b8d6bc93d151a0a9458661a20994cd1613b70270cb7c0/craft_ai-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f287e214116454734792f291858e54f7", "sha256": "96c168bac67693ca8a36fb1616ded3d8d48ac3cddf305c0352d35f63479ea881"}, "downloads": -1, "filename": "craft_ai-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f287e214116454734792f291858e54f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16403, "upload_time": "2016-08-12T16:45:47", "upload_time_iso_8601": "2016-08-12T16:45:47.131494Z", "url": "https://files.pythonhosted.org/packages/2e/f7/f0ea8f0d22a91d34f727c08dc5c10ac668422aae4dbe4efe45b722efad0c/craft_ai-0.3.2-py2.py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "5fe37eaebd6e26b8aef165ffe304a3c3", "sha256": "68eb85bdaa9ebcc55ea690b183fe655d4e3909a562bd8c1a6bc6f53789032a72"}, "downloads": -1, "filename": "craft_ai-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5fe37eaebd6e26b8aef165ffe304a3c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17912, "upload_time": "2016-08-23T14:57:42", "upload_time_iso_8601": "2016-08-23T14:57:42.226726Z", "url": "https://files.pythonhosted.org/packages/69/84/59e9260e424210096ac10587359018cdf0b878ab1a534089a2d785bae465/craft_ai-0.4-py2.py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "44e63bc36cc83f818dfa86f0e886b372", "sha256": "0b6e51c35f58605d5c62de30a9c8b82c5a69fa4c5f2dbd3f2b591e41c6c3ebab"}, "downloads": -1, "filename": "craft_ai-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "44e63bc36cc83f818dfa86f0e886b372", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21901, "upload_time": "2016-08-23T16:50:54", "upload_time_iso_8601": "2016-08-23T16:50:54.446807Z", "url": "https://files.pythonhosted.org/packages/36/ed/554ab41adff92622a03c5b63938b57fa2681e47fc3c09d3b8e6dcf92e2b8/craft_ai-0.4.1-py2.py3-none-any.whl", "yanked": false}], "0.4.10": [{"comment_text": "", "digests": {"md5": "22c688bc210ee2b5320f25e1541075ab", "sha256": "7ba73a502447da5b85d44ccfd0ab560490f5e95a8b2cba91f5ac039c52b300af"}, "downloads": -1, "filename": "craft_ai-0.4.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "22c688bc210ee2b5320f25e1541075ab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24947, "upload_time": "2017-01-16T17:13:35", "upload_time_iso_8601": "2017-01-16T17:13:35.644118Z", "url": "https://files.pythonhosted.org/packages/7d/6d/f0a984f561347ac0f9aee6e353a98cd09fe36b01a1be57aace650b80d3f9/craft_ai-0.4.10-py2.py3-none-any.whl", "yanked": false}], "0.4.11": [{"comment_text": "", "digests": {"md5": "055ebd700893d4386eaf737c30ecb5db", "sha256": "7e14f1b83b3ef5dbe048b1e2a722b8245a312564ac1ed109a1506ba32d917aa6"}, "downloads": -1, "filename": "craft_ai-0.4.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "055ebd700893d4386eaf737c30ecb5db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25207, "upload_time": "2017-02-13T07:43:01", "upload_time_iso_8601": "2017-02-13T07:43:01.620271Z", "url": "https://files.pythonhosted.org/packages/78/70/33d1bd9ee515a0046caa38237d5a35edb0225de1c43126a5bc79accfeb5f/craft_ai-0.4.11-py2.py3-none-any.whl", "yanked": false}], "0.4.12": [{"comment_text": "", "digests": {"md5": "973ffd35a4df7339feac5a7e365db02d", "sha256": "4c29a2deeb18cacb3ffeb07835d35e2a97c1983a6f5c56503bdc400af6a96035"}, "downloads": -1, "filename": "craft_ai-0.4.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "973ffd35a4df7339feac5a7e365db02d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26316, "upload_time": "2017-03-08T17:54:54", "upload_time_iso_8601": "2017-03-08T17:54:54.284975Z", "url": "https://files.pythonhosted.org/packages/2b/21/329fcbabb9c298e6063638f054267f278bc3944417892fede73aa0605b46/craft_ai-0.4.12-py2.py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ab3544127939e1f91bf44a30e0d7e3d1", "sha256": "7a180d509f44b1546f3329ca0e1745d1cc667b9d540362f148d50daf824173a2"}, "downloads": -1, "filename": "craft_ai-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab3544127939e1f91bf44a30e0d7e3d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21902, "upload_time": "2016-08-23T17:07:44", "upload_time_iso_8601": "2016-08-23T17:07:44.793874Z", "url": "https://files.pythonhosted.org/packages/71/b9/41d1ff69fe883d3aa44f82dbee3e764b98f23984ddabaacb9b47ddc4f70e/craft_ai-0.4.2-py2.py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "bb249cc2ceb76507c199e277e3638f07", "sha256": "d6fcf6047febf5b973caad8f4e03990d1e38fe2a43804d851bdf9afcb840bb29"}, "downloads": -1, "filename": "craft_ai-0.4.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bb249cc2ceb76507c199e277e3638f07", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23502, "upload_time": "2016-08-25T12:17:21", "upload_time_iso_8601": "2016-08-25T12:17:21.728467Z", "url": "https://files.pythonhosted.org/packages/c3/48/7f1e4bce82f2aebc1c08a389f745a03535370ee2cc376802c429d64957af/craft_ai-0.4.3-py2.py3-none-any.whl", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "6727626a3ed01c8cd3c86bee860ba146", "sha256": "754f7ae68522e854a4b6953e5a6e3cd92af891b50fda52ea2344a9af5a2d7bc1"}, "downloads": -1, "filename": "craft_ai-0.4.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6727626a3ed01c8cd3c86bee860ba146", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23515, "upload_time": "2016-08-30T14:19:10", "upload_time_iso_8601": "2016-08-30T14:19:10.800148Z", "url": "https://files.pythonhosted.org/packages/f7/b9/069576721537a5ecdafc7358324215ba3a5f85c962dfe8399ce66aa58783/craft_ai-0.4.4-py2.py3-none-any.whl", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "b761607f5b099d2e91c22ba8fd63476a", "sha256": "d5fb7fb793a9abc84de26333c6b66caccdc5bb07c8697f854f6b951b62c29466"}, "downloads": -1, "filename": "craft_ai-0.4.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b761607f5b099d2e91c22ba8fd63476a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24818, "upload_time": "2016-10-14T13:21:01", "upload_time_iso_8601": "2016-10-14T13:21:01.037697Z", "url": "https://files.pythonhosted.org/packages/87/cc/7bb5bcdd6a68f5121be170acc7bd0f959b46d7ccc544b177cc88fde34a64/craft_ai-0.4.5-py2.py3-none-any.whl", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "3c28b4746785ec027bac675d66f73e1c", "sha256": "597c39b8cf286ccc9c2576b859d36065b68cb82fccf2d12f6ac1292341303af5"}, "downloads": -1, "filename": "craft_ai-0.4.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c28b4746785ec027bac675d66f73e1c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24780, "upload_time": "2016-10-14T17:08:32", "upload_time_iso_8601": "2016-10-14T17:08:32.874475Z", "url": "https://files.pythonhosted.org/packages/ac/58/e76c4442571998250e2acec069886a87266244694c4b6fdb6c3a31e0d33b/craft_ai-0.4.6-py2.py3-none-any.whl", "yanked": false}], "0.4.7": [{"comment_text": "", "digests": {"md5": "ee30967e6145d38382a2e20fc53d1479", "sha256": "90dc842b2c67274ae98ff45c5daf453edb3c05fbfafd034ebeb37932598db9e7"}, "downloads": -1, "filename": "craft_ai-0.4.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee30967e6145d38382a2e20fc53d1479", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24779, "upload_time": "2016-10-17T12:15:12", "upload_time_iso_8601": "2016-10-17T12:15:12.011172Z", "url": "https://files.pythonhosted.org/packages/6f/d3/96c1981446c9a29762278a6bee8f890d881f101f91df595b9b5ae8f0bd7a/craft_ai-0.4.7-py2.py3-none-any.whl", "yanked": false}], "0.4.8": [{"comment_text": "", "digests": {"md5": "387d80db5b7f91a91a25f7ddbc9545be", "sha256": "efb87ee0a997b0e531d71617368b58f589bbcc87c7d0a9cb2da830cd92896cdd"}, "downloads": -1, "filename": "craft_ai-0.4.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "387d80db5b7f91a91a25f7ddbc9545be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24792, "upload_time": "2016-11-16T15:48:54", "upload_time_iso_8601": "2016-11-16T15:48:54.883616Z", "url": "https://files.pythonhosted.org/packages/8e/76/6674e78229ddd4fe5065ee1ac63450e53f1b829883f88edb3c54c56662fa/craft_ai-0.4.8-py2.py3-none-any.whl", "yanked": false}], "0.4.9": [{"comment_text": "", "digests": {"md5": "2e4ff0b45fac494df51ea26c15c8f6fe", "sha256": "10bf5adc30637cdb6c223fe58c642b3d59e9775a9fb0b578b7371e33b6a658be"}, "downloads": -1, "filename": "craft_ai-0.4.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e4ff0b45fac494df51ea26c15c8f6fe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24808, "upload_time": "2016-12-08T13:29:28", "upload_time_iso_8601": "2016-12-08T13:29:28.366917Z", "url": "https://files.pythonhosted.org/packages/5b/3d/6d1d39f009ee0d52d8d9b38c1bb1750be54873345b9e9e926b19e39ad8cc/craft_ai-0.4.9-py2.py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e7f756cd850ede5b3779811bfcb3db94", "sha256": "7f1fdaa31527491842de15902954226e11dd99e1df00f568c9d42c4fdb747f71"}, "downloads": -1, "filename": "craft_ai-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7f756cd850ede5b3779811bfcb3db94", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26143, "upload_time": "2017-03-22T18:04:50", "upload_time_iso_8601": "2017-03-22T18:04:50.347817Z", "url": "https://files.pythonhosted.org/packages/fa/1e/09f73590fe35d585e3a81a54d5d1df27117a76bdd4cf97518dc5ff9380d5/craft_ai-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0481ab4eca3d6c4e0493dd54edfa9884", "sha256": "a978c6d0284cc62040f8768da62bc7f6963c164e0a018b02ef307450d9681f13"}, "downloads": -1, "filename": "craft_ai-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0481ab4eca3d6c4e0493dd54edfa9884", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26144, "upload_time": "2017-03-23T09:19:19", "upload_time_iso_8601": "2017-03-23T09:19:19.209525Z", "url": "https://files.pythonhosted.org/packages/7e/dc/c8d5b692eb3506d39dfca2346e2764be7e1d903f056a1a0ce4d315be1a83/craft_ai-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4b4470cc1e361bfac73b79d108e0387a", "sha256": "19827d9a435986c4553002898fb7dc09d7149e9de1b9b098465c31eda615d309"}, "downloads": -1, "filename": "craft_ai-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b4470cc1e361bfac73b79d108e0387a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26813, "upload_time": "2017-04-04T12:37:59", "upload_time_iso_8601": "2017-04-04T12:37:59.448375Z", "url": "https://files.pythonhosted.org/packages/e2/d7/e58350fe3863158d966843966c411cfdc44bf1ff9703703db006b299d938/craft_ai-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "ec5f3d773269ad2d47c63004cc6f2e90", "sha256": "a26cf81c4fe10198f77bcfd8579e2aa0ee9c25d33f5ec481cc12e736b806d901"}, "downloads": -1, "filename": "craft_ai-1.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ec5f3d773269ad2d47c63004cc6f2e90", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36098, "upload_time": "2018-02-14T16:10:05", "upload_time_iso_8601": "2018-02-14T16:10:05.677316Z", "url": "https://files.pythonhosted.org/packages/73/58/eff0c531f41b7a8de8062c730489ad76ca9b4dfaa2c3ac0406218e4c023a/craft_ai-1.10.0-py2.py3-none-any.whl", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "6529db1f24e848207bcfa59a786ae0ff", "sha256": "81f39ac3317f2c47bb2feb3759b9a201f0fc899fc45186f2539449294a4d4fbf"}, "downloads": -1, "filename": "craft_ai-1.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6529db1f24e848207bcfa59a786ae0ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26694, "upload_time": "2018-04-13T15:45:05", "upload_time_iso_8601": "2018-04-13T15:45:05.523985Z", "url": "https://files.pythonhosted.org/packages/f8/ae/9c0350a9e821730ae1511c8172bca089f534b8cec58858c97867bc81effd/craft_ai-1.11.0-py2.py3-none-any.whl", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "4d8a756e5cdce6c42b45a66fde88f850", "sha256": "91ef763e731ea1bbd16f02502245e20a3324aac998225059e1013c1777b3cde6"}, "downloads": -1, "filename": "craft_ai-1.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4d8a756e5cdce6c42b45a66fde88f850", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30280, "upload_time": "2018-04-25T08:19:44", "upload_time_iso_8601": "2018-04-25T08:19:44.079148Z", "url": "https://files.pythonhosted.org/packages/2c/8c/7fff79711954d99ab3887e4e5109d6767980d73acca679d417e692df315e/craft_ai-1.12.0-py2.py3-none-any.whl", "yanked": false}], "1.14.1": [{"comment_text": "", "digests": {"md5": "6c7eafe72457bd20dbe3760c747d20d7", "sha256": "1c21feebca734a22a369ec2be053a27fdbd0aa36316700947a90ef3eb3a2f138"}, "downloads": -1, "filename": "craft_ai-1.14.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c7eafe72457bd20dbe3760c747d20d7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33440, "upload_time": "2018-11-28T08:26:24", "upload_time_iso_8601": "2018-11-28T08:26:24.769764Z", "url": "https://files.pythonhosted.org/packages/36/21/9a7cd18eb394454fcf7c407c1ee6659d5c141afde01c40cb6a0052554067/craft_ai-1.14.1-py2.py3-none-any.whl", "yanked": false}], "1.15.0": [{"comment_text": "", "digests": {"md5": "8fc2c762f7811bdd6bc4f07ccec0a6bc", "sha256": "76f21abc09c10d5cce0f0d7197483c7e21679974b2c9c5d6af100b8a254e3bb4"}, "downloads": -1, "filename": "craft_ai-1.15.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8fc2c762f7811bdd6bc4f07ccec0a6bc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37857, "upload_time": "2019-02-25T15:21:31", "upload_time_iso_8601": "2019-02-25T15:21:31.935049Z", "url": "https://files.pythonhosted.org/packages/36/7f/4fa21b318240129fc382c48e1399d429005aea4dc19dff8b878b079b7ec0/craft_ai-1.15.0-py2.py3-none-any.whl", "yanked": false}], "1.15.2": [{"comment_text": "", "digests": {"md5": "c0732a47cc55af6afe0ddcbdf7a1bc28", "sha256": "2056af46a5af7546e0e7616f6e7dfda3aed7e64713f1b7d01bd7e07be2525d21"}, "downloads": -1, "filename": "craft_ai-1.15.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c0732a47cc55af6afe0ddcbdf7a1bc28", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42446, "upload_time": "2019-07-03T09:01:10", "upload_time_iso_8601": "2019-07-03T09:01:10.436944Z", "url": "https://files.pythonhosted.org/packages/7a/5b/c946a11ad5cf9af786e19f335aeaf77b37bab9c746bd14fb869311edc12d/craft_ai-1.15.2-py2.py3-none-any.whl", "yanked": false}], "1.15.3": [{"comment_text": "", "digests": {"md5": "42530c60a1fdae4eff071d87000603bf", "sha256": "5b445c29c7f801946cb684ad6129f6f1d60691c74e4f1db2911b12e63432d06d"}, "downloads": -1, "filename": "craft_ai-1.15.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42530c60a1fdae4eff071d87000603bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44924, "upload_time": "2019-08-14T16:32:04", "upload_time_iso_8601": "2019-08-14T16:32:04.384196Z", "url": "https://files.pythonhosted.org/packages/51/f9/f4929278af282da557f99807c6ffa9d244f497902b4dd0ab7fa3bc01be25/craft_ai-1.15.3-py2.py3-none-any.whl", "yanked": false}], "1.15.4": [{"comment_text": "", "digests": {"md5": "1ddcb4b0ba814f2a4fc851d3fcfa8f16", "sha256": "07f9931fe6bf0e970563a8696b4fe43ae6f6635ae3a9ef81cf19c4ed5cff3739"}, "downloads": -1, "filename": "craft_ai-1.15.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ddcb4b0ba814f2a4fc851d3fcfa8f16", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45568, "upload_time": "2019-09-02T12:23:37", "upload_time_iso_8601": "2019-09-02T12:23:37.435960Z", "url": "https://files.pythonhosted.org/packages/35/5d/598ba400ded6bd10b33846307555049be35766be76d0a3fcf6557d66e2ec/craft_ai-1.15.4-py2.py3-none-any.whl", "yanked": false}], "1.15.5": [{"comment_text": "", "digests": {"md5": "8bcb48ae64b646fbea8ecd832bc14156", "sha256": "64754cbdad9b898f38743f53a4fe9e56244fb46510aac9d47897261da523b421"}, "downloads": -1, "filename": "craft_ai-1.15.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8bcb48ae64b646fbea8ecd832bc14156", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45850, "upload_time": "2019-09-05T08:27:07", "upload_time_iso_8601": "2019-09-05T08:27:07.885106Z", "url": "https://files.pythonhosted.org/packages/5f/04/8fd9a622ea650a51177a577fc4ea2689f2d382c60108c0ff737949a084d9/craft_ai-1.15.5-py2.py3-none-any.whl", "yanked": false}], "1.15.6": [{"comment_text": "", "digests": {"md5": "c222a8a096b787eab41556f23cfde8b6", "sha256": "6e4b39edf53264b62e416d883664399b67de00f30b5e385de97aefc551b569d9"}, "downloads": -1, "filename": "craft_ai-1.15.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c222a8a096b787eab41556f23cfde8b6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46689, "upload_time": "2019-09-19T11:57:24", "upload_time_iso_8601": "2019-09-19T11:57:24.474586Z", "url": "https://files.pythonhosted.org/packages/21/55/80e78216c2dbf6e9037d1a8b35a9f45dcdb6cf061c1efbccc16545ba73d1/craft_ai-1.15.6-py2.py3-none-any.whl", "yanked": false}], "1.15.7": [{"comment_text": "", "digests": {"md5": "f258734d1d0453149c462d231711f864", "sha256": "1e532135c448978d53e756a4fdcf69f9f557442c5fd2c2a755e8995ba2b2da3b"}, "downloads": -1, "filename": "craft_ai-1.15.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f258734d1d0453149c462d231711f864", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46693, "upload_time": "2019-10-29T10:11:28", "upload_time_iso_8601": "2019-10-29T10:11:28.429069Z", "url": "https://files.pythonhosted.org/packages/03/8f/d267996b41a0cc7e056d9c982228e84973666f17cd24efdfad9eb27ce058/craft_ai-1.15.7-py2.py3-none-any.whl", "yanked": false}], "1.15.8": [{"comment_text": "", "digests": {"md5": "3de0b9bc669ae7a289371b914b89d550", "sha256": "82a4619dd6b9702686fb3c2fcfb822775ebeac1690b94addf7d02ac60f17ccd5"}, "downloads": -1, "filename": "craft_ai-1.15.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3de0b9bc669ae7a289371b914b89d550", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46318, "upload_time": "2019-11-19T14:06:39", "upload_time_iso_8601": "2019-11-19T14:06:39.256989Z", "url": "https://files.pythonhosted.org/packages/e6/e3/ef4aaf3c3d520847369c5ed21ec3c18f3aa0f6c9d971095c2451dcbe0ce4/craft_ai-1.15.8-py2.py3-none-any.whl", "yanked": false}], "1.16.0": [{"comment_text": "", "digests": {"md5": "7e10d77faeffd0d8a1a5295699c59923", "sha256": "ad1504c8f553b5ed4f73c0ee3ac4c4f4d8914dea168ba9d787831a624f29e1d1"}, "downloads": -1, "filename": "craft_ai-1.16.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7e10d77faeffd0d8a1a5295699c59923", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48690, "upload_time": "2020-02-21T15:06:46", "upload_time_iso_8601": "2020-02-21T15:06:46.041494Z", "url": "https://files.pythonhosted.org/packages/32/66/eaa9a5d7a14e390f4788f075592d21a62f71a68dcaa4b166f3bb004925d5/craft_ai-1.16.0-py2.py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6c8bbf1862d0676b880d7d733a54aa6f", "sha256": "0264d88d81a1a779cb3ee933c2b02699757c73a75566ef8439b7aaad051e16bd"}, "downloads": -1, "filename": "craft_ai-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c8bbf1862d0676b880d7d733a54aa6f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27932, "upload_time": "2017-04-13T11:14:08", "upload_time_iso_8601": "2017-04-13T11:14:08.519957Z", "url": "https://files.pythonhosted.org/packages/92/b6/e8dd0e42585fe7deaefde1b96a64878bf30396faa85a2a057ebdb58ac684/craft_ai-1.2.0-py2.py3-none-any.whl", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "974232dcd7dffcc9ba3b9292b022c012", "sha256": "65f97f54c3f1451fd1e7147083b27d33a552f0701c6f00202eee81f20c768227"}, "downloads": -1, "filename": "craft_ai-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "974232dcd7dffcc9ba3b9292b022c012", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27934, "upload_time": "2017-04-13T13:30:16", "upload_time_iso_8601": "2017-04-13T13:30:16.569437Z", "url": "https://files.pythonhosted.org/packages/8b/c3/001331bfb59c3e23b2d1c1c89947259a081d79b83e359a330c9f0d9d08c3/craft_ai-1.2.1-py2.py3-none-any.whl", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "0cff4e9ce0e2e599a769e0946162dcfa", "sha256": "6b85a5e8e03cf2c9fa3b3cb8ff7c9f2f481a03a181f384c484fbf1c3032d3e14"}, "downloads": -1, "filename": "craft_ai-1.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0cff4e9ce0e2e599a769e0946162dcfa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27996, "upload_time": "2017-06-06T16:43:31", "upload_time_iso_8601": "2017-06-06T16:43:31.100010Z", "url": "https://files.pythonhosted.org/packages/60/84/9ed9542a3fff3eb6f64c66aeac41e04913659aeadd21d5f9741261161875/craft_ai-1.2.3-py2.py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "445c116e7e52f60782c510b161cab8e6", "sha256": "b35f71abff612a1aac618cbd3c8e6f21252cf7a5bcfeda62a7758f69ac05af62"}, "downloads": -1, "filename": "craft_ai-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "445c116e7e52f60782c510b161cab8e6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29777, "upload_time": "2017-07-10T07:00:04", "upload_time_iso_8601": "2017-07-10T07:00:04.172962Z", "url": "https://files.pythonhosted.org/packages/e0/6c/faac781add731fb2e49d79773de5cff7ae384995a1ad51c84f88a58a7702/craft_ai-1.3.0-py2.py3-none-any.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ef6e4e59c2680204b97114dbe07d8284", "sha256": "b00b81905a3441a557fa575e3b5d6fef5904c4ea2602d5da9e98a0bbe1ac8af2"}, "downloads": -1, "filename": "craft_ai-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef6e4e59c2680204b97114dbe07d8284", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31696, "upload_time": "2017-07-10T08:28:57", "upload_time_iso_8601": "2017-07-10T08:28:57.973562Z", "url": "https://files.pythonhosted.org/packages/87/16/b69f363b0dfb57cf3dde4db4a395268903cc228776548ac2fc2e9f26fd66/craft_ai-1.3.1-py2.py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "4caab3c08081cbc40799485f5558b124", "sha256": "10ba142b21197719d0e73f573587720a6bef05bcc4bbc637364363911ddc35ad"}, "downloads": -1, "filename": "craft_ai-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4caab3c08081cbc40799485f5558b124", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33040, "upload_time": "2017-07-13T13:19:16", "upload_time_iso_8601": "2017-07-13T13:19:16.393617Z", "url": "https://files.pythonhosted.org/packages/41/1e/5ee603e676800e442403e3b63b2f92ffdca896a75ad586bda00bf0a32823/craft_ai-1.4.0-py2.py3-none-any.whl", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "43da7cfeb570943da552ca08a6b5d6de", "sha256": "375741417917db4d39792081cf51ad93112997a8f90604698b0314748cbf442b"}, "downloads": -1, "filename": "craft_ai-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "43da7cfeb570943da552ca08a6b5d6de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33146, "upload_time": "2017-07-19T12:33:11", "upload_time_iso_8601": "2017-07-19T12:33:11.732485Z", "url": "https://files.pythonhosted.org/packages/6a/96/1258f89530308ad01c068e0f31fc3959c40bd956de5c9a237622607fe13d/craft_ai-1.4.1-py2.py3-none-any.whl", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "55a1e35b91487c2348652d12a57f3a4a", "sha256": "75b3e737eb6d82c5ab6d225eba2734a138c733b727e0f046ec6fad7a6813d18a"}, "downloads": -1, "filename": "craft_ai-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55a1e35b91487c2348652d12a57f3a4a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33345, "upload_time": "2017-08-02T10:02:41", "upload_time_iso_8601": "2017-08-02T10:02:41.852047Z", "url": "https://files.pythonhosted.org/packages/d6/e3/21dae690aa0217d417d59014e200782070a6ee598f03666b2ca46ac001b0/craft_ai-1.5.0-py2.py3-none-any.whl", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "ffef5b04ce8510f82a4d1708f34048e0", "sha256": "0deb93e4d05cae115984ac396212bddd72cf511b752df606a53f80b092eafe6b"}, "downloads": -1, "filename": "craft_ai-1.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ffef5b04ce8510f82a4d1708f34048e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33810, "upload_time": "2017-08-22T14:40:26", "upload_time_iso_8601": "2017-08-22T14:40:26.291102Z", "url": "https://files.pythonhosted.org/packages/33/20/52592cbdd5e032cf28ffa5b1f67dcd60a7d7501a7807a735b52b1ea748ef/craft_ai-1.6.0-py2.py3-none-any.whl", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "972309c6d8f89120ea25153139a27734", "sha256": "02e62f653776a015b4ea83cd8c62a42879d149649a016ace027954824dde8fce"}, "downloads": -1, "filename": "craft_ai-1.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "972309c6d8f89120ea25153139a27734", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34150, "upload_time": "2017-10-13T12:12:26", "upload_time_iso_8601": "2017-10-13T12:12:26.258952Z", "url": "https://files.pythonhosted.org/packages/11/9c/4711331b75c1c65134b33f632ecf2bf4116c413d562f71d493069b6cd10f/craft_ai-1.7.0-py2.py3-none-any.whl", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "cd2b6d1d960af8cba295e879bf7decea", "sha256": "a421c24bd97fe7260f7ab56cfbdc6cee3584a8b9b1e5fc799af303b55e32b68b"}, "downloads": -1, "filename": "craft_ai-1.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd2b6d1d960af8cba295e879bf7decea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34150, "upload_time": "2017-10-13T12:34:46", "upload_time_iso_8601": "2017-10-13T12:34:46.206057Z", "url": "https://files.pythonhosted.org/packages/88/2c/edabccd4d0926dadb33f5153a97920c0192b46557a7ac04c60a9c9e6df3d/craft_ai-1.7.1-py2.py3-none-any.whl", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "243b6f4c69e3c5746b1daac139e73ec8", "sha256": "741cc14fae344ca9f6878ae542ca6414b507a896be05c38acaf7457d95428d8f"}, "downloads": -1, "filename": "craft_ai-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "243b6f4c69e3c5746b1daac139e73ec8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35462, "upload_time": "2017-10-24T09:24:49", "upload_time_iso_8601": "2017-10-24T09:24:49.678350Z", "url": "https://files.pythonhosted.org/packages/1b/d6/3901aad70b7f13a0fac36be93cc345688138bf805a533bbec52c01d3efe1/craft_ai-1.8.0-py2.py3-none-any.whl", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "6f2fea50a075933f742a17087a67599c", "sha256": "45a8269d6b54291882899bdaebf44997dad52193c681ecfd3a083a6a0b89ee94"}, "downloads": -1, "filename": "craft_ai-1.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f2fea50a075933f742a17087a67599c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35952, "upload_time": "2017-11-06T16:50:17", "upload_time_iso_8601": "2017-11-06T16:50:17.558012Z", "url": "https://files.pythonhosted.org/packages/64/0a/4b9bf12be927788f23b6b7ab8cf1834823d871506521e14285d0c40e99c5/craft_ai-1.9.0-py2.py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "23b97c5c6226c551c75c9b62ab94c102", "sha256": "dcb2ce620c3d2c1b0beb39ce3fa063bce5e31a188d261f103be1cc27f413fb56"}, "downloads": -1, "filename": "craft_ai-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "23b97c5c6226c551c75c9b62ab94c102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 55625, "upload_time": "2020-03-18T08:59:24", "upload_time_iso_8601": "2020-03-18T08:59:24.514437Z", "url": "https://files.pythonhosted.org/packages/68/73/a2a709dbd2a84f3675e3e40b7fdaf5df17e39b3c8e631aa4866aa1dac26e/craft_ai-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f090be016ab5d9d5d391040b18df1f2b", "sha256": "e4a6baa9b2767f6c2116e17db1f98af051129fd69e2ac307be3168852cfa1dbf"}, "downloads": -1, "filename": "craft-ai-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f090be016ab5d9d5d391040b18df1f2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 77284, "upload_time": "2020-03-18T08:59:22", "upload_time_iso_8601": "2020-03-18T08:59:22.368713Z", "url": "https://files.pythonhosted.org/packages/3a/6a/2aad41a888a41270b74bd72c6a7068038c70eb9bc945a2f2bb51cf48ebda/craft-ai-2.0.0.tar.gz", "yanked": false}], "2.0.0rc1": [{"comment_text": "", "digests": {"md5": "340b87fff38200459db34d00d0bfdd81", "sha256": "61c6abddd90f44fed8d0327661200603bf7db940c312793515bc9cfaed965006"}, "downloads": -1, "filename": "craft_ai-2.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "340b87fff38200459db34d00d0bfdd81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 51770, "upload_time": "2020-02-20T10:03:10", "upload_time_iso_8601": "2020-02-20T10:03:10.342029Z", "url": "https://files.pythonhosted.org/packages/5b/87/9caac35ba581800f2a7d4ac72878d797b2449e2221093d776796ea3c0241/craft_ai-2.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d488cfa7ad378ab8c732ba299d2c149", "sha256": "88cb1e430ed41dc88fdddb45ef69c39dc8088e3db083e3fb21f3e0205478691e"}, "downloads": -1, "filename": "craft-ai-2.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "4d488cfa7ad378ab8c732ba299d2c149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 70207, "upload_time": "2020-02-20T10:03:08", "upload_time_iso_8601": "2020-02-20T10:03:08.267515Z", "url": "https://files.pythonhosted.org/packages/05/77/84a6550f5f450a59746f65dbb2f50d3e116b02f46cdbe2a315434f7cbd37/craft-ai-2.0.0rc1.tar.gz", "yanked": false}], "2.0.0rc2": [{"comment_text": "", "digests": {"md5": "3e6f34f0c8995364921b3150250c850e", "sha256": "dc14eb05cb439475f3151ed386c9f001a0df1c91c7a6f7ec0713faf7ff6449e3"}, "downloads": -1, "filename": "craft_ai-2.0.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "3e6f34f0c8995364921b3150250c850e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 52352, "upload_time": "2020-02-20T16:47:17", "upload_time_iso_8601": "2020-02-20T16:47:17.434940Z", "url": "https://files.pythonhosted.org/packages/42/b1/8dfbf7966607850d5a6528a0da53ff31262a70f1c9938326e0d36eb0546f/craft_ai-2.0.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e84bb4c3e793d1fc1efb5461fe9df45d", "sha256": "ef9b235d32f7fb253a9834b8d08cdb051957b1deb5a42af974d0fbba323ad914"}, "downloads": -1, "filename": "craft-ai-2.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "e84bb4c3e793d1fc1efb5461fe9df45d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 70466, "upload_time": "2020-02-20T16:47:15", "upload_time_iso_8601": "2020-02-20T16:47:15.576322Z", "url": "https://files.pythonhosted.org/packages/70/9d/4b3573ea9510b07f6907c0221b5cc70ddd5b54c12f8c0f2e1179ee3e09b8/craft-ai-2.0.0rc2.tar.gz", "yanked": false}], "2.0.0rc3": [{"comment_text": "", "digests": {"md5": "fc48428741ef964a2f77bfe8ee43e21b", "sha256": "d2ffbf7d0064e2f111624de54e1e1501c2f2edc0c9cb598bb02dc0049a5e084b"}, "downloads": -1, "filename": "craft_ai-2.0.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "fc48428741ef964a2f77bfe8ee43e21b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 54749, "upload_time": "2020-02-24T11:54:30", "upload_time_iso_8601": "2020-02-24T11:54:30.458193Z", "url": "https://files.pythonhosted.org/packages/67/ee/cec0d4fc5168f976f8cbd8b5c76bd6c02763c817afc50c0eeef48a1cba7d/craft_ai-2.0.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbd7a309d9eacb5a361cff1204c58a4b", "sha256": "9f000f6afcb84e6443ff3c6b624a70ca60edb56dcae074d87ad8b39b7c90de8e"}, "downloads": -1, "filename": "craft-ai-2.0.0rc3.tar.gz", "has_sig": false, "md5_digest": "cbd7a309d9eacb5a361cff1204c58a4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 76313, "upload_time": "2020-02-24T11:54:28", "upload_time_iso_8601": "2020-02-24T11:54:28.029190Z", "url": "https://files.pythonhosted.org/packages/0f/32/c5195e34f0f56e81faf2eebaf1f785011af140fdc0a4348b1b5b3f4a3014/craft-ai-2.0.0rc3.tar.gz", "yanked": false}], "2.0.0rc4": [{"comment_text": "", "digests": {"md5": "d41c8064f488f776d27f6aa3b108cb5d", "sha256": "7403ff302730495924c09302b733891bea28e4a6ff103ba62e15a60802e9d92b"}, "downloads": -1, "filename": "craft_ai-2.0.0rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "d41c8064f488f776d27f6aa3b108cb5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 54835, "upload_time": "2020-02-25T08:50:38", "upload_time_iso_8601": "2020-02-25T08:50:38.889146Z", "url": "https://files.pythonhosted.org/packages/0a/fb/786404f005c1c53084dd008da201922909f7697476a646e0317ea6b52eaa/craft_ai-2.0.0rc4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10a6354ae8dc4b7599482126af1f7bb8", "sha256": "9a088a1e0d27c5405a457680032aa06281d044405d1a60804c9f9dbff9c9cab1"}, "downloads": -1, "filename": "craft-ai-2.0.0rc4.tar.gz", "has_sig": false, "md5_digest": "10a6354ae8dc4b7599482126af1f7bb8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 76389, "upload_time": "2020-02-25T08:50:36", "upload_time_iso_8601": "2020-02-25T08:50:36.842783Z", "url": "https://files.pythonhosted.org/packages/d1/f4/5905863e2b1f6778aaeb212e3d8b333ea8dd38fe24474e7d26ea1702ca78/craft-ai-2.0.0rc4.tar.gz", "yanked": false}], "2.0.0rc5": [{"comment_text": "", "digests": {"md5": "fec0563f3bd173bbee4e2585bb750e41", "sha256": "0767124880dc903a7584cef1c787f9b2786c096f014149e09537cefedced04eb"}, "downloads": -1, "filename": "craft_ai-2.0.0rc5-py3-none-any.whl", "has_sig": false, "md5_digest": "fec0563f3bd173bbee4e2585bb750e41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 55529, "upload_time": "2020-03-02T14:52:23", "upload_time_iso_8601": "2020-03-02T14:52:23.418439Z", "url": "https://files.pythonhosted.org/packages/ba/50/836b68bf80d3d5eaee1e9e4840b0c59b7c253abc2cc2470e0585aaadd44e/craft_ai-2.0.0rc5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b0b9fe4cde9afaf25650e485b74761a", "sha256": "e8beb3ea1b9e7d6ab66f3a6a91e5adc44e1e6188308cc48be0ff1f7b2e0852fe"}, "downloads": -1, "filename": "craft-ai-2.0.0rc5.tar.gz", "has_sig": false, "md5_digest": "4b0b9fe4cde9afaf25650e485b74761a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 76952, "upload_time": "2020-03-02T14:52:21", "upload_time_iso_8601": "2020-03-02T14:52:21.163141Z", "url": "https://files.pythonhosted.org/packages/7b/04/cc304532f7579f9c540dd16c88fa99293b60ee5769c1772abea1adb50926/craft-ai-2.0.0rc5.tar.gz", "yanked": false}], "2.0.0rc6": [{"comment_text": "", "digests": {"md5": "8246401f551a0bf965a88a102199dcf4", "sha256": "5a6cc0cf921145a69b2739a1b74a60e5436c09f9296e374ef0e36b4854875eb3"}, "downloads": -1, "filename": "craft_ai-2.0.0rc6-py3-none-any.whl", "has_sig": false, "md5_digest": "8246401f551a0bf965a88a102199dcf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 55543, "upload_time": "2020-03-17T14:48:27", "upload_time_iso_8601": "2020-03-17T14:48:27.276585Z", "url": "https://files.pythonhosted.org/packages/34/a5/fedec341c843248f1c8284612321a51deac832be8494d770b5557c71f2da/craft_ai-2.0.0rc6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c421905fddfef6bf1623560a1af8090d", "sha256": "713d17007a6d213e1e21f2b4d4bacf101b1de50e9f0e0aaa9952fdbac9f2aadc"}, "downloads": -1, "filename": "craft-ai-2.0.0rc6.tar.gz", "has_sig": false, "md5_digest": "c421905fddfef6bf1623560a1af8090d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 77002, "upload_time": "2020-03-17T14:48:25", "upload_time_iso_8601": "2020-03-17T14:48:25.222270Z", "url": "https://files.pythonhosted.org/packages/ee/76/37b1f161668a1e467832b0d51909c4e820b256989797fa20d880195f675b/craft-ai-2.0.0rc6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23b97c5c6226c551c75c9b62ab94c102", "sha256": "dcb2ce620c3d2c1b0beb39ce3fa063bce5e31a188d261f103be1cc27f413fb56"}, "downloads": -1, "filename": "craft_ai-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "23b97c5c6226c551c75c9b62ab94c102", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 55625, "upload_time": "2020-03-18T08:59:24", "upload_time_iso_8601": "2020-03-18T08:59:24.514437Z", "url": "https://files.pythonhosted.org/packages/68/73/a2a709dbd2a84f3675e3e40b7fdaf5df17e39b3c8e631aa4866aa1dac26e/craft_ai-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f090be016ab5d9d5d391040b18df1f2b", "sha256": "e4a6baa9b2767f6c2116e17db1f98af051129fd69e2ac307be3168852cfa1dbf"}, "downloads": -1, "filename": "craft-ai-2.0.0.tar.gz", "has_sig": false, "md5_digest": "f090be016ab5d9d5d391040b18df1f2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 77284, "upload_time": "2020-03-18T08:59:22", "upload_time_iso_8601": "2020-03-18T08:59:22.368713Z", "url": "https://files.pythonhosted.org/packages/3a/6a/2aad41a888a41270b74bd72c6a7068038c70eb9bc945a2f2bb51cf48ebda/craft-ai-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:30 2020"}