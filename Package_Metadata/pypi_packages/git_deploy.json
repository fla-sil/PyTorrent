{"info": {"author": "Git Tools", "author_email": "preilly@php.net,bobs.ur.uncle@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Version Control", "Topic :: Utilities"], "description": "git-deploy\n==========\n\nIt is a tool to manage using git as a deployment management tool implemented in Python and utilizing the dulwich [1]\nproject for native git functionality in Python.\n\nGit-deploy implements the front end of the deployment system while hooks give the user flexibility in the lower level\ndetails of the deploy.  This client uses git to manage the state of your repository and deployment and assumes that on\nsync the hooks ensure that the target is made consistent with the client (see default.sync) however, the user is free to\nadd their own deployment flow and environment options (see examples below).\n\n[1] https://github.com/jelmer/dulwich\n\n\nUsage\n-----\n\nBasic usage involves cloning the remote working repo to the deploy target and all client nodes.  When\na client is ready to deploy 'start' is invoked to obtain a lock on the remote and 'sync' is called to\npush changes to the target.  On completion the lock is removed.\n\nTo start a new deployment, navigate to the working repo, issue a 'start' command:\n\n    $ git deploy start [opts]\n\nAt this point you are free to make commits to the project and when ready for deployment issue \na 'sync' command - or simply 'sync' if you're work is already complete but, be sure to rebase\nyour local clone:\n\n    $ git deploy sync [opts]\n\nThe process may be aborted at any point with an 'abort' command:\n\n    $ git deploy abort [opts]\n\nYou can rollback to a tag with the revert call:\n\n    $ git deploy revert [-t <tag_name>] [opts]\n\nIf no tag is supplied the rollback uses the most recent tag.  The default is to only commit the rollback locally\nhowever, by suppling the \"-a\" option for auto-sync the rollback automatically syncs also:\n\n    $ git deploy revert [-t <tag_name>] [opts]\n\n\nSetup\n-----\n\nThe following example illustrates how git-deploy can be configured and used for a single client and target.  For this\nexample the client host and target host will be referred to as *client.realm.org* and *target.realm.org* respectively.\nThe home path on the client and target for our sample project is */home/me/project/* and */var/www/html/sample.com/*\nrespectively.  It is assumed that the git remote is configured for your project and for this example the remote alias is\n*origin* and the remote branch is *master*.\n\n\n**CLIENT SETUP**\n\nThe client is any working machine from which deployments may be initiated.  On *client.realm.org* clone git deploy, local\ninstall, configure settings and initialize:\n\n    $ git clone git@github.com:Git-Tools/git-deploy.git\n\n    ...\n\n    $ cd git-deploy\n    $ sudo pip install -e .\n\n    ...\n\nNext configure the client instance with git config by assigning the following settings in *scripts/git-deploy.ini*:\n\n    [deploy]\n        target=target.realm.org\n        path=/home/me/project/\n        user=me\n        hook-dir=.git/deploy/hooks/\n        tag-prefix=sample.com\n        remote=origin\n        branch=master\n        client-path=/home/me/project/\n        key-path=/home/me/.ssh/id_rsa\n        test-repo-path=/tmp/test_repo/\n    [system]\n        run_root=/usr/bin/\n\nOnce you have defined settings in *git-deploy.ini* call *init.py* to set the got config\n\n    $ sudo ./scripts/init_gd\n\n\n**TARGET SETUP**\n\nOn *target.realm.org* there is no need to clone and install git-deploy but here the deploy hooks will need to be\ncreated.  There is a default hook in *git-deploy/default-hooks/default-target-pull.py* that should be copied to\n*target.realm.org:/var/www/html/sample.com/.git/deploy/hooks/*.  This is a basic hook that will pull the changes\npushed from the client instance on sync.\n\n\n**USING GIT DEPLOY**\n\nFirst initialize a new repository on your client:\n\n    $ mkdir me.com\n    $ cd me.com\n    $ git init\n    $ git remote add origin git@github.com:wikimedia/me.com.git\n    $ git push origin master\n\nOn the target you only need to ensure that *path* in config exists and is configured as a git repo for your project.\n\n*Start* & *Sync*:\n\nEnsure that the client is correctly synced to the remote by issuing a git pull or rebase.  Then you can issue a\na start command to write the lock file to the target to begin the deployment.\n\n    $ cd me.com\n    $ touch new_file\n    $ git add new_file\n    $ git commit -m \"add - my new file\"\n    $ git pull --rebase origin master\n\nAt this point you are ready to enter the deployment process:\n\n    client.realm.org:me.com me$ git deploy start\n\n    <perform any testing or add any other commits as necessary you've locked the remote at this point>\n\n    client.realm.org:me.com me$ git deploy sync\n\nOnce you sync a the specified hooks will be invoked from the client and the target and a tag is written to the\nrepository on the latest commit of the deploy. If the default push and pull hooks are used the client will simply\npush its changes to the remote and the target will pull in the new changes.  Deployment tags have the form\n*<repo>-sync-<date>-<time>*.\n\nFinally, you can also do a dryrun on the sync:\n\n    $ git deploy sync -d\n\n*Abort*\n\nAt times it is necessary to exit the deploy cycle prematurely.  For instance, consider the following:\n\n    $ git deploy start\n    $ git commit bad_change -m \"add - some buggy code.\"\n\nSuddenly, you realize that your change introduced a bug after entering the deloy process.  Rather than syncing the bad\ncode and then rolling back (next section) we can simply abort the deploy:\n\n    $ git deploy abort\n    $ git reset --soft HEAD^\n\n    ... continue with your local changes ...\n\nNow you have released deploy to other clients without infecting the code base with your buggy code.\n\n\n*Rollback*\n\nIf you accidentally deploy some code that needs to be rolled back the *revert* command can be very helpful here.  You\ncan rollback to previous deploy states by utilizing deploy tags.  To view the old tags:\n\n    $ git tag\n\nNow to rollback to a previous deploy call *git revert* with the appropriate tag:\n\n    $ git deploy start\n    $ git deploy revert <tag>\n\n\nDeploy Hooks\n------------\n\nThis behaviour mimics that found in https://github.com/git-deploy/git-deploy#deploy-hooks &\nhttps://github.com/git-deploy/git-deploy#writing-deploy-hooks.\n\nThe hooking system can be used to execute user defined actions in the deploy process.\n\n\n**Writing Hooks**\n\nThis system is based around a sync model where a sync is the process by which the deploy target is made consistent with\na calling client.  There are two phases that define the behaviour around deployment, pre/post-sync.\n\nThe pre-deploy framework is expected to reside in the $GIT_WORK_DIR/deploy directory (i.e. the deploy directory of the\nrepository that's being rolled out). This directory has the following tree:\n\n    $GIT_WORK_DIR/deploy/                   # deploy directory\n                        /apps/              # Directory per application + 'common'\n                             /common/       # deploy scripts that apply to all apps\n                             /$app/         # deploy scripts for a specific $app\n                        /sync/              # sync\n                             /$app.sync\n\nThe $app in deploy/{apps,sync}/$app is the server prefix that you'd see in the rollout tag. E.g. A company might have\nmultiple environments which they roll out, for instance \"sheep\", \"cows\" and \"goats\". Here is a practical example of the\ndeployment hooks that might be used in the sheep environment:\n\n    $ tree deploy/apps/{sheep,common}/ deploy/sync/\n    deploy/apps/sheep/\n    |-- post-sync.010_httpd_configtest.sh\n    |-- post-sync.020_restart_httpd.sh\n    |-- pre-sync.010_nobranch_rollout.sh\n    |-- pre-sync.020_check_that_we_are_in_the_load_balancer.pl\n    |-- pre-sync.021_take_us_out_of_the_load_balancer.pl\n    `-- pre-sync.022_check_that_we_are_not_in_the_load_balancer.pl -> pre-pull.020_check_that_we_are_in_the_load_balancer.pl\n    deploy/apps/common/\n    |-- pre-sync.001_setup_affiliate_symlink.pl\n    `-- pre-sync.002_check_permissions.pl\n    deploy/sync/\n    |-- sheep.sync\n\nAll the hooks in deploy/apps are prefixed by a phase in which git-deploy will execute them (e.g. pre-sync just before a sync).\n\nDuring these phases git-deploy will glob in all the deploy/apps/{common,$app}/$phase.* hooks and execute them in sort order, first\nthe common hooks and then the $app specific hooks. Note that the hooks MUST have their executable bit set.\n\n\n**Calling Environments**\n\nTo call an environment based deploy use the -e option:\n\n    $ git deploy sync -e $ENV\n\n\nDeploy Logging\n--------------\n\nGit deploy maintains a deploy log on the target's deploy root path.  The logs can be found under:\n\n    ${DEPLOY_ROOT}/logs/git-deploy.log (archive)\n    ${DEPLOY_ROOT}/logs/git-deploy-active.log (active)\n\nThe active log stores logging from any currently active deploys and is flush-appended to the archive log on\ncompletion of a deploy.  There is currently no default log rotation implemented on the target in git-deploy\nso this would have to be added manually if desired.\n\n\nExamples\n--------\n\n**Reverting to a tag**\n\nThis example illustrates how to rollback a deploy to an earlier tag.\n\nIn the directory of the client repository check Git history:\n\n    richrushbay-lm:test_sartoris rfaulk$ git log\n\n    commit 779a07774dd5a7baf8dc86657cbfc491264ff970\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sun Dec 8 23:28:50 2013 -0800\n\n        test\n\n    commit 1ab80a78fc1e89ae6f8872282f96f5f42677b843\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sat Nov 16 18:31:26 2013 -0800\n\n        test git-deploy 20131116_0.file.\n\n    commit 12311863e111a266c4c1c513da45a39ed3e8cdd5\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sat Nov 2 19:42:58 2013 -0700\n\n        Initial commit.\n\nNext, take a look at the existing sync tags:\n\n    richrushbay-lm:test_sartoris rfaulk$ git tag\n\n    sartoris-sync-20131220-000105\n    sartoris-sync-20131220-012354\n    sartoris-sync-20131220-013503\n\nLet's start the deploy:\n\n    richrushbay-lm:test_sartoris rfaulk$ git deploy start\n\n    Dec-20 01:53:00 DEBUG    git-deploy is ready to run\n    Dec-20 01:53:00 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}\n    Dec-20 01:53:00 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.\n    Dec-20 01:53:01 INFO     git_deploy.git_deploy :: No lock file exists.\n    Dec-20 01:53:01 INFO     git_deploy.git_deploy :: SSH Lock create.\n\nNext call the revert action - a tag can be explicitly supplied, but in this example it isn't and the rollback applies to the\nprevious sync tag:\n\n    richrushbay-lm:test_sartoris rfaulk$ git deploy revert\n\n    Dec-20 01:53:13 DEBUG    git-deploy is ready to run\n    Dec-20 01:53:13 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}\n    Dec-20 01:53:13 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.\n    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: rfaulk has lock.\n    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -> no tag specified, using: 'sartoris-sync-20131220-012354'\n    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -> Attempting to revert to tag: 'sartoris-sync-20131220-012354'\n    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -> Reverted to tag: 'sartoris-sync-20131220-012354', call \"git deploy sync\" to persist\n\nAnd sync the changes:\n\n    richrushbay-lm:test_sartoris rfaulk$ git deploy sync\n\n    Dec-20 01:53:49 DEBUG    git-deploy is ready to run\n    Dec-20 01:53:49 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}\n    Dec-20 01:53:49 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.\n    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: rfaulk has lock.\n    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: SYNC - tag local\n    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: SYNC - calling default sync.\n    Dec-20 01:53:51 INFO     git_deploy.drivers.driver :: Calling default sync - pushing changes ...\n    Dec-20 01:53:53 INFO     PUSH ->\n    Dec-20 01:53:53 INFO     git_deploy.drivers.driver :: Calling default sync - pulling to target\n    Dec-20 01:53:56 INFO     PULL -> Updating 779a077..38f42d3; Fast-forward\n    Dec-20 01:53:56 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.\n    Dec-20 01:53:57 INFO     git_deploy.git_deploy :: rfaulk has lock.\n    Dec-20 01:53:57 INFO     git_deploy.git_deploy :: SSH Lock destroy.\n\nWe're done, check the git history, you should see a rollback commit.  This is persisted to the remote repo and the target host:\n\n    richrushbay-lm:test_sartoris rfaulk$ git log\n\n    commit 38f42d3be6831c16b475786f3016bcc588499e56\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Fri Dec 20 09:53:15 2013 +0000\n\n        Rollback to sartoris-sync-20131220-012354.\n\n    commit 779a07774dd5a7baf8dc86657cbfc491264ff970\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sun Dec 8 23:28:50 2013 -0800\n\n        test\n\n    commit 1ab80a78fc1e89ae6f8872282f96f5f42677b843\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sat Nov 16 18:31:26 2013 -0800\n\n        test git-deploy 20131116_0.file.\n\n    commit 12311863e111a266c4c1c513da45a39ed3e8cdd5\n    Author: rfaulk <rfaulk@yahoo-inc.com>\n    Date:   Sat Nov 2 19:42:58 2013 -0700\n\n        Initial commit.\n\nFinally, note the new sync tag for the rollback:\n\n    richrushbay-lm:test_sartoris rfaulk$ git tag\n\n    sartoris-sync-20131220-000105\n    sartoris-sync-20131220-012354\n    sartoris-sync-20131220-013503\n    sartoris-sync-20131220-015351\n\n\n**Dryrun of the default**\n\n\nIn this example we have the following deploy tree:\n\n    $ tree deploy/apps/{prod,common}/ deploy/sync/\n    deploy/apps/prod/\n    |-- post-sync.010_test.sh\n    |-- post-sync.020_test.sh\n    |-- pre-sync.010_test.sh\n    |-- pre-sync.020_test.sh\n    deploy/apps/common/\n    |-- pre-sync.010_test.sh\n    |-- post-sync.010_test.sh\n    deploy/sync/\n    |-- prod.sync\n    |-- default.sync\n\nTo execute the dryrun on the default note that any app specific hooks are ignored:\n\n    $ git deploy start\n\n    Jan-14 23:19:26 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 23:19:27 INFO     git_deploy.lockers.locker :: No lock file exists.\n    Jan-14 23:19:27 INFO     git_deploy.lockers.locker :: Creating lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.\n\n    $ git deploy sync -d\n\n    Jan-14 23:19:32 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 23:19:34 INFO     git_deploy.lockers.locker :: rfaulk has lock.\n    Jan-14 23:19:34 INFO     git_deploy.git_deploy :: SYNC -> dryrun.\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: DRYRUN SYNC\n    Jan-14 23:19:34 INFO     --> TAG 'sartoris-sync-20140114-231934'\n    Jan-14 23:19:34 INFO     --> AUTHOR 'rfaulk <rfaulk@yahoo-inc.com>'\n    Jan-14 23:19:34 INFO     --> REMOTE 'origin'\n    Jan-14 23:19:34 INFO     --> BRANCH 'master'\n    Jan-14 23:19:34 INFO     DUMPING DEPLOY SCRIPTS IN ORDER OF EXECUTION.\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'\n\n        #!/bin/bash\n        echo \"common pre-sync\"\n\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/\" ...\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/default.sync' ON PHASE 'default'\n\n        #!/usr/bin/python\n        # -*- coding: utf-8 -*-\n\n        \"\"\"\n\n        Default sync script that performs push from client.  The expected ops\n        are the following:\n\n            cd $GIT_DEPLOY_HOME\n            /usr/bin/git push origin master\n            /usr/bin/git push --tags\n\n        \"\"\"\n\n        import sys\n        import logging\n\n        from git_deploy.git_deploy import GitMethods\n        from git_deploy.utils import ssh_command_target\n\n        log_format = \"%(asctime)s %(levelname)-8s %(message)s\"\n        handler = logging.StreamHandler(sys.stderr)\n        handler.setFormatter(logging.Formatter(fmt=log_format,\n                             datefmt='%b-%d %H:%M:%S'))\n\n\n        def main():\n\n            # Dulwich push\n            remote = GitMethods().config['deploy.remote_url']\n            logging.info(__name__ + ' :: Default sync, pushing to \\'{0}\\''.format(\n                remote))\n            GitMethods()._dulwich_push(remote, 'master')\n\n            # git pull on remote\n            target_path = GitMethods().config['path']\n            cmd = \"git --git-dir={0}/.git --work-tree={0} pull origin master\".format(\n                target_path)\n            target = GitMethods().config['target']\n            user = GitMethods().config['user.name']\n            key_path = GitMethods().config['deploy.key_path']\n\n            logging.info(__name__ + ' :: Default sync, pulling '\n                                    'changes to \\'{0}\\''.format(target))\n            ssh_command_target(cmd, target, user, key_path)\n\n\n        def cli():\n            sys.exit(main())\n\n        if __name__ == \"__main__\":  # pragma: nocover\n            cli()\n\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/\" ...\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'\n\n        #!/bin/bash\n        echo \"common post-sync\"\n\n    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: DRYRUN SYNC COMPLETE\n\n\n**Dryrun and sync to an environment**\n\n\nIn this example we have a set of dummy hooks:\n\n    $ tree deploy/apps/{prod,common}/ deploy/sync/\n    deploy/apps/prod/\n    |-- post-sync.010_test.sh\n    |-- post-sync.020_test.sh\n    |-- pre-sync.010_test.sh\n    |-- pre-sync.020_test.sh\n    deploy/apps/common/\n    |-- pre-sync.010_test.sh\n    |-- post-sync.010_test.sh\n    deploy/sync/\n    |-- prod.sync\n    |-- default.sync\n\nThese hooks just do some simple echoing, a dryrun will illustrate how the hooking system executes through the phases of\ndeploy.  In fact, if you like, you can setup separate environments to serve as different phases themselves.  Note,\nthat as we're specifiying environment the default.sync is ignored.  Without further ado:\n\n    $ git deploy start\n\n    Jan-14 00:11:17 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 00:11:18 INFO     git_deploy.lockers.locker :: No lock file exists.\n    Jan-14 00:11:18 INFO     git_deploy.lockers.locker :: Creating lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.\n\nDo the dryrun:\n\n    $ git deploy sync -d -e prod\n\n    Jan-14 23:06:31 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 23:06:32 INFO     git_deploy.lockers.locker :: rfaulk has lock.\n    Jan-14 23:06:32 INFO     git_deploy.git_deploy :: SYNC -> dryrun.\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: DRYRUN SYNC\n    Jan-14 23:06:32 INFO     --> TAG 'sartoris-sync-20140114-230632'\n    Jan-14 23:06:32 INFO     --> AUTHOR 'rfaulk <rfaulk@yahoo-inc.com>'\n    Jan-14 23:06:32 INFO     --> REMOTE 'origin'\n    Jan-14 23:06:32 INFO     --> BRANCH 'master'\n    Jan-14 23:06:32 INFO     DUMPING DEPLOY SCRIPTS IN ORDER OF EXECUTION.\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'\n\n        #!/bin/bash\n        echo \"common pre-sync\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh' ON PHASE 'pre-sync'\n\n        #!/bin/bash\n        echo \"prod pre-sync 1\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh' ON PHASE 'pre-sync'\n\n        #!/bin/bash\n        echo \"prodn pre-sync 2\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync' ON PHASE 'prod'\n\n        #!/bin/bash\n        echo prod.sync\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh' ON PHASE 'post-sync'\n\n        #!/bin/bash\n        echo \"prod post-sync 1\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh' ON PHASE 'post-sync'\n\n        #!/bin/bash\n        echo \"prod post-sync 2\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'\n\n        #!/bin/bash\n        echo \"common post-sync\"\n\n    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: DRYRUN SYNC COMPLETE\n\nFinally, let's execute the dummy sync:\n\n    $ git deploy sync -e prod\n\n    Jan-14 23:07:38 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 23:07:40 INFO     git_deploy.lockers.locker :: rfaulk has lock.\n    Jan-14 23:07:40 INFO     git_deploy.git_deploy :: SYNC - calling default sync.\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh OUT -> common pre-sync\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh' ON PHASE 'pre-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh OUT -> prod pre-sync 1\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh' ON PHASE 'pre-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh OUT -> prodn pre-sync 2\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync' ON PHASE 'prod'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync OUT -> prod.sync\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh' ON PHASE 'post-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh OUT -> prod post-sync 1\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh' ON PHASE 'post-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh OUT -> prod post-sync 2\n\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...\n    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'\n    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh OUT -> common post-sync\n\n    Jan-14 23:07:40 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.\n    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: rfaulk has lock.\n    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: SSH Lock destroy.\n    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: Removing lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.\n\n\nDevelopment\n-----------\n\nPull requests welcome!  If you love Python and git this may be the perfect project for you.  All source is PEP8\ncompliant Python 2.7 compatible.  Please drop in tests where possible for new additions.\n\nPatrick Reilly (patrick.reilly at gmail dot com) and Ryan Faulkner (bobs.ur.uncle at gmail dot com).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Git-Tools/git-deploy", "keywords": "git,deploy,scripts,cli", "license": "License :: OSI Approved :: BSD License", "maintainer": null, "maintainer_email": null, "name": "git_deploy", "package_url": "https://pypi.org/project/git_deploy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/git_deploy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Git-Tools/git-deploy"}, "release_url": "https://pypi.org/project/git_deploy/0.3.0dev-20140209/", "requires_dist": null, "requires_python": null, "summary": "Tool to manage using git as a deployment management tool", "version": "0.3.0dev-20140209", "yanked": false, "html_description": "<div class=\"project-description\">\n            git-deploy<br>==========<br><br>It is a tool to manage using git as a deployment management tool implemented in Python and utilizing the dulwich [1]<br>project for native git functionality in Python.<br><br>Git-deploy implements the front end of the deployment system while hooks give the user flexibility in the lower level<br>details of the deploy.  This client uses git to manage the state of your repository and deployment and assumes that on<br>sync the hooks ensure that the target is made consistent with the client (see default.sync) however, the user is free to<br>add their own deployment flow and environment options (see examples below).<br><br>[1] https://github.com/jelmer/dulwich<br><br><br>Usage<br>-----<br><br>Basic usage involves cloning the remote working repo to the deploy target and all client nodes.  When<br>a client is ready to deploy 'start' is invoked to obtain a lock on the remote and 'sync' is called to<br>push changes to the target.  On completion the lock is removed.<br><br>To start a new deployment, navigate to the working repo, issue a 'start' command:<br><br>    $ git deploy start [opts]<br><br>At this point you are free to make commits to the project and when ready for deployment issue <br>a 'sync' command - or simply 'sync' if you're work is already complete but, be sure to rebase<br>your local clone:<br><br>    $ git deploy sync [opts]<br><br>The process may be aborted at any point with an 'abort' command:<br><br>    $ git deploy abort [opts]<br><br>You can rollback to a tag with the revert call:<br><br>    $ git deploy revert [-t &lt;tag_name&gt;] [opts]<br><br>If no tag is supplied the rollback uses the most recent tag.  The default is to only commit the rollback locally<br>however, by suppling the \"-a\" option for auto-sync the rollback automatically syncs also:<br><br>    $ git deploy revert [-t &lt;tag_name&gt;] [opts]<br><br><br>Setup<br>-----<br><br>The following example illustrates how git-deploy can be configured and used for a single client and target.  For this<br>example the client host and target host will be referred to as *client.realm.org* and *target.realm.org* respectively.<br>The home path on the client and target for our sample project is */home/me/project/* and */var/www/html/sample.com/*<br>respectively.  It is assumed that the git remote is configured for your project and for this example the remote alias is<br>*origin* and the remote branch is *master*.<br><br><br>**CLIENT SETUP**<br><br>The client is any working machine from which deployments may be initiated.  On *client.realm.org* clone git deploy, local<br>install, configure settings and initialize:<br><br>    $ git clone git@github.com:Git-Tools/git-deploy.git<br><br>    ...<br><br>    $ cd git-deploy<br>    $ sudo pip install -e .<br><br>    ...<br><br>Next configure the client instance with git config by assigning the following settings in *scripts/git-deploy.ini*:<br><br>    [deploy]<br>        target=target.realm.org<br>        path=/home/me/project/<br>        user=me<br>        hook-dir=.git/deploy/hooks/<br>        tag-prefix=sample.com<br>        remote=origin<br>        branch=master<br>        client-path=/home/me/project/<br>        key-path=/home/me/.ssh/id_rsa<br>        test-repo-path=/tmp/test_repo/<br>    [system]<br>        run_root=/usr/bin/<br><br>Once you have defined settings in *git-deploy.ini* call *init.py* to set the got config<br><br>    $ sudo ./scripts/init_gd<br><br><br>**TARGET SETUP**<br><br>On *target.realm.org* there is no need to clone and install git-deploy but here the deploy hooks will need to be<br>created.  There is a default hook in *git-deploy/default-hooks/default-target-pull.py* that should be copied to<br>*target.realm.org:/var/www/html/sample.com/.git/deploy/hooks/*.  This is a basic hook that will pull the changes<br>pushed from the client instance on sync.<br><br><br>**USING GIT DEPLOY**<br><br>First initialize a new repository on your client:<br><br>    $ mkdir me.com<br>    $ cd me.com<br>    $ git init<br>    $ git remote add origin git@github.com:wikimedia/me.com.git<br>    $ git push origin master<br><br>On the target you only need to ensure that *path* in config exists and is configured as a git repo for your project.<br><br>*Start* &amp; *Sync*:<br><br>Ensure that the client is correctly synced to the remote by issuing a git pull or rebase.  Then you can issue a<br>a start command to write the lock file to the target to begin the deployment.<br><br>    $ cd me.com<br>    $ touch new_file<br>    $ git add new_file<br>    $ git commit -m \"add - my new file\"<br>    $ git pull --rebase origin master<br><br>At this point you are ready to enter the deployment process:<br><br>    client.realm.org:me.com me$ git deploy start<br><br>    &lt;perform any testing or add any other commits as necessary you've locked the remote at this point&gt;<br><br>    client.realm.org:me.com me$ git deploy sync<br><br>Once you sync a the specified hooks will be invoked from the client and the target and a tag is written to the<br>repository on the latest commit of the deploy. If the default push and pull hooks are used the client will simply<br>push its changes to the remote and the target will pull in the new changes.  Deployment tags have the form<br>*&lt;repo&gt;-sync-&lt;date&gt;-&lt;time&gt;*.<br><br>Finally, you can also do a dryrun on the sync:<br><br>    $ git deploy sync -d<br><br>*Abort*<br><br>At times it is necessary to exit the deploy cycle prematurely.  For instance, consider the following:<br><br>    $ git deploy start<br>    $ git commit bad_change -m \"add - some buggy code.\"<br><br>Suddenly, you realize that your change introduced a bug after entering the deloy process.  Rather than syncing the bad<br>code and then rolling back (next section) we can simply abort the deploy:<br><br>    $ git deploy abort<br>    $ git reset --soft HEAD^<br><br>    ... continue with your local changes ...<br><br>Now you have released deploy to other clients without infecting the code base with your buggy code.<br><br><br>*Rollback*<br><br>If you accidentally deploy some code that needs to be rolled back the *revert* command can be very helpful here.  You<br>can rollback to previous deploy states by utilizing deploy tags.  To view the old tags:<br><br>    $ git tag<br><br>Now to rollback to a previous deploy call *git revert* with the appropriate tag:<br><br>    $ git deploy start<br>    $ git deploy revert &lt;tag&gt;<br><br><br>Deploy Hooks<br>------------<br><br>This behaviour mimics that found in https://github.com/git-deploy/git-deploy#deploy-hooks &amp;<br>https://github.com/git-deploy/git-deploy#writing-deploy-hooks.<br><br>The hooking system can be used to execute user defined actions in the deploy process.<br><br><br>**Writing Hooks**<br><br>This system is based around a sync model where a sync is the process by which the deploy target is made consistent with<br>a calling client.  There are two phases that define the behaviour around deployment, pre/post-sync.<br><br>The pre-deploy framework is expected to reside in the $GIT_WORK_DIR/deploy directory (i.e. the deploy directory of the<br>repository that's being rolled out). This directory has the following tree:<br><br>    $GIT_WORK_DIR/deploy/                   # deploy directory<br>                        /apps/              # Directory per application + 'common'<br>                             /common/       # deploy scripts that apply to all apps<br>                             /$app/         # deploy scripts for a specific $app<br>                        /sync/              # sync<br>                             /$app.sync<br><br>The $app in deploy/{apps,sync}/$app is the server prefix that you'd see in the rollout tag. E.g. A company might have<br>multiple environments which they roll out, for instance \"sheep\", \"cows\" and \"goats\". Here is a practical example of the<br>deployment hooks that might be used in the sheep environment:<br><br>    $ tree deploy/apps/{sheep,common}/ deploy/sync/<br>    deploy/apps/sheep/<br>    |-- post-sync.010_httpd_configtest.sh<br>    |-- post-sync.020_restart_httpd.sh<br>    |-- pre-sync.010_nobranch_rollout.sh<br>    |-- pre-sync.020_check_that_we_are_in_the_load_balancer.pl<br>    |-- pre-sync.021_take_us_out_of_the_load_balancer.pl<br>    `-- pre-sync.022_check_that_we_are_not_in_the_load_balancer.pl -&gt; pre-pull.020_check_that_we_are_in_the_load_balancer.pl<br>    deploy/apps/common/<br>    |-- pre-sync.001_setup_affiliate_symlink.pl<br>    `-- pre-sync.002_check_permissions.pl<br>    deploy/sync/<br>    |-- sheep.sync<br><br>All the hooks in deploy/apps are prefixed by a phase in which git-deploy will execute them (e.g. pre-sync just before a sync).<br><br>During these phases git-deploy will glob in all the deploy/apps/{common,$app}/$phase.* hooks and execute them in sort order, first<br>the common hooks and then the $app specific hooks. Note that the hooks MUST have their executable bit set.<br><br><br>**Calling Environments**<br><br>To call an environment based deploy use the -e option:<br><br>    $ git deploy sync -e $ENV<br><br><br>Deploy Logging<br>--------------<br><br>Git deploy maintains a deploy log on the target's deploy root path.  The logs can be found under:<br><br>    ${DEPLOY_ROOT}/logs/git-deploy.log (archive)<br>    ${DEPLOY_ROOT}/logs/git-deploy-active.log (active)<br><br>The active log stores logging from any currently active deploys and is flush-appended to the archive log on<br>completion of a deploy.  There is currently no default log rotation implemented on the target in git-deploy<br>so this would have to be added manually if desired.<br><br><br>Examples<br>--------<br><br>**Reverting to a tag**<br><br>This example illustrates how to rollback a deploy to an earlier tag.<br><br>In the directory of the client repository check Git history:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git log<br><br>    commit 779a07774dd5a7baf8dc86657cbfc491264ff970<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sun Dec 8 23:28:50 2013 -0800<br><br>        test<br><br>    commit 1ab80a78fc1e89ae6f8872282f96f5f42677b843<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sat Nov 16 18:31:26 2013 -0800<br><br>        test git-deploy 20131116_0.file.<br><br>    commit 12311863e111a266c4c1c513da45a39ed3e8cdd5<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sat Nov 2 19:42:58 2013 -0700<br><br>        Initial commit.<br><br>Next, take a look at the existing sync tags:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git tag<br><br>    sartoris-sync-20131220-000105<br>    sartoris-sync-20131220-012354<br>    sartoris-sync-20131220-013503<br><br>Let's start the deploy:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git deploy start<br><br>    Dec-20 01:53:00 DEBUG    git-deploy is ready to run<br>    Dec-20 01:53:00 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}<br>    Dec-20 01:53:00 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.<br>    Dec-20 01:53:01 INFO     git_deploy.git_deploy :: No lock file exists.<br>    Dec-20 01:53:01 INFO     git_deploy.git_deploy :: SSH Lock create.<br><br>Next call the revert action - a tag can be explicitly supplied, but in this example it isn't and the rollback applies to the<br>previous sync tag:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git deploy revert<br><br>    Dec-20 01:53:13 DEBUG    git-deploy is ready to run<br>    Dec-20 01:53:13 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}<br>    Dec-20 01:53:13 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.<br>    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: rfaulk has lock.<br>    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -&gt; no tag specified, using: 'sartoris-sync-20131220-012354'<br>    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -&gt; Attempting to revert to tag: 'sartoris-sync-20131220-012354'<br>    Dec-20 01:53:15 INFO     git_deploy.git_deploy :: REVERT -&gt; Reverted to tag: 'sartoris-sync-20131220-012354', call \"git deploy sync\" to persist<br><br>And sync the changes:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git deploy sync<br><br>    Dec-20 01:53:49 DEBUG    git-deploy is ready to run<br>    Dec-20 01:53:49 INFO     git_deploy.git_deploy :: Config - {'deploy.test_repo': '/tmp/test/', 'deploy.key_path': '/Users/rfaulk/.ssh/id_rsa', 'target': 'stat1.wikimedia.org', 'top_dir': '/Users/rfaulk/Projects/test_sartoris', 'user.name': 'rfaulk', 'user.email': 'rfaulk@yahoo-inc.com', 'deploy.remote_url': 'git@github.com:rfaulkner/test_sartoris.git', 'hook_dir': '.git/deploy/hooks/', 'client_path': '/Users/rfaulk/Projects/test_sartoris/', 'sync_dir': '.git/deploy/hooks//sync', 'path': '/home/rfaulk/test_sartoris/', 'repo_name': 'sartoris', 'deploy_file': '/Users/rfaulk/Projects/test_sartoris/.git/.deploy', 'user': 'rfaulk'}<br>    Dec-20 01:53:49 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.<br>    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: rfaulk has lock.<br>    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: SYNC - tag local<br>    Dec-20 01:53:51 INFO     git_deploy.git_deploy :: SYNC - calling default sync.<br>    Dec-20 01:53:51 INFO     git_deploy.drivers.driver :: Calling default sync - pushing changes ...<br>    Dec-20 01:53:53 INFO     PUSH -&gt;<br>    Dec-20 01:53:53 INFO     git_deploy.drivers.driver :: Calling default sync - pulling to target<br>    Dec-20 01:53:56 INFO     PULL -&gt; Updating 779a077..38f42d3; Fast-forward<br>    Dec-20 01:53:56 INFO     git_deploy.git_deploy :: Checking for lock file at stat1.wikimedia.org.<br>    Dec-20 01:53:57 INFO     git_deploy.git_deploy :: rfaulk has lock.<br>    Dec-20 01:53:57 INFO     git_deploy.git_deploy :: SSH Lock destroy.<br><br>We're done, check the git history, you should see a rollback commit.  This is persisted to the remote repo and the target host:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git log<br><br>    commit 38f42d3be6831c16b475786f3016bcc588499e56<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Fri Dec 20 09:53:15 2013 +0000<br><br>        Rollback to sartoris-sync-20131220-012354.<br><br>    commit 779a07774dd5a7baf8dc86657cbfc491264ff970<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sun Dec 8 23:28:50 2013 -0800<br><br>        test<br><br>    commit 1ab80a78fc1e89ae6f8872282f96f5f42677b843<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sat Nov 16 18:31:26 2013 -0800<br><br>        test git-deploy 20131116_0.file.<br><br>    commit 12311863e111a266c4c1c513da45a39ed3e8cdd5<br>    Author: rfaulk &lt;rfaulk@yahoo-inc.com&gt;<br>    Date:   Sat Nov 2 19:42:58 2013 -0700<br><br>        Initial commit.<br><br>Finally, note the new sync tag for the rollback:<br><br>    richrushbay-lm:test_sartoris rfaulk$ git tag<br><br>    sartoris-sync-20131220-000105<br>    sartoris-sync-20131220-012354<br>    sartoris-sync-20131220-013503<br>    sartoris-sync-20131220-015351<br><br><br>**Dryrun of the default**<br><br><br>In this example we have the following deploy tree:<br><br>    $ tree deploy/apps/{prod,common}/ deploy/sync/<br>    deploy/apps/prod/<br>    |-- post-sync.010_test.sh<br>    |-- post-sync.020_test.sh<br>    |-- pre-sync.010_test.sh<br>    |-- pre-sync.020_test.sh<br>    deploy/apps/common/<br>    |-- pre-sync.010_test.sh<br>    |-- post-sync.010_test.sh<br>    deploy/sync/<br>    |-- prod.sync<br>    |-- default.sync<br><br>To execute the dryrun on the default note that any app specific hooks are ignored:<br><br>    $ git deploy start<br><br>    Jan-14 23:19:26 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 23:19:27 INFO     git_deploy.lockers.locker :: No lock file exists.<br>    Jan-14 23:19:27 INFO     git_deploy.lockers.locker :: Creating lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.<br><br>    $ git deploy sync -d<br><br>    Jan-14 23:19:32 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 23:19:34 INFO     git_deploy.lockers.locker :: rfaulk has lock.<br>    Jan-14 23:19:34 INFO     git_deploy.git_deploy :: SYNC -&gt; dryrun.<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: DRYRUN SYNC<br>    Jan-14 23:19:34 INFO     --&gt; TAG 'sartoris-sync-20140114-231934'<br>    Jan-14 23:19:34 INFO     --&gt; AUTHOR 'rfaulk &lt;rfaulk@yahoo-inc.com&gt;'<br>    Jan-14 23:19:34 INFO     --&gt; REMOTE 'origin'<br>    Jan-14 23:19:34 INFO     --&gt; BRANCH 'master'<br>    Jan-14 23:19:34 INFO     DUMPING DEPLOY SCRIPTS IN ORDER OF EXECUTION.<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'<br><br>        #!/bin/bash<br>        echo \"common pre-sync\"<br><br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/\" ...<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/default.sync' ON PHASE 'default'<br><br>        #!/usr/bin/python<br>        # -*- coding: utf-8 -*-<br><br>        \"\"\"<br><br>        Default sync script that performs push from client.  The expected ops<br>        are the following:<br><br>            cd $GIT_DEPLOY_HOME<br>            /usr/bin/git push origin master<br>            /usr/bin/git push --tags<br><br>        \"\"\"<br><br>        import sys<br>        import logging<br><br>        from git_deploy.git_deploy import GitMethods<br>        from git_deploy.utils import ssh_command_target<br><br>        log_format = \"%(asctime)s %(levelname)-8s %(message)s\"<br>        handler = logging.StreamHandler(sys.stderr)<br>        handler.setFormatter(logging.Formatter(fmt=log_format,<br>                             datefmt='%b-%d %H:%M:%S'))<br><br><br>        def main():<br><br>            # Dulwich push<br>            remote = GitMethods().config['deploy.remote_url']<br>            logging.info(__name__ + ' :: Default sync, pushing to \\'{0}\\''.format(<br>                remote))<br>            GitMethods()._dulwich_push(remote, 'master')<br><br>            # git pull on remote<br>            target_path = GitMethods().config['path']<br>            cmd = \"git --git-dir={0}/.git --work-tree={0} pull origin master\".format(<br>                target_path)<br>            target = GitMethods().config['target']<br>            user = GitMethods().config['user.name']<br>            key_path = GitMethods().config['deploy.key_path']<br><br>            logging.info(__name__ + ' :: Default sync, pulling '<br>                                    'changes to \\'{0}\\''.format(target))<br>            ssh_command_target(cmd, target, user, key_path)<br><br><br>        def cli():<br>            sys.exit(main())<br><br>        if __name__ == \"__main__\":  # pragma: nocover<br>            cli()<br><br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/\" ...<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'<br><br>        #!/bin/bash<br>        echo \"common post-sync\"<br><br>    Jan-14 23:19:34 INFO     git_deploy.drivers.driver :: DRYRUN SYNC COMPLETE<br><br><br>**Dryrun and sync to an environment**<br><br><br>In this example we have a set of dummy hooks:<br><br>    $ tree deploy/apps/{prod,common}/ deploy/sync/<br>    deploy/apps/prod/<br>    |-- post-sync.010_test.sh<br>    |-- post-sync.020_test.sh<br>    |-- pre-sync.010_test.sh<br>    |-- pre-sync.020_test.sh<br>    deploy/apps/common/<br>    |-- pre-sync.010_test.sh<br>    |-- post-sync.010_test.sh<br>    deploy/sync/<br>    |-- prod.sync<br>    |-- default.sync<br><br>These hooks just do some simple echoing, a dryrun will illustrate how the hooking system executes through the phases of<br>deploy.  In fact, if you like, you can setup separate environments to serve as different phases themselves.  Note,<br>that as we're specifiying environment the default.sync is ignored.  Without further ado:<br><br>    $ git deploy start<br><br>    Jan-14 00:11:17 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 00:11:18 INFO     git_deploy.lockers.locker :: No lock file exists.<br>    Jan-14 00:11:18 INFO     git_deploy.lockers.locker :: Creating lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.<br><br>Do the dryrun:<br><br>    $ git deploy sync -d -e prod<br><br>    Jan-14 23:06:31 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 23:06:32 INFO     git_deploy.lockers.locker :: rfaulk has lock.<br>    Jan-14 23:06:32 INFO     git_deploy.git_deploy :: SYNC -&gt; dryrun.<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: DRYRUN SYNC<br>    Jan-14 23:06:32 INFO     --&gt; TAG 'sartoris-sync-20140114-230632'<br>    Jan-14 23:06:32 INFO     --&gt; AUTHOR 'rfaulk &lt;rfaulk@yahoo-inc.com&gt;'<br>    Jan-14 23:06:32 INFO     --&gt; REMOTE 'origin'<br>    Jan-14 23:06:32 INFO     --&gt; BRANCH 'master'<br>    Jan-14 23:06:32 INFO     DUMPING DEPLOY SCRIPTS IN ORDER OF EXECUTION.<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'<br><br>        #!/bin/bash<br>        echo \"common pre-sync\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh' ON PHASE 'pre-sync'<br><br>        #!/bin/bash<br>        echo \"prod pre-sync 1\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh' ON PHASE 'pre-sync'<br><br>        #!/bin/bash<br>        echo \"prodn pre-sync 2\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync' ON PHASE 'prod'<br><br>        #!/bin/bash<br>        echo prod.sync<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh' ON PHASE 'post-sync'<br><br>        #!/bin/bash<br>        echo \"prod post-sync 1\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh' ON PHASE 'post-sync'<br><br>        #!/bin/bash<br>        echo \"prod post-sync 2\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'<br><br>        #!/bin/bash<br>        echo \"common post-sync\"<br><br>    Jan-14 23:06:32 INFO     git_deploy.drivers.driver :: DRYRUN SYNC COMPLETE<br><br>Finally, let's execute the dummy sync:<br><br>    $ git deploy sync -e prod<br><br>    Jan-14 23:07:38 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 23:07:40 INFO     git_deploy.lockers.locker :: rfaulk has lock.<br>    Jan-14 23:07:40 INFO     git_deploy.git_deploy :: SYNC - calling default sync.<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync common: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh' ON PHASE 'pre-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/pre-sync.010_test.sh OUT -&gt; common pre-sync<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh' ON PHASE 'pre-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.010_test.sh OUT -&gt; prod pre-sync 1<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh' ON PHASE 'pre-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/pre-sync.020_test.sh OUT -&gt; prodn pre-sync 2<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling pre-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync\" ...<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync' ON PHASE 'prod'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/sync/prod.sync OUT -&gt; prod.sync<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod\" ...<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh' ON PHASE 'post-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.010_test.sh OUT -&gt; prod post-sync 1<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh' ON PHASE 'post-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/prod/post-sync.020_test.sh OUT -&gt; prod post-sync 2<br><br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: Calling post-sync app: \"/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common\" ...<br>    Jan-14 23:07:40 INFO     git_deploy.drivers.driver :: CALLING '/Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh' ON PHASE 'post-sync'<br>    Jan-14 23:07:40 INFO     /Users/rfaulk/Projects/test_sartoris//.git/deploy/apps/common/post-sync.010_test.sh OUT -&gt; common post-sync<br><br>    Jan-14 23:07:40 INFO     git_deploy.lockers.locker :: Checking for lock file at stat1.wikimedia.org.<br>    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: rfaulk has lock.<br>    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: SSH Lock destroy.<br>    Jan-14 23:07:41 INFO     git_deploy.lockers.locker :: Removing lock file at stat1.wikimedia.org:/home/rfaulk/test_sartoris/.git/deploy//lock-rfaulk.lock.<br><br><br>Development<br>-----------<br><br>Pull requests welcome!  If you love Python and git this may be the perfect project for you.  All source is PEP8<br>compliant Python 2.7 compatible.  Please drop in tests where possible for new additions.<br><br>Patrick Reilly (patrick.reilly at gmail dot com) and Ryan Faulkner (bobs.ur.uncle at gmail dot com).\n          </div>"}, "last_serial": 995557, "releases": {"0.2-devdev-20131220": [], "0.3.0dev-20140209": [{"comment_text": "", "digests": {"md5": "13e32d927ceb7c947d02e78b33ab38a6", "sha256": "b037efadbbc6c62dc91c50332e59891135d47c28f3207bf15bf3a7029d3d0c45"}, "downloads": -1, "filename": "git_deploy-0.3.0dev-20140209.tar.gz", "has_sig": false, "md5_digest": "13e32d927ceb7c947d02e78b33ab38a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23772, "upload_time": "2014-02-09T20:14:28", "upload_time_iso_8601": "2014-02-09T20:14:28.273590Z", "url": "https://files.pythonhosted.org/packages/41/b7/c984313c3d1b67115e80cb0dcad9197e55a4860b7c5388e48237629ca8d1/git_deploy-0.3.0dev-20140209.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13e32d927ceb7c947d02e78b33ab38a6", "sha256": "b037efadbbc6c62dc91c50332e59891135d47c28f3207bf15bf3a7029d3d0c45"}, "downloads": -1, "filename": "git_deploy-0.3.0dev-20140209.tar.gz", "has_sig": false, "md5_digest": "13e32d927ceb7c947d02e78b33ab38a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23772, "upload_time": "2014-02-09T20:14:28", "upload_time_iso_8601": "2014-02-09T20:14:28.273590Z", "url": "https://files.pythonhosted.org/packages/41/b7/c984313c3d1b67115e80cb0dcad9197e55a4860b7c5388e48237629ca8d1/git_deploy-0.3.0dev-20140209.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:07 2020"}