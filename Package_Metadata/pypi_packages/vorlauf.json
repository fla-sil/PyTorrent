{"info": {"author": "Alex Holmes", "author_email": "alex@alex-holmes.com", "bugtrack_url": null, "classifiers": [], "description": "Vorlauf\n=======\n\nWhat?\n-----\n\nVorlauf is a very minimal tool that helps you to create process pipelines (in\nthe shell sense). It also helps separate out the definition of a Process from\nthe running of a that process with a given stdin, stdout, and stderr.\n\nWhy?\n----\n\nBecause the subprocess api for chaining processes together is cumbersome and\nnot very well documented.\n\nHow?\n----\n\nThis library does basically nothing - it's implemented in fewer than 100 lines.\nThere are two classes available, ``Process`` and ``Pipeline``.\n\nProcess\n~~~~~~~\n\nThe ``Process`` class is passed args, cwd, and env, and is executed by calling\n``Process.run`` with optional ``stdin``, ``stdout``, and ``stderr`` parameters.\n\nBy removing the ``stdout``, ``stderr``, and ``stdin`` from the creation of the\n``Process`` class, we can create reusable ``Process`` definitions::\n\n  critical_grepper = Process('grep', 'CRITICAL')\n\n  syslog = open('/var/log/syslog', 'r')\n  apachelog = open('/var/log/httpd/error.log', 'r')\n\n  filtered = open('critical.log', 'w')\n\n  for logfile in (syslog, apachelog):\n    critical_grepper.run(stdin=logfile, stdout=filtered)\n\nPipeline\n~~~~~~~~\n\nThe ``Pipeline`` class stores a list of ``Process`` classes which, when run\nwith ``Pipeline.run`` with optional ``stdin`` and ``stdout``, pipes the\nprocesses together. If present, ``stdin`` is passed to the first process, and\nif present, ``stdout`` is passed to the last process.\n\nExample\n-------\n::\n\n  from vorlauf import Pipeline, Process\n\n  pipeline = Pipeline()\n  pipeline.add(Process('cat', 'foo.txt'))\n  pipeline.add(Process('grep', 'something'))\n  pipeline.add(Process('uniq'))\n\n  with open('new.txt', 'wb') as fd:\n      pipeline.run(stdout=fd)\n\nAnd because of operator overloading built into the ``Process`` and ``Pipeline``\nclasses, this can be simplified as::\n\n  from vorlauf import Process as P\n\n  pipeline = P('cat', 'foo.txt') | P('grep', 'something') | P('uniq')\n  with open('new.txt', 'wb') as fd:\n      pipeline.run(stdout=fd)\n\nFinally, you could use the ``Process`` class to create reusable components::\n\n  from vorlauf import Process\n\n  class GPG(Process):\n\n      def __init__(self, passphrase):\n          super(GPG, self).__init__('gpg', '-c', '--passphrase', passphrase, '-')\n\n\n  class MySQLDump(Process):\n\n      def __init__(self, password, dbname, **kwargs):\n          super(MySQLDump, self).__init__(\n              'mysqldump', '-u', 'root', '-p{}'.format(password), dbname\n          )\n\n\n  with open('mysql.dump', 'wb') as fd:\n      pipeline = MySQLDump('loldongs', 'foo') | GPG('supersekrit')\n      pipeline.run(stdout=fd)\n\n\nTests\n-----\n\nRun::\n\n  virtualenv venv\n  venv/bin/pip install -e .\n  venv/bin/python test.py\n\n\nChangelog\n=========\n\n1.0.0 (2015-09-22)\n------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "vorlauf subprocess pipe", "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "vorlauf", "package_url": "https://pypi.org/project/vorlauf/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vorlauf/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/vorlauf/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Lightweight tool for piping subprocess processes to each other", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"vorlauf\">\n<h2>Vorlauf</h2>\n<div id=\"what\">\n<h3>What?</h3>\n<p>Vorlauf is a very minimal tool that helps you to create process pipelines (in\nthe shell sense). It also helps separate out the definition of a Process from\nthe running of a that process with a given stdin, stdout, and stderr.</p>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>Because the subprocess api for chaining processes together is cumbersome and\nnot very well documented.</p>\n</div>\n<div id=\"how\">\n<h3>How?</h3>\n<p>This library does basically nothing - it\u2019s implemented in fewer than 100 lines.\nThere are two classes available, <tt>Process</tt> and <tt>Pipeline</tt>.</p>\n<div id=\"process\">\n<h4>Process</h4>\n<p>The <tt>Process</tt> class is passed args, cwd, and env, and is executed by calling\n<tt>Process.run</tt> with optional <tt>stdin</tt>, <tt>stdout</tt>, and <tt>stderr</tt> parameters.</p>\n<p>By removing the <tt>stdout</tt>, <tt>stderr</tt>, and <tt>stdin</tt> from the creation of the\n<tt>Process</tt> class, we can create reusable <tt>Process</tt> definitions:</p>\n<pre>critical_grepper = Process('grep', 'CRITICAL')\n\nsyslog = open('/var/log/syslog', 'r')\napachelog = open('/var/log/httpd/error.log', 'r')\n\nfiltered = open('critical.log', 'w')\n\nfor logfile in (syslog, apachelog):\n  critical_grepper.run(stdin=logfile, stdout=filtered)\n</pre>\n</div>\n<div id=\"pipeline\">\n<h4>Pipeline</h4>\n<p>The <tt>Pipeline</tt> class stores a list of <tt>Process</tt> classes which, when run\nwith <tt>Pipeline.run</tt> with optional <tt>stdin</tt> and <tt>stdout</tt>, pipes the\nprocesses together. If present, <tt>stdin</tt> is passed to the first process, and\nif present, <tt>stdout</tt> is passed to the last process.</p>\n</div>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre>from vorlauf import Pipeline, Process\n\npipeline = Pipeline()\npipeline.add(Process('cat', 'foo.txt'))\npipeline.add(Process('grep', 'something'))\npipeline.add(Process('uniq'))\n\nwith open('new.txt', 'wb') as fd:\n    pipeline.run(stdout=fd)\n</pre>\n<p>And because of operator overloading built into the <tt>Process</tt> and <tt>Pipeline</tt>\nclasses, this can be simplified as:</p>\n<pre>from vorlauf import Process as P\n\npipeline = P('cat', 'foo.txt') | P('grep', 'something') | P('uniq')\nwith open('new.txt', 'wb') as fd:\n    pipeline.run(stdout=fd)\n</pre>\n<p>Finally, you could use the <tt>Process</tt> class to create reusable components:</p>\n<pre>from vorlauf import Process\n\nclass GPG(Process):\n\n    def __init__(self, passphrase):\n        super(GPG, self).__init__('gpg', '-c', '--passphrase', passphrase, '-')\n\n\nclass MySQLDump(Process):\n\n    def __init__(self, password, dbname, **kwargs):\n        super(MySQLDump, self).__init__(\n            'mysqldump', '-u', 'root', '-p{}'.format(password), dbname\n        )\n\n\nwith open('mysql.dump', 'wb') as fd:\n    pipeline = MySQLDump('loldongs', 'foo') | GPG('supersekrit')\n    pipeline.run(stdout=fd)\n</pre>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>Run:</p>\n<pre>virtualenv venv\nvenv/bin/pip install -e .\nvenv/bin/python test.py\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0.0 (2015-09-22)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1733049, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "191ea007b5106822f34643e127c227a9", "sha256": "dc9c12cad3c2aabfbc7587eda0f2beb4e3eb83e51f29f320562b2c38a82a8431"}, "downloads": -1, "filename": "vorlauf-1.0.0.tar.gz", "has_sig": false, "md5_digest": "191ea007b5106822f34643e127c227a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3248, "upload_time": "2015-09-22T11:58:55", "upload_time_iso_8601": "2015-09-22T11:58:55.481537Z", "url": "https://files.pythonhosted.org/packages/76/20/ff9e86c1db49ddf4f945e62e229b009a882935d9e1333346fea507e43ea5/vorlauf-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "191ea007b5106822f34643e127c227a9", "sha256": "dc9c12cad3c2aabfbc7587eda0f2beb4e3eb83e51f29f320562b2c38a82a8431"}, "downloads": -1, "filename": "vorlauf-1.0.0.tar.gz", "has_sig": false, "md5_digest": "191ea007b5106822f34643e127c227a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3248, "upload_time": "2015-09-22T11:58:55", "upload_time_iso_8601": "2015-09-22T11:58:55.481537Z", "url": "https://files.pythonhosted.org/packages/76/20/ff9e86c1db49ddf4f945e62e229b009a882935d9e1333346fea507e43ea5/vorlauf-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:21 2020"}