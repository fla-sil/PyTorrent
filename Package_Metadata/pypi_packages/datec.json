{"info": {"author": "Isaac To", "author_email": "isaac.to@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# Date command: A command-based date computation engine\n\ndatec allows you to use \"date commands\" to modify datetime's by adding\nto them, like datetime.datetime.now() + Period(2, 'week').\n\nA date command can be parsed from string using the parse() function,\nwhich create a command from a string representation.  This forms the\nbasis of the datec command, which is a command-line program to output\ndatetime after applying date commands.  In general the date\nrepresentation is NxYYYY-mm-ddTHH:MM:SS.ffffff, where unspecified\nparts are omitted leaving the symbols intact, like \"2x-2-29T3::.\" (see\nthe following for the meaning).  If fractional part is not specified\nthe \".\" may be omitted, if all time parts are not specified the \"T::.\"\ncan be omitted, if all date parts are not specified the \"--T\" can be\nomitted, and if N is 0 the x may be omitted.  By there are a couple\nother more formats like +3week and -2wed for shifting by period and\nweekday.\n\nDate commands are in two forms: period shifting commands and partial\ndatetime shifting commands.  The first type is more familiar: they\nlook like\n\n  * +2week (shift the datetime forward by 2 week)\n  * -1month (shift the datetime backward by 1 month)\n\nPeriod is one of year, month, week, day, hour, minute and second,\nrepresented by an object of the Period class.  Fractional numbers are\nacceptable except for year and month.  If shifting a period leads to\nan invalid date (e.g., shift backward 1 month from 2019-07-31), it\nmoves backwards the closest valid date (here, 2019-06-30).  In general\nthe parts finer than the shifted part is unaffected (e.g., shifting 1\nmonth from 2019-07-31 02:00 gives you 2019-06-30 02:00).\n\nPartial datetime shifting is less familiar.  It looks like:\n\n  * 12:: (set the hour number to 12)\n  * +2x12:: (move forward to the second hour 12)\n  * +4x--31 (move forward to the fourth occurrence of day 31 of a month)\n  * -3x-02-29 (move backward to the third occurrence of February 29)\n  * wed (set to the Wednesday of the same week, week starts on Sunday)\n  * -3wed (move to the third Wednesday before the current datetime)\n\nThey are represented by either a Weekday object or a PartialDate\nobject with a count.  A count of 0 means setting instead of shifting.\nOnly integer counts are acceptable.\n\nIt is an error to set to an invalid date (e.g., --31 applied on\n2019-06-25 is an error).  The datetime parts which are specified must\nbe consecutive (it is an error to specify 12::05).  It is also an\nerror to shift for occurrence of partial date with year specified\n(e.g., \"+2x2019--\").\n\nOn the other hand, shifting to an invalid date with day number\nspecified will shift more until a specified date is valid.  For\nexample, if you add -2-29 with count 1 to 2019-01-01, you end up with\n2020-02-29, because 2019-02-29 is not a valid date.  If the count is 2\nyou get 2024-02-29 instead.\n\nShifting to invalid date by month will cause the date to moved\nbackwards until the date is valid.  E.g., if you shift by -6- with\ncount 1 (next June) from 2019-05-31, you get 2019-06-30.  With count 2\nyou get 2020-06-30.\n\nThis library is grown out of frustration that it is tedious to have a\nshell script or program to get a datetime like \"the next 6pm from now\"\nor \"the next 3rd of any month from two days ago\".  With this module\nthey can be specified like \"+1x18:00:00.0\" and \"-2day +1x--3\"\nrespectively.  In the expected use cases, counts are small numbers.\nSo the library is not always efficient (at times we just loop \"count\"\ntimes to step forward or backward).  Whenever it is simple to do so,\nthe implementation just forward to relativedelta, in which case they\nare more efficient.\n\nAt present the program does not handle timezone and daylight saving.\nThis is bacause the author lives at a place where no daylight saving\nis observed.  Contributions are welcome.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isaacto/datec", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datec", "package_url": "https://pypi.org/project/datec/", "platform": "", "project_url": "https://pypi.org/project/datec/", "project_urls": {"Homepage": "https://github.com/isaacto/datec"}, "release_url": "https://pypi.org/project/datec/0.1/", "requires_dist": ["python-dateutil"], "requires_python": "", "summary": "Date Command", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Date command: A command-based date computation engine</h1>\n<p>datec allows you to use \"date commands\" to modify datetime's by adding\nto them, like datetime.datetime.now() + Period(2, 'week').</p>\n<p>A date command can be parsed from string using the parse() function,\nwhich create a command from a string representation.  This forms the\nbasis of the datec command, which is a command-line program to output\ndatetime after applying date commands.  In general the date\nrepresentation is NxYYYY-mm-ddTHH:MM:SS.ffffff, where unspecified\nparts are omitted leaving the symbols intact, like \"2x-2-29T3::.\" (see\nthe following for the meaning).  If fractional part is not specified\nthe \".\" may be omitted, if all time parts are not specified the \"T::.\"\ncan be omitted, if all date parts are not specified the \"--T\" can be\nomitted, and if N is 0 the x may be omitted.  By there are a couple\nother more formats like +3week and -2wed for shifting by period and\nweekday.</p>\n<p>Date commands are in two forms: period shifting commands and partial\ndatetime shifting commands.  The first type is more familiar: they\nlook like</p>\n<ul>\n<li>+2week (shift the datetime forward by 2 week)</li>\n<li>-1month (shift the datetime backward by 1 month)</li>\n</ul>\n<p>Period is one of year, month, week, day, hour, minute and second,\nrepresented by an object of the Period class.  Fractional numbers are\nacceptable except for year and month.  If shifting a period leads to\nan invalid date (e.g., shift backward 1 month from 2019-07-31), it\nmoves backwards the closest valid date (here, 2019-06-30).  In general\nthe parts finer than the shifted part is unaffected (e.g., shifting 1\nmonth from 2019-07-31 02:00 gives you 2019-06-30 02:00).</p>\n<p>Partial datetime shifting is less familiar.  It looks like:</p>\n<ul>\n<li>12:: (set the hour number to 12)</li>\n<li>+2x12:: (move forward to the second hour 12)</li>\n<li>+4x--31 (move forward to the fourth occurrence of day 31 of a month)</li>\n<li>-3x-02-29 (move backward to the third occurrence of February 29)</li>\n<li>wed (set to the Wednesday of the same week, week starts on Sunday)</li>\n<li>-3wed (move to the third Wednesday before the current datetime)</li>\n</ul>\n<p>They are represented by either a Weekday object or a PartialDate\nobject with a count.  A count of 0 means setting instead of shifting.\nOnly integer counts are acceptable.</p>\n<p>It is an error to set to an invalid date (e.g., --31 applied on\n2019-06-25 is an error).  The datetime parts which are specified must\nbe consecutive (it is an error to specify 12::05).  It is also an\nerror to shift for occurrence of partial date with year specified\n(e.g., \"+2x2019--\").</p>\n<p>On the other hand, shifting to an invalid date with day number\nspecified will shift more until a specified date is valid.  For\nexample, if you add -2-29 with count 1 to 2019-01-01, you end up with\n2020-02-29, because 2019-02-29 is not a valid date.  If the count is 2\nyou get 2024-02-29 instead.</p>\n<p>Shifting to invalid date by month will cause the date to moved\nbackwards until the date is valid.  E.g., if you shift by -6- with\ncount 1 (next June) from 2019-05-31, you get 2019-06-30.  With count 2\nyou get 2020-06-30.</p>\n<p>This library is grown out of frustration that it is tedious to have a\nshell script or program to get a datetime like \"the next 6pm from now\"\nor \"the next 3rd of any month from two days ago\".  With this module\nthey can be specified like \"+1x18:00:00.0\" and \"-2day +1x--3\"\nrespectively.  In the expected use cases, counts are small numbers.\nSo the library is not always efficient (at times we just loop \"count\"\ntimes to step forward or backward).  Whenever it is simple to do so,\nthe implementation just forward to relativedelta, in which case they\nare more efficient.</p>\n<p>At present the program does not handle timezone and daylight saving.\nThis is bacause the author lives at a place where no daylight saving\nis observed.  Contributions are welcome.</p>\n\n          </div>"}, "last_serial": 5577374, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fbc4f3ec07ecddd1301b9d445b371ce2", "sha256": "1640b9490ac48535c84bd88c96ad033e78e4f2ea2696a268ce879e68710b4d84"}, "downloads": -1, "filename": "datec-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fbc4f3ec07ecddd1301b9d445b371ce2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9486, "upload_time": "2019-07-24T12:27:50", "upload_time_iso_8601": "2019-07-24T12:27:50.282959Z", "url": "https://files.pythonhosted.org/packages/db/f0/00484fd60a796804ea3a5819f871b4171b5fe3bdb8ef5a9c7eda283818e9/datec-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc37935a11c7831dbb73011294a73abc", "sha256": "7c2694d12688353983bf702f38e7f60d42992f568386f20d6405d57bd83fe847"}, "downloads": -1, "filename": "datec-0.1.tar.gz", "has_sig": false, "md5_digest": "cc37935a11c7831dbb73011294a73abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6651, "upload_time": "2019-07-24T12:27:52", "upload_time_iso_8601": "2019-07-24T12:27:52.797227Z", "url": "https://files.pythonhosted.org/packages/59/04/9e4900e7b5160360e834e9ea3e2541e4a3a23a64a1f77a88dde483403626/datec-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fbc4f3ec07ecddd1301b9d445b371ce2", "sha256": "1640b9490ac48535c84bd88c96ad033e78e4f2ea2696a268ce879e68710b4d84"}, "downloads": -1, "filename": "datec-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fbc4f3ec07ecddd1301b9d445b371ce2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9486, "upload_time": "2019-07-24T12:27:50", "upload_time_iso_8601": "2019-07-24T12:27:50.282959Z", "url": "https://files.pythonhosted.org/packages/db/f0/00484fd60a796804ea3a5819f871b4171b5fe3bdb8ef5a9c7eda283818e9/datec-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc37935a11c7831dbb73011294a73abc", "sha256": "7c2694d12688353983bf702f38e7f60d42992f568386f20d6405d57bd83fe847"}, "downloads": -1, "filename": "datec-0.1.tar.gz", "has_sig": false, "md5_digest": "cc37935a11c7831dbb73011294a73abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6651, "upload_time": "2019-07-24T12:27:52", "upload_time_iso_8601": "2019-07-24T12:27:52.797227Z", "url": "https://files.pythonhosted.org/packages/59/04/9e4900e7b5160360e834e9ea3e2541e4a3a23a64a1f77a88dde483403626/datec-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:06 2020"}