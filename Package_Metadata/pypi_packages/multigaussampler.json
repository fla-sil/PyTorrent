{"info": {"author": "Lucio Anderlini", "author_email": "Lucio.Anderlini@fi.infn.it", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Multi-Gaussian Sampling \n\nThe parametrization of conditional probability density function plays a crucial \nrole in the simulations used to produce quickly large samples of data emulating \nreal-life datasets. \n\nA very simple technique is based on the explicit modelling of the probability \ndensity function of the target dataset as a function of the conditions through \nthe sum of kernel functions. \n\nThe package`multigaussampler` offers a simple Python3 implementation of this \nsimple algorithm. The model of the `pdf` is obtained through a maximum \nlikelihood fit of a probability density function obtained as sum of \nGaussians, optimized using the TensorFlow implementation of the Adam optimizer. \n\nThe sampling of the `pdf` is also implemented in TensorFlow to provide \nefficient sampling on both CPU and GPU infrastructures. \n\n### Example code \nThe code snippet below trains a sampler on a random dataset and generates\na random sample of y variables on top of the same X variables used for training.\n```\nimport numpy as np\n\n## Generate a random dataset as an example\nnSamples = 1000 \nX = np.random.uniform ( -20, 10,  (nSamples,4)).astype (np.float32) \ny = np.random.uniform ( 0, 1,     (nSamples,2)).astype (np.float32) \n\n#from multigaussampler import MGSampler\n## Creates and configure the MGSampler object\ngp = MGSampler(X,y) \n\n## Train the MGSampler on the training dataset\nfrom tqdm import trange\nprogress_bar = trange ( 100 )\nfor iEpoch in progress_bar:\n  l = gp.train ( X,y ) \n  progress_bar.set_description ( \"Loss: %.1f \" % l ) \n\n## Sample the obtained parametrization\ngp.sample (X) \n```\n\n### Author\nLucio Anderlini (Istituto Nazionale di Fisica Nucleare) \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/landerlini/multigaussampler", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multigaussampler", "package_url": "https://pypi.org/project/multigaussampler/", "platform": "", "project_url": "https://pypi.org/project/multigaussampler/", "project_urls": {"Homepage": "https://github.com/landerlini/multigaussampler"}, "release_url": "https://pypi.org/project/multigaussampler/0.1.1/", "requires_dist": ["tensorflow (==2.1.0)", "FastQuantileLayer"], "requires_python": "", "summary": "Sampling from a Maximum-Likelihood fitted Multi-Gaussian distribution in TensorFlow 2.1", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Multi-Gaussian Sampling</h1>\n<p>The parametrization of conditional probability density function plays a crucial\nrole in the simulations used to produce quickly large samples of data emulating\nreal-life datasets.</p>\n<p>A very simple technique is based on the explicit modelling of the probability\ndensity function of the target dataset as a function of the conditions through\nthe sum of kernel functions.</p>\n<p>The package<code>multigaussampler</code> offers a simple Python3 implementation of this\nsimple algorithm. The model of the <code>pdf</code> is obtained through a maximum\nlikelihood fit of a probability density function obtained as sum of\nGaussians, optimized using the TensorFlow implementation of the Adam optimizer.</p>\n<p>The sampling of the <code>pdf</code> is also implemented in TensorFlow to provide\nefficient sampling on both CPU and GPU infrastructures.</p>\n<h3>Example code</h3>\n<p>The code snippet below trains a sampler on a random dataset and generates\na random sample of y variables on top of the same X variables used for training.</p>\n<pre><code>import numpy as np\n\n## Generate a random dataset as an example\nnSamples = 1000 \nX = np.random.uniform ( -20, 10,  (nSamples,4)).astype (np.float32) \ny = np.random.uniform ( 0, 1,     (nSamples,2)).astype (np.float32) \n\n#from multigaussampler import MGSampler\n## Creates and configure the MGSampler object\ngp = MGSampler(X,y) \n\n## Train the MGSampler on the training dataset\nfrom tqdm import trange\nprogress_bar = trange ( 100 )\nfor iEpoch in progress_bar:\n  l = gp.train ( X,y ) \n  progress_bar.set_description ( \"Loss: %.1f \" % l ) \n\n## Sample the obtained parametrization\ngp.sample (X) \n</code></pre>\n<h3>Author</h3>\n<p>Lucio Anderlini (Istituto Nazionale di Fisica Nucleare)</p>\n\n          </div>"}, "last_serial": 6942564, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "95217bab0d43c28411226f5918dcf2f8", "sha256": "ff0cd93209a2ef56240de097b98960fcdf4bd754cfa650675a4812aa1912db73"}, "downloads": -1, "filename": "multigaussampler-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95217bab0d43c28411226f5918dcf2f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5216, "upload_time": "2020-04-03T11:00:52", "upload_time_iso_8601": "2020-04-03T11:00:52.731065Z", "url": "https://files.pythonhosted.org/packages/70/7c/5ceb7da75eedb61beb72783c462d819a75f3bc19cec4704a294255e089e4/multigaussampler-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "542add0f1cc300cd6a470be5b73131c8", "sha256": "36c49b55629d269539a1413bdf28ff4532ce68a38e2118c3fa2acb4a60e3403a"}, "downloads": -1, "filename": "multigaussampler-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "542add0f1cc300cd6a470be5b73131c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5962, "upload_time": "2020-04-03T11:02:53", "upload_time_iso_8601": "2020-04-03T11:02:53.118909Z", "url": "https://files.pythonhosted.org/packages/fb/72/819ffefa7683d32c61908fed7b6af4778e007dba1479665376fd878a0019/multigaussampler-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "542add0f1cc300cd6a470be5b73131c8", "sha256": "36c49b55629d269539a1413bdf28ff4532ce68a38e2118c3fa2acb4a60e3403a"}, "downloads": -1, "filename": "multigaussampler-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "542add0f1cc300cd6a470be5b73131c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5962, "upload_time": "2020-04-03T11:02:53", "upload_time_iso_8601": "2020-04-03T11:02:53.118909Z", "url": "https://files.pythonhosted.org/packages/fb/72/819ffefa7683d32c61908fed7b6af4778e007dba1479665376fd878a0019/multigaussampler-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:50:26 2020"}