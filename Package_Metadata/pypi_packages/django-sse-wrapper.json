{"info": {"author": "Germano Fronza", "author_email": "germano.inf@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Django SSE Wrapper\n==================\n\nDjango SSE wrapper is an easy way to implement Server-Sent Events in a Django application.\nYou can find details about SSE at http://www.html5rocks.com/en/tutorials/eventsource/basics/\n\nInstallation\n------------\n\nInstalling from PyPI::\n\n    $ pip install django-sse-wrapper\n\n\nUsage\n-----\n\nDjango SSE Wrapper exposes a view called ``EventStreamView`` that implements the SSE logic.\nIn your ``urls.py`` you will specify a pattern like:\n\n.. code-block:: python\n\n    from django.conf.urls import patterns, url\n\n    from sse_wrapper.views import EventStreamView\n\n\n    urlpatterns = patterns(\n        '',\n        url(r'^an-event-stream/$',\n            EventStreamView.as_view(channel='some-channel-name'),\n            name='an_event_stream'),\n    )\n\nYou can also specify a channel extension. This may be useful, for example, when you have an event stream called course_state_stream, but that needs to differ from one course to another (by course_id, for example). The url pattern would look like:\n\n.. code-block:: python\n\n    from django.conf.urls import patterns, url\n\n    from sse_wrapper.views import EventStreamView\n\n\n    urlpatterns = patterns(\n        '',\n        url(r'^course-state-stream/(?P<channel_extension>[\\w]+)/$',\n            EventStreamView.as_view(channel='course-state'),\n            name='course_state_stream'),\n    )\n\n\nBrokers\n-------\n\nFor now, I only support two backend brokers: Memory (testing purpose only) and Redis. Soon I'll be adding support to RabbitMQ, ZeroMQ, and others.\n\nIn your settings.py you must specify the broker and its properties:\n\n.. code-block:: python\n\n    SSE_BACKEND_CLASS = 'sse_wrapper.backends.redis_based.RedisBasedBackend'\n    SSE_BACKEND_CONNECTION_SETTINGS = {\n        'host': 'localhost',\n        'port': 6379,\n        'db': 0,\n    }\n\n\nProduction Environment Notes\n----------------------------\n\nBecause Server-Sent Events are streams of data, they require long-lived connections. You\u2019ll want to use a server can handle large numbers of simultaneous connections. I strongly recomend you to use some gevent WSGI server.\n\n\nContributing\n------------\n\nInstall `Vagrant <http://www.vagrantup.com/>`_ in order to run the example app and test the code.\n\n\nLicense\n-------\nBSD License\n\nNote: this project is based on `django-sse <https://github.com/niwibe/django-sse>`_ written by `niwibe <https://github.com/niwibe>`_.\nThe reason I started a new project instead of forking is that I decided to change the whole design of the code. I like the idea of omitting the broker from the app code, this way when you decide to change from one broker to another, you just have to change your settings.py.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gfronza/django-sse-wrapper", "keywords": "django,sse,xhr,polling,redis", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-sse-wrapper", "package_url": "https://pypi.org/project/django-sse-wrapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-sse-wrapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gfronza/django-sse-wrapper"}, "release_url": "https://pypi.org/project/django-sse-wrapper/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "A simple wrapper of the sse python implementation for django", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django SSE wrapper is an easy way to implement Server-Sent Events in a Django application.\nYou can find details about SSE at <a href=\"http://www.html5rocks.com/en/tutorials/eventsource/basics/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/eventsource/basics/</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing from PyPI:</p>\n<pre>$ pip install django-sse-wrapper\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Django SSE Wrapper exposes a view called <tt>EventStreamView</tt> that implements the SSE logic.\nIn your <tt>urls.py</tt> you will specify a pattern like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">patterns</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sse_wrapper.views</span> <span class=\"kn\">import</span> <span class=\"n\">EventStreamView</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^an-event-stream/$'</span><span class=\"p\">,</span>\n        <span class=\"n\">EventStreamView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s1\">'some-channel-name'</span><span class=\"p\">),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'an_event_stream'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can also specify a channel extension. This may be useful, for example, when you have an event stream called course_state_stream, but that needs to differ from one course to another (by course_id, for example). The url pattern would look like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">patterns</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sse_wrapper.views</span> <span class=\"kn\">import</span> <span class=\"n\">EventStreamView</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^course-state-stream/(?P&lt;channel_extension&gt;[\\w]+)/$'</span><span class=\"p\">,</span>\n        <span class=\"n\">EventStreamView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s1\">'course-state'</span><span class=\"p\">),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'course_state_stream'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"brokers\">\n<h2>Brokers</h2>\n<p>For now, I only support two backend brokers: Memory (testing purpose only) and Redis. Soon I\u2019ll be adding support to RabbitMQ, ZeroMQ, and others.</p>\n<p>In your settings.py you must specify the broker and its properties:</p>\n<pre><span class=\"n\">SSE_BACKEND_CLASS</span> <span class=\"o\">=</span> <span class=\"s1\">'sse_wrapper.backends.redis_based.RedisBasedBackend'</span>\n<span class=\"n\">SSE_BACKEND_CONNECTION_SETTINGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>\n    <span class=\"s1\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"production-environment-notes\">\n<h2>Production Environment Notes</h2>\n<p>Because Server-Sent Events are streams of data, they require long-lived connections. You\u2019ll want to use a server can handle large numbers of simultaneous connections. I strongly recomend you to use some gevent WSGI server.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Install <a href=\"http://www.vagrantup.com/\" rel=\"nofollow\">Vagrant</a> in order to run the example app and test the code.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD License</p>\n<p>Note: this project is based on <a href=\"https://github.com/niwibe/django-sse\" rel=\"nofollow\">django-sse</a> written by <a href=\"https://github.com/niwibe\" rel=\"nofollow\">niwibe</a>.\nThe reason I started a new project instead of forking is that I decided to change the whole design of the code. I like the idea of omitting the broker from the app code, this way when you decide to change from one broker to another, you just have to change your settings.py.</p>\n</div>\n\n          </div>"}, "last_serial": 1541304, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "fd8f869cb7e7d1a8a5db8b2af02f2d7e", "sha256": "d5d55f2faa7c50bb7bc7ffe44d35a514680cb9746635bca3c2c4e645cf9108a7"}, "downloads": -1, "filename": "django-sse-wrapper-0.0.2.tar.gz", "has_sig": false, "md5_digest": "fd8f869cb7e7d1a8a5db8b2af02f2d7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4364, "upload_time": "2013-06-08T00:45:18", "upload_time_iso_8601": "2013-06-08T00:45:18.615644Z", "url": "https://files.pythonhosted.org/packages/21/21/c569cc77837a80d3aed818d45c6264f9c2c353610891b46f5de23032b7ec/django-sse-wrapper-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cae572439aab9597ac5bd7f135736c35", "sha256": "49086c66298902ff13b1de5ca2d701726ce7c13b9ef85a36ad55fb295bc82b44"}, "downloads": -1, "filename": "django-sse-wrapper-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cae572439aab9597ac5bd7f135736c35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4334, "upload_time": "2013-11-19T11:16:27", "upload_time_iso_8601": "2013-11-19T11:16:27.513726Z", "url": "https://files.pythonhosted.org/packages/10/5a/ed29e73baf4c42d80000c66001de4bdf6e887b58da119271c7b079430b43/django-sse-wrapper-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b3f148e26be40d17446e4b0911f103e2", "sha256": "d9111a575b19fa622299b231993c34207835bd43895fe409ef1bf8bcd5332a78"}, "downloads": -1, "filename": "django-sse-wrapper-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b3f148e26be40d17446e4b0911f103e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4547, "upload_time": "2015-05-11T00:14:57", "upload_time_iso_8601": "2015-05-11T00:14:57.764334Z", "url": "https://files.pythonhosted.org/packages/7d/13/222d6ab40a1dde6d94c49bf9b2b6dfab5e62d5b509365ea3359ebf718ed1/django-sse-wrapper-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3f148e26be40d17446e4b0911f103e2", "sha256": "d9111a575b19fa622299b231993c34207835bd43895fe409ef1bf8bcd5332a78"}, "downloads": -1, "filename": "django-sse-wrapper-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b3f148e26be40d17446e4b0911f103e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4547, "upload_time": "2015-05-11T00:14:57", "upload_time_iso_8601": "2015-05-11T00:14:57.764334Z", "url": "https://files.pythonhosted.org/packages/7d/13/222d6ab40a1dde6d94c49bf9b2b6dfab5e62d5b509365ea3359ebf718ed1/django-sse-wrapper-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:00 2020"}