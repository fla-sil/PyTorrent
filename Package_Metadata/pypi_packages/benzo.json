{"info": {"author": "Adam Coddington", "author_email": "me@adamcoddington.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Benzo\n=====\n\nHand-craft your artisinal REST requests more easily.\n\nDo you find yourself hand-crafting REST requests by opening up a python,\nruby, or javascript repl, or hand-building a curl request?  Do you find\nthe process of remembering each service's required headers, request format\nand authentication rules terribly tedious?  This library is for you.\n\nBenzo makes the process of building and iterating on common request types\neasy by providing a few features:\n\n* Templatized requests: Both generic (json, yaml, or form-encoded) and\n  service-specific templatized requests make it really easy for you to\n  define the content you'd like to send.\n* Simple and intuitive creating of requests.  Your request's contents\n  and properties (like URL, request method, and headers) are displayed\n  in your default editor, and you can add, alter, or remove paramters\n  as you wish.\n* Separation of the API payload from the editor format. Although the API\n  you're interacting with might demand form-encoded, JSON, or yaml values,\n  you can edit your request using a variety of formats, and benzo will\n  convert it to the proper format when dispatching your request.\n* Saveable sessions.  Do you ever build a request perfectly the first\n  time?  Me neither.  Iterate quickly and easily on your request by\n  using benzo's sessions.  If first you do not succeed, just re-run\n  benzo in the same session, and the editor will be opened just as you\n  last left it.\n\nInstallation\n------------\n\nInstall using ``pip``:\n\n::\n\n   pip install benzo\n\nUsage\n-----\n\nYou can just run ``benzo``, but the real power comes when using either\nsessions or one of the built-in templates.\n\nSessions\n~~~~~~~~\n\nYou can save a session for your request by using the\n``--session=<path to file>`` command-line argument.  When using a session,\nfuture requests using the same session file will continue with not only\nthe same actual session (including any cookies the server you connected\nto previously sent down), but the editor when opened will show you exactly\nthe request you made previously.  This makes it very easy to iterate on\na particularly tricky request.\n\nTemplates\n~~~~~~~~~\n\nYou can use a request template by using the ``--template=<template name>``\ncommand-line argument.  Available templates include:\n\n* ``yaml``, ``json``, and ``form``: These are just generic REST request\n  templates that will build an API payload in the Yaml, JSON, or\n  form-encoded formats, respectively.\n* ``urbanairship.push``: This will provide you with a blank template you\n  can use for dispatching a Push using Urban Airship's API.\n\n  * This template also allows for a few configuration settings in your\n    ``~/.benzo`` file's ``[urbanairship]`` section:\n\n    * ``app_key``: The Urban Airship App Key to use by default for requests.\n    * ``master_secret``: The Urban Airship Master Secret to use by default\n      for requests.\n\n* ``twilio.sms``: This will provide you with a blank template you can use\n  for dispatching an SMS notification via Twilio's API.\n\n  * This template allows for a few configuration settings in your\n    ``~/.benzo`` file's ``[twilio]`` seciton:\n\n    * ``account_sid``: The Twilio Account SID to use by default for requests.\n    * ``auth_token``: The Twilio Auth Token to use by default for requests.\n\nEditing your Request\n~~~~~~~~~~~~~~~~~~~~\n\nParameters\n++++++++++\n\nRequest templates will generally contain a variety of parameters displayed\nat the top of your editor as comments.  Parameters usually will include\nthings like ``Method`` and ``URL``, but individual templates may provide\nadditional parameters.  These parameters can be edited to alter your\nrequest's behavior before being dispatched.\n\nHeaders\n+++++++\n\nRequest templates will usually contain a list of extra headers displayed\nnear the top of your editor as comments starting with the proword\n``[Header]``.  You can alter or add additional headers at-will; just make\nsure to keep the proword ``[Header]`` at the beginning of the line so\nbenzo knows which lines to interpret as headers.\n\nCancelling\n++++++++++\n\nIf you would like to abort making a request once your editor is opened,\njust delete all content from the file, save, and quit.\n\nConfiguration\n-------------\n\nYou do not need to provide any special configuration details, but you can\nfine-tune the behavior of benzo by adding configuration settings to your\n``~/.benzo`` file's ``[benzo]`` section.\n\n* ``default_editor_format``: Which format would you like to use for building\n  your API requests?  I personally recommend setting this to ``yaml`` for\n  more humane editing of API requests.  Default: ``json``.  \n* ``default_template``: If you do not specify a template to use, which template\n  should be used for generating your request?  Default: ``json``.\n\nNote that individual templates may define extra configuration settings;\nsee `Templates` for more information.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coddingtonbear/benzo", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "benzo", "package_url": "https://pypi.org/project/benzo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/benzo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/coddingtonbear/benzo"}, "release_url": "https://pypi.org/project/benzo/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Hand-curate your artisanal REST requests more easily.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Hand-craft your artisinal REST requests more easily.</p>\n<p>Do you find yourself hand-crafting REST requests by opening up a python,\nruby, or javascript repl, or hand-building a curl request?  Do you find\nthe process of remembering each service\u2019s required headers, request format\nand authentication rules terribly tedious?  This library is for you.</p>\n<p>Benzo makes the process of building and iterating on common request types\neasy by providing a few features:</p>\n<ul>\n<li>Templatized requests: Both generic (json, yaml, or form-encoded) and\nservice-specific templatized requests make it really easy for you to\ndefine the content you\u2019d like to send.</li>\n<li>Simple and intuitive creating of requests.  Your request\u2019s contents\nand properties (like URL, request method, and headers) are displayed\nin your default editor, and you can add, alter, or remove paramters\nas you wish.</li>\n<li>Separation of the API payload from the editor format. Although the API\nyou\u2019re interacting with might demand form-encoded, JSON, or yaml values,\nyou can edit your request using a variety of formats, and benzo will\nconvert it to the proper format when dispatching your request.</li>\n<li>Saveable sessions.  Do you ever build a request perfectly the first\ntime?  Me neither.  Iterate quickly and easily on your request by\nusing benzo\u2019s sessions.  If first you do not succeed, just re-run\nbenzo in the same session, and the editor will be opened just as you\nlast left it.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using <tt>pip</tt>:</p>\n<pre>pip install benzo\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You can just run <tt>benzo</tt>, but the real power comes when using either\nsessions or one of the built-in templates.</p>\n<div id=\"sessions\">\n<h3>Sessions</h3>\n<p>You can save a session for your request by using the\n<tt><span class=\"pre\">--session=&lt;path</span> to file&gt;</tt> command-line argument.  When using a session,\nfuture requests using the same session file will continue with not only\nthe same actual session (including any cookies the server you connected\nto previously sent down), but the editor when opened will show you exactly\nthe request you made previously.  This makes it very easy to iterate on\na particularly tricky request.</p>\n</div>\n<div id=\"templates\">\n<h3>Templates</h3>\n<p>You can use a request template by using the <tt><span class=\"pre\">--template=&lt;template</span> name&gt;</tt>\ncommand-line argument.  Available templates include:</p>\n<ul>\n<li><tt>yaml</tt>, <tt>json</tt>, and <tt>form</tt>: These are just generic REST request\ntemplates that will build an API payload in the Yaml, JSON, or\nform-encoded formats, respectively.</li>\n<li><tt>urbanairship.push</tt>: This will provide you with a blank template you\ncan use for dispatching a Push using Urban Airship\u2019s API.<ul>\n<li>This template also allows for a few configuration settings in your\n<tt><span class=\"pre\">~/.benzo</span></tt> file\u2019s <tt>[urbanairship]</tt> section:<ul>\n<li><tt>app_key</tt>: The Urban Airship App Key to use by default for requests.</li>\n<li><tt>master_secret</tt>: The Urban Airship Master Secret to use by default\nfor requests.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><tt>twilio.sms</tt>: This will provide you with a blank template you can use\nfor dispatching an SMS notification via Twilio\u2019s API.<ul>\n<li>This template allows for a few configuration settings in your\n<tt><span class=\"pre\">~/.benzo</span></tt> file\u2019s <tt>[twilio]</tt> seciton:<ul>\n<li><tt>account_sid</tt>: The Twilio Account SID to use by default for requests.</li>\n<li><tt>auth_token</tt>: The Twilio Auth Token to use by default for requests.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"editing-your-request\">\n<h3>Editing your Request</h3>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<p>Request templates will generally contain a variety of parameters displayed\nat the top of your editor as comments.  Parameters usually will include\nthings like <tt>Method</tt> and <tt>URL</tt>, but individual templates may provide\nadditional parameters.  These parameters can be edited to alter your\nrequest\u2019s behavior before being dispatched.</p>\n</div>\n<div id=\"headers\">\n<h4>Headers</h4>\n<p>Request templates will usually contain a list of extra headers displayed\nnear the top of your editor as comments starting with the proword\n<tt>[Header]</tt>.  You can alter or add additional headers at-will; just make\nsure to keep the proword <tt>[Header]</tt> at the beginning of the line so\nbenzo knows which lines to interpret as headers.</p>\n</div>\n<div id=\"cancelling\">\n<h4>Cancelling</h4>\n<p>If you would like to abort making a request once your editor is opened,\njust delete all content from the file, save, and quit.</p>\n</div>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>You do not need to provide any special configuration details, but you can\nfine-tune the behavior of benzo by adding configuration settings to your\n<tt><span class=\"pre\">~/.benzo</span></tt> file\u2019s <tt>[benzo]</tt> section.</p>\n<ul>\n<li><tt>default_editor_format</tt>: Which format would you like to use for building\nyour API requests?  I personally recommend setting this to <tt>yaml</tt> for\nmore humane editing of API requests.  Default: <tt>json</tt>.</li>\n<li><tt>default_template</tt>: If you do not specify a template to use, which template\nshould be used for generating your request?  Default: <tt>json</tt>.</li>\n</ul>\n<p>Note that individual templates may define extra configuration settings;\nsee <cite>Templates</cite> for more information.</p>\n</div>\n\n          </div>"}, "last_serial": 2020073, "releases": {"0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "e495924b4deeeba9ef682a51896caa9a", "sha256": "eee39e03ed04947265c2ee47aa9d737ea04224012adb56585418986afd66d174"}, "downloads": -1, "filename": "benzo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e495924b4deeeba9ef682a51896caa9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8331, "upload_time": "2016-03-22T07:08:32", "upload_time_iso_8601": "2016-03-22T07:08:32.746925Z", "url": "https://files.pythonhosted.org/packages/a2/cc/0332ce21a0514403fb90cf2021fe4a978ec2718e6cef61066ad32216e6a1/benzo-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e495924b4deeeba9ef682a51896caa9a", "sha256": "eee39e03ed04947265c2ee47aa9d737ea04224012adb56585418986afd66d174"}, "downloads": -1, "filename": "benzo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e495924b4deeeba9ef682a51896caa9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8331, "upload_time": "2016-03-22T07:08:32", "upload_time_iso_8601": "2016-03-22T07:08:32.746925Z", "url": "https://files.pythonhosted.org/packages/a2/cc/0332ce21a0514403fb90cf2021fe4a978ec2718e6cef61066ad32216e6a1/benzo-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:47 2020"}