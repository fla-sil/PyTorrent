{"info": {"author": "Samuel Vanderwaal", "author_email": "samuel.vanderwaal@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# fat-py\n\nPython library for the [Factom Asset Token](https://github.com/DBGrow/FAT) standard. Currently supports FAT-0 and FAT-1 token standards.\n\n## Installation\n\nThe easiest way to install is with `pip` or `pipenv` from PyPi:\n\n`pipenv install fat`\n\n\nYou can also clone the repo and build it from source. The recommended way to do this is with `pipenv`:\n\n`git clone git@github.com:samuelvanderwaal/fat-py.git`\n\n`cd fat-py`\n\nInstall requirements from the Pipfile:\n\n`pipenv install`\n\nActivate the virtual environment:\n\n`pipenv shell`\n\nSee `pipenv`'s [documentation](https://pipenv-fork.readthedocs.io/en/latest/basics.html) for more usage details.\n\n## Quick Start\n\nIssue a new token:\n\n```python\nfrom fat.fat0 import Issuance\nfrom factom import Factomd\n\nfactomd = Factomd()\n\nissuance = Issuance(\n    token_id=\"mytoken\",\n    issuer_id=\"8888...\",\n    supply=-1,\n    symbol=\"tkn1\",\n    ec_address=\"EC3...\",\n    ec_priv_key=\"ES3...\",\n    server_priv_key=\"sk1...\"\n)\n\nissuance.issue_token(factomd)\n```\n\n\n\nBuild and submit a token transaction:\n\n```python\nfrom fat.fat0 import Transaction\nfrom fat import FATd\n\nfatd = FATd()\n\naddress1 = \"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"\nprivate_fct_key1 = \"Fs...\"\naddress2 = \"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"\nchain_id = \"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"\n\ntx1 = Transaction()\ntx1.add_input(address1, 100)\ntx1.add_output(address2, 100)\ntx1.add_signer(private_fct_key1)\ntx1.set_chain_id(chain_id)\ntx1.sign()\n\nfatd.submit_transaction(tx1)\n```\n\n\n\n\n\n## Usage\n\nThe two main ways to use this library are the Issuance and Transaction classes. In addition, the library exposes all the fatd RPC methods which can be accessed through the FATd class.\n\n### Issuance\n\nThe Issuance class supports object initialization through multiple methods:\n\nIndividual property assignment:\n\n```Python\nissuance = Issuance()\nissuance.token_id = \"mytoken\"\nissuance.issuer_id = \"888888a37cbf303c0bfc8d0cc7e77885c42000b757bd4d9e659de994477a0904\"\nissuance.supply = -1\nissuance.symbol = \"tkn1\"\nissuance.ec_address = \"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\"\nissuance.ec_priv_key = \"ES...\"\nissuance.server_priv_key = \"sk1...\"\n```\n\nPassing all values as part of the constructor:\n\n```python\nissuance = Issuance(\n\ttoken_id=\"mytoken\",\n    issuer_id=\"8888...\",\n    supply=-1,\n    symbol=\"tkn1\",\n    ec_address=\"EC3...\",\n    ec_priv_key=\"ES3...\",\n    server_priv_key=\"sk1...\"\n)\n```\n\nOnce the issuance object has all the required values, the `issue_token()` method can be used to perform all the necessary `factomd` calls to issue and initialize a new token. \n\n```Python\nfrom fat.fat0 import Issuance\nfrom factom import Factomd\n\nfactomd = Factomd()\n\nissuance = Issuance(\n\ttoken_id=\"mytoken\",\n    issuer_id=\"8888...\",\n    supply=-1,\n    symbol=\"tkn1\",\n    ec_address=\"EC3...\",\n    ec_priv_key=\"ES3...\",\n    server_priv_key=\"sk1...\"\n)\n\nissuance.issue_token(factomd)\n\n```\n\nIssuance supports both the Python native `str` type and key objects from the `factom_keys` library for EC and server ID keys. When strings are passed to it, internally it uses the `factom_keys` library to validate the key and address values. \n\n```python\n...\nfrom factom_keys.ec import ECAddress\n\nec_address1 = ECAddress(key_string=\"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\")\nec_address2 = \"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\"\nissuance = Issuance()\n...\nissuance.ec_address = ec_address1\n# or\nissuance.ec_address = ec_address2\n```\n\nFAT-0 and FAT-1 issuance has the same usage, just import the specific Issuance class needed. Use import aliases if both are required simultaneously:\n\n```python\nfrom fat.fat0 import Issuance as FAT0Issuance\nfrom fat.fat1 import Issuance as FAT1Issuance\n```\n\n\n\n### Transaction\n\nThe Transaction class also supports multiple methods of initialization:\n\nPassing all values through the constructor:\n\n```python\ntx1 = Transaction(\n\tinputs={\"FA...\": 100, \"FA3...\": 50},\n    outputs={\"FA3Z...\": 150},\n    chain_id=\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\",\n    signers=[\"FS...\", \"Fs...\"]\n)\ntx1.sign()\n```\n\nAdding values individually:\n\n```python\ntx1 = Transaction()\ntx1.add_input(coinbase_address, 100)\ntx1.add_output(address1, 50)\ntx1.add_output(address2, 50)\ntx1.add_signer(issuer_signer)\ntx1.set_chain_id(chain_id)\ntx1.sign()\n```\n\nBuilder method:\n\n```python\ntx1 = Transaction()\n(\n tx1.add_input(coinbase_address, 100)\n    .add_output(address1, 50)\n    .add_output(address2, 50)\n    .add_signer(issuer_signer)\n    .set_chain_id(chain_id)\n    .sign()\n)\n```\n\nTransaction supports both the native Python `str` type and key objects from the `factom_keys` library for Factoid private keys, Factoid addresses and for server ID private keys.\n\n```Python\n...\nfrom factom_keys.ec import FactoidAddress, FactoidPrivateKey\nfrom factom_keys.serverid import ServerIDPrivateKey\n\naddress1 = FactoidAddress(address_string=\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\")\naddress2 = \"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"\nfct_priv_key1 = FactoidPrivateKey(key_string=\"Fs...\")\nfct_priv_key2 = \"Fs...\"\n\ntx = Transaction()\ntx.add_input(address1, 50)\ntx.add_signer(fct_priv_key1)\n# or\ntx.add_input(address2, 50)\ntx.add_signer(fct_priv_key2)\n```\n\n\n\nOnce a transaction has been built and signed, it can be passed to the `submit_transaction()` method on FATd for submission to the blockchain. \n\nFAT-0:\n\n```python\nfrom fat.fat0 import Transaction\nfrom fat import FATd\n\nfatd = FATd()\n\naddress1 = \"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"\nprivate_fct_key1 = \"Fs...\"\naddress2 = \"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"\nchain_id = \"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"\n\ntx1 = Transaction()\ntx1.add_input(address1, 100)\ntx1.add_output(address2, 100)\ntx1.add_signer(private_fct_key1)\ntx1.set_chain_id(chain_id)\ntx1.sign()\n\nfatd.submit_transaction(tx1)\n```\n\nFAT-1:\n\n```python\nfrom fat.fat1 import Transaction\nfrom fat import FATd\n\nfatd = FATd()\n\naddress1 = \"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"\nprivate_fct_key1 = \"Fs...\"\naddress2 = \"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"\nchain_id = \"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"\n\ntx1 = Transaction()\ntx1.add_input(address1, [1,3])\ntx1.add_output(address2, [1,3])\ntx1.add_signer(private_fct_key1)\ntx1.set_chain_id(chain_id)\ntx1.sign()\n\nfatd.submit_transaction(tx1)\n```\n\n\n\n### FATd RPC Methods\n\nAll FATd RPC and Daemon methods are exposed via the FATd class:\n\n```python\nfrom fat import FATd\n\nfatd= FATd()\n\nchain_id = \"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"\naddress = \"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"\n\nfatd.get_issuance(chain_id=chain_id)\nfad.get_balance(address, chain_id=chain_id)\nfatd.get_daemon_properties()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samuelvanderwaal/fat-py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fat", "package_url": "https://pypi.org/project/fat/", "platform": "", "project_url": "https://pypi.org/project/fat/", "project_urls": {"Homepage": "https://github.com/samuelvanderwaal/fat-py"}, "release_url": "https://pypi.org/project/fat/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A Python client library for the FAT protocol.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fat-py</h1>\n<p>Python library for the <a href=\"https://github.com/DBGrow/FAT\" rel=\"nofollow\">Factom Asset Token</a> standard. Currently supports FAT-0 and FAT-1 token standards.</p>\n<h2>Installation</h2>\n<p>The easiest way to install is with <code>pip</code> or <code>pipenv</code> from PyPi:</p>\n<p><code>pipenv install fat</code></p>\n<p>You can also clone the repo and build it from source. The recommended way to do this is with <code>pipenv</code>:</p>\n<p><code>git clone git@github.com:samuelvanderwaal/fat-py.git</code></p>\n<p><code>cd fat-py</code></p>\n<p>Install requirements from the Pipfile:</p>\n<p><code>pipenv install</code></p>\n<p>Activate the virtual environment:</p>\n<p><code>pipenv shell</code></p>\n<p>See <code>pipenv</code>'s <a href=\"https://pipenv-fork.readthedocs.io/en/latest/basics.html\" rel=\"nofollow\">documentation</a> for more usage details.</p>\n<h2>Quick Start</h2>\n<p>Issue a new token:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat0</span> <span class=\"kn\">import</span> <span class=\"n\">Issuance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factom</span> <span class=\"kn\">import</span> <span class=\"n\">Factomd</span>\n\n<span class=\"n\">factomd</span> <span class=\"o\">=</span> <span class=\"n\">Factomd</span><span class=\"p\">()</span>\n\n<span class=\"n\">issuance</span> <span class=\"o\">=</span> <span class=\"n\">Issuance</span><span class=\"p\">(</span>\n    <span class=\"n\">token_id</span><span class=\"o\">=</span><span class=\"s2\">\"mytoken\"</span><span class=\"p\">,</span>\n    <span class=\"n\">issuer_id</span><span class=\"o\">=</span><span class=\"s2\">\"8888...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">supply</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"tkn1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_address</span><span class=\"o\">=</span><span class=\"s2\">\"EC3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"ES3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">server_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"sk1...\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">issue_token</span><span class=\"p\">(</span><span class=\"n\">factomd</span><span class=\"p\">)</span>\n</pre>\n<p>Build and submit a token transaction:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat0</span> <span class=\"kn\">import</span> <span class=\"n\">Transaction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fat</span> <span class=\"kn\">import</span> <span class=\"n\">FATd</span>\n\n<span class=\"n\">fatd</span> <span class=\"o\">=</span> <span class=\"n\">FATd</span><span class=\"p\">()</span>\n\n<span class=\"n\">address1</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span>\n<span class=\"n\">private_fct_key1</span> <span class=\"o\">=</span> <span class=\"s2\">\"Fs...\"</span>\n<span class=\"n\">address2</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"</span>\n<span class=\"n\">chain_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"</span>\n\n<span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">private_fct_key1</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">set_chain_id</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n\n<span class=\"n\">fatd</span><span class=\"o\">.</span><span class=\"n\">submit_transaction</span><span class=\"p\">(</span><span class=\"n\">tx1</span><span class=\"p\">)</span>\n</pre>\n<h2>Usage</h2>\n<p>The two main ways to use this library are the Issuance and Transaction classes. In addition, the library exposes all the fatd RPC methods which can be accessed through the FATd class.</p>\n<h3>Issuance</h3>\n<p>The Issuance class supports object initialization through multiple methods:</p>\n<p>Individual property assignment:</p>\n<pre><span class=\"n\">issuance</span> <span class=\"o\">=</span> <span class=\"n\">Issuance</span><span class=\"p\">()</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">token_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"mytoken\"</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">issuer_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"888888a37cbf303c0bfc8d0cc7e77885c42000b757bd4d9e659de994477a0904\"</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">supply</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s2\">\"tkn1\"</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">ec_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\"</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">ec_priv_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"ES...\"</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">server_priv_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"sk1...\"</span>\n</pre>\n<p>Passing all values as part of the constructor:</p>\n<pre><span class=\"n\">issuance</span> <span class=\"o\">=</span> <span class=\"n\">Issuance</span><span class=\"p\">(</span>\n\t<span class=\"n\">token_id</span><span class=\"o\">=</span><span class=\"s2\">\"mytoken\"</span><span class=\"p\">,</span>\n    <span class=\"n\">issuer_id</span><span class=\"o\">=</span><span class=\"s2\">\"8888...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">supply</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"tkn1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_address</span><span class=\"o\">=</span><span class=\"s2\">\"EC3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"ES3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">server_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"sk1...\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Once the issuance object has all the required values, the <code>issue_token()</code> method can be used to perform all the necessary <code>factomd</code> calls to issue and initialize a new token.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat0</span> <span class=\"kn\">import</span> <span class=\"n\">Issuance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factom</span> <span class=\"kn\">import</span> <span class=\"n\">Factomd</span>\n\n<span class=\"n\">factomd</span> <span class=\"o\">=</span> <span class=\"n\">Factomd</span><span class=\"p\">()</span>\n\n<span class=\"n\">issuance</span> <span class=\"o\">=</span> <span class=\"n\">Issuance</span><span class=\"p\">(</span>\n\t<span class=\"n\">token_id</span><span class=\"o\">=</span><span class=\"s2\">\"mytoken\"</span><span class=\"p\">,</span>\n    <span class=\"n\">issuer_id</span><span class=\"o\">=</span><span class=\"s2\">\"8888...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">supply</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"tkn1\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_address</span><span class=\"o\">=</span><span class=\"s2\">\"EC3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ec_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"ES3...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">server_priv_key</span><span class=\"o\">=</span><span class=\"s2\">\"sk1...\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">issue_token</span><span class=\"p\">(</span><span class=\"n\">factomd</span><span class=\"p\">)</span>\n</pre>\n<p>Issuance supports both the Python native <code>str</code> type and key objects from the <code>factom_keys</code> library for EC and server ID keys. When strings are passed to it, internally it uses the <code>factom_keys</code> library to validate the key and address values.</p>\n<pre><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factom_keys.ec</span> <span class=\"kn\">import</span> <span class=\"n\">ECAddress</span>\n\n<span class=\"n\">ec_address1</span> <span class=\"o\">=</span> <span class=\"n\">ECAddress</span><span class=\"p\">(</span><span class=\"n\">key_string</span><span class=\"o\">=</span><span class=\"s2\">\"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\"</span><span class=\"p\">)</span>\n<span class=\"n\">ec_address2</span> <span class=\"o\">=</span> <span class=\"s2\">\"EC3cQ1QnsE5rKWR1B5mzVHdTkAReK5kJwaQn5meXzU9wANyk7Aej\"</span>\n<span class=\"n\">issuance</span> <span class=\"o\">=</span> <span class=\"n\">Issuance</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">ec_address</span> <span class=\"o\">=</span> <span class=\"n\">ec_address1</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">issuance</span><span class=\"o\">.</span><span class=\"n\">ec_address</span> <span class=\"o\">=</span> <span class=\"n\">ec_address2</span>\n</pre>\n<p>FAT-0 and FAT-1 issuance has the same usage, just import the specific Issuance class needed. Use import aliases if both are required simultaneously:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat0</span> <span class=\"kn\">import</span> <span class=\"n\">Issuance</span> <span class=\"k\">as</span> <span class=\"n\">FAT0Issuance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fat.fat1</span> <span class=\"kn\">import</span> <span class=\"n\">Issuance</span> <span class=\"k\">as</span> <span class=\"n\">FAT1Issuance</span>\n</pre>\n<h3>Transaction</h3>\n<p>The Transaction class also supports multiple methods of initialization:</p>\n<p>Passing all values through the constructor:</p>\n<pre><span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">(</span>\n\t<span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"FA...\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s2\">\"FA3...\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">},</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"FA3Z...\"</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">},</span>\n    <span class=\"n\">chain_id</span><span class=\"o\">=</span><span class=\"s2\">\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"</span><span class=\"p\">,</span>\n    <span class=\"n\">signers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"FS...\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Fs...\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n</pre>\n<p>Adding values individually:</p>\n<pre><span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">coinbase_address</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">issuer_signer</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">set_chain_id</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n</pre>\n<p>Builder method:</p>\n<pre><span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"p\">(</span>\n <span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">coinbase_address</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">issuer_signer</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">set_chain_id</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Transaction supports both the native Python <code>str</code> type and key objects from the <code>factom_keys</code> library for Factoid private keys, Factoid addresses and for server ID private keys.</p>\n<pre><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factom_keys.ec</span> <span class=\"kn\">import</span> <span class=\"n\">FactoidAddress</span><span class=\"p\">,</span> <span class=\"n\">FactoidPrivateKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">factom_keys.serverid</span> <span class=\"kn\">import</span> <span class=\"n\">ServerIDPrivateKey</span>\n\n<span class=\"n\">address1</span> <span class=\"o\">=</span> <span class=\"n\">FactoidAddress</span><span class=\"p\">(</span><span class=\"n\">address_string</span><span class=\"o\">=</span><span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span><span class=\"p\">)</span>\n<span class=\"n\">address2</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span>\n<span class=\"n\">fct_priv_key1</span> <span class=\"o\">=</span> <span class=\"n\">FactoidPrivateKey</span><span class=\"p\">(</span><span class=\"n\">key_string</span><span class=\"o\">=</span><span class=\"s2\">\"Fs...\"</span><span class=\"p\">)</span>\n<span class=\"n\">fct_priv_key2</span> <span class=\"o\">=</span> <span class=\"s2\">\"Fs...\"</span>\n\n<span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">fct_priv_key1</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">fct_priv_key2</span><span class=\"p\">)</span>\n</pre>\n<p>Once a transaction has been built and signed, it can be passed to the <code>submit_transaction()</code> method on FATd for submission to the blockchain.</p>\n<p>FAT-0:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat0</span> <span class=\"kn\">import</span> <span class=\"n\">Transaction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fat</span> <span class=\"kn\">import</span> <span class=\"n\">FATd</span>\n\n<span class=\"n\">fatd</span> <span class=\"o\">=</span> <span class=\"n\">FATd</span><span class=\"p\">()</span>\n\n<span class=\"n\">address1</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span>\n<span class=\"n\">private_fct_key1</span> <span class=\"o\">=</span> <span class=\"s2\">\"Fs...\"</span>\n<span class=\"n\">address2</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"</span>\n<span class=\"n\">chain_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"</span>\n\n<span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">private_fct_key1</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">set_chain_id</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n\n<span class=\"n\">fatd</span><span class=\"o\">.</span><span class=\"n\">submit_transaction</span><span class=\"p\">(</span><span class=\"n\">tx1</span><span class=\"p\">)</span>\n</pre>\n<p>FAT-1:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat.fat1</span> <span class=\"kn\">import</span> <span class=\"n\">Transaction</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fat</span> <span class=\"kn\">import</span> <span class=\"n\">FATd</span>\n\n<span class=\"n\">fatd</span> <span class=\"o\">=</span> <span class=\"n\">FATd</span><span class=\"p\">()</span>\n\n<span class=\"n\">address1</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span>\n<span class=\"n\">private_fct_key1</span> <span class=\"o\">=</span> <span class=\"s2\">\"Fs...\"</span>\n<span class=\"n\">address2</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA3j68XNwKwvHXV2TKndxPpyCK3KrWTDyyfxzi8LwuM5XRuEmhy6\"</span>\n<span class=\"n\">chain_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"</span>\n\n<span class=\"n\">tx1</span> <span class=\"o\">=</span> <span class=\"n\">Transaction</span><span class=\"p\">()</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_input</span><span class=\"p\">(</span><span class=\"n\">address1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_output</span><span class=\"p\">(</span><span class=\"n\">address2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">add_signer</span><span class=\"p\">(</span><span class=\"n\">private_fct_key1</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">set_chain_id</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">tx1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">()</span>\n\n<span class=\"n\">fatd</span><span class=\"o\">.</span><span class=\"n\">submit_transaction</span><span class=\"p\">(</span><span class=\"n\">tx1</span><span class=\"p\">)</span>\n</pre>\n<h3>FATd RPC Methods</h3>\n<p>All FATd RPC and Daemon methods are exposed via the FATd class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fat</span> <span class=\"kn\">import</span> <span class=\"n\">FATd</span>\n\n<span class=\"n\">fatd</span><span class=\"o\">=</span> <span class=\"n\">FATd</span><span class=\"p\">()</span>\n\n<span class=\"n\">chain_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"a9d7791caffd852f8e3710e3c38f1ad1b056d4ecb2d4d54216581dfd0dac8edd\"</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"s2\">\"FA2gCmih3PaSYRVMt1jLkdG4Xpo2koebUpQ6FpRRnqw5FfTSN2vW\"</span>\n\n<span class=\"n\">fatd</span><span class=\"o\">.</span><span class=\"n\">get_issuance</span><span class=\"p\">(</span><span class=\"n\">chain_id</span><span class=\"o\">=</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">fad</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">chain_id</span><span class=\"o\">=</span><span class=\"n\">chain_id</span><span class=\"p\">)</span>\n<span class=\"n\">fatd</span><span class=\"o\">.</span><span class=\"n\">get_daemon_properties</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6165804, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5ca2ec90102520fcd73f1512c7619863", "sha256": "9f4183caf888ee4b33bd56cb9f9a54364526dc6072d3e8ce6a046c00fd738d03"}, "downloads": -1, "filename": "fat-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca2ec90102520fcd73f1512c7619863", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2099, "upload_time": "2019-08-28T20:06:30", "upload_time_iso_8601": "2019-08-28T20:06:30.180185Z", "url": "https://files.pythonhosted.org/packages/5c/c3/195a690daa6549c21f6fe4c94603eac5f37f123cac0a143a6ac10c9ac54d/fat-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dfa704f6e2286454239c675a4e4cda0", "sha256": "bc06d1f53afaa5c98e84ab43c98b0d3b9243072134973467faec7125d645cee5"}, "downloads": -1, "filename": "fat-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7dfa704f6e2286454239c675a4e4cda0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1003, "upload_time": "2019-08-28T20:06:33", "upload_time_iso_8601": "2019-08-28T20:06:33.962339Z", "url": "https://files.pythonhosted.org/packages/de/07/f705a3c5b1a039e11521cdedb278deeb3bc05d1d3565b0448509f73a36d9/fat-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "26940b8026f4391185a3276c460c721d", "sha256": "4241e46e8a4f9cb73e80fc8e618da010c10ece3e235a957b4042845841f647fe"}, "downloads": -1, "filename": "fat-0.1.0.tar.gz", "has_sig": false, "md5_digest": "26940b8026f4391185a3276c460c721d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16976, "upload_time": "2019-11-19T02:11:51", "upload_time_iso_8601": "2019-11-19T02:11:51.879517Z", "url": "https://files.pythonhosted.org/packages/6f/6a/e535edad4c881ee5729f7fedb3ec7ae6b96502ca62bc86002e8ff63cd57a/fat-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a4e0cd31a9b2d19ceb8cd6921ba5c3ee", "sha256": "903ab0fd052c73060bd93b2fac4e2b0c39767fe62c75eb738fbfc0d242c875da"}, "downloads": -1, "filename": "fat-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a4e0cd31a9b2d19ceb8cd6921ba5c3ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17063, "upload_time": "2019-11-19T02:47:54", "upload_time_iso_8601": "2019-11-19T02:47:54.268006Z", "url": "https://files.pythonhosted.org/packages/9e/48/7f6c82881d8ac29b0ac395f5e4bf694f67b495944800d920f67a93c104ab/fat-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7e41f5657736267a739b45578df972bf", "sha256": "6f0f0e4b4c41ac9d56285f1673ebed3f12c19ac1f59e94c225691186f44d4b8d"}, "downloads": -1, "filename": "fat-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7e41f5657736267a739b45578df972bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17029, "upload_time": "2019-11-20T00:20:25", "upload_time_iso_8601": "2019-11-20T00:20:25.472409Z", "url": "https://files.pythonhosted.org/packages/3e/f6/68b3bf6535866be04ee4b3de551be5786bb1eaba71d16ca739cee32221e6/fat-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e41f5657736267a739b45578df972bf", "sha256": "6f0f0e4b4c41ac9d56285f1673ebed3f12c19ac1f59e94c225691186f44d4b8d"}, "downloads": -1, "filename": "fat-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7e41f5657736267a739b45578df972bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17029, "upload_time": "2019-11-20T00:20:25", "upload_time_iso_8601": "2019-11-20T00:20:25.472409Z", "url": "https://files.pythonhosted.org/packages/3e/f6/68b3bf6535866be04ee4b3de551be5786bb1eaba71d16ca739cee32221e6/fat-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:21 2020"}