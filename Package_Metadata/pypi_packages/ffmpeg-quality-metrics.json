{"info": {"author": "Werner Robitza", "author_email": "werner.robitza@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Video"], "description": "FFmpeg Quality Metrics\n======================\n\n|PyPI version|\n\nSimple script for calculating quality metrics with FFmpeg.\n\nCurrently supports PSNR, SSIM and VMAF.\n\nAuthor: Werner Robitza werner.robitza@gmail.com\n\nContents:\n\n-  `Requirements <#requirements>`__\n-  `Installation <#installation>`__\n-  `Usage <#usage>`__\n-  `Running with Docker <#running-with-docker>`__\n-  `Output <#output>`__\n-  `License <#license>`__\n\n--------------\n\nRequirements\n------------\n\n-  Python 3.6\n-  FFmpeg:\n\n   -  download a static build from `their\n      website <http://ffmpeg.org/download.html>`__)\n   -  put the ``ffmpeg`` executable in your ``$PATH``\n\nOptionally, you may install FFmpeg with ``libvmaf`` support to run VMAF\nscore calculation:\n\n-  Install `Homebrew <https://brew.sh/>`__\n-  Install `this\n   tap <https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/>`__\n-  Run ``brew install ffmpeg --with-libvmaf``.\n\nInstallation\n------------\n\n::\n\n   pip install ffmpeg_quality_metrics\n\nOr clone this repository, then run the tool with\n``python -m ffmpeg_quality_metrics``\n\nUsage\n-----\n\nIn the simplest case, if you have a distorted (encoded, maybe scaled)\nversion and the reference:\n\n::\n\n   ffmpeg_quality_metrics distorted.mp4 reference.avi\n\nThe distorted file will be automatically scaled to the resolution of the\nreference.\n\nSee ``ffmpeg_quality_metrics -h``:\n\n::\n\n   usage: ffmpeg_quality_metrics [-h] [-n] [-v] [-ev] [-m MODEL_PATH] [-p]\n                                    [-dps]\n                                    [-of {json,csv}]\n                                    dist ref\n\n   positional arguments:\n     dist                  input file, distorted\n     ref                   input file, reference\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -n, --dry-run         Do not run command, just show what would be done\n                           (default: False)\n     -v, --verbose         Show verbose output (default: False)\n     -ev, --enable-vmaf    Enable VMAF computation; calculates VMAF as well as\n                           SSIM and PSNR (default: False)\n     -m MODEL_PATH, --model-path MODEL_PATH\n                           Set path to VMAF model file (.pkl) (default: None)\n     -p, --phone-model     Enable VMAF phone model (default: False)\n     -dp, --disable-psnr-ssim\n                           Disable PSNR/SSIM computation. Use VMAF to get YUV\n                           estimate. (default: False)\n     -s, --scaling-algorithm {fast_bilinear,bilinear,bicubic,experimental,neighbor,area,bicublin,gauss,sinc,lanczos,spline}\n                           Scaling algorithm for ffmpeg (default: bicubic)\n     -of {json,csv}, --output-format {json,csv}\n                           output in which format (default: json)\n\nRunning with Docker\n-------------------\n\nIf you don\u2019t want to deal with dependencies, build the image with\nDocker:\n\n::\n\n   docker build -t ffmpeg_quality_metrics .\n\nThis installs ``ffmpeg`` with all dependencies. You can then run the\ncontainer, which basically calls the Python script. To help you with\nmounting the volumes (since your videos are not stored in the\ncontainer), you can run a helper script:\n\n::\n\n   ./docker_run.sh\n\nCheck the output of the above command for more help.\n\nOutput\n------\n\nJSON or CSV, including individual fields for Y, U, V, and averages, as\nwell as frame numbers.\n\nJSON example:\n\n::\n\n   \u279c ffmpeg_quality_metrics test/dist-854x480.mkv test/ref-1280x720.mkv --enable-vmaf\n   {\n       \"vmaf\": [\n           {\n               \"adm2\": 0.70704,\n               \"motion2\": 0.0,\n               \"ms_ssim\": 0.89698,\n               \"psnr\": 18.58731,\n               \"ssim\": 0.92415,\n               \"vif_scale0\": 0.53962,\n               \"vif_scale1\": 0.71805,\n               \"vif_scale2\": 0.75205,\n               \"vif_scale3\": 0.77367,\n               \"vmaf\": 15.44212,\n               \"n\": 1\n           },\n           {\n               \"adm2\": 0.7064,\n               \"motion2\": 0.35975,\n               \"ms_ssim\": 0.89806,\n               \"psnr\": 18.60299,\n               \"ssim\": 0.9247,\n               \"vif_scale0\": 0.54025,\n               \"vif_scale1\": 0.71961,\n               \"vif_scale2\": 0.75369,\n               \"vif_scale3\": 0.77607,\n               \"vmaf\": 15.85038,\n               \"n\": 2\n           },\n           {\n               \"adm2\": 0.70505,\n               \"motion2\": 0.35975,\n               \"ms_ssim\": 0.89879,\n               \"psnr\": 18.6131,\n               \"ssim\": 0.92466,\n               \"vif_scale0\": 0.5391,\n               \"vif_scale1\": 0.71869,\n               \"vif_scale2\": 0.75344,\n               \"vif_scale3\": 0.77616,\n               \"vmaf\": 15.63546,\n               \"n\": 3\n           }\n       ],\n       \"psnr\": [\n           {\n               \"n\": 1,\n               \"mse_avg\": 536.71,\n               \"mse_y\": 900.22,\n               \"mse_u\": 234.48,\n               \"mse_v\": 475.43,\n               \"psnr_avg\": 20.83,\n               \"psnr_y\": 18.59,\n               \"psnr_u\": 24.43,\n               \"psnr_v\": 21.36\n           },\n           {\n               \"n\": 2,\n               \"mse_avg\": 535.29,\n               \"mse_y\": 896.98,\n               \"mse_u\": 239.4,\n               \"mse_v\": 469.49,\n               \"psnr_avg\": 20.84,\n               \"psnr_y\": 18.6,\n               \"psnr_u\": 24.34,\n               \"psnr_v\": 21.41\n           },\n           {\n               \"n\": 3,\n               \"mse_avg\": 535.04,\n               \"mse_y\": 894.89,\n               \"mse_u\": 245.8,\n               \"mse_v\": 464.43,\n               \"psnr_avg\": 20.85,\n               \"psnr_y\": 18.61,\n               \"psnr_u\": 24.22,\n               \"psnr_v\": 21.46\n           }\n       ],\n       \"ssim\": [\n           {\n               \"n\": 1,\n               \"ssim_y\": 0.934,\n               \"ssim_u\": 0.96,\n               \"ssim_v\": 0.942,\n               \"ssim_avg\": 0.945\n           },\n           {\n               \"n\": 2,\n               \"ssim_y\": 0.934,\n               \"ssim_u\": 0.96,\n               \"ssim_v\": 0.943,\n               \"ssim_avg\": 0.946\n           },\n           {\n               \"n\": 3,\n               \"ssim_y\": 0.934,\n               \"ssim_u\": 0.959,\n               \"ssim_v\": 0.943,\n               \"ssim_avg\": 0.945\n           }\n       ],\n       \"input_file_dist\": \"test/dist-854x480.mkv\",\n       \"input_file_ref\": \"test/ref-1280x720.mkv\"\n   }\n\nCSV example:\n\n::\n\n   \u279c ffmpeg_quality_metrics test/dist-854x480.mkv test/ref-1280x720.mkv --enable-vmaf -of csv\n   n,adm2,motion2,ms_ssim,psnr,ssim,vif_scale0,vif_scale1,vif_scale2,vif_scale3,vmaf,mse_avg,mse_u,mse_v,mse_y,psnr_avg,psnr_u,psnr_v,psnr_y,ssim_avg,ssim_u,ssim_v,ssim_y,input_file_dist,input_file_ref\n   1,0.70704,0.0,0.89698,18.58731,0.92415,0.53962,0.71805,0.75205,0.77367,15.44212,536.71,234.48,475.43,900.22,20.83,24.43,21.36,18.59,0.945,0.96,0.942,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n   2,0.7064,0.35975,0.89806,18.60299,0.9247,0.54025,0.71961,0.75369,0.77607,15.85038,535.29,239.4,469.49,896.98,20.84,24.34,21.41,18.6,0.946,0.96,0.943,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n   3,0.70505,0.35975,0.89879,18.6131,0.92466,0.5391,0.71869,0.75344,0.77616,15.63546,535.04,245.8,464.43,894.89,20.85,24.22,21.46,18.61,0.945,0.959,0.943,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n\nLicense\n-------\n\nffmpeg_quality_metrics, Copyright (c) 2019 Werner Robitza\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n.. |PyPI version| image:: https://badge.fury.io/py/ffmpeg_quality_metrics.svg\n   :target: https://badge.fury.io/py/ffmpeg_quality_metrics\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slhck/ffmpeg-quality-metrics", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ffmpeg-quality-metrics", "package_url": "https://pypi.org/project/ffmpeg-quality-metrics/", "platform": "", "project_url": "https://pypi.org/project/ffmpeg-quality-metrics/", "project_urls": {"Homepage": "https://github.com/slhck/ffmpeg-quality-metrics"}, "release_url": "https://pypi.org/project/ffmpeg-quality-metrics/0.3.10/", "requires_dist": ["pandas"], "requires_python": "", "summary": "Calculate quality metrics with FFmpeg (SSIM, PSNR, VMAF)", "version": "0.3.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/ffmpeg_quality_metrics\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a225918200ebf29af522b42e02571e013e6055b/68747470733a2f2f62616467652e667572792e696f2f70792f66666d7065675f7175616c6974795f6d6574726963732e737667\"></a></p>\n<p>Simple script for calculating quality metrics with FFmpeg.</p>\n<p>Currently supports PSNR, SSIM and VMAF.</p>\n<p>Author: Werner Robitza <a href=\"mailto:werner.robitza%40gmail.com\">werner<span>.</span>robitza<span>@</span>gmail<span>.</span>com</a></p>\n<p>Contents:</p>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#running-with-docker\" rel=\"nofollow\">Running with Docker</a></li>\n<li><a href=\"#output\" rel=\"nofollow\">Output</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<hr class=\"docutils\">\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6</li>\n<li>FFmpeg:<ul>\n<li>download a static build from <a href=\"http://ffmpeg.org/download.html\" rel=\"nofollow\">their\nwebsite</a>)</li>\n<li>put the <tt>ffmpeg</tt> executable in your <tt>$PATH</tt></li>\n</ul>\n</li>\n</ul>\n<p>Optionally, you may install FFmpeg with <tt>libvmaf</tt> support to run VMAF\nscore calculation:</p>\n<ul>\n<li>Install <a href=\"https://brew.sh/\" rel=\"nofollow\">Homebrew</a></li>\n<li>Install <a href=\"https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/\" rel=\"nofollow\">this\ntap</a></li>\n<li>Run <tt>brew install ffmpeg <span class=\"pre\">--with-libvmaf</span></tt>.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install ffmpeg_quality_metrics\n</pre>\n<p>Or clone this repository, then run the tool with\n<tt>python <span class=\"pre\">-m</span> ffmpeg_quality_metrics</tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In the simplest case, if you have a distorted (encoded, maybe scaled)\nversion and the reference:</p>\n<pre>ffmpeg_quality_metrics distorted.mp4 reference.avi\n</pre>\n<p>The distorted file will be automatically scaled to the resolution of the\nreference.</p>\n<p>See <tt>ffmpeg_quality_metrics <span class=\"pre\">-h</span></tt>:</p>\n<pre>usage: ffmpeg_quality_metrics [-h] [-n] [-v] [-ev] [-m MODEL_PATH] [-p]\n                                 [-dps]\n                                 [-of {json,csv}]\n                                 dist ref\n\npositional arguments:\n  dist                  input file, distorted\n  ref                   input file, reference\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n, --dry-run         Do not run command, just show what would be done\n                        (default: False)\n  -v, --verbose         Show verbose output (default: False)\n  -ev, --enable-vmaf    Enable VMAF computation; calculates VMAF as well as\n                        SSIM and PSNR (default: False)\n  -m MODEL_PATH, --model-path MODEL_PATH\n                        Set path to VMAF model file (.pkl) (default: None)\n  -p, --phone-model     Enable VMAF phone model (default: False)\n  -dp, --disable-psnr-ssim\n                        Disable PSNR/SSIM computation. Use VMAF to get YUV\n                        estimate. (default: False)\n  -s, --scaling-algorithm {fast_bilinear,bilinear,bicubic,experimental,neighbor,area,bicublin,gauss,sinc,lanczos,spline}\n                        Scaling algorithm for ffmpeg (default: bicubic)\n  -of {json,csv}, --output-format {json,csv}\n                        output in which format (default: json)\n</pre>\n</div>\n<div id=\"running-with-docker\">\n<h2>Running with Docker</h2>\n<p>If you don\u2019t want to deal with dependencies, build the image with\nDocker:</p>\n<pre>docker build -t ffmpeg_quality_metrics .\n</pre>\n<p>This installs <tt>ffmpeg</tt> with all dependencies. You can then run the\ncontainer, which basically calls the Python script. To help you with\nmounting the volumes (since your videos are not stored in the\ncontainer), you can run a helper script:</p>\n<pre>./docker_run.sh\n</pre>\n<p>Check the output of the above command for more help.</p>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>JSON or CSV, including individual fields for Y, U, V, and averages, as\nwell as frame numbers.</p>\n<p>JSON example:</p>\n<pre>\u279c ffmpeg_quality_metrics test/dist-854x480.mkv test/ref-1280x720.mkv --enable-vmaf\n{\n    \"vmaf\": [\n        {\n            \"adm2\": 0.70704,\n            \"motion2\": 0.0,\n            \"ms_ssim\": 0.89698,\n            \"psnr\": 18.58731,\n            \"ssim\": 0.92415,\n            \"vif_scale0\": 0.53962,\n            \"vif_scale1\": 0.71805,\n            \"vif_scale2\": 0.75205,\n            \"vif_scale3\": 0.77367,\n            \"vmaf\": 15.44212,\n            \"n\": 1\n        },\n        {\n            \"adm2\": 0.7064,\n            \"motion2\": 0.35975,\n            \"ms_ssim\": 0.89806,\n            \"psnr\": 18.60299,\n            \"ssim\": 0.9247,\n            \"vif_scale0\": 0.54025,\n            \"vif_scale1\": 0.71961,\n            \"vif_scale2\": 0.75369,\n            \"vif_scale3\": 0.77607,\n            \"vmaf\": 15.85038,\n            \"n\": 2\n        },\n        {\n            \"adm2\": 0.70505,\n            \"motion2\": 0.35975,\n            \"ms_ssim\": 0.89879,\n            \"psnr\": 18.6131,\n            \"ssim\": 0.92466,\n            \"vif_scale0\": 0.5391,\n            \"vif_scale1\": 0.71869,\n            \"vif_scale2\": 0.75344,\n            \"vif_scale3\": 0.77616,\n            \"vmaf\": 15.63546,\n            \"n\": 3\n        }\n    ],\n    \"psnr\": [\n        {\n            \"n\": 1,\n            \"mse_avg\": 536.71,\n            \"mse_y\": 900.22,\n            \"mse_u\": 234.48,\n            \"mse_v\": 475.43,\n            \"psnr_avg\": 20.83,\n            \"psnr_y\": 18.59,\n            \"psnr_u\": 24.43,\n            \"psnr_v\": 21.36\n        },\n        {\n            \"n\": 2,\n            \"mse_avg\": 535.29,\n            \"mse_y\": 896.98,\n            \"mse_u\": 239.4,\n            \"mse_v\": 469.49,\n            \"psnr_avg\": 20.84,\n            \"psnr_y\": 18.6,\n            \"psnr_u\": 24.34,\n            \"psnr_v\": 21.41\n        },\n        {\n            \"n\": 3,\n            \"mse_avg\": 535.04,\n            \"mse_y\": 894.89,\n            \"mse_u\": 245.8,\n            \"mse_v\": 464.43,\n            \"psnr_avg\": 20.85,\n            \"psnr_y\": 18.61,\n            \"psnr_u\": 24.22,\n            \"psnr_v\": 21.46\n        }\n    ],\n    \"ssim\": [\n        {\n            \"n\": 1,\n            \"ssim_y\": 0.934,\n            \"ssim_u\": 0.96,\n            \"ssim_v\": 0.942,\n            \"ssim_avg\": 0.945\n        },\n        {\n            \"n\": 2,\n            \"ssim_y\": 0.934,\n            \"ssim_u\": 0.96,\n            \"ssim_v\": 0.943,\n            \"ssim_avg\": 0.946\n        },\n        {\n            \"n\": 3,\n            \"ssim_y\": 0.934,\n            \"ssim_u\": 0.959,\n            \"ssim_v\": 0.943,\n            \"ssim_avg\": 0.945\n        }\n    ],\n    \"input_file_dist\": \"test/dist-854x480.mkv\",\n    \"input_file_ref\": \"test/ref-1280x720.mkv\"\n}\n</pre>\n<p>CSV example:</p>\n<pre>\u279c ffmpeg_quality_metrics test/dist-854x480.mkv test/ref-1280x720.mkv --enable-vmaf -of csv\nn,adm2,motion2,ms_ssim,psnr,ssim,vif_scale0,vif_scale1,vif_scale2,vif_scale3,vmaf,mse_avg,mse_u,mse_v,mse_y,psnr_avg,psnr_u,psnr_v,psnr_y,ssim_avg,ssim_u,ssim_v,ssim_y,input_file_dist,input_file_ref\n1,0.70704,0.0,0.89698,18.58731,0.92415,0.53962,0.71805,0.75205,0.77367,15.44212,536.71,234.48,475.43,900.22,20.83,24.43,21.36,18.59,0.945,0.96,0.942,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n2,0.7064,0.35975,0.89806,18.60299,0.9247,0.54025,0.71961,0.75369,0.77607,15.85038,535.29,239.4,469.49,896.98,20.84,24.34,21.41,18.6,0.946,0.96,0.943,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n3,0.70505,0.35975,0.89879,18.6131,0.92466,0.5391,0.71869,0.75344,0.77616,15.63546,535.04,245.8,464.43,894.89,20.85,24.22,21.46,18.61,0.945,0.959,0.943,0.934,test/dist-854x480.mkv,test/ref-1280x720.mkv\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>ffmpeg_quality_metrics, Copyright (c) 2019 Werner Robitza</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 6977066, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "d2760de45f7b752d8029e077aa30b261", "sha256": "084f8c0c35fdddfd7505afa515012331d7a61728fbb2a0cf3633beed8b570b4b"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.1.tar.gz", "has_sig": false, "md5_digest": "d2760de45f7b752d8029e077aa30b261", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9548, "upload_time": "2019-05-25T11:31:39", "upload_time_iso_8601": "2019-05-25T11:31:39.963375Z", "url": "https://files.pythonhosted.org/packages/99/dc/73ab8cc3ad4593c28c0f7aaced4eaf38154c71d1ea415474b8303d38c972/ffmpeg_quality_metrics-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "0f3b031a02e770e8d080da699bfc523b", "sha256": "ebe971cd977aaf8dba14b87cb3a690e46b4545cd79900a141a4a07e0cf50b7dd"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "0f3b031a02e770e8d080da699bfc523b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8211, "upload_time": "2020-04-08T11:33:48", "upload_time_iso_8601": "2020-04-08T11:33:48.426136Z", "url": "https://files.pythonhosted.org/packages/54/e9/2a913fa653a59d34b7d1767fd68d7e76ba982db92f8a1217cfa15780ce02/ffmpeg_quality_metrics-0.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ac604e8075ff09086f2d8efd1f2e5ce", "sha256": "db4d2a2d5ec758d5f6bf5a4e7c0bd8bcd1c19b062cda298de51be85a6fb15ea9"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.10.tar.gz", "has_sig": false, "md5_digest": "0ac604e8075ff09086f2d8efd1f2e5ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10447, "upload_time": "2020-04-08T11:33:49", "upload_time_iso_8601": "2020-04-08T11:33:49.753153Z", "url": "https://files.pythonhosted.org/packages/ca/83/679447e9e5f97affda5e76960662e603a6d4ea1dc3590463120c2da75352/ffmpeg_quality_metrics-0.3.10.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "7950d060c87a8dc0eca428f0c084ad92", "sha256": "1c374679478979528fe5e995c8e4913374f3e7c6d4f69ca38d43900fad4f150c"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7950d060c87a8dc0eca428f0c084ad92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9647, "upload_time": "2019-05-25T11:44:06", "upload_time_iso_8601": "2019-05-25T11:44:06.666157Z", "url": "https://files.pythonhosted.org/packages/55/06/75b68fd8b8ccbc6a0af6e20ee925d8ed79a0e906be92e2ad55ec3274220e/ffmpeg_quality_metrics-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "82efabd3fcd32761fa4f420b1dbed76f", "sha256": "10bc5414145e76781dfb5bf645c9764d72d5a5cba16d4d89204403d8009b9f60"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.3.tar.gz", "has_sig": false, "md5_digest": "82efabd3fcd32761fa4f420b1dbed76f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9703, "upload_time": "2019-05-25T16:03:13", "upload_time_iso_8601": "2019-05-25T16:03:13.723361Z", "url": "https://files.pythonhosted.org/packages/d3/9b/a3cc665e31889fd205f524f5b26be7e0e7d17dc327f9a0a6bbe54f1511e7/ffmpeg_quality_metrics-0.3.3.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "29b122d366b997df5096c87bcdc85470", "sha256": "f3cdbbd57e6dbd22353f6941d0fda905e2ffbb073f6148639b45555812a048ce"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.5.tar.gz", "has_sig": false, "md5_digest": "29b122d366b997df5096c87bcdc85470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9853, "upload_time": "2019-09-09T17:07:57", "upload_time_iso_8601": "2019-09-09T17:07:57.016807Z", "url": "https://files.pythonhosted.org/packages/55/0b/1ab4de6c29507e83c04bf7003c15eb2b0064cdbdb2fb4b94fa9e6bb1d002/ffmpeg_quality_metrics-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "2fafa8025deb53ef4bfe1ba51641dd64", "sha256": "b0797f5bf75384b5fc0e75e49e96bb26a8df95acf0a5424cc95d742617cc0ba1"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.6.tar.gz", "has_sig": false, "md5_digest": "2fafa8025deb53ef4bfe1ba51641dd64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9796, "upload_time": "2019-10-15T09:00:51", "upload_time_iso_8601": "2019-10-15T09:00:51.252033Z", "url": "https://files.pythonhosted.org/packages/60/2e/8c5da37e6ffd05d0ddba7d38399dcf027f2f5139387b322936b481c20c5c/ffmpeg_quality_metrics-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "10bad911d735677e62e302596b48b10e", "sha256": "fe82e8655bd11982e02c702ee12c946cdbde8a9c3d4e18240d990de774b11d9d"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "10bad911d735677e62e302596b48b10e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8039, "upload_time": "2020-03-15T15:45:14", "upload_time_iso_8601": "2020-03-15T15:45:14.275026Z", "url": "https://files.pythonhosted.org/packages/18/51/db44c398dee00d34479a91fc46dd06642ff9c7f4606dfae9173ec9705b46/ffmpeg_quality_metrics-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2a6408929225f9245a4c194b488de59", "sha256": "8bb4f6d8f441a03f2947d59c27f0f6e7f6157e55a113340f01ee585b7f8a9e70"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.7.tar.gz", "has_sig": false, "md5_digest": "e2a6408929225f9245a4c194b488de59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10274, "upload_time": "2020-03-15T15:46:55", "upload_time_iso_8601": "2020-03-15T15:46:55.568290Z", "url": "https://files.pythonhosted.org/packages/bc/f1/e951ebd5559ae285444a4d5725c908666fc07beaba59f96857ec3ee60f59/ffmpeg_quality_metrics-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "b1ba078a0d6950b481086925852e3848", "sha256": "c88e7d7faf8d1bfb7a43a08ae9d4e3ebebd23a310bb26f07494dbf688553f3ed"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b1ba078a0d6950b481086925852e3848", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8040, "upload_time": "2020-03-15T15:46:54", "upload_time_iso_8601": "2020-03-15T15:46:54.301495Z", "url": "https://files.pythonhosted.org/packages/4f/7d/496bdcbadcddf3a21ac6eb45157a28fa621e9435835dbe0f9165b619084c/ffmpeg_quality_metrics-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02e8fbe04251702027e330ebe579fd39", "sha256": "f847253ffbca4fc8b4cc69118d5d0e51f52e85597189faaaafe06b6f3a47e2d2"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.8.tar.gz", "has_sig": false, "md5_digest": "02e8fbe04251702027e330ebe579fd39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10303, "upload_time": "2020-03-15T15:46:56", "upload_time_iso_8601": "2020-03-15T15:46:56.698124Z", "url": "https://files.pythonhosted.org/packages/1a/ef/29bfec3cc43a61ba25dae7d16f2c6583fcd7c28365cb1d7534ddb5159d42/ffmpeg_quality_metrics-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "4ea94e39565705fd9f5d40792d66add3", "sha256": "b1bb02904d9aeb89a1ed1ac1160f802c9a37f3f70bd6543b260ac07433994e14"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4ea94e39565705fd9f5d40792d66add3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8043, "upload_time": "2020-03-15T15:56:40", "upload_time_iso_8601": "2020-03-15T15:56:40.217757Z", "url": "https://files.pythonhosted.org/packages/37/46/865d1c468a633126000cafc8087c841efaf05b602da44b7e99fd47ddb3ac/ffmpeg_quality_metrics-0.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd90043edb9de9c3eda16567c20c4cfa", "sha256": "3b6509a12957d5bcaed2e248776a96be28f3e4c0fa7337528c574ec3bfbf4c7b"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.9.tar.gz", "has_sig": false, "md5_digest": "fd90043edb9de9c3eda16567c20c4cfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10284, "upload_time": "2020-03-15T15:56:41", "upload_time_iso_8601": "2020-03-15T15:56:41.952615Z", "url": "https://files.pythonhosted.org/packages/43/17/67998983d7a57e3a367d4fbac8440a4f046f4029516acccf6e6531ce5837/ffmpeg_quality_metrics-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f3b031a02e770e8d080da699bfc523b", "sha256": "ebe971cd977aaf8dba14b87cb3a690e46b4545cd79900a141a4a07e0cf50b7dd"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "0f3b031a02e770e8d080da699bfc523b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8211, "upload_time": "2020-04-08T11:33:48", "upload_time_iso_8601": "2020-04-08T11:33:48.426136Z", "url": "https://files.pythonhosted.org/packages/54/e9/2a913fa653a59d34b7d1767fd68d7e76ba982db92f8a1217cfa15780ce02/ffmpeg_quality_metrics-0.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ac604e8075ff09086f2d8efd1f2e5ce", "sha256": "db4d2a2d5ec758d5f6bf5a4e7c0bd8bcd1c19b062cda298de51be85a6fb15ea9"}, "downloads": -1, "filename": "ffmpeg_quality_metrics-0.3.10.tar.gz", "has_sig": false, "md5_digest": "0ac604e8075ff09086f2d8efd1f2e5ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10447, "upload_time": "2020-04-08T11:33:49", "upload_time_iso_8601": "2020-04-08T11:33:49.753153Z", "url": "https://files.pythonhosted.org/packages/ca/83/679447e9e5f97affda5e76960662e603a6d4ea1dc3590463120c2da75352/ffmpeg_quality_metrics-0.3.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:47 2020"}