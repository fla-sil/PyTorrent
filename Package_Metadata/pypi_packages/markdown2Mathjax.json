{"info": {"author": "Matthew Young", "author_email": "matt.d.young@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "================\nmarkdown2Mathjax\n================\n\nmarkdown2Mathjax (https://github.com/constantAmateur/markdown2Mathjax) is a simple package that allows you to use latex style math generated by MathJax (http://mathjax.org) in conjunction with the popular markdown format.  There are two implementations of markdown in python, this package is designed to be used with the more widely used and actively maintained of the two, called markdown2 (https://github.com/trentm/python-markdown2).  Typical usage is as follows::\n\n    #!/usr/bin/env python\n\n    from markdown2Mathjax import sanitizeInput, reconstructMath\n    from markdown2 import markdown\n\n    tmp = sanitizeInput(sometxt)\n    markdedDownText = markdown(tmp[0])\n    finalOutput = reconstructMath(markedDownText,tmp[1])\n\n(where \"sometxt\" is a string containing the markdown+mathjax text.)\n\nInstallation\n============\n\nmarkdown2Mathjax is hosted on pypi, so can be installed either from source, using::\n\n    tar zxvf markdown2Mathjax-x.x.x.tar.gz\n    cd markdown2Mathjax-x.x.x\n    python setup.py install\n\nor using pip (or easy_install if you'd prefer)::\n\n    pip install markdown2Mathjax\n\nUsage\n=====\n\nBy default, math is marked by single $ signs for inline math and double $$ signs for equations.  However, any delimiting strings may be used by changing the keyword arguments to the sanitizeInput and reconstructMath functions.  Note that by default mathjax does NOT use single dollars signs to delimit inline math, so if you use the defaults for this package, you will have to instruct mathjax to treat it appropriately.\n\nExplanation\n===========\n\nThe sanitizeInput function finds any instances of math (as determined by the supplied delimiters) and replaces them with a placeholder.  This placeholder can be specified by the user, but it is recommended you use the supplied default of \"$0$\".  The placeholder has to be something that won't be processed by markdown, and won't ever be PRODUCED by markdown.  The first of these requirements is easy enough to meet, the second can be somewhat more subtle.  If the placeholder already exists in the supplied user text, it is noted by sanitizeInput and will be left alone when reconstruction math after markdown processing.\n\nEach time a valid math block is encountered and replaced by a placeholder, the math is saved in a list (called codeblocks) which is then returned by the sanitizeInput function.  Each entry in codeblocks is prefixed with either 0 (for a literal occurance of the placeholder in the text), a 1 for inline math or a 2 for a separate equation.\n\nThe sanitized string from sanitizeInput can then be marked up by markdown without fear of your math being mangled.  Finally, reconstructMath replaces each of the placeholders in the marked up text with the appropriate codeblock.  This final html can then be displayed with appropriate mathjax javascript headers.\n\nAnother way to think about this is than reconstructMath is basically the inverse of sanitizeInput.  So without using markdown in between, nothing should change between the two (except when reconstructMath also does some extra cleanup of the math codeblocks).  That is::\n\n    tmp=sanitizeInput(test)\n    reconstructMath(tmp[0],tmp[1])==test\n\nshould always evaluate to true.", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/markdown2Mathjax/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/constantAmateur/markdown2Mathjax", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "markdown2Mathjax", "package_url": "https://pypi.org/project/markdown2Mathjax/", "platform": "any", "project_url": "https://pypi.org/project/markdown2Mathjax/", "project_urls": {"Download": "http://pypi.python.org/pypi/markdown2Mathjax/", "Homepage": "https://github.com/constantAmateur/markdown2Mathjax"}, "release_url": "https://pypi.org/project/markdown2Mathjax/0.3.8/", "requires_dist": null, "requires_python": null, "summary": "Extend markdown2 for use with mathjax", "version": "0.3.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>markdown2Mathjax (<a href=\"https://github.com/constantAmateur/markdown2Mathjax\" rel=\"nofollow\">https://github.com/constantAmateur/markdown2Mathjax</a>) is a simple package that allows you to use latex style math generated by MathJax (<a href=\"http://mathjax.org\" rel=\"nofollow\">http://mathjax.org</a>) in conjunction with the popular markdown format.  There are two implementations of markdown in python, this package is designed to be used with the more widely used and actively maintained of the two, called markdown2 (<a href=\"https://github.com/trentm/python-markdown2\" rel=\"nofollow\">https://github.com/trentm/python-markdown2</a>).  Typical usage is as follows:</p>\n<pre>#!/usr/bin/env python\n\nfrom markdown2Mathjax import sanitizeInput, reconstructMath\nfrom markdown2 import markdown\n\ntmp = sanitizeInput(sometxt)\nmarkdedDownText = markdown(tmp[0])\nfinalOutput = reconstructMath(markedDownText,tmp[1])\n</pre>\n<p>(where \u201csometxt\u201d is a string containing the markdown+mathjax text.)</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>markdown2Mathjax is hosted on pypi, so can be installed either from source, using:</p>\n<pre>tar zxvf markdown2Mathjax-x.x.x.tar.gz\ncd markdown2Mathjax-x.x.x\npython setup.py install\n</pre>\n<p>or using pip (or easy_install if you\u2019d prefer):</p>\n<pre>pip install markdown2Mathjax\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>By default, math is marked by single $ signs for inline math and double $$ signs for equations.  However, any delimiting strings may be used by changing the keyword arguments to the sanitizeInput and reconstructMath functions.  Note that by default mathjax does NOT use single dollars signs to delimit inline math, so if you use the defaults for this package, you will have to instruct mathjax to treat it appropriately.</p>\n</div>\n<div id=\"explanation\">\n<h2>Explanation</h2>\n<p>The sanitizeInput function finds any instances of math (as determined by the supplied delimiters) and replaces them with a placeholder.  This placeholder can be specified by the user, but it is recommended you use the supplied default of \u201c$0$\u201d.  The placeholder has to be something that won\u2019t be processed by markdown, and won\u2019t ever be PRODUCED by markdown.  The first of these requirements is easy enough to meet, the second can be somewhat more subtle.  If the placeholder already exists in the supplied user text, it is noted by sanitizeInput and will be left alone when reconstruction math after markdown processing.</p>\n<p>Each time a valid math block is encountered and replaced by a placeholder, the math is saved in a list (called codeblocks) which is then returned by the sanitizeInput function.  Each entry in codeblocks is prefixed with either 0 (for a literal occurance of the placeholder in the text), a 1 for inline math or a 2 for a separate equation.</p>\n<p>The sanitized string from sanitizeInput can then be marked up by markdown without fear of your math being mangled.  Finally, reconstructMath replaces each of the placeholders in the marked up text with the appropriate codeblock.  This final html can then be displayed with appropriate mathjax javascript headers.</p>\n<p>Another way to think about this is than reconstructMath is basically the inverse of sanitizeInput.  So without using markdown in between, nothing should change between the two (except when reconstructMath also does some extra cleanup of the math codeblocks).  That is:</p>\n<pre>tmp=sanitizeInput(test)\nreconstructMath(tmp[0],tmp[1])==test\n</pre>\n<p>should always evaluate to true.</p>\n</div>\n\n          </div>"}, "last_serial": 794524, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "a5a5d14aa9f74ed42e7c42f4ef2b0e6f", "sha256": "11e2128b805e24bc30d3dc81591e04dca25d81c04830b7d6a79cc7f4e18968db"}, "downloads": -1, "filename": "markdown2Mathjax-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a5a5d14aa9f74ed42e7c42f4ef2b0e6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16655, "upload_time": "2012-04-07T13:50:15", "upload_time_iso_8601": "2012-04-07T13:50:15.840957Z", "url": "https://files.pythonhosted.org/packages/5e/91/5dd4764183b3594592cf36c92cdfafe789e7c0a3a06bfa47a976d97a5c61/markdown2Mathjax-0.2.0.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "629e88f43101957a7875028c7dba93b4", "sha256": "f0fd5c4bfce070500388b081edcf5a08547edd0e2c2d237e34694d6394e08e37"}, "downloads": -1, "filename": "markdown2Mathjax-0.3.6.tar.gz", "has_sig": false, "md5_digest": "629e88f43101957a7875028c7dba93b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18412, "upload_time": "2012-04-07T18:37:35", "upload_time_iso_8601": "2012-04-07T18:37:35.015788Z", "url": "https://files.pythonhosted.org/packages/4e/0b/6a5adf4bd00c9b3460fe77363321b175a364611f393bd656c1fcd38de128/markdown2Mathjax-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "51884dc1a37ffb90fb72069e617182d6", "sha256": "1c2d7bdd3ab9b25ecd51c353a3889759f1a1be9b437963df8da05af7dbbe012d"}, "downloads": -1, "filename": "markdown2Mathjax-0.3.7.tar.gz", "has_sig": false, "md5_digest": "51884dc1a37ffb90fb72069e617182d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18584, "upload_time": "2012-04-07T18:44:44", "upload_time_iso_8601": "2012-04-07T18:44:44.755361Z", "url": "https://files.pythonhosted.org/packages/71/24/3208691b8b94afc281b23dfae85500894f1c8e45150856e80305783b4629/markdown2Mathjax-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "a80bbfdae724db526cee635639fd5fb6", "sha256": "1202d33ab8e1f57ea00f24a8017a3e1507ac8fdd33b8fa4b8348955e744db35d"}, "downloads": -1, "filename": "markdown2Mathjax-0.3.8.tar.gz", "has_sig": false, "md5_digest": "a80bbfdae724db526cee635639fd5fb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18809, "upload_time": "2012-04-07T21:12:28", "upload_time_iso_8601": "2012-04-07T21:12:28.524704Z", "url": "https://files.pythonhosted.org/packages/e7/96/70418fa9e21fdfbd45818210f2605feb97f1b475119d850b9d12214a90e2/markdown2Mathjax-0.3.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a80bbfdae724db526cee635639fd5fb6", "sha256": "1202d33ab8e1f57ea00f24a8017a3e1507ac8fdd33b8fa4b8348955e744db35d"}, "downloads": -1, "filename": "markdown2Mathjax-0.3.8.tar.gz", "has_sig": false, "md5_digest": "a80bbfdae724db526cee635639fd5fb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18809, "upload_time": "2012-04-07T21:12:28", "upload_time_iso_8601": "2012-04-07T21:12:28.524704Z", "url": "https://files.pythonhosted.org/packages/e7/96/70418fa9e21fdfbd45818210f2605feb97f1b475119d850b9d12214a90e2/markdown2Mathjax-0.3.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:46 2020"}