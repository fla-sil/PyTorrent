{"info": {"author": "Micha\u0142 Wcis\u0142o", "author_email": "mwcislo999@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Testing"], "description": "# RF-service\n\nRobotFramework is a service for running tests/healthchecks for kubernetes cluster. It can work in two modes: on-demand execution with [frontend](https://github.com/devopsspiral/rf-service-fe) and as Kubernetes CronJob that executes tests at given schedule and publish it in Caddy server. \n\n## Quick start\n\n```\ngit clone https://github.com/devopsspiral/rf-service.git\ncd rf-service\nhelm install rf-service ~/git/rf-service/chart/rf-service/\n\n#By default rf-service-fe is exposed on http://rf-service.local\n#If you running it on k3d/k3s you might need to add entries to you /etc/hosts\n```\n\nTo run tests you need to first go to Configure tab and define fetcher (for getting test source) and publisher (to define where to put results). You can use internal caddy container as publisher target just use values from configuration file described in [rf-service configuration](#rf-service-configuration).\n\nIf executed as CronJob with default settings, every minute there should be test execution and results will be published in Results tab.\nExecuted tests are taken from [KubeLibrary](https://github.com/devopsspiral/KubeLibrary/tree/master/testcases) and will most \nprobably fail on your cluster. If you want to see them pass you need k3s/k3d and example grafana service as described in [KubeLibrary README](https://github.com/devopsspiral/KubeLibrary).\n\n## Usage\n\n### Building own test image\n\nrf-service image should contain only logic connected with running RobotFramework tests, to include external test libraries you should build your own image similar to dockerfile in `docker-k8s/Dockerfile`:\n\n```\nFROM mwcislo/rf-service\n\nCOPY docker-k8s/requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCMD rf-service\n```\n\nBy default helm chart is using this image for running tests\n\n### rf-service configuration\n\nIf rf-service is utilized as CronJob it needs .json file to configure its behaviour. It is passed as only argument to rf-service executable (see [this line](https://github.com/devopsspiral/rf-service/blob/f07716d068b9e7aa739f0c6c024e8b62c78d23c0/chart/rf-service/templates/test-job.yaml#L17))\n\nThe example content of the file is as below:\n```\n  {\n    \"fetcher\": {\n        \"type\": \"ZipFetcher\",\n        \"url\": \"https://github.com/devopsspiral/KubeLibrary/archive/incluster.zip\"\n    },\n    \"publisher\": {\n        \"type\": \"CaddyPublisher\",\n        \"url\": \"http://rf-service:8090/uploads\"\n    }\n  }\n```\n\nIt configures rf-service to get testcases from given url (branch in github) and publish results in Caddy server using k8s service DN rf-service (providing you named release rf-service when executing helm install). You can create your own fetchers and publishers.\n\nIn helm chart, config file content can be defined using .Values.config and it is kept as ConfigMap on cluster.\n\nWhen using Web UI (.Values.config is empty string) the same configuration can be done in Configure tab. You need to save both Publisher and Fetcher config separetly. To use internal Caddy container you need to pass http://<ingress host>/caddy/uploads, i.e. http://rf-service.local/caddy/uploads\n\n### Helm chart\n\nBelow you can find table with parameters that are most important.\n\n| Chart parameter   | Default | Comment |\n| ------------- | ------------- | ------------- |\n| image.repository | mwcislo/rf-service-k8s | should point to your custom test image\n| schedule | \\*/1 \\* \\* \\* \\* | cron=like schedule for test execution\n| storageSize | 1Gi | volume size used for keeping reports in Caddy\n| config | \"\" | .json file with configuration\n| bindToClusterRole | cluster-admin |  defines which cluster role to use\n| rfFE.service.type | ClusterIP | defines way of exposing rf-service-fe\n| caddy.setup | ... | configures caddy, upload part shouldn't be changed\n\n## Development\n\n```\n# clone repo\ngit clone https://github.com/devopsspiral/rf-service.git\ncd rf-service\n\n# create virtualenv\nvirtualenv .venv\n. .venv/bin/activate\npip install --user -r requirements.txt\nexport PYTHONPATH=./src:${PYTHONPATH}\ncd src\npython -m rf_runner.api\n# or\nscripts/rf-service [config.json]\n# API is on http://localhost:5000/api/\n\n\n# testing\npython -m unittest\n```\n\n## References\n\n### Articles\n\n[Robot Framework library for testing Kubernetes](https://devopsspiral.com/articles/k8s/robotframework-kubelibrary/)\n[Testing on kubernetes - rf-service](https://devopsspiral.com/articles/k8s/robotframework-service/)\n[Intro to Vue.js. Testing on kubernetes - rf-service frontend.](https://devopsspiral.com/articles/k8s/robotframework-service-fe/)\n\n### Repositories\n\n[KubeLibrary](https://github.com/devopsspiral/KubeLibrary)\n[frontend](https://github.com/devopsspiral/rf-service-fe)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devopsspiral/rf-service", "keywords": "robotframework testing test automation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rf-service", "package_url": "https://pypi.org/project/rf-service/", "platform": "", "project_url": "https://pypi.org/project/rf-service/", "project_urls": {"Homepage": "https://github.com/devopsspiral/rf-service"}, "release_url": "https://pypi.org/project/rf-service/0.2.0/", "requires_dist": ["robotframework", "datetime", "requests", "flask", "flask-cors", "gevent"], "requires_python": ">=3.6", "summary": "Robot Framework service", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RF-service</h1>\n<p>RobotFramework is a service for running tests/healthchecks for kubernetes cluster. It can work in two modes: on-demand execution with <a href=\"https://github.com/devopsspiral/rf-service-fe\" rel=\"nofollow\">frontend</a> and as Kubernetes CronJob that executes tests at given schedule and publish it in Caddy server.</p>\n<h2>Quick start</h2>\n<pre><code>git clone https://github.com/devopsspiral/rf-service.git\ncd rf-service\nhelm install rf-service ~/git/rf-service/chart/rf-service/\n\n#By default rf-service-fe is exposed on http://rf-service.local\n#If you running it on k3d/k3s you might need to add entries to you /etc/hosts\n</code></pre>\n<p>To run tests you need to first go to Configure tab and define fetcher (for getting test source) and publisher (to define where to put results). You can use internal caddy container as publisher target just use values from configuration file described in <a href=\"#rf-service-configuration\" rel=\"nofollow\">rf-service configuration</a>.</p>\n<p>If executed as CronJob with default settings, every minute there should be test execution and results will be published in Results tab.\nExecuted tests are taken from <a href=\"https://github.com/devopsspiral/KubeLibrary/tree/master/testcases\" rel=\"nofollow\">KubeLibrary</a> and will most\nprobably fail on your cluster. If you want to see them pass you need k3s/k3d and example grafana service as described in <a href=\"https://github.com/devopsspiral/KubeLibrary\" rel=\"nofollow\">KubeLibrary README</a>.</p>\n<h2>Usage</h2>\n<h3>Building own test image</h3>\n<p>rf-service image should contain only logic connected with running RobotFramework tests, to include external test libraries you should build your own image similar to dockerfile in <code>docker-k8s/Dockerfile</code>:</p>\n<pre><code>FROM mwcislo/rf-service\n\nCOPY docker-k8s/requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCMD rf-service\n</code></pre>\n<p>By default helm chart is using this image for running tests</p>\n<h3>rf-service configuration</h3>\n<p>If rf-service is utilized as CronJob it needs .json file to configure its behaviour. It is passed as only argument to rf-service executable (see <a href=\"https://github.com/devopsspiral/rf-service/blob/f07716d068b9e7aa739f0c6c024e8b62c78d23c0/chart/rf-service/templates/test-job.yaml#L17\" rel=\"nofollow\">this line</a>)</p>\n<p>The example content of the file is as below:</p>\n<pre><code>  {\n    \"fetcher\": {\n        \"type\": \"ZipFetcher\",\n        \"url\": \"https://github.com/devopsspiral/KubeLibrary/archive/incluster.zip\"\n    },\n    \"publisher\": {\n        \"type\": \"CaddyPublisher\",\n        \"url\": \"http://rf-service:8090/uploads\"\n    }\n  }\n</code></pre>\n<p>It configures rf-service to get testcases from given url (branch in github) and publish results in Caddy server using k8s service DN rf-service (providing you named release rf-service when executing helm install). You can create your own fetchers and publishers.</p>\n<p>In helm chart, config file content can be defined using .Values.config and it is kept as ConfigMap on cluster.</p>\n<p>When using Web UI (.Values.config is empty string) the same configuration can be done in Configure tab. You need to save both Publisher and Fetcher config separetly. To use internal Caddy container you need to pass http://&lt;ingress host&gt;/caddy/uploads, i.e. <a href=\"http://rf-service.local/caddy/uploads\" rel=\"nofollow\">http://rf-service.local/caddy/uploads</a></p>\n<h3>Helm chart</h3>\n<p>Below you can find table with parameters that are most important.</p>\n<table>\n<thead>\n<tr>\n<th>Chart parameter</th>\n<th>Default</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>image.repository</td>\n<td>mwcislo/rf-service-k8s</td>\n<td>should point to your custom test image</td>\n</tr>\n<tr>\n<td>schedule</td>\n<td>*/1 * * * *</td>\n<td>cron=like schedule for test execution</td>\n</tr>\n<tr>\n<td>storageSize</td>\n<td>1Gi</td>\n<td>volume size used for keeping reports in Caddy</td>\n</tr>\n<tr>\n<td>config</td>\n<td>\"\"</td>\n<td>.json file with configuration</td>\n</tr>\n<tr>\n<td>bindToClusterRole</td>\n<td>cluster-admin</td>\n<td>defines which cluster role to use</td>\n</tr>\n<tr>\n<td>rfFE.service.type</td>\n<td>ClusterIP</td>\n<td>defines way of exposing rf-service-fe</td>\n</tr>\n<tr>\n<td>caddy.setup</td>\n<td>...</td>\n<td>configures caddy, upload part shouldn't be changed</td>\n</tr></tbody></table>\n<h2>Development</h2>\n<pre><code># clone repo\ngit clone https://github.com/devopsspiral/rf-service.git\ncd rf-service\n\n# create virtualenv\nvirtualenv .venv\n. .venv/bin/activate\npip install --user -r requirements.txt\nexport PYTHONPATH=./src:${PYTHONPATH}\ncd src\npython -m rf_runner.api\n# or\nscripts/rf-service [config.json]\n# API is on http://localhost:5000/api/\n\n\n# testing\npython -m unittest\n</code></pre>\n<h2>References</h2>\n<h3>Articles</h3>\n<p><a href=\"https://devopsspiral.com/articles/k8s/robotframework-kubelibrary/\" rel=\"nofollow\">Robot Framework library for testing Kubernetes</a>\n<a href=\"https://devopsspiral.com/articles/k8s/robotframework-service/\" rel=\"nofollow\">Testing on kubernetes - rf-service</a>\n<a href=\"https://devopsspiral.com/articles/k8s/robotframework-service-fe/\" rel=\"nofollow\">Intro to Vue.js. Testing on kubernetes - rf-service frontend.</a></p>\n<h3>Repositories</h3>\n<p><a href=\"https://github.com/devopsspiral/KubeLibrary\" rel=\"nofollow\">KubeLibrary</a>\n<a href=\"https://github.com/devopsspiral/rf-service-fe\" rel=\"nofollow\">frontend</a></p>\n\n          </div>"}, "last_serial": 6991417, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d3a34fc9491d3c87f3ec048b3607d7dd", "sha256": "ed4572958e98942162ff1fde5f3db8c50ba746779202bf3909a320eae145b47a"}, "downloads": -1, "filename": "rf_service-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d3a34fc9491d3c87f3ec048b3607d7dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5336, "upload_time": "2020-02-04T22:10:24", "upload_time_iso_8601": "2020-02-04T22:10:24.719862Z", "url": "https://files.pythonhosted.org/packages/c2/73/f37b46a330a5d1e96f80cf014b784fac27327052366d6d7aa421591c539e/rf_service-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6e0e4decfca6ebd54ffba454a89e08a", "sha256": "bb25faf4542be36f14b2f413b7d54814f45348cc0caf87f811d0d48a671ae66e"}, "downloads": -1, "filename": "rf-service-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f6e0e4decfca6ebd54ffba454a89e08a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3371, "upload_time": "2020-02-04T22:10:28", "upload_time_iso_8601": "2020-02-04T22:10:28.365475Z", "url": "https://files.pythonhosted.org/packages/2a/63/90b30dcaaead0366b340ff94ba9e4395dd2b318002393b9858c676674eac/rf-service-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cd2b94b8c3d842e61deae24af5ca9f98", "sha256": "a52e1c759d5b680aae078fba1a8136fc27eeda0545bd70eda0147cabb3b9c55a"}, "downloads": -1, "filename": "rf_service-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd2b94b8c3d842e61deae24af5ca9f98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9695, "upload_time": "2020-04-10T07:28:06", "upload_time_iso_8601": "2020-04-10T07:28:06.035276Z", "url": "https://files.pythonhosted.org/packages/3b/44/6b981563c98ba285d9612d9bcc99fc2dd58c16fc4715b6b2af3ae9d83dfe/rf_service-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9dfd044d6b2ae391f573a0194ed2cae", "sha256": "50a261b3d0ba116b5a8dd9f23b98cb46597fec6758c482a23723e14f3cde248c"}, "downloads": -1, "filename": "rf-service-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b9dfd044d6b2ae391f573a0194ed2cae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7061, "upload_time": "2020-04-10T07:28:07", "upload_time_iso_8601": "2020-04-10T07:28:07.400637Z", "url": "https://files.pythonhosted.org/packages/23/4b/ed909b26a0fdd9ced6129d33eb64968a7f8e48ce6a81ac713dfee97673f7/rf-service-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd2b94b8c3d842e61deae24af5ca9f98", "sha256": "a52e1c759d5b680aae078fba1a8136fc27eeda0545bd70eda0147cabb3b9c55a"}, "downloads": -1, "filename": "rf_service-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd2b94b8c3d842e61deae24af5ca9f98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9695, "upload_time": "2020-04-10T07:28:06", "upload_time_iso_8601": "2020-04-10T07:28:06.035276Z", "url": "https://files.pythonhosted.org/packages/3b/44/6b981563c98ba285d9612d9bcc99fc2dd58c16fc4715b6b2af3ae9d83dfe/rf_service-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9dfd044d6b2ae391f573a0194ed2cae", "sha256": "50a261b3d0ba116b5a8dd9f23b98cb46597fec6758c482a23723e14f3cde248c"}, "downloads": -1, "filename": "rf-service-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b9dfd044d6b2ae391f573a0194ed2cae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7061, "upload_time": "2020-04-10T07:28:07", "upload_time_iso_8601": "2020-04-10T07:28:07.400637Z", "url": "https://files.pythonhosted.org/packages/23/4b/ed909b26a0fdd9ced6129d33eb64968a7f8e48ce6a81ac713dfee97673f7/rf-service-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:05 2020"}