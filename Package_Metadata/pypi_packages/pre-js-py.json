{"info": {"author": "Tom Wiesing", "author_email": "tkw01536@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "=======\nPreJsPy\n=======\n\n.. image:: https://travis-ci.org/tkw1536/PreJsPy.svg?branch=master\n   :alt: Build Status\n   :target: https://travis-ci.org/tkw1536/PreJsPy\n\nWhat is this?\n=============\n\nPreJsPy is highly configurable a precedence-based parser written in both Python and JavaScript.\nThe default grammar is based on a subset of JavaScript but can be adapted to a lot of different scenarios.\n\n.. code:: python\n\n  >>> from PreJsPy import PreJsPy\n  >>> parser = PreJsPy()\n  >>> parser.parse(\"6 * 9 == 42\")\n  {'type': 'BinaryExpression', 'operator': '==', 'right': {'type': 'Literal', 'raw': '42', 'value': 42.0}, 'left': {'type': 'BinaryExpression', 'operator': '*', 'right': {'type': 'Literal', 'raw': '9', 'value': 9.0}, 'left': {'type': 'Literal', 'raw': '6', 'value': 6.0}}}\n\n.. code:: js\n\n  > var PreJsPy = require('pre-js-py').PreJsPy;\n  > parser = new PreJsPy()\n  > parser.parse('6 * 9 == 42')\n  { type: 'BinaryExpression',\n    operator: '==',\n    left:\n     { type: 'BinaryExpression',\n       operator: '*',\n       left: { type: 'Literal', value: 6, raw: '6' },\n       right: { type: 'Literal', value: 9, raw: '9' } },\n    right: { type: 'Literal', value: 42, raw: '42' } }\n\nThe JavaScript version of this library has been adapted from the JavaScript library JSEP which is (c) 2013 Stephen Oney, http://jsep.from.so/ and has been published under the terms of the MIT license. The code has been ported to Python and a lot of utility functions have been added.\n\nGrammar Features\n=================\n\n* Symbolic Values\n   * Constants\n      * such as ```true```, ```false``` and ```null```\n      * configurable: Arbitrary constants can be added\n   * Identifiers\n      * may contain  $,\\_ or alphanumeric chacraters but may not start with a number\n      * can include property names and accessors, for example `foo`, `bar.baz`, `foo['bar'].baz`\n* Various types of literals\n   * Numeric Literals (```42.001```)\n      * decimal notation (```-42```)\n      * exponential notation (```6.7E-10```)\n   * String Literals (```\"Hello world\"```)\n      * can be either double or single quotes\n      * special characters can be escaped\n   * Array Literals (```[1, 2, 3]```)\n      * must be surrounded by square brackets\n      * can be nested\n* Multiple types of operators\n   * Unary operators\n      * by default ```-```, ```!```, ```~``` and ```+```\n      * custom operators can be added, existing ones can be removed\n   * Binary operators\n      * precedence based\n      * by default contains all JavaScript operators\n      * custom ones can be added with custom precedences\n      * brackets can be used to override precedences\n   * JavaScript Conditional operator\n      * single ternary operator ```a ? b : c```\n* Call Expressions\n   * must use round brackets\n   * for example ```Math.cos(x)```\n\nAPI\n===\n\nThe API in JavaScript and python are almost identical. The only differences come from the features of the languages themselves.\n\n.. code:: javascript\n\n  var parser = new PreJsPy(); // creates a new parser\n\n  parser.getConstants() // returns an object containing constants\n  parser.setConstants(d) // sets the current constants know to the parser\n\n  parser.getUnaryOperators() // gets an array of unary operators\n  parser.setUnaryOperators(ary) // sets an array of unary operators\n\n  parser.getBinaryOperators() // returns an object mapping binary operators to their precedence\n  parser.setBinaryOperators(ary) // sets the binary operators to precedence mapping\n\n  parser.parse(s) // parses a string into a AST\n\n.. code:: python\n\n  parser = PreJsPy() # creates a new parser\n\n  parser.getConstants() # returns an object containing constants\n  parser.setConstants(d) # sets the current constants know to the parser\n\n  parser.getUnaryOperators() # gets an array of unary operators\n  parser.setUnaryOperators(ary) # sets an array of unary operators\n\n  parser.getBinaryOperators() # returns an object mapping binary operators to their precedence\n  parser.setBinaryOperators(ary) # sets the binary operators to precedence mapping\n\n  parser.parse(s) # parses a string into a AST\n\nInstall\n=======\n\nThis package is published on the\n`Python Package Index <https://pypi.python.org/pypi/pre_js_py>`_\nInstallation can be done simply via pip:\n\n.. code:: bash\n\n   pip install pre_js_py\n\nIt is also published on\n`Nodejs Package Manager <https://www.npmjs.com/package/pre-js-py>`_\nInstallation can be done simply via npm:\n\n.. code:: bash\n\n   npm install pre-js-py\n\n\nLicense + Acknowledgements\n==========================\n\nThis module and associated documentation is Copyright (c) Tom Wiesing 2016\nand licensed under the MIT license, see `license <LICENSE>`_ for details.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tkw1536/PreJsPy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pre-js-py", "package_url": "https://pypi.org/project/pre-js-py/", "platform": "", "project_url": "https://pypi.org/project/pre-js-py/", "project_urls": {"Homepage": "https://github.com/tkw1536/PreJsPy"}, "release_url": "https://pypi.org/project/pre-js-py/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "Highly configurable precedence-based parser written in both Python and JavaScript", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/tkw1536/PreJsPy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02cd15d3f9b391043ff696847195bf78eb72467f/68747470733a2f2f7472617669732d63692e6f72672f746b77313533362f5072654a7350792e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"what-is-this\">\n<h2>What is this?</h2>\n<p>PreJsPy is highly configurable a precedence-based parser written in both Python and JavaScript.\nThe default grammar is based on a subset of JavaScript but can be adapted to a lot of different scenarios.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">PreJsPy</span> <span class=\"kn\">import</span> <span class=\"n\">PreJsPy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">PreJsPy</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"6 * 9 == 42\"</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'BinaryExpression'</span><span class=\"p\">,</span> <span class=\"s1\">'operator'</span><span class=\"p\">:</span> <span class=\"s1\">'=='</span><span class=\"p\">,</span> <span class=\"s1\">'right'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"s1\">'raw'</span><span class=\"p\">:</span> <span class=\"s1\">'42'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mf\">42.0</span><span class=\"p\">},</span> <span class=\"s1\">'left'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'BinaryExpression'</span><span class=\"p\">,</span> <span class=\"s1\">'operator'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"s1\">'right'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"s1\">'raw'</span><span class=\"p\">:</span> <span class=\"s1\">'9'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mf\">9.0</span><span class=\"p\">},</span> <span class=\"s1\">'left'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"s1\">'raw'</span><span class=\"p\">:</span> <span class=\"s1\">'6'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mf\">6.0</span><span class=\"p\">}}}</span>\n</pre>\n<pre><span class=\"o\">&gt;</span> <span class=\"kd\">var</span> <span class=\"nx\">PreJsPy</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'pre-js-py'</span><span class=\"p\">).</span><span class=\"nx\">PreJsPy</span><span class=\"p\">;</span>\n<span class=\"o\">&gt;</span> <span class=\"nx\">parser</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PreJsPy</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;</span> <span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"s1\">'6 * 9 == 42'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">'BinaryExpression'</span><span class=\"p\">,</span>\n  <span class=\"nx\">operator</span><span class=\"o\">:</span> <span class=\"s1\">'=='</span><span class=\"p\">,</span>\n  <span class=\"nx\">left</span><span class=\"o\">:</span>\n   <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">'BinaryExpression'</span><span class=\"p\">,</span>\n     <span class=\"nx\">operator</span><span class=\"o\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n     <span class=\"nx\">left</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"nx\">raw</span><span class=\"o\">:</span> <span class=\"s1\">'6'</span> <span class=\"p\">},</span>\n     <span class=\"nx\">right</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"nx\">raw</span><span class=\"o\">:</span> <span class=\"s1\">'9'</span> <span class=\"p\">}</span> <span class=\"p\">},</span>\n  <span class=\"nx\">right</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">'Literal'</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"nx\">raw</span><span class=\"o\">:</span> <span class=\"s1\">'42'</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</pre>\n<p>The JavaScript version of this library has been adapted from the JavaScript library JSEP which is (c) 2013 Stephen Oney, <a href=\"http://jsep.from.so/\" rel=\"nofollow\">http://jsep.from.so/</a> and has been published under the terms of the MIT license. The code has been ported to Python and a lot of utility functions have been added.</p>\n</div>\n<div id=\"grammar-features\">\n<h2>Grammar Features</h2>\n<ul>\n<li><dl>\n<dt>Symbolic Values</dt>\n<dd><ul>\n<li><dl>\n<dt>Constants</dt>\n<dd><ul>\n<li>such as <tt>`true`</tt>, <tt>`false`</tt> and <tt>`null`</tt></li>\n<li>configurable: Arbitrary constants can be added</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Identifiers</dt>\n<dd><ul>\n<li>may contain  $,_ or alphanumeric chacraters but may not start with a number</li>\n<li>can include property names and accessors, for example <cite>foo</cite>, <cite>bar.baz</cite>, <cite>foo[\u2018bar\u2019].baz</cite></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Various types of literals</dt>\n<dd><ul>\n<li><dl>\n<dt>Numeric Literals (<tt>`42.001`</tt>)</dt>\n<dd><ul>\n<li>decimal notation (<tt><span class=\"pre\">`-42`</span></tt>)</li>\n<li>exponential notation (<tt><span class=\"pre\">`6.7E-10`</span></tt>)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>String Literals (<tt>`\"Hello world\"`</tt>)</dt>\n<dd><ul>\n<li>can be either double or single quotes</li>\n<li>special characters can be escaped</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Array Literals (<tt>`[1, 2, 3]`</tt>)</dt>\n<dd><ul>\n<li>must be surrounded by square brackets</li>\n<li>can be nested</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Multiple types of operators</dt>\n<dd><ul>\n<li><dl>\n<dt>Unary operators</dt>\n<dd><ul>\n<li>by default <tt><span class=\"pre\">`-`</span></tt>, <tt>`!`</tt>, <tt>`~`</tt> and <tt>`+`</tt></li>\n<li>custom operators can be added, existing ones can be removed</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Binary operators</dt>\n<dd><ul>\n<li>precedence based</li>\n<li>by default contains all JavaScript operators</li>\n<li>custom ones can be added with custom precedences</li>\n<li>brackets can be used to override precedences</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>JavaScript Conditional operator</dt>\n<dd><ul>\n<li>single ternary operator <tt>`a ? b : c`</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Call Expressions</dt>\n<dd><ul>\n<li>must use round brackets</li>\n<li>for example <tt>`Math.cos(x)`</tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>The API in JavaScript and python are almost identical. The only differences come from the features of the languages themselves.</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">parser</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PreJsPy</span><span class=\"p\">();</span> <span class=\"c1\">// creates a new parser\n</span>\n<span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">getConstants</span><span class=\"p\">()</span> <span class=\"c1\">// returns an object containing constants\n</span><span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">setConstants</span><span class=\"p\">(</span><span class=\"nx\">d</span><span class=\"p\">)</span> <span class=\"c1\">// sets the current constants know to the parser\n</span>\n<span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">getUnaryOperators</span><span class=\"p\">()</span> <span class=\"c1\">// gets an array of unary operators\n</span><span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">setUnaryOperators</span><span class=\"p\">(</span><span class=\"nx\">ary</span><span class=\"p\">)</span> <span class=\"c1\">// sets an array of unary operators\n</span>\n<span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">getBinaryOperators</span><span class=\"p\">()</span> <span class=\"c1\">// returns an object mapping binary operators to their precedence\n</span><span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">setBinaryOperators</span><span class=\"p\">(</span><span class=\"nx\">ary</span><span class=\"p\">)</span> <span class=\"c1\">// sets the binary operators to precedence mapping\n</span>\n<span class=\"nx\">parser</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span> <span class=\"c1\">// parses a string into a AST</span>\n</pre>\n<pre><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">PreJsPy</span><span class=\"p\">()</span> <span class=\"c1\"># creates a new parser</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">getConstants</span><span class=\"p\">()</span> <span class=\"c1\"># returns an object containing constants</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">setConstants</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"c1\"># sets the current constants know to the parser</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">getUnaryOperators</span><span class=\"p\">()</span> <span class=\"c1\"># gets an array of unary operators</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">setUnaryOperators</span><span class=\"p\">(</span><span class=\"n\">ary</span><span class=\"p\">)</span> <span class=\"c1\"># sets an array of unary operators</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">getBinaryOperators</span><span class=\"p\">()</span> <span class=\"c1\"># returns an object mapping binary operators to their precedence</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">setBinaryOperators</span><span class=\"p\">(</span><span class=\"n\">ary</span><span class=\"p\">)</span> <span class=\"c1\"># sets the binary operators to precedence mapping</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"c1\"># parses a string into a AST</span>\n</pre>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>This package is published on the\n<a href=\"https://pypi.python.org/pypi/pre_js_py\" rel=\"nofollow\">Python Package Index</a>\nInstallation can be done simply via pip:</p>\n<pre>pip install pre_js_py\n</pre>\n<p>It is also published on\n<a href=\"https://www.npmjs.com/package/pre-js-py\" rel=\"nofollow\">Nodejs Package Manager</a>\nInstallation can be done simply via npm:</p>\n<pre>npm install pre-js-py\n</pre>\n</div>\n<div id=\"license-acknowledgements\">\n<h2>License + Acknowledgements</h2>\n<p>This module and associated documentation is Copyright (c) Tom Wiesing 2016\nand licensed under the MIT license, see <a href=\"LICENSE\" rel=\"nofollow\">license</a> for details.</p>\n</div>\n\n          </div>"}, "last_serial": 4917006, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "f0f56149155e0eccf15478416e5b39e1", "sha256": "bbc20bb60125dc8684cead13022e23dd77a96f4dabec8d2d1226f94a267fb65a"}, "downloads": -1, "filename": "pre_js_py-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0f56149155e0eccf15478416e5b39e1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 11452, "upload_time": "2016-11-25T15:37:34", "upload_time_iso_8601": "2016-11-25T15:37:34.411966Z", "url": "https://files.pythonhosted.org/packages/62/b8/cc0367444d4c13c3020b208377405ed48b594d88180e97a42b5a30d035df/pre_js_py-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc4e7c7d75f44748edde95e45c19e47e", "sha256": "1d421920008c1d5342b3ab9db451adad89050538862fbc00903419b4473874e2"}, "downloads": -1, "filename": "pre_js_py-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fc4e7c7d75f44748edde95e45c19e47e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8422, "upload_time": "2016-11-25T15:37:32", "upload_time_iso_8601": "2016-11-25T15:37:32.117096Z", "url": "https://files.pythonhosted.org/packages/93/f3/530b15625dd3a6d06b655ff0365119a00ab511ab9445327efdebd36d1eb2/pre_js_py-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "7378c1a19eb74c2fb1df709dd566d6ba", "sha256": "9b8462d4884edd9b7c1087786c7f87f8545781a974418f247945d3279147d6e3"}, "downloads": -1, "filename": "pre_js_py-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7378c1a19eb74c2fb1df709dd566d6ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8872, "upload_time": "2019-03-08T20:27:48", "upload_time_iso_8601": "2019-03-08T20:27:48.804667Z", "url": "https://files.pythonhosted.org/packages/82/2e/1f11a651deb16ce7a1ee476edfd31fd5822385ea6f49af7db15a0eb440f0/pre_js_py-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d658fdd1faf1014d2cbc1dfbcf8fa6e3", "sha256": "e25af075da814be0bb3845998e1cf2760ce4381ae6aede4a5016cc32c5af1ccb"}, "downloads": -1, "filename": "pre_js_py-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d658fdd1faf1014d2cbc1dfbcf8fa6e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9972, "upload_time": "2019-03-08T20:27:50", "upload_time_iso_8601": "2019-03-08T20:27:50.388435Z", "url": "https://files.pythonhosted.org/packages/9d/02/cb9250050b320328a1ce2cd7895c7c51ec0f8af072368105889c52290233/pre_js_py-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7378c1a19eb74c2fb1df709dd566d6ba", "sha256": "9b8462d4884edd9b7c1087786c7f87f8545781a974418f247945d3279147d6e3"}, "downloads": -1, "filename": "pre_js_py-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7378c1a19eb74c2fb1df709dd566d6ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8872, "upload_time": "2019-03-08T20:27:48", "upload_time_iso_8601": "2019-03-08T20:27:48.804667Z", "url": "https://files.pythonhosted.org/packages/82/2e/1f11a651deb16ce7a1ee476edfd31fd5822385ea6f49af7db15a0eb440f0/pre_js_py-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d658fdd1faf1014d2cbc1dfbcf8fa6e3", "sha256": "e25af075da814be0bb3845998e1cf2760ce4381ae6aede4a5016cc32c5af1ccb"}, "downloads": -1, "filename": "pre_js_py-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d658fdd1faf1014d2cbc1dfbcf8fa6e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9972, "upload_time": "2019-03-08T20:27:50", "upload_time_iso_8601": "2019-03-08T20:27:50.388435Z", "url": "https://files.pythonhosted.org/packages/9d/02/cb9250050b320328a1ce2cd7895c7c51ec0f8af072368105889c52290233/pre_js_py-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:55 2020"}