{"info": {"author": "Lecoutre Christophe, Szczepanski Nicolas", "author_email": "lecoutre@cril.fr, szczepanski@cril.fr", "bugtrack_url": null, "classifiers": ["Topic :: Education", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "<h1 align=\"center\"> PyCSP3 v1.0.x </h1>\n\nThis is the first (beta) version of PyCSP3, v1.0.x, a library in Python 3 (version 3.5 or later) for modeling constrained combinatorial problems.\nPyCSP3 is inspired from both [JvCSP3](http://www.xcsp.org/modeling) (a Java-based API) and [Numberjack](https://github.com/eomahony/Numberjack); it is also related to [CPpy](https://github.com/tias/cppy).\n\nWith PyCSP3, it is possible to generate instances of:\n1. CSPs (Constraint Satisfaction Problems)\n1. COPs (Constraint Optimization Problems)\n\nin format XCSP3; see [www.xcsp.org](www.xcsp.org).\n\nNote that:\n* the code is available on [Github](https://github.com/xcsp3team/pycsp3)\n* a [well-documented guide](https://github.com/xcsp3team/pycsp3/blob/master/guidePyCSP3.pdf) is available\n* PyCSP3 is available as a PyPi package [here](https://pypi.org/project/pycsp3/)\n\n**Important**: we plan to post a (hopefully) very stable version, 1.1.0, within a few weeks/months.\nCurrently, our main goal is :\n* to fix a few problems encountered with python 3.8 (with python 3.5, 3.6 and 3.7, things seem to look good)\n* to give more helpful messages when the user (modeler) writes something incorrect\n\nAt this stage, one can run the constraint solver 'AbsCon' (with the option -solve; see below).\nOf course, it is possible to launch on generated XCSP3 instances (files) any solver that recognizes the XCSP3 format.\nIn the medium term, we also plan to develop an interface that will allow users to pilot solvers with Python.\n\n# Installation\n\n## Installing PyCSP3\n\nInstallation instructions are currently given for Linux (instructions for Mac and Windows will be inserted soon)\n\nFor installing PyCSP3, you need to execute:\n\n```console\nsudo apt install python3-pip\nsudo pip3 install pycsp3\n```\n\n## Updating PyCSP3\n\nFor updating your version of PyCSP3, simply execute:\n\n```console\nsudo pip3 install --upgrade pycsp3\n```\n\n## Compiling PyCSP3 Models\n\nFor generating an XCSP3 file from a PyCSP3 model, you have to execute:\n\n```console\npython3 <file> [options]\n```\n\nwith:\n\n*  &lt;file&gt;: a Python file to be executed, describing a model in PyCSP3\n*  [options]: possible options to be used when compiling\n\nAmong the options, we find:\n\n* ```-data=<data_value>```: allows us to specify the data to be used by the model. It can be:\n    + elementary: -data=5\n    + a simple list: -data=[9,0,0,3,9]\n    + a named list: -data=[v=9,b=0,r=0,k=3,l=9]\n    + a JSON file: -data=Bibd-3-4-6.json\n\n    Data can then be directly used in the PyCSP3 model by means of a predefined object `data`.\n\n\n* ```-dataparser=<file>```: a Python file for reading/parsing data given under any arbitrary form (e.g., by a text file).\n     See Example Nonogram below, for an illustration.\n\n* ```-dataexport```: exports (saves) the data in JSON format.\n     See Example Nonogram below, for an illustration.\n\n* ```-variant=<variant_name>```: the name of a variant, to be used with function `variant()`.\n      See Example AllInterval below, for an illustration.\n\n* ```-solve```: attempts to solve the instance with the embedded solver 'AbsCon'. It requires that Java version 8 (at least) is installed.\n\n\n## Copying a pool of models\n\nPyCSP3 is accompanied by more than 100 models.\nTo get them in a subdirectory `problems` of your current directory, execute:\n\n```console\npython3 -m pycsp3\n```\n\n\n# Some Examples\n\nWe succinctly introduce a few PyCSP3 models, showing how to compile them with different options.\n\n\n## Example 1: in console mode\n\nOur first example shows how you can build basic models in console mode.\nIn this example, we just post two variable and two simple binary constraints.\n\n```console\n$ python3\nPython 3.5.2\n>>> from pycsp3 import *\n>>> x = Var(range(10))\n>>> y = Var(range(10))\n>>> satisfy(\n       x < y,\n       x + y > 15\n    )\n>>> compile()\n```\nNote that to get an XCSP3 file, we call `compile()`.\n\n\n## Example 2: Send+More=Money\n\nThis example shows how you can define a model when no data is required from the user.\nThis is the classical crypto-arithmetic puzzle 'Send+More=Money'.\n\n#### File **`SendMore.py`**\n\n```python\nfrom pycsp3 import *\n\nletters = VarArray(size=8, dom=range(10))\ns, e, n, d, m, o, r, y = letters\n\nsatisfy(\n    AllDifferent(letters),\n    s > 0,\n    m > 0,\n    [s, e, n, d] * [1000, 100, 10, 1] + [m, o, r, e] * [1000, 100, 10, 1] == [m, o, n, e, y] * [10000, 1000, 100, 10, 1]\n)\n```\n\nTo generate the XCSP3 instance (file), the command is:\n\n```console\npython3 SendMore.py\n```\n\nTo generate and solve (with AbsCon) the XCSP3 instance, the command is:\n\n```console\npython3 SendMore.py -solve\n```\n\n\n\n## Example 3: All-Interval Series\n\nThis example shows how you can simply specify an integer (as unique data) for a model.\nFor our illustration, we consider the problem [All-Interval Series](http://www.csplib.org/Problems/prob007/).\n\nA classical model is:\n\n#### File **`AllInterval.py`** (version 1)\n\n```python\nn = data.n\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\nsatisfy(\n    # notes must occur once, and so form a permutation\n    AllDifferent(x),\n\n    # intervals between neighbouring notes must form a permutation\n    AllDifferent(abs(x[i] - x[i + 1]) for i in range(n - 1)),\n\n    # tag(symmetry-breaking)\n    x[0] < x[n - 1]\n)\n```\n\nNote the presence of a tag `symmetry-breaking` that will be directly integrated into the XCSP3 file generated by the following command:\n\n```console\npython3 AllInterval.py -data=5\n```\n\nSuppose that you would prefer to declare a second array of variables for representing successive distances.\nThis would give:\n\n\n#### File **`AllInterval.py`** (version 2)\n\n```python\nn = data.n\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\n# y[i] is the distance between x[i] and x[i+1]\ny = VarArray(size=n - 1, dom=range(1, n))\n\nsatisfy(\n    # notes must occur once, and so form a permutation\n    AllDifferent(x),\n\n    # intervals between neighbouring notes must form a permutation\n    AllDifferent(y),\n\n    # computing distances\n    [y[i] == abs(x[i] - x[i + 1]) for i in range(n - 1)],\n\n    # tag(symmetry-breaking)\n    [x[0] < x[n - 1], y[0] < y[1]]\n)\n```\n\nHowever, sometimes, it may be relevant to combine different variants of a model in the same file.\nIn our example, this would give:\n\n#### File **`AllInterval.py`** (version 3)\n\n```python\nn = data.n\n\n# x[i] is the ith note of the series\nx = VarArray(size=n, dom=range(n))\n\nif not variant():\n\n    satisfy(\n        # notes must occur once, and so form a permutation\n        AllDifferent(x),\n\n        # intervals between neighbouring notes must form a permutation\n        AllDifferent(abs(x[i] - x[i + 1]) for i in range(n - 1)),\n\n        # tag(symmetry-breaking)\n        x[0] < x[n - 1]\n    )\n\nelif variant(\"aux\"):\n\n    # y[i] is the distance between x[i] and x[i+1]\n    y = VarArray(size=n - 1, dom=range(1, n))\n\n    satisfy(\n        # notes must occur once, and so form a permutation\n        AllDifferent(x),\n\n        # intervals between neighbouring notes must form a permutation\n        AllDifferent(y),\n\n        # computing distances\n        [y[i] == abs(x[i] - x[i + 1]) for i in range(n - 1)],\n\n        # tag(symmetry-breaking)\n        [x[0] < x[n - 1], y[0] < y[1]]\n    )\n```\n\nFor compiling the main model (variant), the command is:\n\n```console\npython3 AllInterval.py -data=5\n```\n\nFor compiling the second model variant, using the option `-variant`, the command is:\n\n```console\npython3 AllInterval.py -data=5 -variant=aux\n```\n\nTo generate and solve (with AbsCon) the instance of order 10 and variant 'aux', the command is:\n\n```console\npython3 AllInterval.py -data=10 -variant=aux -solve\n```\n\n\n## Example 4: BIBD\n\nThis example shows how you can specify a list of integers to be used as data for a model.\nFor our illustration, we consider the problem [BIBD](http://www.csplib.org/Problems/prob028/).\nWe need five integers `v, b, r, k, l` for specifying a unique instance (possibly, `b` and `r` can be set to 0, so that these values are automatically computed according to a template for this problem).\nThe model is:\n\n#### File **`Bibd.py`**\n\n```python\nfrom pycsp3 import *\n\nv, b, r, k, l = data.v, data.b, data.r, data.k, data.l\nb = (l * v * (v - 1)) // (k * (k - 1)) if b == 0 else b\nr = (l * (v - 1)) // (k - 1) if r == 0 else r\n\n# x[i][j] is the value of the matrix at row i and column j\nx = VarArray(size=[v, b], dom={0, 1})\n\nsatisfy(\n    # constraints on rows\n    [Sum(row) == r for row in x],\n\n    # constraints on columns\n    [Sum(col) == k for col in columns(x)],\n\n    # scalar constraints with respect to lambda\n    [row1 * row2 == l for (row1, row2) in combinations(x, 2)]\n)\n```\n\nTo generate an XCSP3 instance (file), we can for example execute a command like:\n\n```console\npython3 Bibd.py -data=[9,0,0,3,9]\n```\n\nWith some command interpreters (shells), you may have to escape the characters '[' and ']', which gives:\n\n```console\npython3 Bibd.py -data=\\[9,0,0,3,9\\]\n```\n\nCertainly, you wonder how values are associated with fields of `data`.\nActually, the order of occurrences of these fields in the model is automatically used.\nThe first occurrence of a field of `data` is `data.v`, then it is `data.b`, and so on.\nSo, we have `data.v=9`, `data.b=0`, ...\n\nHowever, you can relax this requirement by using names when specifying data, as for example, in:\n\n```console\npython3 Bibd.py -data=[k=3,l=9,b=0,r=0,v=9]\n```\n\n\n## Example 5: Rack Configuration\n\nThis example shows how you can specify a JSON file to be used as data for a model.\nFor our illustration, we consider the problem [Rack Configuration](http://www.csplib.org/Problems/prob031/).\nThe data (for a specific instance) are then initially given in a JSON file, as for example:\n\n#### File **`Rack_r2.json`**\n\n```json\n{\n    \"nRacks\": 10,\n    \"models\": [[150,8,150],[200,16,200]],\n    \"cardTypes\": [[20,20],[40,8],[50,4],[75,2]]\n}\n```\n\nIn the following model, we directly use the object `data` whose fields are exactly those of the main object in the JSON file.\n\n#### File **`Rack.py`**\n\n```python\nfrom pycsp3 import *\n\nnRacks, models, cardTypes = data.nRacks, data.models, data.cardTypes\n\n# we add first a dummy model (0,0,0)\nmodels = [(0, 0, 0)] + [tuple(model) for model in models]\nnModels, nTypes = len(models), len(cardTypes)\n\npowers, sizes, costs = [row[0] for row in models], [row[1] for row in models], [row[2] for row in models]\ncardPowers, cardDemands = [row[0] for row in cardTypes], [row[1] for row in cardTypes]\n\n# m[i] is the model used for the ith rack\nm = VarArray(size=nRacks, dom=range(nModels))\n\n# nc[i][j] is the number of cards of type j put in the ith rack\nnc = VarArray(size=[nRacks, nTypes], dom=lambda i, j: range(min(max(sizes), cardDemands[j]) + 1))\n\n# p[i] is the power of the ith rack\np = VarArray(size=nRacks, dom=set(powers))\n\n# s[i] is the size of the ith rack\ns = VarArray(size=nRacks, dom=set(sizes))\n\n# c[i] is the cost of the ith rack\nc = VarArray(size=nRacks, dom=set(costs))\n\nsatisfy(\n    # linking model and power of the ith rack\n    [(m[i], p[i]) in enumerate(powers) for i in range(nRacks)],\n\n    # linking model and size of the ith rack\n    [(m[i], s[i]) in enumerate(sizes) for i in range(nRacks)],\n\n    # linking model and cost of the ith rack\n    [(m[i], c[i]) in enumerate(costs) for i in range(nRacks)],\n\n    # connector-capacity constraints\n    [Sum(nc[i]) <= s[i] for i in range(nRacks)],\n\n    # power-capacity constraints\n    [nc[i] * cardPowers <= p[i] for i in range(nRacks)],\n\n    # demand constraints\n    [Sum(nc[:, j]) == cardDemands[j] for j in range(nTypes)],\n\n    # tag(symmetry-breaking)\n    [\n        Decreasing(m),\n        (m[0] != m[1]) | (nc[0][0] >= nc[1][0])\n    ]\n)\n\nminimize(\n    # minimizing the total cost paid for all racks\n    Sum(c)\n)\n```\n\nTo generate an XCSP3 instance (file), we execute the command:\n\n```console\npython3 Rack.py -data=Rack_r2.json\n```\n\nIt is important to note that data in JSON can be arbitrarily structured, as for example:\n\n\n#### File **`Rack_r2b.json`**\n\n```json\n{\n    \"nRacks\": 10,\n    \"rackModels\": [\n\t{\"power\":150,\"nConnectors\":8,\"price\":150},\n\t{\"power\":200,\"nConnectors\":16,\"price\":200}\n    ],\n    \"cardTypes\": [\n\t{\"power\":20,\"demand\":20},\n\t{\"power\":40,\"demand\":8},\n\t{\"power\":50,\"demand\":4},\n\t{\"power\":75,\"demand\":2}\n    ]\n}\n  ```\n\nThe following model uses this new structure of data.\n\n\n#### File **`Rack2.py`**\n\n```python\nfrom pycsp3 import *\n\nnRacks, models, cardTypes = data.nRacks, data.rackModels, data.cardTypes\n\n# we add first a dummy model (0,0,0)\nmodels = [{'power': 0, 'nConnectors': 0, 'price': 0}] + models\nnModels, nTypes = len(models), len(cardTypes)\n\npowers, sizes, costs = [model['power'] for model in models], [model['nConnectors'] for model in models], [model['price'] for model in models]\ncardPowers, cardDemands = [cardType['power'] for cardType in cardTypes], [cardType['demand'] for cardType in cardTypes]\n\n# m[i] is the model used for the ith rack\nm = VarArray(size=nRacks, dom=range(nModels))\n\n# nc[i][j] is the number of cards of type j put in the ith rack\nnc = VarArray(size=[nRacks, nTypes], dom=lambda i, j: range(min(max(sizes), cardDemands[j]) + 1))\n\n# p[i] is the power of the ith rack\np = VarArray(size=nRacks, dom=set(powers))\n\n# s[i] is the size of the ith rack\ns = VarArray(size=nRacks, dom=set(sizes))\n\n# c[i] is the cost of the ith rack\nc = VarArray(size=nRacks, dom=set(costs))\n\nsatisfy(\n    # linking model and power of the ith rack\n    [(m[i], p[i]) in enumerate(powers) for i in range(nRacks)],\n\n    # linking model and size of the ith rack\n    [(m[i], s[i]) in enumerate(sizes) for i in range(nRacks)],\n\n    # linking model and cost of the ith rack\n    [(m[i], c[i]) in enumerate(costs) for i in range(nRacks)],\n\n    # connector-capacity constraints\n    [Sum(nc[i]) <= s[i] for i in range(nRacks)],\n\n    # power-capacity constraints\n    [nc[i] * cardPowers <= p[i] for i in range(nRacks)],\n\n    # demand constraints\n    [Sum(nc[:, j]) == cardDemands[j] for j in range(nTypes)],\n\n    # tag(symmetry-breaking)\n    [\n        Decreasing(m),\n        (m[0] != m[1]) | (nc[0][0] >= nc[1][0])\n    ]\n)\n\nminimize(\n    # minimizing the total cost paid for all racks\n    Sum(c)\n)\n```\n\nTo generate an XCSP3 instance (file), we execute the command:\n\n```console\npython3 Rack2.py -data=Rack_r2b.json\n```\n\n\n## Example 6: Nonogram\n\nThis example shows how you can use an auxiliary Python file for parsing data that are not initially given under JSON format.\nFor our illustration, we consider the problem [Nonogram](http://www.csplib.org/Problems/prob012/).\nThe data (for a specific Nonogram puzzle) are initially given in a text file as follows:\n1. a line stating the numbers of rows and columns,\n1. then, for each row a line stating the number of blocks followed by the sizes of all these blocks (on the same line),\n1. then, for each column a line stating the number of blocks followed by the sizes of all these blocks (on the same line).\n\nBelow, here is an example of such a text file.\n\n#### File **`Nonogram_example.txt`**\n```\n24 24\n0\n1\t5\n2\t3 3\n2\t1 2\n2\t2 1\n2\t1 1\n2\t3 3\n3\t1 5 1\n3\t1 1 1\n3\t2 1 1\n3\t1 1 2\n3\t3 1 3\n3\t1 3 1\n3\t1 1 1\n3\t2 1 2\n3\t1 1 1\n1\t5\n3\t1 1 1\n3\t1 1 1\n3\t1 1 1\n3\t5 1 1\n2\t1 2\n3\t2 2 4\n2\t4 9\n\n0\n0\n0\n1\t1\n1\t2\n1\t2\n2\t6 1\n3\t3 1 3\n3\t1 1 4\n4\t2 1 1 7\n5\t1 1 1 1 1\n3\t1 12 1\n5\t1 1 1 1 1\n4\t2 1 1 7\n4\t1 1 4 1\n4\t2 1 2 2\n2\t8 3\n2\t1 1\n2\t1 2\n1\t4\n1\t3\n1\t2\n1\t1\n0\n```\n\nFirst, we need to write a piece of code in Python for building an object `data` that will be directly used in our model.\nWe have first to import everything (*) from `pycsp3.problems.data.dataparser`.\nWe can then add any new arbitrary field to the object `data`.\nThis is what we do below with two fields called `rowPatterns` and `colPatterns`.\nThese two fields are defined as two-dimensional arrays (lists) of integers, defining the sizes of blocks.\nThe function `next_int()` can be called for reading the next integer in a text file, which will be specified on the command line (see later).\n\n#### File **`Nonogram_Parser.py`**\n```python\nfrom pycsp3.problems.data.dataparser import *\n\nnRows, nCols = next_int(), next_int()\ndata.rowPatterns = [[next_int() for _ in range(next_int())] for _ in range(nRows)]\ndata.colPatterns = [[next_int() for _ in range(next_int())] for _ in range(nRows)]\n```\n\nThen, we just write the model by getting data from the object `data`.\nThe model is totally independent of the way data were initially given (from a text file or a JSON file, for example).\nIn the code below, note how an object `Automaton` is defined from a specified pattern (list of blocks).\n Also, for a `regular` constraint, we just write something like `scope in automaton`.\n Finally, `x[:, j]` denotes the jth column of `x`.\n\n#### File **`Nonogram.py`**\n```python\nfrom pycsp3 import *\n\ndef automaton(pattern):\n    q = Automaton.q  # for building state names\n    transitions = []\n    if len(pattern) == 0:\n        n_states = 1\n        transitions.append((q(0), 0, q(0)))\n    else:\n        n_states = sum(pattern) + len(pattern)\n        num = 0\n        for i in range(len(pattern)):\n            transitions.append((q(num), 0, q(num)))\n            for j in range(pattern[i]):\n                transitions.append((q(num), 1, q(num + 1)))\n                num += 1\n            if i < len(pattern) - 1:\n                transitions.append((q(num), 0, q(num + 1)))\n                num += 1\n        transitions.append((q(num), 0, q(num)))\n    return Automaton(start=q(0), final=q(n_states - 1), transitions=transitions)\n\nrows, cols = data.rowPatterns, data.colPatterns\nnRows, nCols = len(rows), len(cols)\n\n# \u00a0x[i][j] is 1 iff the cell at row i and col j is colored in black\nx = VarArray(size=[nRows, nCols], dom={0, 1})\n\nsatisfy(\n    [x[i] in automaton(rows[i]) for i in range(nRows)],\n\n    [x[:, j] in automaton(cols[j]) for j in range(nCols)]\n)\n```\n\nTo generate the XCSP3 instance (file), we just need to specify the name of the text file (option `-data`) and the name of the Python parser (option `-dataparser`).\n\n```console\npython3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py\n```\n\nMaybe, you think that it would be simpler to have directly the data in JSON file.\nYou can generate such a file with the option `-dataexport`.\nThe command is as follows:\n\n```console\npython3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py -dataexport\n```\n\nA file `Nonogram_example.json` is generated, whose content is:\n\n```json\n{\n \"colPatterns\":[[],[],[],[1],[2],[2],[6,1],[3,1,3],[1,1,4],[2,1,1,7],[1,1,1,1,1],[1,12,1],[1,1,1,1,1],[2,1,1,7],[1,1,4,1],[2,1,2,2],[8,3],[1,1],[1,2],[4],[3],[2],[1],[]],\n \"rowPatterns\":[[],[5],[3,3],[1,2],[2,1],[1,1],[3,3],[1,5,1],[1,1,1],[2,1,1],[1,1,2],[3,1,3],[1,3,1],[1,1,1],[2,1,2],[1,1,1],[5],[1,1,1],[1,1,1],[1,1,1],[5,1,1],[1,2],[2,2,4],[4,9]]\n}\n```\n\nWith this new file, you can directly generate the XCSP3 file with:\n ```console\npython3 Nonogram.py -data=Nonogram_example.json\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "IA CP constraint modeling", "license": "GPL V3", "maintainer": "Szczepanski Nicolas", "maintainer_email": "szczepanski@cril.fr", "name": "pycsp3", "package_url": "https://pypi.org/project/pycsp3/", "platform": "LINUX", "project_url": "https://pypi.org/project/pycsp3/", "project_urls": null, "release_url": "https://pypi.org/project/pycsp3/1.0.11/", "requires_dist": ["lxml", "py4j"], "requires_python": ">=3,!=3.8.*,!=3.9.*", "summary": "Modeling Constrained Combinatorial Problems in Python", "version": "1.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1> PyCSP3 v1.0.x </h1>\n<p>This is the first (beta) version of PyCSP3, v1.0.x, a library in Python 3 (version 3.5 or later) for modeling constrained combinatorial problems.\nPyCSP3 is inspired from both <a href=\"http://www.xcsp.org/modeling\" rel=\"nofollow\">JvCSP3</a> (a Java-based API) and <a href=\"https://github.com/eomahony/Numberjack\" rel=\"nofollow\">Numberjack</a>; it is also related to <a href=\"https://github.com/tias/cppy\" rel=\"nofollow\">CPpy</a>.</p>\n<p>With PyCSP3, it is possible to generate instances of:</p>\n<ol>\n<li>CSPs (Constraint Satisfaction Problems)</li>\n<li>COPs (Constraint Optimization Problems)</li>\n</ol>\n<p>in format XCSP3; see <a href=\"www.xcsp.org\" rel=\"nofollow\">www.xcsp.org</a>.</p>\n<p>Note that:</p>\n<ul>\n<li>the code is available on <a href=\"https://github.com/xcsp3team/pycsp3\" rel=\"nofollow\">Github</a></li>\n<li>a <a href=\"https://github.com/xcsp3team/pycsp3/blob/master/guidePyCSP3.pdf\" rel=\"nofollow\">well-documented guide</a> is available</li>\n<li>PyCSP3 is available as a PyPi package <a href=\"https://pypi.org/project/pycsp3/\" rel=\"nofollow\">here</a></li>\n</ul>\n<p><strong>Important</strong>: we plan to post a (hopefully) very stable version, 1.1.0, within a few weeks/months.\nCurrently, our main goal is :</p>\n<ul>\n<li>to fix a few problems encountered with python 3.8 (with python 3.5, 3.6 and 3.7, things seem to look good)</li>\n<li>to give more helpful messages when the user (modeler) writes something incorrect</li>\n</ul>\n<p>At this stage, one can run the constraint solver 'AbsCon' (with the option -solve; see below).\nOf course, it is possible to launch on generated XCSP3 instances (files) any solver that recognizes the XCSP3 format.\nIn the medium term, we also plan to develop an interface that will allow users to pilot solvers with Python.</p>\n<h1>Installation</h1>\n<h2>Installing PyCSP3</h2>\n<p>Installation instructions are currently given for Linux (instructions for Mac and Windows will be inserted soon)</p>\n<p>For installing PyCSP3, you need to execute:</p>\n<pre><span class=\"go\">sudo apt install python3-pip</span>\n<span class=\"go\">sudo pip3 install pycsp3</span>\n</pre>\n<h2>Updating PyCSP3</h2>\n<p>For updating your version of PyCSP3, simply execute:</p>\n<pre><span class=\"go\">sudo pip3 install --upgrade pycsp3</span>\n</pre>\n<h2>Compiling PyCSP3 Models</h2>\n<p>For generating an XCSP3 file from a PyCSP3 model, you have to execute:</p>\n<pre><span class=\"go\">python3 &lt;file&gt; [options]</span>\n</pre>\n<p>with:</p>\n<ul>\n<li>&lt;file&gt;: a Python file to be executed, describing a model in PyCSP3</li>\n<li>[options]: possible options to be used when compiling</li>\n</ul>\n<p>Among the options, we find:</p>\n<ul>\n<li>\n<p><code>-data=&lt;data_value&gt;</code>: allows us to specify the data to be used by the model. It can be:</p>\n<ul>\n<li>elementary: -data=5</li>\n<li>a simple list: -data=[9,0,0,3,9]</li>\n<li>a named list: -data=[v=9,b=0,r=0,k=3,l=9]</li>\n<li>a JSON file: -data=Bibd-3-4-6.json</li>\n</ul>\n<p>Data can then be directly used in the PyCSP3 model by means of a predefined object <code>data</code>.</p>\n</li>\n<li>\n<p><code>-dataparser=&lt;file&gt;</code>: a Python file for reading/parsing data given under any arbitrary form (e.g., by a text file).\nSee Example Nonogram below, for an illustration.</p>\n</li>\n<li>\n<p><code>-dataexport</code>: exports (saves) the data in JSON format.\nSee Example Nonogram below, for an illustration.</p>\n</li>\n<li>\n<p><code>-variant=&lt;variant_name&gt;</code>: the name of a variant, to be used with function <code>variant()</code>.\nSee Example AllInterval below, for an illustration.</p>\n</li>\n<li>\n<p><code>-solve</code>: attempts to solve the instance with the embedded solver 'AbsCon'. It requires that Java version 8 (at least) is installed.</p>\n</li>\n</ul>\n<h2>Copying a pool of models</h2>\n<p>PyCSP3 is accompanied by more than 100 models.\nTo get them in a subdirectory <code>problems</code> of your current directory, execute:</p>\n<pre><span class=\"go\">python3 -m pycsp3</span>\n</pre>\n<h1>Some Examples</h1>\n<p>We succinctly introduce a few PyCSP3 models, showing how to compile them with different options.</p>\n<h2>Example 1: in console mode</h2>\n<p>Our first example shows how you can build basic models in console mode.\nIn this example, we just post two variable and two simple binary constraints.</p>\n<pre><span class=\"gp\">$</span> python3\n<span class=\"go\">Python 3.5.2</span>\n<span class=\"gp\">&gt;</span>&gt;&gt; from pycsp3 import *\n<span class=\"gp\">&gt;</span>&gt;&gt; <span class=\"nv\">x</span> <span class=\"o\">=</span> Var<span class=\"o\">(</span>range<span class=\"o\">(</span><span class=\"m\">10</span><span class=\"o\">))</span>\n<span class=\"gp\">&gt;</span>&gt;&gt; <span class=\"nv\">y</span> <span class=\"o\">=</span> Var<span class=\"o\">(</span>range<span class=\"o\">(</span><span class=\"m\">10</span><span class=\"o\">))</span>\n<span class=\"gp\">&gt;</span>&gt;&gt; satisfy<span class=\"o\">(</span>\n<span class=\"go\">       x &lt; y,</span>\n<span class=\"go\">       x + y &gt; 15</span>\n<span class=\"go\">    )</span>\n<span class=\"gp\">&gt;</span>&gt;&gt; compile<span class=\"o\">()</span>\n</pre>\n<p>Note that to get an XCSP3 file, we call <code>compile()</code>.</p>\n<h2>Example 2: Send+More=Money</h2>\n<p>This example shows how you can define a model when no data is required from the user.\nThis is the classical crypto-arithmetic puzzle 'Send+More=Money'.</p>\n<h4>File <strong><code>SendMore.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">letters</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">),</span>\n    <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">m</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">[</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To generate the XCSP3 instance (file), the command is:</p>\n<pre><span class=\"go\">python3 SendMore.py</span>\n</pre>\n<p>To generate and solve (with AbsCon) the XCSP3 instance, the command is:</p>\n<pre><span class=\"go\">python3 SendMore.py -solve</span>\n</pre>\n<h2>Example 3: All-Interval Series</h2>\n<p>This example shows how you can simply specify an integer (as unique data) for a model.\nFor our illustration, we consider the problem <a href=\"http://www.csplib.org/Problems/prob007/\" rel=\"nofollow\">All-Interval Series</a>.</p>\n<p>A classical model is:</p>\n<h4>File <strong><code>AllInterval.py</code></strong> (version 1)</h4>\n<pre><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">n</span>\n\n<span class=\"c1\"># x[i] is the ith note of the series</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"c1\"># notes must occur once, and so form a permutation</span>\n    <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># intervals between neighbouring notes must form a permutation</span>\n    <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n\n    <span class=\"c1\"># tag(symmetry-breaking)</span>\n    <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note the presence of a tag <code>symmetry-breaking</code> that will be directly integrated into the XCSP3 file generated by the following command:</p>\n<pre><span class=\"go\">python3 AllInterval.py -data=5</span>\n</pre>\n<p>Suppose that you would prefer to declare a second array of variables for representing successive distances.\nThis would give:</p>\n<h4>File <strong><code>AllInterval.py</code></strong> (version 2)</h4>\n<pre><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">n</span>\n\n<span class=\"c1\"># x[i] is the ith note of the series</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># y[i] is the distance between x[i] and x[i+1]</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"c1\"># notes must occur once, and so form a permutation</span>\n    <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># intervals between neighbouring notes must form a permutation</span>\n    <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># computing distances</span>\n    <span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># tag(symmetry-breaking)</span>\n    <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>However, sometimes, it may be relevant to combine different variants of a model in the same file.\nIn our example, this would give:</p>\n<h4>File <strong><code>AllInterval.py</code></strong> (version 3)</h4>\n<pre><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">n</span>\n\n<span class=\"c1\"># x[i] is the ith note of the series</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">variant</span><span class=\"p\">():</span>\n\n    <span class=\"n\">satisfy</span><span class=\"p\">(</span>\n        <span class=\"c1\"># notes must occur once, and so form a permutation</span>\n        <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n\n        <span class=\"c1\"># intervals between neighbouring notes must form a permutation</span>\n        <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n\n        <span class=\"c1\"># tag(symmetry-breaking)</span>\n        <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">elif</span> <span class=\"n\">variant</span><span class=\"p\">(</span><span class=\"s2\">\"aux\"</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># y[i] is the distance between x[i] and x[i+1]</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n    <span class=\"n\">satisfy</span><span class=\"p\">(</span>\n        <span class=\"c1\"># notes must occur once, and so form a permutation</span>\n        <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span>\n\n        <span class=\"c1\"># intervals between neighbouring notes must form a permutation</span>\n        <span class=\"n\">AllDifferent</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">),</span>\n\n        <span class=\"c1\"># computing distances</span>\n        <span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>\n\n        <span class=\"c1\"># tag(symmetry-breaking)</span>\n        <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>For compiling the main model (variant), the command is:</p>\n<pre><span class=\"go\">python3 AllInterval.py -data=5</span>\n</pre>\n<p>For compiling the second model variant, using the option <code>-variant</code>, the command is:</p>\n<pre><span class=\"go\">python3 AllInterval.py -data=5 -variant=aux</span>\n</pre>\n<p>To generate and solve (with AbsCon) the instance of order 10 and variant 'aux', the command is:</p>\n<pre><span class=\"go\">python3 AllInterval.py -data=10 -variant=aux -solve</span>\n</pre>\n<h2>Example 4: BIBD</h2>\n<p>This example shows how you can specify a list of integers to be used as data for a model.\nFor our illustration, we consider the problem <a href=\"http://www.csplib.org/Problems/prob028/\" rel=\"nofollow\">BIBD</a>.\nWe need five integers <code>v, b, r, k, l</code> for specifying a unique instance (possibly, <code>b</code> and <code>r</code> can be set to 0, so that these values are automatically computed according to a template for this problem).\nThe model is:</p>\n<h4>File <strong><code>Bibd.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">l</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">*</span> <span class=\"n\">v</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">b</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">r</span>\n\n<span class=\"c1\"># x[i][j] is the value of the matrix at row i and column j</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">],</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"c1\"># constraints on rows</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">],</span>\n\n    <span class=\"c1\"># constraints on columns</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">columns</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># scalar constraints with respect to lambda</span>\n    <span class=\"p\">[</span><span class=\"n\">row1</span> <span class=\"o\">*</span> <span class=\"n\">row2</span> <span class=\"o\">==</span> <span class=\"n\">l</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">row1</span><span class=\"p\">,</span> <span class=\"n\">row2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To generate an XCSP3 instance (file), we can for example execute a command like:</p>\n<pre><span class=\"go\">python3 Bibd.py -data=[9,0,0,3,9]</span>\n</pre>\n<p>With some command interpreters (shells), you may have to escape the characters '[' and ']', which gives:</p>\n<pre><span class=\"go\">python3 Bibd.py -data=\\[9,0,0,3,9\\]</span>\n</pre>\n<p>Certainly, you wonder how values are associated with fields of <code>data</code>.\nActually, the order of occurrences of these fields in the model is automatically used.\nThe first occurrence of a field of <code>data</code> is <code>data.v</code>, then it is <code>data.b</code>, and so on.\nSo, we have <code>data.v=9</code>, <code>data.b=0</code>, ...</p>\n<p>However, you can relax this requirement by using names when specifying data, as for example, in:</p>\n<pre><span class=\"go\">python3 Bibd.py -data=[k=3,l=9,b=0,r=0,v=9]</span>\n</pre>\n<h2>Example 5: Rack Configuration</h2>\n<p>This example shows how you can specify a JSON file to be used as data for a model.\nFor our illustration, we consider the problem <a href=\"http://www.csplib.org/Problems/prob031/\" rel=\"nofollow\">Rack Configuration</a>.\nThe data (for a specific instance) are then initially given in a JSON file, as for example:</p>\n<h4>File <strong><code>Rack_r2.json</code></strong></h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"nRacks\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"models\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">150</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">150</span><span class=\"p\">],[</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">]],</span>\n    <span class=\"nt\">\"cardTypes\"</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],[</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">],[</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">75</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In the following model, we directly use the object <code>data</code> whose fields are exactly those of the main object in the JSON file.</p>\n<h4>File <strong><code>Rack.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">cardTypes</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">cardTypes</span>\n\n<span class=\"c1\"># we add first a dummy model (0,0,0)</span>\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">]</span>\n<span class=\"n\">nModels</span><span class=\"p\">,</span> <span class=\"n\">nTypes</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cardTypes</span><span class=\"p\">)</span>\n\n<span class=\"n\">powers</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">,</span> <span class=\"n\">costs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">]</span>\n<span class=\"n\">cardPowers</span><span class=\"p\">,</span> <span class=\"n\">cardDemands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cardTypes</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cardTypes</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># m[i] is the model used for the ith rack</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nModels</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># nc[i][j] is the number of cards of type j put in the ith rack</span>\n<span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">nTypes</span><span class=\"p\">],</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">),</span> <span class=\"n\">cardDemands</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># p[i] is the power of the ith rack</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">powers</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># s[i] is the size of the ith rack</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># c[i] is the cost of the ith rack</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">))</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"c1\"># linking model and power of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">powers</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># linking model and size of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># linking model and cost of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># connector-capacity constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># power-capacity constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">cardPowers</span> <span class=\"o\">&lt;=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># demand constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[:,</span> <span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"n\">cardDemands</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nTypes</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># tag(symmetry-breaking)</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Decreasing</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">minimize</span><span class=\"p\">(</span>\n    <span class=\"c1\"># minimizing the total cost paid for all racks</span>\n    <span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To generate an XCSP3 instance (file), we execute the command:</p>\n<pre><span class=\"go\">python3 Rack.py -data=Rack_r2.json</span>\n</pre>\n<p>It is important to note that data in JSON can be arbitrarily structured, as for example:</p>\n<h4>File <strong><code>Rack_r2b.json</code></strong></h4>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"nRacks\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"rackModels\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">150</span><span class=\"p\">,</span><span class=\"nt\">\"nConnectors\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"nt\">\"price\"</span><span class=\"p\">:</span><span class=\"mi\">150</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"nt\">\"nConnectors\"</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"nt\">\"price\"</span><span class=\"p\">:</span><span class=\"mi\">200</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"cardTypes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"nt\">\"demand\"</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"nt\">\"demand\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"nt\">\"demand\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">},</span>\n\t<span class=\"p\">{</span><span class=\"nt\">\"power\"</span><span class=\"p\">:</span><span class=\"mi\">75</span><span class=\"p\">,</span><span class=\"nt\">\"demand\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The following model uses this new structure of data.</p>\n<h4>File <strong><code>Rack2.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">cardTypes</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">rackModels</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">cardTypes</span>\n\n<span class=\"c1\"># we add first a dummy model (0,0,0)</span>\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'power'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'nConnectors'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}]</span> <span class=\"o\">+</span> <span class=\"n\">models</span>\n<span class=\"n\">nModels</span><span class=\"p\">,</span> <span class=\"n\">nTypes</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cardTypes</span><span class=\"p\">)</span>\n\n<span class=\"n\">powers</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">,</span> <span class=\"n\">costs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'power'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'nConnectors'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'price'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">]</span>\n<span class=\"n\">cardPowers</span><span class=\"p\">,</span> <span class=\"n\">cardDemands</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cardType</span><span class=\"p\">[</span><span class=\"s1\">'power'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cardType</span> <span class=\"ow\">in</span> <span class=\"n\">cardTypes</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">cardType</span><span class=\"p\">[</span><span class=\"s1\">'demand'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cardType</span> <span class=\"ow\">in</span> <span class=\"n\">cardTypes</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># m[i] is the model used for the ith rack</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nModels</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># nc[i][j] is the number of cards of type j put in the ith rack</span>\n<span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">nTypes</span><span class=\"p\">],</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">),</span> <span class=\"n\">cardDemands</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># p[i] is the power of the ith rack</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">powers</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># s[i] is the size of the ith rack</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># c[i] is the cost of the ith rack</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">nRacks</span><span class=\"p\">,</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">))</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"c1\"># linking model and power of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">powers</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># linking model and size of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sizes</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># linking model and cost of the ith rack</span>\n    <span class=\"p\">[(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># connector-capacity constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">&lt;=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># power-capacity constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">cardPowers</span> <span class=\"o\">&lt;=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRacks</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># demand constraints</span>\n    <span class=\"p\">[</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[:,</span> <span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"n\">cardDemands</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nTypes</span><span class=\"p\">)],</span>\n\n    <span class=\"c1\"># tag(symmetry-breaking)</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Decreasing</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">m</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">nc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">minimize</span><span class=\"p\">(</span>\n    <span class=\"c1\"># minimizing the total cost paid for all racks</span>\n    <span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To generate an XCSP3 instance (file), we execute the command:</p>\n<pre><span class=\"go\">python3 Rack2.py -data=Rack_r2b.json</span>\n</pre>\n<h2>Example 6: Nonogram</h2>\n<p>This example shows how you can use an auxiliary Python file for parsing data that are not initially given under JSON format.\nFor our illustration, we consider the problem <a href=\"http://www.csplib.org/Problems/prob012/\" rel=\"nofollow\">Nonogram</a>.\nThe data (for a specific Nonogram puzzle) are initially given in a text file as follows:</p>\n<ol>\n<li>a line stating the numbers of rows and columns,</li>\n<li>then, for each row a line stating the number of blocks followed by the sizes of all these blocks (on the same line),</li>\n<li>then, for each column a line stating the number of blocks followed by the sizes of all these blocks (on the same line).</li>\n</ol>\n<p>Below, here is an example of such a text file.</p>\n<h4>File <strong><code>Nonogram_example.txt</code></strong></h4>\n<pre><code>24 24\n0\n1\t5\n2\t3 3\n2\t1 2\n2\t2 1\n2\t1 1\n2\t3 3\n3\t1 5 1\n3\t1 1 1\n3\t2 1 1\n3\t1 1 2\n3\t3 1 3\n3\t1 3 1\n3\t1 1 1\n3\t2 1 2\n3\t1 1 1\n1\t5\n3\t1 1 1\n3\t1 1 1\n3\t1 1 1\n3\t5 1 1\n2\t1 2\n3\t2 2 4\n2\t4 9\n\n0\n0\n0\n1\t1\n1\t2\n1\t2\n2\t6 1\n3\t3 1 3\n3\t1 1 4\n4\t2 1 1 7\n5\t1 1 1 1 1\n3\t1 12 1\n5\t1 1 1 1 1\n4\t2 1 1 7\n4\t1 1 4 1\n4\t2 1 2 2\n2\t8 3\n2\t1 1\n2\t1 2\n1\t4\n1\t3\n1\t2\n1\t1\n0\n</code></pre>\n<p>First, we need to write a piece of code in Python for building an object <code>data</code> that will be directly used in our model.\nWe have first to import everything (*) from <code>pycsp3.problems.data.dataparser</code>.\nWe can then add any new arbitrary field to the object <code>data</code>.\nThis is what we do below with two fields called <code>rowPatterns</code> and <code>colPatterns</code>.\nThese two fields are defined as two-dimensional arrays (lists) of integers, defining the sizes of blocks.\nThe function <code>next_int()</code> can be called for reading the next integer in a text file, which will be specified on the command line (see later).</p>\n<h4>File <strong><code>Nonogram_Parser.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3.problems.data.dataparser</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">nRows</span><span class=\"p\">,</span> <span class=\"n\">nCols</span> <span class=\"o\">=</span> <span class=\"n\">next_int</span><span class=\"p\">(),</span> <span class=\"n\">next_int</span><span class=\"p\">()</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">rowPatterns</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">next_int</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">next_int</span><span class=\"p\">())]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"p\">)]</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">colPatterns</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">next_int</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">next_int</span><span class=\"p\">())]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"p\">)]</span>\n</pre>\n<p>Then, we just write the model by getting data from the object <code>data</code>.\nThe model is totally independent of the way data were initially given (from a text file or a JSON file, for example).\nIn the code below, note how an object <code>Automaton</code> is defined from a specified pattern (list of blocks).\nAlso, for a <code>regular</code> constraint, we just write something like <code>scope in automaton</code>.\nFinally, <code>x[:, j]</code> denotes the jth column of <code>x</code>.</p>\n<h4>File <strong><code>Nonogram.py</code></strong></h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycsp3</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">automaton</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">):</span>\n    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Automaton</span><span class=\"o\">.</span><span class=\"n\">q</span>  <span class=\"c1\"># for building state names</span>\n    <span class=\"n\">transitions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">n_states</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">transitions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">n_states</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)):</span>\n            <span class=\"n\">transitions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)))</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]):</span>\n                <span class=\"n\">transitions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n                <span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">transitions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n                <span class=\"n\">num</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">transitions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">Automaton</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">final</span><span class=\"o\">=</span><span class=\"n\">q</span><span class=\"p\">(</span><span class=\"n\">n_states</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">transitions</span><span class=\"o\">=</span><span class=\"n\">transitions</span><span class=\"p\">)</span>\n\n<span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">rowPatterns</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">colPatterns</span>\n<span class=\"n\">nRows</span><span class=\"p\">,</span> <span class=\"n\">nCols</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">),</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># \u00a0x[i][j] is 1 iff the cell at row i and col j is colored in black</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">VarArray</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">nRows</span><span class=\"p\">,</span> <span class=\"n\">nCols</span><span class=\"p\">],</span> <span class=\"n\">dom</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"n\">satisfy</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">automaton</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nRows</span><span class=\"p\">)],</span>\n\n    <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[:,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">automaton</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">nCols</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To generate the XCSP3 instance (file), we just need to specify the name of the text file (option <code>-data</code>) and the name of the Python parser (option <code>-dataparser</code>).</p>\n<pre><span class=\"go\">python3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py</span>\n</pre>\n<p>Maybe, you think that it would be simpler to have directly the data in JSON file.\nYou can generate such a file with the option <code>-dataexport</code>.\nThe command is as follows:</p>\n<pre><span class=\"go\">python3 Nonogram.py -data=Nonogram_example.txt -dataparser=Nonogram_Parser.py -dataexport</span>\n</pre>\n<p>A file <code>Nonogram_example.json</code> is generated, whose content is:</p>\n<pre><span class=\"p\">{</span>\n <span class=\"nt\">\"colPatterns\"</span><span class=\"p\">:[[],[],[],[</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">],[]],</span>\n <span class=\"nt\">\"rowPatterns\"</span><span class=\"p\">:[[],[</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>With this new file, you can directly generate the XCSP3 file with:</p>\n<pre><span class=\"go\">python3 Nonogram.py -data=Nonogram_example.json</span>\n</pre>\n\n          </div>"}, "last_serial": 6523222, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3feb7dd8bf1b7ab7071810914eaca752", "sha256": "6bf3d76150f86e5ea3aa443d732ea13e193a34f1ef2ad03ac36228099c4b6aa3"}, "downloads": -1, "filename": "pycsp3-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3feb7dd8bf1b7ab7071810914eaca752", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 908478, "upload_time": "2019-11-10T08:58:24", "upload_time_iso_8601": "2019-11-10T08:58:24.355454Z", "url": "https://files.pythonhosted.org/packages/f2/e4/ae70b9659e52c37b7800e99e49def6e93c7f35c0b46b8b2c9ae03c51e6a2/pycsp3-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48481ed8015fa3fec5c3a819251af21b", "sha256": "3fbce62d02fc4caafd32bcbf2b2ff3013edf4c0b8eca3803579a4bef67ed8a33"}, "downloads": -1, "filename": "pycsp3-1.0.0.tar.gz", "has_sig": false, "md5_digest": "48481ed8015fa3fec5c3a819251af21b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 804071, "upload_time": "2019-11-10T08:58:28", "upload_time_iso_8601": "2019-11-10T08:58:28.403490Z", "url": "https://files.pythonhosted.org/packages/76/dc/6035aa6704546aa438a93c81af8118d72ce5c9cf20ef6efffe061a9676c4/pycsp3-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d7168e5e94e15b20bdb7803eb6863306", "sha256": "370839103b210e6a8bcc3e25658c90c19b0fac87ec1187701fac86cb723fecd2"}, "downloads": -1, "filename": "pycsp3-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d7168e5e94e15b20bdb7803eb6863306", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 908487, "upload_time": "2019-11-10T09:13:46", "upload_time_iso_8601": "2019-11-10T09:13:46.917557Z", "url": "https://files.pythonhosted.org/packages/21/ae/bb6aedfb6ab313b53d7b54a3e5dd6e2fb9d92ac45d0a2cfbae28250d28d9/pycsp3-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f539c13b3caa9a99638fbf443ed4ed24", "sha256": "c933f506942830416d0585fd801d2c6f99eea98d3f7d113799be0c178a52e938"}, "downloads": -1, "filename": "pycsp3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f539c13b3caa9a99638fbf443ed4ed24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 804065, "upload_time": "2019-11-10T09:13:54", "upload_time_iso_8601": "2019-11-10T09:13:54.211528Z", "url": "https://files.pythonhosted.org/packages/bf/f7/cd35fa28fa4509a81b09216044244f9f85bd54a142c238f6d6ad9f06cf9d/pycsp3-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "03a03bf03008b02d418ba47ce5bc423d", "sha256": "72aa84e85dffaf0b5f1306046b8b90ca9353ebe944e44eac16c2f230d8bbd9cd"}, "downloads": -1, "filename": "pycsp3-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "03a03bf03008b02d418ba47ce5bc423d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 187971, "upload_time": "2020-01-26T18:41:46", "upload_time_iso_8601": "2020-01-26T18:41:46.691789Z", "url": "https://files.pythonhosted.org/packages/30/50/fe1bd013b79a38b7f34c4cdcf1b26812877c9770442d843591722b86e62f/pycsp3-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74a1febdec298387a70a18875b3ba953", "sha256": "c5cf2adb940736e4204b5e7c68d155ad71da1ff83fa5eba0fe4c6f9db89a2699"}, "downloads": -1, "filename": "pycsp3-1.0.10.tar.gz", "has_sig": false, "md5_digest": "74a1febdec298387a70a18875b3ba953", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 124788, "upload_time": "2020-01-26T18:41:49", "upload_time_iso_8601": "2020-01-26T18:41:49.269821Z", "url": "https://files.pythonhosted.org/packages/14/1c/40fb817c8f4bc832227882530cb36badafe8d4ab15fcc1819f996d1c52ed/pycsp3-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "78814a6490aa2ecc2a3fcd6635417f8a", "sha256": "42d103730e5fc51de37a9ea663312d115149df511018338d8e8f51b5db6dbf91"}, "downloads": -1, "filename": "pycsp3-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "78814a6490aa2ecc2a3fcd6635417f8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 188059, "upload_time": "2020-01-26T20:17:31", "upload_time_iso_8601": "2020-01-26T20:17:31.063879Z", "url": "https://files.pythonhosted.org/packages/41/ef/464f44a4d80de36404e7a529f5ce12215f539901721dc4370e4643fba336/pycsp3-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfd8dc2a7bb7a1e7ecb800bb34597ad9", "sha256": "e05bc3a2bf1519407720ac020ed5f4b9f55c339f2a4bc7f89b0c3e88c3eb94ce"}, "downloads": -1, "filename": "pycsp3-1.0.11.tar.gz", "has_sig": false, "md5_digest": "dfd8dc2a7bb7a1e7ecb800bb34597ad9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 124869, "upload_time": "2020-01-26T20:17:33", "upload_time_iso_8601": "2020-01-26T20:17:33.390995Z", "url": "https://files.pythonhosted.org/packages/7a/b5/162f8b2f8b3fd6e605f190ffd4426d1840089f8f3068731b56062a15103d/pycsp3-1.0.11.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "70f135798fdde307837fc5f266588c99", "sha256": "d7136414c8b113328ab366cf196dde388654b928f0e14d2d46fa8dd722373f3b"}, "downloads": -1, "filename": "pycsp3-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "70f135798fdde307837fc5f266588c99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 908631, "upload_time": "2019-11-10T10:08:35", "upload_time_iso_8601": "2019-11-10T10:08:35.016176Z", "url": "https://files.pythonhosted.org/packages/90/b2/fc44848749597d30e90f68d2ea2982810b964d04a5e24b91a3e2c94b0131/pycsp3-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fc431693404ca47d438b4653b1e1909", "sha256": "cf1098e17947ec81313fe1b43ab41db4c48a1425ad5123e16700354df46e7969"}, "downloads": -1, "filename": "pycsp3-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0fc431693404ca47d438b4653b1e1909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 804256, "upload_time": "2019-11-10T10:08:38", "upload_time_iso_8601": "2019-11-10T10:08:38.944364Z", "url": "https://files.pythonhosted.org/packages/ac/27/cc310574c3e3fb106fbae72ae41c3bb2aee276086c08f1f58d8089e26228/pycsp3-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "2b6112266fc366ff91c461577226d2fb", "sha256": "a4d74acdaaf36a79b1fbea5350ef94aac47469d50784fb7326b2a52f9745b975"}, "downloads": -1, "filename": "pycsp3-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2b6112266fc366ff91c461577226d2fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 909733, "upload_time": "2019-12-10T08:34:19", "upload_time_iso_8601": "2019-12-10T08:34:19.246910Z", "url": "https://files.pythonhosted.org/packages/e0/3c/c5d4f93ea058413f0817865dc01dfe8e006d10988bc64c79cc82a805c8cb/pycsp3-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11f852cf7ffbabd200f01fb57a51b89a", "sha256": "b7ff951197314a4f95fbb42f5061223a24251ba06604badfe305956b90b6a45c"}, "downloads": -1, "filename": "pycsp3-1.0.4.tar.gz", "has_sig": false, "md5_digest": "11f852cf7ffbabd200f01fb57a51b89a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 804730, "upload_time": "2019-12-10T08:34:23", "upload_time_iso_8601": "2019-12-10T08:34:23.431699Z", "url": "https://files.pythonhosted.org/packages/2c/3f/ebb8130349d53bd2c9b993b616356fbff540b5fc515468993d41dfafd4f5/pycsp3-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "f7f30a33d053bd8c42218bee4376081f", "sha256": "3b996c8aff38f8ca40ebd40faea284328dbac1ab8fa36b77bdc55fe0a44770e6"}, "downloads": -1, "filename": "pycsp3-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f7f30a33d053bd8c42218bee4376081f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 507433, "upload_time": "2020-01-18T09:55:33", "upload_time_iso_8601": "2020-01-18T09:55:33.737638Z", "url": "https://files.pythonhosted.org/packages/39/cd/54c94283cc619fd76e0d614f568c8312cc9a3ecf33cdfb502ce0e22c847f/pycsp3-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbe1c08d42af66d4959bf2aecd24be49", "sha256": "e3d20184a1a12d2d631b14c2098d8fb5025f92154caf48db50589f245bd41813"}, "downloads": -1, "filename": "pycsp3-1.0.5.tar.gz", "has_sig": false, "md5_digest": "cbe1c08d42af66d4959bf2aecd24be49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 414101, "upload_time": "2020-01-18T09:55:37", "upload_time_iso_8601": "2020-01-18T09:55:37.710550Z", "url": "https://files.pythonhosted.org/packages/8f/ca/e264c679bee65018d162999eda05f7eaa0e48e64e55ad97e4a05f6578591/pycsp3-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "ef7a0a0204a5023ba6d0667d08019ca4", "sha256": "1c0f249f868a0523a6795a0b5d1e0ad6c1dd13085cd3dbbfa056032c03666c03"}, "downloads": -1, "filename": "pycsp3-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ef7a0a0204a5023ba6d0667d08019ca4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 177736, "upload_time": "2020-01-18T10:46:25", "upload_time_iso_8601": "2020-01-18T10:46:25.378590Z", "url": "https://files.pythonhosted.org/packages/48/7d/eec895b22bc2999e14b6e2480531bb1ce04e5f649a618c0d27c4cf87388d/pycsp3-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe0807274393b2cc32d1832921cc3473", "sha256": "26c63a5ae8e050167e9fce249e21fb0d17046fd3dcb15289a88d6a1818457be9"}, "downloads": -1, "filename": "pycsp3-1.0.6.tar.gz", "has_sig": false, "md5_digest": "fe0807274393b2cc32d1832921cc3473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122953, "upload_time": "2020-01-18T10:46:27", "upload_time_iso_8601": "2020-01-18T10:46:27.957044Z", "url": "https://files.pythonhosted.org/packages/a8/a4/46e78660ea98f419648e80db2187e7446ffbef683ad296823e6e37f856b4/pycsp3-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "db33948e0384a973ce5a6a4b9be4d2ff", "sha256": "fd5b9495f01557d5dbfb970e608c92b3d9babb7ccf59b8fdf955697e8c68a523"}, "downloads": -1, "filename": "pycsp3-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "db33948e0384a973ce5a6a4b9be4d2ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 177779, "upload_time": "2020-01-18T11:16:54", "upload_time_iso_8601": "2020-01-18T11:16:54.734064Z", "url": "https://files.pythonhosted.org/packages/1b/4d/1845afe3760fc108c641e6f5bd10ce4b4f77cee4a009d170ded6b6c173d4/pycsp3-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c29005825b3c78235dc2576a7072949", "sha256": "8f428aa2d659a1a28eb1856f99db322d8bc8435f14508168ebe2eb40b32e4847"}, "downloads": -1, "filename": "pycsp3-1.0.7.tar.gz", "has_sig": false, "md5_digest": "2c29005825b3c78235dc2576a7072949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123008, "upload_time": "2020-01-18T11:16:57", "upload_time_iso_8601": "2020-01-18T11:16:57.358634Z", "url": "https://files.pythonhosted.org/packages/b6/f8/bc670d5d63062d7ebd497e4a0e55ed29cc6d654f37bce006879fc58bb535/pycsp3-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "7ccf47d2d0df818b35db586ff2dfa9f6", "sha256": "1c7b95582f8a57f6b98718ae367ea8335c230f60d7d0ad6803439a0187654085"}, "downloads": -1, "filename": "pycsp3-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7ccf47d2d0df818b35db586ff2dfa9f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 187725, "upload_time": "2020-01-26T18:01:35", "upload_time_iso_8601": "2020-01-26T18:01:35.430640Z", "url": "https://files.pythonhosted.org/packages/7f/a7/f244475f857f3843e92aea3d5b43c5b45cb1ff4d0c3bdb568128a7164203/pycsp3-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8242f0ea83cef1a68d48e03f0ffc2971", "sha256": "d4d2b5ac52e88c6b1081215c470499f495a5434e71973355e0f596f719d4d93c"}, "downloads": -1, "filename": "pycsp3-1.0.8.tar.gz", "has_sig": false, "md5_digest": "8242f0ea83cef1a68d48e03f0ffc2971", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 124125, "upload_time": "2020-01-26T18:01:38", "upload_time_iso_8601": "2020-01-26T18:01:38.110174Z", "url": "https://files.pythonhosted.org/packages/60/16/e8ee4fe63ea6c395d99ea6ab3aea533e24365e9108e7b0b478e4b056c7ce/pycsp3-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "a10451f53f7fe62cee83dc3dc62d9178", "sha256": "4ff6e0458b34d3d5af545662aa01ffedf63090e5d96ee536c57c8709aec076cb"}, "downloads": -1, "filename": "pycsp3-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "a10451f53f7fe62cee83dc3dc62d9178", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 187963, "upload_time": "2020-01-26T18:30:43", "upload_time_iso_8601": "2020-01-26T18:30:43.345235Z", "url": "https://files.pythonhosted.org/packages/61/9a/a957cf3d0d8f11cba866a674500567170d136baf176e097b53af6f41c72e/pycsp3-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c635647eb0026f8a9ca0b6737c54d61", "sha256": "820a8bcc43c97cb7763d5bd364cc2b87228ed64a27fa3752fcf625d6b1a300cf"}, "downloads": -1, "filename": "pycsp3-1.0.9.tar.gz", "has_sig": false, "md5_digest": "2c635647eb0026f8a9ca0b6737c54d61", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 124783, "upload_time": "2020-01-26T18:30:45", "upload_time_iso_8601": "2020-01-26T18:30:45.340859Z", "url": "https://files.pythonhosted.org/packages/e4/a3/121ac359ecbde1d6cf3531ecf1c272529a681e9ca77c61c4b82351ec3531/pycsp3-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "78814a6490aa2ecc2a3fcd6635417f8a", "sha256": "42d103730e5fc51de37a9ea663312d115149df511018338d8e8f51b5db6dbf91"}, "downloads": -1, "filename": "pycsp3-1.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "78814a6490aa2ecc2a3fcd6635417f8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 188059, "upload_time": "2020-01-26T20:17:31", "upload_time_iso_8601": "2020-01-26T20:17:31.063879Z", "url": "https://files.pythonhosted.org/packages/41/ef/464f44a4d80de36404e7a529f5ce12215f539901721dc4370e4643fba336/pycsp3-1.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfd8dc2a7bb7a1e7ecb800bb34597ad9", "sha256": "e05bc3a2bf1519407720ac020ed5f4b9f55c339f2a4bc7f89b0c3e88c3eb94ce"}, "downloads": -1, "filename": "pycsp3-1.0.11.tar.gz", "has_sig": false, "md5_digest": "dfd8dc2a7bb7a1e7ecb800bb34597ad9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3,!=3.8.*,!=3.9.*", "size": 124869, "upload_time": "2020-01-26T20:17:33", "upload_time_iso_8601": "2020-01-26T20:17:33.390995Z", "url": "https://files.pythonhosted.org/packages/7a/b5/162f8b2f8b3fd6e605f190ffd4426d1840089f8f3068731b56062a15103d/pycsp3-1.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:38 2020"}