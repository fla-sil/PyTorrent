{"info": {"author": "Diederik van der Boor", "author_email": "opensource@edoburu.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.6", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://img.shields.io/travis/django-fluent/django-fluent-pages/master.svg?branch=master\n    :target: http://travis-ci.org/django-fluent/django-fluent-pages\n.. image:: https://img.shields.io/pypi/v/django-fluent-pages.svg\n    :target: https://pypi.python.org/pypi/django-fluent-pages/\n.. image:: https://img.shields.io/pypi/l/django-fluent-pages.svg\n    :target: https://pypi.python.org/pypi/django-fluent-pages/\n.. image:: https://img.shields.io/codecov/c/github/django-fluent/django-fluent-pages/master.svg\n    :target: https://codecov.io/github/django-fluent/django-fluent-pages?branch=master\n\ndjango-fluent-pages\n===================\n\nThis is a stand-alone module, which provides a flexible,\nscalable CMS with custom node types, and flexible block content.\n\nFeatures:\n\n* A fully customizable page hierarchy.\n* Support for multilingual websites.\n* Support for multiple websites in a single database.\n* Fast SEO-friendly page URLs.\n* SEO optimized (meta keywords, description, title, 301-redirects, sitemaps integration).\n* Plugin support for custom page types, which:\n\n * Integrate application logic in page trees.\n * Integrate advanced block editing (via as django-fluent-contents_).\n\nFor more details, see the documentation_ at Read The Docs.\n\nPage tree customization\n-----------------------\n\nThis module provides a page tree, where each node type can be a different model.\nThis allows developers like yourself to structure your site tree as you see fit. For example:\n\n* Build a tree structure of RST pages, by defining a ``RstPage`` type.\n* Build a tree with widget-based pages, by integrating django-fluent-contents_.\n* Build a \"product page\", which exposes all products as sub nodes.\n* Build a tree of a *homepage*, *subsection*, and *article* node, each with custom fields like professional CMSes have.\n\nEach node type can have it's own custom fields, attributes and rendering.\n\nIn case you're building a custom CMS, this module might just be suited for you,\nsince it provides the tree for you, without bothering with anything else.\nThe actual page contents is defined via page type plugins.\n\n\nInstallation\n============\n\nFirst install the module, preferably in a virtual environment:\n\n.. code-block:: bash\n\n    pip install django-fluent-pages\n\nAll dependencies will be automatically installed.\n\nConfiguration\n-------------\n\nYou can also use the ready-made template:\n\n.. code-block:: bash\n\n    mkdir my-website.com\n    cd my-website.com\n    django-admin.py startproject mywebsite . -e py,rst,example,gitignore --template=https://github.com/edoburu/django-project-template/archive/django-fluent.zip\n\nOr create a new project:\n\n.. code-block:: bash\n\n    cd ..\n    django-admin.py startproject fluentdemo\n\nTo have a standard setup with django-fluent-contents_ integrated, use:\n\n.. code-block:: python\n\n    INSTALLED_APPS += (\n        # The CMS apps\n        'fluent_pages',\n\n        # Required dependencies\n        'mptt',\n        'parler',\n        'polymorphic',\n        'polymorphic_tree',\n        'slug_preview',\n\n        # Optional widget pages via django-fluent-contents\n        'fluent_pages.pagetypes.fluentpage',\n        'fluent_contents',\n        'fluent_contents.plugins.text',\n        'django_wysiwyg',\n\n        # Optional other CMS page types\n        'fluent_pages.pagetypes.redirectnode',\n\n        # enable the admin\n        'django.contrib.admin',\n    )\n\n    DJANGO_WYSIWYG_FLAVOR = \"yui_advanced\"\n\nNote each CMS application is optional. Only ``fluent_pages`` and ``mptt`` are required.\nThe remaining apps add additional functionality to the system.\n\nIn ``urls.py``:\n\n.. code-block:: python\n\n    urlpatterns += patterns('',\n        url(r'', include('fluent_pages.urls'))\n    )\n\nThe database can be created afterwards:\n\n.. code-block:: bash\n\n    ./manage.py migrate\n    ./manage.py runserver\n\n\nCustom page types\n-----------------\n\nThe key feature of this module is the support for custom node types.\nTake a look in the existing types at ``fluent_pages.pagetypes`` to see how it's being done.\n\nIt boils down to creating a package with 2 files:\n\nThe ``models.py`` file should define the custom node type, and any fields it has:\n\n.. code-block:: python\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from fluent_pages.models import HtmlPage\n    from mysite.settings import RST_TEMPLATE_CHOICES\n\n\n    class RstPage(HtmlPage):\n        \"\"\"\n        A page that renders RST code.\n        \"\"\"\n        rst_content = models.TextField(_(\"RST contents\"))\n        template = models.CharField(_(\"Template\"), max_length=200, choices=RST_TEMPLATE_CHOICES)\n\n        class Meta:\n            verbose_name = _(\"RST page\")\n            verbose_name_plural = _(\"RST pages\")\n\nA ``page_type_plugins.py`` file that defines the metadata, and rendering:\n\n.. code-block:: python\n\n    from fluent_pages.extensions import PageTypePlugin, page_type_pool\n    from .models import RstPage\n\n\n    @page_type_pool.register\n    class RstPagePlugin(PageTypePlugin):\n        model = RstPage\n        sort_priority = 10\n\n        def get_render_template(self, request, rstpage, **kwargs):\n            return rstpage.template\n\nA template could look like:\n\n.. code-block:: html+django\n\n    {% extends \"base.html\" %}\n    {% load markup %}\n\n    {% block headtitle %}{{ page.title }}{% endblock %}\n\n    {% block main %}\n      <h1>{{ page.title }}</h1>\n\n      <div id=\"content\">\n        {{ page.rst_content|restructuredtext }}\n      </div>\n    {% endblock %}\n\nEt, voila: with very little code a custom CMS was just created.\n\nOptionally, a ``model_admin`` can also be defined, to have custom field layouts or extra functionality in the *edit* or *delete* page.\n\nPlugin configuration\n~~~~~~~~~~~~~~~~~~~~\n\nThe plugin can define the following attributes:\n\n* ``model`` - the model for the page type\n* ``model_admin`` - the custom admin to use (must inherit from ``PageAdmin``)\n* ``render_template`` - the template to use for rendering\n* ``response_class`` - the response class (by default ``TemplateResponse``)\n* ``is_file`` - whether the node represents a file, and shouldn't end with a slash.\n* ``can_have_children`` - whether the node type is allowed to have child nodes.\n* ``urls`` - a custom set of URL patterns for sub pages (either a module name, or ``patterns()`` result).\n* ``sort_priority`` - a sorting order in the \"add page\" dialog.\n\nIt can also override the following functions:\n\n* ``get_response(self, request, page, **kwargs)`` - completely redefine the response, instead of using ``response_class``, ``render_template``, etc..\n* ``get_render_template(self, request, page, **kwargs)`` - return the template to render, by default this is ``render_template``.\n* ``get_context(self, request, page, **kwargs)`` - return the template context for the node.\n\nDetails about these attributes is explained in the documentation_.\n\n\nApplication nodes\n~~~~~~~~~~~~~~~~~\n\nAs briefly mentioned above, a page type can have it's own set of URL patterns, via the ``urls`` attribute.\nThis allows implementing page types such as a \"product page\" in the tree,\nwhich automatically has all products from the database as sub pages.\nThe provides ``example`` module demonstrates this concept.\n\nThe URL patterns start at the full path of the page, so it works similar to a regular ``include()`` in the URLconf.\nHowever, a page type may be added multiple times to the tree.\nTo resolve the URLs, there are 2 functions available:\n\n* ``fluent_pages.urlresolvers.app_reverse()`` - this ``reverse()`` like function locates a view attached to a page.\n* ``fluent_pages.urlresolvers.mixed_reverse()`` - this resolver tries ``app_reverse()`` first, and falls back to the standard ``reverse()``.\n\nThe ``mixed_reverse()`` is useful for third party applications which\ncan operate either stand-alone (mounted in the normal URLconf),\nor operate as page type node in combination with *django-fluent-pages*.\nThese features are also used by django-fluent-blogs_ to provide a \"Blog\" page type\nthat can be added to a random point of the tree.\n\n\nAdding pages to the sitemap\n---------------------------\n\nOptionally, the pages can be included in the sitemap.\nAdd the following in ``urls.py``:\n\n.. code-block:: python\n\n    from fluent_pages.sitemaps import PageSitemap\n\n    sitemaps = {\n        'pages': PageSitemap,\n    }\n\n    urlpatterns += patterns('',\n        url(r'^sitemap.xml$', 'django.contrib.sitemaps.views.sitemap', {'sitemaps': sitemaps}),\n    )\n\n\nContributing\n------------\n\nThis module is designed to be generic. In case there is anything you didn't like about it,\nor think it's not flexible enough, please let us know. We'd love to improve it!\n\nIf you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)\n\n\n.. _documentation: https://django-fluent-pages.readthedocs.io/\n.. _django.contrib.sites: https://docs.djangoproject.com/en/dev/ref/contrib/sites/\n.. _django.contrib.sitemaps: https://docs.djangoproject.com/en/dev/ref/contrib/sitemaps/\n\n.. _django-fluent-blogs: https://github.com/django-fluent/django-fluent-blogs\n.. _django-fluent-contents: https://github.com/django-fluent/django-fluent-contents\n.. _django-mptt: https://github.com/django-mptt/django-mptt\n.. _django-parler: https://github.com/edoburu/django-parler\n.. _django-polymorphic: https://github.com/django-polymorphic/django-polymorphic\n.. _django-polymorphic-tree: https://github.com/django-polymorphic/django-polymorphic-tree\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/sigmacms/sigmacms-fluent-pages/zipball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sigmacms/sigmacms-fluent-pages", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "sigmacms-fluent-pages", "package_url": "https://pypi.org/project/sigmacms-fluent-pages/", "platform": "", "project_url": "https://pypi.org/project/sigmacms-fluent-pages/", "project_urls": {"Download": "https://github.com/sigmacms/sigmacms-fluent-pages/zipball/master", "Homepage": "https://github.com/sigmacms/sigmacms-fluent-pages"}, "release_url": "https://pypi.org/project/sigmacms-fluent-pages/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A flexible, scalable CMS with custom node types, and flexible block content.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/django-fluent/django-fluent-pages\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/django-fluent/django-fluent-pages/master.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e9f23b61f4f96511a9401b3234b8de82efd601a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f646a616e676f2d666c75656e742f646a616e676f2d666c75656e742d70616765732f6d61737465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/django-fluent-pages/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-fluent-pages.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/649215dde97fb12f2c605d1f21fbaf3484d598d7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d666c75656e742d70616765732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-fluent-pages/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/django-fluent-pages.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bb0fbfee182a8adc89f16d15f7d223641e54009/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d666c75656e742d70616765732e737667\"></a>\n<a href=\"https://codecov.io/github/django-fluent/django-fluent-pages?branch=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/django-fluent/django-fluent-pages/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a956dc22d0143761bd9e5f27e8aba35de122ea7/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f646a616e676f2d666c75656e742f646a616e676f2d666c75656e742d70616765732f6d61737465722e737667\"></a>\n<div id=\"django-fluent-pages\">\n<h2>django-fluent-pages</h2>\n<p>This is a stand-alone module, which provides a flexible,\nscalable CMS with custom node types, and flexible block content.</p>\n<p>Features:</p>\n<ul>\n<li>A fully customizable page hierarchy.</li>\n<li>Support for multilingual websites.</li>\n<li>Support for multiple websites in a single database.</li>\n<li>Fast SEO-friendly page URLs.</li>\n<li>SEO optimized (meta keywords, description, title, 301-redirects, sitemaps integration).</li>\n<li>Plugin support for custom page types, which:</li>\n</ul>\n<blockquote>\n<ul>\n<li>Integrate application logic in page trees.</li>\n<li>Integrate advanced block editing (via as <a href=\"https://github.com/django-fluent/django-fluent-contents\" rel=\"nofollow\">django-fluent-contents</a>).</li>\n</ul>\n</blockquote>\n<p>For more details, see the <a href=\"https://django-fluent-pages.readthedocs.io/\" rel=\"nofollow\">documentation</a> at Read The Docs.</p>\n<div id=\"page-tree-customization\">\n<h3>Page tree customization</h3>\n<p>This module provides a page tree, where each node type can be a different model.\nThis allows developers like yourself to structure your site tree as you see fit. For example:</p>\n<ul>\n<li>Build a tree structure of RST pages, by defining a <tt>RstPage</tt> type.</li>\n<li>Build a tree with widget-based pages, by integrating <a href=\"https://github.com/django-fluent/django-fluent-contents\" rel=\"nofollow\">django-fluent-contents</a>.</li>\n<li>Build a \u201cproduct page\u201d, which exposes all products as sub nodes.</li>\n<li>Build a tree of a <em>homepage</em>, <em>subsection</em>, and <em>article</em> node, each with custom fields like professional CMSes have.</li>\n</ul>\n<p>Each node type can have it\u2019s own custom fields, attributes and rendering.</p>\n<p>In case you\u2019re building a custom CMS, this module might just be suited for you,\nsince it provides the tree for you, without bothering with anything else.\nThe actual page contents is defined via page type plugins.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>First install the module, preferably in a virtual environment:</p>\n<pre>pip install django-fluent-pages\n</pre>\n<p>All dependencies will be automatically installed.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>You can also use the ready-made template:</p>\n<pre>mkdir my-website.com\n<span class=\"nb\">cd</span> my-website.com\ndjango-admin.py startproject mywebsite . -e py,rst,example,gitignore --template<span class=\"o\">=</span>https://github.com/edoburu/django-project-template/archive/django-fluent.zip\n</pre>\n<p>Or create a new project:</p>\n<pre><span class=\"nb\">cd</span> ..\ndjango-admin.py startproject fluentdemo\n</pre>\n<p>To have a standard setup with <a href=\"https://github.com/django-fluent/django-fluent-contents\" rel=\"nofollow\">django-fluent-contents</a> integrated, use:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n    <span class=\"c1\"># The CMS apps</span>\n    <span class=\"s1\">'fluent_pages'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Required dependencies</span>\n    <span class=\"s1\">'mptt'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'parler'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'polymorphic'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'polymorphic_tree'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'slug_preview'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Optional widget pages via django-fluent-contents</span>\n    <span class=\"s1\">'fluent_pages.pagetypes.fluentpage'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fluent_contents'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'fluent_contents.plugins.text'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_wysiwyg'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Optional other CMS page types</span>\n    <span class=\"s1\">'fluent_pages.pagetypes.redirectnode'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># enable the admin</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">DJANGO_WYSIWYG_FLAVOR</span> <span class=\"o\">=</span> <span class=\"s2\">\"yui_advanced\"</span>\n</pre>\n<p>Note each CMS application is optional. Only <tt>fluent_pages</tt> and <tt>mptt</tt> are required.\nThe remaining apps add additional functionality to the system.</p>\n<p>In <tt>urls.py</tt>:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'fluent_pages.urls'</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The database can be created afterwards:</p>\n<pre>./manage.py migrate\n./manage.py runserver\n</pre>\n</div>\n<div id=\"custom-page-types\">\n<h3>Custom page types</h3>\n<p>The key feature of this module is the support for custom node types.\nTake a look in the existing types at <tt>fluent_pages.pagetypes</tt> to see how it\u2019s being done.</p>\n<p>It boils down to creating a package with 2 files:</p>\n<p>The <tt>models.py</tt> file should define the custom node type, and any fields it has:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluent_pages.models</span> <span class=\"kn\">import</span> <span class=\"n\">HtmlPage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mysite.settings</span> <span class=\"kn\">import</span> <span class=\"n\">RST_TEMPLATE_CHOICES</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RstPage</span><span class=\"p\">(</span><span class=\"n\">HtmlPage</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    A page that renders RST code.\n    \"\"\"</span>\n    <span class=\"n\">rst_content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"RST contents\"</span><span class=\"p\">))</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Template\"</span><span class=\"p\">),</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">RST_TEMPLATE_CHOICES</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"RST page\"</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"RST pages\"</span><span class=\"p\">)</span>\n</pre>\n<p>A <tt>page_type_plugins.py</tt> file that defines the metadata, and rendering:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent_pages.extensions</span> <span class=\"kn\">import</span> <span class=\"n\">PageTypePlugin</span><span class=\"p\">,</span> <span class=\"n\">page_type_pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">RstPage</span>\n\n\n<span class=\"nd\">@page_type_pool</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">class</span> <span class=\"nc\">RstPagePlugin</span><span class=\"p\">(</span><span class=\"n\">PageTypePlugin</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RstPage</span>\n    <span class=\"n\">sort_priority</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_render_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">rstpage</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">rstpage</span><span class=\"o\">.</span><span class=\"n\">template</span>\n</pre>\n<p>A template could look like:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">\"base.html\"</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">markup</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">headtitle</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">page.title</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">main</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">page.title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"content\"</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">page.rst_content</span><span class=\"o\">|</span><span class=\"nf\">restructuredtext</span> <span class=\"cp\">}}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>Et, voila: with very little code a custom CMS was just created.</p>\n<p>Optionally, a <tt>model_admin</tt> can also be defined, to have custom field layouts or extra functionality in the <em>edit</em> or <em>delete</em> page.</p>\n<div id=\"plugin-configuration\">\n<h4>Plugin configuration</h4>\n<p>The plugin can define the following attributes:</p>\n<ul>\n<li><tt>model</tt> - the model for the page type</li>\n<li><tt>model_admin</tt> - the custom admin to use (must inherit from <tt>PageAdmin</tt>)</li>\n<li><tt>render_template</tt> - the template to use for rendering</li>\n<li><tt>response_class</tt> - the response class (by default <tt>TemplateResponse</tt>)</li>\n<li><tt>is_file</tt> - whether the node represents a file, and shouldn\u2019t end with a slash.</li>\n<li><tt>can_have_children</tt> - whether the node type is allowed to have child nodes.</li>\n<li><tt>urls</tt> - a custom set of URL patterns for sub pages (either a module name, or <tt>patterns()</tt> result).</li>\n<li><tt>sort_priority</tt> - a sorting order in the \u201cadd page\u201d dialog.</li>\n</ul>\n<p>It can also override the following functions:</p>\n<ul>\n<li><tt>get_response(self, request, page, **kwargs)</tt> - completely redefine the response, instead of using <tt>response_class</tt>, <tt>render_template</tt>, etc..</li>\n<li><tt>get_render_template(self, request, page, **kwargs)</tt> - return the template to render, by default this is <tt>render_template</tt>.</li>\n<li><tt>get_context(self, request, page, **kwargs)</tt> - return the template context for the node.</li>\n</ul>\n<p>Details about these attributes is explained in the <a href=\"https://django-fluent-pages.readthedocs.io/\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"application-nodes\">\n<h4>Application nodes</h4>\n<p>As briefly mentioned above, a page type can have it\u2019s own set of URL patterns, via the <tt>urls</tt> attribute.\nThis allows implementing page types such as a \u201cproduct page\u201d in the tree,\nwhich automatically has all products from the database as sub pages.\nThe provides <tt>example</tt> module demonstrates this concept.</p>\n<p>The URL patterns start at the full path of the page, so it works similar to a regular <tt>include()</tt> in the URLconf.\nHowever, a page type may be added multiple times to the tree.\nTo resolve the URLs, there are 2 functions available:</p>\n<ul>\n<li><tt>fluent_pages.urlresolvers.app_reverse()</tt> - this <tt>reverse()</tt> like function locates a view attached to a page.</li>\n<li><tt>fluent_pages.urlresolvers.mixed_reverse()</tt> - this resolver tries <tt>app_reverse()</tt> first, and falls back to the standard <tt>reverse()</tt>.</li>\n</ul>\n<p>The <tt>mixed_reverse()</tt> is useful for third party applications which\ncan operate either stand-alone (mounted in the normal URLconf),\nor operate as page type node in combination with <em>django-fluent-pages</em>.\nThese features are also used by <a href=\"https://github.com/django-fluent/django-fluent-blogs\" rel=\"nofollow\">django-fluent-blogs</a> to provide a \u201cBlog\u201d page type\nthat can be added to a random point of the tree.</p>\n</div>\n</div>\n<div id=\"adding-pages-to-the-sitemap\">\n<h3>Adding pages to the sitemap</h3>\n<p>Optionally, the pages can be included in the sitemap.\nAdd the following in <tt>urls.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent_pages.sitemaps</span> <span class=\"kn\">import</span> <span class=\"n\">PageSitemap</span>\n\n<span class=\"n\">sitemaps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'pages'</span><span class=\"p\">:</span> <span class=\"n\">PageSitemap</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^sitemap.xml$'</span><span class=\"p\">,</span> <span class=\"s1\">'django.contrib.sitemaps.views.sitemap'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'sitemaps'</span><span class=\"p\">:</span> <span class=\"n\">sitemaps</span><span class=\"p\">}),</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>This module is designed to be generic. In case there is anything you didn\u2019t like about it,\nor think it\u2019s not flexible enough, please let us know. We\u2019d love to improve it!</p>\n<p>If you have any other valuable contribution, suggestion or idea,\nplease let us know as well because we will look into it.\nPull requests are welcome too. :-)</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4980611, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "121719fabfc8fd5b43e9102a462c478a", "sha256": "440a4e19008f21d69f023b618320126c2c1ab87318cd9679a8425201d39a1ef8"}, "downloads": -1, "filename": "sigmacms_fluent_pages-1.0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "121719fabfc8fd5b43e9102a462c478a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 197051, "upload_time": "2016-11-07T07:18:04", "upload_time_iso_8601": "2016-11-07T07:18:04.982443Z", "url": "https://files.pythonhosted.org/packages/d5/04/72ecbfdcab99926f1c4aec8580081ac369510bcee1b9b09a91d9f1c1af8d/sigmacms_fluent_pages-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6702d59d22aeb495d71c9e90f5e1aa84", "sha256": "c652634642d0e43ee28adbade328b31add08987286ea50cae5693dd6428df131"}, "downloads": -1, "filename": "sigmacms-fluent-pages-1.0.1.tar.gz", "has_sig": true, "md5_digest": "6702d59d22aeb495d71c9e90f5e1aa84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104726, "upload_time": "2016-11-07T07:17:56", "upload_time_iso_8601": "2016-11-07T07:17:56.234650Z", "url": "https://files.pythonhosted.org/packages/21/f7/3cdec6e3773d1b5af2327ba297df5de018274ec50e83ca68e4573655918a/sigmacms-fluent-pages-1.0.1.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "0e5e648c7576f58384e75da8283e00fc", "sha256": "124640139407216f21bef94b77fa4b79719bab31d1083ba88288ae661de7c52e"}, "downloads": -1, "filename": "sigmacms_fluent_pages-1.0b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e5e648c7576f58384e75da8283e00fc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 195654, "upload_time": "2016-06-14T11:01:05", "upload_time_iso_8601": "2016-06-14T11:01:05.284211Z", "url": "https://files.pythonhosted.org/packages/f8/bb/496a8929d13c342e4049444b94b17026f5360aacc4b2ed1e0eb853f499fa/sigmacms_fluent_pages-1.0b3-py2.py3-none-any.whl", "yanked": false}], "1.0b4": [{"comment_text": "", "digests": {"md5": "549e7ad64a90219c037af47eb223ce99", "sha256": "b695f8c8e1612d020dbafd67d7758af379993883120780360be02599796b0b34"}, "downloads": -1, "filename": "sigmacms_fluent_pages-1.0b4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "549e7ad64a90219c037af47eb223ce99", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 195651, "upload_time": "2016-06-14T11:05:08", "upload_time_iso_8601": "2016-06-14T11:05:08.029162Z", "url": "https://files.pythonhosted.org/packages/26/1d/bd3ba83c93bdad97c242a20cb84a3c4e996d9c056be20e6309c687c944f9/sigmacms_fluent_pages-1.0b4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9df0c778121478552f47e5b5b9a7b16", "sha256": "4cfaba4f48701b247a544001ab64e922534b207f6719cec41c5b83727761b580"}, "downloads": -1, "filename": "sigmacms-fluent-pages-1.0b4.tar.gz", "has_sig": true, "md5_digest": "c9df0c778121478552f47e5b5b9a7b16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103276, "upload_time": "2016-06-14T11:04:50", "upload_time_iso_8601": "2016-06-14T11:04:50.146713Z", "url": "https://files.pythonhosted.org/packages/e1/a1/b0540b81cb4a98bd4db2e556e7c3c7f03dafa9d1e990e0b73647fcf1a797/sigmacms-fluent-pages-1.0b4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "121719fabfc8fd5b43e9102a462c478a", "sha256": "440a4e19008f21d69f023b618320126c2c1ab87318cd9679a8425201d39a1ef8"}, "downloads": -1, "filename": "sigmacms_fluent_pages-1.0.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "121719fabfc8fd5b43e9102a462c478a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 197051, "upload_time": "2016-11-07T07:18:04", "upload_time_iso_8601": "2016-11-07T07:18:04.982443Z", "url": "https://files.pythonhosted.org/packages/d5/04/72ecbfdcab99926f1c4aec8580081ac369510bcee1b9b09a91d9f1c1af8d/sigmacms_fluent_pages-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6702d59d22aeb495d71c9e90f5e1aa84", "sha256": "c652634642d0e43ee28adbade328b31add08987286ea50cae5693dd6428df131"}, "downloads": -1, "filename": "sigmacms-fluent-pages-1.0.1.tar.gz", "has_sig": true, "md5_digest": "6702d59d22aeb495d71c9e90f5e1aa84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104726, "upload_time": "2016-11-07T07:17:56", "upload_time_iso_8601": "2016-11-07T07:17:56.234650Z", "url": "https://files.pythonhosted.org/packages/21/f7/3cdec6e3773d1b5af2327ba297df5de018274ec50e83ca68e4573655918a/sigmacms-fluent-pages-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:52 2020"}