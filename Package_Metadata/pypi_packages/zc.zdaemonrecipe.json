{"info": {"author": "Jim Fulton", "author_email": "jim@zope.com", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "**************\nzdaemon recipe\n**************\n\nThe zdaemon recipe provides support for generating zdaemon-based run\nscripts.\n\n.. contents::\n\nReleases\n********\n\n1.0.0 (unreleased)\n==================\n\n- Python 3 support.\n\n\n0.3.1 (2013-04-01)\n==================\n\n- Add MANIFEST.in, necessary with the move to git.\n\n\n0.3 (2013-04-01)\n================\n\n- Added ``shell-script`` setting.  When true, shell scripts that refer\n  to a zdaemon script in the software installation are generated instead\n  of Python scripts in the rc directory.\n\n\n0.2 (2008-09-10)\n================\n\n- Added support for the deployment recipe ``name`` option. \n\n\n0.1 (2008-05-01)\n================\n\nInitial release.\n\nDetailed Documentation\n**********************\n\nzdaemon recipe\n==============\n\nzc.zdaemonrecipe provides a recipe that can be used to create zdaemon\nrun-control scripts. It can be used directly in buildouts and by other\nrecipes.\n\nIt accepts 2 options:\n\nprogram\n   The anme of the program and, optionally, command-line arguments.\n   (Note that, due to limitations in zdaemon, the command-line options\n   cannot have embedded spaces.)\n\nzdaemon.conf\n   Optionally, you can provide extra configuration in ZConfig format.\n   What's provided will be augmented by the zdaemon recipe, as needed.\n\ndeployment\n   The name of a zc.recipe.deployment deployment.  If specified, then:\n\n   - The configuration, log, and run-time files will be put in\n     deployment-defined directories.\n\n   - A logrotate configuration will be generated for the zdaemon\n     transacript log.\n\nLet's look at an example:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = run\n    ...\n    ... [run]\n    ... recipe = zc.zdaemonrecipe\n    ... program = sleep 1\n    ... ''')\n\nIf we run the buildout, we'll get a run part that contains the zdaemon\nconfiguration file and a run script in the bin directory:\n\n    >>> from six import print_\n\n    >>> print_(system(buildout), end='')\n    Installing run.\n    Generated script '/sample-buildout/bin/zdaemon'.\n    Generated script '/sample-buildout/bin/run'.\n\n    >>> cat('parts', 'run', 'zdaemon.conf')\n    <runner>\n      daemon on\n      directory /sample-buildout/parts/run\n      program sleep 1\n      socket-name /sample-buildout/parts/run/zdaemon.sock\n      transcript /sample-buildout/parts/run/transcript.log\n    </runner>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path /sample-buildout/parts/run/transcript.log\n      </logfile>\n    </eventlog>\n\n    >>> cat('bin', 'run') # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    #!/usr/local/bin/python2.4\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n      ...\n      '/sample-buildout/eggs/zdaemon-2.0-py2.4.egg',\n      '/sample-buildout/eggs/ZConfig-2.4-py2.4.egg',\n      ]\n    <BLANKLINE>\n    import zdaemon.zdctl\n    <BLANKLINE>\n    if __name__ == '__main__':\n        sys.exit(zdaemon.zdctl.main([\n            '-C', '/sample-buildout/parts/run/zdaemon.conf',\n            ]+sys.argv[1:]\n            ))\n\nzdaemon will also be installed:\n\n    >>> ls('eggs')\n    d  ZConfig-2.4-py2.4.egg\n    d  setuptools-0.6-py2.4.egg\n    d  zc.buildout-1.0.0b27-py2.4.egg\n    d  zc.recipe.egg-1.0.0-py2.4.egg\n    d  zdaemon-2.0-py2.4.egg\n    d  zope.testing-3.4-py2.4.egg\n\nYou can use an eggs option to specify a zdaemon version.\n\n\nIf we specify a deployment, then the files will be placed in\ndeployment-defined locations:\n\n    >>> mkdir('etc')\n    >>> mkdir('init.d')\n    >>> mkdir('logrotate')\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = run\n    ...\n    ... [run]\n    ... recipe = zc.zdaemonrecipe\n    ... program = sleep 1\n    ... deployment = deploy\n    ...\n    ... [deploy]\n    ... name = test-deploy\n    ... etc-directory = etc\n    ... rc-directory = init.d\n    ... log-directory = logs\n    ... run-directory = run\n    ... logrotate-directory = logrotate\n    ... user = bob\n    ... ''')\n\n    >>> print_(system(buildout), end='')\n    Uninstalling run.\n    Installing run.\n    Generated script '/sample-buildout/init.d/test-deploy-run'.\n\n    >>> import os\n    >>> os.path.exists('parts/run')\n    False\n\n    >>> os.path.exists('bin/run')\n    False\n\n    >>> cat('etc', 'run-zdaemon.conf')\n    <runner>\n      daemon on\n      directory run\n      program sleep 1\n      socket-name run/run-zdaemon.sock\n      transcript logs/run.log\n      user bob\n    </runner>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path logs/run.log\n      </logfile>\n    </eventlog>\n\n    >>> cat('init.d', 'test-deploy-run') # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    #!/usr/local/bin/python2.4\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [\n      ...\n      '/sample-buildout/eggs/zdaemon-2.0a6-py2.4.egg',\n      '/sample-buildout/eggs/ZConfig-2.4a6-py2.4.egg',\n      ]\n    <BLANKLINE>\n    import zdaemon.zdctl\n    <BLANKLINE>\n    if __name__ == '__main__':\n        sys.exit(zdaemon.zdctl.main([\n            '-C', 'etc/run-zdaemon.conf',\n            ]+sys.argv[1:]\n            ))\n\n    >>> cat('logrotate', 'test-deploy-run')\n    logs/run.log {\n      rotate 5\n      weekly\n      postrotate\n        init.d/test-deploy-run -C etc/run-zdaemon.conf reopen_transcript\n      endscript\n    }\n\nIf you want to override any part of the generated zdaemon configuration,\nsimply provide a zdaemon.conf option in your instance section:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = run\n    ...\n    ... [run]\n    ... recipe = zc.zdaemonrecipe\n    ... program = sleep 1\n    ... deployment = deploy\n    ... zdaemon.conf =\n    ...     <runner>\n    ...       daemon off\n    ...       socket-name /sample-buildout/parts/instance/sock\n    ...       transcript /dev/null\n    ...     </runner>\n    ...     <eventlog>\n    ...     </eventlog>\n    ...\n    ... [deploy]\n    ... etc-directory = etc\n    ... rc-directory = init.d\n    ... log-directory = logs\n    ... run-directory = run\n    ... logrotate-directory = logrotate\n    ... user = bob\n    ... ''')\n\n    >>> print_(system(buildout), end='')\n    Uninstalling run.\n    Installing run.\n    Generated script '/sample-buildout/init.d/deploy-run'.\n\n    >>> cat('etc', 'run-zdaemon.conf')\n    <runner>\n      daemon off\n      directory run\n      program sleep 1\n      socket-name /sample-buildout/parts/instance/sock\n      transcript /dev/null\n      user bob\n    </runner>\n    <BLANKLINE>\n    <eventlog>\n    </eventlog>\n\n\nCreating shell start scripts\n----------------------------\n\nBy default, the startup scripts are generated Python scripts that use\nthe zdaemon module.  Sometimes, this is inconvenient.  In particular,\nwhen deploying software, generated Python scripts may break after a\nsoftware update because they contain paths to software eggs.  We can\nrequest shell scripts that invoke a generic zdaemon script.  The shell\nscript only depends on the path to the zdaemon script, which generally\ndoesn't change when updating softawre.\n\nTo request a shell script, add a shell-script option with a true value:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = run\n    ...\n    ... [run]\n    ... recipe = zc.zdaemonrecipe\n    ... program = sleep 1\n    ... shell-script = true\n    ... deployment = deploy\n    ...\n    ... [deploy]\n    ... name = test-deploy\n    ... etc-directory = etc\n    ... rc-directory = init.d\n    ... log-directory = logs\n    ... run-directory = run\n    ... logrotate-directory = logrotate\n    ... user = alice\n    ... ''')\n\n    >>> print_(system(buildout), end='')  # doctest: +NORMALIZE_WHITESPACE\n    Uninstalling run.\n    Installing run.\n    zc.zdaemonrecipe: Generated shell script\n        '/sample-buildout/init.d/test-deploy-run'.\n\n    >>> cat('init.d', 'test-deploy-run')  # doctest: +NORMALIZE_WHITESPACE\n    #!/bin/sh\n    su alice -c \\\n        \"/sample-buildout/bin/zdaemon\n             -C '/sample-buildout/etc/run-zdaemon.conf' $*\"\n\n    >>> ls('etc')\n    -  run-zdaemon.conf\n\n\nUsing the zdaemon recipe from other recipes\n-------------------------------------------\n\nTo use the daemon recipe from other recipes, simply instantiate an\ninstance in your recipe __init__, passing your __init__ arguments, and\nthen calling the instance's install in your install method.\n\nDownload\n**********************", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zc.zdaemonrecipe", "package_url": "https://pypi.org/project/zc.zdaemonrecipe/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.zdaemonrecipe/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/zc.zdaemonrecipe/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "ZC Buildout recipe for zdaemon scripts", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The zdaemon recipe provides support for generating zdaemon-based run\nscripts.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#releases\" id=\"id6\" rel=\"nofollow\">Releases</a><ul>\n<li><a href=\"#unreleased\" id=\"id7\" rel=\"nofollow\">1.0.0 (unreleased)</a></li>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">0.3.1 (2013-04-01)</a></li>\n<li><a href=\"#id2\" id=\"id9\" rel=\"nofollow\">0.3 (2013-04-01)</a></li>\n<li><a href=\"#id3\" id=\"id10\" rel=\"nofollow\">0.2 (2008-09-10)</a></li>\n<li><a href=\"#id4\" id=\"id11\" rel=\"nofollow\">0.1 (2008-05-01)</a></li>\n</ul>\n</li>\n<li><a href=\"#detailed-documentation\" id=\"id12\" rel=\"nofollow\">Detailed Documentation</a><ul>\n<li><a href=\"#creating-shell-start-scripts\" id=\"id13\" rel=\"nofollow\">Creating shell start scripts</a></li>\n<li><a href=\"#using-the-zdaemon-recipe-from-other-recipes\" id=\"id14\" rel=\"nofollow\">Using the zdaemon recipe from other recipes</a></li>\n</ul>\n</li>\n<li><a href=\"#download\" id=\"id15\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<div id=\"releases\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Releases</a></h2>\n<div id=\"unreleased\">\n<h3><a href=\"#id7\" rel=\"nofollow\">1.0.0 (unreleased)</a></h3>\n<ul>\n<li>Python 3 support.</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3><a href=\"#id8\" rel=\"nofollow\">0.3.1 (2013-04-01)</a></h3>\n<ul>\n<li>Add MANIFEST.in, necessary with the move to git.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id9\" rel=\"nofollow\">0.3 (2013-04-01)</a></h3>\n<ul>\n<li>Added <tt><span class=\"pre\">shell-script</span></tt> setting.  When true, shell scripts that refer\nto a zdaemon script in the software installation are generated instead\nof Python scripts in the rc directory.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id10\" rel=\"nofollow\">0.2 (2008-09-10)</a></h3>\n<ul>\n<li>Added support for the deployment recipe <tt>name</tt> option.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id11\" rel=\"nofollow\">0.1 (2008-05-01)</a></h3>\n<p>Initial release.</p>\n</div>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Detailed Documentation</a></h2>\n<h2 id=\"id5\"><span class=\"section-subtitle\">zdaemon recipe</span></h2>\n<p>zc.zdaemonrecipe provides a recipe that can be used to create zdaemon\nrun-control scripts. It can be used directly in buildouts and by other\nrecipes.</p>\n<p>It accepts 2 options:</p>\n<dl>\n<dt>program</dt>\n<dd>The anme of the program and, optionally, command-line arguments.\n(Note that, due to limitations in zdaemon, the command-line options\ncannot have embedded spaces.)</dd>\n<dt>zdaemon.conf</dt>\n<dd>Optionally, you can provide extra configuration in ZConfig format.\nWhat\u2019s provided will be augmented by the zdaemon recipe, as needed.</dd>\n<dt>deployment</dt>\n<dd><p>The name of a zc.recipe.deployment deployment.  If specified, then:</p>\n<ul>\n<li>The configuration, log, and run-time files will be put in\ndeployment-defined directories.</li>\n<li>A logrotate configuration will be generated for the zdaemon\ntransacript log.</li>\n</ul>\n</dd>\n</dl>\n<p>Let\u2019s look at an example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... '''\n... [buildout]\n... parts = run\n...\n... [run]\n... recipe = zc.zdaemonrecipe\n... program = sleep 1\n... ''')\n</pre>\n</blockquote>\n<p>If we run the buildout, we\u2019ll get a run part that contains the zdaemon\nconfiguration file and a run script in the bin directory:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from six import print_\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nInstalling run.\nGenerated script '/sample-buildout/bin/zdaemon'.\nGenerated script '/sample-buildout/bin/run'.\n</pre>\n<pre>&gt;&gt;&gt; cat('parts', 'run', 'zdaemon.conf')\n&lt;runner&gt;\n  daemon on\n  directory /sample-buildout/parts/run\n  program sleep 1\n  socket-name /sample-buildout/parts/run/zdaemon.sock\n  transcript /sample-buildout/parts/run/transcript.log\n&lt;/runner&gt;\n&lt;BLANKLINE&gt;\n&lt;eventlog&gt;\n  &lt;logfile&gt;\n    path /sample-buildout/parts/run/transcript.log\n  &lt;/logfile&gt;\n&lt;/eventlog&gt;\n</pre>\n<pre>&gt;&gt;&gt; cat('bin', 'run') # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n#!/usr/local/bin/python2.4\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n  ...\n  '/sample-buildout/eggs/zdaemon-2.0-py2.4.egg',\n  '/sample-buildout/eggs/ZConfig-2.4-py2.4.egg',\n  ]\n&lt;BLANKLINE&gt;\nimport zdaemon.zdctl\n&lt;BLANKLINE&gt;\nif __name__ == '__main__':\n    sys.exit(zdaemon.zdctl.main([\n        '-C', '/sample-buildout/parts/run/zdaemon.conf',\n        ]+sys.argv[1:]\n        ))\n</pre>\n</blockquote>\n<p>zdaemon will also be installed:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ls('eggs')\nd  ZConfig-2.4-py2.4.egg\nd  setuptools-0.6-py2.4.egg\nd  zc.buildout-1.0.0b27-py2.4.egg\nd  zc.recipe.egg-1.0.0-py2.4.egg\nd  zdaemon-2.0-py2.4.egg\nd  zope.testing-3.4-py2.4.egg\n</pre>\n</blockquote>\n<p>You can use an eggs option to specify a zdaemon version.</p>\n<p>If we specify a deployment, then the files will be placed in\ndeployment-defined locations:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; mkdir('etc')\n&gt;&gt;&gt; mkdir('init.d')\n&gt;&gt;&gt; mkdir('logrotate')\n</pre>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... '''\n... [buildout]\n... parts = run\n...\n... [run]\n... recipe = zc.zdaemonrecipe\n... program = sleep 1\n... deployment = deploy\n...\n... [deploy]\n... name = test-deploy\n... etc-directory = etc\n... rc-directory = init.d\n... log-directory = logs\n... run-directory = run\n... logrotate-directory = logrotate\n... user = bob\n... ''')\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling run.\nInstalling run.\nGenerated script '/sample-buildout/init.d/test-deploy-run'.\n</pre>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.exists('parts/run')\nFalse\n</pre>\n<pre>&gt;&gt;&gt; os.path.exists('bin/run')\nFalse\n</pre>\n<pre>&gt;&gt;&gt; cat('etc', 'run-zdaemon.conf')\n&lt;runner&gt;\n  daemon on\n  directory run\n  program sleep 1\n  socket-name run/run-zdaemon.sock\n  transcript logs/run.log\n  user bob\n&lt;/runner&gt;\n&lt;BLANKLINE&gt;\n&lt;eventlog&gt;\n  &lt;logfile&gt;\n    path logs/run.log\n  &lt;/logfile&gt;\n&lt;/eventlog&gt;\n</pre>\n<pre>&gt;&gt;&gt; cat('init.d', 'test-deploy-run') # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n#!/usr/local/bin/python2.4\n&lt;BLANKLINE&gt;\nimport sys\nsys.path[0:0] = [\n  ...\n  '/sample-buildout/eggs/zdaemon-2.0a6-py2.4.egg',\n  '/sample-buildout/eggs/ZConfig-2.4a6-py2.4.egg',\n  ]\n&lt;BLANKLINE&gt;\nimport zdaemon.zdctl\n&lt;BLANKLINE&gt;\nif __name__ == '__main__':\n    sys.exit(zdaemon.zdctl.main([\n        '-C', 'etc/run-zdaemon.conf',\n        ]+sys.argv[1:]\n        ))\n</pre>\n<pre>&gt;&gt;&gt; cat('logrotate', 'test-deploy-run')\nlogs/run.log {\n  rotate 5\n  weekly\n  postrotate\n    init.d/test-deploy-run -C etc/run-zdaemon.conf reopen_transcript\n  endscript\n}\n</pre>\n</blockquote>\n<p>If you want to override any part of the generated zdaemon configuration,\nsimply provide a zdaemon.conf option in your instance section:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... '''\n... [buildout]\n... parts = run\n...\n... [run]\n... recipe = zc.zdaemonrecipe\n... program = sleep 1\n... deployment = deploy\n... zdaemon.conf =\n...     &lt;runner&gt;\n...       daemon off\n...       socket-name /sample-buildout/parts/instance/sock\n...       transcript /dev/null\n...     &lt;/runner&gt;\n...     &lt;eventlog&gt;\n...     &lt;/eventlog&gt;\n...\n... [deploy]\n... etc-directory = etc\n... rc-directory = init.d\n... log-directory = logs\n... run-directory = run\n... logrotate-directory = logrotate\n... user = bob\n... ''')\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')\nUninstalling run.\nInstalling run.\nGenerated script '/sample-buildout/init.d/deploy-run'.\n</pre>\n<pre>&gt;&gt;&gt; cat('etc', 'run-zdaemon.conf')\n&lt;runner&gt;\n  daemon off\n  directory run\n  program sleep 1\n  socket-name /sample-buildout/parts/instance/sock\n  transcript /dev/null\n  user bob\n&lt;/runner&gt;\n&lt;BLANKLINE&gt;\n&lt;eventlog&gt;\n&lt;/eventlog&gt;\n</pre>\n</blockquote>\n<div id=\"creating-shell-start-scripts\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Creating shell start scripts</a></h3>\n<p>By default, the startup scripts are generated Python scripts that use\nthe zdaemon module.  Sometimes, this is inconvenient.  In particular,\nwhen deploying software, generated Python scripts may break after a\nsoftware update because they contain paths to software eggs.  We can\nrequest shell scripts that invoke a generic zdaemon script.  The shell\nscript only depends on the path to the zdaemon script, which generally\ndoesn\u2019t change when updating softawre.</p>\n<p>To request a shell script, add a shell-script option with a true value:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... '''\n... [buildout]\n... parts = run\n...\n... [run]\n... recipe = zc.zdaemonrecipe\n... program = sleep 1\n... shell-script = true\n... deployment = deploy\n...\n... [deploy]\n... name = test-deploy\n... etc-directory = etc\n... rc-directory = init.d\n... log-directory = logs\n... run-directory = run\n... logrotate-directory = logrotate\n... user = alice\n... ''')\n</pre>\n<pre>&gt;&gt;&gt; print_(system(buildout), end='')  # doctest: +NORMALIZE_WHITESPACE\nUninstalling run.\nInstalling run.\nzc.zdaemonrecipe: Generated shell script\n    '/sample-buildout/init.d/test-deploy-run'.\n</pre>\n<pre>&gt;&gt;&gt; cat('init.d', 'test-deploy-run')  # doctest: +NORMALIZE_WHITESPACE\n#!/bin/sh\nsu alice -c \\\n    \"/sample-buildout/bin/zdaemon\n         -C '/sample-buildout/etc/run-zdaemon.conf' $*\"\n</pre>\n<pre>&gt;&gt;&gt; ls('etc')\n-  run-zdaemon.conf\n</pre>\n</blockquote>\n</div>\n<div id=\"using-the-zdaemon-recipe-from-other-recipes\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Using the zdaemon recipe from other recipes</a></h3>\n<p>To use the daemon recipe from other recipes, simply instantiate an\ninstance in your recipe __init__, passing your __init__ arguments, and\nthen calling the instance\u2019s install in your install method.</p>\n</div>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 1732179, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d13d8d700a34f88739c8fea685b0ce37", "sha256": "08b9ee8c2e5785af5fe990af1a919349eac35d6740bb5bf35200789904ef4061"}, "downloads": -1, "filename": "zc.zdaemonrecipe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d13d8d700a34f88739c8fea685b0ce37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5579, "upload_time": "2008-05-01T20:08:46", "upload_time_iso_8601": "2008-05-01T20:08:46Z", "url": "https://files.pythonhosted.org/packages/90/a4/7e718306822bebb604af3325f3cf55a6e095493cdfeabda13a6daaa8075c/zc.zdaemonrecipe-0.1.0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f5f03861eb3d06d7bc35f7fb894366e1", "sha256": "b47e7a061cec3f5768037489d4e6483f5ed0a984b2d29994b7d844e4c22730c0"}, "downloads": -1, "filename": "zc.zdaemonrecipe-0.2.tar.gz", "has_sig": false, "md5_digest": "f5f03861eb3d06d7bc35f7fb894366e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6255, "upload_time": "2008-09-10T13:41:25", "upload_time_iso_8601": "2008-09-10T13:41:25Z", "url": "https://files.pythonhosted.org/packages/9b/c9/c65976d4a1ed754a532bcbf51f40bbf8de57fb62fdf89558e59e3bde5042/zc.zdaemonrecipe-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "45963769570b2773692d15a2d844a4c2", "sha256": "5ffc7acdec18510242aac50b3593216e281efd6e0c39bf35ca926aee3baa14ef"}, "downloads": -1, "filename": "zc.zdaemonrecipe-0.3.zip", "has_sig": false, "md5_digest": "45963769570b2773692d15a2d844a4c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12199, "upload_time": "2013-04-01T14:26:03", "upload_time_iso_8601": "2013-04-01T14:26:03.725030Z", "url": "https://files.pythonhosted.org/packages/05/19/31499265522ca55dc486cdd218e88f84c9cc0e5bb8734685e06aa60ce1f9/zc.zdaemonrecipe-0.3.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b5c9b5e0d0ab36865ee4c1c2f274663c", "sha256": "b54a385aabb05d028a13ac7b627c8e2a5e710b5b9726b2543c140826047b2509"}, "downloads": -1, "filename": "zc.zdaemonrecipe-0.3.1.zip", "has_sig": false, "md5_digest": "b5c9b5e0d0ab36865ee4c1c2f274663c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17749, "upload_time": "2013-04-01T15:35:45", "upload_time_iso_8601": "2013-04-01T15:35:45.470978Z", "url": "https://files.pythonhosted.org/packages/9c/64/9c61aac082eb2ee20df228392c182b63578f3128399a7bf1223a032ab0c1/zc.zdaemonrecipe-0.3.1.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "05498cb2c46efb992451b1daf68ed245", "sha256": "e89693f40655164c818f04ff7e70d858eae809598a0afea406f201d025722b43"}, "downloads": -1, "filename": "zc.zdaemonrecipe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05498cb2c46efb992451b1daf68ed245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10393, "upload_time": "2015-09-21T19:49:30", "upload_time_iso_8601": "2015-09-21T19:49:30.877021Z", "url": "https://files.pythonhosted.org/packages/14/0e/05ded59f327fe93e71b6fcd9263fe82016cfeec2c3a13b055bbd9119a414/zc.zdaemonrecipe-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05498cb2c46efb992451b1daf68ed245", "sha256": "e89693f40655164c818f04ff7e70d858eae809598a0afea406f201d025722b43"}, "downloads": -1, "filename": "zc.zdaemonrecipe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05498cb2c46efb992451b1daf68ed245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10393, "upload_time": "2015-09-21T19:49:30", "upload_time_iso_8601": "2015-09-21T19:49:30.877021Z", "url": "https://files.pythonhosted.org/packages/14/0e/05ded59f327fe93e71b6fcd9263fe82016cfeec2c3a13b055bbd9119a414/zc.zdaemonrecipe-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:51 2020"}