{"info": {"author": "Daniil Minukhin", "author_email": "ddddsa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Documentation", "Topic :: Text Processing :: Markup", "Topic :: Utilities"], "description": "[![](https://img.shields.io/pypi/v/pydbml.svg)](https://pypi.org/project/pydbml/)  [![](https://img.shields.io/github/v/tag/Vanderhoof/PyDBML.svg?label=GitHub)](https://github.com/Vanderhoof/PyDBML)\n\n# DBML parser for Python\n\nPyDBML is a Python parser for [DBML](https://www.dbml.org) syntax.\n\n## Installation\n\nYou can install PyDBML using pip:\n\n```bash\npip install pydbml\n```\n\n## Quick start\n\nImport the `PyDBML` class and initialize it with path to DBML-file:\n\n```python\n>>> from pydbml import PyDBML\n>>> from pathlib import Path\n>>> parsed = PyDBML(Path('test_schema.dbml'))\n\n```\n\nor with file stream:\n```python\n>>> with open('test_schema.dbml') as f:\n...     parsed = PyDBML(f)\n\n```\n\nor with entire source string:\n```python\n>>> with open('test_schema.dbml') as f:\n...     source = f.read()\n>>> parsed = PyDBML(source)\n\n```\n\nYou can access tables inside the `tables` attribute:\n\n```python\n>>> for table in parsed.tables:\n...     print(table.name)\n...\norders\norder_items\nproducts\nusers\nmerchants\ncountries\n\n```\n\nOr just by getting items by index or table name:\n\n```python\n>>> parsed['countries']\nTable('countries', [Column('code', 'int', pk=True), Column('name', 'varchar'), Column('continent_name', 'varchar')])\n>>> parsed[1]\nTable('order_items', [Column('order_id', 'int'), Column('product_id', 'int'), Column('quantity', 'int', default=1)])\n\n```\n\nOther meaningful attributes are:\n\n* **refs** \u2014 list of all references,\n* **enums** \u2014 list of all enums,\n* **table_groups** \u2014 list of all table groups,\n* **project** \u2014 the Project object, if was defined.\n\nFinally, you can get the SQL for your DBML schema by accessing `sql` property:\n\n```python\n>>> print(parsed.sql)  # doctest:+ELLIPSIS\nCREATE TYPE \"orders_status\" AS ENUM (\n  'created',\n  'running',\n  'done',\n  'failure',\n);\nCREATE TYPE \"product status\" AS ENUM (\n  'Out of Stock',\n  'In Stock',\n);\nCREATE TABLE \"orders\" (\n  \"id\" int PRIMARY KEY AUTOINCREMENT,\n  \"user_id\" int UNIQUE NOT NULL,\n  \"status\" orders_status,\n  \"created_at\" varchar\n);\n...\n\n```\n\n# Docs\n\n## Table class\n\nAfter running parser all tables from the schema are stored in `tables` attribute of the `PyDBMLParseResults` object.\n\n```python\n>>> from pydbml import PyDBML\n>>> parsed = PyDBML.parse_file('test_schema.dbml')\n>>> table = parsed.tables[0]\n>>> print(table)\nTable orders(id, user_id, status, created_at)\n\n```\n\nImportant attributes of the `Table` object are:\n\n* **name** (str) \u2014 table name,\n* **refs** (list of `TableReference`) \u2014 all foreign keys, defined for the table,\n* **columns** (list of `Column`) \u2014 table columns,\n* **indexes** (list of `Index`) \u2014 indexes, defined for the table.\n* **alias** (str) \u2014 table alias, if defined.\n* **note** (str) \u2014 note for table, if defined.\n* **header_color** (str) \u2014 the header_color param, if defined.\n* **comment** (str) \u2014 comment, if it was added just before table definition.\n\n`Table` object may act as a list or a dictionary of columns:\n\n```python\n>>> print(table[0])\nColumn(id int pk autoincrement)\n>>> print(table['status'])\nColumn(status orders_status)\n\n```\n\n## Column class\n\nTable columns are stored in the `columns` attribute of a `Table` object.\n\nImportant attributes of the `Column` object are:\n\n* **name** (str) \u2014 column name,\n* **table** (Table)\u2014 link to `Table` object, which holds this column.\n* **type** (str or `Enum`) \u2014 column type. If type is a enum, defined in the same schema, this attribute will hold a link to corresponding `Enum` object.\n* **unique** (bool) \u2014 is column unique.\n* **not_null** (bool) \u2014 is column not null.\n* **pk** (bool) \u2014 is column a primary key.\n* **autoinc** (bool) \u2014 is an autoincrement column.\n* **default** (str or int or float) \u2014 column's default value.\n* **note** (Note) \u2014 column's note if was defined.\n* **comment** (str) \u2014 comment, if it was added just before column definition or right after it on the same line.\n\n## Index class\n\nIndexes are stored in the `indexes` attribute of a `Table` object.\n\nImportant attributes of the `Index` object are:\n\n* **subjects** (list of `Column`) \u2014 list of columns, which are indexed.\n* **table** (`Table`) \u2014 table, for which this index is defined.\n* **name** (str) \u2014 index name, if defined.\n* **unique** (bool) \u2014 is index unique.\n* **type** (str) \u2014 index type, if defined. Can be either `hash` or `btree`.\n* **pk** (bool) \u2014 is this a primary key index.\n* **note** (note) \u2014 index note, if defined.\n* **comment** (str) \u2014 comment, if it was added just before index definition.\n\n## Reference class\n\nAfter running parser all references from the schema are stored in `refs` attribute of the `PyDBMLParseResults` object.\n\n```python\n>>> from pydbml import PyDBML\n>>> parsed = PyDBML.parse_file('test_schema.dbml')\n>>> ref = parsed.refs[0]\n>>> print(ref)\nReference(orders.id < order_items.order_id)\n\n```\n\nImportant attributes of the `Reference` object are:\n\n* **type** (str) \u2014 reference type, in DBML syntax:\n  * `<` \u2014 one to many;\n  * `>` \u2014 many to one;\n  * `-` \u2014 one to one.\n* **table1** (`Table`) \u2014 link to the first table of the reference.\n* **col1** (`Column`) \u2014 link to the first column of the reference.\n* **table2** (`Table`) \u2014 link to the second table of the reference.\n* **col2** (`Column`) \u2014 link to the second column of the reference.\n* **name** (str) \u2014 reference name, if defined.\n* **on_update** (str) \u2014 reference's on update setting, if defined.\n* **on_delete** (str) \u2014 reference's on delete setting, if defined.\n* **comment** (str) \u2014 comment, if it was added before reference definition.\n\n## TableReference class\n\nApart from `Reference` objects, parser also creates `TableReference` objects, which are stored in each table, where the foreign key should be defined. These objects don't have types. List of references is stored in `refs` attribute of a Table object:\n\n```python\n>>> from pydbml import PyDBML\n>>> parsed = PyDBML.parse_file('test_schema.dbml')\n>>> order_items_refs = parsed.tables[1].refs\n>>> print(order_items_refs[0])\nTableReference(order_id -> orders.id)\n\n```\n\nImportant attributes of the `TableReference` object are:\n\n* **col** (`Column`) \u2014 link to the column of the reference.\n* **ref_table** (`Table`) \u2014 link to the second table of the reference.\n* **ref_col** (`Column`) \u2014 link to the second column of the reference.\n* **name** (str) \u2014 reference name, if defined.\n* **on_update** (str) \u2014 reference's on update setting, if defined.\n* **on_delete** (str) \u2014 reference's on delete setting, if defined.\n\n## Enum class\n\nAfter running parser all enums from the schema are stored in `enums` attribute of the `PyDBMLParseResults` object.\n\n```python\n>>> from pydbml import PyDBML\n>>> parsed = PyDBML.parse_file('test_schema.dbml')\n>>> enum = parsed.enums[0]\n>>> print(enum)\nEnum orders_status (created, running, done, failure)\n\n```\n\n`Enum` object contains three attributes:\n\n* **name** (str) \u2014 enum name,\n* **items** (list of `EnumItem`) \u2014 list of items.\n* **comment** (str) \u2014 comment, which was defined before enum definition.\n\nEnum objects also act as a list of items:\n\n```python\n>>> print(enum[0])\ncreated\n\n```\n\n### EnumItem class\n\nEnum items are stored in the `items` property of a `Enum` class.\n\n`EnumItem` object contains following attributes:\n\n* **name** (str) \u2014 enum item name,\n* **note** (`Note`) \u2014 enum item note, if was defined.\n* **comment** (str) \u2014 comment, which was defined before enum item definition or right after it on the same line.\n\n## Note class\n\nNote is a basic class, which may appear in some other classes' `note` attribute. It has just one meaningful attribute:\n\n**text** (str) \u2014 note text.\n\n## Project class\n\nAfter running parser the project info is stored in the `project` attribute of the `PyDBMLParseResults` object.\n\n```python\n>>> from pydbml import PyDBML\n>>> parsed = PyDBML.parse_file('test_schema.dbml')\n>>> parsed.project\nProject('test_schema', items={'author': 'dbml.org'}, note=Note('This schema is used for PyDBML doctest'))\n\n```\n\nAttributes of the `Project` object:\n\n* **name** (str) \u2014 project name,\n* **items** (str) \u2014 dictionary with project items,\n* **note** (`Note`) \u2014 note, if was defined,\n* **comment** (str) \u2014 comment, if was added before project definition.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydbml", "package_url": "https://pypi.org/project/pydbml/", "platform": "any", "project_url": "https://pypi.org/project/pydbml/", "project_urls": null, "release_url": "https://pypi.org/project/pydbml/0.3.2/", "requires_dist": ["pyparsing (>=2.4.2)"], "requires_python": ">=3.5", "summary": "DBML syntax parser for Python", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/pydbml/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/381f0a6e6f1081ec948e7ca1173ecf03738e0fea/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707964626d6c2e737667\"></a>  <a href=\"https://github.com/Vanderhoof/PyDBML\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1b6cce4f22ba2e518ca2af4d75eaf32df60d9f1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f56616e646572686f6f662f507944424d4c2e7376673f6c6162656c3d476974487562\"></a></p>\n<h1>DBML parser for Python</h1>\n<p>PyDBML is a Python parser for <a href=\"https://www.dbml.org\" rel=\"nofollow\">DBML</a> syntax.</p>\n<h2>Installation</h2>\n<p>You can install PyDBML using pip:</p>\n<pre>pip install pydbml\n</pre>\n<h2>Quick start</h2>\n<p>Import the <code>PyDBML</code> class and initialize it with path to DBML-file:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">))</span>\n</pre>\n<p>or with file stream:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>or with entire source string:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span>\n</pre>\n<p>You can access tables inside the <code>tables</code> attribute:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">orders</span>\n<span class=\"n\">order_items</span>\n<span class=\"n\">products</span>\n<span class=\"n\">users</span>\n<span class=\"n\">merchants</span>\n<span class=\"n\">countries</span>\n</pre>\n<p>Or just by getting items by index or table name:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"s1\">'countries'</span><span class=\"p\">]</span>\n<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'countries'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"s1\">'int'</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'varchar'</span><span class=\"p\">),</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'continent_name'</span><span class=\"p\">,</span> <span class=\"s1\">'varchar'</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'order_items'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'order_id'</span><span class=\"p\">,</span> <span class=\"s1\">'int'</span><span class=\"p\">),</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'product_id'</span><span class=\"p\">,</span> <span class=\"s1\">'int'</span><span class=\"p\">),</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'quantity'</span><span class=\"p\">,</span> <span class=\"s1\">'int'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n</pre>\n<p>Other meaningful attributes are:</p>\n<ul>\n<li><strong>refs</strong> \u2014 list of all references,</li>\n<li><strong>enums</strong> \u2014 list of all enums,</li>\n<li><strong>table_groups</strong> \u2014 list of all table groups,</li>\n<li><strong>project</strong> \u2014 the Project object, if was defined.</li>\n</ul>\n<p>Finally, you can get the SQL for your DBML schema by accessing <code>sql</code> property:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">sql</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">CREATE</span> <span class=\"n\">TYPE</span> <span class=\"s2\">\"orders_status\"</span> <span class=\"n\">AS</span> <span class=\"n\">ENUM</span> <span class=\"p\">(</span>\n  <span class=\"s1\">'created'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'running'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'done'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'failure'</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n<span class=\"n\">CREATE</span> <span class=\"n\">TYPE</span> <span class=\"s2\">\"product status\"</span> <span class=\"n\">AS</span> <span class=\"n\">ENUM</span> <span class=\"p\">(</span>\n  <span class=\"s1\">'Out of Stock'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'In Stock'</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n<span class=\"n\">CREATE</span> <span class=\"n\">TABLE</span> <span class=\"s2\">\"orders\"</span> <span class=\"p\">(</span>\n  <span class=\"s2\">\"id\"</span> <span class=\"nb\">int</span> <span class=\"n\">PRIMARY</span> <span class=\"n\">KEY</span> <span class=\"n\">AUTOINCREMENT</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"user_id\"</span> <span class=\"nb\">int</span> <span class=\"n\">UNIQUE</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"status\"</span> <span class=\"n\">orders_status</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"created_at\"</span> <span class=\"n\">varchar</span>\n<span class=\"p\">);</span>\n<span class=\"o\">...</span>\n</pre>\n<h1>Docs</h1>\n<h2>Table class</h2>\n<p>After running parser all tables from the schema are stored in <code>tables</code> attribute of the <code>PyDBMLParseResults</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n<span class=\"n\">Table</span> <span class=\"n\">orders</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">created_at</span><span class=\"p\">)</span>\n</pre>\n<p>Important attributes of the <code>Table</code> object are:</p>\n<ul>\n<li><strong>name</strong> (str) \u2014 table name,</li>\n<li><strong>refs</strong> (list of <code>TableReference</code>) \u2014 all foreign keys, defined for the table,</li>\n<li><strong>columns</strong> (list of <code>Column</code>) \u2014 table columns,</li>\n<li><strong>indexes</strong> (list of <code>Index</code>) \u2014 indexes, defined for the table.</li>\n<li><strong>alias</strong> (str) \u2014 table alias, if defined.</li>\n<li><strong>note</strong> (str) \u2014 note for table, if defined.</li>\n<li><strong>header_color</strong> (str) \u2014 the header_color param, if defined.</li>\n<li><strong>comment</strong> (str) \u2014 comment, if it was added just before table definition.</li>\n</ul>\n<p><code>Table</code> object may act as a list or a dictionary of columns:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"nb\">id</span> <span class=\"nb\">int</span> <span class=\"n\">pk</span> <span class=\"n\">autoincrement</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s1\">'status'</span><span class=\"p\">])</span>\n<span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">status</span> <span class=\"n\">orders_status</span><span class=\"p\">)</span>\n</pre>\n<h2>Column class</h2>\n<p>Table columns are stored in the <code>columns</code> attribute of a <code>Table</code> object.</p>\n<p>Important attributes of the <code>Column</code> object are:</p>\n<ul>\n<li><strong>name</strong> (str) \u2014 column name,</li>\n<li><strong>table</strong> (Table)\u2014 link to <code>Table</code> object, which holds this column.</li>\n<li><strong>type</strong> (str or <code>Enum</code>) \u2014 column type. If type is a enum, defined in the same schema, this attribute will hold a link to corresponding <code>Enum</code> object.</li>\n<li><strong>unique</strong> (bool) \u2014 is column unique.</li>\n<li><strong>not_null</strong> (bool) \u2014 is column not null.</li>\n<li><strong>pk</strong> (bool) \u2014 is column a primary key.</li>\n<li><strong>autoinc</strong> (bool) \u2014 is an autoincrement column.</li>\n<li><strong>default</strong> (str or int or float) \u2014 column's default value.</li>\n<li><strong>note</strong> (Note) \u2014 column's note if was defined.</li>\n<li><strong>comment</strong> (str) \u2014 comment, if it was added just before column definition or right after it on the same line.</li>\n</ul>\n<h2>Index class</h2>\n<p>Indexes are stored in the <code>indexes</code> attribute of a <code>Table</code> object.</p>\n<p>Important attributes of the <code>Index</code> object are:</p>\n<ul>\n<li><strong>subjects</strong> (list of <code>Column</code>) \u2014 list of columns, which are indexed.</li>\n<li><strong>table</strong> (<code>Table</code>) \u2014 table, for which this index is defined.</li>\n<li><strong>name</strong> (str) \u2014 index name, if defined.</li>\n<li><strong>unique</strong> (bool) \u2014 is index unique.</li>\n<li><strong>type</strong> (str) \u2014 index type, if defined. Can be either <code>hash</code> or <code>btree</code>.</li>\n<li><strong>pk</strong> (bool) \u2014 is this a primary key index.</li>\n<li><strong>note</strong> (note) \u2014 index note, if defined.</li>\n<li><strong>comment</strong> (str) \u2014 comment, if it was added just before index definition.</li>\n</ul>\n<h2>Reference class</h2>\n<p>After running parser all references from the schema are stored in <code>refs</code> attribute of the <code>PyDBMLParseResults</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">refs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ref</span><span class=\"p\">)</span>\n<span class=\"n\">Reference</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">&lt;</span> <span class=\"n\">order_items</span><span class=\"o\">.</span><span class=\"n\">order_id</span><span class=\"p\">)</span>\n</pre>\n<p>Important attributes of the <code>Reference</code> object are:</p>\n<ul>\n<li><strong>type</strong> (str) \u2014 reference type, in DBML syntax:\n<ul>\n<li><code>&lt;</code> \u2014 one to many;</li>\n<li><code>&gt;</code> \u2014 many to one;</li>\n<li><code>-</code> \u2014 one to one.</li>\n</ul>\n</li>\n<li><strong>table1</strong> (<code>Table</code>) \u2014 link to the first table of the reference.</li>\n<li><strong>col1</strong> (<code>Column</code>) \u2014 link to the first column of the reference.</li>\n<li><strong>table2</strong> (<code>Table</code>) \u2014 link to the second table of the reference.</li>\n<li><strong>col2</strong> (<code>Column</code>) \u2014 link to the second column of the reference.</li>\n<li><strong>name</strong> (str) \u2014 reference name, if defined.</li>\n<li><strong>on_update</strong> (str) \u2014 reference's on update setting, if defined.</li>\n<li><strong>on_delete</strong> (str) \u2014 reference's on delete setting, if defined.</li>\n<li><strong>comment</strong> (str) \u2014 comment, if it was added before reference definition.</li>\n</ul>\n<h2>TableReference class</h2>\n<p>Apart from <code>Reference</code> objects, parser also creates <code>TableReference</code> objects, which are stored in each table, where the foreign key should be defined. These objects don't have types. List of references is stored in <code>refs</code> attribute of a Table object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">order_items_refs</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">refs</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">order_items_refs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">TableReference</span><span class=\"p\">(</span><span class=\"n\">order_id</span> <span class=\"o\">-&gt;</span> <span class=\"n\">orders</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<p>Important attributes of the <code>TableReference</code> object are:</p>\n<ul>\n<li><strong>col</strong> (<code>Column</code>) \u2014 link to the column of the reference.</li>\n<li><strong>ref_table</strong> (<code>Table</code>) \u2014 link to the second table of the reference.</li>\n<li><strong>ref_col</strong> (<code>Column</code>) \u2014 link to the second column of the reference.</li>\n<li><strong>name</strong> (str) \u2014 reference name, if defined.</li>\n<li><strong>on_update</strong> (str) \u2014 reference's on update setting, if defined.</li>\n<li><strong>on_delete</strong> (str) \u2014 reference's on delete setting, if defined.</li>\n</ul>\n<h2>Enum class</h2>\n<p>After running parser all enums from the schema are stored in <code>enums</code> attribute of the <code>PyDBMLParseResults</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enum</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"p\">)</span>\n<span class=\"n\">Enum</span> <span class=\"n\">orders_status</span> <span class=\"p\">(</span><span class=\"n\">created</span><span class=\"p\">,</span> <span class=\"n\">running</span><span class=\"p\">,</span> <span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"p\">)</span>\n</pre>\n<p><code>Enum</code> object contains three attributes:</p>\n<ul>\n<li><strong>name</strong> (str) \u2014 enum name,</li>\n<li><strong>items</strong> (list of <code>EnumItem</code>) \u2014 list of items.</li>\n<li><strong>comment</strong> (str) \u2014 comment, which was defined before enum definition.</li>\n</ul>\n<p>Enum objects also act as a list of items:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">created</span>\n</pre>\n<h3>EnumItem class</h3>\n<p>Enum items are stored in the <code>items</code> property of a <code>Enum</code> class.</p>\n<p><code>EnumItem</code> object contains following attributes:</p>\n<ul>\n<li><strong>name</strong> (str) \u2014 enum item name,</li>\n<li><strong>note</strong> (<code>Note</code>) \u2014 enum item note, if was defined.</li>\n<li><strong>comment</strong> (str) \u2014 comment, which was defined before enum item definition or right after it on the same line.</li>\n</ul>\n<h2>Note class</h2>\n<p>Note is a basic class, which may appear in some other classes' <code>note</code> attribute. It has just one meaningful attribute:</p>\n<p><strong>text</strong> (str) \u2014 note text.</p>\n<h2>Project class</h2>\n<p>After running parser the project info is stored in the <code>project</code> attribute of the <code>PyDBMLParseResults</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydbml</span> <span class=\"kn\">import</span> <span class=\"n\">PyDBML</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">PyDBML</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'test_schema.dbml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">project</span>\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s1\">'test_schema'</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'dbml.org'</span><span class=\"p\">},</span> <span class=\"n\">note</span><span class=\"o\">=</span><span class=\"n\">Note</span><span class=\"p\">(</span><span class=\"s1\">'This schema is used for PyDBML doctest'</span><span class=\"p\">))</span>\n</pre>\n<p>Attributes of the <code>Project</code> object:</p>\n<ul>\n<li><strong>name</strong> (str) \u2014 project name,</li>\n<li><strong>items</strong> (str) \u2014 dictionary with project items,</li>\n<li><strong>note</strong> (<code>Note</code>) \u2014 note, if was defined,</li>\n<li><strong>comment</strong> (str) \u2014 comment, if was added before project definition.</li>\n</ul>\n\n          </div>"}, "last_serial": 7117987, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "823b4f22a3fbf2167a0c9a3850b28864", "sha256": "9d4293278fef298c881f210437806707d20ab34c5386531283ba5a3668085af9"}, "downloads": -1, "filename": "pydbml-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "823b4f22a3fbf2167a0c9a3850b28864", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13423, "upload_time": "2020-04-20T13:56:16", "upload_time_iso_8601": "2020-04-20T13:56:16.332413Z", "url": "https://files.pythonhosted.org/packages/c2/7c/aaa0ace73dfd7a00d1acde2e02403386ad6c0d70f05e78d655de4063bb02/pydbml-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb2a7bcb52547a85b140effa1e8e2a04", "sha256": "bd37b9126112c833e94d2d3dc24a2281ac95bea16641796a48a3aa08e4a23a92"}, "downloads": -1, "filename": "pydbml-0.1.tar.gz", "has_sig": false, "md5_digest": "fb2a7bcb52547a85b140effa1e8e2a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9878, "upload_time": "2020-04-20T13:56:18", "upload_time_iso_8601": "2020-04-20T13:56:18.653374Z", "url": "https://files.pythonhosted.org/packages/09/e7/a6e438f4eb44539b6e3b1218ef95cb035d3a802692d76f66b70bd9a8cbd7/pydbml-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cde6adfad6506b414f6e3c492f5f1ddc", "sha256": "4355968f6b0cee5428432113e52e575adfc3af4466a6eb748cf79588e564bc4c"}, "downloads": -1, "filename": "pydbml-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cde6adfad6506b414f6e3c492f5f1ddc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14231, "upload_time": "2020-04-21T14:57:35", "upload_time_iso_8601": "2020-04-21T14:57:35.464377Z", "url": "https://files.pythonhosted.org/packages/eb/07/259b7c717f3fe749f65d5ec2c538d97cef09b10e97a73e3583167301f663/pydbml-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3550a507411be85eb1ace92edab5033f", "sha256": "b40677ece49f05693438c5c73e8e858fb5dfee49777cc6cd2dd875585c7d8eb3"}, "downloads": -1, "filename": "pydbml-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3550a507411be85eb1ace92edab5033f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10264, "upload_time": "2020-04-21T14:57:38", "upload_time_iso_8601": "2020-04-21T14:57:38.122750Z", "url": "https://files.pythonhosted.org/packages/1d/b2/e1fdc17590efb8f88fc1cdc3b406c159f3ee7760d2b7ca2e06222a2fe85c/pydbml-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "e49c8fa042ce97c84f0466f32079711b", "sha256": "fe248a1e0832dcffa53d989a41aefb344591a0ce03065bdf3b23ba4e7e9eb845"}, "downloads": -1, "filename": "pydbml-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e49c8fa042ce97c84f0466f32079711b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15206, "upload_time": "2020-04-23T13:53:09", "upload_time_iso_8601": "2020-04-23T13:53:09.053291Z", "url": "https://files.pythonhosted.org/packages/b4/dc/ac11a00d84279f0a1155f9f76fadcb32888e4fc5ab570f0bbfd826d690b6/pydbml-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a5f0b412f86a7d896c2481a8ecb2a77", "sha256": "d3ce2cc523f4280bcce78b6915166481029e1b6af7529096cd81c44cba2c35ed"}, "downloads": -1, "filename": "pydbml-0.2.tar.gz", "has_sig": false, "md5_digest": "7a5f0b412f86a7d896c2481a8ecb2a77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15541, "upload_time": "2020-04-23T13:53:10", "upload_time_iso_8601": "2020-04-23T13:53:10.497913Z", "url": "https://files.pythonhosted.org/packages/2a/78/b0aff14cb4c3943557357c351665ddd588443366d2ad596485e49b2daa7f/pydbml-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a7726fddfd613fc602eb0a7afe0a7115", "sha256": "b0574d21979a7683cfccc37a9d0cceb24999f6a70837256927397f9b5d746485"}, "downloads": -1, "filename": "pydbml-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a7726fddfd613fc602eb0a7afe0a7115", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18623, "upload_time": "2020-04-27T11:35:01", "upload_time_iso_8601": "2020-04-27T11:35:01.641412Z", "url": "https://files.pythonhosted.org/packages/70/d0/4ccf995b8aeaae4ef63ff6c387d026a4ce3495860a081e958fda62d9d258/pydbml-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18b876b5215bda1094f46291d0c838c8", "sha256": "cbc3c1a76ad01789130596b95866eaf44a915ae4f04417bfe44ca768891cf149"}, "downloads": -1, "filename": "pydbml-0.3.tar.gz", "has_sig": false, "md5_digest": "18b876b5215bda1094f46291d0c838c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22294, "upload_time": "2020-04-27T11:35:02", "upload_time_iso_8601": "2020-04-27T11:35:02.972850Z", "url": "https://files.pythonhosted.org/packages/4c/21/3249b142808e23a69f3723c23e3ff25ebb8749ef87717ed43de6439b0f4e/pydbml-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "36cecb62ada4f72b93ee9b4d6eb33f5a", "sha256": "1f627cecefc89cf3a277725a4239c7e190c7f9894422ae7ccb96b7a1cd7f124f"}, "downloads": -1, "filename": "pydbml-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "36cecb62ada4f72b93ee9b4d6eb33f5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18703, "upload_time": "2020-04-27T12:25:58", "upload_time_iso_8601": "2020-04-27T12:25:58.560398Z", "url": "https://files.pythonhosted.org/packages/53/e4/68a652cc06cb455467104dea504124c5f8996af060083f139a78f1d669c8/pydbml-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "491a03167e396dccf56b29774a71e40c", "sha256": "7a3fa2d83a2e1a67c700bafb2bd6ac010edb75ef41e00665a2ba0f67793e563c"}, "downloads": -1, "filename": "pydbml-0.3.1.tar.gz", "has_sig": false, "md5_digest": "491a03167e396dccf56b29774a71e40c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22361, "upload_time": "2020-04-27T12:26:00", "upload_time_iso_8601": "2020-04-27T12:26:00.109984Z", "url": "https://files.pythonhosted.org/packages/1d/f1/2a57a233c427c2ca5cd273cabe98607658d9ca89d552ce34bf9d78beadea/pydbml-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "c2665beedba78be394f6256088a7f0f7", "sha256": "28d19511373fa57cdc19b919b393258f46c3d7eb576e6b0495a38944e1812aad"}, "downloads": -1, "filename": "pydbml-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2665beedba78be394f6256088a7f0f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18654, "upload_time": "2020-04-28T07:53:58", "upload_time_iso_8601": "2020-04-28T07:53:58.996369Z", "url": "https://files.pythonhosted.org/packages/6a/f7/e2b5d5d4c6587888cd5c4ca8bce713f9975995939b752f6587152ed96043/pydbml-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e615d2da9c0b083d361e2c9b07489f7", "sha256": "aff17639b06214a98575ded3c9da6311cad8ced2b1dabd16611be77d2fb8b9ca"}, "downloads": -1, "filename": "pydbml-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5e615d2da9c0b083d361e2c9b07489f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22239, "upload_time": "2020-04-28T07:54:00", "upload_time_iso_8601": "2020-04-28T07:54:00.536813Z", "url": "https://files.pythonhosted.org/packages/b3/66/e295fd0ca19a5e30652d3aff187395c4402f47f1f2be5ff1eea6212b0e67/pydbml-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2665beedba78be394f6256088a7f0f7", "sha256": "28d19511373fa57cdc19b919b393258f46c3d7eb576e6b0495a38944e1812aad"}, "downloads": -1, "filename": "pydbml-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2665beedba78be394f6256088a7f0f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 18654, "upload_time": "2020-04-28T07:53:58", "upload_time_iso_8601": "2020-04-28T07:53:58.996369Z", "url": "https://files.pythonhosted.org/packages/6a/f7/e2b5d5d4c6587888cd5c4ca8bce713f9975995939b752f6587152ed96043/pydbml-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e615d2da9c0b083d361e2c9b07489f7", "sha256": "aff17639b06214a98575ded3c9da6311cad8ced2b1dabd16611be77d2fb8b9ca"}, "downloads": -1, "filename": "pydbml-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5e615d2da9c0b083d361e2c9b07489f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22239, "upload_time": "2020-04-28T07:54:00", "upload_time_iso_8601": "2020-04-28T07:54:00.536813Z", "url": "https://files.pythonhosted.org/packages/b3/66/e295fd0ca19a5e30652d3aff187395c4402f47f1f2be5ff1eea6212b0e67/pydbml-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:16 2020"}