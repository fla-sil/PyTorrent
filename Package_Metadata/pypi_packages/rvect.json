{"info": {"author": "Dreas Nielsen", "author_email": "dreas.nielsen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "``rvect.py`` is a Python module that defines a class (Rvect) implementing a data type \nthat simulates the vector data type used in the R_ language for statistical computing.\n\n.. _R: http://www.r-project.org/\n\nMathematical operations on vectors (Rvect objects) are similar in syntax but \ndifferent in function than operations on Python lists. In general, operations on \nvectors are applied to each element of the vector, rather than to the vector as a \nwhole. Whereas multiplying a Python list by a positive integer extends the length \nof the list, multiplying a vector by a positive integer increases the magnitude \nof each element of the vector but does not change the length of the vector.\n\nThe ``rvect`` module does not interact in any way with R_--other Python modules \n(e.g., RPy_) provide that functionality. The ``rvect`` module only provides another \nPython data type, similar to vectors in R, that are useful for some types of \ncalculations.\n\n.. _RPy: http://rpy.sourceforge.net/\n\n=======================================\nExamples\n=======================================\n\nTo illustrate the usage of Rvect objects, the following examples contrast operations\non Python lists and on Rvect objects.\n\n1. Multiplying by a scalar ::\n\n     >>> [1, 2, 3] * 2\n     [1, 2, 3, 1, 2, 3] \n     >>> Rvect([1, 2, 3]) * 2\n     [2, 4, 6]\n\n2. Adding a scalar ::\n\n     >>> [1, 2, 3] + 2\n     TypeError \n     >>> Rvect([1, 2, 3]) + 2\n     [3, 4, 5]\n\n3. Multiplying two lists or vectors ::\n\n     >>> [1, 2, 3] * [4, 5, 6]\n     TypeError \n     >>> Rvect([1, 2, 3]) * Rvect([4, 5, 6])\n     [4, 10, 18]\n\n4. Adding two lists or vectors ::\n\n     >>> [1, 2, 3] + [4, 5, 6] \n     [1, 2, 3, 4, 5, 6] \n     >>> Rvect([1, 2, 3]) + Rvect([4, 5, 6])\n     [5, 7, 9]\n\n5. Binary logical operations on two lists or vectors ::\n\n     >>> [True, True, False, False] and [True, False, True, False]\n     [True, False, True, False] \n     >>> list_and( [True, True, False, False], [True, False, True, False] ) \n     [True, False, False, False] \n     >>> Rvect([True, True, False, False]).logical_and( Rvect([True, False, True, False]) )\n     [True, False, False, False]\n\n=======================================\nNotes\n=======================================\n\n1. This module contains several functions that implement basic listwise operations\n   (e.g., and, or, sum, product) on lists or tuples, in addition to the class (Rvect)\n   that defines overloaded operators for these and other functions.\n\n2. Whereas elements of an R vector must all be of the same type, the Rvect class has\n   no such constraint--Rvect elements may be of any type, as with a Python list. The\n   class does contain methods to coerce all elements to several specific types, however.\n\n3. Because Python does not allow a class to define its own __not__ method, the command ::\n\n      not Rvect()\n\n   does not work as might be expected (that is, not as in R). Instead, there is a method named ::\n\n      .logical_not()\n\n   of an Rvect object that must be called instead.\n\n4. Because Python implements the logical binary infix operations 'and', 'or', and 'xor'\n   by calling __nonzero__ or __len__ on each object and then executing the Boolean logic\n   itself, logical binary combination of Rvect objects cannot be done using the 'and',\n   'or', and 'xor' infix operators. Instead, the following functions are defined ::\n\n      .logical_and(Rvect1, Rvect2, ...)\n      .logical_or(Rvect1, Rvect2, ...)\n      .logical_xor(...)\n\n5. The special methods __and__, __or__, and __xor__, which correspond to the binary\n   infix operators '&', '|', and '^',are for binary, not logical, comparisons. In R,\n   however, these infix operators peform logical comparisons. Therefore, the special\n   methods have been implemented so that they convert their arguments to booleans, and\n   therefore correspond to logical operators, and so operate similarly to the equivalent\n   R operators. Thus, for Rvects a and b, the following two expressions are equivalent ::\n\n      a.logical_and(b) a & b\n\n   Both return a vector of booleans. As per the previous note, these are *not* equivalent to ::\n\n      a and b\n\n   which returns a single boolean value.\n\n6. The ``'list_...()'`` functions in this module allow operation on multiple lists, whereas\n   the binary infix mathematical operators implemented for Rvect instances only allow\n   operation on two objects. For example, multiple lists can be summed in parallel with ::\n\n      list_sum(list1, list2, list3,...)\n\n   However, the arguments to the ``'list_...()'`` functions must all be lists of the same\n   length, whereas the arguments to the Rvect methods may be other Rvect objects, lists,\n   or scalars.", "description_content_type": null, "docs_url": "https://pythonhosted.org/rvect/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "none", "keywords": null, "license": "GPL v.3", "maintainer": null, "maintainer_email": null, "name": "rvect", "package_url": "https://pypi.org/project/rvect/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rvect/", "project_urls": {"Download": "UNKNOWN", "Homepage": "none"}, "release_url": "https://pypi.org/project/rvect/0.1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Implements a vector data type similar to that in the R statistical language.", "version": "0.1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>rvect.py</tt> is a Python module that defines a class (Rvect) implementing a data type\nthat simulates the vector data type used in the <a href=\"http://www.r-project.org/\" rel=\"nofollow\">R</a> language for statistical computing.</p>\n<p>Mathematical operations on vectors (Rvect objects) are similar in syntax but\ndifferent in function than operations on Python lists. In general, operations on\nvectors are applied to each element of the vector, rather than to the vector as a\nwhole. Whereas multiplying a Python list by a positive integer extends the length\nof the list, multiplying a vector by a positive integer increases the magnitude\nof each element of the vector but does not change the length of the vector.</p>\n<p>The <tt>rvect</tt> module does not interact in any way with <a href=\"http://www.r-project.org/\" rel=\"nofollow\">R</a>\u2013other Python modules\n(e.g., <a href=\"http://rpy.sourceforge.net/\" rel=\"nofollow\">RPy</a>) provide that functionality. The <tt>rvect</tt> module only provides another\nPython data type, similar to vectors in R, that are useful for some types of\ncalculations.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>To illustrate the usage of Rvect objects, the following examples contrast operations\non Python lists and on Rvect objects.</p>\n<ol>\n<li><p>Multiplying by a scalar</p>\n<pre>&gt;&gt;&gt; [1, 2, 3] * 2\n[1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt; Rvect([1, 2, 3]) * 2\n[2, 4, 6]\n</pre>\n</li>\n<li><p>Adding a scalar</p>\n<pre>&gt;&gt;&gt; [1, 2, 3] + 2\nTypeError\n&gt;&gt;&gt; Rvect([1, 2, 3]) + 2\n[3, 4, 5]\n</pre>\n</li>\n<li><p>Multiplying two lists or vectors</p>\n<pre>&gt;&gt;&gt; [1, 2, 3] * [4, 5, 6]\nTypeError\n&gt;&gt;&gt; Rvect([1, 2, 3]) * Rvect([4, 5, 6])\n[4, 10, 18]\n</pre>\n</li>\n<li><p>Adding two lists or vectors</p>\n<pre>&gt;&gt;&gt; [1, 2, 3] + [4, 5, 6]\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; Rvect([1, 2, 3]) + Rvect([4, 5, 6])\n[5, 7, 9]\n</pre>\n</li>\n<li><p>Binary logical operations on two lists or vectors</p>\n<pre>&gt;&gt;&gt; [True, True, False, False] and [True, False, True, False]\n[True, False, True, False]\n&gt;&gt;&gt; list_and( [True, True, False, False], [True, False, True, False] )\n[True, False, False, False]\n&gt;&gt;&gt; Rvect([True, True, False, False]).logical_and( Rvect([True, False, True, False]) )\n[True, False, False, False]\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ol>\n<li><p>This module contains several functions that implement basic listwise operations\n(e.g., and, or, sum, product) on lists or tuples, in addition to the class (Rvect)\nthat defines overloaded operators for these and other functions.</p>\n</li>\n<li><p>Whereas elements of an R vector must all be of the same type, the Rvect class has\nno such constraint\u2013Rvect elements may be of any type, as with a Python list. The\nclass does contain methods to coerce all elements to several specific types, however.</p>\n</li>\n<li><p>Because Python does not allow a class to define its own __not__ method, the command</p>\n<pre>not Rvect()\n</pre>\n<p>does not work as might be expected (that is, not as in R). Instead, there is a method named</p>\n<pre>.logical_not()\n</pre>\n<p>of an Rvect object that must be called instead.</p>\n</li>\n<li><p>Because Python implements the logical binary infix operations \u2018and\u2019, \u2018or\u2019, and \u2018xor\u2019\nby calling __nonzero__ or __len__ on each object and then executing the Boolean logic\nitself, logical binary combination of Rvect objects cannot be done using the \u2018and\u2019,\n\u2018or\u2019, and \u2018xor\u2019 infix operators. Instead, the following functions are defined</p>\n<pre>.logical_and(Rvect1, Rvect2, ...)\n.logical_or(Rvect1, Rvect2, ...)\n.logical_xor(...)\n</pre>\n</li>\n<li><p>The special methods __and__, __or__, and __xor__, which correspond to the binary\ninfix operators \u2018&amp;\u2019, \u2018|\u2019, and \u2018^\u2019,are for binary, not logical, comparisons. In R,\nhowever, these infix operators peform logical comparisons. Therefore, the special\nmethods have been implemented so that they convert their arguments to booleans, and\ntherefore correspond to logical operators, and so operate similarly to the equivalent\nR operators. Thus, for Rvects a and b, the following two expressions are equivalent</p>\n<pre>a.logical_and(b) a &amp; b\n</pre>\n<p>Both return a vector of booleans. As per the previous note, these are <em>not</em> equivalent to</p>\n<pre>a and b\n</pre>\n<p>which returns a single boolean value.</p>\n</li>\n<li><p>The <tt><span class=\"pre\">'list_...()'</span></tt> functions in this module allow operation on multiple lists, whereas\nthe binary infix mathematical operators implemented for Rvect instances only allow\noperation on two objects. For example, multiple lists can be summed in parallel with</p>\n<pre>list_sum(list1, list2, list3,...)\n</pre>\n<p>However, the arguments to the <tt><span class=\"pre\">'list_...()'</span></tt> functions must all be lists of the same\nlength, whereas the arguments to the Rvect methods may be other Rvect objects, lists,\nor scalars.</p>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 771800, "releases": {"0.1.0.0": [{"comment_text": "", "digests": {"md5": "c15e7b1b6d8a79d09eb261b957c6300e", "sha256": "9426597271fa84a721e18f0216d70a81c5b1268d1ec1a23462e63fca264c0322"}, "downloads": -1, "filename": "rvect-0.1.0.0.zip", "has_sig": false, "md5_digest": "c15e7b1b6d8a79d09eb261b957c6300e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14458, "upload_time": "2011-09-04T18:40:25", "upload_time_iso_8601": "2011-09-04T18:40:25.357511Z", "url": "https://files.pythonhosted.org/packages/6e/05/0e07d5b6faab0325f7f2f8f9755c6fe40dbd068c633a6a4f2198e1f01b50/rvect-0.1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c15e7b1b6d8a79d09eb261b957c6300e", "sha256": "9426597271fa84a721e18f0216d70a81c5b1268d1ec1a23462e63fca264c0322"}, "downloads": -1, "filename": "rvect-0.1.0.0.zip", "has_sig": false, "md5_digest": "c15e7b1b6d8a79d09eb261b957c6300e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14458, "upload_time": "2011-09-04T18:40:25", "upload_time_iso_8601": "2011-09-04T18:40:25.357511Z", "url": "https://files.pythonhosted.org/packages/6e/05/0e07d5b6faab0325f7f2f8f9755c6fe40dbd068c633a6a4f2198e1f01b50/rvect-0.1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 02:59:48 2020"}