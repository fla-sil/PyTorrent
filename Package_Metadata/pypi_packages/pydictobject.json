{"info": {"author": "Peter Harris", "author_email": "pdrharris@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# dictobject\nThere are a number of excellent packages that extend the python dictionary to all object-like access (e.g. dict.key).\n\nThis aims to add some additional features to those projects by creating a python dictionary that is accessible (like an object) through attributes and allows default value and warnings\n\npydictobject adds to the python dict by:\n- Allowing access through the dict.key notation\n- Setting new items with dict.key = value notation\n- Allowing a default value to be set, which is returned if the key is not in the dictionary\n- Optionally warning if the key is not found and default value is being returned\n- Recursively changing any nested dicts to DictObjects and back again\n\nAdditionally, deepcopy has been implemented to create new copies of any nested DictObjects.\n\n## Installation\n```\npip install pydictobject\n```\n\n## Import\n```python\nfrom pydictobject import DictObject\n```\n## Initialise\n```python\ndob = DictObject({'foo': 1, 'bar': 2})\n```\n\n## Parameters:\n- input_dict(dict): Optional. If not set, an empty dictionary is initialised.\n- default_to: Optional. If set, this is the value that is returned if a key is not in the dictionary.\n- warn_key_not_found (bool): Optional prints a warning if a key is not found and default_to is returned. Defaults to False.\n\n# Example usage\n```python\ndob = DictObject({'foo': 1, 'bar': 2})\n\n>>> dob.foo\n1\n>>> dob['bar']\n2\n\n>>> dob.baz = 3 # Set new value with dot notation\n>>> dob.baz\n3\n\n```\n### Return default value if key not found\n```python\n>>> dob = DictObject({'foo': 1, 'bar': 2}, default_to='Key Not Set')\n>>> dob.baz\n'Key Not Set'\n\n>>> dob.baz = 3\n>>> dob.baz\n3\n\n# set default_to after instantiation\n>>> dob = DictObject({'foo': 1, 'bar': 2})\n>>> dob.bootle\n# Raises KeyError\n\n>>> dob.set_default_to['Key not set']\n>>> dob.bootle\n'Key not set'\n```\n### Nesting\n(See later for converting nested dictionaries)\n\n```python\ndob = DictObject({'foo': 1, 'bar': 2})\ndob.baz = DictObject({'a': 3, 'b': 4})\ndob\n# Note: Display indenting added for clarity\nDictObject({\n    'foo': 1,\n    'bar': 2,\n    'baz': DictObject({\n        'a': 3,\n        'b': 4\n        })\n    })\n\n>>> dob.baz.a\n3\n\n# Set new value within nested tree\n>>> dob.baz.c = 5\n>>> dob\nDictObject({\n    'foo': 1,\n    'bar': 2,\n    'baz': DictObject({\n        'a': 3,\n        'b': 4,\n        'c': 5\n        })\n    })\n```\n### Optional: warn if key not found but do not stop flow\nWarn if a key is not found and default_to is being returned.\nParticularly useful if default_to is set to _None_\n```python\n>>> dob = DictObject({'foo': 1, 'bar': 2}, default_to=None, warn_key_not_found=True)\n>>> dob.not_a_key\nUserWarning: Key not_a_key not found in DictTuple. Returning None\n# Returns None\n\n# Set turn warnings on or off after instantiation\n>>> dob.warn_key_not_found() # turns warnings on\n>>> dob.warn_key_not_found(False) # turns warnings off\n```\n### Converting to / from a dict\n\nConvert any nested dictionaries to DictObject\n```python\n\n>>> dob = DictObject({'foo': 1, 'bar': 2, 'baz': {'c': 3, 'd': 4}, convert_nested=True)\n>>> dob\nDictObject({'foo': 1, 'bar': 2, 'baz': DictObject{'c': 3, 'd': 4}})\n\n# Convert nested objects after initialisation\n>>> dob = DictObject({{'foo': 1, 'bar': 2, 'zonk': {'a': 'zonk', 'b': 'zonky' 'c': {'d': 3, 'e': 4}}})\ndob\nDictObject({\n  'foo': 1,\n  'bar': 2,\n  'zonk': {\n      'a': 'zonk',\n      'b': 'zonky' 'c': {\n          'd': 3,\n          'e': 4\n            }\n      }\n  })\n>>> dob.convert_dicts(recursive=True)\n>>> dob\nDictObject({\n  'foo': 1,\n  'bar': 2,\n  'zonk': DictObject{\n      'a': 'zonk',\n      'b': 'zonky',\n      'c': DictObject{\n          'd': 3,\n          'e': 4}\n      }\n  })\n\n# Access nested members\n>>> dob.zonk.c.d\n3\n\n# Convert back to a dict, including any nested objects\n>>> dob.todict() # Defaults to recursive\n{'foo': 1, 'bar': 2, 'zonk': {'a': 'zonk', 'b': 'zonky' 'c': {'d': 3, 'e': 4}}}\n\n>>> dob.todict(False) # Nested DictObjects not converted to dict\n{\n  'foo': 1,\n  'bar': 2,\n  'zonk': DictObject{\n      'a': 'zonk',\n      'b': 'zonky',\n      'c': DictObject{\n          'd': 3,\n          'e': 4}\n      }\n  }\n```\n# All standard python dict functions work\n```python\n>>> dob = DictObject({'foo': 1, 'bar': 2}, default_to='Not Set')\n>>> dob.update({'bar': 'Two', 'baz': 3})\n>>> dob\nDictObject{'foo': 1, 'bar': 'Two', 'baz': 3}\n>>> dob['bar'] = 'II'\n>>> dob\nDictObject{'foo': 1, 'bar': 'II', 'baz': 3}\n\n>>> dob.keys()\ndict_keys(['foo', 'bar', 'baz'])\n\n>>> for key in dob:\n        print(f'{key} = {dob[key]}')\nfoo = 1\nbar = II\nbaz = 3\n\n>>> 'bazz' in dob\nFalse\n\n>>> dob = DictObject({'foo': 1, 'bar': 2}) # default_to is not set\n>>> dob.baz\n# Raises KeyError\n\n>>> dob['baz']\n# Raises KeyError\n\n>>> dob.get('baz', 3)\n3\n```\n### Copying\n\n#### Deepcopy\nDeep copies create new copies of any nested objects.\n```python\n>>> from copy import deepcopy\n>>> dob = DictObject({'foo': 1, 'bar': 2}, warn_key_not_found=True, default_to=None)\n>>> dob.baz = {'a': 1, 'b': {'c': 3, 'd': 4}}\n>>> dob.convert_dicts()\n>>> dob\n DictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 1, 'b': {'c': 3, 'd': 4}}}\n>>> dob2 = deepcopy(dob)\n>>> dob.baz.a = 3\n>>> dob\nDictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 3, 'b': {'c': 3, 'd': 4}}}\ndob2\nDictObject{'foo': 1, 'bar': 2, 'baz': DictObject{'a': 1, 'b': {'c': 3, 'd': 4}}}\n```\n#### Shallow copy\nIn the example above,\nif dob2 is created with using\n```python\n>>> dob2 = dob.copy()\n```\nsetting dob.baz.a = 3 would also change dob2.baz.a to 3", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pdrharris/pydictobject/archive/1.05.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pdrharris/pydictobject", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pydictobject", "package_url": "https://pypi.org/project/pydictobject/", "platform": "", "project_url": "https://pypi.org/project/pydictobject/", "project_urls": {"Download": "https://github.com/pdrharris/pydictobject/archive/1.05.tar.gz", "Homepage": "https://github.com/pdrharris/pydictobject"}, "release_url": "https://pypi.org/project/pydictobject/1.5/", "requires_dist": null, "requires_python": "", "summary": "pydictobject - a dictionary that is accessible like an object", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dictobject</h1>\n<p>There are a number of excellent packages that extend the python dictionary to all object-like access (e.g. dict.key).</p>\n<p>This aims to add some additional features to those projects by creating a python dictionary that is accessible (like an object) through attributes and allows default value and warnings</p>\n<p>pydictobject adds to the python dict by:</p>\n<ul>\n<li>Allowing access through the dict.key notation</li>\n<li>Setting new items with dict.key = value notation</li>\n<li>Allowing a default value to be set, which is returned if the key is not in the dictionary</li>\n<li>Optionally warning if the key is not found and default value is being returned</li>\n<li>Recursively changing any nested dicts to DictObjects and back again</li>\n</ul>\n<p>Additionally, deepcopy has been implemented to create new copies of any nested DictObjects.</p>\n<h2>Installation</h2>\n<pre><code>pip install pydictobject\n</code></pre>\n<h2>Import</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydictobject</span> <span class=\"kn\">import</span> <span class=\"n\">DictObject</span>\n</pre>\n<h2>Initialise</h2>\n<pre><span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre>\n<h2>Parameters:</h2>\n<ul>\n<li>input_dict(dict): Optional. If not set, an empty dictionary is initialised.</li>\n<li>default_to: Optional. If set, this is the value that is returned if a key is not in the dictionary.</li>\n<li>warn_key_not_found (bool): Optional prints a warning if a key is not found and default_to is returned. Defaults to False.</li>\n</ul>\n<h1>Example usage</h1>\n<pre><span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">foo</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span>\n<span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"c1\"># Set new value with dot notation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n<span class=\"mi\">3</span>\n</pre>\n<h3>Return default value if key not found</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">default_to</span><span class=\"o\">=</span><span class=\"s1\">'Key Not Set'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n<span class=\"s1\">'Key Not Set'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n<span class=\"mi\">3</span>\n\n<span class=\"c1\"># set default_to after instantiation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">bootle</span>\n<span class=\"c1\"># Raises KeyError</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">set_default_to</span><span class=\"p\">[</span><span class=\"s1\">'Key not set'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">bootle</span>\n<span class=\"s1\">'Key not set'</span>\n</pre>\n<h3>Nesting</h3>\n<p>(See later for converting nested dictionaries)</p>\n<pre><span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"n\">dob</span>\n<span class=\"c1\"># Note: Display indenting added for clarity</span>\n<span class=\"n\">DictObject</span><span class=\"p\">({</span>\n    <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span>\n        <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">3</span>\n\n<span class=\"c1\"># Set new value within nested tree</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">({</span>\n    <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span>\n        <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n        <span class=\"p\">})</span>\n    <span class=\"p\">})</span>\n</pre>\n<h3>Optional: warn if key not found but do not stop flow</h3>\n<p>Warn if a key is not found and default_to is being returned.\nParticularly useful if default_to is set to <em>None</em></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">default_to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">warn_key_not_found</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">not_a_key</span>\n<span class=\"ne\">UserWarning</span><span class=\"p\">:</span> <span class=\"n\">Key</span> <span class=\"n\">not_a_key</span> <span class=\"ow\">not</span> <span class=\"n\">found</span> <span class=\"ow\">in</span> <span class=\"n\">DictTuple</span><span class=\"o\">.</span> <span class=\"n\">Returning</span> <span class=\"kc\">None</span>\n<span class=\"c1\"># Returns None</span>\n\n<span class=\"c1\"># Set turn warnings on or off after instantiation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">warn_key_not_found</span><span class=\"p\">()</span> <span class=\"c1\"># turns warnings on</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">warn_key_not_found</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># turns warnings off</span>\n</pre>\n<h3>Converting to / from a dict</h3>\n<p>Convert any nested dictionaries to DictObject</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">convert_nested</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}})</span>\n\n<span class=\"c1\"># Convert nested objects after initialisation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'zonk'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'zonk'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'zonky'</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}})</span>\n<span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">({</span>\n  <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"s1\">'zonk'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'zonk'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'zonky'</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n          <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n            <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">convert_dicts</span><span class=\"p\">(</span><span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">({</span>\n  <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"s1\">'zonk'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span>\n      <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'zonk'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'zonky'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span>\n          <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n          <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n\n<span class=\"c1\"># Access nested members</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">zonk</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">d</span>\n<span class=\"mi\">3</span>\n\n<span class=\"c1\"># Convert back to a dict, including any nested objects</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">todict</span><span class=\"p\">()</span> <span class=\"c1\"># Defaults to recursive</span>\n<span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'zonk'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'zonk'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'zonky'</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">todict</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># Nested DictObjects not converted to dict</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n  <span class=\"s1\">'zonk'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span>\n      <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'zonk'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'zonky'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span>\n          <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n          <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</pre>\n<h1>All standard python dict functions work</h1>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">default_to</span><span class=\"o\">=</span><span class=\"s1\">'Not Set'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'Two'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'Two'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'II'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'II'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"n\">dict_keys</span><span class=\"p\">([</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">dob</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s1\"> = </span><span class=\"si\">{</span><span class=\"n\">dob</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">II</span>\n<span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'bazz'</span> <span class=\"ow\">in</span> <span class=\"n\">dob</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span> <span class=\"c1\"># default_to is not set</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n<span class=\"c1\"># Raises KeyError</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Raises KeyError</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</pre>\n<h3>Copying</h3>\n<h4>Deepcopy</h4>\n<p>Deep copies create new copies of any nested objects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">DictObject</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">warn_key_not_found</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">convert_dicts</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n <span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob2</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">dob</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob</span>\n<span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}}</span>\n<span class=\"n\">dob2</span>\n<span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"n\">DictObject</span><span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}}}</span>\n</pre>\n<h4>Shallow copy</h4>\n<p>In the example above,\nif dob2 is created with using</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dob2</span> <span class=\"o\">=</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</pre>\n<p>setting dob.baz.a = 3 would also change dob2.baz.a to 3</p>\n\n          </div>"}, "last_serial": 6493004, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "8a589d13eedd855cb017cc4bf1780e52", "sha256": "3bcd237e8a665394e579ba70570797d40f4b729997b5dc96982e7c1a5f6cd95b"}, "downloads": -1, "filename": "pydictobject-1.1.tar.gz", "has_sig": false, "md5_digest": "8a589d13eedd855cb017cc4bf1780e52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4498, "upload_time": "2020-01-17T13:35:51", "upload_time_iso_8601": "2020-01-17T13:35:51.511164Z", "url": "https://files.pythonhosted.org/packages/d9/7a/497d9adde43d5a8b3a5d7b45f00eff858f41e05b7f65b67e4ee693c99f05/pydictobject-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "df07f380fb1fdbba72162b9026528aaf", "sha256": "2a26db6805e5f582f23107375715298ad9ac7a8fb3c46b065d59f636ffd982c4"}, "downloads": -1, "filename": "pydictobject-1.2.tar.gz", "has_sig": false, "md5_digest": "df07f380fb1fdbba72162b9026528aaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5437, "upload_time": "2020-01-17T13:45:09", "upload_time_iso_8601": "2020-01-17T13:45:09.715104Z", "url": "https://files.pythonhosted.org/packages/28/b9/7e5f6948f3001049a31627ed6f495f3dddb0429662ec94b185f9d7776937/pydictobject-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "fe6cb61f561574726a56075b071b25da", "sha256": "e43779ccb7adc3f9fe2f1b9a1a622837cadbe4a032d8dd05daebaf80a25174b8"}, "downloads": -1, "filename": "pydictobject-1.3.tar.gz", "has_sig": false, "md5_digest": "fe6cb61f561574726a56075b071b25da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5416, "upload_time": "2020-01-17T13:52:04", "upload_time_iso_8601": "2020-01-17T13:52:04.326785Z", "url": "https://files.pythonhosted.org/packages/c4/54/acf661699c95c4c86da659758823bcd076cb91991694f6c2ac707b3b2326/pydictobject-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "bbe9b47d05ee7c01facecb4b5312c72f", "sha256": "faae652f480c7bb7fb31a6a9d895197e8c1e116d95fb51ec733d78c6031d9ab7"}, "downloads": -1, "filename": "pydictobject-1.4.tar.gz", "has_sig": false, "md5_digest": "bbe9b47d05ee7c01facecb4b5312c72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5422, "upload_time": "2020-01-20T14:27:35", "upload_time_iso_8601": "2020-01-20T14:27:35.014023Z", "url": "https://files.pythonhosted.org/packages/52/4c/8b4789d40973a536defc2bf8102b145e8464a689dfc7b3c35ee6ea72939a/pydictobject-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "3dbba70dd374db3f1d62e0654484ee6b", "sha256": "bc0a0fb43f207ddfe31881fd0e6fd68304b1a3f4acfd7aaa461244b50f686b73"}, "downloads": -1, "filename": "pydictobject-1.5.tar.gz", "has_sig": false, "md5_digest": "3dbba70dd374db3f1d62e0654484ee6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5654, "upload_time": "2020-01-21T09:45:55", "upload_time_iso_8601": "2020-01-21T09:45:55.363894Z", "url": "https://files.pythonhosted.org/packages/21/6c/8ed91d271ab905742e34e6761c3806fc0118cd5d61679313072d208d9971/pydictobject-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dbba70dd374db3f1d62e0654484ee6b", "sha256": "bc0a0fb43f207ddfe31881fd0e6fd68304b1a3f4acfd7aaa461244b50f686b73"}, "downloads": -1, "filename": "pydictobject-1.5.tar.gz", "has_sig": false, "md5_digest": "3dbba70dd374db3f1d62e0654484ee6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5654, "upload_time": "2020-01-21T09:45:55", "upload_time_iso_8601": "2020-01-21T09:45:55.363894Z", "url": "https://files.pythonhosted.org/packages/21/6c/8ed91d271ab905742e34e6761c3806fc0118cd5d61679313072d208d9971/pydictobject-1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:01 2020"}