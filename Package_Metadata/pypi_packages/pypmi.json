{"info": {"author": "pypmi developers", "author_email": "rossmarkello@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# PyPMI\n\nThis package provides a Python interface for working with data from the [Parkinson's Progression Markers Initiative](https://www.ppmi-info.org/) (PPMI).\n\n[![Build Status](https://travis-ci.org/rmarkello/pypmi.svg?branch=master)](https://travis-ci.org/rmarkello/pypmi)\n[![Codecov](https://codecov.io/gh/rmarkello/pypmi/branch/master/graph/badge.svg)](https://codecov.io/gh/rmarkello/pypmi)\n[![Documentation Status](https://readthedocs.org/projects/pypmi/badge/?version=latest)](http://pypmi.readthedocs.io/en/latest/?badge=latest)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![PyPi](https://img.shields.io/pypi/v/pypmi.svg)](https://pypi.org/project/pypmi/)\n\n## Installation and setup\n\nThis package requires Python >= 3.6.\nIf you have the correct version of Python installed, you can install this package by opening a terminal and running the following:\n\n```bash\ngit clone https://github.com/rmarkello/pypmi.git\ncd pypmi\npython setup.py install\n```\n\nSome of the functionality of this package&mdash;primarily, the functions to work with neuroimaging data&mdash;also requires the use of [Docker](https://www.docker.com/).\n\n## Overview\n\nThe PPMI is an ongoing longitudinal study that begin in early 2010 with the primary goal of identifying biomarkers of Parkinson's disease (PD) progression.\nTo date, the PPMI has collected data from over 400 individuals with de novo PD and nearly 200 age-matched healthy participants, in addition to large cohorts of individuals genetically at-risk for PD.\nData, made available on the [PPMI website](https://www.ppmi-info.org/data), include comphrensive clinical-behavioral assessments, biological assays, single-photon emission computed tomography (SPECT) images, and magnetic resonance imaging (MRI) scans.\n\nWhile accessing this data is straightforward (researchers must simply sign a data usage agreement and provide information on the purpose of their research), the sheer amount of data made available can be quite overwhelming to work with.\nThus, the primary goal of this package is to provide a Python interface to making working with the data provided by the PPMI easier.\nWhile this project is still very much **under development**, it is neverthless functional!\nMost useful may be the functions accesible by directly importing `pypmi`, which help wrangle the litany of raw CSV files provided by the PPMI, and in `pypmi.bids`, which helps convert raw neuroimaging data from the PPMI into [BIDS format](bids.neuroimaging.io).\n\nI hope to continue adding useful features to this package as I keep working with the data, but take a look below at [development and getting involved](#development-and-getting-involved) if you're interested in contributing, yourself!\n\n## Usage\n\nOnce you have access to the [PPMI database](https://www.ppmi-info.org/access-data-specimens/download-data/), log in to the database and follow these instructions:\n\n1. Select \"Download\" from the navigation bar at the top\n2. Select \"Study Data\" from the options that appear in the navigation bar\n3. Select \"ALL\" at the bottom of the left-hand navigation bar on the new page\n4. Click \"Select ALL tabular data (csv) format\" and then press \"Download>>\" in the top right hand corner of the page\n5. Unzip the downloaded directory and save it somewhere on your computer\n\nAlternatively, you can use the `pypmi` API to download the data programatically:\n\n```python\n>>> import pypmi\n>>> pypmi.fetch_studydata('all', user='username', password='password')\n```\n\nBy default, the data will be downloaded to your current directory making it easy to load them in the future, but you can optionally provide a `path` argument to `pypmi.fetch_studydata()` to specify where you would like the data to go.\n(Alternatively, you can set an environmental variable `$PPMI_PATH` to specify where they should be downloaded to; this will be used if `path` is not specified.)\n\nOnce you have the data downloaded you can load some of it as a [tidy](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html) [`pandas.DataFrame`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html):\n\n```python\n>>> behavior = pypmi.load_behavior()\n>>> behavior.columns\nIndex(['participant', 'visit', 'date', 'benton', 'epworth', 'gds',\n       'hvlt_recall', 'hvlt_recognition', 'hvlt_retention', 'lns', 'moca',\n       'pigd', 'quip', 'rbd', 'scopa_aut', 'se_adl', 'semantic_fluency',\n       'stai_state', 'stai_trait', 'symbol_digit', 'systolic_bp_drop',\n       'tremor', 'updrs_i', 'updrs_ii', 'updrs_iii', 'updrs_iii_a', 'updrs_iv',\n       'upsit'],\n      dtype='object')\n```\n\nThe call to `pypmi.load_behavior()` may take a few seconds to run&mdash;there's a lot of data to import!\n\nIf we want to query the data with regards to diagnosis it might be useful to load in some demographic information:\n\n```python\n>>> demographics = pypmi.load_demographics()\n>>> demographics.columns\nIndex(['participant', 'diagnosis', 'date_birth', 'date_diagnosis',\n       'date_enroll', 'status', 'family_history', 'age', 'gender', 'race',\n       'site', 'handedness', 'education'],\n      dtype='object')\n```\n\nNow we can perform some interesting queries!\nAs an example, let's just ask how many individuals with Parkinson's disease have a baseline UPDRS III score.\nWe'll have to use information from both data frames to answer the question:\n\n```python\n>>> import pandas as pd\n>>> updrs = (behavior.query('visit == \"BL\" & ~updrs_iii.isna()')\n...                  .get(['participant', 'updrs_iii']))\n>>> parkinsons = demographics.query('diagnosis == \"pd\"').get('participant')\n>>> len(pd.merge(parkinsons, updrs, on='participant'))\n423\n```\n\nAnd the same for healthy individuals:\n\n```python\n>>> healthy = demographics.query('diagnosis == \"hc\"').get('participant')\n>>> len(pd.merge(healthy, updrs))\n195\n```\n\nThere's a lot of power gained in leveraging the pandas DataFrame objects, so take a look at the [pandas documentation](https://pandas.pydata.org/) to see what more you can do!\nAlso be sure to check out the [`pypmi` documentation](https://pypmi.readthedocs.io) for more information.\n\n## Development and getting involved\n\nThis package has largely been developed in the spare time of a single graduate student ([`@rmarkello`](https://github.com/rmarkello)).\nWhile it would be :sparkles: amazing :sparkles: if anyone else finds it helpful, given the limited time constraints of graduate school this package is not currently accepting requests for new features.\n\nHowever, if you're interested in getting involved in the project, we're thrilled to welcome new contributors!\nYou should start by reading our [contributing guidelines](https://github.com/rmarkello/pypmi/blob/master/CONTRIBUTING.md) and [code of conduct](https://github.com/rmarkello/pypmi/blob/master/CODE_OF_CONDUCT.md).\nOnce you're done with that, take a look at our [issues](https://github.com/rmarkello/pypmi/issues) to see if there's anything you might like to work on.\nAlternatively, if you've found a bug, are experiencing a problem, or have a question, create a new issue with some information about it!\n\n## Acknowledgments\n\nThis package relies on data that can be obtained from the Parkinson's Progression Markers Initiative (PPMI) database [https://www.ppmi-info.org/data](https://www.ppmi-info.org/data).\nFor up-to-date information on the study, visit [https://www.ppmi-info.org/](https://www.ppmi-info.org/)\n\nThe PPMI&mdash;a public-private partnership&mdash;is funded by the Michael J. Fox Foundation for Parkinson\u2019s Research and funding partners, including AbbVie, Avid Radiopharmaceuticals, Biogen, BioLegend, Bristol-Myers Squibb, GE Healthcare, Genentech, GlaxoSmithKline (GSK), Eli Lilly and Company, Lundbeck, Merck, Meso Scale Discovery (MSD), Pfizer, Piramal Imaging, Roche, Sanofi Genzyme, Servier, Takeda, Teva, and UCB [www.ppmi-info.org/fundingpartners](www.ppmi-info.org/fundingpartners).\n\n## License information\n\nThis codebase is licensed under the 3-clause BSD license.\nThe full license can be found in the [LICENSE](https://github.com/rmarkello/abagen/blob/master/LICENSE) file in the `pypmi` distribution.\n\nAll trademarks referenced herein are property of their respective holders.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/rmarkello/pypmi/archive/0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rmarkello/pypmi", "keywords": "", "license": "BSD-3", "maintainer": "Ross Markello", "maintainer_email": "rossmarkello@gmail.com", "name": "pypmi", "package_url": "https://pypi.org/project/pypmi/", "platform": "", "project_url": "https://pypi.org/project/pypmi/", "project_urls": {"Download": "https://github.com/rmarkello/pypmi/archive/0.3.tar.gz", "Homepage": "http://github.com/rmarkello/pypmi"}, "release_url": "https://pypi.org/project/pypmi/0.3/", "requires_dist": ["numpy (>=0.15)", "pandas (>=0.21)", "requests", "scipy", "tqdm", "docker ; extra == 'all'", "sphinx (>=1.2) ; extra == 'all'", "pytest (>=3.6) ; extra == 'all'", "pytest-cov ; extra == 'all'", "pydicom (>=1.3.0) ; extra == 'all'", "nibabel ; extra == 'all'", "sphinx-rtd-theme ; extra == 'all'", "pybids (>=0.9.3) ; extra == 'all'", "docker ; extra == 'bids'", "nibabel ; extra == 'bids'", "pybids (>=0.9.3) ; extra == 'bids'", "pydicom (>=1.3.0) ; extra == 'bids'", "sphinx (>=1.2) ; extra == 'doc'", "sphinx-rtd-theme ; extra == 'doc'", "pytest (>=3.6) ; extra == 'tests'", "pytest-cov ; extra == 'tests'"], "requires_python": "", "summary": "pypmi is a Python toolbox for working with data from the Parkinson's Progression Markers Initiative (PPMI)", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyPMI</h1>\n<p>This package provides a Python interface for working with data from the <a href=\"https://www.ppmi-info.org/\" rel=\"nofollow\">Parkinson's Progression Markers Initiative</a> (PPMI).</p>\n<p><a href=\"https://travis-ci.org/rmarkello/pypmi\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b45412a0a080902fc0c1416f27a3b3a3369a2944/68747470733a2f2f7472617669732d63692e6f72672f726d61726b656c6c6f2f7079706d692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/rmarkello/pypmi\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/795e0c2ff3b37a4d862a9e755d598b050a7dfb10/68747470733a2f2f636f6465636f762e696f2f67682f726d61726b656c6c6f2f7079706d692f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"http://pypmi.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54a62b1a618b3aeb3776f0758fd7f46defd4f13c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079706d692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>\n<a href=\"https://pypi.org/project/pypmi/\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d64bc4753d70e1350d38f2d7e3752325efbf0ac8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079706d692e737667\"></a></p>\n<h2>Installation and setup</h2>\n<p>This package requires Python &gt;= 3.6.\nIf you have the correct version of Python installed, you can install this package by opening a terminal and running the following:</p>\n<pre>git clone https://github.com/rmarkello/pypmi.git\n<span class=\"nb\">cd</span> pypmi\npython setup.py install\n</pre>\n<p>Some of the functionality of this package\u2014primarily, the functions to work with neuroimaging data\u2014also requires the use of <a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a>.</p>\n<h2>Overview</h2>\n<p>The PPMI is an ongoing longitudinal study that begin in early 2010 with the primary goal of identifying biomarkers of Parkinson's disease (PD) progression.\nTo date, the PPMI has collected data from over 400 individuals with de novo PD and nearly 200 age-matched healthy participants, in addition to large cohorts of individuals genetically at-risk for PD.\nData, made available on the <a href=\"https://www.ppmi-info.org/data\" rel=\"nofollow\">PPMI website</a>, include comphrensive clinical-behavioral assessments, biological assays, single-photon emission computed tomography (SPECT) images, and magnetic resonance imaging (MRI) scans.</p>\n<p>While accessing this data is straightforward (researchers must simply sign a data usage agreement and provide information on the purpose of their research), the sheer amount of data made available can be quite overwhelming to work with.\nThus, the primary goal of this package is to provide a Python interface to making working with the data provided by the PPMI easier.\nWhile this project is still very much <strong>under development</strong>, it is neverthless functional!\nMost useful may be the functions accesible by directly importing <code>pypmi</code>, which help wrangle the litany of raw CSV files provided by the PPMI, and in <code>pypmi.bids</code>, which helps convert raw neuroimaging data from the PPMI into <a href=\"bids.neuroimaging.io\" rel=\"nofollow\">BIDS format</a>.</p>\n<p>I hope to continue adding useful features to this package as I keep working with the data, but take a look below at <a href=\"#development-and-getting-involved\" rel=\"nofollow\">development and getting involved</a> if you're interested in contributing, yourself!</p>\n<h2>Usage</h2>\n<p>Once you have access to the <a href=\"https://www.ppmi-info.org/access-data-specimens/download-data/\" rel=\"nofollow\">PPMI database</a>, log in to the database and follow these instructions:</p>\n<ol>\n<li>Select \"Download\" from the navigation bar at the top</li>\n<li>Select \"Study Data\" from the options that appear in the navigation bar</li>\n<li>Select \"ALL\" at the bottom of the left-hand navigation bar on the new page</li>\n<li>Click \"Select ALL tabular data (csv) format\" and then press \"Download&gt;&gt;\" in the top right hand corner of the page</li>\n<li>Unzip the downloaded directory and save it somewhere on your computer</li>\n</ol>\n<p>Alternatively, you can use the <code>pypmi</code> API to download the data programatically:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pypmi</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pypmi</span><span class=\"o\">.</span><span class=\"n\">fetch_studydata</span><span class=\"p\">(</span><span class=\"s1\">'all'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">)</span>\n</pre>\n<p>By default, the data will be downloaded to your current directory making it easy to load them in the future, but you can optionally provide a <code>path</code> argument to <code>pypmi.fetch_studydata()</code> to specify where you would like the data to go.\n(Alternatively, you can set an environmental variable <code>$PPMI_PATH</code> to specify where they should be downloaded to; this will be used if <code>path</code> is not specified.)</p>\n<p>Once you have the data downloaded you can load some of it as a <a href=\"https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html\" rel=\"nofollow\">tidy</a> <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" rel=\"nofollow\"><code>pandas.DataFrame</code></a>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">behavior</span> <span class=\"o\">=</span> <span class=\"n\">pypmi</span><span class=\"o\">.</span><span class=\"n\">load_behavior</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">behavior</span><span class=\"o\">.</span><span class=\"n\">columns</span>\n<span class=\"n\">Index</span><span class=\"p\">([</span><span class=\"s1\">'participant'</span><span class=\"p\">,</span> <span class=\"s1\">'visit'</span><span class=\"p\">,</span> <span class=\"s1\">'date'</span><span class=\"p\">,</span> <span class=\"s1\">'benton'</span><span class=\"p\">,</span> <span class=\"s1\">'epworth'</span><span class=\"p\">,</span> <span class=\"s1\">'gds'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'hvlt_recall'</span><span class=\"p\">,</span> <span class=\"s1\">'hvlt_recognition'</span><span class=\"p\">,</span> <span class=\"s1\">'hvlt_retention'</span><span class=\"p\">,</span> <span class=\"s1\">'lns'</span><span class=\"p\">,</span> <span class=\"s1\">'moca'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'pigd'</span><span class=\"p\">,</span> <span class=\"s1\">'quip'</span><span class=\"p\">,</span> <span class=\"s1\">'rbd'</span><span class=\"p\">,</span> <span class=\"s1\">'scopa_aut'</span><span class=\"p\">,</span> <span class=\"s1\">'se_adl'</span><span class=\"p\">,</span> <span class=\"s1\">'semantic_fluency'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'stai_state'</span><span class=\"p\">,</span> <span class=\"s1\">'stai_trait'</span><span class=\"p\">,</span> <span class=\"s1\">'symbol_digit'</span><span class=\"p\">,</span> <span class=\"s1\">'systolic_bp_drop'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'tremor'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_i'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_ii'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_iii'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_iii_a'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_iv'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'upsit'</span><span class=\"p\">],</span>\n      <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'object'</span><span class=\"p\">)</span>\n</pre>\n<p>The call to <code>pypmi.load_behavior()</code> may take a few seconds to run\u2014there's a lot of data to import!</p>\n<p>If we want to query the data with regards to diagnosis it might be useful to load in some demographic information:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">demographics</span> <span class=\"o\">=</span> <span class=\"n\">pypmi</span><span class=\"o\">.</span><span class=\"n\">load_demographics</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">demographics</span><span class=\"o\">.</span><span class=\"n\">columns</span>\n<span class=\"n\">Index</span><span class=\"p\">([</span><span class=\"s1\">'participant'</span><span class=\"p\">,</span> <span class=\"s1\">'diagnosis'</span><span class=\"p\">,</span> <span class=\"s1\">'date_birth'</span><span class=\"p\">,</span> <span class=\"s1\">'date_diagnosis'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'date_enroll'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"s1\">'family_history'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">,</span> <span class=\"s1\">'race'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'site'</span><span class=\"p\">,</span> <span class=\"s1\">'handedness'</span><span class=\"p\">,</span> <span class=\"s1\">'education'</span><span class=\"p\">],</span>\n      <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'object'</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can perform some interesting queries!\nAs an example, let's just ask how many individuals with Parkinson's disease have a baseline UPDRS III score.\nWe'll have to use information from both data frames to answer the question:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">updrs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">behavior</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'visit == \"BL\" &amp; ~updrs_iii.isna()'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>                  <span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">([</span><span class=\"s1\">'participant'</span><span class=\"p\">,</span> <span class=\"s1\">'updrs_iii'</span><span class=\"p\">]))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parkinsons</span> <span class=\"o\">=</span> <span class=\"n\">demographics</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'diagnosis == \"pd\"'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'participant'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">parkinsons</span><span class=\"p\">,</span> <span class=\"n\">updrs</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">'participant'</span><span class=\"p\">))</span>\n<span class=\"mi\">423</span>\n</pre>\n<p>And the same for healthy individuals:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">healthy</span> <span class=\"o\">=</span> <span class=\"n\">demographics</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'diagnosis == \"hc\"'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'participant'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">healthy</span><span class=\"p\">,</span> <span class=\"n\">updrs</span><span class=\"p\">))</span>\n<span class=\"mi\">195</span>\n</pre>\n<p>There's a lot of power gained in leveraging the pandas DataFrame objects, so take a look at the <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas documentation</a> to see what more you can do!\nAlso be sure to check out the <a href=\"https://pypmi.readthedocs.io\" rel=\"nofollow\"><code>pypmi</code> documentation</a> for more information.</p>\n<h2>Development and getting involved</h2>\n<p>This package has largely been developed in the spare time of a single graduate student (<a href=\"https://github.com/rmarkello\" rel=\"nofollow\"><code>@rmarkello</code></a>).\nWhile it would be :sparkles: amazing :sparkles: if anyone else finds it helpful, given the limited time constraints of graduate school this package is not currently accepting requests for new features.</p>\n<p>However, if you're interested in getting involved in the project, we're thrilled to welcome new contributors!\nYou should start by reading our <a href=\"https://github.com/rmarkello/pypmi/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">contributing guidelines</a> and <a href=\"https://github.com/rmarkello/pypmi/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">code of conduct</a>.\nOnce you're done with that, take a look at our <a href=\"https://github.com/rmarkello/pypmi/issues\" rel=\"nofollow\">issues</a> to see if there's anything you might like to work on.\nAlternatively, if you've found a bug, are experiencing a problem, or have a question, create a new issue with some information about it!</p>\n<h2>Acknowledgments</h2>\n<p>This package relies on data that can be obtained from the Parkinson's Progression Markers Initiative (PPMI) database <a href=\"https://www.ppmi-info.org/data\" rel=\"nofollow\">https://www.ppmi-info.org/data</a>.\nFor up-to-date information on the study, visit <a href=\"https://www.ppmi-info.org/\" rel=\"nofollow\">https://www.ppmi-info.org/</a></p>\n<p>The PPMI\u2014a public-private partnership\u2014is funded by the Michael J. Fox Foundation for Parkinson\u2019s Research and funding partners, including AbbVie, Avid Radiopharmaceuticals, Biogen, BioLegend, Bristol-Myers Squibb, GE Healthcare, Genentech, GlaxoSmithKline (GSK), Eli Lilly and Company, Lundbeck, Merck, Meso Scale Discovery (MSD), Pfizer, Piramal Imaging, Roche, Sanofi Genzyme, Servier, Takeda, Teva, and UCB <a href=\"www.ppmi-info.org/fundingpartners\" rel=\"nofollow\">www.ppmi-info.org/fundingpartners</a>.</p>\n<h2>License information</h2>\n<p>This codebase is licensed under the 3-clause BSD license.\nThe full license can be found in the <a href=\"https://github.com/rmarkello/abagen/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file in the <code>pypmi</code> distribution.</p>\n<p>All trademarks referenced herein are property of their respective holders.</p>\n\n          </div>"}, "last_serial": 6736964, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5bfd7b3e4cd2bfcbd54a488f1b5f1454", "sha256": "72383db0efb955610e135078c68f2d1af6e0e92d1eb56fc507df2820e0b7707d"}, "downloads": -1, "filename": "pypmi-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5bfd7b3e4cd2bfcbd54a488f1b5f1454", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37294, "upload_time": "2019-03-05T15:58:20", "upload_time_iso_8601": "2019-03-05T15:58:20.977933Z", "url": "https://files.pythonhosted.org/packages/2a/e8/63fe0a1236ff0aab0e66b36cfa02ec7e8101748c4a3b7f040423f633da48/pypmi-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84332ca88d7ae5d09643f013b8d900ac", "sha256": "ae40a16e37f6726bd7572110d4d1dff5afd3c7b52a5a7c52eaec4a1f004b1cd3"}, "downloads": -1, "filename": "pypmi-0.1.tar.gz", "has_sig": false, "md5_digest": "84332ca88d7ae5d09643f013b8d900ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50252, "upload_time": "2019-03-05T15:58:23", "upload_time_iso_8601": "2019-03-05T15:58:23.351993Z", "url": "https://files.pythonhosted.org/packages/0c/c3/138fdf0e352a2272a18c19bf0bbe34ac8b77d62f528d2d2d326c25745531/pypmi-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ba752c9040660cc0fb045804a95a5280", "sha256": "2f22b35008facc5c23f93102e4cd1e396ae10eb4466f4fdbb1387d22e4040dd5"}, "downloads": -1, "filename": "pypmi-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ba752c9040660cc0fb045804a95a5280", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39504, "upload_time": "2019-03-12T19:08:00", "upload_time_iso_8601": "2019-03-12T19:08:00.335956Z", "url": "https://files.pythonhosted.org/packages/7d/4d/2e0d7787496a90bd5d0a146f1cda92e5cc3785533d9e0fe2fee8be7ee25c/pypmi-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b0ae4e843f166c99f658234411011a0", "sha256": "bb7c5d493707ab6e0e9fa8cdeefb0dec6be621acdd09f0d1649e289a4f174329"}, "downloads": -1, "filename": "pypmi-0.2.tar.gz", "has_sig": false, "md5_digest": "1b0ae4e843f166c99f658234411011a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51780, "upload_time": "2019-03-12T19:08:01", "upload_time_iso_8601": "2019-03-12T19:08:01.641544Z", "url": "https://files.pythonhosted.org/packages/7b/1e/5bdee4172922c18930fc48de550d4a01073fdadb93ff8a621ced8171ba5b/pypmi-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b8461ad4171543e52ebdad4e2d38d32d", "sha256": "0e4dc66918e76501c659ece3e37fa50eda4d19d43936bb260c623f92322c3c6c"}, "downloads": -1, "filename": "pypmi-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b8461ad4171543e52ebdad4e2d38d32d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42930, "upload_time": "2020-03-02T22:17:39", "upload_time_iso_8601": "2020-03-02T22:17:39.206546Z", "url": "https://files.pythonhosted.org/packages/e6/c6/4dd75b7411571f67a61c177c19eb3c2136a938a827d1e4ab1875484eaca8/pypmi-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5106ed38b1b54b1a2a5b659bd782cc0", "sha256": "c5b18987cfda0ff53f40312c1eaa4931a6100dc645c95f5aaab05b930664b788"}, "downloads": -1, "filename": "pypmi-0.3.tar.gz", "has_sig": false, "md5_digest": "c5106ed38b1b54b1a2a5b659bd782cc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58006, "upload_time": "2020-03-02T22:17:41", "upload_time_iso_8601": "2020-03-02T22:17:41.195826Z", "url": "https://files.pythonhosted.org/packages/6a/45/b10f3e6de0bd3967511d50af0ab79b17fb350af51b8ddb5112bdc3e67147/pypmi-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8461ad4171543e52ebdad4e2d38d32d", "sha256": "0e4dc66918e76501c659ece3e37fa50eda4d19d43936bb260c623f92322c3c6c"}, "downloads": -1, "filename": "pypmi-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b8461ad4171543e52ebdad4e2d38d32d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42930, "upload_time": "2020-03-02T22:17:39", "upload_time_iso_8601": "2020-03-02T22:17:39.206546Z", "url": "https://files.pythonhosted.org/packages/e6/c6/4dd75b7411571f67a61c177c19eb3c2136a938a827d1e4ab1875484eaca8/pypmi-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5106ed38b1b54b1a2a5b659bd782cc0", "sha256": "c5b18987cfda0ff53f40312c1eaa4931a6100dc645c95f5aaab05b930664b788"}, "downloads": -1, "filename": "pypmi-0.3.tar.gz", "has_sig": false, "md5_digest": "c5106ed38b1b54b1a2a5b659bd782cc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58006, "upload_time": "2020-03-02T22:17:41", "upload_time_iso_8601": "2020-03-02T22:17:41.195826Z", "url": "https://files.pythonhosted.org/packages/6a/45/b10f3e6de0bd3967511d50af0ab79b17fb350af51b8ddb5112bdc3e67147/pypmi-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:21 2020"}