{"info": {"author": "Deokgyu Yang", "author_email": "secugyu@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Note\n~~~~\n\nThis is an unofficial port of Gordon's WiringPi library. Please do not\nemail Gordon if you have issues, he will not be able to help.\n\nFor support, comments, questions, etc please join the WiringPi Discord\nchannel: https://discord.gg/SM4WUVG\n\nWiringPi for Python\n===================\n\nWiringPi: An implementation of most of the Arduino Wiring functions for\nthe Raspberry Pi.\n\nWiringPi implements new functions for managing IO expanders.\n\nQuick Install\n=============\n\n.. image:: https://badge.fury.io/py/odroid-wiringpi.svg\n    :alt: PyPI version badge\n    :target: https://badge.fury.io/py/odroid-wiringpi\n\nThe library is packaged on PyPI and can be installed with pip:\n\n``pip install odroid-wiringpi``\n\nUsage\n=====\n\n.. code:: python\n\n    import odroid_wiringpi as wiringpi\n\n    # One of the following MUST be called before using IO functions:\n    wiringpi.wiringPiSetup()      # For sequential pin numbering\n    # OR\n    wiringpi.wiringPiSetupSys()   # For /sys/class/gpio with GPIO pin numbering\n    # OR\n    wiringpi.wiringPiSetupGpio()  # For GPIO pin numbering\n\n**General IO:**\n\n.. code:: python\n\n    wiringpi.pinMode(6, 1)       # Set pin 6 to 1 ( OUTPUT )\n    wiringpi.digitalWrite(6, 1)  # Write 1 ( HIGH ) to pin 6\n    wiringpi.digitalRead(6)      # Read pin 6\n\n**Setting up a peripheral:**\n\nWiringPi supports expanding your range of available \"pins\" by setting up\na port expander. The implementation details of your port expander will\nbe handled transparently, and you can write to the additional pins\n(starting from PIN\\_OFFSET >= 64) as if they were normal pins on the Pi.\n\n.. code:: python\n\n    wiringpi.mcp23017Setup(PIN_OFFSET, I2C_ADDR)\n\nThis example was tested on a quick2wire board with one digital IO\nexpansion board connected via I2C:\n\n.. code:: python\n\n    wiringpi.mcp23017Setup(65, 0x20)\n    wiringpi.pinMode(65, 1)\n    wiringpi.digitalWrite(65, 1)\n\n**Soft Tone:**\n\nHook a speaker up to your Pi and generate music with softTone. Also\nuseful for generating frequencies for other uses such as modulating A/C.\n\n.. code:: python\n\n    wiringpi.softToneCreate(PIN)\n    wiringpi.softToneWrite(PIN, FREQUENCY)\n\n**Bit shifting:**\n\n.. code:: python\n\n    wiringpi.shiftOut(1, 2, 0, 123)  # Shift out 123 (b1110110, byte 0-255) to data pin 1, clock pin 2\n\n**Serial:**\n\n.. code:: python\n\n    serial = wiringpi.serialOpen('/dev/ttyAMA0', 9600)  # Requires device/baud and returns an ID\n    wiringpi.serialPuts(serial, \"hello\")\n    wiringpi.serialClose(serial)  # Pass in ID\n\n**SPI:**\n\nThe ``wiringPiSPIDataRW()`` function needs to be passed a ``bytes``\nobject in Python 3. In Python 2, it takes a string. The following should\nwork in either Python 2 or 3:\n\n.. code:: python\n\n    wiringpi.wiringPiSPISetup(channel, speed)\n    buf = bytes([your data here])\n    retlen, retdata = wiringpi.wiringPiSPIDataRW(0, buf)\n\nNow, ``retlen`` will contain the number of bytes received/read by the\ncall. ``retdata`` will contain the data itself, and in Python 3, ``buf``\nwill have been modified to contain it as well (that won't happen in\nPython 2, because then ``buf`` is a string, and strings are immutable).\n\n**Full details of the API at:** http://www.wiringpi.com\n\nManual Build\n============\n\nGet/setup repo\n--------------\n\n.. code:: bash\n\n    git clone --recursive https://github.com/WiringPi/WiringPi-Python.git\n    cd WiringPi-Python\n\nDon't forget the ``--recursive``; it is required to also pull in the\nWiringPi C code from its own repository.\n\nPrerequisites\n-------------\n\nTo rebuild the bindings you **must** first have installed ``swig``,\n``python-dev``, and ``python-setuptools`` (or their ``python3-``\nequivalents). WiringPi should also be installed system-wide for access\nto the ``gpio`` tool.\n\n.. code:: bash\n\n    sudo apt-get install python-dev python-setuptools swig wiringpi\n\nBuild & install with\n--------------------\n\n``sudo python setup.py install``\n\nOr Python 3:\n\n``sudo python3 setup.py install``", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hardkernel/WiringPi2-Python", "keywords": "", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "odroid-wiringpi", "package_url": "https://pypi.org/project/odroid-wiringpi/", "platform": "", "project_url": "https://pypi.org/project/odroid-wiringpi/", "project_urls": {"Homepage": "https://github.com/hardkernel/WiringPi2-Python"}, "release_url": "https://pypi.org/project/odroid-wiringpi/3.2-2/", "requires_dist": null, "requires_python": "", "summary": "A Port of WiringPi Python project for ODROID boards", "version": "3.2-2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is an unofficial port of Gordon\u2019s WiringPi library. Please do not\nemail Gordon if you have issues, he will not be able to help.</p>\n<p>For support, comments, questions, etc please join the WiringPi Discord\nchannel: <a href=\"https://discord.gg/SM4WUVG\" rel=\"nofollow\">https://discord.gg/SM4WUVG</a></p>\n<div id=\"wiringpi-for-python\">\n<h2>WiringPi for Python</h2>\n<p>WiringPi: An implementation of most of the Arduino Wiring functions for\nthe Raspberry Pi.</p>\n<p>WiringPi implements new functions for managing IO expanders.</p>\n</div>\n<div id=\"quick-install\">\n<h2>Quick Install</h2>\n<a href=\"https://badge.fury.io/py/odroid-wiringpi\" rel=\"nofollow\"><img alt=\"PyPI version badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d84ae30e144cf2ada7a3685a1c55d117986d2cf4/68747470733a2f2f62616467652e667572792e696f2f70792f6f64726f69642d776972696e6770692e737667\"></a>\n<p>The library is packaged on PyPI and can be installed with pip:</p>\n<p><tt>pip install <span class=\"pre\">odroid-wiringpi</span></tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">odroid_wiringpi</span> <span class=\"k\">as</span> <span class=\"nn\">wiringpi</span>\n\n<span class=\"c1\"># One of the following MUST be called before using IO functions:</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">wiringPiSetup</span><span class=\"p\">()</span>      <span class=\"c1\"># For sequential pin numbering</span>\n<span class=\"c1\"># OR</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">wiringPiSetupSys</span><span class=\"p\">()</span>   <span class=\"c1\"># For /sys/class/gpio with GPIO pin numbering</span>\n<span class=\"c1\"># OR</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">wiringPiSetupGpio</span><span class=\"p\">()</span>  <span class=\"c1\"># For GPIO pin numbering</span>\n</pre>\n<p><strong>General IO:</strong></p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>       <span class=\"c1\"># Set pin 6 to 1 ( OUTPUT )</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Write 1 ( HIGH ) to pin 6</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">digitalRead</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>      <span class=\"c1\"># Read pin 6</span>\n</pre>\n<p><strong>Setting up a peripheral:</strong></p>\n<p>WiringPi supports expanding your range of available \u201cpins\u201d by setting up\na port expander. The implementation details of your port expander will\nbe handled transparently, and you can write to the additional pins\n(starting from PIN_OFFSET &gt;= 64) as if they were normal pins on the Pi.</p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">mcp23017Setup</span><span class=\"p\">(</span><span class=\"n\">PIN_OFFSET</span><span class=\"p\">,</span> <span class=\"n\">I2C_ADDR</span><span class=\"p\">)</span>\n</pre>\n<p>This example was tested on a quick2wire board with one digital IO\nexpansion board connected via I2C:</p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">mcp23017Setup</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mh\">0x20</span><span class=\"p\">)</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Soft Tone:</strong></p>\n<p>Hook a speaker up to your Pi and generate music with softTone. Also\nuseful for generating frequencies for other uses such as modulating A/C.</p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">softToneCreate</span><span class=\"p\">(</span><span class=\"n\">PIN</span><span class=\"p\">)</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">softToneWrite</span><span class=\"p\">(</span><span class=\"n\">PIN</span><span class=\"p\">,</span> <span class=\"n\">FREQUENCY</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Bit shifting:</strong></p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">shiftOut</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)</span>  <span class=\"c1\"># Shift out 123 (b1110110, byte 0-255) to data pin 1, clock pin 2</span>\n</pre>\n<p><strong>Serial:</strong></p>\n<pre><span class=\"n\">serial</span> <span class=\"o\">=</span> <span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">serialOpen</span><span class=\"p\">(</span><span class=\"s1\">'/dev/ttyAMA0'</span><span class=\"p\">,</span> <span class=\"mi\">9600</span><span class=\"p\">)</span>  <span class=\"c1\"># Requires device/baud and returns an ID</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">serialPuts</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"p\">,</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n<span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">serialClose</span><span class=\"p\">(</span><span class=\"n\">serial</span><span class=\"p\">)</span>  <span class=\"c1\"># Pass in ID</span>\n</pre>\n<p><strong>SPI:</strong></p>\n<p>The <tt>wiringPiSPIDataRW()</tt> function needs to be passed a <tt>bytes</tt>\nobject in Python 3. In Python 2, it takes a string. The following should\nwork in either Python 2 or 3:</p>\n<pre><span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">wiringPiSPISetup</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"p\">)</span>\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"n\">your</span> <span class=\"n\">data</span> <span class=\"n\">here</span><span class=\"p\">])</span>\n<span class=\"n\">retlen</span><span class=\"p\">,</span> <span class=\"n\">retdata</span> <span class=\"o\">=</span> <span class=\"n\">wiringpi</span><span class=\"o\">.</span><span class=\"n\">wiringPiSPIDataRW</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"p\">)</span>\n</pre>\n<p>Now, <tt>retlen</tt> will contain the number of bytes received/read by the\ncall. <tt>retdata</tt> will contain the data itself, and in Python 3, <tt>buf</tt>\nwill have been modified to contain it as well (that won\u2019t happen in\nPython 2, because then <tt>buf</tt> is a string, and strings are immutable).</p>\n<p><strong>Full details of the API at:</strong> <a href=\"http://www.wiringpi.com\" rel=\"nofollow\">http://www.wiringpi.com</a></p>\n</div>\n<div id=\"manual-build\">\n<h2>Manual Build</h2>\n<div id=\"get-setup-repo\">\n<h3>Get/setup repo</h3>\n<pre>git clone --recursive https://github.com/WiringPi/WiringPi-Python.git\n<span class=\"nb\">cd</span> WiringPi-Python\n</pre>\n<p>Don\u2019t forget the <tt><span class=\"pre\">--recursive</span></tt>; it is required to also pull in the\nWiringPi C code from its own repository.</p>\n</div>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<p>To rebuild the bindings you <strong>must</strong> first have installed <tt>swig</tt>,\n<tt><span class=\"pre\">python-dev</span></tt>, and <tt><span class=\"pre\">python-setuptools</span></tt> (or their <tt>python3-</tt>\nequivalents). WiringPi should also be installed system-wide for access\nto the <tt>gpio</tt> tool.</p>\n<pre>sudo apt-get install python-dev python-setuptools swig wiringpi\n</pre>\n</div>\n<div id=\"build-install-with\">\n<h3>Build &amp; install with</h3>\n<p><tt>sudo python setup.py install</tt></p>\n<p>Or Python 3:</p>\n<p><tt>sudo python3 setup.py install</tt></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7177950, "releases": {"2.44.4.0": [{"comment_text": "", "digests": {"md5": "3f44456d2b0ecf5758f7edc2b10802aa", "sha256": "eeca7ed1297f1f2414b3b8c6fcede1473cad35c3c927b72f7c6ad83569ff2ad9"}, "downloads": -1, "filename": "odroid_wiringpi-2.44.4.0.tar.gz", "has_sig": false, "md5_digest": "3f44456d2b0ecf5758f7edc2b10802aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150402, "upload_time": "2019-09-04T02:26:11", "upload_time_iso_8601": "2019-09-04T02:26:11.251207Z", "url": "https://files.pythonhosted.org/packages/27/bd/012018b5fbc359dcdbf10269078b96d14f85354397127466b5eab5be0d05/odroid_wiringpi-2.44.4.0.tar.gz", "yanked": false}], "2.44.5.0": [{"comment_text": "", "digests": {"md5": "f83b02be92657ca8ac72b138d5acb002", "sha256": "fe4efb0e680168c5d87ccb1503be5788118c22892500d77c035915ab3f789b6e"}, "downloads": -1, "filename": "odroid_wiringpi-2.44.5.0.tar.gz", "has_sig": false, "md5_digest": "f83b02be92657ca8ac72b138d5acb002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150404, "upload_time": "2019-09-20T08:31:46", "upload_time_iso_8601": "2019-09-20T08:31:46.402830Z", "url": "https://files.pythonhosted.org/packages/37/54/d06c477b11e0acdc7a21ce7d51a79bb073239ee4feb2aede07ea6fcaedb1/odroid_wiringpi-2.44.5.0.tar.gz", "yanked": false}], "2.44.6.0": [{"comment_text": "", "digests": {"md5": "e515e6c79dd72d4e4fea33d5e96ef287", "sha256": "3989a9632974b8920b31d972d60e460bcedb8ee8278610f247a42b5ec3a6c5d8"}, "downloads": -1, "filename": "odroid_wiringpi-2.44.6.0.tar.gz", "has_sig": false, "md5_digest": "e515e6c79dd72d4e4fea33d5e96ef287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137328, "upload_time": "2019-12-30T06:48:37", "upload_time_iso_8601": "2019-12-30T06:48:37.948140Z", "url": "https://files.pythonhosted.org/packages/a6/45/43ed483db651c3a607b1c193a56eedf3d89c2d80a11a2a8b8f63bc094373/odroid_wiringpi-2.44.6.0.tar.gz", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "6a080ee451d7f9c4902f91a20f901bbc", "sha256": "ad42723d6337adea1b3bd705c48f2e836ed51a15963321c03bcd1f5687edd8fe"}, "downloads": -1, "filename": "odroid_wiringpi-3.1.tar.gz", "has_sig": false, "md5_digest": "6a080ee451d7f9c4902f91a20f901bbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99039, "upload_time": "2020-04-21T03:19:59", "upload_time_iso_8601": "2020-04-21T03:19:59.682217Z", "url": "https://files.pythonhosted.org/packages/38/86/575e004bc29f285cae1c66d5d0856845b42abf20e68d7953e25679afa582/odroid_wiringpi-3.1.tar.gz", "yanked": false}], "3.2": [{"comment_text": "", "digests": {"md5": "70bc515d7d71281f7e041bcff487a3f2", "sha256": "7b4d73fb10305bac0256f95310c5fd993a6cf8263f7e5f82bdd70948a0ed6285"}, "downloads": -1, "filename": "odroid_wiringpi-3.2.tar.gz", "has_sig": false, "md5_digest": "70bc515d7d71281f7e041bcff487a3f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 135133, "upload_time": "2020-04-28T06:01:43", "upload_time_iso_8601": "2020-04-28T06:01:43.186373Z", "url": "https://files.pythonhosted.org/packages/09/f7/f5fafb9e3b7c4cdc8b69834408946e751df756ee71167199264fc16739f9/odroid_wiringpi-3.2.tar.gz", "yanked": false}], "3.2-1": [{"comment_text": "", "digests": {"md5": "41967eb26eeb92d6a62f8bd7288e2de0", "sha256": "8a2cd1126cc4851c688674a8db120430147c217feb4c6cd01284d89968b67613"}, "downloads": -1, "filename": "odroid_wiringpi-3.2-1.tar.gz", "has_sig": false, "md5_digest": "41967eb26eeb92d6a62f8bd7288e2de0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 138735, "upload_time": "2020-04-28T06:22:33", "upload_time_iso_8601": "2020-04-28T06:22:33.159940Z", "url": "https://files.pythonhosted.org/packages/79/c9/5475c7a4446a3ce7e39464ff0d660083f2f6c0d4b13be7c692e172bebb8a/odroid_wiringpi-3.2-1.tar.gz", "yanked": false}], "3.2-2": [{"comment_text": "", "digests": {"md5": "7d077088c8ac656c217feb693631b5b3", "sha256": "d0213e699e9aa1bc7e5bcc18a5fcf66fcbc5eb2c5f7f0f2e2c4a19107cc7346d"}, "downloads": -1, "filename": "odroid_wiringpi-3.2-2.tar.gz", "has_sig": false, "md5_digest": "7d077088c8ac656c217feb693631b5b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140366, "upload_time": "2020-05-06T06:14:35", "upload_time_iso_8601": "2020-05-06T06:14:35.718704Z", "url": "https://files.pythonhosted.org/packages/10/3e/330186d2a3412fbe4e0132ae990d95c15291c87fe0fe193dcb1d076cff1d/odroid_wiringpi-3.2-2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "aeccb186373ffd48cbbd9ba7251f145f", "sha256": "4259dd60dc2ed5aeb9a06d8b1a30435d297abb6d852b8518cb3830dcd796b04f"}, "downloads": -1, "filename": "odroid_wiringpi-3.2.post2-py3.8-linux-aarch64.egg", "has_sig": false, "md5_digest": "aeccb186373ffd48cbbd9ba7251f145f", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 411626, "upload_time": "2020-05-06T06:14:38", "upload_time_iso_8601": "2020-05-06T06:14:38.494512Z", "url": "https://files.pythonhosted.org/packages/7f/36/111b30b4f339f133738a5a1c1759a286404f96d823121f99dff6b0ce87c2/odroid_wiringpi-3.2.post2-py3.8-linux-aarch64.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d077088c8ac656c217feb693631b5b3", "sha256": "d0213e699e9aa1bc7e5bcc18a5fcf66fcbc5eb2c5f7f0f2e2c4a19107cc7346d"}, "downloads": -1, "filename": "odroid_wiringpi-3.2-2.tar.gz", "has_sig": false, "md5_digest": "7d077088c8ac656c217feb693631b5b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140366, "upload_time": "2020-05-06T06:14:35", "upload_time_iso_8601": "2020-05-06T06:14:35.718704Z", "url": "https://files.pythonhosted.org/packages/10/3e/330186d2a3412fbe4e0132ae990d95c15291c87fe0fe193dcb1d076cff1d/odroid_wiringpi-3.2-2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "aeccb186373ffd48cbbd9ba7251f145f", "sha256": "4259dd60dc2ed5aeb9a06d8b1a30435d297abb6d852b8518cb3830dcd796b04f"}, "downloads": -1, "filename": "odroid_wiringpi-3.2.post2-py3.8-linux-aarch64.egg", "has_sig": false, "md5_digest": "aeccb186373ffd48cbbd9ba7251f145f", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 411626, "upload_time": "2020-05-06T06:14:38", "upload_time_iso_8601": "2020-05-06T06:14:38.494512Z", "url": "https://files.pythonhosted.org/packages/7f/36/111b30b4f339f133738a5a1c1759a286404f96d823121f99dff6b0ce87c2/odroid_wiringpi-3.2.post2-py3.8-linux-aarch64.egg", "yanked": false}], "timestamp": "Fri May  8 03:05:03 2020"}