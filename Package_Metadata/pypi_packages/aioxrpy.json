{"info": {"author": "Maciej Janiszewski", "author_email": "maciej@ulam.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# aioxrpy\n\n[![Documentation Status](https://readthedocs.org/projects/aioxrpy/badge/?version=latest)](http://aioxrpy.readthedocs.io/en/latest/?badge=latest) [![codecov](https://codecov.io/gh/ulamlabs/aioxrpy/branch/master/graph/badge.svg)](https://codecov.io/gh/ulamlabs/aioxrpy) ![Python package](https://github.com/ulamlabs/aioxrpy/workflows/Python%20package/badge.svg) ![Upload Python Package](https://github.com/ulamlabs/aioxrpy/workflows/Upload%20Python%20Package/badge.svg)\n\nRipple blockchain library for Python.\n\n## Features\n\n1. Async JSON-RPC client.\n2. Signing and verifying transactions using private and public keys.\n3. Support for signing transactions with multiple keys.\n4. Serializer and deserializer for Ripple objects.\n\n## Installation\n\nLibrary is available on PyPi, you can simply install it using `pip`.\n```\n$ pip install aioxrpy\n```\n\n## Usage\n\n### Keys\n\nSigning and verifying transactions, as well as generating new accounts is done through `RippleKey` class. \n\n```\nfrom aioxrpy.keys import RippleKey\n\n# New key\nkey = RippleKey()\n\n# From public key\nkey = RippleKey(public_key=b'public key')\n\n# From master seed\nkey = RippleKey(private_key='seed')\n\n# From private key\nkey = RippleKey(private_key=b'private key')\n```\n\nSuch key can be converted to Account ID and public key. \n\n### Submitting transactions\n\nRPC client provides a helper which signs and submits transaction. As a first \nargument it takes a transaction dict. The second one is a `RippleKey` instance\nused for signing this transaction.\n\n```\nfrom aioxrpy.rpc import RippleJsonRpc\n\nrpc = RippleJsonRpc(url)\nawait rpc.sign_and_submit(\n    {\n        'Account': account,\n        'TransactionType': RippleTransactionType.Payment,\n        'Amount': decimals.xrp_to_drops(200),\n        'Destination': destination,\n        'Fee': 10\n    },\n    signer\n)\n```\n\n### Multi-signed transactions\n\nRPC client provides a helper which signs and submits transaction using multiple\nkeys. As a second argument, it expects a list of `RippleKey` instances. Please \ndon't forget that each signer increases transaction fees.\n\n```\nfrom aioxrpy.rpc import RippleJsonRpc\n\nrpc = RippleJsonRpc(url)\nawait rpc.multisign_and_submit(\n    {\n        'Account': account,\n        'TransactionType': RippleTransactionType.Payment,\n        'Amount': decimals.xrp_to_drops(200),\n        'Destination': destination,\n        'Fee': 30\n    },\n    [signer_1, signer_2]\n)\n```\n\n## Documentation\n\nDocs and usage examples are available [here](https://aioxrpy.readthedocs.io/en/latest).\n\n## Unit testing\n\nTo run unit tests, you need to bootstrap a Rippled regtest node first. Use the provided `docker-compose.yml` file.\n\n```\n$ docker-compose up -d\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://ulam.io/", "keywords": "blockchain,xrp,async,ripple,cryptocurrency", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aioxrpy", "package_url": "https://pypi.org/project/aioxrpy/", "platform": "", "project_url": "https://pypi.org/project/aioxrpy/", "project_urls": {"Documentation": "https://aioxrpy.readthedocs.io/en/latest/", "Homepage": "https://ulam.io/", "Repository": "https://github.com/ulamlabs/aioxrpy"}, "release_url": "https://pypi.org/project/aioxrpy/1.0.0/", "requires_dist": ["aiohttp (>=3.3.1,<4.0.0)", "base58 (==2.0.0)", "ecdsa (>=0.15,<0.16)"], "requires_python": ">=3.7,<4.0", "summary": "Ripple blockchain library for Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aioxrpy</h1>\n<p><a href=\"http://aioxrpy.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9c2276b6d787296b00b859e975f231f3fc6d301/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696f787270792f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://codecov.io/gh/ulamlabs/aioxrpy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4e77c70e93cc1965992b2d1ab3f0b9972909670/68747470733a2f2f636f6465636f762e696f2f67682f756c616d6c6162732f61696f787270792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/faca3a484ea64a1748cb89fd284c1c446f75e6f6/68747470733a2f2f6769746875622e636f6d2f756c616d6c6162732f61696f787270792f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"> <img alt=\"Upload Python Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee80520956f95f0fd25d7ae24ca8e89e2e55233c/68747470733a2f2f6769746875622e636f6d2f756c616d6c6162732f61696f787270792f776f726b666c6f77732f55706c6f6164253230507974686f6e2532305061636b6167652f62616467652e737667\"></p>\n<p>Ripple blockchain library for Python.</p>\n<h2>Features</h2>\n<ol>\n<li>Async JSON-RPC client.</li>\n<li>Signing and verifying transactions using private and public keys.</li>\n<li>Support for signing transactions with multiple keys.</li>\n<li>Serializer and deserializer for Ripple objects.</li>\n</ol>\n<h2>Installation</h2>\n<p>Library is available on PyPi, you can simply install it using <code>pip</code>.</p>\n<pre><code>$ pip install aioxrpy\n</code></pre>\n<h2>Usage</h2>\n<h3>Keys</h3>\n<p>Signing and verifying transactions, as well as generating new accounts is done through <code>RippleKey</code> class.</p>\n<pre><code>from aioxrpy.keys import RippleKey\n\n# New key\nkey = RippleKey()\n\n# From public key\nkey = RippleKey(public_key=b'public key')\n\n# From master seed\nkey = RippleKey(private_key='seed')\n\n# From private key\nkey = RippleKey(private_key=b'private key')\n</code></pre>\n<p>Such key can be converted to Account ID and public key.</p>\n<h3>Submitting transactions</h3>\n<p>RPC client provides a helper which signs and submits transaction. As a first\nargument it takes a transaction dict. The second one is a <code>RippleKey</code> instance\nused for signing this transaction.</p>\n<pre><code>from aioxrpy.rpc import RippleJsonRpc\n\nrpc = RippleJsonRpc(url)\nawait rpc.sign_and_submit(\n    {\n        'Account': account,\n        'TransactionType': RippleTransactionType.Payment,\n        'Amount': decimals.xrp_to_drops(200),\n        'Destination': destination,\n        'Fee': 10\n    },\n    signer\n)\n</code></pre>\n<h3>Multi-signed transactions</h3>\n<p>RPC client provides a helper which signs and submits transaction using multiple\nkeys. As a second argument, it expects a list of <code>RippleKey</code> instances. Please\ndon't forget that each signer increases transaction fees.</p>\n<pre><code>from aioxrpy.rpc import RippleJsonRpc\n\nrpc = RippleJsonRpc(url)\nawait rpc.multisign_and_submit(\n    {\n        'Account': account,\n        'TransactionType': RippleTransactionType.Payment,\n        'Amount': decimals.xrp_to_drops(200),\n        'Destination': destination,\n        'Fee': 30\n    },\n    [signer_1, signer_2]\n)\n</code></pre>\n<h2>Documentation</h2>\n<p>Docs and usage examples are available <a href=\"https://aioxrpy.readthedocs.io/en/latest\" rel=\"nofollow\">here</a>.</p>\n<h2>Unit testing</h2>\n<p>To run unit tests, you need to bootstrap a Rippled regtest node first. Use the provided <code>docker-compose.yml</code> file.</p>\n<pre><code>$ docker-compose up -d\n</code></pre>\n\n          </div>"}, "last_serial": 6976929, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "863abe938ac5cfd7f6b7b38481f46afe", "sha256": "46c5a75be6fcf3e83ca31d07fb70ba015c792055ac8ca7072bb86b84884a9604"}, "downloads": -1, "filename": "aioxrpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "863abe938ac5cfd7f6b7b38481f46afe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 17154, "upload_time": "2020-04-08T11:13:28", "upload_time_iso_8601": "2020-04-08T11:13:28.572217Z", "url": "https://files.pythonhosted.org/packages/97/44/2a548727b10f507a2ef46ff8a8aad333aaa614a11bb0eb9d46e4c720c965/aioxrpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9163d3b312dadf88cdaa62b080151ab", "sha256": "cdccecd82e8716db3c663c2e9ced56c7feb6e141041a64ff8d99f21a9dadd350"}, "downloads": -1, "filename": "aioxrpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d9163d3b312dadf88cdaa62b080151ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 16203, "upload_time": "2020-04-08T11:13:29", "upload_time_iso_8601": "2020-04-08T11:13:29.329642Z", "url": "https://files.pythonhosted.org/packages/9d/d7/465f9ea2d3d5394a27082107369028a5bcf23665894d824036971c632c1e/aioxrpy-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "863abe938ac5cfd7f6b7b38481f46afe", "sha256": "46c5a75be6fcf3e83ca31d07fb70ba015c792055ac8ca7072bb86b84884a9604"}, "downloads": -1, "filename": "aioxrpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "863abe938ac5cfd7f6b7b38481f46afe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 17154, "upload_time": "2020-04-08T11:13:28", "upload_time_iso_8601": "2020-04-08T11:13:28.572217Z", "url": "https://files.pythonhosted.org/packages/97/44/2a548727b10f507a2ef46ff8a8aad333aaa614a11bb0eb9d46e4c720c965/aioxrpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9163d3b312dadf88cdaa62b080151ab", "sha256": "cdccecd82e8716db3c663c2e9ced56c7feb6e141041a64ff8d99f21a9dadd350"}, "downloads": -1, "filename": "aioxrpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d9163d3b312dadf88cdaa62b080151ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 16203, "upload_time": "2020-04-08T11:13:29", "upload_time_iso_8601": "2020-04-08T11:13:29.329642Z", "url": "https://files.pythonhosted.org/packages/9d/d7/465f9ea2d3d5394a27082107369028a5bcf23665894d824036971c632c1e/aioxrpy-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:35 2020"}