{"info": {"author": "Alex DeLorenzo", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# \u25b6\ufe0f Add MPRIS Integration to Media Players\n`mpris_server` provides adapters to integrate MPRIS support in your media player or device.\n\nWhereas [existing MPRIS libraries for Python](https://github.com/hugosenari/mpris2) implement clients for apps with existing MPRIS support, `mpris_server` is a library to implement MPRIS support in apps that don't already have it. If you want to give your media player an MPRIS interface, `mpris_server` is right for you.\n\n`mpris_server` is a fork of [Mopidy-MPRIS](https://github.com/mopidy/mopidy-mpris) that was extended and made into a general purpose library.\n\nCheck out [\ud83d\udcfachromecast_mpris](https://github.com/alexdelorenzo/chromecast_mpris) for an app that uses `mpris_server`.\n\n## Features\nImplements the following from the [MPRIS specification](https://specifications.freedesktop.org/mpris-spec/2.2/):\n  * [x] MediaPlayer2\n  * [x] MediaPlayer2.Player\n  * [x] MediaPlayer2.Playlist\n  * [x] MediaPlayer2.TrackList\n  \nThe library also provides an event handler that emits `org.freedesktop.DBus.Properties.PropertiesChanged` in response to changes in your media player. This allows for real-time updates from your media player to DBus.\n\n## Installation\n### Requirements\n - Linux\n - DBus\n - Python >= 3.6\n - python3-gi (Python GObject introspection)\n - `requirements.txt`\n\n### PyPI\n`pip3 install mpris_server`\n\n### Github\nClone the repo, run `pip3 install -r requirements.txt`, followed by `python3 setup.py install`. \n\n## Usage\n### Implement `adapters.MprisAdapter`\nSubclass `adapters.MprisAdapter` and implement each method.\n\nAfter subclassing, pass an instance to an instance of `server.Server`.\n\n### Implement `events.EventAdapter`\nSubclass `adapters.EventAdapter`. This interface has a good default implementation, only override its methods if your app calls for it.\n\nIf you choose to re-implement its methods, call `emit_changes()` with the corresponding interface and a `List[str]` of [properties](https://specifications.freedesktop.org/mpris-spec/2.2/Player_Interface.html) that changed.\n\nIntegrate the adapter with your application to emitmpris = Server('MyMedia', adapter=my_adapter) changes in your media player that DBus needs to know about. For example, if the user pauses the media player, be sure to call `EventAdapter.on_playpause()` in the app. DBus won't know about the change otherwise.\n\n### Create the Server and Publish\nCreate an instance of `server.Server`, pass it an instance of your `MprisAdapter`, and call `publish()` to publish your media player via DBus.\n\n```python3\nmpris = Server('MyMedia', adapter=my_adapter)\nmpris.publish() \n```\n\nCall `loop()` to enter the DBus event loop, or enter the DBus event loop elsewhere in your code. \n```python3\nmpris.loop() \n```\n\nOr: \n```python3\nfrom gi.repository import GLib\n\nloop = GLib.MainLoop()\nloop.run()\n```\n\n### Example\n```python3\nfrom mpris_server.adapters import MprisAdapter, EventAdapter, Track\nfrom mpris_server.events import EventAdapter\nfrom mpris_server.server import Server\n\nfrom my_app import app  # custom app you want to integrate\n\n\nclass MyMediaAdapter(MprisAdapter):\n    # Make sure to implement all methods on MprisAdapter, not just get_current_track()\n    def get_current_track(self) -> Track:\n        ...\n    # and so on\n\n\nclass MyAppEventHandler(EventAdapter):\n    # EventAdapter has good default implementations for its methods.\n    # Only override the default methods if it suits your app.\n    \n    def on_app_event(self, event: str):\n        # trigger DBus updates based on events in your app\n        if event == 'pause':\n            self.on_playpause()\n        ...\n    # and so on\n\n# create mpris adapter and initialize mpris server\nmy_adapter = MyMediaAdapter()\nmpris = Server('MyMedia', adapter=my_adapter)\n\n# initialize app integration with mpris\nevent_handler = MyAppEventHandler()\napp.register_event_handler(event_handler)\n\n# publish and serve\nmpris.loop()\n```\n\n## License\nSee `LICENSE`. Message me if you'd like to use this project with a different license.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://alexdelorenzo.dev", "keywords": "", "license": "AGPL-3.0", "maintainer": "", "maintainer_email": "", "name": "mpris-server", "package_url": "https://pypi.org/project/mpris-server/", "platform": "", "project_url": "https://pypi.org/project/mpris-server/", "project_urls": {"Homepage": "https://alexdelorenzo.dev"}, "release_url": "https://pypi.org/project/mpris-server/0.1.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Publish a MediaPlayer2 MPRIS device to D-BUS.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\u25b6\ufe0f Add MPRIS Integration to Media Players</h1>\n<p><code>mpris_server</code> provides adapters to integrate MPRIS support in your media player or device.</p>\n<p>Whereas <a href=\"https://github.com/hugosenari/mpris2\" rel=\"nofollow\">existing MPRIS libraries for Python</a> implement clients for apps with existing MPRIS support, <code>mpris_server</code> is a library to implement MPRIS support in apps that don't already have it. If you want to give your media player an MPRIS interface, <code>mpris_server</code> is right for you.</p>\n<p><code>mpris_server</code> is a fork of <a href=\"https://github.com/mopidy/mopidy-mpris\" rel=\"nofollow\">Mopidy-MPRIS</a> that was extended and made into a general purpose library.</p>\n<p>Check out <a href=\"https://github.com/alexdelorenzo/chromecast_mpris\" rel=\"nofollow\">\ud83d\udcfachromecast_mpris</a> for an app that uses <code>mpris_server</code>.</p>\n<h2>Features</h2>\n<p>Implements the following from the <a href=\"https://specifications.freedesktop.org/mpris-spec/2.2/\" rel=\"nofollow\">MPRIS specification</a>:</p>\n<ul>\n<li>[x] MediaPlayer2</li>\n<li>[x] MediaPlayer2.Player</li>\n<li>[x] MediaPlayer2.Playlist</li>\n<li>[x] MediaPlayer2.TrackList</li>\n</ul>\n<p>The library also provides an event handler that emits <code>org.freedesktop.DBus.Properties.PropertiesChanged</code> in response to changes in your media player. This allows for real-time updates from your media player to DBus.</p>\n<h2>Installation</h2>\n<h3>Requirements</h3>\n<ul>\n<li>Linux</li>\n<li>DBus</li>\n<li>Python &gt;= 3.6</li>\n<li>python3-gi (Python GObject introspection)</li>\n<li><code>requirements.txt</code></li>\n</ul>\n<h3>PyPI</h3>\n<p><code>pip3 install mpris_server</code></p>\n<h3>Github</h3>\n<p>Clone the repo, run <code>pip3 install -r requirements.txt</code>, followed by <code>python3 setup.py install</code>.</p>\n<h2>Usage</h2>\n<h3>Implement <code>adapters.MprisAdapter</code></h3>\n<p>Subclass <code>adapters.MprisAdapter</code> and implement each method.</p>\n<p>After subclassing, pass an instance to an instance of <code>server.Server</code>.</p>\n<h3>Implement <code>events.EventAdapter</code></h3>\n<p>Subclass <code>adapters.EventAdapter</code>. This interface has a good default implementation, only override its methods if your app calls for it.</p>\n<p>If you choose to re-implement its methods, call <code>emit_changes()</code> with the corresponding interface and a <code>List[str]</code> of <a href=\"https://specifications.freedesktop.org/mpris-spec/2.2/Player_Interface.html\" rel=\"nofollow\">properties</a> that changed.</p>\n<p>Integrate the adapter with your application to emitmpris = Server('MyMedia', adapter=my_adapter) changes in your media player that DBus needs to know about. For example, if the user pauses the media player, be sure to call <code>EventAdapter.on_playpause()</code> in the app. DBus won't know about the change otherwise.</p>\n<h3>Create the Server and Publish</h3>\n<p>Create an instance of <code>server.Server</code>, pass it an instance of your <code>MprisAdapter</code>, and call <code>publish()</code> to publish your media player via DBus.</p>\n<pre><span class=\"n\">mpris</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'MyMedia'</span><span class=\"p\">,</span> <span class=\"n\">adapter</span><span class=\"o\">=</span><span class=\"n\">my_adapter</span><span class=\"p\">)</span>\n<span class=\"n\">mpris</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">()</span> \n</pre>\n<p>Call <code>loop()</code> to enter the DBus event loop, or enter the DBus event loop elsewhere in your code.</p>\n<pre><span class=\"n\">mpris</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">()</span> \n</pre>\n<p>Or:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gi.repository</span> <span class=\"kn\">import</span> <span class=\"n\">GLib</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">GLib</span><span class=\"o\">.</span><span class=\"n\">MainLoop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mpris_server.adapters</span> <span class=\"kn\">import</span> <span class=\"n\">MprisAdapter</span><span class=\"p\">,</span> <span class=\"n\">EventAdapter</span><span class=\"p\">,</span> <span class=\"n\">Track</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpris_server.events</span> <span class=\"kn\">import</span> <span class=\"n\">EventAdapter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpris_server.server</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">my_app</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>  <span class=\"c1\"># custom app you want to integrate</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyMediaAdapter</span><span class=\"p\">(</span><span class=\"n\">MprisAdapter</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Make sure to implement all methods on MprisAdapter, not just get_current_track()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_current_track</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Track</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n    <span class=\"c1\"># and so on</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAppEventHandler</span><span class=\"p\">(</span><span class=\"n\">EventAdapter</span><span class=\"p\">):</span>\n    <span class=\"c1\"># EventAdapter has good default implementations for its methods.</span>\n    <span class=\"c1\"># Only override the default methods if it suits your app.</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">on_app_event</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"c1\"># trigger DBus updates based on events in your app</span>\n        <span class=\"k\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"s1\">'pause'</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">on_playpause</span><span class=\"p\">()</span>\n        <span class=\"o\">...</span>\n    <span class=\"c1\"># and so on</span>\n\n<span class=\"c1\"># create mpris adapter and initialize mpris server</span>\n<span class=\"n\">my_adapter</span> <span class=\"o\">=</span> <span class=\"n\">MyMediaAdapter</span><span class=\"p\">()</span>\n<span class=\"n\">mpris</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s1\">'MyMedia'</span><span class=\"p\">,</span> <span class=\"n\">adapter</span><span class=\"o\">=</span><span class=\"n\">my_adapter</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># initialize app integration with mpris</span>\n<span class=\"n\">event_handler</span> <span class=\"o\">=</span> <span class=\"n\">MyAppEventHandler</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_event_handler</span><span class=\"p\">(</span><span class=\"n\">event_handler</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># publish and serve</span>\n<span class=\"n\">mpris</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">()</span>\n</pre>\n<h2>License</h2>\n<p>See <code>LICENSE</code>. Message me if you'd like to use this project with a different license.</p>\n\n          </div>"}, "last_serial": 7153979, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "1ca4293304cd6751eb359013e15223d3", "sha256": "3be7340b482cee24993790634ec9a54c1b03b36a369dbbd04405669a63e5a571"}, "downloads": -1, "filename": "mpris_server-0.0.2-py3.7.egg", "has_sig": false, "md5_digest": "1ca4293304cd6751eb359013e15223d3", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": "~=3.6", "size": 21591, "upload_time": "2020-04-26T04:17:34", "upload_time_iso_8601": "2020-04-26T04:17:34.327677Z", "url": "https://files.pythonhosted.org/packages/46/50/ea28457cf64ee7ed95e745bbf207c6c05a158df7fa31f2cf83c645cb16ba/mpris_server-0.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "504dd4a76a2fefab23a307cec5ea8998", "sha256": "0c65759189e6bf58584941024ad7c9f402eec2a8cdd2296aef4460d3db753fdc"}, "downloads": -1, "filename": "mpris_server-0.0.2.tar.gz", "has_sig": false, "md5_digest": "504dd4a76a2fefab23a307cec5ea8998", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 8815, "upload_time": "2020-04-25T19:16:16", "upload_time_iso_8601": "2020-04-25T19:16:16.556226Z", "url": "https://files.pythonhosted.org/packages/cd/bb/1f67f85a7e92ad7ed8b9a5426fcaf2cf419e81c5616c997c7141304afae0/mpris_server-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "014d90876570cf62b66b2bede3e31a8b", "sha256": "857c2e2ffdf82615e1c3df1cd3505173a16aa32da56a0e52bdcdd7392e79b94e"}, "downloads": -1, "filename": "mpris_server-0.0.3.tar.gz", "has_sig": false, "md5_digest": "014d90876570cf62b66b2bede3e31a8b", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 9281, "upload_time": "2020-04-26T04:18:07", "upload_time_iso_8601": "2020-04-26T04:18:07.590255Z", "url": "https://files.pythonhosted.org/packages/1b/8e/3897cba882dc90fbe85abdbed4486d23aaa70bc39cf579451bfede7504cd/mpris_server-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "cc7832cc98a79f0fc057d2bd43f8f02f", "sha256": "bcccf0451bfd3fa25659016966a2ec488500dc7a02349987bc275d011a751ef3"}, "downloads": -1, "filename": "mpris_server-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cc7832cc98a79f0fc057d2bd43f8f02f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11562, "upload_time": "2020-04-28T21:10:33", "upload_time_iso_8601": "2020-04-28T21:10:33.236658Z", "url": "https://files.pythonhosted.org/packages/92/40/8cf43683b6a0d43472d10f46394b4351b23017fdc1083089b4c0ec6e3914/mpris_server-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "157129c0d163f511360dddfb870cc63f", "sha256": "b61f5ba106d9a52e8609ecd747af62b0130d159fe46fe0e5a634ec6775bd48e8"}, "downloads": -1, "filename": "mpris_server-0.1.1.tar.gz", "has_sig": false, "md5_digest": "157129c0d163f511360dddfb870cc63f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11557, "upload_time": "2020-04-28T21:13:28", "upload_time_iso_8601": "2020-04-28T21:13:28.609626Z", "url": "https://files.pythonhosted.org/packages/d1/56/550f4ed1fe9e0105611290af34f672d4c88b17b086ca496d9cce21dcdebd/mpris_server-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b45a54d819669c0bdf32f20dd91a5f04", "sha256": "f7bf58b3bf50586cae9eb463a607da2e8dde764f4f3bfe349580e624871311f0"}, "downloads": -1, "filename": "mpris_server-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b45a54d819669c0bdf32f20dd91a5f04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12022, "upload_time": "2020-05-02T23:04:44", "upload_time_iso_8601": "2020-05-02T23:04:44.998561Z", "url": "https://files.pythonhosted.org/packages/c2/65/dc29c04565cf549c968fc6bbdfcbd5f2c468cea8a77d0f76e3353dc31c3a/mpris_server-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "00debce5edcace2993f65a00512d3a73", "sha256": "f8d366fbac1099603a82dcd0b2f40da6ca7ade7ccdcaf8cecfa671aa4403fa4f"}, "downloads": -1, "filename": "mpris_server-0.1.4.tar.gz", "has_sig": false, "md5_digest": "00debce5edcace2993f65a00512d3a73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12080, "upload_time": "2020-05-02T23:28:17", "upload_time_iso_8601": "2020-05-02T23:28:17.880988Z", "url": "https://files.pythonhosted.org/packages/7b/94/2bb0af62bcab1f8862fd5b7e63fd7416df06321480e749494cf1bfb41e64/mpris_server-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00debce5edcace2993f65a00512d3a73", "sha256": "f8d366fbac1099603a82dcd0b2f40da6ca7ade7ccdcaf8cecfa671aa4403fa4f"}, "downloads": -1, "filename": "mpris_server-0.1.4.tar.gz", "has_sig": false, "md5_digest": "00debce5edcace2993f65a00512d3a73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12080, "upload_time": "2020-05-02T23:28:17", "upload_time_iso_8601": "2020-05-02T23:28:17.880988Z", "url": "https://files.pythonhosted.org/packages/7b/94/2bb0af62bcab1f8862fd5b7e63fd7416df06321480e749494cf1bfb41e64/mpris_server-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:10 2020"}