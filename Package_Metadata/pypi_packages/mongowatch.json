{"info": {"author": "Russ Ferriday", "author_email": "russf@topia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: ZODB", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2"], "description": "===========\nMongo Watch\n===========\n\nMongoWatch provides an easy way to measure mongo database access\ncounts, and timeing, between certain points in a program.\n\nFirst let's access the database and get a db object\n\n >>> import pymongo\n >>> conn = pymongo.Connection('localhost', 27017, tz_aware=False)\n >>> db = conn[DBNAME]\n\nOur example collections relate to street life, traffic, and crowds\n\n >>> traffic = db.cars\n >>> crowd = db.people\n\nLet's create a vehicle to represent something already in a \ncollection\n\n >>> obj = traffic.insert({'car': 'red'})\n\nNow create a watcher track mongo profile entries created\nby actions on the selected database\n\n >>> from mongowatch.mongo import watcher\n >>> wa = watcher.Watcher(conn,[DBNAME])\n\nNow, let's add one item to traffic:\n\n >>> obj = traffic.insert({'truck':'blue'})\n\nAnd we'll add two people to the crowd:\n\n >>> obj = crowd.insert({'name':'billy'})\n >>> obj = crowd.insert({'name':'jane'})\n\nWhich resulted in the following actions being recorded in the watcher.\n\n >>> wa.dump()\n total ops:\n   inserts: 3\n summary:\n   database: mongowatch_test\n      cars\n        inserts: 1\n      people\n        inserts: 2\n details:\n   ns mongowatch_test.cars\n   op insert\n   ts 2011-12-13 08:27:05.496000\n   millis ...\n <BLANKLINE>\n   ns mongowatch_test.people\n   op insert\n   ts 2011-12-13 08:27:05.498000\n   millis ...\n <BLANKLINE>\n   ns mongowatch_test.people\n   op insert\n   ts 2011-12-13 08:27:05.498000\n   millis ...\n <BLANKLINE>\n\nLet's reset the counters\n\n >>> wa.reset()\n\nSo now do some more work\n\n >>> crowd.remove({})\n >>> traffic.remove({})\n >>> obj = crowd.insert({'name':'bonzo'})\n\nThis time we stop the watcher explicity\n >>> wa.stop()\n >>> wa.dump()\n total ops:\n   inserts: 1\n   removes: 2\n summary:\n   database: mongowatch_test\n      cars\n        removes: 1\n      people\n        inserts: 1\n        removes: 1\n details:\n   ns mongowatch_test.people\n   op remove\n   query {}\n   ts 2011-12-13 07:47:51.921000\n   millis 0\n <BLANKLINE>\n   ns mongowatch_test.cars\n   op remove\n   query {}\n   ts 2011-12-13 07:47:51.921000\n   millis 0\n <BLANKLINE>\n   ns mongowatch_test.people\n   op insert\n   ts 2011-12-13 07:47:51.921000\n   millis 0\n <BLANKLINE>\n\n\n >>> conn.disconnect()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "mongo testing", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "mongowatch", "package_url": "https://pypi.org/project/mongowatch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mongowatch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/mongowatch/0.1.2dev/", "requires_dist": null, "requires_python": null, "summary": "MongoDB traffic pattern watcher", "version": "0.1.2dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>MongoWatch provides an easy way to measure mongo database access\ncounts, and timeing, between certain points in a program.</p>\n<p>First let\u2019s access the database and get a db object</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import pymongo\n&gt;&gt;&gt; conn = pymongo.Connection('localhost', 27017, tz_aware=False)\n&gt;&gt;&gt; db = conn[DBNAME]\n</pre>\n</blockquote>\n<p>Our example collections relate to street life, traffic, and crowds</p>\n<blockquote>\n<pre>&gt;&gt;&gt; traffic = db.cars\n&gt;&gt;&gt; crowd = db.people\n</pre>\n</blockquote>\n<p>Let\u2019s create a vehicle to represent something already in a\ncollection</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = traffic.insert({'car': 'red'})\n</pre>\n</blockquote>\n<p>Now create a watcher track mongo profile entries created\nby actions on the selected database</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from mongowatch.mongo import watcher\n&gt;&gt;&gt; wa = watcher.Watcher(conn,[DBNAME])\n</pre>\n</blockquote>\n<p>Now, let\u2019s add one item to traffic:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = traffic.insert({'truck':'blue'})\n</pre>\n</blockquote>\n<p>And we\u2019ll add two people to the crowd:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; obj = crowd.insert({'name':'billy'})\n&gt;&gt;&gt; obj = crowd.insert({'name':'jane'})\n</pre>\n</blockquote>\n<p>Which resulted in the following actions being recorded in the watcher.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; wa.dump()\ntotal ops:\n  inserts: 3\nsummary:\n  database: mongowatch_test\n     cars\n       inserts: 1\n     people\n       inserts: 2\ndetails:\n  ns mongowatch_test.cars\n  op insert\n  ts 2011-12-13 08:27:05.496000\n  millis ...\n&lt;BLANKLINE&gt;\n  ns mongowatch_test.people\n  op insert\n  ts 2011-12-13 08:27:05.498000\n  millis ...\n&lt;BLANKLINE&gt;\n  ns mongowatch_test.people\n  op insert\n  ts 2011-12-13 08:27:05.498000\n  millis ...\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>Let\u2019s reset the counters</p>\n<blockquote>\n<pre>&gt;&gt;&gt; wa.reset()\n</pre>\n</blockquote>\n<p>So now do some more work</p>\n<blockquote>\n<pre>&gt;&gt;&gt; crowd.remove({})\n&gt;&gt;&gt; traffic.remove({})\n&gt;&gt;&gt; obj = crowd.insert({'name':'bonzo'})\n</pre>\n</blockquote>\n<dl>\n<dt>This time we stop the watcher explicity</dt>\n<dd><pre>&gt;&gt;&gt; wa.stop()\n&gt;&gt;&gt; wa.dump()\ntotal ops:\n  inserts: 1\n  removes: 2\nsummary:\n  database: mongowatch_test\n     cars\n       removes: 1\n     people\n       inserts: 1\n       removes: 1\ndetails:\n  ns mongowatch_test.people\n  op remove\n  query {}\n  ts 2011-12-13 07:47:51.921000\n  millis 0\n&lt;BLANKLINE&gt;\n  ns mongowatch_test.cars\n  op remove\n  query {}\n  ts 2011-12-13 07:47:51.921000\n  millis 0\n&lt;BLANKLINE&gt;\n  ns mongowatch_test.people\n  op insert\n  ts 2011-12-13 07:47:51.921000\n  millis 0\n&lt;BLANKLINE&gt;\n</pre>\n<pre>&gt;&gt;&gt; conn.disconnect()\n</pre>\n</dd>\n</dl>\n\n          </div>"}, "last_serial": 794962, "releases": {"0.1.0dev": [{"comment_text": "", "digests": {"md5": "82ea4dfc96e7b3749380bb481fb3851c", "sha256": "35f675d22e7b44fa526662759a272ad3eea2114fe9e4952f83e249eebb6ae978"}, "downloads": -1, "filename": "mongowatch-0.1.0dev.tar.gz", "has_sig": false, "md5_digest": "82ea4dfc96e7b3749380bb481fb3851c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3744, "upload_time": "2011-11-16T09:52:37", "upload_time_iso_8601": "2011-11-16T09:52:37.118803Z", "url": "https://files.pythonhosted.org/packages/f6/b2/31518a64d2016d1b56f25a937c952903190e7b1610eddb34a35d448bd118/mongowatch-0.1.0dev.tar.gz", "yanked": false}], "0.1.1dev": [{"comment_text": "", "digests": {"md5": "cd2d5da0a0b9d8fb4c96db1a09ebcb36", "sha256": "da127600f4b68d866ef560a2b941f3b12735beddfe42867e630d7b4901c6ab19"}, "downloads": -1, "filename": "mongowatch-0.1.1dev.tar.gz", "has_sig": false, "md5_digest": "cd2d5da0a0b9d8fb4c96db1a09ebcb36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3857, "upload_time": "2011-11-16T10:10:21", "upload_time_iso_8601": "2011-11-16T10:10:21.278732Z", "url": "https://files.pythonhosted.org/packages/4b/fc/2001ec7697ca1096a12e7ee31328c7c0acf3c17c395905d7f1fc3e5505e8/mongowatch-0.1.1dev.tar.gz", "yanked": false}], "0.1.2dev": [{"comment_text": "", "digests": {"md5": "92e956f51ead2f2a38d76643013bb382", "sha256": "5bdafd04cf9b618910ce255c89d1f71547bcb2c56fe88979e864c7164c179000"}, "downloads": -1, "filename": "mongowatch-0.1.2dev.tar.gz", "has_sig": false, "md5_digest": "92e956f51ead2f2a38d76643013bb382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4580, "upload_time": "2011-12-13T10:03:39", "upload_time_iso_8601": "2011-12-13T10:03:39.954075Z", "url": "https://files.pythonhosted.org/packages/ef/17/41c2a65b4b8e61e813408430b6eb1c943211835012a934959721c2380cbb/mongowatch-0.1.2dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92e956f51ead2f2a38d76643013bb382", "sha256": "5bdafd04cf9b618910ce255c89d1f71547bcb2c56fe88979e864c7164c179000"}, "downloads": -1, "filename": "mongowatch-0.1.2dev.tar.gz", "has_sig": false, "md5_digest": "92e956f51ead2f2a38d76643013bb382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4580, "upload_time": "2011-12-13T10:03:39", "upload_time_iso_8601": "2011-12-13T10:03:39.954075Z", "url": "https://files.pythonhosted.org/packages/ef/17/41c2a65b4b8e61e813408430b6eb1c943211835012a934959721c2380cbb/mongowatch-0.1.2dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:12 2020"}