{"info": {"author": "Godefroid Chappelle", "author_email": "gotcha@bubblenet.be", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Plone", "Framework :: Zope2", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python", "Topic :: Software Development"], "description": "CompositePack is a product that allows the Plone Manager to build composite\npages by manually aggregating archetype content from his site.\n\nComposition of content is made through a pseudo WYSIWYG user interface : the\ndesign view.  A composite page has a layout which defines its structure.\nComposite elements are displayed through viewlets. \n\nBoth layouts and viewlets are acquired from the skin, which implies they are\ncustomizable.\n\nLayouts and viewlets are registered through the composite_tool in ZMI (see\nbelow how to register them).\n\nPlone versions supported\n========================\n\n    3.3\n\nProducts required \n================= \n\nCompositePage 1.0\n    http://pypi.python.org/pypi/Products.CompositePage\n\n\nDesign view \n=========== \n\nThe design view supports Firefox, Mozilla and IE6.\nThe design view allows the user to manipulate the composite elements : add,\nmove, delete or change their properties.\n\nThe design view allows you to add pieces of content to the slots defined in the\nlayout. In a slot, each location where a composite element can be added\ndisplays a menu labeled 'add item'. When you click it, you get options :\n'Content', 'Title' and 'HTML'. You choose 'Content' to select existing content\nfrom your Plone site. You choose 'Title' or 'HTML' to add decorating content\nspecific to the instance (see details below). \n\nWhen choosing 'Content', you get a popup window wherein you can select the\npiece of content that you want to add to this slot.  This window is a kupu\ndrawer. It only shows instance of \"composable\" portal types (see below for\nsetting up composables).  You browse your site until you have found the piece\nof content you want to display.  When you click the 'ok' button, the composite\nelement is added to the composite page.  It is displayed through its default\nviewlet.  Another viewlet can be selected later (see below).\n\nOnce added, the composite element can be moved by drag and drop from one slot\nto another : drag and drop the icon associated with the composite element to\none of the 'add item' bars.\n\nEach composite element has its own 'edit item' menu. It has the following\noptions : 'Edit', 'Delete' and 'Select viewlet'.\n\n'Edit' sends you to the edit screen of the content pointed at by the element.\n\n'Delete' removes the composite element (not the associated content).\n\n'Select viewlet' lists the available viewlets registered for the content type\nof the composite element. Choose one of them to get your content displayed\ndifferently.\n\nLayouts \n=======\n\nA layout is a template that defines the display view. Similar to the template\nof a normal view, a layout includes structural HTML and data from the composite\ninstance. It also includes slots. Slots define the places where content can be\nadded. The slots are named.\n\nLayouts needs to be registered for composite content types. This happens through\nthe composite tool. \n\nAt instantiation time, a layout is setup on a composite instance : the layout\nregistered as default for the content type.\n\nAnother layout can be chosen later if needed. This is done through the layout\nmenu of the design view. The menu proposes the layouts registered for the\ncontent type.\n\nWhen changing the layout, if the old and new layouts share slot names, the\ncontent placed in a slot of a given name in the old layout will be shown in the\ncorresponding slot of the new layout.  Content items placed in slots of the old\nlayout that do not have corresponding names in the new layout are hidden, not\ndeleted.  Switching back to a layout will show items in their original\nlocation. Hidden slots and composite elements (inaccessible through design\nview) can be deleted through ZMI.\n\n\nViewlets\n========\n\nViewlets are templates (python scripts) that produce HTML excerpts.\nCompositePack does what is needed to get a normal development situation : the\n'here' (or 'context') variables are bound correctly to the content item that is\ndisplayed through the viewlet.\n\nViewlets are mapped to content types : this allows to define different viewlets\nfor different types (see below how to register viewlets). For instance, image\ncontent types have very specific needs different from the needs of most textual. \n\n\nTitles\n======\n\nTitles are special composite elements which allows you to add some text when\ncomposing your page.\n\nIn the design view, select 'add item' then 'Title'.  You get a popup window\nwith a prompt for the given title.  This adds a new composite element\ndisplaying the title through its registered viewlet.\n\nIf you need to modify the title, access its data through the 'Edit' option of\nthe 'edit item' menu.\n\nHTML Fragments\n==============\n\nFragments are special composite elements which allow you to create\narbitrary fragments of HTML when composing your page.\n\nIn the design view, select 'add item' then 'HTML'. This will insert an empty\nfragment. Use the 'Edit' option of the 'edit item' menu to edit the contents of\nthe fragment.\n\nSetting up composables\n======================\n\n- Go to the \"composite_tool\" in Plone root (i.e. in \\manage),\n\n- Go to the \"Composables\" tab,\n\n- Select the content type you want to add in the Types list (types by control\n  clicking),\n\n- Click Select button,\n\n- Refresh your browser cache before to get the new javascript needed by the\n  kupu drawers.\n\nRegistering a viewlet\n=====================\n\n- Create a page template (or python script) that returns an html excerpt,\n\n- Go to the \"composite_tool\" in Plone root (i.e. in \\manage),\n\n- Inside the composite tool, go to the \"viewlets\" folder and add a\n  CompositePack Viewlet using the button at the top.\n\n    The CompositePack Viewlet has three fields :\n\n    * \"Short Name\" - (Id) as usual,\n    * \"Title\" which is the string that will be displayed under the 'select \n       viewlet' section of the 'edit item' menu,\n    * \"Skin Method\" - the name of the Page Template file created earlier.\n            \n    Now the viewlet is registered, next it needs to be mapped to the\n    content types it should be used for.\n\n- On the viewlet, go to 'Composables' tab\n    \n    (With some buggy versions of archetypes, you'll need to go through the viewlets\n    folder after the viewlet has been added.) \n\n- If the viewlet is to be used with all content types, select \"(Default\n  Setup)\".\n\n- If the viewlet is to be used for specific types only, select those\n  in the types list box.\n\n- Click the Select button. \n\nSetting up composites\n======================\n\n- Go to the \"composite_tool\" in Plone root (i.e. in \\manage),\n\n- Go to the \"Composites\" tab,\n\n- Select the type you want to add in the Types list (types by control clicking),\n\n- Click Select button,\n\nLayouts can now be mapped for the type you registered.\n\nRegistering a layout\n====================\n\n- Create a page template which uses TALES slot expression (look at one of the\n  existing layouts to understand it). The template should be based on plone\n  main_template.\n\n- Go to the \"composite_tool\" in Plone root (i.e. in \\manage),\n\n- Inside the composite tool, go into the \"layouts\" folder and add a CompositePack Layout using the button at the top.\n\n    The CompositePack Layout has three fields :\n\n    * \"Short Name\" (Id) as usual,\n    * \"Title\" which is the string that will be displayed in the dropdown widget\n      for layout selection,\n    * \"Skin Method\" - the name of the Page Template file created earlier.\n            \n- On the viewlet, go to 'Composites' tab\n    \n    (With some buggy versions of archetypes, you'll need to go through the viewlets\n    folder after the viewlet has been added.) \n\n- Choose among the composites in the types list box which types the layout\n  should be used with.\n\n- Click the Select button.\n\nGenericSetup extension profile \n===============================\n\nPlone uses GenericSetup for site configuration. To learn more about GenericSetup\nplease read the following documentation:\n\n- http://plone.org/documentation/tutorial/understanding-and-using-genericsetup-in-plone\n\nThis means CompositePack can be configure completely throught xml configuration files.\nIn the folder profiles/default you will find the base profile for the default\nconfiguration of the compositetool.\n\n- ``toolset.xml`` : Adds the composite_tool to the plone site when running all import\n  steps.\n\n- ``types.xml`` : Adds the content types that come with CompositePack\n\n- ``types/*.xml`` : A config file for each type\n\n- ``import_steps.xml`` : This registers the import method \n\n- ``export_steps.xml`` : This registers the export method.\n\n- ``compositetool.xml`` : This is the xml representation of all viewlets, layouts,\n  composables and composites.\n\nCustomisation policy script\n===========================\n\nAn alternative to customising the product through the web with the composite\ntool is to write a script to perform the customisations automatically. This\nensures that your customisations are not lost if you reinstall or upgrade\nCompositePack.\n\nIf there is a script called 'compositepack-customisation-policy.py' present in\nany skin folder when CompositePack is installed, it will be run automatically\nas part of the installation. A sample script called\n'sample-compositepack-customisation-policy.py' is supplied in the compositepack\nskin folder. You may rename this and customise it to match your system.\n\n------------------------------------------------------------\n\n1.2a1 (2011-04-30)\n------------------\n\n- Fixed adding and renaming of CompositePack Viewlets and Layouts\n  in the composite_tool. [hathawsh]\n\n- Fixed code that triggered deprecation warnings. [tseaver]\n\n- Rearranged imports in packcomposite.py. [tseaver]\n\n- Eggified. [hathawsh]\n\n- Made compatible with Plone 3 and CompositePage from svn.zope.org.\n  Plone 3+ is now required.\n  [hathawsh]\n\n- At the end of _initObjects update the kupu library, so composables\n  are registered correctly there.\n  [jladage,maurits]\n\n- Added the topic view to the profile, since that was already expected\n  in the tests. All tests are passing again.\n  [jladage]\n\n- Bugfix roundtrip import/export didn't work correctly because of\n  the use of different filenames. The export creates a composite_tool.xml\n  and the import expected compositetool.xml. Thanks to Tres Seaver for\n  reporting this bug and providing a patch. A deprecation warning will be\n  logged in case compositetool.xml is still used in existing profiles\n  [jladage]\n\n- Fix bug in reinstall which removed the composables from kupu.\n  [ree]\n\n- Added compopack_template_azax layer to the skins which gets added in the\n  correct order, in case azax is installed.\n  [jslob]\n\n- Removed the ++resource++ code from the layout templates which were generating\n  at least 4 404's per request.\n  [jladage]\n\n- Added ResourceRegistry config for all js and css. Moved the skins files\n  to a few skindirs as done in the azax-ree branch. And off course add\n  GenericSetup profiles for the js and css.\n  [jladage]\n\n- Fixed the renaming issue by inheriting from BaseFolder and implement the\n  INonStructuralFolder interface.\n  [jladage and jorisslob]\n\n- Added GenericSetup base profile for configuring the composite_tool. You can\n  now import and export the entire configuration in XML.\n  [jladage and jorisslob]\n\n- changed tool.py to handle multiple users messing with the same \n  navigation page. Some sanity checks were added and neat error messages\n  will be sent to users when things go wrong\n  [jslob and maurits]\n\n- fix css to do better layer handling (position: relative was elements to\n  be rendered over the plone drop down menus)\n  [jslob and mteulingen]\n\n- Play nice with Plone 2.1 by adding navigation page to the list of default\n  page types in site_properties.\n  [jladage]\n\n- set better layout and viewlet as default for navigation page\n  [gotcha]\n\n- styling and i18n\n  [gotcha]\n\n- setup portal factory and id calculated from title for Plone 2.1\n  [gotcha]\n \n- register cleanIndexes setup widget in portal_migration to remove wrongly\n  indexed software.\n  [gotcha]\n\n- fix indexing : software elements like layout registry, viewlet registry,\n  layouts, viewlets, composite container and elements are not indexed\n  anymore.\n  [gotcha]\n\n- fix SearchableText at creation time\n  [gotcha]\n\n- fix package so that it can load when ATContentTypes is not installed\n  [gotcha]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/Products.CompositePack", "keywords": "web application server zope zope2 cmf plone", "license": "ZPL 2.1 (http://www.zope.org/Resources/License/ZPL-2.1)", "maintainer": null, "maintainer_email": null, "name": "Products.CompositePack", "package_url": "https://pypi.org/project/Products.CompositePack/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Products.CompositePack/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/Products.CompositePack"}, "release_url": "https://pypi.org/project/Products.CompositePack/1.2a1/", "requires_dist": null, "requires_python": null, "summary": "CompositePack product", "version": "1.2a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>CompositePack is a product that allows the Plone Manager to build composite\npages by manually aggregating archetype content from his site.</p>\n<p>Composition of content is made through a pseudo WYSIWYG user interface : the\ndesign view.  A composite page has a layout which defines its structure.\nComposite elements are displayed through viewlets.</p>\n<p>Both layouts and viewlets are acquired from the skin, which implies they are\ncustomizable.</p>\n<p>Layouts and viewlets are registered through the composite_tool in ZMI (see\nbelow how to register them).</p>\n<div id=\"plone-versions-supported\">\n<h2>Plone versions supported</h2>\n<blockquote>\n3.3</blockquote>\n</div>\n<div id=\"products-required\">\n<h2>Products required</h2>\n<dl>\n<dt>CompositePage 1.0</dt>\n<dd><a href=\"http://pypi.python.org/pypi/Products.CompositePage\" rel=\"nofollow\">http://pypi.python.org/pypi/Products.CompositePage</a></dd>\n</dl>\n</div>\n<div id=\"design-view\">\n<h2>Design view</h2>\n<p>The design view supports Firefox, Mozilla and IE6.\nThe design view allows the user to manipulate the composite elements : add,\nmove, delete or change their properties.</p>\n<p>The design view allows you to add pieces of content to the slots defined in the\nlayout. In a slot, each location where a composite element can be added\ndisplays a menu labeled \u2018add item\u2019. When you click it, you get options :\n\u2018Content\u2019, \u2018Title\u2019 and \u2018HTML\u2019. You choose \u2018Content\u2019 to select existing content\nfrom your Plone site. You choose \u2018Title\u2019 or \u2018HTML\u2019 to add decorating content\nspecific to the instance (see details below).</p>\n<p>When choosing \u2018Content\u2019, you get a popup window wherein you can select the\npiece of content that you want to add to this slot.  This window is a kupu\ndrawer. It only shows instance of \u201ccomposable\u201d portal types (see below for\nsetting up composables).  You browse your site until you have found the piece\nof content you want to display.  When you click the \u2018ok\u2019 button, the composite\nelement is added to the composite page.  It is displayed through its default\nviewlet.  Another viewlet can be selected later (see below).</p>\n<p>Once added, the composite element can be moved by drag and drop from one slot\nto another : drag and drop the icon associated with the composite element to\none of the \u2018add item\u2019 bars.</p>\n<p>Each composite element has its own \u2018edit item\u2019 menu. It has the following\noptions : \u2018Edit\u2019, \u2018Delete\u2019 and \u2018Select viewlet\u2019.</p>\n<p>\u2018Edit\u2019 sends you to the edit screen of the content pointed at by the element.</p>\n<p>\u2018Delete\u2019 removes the composite element (not the associated content).</p>\n<p>\u2018Select viewlet\u2019 lists the available viewlets registered for the content type\nof the composite element. Choose one of them to get your content displayed\ndifferently.</p>\n</div>\n<div id=\"layouts\">\n<h2>Layouts</h2>\n<p>A layout is a template that defines the display view. Similar to the template\nof a normal view, a layout includes structural HTML and data from the composite\ninstance. It also includes slots. Slots define the places where content can be\nadded. The slots are named.</p>\n<p>Layouts needs to be registered for composite content types. This happens through\nthe composite tool.</p>\n<p>At instantiation time, a layout is setup on a composite instance : the layout\nregistered as default for the content type.</p>\n<p>Another layout can be chosen later if needed. This is done through the layout\nmenu of the design view. The menu proposes the layouts registered for the\ncontent type.</p>\n<p>When changing the layout, if the old and new layouts share slot names, the\ncontent placed in a slot of a given name in the old layout will be shown in the\ncorresponding slot of the new layout.  Content items placed in slots of the old\nlayout that do not have corresponding names in the new layout are hidden, not\ndeleted.  Switching back to a layout will show items in their original\nlocation. Hidden slots and composite elements (inaccessible through design\nview) can be deleted through ZMI.</p>\n</div>\n<div id=\"viewlets\">\n<h2>Viewlets</h2>\n<p>Viewlets are templates (python scripts) that produce HTML excerpts.\nCompositePack does what is needed to get a normal development situation : the\n\u2018here\u2019 (or \u2018context\u2019) variables are bound correctly to the content item that is\ndisplayed through the viewlet.</p>\n<p>Viewlets are mapped to content types : this allows to define different viewlets\nfor different types (see below how to register viewlets). For instance, image\ncontent types have very specific needs different from the needs of most textual.</p>\n</div>\n<div id=\"titles\">\n<h2>Titles</h2>\n<p>Titles are special composite elements which allows you to add some text when\ncomposing your page.</p>\n<p>In the design view, select \u2018add item\u2019 then \u2018Title\u2019.  You get a popup window\nwith a prompt for the given title.  This adds a new composite element\ndisplaying the title through its registered viewlet.</p>\n<p>If you need to modify the title, access its data through the \u2018Edit\u2019 option of\nthe \u2018edit item\u2019 menu.</p>\n</div>\n<div id=\"html-fragments\">\n<h2>HTML Fragments</h2>\n<p>Fragments are special composite elements which allow you to create\narbitrary fragments of HTML when composing your page.</p>\n<p>In the design view, select \u2018add item\u2019 then \u2018HTML\u2019. This will insert an empty\nfragment. Use the \u2018Edit\u2019 option of the \u2018edit item\u2019 menu to edit the contents of\nthe fragment.</p>\n</div>\n<div id=\"setting-up-composables\">\n<h2>Setting up composables</h2>\n<ul>\n<li>Go to the \u201ccomposite_tool\u201d in Plone root (i.e. in manage),</li>\n<li>Go to the \u201cComposables\u201d tab,</li>\n<li>Select the content type you want to add in the Types list (types by control\nclicking),</li>\n<li>Click Select button,</li>\n<li>Refresh your browser cache before to get the new javascript needed by the\nkupu drawers.</li>\n</ul>\n</div>\n<div id=\"registering-a-viewlet\">\n<h2>Registering a viewlet</h2>\n<ul>\n<li><p>Create a page template (or python script) that returns an html excerpt,</p>\n</li>\n<li><p>Go to the \u201ccomposite_tool\u201d in Plone root (i.e. in manage),</p>\n</li>\n<li><p>Inside the composite tool, go to the \u201cviewlets\u201d folder and add a\nCompositePack Viewlet using the button at the top.</p>\n<blockquote>\n<p>The CompositePack Viewlet has three fields :</p>\n<ul>\n<li>\u201cShort Name\u201d - (Id) as usual,</li>\n<li><dl>\n<dt>\u201cTitle\u201d which is the string that will be displayed under the \u2018select</dt>\n<dd>viewlet\u2019 section of the \u2018edit item\u2019 menu,</dd>\n</dl>\n</li>\n<li>\u201cSkin Method\u201d - the name of the Page Template file created earlier.</li>\n</ul>\n<p>Now the viewlet is registered, next it needs to be mapped to the\ncontent types it should be used for.</p>\n</blockquote>\n</li>\n<li><p>On the viewlet, go to \u2018Composables\u2019 tab</p>\n<blockquote>\n<p>(With some buggy versions of archetypes, you\u2019ll need to go through the viewlets\nfolder after the viewlet has been added.)</p>\n</blockquote>\n</li>\n<li><p>If the viewlet is to be used with all content types, select \u201c(Default\nSetup)\u201d.</p>\n</li>\n<li><p>If the viewlet is to be used for specific types only, select those\nin the types list box.</p>\n</li>\n<li><p>Click the Select button.</p>\n</li>\n</ul>\n</div>\n<div id=\"setting-up-composites\">\n<h2>Setting up composites</h2>\n<ul>\n<li>Go to the \u201ccomposite_tool\u201d in Plone root (i.e. in manage),</li>\n<li>Go to the \u201cComposites\u201d tab,</li>\n<li>Select the type you want to add in the Types list (types by control clicking),</li>\n<li>Click Select button,</li>\n</ul>\n<p>Layouts can now be mapped for the type you registered.</p>\n</div>\n<div id=\"registering-a-layout\">\n<h2>Registering a layout</h2>\n<ul>\n<li><p>Create a page template which uses TALES slot expression (look at one of the\nexisting layouts to understand it). The template should be based on plone\nmain_template.</p>\n</li>\n<li><p>Go to the \u201ccomposite_tool\u201d in Plone root (i.e. in manage),</p>\n</li>\n<li><p>Inside the composite tool, go into the \u201clayouts\u201d folder and add a CompositePack Layout using the button at the top.</p>\n<blockquote>\n<p>The CompositePack Layout has three fields :</p>\n<ul>\n<li>\u201cShort Name\u201d (Id) as usual,</li>\n<li>\u201cTitle\u201d which is the string that will be displayed in the dropdown widget\nfor layout selection,</li>\n<li>\u201cSkin Method\u201d - the name of the Page Template file created earlier.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>On the viewlet, go to \u2018Composites\u2019 tab</p>\n<blockquote>\n<p>(With some buggy versions of archetypes, you\u2019ll need to go through the viewlets\nfolder after the viewlet has been added.)</p>\n</blockquote>\n</li>\n<li><p>Choose among the composites in the types list box which types the layout\nshould be used with.</p>\n</li>\n<li><p>Click the Select button.</p>\n</li>\n</ul>\n</div>\n<div id=\"genericsetup-extension-profile\">\n<h2>GenericSetup extension profile</h2>\n<p>Plone uses GenericSetup for site configuration. To learn more about GenericSetup\nplease read the following documentation:</p>\n<ul>\n<li><a href=\"http://plone.org/documentation/tutorial/understanding-and-using-genericsetup-in-plone\" rel=\"nofollow\">http://plone.org/documentation/tutorial/understanding-and-using-genericsetup-in-plone</a></li>\n</ul>\n<p>This means CompositePack can be configure completely throught xml configuration files.\nIn the folder profiles/default you will find the base profile for the default\nconfiguration of the compositetool.</p>\n<ul>\n<li><tt>toolset.xml</tt> : Adds the composite_tool to the plone site when running all import\nsteps.</li>\n<li><tt>types.xml</tt> : Adds the content types that come with CompositePack</li>\n<li><tt><span class=\"pre\">types/*.xml</span></tt> : A config file for each type</li>\n<li><tt>import_steps.xml</tt> : This registers the import method</li>\n<li><tt>export_steps.xml</tt> : This registers the export method.</li>\n<li><tt>compositetool.xml</tt> : This is the xml representation of all viewlets, layouts,\ncomposables and composites.</li>\n</ul>\n</div>\n<div id=\"customisation-policy-script\">\n<h2>Customisation policy script</h2>\n<p>An alternative to customising the product through the web with the composite\ntool is to write a script to perform the customisations automatically. This\nensures that your customisations are not lost if you reinstall or upgrade\nCompositePack.</p>\n<p>If there is a script called \u2018compositepack-customisation-policy.py\u2019 present in\nany skin folder when CompositePack is installed, it will be run automatically\nas part of the installation. A sample script called\n\u2018sample-compositepack-customisation-policy.py\u2019 is supplied in the compositepack\nskin folder. You may rename this and customise it to match your system.</p>\n<hr class=\"docutils\">\n<div id=\"a1-2011-04-30\">\n<h3>1.2a1 (2011-04-30)</h3>\n<ul>\n<li>Fixed adding and renaming of CompositePack Viewlets and Layouts\nin the composite_tool. [hathawsh]</li>\n<li>Fixed code that triggered deprecation warnings. [tseaver]</li>\n<li>Rearranged imports in packcomposite.py. [tseaver]</li>\n<li>Eggified. [hathawsh]</li>\n<li>Made compatible with Plone 3 and CompositePage from svn.zope.org.\nPlone 3+ is now required.\n[hathawsh]</li>\n<li>At the end of _initObjects update the kupu library, so composables\nare registered correctly there.\n[jladage,maurits]</li>\n<li>Added the topic view to the profile, since that was already expected\nin the tests. All tests are passing again.\n[jladage]</li>\n<li>Bugfix roundtrip import/export didn\u2019t work correctly because of\nthe use of different filenames. The export creates a composite_tool.xml\nand the import expected compositetool.xml. Thanks to Tres Seaver for\nreporting this bug and providing a patch. A deprecation warning will be\nlogged in case compositetool.xml is still used in existing profiles\n[jladage]</li>\n<li>Fix bug in reinstall which removed the composables from kupu.\n[ree]</li>\n<li>Added compopack_template_azax layer to the skins which gets added in the\ncorrect order, in case azax is installed.\n[jslob]</li>\n<li>Removed the ++resource++ code from the layout templates which were generating\nat least 4 404\u2019s per request.\n[jladage]</li>\n<li>Added ResourceRegistry config for all js and css. Moved the skins files\nto a few skindirs as done in the azax-ree branch. And off course add\nGenericSetup profiles for the js and css.\n[jladage]</li>\n<li>Fixed the renaming issue by inheriting from BaseFolder and implement the\nINonStructuralFolder interface.\n[jladage and jorisslob]</li>\n<li>Added GenericSetup base profile for configuring the composite_tool. You can\nnow import and export the entire configuration in XML.\n[jladage and jorisslob]</li>\n<li>changed tool.py to handle multiple users messing with the same\nnavigation page. Some sanity checks were added and neat error messages\nwill be sent to users when things go wrong\n[jslob and maurits]</li>\n<li>fix css to do better layer handling (position: relative was elements to\nbe rendered over the plone drop down menus)\n[jslob and mteulingen]</li>\n<li>Play nice with Plone 2.1 by adding navigation page to the list of default\npage types in site_properties.\n[jladage]</li>\n<li>set better layout and viewlet as default for navigation page\n[gotcha]</li>\n<li>styling and i18n\n[gotcha]</li>\n<li>setup portal factory and id calculated from title for Plone 2.1\n[gotcha]</li>\n<li>register cleanIndexes setup widget in portal_migration to remove wrongly\nindexed software.\n[gotcha]</li>\n<li>fix indexing : software elements like layout registry, viewlet registry,\nlayouts, viewlets, composite container and elements are not indexed\nanymore.\n[gotcha]</li>\n<li>fix SearchableText at creation time\n[gotcha]</li>\n<li>fix package so that it can load when ATContentTypes is not installed\n[gotcha]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 803644, "releases": {"1.2a1": [{"comment_text": "", "digests": {"md5": "87972165ecba6455f59c893a403d2be2", "sha256": "2aa8be35f54cfee1265378e43ddecadb2d49b38818c71f22aafb9b8e57c5d17e"}, "downloads": -1, "filename": "Products.CompositePack-1.2a1.tar.gz", "has_sig": false, "md5_digest": "87972165ecba6455f59c893a403d2be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85124, "upload_time": "2011-05-01T05:58:51", "upload_time_iso_8601": "2011-05-01T05:58:51.783824Z", "url": "https://files.pythonhosted.org/packages/7f/9a/5ebe0c590a0658bac662325912e3cb91381e786a5be2c31781e891e988bb/Products.CompositePack-1.2a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87972165ecba6455f59c893a403d2be2", "sha256": "2aa8be35f54cfee1265378e43ddecadb2d49b38818c71f22aafb9b8e57c5d17e"}, "downloads": -1, "filename": "Products.CompositePack-1.2a1.tar.gz", "has_sig": false, "md5_digest": "87972165ecba6455f59c893a403d2be2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85124, "upload_time": "2011-05-01T05:58:51", "upload_time_iso_8601": "2011-05-01T05:58:51.783824Z", "url": "https://files.pythonhosted.org/packages/7f/9a/5ebe0c590a0658bac662325912e3cb91381e786a5be2c31781e891e988bb/Products.CompositePack-1.2a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:26 2020"}