{"info": {"author": "MEADez", "author_email": "m3adez@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "===================================================\nBTC Action Set\n===================================================\n\nFeatures for managing template elements depending on the project role and permission system.\n\nDetailed documentation is in the \"docs\" directory.\n\nQuick start\n-----------\n\n1. Add \"action_set\" to your INSTALLED_APPS setting like this::\n\n      INSTALLED_APPS = (\n          ...\n          'action_set',\n      )\n\n2. `ActionSet`. Prepare base action-set, for example we'll use built-in `ActionSetWithPermissionCheck`::\n\n    class BaseActionSet(ActionSetWithPermissionCheck):\n\n        protect_css_class: str = 'protected-element'\n        elements_permissions = {\n            'action_1': ['change_status'],  # - for search in user permissions\n            'action_2': ['edit']\n        }\n\n        def get_user_permissions(self) -> list:\n            return User.objects.filter(pk=self.request.user.pk).values_list('user_roles__permissions__name', flat=True)\n\n        def check_permissions(self) -> None:\n            if not self.request.user.is_superuser:\n                return super().check_permissions()\n\n3. Write custom action-set::\n\n    class MyActionSet(BaseActionSet):\n\n        template = 'action_set/my_action_set.html'\n\n        action_1 = ActionButton(\n            'Action 1', css_classes=['js-post_content_btn'],\n            html_params={\n                'type': 'button',\n                'data-url': reverse('app:action_1'),\n            }\n        )\n        action_2 = ActionButton(\n            'Action 2', css_classes=['js-load_content_btn'],\n            html_params={\n                'type': 'button'\n            }\n        )\n\n        def __init__(self, instance, *args, **kwargs)\n            self.instance = instance  # type: MyModel\n            super().__init__(*args, **kwargs)\n            self.actions['action_2'].html_params.update({'data-url': reverse('app:action_2', self.instance.pk)})\n\n4. Write view, use `ActionSetMixinView` to construct view::\n\n    class MyViewWithActionSet(ActionSetMixinView, TemplateView):\n        ...\n        template_name = 'my_view_template.html'\n        action_set_class = MyActionSet\n        ...\n\n        def get_action_set_kwargs(self, **kwargs) -> dict:\n            return super().get_action_set_kwargs(instance=get_object_or_404(MyModel, pk=self.kwargs['pk']), **kwargs)\n\n5. Prepare template::\n\n    <!-- action_set/my_action_set.html -->\n    ...\n    <div class=\"action-set action-set__my-action-set\">\n        <div class=\"action-set__info\">\n            <i class=\"material-icons\">landscape</i>\n            <span>Action Set Test</span>\n        </div>\n        <div class=\"action-set__toolbar\">\n            {% for action in action_set %}\n                {{ action }}\n            {% endfor %}\n        </div>\n    </div>\n    ...\n\n6. In the template of the view call `render` method::\n\n    <!-- my_view_template.html -->\n    ...\n    <div>{{ action_set.render }}</div>\n    ...\n\n7. `ActionSetGroup`. Setup group and instantiate action-sets::\n\n    class CustomActionSetGroup(ActionSetGroup):\n\n        action_set_1 = MyActionSet1\n        action_set_2 = MyActionSet2\n\n8. Use `ActionSetGroupMixinView` to construct custom mixin and view like we did it with `ActionSetMixinView`.\n   Next setup is same as for the `ActionSet`::\n\n    class MyView(CustomActionSetGroupMixinView, TemplateView):\n\n        action_set_group_class = CustomActionSetGroup\n        template_name = 'my_awesome_page.html'\n\n9. In template::\n\n    ...\n    <div>\n        {{ action_set_group.action_set_1.render }}\n    </div>\n    <div>\n        {{ action_set_group.action_set_2.render }}\n    </div>\n    ...\n\n10 `ActionSetMenuMixin`. You can building menus by using `ActionSetMenuMixin` (automatic tabs highlight support).\nNote: prepare template as was shown for the simple ActionSet::\n\n    class MyDetailsMenu(ActionSetMenuMixin, ActionSet or use ActionSetWithPermissionCheck):\n\n        url_attribute_name: str = 'data-url'       # attribute for comparing with current request.path\n        activate_class: str = 'active'             # class for active button\n        template = 'action_set/details_menu.html'\n\n        menu_tab_1 = ActionButton(\n            'TAB1', css_classes=['js-menu-btn'],\n            html_params={\n                'type': 'button',\n                'data-container': '.js-my_content',\n                'data-url': reverse_lazy('app:tab_1')\n            }\n        )\n        menu_tab_2 = ActionButton(\n            'TAB2', css_classes=['js-menu-btn'],\n            html_params={\n                'type': 'button',\n                'data-container': '.js-my_content',\n                'data-url': reverse_lazy('app:tab_2')\n            }\n        )\n        # ... etc.\n\n11 `BreadcrumbsSet`. You can use this Action Set for building breadcrumbs. Prepare custom `BreadcrumbsSet`::\n\n    class MyBreadcrumbsSet(BreadcrumbsSet):\n\n        template = 'my_breadcrumbs.html'\n        active_crumb_css_class = 'active-breadcrumb'     # for highlight\n\n        crumb1 = ActionButton(\n            'Crumb1',\n            html_params={\n                'data-url': reverse_lazy('app:tab1'),\n                'data-container': '.js-dispatcher-content'\n            }\n        )\n        crumb2 = ActionButton(\n            'Crumb2',\n            html_params={\n                'data-url': reverse_lazy('app:tab2'),\n                'data-container': '.js-dispatcher-content'\n            }\n        )\n        # ... etc.\n\n12 Prepare yor view for showing breadcrumbs - use `BreadcrumbsMixinView`::\n\n    class MyView(BreadcrumbsMixinView, TemplateView):\n\n        breadcrumbs_set_class = MyBreadcrumbsSet\n        template_name = 'my_awesome_page.html'\n\n        breadcrumbs_set = ['crumb1', '*crumb2']  # use '*' symbol for showing active breadcrumb.\n\n\n13 Prepare template::\n\n    <!-- my_breadcrumbs.html -->\n\n    {% load dev_tools %}\n\n    <div class=\"action-set action-set__breadcrumbs\">\n        {% for action in action_set %}\n            {{ action|tweak_parameter:'class: mdl-button' }}\n            {% if not forloop.last %}\n                <span class=\"breadcrumbs-separator\">></span>\n            {% endif %}\n        {% endfor %}\n    </div>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MEADez/btc-action-set", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "btc-action-set", "package_url": "https://pypi.org/project/btc-action-set/", "platform": "", "project_url": "https://pypi.org/project/btc-action-set/", "project_urls": {"Homepage": "https://github.com/MEADez/btc-action-set"}, "release_url": "https://pypi.org/project/btc-action-set/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Features for managing template elements depending on the project role and permission system.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Features for managing template elements depending on the project role and permission system.</p>\n<p>Detailed documentation is in the \u201cdocs\u201d directory.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Add \u201caction_set\u201d to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'action_set',\n)\n</pre>\n</li>\n<li><p><cite>ActionSet</cite>. Prepare base action-set, for example we\u2019ll use built-in <cite>ActionSetWithPermissionCheck</cite>:</p>\n<pre>class BaseActionSet(ActionSetWithPermissionCheck):\n\n    protect_css_class: str = 'protected-element'\n    elements_permissions = {\n        'action_1': ['change_status'],  # - for search in user permissions\n        'action_2': ['edit']\n    }\n\n    def get_user_permissions(self) -&gt; list:\n        return User.objects.filter(pk=self.request.user.pk).values_list('user_roles__permissions__name', flat=True)\n\n    def check_permissions(self) -&gt; None:\n        if not self.request.user.is_superuser:\n            return super().check_permissions()\n</pre>\n</li>\n<li><p>Write custom action-set:</p>\n<pre>class MyActionSet(BaseActionSet):\n\n    template = 'action_set/my_action_set.html'\n\n    action_1 = ActionButton(\n        'Action 1', css_classes=['js-post_content_btn'],\n        html_params={\n            'type': 'button',\n            'data-url': reverse('app:action_1'),\n        }\n    )\n    action_2 = ActionButton(\n        'Action 2', css_classes=['js-load_content_btn'],\n        html_params={\n            'type': 'button'\n        }\n    )\n\n    def __init__(self, instance, *args, **kwargs)\n        self.instance = instance  # type: MyModel\n        super().__init__(*args, **kwargs)\n        self.actions['action_2'].html_params.update({'data-url': reverse('app:action_2', self.instance.pk)})\n</pre>\n</li>\n<li><p>Write view, use <cite>ActionSetMixinView</cite> to construct view:</p>\n<pre>class MyViewWithActionSet(ActionSetMixinView, TemplateView):\n    ...\n    template_name = 'my_view_template.html'\n    action_set_class = MyActionSet\n    ...\n\n    def get_action_set_kwargs(self, **kwargs) -&gt; dict:\n        return super().get_action_set_kwargs(instance=get_object_or_404(MyModel, pk=self.kwargs['pk']), **kwargs)\n</pre>\n</li>\n<li><p>Prepare template:</p>\n<pre>&lt;!-- action_set/my_action_set.html --&gt;\n...\n&lt;div class=\"action-set action-set__my-action-set\"&gt;\n    &lt;div class=\"action-set__info\"&gt;\n        &lt;i class=\"material-icons\"&gt;landscape&lt;/i&gt;\n        &lt;span&gt;Action Set Test&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"action-set__toolbar\"&gt;\n        {% for action in action_set %}\n            {{ action }}\n        {% endfor %}\n    &lt;/div&gt;\n&lt;/div&gt;\n...\n</pre>\n</li>\n<li><p>In the template of the view call <cite>render</cite> method:</p>\n<pre>&lt;!-- my_view_template.html --&gt;\n...\n&lt;div&gt;{{ action_set.render }}&lt;/div&gt;\n...\n</pre>\n</li>\n<li><p><cite>ActionSetGroup</cite>. Setup group and instantiate action-sets:</p>\n<pre>class CustomActionSetGroup(ActionSetGroup):\n\n    action_set_1 = MyActionSet1\n    action_set_2 = MyActionSet2\n</pre>\n</li>\n<li><p>Use <cite>ActionSetGroupMixinView</cite> to construct custom mixin and view like we did it with <cite>ActionSetMixinView</cite>.\nNext setup is same as for the <cite>ActionSet</cite>:</p>\n<pre>class MyView(CustomActionSetGroupMixinView, TemplateView):\n\n    action_set_group_class = CustomActionSetGroup\n    template_name = 'my_awesome_page.html'\n</pre>\n</li>\n<li><p>In template:</p>\n<pre>...\n&lt;div&gt;\n    {{ action_set_group.action_set_1.render }}\n&lt;/div&gt;\n&lt;div&gt;\n    {{ action_set_group.action_set_2.render }}\n&lt;/div&gt;\n...\n</pre>\n</li>\n</ol>\n<p>10 <cite>ActionSetMenuMixin</cite>. You can building menus by using <cite>ActionSetMenuMixin</cite> (automatic tabs highlight support).\nNote: prepare template as was shown for the simple ActionSet:</p>\n<pre>class MyDetailsMenu(ActionSetMenuMixin, ActionSet or use ActionSetWithPermissionCheck):\n\n    url_attribute_name: str = 'data-url'       # attribute for comparing with current request.path\n    activate_class: str = 'active'             # class for active button\n    template = 'action_set/details_menu.html'\n\n    menu_tab_1 = ActionButton(\n        'TAB1', css_classes=['js-menu-btn'],\n        html_params={\n            'type': 'button',\n            'data-container': '.js-my_content',\n            'data-url': reverse_lazy('app:tab_1')\n        }\n    )\n    menu_tab_2 = ActionButton(\n        'TAB2', css_classes=['js-menu-btn'],\n        html_params={\n            'type': 'button',\n            'data-container': '.js-my_content',\n            'data-url': reverse_lazy('app:tab_2')\n        }\n    )\n    # ... etc.\n</pre>\n<p>11 <cite>BreadcrumbsSet</cite>. You can use this Action Set for building breadcrumbs. Prepare custom <cite>BreadcrumbsSet</cite>:</p>\n<pre>class MyBreadcrumbsSet(BreadcrumbsSet):\n\n    template = 'my_breadcrumbs.html'\n    active_crumb_css_class = 'active-breadcrumb'     # for highlight\n\n    crumb1 = ActionButton(\n        'Crumb1',\n        html_params={\n            'data-url': reverse_lazy('app:tab1'),\n            'data-container': '.js-dispatcher-content'\n        }\n    )\n    crumb2 = ActionButton(\n        'Crumb2',\n        html_params={\n            'data-url': reverse_lazy('app:tab2'),\n            'data-container': '.js-dispatcher-content'\n        }\n    )\n    # ... etc.\n</pre>\n<p>12 Prepare yor view for showing breadcrumbs - use <cite>BreadcrumbsMixinView</cite>:</p>\n<pre>class MyView(BreadcrumbsMixinView, TemplateView):\n\n    breadcrumbs_set_class = MyBreadcrumbsSet\n    template_name = 'my_awesome_page.html'\n\n    breadcrumbs_set = ['crumb1', '*crumb2']  # use '*' symbol for showing active breadcrumb.\n</pre>\n<p>13 Prepare template:</p>\n<pre>&lt;!-- my_breadcrumbs.html --&gt;\n\n{% load dev_tools %}\n\n&lt;div class=\"action-set action-set__breadcrumbs\"&gt;\n    {% for action in action_set %}\n        {{ action|tweak_parameter:'class: mdl-button' }}\n        {% if not forloop.last %}\n            &lt;span class=\"breadcrumbs-separator\"&gt;&gt;&lt;/span&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/div&gt;\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6785462, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7cdde4d5583c401a9bff0f6cdbc2d9f7", "sha256": "dfb0b1f3b6cf4cbb2123bd52709e01e0da4c829bb39ff89250b0715798f7ac2d"}, "downloads": -1, "filename": "btc-action-set-0.1.tar.gz", "has_sig": false, "md5_digest": "7cdde4d5583c401a9bff0f6cdbc2d9f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4649, "upload_time": "2020-03-04T12:55:25", "upload_time_iso_8601": "2020-03-04T12:55:25.882605Z", "url": "https://files.pythonhosted.org/packages/73/fe/61783b2e5ef195203a1e9337f8da264524292116bc044bd36affcf877e11/btc-action-set-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ebac96e9f6d5f584245d76a4553c98c6", "sha256": "25bca69b9c4f337926b2b0771464e88cdd261c203133ba7ee503f45bb8d94148"}, "downloads": -1, "filename": "btc-action-set-0.2.tar.gz", "has_sig": false, "md5_digest": "ebac96e9f6d5f584245d76a4553c98c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5297, "upload_time": "2020-03-05T23:50:19", "upload_time_iso_8601": "2020-03-05T23:50:19.306803Z", "url": "https://files.pythonhosted.org/packages/2a/56/37c92197b10d9c783fb210db3fe7c68599a0c009109ff99d2346601332fe/btc-action-set-0.2.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2dee15de715aea20fcd2dce759ed366b", "sha256": "9b1dcd591a74c41d4bc29373cdd65be536202fbdc8eadb8c75a186bff8b38c2b"}, "downloads": -1, "filename": "btc-action-set-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2dee15de715aea20fcd2dce759ed366b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6050, "upload_time": "2020-03-06T00:40:58", "upload_time_iso_8601": "2020-03-06T00:40:58.096634Z", "url": "https://files.pythonhosted.org/packages/6c/b2/09cf8b8b9c7ac705b3da9b28b4bfd482c11aa8145d3b93dd8cce88f7faaa/btc-action-set-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c7f7759f8bf1c97007fc8f9779f472dc", "sha256": "c5ba87cd74fe00e60eff031a6b5f7ad43a86372efe823457c82afabdf2526397"}, "downloads": -1, "filename": "btc-action-set-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c7f7759f8bf1c97007fc8f9779f472dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6204, "upload_time": "2020-03-10T14:37:56", "upload_time_iso_8601": "2020-03-10T14:37:56.387535Z", "url": "https://files.pythonhosted.org/packages/55/40/addf38ab3aa23aef2961745413a3a5cd958b8ea8f1d41d53cfdf3f7a50eb/btc-action-set-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7f7759f8bf1c97007fc8f9779f472dc", "sha256": "c5ba87cd74fe00e60eff031a6b5f7ad43a86372efe823457c82afabdf2526397"}, "downloads": -1, "filename": "btc-action-set-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c7f7759f8bf1c97007fc8f9779f472dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6204, "upload_time": "2020-03-10T14:37:56", "upload_time_iso_8601": "2020-03-10T14:37:56.387535Z", "url": "https://files.pythonhosted.org/packages/55/40/addf38ab3aa23aef2961745413a3a5cd958b8ea8f1d41d53cfdf3f7a50eb/btc-action-set-0.2.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:10 2020"}