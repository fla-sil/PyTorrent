{"info": {"author": "Mikhail Krivonosov", "author_email": "mike_live@mail.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# Parenclitic Network Generalized Algorithm implementation\n\nParenclitic is a Python package which can effectively produce network represenatation from numeric data.\n\n- [More about parenclitic](#more-about-parenclitic)\n- [Installation](#installation)\n- [Getting Started](#getting-started)\n- [The Team](#the-team)\n- [Acknowledgements](#acknowledgements)\n\n## More About parenclitic\n\nThe main idea is consider pairwise feature planes and decide is there a connection between 2 features based on control and deviated groups.\nSo, we consider 2 groups: control and deviated. Group of deviated samples somehow differ from control samples.\nAnd we interested in features which can identify those distinction.\nHere 2 cases arises: subject can distinct by one feature or they can be separated only by 2 features rather then 1.\nFirst, we identify and exclude features that can distinguish samples only by linear case.\nSecond, we identify pairs of features and construct graph representation of those pairwise connections.\nOne node of network is a feature, and edge characterizes deviation of subject from control group by those 2 features.\n\n![Scatter of 3 groups: Siblings = Control, DS = Deviated, Mothers = Test](images/parenclitic_pair_scatter.png)\n\nNext step is a metric computation of graphs and understanding of underlying network complexity. \nThose metrics can be used as reduction of dimensionality for further ML algorithms.\n\nTo deal with those things we develop parenclitic library.\n\nOur package provides 3 main features:\n1. Build, save and load parenclitic network.\n2. Choose or create kernel to identify edges.\n3. Compute network metrics based on python-igraph package.\n\n## Installation\n\nParenclitic is available on PyPI. You can install it through pip:\n```\npip install parenclitic\n```\nDependencies:\n1. NumPy\n2. python-igraph\n3. Pandas\n4. sklearn\n5. scipy\n\nPlease, carefully check that python-igraph is correctly installed.\n\n## Getting started\n\nFirst load data. We generate it for example.\n```python\n    import numpy as np\n    num_samples = 100\n    num_features = 30\n    shift = 2\n    X = np.random.randn(num_samples, num_features)\n    y = np.random.randint(2, size = (num_samples, ))\n    mask = np.array(y, np.int32)\n    X[mask == 0, :] += shift\n    mask[y == 0] = -1\n```\n\nX - data values with 100 samples each with 30 features. \ny - vector with features labels (0, 1) (int type)\nmask - vector with -1 means control group, +1 means devated group, +2 means test group (int type)\n\nFor example we shifts data for control group twice of standard deviation and we expect almost complete networks.\n\nThere are some steps to run parenclitic\n\n0. Import parenclitic library\n```python\n    import parenclitic\n```\n\n1. Make kernel that decides is there is link between those pairs for particular subject.\nFor example it is a PDF kernel with automatically defined threshold.\n```python\n    kernel = parenclitic.pdf_kernel()\n```\n\n2. On some datasets groups can be easily separated by only one feature. To exclude such features IG_filter can be applied.\n```python\n    pair_filter = parenclitic.IG_filter()\n```\nThese excluding can help to distinguish pair-based deviation from one-feature deviation.\n\n3. Make parenclitic model which uses chosen kernel and filter.\n```python\n    clf = parenclitic.parenclitic(kernel = kernel, pair_filter = pair_filter)\n```\n\n4. Fit data using 2 workers and number of feature pairs per worker is 1000.\n```python\n    clf.fit(X, y, mask, num_workers = 2, chunk_size = 1000)\n```\n\n5. Save graphs as tsv (tab-separated values). Or you can choose 'npz' as NumPy zipped file.\n```python\n    clf.save_graphs(gtype = 'csv')\n```\n\nFull example you can see in src/parenclitic_sample.ipynb\n\n## Parallel computation\n\nParallel computation based on multiprocessing library and it can paralellize feature pairs over multiple processes.\n\n## The Team\n\nParenclitic project started by Krivonosov Mikhail in 2018 in Lobachevsky State University based on many works of M. Zanin, A. Zaikin.\n\n## Acknowledgements\n\nThis work was supported by the megagrant \"Digital personalized medicine for healthy aging (CPM-aging): network analysis of Large multi-omics data to search for new diagnostic, predictive and therapeutic goals\" \u2116 074-02-2018-330 (1).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mike-live/parenclitic", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "parenclitic", "package_url": "https://pypi.org/project/parenclitic/", "platform": "", "project_url": "https://pypi.org/project/parenclitic/", "project_urls": {"Homepage": "https://github.com/mike-live/parenclitic"}, "release_url": "https://pypi.org/project/parenclitic/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "Parenclitic approach with kernels inside", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Parenclitic Network Generalized Algorithm implementation</h1>\n<p>Parenclitic is a Python package which can effectively produce network represenatation from numeric data.</p>\n<ul>\n<li><a href=\"#more-about-parenclitic\" rel=\"nofollow\">More about parenclitic</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting Started</a></li>\n<li><a href=\"#the-team\" rel=\"nofollow\">The Team</a></li>\n<li><a href=\"#acknowledgements\" rel=\"nofollow\">Acknowledgements</a></li>\n</ul>\n<h2>More About parenclitic</h2>\n<p>The main idea is consider pairwise feature planes and decide is there a connection between 2 features based on control and deviated groups.\nSo, we consider 2 groups: control and deviated. Group of deviated samples somehow differ from control samples.\nAnd we interested in features which can identify those distinction.\nHere 2 cases arises: subject can distinct by one feature or they can be separated only by 2 features rather then 1.\nFirst, we identify and exclude features that can distinguish samples only by linear case.\nSecond, we identify pairs of features and construct graph representation of those pairwise connections.\nOne node of network is a feature, and edge characterizes deviation of subject from control group by those 2 features.</p>\n<p><img alt=\"Scatter of 3 groups: Siblings = Control, DS = Deviated, Mothers = Test\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/513f0a57f504764d07d11892329b0534fc4206ab/696d616765732f706172656e636c697469635f706169725f736361747465722e706e67\"></p>\n<p>Next step is a metric computation of graphs and understanding of underlying network complexity.\nThose metrics can be used as reduction of dimensionality for further ML algorithms.</p>\n<p>To deal with those things we develop parenclitic library.</p>\n<p>Our package provides 3 main features:</p>\n<ol>\n<li>Build, save and load parenclitic network.</li>\n<li>Choose or create kernel to identify edges.</li>\n<li>Compute network metrics based on python-igraph package.</li>\n</ol>\n<h2>Installation</h2>\n<p>Parenclitic is available on PyPI. You can install it through pip:</p>\n<pre><code>pip install parenclitic\n</code></pre>\n<p>Dependencies:</p>\n<ol>\n<li>NumPy</li>\n<li>python-igraph</li>\n<li>Pandas</li>\n<li>sklearn</li>\n<li>scipy</li>\n</ol>\n<p>Please, carefully check that python-igraph is correctly installed.</p>\n<h2>Getting started</h2>\n<p>First load data. We generate it for example.</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"n\">num_samples</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">num_features</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n    <span class=\"n\">shift</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">num_samples</span><span class=\"p\">,</span> <span class=\"n\">num_features</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">num_samples</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n    <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n    <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">mask</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">+=</span> <span class=\"n\">shift</span>\n    <span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre>\n<p>X - data values with 100 samples each with 30 features.\ny - vector with features labels (0, 1) (int type)\nmask - vector with -1 means control group, +1 means devated group, +2 means test group (int type)</p>\n<p>For example we shifts data for control group twice of standard deviation and we expect almost complete networks.</p>\n<p>There are some steps to run parenclitic</p>\n<ol>\n<li>Import parenclitic library</li>\n</ol>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">parenclitic</span>\n</pre>\n<ol>\n<li>Make kernel that decides is there is link between those pairs for particular subject.\nFor example it is a PDF kernel with automatically defined threshold.</li>\n</ol>\n<pre>    <span class=\"n\">kernel</span> <span class=\"o\">=</span> <span class=\"n\">parenclitic</span><span class=\"o\">.</span><span class=\"n\">pdf_kernel</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>On some datasets groups can be easily separated by only one feature. To exclude such features IG_filter can be applied.</li>\n</ol>\n<pre>    <span class=\"n\">pair_filter</span> <span class=\"o\">=</span> <span class=\"n\">parenclitic</span><span class=\"o\">.</span><span class=\"n\">IG_filter</span><span class=\"p\">()</span>\n</pre>\n<p>These excluding can help to distinguish pair-based deviation from one-feature deviation.</p>\n<ol>\n<li>Make parenclitic model which uses chosen kernel and filter.</li>\n</ol>\n<pre>    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">parenclitic</span><span class=\"o\">.</span><span class=\"n\">parenclitic</span><span class=\"p\">(</span><span class=\"n\">kernel</span> <span class=\"o\">=</span> <span class=\"n\">kernel</span><span class=\"p\">,</span> <span class=\"n\">pair_filter</span> <span class=\"o\">=</span> <span class=\"n\">pair_filter</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Fit data using 2 workers and number of feature pairs per worker is 1000.</li>\n</ol>\n<pre>    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">num_workers</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Save graphs as tsv (tab-separated values). Or you can choose 'npz' as NumPy zipped file.</li>\n</ol>\n<pre>    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">save_graphs</span><span class=\"p\">(</span><span class=\"n\">gtype</span> <span class=\"o\">=</span> <span class=\"s1\">'csv'</span><span class=\"p\">)</span>\n</pre>\n<p>Full example you can see in src/parenclitic_sample.ipynb</p>\n<h2>Parallel computation</h2>\n<p>Parallel computation based on multiprocessing library and it can paralellize feature pairs over multiple processes.</p>\n<h2>The Team</h2>\n<p>Parenclitic project started by Krivonosov Mikhail in 2018 in Lobachevsky State University based on many works of M. Zanin, A. Zaikin.</p>\n<h2>Acknowledgements</h2>\n<p>This work was supported by the megagrant \"Digital personalized medicine for healthy aging (CPM-aging): network analysis of Large multi-omics data to search for new diagnostic, predictive and therapeutic goals\" \u2116 074-02-2018-330 (1).</p>\n\n          </div>"}, "last_serial": 6780613, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f2c8737c4f692d8fdac7695bf4f8e951", "sha256": "d51782cede2145986804265f230ee616583bc44a2e2045d684f3fa0ad35bf93f"}, "downloads": -1, "filename": "parenclitic-0.1.tar.gz", "has_sig": false, "md5_digest": "f2c8737c4f692d8fdac7695bf4f8e951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6149, "upload_time": "2019-04-29T12:09:13", "upload_time_iso_8601": "2019-04-29T12:09:13.414623Z", "url": "https://files.pythonhosted.org/packages/31/da/e0f948291502d067dba7093723f15a21770312b40a2de7fcb9cc1a4cd8ce/parenclitic-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dad157d89de25a9264188eb41fd89665", "sha256": "a0c47549627d7aefd9d439ff8263198c785dc7dfeb35f3b5af994ab6e7d3ec8c"}, "downloads": -1, "filename": "parenclitic-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dad157d89de25a9264188eb41fd89665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6260, "upload_time": "2019-04-29T17:20:53", "upload_time_iso_8601": "2019-04-29T17:20:53.249828Z", "url": "https://files.pythonhosted.org/packages/9f/79/2a4fb418ce4d95d14dac16dafd6b07ca9fc65f04e728f095e57b8c25f825/parenclitic-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b8047ad7092d01ef6d73c17793e63054", "sha256": "20a4211dca81003c9c1f6faa18bd773d049526e202febc909733626d4f8fa136"}, "downloads": -1, "filename": "parenclitic-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b8047ad7092d01ef6d73c17793e63054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6323, "upload_time": "2019-06-05T09:17:10", "upload_time_iso_8601": "2019-06-05T09:17:10.602435Z", "url": "https://files.pythonhosted.org/packages/1f/87/67a23da443da8311490c9c3c212841f95a6497601d50ef725b32fcc78102/parenclitic-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "90151127184991f0edd54ef0271036cf", "sha256": "b9c0b0084c08a2d64d91c478a148b1e2512c4075b91c3765b2339b346f24a4bf"}, "downloads": -1, "filename": "parenclitic-0.1.4.tar.gz", "has_sig": false, "md5_digest": "90151127184991f0edd54ef0271036cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7560, "upload_time": "2019-07-19T07:40:48", "upload_time_iso_8601": "2019-07-19T07:40:48.400778Z", "url": "https://files.pythonhosted.org/packages/66/48/1eaa2ebb61091f0f383a1a83e5fb48a2e4b2e47ca7164200cad746f0f627/parenclitic-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "089fddb53f1742a7119f96659b657357", "sha256": "91d6fb6aa50231d12a98630f2a8df99826af057f9f864fed688553dd62a80a09"}, "downloads": -1, "filename": "parenclitic-0.1.5.tar.gz", "has_sig": false, "md5_digest": "089fddb53f1742a7119f96659b657357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9095, "upload_time": "2019-12-26T12:50:31", "upload_time_iso_8601": "2019-12-26T12:50:31.446782Z", "url": "https://files.pythonhosted.org/packages/93/64/1a1022535a32225f0a2dedb91bd3ccd5820ccea8ce7853ad6317b4c707d5/parenclitic-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "a8f9e09f816ff0e7e97ea1b22a99baa7", "sha256": "cdc1601ff225b20611130e2462ea6075abc8a2353e61514d9b481d4a1ca740c3"}, "downloads": -1, "filename": "parenclitic-0.1.7.tar.gz", "has_sig": false, "md5_digest": "a8f9e09f816ff0e7e97ea1b22a99baa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13610, "upload_time": "2020-03-09T21:27:32", "upload_time_iso_8601": "2020-03-09T21:27:32.906924Z", "url": "https://files.pythonhosted.org/packages/57/b0/53c7635ead25806a077d294f6767965946e67c6904868056bcd48b8f9995/parenclitic-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8f9e09f816ff0e7e97ea1b22a99baa7", "sha256": "cdc1601ff225b20611130e2462ea6075abc8a2353e61514d9b481d4a1ca740c3"}, "downloads": -1, "filename": "parenclitic-0.1.7.tar.gz", "has_sig": false, "md5_digest": "a8f9e09f816ff0e7e97ea1b22a99baa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13610, "upload_time": "2020-03-09T21:27:32", "upload_time_iso_8601": "2020-03-09T21:27:32.906924Z", "url": "https://files.pythonhosted.org/packages/57/b0/53c7635ead25806a077d294f6767965946e67c6904868056bcd48b8f9995/parenclitic-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:27 2020"}