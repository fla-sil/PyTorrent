{"info": {"author": "Juha Jeronen", "author_email": "juha.m.jeronen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Pydialect makes Python into a language platform, \u00e0 la Racket. It provides the\nplumbing that allows to create, in Python, dialects that compile into Python\nat import time.\n\nAn extension to the Python language doesn't need to make it into the Python core,\n*or even be desirable for inclusion* into the Python core, in order to be useful.\n\nBuilding on functions and syntactic macros, customization of the language itself\nis one more tool for the programmer to extract patterns, at a higher level.\nHence, beside language experimentation, such extensions can be used as a\nframework that allows shorter and/or more readable programs.\n\nPydialect places language-creation power in the hands of its users, without the\nneed to go to extreme lengths to hack CPython itself or implement from scratch\na custom language that compiles to Python AST or bytecode.\n\nPydialect is geared toward creating languages that extend Python and look\nalmost like Python, but extend or modify its syntax and/or semantics.\nHence *dialects*.\n\nThat said, Pydialect itself is only a lightweight infrastructure hook that makes\nit convenient to define and use dialects. To implement the actual semantics\nfor your dialect (which is where all the interesting things happen), you may\nwant to look at [MacroPy](https://github.com/azazel75/macropy). Examples can be\nfound in [unpythonic](https://github.com/Technologicat/unpythonic); see especially\nthe macros (comprising about one half of ``unpythonic``). On packaging a set of\nsemantics into a Pydialect definition, look at the example dialects included\nin the Pydialect distribution.\n\nExample of a module using a dialect::\n\n    from __lang__ import lispython\n\n    print(\"hello, my dialect is {}\".format(__lang__))\n\n    c = cons(1, 2)\n    assert tuple(c) == (1, 2)\n    assert car(c) == 1\n    assert cdr(c) == 2\n    assert ll(1, 2, 3) == llist((1, 2, 3))\n\n    x = let[(a, 21) in 2*a]\n    assert x == 42\n\n    x = letseq[((a, 1),\n                (a, 2*a),\n                (a, 2*a)) in\n               a]\n    assert x == 4\n\n    a = lambda x: cond[x < 0, \"nope\",\n                       x % 2 == 0, \"even\",\n                       \"odd\"]\n    assert a(-1) == \"nope\"\n    assert a(2) == \"even\"\n    assert a(3) == \"odd\"\n\n    def fact(n):\n        def f(k, acc):\n            if k == 1:\n                return acc\n            f(k - 1, k*acc)  # implicit return in tail position, like in Lisps\n        f(n, acc=1)\n    assert fact(4) == 24\n    fact(5000)  # automatic TCO, no crash\n\n    square = lambda x: x**2\n    assert square(3) == 9\n    assert square.__name__ == \"square\"  # lambdas are auto-named\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Technologicat/pydialect", "keywords": "metaprogramming,programming-language-development,dialects", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pydialect", "package_url": "https://pypi.org/project/pydialect/", "platform": "Linux", "project_url": "https://pypi.org/project/pydialect/", "project_urls": {"Homepage": "https://github.com/Technologicat/pydialect"}, "release_url": "https://pypi.org/project/pydialect/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Build languages on Python.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pydialect makes Python into a language platform, \u00e0 la Racket. It provides the\nplumbing that allows to create, in Python, dialects that compile into Python\nat import time.</p>\n<p>An extension to the Python language doesn\u2019t need to make it into the Python core,\n<em>or even be desirable for inclusion</em> into the Python core, in order to be useful.</p>\n<p>Building on functions and syntactic macros, customization of the language itself\nis one more tool for the programmer to extract patterns, at a higher level.\nHence, beside language experimentation, such extensions can be used as a\nframework that allows shorter and/or more readable programs.</p>\n<p>Pydialect places language-creation power in the hands of its users, without the\nneed to go to extreme lengths to hack CPython itself or implement from scratch\na custom language that compiles to Python AST or bytecode.</p>\n<p>Pydialect is geared toward creating languages that extend Python and look\nalmost like Python, but extend or modify its syntax and/or semantics.\nHence <em>dialects</em>.</p>\n<p>That said, Pydialect itself is only a lightweight infrastructure hook that makes\nit convenient to define and use dialects. To implement the actual semantics\nfor your dialect (which is where all the interesting things happen), you may\nwant to look at [MacroPy](<a href=\"https://github.com/azazel75/macropy\" rel=\"nofollow\">https://github.com/azazel75/macropy</a>). Examples can be\nfound in [unpythonic](<a href=\"https://github.com/Technologicat/unpythonic\" rel=\"nofollow\">https://github.com/Technologicat/unpythonic</a>); see especially\nthe macros (comprising about one half of <tt>unpythonic</tt>). On packaging a set of\nsemantics into a Pydialect definition, look at the example dialects included\nin the Pydialect distribution.</p>\n<p>Example of a module using a dialect:</p>\n<pre>from __lang__ import lispython\n\nprint(\"hello, my dialect is {}\".format(__lang__))\n\nc = cons(1, 2)\nassert tuple(c) == (1, 2)\nassert car(c) == 1\nassert cdr(c) == 2\nassert ll(1, 2, 3) == llist((1, 2, 3))\n\nx = let[(a, 21) in 2*a]\nassert x == 42\n\nx = letseq[((a, 1),\n            (a, 2*a),\n            (a, 2*a)) in\n           a]\nassert x == 4\n\na = lambda x: cond[x &lt; 0, \"nope\",\n                   x % 2 == 0, \"even\",\n                   \"odd\"]\nassert a(-1) == \"nope\"\nassert a(2) == \"even\"\nassert a(3) == \"odd\"\n\ndef fact(n):\n    def f(k, acc):\n        if k == 1:\n            return acc\n        f(k - 1, k*acc)  # implicit return in tail position, like in Lisps\n    f(n, acc=1)\nassert fact(4) == 24\nfact(5000)  # automatic TCO, no crash\n\nsquare = lambda x: x**2\nassert square(3) == 9\nassert square.__name__ == \"square\"  # lambdas are auto-named\n</pre>\n\n          </div>"}, "last_serial": 4952776, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bc7381272683b4b3f1805b7c40d0c5cf", "sha256": "d0c97931f9a51b8bf2083e062511623acad3fc45f68bb7a0ca0236f6da51b100"}, "downloads": -1, "filename": "pydialect-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bc7381272683b4b3f1805b7c40d0c5cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19435, "upload_time": "2019-03-13T08:29:04", "upload_time_iso_8601": "2019-03-13T08:29:04.982893Z", "url": "https://files.pythonhosted.org/packages/fb/c6/90353d0a669e3604672ec9f637d55aa55f12028748367cf14cf1d0ea1a12/pydialect-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1137af05f816fd2dbcf574a8ec22b71c", "sha256": "ff2b22c64b7227460ed0a2987a6a33651715559b1f8a9c4fc00cd78070572205"}, "downloads": -1, "filename": "pydialect-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1137af05f816fd2dbcf574a8ec22b71c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18055, "upload_time": "2019-03-13T08:29:07", "upload_time_iso_8601": "2019-03-13T08:29:07.447039Z", "url": "https://files.pythonhosted.org/packages/d9/5d/d24a2771a41c737fdf927fa2d01527407616b6e04f4a9855aa5a651e4fc7/pydialect-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "21c5b67a38626c645435c4f7ef774caa", "sha256": "1fc386af3e8ae66cbc6d6716080924ae42987bc9a4d9a43939435d6f521e2edb"}, "downloads": -1, "filename": "pydialect-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21c5b67a38626c645435c4f7ef774caa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20827, "upload_time": "2019-03-18T08:05:44", "upload_time_iso_8601": "2019-03-18T08:05:44.252251Z", "url": "https://files.pythonhosted.org/packages/05/92/4db1c9879c5adfa473196f81ebdc59a497ebcb5e1d3189c14a8980a23b86/pydialect-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a36d276ce8faa9f868297253e0bf5b", "sha256": "29cbba1bcd25223675ee640bd4df3d7587758b0dd7b06d7056e423e524e17684"}, "downloads": -1, "filename": "pydialect-0.1.1.tar.gz", "has_sig": false, "md5_digest": "69a36d276ce8faa9f868297253e0bf5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18731, "upload_time": "2019-03-18T08:05:46", "upload_time_iso_8601": "2019-03-18T08:05:46.262785Z", "url": "https://files.pythonhosted.org/packages/e7/44/a8c6aa99afe909f391cf4ff54bf6633704018f646616c3c628315fdaa690/pydialect-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "21c5b67a38626c645435c4f7ef774caa", "sha256": "1fc386af3e8ae66cbc6d6716080924ae42987bc9a4d9a43939435d6f521e2edb"}, "downloads": -1, "filename": "pydialect-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21c5b67a38626c645435c4f7ef774caa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20827, "upload_time": "2019-03-18T08:05:44", "upload_time_iso_8601": "2019-03-18T08:05:44.252251Z", "url": "https://files.pythonhosted.org/packages/05/92/4db1c9879c5adfa473196f81ebdc59a497ebcb5e1d3189c14a8980a23b86/pydialect-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a36d276ce8faa9f868297253e0bf5b", "sha256": "29cbba1bcd25223675ee640bd4df3d7587758b0dd7b06d7056e423e524e17684"}, "downloads": -1, "filename": "pydialect-0.1.1.tar.gz", "has_sig": false, "md5_digest": "69a36d276ce8faa9f868297253e0bf5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18731, "upload_time": "2019-03-18T08:05:46", "upload_time_iso_8601": "2019-03-18T08:05:46.262785Z", "url": "https://files.pythonhosted.org/packages/e7/44/a8c6aa99afe909f391cf4ff54bf6633704018f646616c3c628315fdaa690/pydialect-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:02 2020"}