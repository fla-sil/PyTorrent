{"info": {"author": "WEN", "author_email": "", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# aiohttp-jwtplus\n[![fury](https://badge.fury.io/py/aiohttp-jwtplus.svg)](https://badge.fury.io/py/aiohttp-jwtplus)\n[![licence](https://img.shields.io/github/license/GoodManWEN/aiohttp-jwtplus)](https://github.com/GoodManWEN/aiohttp-jwtplus/blob/master/LICENSE)\n[![pyversions](https://img.shields.io/pypi/pyversions/aiohttp-jwtplus.svg)](https://pypi.org/project/aiohttp-jwtplus/)\n[![Publish](https://github.com/GoodManWEN/aiohttp-jwtplus/workflows/Publish/badge.svg)](https://github.com/GoodManWEN/aiohttp-jwtplus/actions?query=workflow%3APublish)\n[![build](https://github.com/GoodManWEN/aiohttp-jwtplus/workflows/Build/badge.svg)](https://github.com/GoodManWEN/aiohttp-jwtplus/actions?query=workflow%3ABuild)\n\nAiohttp middleware and helper utils for working with JSON web token(signature).\nAdded a post router for improving security level of SPAs &amp; auto refresh secrets.\n\n- Secret auto refresh.\n- Totally separated content.\n- Works on Python3.7+\n\n## Requirements\n- [Aiohttp >= 2.3.5](https://github.com/aio-libs/aiohttp)\n- [PyJWT](https://github.com/jpadilla/pyjwt)\n\n## Install\n\n    pip install aiohttp-jwtplus\n\n## Usage\n- You need to create a SecretManager object ,which manages informations(secret \\ scheme \\ algorithm \\ exp_interval \\ auto_refresh_interval etc.) about jwt first.\n- Then you need to create a JWTHelper ,in whose slots you can  definite your business logic ,such as where you get token from ,what you do in identify process etc. If you dont pass them in ,JWTHelper will provides you a basic version of token_getter & identifier ,which simplely gets token from headers['Authorization'] value and then check out if decoded dictionary has key value 'username'.\n- Finally you can create aiohttp.web.Application and pass middlewares in . It's a necessary condition to passin pre_jwt_identifier() and post_jwt_router() in order if you would like to activate post router. It's no need to register middleware via decorator first.\n\n## Behaviors of routing under different authorization\npath | remarks | authorized destination |  unauthorized destination\n-|-|-|-\n/index.html | Entry of main functional SPA | /index.html | /login.html\n/login.html | Entry of login page. Independent SPA | /index.html | /login.html\n/login_api  | Login api , one in jwt whitelist. | /login_api | /login_api\n/setattr_api | One of protected apis. | /setattr_api | 403 or 401\n/404        | Undefined page | /index.html | /login.html\n\n*/\\* Status code 404 would be handled in SPA \\*/*\n\n## Example\n`server_basic.py` \n\\# here's a basic aiohttp hello-world server with four kinds of routing requirement respectively.\n\n```Python3\nfrom aiohttp import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/index.html')\nasync def main_spa_page(request):\n    return web.Response(text=\"this is index.html\")\n\n@routes.get('/login.html')\nasync def login_spa_page(request):\n    return web.Response(text=\"this is login.html\")\n\n@routes.get('/authentication')\nasync def loginapi(request):\n    return web.Response(text=\"loginapi called\")\n\n@routes.get('/setattr')\nasync def setattr(request):\n    return web.Response(text= 'this is a procted api')\n\napp = web.Application(middlewares=[])\napp.add_routes(routes)\nweb._run_app(app)\n```\n\n`server.py` \n\\# Add several lines to easily start a server with jwtplus-plugin.\n```Python3\nimport asyncio\nfrom aiohttp import web\nfrom aiohttp_jwtplus import (\n    SecretManager,\n    JWTHelper,\n    basic_identifier,\n    basic_token_getter,\n    show_request_info\n)\n\nroutes = web.RouteTableDef()\n\n@routes.get('/index.html')\nasync def main_spa_page(request):\n    show_request_info(request)\n    return web.Response(text=\"this is index.html\")\n\n@routes.get('/login.html')\nasync def login_spa_page(request):\n    show_request_info(request)\n    return web.Response(text=\"this is login.html\")\n\n@routes.get('/authentication')\nasync def loginapi(request):\n    show_request_info(request)\n    return web.Response(text=\"loginapi called\")\n\n@routes.get('/setattr')\nasync def setattr(request):\n    show_request_info(request)\n    return web.Response(text= 'this is a procted api')\n\nsecret_manager = SecretManager( secret = 'testsecret' ,    # default empty, will generate a random string.\n                                refresh_interval = '30d' , # default 0 ,represents secret auto refresh disabled. Accept string or int \n                                scheme = \"Bearer\" ,        # default.\n                                algorithm = 'HS256' ,      # default.\n                                exptime = '30d' ,          # default.\n                                )\n\njwt = JWTHelper(\n            unauthorized_return_route = '/login.html' , \n            # this's an exception which means if you've alreadly logined ,you cannot access to this page. \n            unauthorized_return_route_handler = login_spa_page,\n            authorized_return_page_handler = main_spa_page,\n            secret_manager = secret_manager , \n            token_getter = basic_token_getter,  # default\n            identifier =  basic_identifier ,    # default\n            whitelist = ('/authentication', ) , # must be a tuple ,accepts regular expresion.\n            protected_apis = ['/setattr',] \n        )\n\napp = web.Application(middlewares=[ \n                jwt.pre_jwt_identifier(),\n                jwt.post_jwt_router(),\n                                ])\napp.add_routes(routes)\nloop = asyncio.get_event_loop()\nloop.create_task(secret_manager.auto_refresh())\n# Explicit trigger eventloop since we starts a secret-auto-refresh thread.  \nloop.run_until_complete(web._run_app(app))\n```\n\n`client.py` \n\\# For a quick test with python pretended frontend.\n```Python3\nimport asyncio\nfrom aiohttp import ClientSession \nfrom aiohttp_jwtplus import (\n    SecretManager,\n    JWTHelper,\n    basic_identifier,     # it's a coroutine\n    basic_token_getter,   # it's a coroutine\n    show_request_info     # print function\n)\n\n\nsecret_manager = SecretManager( secret = 'testsecret' ,    # default empty, will generate a random string.\n                                refresh_interval = 0 ,     # default 0 , no auto refresh.\n                                algorithm = 'HS256' ,      # default.\n                                exptime = '30d' ,          # default.\n                                )\n\nurl_pattern = 'http://localhost:8080{}'\nurl_exts = [    '/index.html' ,\n                '/login.html' ,\n                '/authentication',\n                '/setattr',\n                '/404',\n                ]\n\n# Simulate you've alreadly got token feedback from server.\n# If you would like to generate token(without scheme) ,it accepts a dictionary\n# and items in which would be updated to jwt source payload. \njwt = secret_manager.encode({'username':'jacky'})\n\nheaders = {\n    'Authorization': \"Bearer \" + jwt.decode()\n}\n\nasync def main():\n    async with ClientSession() as session:\n        print(f'{\"#\"*22}\\nWith authentication')\n        for urlext in url_exts:\n            async with session.get(url_pattern.format(urlext) , headers = headers) as response:\n                text = await response.text()\n                print(f\"called {urlext} ,\\n\\tget statuscode {response.status} , \\n\\treturn text \\\"{text}\\\"\")\n        print(f'{\"#\"*22}\\nWithout authentication')\n        for urlext in url_exts:\n            async with session.get(url_pattern.format(urlext) , headers={'Authorization':'None'}) as response:\n                text = await response.text()\n                print(f\"called {urlext} ,\\n\\tget statuscode {response.status} , \\n\\treturn text \\\"{text}\\\"\")\n\nasyncio.run(main())\n\n```\n\n`modify_identifier.py` \n\\# Self-modified identifier & token_getter.\n```Python3\nfrom aiohttp import web\nfrom aiohttp_jwtplus import (\n    SecretManager,\n    JWTHelper\n)\n\nasync def identifier_mod(payload):\n    '''\n    An identifier accepts a payload(as dictionary of jwt decoded result),\n    and whose return value will be stored as one of request's property named 'auth_carry'\n    If you would like to make identification fail in middleware(before handle requests),\n    return False.\n    You don't need to worry about exceptions.\n    '''\n    if 'username' in payload:\n        return payload['username']\n    else:\n        return False\n\n@routes.get('/index.html')\nasync def authorised(request):\n    username = request['auth_carry']['username']\n    if username == 'admin':\n        return web.Response(text = 'pass')\n    else:\n        return web.Response(text = 'fail')\n\nsecret_manager = SecretManager( secret = 'testsecret' )\n\njwt = JWTHelper(\n            unauthorized_return_route = '' , \n            unauthorized_return_route_handler = authorised,\n            authorized_return_page_handler = authorised,\n            secret_manager = secret_manager \n        )\n\napp = web.Application(middlewares=[ \n        jwt.pre_jwt_identifier(),\n        jwt.post_jwt_router(),\n                        ])\napp.add_routes(routes)\nweb.run_app(app)\n\n# Then you shall start a simulate client and encode a header with jwt authenrized payload with 'usernaem : admin' in it\n# and test if you got the corret response.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GoodManWEN/aiohttp-jwtplus", "keywords": "jwt,aiohttp,aiohttp-jwt,aiohttp-jwtplus", "license": "", "maintainer": "", "maintainer_email": "", "name": "aiohttp-jwtplus", "package_url": "https://pypi.org/project/aiohttp-jwtplus/", "platform": "", "project_url": "https://pypi.org/project/aiohttp-jwtplus/", "project_urls": {"Homepage": "https://github.com/GoodManWEN/aiohttp-jwtplus"}, "release_url": "https://pypi.org/project/aiohttp-jwtplus/0.2.0/", "requires_dist": ["aiohttp (>=2.3.5)", "PyJWT (>=1.7.1)"], "requires_python": ">=3.7", "summary": "Added a post router for improving security level of SPAs && auto refresh secrets. - GoodManWEN/aiohttp-jwtplus", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiohttp-jwtplus</h1>\n<p><a href=\"https://badge.fury.io/py/aiohttp-jwtplus\" rel=\"nofollow\"><img alt=\"fury\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cda49a6db4c399ab995019d0c8e12352a722aa92/68747470733a2f2f62616467652e667572792e696f2f70792f61696f687474702d6a7774706c75732e737667\"></a>\n<a href=\"https://github.com/GoodManWEN/aiohttp-jwtplus/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e95bece1752b3e6b22325b493e8d90bf9f03e34e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f476f6f644d616e57454e2f61696f687474702d6a7774706c7573\"></a>\n<a href=\"https://pypi.org/project/aiohttp-jwtplus/\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a70f50a8e24706d315d7a98e046829e5b8ec1f01/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696f687474702d6a7774706c75732e737667\"></a>\n<a href=\"https://github.com/GoodManWEN/aiohttp-jwtplus/actions?query=workflow%3APublish\" rel=\"nofollow\"><img alt=\"Publish\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d6acc181924d6c7dcb67ac88c5a9b880655844c/68747470733a2f2f6769746875622e636f6d2f476f6f644d616e57454e2f61696f687474702d6a7774706c75732f776f726b666c6f77732f5075626c6973682f62616467652e737667\"></a>\n<a href=\"https://github.com/GoodManWEN/aiohttp-jwtplus/actions?query=workflow%3ABuild\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f70014dc0c37564fae167f505bf754f60b7552c/68747470733a2f2f6769746875622e636f6d2f476f6f644d616e57454e2f61696f687474702d6a7774706c75732f776f726b666c6f77732f4275696c642f62616467652e737667\"></a></p>\n<p>Aiohttp middleware and helper utils for working with JSON web token(signature).\nAdded a post router for improving security level of SPAs &amp; auto refresh secrets.</p>\n<ul>\n<li>Secret auto refresh.</li>\n<li>Totally separated content.</li>\n<li>Works on Python3.7+</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://github.com/aio-libs/aiohttp\" rel=\"nofollow\">Aiohttp &gt;= 2.3.5</a></li>\n<li><a href=\"https://github.com/jpadilla/pyjwt\" rel=\"nofollow\">PyJWT</a></li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install aiohttp-jwtplus\n</code></pre>\n<h2>Usage</h2>\n<ul>\n<li>You need to create a SecretManager object ,which manages informations(secret \\ scheme \\ algorithm \\ exp_interval \\ auto_refresh_interval etc.) about jwt first.</li>\n<li>Then you need to create a JWTHelper ,in whose slots you can  definite your business logic ,such as where you get token from ,what you do in identify process etc. If you dont pass them in ,JWTHelper will provides you a basic version of token_getter &amp; identifier ,which simplely gets token from headers['Authorization'] value and then check out if decoded dictionary has key value 'username'.</li>\n<li>Finally you can create aiohttp.web.Application and pass middlewares in . It's a necessary condition to passin pre_jwt_identifier() and post_jwt_router() in order if you would like to activate post router. It's no need to register middleware via decorator first.</li>\n</ul>\n<h2>Behaviors of routing under different authorization</h2>\n<table>\n<thead>\n<tr>\n<th>path</th>\n<th>remarks</th>\n<th>authorized destination</th>\n<th>unauthorized destination</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/index.html</td>\n<td>Entry of main functional SPA</td>\n<td>/index.html</td>\n<td>/login.html</td>\n</tr>\n<tr>\n<td>/login.html</td>\n<td>Entry of login page. Independent SPA</td>\n<td>/index.html</td>\n<td>/login.html</td>\n</tr>\n<tr>\n<td>/login_api</td>\n<td>Login api , one in jwt whitelist.</td>\n<td>/login_api</td>\n<td>/login_api</td>\n</tr>\n<tr>\n<td>/setattr_api</td>\n<td>One of protected apis.</td>\n<td>/setattr_api</td>\n<td>403 or 401</td>\n</tr>\n<tr>\n<td>/404</td>\n<td>Undefined page</td>\n<td>/index.html</td>\n<td>/login.html</td>\n</tr></tbody></table>\n<p><em>/* Status code 404 would be handled in SPA */</em></p>\n<h2>Example</h2>\n<p><code>server_basic.py</code>\n# here's a basic aiohttp hello-world server with four kinds of routing requirement respectively.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RouteTableDef</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/index.html'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_spa_page</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"this is index.html\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/login.html'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">login_spa_page</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"this is login.html\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/authentication'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">loginapi</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"loginapi called\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/setattr'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">setattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span> <span class=\"s1\">'this is a procted api'</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_routes</span><span class=\"p\">(</span><span class=\"n\">routes</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">_run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p><code>server.py</code>\n# Add several lines to easily start a server with jwtplus-plugin.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_jwtplus</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">SecretManager</span><span class=\"p\">,</span>\n    <span class=\"n\">JWTHelper</span><span class=\"p\">,</span>\n    <span class=\"n\">basic_identifier</span><span class=\"p\">,</span>\n    <span class=\"n\">basic_token_getter</span><span class=\"p\">,</span>\n    <span class=\"n\">show_request_info</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RouteTableDef</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/index.html'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_spa_page</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">show_request_info</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"this is index.html\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/login.html'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">login_spa_page</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">show_request_info</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"this is login.html\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/authentication'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">loginapi</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">show_request_info</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"loginapi called\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/setattr'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">setattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">show_request_info</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span> <span class=\"s1\">'this is a procted api'</span><span class=\"p\">)</span>\n\n<span class=\"n\">secret_manager</span> <span class=\"o\">=</span> <span class=\"n\">SecretManager</span><span class=\"p\">(</span> <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s1\">'testsecret'</span> <span class=\"p\">,</span>    <span class=\"c1\"># default empty, will generate a random string.</span>\n                                <span class=\"n\">refresh_interval</span> <span class=\"o\">=</span> <span class=\"s1\">'30d'</span> <span class=\"p\">,</span> <span class=\"c1\"># default 0 ,represents secret auto refresh disabled. Accept string or int </span>\n                                <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"s2\">\"Bearer\"</span> <span class=\"p\">,</span>        <span class=\"c1\"># default.</span>\n                                <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s1\">'HS256'</span> <span class=\"p\">,</span>      <span class=\"c1\"># default.</span>\n                                <span class=\"n\">exptime</span> <span class=\"o\">=</span> <span class=\"s1\">'30d'</span> <span class=\"p\">,</span>          <span class=\"c1\"># default.</span>\n                                <span class=\"p\">)</span>\n\n<span class=\"n\">jwt</span> <span class=\"o\">=</span> <span class=\"n\">JWTHelper</span><span class=\"p\">(</span>\n            <span class=\"n\">unauthorized_return_route</span> <span class=\"o\">=</span> <span class=\"s1\">'/login.html'</span> <span class=\"p\">,</span> \n            <span class=\"c1\"># this's an exception which means if you've alreadly logined ,you cannot access to this page. </span>\n            <span class=\"n\">unauthorized_return_route_handler</span> <span class=\"o\">=</span> <span class=\"n\">login_spa_page</span><span class=\"p\">,</span>\n            <span class=\"n\">authorized_return_page_handler</span> <span class=\"o\">=</span> <span class=\"n\">main_spa_page</span><span class=\"p\">,</span>\n            <span class=\"n\">secret_manager</span> <span class=\"o\">=</span> <span class=\"n\">secret_manager</span> <span class=\"p\">,</span> \n            <span class=\"n\">token_getter</span> <span class=\"o\">=</span> <span class=\"n\">basic_token_getter</span><span class=\"p\">,</span>  <span class=\"c1\"># default</span>\n            <span class=\"n\">identifier</span> <span class=\"o\">=</span>  <span class=\"n\">basic_identifier</span> <span class=\"p\">,</span>    <span class=\"c1\"># default</span>\n            <span class=\"n\">whitelist</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'/authentication'</span><span class=\"p\">,</span> <span class=\"p\">)</span> <span class=\"p\">,</span> <span class=\"c1\"># must be a tuple ,accepts regular expresion.</span>\n            <span class=\"n\">protected_apis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'/setattr'</span><span class=\"p\">,]</span> \n        <span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span> \n                <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">pre_jwt_identifier</span><span class=\"p\">(),</span>\n                <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">post_jwt_router</span><span class=\"p\">(),</span>\n                                <span class=\"p\">])</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_routes</span><span class=\"p\">(</span><span class=\"n\">routes</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">secret_manager</span><span class=\"o\">.</span><span class=\"n\">auto_refresh</span><span class=\"p\">())</span>\n<span class=\"c1\"># Explicit trigger eventloop since we starts a secret-auto-refresh thread.  </span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">_run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">))</span>\n</pre>\n<p><code>client.py</code>\n# For a quick test with python pretended frontend.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">ClientSession</span> \n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_jwtplus</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">SecretManager</span><span class=\"p\">,</span>\n    <span class=\"n\">JWTHelper</span><span class=\"p\">,</span>\n    <span class=\"n\">basic_identifier</span><span class=\"p\">,</span>     <span class=\"c1\"># it's a coroutine</span>\n    <span class=\"n\">basic_token_getter</span><span class=\"p\">,</span>   <span class=\"c1\"># it's a coroutine</span>\n    <span class=\"n\">show_request_info</span>     <span class=\"c1\"># print function</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">secret_manager</span> <span class=\"o\">=</span> <span class=\"n\">SecretManager</span><span class=\"p\">(</span> <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s1\">'testsecret'</span> <span class=\"p\">,</span>    <span class=\"c1\"># default empty, will generate a random string.</span>\n                                <span class=\"n\">refresh_interval</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"p\">,</span>     <span class=\"c1\"># default 0 , no auto refresh.</span>\n                                <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s1\">'HS256'</span> <span class=\"p\">,</span>      <span class=\"c1\"># default.</span>\n                                <span class=\"n\">exptime</span> <span class=\"o\">=</span> <span class=\"s1\">'30d'</span> <span class=\"p\">,</span>          <span class=\"c1\"># default.</span>\n                                <span class=\"p\">)</span>\n\n<span class=\"n\">url_pattern</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:8080</span><span class=\"si\">{}</span><span class=\"s1\">'</span>\n<span class=\"n\">url_exts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>    <span class=\"s1\">'/index.html'</span> <span class=\"p\">,</span>\n                <span class=\"s1\">'/login.html'</span> <span class=\"p\">,</span>\n                <span class=\"s1\">'/authentication'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'/setattr'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'/404'</span><span class=\"p\">,</span>\n                <span class=\"p\">]</span>\n\n<span class=\"c1\"># Simulate you've alreadly got token feedback from server.</span>\n<span class=\"c1\"># If you would like to generate token(without scheme) ,it accepts a dictionary</span>\n<span class=\"c1\"># and items in which would be updated to jwt source payload. </span>\n<span class=\"n\">jwt</span> <span class=\"o\">=</span> <span class=\"n\">secret_manager</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">({</span><span class=\"s1\">'username'</span><span class=\"p\">:</span><span class=\"s1\">'jacky'</span><span class=\"p\">})</span>\n\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'Authorization'</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer \"</span> <span class=\"o\">+</span> <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"s2\">\"#\"</span><span class=\"o\">*</span><span class=\"mi\">22</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">With authentication'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">urlext</span> <span class=\"ow\">in</span> <span class=\"n\">url_exts</span><span class=\"p\">:</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">urlext</span><span class=\"p\">)</span> <span class=\"p\">,</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">headers</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n                <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"called </span><span class=\"si\">{</span><span class=\"n\">urlext</span><span class=\"si\">}</span><span class=\"s2\"> ,</span><span class=\"se\">\\n\\t</span><span class=\"s2\">get statuscode </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"si\">}</span><span class=\"s2\"> , </span><span class=\"se\">\\n\\t</span><span class=\"s2\">return text </span><span class=\"se\">\\\"</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"s2\">\"#\"</span><span class=\"o\">*</span><span class=\"mi\">22</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">Without authentication'</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">urlext</span> <span class=\"ow\">in</span> <span class=\"n\">url_exts</span><span class=\"p\">:</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">urlext</span><span class=\"p\">)</span> <span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Authorization'</span><span class=\"p\">:</span><span class=\"s1\">'None'</span><span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n                <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"called </span><span class=\"si\">{</span><span class=\"n\">urlext</span><span class=\"si\">}</span><span class=\"s2\"> ,</span><span class=\"se\">\\n\\t</span><span class=\"s2\">get statuscode </span><span class=\"si\">{</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"si\">}</span><span class=\"s2\"> , </span><span class=\"se\">\\n\\t</span><span class=\"s2\">return text </span><span class=\"se\">\\\"</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p><code>modify_identifier.py</code>\n# Self-modified identifier &amp; token_getter.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_jwtplus</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">SecretManager</span><span class=\"p\">,</span>\n    <span class=\"n\">JWTHelper</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">identifier_mod</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    An identifier accepts a payload(as dictionary of jwt decoded result),</span>\n<span class=\"sd\">    and whose return value will be stored as one of request's property named 'auth_carry'</span>\n<span class=\"sd\">    If you would like to make identification fail in middleware(before handle requests),</span>\n<span class=\"sd\">    return False.</span>\n<span class=\"sd\">    You don't need to worry about exceptions.</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">if</span> <span class=\"s1\">'username'</span> <span class=\"ow\">in</span> <span class=\"n\">payload</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">payload</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"nd\">@routes</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/index.html'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">authorised</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s1\">'auth_carry'</span><span class=\"p\">][</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'admin'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'pass'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'fail'</span><span class=\"p\">)</span>\n\n<span class=\"n\">secret_manager</span> <span class=\"o\">=</span> <span class=\"n\">SecretManager</span><span class=\"p\">(</span> <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s1\">'testsecret'</span> <span class=\"p\">)</span>\n\n<span class=\"n\">jwt</span> <span class=\"o\">=</span> <span class=\"n\">JWTHelper</span><span class=\"p\">(</span>\n            <span class=\"n\">unauthorized_return_route</span> <span class=\"o\">=</span> <span class=\"s1\">''</span> <span class=\"p\">,</span> \n            <span class=\"n\">unauthorized_return_route_handler</span> <span class=\"o\">=</span> <span class=\"n\">authorised</span><span class=\"p\">,</span>\n            <span class=\"n\">authorized_return_page_handler</span> <span class=\"o\">=</span> <span class=\"n\">authorised</span><span class=\"p\">,</span>\n            <span class=\"n\">secret_manager</span> <span class=\"o\">=</span> <span class=\"n\">secret_manager</span> \n        <span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span> \n        <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">pre_jwt_identifier</span><span class=\"p\">(),</span>\n        <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">post_jwt_router</span><span class=\"p\">(),</span>\n                        <span class=\"p\">])</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_routes</span><span class=\"p\">(</span><span class=\"n\">routes</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then you shall start a simulate client and encode a header with jwt authenrized payload with 'usernaem : admin' in it</span>\n<span class=\"c1\"># and test if you got the corret response.</span>\n</pre>\n\n          </div>"}, "last_serial": 6860394, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f194ae2f780531468e05a8ce7f92b3ac", "sha256": "40495f7e8299889868869befb80f9ac8d94a69c45078832dec92dec0dd409b9b"}, "downloads": -1, "filename": "aiohttp_jwtplus-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f194ae2f780531468e05a8ce7f92b3ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11240, "upload_time": "2020-03-11T09:05:41", "upload_time_iso_8601": "2020-03-11T09:05:41.902157Z", "url": "https://files.pythonhosted.org/packages/f0/7a/03cdc94e122c6543e3799ce7042240ae86cc9e9ae548a3ab582c16623da5/aiohttp_jwtplus-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b7096fdebd5732941a092d9047d889f", "sha256": "59cc6c997f1e173d20893a47c9b4683092d77d3a87e9d190b45c5b1a74945e9e"}, "downloads": -1, "filename": "aiohttp-jwtplus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5b7096fdebd5732941a092d9047d889f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8722, "upload_time": "2020-03-11T09:05:44", "upload_time_iso_8601": "2020-03-11T09:05:44.153398Z", "url": "https://files.pythonhosted.org/packages/c1/e2/71febc78798ebc8833941322422f2465d8751dc687cbf72dd58c0f3ae3d8/aiohttp-jwtplus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "98a9afb4f5a75a63c2eb29436aab83b9", "sha256": "b645395fb0e560a30717043e293fec12675ffbc7a3c4cd16e9febf2a131b5b64"}, "downloads": -1, "filename": "aiohttp_jwtplus-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "98a9afb4f5a75a63c2eb29436aab83b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11576, "upload_time": "2020-03-11T09:18:23", "upload_time_iso_8601": "2020-03-11T09:18:23.196625Z", "url": "https://files.pythonhosted.org/packages/f5/15/90f04fcd9a098a9692dfa55e26854d8d243477254bf09451c75887ffc4e0/aiohttp_jwtplus-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c87cbb7bd88eb84022292ffe18182ee1", "sha256": "4b8aa206d120083a8f7adc1656863e6da6795092303690212faeccac46f1f867"}, "downloads": -1, "filename": "aiohttp-jwtplus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c87cbb7bd88eb84022292ffe18182ee1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8591, "upload_time": "2020-03-11T09:18:24", "upload_time_iso_8601": "2020-03-11T09:18:24.600446Z", "url": "https://files.pythonhosted.org/packages/71/f3/596c71ed862609bac1309b585be726ced994304a81422f0601780bcc5ea0/aiohttp-jwtplus-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8086f245d3ffd46d8462af811c4dbf55", "sha256": "175b8dd60444c62dfa87d0c72fe27d4a48ec8ca07f448be5ae4db1c53410cb01"}, "downloads": -1, "filename": "aiohttp_jwtplus-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8086f245d3ffd46d8462af811c4dbf55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11579, "upload_time": "2020-03-11T11:19:47", "upload_time_iso_8601": "2020-03-11T11:19:47.426832Z", "url": "https://files.pythonhosted.org/packages/f1/93/9b13f243b6b6ef670d68405892f9e4cf22a66a2d7f5ad5f29e4bb765c369/aiohttp_jwtplus-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7296d9795743bfdb19ac674174769e4", "sha256": "012b7b9ebd294634da77a7ca0d45471bdfb6c31df1d05543b8016fd93078b95b"}, "downloads": -1, "filename": "aiohttp-jwtplus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b7296d9795743bfdb19ac674174769e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8589, "upload_time": "2020-03-11T11:19:48", "upload_time_iso_8601": "2020-03-11T11:19:48.930138Z", "url": "https://files.pythonhosted.org/packages/40/1a/e68bd0f3d37c2176cf4895c12c1b157fb63fafc8e13531e0e91d81457d95/aiohttp-jwtplus-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6e00cbaa1cea4fb41273c863450444da", "sha256": "1b71860e35c6c6cbc4cc2b9df522542b5e94489eda1320096cedcb3c9d12a0e6"}, "downloads": -1, "filename": "aiohttp_jwtplus-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e00cbaa1cea4fb41273c863450444da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11644, "upload_time": "2020-03-22T15:17:36", "upload_time_iso_8601": "2020-03-22T15:17:36.700349Z", "url": "https://files.pythonhosted.org/packages/61/e3/3fe420d803750fd8b728b4a87372eccce23fcccca9a8e8aed84cecaa74a7/aiohttp_jwtplus-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbdd0785fb56c714b8d6b0f6ee55cede", "sha256": "080b4450835ae84befad3c9c603ec2058edb4069a27d89c4622ed10278009bae"}, "downloads": -1, "filename": "aiohttp-jwtplus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fbdd0785fb56c714b8d6b0f6ee55cede", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8668, "upload_time": "2020-03-22T15:17:37", "upload_time_iso_8601": "2020-03-22T15:17:37.975786Z", "url": "https://files.pythonhosted.org/packages/8b/b5/70cabd55599039b338a22c8511091c82bc56c67423bd6bd96608cd675426/aiohttp-jwtplus-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6e00cbaa1cea4fb41273c863450444da", "sha256": "1b71860e35c6c6cbc4cc2b9df522542b5e94489eda1320096cedcb3c9d12a0e6"}, "downloads": -1, "filename": "aiohttp_jwtplus-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e00cbaa1cea4fb41273c863450444da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11644, "upload_time": "2020-03-22T15:17:36", "upload_time_iso_8601": "2020-03-22T15:17:36.700349Z", "url": "https://files.pythonhosted.org/packages/61/e3/3fe420d803750fd8b728b4a87372eccce23fcccca9a8e8aed84cecaa74a7/aiohttp_jwtplus-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbdd0785fb56c714b8d6b0f6ee55cede", "sha256": "080b4450835ae84befad3c9c603ec2058edb4069a27d89c4622ed10278009bae"}, "downloads": -1, "filename": "aiohttp-jwtplus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fbdd0785fb56c714b8d6b0f6ee55cede", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8668, "upload_time": "2020-03-22T15:17:37", "upload_time_iso_8601": "2020-03-22T15:17:37.975786Z", "url": "https://files.pythonhosted.org/packages/8b/b5/70cabd55599039b338a22c8511091c82bc56c67423bd6bd96608cd675426/aiohttp-jwtplus-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:17 2020"}