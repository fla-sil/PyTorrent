{"info": {"author": "Justin Mutter", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Home Automation", "Topic :: Multimedia :: Sound/Audio"], "description": "# pyoneer_vsx\nThis is a Python package for interfacing with Pioneer receivers, primarily the VSX series, via telnet commands as outlined in [this specification](https://www.pioneerelectronics.com/StaticFiles/PUSA/Files/Home%20Custom%20Install/VSX-1120-K-RS232.PDF). \n\nThis package was primarily created for use with [Home Assistant](https://www.home-assistant.io) to support receivers that do not work with the current implementation, as well as to extract all of the Pioneer-specific code out of Home Assistant, and to swtich to using a persistent connection via `asyncio`.\n\nThis package is based on [`python-anthemav`](https://github.com/nugget/python-anthemav) which provides similar functionality for Anthem receivers.\n\n### Supported functionality\n\nCurrently this supports:\n - Power: on/off\n - Volume: 0-100%\n - Mute: on/off\n - Input selection\n\n The spec outlines more functionality, including listening modes, tone control, multi-zone power/input selection, etc, however for my purposes all I needed were the basics above.\n\n### Update events\n\nBecause we keep a persistent connection to the receiver, we receive events every time a change is made to the receiver, either via a command we sent, or by a person physically interacting with the controls on the device itself.\n\nFor this reason we only, and always, update our internal state when we get these events, not when we initially send a command to the receiver.\n\n## Setup\n\n### Package installation\n\nYou can either install the package using `pip`:\n```\npip3 install pyoneer-vsx\n```\n\nor clone the repo and install/run it from the source.\n\n### Receiver\n\nConnect your receiver to your network and ensure it has a static IP address either via the `System Setup > Network Setup` menu on the receiver itself, or by assigning it a fixed address on your router.\n\nAlso make sure you enable the `Network Standby` feature (also found in the `Network Setup` menu) so we can still connect to the receiver even when it is powered off.\n\n## Testing\n\nI have exclusively tested this with a VSX-822 and a VSX-1121, but any other Pioneer VSX series receiver (and possibly others) should work.\n\nIf download the code you can run the following command, substituting in the IP and port as needed:\n```\npython3 test_harness.py --host IP_ADDRESS --port PORT\n```\n\nThis will attempt to connect to the receiver, turn it on, select a few different inputs, then turn it off, all with very verbose logging. At the end, your receiver should be off and when you turn it back on it should be set to the Blu-ray/BD input.\n\n## Caveats\n\nDue to the persistent connection described above, using this package will prevent any other applications/services, such as iOS or Android control apps, from connecting to the receiver. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/j-mutter/pyoneer_vsx", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyoneer-vsx", "package_url": "https://pypi.org/project/pyoneer-vsx/", "platform": "", "project_url": "https://pypi.org/project/pyoneer-vsx/", "project_urls": {"Homepage": "https://github.com/j-mutter/pyoneer_vsx"}, "release_url": "https://pypi.org/project/pyoneer-vsx/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A python library to control Pioneer VSX AVRs over telnet", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyoneer_vsx</h1>\n<p>This is a Python package for interfacing with Pioneer receivers, primarily the VSX series, via telnet commands as outlined in <a href=\"https://www.pioneerelectronics.com/StaticFiles/PUSA/Files/Home%20Custom%20Install/VSX-1120-K-RS232.PDF\" rel=\"nofollow\">this specification</a>.</p>\n<p>This package was primarily created for use with <a href=\"https://www.home-assistant.io\" rel=\"nofollow\">Home Assistant</a> to support receivers that do not work with the current implementation, as well as to extract all of the Pioneer-specific code out of Home Assistant, and to swtich to using a persistent connection via <code>asyncio</code>.</p>\n<p>This package is based on <a href=\"https://github.com/nugget/python-anthemav\" rel=\"nofollow\"><code>python-anthemav</code></a> which provides similar functionality for Anthem receivers.</p>\n<h3>Supported functionality</h3>\n<p>Currently this supports:</p>\n<ul>\n<li>Power: on/off</li>\n<li>Volume: 0-100%</li>\n<li>Mute: on/off</li>\n<li>Input selection</li>\n</ul>\n<p>The spec outlines more functionality, including listening modes, tone control, multi-zone power/input selection, etc, however for my purposes all I needed were the basics above.</p>\n<h3>Update events</h3>\n<p>Because we keep a persistent connection to the receiver, we receive events every time a change is made to the receiver, either via a command we sent, or by a person physically interacting with the controls on the device itself.</p>\n<p>For this reason we only, and always, update our internal state when we get these events, not when we initially send a command to the receiver.</p>\n<h2>Setup</h2>\n<h3>Package installation</h3>\n<p>You can either install the package using <code>pip</code>:</p>\n<pre><code>pip3 install pyoneer-vsx\n</code></pre>\n<p>or clone the repo and install/run it from the source.</p>\n<h3>Receiver</h3>\n<p>Connect your receiver to your network and ensure it has a static IP address either via the <code>System Setup &gt; Network Setup</code> menu on the receiver itself, or by assigning it a fixed address on your router.</p>\n<p>Also make sure you enable the <code>Network Standby</code> feature (also found in the <code>Network Setup</code> menu) so we can still connect to the receiver even when it is powered off.</p>\n<h2>Testing</h2>\n<p>I have exclusively tested this with a VSX-822 and a VSX-1121, but any other Pioneer VSX series receiver (and possibly others) should work.</p>\n<p>If download the code you can run the following command, substituting in the IP and port as needed:</p>\n<pre><code>python3 test_harness.py --host IP_ADDRESS --port PORT\n</code></pre>\n<p>This will attempt to connect to the receiver, turn it on, select a few different inputs, then turn it off, all with very verbose logging. At the end, your receiver should be off and when you turn it back on it should be set to the Blu-ray/BD input.</p>\n<h2>Caveats</h2>\n<p>Due to the persistent connection described above, using this package will prevent any other applications/services, such as iOS or Android control apps, from connecting to the receiver.</p>\n\n          </div>"}, "last_serial": 4879510, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a003d3643c7b40599a2c7100c61ed729", "sha256": "c81eb72a30a24b4ff7b7db6039bb4af678d45404f5c6f4769fabe05f0e9e3d96"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a003d3643c7b40599a2c7100c61ed729", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12140, "upload_time": "2019-02-21T21:06:52", "upload_time_iso_8601": "2019-02-21T21:06:52.894960Z", "url": "https://files.pythonhosted.org/packages/6a/dd/db9ca5410e8ba311823e83d919491190aa2249fc66101e2012eecd2ee86c/pyoneer_vsx-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa2bf12561c6b6cbe2b28bab6904bdfd", "sha256": "f30cc4575820793bc8383297388315983345e0bf3fc2e5017952a78381325e73"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fa2bf12561c6b6cbe2b28bab6904bdfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7090, "upload_time": "2019-02-21T21:06:54", "upload_time_iso_8601": "2019-02-21T21:06:54.785649Z", "url": "https://files.pythonhosted.org/packages/35/69/d1dd689aebae9e2169eb975693cc5b0cf3b06694b94760f0cf210df35e7d/pyoneer_vsx-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "326d9ede7ca9e02620c39a264f0270bb", "sha256": "989a5d15e7b2701c0d3bde090a1f632012e6043b76c80da28be8a610163b4b08"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "326d9ede7ca9e02620c39a264f0270bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12459, "upload_time": "2019-02-21T23:06:46", "upload_time_iso_8601": "2019-02-21T23:06:46.459822Z", "url": "https://files.pythonhosted.org/packages/e9/59/8657597318752c1f777afe302b349a343156b7db1cf97528e1cc6f4a118d/pyoneer_vsx-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3138cb8b0d2fd7236b955aed48fff2d3", "sha256": "fc35fabb328d1873ad95f453c6a56b4f29ecea3be29c7450d43c8f302855d5b4"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3138cb8b0d2fd7236b955aed48fff2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7405, "upload_time": "2019-02-21T23:06:47", "upload_time_iso_8601": "2019-02-21T23:06:47.988838Z", "url": "https://files.pythonhosted.org/packages/5b/59/8627e4cf61499cd2a50778e66966d4ee466b8c1fbbceef21a4f7e223eaac/pyoneer_vsx-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "25dbc985c901189c53a767587b3e679d", "sha256": "3643b87f41f2c8135cccc792e626a51e38d691beafec0ffac8f9a8ec50c1c669"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25dbc985c901189c53a767587b3e679d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12325, "upload_time": "2019-02-28T14:27:30", "upload_time_iso_8601": "2019-02-28T14:27:30.513167Z", "url": "https://files.pythonhosted.org/packages/18/79/5d91404fb0a1bcbaef8f41af73d88f6ece1c8c5eb087ffa21ec030cbbc08/pyoneer_vsx-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d5d4682978ddb6da93aeee17ca2a59", "sha256": "0863c5b78544f354433c79e5d16f68abb9aa173822ad14fbc90b17821c750f4a"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b4d5d4682978ddb6da93aeee17ca2a59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7341, "upload_time": "2019-02-28T14:27:32", "upload_time_iso_8601": "2019-02-28T14:27:32.064821Z", "url": "https://files.pythonhosted.org/packages/15/11/260fa45c182f33cf72da976891c5a1ec8ce1b444067bbfa0eb8053f6f9be/pyoneer_vsx-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25dbc985c901189c53a767587b3e679d", "sha256": "3643b87f41f2c8135cccc792e626a51e38d691beafec0ffac8f9a8ec50c1c669"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25dbc985c901189c53a767587b3e679d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12325, "upload_time": "2019-02-28T14:27:30", "upload_time_iso_8601": "2019-02-28T14:27:30.513167Z", "url": "https://files.pythonhosted.org/packages/18/79/5d91404fb0a1bcbaef8f41af73d88f6ece1c8c5eb087ffa21ec030cbbc08/pyoneer_vsx-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d5d4682978ddb6da93aeee17ca2a59", "sha256": "0863c5b78544f354433c79e5d16f68abb9aa173822ad14fbc90b17821c750f4a"}, "downloads": -1, "filename": "pyoneer_vsx-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b4d5d4682978ddb6da93aeee17ca2a59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7341, "upload_time": "2019-02-28T14:27:32", "upload_time_iso_8601": "2019-02-28T14:27:32.064821Z", "url": "https://files.pythonhosted.org/packages/15/11/260fa45c182f33cf72da976891c5a1ec8ce1b444067bbfa0eb8053f6f9be/pyoneer_vsx-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:16 2020"}