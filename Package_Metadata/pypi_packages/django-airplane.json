{"info": {"author": "Christopher Trudeau", "author_email": "ctrudeau+pypi@arsensa.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-airplane\n***************\n\nThis app is to help in those situations where you can't get on the network but\nyou want to write some Django code.  Surround your static CDN references (like\njquery and the like) with this template tag and when you turn it on the URLs\nwill be re-written from a local copy.\n\nInstallation\n============\n\nIn your settings file, add 'airplane' to your ``settings.INSTALLED_APPS`` field:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'airplane',\n    )\n\nAlso in settings, make the following additions:\n\n.. code-block:: python\n\n    import airplane\n\n    STATICFILES_DIRS = (\n        airplane.cache_path(),\n    )\n\n    AIRPLANE_MODE = airplane.BUILD_CACHE\n    #AIRPLANE_MODE = airplane.USE_CACHE\n    #AIRPLANE_MODE = airplane.AUTO_CACHE\n\nNow use the ``airplane`` tag in your templates\n\n.. code-block:: html\n\n    {% load airplanetags %}\n\n    <html>\n        <head>\n            <link rel=\"stylesheet\"\n                href=\"{% airplane 'https://maxcdn.bootstrapcdn.com/bootstrap.min.css' %}\">\n        </head>\n    </html>\n\nChange the ``AIRPLANE_MODE`` setting to ``airplane.USE_CACHE`` and subsequent\ncalls to the ``{% airplane %}`` tag will return a reference to the locally \ncached version.\n\n\nSettings\n========\n\nAirplane only does something if ``DEBUG=True`` and if you have an\n``AIRPLANE_MODE`` value set to ``airplane.BUILD_CACHE``,\n``airplane.USE_CACHE``, or ``airplane.AUTO_CACHE``.  If one of these\nconditions is not met, the tag simply returns the value passed in.\n\nFor example, if ``DEBUG=False`` and your template contains:\n\n.. code-block:: html\n\n    <link rel=\"stylesheet\"\n        href=\"{% airplane 'https://maxcdn.bootstrapcdn.com/bootstrap.min.css' %}\">\n\n\nThen the above snippet renders as:\n\n.. code-block:: html\n\n    <link rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap.min.css\">\n\n\nWhen ``AIRPLANE_MODE`` is set to ``airplane.BUILD_CACHE`` any URLs passed in\nare fetched and their contents added to a local cache.  The default local\ncache is ``.airport_cache`` relative to the base directory of your project.\n\nYou can change the location of the cache by setting ``AIRPLANE_CACHE``.  The\nsetting accepts either fully qualified paths or paths relative to the\nproject's base directory.\n\n.. code-block:: python\n\n    # settings.py\n\n    AIRPLANE_CACHE = /foo/bar/cache     # fully qualified\n\n    # or\n\n    AIRPLANE_CACHE = my_cache           # relative to settings.BASE_DIR\n\n    # or nothing, defaults to settings.BASEDIR + '.airplane_cache'\n\n\nOnce you have cached all the files you are using, switch ``AIRPLANE_MODE`` to\n``airplane.USE_CACHE``.  All URLs are now re-written to point to the contents\nof the local cache.\n\nAlternatively, you can set ``AIRPLANE_MODE`` to ``airplane.AUTO_CACHE`` and\nthe first call will cache the file and subsequent calls will use the cached\ncopy.\n\nCommands\n========\n\nThe following django commands come with airplane.\n\nairinfo\n-------\n\n.. code-block:: sh\n\n    $ ./manage.py airinfo\n    Cache mode: AUTO_CACHE\n    Cache directory: /Users/foo/sample_site/.airplane_cache\n    Cache contents:\n       https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\n\n\nThis command takes no arguments and displays information about the cache. The\ncurrent mode, the path of the directory and any items cached inside are shown.\n\n\naircache\n--------\n\n.. code-block:: sh\n\n    ./manage.py aircache https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\n\nThis command takes a single URL as an argument and caches the contents of the\nURL.\n\nSchemaless URLs\n===============\n\nAs airplane is a template tag library, it doesn't have access to the request\nobject at execution. In order to allow schemaless URLs, the code makes the\nassumption that the schema is \"https\" if it is not given in the URL.\n\nLimitations\n===========\n\nThe intent of this library is to help you when you're using the Django\ndebugging server and in a situation where you can't easily get to the network.\nCached files are served using the django static server code, which means you\nare limited by what kinds of files it can serve. The static server makes\nguesses on the mimetype of the file based on file extensions. Airplane naively\ncopies the extension of the file so the cached file has the same ending. This\nmeans URLs with weird extensions or those which static serve cannot guess at\nmimetype, will cause problems. It is not recommended to use django-airplane\nwith files that don't end in typical extensions such as \".css\", \".js\", \".jpg\",\n\".png\" or \".gif\".\n\n\nSupports\n========\n\ndjango-airplane has been tested with:\n\n* Python 3.6, 3.7 and Django 2.2\n* Python 3.6, 3.7 and Django 3.0\n\nDocs\n====\n\nDocs available at: http://django-airplane.readthedocs.io/en/latest/\n\nSource: https://github.com/cltrudeau/django-airplane\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cltrudeau/django-airplane", "keywords": "django,cache,offline,CDN,static", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-airplane", "package_url": "https://pypi.org/project/django-airplane/", "platform": "", "project_url": "https://pypi.org/project/django-airplane/", "project_urls": {"Homepage": "https://github.com/cltrudeau/django-airplane"}, "release_url": "https://pypi.org/project/django-airplane/1.1.0/", "requires_dist": ["Django (>=2.2.10)", "requests (>=2.23)"], "requires_python": "", "summary": "Django app that caches CDN files for use when coding offline", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This app is to help in those situations where you can\u2019t get on the network but\nyou want to write some Django code.  Surround your static CDN references (like\njquery and the like) with this template tag and when you turn it on the URLs\nwill be re-written from a local copy.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>In your settings file, add \u2018airplane\u2019 to your <tt>settings.INSTALLED_APPS</tt> field:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'airplane'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Also in settings, make the following additions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">airplane</span>\n\n<span class=\"n\">STATICFILES_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">airplane</span><span class=\"o\">.</span><span class=\"n\">cache_path</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">AIRPLANE_MODE</span> <span class=\"o\">=</span> <span class=\"n\">airplane</span><span class=\"o\">.</span><span class=\"n\">BUILD_CACHE</span>\n<span class=\"c1\">#AIRPLANE_MODE = airplane.USE_CACHE</span>\n<span class=\"c1\">#AIRPLANE_MODE = airplane.AUTO_CACHE</span>\n</pre>\n<p>Now use the <tt>airplane</tt> tag in your templates</p>\n<pre>{% load airplanetags %}\n\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span>\n            <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{% airplane 'https://maxcdn.bootstrapcdn.com/bootstrap.min.css' %}\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Change the <tt>AIRPLANE_MODE</tt> setting to <tt>airplane.USE_CACHE</tt> and subsequent\ncalls to the <tt>{% airplane %}</tt> tag will return a reference to the locally\ncached version.</p>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>Airplane only does something if <tt>DEBUG=True</tt> and if you have an\n<tt>AIRPLANE_MODE</tt> value set to <tt>airplane.BUILD_CACHE</tt>,\n<tt>airplane.USE_CACHE</tt>, or <tt>airplane.AUTO_CACHE</tt>.  If one of these\nconditions is not met, the tag simply returns the value passed in.</p>\n<p>For example, if <tt>DEBUG=False</tt> and your template contains:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span>\n    <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{% airplane 'https://maxcdn.bootstrapcdn.com/bootstrap.min.css' %}\"</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Then the above snippet renders as:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span>\n    <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://maxcdn.bootstrapcdn.com/bootstrap.min.css\"</span><span class=\"p\">&gt;</span>\n</pre>\n<p>When <tt>AIRPLANE_MODE</tt> is set to <tt>airplane.BUILD_CACHE</tt> any URLs passed in\nare fetched and their contents added to a local cache.  The default local\ncache is <tt>.airport_cache</tt> relative to the base directory of your project.</p>\n<p>You can change the location of the cache by setting <tt>AIRPLANE_CACHE</tt>.  The\nsetting accepts either fully qualified paths or paths relative to the\nproject\u2019s base directory.</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">AIRPLANE_CACHE</span> <span class=\"o\">=</span> <span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"o\">/</span><span class=\"n\">bar</span><span class=\"o\">/</span><span class=\"n\">cache</span>     <span class=\"c1\"># fully qualified</span>\n\n<span class=\"c1\"># or</span>\n\n<span class=\"n\">AIRPLANE_CACHE</span> <span class=\"o\">=</span> <span class=\"n\">my_cache</span>           <span class=\"c1\"># relative to settings.BASE_DIR</span>\n\n<span class=\"c1\"># or nothing, defaults to settings.BASEDIR + '.airplane_cache'</span>\n</pre>\n<p>Once you have cached all the files you are using, switch <tt>AIRPLANE_MODE</tt> to\n<tt>airplane.USE_CACHE</tt>.  All URLs are now re-written to point to the contents\nof the local cache.</p>\n<p>Alternatively, you can set <tt>AIRPLANE_MODE</tt> to <tt>airplane.AUTO_CACHE</tt> and\nthe first call will cache the file and subsequent calls will use the cached\ncopy.</p>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>The following django commands come with airplane.</p>\n<div id=\"airinfo\">\n<h3>airinfo</h3>\n<pre>$ ./manage.py airinfo\nCache mode: AUTO_CACHE\nCache directory: /Users/foo/sample_site/.airplane_cache\nCache contents:\n   https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\n</pre>\n<p>This command takes no arguments and displays information about the cache. The\ncurrent mode, the path of the directory and any items cached inside are shown.</p>\n</div>\n<div id=\"aircache\">\n<h3>aircache</h3>\n<pre>./manage.py aircache https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\n</pre>\n<p>This command takes a single URL as an argument and caches the contents of the\nURL.</p>\n</div>\n</div>\n<div id=\"schemaless-urls\">\n<h2>Schemaless URLs</h2>\n<p>As airplane is a template tag library, it doesn\u2019t have access to the request\nobject at execution. In order to allow schemaless URLs, the code makes the\nassumption that the schema is \u201chttps\u201d if it is not given in the URL.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>The intent of this library is to help you when you\u2019re using the Django\ndebugging server and in a situation where you can\u2019t easily get to the network.\nCached files are served using the django static server code, which means you\nare limited by what kinds of files it can serve. The static server makes\nguesses on the mimetype of the file based on file extensions. Airplane naively\ncopies the extension of the file so the cached file has the same ending. This\nmeans URLs with weird extensions or those which static serve cannot guess at\nmimetype, will cause problems. It is not recommended to use django-airplane\nwith files that don\u2019t end in typical extensions such as \u201c.css\u201d, \u201c.js\u201d, \u201c.jpg\u201d,\n\u201c.png\u201d or \u201c.gif\u201d.</p>\n</div>\n<div id=\"supports\">\n<h2>Supports</h2>\n<p>django-airplane has been tested with:</p>\n<ul>\n<li>Python 3.6, 3.7 and Django 2.2</li>\n<li>Python 3.6, 3.7 and Django 3.0</li>\n</ul>\n</div>\n<div id=\"docs\">\n<h2>Docs</h2>\n<p>Docs available at: <a href=\"http://django-airplane.readthedocs.io/en/latest/\" rel=\"nofollow\">http://django-airplane.readthedocs.io/en/latest/</a></p>\n<p>Source: <a href=\"https://github.com/cltrudeau/django-airplane\" rel=\"nofollow\">https://github.com/cltrudeau/django-airplane</a></p>\n</div>\n\n          </div>"}, "last_serial": 6843173, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d49dc4f44c32f73d56ebaf7927c7f21d", "sha256": "625bb146b5a424ff5ecaeeb08be8afdf36da181527ed81122e101a3dc748fcae"}, "downloads": -1, "filename": "django_airplane-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d49dc4f44c32f73d56ebaf7927c7f21d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7400, "upload_time": "2017-03-27T00:33:07", "upload_time_iso_8601": "2017-03-27T00:33:07.868826Z", "url": "https://files.pythonhosted.org/packages/9c/4c/c914fb217a3e87f6e64c481a00373a6695dcaf17b7b322d33bc83fda743b/django_airplane-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6e25d3d5ac7a923544ba71e30b4456b", "sha256": "4dff2cad2bf9bb9ad65f3ddb0c85127f1a54079e4d96d0a321d3ca5fe231e8b4"}, "downloads": -1, "filename": "django-airplane-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e6e25d3d5ac7a923544ba71e30b4456b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5138, "upload_time": "2017-03-27T00:33:10", "upload_time_iso_8601": "2017-03-27T00:33:10.120957Z", "url": "https://files.pythonhosted.org/packages/7c/78/0a2cc429164fc0dc5150ef0f6aae7a1a08b43bf5dd47c2ed2d7b61404a7b/django-airplane-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0703284562ba5e649abbaccfd23bd0d9", "sha256": "02a017e7bd1dc056161f380cbf64d08bbc49bd1627738cf92fd16c27e4714ca3"}, "downloads": -1, "filename": "django_airplane-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0703284562ba5e649abbaccfd23bd0d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7406, "upload_time": "2017-03-27T00:45:23", "upload_time_iso_8601": "2017-03-27T00:45:23.841008Z", "url": "https://files.pythonhosted.org/packages/4e/30/f406760eecf5f2f0478a87f94765e8dc133906a5ec3f75c48dfe2f8b1545/django_airplane-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd51ab6b6b38ff21a46393b1fe063485", "sha256": "2b95d3652dd5f2476041d960da24ec046432ece4e91e873d0d813524df4a6154"}, "downloads": -1, "filename": "django-airplane-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fd51ab6b6b38ff21a46393b1fe063485", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5149, "upload_time": "2017-03-27T00:45:25", "upload_time_iso_8601": "2017-03-27T00:45:25.514517Z", "url": "https://files.pythonhosted.org/packages/d3/be/37795a7ba93049f04698a3c8aba9d7cc8038abab93c2461cce2500e8c015/django-airplane-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4be5c078d3bdb423deb5651631c00920", "sha256": "a3a1ff98ad77ccea1cf49effb3a35ce1cdf1cdc091a0682e2303032a58390a1f"}, "downloads": -1, "filename": "django_airplane-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4be5c078d3bdb423deb5651631c00920", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9736, "upload_time": "2017-12-20T00:26:46", "upload_time_iso_8601": "2017-12-20T00:26:46.439246Z", "url": "https://files.pythonhosted.org/packages/6b/2a/f3f7bcdab8dcceec608c1b0093363bfa86021ab26a95b39f8db6f01ad889/django_airplane-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ddabb5722e732822ffe964efeced19c", "sha256": "0c70463fa273eae8ae0cefdbb12c695267286b7f1b29f4da57008572de600075"}, "downloads": -1, "filename": "django-airplane-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7ddabb5722e732822ffe964efeced19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6196, "upload_time": "2017-12-20T00:26:47", "upload_time_iso_8601": "2017-12-20T00:26:47.753659Z", "url": "https://files.pythonhosted.org/packages/61/25/5c3dadbec3c6abaa319d98470823aa711e8ce849c1f2621f1c98a8702e70/django-airplane-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fd19a0fd5533f8fecf8dd4e65c8a8120", "sha256": "62fae9dfd5d857467aee2ff740124051b5ddadd8c537bb2776ee800bccb04a36"}, "downloads": -1, "filename": "django_airplane-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd19a0fd5533f8fecf8dd4e65c8a8120", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9765, "upload_time": "2018-10-28T15:34:38", "upload_time_iso_8601": "2018-10-28T15:34:38.684733Z", "url": "https://files.pythonhosted.org/packages/c9/6b/fe0578fa258972561dd470bd2903f97cb253819a92778351b62f337e1be1/django_airplane-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63e4cc20645144b2d88513d4a75cc803", "sha256": "67fe2f48e0295749785de25976d8e13a7b19e5ca5a51751f86f024d89303a024"}, "downloads": -1, "filename": "django-airplane-0.3.0.tar.gz", "has_sig": false, "md5_digest": "63e4cc20645144b2d88513d4a75cc803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6227, "upload_time": "2018-10-28T15:34:40", "upload_time_iso_8601": "2018-10-28T15:34:40.310603Z", "url": "https://files.pythonhosted.org/packages/44/98/6788cb0891e7264261e482f10de5c0def5e0ff95562072156c46750c95d1/django-airplane-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "544fe6aae41d27d1a463a0573f47d07e", "sha256": "38da0476b283e7e5f00b100ea92bfc5f7ac71497fe091c7351aedb5f9ecc7788"}, "downloads": -1, "filename": "django_airplane-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "544fe6aae41d27d1a463a0573f47d07e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8336, "upload_time": "2019-07-24T15:24:22", "upload_time_iso_8601": "2019-07-24T15:24:22.259765Z", "url": "https://files.pythonhosted.org/packages/bc/91/a0d9a72f6a30096372e373ea4f7a554ecb352d7cbc0261c57a9e3cb9b287/django_airplane-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00502e08ee97c04a03b87d38e14f694f", "sha256": "95f6c4d35e7684fb459c102b5b6380b9b1bb5db802b6aca2834a36f6d079a9ea"}, "downloads": -1, "filename": "django-airplane-0.3.1.tar.gz", "has_sig": false, "md5_digest": "00502e08ee97c04a03b87d38e14f694f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6133, "upload_time": "2019-07-24T15:24:23", "upload_time_iso_8601": "2019-07-24T15:24:23.487423Z", "url": "https://files.pythonhosted.org/packages/2d/31/23a248735147ca222c6cbf795f1a50d5fa0b09dcc3404e8d009e9de7256f/django-airplane-0.3.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c9e8430dccb6cf41e037e7495fb1e181", "sha256": "3ea6595b5edcedd0a8b5cafc81585dae260fcc7fb14bff84744ea821392ad748"}, "downloads": -1, "filename": "django_airplane-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9e8430dccb6cf41e037e7495fb1e181", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9260, "upload_time": "2020-02-12T17:51:09", "upload_time_iso_8601": "2020-02-12T17:51:09.038435Z", "url": "https://files.pythonhosted.org/packages/5f/48/05f20efd1c370bd717565c1931f3929b006f63cca7715e6ec30a1aef57db/django_airplane-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "061f25feb4688835f9c3570923798a2d", "sha256": "0f5985be127039a9c68a8e2c1083e9d86d22e4e60a5049a9bfa46da0daa1e379"}, "downloads": -1, "filename": "django-airplane-1.0.0.tar.gz", "has_sig": false, "md5_digest": "061f25feb4688835f9c3570923798a2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7945, "upload_time": "2020-02-12T17:51:10", "upload_time_iso_8601": "2020-02-12T17:51:10.662989Z", "url": "https://files.pythonhosted.org/packages/4e/93/ecfae7a2ddbc358b3d5289abaafc84a8fa9adb713e4b54d76c3944938a06/django-airplane-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "32b7755eb052ff2d6c8597adf28c3473", "sha256": "be0c6d267a17c77c5def3e933aa09100664cf4b74e4c17ba1a34e31ce3372285"}, "downloads": -1, "filename": "django_airplane-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32b7755eb052ff2d6c8597adf28c3473", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10709, "upload_time": "2020-03-19T13:38:04", "upload_time_iso_8601": "2020-03-19T13:38:04.065301Z", "url": "https://files.pythonhosted.org/packages/4c/ef/84cdeb65d7e08e100d81a91aeb032781dba17c27dce89c2226e31efa3f12/django_airplane-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e2c48d17dc67c9afbe340f536f2afe1", "sha256": "a7e69b5fa642bcfda596b326e42e0919013781778ad3bac0c4c459bdb908915e"}, "downloads": -1, "filename": "django-airplane-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0e2c48d17dc67c9afbe340f536f2afe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9976, "upload_time": "2020-03-19T13:38:05", "upload_time_iso_8601": "2020-03-19T13:38:05.617110Z", "url": "https://files.pythonhosted.org/packages/8e/ed/03a711d352f1efc29ceb15c09b4b4de805e704954ac7ab21b31fa127889d/django-airplane-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32b7755eb052ff2d6c8597adf28c3473", "sha256": "be0c6d267a17c77c5def3e933aa09100664cf4b74e4c17ba1a34e31ce3372285"}, "downloads": -1, "filename": "django_airplane-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "32b7755eb052ff2d6c8597adf28c3473", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10709, "upload_time": "2020-03-19T13:38:04", "upload_time_iso_8601": "2020-03-19T13:38:04.065301Z", "url": "https://files.pythonhosted.org/packages/4c/ef/84cdeb65d7e08e100d81a91aeb032781dba17c27dce89c2226e31efa3f12/django_airplane-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e2c48d17dc67c9afbe340f536f2afe1", "sha256": "a7e69b5fa642bcfda596b326e42e0919013781778ad3bac0c4c459bdb908915e"}, "downloads": -1, "filename": "django-airplane-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0e2c48d17dc67c9afbe340f536f2afe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9976, "upload_time": "2020-03-19T13:38:05", "upload_time_iso_8601": "2020-03-19T13:38:05.617110Z", "url": "https://files.pythonhosted.org/packages/8e/ed/03a711d352f1efc29ceb15c09b4b4de805e704954ac7ab21b31fa127889d/django-airplane-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:44 2020"}