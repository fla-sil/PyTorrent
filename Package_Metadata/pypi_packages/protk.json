{"info": {"author": "Scott Gruenewald", "author_email": "s.gruenewald.work@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# ```protk```\n\nprotk is a library which uses SQL and tkinter to produce an interface.\n\nThis project was born of a need to create desktop applications at the law firm I worked at.\n\nInitially, this role was a side-gig focused on producing results quickly rather than working smartly.\n\nConsequently, most of my applications were quick and dirty, especially the interface.\n\nThrough constantly expanding my application with new features, it became apparent that the amount of code was going to slow down the load time for the .exe application I created using pyinstaller.\n\nprotk is packaged with a sqlite3 .db file. By default, this file is used to create the \"demo\" interface.\n\n# *module*  ```window```\n### *class* ```window(title=\"Title Unset\", menu_on=True, icon=None)```\nCall ```window``` class and set ```title``` what you like. If ```menu_on``` is ```False```, the menu will be hidden. Icon for the application can be determined by setting ```icon``` equal to a path to a .ico file.\n\n# *module*  ```starter```\nCalls the ```window``` class. Starts the application when clicked.\n\n\n# *module*  ```sqlconnection```\n Currently, only MySQL and sqlite3 are supported. sqlite3 is the default configuration.\n### *definition* ```sql_flag```\nThe default for ```sql_flag``` is \"sqlite3\". This enables protk to work with the Python standard library. If you desire to use MySQL, set the flag to \"mysql\". These are the only options supported.\n### *function* ```protk_connection()```\nThe connection function returns a connection to the designated protk database. If using sqlite3, nothing needs to be configured.<br><br>\nIf using MySQL, enter your credentials under the ```mysqlconnection``` function.\n### *function* ```query(connection=False,  _dict=False, options=None)```\nBy default, the result returned is the standard SQL result of the query.<br><br>\nIf ```_dict``` is set to ```True```, it will return your query as an array of dictionaries. The top-level dictionary's keys are unique integers, the values are dictionaries containing the data you desire. The end result looks like: ```{1: {\"column_1\":\"data\", \"column_2\":\"data\"}, 2: {\"column_1\":\"data\", \"column_2\":\"data\"}}```.<br><br>\nIf ```connection``` is set to ```False```, it establishes the database connection, creates the cursor, executes the query, commits the changes, and closes both the cursor and connection. If you set ```connection``` to a mysql or sqlite3 connection object, it will use that connection to create a cursor, execute the query, and close the cursor. You are responsible for committing changes and closing the connection.\n### *function* ```edit(connection=False, options=None)```\nSimilar to ```query```, but no option for ```_dict```.\n# *module* ```dbsetup```\nOnly necessary when setting up MySQL. If configuring MySQL, follow the instructions above, and then run this file. It will install the tables and insert demo data onto the tables. Demo data is taken from the sqlite3 .db file.\n# *module* ```tableconfig```\nThis is where the default table configuration is stored. For now, it's stored in an array. It was derived from an earlier project where a script analyzed the database and applied any changes to it. This will be updated to look \"proper\" soon.\n\n\n# The Rest of the library\nThe rest of the library is a collection of modules which either contain tkinter widgets or aid in configuring the widgets. I will be detailing them more thoroughly at a later date.\n\nAs they are derived from tkinter, the [Effbot Documentation](https://www.google.com \"Effbot Documentation\") for tkinter is helpful.\n\n\n# MySQL Setup Quick Start:\n1. You'll need to ```pip install mysql-connector``` if not already done.\n2. Open protk\\sqlconnection\n3. Change ```sql_flag``` to \"mysql\" or change the code around so \"mysql\" is below \"sqlite3\".\n4. Locate ```mysql_connection``` and enter your credentials for the database you are trying to connect to.\n\n\n# Next Steps:\n1. Map out Menu Items (started)\n2. Create pages for Setup>Interface>Menus and Setup>Interface>Widgets. These pages will allow an end-user to edit the menu and link widgets to the menus.\n3. Build in features from older programs (automated and manual document sorting, case searching, displaying case info)\n4. Fill in the rest of the program to create functional case management software.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scottgruenewald/protk", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "protk", "package_url": "https://pypi.org/project/protk/", "platform": "", "project_url": "https://pypi.org/project/protk/", "project_urls": {"Homepage": "https://github.com/scottgruenewald/protk"}, "release_url": "https://pypi.org/project/protk/1.2/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>protk</code></h1>\n<p>protk is a library which uses SQL and tkinter to produce an interface.</p>\n<p>This project was born of a need to create desktop applications at the law firm I worked at.</p>\n<p>Initially, this role was a side-gig focused on producing results quickly rather than working smartly.</p>\n<p>Consequently, most of my applications were quick and dirty, especially the interface.</p>\n<p>Through constantly expanding my application with new features, it became apparent that the amount of code was going to slow down the load time for the .exe application I created using pyinstaller.</p>\n<p>protk is packaged with a sqlite3 .db file. By default, this file is used to create the \"demo\" interface.</p>\n<h1><em>module</em>  <code>window</code></h1>\n<h3><em>class</em> <code>window(title=\"Title Unset\", menu_on=True, icon=None)</code></h3>\n<p>Call <code>window</code> class and set <code>title</code> what you like. If <code>menu_on</code> is <code>False</code>, the menu will be hidden. Icon for the application can be determined by setting <code>icon</code> equal to a path to a .ico file.</p>\n<h1><em>module</em>  <code>starter</code></h1>\n<p>Calls the <code>window</code> class. Starts the application when clicked.</p>\n<h1><em>module</em>  <code>sqlconnection</code></h1>\n<p>Currently, only MySQL and sqlite3 are supported. sqlite3 is the default configuration.</p>\n<h3><em>definition</em> <code>sql_flag</code></h3>\n<p>The default for <code>sql_flag</code> is \"sqlite3\". This enables protk to work with the Python standard library. If you desire to use MySQL, set the flag to \"mysql\". These are the only options supported.</p>\n<h3><em>function</em> <code>protk_connection()</code></h3>\n<p>The connection function returns a connection to the designated protk database. If using sqlite3, nothing needs to be configured.<br><br>\nIf using MySQL, enter your credentials under the <code>mysqlconnection</code> function.</p>\n<h3><em>function</em> <code>query(connection=False, _dict=False, options=None)</code></h3>\n<p>By default, the result returned is the standard SQL result of the query.<br><br>\nIf <code>_dict</code> is set to <code>True</code>, it will return your query as an array of dictionaries. The top-level dictionary's keys are unique integers, the values are dictionaries containing the data you desire. The end result looks like: <code>{1: {\"column_1\":\"data\", \"column_2\":\"data\"}, 2: {\"column_1\":\"data\", \"column_2\":\"data\"}}</code>.<br><br>\nIf <code>connection</code> is set to <code>False</code>, it establishes the database connection, creates the cursor, executes the query, commits the changes, and closes both the cursor and connection. If you set <code>connection</code> to a mysql or sqlite3 connection object, it will use that connection to create a cursor, execute the query, and close the cursor. You are responsible for committing changes and closing the connection.</p>\n<h3><em>function</em> <code>edit(connection=False, options=None)</code></h3>\n<p>Similar to <code>query</code>, but no option for <code>_dict</code>.</p>\n<h1><em>module</em> <code>dbsetup</code></h1>\n<p>Only necessary when setting up MySQL. If configuring MySQL, follow the instructions above, and then run this file. It will install the tables and insert demo data onto the tables. Demo data is taken from the sqlite3 .db file.</p>\n<h1><em>module</em> <code>tableconfig</code></h1>\n<p>This is where the default table configuration is stored. For now, it's stored in an array. It was derived from an earlier project where a script analyzed the database and applied any changes to it. This will be updated to look \"proper\" soon.</p>\n<h1>The Rest of the library</h1>\n<p>The rest of the library is a collection of modules which either contain tkinter widgets or aid in configuring the widgets. I will be detailing them more thoroughly at a later date.</p>\n<p>As they are derived from tkinter, the <a href=\"https://www.google.com\" rel=\"nofollow\" title=\"Effbot Documentation\">Effbot Documentation</a> for tkinter is helpful.</p>\n<h1>MySQL Setup Quick Start:</h1>\n<ol>\n<li>You'll need to <code>pip install mysql-connector</code> if not already done.</li>\n<li>Open protk\\sqlconnection</li>\n<li>Change <code>sql_flag</code> to \"mysql\" or change the code around so \"mysql\" is below \"sqlite3\".</li>\n<li>Locate <code>mysql_connection</code> and enter your credentials for the database you are trying to connect to.</li>\n</ol>\n<h1>Next Steps:</h1>\n<ol>\n<li>Map out Menu Items (started)</li>\n<li>Create pages for Setup&gt;Interface&gt;Menus and Setup&gt;Interface&gt;Widgets. These pages will allow an end-user to edit the menu and link widgets to the menus.</li>\n<li>Build in features from older programs (automated and manual document sorting, case searching, displaying case info)</li>\n<li>Fill in the rest of the program to create functional case management software.</li>\n</ol>\n\n          </div>"}, "last_serial": 6325331, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "64aed7c9172498ea77f8a03ea82b7bec", "sha256": "475b44e48b260fb19c9cb338ffac10a04ac2c5e720d37b0a5c9ccccbe9133b50"}, "downloads": -1, "filename": "protk-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "64aed7c9172498ea77f8a03ea82b7bec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1095, "upload_time": "2019-12-18T12:09:40", "upload_time_iso_8601": "2019-12-18T12:09:40.167598Z", "url": "https://files.pythonhosted.org/packages/e3/f5/3c453fa0b80d847599985bb3a476525a13c5927f7a10266b76e88e1dc9d5/protk-1.0-py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6d33cc58a974f0d6b0db079c2158604e", "sha256": "9fe822a5a7fbbd9ad58ba5e0e414c8310be26734bfb4b7f357691b76c142fab0"}, "downloads": -1, "filename": "protk-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6d33cc58a974f0d6b0db079c2158604e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1096, "upload_time": "2019-12-18T12:20:33", "upload_time_iso_8601": "2019-12-18T12:20:33.231001Z", "url": "https://files.pythonhosted.org/packages/a5/5b/fe7493101da0a9043811514247cfbdf78c94bd759a076fe70a0e8499805a/protk-1.1-py3-none-any.whl", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f9920d7397497b6814085e1135e353ca", "sha256": "bbff23b9d9f00ea19f1a37d9a594a94c89e0ee386cb2070e5df6a5f90f2be617"}, "downloads": -1, "filename": "protk-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f9920d7397497b6814085e1135e353ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2920, "upload_time": "2019-12-18T12:23:18", "upload_time_iso_8601": "2019-12-18T12:23:18.383106Z", "url": "https://files.pythonhosted.org/packages/d6/dc/fc7843f3248e13422a5f81a7af53819939371cd941e38a465b2162d20a14/protk-1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9920d7397497b6814085e1135e353ca", "sha256": "bbff23b9d9f00ea19f1a37d9a594a94c89e0ee386cb2070e5df6a5f90f2be617"}, "downloads": -1, "filename": "protk-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f9920d7397497b6814085e1135e353ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2920, "upload_time": "2019-12-18T12:23:18", "upload_time_iso_8601": "2019-12-18T12:23:18.383106Z", "url": "https://files.pythonhosted.org/packages/d6/dc/fc7843f3248e13422a5f81a7af53819939371cd941e38a465b2162d20a14/protk-1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:16:38 2020"}