{"info": {"author": "Simon Brand", "author_email": "simon.brand@postadigitale.de", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Software Development :: Build Tools"], "description": "# btrccts\n## BackTest and Run CryptoCurrency Trading Strategies\n\n### [Install](#install) - [Usage](#usage) - [Manual](#manual) - [Development](#development)\n\nThis library provides an easy way to backtest trading strategies and run them live with ccxt.\nThe purpose of this library is to provide a framework and an backtest exchange with the same\ninterface than ccxt - nothing less and nothing more.\nIf you want an library to compute performance metrics out of trades/orders,\nyou need an additional library.\n\n## Install\n\nThe easiest way to install the BTRCCTS library is to use a package manager:\n\n- https://pypi.org/project/btrccts/\n\nThe python package hashes can be found in the `version_hashes.txt`.\n\nYou can also clone the repository, see [Development](development)\n\n## Usage\n\nFor example algorithms see in [Examples](examples/)\n```python\nfrom btrccts import parse_params_and_execute_algorithm, AlgorithmBase\n\n\nclass Algorithm(AlgorithmBase):\n\n    @staticmethod\n    def configure_argparser(argparser):\n        # Here you can add additional arguments to the argparser\n        argparser.add_argument('--pyramiding', default=1, type=int)\n\n    def __init__(self, context, args):\n        # Context is used to create exchanges or get the current time\n        self._context = context\n        self._args = args\n\n        # This will create a kraken exchange instance\n        # The interface in backtesting and live mode is identical to CCXT.\n        # See: [CCXT](https://github.com/ccxt/ccxt/wiki)\n        # In live mode, this will be a plain ccxt instance of the exchange\n        # The exchange keys will be read from the config directory (see --help)\n        self._kraken = context.create_exchange('kraken')\n        # In live mode, markets are not loaded by the library\n        self._kraken.load_markets()\n\n        # You can access your own defined parameters\n        print('Pyramiding:', args.pyramiding)\n\n        # You can access predefined parameters like exchanges and symbols\n        print('Exchanges:', args.exchanges)\n        print('Symbols:', args.symbols)\n\n    def next_iteration(self):\n        # This method is executed each time interval\n\n        # This is the current context date:\n        print('context date', self._context.date())\n\n        # Use the exchange to load OHLCV data\n        ohlcv_len = 10\n        ohlcv_offset = ohlcv_len * 60 * 1000\n        ohlcv_start = int(self._context.date().value / 1000000 - ohlcv_offset)\n        print(self._kraken.fetch_ohlcv(\n            'BTC/USD', '1m', ohlcv_start, ohlcv_len))\n\n        # Use the exchange to create a market order\n        self._order_id = self._kraken.create_order(\n            type='market', side='buy', symbol='BTC/USD', amount=0.1)\n\n        # If you want to stop the algorithm in context or live mode, you can\n        # do this:\n        self._context.stop('stop message')\n\n    def handle_exception(self, e):\n        # This method is called, when next_iteration raises an exception, e.g.\n        # because of an exchange error or a programming error.\n        # If this method raises an exception, the algorith will stop with\n        # reason EXCEPTION\n        # If you are not in live mode, it is advicable to rethrow the\n        # exception to fix the programming error.\n        print(e)\n        if not self._args.live:\n            raise e\n\n    def exit(self, reason):\n        # This method is called, when the algorithm exits and should be used\n        # to cleanup (e.g. cancel open orders).\n        # reason contains information on why the algorithm exits.\n        # e.g. STOPPED, EXCEPTION, FINISHED\n        print(\"Done\", reason)\n\n\n# This method parses commandline parameters (see --help)\n# and runs the Algorithm according to the parameters\nresult = parse_params_and_execute_algorithm(Algorithm)\n# The result is an instance of Algorithm, you can now use saved\n# information or exchanges to benchmark your performance.\nprint(result._kraken.fetch_closed_orders())\n```\n\nTo run this algorithm, just execute the file with python.\ne.g. `.venv/bin/python examples/algo_readme.py --start-date 2017-12-01 --end-date 2017-12-02 --timedelta 1h --exchanges kraken --symbols BTC/USD --start-balances '{\"kraken\": {\"USD\": 10000}}'`\n\nIf you dont want the function to parse commandline parameters for you, you can use\n```python\nfrom btrccts.run import execute_algorithm\nexecute_algorithm(...)\n```\n\n\n## Manual\n\n### Data and directories\n\nRun your algorithm with `--help` to see the path to your config and data directories.\n\nThe data directory contains the ohlcv data:\n`data_directory/ohlcv/EXCHANGE/BASE/QUOTE.csv`\ne.g.\n`data_directory/ohlcv/binance/BTC/USD.csv`\n\nData files are in the following format (readable with `pandas.read_csv`)\n```csv\n,open,high,low,close,volume\n2019-10-01 10:10:00+00:00,200,300,100,300,1000\n2019-10-01 10:11:00+00:00,300,400,200,400,2000\n2019-10-01 10:12:00+00:00,400,500,300,500,3000\n```\nThe data files are not yet provided with this library. You have to provide them yourself.\nThe data file needs to cover the complete period (you want to run the bot) in 1 minute interval.\nYou can specify the period with `--start-date` and `--end-date`.\n\n\nThe config directory contains exchange keys.\ne.g. `config_directory/binance.json`:\n```json\n{\n    \"apiKey\": \"key material\",\n    \"secret\": \"secret stuff\"\n}\n```\nIf an alias is provided (e.g. `--auth-aliases '{\"kraken\": \"kraken_wma\"}'`,\nthe file `config_directory/kraken_wma.json` is used.\n\n\n### Differences between live and backtesting mode\n\n- In backtesting mode the markets from the exchanges are loaded upon exchange creation.\nThis needs to be done, because market information is needed for order handling.\nIn live mode, the markets are not loaded via the library, because the library does not\nknow how you want to handle e.g. errors or reloading the market.\n\n\n### How orders get filled\n\n- Market order\n\nMarket orders are executed immediatly with a price a little worse than current low/high.\nSince we only have ohlcv data, we cannot use the next data, because this would introduce\na look-ahead bias\nSome other backtesting libraries would wait until the next round to fill market orders,\nbut this is not what is happening in the real world (executing market orders immediatly).\n\n- Limit order\n\nLimit orders are filled, when the price is reached. Limit orders get filled\nall at once, there is no volume calculation yet. If your bot uses huge limit orders,\nkeep in mind that the behavior on the exchange can be a partiall fill and leaving the\norder open until filled.\n\n\n### When next round is initiated in live mode / How interval is handled in live mode\n\nWhen the algorithm is started, it will immediatly execute `next_iteration`.\nNow the library waits until the next time interval and executes `next_iteration`.\nIf the `next_iteration` call takes longer than the interval, `next_iteration` is\ncalled immediatly again. If `next_iteration` takes longer than multiple intervals,\nonly the last interval is rescheduled.\n\n## Development\n\nSetup a virtualenv:\n\n```shell\ngit clone git@github.com:btrccts/btrccts.git\npython3 -m venv .venv\n.venv/bin/pip install -r requirements.txt\n.venv/bin/pip install -e . --no-deps\n```\n\n### Run tests\n\nInstall the dev dependencies:\n```shell\n.venv/bin/pip install -e .[dev]\n```\nRun the tests:\n```shell\n.venv/bin/python -m unittest tests/unit/tests.py\n.venv/bin/python -m unittest tests/integration/tests.py\n```\n\n## Contact us\n\nbtrccts@gmail.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/btrccts/btrccts/", "keywords": "btrccts", "license": "", "maintainer": "", "maintainer_email": "", "name": "btrccts", "package_url": "https://pypi.org/project/btrccts/", "platform": "", "project_url": "https://pypi.org/project/btrccts/", "project_urls": {"Homepage": "https://github.com/btrccts/btrccts/"}, "release_url": "https://pypi.org/project/btrccts/0.0.6/", "requires_dist": ["appdirs", "ccxt", "numpy", "pandas", "pycodestyle ; extra == 'dev'", "pyflakes ; extra == 'dev'"], "requires_python": "", "summary": "BackTest and Run CryptoCurrency Trading Strategies", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>btrccts</h1>\n<h2>BackTest and Run CryptoCurrency Trading Strategies</h2>\n<h3><a href=\"#install\" rel=\"nofollow\">Install</a> - <a href=\"#usage\" rel=\"nofollow\">Usage</a> - <a href=\"#manual\" rel=\"nofollow\">Manual</a> - <a href=\"#development\" rel=\"nofollow\">Development</a></h3>\n<p>This library provides an easy way to backtest trading strategies and run them live with ccxt.\nThe purpose of this library is to provide a framework and an backtest exchange with the same\ninterface than ccxt - nothing less and nothing more.\nIf you want an library to compute performance metrics out of trades/orders,\nyou need an additional library.</p>\n<h2>Install</h2>\n<p>The easiest way to install the BTRCCTS library is to use a package manager:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/btrccts/\" rel=\"nofollow\">https://pypi.org/project/btrccts/</a></li>\n</ul>\n<p>The python package hashes can be found in the <code>version_hashes.txt</code>.</p>\n<p>You can also clone the repository, see <a href=\"development\" rel=\"nofollow\">Development</a></p>\n<h2>Usage</h2>\n<p>For example algorithms see in <a href=\"examples/\" rel=\"nofollow\">Examples</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">btrccts</span> <span class=\"kn\">import</span> <span class=\"n\">parse_params_and_execute_algorithm</span><span class=\"p\">,</span> <span class=\"n\">AlgorithmBase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Algorithm</span><span class=\"p\">(</span><span class=\"n\">AlgorithmBase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">configure_argparser</span><span class=\"p\">(</span><span class=\"n\">argparser</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Here you can add additional arguments to the argparser</span>\n        <span class=\"n\">argparser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--pyramiding'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Context is used to create exchanges or get the current time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n\n        <span class=\"c1\"># This will create a kraken exchange instance</span>\n        <span class=\"c1\"># The interface in backtesting and live mode is identical to CCXT.</span>\n        <span class=\"c1\"># See: [CCXT](https://github.com/ccxt/ccxt/wiki)</span>\n        <span class=\"c1\"># In live mode, this will be a plain ccxt instance of the exchange</span>\n        <span class=\"c1\"># The exchange keys will be read from the config directory (see --help)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kraken</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">create_exchange</span><span class=\"p\">(</span><span class=\"s1\">'kraken'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># In live mode, markets are not loaded by the library</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kraken</span><span class=\"o\">.</span><span class=\"n\">load_markets</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># You can access your own defined parameters</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Pyramiding:'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">pyramiding</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># You can access predefined parameters like exchanges and symbols</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Exchanges:'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Symbols:'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">symbols</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">next_iteration</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This method is executed each time interval</span>\n\n        <span class=\"c1\"># This is the current context date:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'context date'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_context</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Use the exchange to load OHLCV data</span>\n        <span class=\"n\">ohlcv_len</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n        <span class=\"n\">ohlcv_offset</span> <span class=\"o\">=</span> <span class=\"n\">ohlcv_len</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span>\n        <span class=\"n\">ohlcv_start</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_context</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">/</span> <span class=\"mi\">1000000</span> <span class=\"o\">-</span> <span class=\"n\">ohlcv_offset</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kraken</span><span class=\"o\">.</span><span class=\"n\">fetch_ohlcv</span><span class=\"p\">(</span>\n            <span class=\"s1\">'BTC/USD'</span><span class=\"p\">,</span> <span class=\"s1\">'1m'</span><span class=\"p\">,</span> <span class=\"n\">ohlcv_start</span><span class=\"p\">,</span> <span class=\"n\">ohlcv_len</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Use the exchange to create a market order</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_order_id</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_kraken</span><span class=\"o\">.</span><span class=\"n\">create_order</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'market'</span><span class=\"p\">,</span> <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">'buy'</span><span class=\"p\">,</span> <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BTC/USD'</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If you want to stop the algorithm in context or live mode, you can</span>\n        <span class=\"c1\"># do this:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_context</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"s1\">'stop message'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_exception</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This method is called, when next_iteration raises an exception, e.g.</span>\n        <span class=\"c1\"># because of an exchange error or a programming error.</span>\n        <span class=\"c1\"># If this method raises an exception, the algorith will stop with</span>\n        <span class=\"c1\"># reason EXCEPTION</span>\n        <span class=\"c1\"># If you are not in live mode, it is advicable to rethrow the</span>\n        <span class=\"c1\"># exception to fix the programming error.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_args</span><span class=\"o\">.</span><span class=\"n\">live</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This method is called, when the algorithm exits and should be used</span>\n        <span class=\"c1\"># to cleanup (e.g. cancel open orders).</span>\n        <span class=\"c1\"># reason contains information on why the algorithm exits.</span>\n        <span class=\"c1\"># e.g. STOPPED, EXCEPTION, FINISHED</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done\"</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This method parses commandline parameters (see --help)</span>\n<span class=\"c1\"># and runs the Algorithm according to the parameters</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">parse_params_and_execute_algorithm</span><span class=\"p\">(</span><span class=\"n\">Algorithm</span><span class=\"p\">)</span>\n<span class=\"c1\"># The result is an instance of Algorithm, you can now use saved</span>\n<span class=\"c1\"># information or exchanges to benchmark your performance.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">_kraken</span><span class=\"o\">.</span><span class=\"n\">fetch_closed_orders</span><span class=\"p\">())</span>\n</pre>\n<p>To run this algorithm, just execute the file with python.\ne.g. <code>.venv/bin/python examples/algo_readme.py --start-date 2017-12-01 --end-date 2017-12-02 --timedelta 1h --exchanges kraken --symbols BTC/USD --start-balances '{\"kraken\": {\"USD\": 10000}}'</code></p>\n<p>If you dont want the function to parse commandline parameters for you, you can use</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">btrccts.run</span> <span class=\"kn\">import</span> <span class=\"n\">execute_algorithm</span>\n<span class=\"n\">execute_algorithm</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h2>Manual</h2>\n<h3>Data and directories</h3>\n<p>Run your algorithm with <code>--help</code> to see the path to your config and data directories.</p>\n<p>The data directory contains the ohlcv data:\n<code>data_directory/ohlcv/EXCHANGE/BASE/QUOTE.csv</code>\ne.g.\n<code>data_directory/ohlcv/binance/BTC/USD.csv</code></p>\n<p>Data files are in the following format (readable with <code>pandas.read_csv</code>)</p>\n<pre>,open,high,low,close,volume\n2019-10-01 10:10:00+00:00,200,300,100,300,1000\n2019-10-01 10:11:00+00:00,300,400,200,400,2000\n2019-10-01 10:12:00+00:00,400,500,300,500,3000\n</pre>\n<p>The data files are not yet provided with this library. You have to provide them yourself.\nThe data file needs to cover the complete period (you want to run the bot) in 1 minute interval.\nYou can specify the period with <code>--start-date</code> and <code>--end-date</code>.</p>\n<p>The config directory contains exchange keys.\ne.g. <code>config_directory/binance.json</code>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"apiKey\"</span><span class=\"p\">:</span> <span class=\"s2\">\"key material\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"secret stuff\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If an alias is provided (e.g. <code>--auth-aliases '{\"kraken\": \"kraken_wma\"}'</code>,\nthe file <code>config_directory/kraken_wma.json</code> is used.</p>\n<h3>Differences between live and backtesting mode</h3>\n<ul>\n<li>In backtesting mode the markets from the exchanges are loaded upon exchange creation.\nThis needs to be done, because market information is needed for order handling.\nIn live mode, the markets are not loaded via the library, because the library does not\nknow how you want to handle e.g. errors or reloading the market.</li>\n</ul>\n<h3>How orders get filled</h3>\n<ul>\n<li>Market order</li>\n</ul>\n<p>Market orders are executed immediatly with a price a little worse than current low/high.\nSince we only have ohlcv data, we cannot use the next data, because this would introduce\na look-ahead bias\nSome other backtesting libraries would wait until the next round to fill market orders,\nbut this is not what is happening in the real world (executing market orders immediatly).</p>\n<ul>\n<li>Limit order</li>\n</ul>\n<p>Limit orders are filled, when the price is reached. Limit orders get filled\nall at once, there is no volume calculation yet. If your bot uses huge limit orders,\nkeep in mind that the behavior on the exchange can be a partiall fill and leaving the\norder open until filled.</p>\n<h3>When next round is initiated in live mode / How interval is handled in live mode</h3>\n<p>When the algorithm is started, it will immediatly execute <code>next_iteration</code>.\nNow the library waits until the next time interval and executes <code>next_iteration</code>.\nIf the <code>next_iteration</code> call takes longer than the interval, <code>next_iteration</code> is\ncalled immediatly again. If <code>next_iteration</code> takes longer than multiple intervals,\nonly the last interval is rescheduled.</p>\n<h2>Development</h2>\n<p>Setup a virtualenv:</p>\n<pre>git clone git@github.com:btrccts/btrccts.git\npython3 -m venv .venv\n.venv/bin/pip install -r requirements.txt\n.venv/bin/pip install -e . --no-deps\n</pre>\n<h3>Run tests</h3>\n<p>Install the dev dependencies:</p>\n<pre>.venv/bin/pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>Run the tests:</p>\n<pre>.venv/bin/python -m unittest tests/unit/tests.py\n.venv/bin/python -m unittest tests/integration/tests.py\n</pre>\n<h2>Contact us</h2>\n<p><a href=\"mailto:btrccts@gmail.com\">btrccts@gmail.com</a></p>\n\n          </div>"}, "last_serial": 6912501, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4e1e1af737823237418b6956cdbd632a", "sha256": "87ef36ab959ac548708053a9859e3813cdf7e5ee59d1a2358eb319ed344d3165"}, "downloads": -1, "filename": "btrccts-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e1e1af737823237418b6956cdbd632a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14823, "upload_time": "2020-02-15T22:54:27", "upload_time_iso_8601": "2020-02-15T22:54:27.972479Z", "url": "https://files.pythonhosted.org/packages/4a/e2/fcd46bf7c4379738a6ef6705df036badf18d8fb2044ce9c7c47149ee4eaa/btrccts-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ee1b5f2377000d7713e718d66589b5d", "sha256": "fbdce5b7b436204fca3aebb2d091ed16b4052e6e3ddbd5295e834d63567463bd"}, "downloads": -1, "filename": "btrccts-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2ee1b5f2377000d7713e718d66589b5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13444, "upload_time": "2020-02-15T22:54:31", "upload_time_iso_8601": "2020-02-15T22:54:31.447880Z", "url": "https://files.pythonhosted.org/packages/b0/22/396ead65497edb9dcf9c3c769140fe3a04c8f4b000407ae870ea339628ba/btrccts-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "828420d0cc0f0e42de2469550e47c88a", "sha256": "8b74c816d80a78853f262669b03b3549ea297e8c6cf6d28f8a11a04a6ccaec43"}, "downloads": -1, "filename": "btrccts-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "828420d0cc0f0e42de2469550e47c88a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17396, "upload_time": "2020-02-15T23:36:42", "upload_time_iso_8601": "2020-02-15T23:36:42.536378Z", "url": "https://files.pythonhosted.org/packages/a3/eb/eb8eff0a95d74e78de86f2908a6a97a919364be6dddea3659c022c98a620/btrccts-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d649d366f83a95a8368d10596fd63783", "sha256": "b58a5ed96686917531ae5039107e41c43a344f0474e53f40cd351cd16403af58"}, "downloads": -1, "filename": "btrccts-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d649d366f83a95a8368d10596fd63783", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16455, "upload_time": "2020-02-15T23:36:44", "upload_time_iso_8601": "2020-02-15T23:36:44.792688Z", "url": "https://files.pythonhosted.org/packages/9c/e1/4d678cc565fc654b9d7d83993f75570f9fd4e588c836c01b3f4c156327d9/btrccts-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e884eda4e5415833713f35dd430c2819", "sha256": "d489c22e6c248e42979bfa4b83235557a4be80b9116bb51b14a0ff8b2814289a"}, "downloads": -1, "filename": "btrccts-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e884eda4e5415833713f35dd430c2819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17472, "upload_time": "2020-02-16T23:49:14", "upload_time_iso_8601": "2020-02-16T23:49:14.263452Z", "url": "https://files.pythonhosted.org/packages/9f/29/879c16a87a107e3d24cf8a47bb973be4244b8346d11f9444260fa16a6a74/btrccts-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c321c5e39e1bcb1845ca9323265a79f", "sha256": "605f12f5db336e2c5c9ced4670ed5c67a370ed1490241c66eb9062b4c1c7461f"}, "downloads": -1, "filename": "btrccts-0.0.4.tar.gz", "has_sig": false, "md5_digest": "2c321c5e39e1bcb1845ca9323265a79f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16682, "upload_time": "2020-02-16T23:49:16", "upload_time_iso_8601": "2020-02-16T23:49:16.097611Z", "url": "https://files.pythonhosted.org/packages/bf/f1/1eb94788196d9356522a378708a1f9eeaea0f43481b0c28b908bd2d42244/btrccts-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8e1c26e542b7966d1030fc2819cc36b0", "sha256": "8f5fa29e443bc36d8be05941fca6e9796a6b6bf2e8573a461af7a2c8a581c04c"}, "downloads": -1, "filename": "btrccts-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8e1c26e542b7966d1030fc2819cc36b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17770, "upload_time": "2020-02-20T19:16:57", "upload_time_iso_8601": "2020-02-20T19:16:57.983316Z", "url": "https://files.pythonhosted.org/packages/58/6d/8f77ea62a1566271c7362acebccde31a9fbaf2ea3c8d071f752961181c37/btrccts-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ca884b119da26a1de959969082f2c56", "sha256": "3abb6472f8989b0fa85190b8c0de2c319a080958f1e49d2234ee16ff39a44a26"}, "downloads": -1, "filename": "btrccts-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9ca884b119da26a1de959969082f2c56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17210, "upload_time": "2020-02-20T19:17:00", "upload_time_iso_8601": "2020-02-20T19:17:00.334071Z", "url": "https://files.pythonhosted.org/packages/32/1a/c376cdfea950a9f88c0790691d6cb8f138990581ff445de3e593ecdf135a/btrccts-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "a37d0b735b713c39ec398c290733681c", "sha256": "b6726ed7d33732c4b923228ab3e1cb73acc53d5be31fc846437c875bbe4d40dd"}, "downloads": -1, "filename": "btrccts-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a37d0b735b713c39ec398c290733681c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17782, "upload_time": "2020-03-30T12:29:29", "upload_time_iso_8601": "2020-03-30T12:29:29.629171Z", "url": "https://files.pythonhosted.org/packages/3e/dc/3c59dca739ea710e07f4c3b025b110ad71270a8d549371507cb2a9960a27/btrccts-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4d436128b5eb1367d625b8bcaa87ccc", "sha256": "3b2da25cf447d5cbaeec82ae418e5a861a5b1a6b01abcfa93f34347a493ac0ce"}, "downloads": -1, "filename": "btrccts-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a4d436128b5eb1367d625b8bcaa87ccc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17255, "upload_time": "2020-03-30T12:29:31", "upload_time_iso_8601": "2020-03-30T12:29:31.439232Z", "url": "https://files.pythonhosted.org/packages/36/8b/103c0ac2a1e41e13204258da1d4e637a316bc06e0e964a5128f9f7eeea3e/btrccts-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a37d0b735b713c39ec398c290733681c", "sha256": "b6726ed7d33732c4b923228ab3e1cb73acc53d5be31fc846437c875bbe4d40dd"}, "downloads": -1, "filename": "btrccts-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a37d0b735b713c39ec398c290733681c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17782, "upload_time": "2020-03-30T12:29:29", "upload_time_iso_8601": "2020-03-30T12:29:29.629171Z", "url": "https://files.pythonhosted.org/packages/3e/dc/3c59dca739ea710e07f4c3b025b110ad71270a8d549371507cb2a9960a27/btrccts-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4d436128b5eb1367d625b8bcaa87ccc", "sha256": "3b2da25cf447d5cbaeec82ae418e5a861a5b1a6b01abcfa93f34347a493ac0ce"}, "downloads": -1, "filename": "btrccts-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a4d436128b5eb1367d625b8bcaa87ccc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17255, "upload_time": "2020-03-30T12:29:31", "upload_time_iso_8601": "2020-03-30T12:29:31.439232Z", "url": "https://files.pythonhosted.org/packages/36/8b/103c0ac2a1e41e13204258da1d4e637a316bc06e0e964a5128f9f7eeea3e/btrccts-0.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:09 2020"}