{"info": {"author": "rocyuan", "author_email": "admin@rocyuan.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "======================================================\n\ndubbo_zookeeper_thrift :\n\nthriftServerManager = ThriftServerManager(\"127.0.0.1:2181\");\nthriftServerManager.getServiceServiceInfo(\"thrift:userService\");\n\n======================================================\n\n\nwhat is inside\n==============================\n\npython_zookeeper_thrift\n::\n * \u4e3a\u4e86dubbo\u800c\u5199\u7684\n * python setup.py register; python setup.py sdist upload\n * \u4e3b\u8981\u662f\u4ecezookeeper\u4e2d\u62ff\u5230\u670d\u52a1\u5668\u8282\u70b9\u4fe1\u606f (ip:port:serviceName)\n * \u4f7f\u5f97\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u53ea\u9700\u8981 serviceName\u5373\u53ef\n\n * `\u4ee5 \u5de5\u5382\u65b9\u6cd5\u66ff\u6362\u4e86iportal\u91cc\u7684 make_client\u8fc7\u7a0b,\u5373\u52a8\u6001\u751f\u6210thrift \u91cc\u7684 make_client()\u4ea7\u751f\u7684\u5b9e\u4f8b`\n\n * ` \u5c06 client\u5b9e\u4f8b\u9759\u6001\u7f13\u5b58,\u5e94\u8be5\u53ef\u4ee5\u52a0\u5febiportal\u7684\u8bbf\u95ee\u6548\u7387 `\n\n\n\n\n * \u8fd9\u4e2a\u9879\u76ee\u6240\u505a\u7684\u4e8b \u5176\u5b9e\u5c31\u662f\u628adubbo\u6e90\u7801\u91cc\u7684\u8fd9\u90e8\u5206\u4ee3\u7801 \u7528python \u5b9e\u73b0\u4e86\u800c\u5df2,\u4ece\u800c\u4f7f\u5f97python\u7684thrift\u5ba2\u6237\u7aef\u7684\u8c03\u7528\n   \u53ef\u4ee5\u8131\u79bbIP\u800c\u5b58\u5728,\u4e0d\u5728\u53bb\u7ba1\u63d0\u4f9b\u670d\u52a1\u63d0\u4f9b\u8005\u7684IP\u548c\u7aef\u53e3\u8fd8\u6709\u662f\u5426\u505c\u6b62\u63d0\u4f9b\u670d\u52a1\n\n\nwhat is next\n==============================\n\n::\n\n    public class ZookeeperRegistry extends FailbackRegistry {\n\n        private final static Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);\n\n        private final static int DEFAULT_ZOOKEEPER_PORT = 2181;\n\n        private final static String DEFAULT_ROOT = \"dubbo\";\n\n        private final String        root;\n\n        private final Set<String> anyServices = new ConcurrentHashSet<String>();\n\n        private final ConcurrentMap<URL, ConcurrentMap<NotifyListener, ChildListener>> zkListeners = new ConcurrentHashMap<URL, ConcurrentMap<NotifyListener, ChildListener>>();\n\n        private final ZookeeperClient zkClient;\n\n        public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {\n            super(url);\n            if (url.isAnyHost()) {\n                throw new IllegalStateException(\"registry address == null\");\n            }\n            String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);\n            if (! group.startsWith(Constants.PATH_SEPARATOR)) {\n                group = Constants.PATH_SEPARATOR + group;\n            }\n            this.root = group;\n            zkClient = zookeeperTransporter.connect(url);\n            zkClient.addStateListener(new StateListener() {\n                public void stateChanged(int state) {\n                    if (state == RECONNECTED) {\n                        try {\n                            recover();\n                        } catch (Exception e) {\n                            logger.error(e.getMessage(), e);\n                        }\n                    }\n                }\n            });\n        }\n\n        public boolean isAvailable() {\n            return zkClient.isConnected();\n        }\n\n        public void destroy() {\n            super.destroy();\n            try {\n                zkClient.close();\n            } catch (Exception e) {\n                logger.warn(\"Failed to close zookeeper client \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doRegister(URL url) {\n            try {\n                zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to register \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doUnregister(URL url) {\n            try {\n                zkClient.delete(toUrlPath(url));\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to unregister \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doSubscribe(final URL url, final NotifyListener listener) {\n            try {\n                if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {\n                    String root = toRootPath();\n                    ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n                    if (listeners == null) {\n                        zkListeners.putIfAbsent(url, new ConcurrentHashMap<NotifyListener, ChildListener>());\n                        listeners = zkListeners.get(url);\n                    }\n                    ChildListener zkListener = listeners.get(listener);\n                    if (zkListener == null) {\n                        listeners.putIfAbsent(listener, new ChildListener() {\n                            public void childChanged(String parentPath, List<String> currentChilds) {\n                                for (String child : currentChilds) {\n                                    child = URL.decode(child);\n                                    if (! anyServices.contains(child)) {\n                                        anyServices.add(child);\n                                        subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child,\n                                                Constants.CHECK_KEY, String.valueOf(false)), listener);\n                                    }\n                                }\n                            }\n                        });\n                        zkListener = listeners.get(listener);\n                    }\n                    zkClient.create(root, false);\n                    List<String> services = zkClient.addChildListener(root, zkListener);\n                    if (services != null && services.size() > 0) {\n                        for (String service : services) {\n                            service = URL.decode(service);\n                            anyServices.add(service);\n                            subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service,\n                                    Constants.CHECK_KEY, String.valueOf(false)), listener);\n                        }\n                    }\n                } else {\n                    List<URL> urls = new ArrayList<URL>();\n                    for (String path : toCategoriesPath(url)) {\n                        ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n                        if (listeners == null) {\n                            zkListeners.putIfAbsent(url, new ConcurrentHashMap<NotifyListener, ChildListener>());\n                            listeners = zkListeners.get(url);\n                        }\n                        ChildListener zkListener = listeners.get(listener);\n                        if (zkListener == null) {\n                            listeners.putIfAbsent(listener, new ChildListener() {\n                                public void childChanged(String parentPath, List<String> currentChilds) {\n                                    ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));\n                                }\n                            });\n                            zkListener = listeners.get(listener);\n                        }\n                        zkClient.create(path, false);\n                        List<String> children = zkClient.addChildListener(path, zkListener);\n                        if (children != null) {\n                            urls.addAll(toUrlsWithEmpty(url, path, children));\n                        }\n                    }\n                    notify(url, listener, urls);\n                }\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to subscribe \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        protected void doUnsubscribe(URL url, NotifyListener listener) {\n            ConcurrentMap<NotifyListener, ChildListener> listeners = zkListeners.get(url);\n            if (listeners != null) {\n                ChildListener zkListener = listeners.get(listener);\n                if (zkListener != null) {\n                    zkClient.removeChildListener(toUrlPath(url), zkListener);\n                }\n            }\n        }\n\n        public List<URL> lookup(URL url) {\n            if (url == null) {\n                throw new IllegalArgumentException(\"lookup url == null\");\n            }\n            try {\n                List<String> providers = new ArrayList<String>();\n                for (String path : toCategoriesPath(url)) {\n                        List<String> children = zkClient.getChildren(path);\n                        if (children != null) {\n                            providers.addAll(children);\n                        }\n                }\n                return toUrlsWithoutEmpty(url, providers);\n            } catch (Throwable e) {\n                throw new RpcException(\"Failed to lookup \" + url + \" from zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);\n            }\n        }\n\n        private String toRootDir() {\n            if (root.equals(Constants.PATH_SEPARATOR)) {\n                return root;\n            }\n            return root + Constants.PATH_SEPARATOR;\n        }\n\n        private String toRootPath() {\n            return root;\n        }\n\n        private String toServicePath(URL url) {\n            String name = url.getServiceInterface();\n            if (Constants.ANY_VALUE.equals(name)) {\n                return toRootPath();\n            }\n            return toRootDir() + URL.encode(name);\n        }\n\n        private String[] toCategoriesPath(URL url) {\n            String[] categroies;\n            if (Constants.ANY_VALUE.equals(url.getParameter(Constants.CATEGORY_KEY))) {\n                categroies = new String[] {Constants.PROVIDERS_CATEGORY, Constants.CONSUMERS_CATEGORY,\n                        Constants.ROUTERS_CATEGORY, Constants.CONFIGURATORS_CATEGORY};\n            } else {\n                categroies = url.getParameter(Constants.CATEGORY_KEY, new String[] {Constants.DEFAULT_CATEGORY});\n            }\n            String[] paths = new String[categroies.length];\n            for (int i = 0; i < categroies.length; i ++) {\n                paths[i] = toServicePath(url) + Constants.PATH_SEPARATOR + categroies[i];\n            }\n            return paths;\n        }\n\n        private String toCategoryPath(URL url) {\n            return toServicePath(url) + Constants.PATH_SEPARATOR + url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);\n        }\n\n        private String toUrlPath(URL url) {\n            return toCategoryPath(url) + Constants.PATH_SEPARATOR + URL.encode(url.toFullString());\n        }\n\n        private List<URL> toUrlsWithoutEmpty(URL consumer, List<String> providers) {\n            List<URL> urls = new ArrayList<URL>();\n            if (providers != null && providers.size() > 0) {\n                for (String provider : providers) {\n                    provider = URL.decode(provider);\n                    if (provider.contains(\"://\")) {\n                        URL url = URL.valueOf(provider);\n                        if (UrlUtils.isMatch(consumer, url)) {\n                            urls.add(url);\n                        }\n                    }\n                }\n            }\n            return urls;\n        }\n\n        private List<URL> toUrlsWithEmpty(URL consumer, String path, List<String> providers) {\n            List<URL> urls = toUrlsWithoutEmpty(consumer, providers);\n            if (urls == null || urls.isEmpty()) {\n                int i = path.lastIndexOf('/');\n                String category = i < 0 ? path : path.substring(i + 1);\n                URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);\n                urls.add(empty);\n            }\n            return urls;\n        }\n\n        static String appendDefaultPort(String address) {\n            if (address != null && address.length() > 0) {\n                int i = address.indexOf(':');\n                if (i < 0) {\n                    return address + \":\" + DEFAULT_ZOOKEEPER_PORT;\n                } else if (Integer.parseInt(address.substring(i + 1)) == 0) {\n                    return address.substring(0, i + 1) + DEFAULT_ZOOKEEPER_PORT;\n                }\n            }\n            return address;\n        }\n\n    }\n\n\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.rocyuan.com", "keywords": "python wechat dubbo_zookeeper_thrift api", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "dubbo_zookeeper_thrift", "package_url": "https://pypi.org/project/dubbo_zookeeper_thrift/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dubbo_zookeeper_thrift/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.rocyuan.com"}, "release_url": "https://pypi.org/project/dubbo_zookeeper_thrift/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "a python liberaries  for dubbo_zookeeper_thrift tutorial.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ======================================================<br><br>dubbo_zookeeper_thrift :<br><br>thriftServerManager = ThriftServerManager(\"127.0.0.1:2181\");<br>thriftServerManager.getServiceServiceInfo(\"thrift:userService\");<br><br>======================================================<br><br><br>what is inside<br>==============================<br><br>python_zookeeper_thrift<br>::<br> * \u4e3a\u4e86dubbo\u800c\u5199\u7684<br> * python setup.py register; python setup.py sdist upload<br> * \u4e3b\u8981\u662f\u4ecezookeeper\u4e2d\u62ff\u5230\u670d\u52a1\u5668\u8282\u70b9\u4fe1\u606f (ip:port:serviceName)<br> * \u4f7f\u5f97\u5ba2\u6237\u7aef\u7684\u8c03\u7528\u53ea\u9700\u8981 serviceName\u5373\u53ef<br><br> * `\u4ee5 \u5de5\u5382\u65b9\u6cd5\u66ff\u6362\u4e86iportal\u91cc\u7684 make_client\u8fc7\u7a0b,\u5373\u52a8\u6001\u751f\u6210thrift \u91cc\u7684 make_client()\u4ea7\u751f\u7684\u5b9e\u4f8b`<br><br> * ` \u5c06 client\u5b9e\u4f8b\u9759\u6001\u7f13\u5b58,\u5e94\u8be5\u53ef\u4ee5\u52a0\u5febiportal\u7684\u8bbf\u95ee\u6548\u7387 `<br><br><br><br><br> * \u8fd9\u4e2a\u9879\u76ee\u6240\u505a\u7684\u4e8b \u5176\u5b9e\u5c31\u662f\u628adubbo\u6e90\u7801\u91cc\u7684\u8fd9\u90e8\u5206\u4ee3\u7801 \u7528python \u5b9e\u73b0\u4e86\u800c\u5df2,\u4ece\u800c\u4f7f\u5f97python\u7684thrift\u5ba2\u6237\u7aef\u7684\u8c03\u7528<br>   \u53ef\u4ee5\u8131\u79bbIP\u800c\u5b58\u5728,\u4e0d\u5728\u53bb\u7ba1\u63d0\u4f9b\u670d\u52a1\u63d0\u4f9b\u8005\u7684IP\u548c\u7aef\u53e3\u8fd8\u6709\u662f\u5426\u505c\u6b62\u63d0\u4f9b\u670d\u52a1<br><br><br>what is next<br>==============================<br><br>::<br><br>    public class ZookeeperRegistry extends FailbackRegistry {<br><br>        private final static Logger logger = LoggerFactory.getLogger(ZookeeperRegistry.class);<br><br>        private final static int DEFAULT_ZOOKEEPER_PORT = 2181;<br><br>        private final static String DEFAULT_ROOT = \"dubbo\";<br><br>        private final String        root;<br><br>        private final Set&lt;String&gt; anyServices = new ConcurrentHashSet&lt;String&gt;();<br><br>        private final ConcurrentMap&lt;URL, ConcurrentMap&lt;NotifyListener, ChildListener&gt;&gt; zkListeners = new ConcurrentHashMap&lt;URL, ConcurrentMap&lt;NotifyListener, ChildListener&gt;&gt;();<br><br>        private final ZookeeperClient zkClient;<br><br>        public ZookeeperRegistry(URL url, ZookeeperTransporter zookeeperTransporter) {<br>            super(url);<br>            if (url.isAnyHost()) {<br>                throw new IllegalStateException(\"registry address == null\");<br>            }<br>            String group = url.getParameter(Constants.GROUP_KEY, DEFAULT_ROOT);<br>            if (! group.startsWith(Constants.PATH_SEPARATOR)) {<br>                group = Constants.PATH_SEPARATOR + group;<br>            }<br>            this.root = group;<br>            zkClient = zookeeperTransporter.connect(url);<br>            zkClient.addStateListener(new StateListener() {<br>                public void stateChanged(int state) {<br>                    if (state == RECONNECTED) {<br>                        try {<br>                            recover();<br>                        } catch (Exception e) {<br>                            logger.error(e.getMessage(), e);<br>                        }<br>                    }<br>                }<br>            });<br>        }<br><br>        public boolean isAvailable() {<br>            return zkClient.isConnected();<br>        }<br><br>        public void destroy() {<br>            super.destroy();<br>            try {<br>                zkClient.close();<br>            } catch (Exception e) {<br>                logger.warn(\"Failed to close zookeeper client \" + getUrl() + \", cause: \" + e.getMessage(), e);<br>            }<br>        }<br><br>        protected void doRegister(URL url) {<br>            try {<br>                zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));<br>            } catch (Throwable e) {<br>                throw new RpcException(\"Failed to register \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);<br>            }<br>        }<br><br>        protected void doUnregister(URL url) {<br>            try {<br>                zkClient.delete(toUrlPath(url));<br>            } catch (Throwable e) {<br>                throw new RpcException(\"Failed to unregister \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);<br>            }<br>        }<br><br>        protected void doSubscribe(final URL url, final NotifyListener listener) {<br>            try {<br>                if (Constants.ANY_VALUE.equals(url.getServiceInterface())) {<br>                    String root = toRootPath();<br>                    ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);<br>                    if (listeners == null) {<br>                        zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());<br>                        listeners = zkListeners.get(url);<br>                    }<br>                    ChildListener zkListener = listeners.get(listener);<br>                    if (zkListener == null) {<br>                        listeners.putIfAbsent(listener, new ChildListener() {<br>                            public void childChanged(String parentPath, List&lt;String&gt; currentChilds) {<br>                                for (String child : currentChilds) {<br>                                    child = URL.decode(child);<br>                                    if (! anyServices.contains(child)) {<br>                                        anyServices.add(child);<br>                                        subscribe(url.setPath(child).addParameters(Constants.INTERFACE_KEY, child,<br>                                                Constants.CHECK_KEY, String.valueOf(false)), listener);<br>                                    }<br>                                }<br>                            }<br>                        });<br>                        zkListener = listeners.get(listener);<br>                    }<br>                    zkClient.create(root, false);<br>                    List&lt;String&gt; services = zkClient.addChildListener(root, zkListener);<br>                    if (services != null &amp;&amp; services.size() &gt; 0) {<br>                        for (String service : services) {<br>                            service = URL.decode(service);<br>                            anyServices.add(service);<br>                            subscribe(url.setPath(service).addParameters(Constants.INTERFACE_KEY, service,<br>                                    Constants.CHECK_KEY, String.valueOf(false)), listener);<br>                        }<br>                    }<br>                } else {<br>                    List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();<br>                    for (String path : toCategoriesPath(url)) {<br>                        ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);<br>                        if (listeners == null) {<br>                            zkListeners.putIfAbsent(url, new ConcurrentHashMap&lt;NotifyListener, ChildListener&gt;());<br>                            listeners = zkListeners.get(url);<br>                        }<br>                        ChildListener zkListener = listeners.get(listener);<br>                        if (zkListener == null) {<br>                            listeners.putIfAbsent(listener, new ChildListener() {<br>                                public void childChanged(String parentPath, List&lt;String&gt; currentChilds) {<br>                                    ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));<br>                                }<br>                            });<br>                            zkListener = listeners.get(listener);<br>                        }<br>                        zkClient.create(path, false);<br>                        List&lt;String&gt; children = zkClient.addChildListener(path, zkListener);<br>                        if (children != null) {<br>                            urls.addAll(toUrlsWithEmpty(url, path, children));<br>                        }<br>                    }<br>                    notify(url, listener, urls);<br>                }<br>            } catch (Throwable e) {<br>                throw new RpcException(\"Failed to subscribe \" + url + \" to zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);<br>            }<br>        }<br><br>        protected void doUnsubscribe(URL url, NotifyListener listener) {<br>            ConcurrentMap&lt;NotifyListener, ChildListener&gt; listeners = zkListeners.get(url);<br>            if (listeners != null) {<br>                ChildListener zkListener = listeners.get(listener);<br>                if (zkListener != null) {<br>                    zkClient.removeChildListener(toUrlPath(url), zkListener);<br>                }<br>            }<br>        }<br><br>        public List&lt;URL&gt; lookup(URL url) {<br>            if (url == null) {<br>                throw new IllegalArgumentException(\"lookup url == null\");<br>            }<br>            try {<br>                List&lt;String&gt; providers = new ArrayList&lt;String&gt;();<br>                for (String path : toCategoriesPath(url)) {<br>                        List&lt;String&gt; children = zkClient.getChildren(path);<br>                        if (children != null) {<br>                            providers.addAll(children);<br>                        }<br>                }<br>                return toUrlsWithoutEmpty(url, providers);<br>            } catch (Throwable e) {<br>                throw new RpcException(\"Failed to lookup \" + url + \" from zookeeper \" + getUrl() + \", cause: \" + e.getMessage(), e);<br>            }<br>        }<br><br>        private String toRootDir() {<br>            if (root.equals(Constants.PATH_SEPARATOR)) {<br>                return root;<br>            }<br>            return root + Constants.PATH_SEPARATOR;<br>        }<br><br>        private String toRootPath() {<br>            return root;<br>        }<br><br>        private String toServicePath(URL url) {<br>            String name = url.getServiceInterface();<br>            if (Constants.ANY_VALUE.equals(name)) {<br>                return toRootPath();<br>            }<br>            return toRootDir() + URL.encode(name);<br>        }<br><br>        private String[] toCategoriesPath(URL url) {<br>            String[] categroies;<br>            if (Constants.ANY_VALUE.equals(url.getParameter(Constants.CATEGORY_KEY))) {<br>                categroies = new String[] {Constants.PROVIDERS_CATEGORY, Constants.CONSUMERS_CATEGORY,<br>                        Constants.ROUTERS_CATEGORY, Constants.CONFIGURATORS_CATEGORY};<br>            } else {<br>                categroies = url.getParameter(Constants.CATEGORY_KEY, new String[] {Constants.DEFAULT_CATEGORY});<br>            }<br>            String[] paths = new String[categroies.length];<br>            for (int i = 0; i &lt; categroies.length; i ++) {<br>                paths[i] = toServicePath(url) + Constants.PATH_SEPARATOR + categroies[i];<br>            }<br>            return paths;<br>        }<br><br>        private String toCategoryPath(URL url) {<br>            return toServicePath(url) + Constants.PATH_SEPARATOR + url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);<br>        }<br><br>        private String toUrlPath(URL url) {<br>            return toCategoryPath(url) + Constants.PATH_SEPARATOR + URL.encode(url.toFullString());<br>        }<br><br>        private List&lt;URL&gt; toUrlsWithoutEmpty(URL consumer, List&lt;String&gt; providers) {<br>            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;();<br>            if (providers != null &amp;&amp; providers.size() &gt; 0) {<br>                for (String provider : providers) {<br>                    provider = URL.decode(provider);<br>                    if (provider.contains(\"://\")) {<br>                        URL url = URL.valueOf(provider);<br>                        if (UrlUtils.isMatch(consumer, url)) {<br>                            urls.add(url);<br>                        }<br>                    }<br>                }<br>            }<br>            return urls;<br>        }<br><br>        private List&lt;URL&gt; toUrlsWithEmpty(URL consumer, String path, List&lt;String&gt; providers) {<br>            List&lt;URL&gt; urls = toUrlsWithoutEmpty(consumer, providers);<br>            if (urls == null || urls.isEmpty()) {<br>                int i = path.lastIndexOf('/');<br>                String category = i &lt; 0 ? path : path.substring(i + 1);<br>                URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);<br>                urls.add(empty);<br>            }<br>            return urls;<br>        }<br><br>        static String appendDefaultPort(String address) {<br>            if (address != null &amp;&amp; address.length() &gt; 0) {<br>                int i = address.indexOf(':');<br>                if (i &lt; 0) {<br>                    return address + \":\" + DEFAULT_ZOOKEEPER_PORT;<br>                } else if (Integer.parseInt(address.substring(i + 1)) == 0) {<br>                    return address.substring(0, i + 1) + DEFAULT_ZOOKEEPER_PORT;<br>                }<br>            }<br>            return address;<br>        }<br><br>    }<br><br><br>```\n          </div>"}, "last_serial": 1962894, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "4fc924c0c475c488ea0c2f437083ed07", "sha256": "96a156312fee4c21de67c3bb6aa05bf3e15d1037cb4bdbfbc7e84137f3ce25fd"}, "downloads": -1, "filename": "dubbo_zookeeper_thrift-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4fc924c0c475c488ea0c2f437083ed07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10130, "upload_time": "2016-02-18T09:36:22", "upload_time_iso_8601": "2016-02-18T09:36:22.882284Z", "url": "https://files.pythonhosted.org/packages/c8/d1/129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2/dubbo_zookeeper_thrift-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fc924c0c475c488ea0c2f437083ed07", "sha256": "96a156312fee4c21de67c3bb6aa05bf3e15d1037cb4bdbfbc7e84137f3ce25fd"}, "downloads": -1, "filename": "dubbo_zookeeper_thrift-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4fc924c0c475c488ea0c2f437083ed07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10130, "upload_time": "2016-02-18T09:36:22", "upload_time_iso_8601": "2016-02-18T09:36:22.882284Z", "url": "https://files.pythonhosted.org/packages/c8/d1/129df8e91a82122d43f18a3860f193920e8f8351771879e486cbe330a9d2/dubbo_zookeeper_thrift-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:09 2020"}