{"info": {"author": "Gert-Jan", "author_email": "gert-jan.both@cri-paris.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "# DeePyMoD\n\nDeePyMoD is a PyTorch-based implementation of the DeepMoD algorithm for model discovery of PDEs. We use a neural network to model our dataset, build a library of possible terms from the networks output and employ sparse regression to find the PDE underlying the dataset. More information can be found in our paper: [arXiv:1904.09406](http://arxiv.org/abs/1904.09406) \n\n**What's the use case?** Classical Model Discovery methods such as PDE-find struggle with elevated noise levels and sparse datasets due the low accuracy of numerical differentiation. DeepMoD can handle high noise and sparse datasets, making it well suited for model discovery on actual experimental data.\n\n**What types of models can you discover?** DeepMoD can discover non-linear, multi-dimensional and/or coupled PDEs. See our paper for a demonstration of each.\n\n**How hard is it to apply it to my data?** Not at all! We've designed the code to be accessible without having in-depth knowledge of deep learning or model discovery. You can load in the data, train the model and get the result in a few lines of code. We include a few notebooks with examples in the examples folder. Feel free to open an issue if you need any additional help.\n\n**How do I modify the code?** We provide two interfaces, an object-based and functional-based one. The object-based interface is simply a wrapper around the functional one. The code has been modularly designed and is well documented, so you should be able to plug-in another training regime, cost function or library function yourself pretty easily.\n\n# Features\n\n* **Fast** We implemented a neural network which also calculates the derivatives w.r.t. input on the forward pass. This saves a lot of calculations, making DeePyMoD at least 30% faster than a standard implementation.\n\n* **Extendable** DeePyMoD is designed to be easily extendable and modifiable. You can simply plug in your own cost function, library or training regime.\n\n* **Automatic library** The library and coefficient vectors are automatically constructed from the maximum order of polynomial and differentiation. If that doesn't cut it for your use case, it's easy to plug in your own library function.\n\n* **Extensive logging** We provide a simple command line logger to see how training is going and an extensive custom Tensorboard logger.\n\n# How to install\nWe provide two ways to use DeePyMoD, either as a package or in a ready-to-use Docker container. \n\n## Package\nDeePyMoD is released as a pip package, so simply run \n\n``` pip install DeePyMoD```\n\nto install. Alternatively, you can clone the \nWe currently provide two ways to use our software, either in a docker container or as a normal package. If you want to use it as a package, simply clone the repo and run:\n\n```python setup.py install```\n\n\n## Container\nA GPU-ready Docker image can also be used. Once you've cloned the repo, go into the config folder and run:\n\n```./start_notebook.sh```\n\nThis pulls our lab's standard docker image from dockerhub, mounts the project directory inside the container and starts a jupyterlab server which can be accessed through localhost:8888. You can stop the container by running the stop_notebook script.  This will stop the container; next time you run start_notebook.sh it will look if any containers from that project exist and restart them instead of building a new one, so your changes inside the container are maintained.\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyscaffold/pyscaffold/", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "DeePyMoD", "package_url": "https://pypi.org/project/DeePyMoD/", "platform": "any", "project_url": "https://pypi.org/project/DeePyMoD/", "project_urls": {"Documentation": "https://pyscaffold.org/", "Homepage": "https://github.com/pyscaffold/pyscaffold/"}, "release_url": "https://pypi.org/project/DeePyMoD/2.0.1/", "requires_dist": ["numpy", "torch (>=1.3.*)", "tensorboard", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": ">= 3.6.*", "summary": "DeePyMoD is a PyTorch-based implementation of the DeepMoD algorithm for model discovery of PDEs.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DeePyMoD</h1>\n<p>DeePyMoD is a PyTorch-based implementation of the DeepMoD algorithm for model discovery of PDEs. We use a neural network to model our dataset, build a library of possible terms from the networks output and employ sparse regression to find the PDE underlying the dataset. More information can be found in our paper: <a href=\"http://arxiv.org/abs/1904.09406\" rel=\"nofollow\">arXiv:1904.09406</a></p>\n<p><strong>What's the use case?</strong> Classical Model Discovery methods such as PDE-find struggle with elevated noise levels and sparse datasets due the low accuracy of numerical differentiation. DeepMoD can handle high noise and sparse datasets, making it well suited for model discovery on actual experimental data.</p>\n<p><strong>What types of models can you discover?</strong> DeepMoD can discover non-linear, multi-dimensional and/or coupled PDEs. See our paper for a demonstration of each.</p>\n<p><strong>How hard is it to apply it to my data?</strong> Not at all! We've designed the code to be accessible without having in-depth knowledge of deep learning or model discovery. You can load in the data, train the model and get the result in a few lines of code. We include a few notebooks with examples in the examples folder. Feel free to open an issue if you need any additional help.</p>\n<p><strong>How do I modify the code?</strong> We provide two interfaces, an object-based and functional-based one. The object-based interface is simply a wrapper around the functional one. The code has been modularly designed and is well documented, so you should be able to plug-in another training regime, cost function or library function yourself pretty easily.</p>\n<h1>Features</h1>\n<ul>\n<li>\n<p><strong>Fast</strong> We implemented a neural network which also calculates the derivatives w.r.t. input on the forward pass. This saves a lot of calculations, making DeePyMoD at least 30% faster than a standard implementation.</p>\n</li>\n<li>\n<p><strong>Extendable</strong> DeePyMoD is designed to be easily extendable and modifiable. You can simply plug in your own cost function, library or training regime.</p>\n</li>\n<li>\n<p><strong>Automatic library</strong> The library and coefficient vectors are automatically constructed from the maximum order of polynomial and differentiation. If that doesn't cut it for your use case, it's easy to plug in your own library function.</p>\n</li>\n<li>\n<p><strong>Extensive logging</strong> We provide a simple command line logger to see how training is going and an extensive custom Tensorboard logger.</p>\n</li>\n</ul>\n<h1>How to install</h1>\n<p>We provide two ways to use DeePyMoD, either as a package or in a ready-to-use Docker container.</p>\n<h2>Package</h2>\n<p>DeePyMoD is released as a pip package, so simply run</p>\n<p><code>pip install DeePyMoD</code></p>\n<p>to install. Alternatively, you can clone the\nWe currently provide two ways to use our software, either in a docker container or as a normal package. If you want to use it as a package, simply clone the repo and run:</p>\n<p><code>python setup.py install</code></p>\n<h2>Container</h2>\n<p>A GPU-ready Docker image can also be used. Once you've cloned the repo, go into the config folder and run:</p>\n<p><code>./start_notebook.sh</code></p>\n<p>This pulls our lab's standard docker image from dockerhub, mounts the project directory inside the container and starts a jupyterlab server which can be accessed through localhost:8888. You can stop the container by running the stop_notebook script.  This will stop the container; next time you run start_notebook.sh it will look if any containers from that project exist and restart them instead of building a new one, so your changes inside the container are maintained.</p>\n\n          </div>"}, "last_serial": 6512942, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "fa0f9307f939f584fbf96844320096ea", "sha256": "c30aee758d2b75991814c8cc0bfa9cdcb25cd868629015bf64f065217a204f2b"}, "downloads": -1, "filename": "DeePyMoD-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa0f9307f939f584fbf96844320096ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6.*", "size": 11836, "upload_time": "2020-01-24T10:43:06", "upload_time_iso_8601": "2020-01-24T10:43:06.565780Z", "url": "https://files.pythonhosted.org/packages/b9/be/88f7b6498823a2033856171335f21545f7cea7ce176d7c95a161177473e5/DeePyMoD-2.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa0f9307f939f584fbf96844320096ea", "sha256": "c30aee758d2b75991814c8cc0bfa9cdcb25cd868629015bf64f065217a204f2b"}, "downloads": -1, "filename": "DeePyMoD-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa0f9307f939f584fbf96844320096ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.6.*", "size": 11836, "upload_time": "2020-01-24T10:43:06", "upload_time_iso_8601": "2020-01-24T10:43:06.565780Z", "url": "https://files.pythonhosted.org/packages/b9/be/88f7b6498823a2033856171335f21545f7cea7ce176d7c95a161177473e5/DeePyMoD-2.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:39:17 2020"}