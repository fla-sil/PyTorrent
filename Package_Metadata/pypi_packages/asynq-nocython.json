{"info": {"author": "Quora, Inc.", "author_email": "asynq@quora.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": ".. image:: http://i.imgur.com/jCPNyOa.png\n\n.. image:: https://travis-ci.org/quora/asynq.svg?branch=master\n    :target: https://travis-ci.org/quora/asynq\n\n``asynq`` is a library for asynchronous programming in Python with a focus on batching requests to\nexternal services. It also provides seamless interoperability with synchronous code, support for\nasynchronous context managers, and tools to make writing and testing asynchronous code easier.\n``asynq`` was developed at Quora and is a core component of Quora's architecture. See the original blog\npost `here <https://engineering.quora.com/Asynchronous-Programming-in-Python>`_.\n\nThe most important use case for ``asynq`` is batching. For many storage services (e.g., memcache,\nredis) it is far faster to make a single request that fetches many keys at once than to make\nmany requests that each fetch a single key. The ``asynq`` framework makes it easy to write code\nthat takes advantage of batching without radical changes in code structure from code that does not\nuse batching.\n\nFor example, synchronous code to retrieve the names of the authors of a list of Quora answers may\nlook like this:\n\n.. code-block:: python\n\n    def all_author_names(aids):\n        uids = [author_of_answer(aid) for aid in aids]\n        names = [name_of_user(uid) for uid in uids]\n        return names\n\nHere, each call to ``author_of_answer`` and ``name_of_user`` would result in a memcache request.\nConverted to use ``asynq``, this code would look like:\n\n.. code-block:: python\n\n    @async()\n    def all_author_names(aids):\n        uids = yield [author_of_answer.async(aid) for aid in aids]\n        names = yield [name_of_user.async(uid) for uid in uids]\n        result(names); return\n\nAll ``author_of_answer`` calls will be combined into a single memcache request, as will all of the\n``name_of_user`` calls.\n\nFutures\n-------\n\nFutures are the basic building blocks of ``asynq``'s programming model. The scheduler keeps track\nof futures and attempts to schedule them in an efficient way. ``asynq`` uses its own hierarchy of\nFuture classes, rooted in ``asynq.FutureBase``. Futures have a ``.value()`` method that computes\ntheir value if necessary and then returns it.\n\nThe following are the most important Future classes used in ``asynq``:\n\n- ``AsyncTask``, a Future representing the execution of an asynchronous function (see below).\n  Normally created by calling ``.async()`` on an asynchronous function.\n- ``ConstFuture``, a Future whose value is known at creation time. This is useful when you need\n  to pass a Future somewhere, but no computation is actually needed.\n- ``BatchBase`` and ``BatchItemBase``, the building blocks for doing batching. See below for\n  details.\n\n\nDecorators and asynchronous functions\n-------------------------------------\n\n``asynq``'s asynchronous functions are implemented as Python generator functions. Every time an\nasynchronous functions yields one or more Futures, it cedes control the asynq scheduler, which will\nresolve the futures that were yielded and continue running the function after the futures have been\ncomputed.\n\nReturning a value from an asynchronous function is hard in Python 2 because generators are not\nallowed to return a value. ``asynq`` provides the special ``result()`` function that can be used to\nreturn a value from an asynchronous function; it is implemented by raising a custom exception\nthat is caught by the scheduler. At Quora, we instead use a patched Python 2 binary that does\nsupport returning a value from a generator.\n\nThe framework requires usage of the ``@async()`` decorator on all asynchronous functions. This\ndecorator wraps the generator function so that it can be called like a normal, synchronous function.\nIt also creates a ``.async`` attribute on the function that allows calling the function\nasynchronously. Calling this attribute will return an ``AsyncTask`` object corresponding to the\nfunction.\n\nYou can call an asynchronous function synchronously like this:\n\n.. code-block:: python\n\n    result = async_fn(a, b)\n\nand asynchronously like this:\n\n.. code-block:: python\n\n    result = yield async_fn.async(a, b)\n\nCalling ``async_fn.async(a, b).value()`` has the same result as ``async_fn(a, b)``.\n\nThe decorator has a ``pure=True`` option that disables the ``.async`` attribute and instead makes\nthe function itself asynchronous, so that calling it returns an ``AsyncTask``. We recommend to use\nthis option only in special cases like decorators for asynchronous functions.\n\n``asynq`` also provides an ``@async_proxy()`` decorator for functions that return a Future\ndirectly. Functions decorated with ``@async_proxy()`` look like ``@async()`` functions externally.\nAn example use case is a function that takes either an asynchronous or a synchronous function,\nand calls it accordingly:\n\n.. code-block:: python\n\n    @async_proxy()\n    def async_call(fn, *args, **kwargs):\n        if is_async_fn(fn):\n            # Returns an AsyncTask\n            return fn.async(*args, **kwargs)\n        return ConstFuture(fn(*args, **kwargs))\n\nBatching\n--------\n\nBatching is at the core of what makes ``asynq`` useful. To implement batching, you need to subclass\n``asynq.BatchItemBase`` and ``asynq.BatchBase``. The first represents a single entry in a batch\n(e.g., a single memcache key to fetch) and the second is responsible for executing the batch when\nthe scheduler requests it.\n\nBatch items usually do not require much logic beyond registering themselves with the currently\nactive batch in ``__init__``. Batches need to override the ``_try_switch_active_batch`` method,\nwhich changes the batch that is currently active, and the ``_flush`` method that executes it.\nThis method should call ``.set_value()`` on all the items in the batch.\n\nAn example implementation of batching for memcache is in the ``asynq/examples/batching.py`` file.\nThe framework also provides a ``DebugBatchItem`` for testing.\n\nMost users of ``asynq`` should not need to implement batches frequently. At Quora, we use\nthousands of asynchronous functions, but only five ``BatchBase`` subclasses.\n\nContexts\n--------\n\n``asynq`` provides support for Python context managers that are automatically activated and\ndeactivated when a particular task is scheduled. This feature is necessary because the scheduler\ncan schedule tasks in arbitrary order. For example, consider the following code:\n\n.. code-block:: python\n\n    @async()\n    def show_warning():\n        yield do_something_that_creates_a_warning.async()\n\n    @async()\n    def suppress_warning():\n        with warnings.catch_warnings():\n            yield show_warning.async()\n\n    @async()\n    def caller():\n        yield show_warning.async(), suppress_warning.async()\n\nThis code should show only one warning, because only the second call to ``show_warning`` is within\na ``catch_warnings()`` context, but depending on how the scheduler happens to execute these\nfunctions, the code that shows the warning may also be executed while ``catch_warnings()`` is\nactive.\n\nTo remedy this problem, you should use an ``AsyncContext``, which will be automatically paused when\nthe task that created it is no longer active and resumed when it becomes active again. An\n``asynq``-compatible version of ``catch_warnings`` would look something like this:\n\n.. code-block:: python\n\n    class catch_warnings(asynq.AsyncContext):\n        def pause(self):\n            stop_catching_warnings()\n\n        def resume(self):\n            start_catching_warnings()\n\nDebugging\n---------\n\nBecause the ``asynq`` scheduler is invoked every time an asynchronous function is called, and it\ncan invoke arbitrary other active futures, normal Python stack traces become useless in a\nsufficiently complicated application built on ``asynq``. To make debugging easier, the framework\nprovides the ability to generate a custom ``asynq`` stack trace, which shows how each active\nasynchronous function was invoked.\n\nThe ``asynq.debug.dump_asynq_stack()`` method can be used to print this stack, similar to\n``traceback.print_stack()``. The framework also registers a hook to print out the ``asynq`` stack\nwhen an exception happens.\n\nTools\n-----\n\n``asynq`` provides a number of additional tools to make it easier to write asynchronous code. Some\nof these are in the ``asynq.tools`` module. These tools include:\n\n- ``asynq.async_call`` calls a function asynchronously only if it is asynchronous. This can be\n  useful when calling an overridden method that is asynchronous on some child classes but not on others.\n- ``asynq.tools.call_with_context`` calls an asynchronous function within the provided context\n  manager. This is helpful in cases where you need to yield multiple tasks at once, but only one\n  needs to be within the context.\n- ``asynq.tools.afilter`` and ``asynq.tools.asorted`` are equivalents of the standard ``filter``\n  and ``sorted`` functions that take asynchronous functions as their filter and compare functions.\n- ``asynq.tools.acached_per_instance`` caches an asynchronous instance method.\n- ``asynq.tools.deduplicate`` prevents multiple simultaneous calls to the same asynchronous\n  function.\n- The ``asynq.mock`` module is an enhancement to the standard ``mock`` module that makes it\n  painless to mock asynchronous functions. Without this module, mocking any asynchronous function\n  will often also require mocking its ``.async`` attribute. We recommend using ``asynq.mock.patch``\n  for all mocking in projects that use ``asynq``.\n- The ``asynq.generator`` module provides an experimental implementation of asynchronous\n  generators, which can produce a sequence of values while also using ``asynq``'s batching support.\n\nCompatibility\n-------------\n\n``asynq`` runs on Python 2.7 and Python 3.\n\nContributors\n------------\n\n`Alex Yakunin <https://github.com/alexyakunin>`_, `Jelle Zijlstra <https://github.com/JelleZijlstra>`_, `Manan Nayak <https://github.com/manannayak>`_, `Martin Michelsen <https://github.com/fuzziqersoftware>`_, `Shrey Banga <https://github.com/banga>`_, `Suren Nihalani <https://github.com/snihalani>`_ and\nother engineers at Quora.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quora/asynq", "keywords": "quora asynq common utility", "license": "Apache Software License", "maintainer": null, "maintainer_email": null, "name": "asynq-nocython", "package_url": "https://pypi.org/project/asynq-nocython/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/asynq-nocython/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/quora/asynq"}, "release_url": "https://pypi.org/project/asynq-nocython/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Quora's asynq library", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"http://i.imgur.com/jCPNyOa.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c9799df6b6d7a3638ca71cef1848069a948fd7f/687474703a2f2f692e696d6775722e636f6d2f6a43504e794f612e706e67\">\n<a href=\"https://travis-ci.org/quora/asynq\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/quora/asynq.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/243b6b32b47a3da605928f271f640f2e00eefe8d/68747470733a2f2f7472617669732d63692e6f72672f71756f72612f6173796e712e7376673f6272616e63683d6d6173746572\"></a>\n<p><tt>asynq</tt> is a library for asynchronous programming in Python with a focus on batching requests to\nexternal services. It also provides seamless interoperability with synchronous code, support for\nasynchronous context managers, and tools to make writing and testing asynchronous code easier.\n<tt>asynq</tt> was developed at Quora and is a core component of Quora\u2019s architecture. See the original blog\npost <a href=\"https://engineering.quora.com/Asynchronous-Programming-in-Python\" rel=\"nofollow\">here</a>.</p>\n<p>The most important use case for <tt>asynq</tt> is batching. For many storage services (e.g., memcache,\nredis) it is far faster to make a single request that fetches many keys at once than to make\nmany requests that each fetch a single key. The <tt>asynq</tt> framework makes it easy to write code\nthat takes advantage of batching without radical changes in code structure from code that does not\nuse batching.</p>\n<p>For example, synchronous code to retrieve the names of the authors of a list of Quora answers may\nlook like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">all_author_names</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">):</span>\n    <span class=\"n\">uids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">author_of_answer</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">]</span>\n    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">name_of_user</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">uid</span> <span class=\"ow\">in</span> <span class=\"n\">uids</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">names</span>\n</pre>\n<p>Here, each call to <tt>author_of_answer</tt> and <tt>name_of_user</tt> would result in a memcache request.\nConverted to use <tt>asynq</tt>, this code would look like:</p>\n<pre><span class=\"nd\">@async</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">all_author_names</span><span class=\"p\">(</span><span class=\"n\">aids</span><span class=\"p\">):</span>\n    <span class=\"n\">uids</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"p\">[</span><span class=\"n\">author_of_answer</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"n\">aid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">aid</span> <span class=\"ow\">in</span> <span class=\"n\">aids</span><span class=\"p\">]</span>\n    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"p\">[</span><span class=\"n\">name_of_user</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">uid</span> <span class=\"ow\">in</span> <span class=\"n\">uids</span><span class=\"p\">]</span>\n    <span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">);</span> <span class=\"k\">return</span>\n</pre>\n<p>All <tt>author_of_answer</tt> calls will be combined into a single memcache request, as will all of the\n<tt>name_of_user</tt> calls.</p>\n<div id=\"futures\">\n<h2>Futures</h2>\n<p>Futures are the basic building blocks of <tt>asynq</tt>\u2019s programming model. The scheduler keeps track\nof futures and attempts to schedule them in an efficient way. <tt>asynq</tt> uses its own hierarchy of\nFuture classes, rooted in <tt>asynq.FutureBase</tt>. Futures have a <tt>.value()</tt> method that computes\ntheir value if necessary and then returns it.</p>\n<p>The following are the most important Future classes used in <tt>asynq</tt>:</p>\n<ul>\n<li><tt>AsyncTask</tt>, a Future representing the execution of an asynchronous function (see below).\nNormally created by calling <tt>.async()</tt> on an asynchronous function.</li>\n<li><tt>ConstFuture</tt>, a Future whose value is known at creation time. This is useful when you need\nto pass a Future somewhere, but no computation is actually needed.</li>\n<li><tt>BatchBase</tt> and <tt>BatchItemBase</tt>, the building blocks for doing batching. See below for\ndetails.</li>\n</ul>\n</div>\n<div id=\"decorators-and-asynchronous-functions\">\n<h2>Decorators and asynchronous functions</h2>\n<p><tt>asynq</tt>\u2019s asynchronous functions are implemented as Python generator functions. Every time an\nasynchronous functions yields one or more Futures, it cedes control the asynq scheduler, which will\nresolve the futures that were yielded and continue running the function after the futures have been\ncomputed.</p>\n<p>Returning a value from an asynchronous function is hard in Python 2 because generators are not\nallowed to return a value. <tt>asynq</tt> provides the special <tt>result()</tt> function that can be used to\nreturn a value from an asynchronous function; it is implemented by raising a custom exception\nthat is caught by the scheduler. At Quora, we instead use a patched Python 2 binary that does\nsupport returning a value from a generator.</p>\n<p>The framework requires usage of the <tt>@async()</tt> decorator on all asynchronous functions. This\ndecorator wraps the generator function so that it can be called like a normal, synchronous function.\nIt also creates a <tt>.async</tt> attribute on the function that allows calling the function\nasynchronously. Calling this attribute will return an <tt>AsyncTask</tt> object corresponding to the\nfunction.</p>\n<p>You can call an asynchronous function synchronously like this:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">async_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>and asynchronously like this:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">async_fn</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Calling <tt>async_fn.async(a, <span class=\"pre\">b).value()</span></tt> has the same result as <tt>async_fn(a, b)</tt>.</p>\n<p>The decorator has a <tt>pure=True</tt> option that disables the <tt>.async</tt> attribute and instead makes\nthe function itself asynchronous, so that calling it returns an <tt>AsyncTask</tt>. We recommend to use\nthis option only in special cases like decorators for asynchronous functions.</p>\n<p><tt>asynq</tt> also provides an <tt>@async_proxy()</tt> decorator for functions that return a Future\ndirectly. Functions decorated with <tt>@async_proxy()</tt> look like <tt>@async()</tt> functions externally.\nAn example use case is a function that takes either an asynchronous or a synchronous function,\nand calls it accordingly:</p>\n<pre><span class=\"nd\">@async_proxy</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">async_call</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_async_fn</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Returns an AsyncTask</span>\n        <span class=\"k\">return</span> <span class=\"n\">fn</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ConstFuture</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"batching\">\n<h2>Batching</h2>\n<p>Batching is at the core of what makes <tt>asynq</tt> useful. To implement batching, you need to subclass\n<tt>asynq.BatchItemBase</tt> and <tt>asynq.BatchBase</tt>. The first represents a single entry in a batch\n(e.g., a single memcache key to fetch) and the second is responsible for executing the batch when\nthe scheduler requests it.</p>\n<p>Batch items usually do not require much logic beyond registering themselves with the currently\nactive batch in <tt>__init__</tt>. Batches need to override the <tt>_try_switch_active_batch</tt> method,\nwhich changes the batch that is currently active, and the <tt>_flush</tt> method that executes it.\nThis method should call <tt>.set_value()</tt> on all the items in the batch.</p>\n<p>An example implementation of batching for memcache is in the <tt>asynq/examples/batching.py</tt> file.\nThe framework also provides a <tt>DebugBatchItem</tt> for testing.</p>\n<p>Most users of <tt>asynq</tt> should not need to implement batches frequently. At Quora, we use\nthousands of asynchronous functions, but only five <tt>BatchBase</tt> subclasses.</p>\n</div>\n<div id=\"contexts\">\n<h2>Contexts</h2>\n<p><tt>asynq</tt> provides support for Python context managers that are automatically activated and\ndeactivated when a particular task is scheduled. This feature is necessary because the scheduler\ncan schedule tasks in arbitrary order. For example, consider the following code:</p>\n<pre><span class=\"nd\">@async</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">show_warning</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"n\">do_something_that_creates_a_warning</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@async</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">suppress_warning</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">catch_warnings</span><span class=\"p\">():</span>\n        <span class=\"k\">yield</span> <span class=\"n\">show_warning</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@async</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">caller</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"n\">show_warning</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(),</span> <span class=\"n\">suppress_warning</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">()</span>\n</pre>\n<p>This code should show only one warning, because only the second call to <tt>show_warning</tt> is within\na <tt>catch_warnings()</tt> context, but depending on how the scheduler happens to execute these\nfunctions, the code that shows the warning may also be executed while <tt>catch_warnings()</tt> is\nactive.</p>\n<p>To remedy this problem, you should use an <tt>AsyncContext</tt>, which will be automatically paused when\nthe task that created it is no longer active and resumed when it becomes active again. An\n<tt>asynq</tt>-compatible version of <tt>catch_warnings</tt> would look something like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">catch_warnings</span><span class=\"p\">(</span><span class=\"n\">asynq</span><span class=\"o\">.</span><span class=\"n\">AsyncContext</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pause</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">stop_catching_warnings</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resume</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">start_catching_warnings</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"debugging\">\n<h2>Debugging</h2>\n<p>Because the <tt>asynq</tt> scheduler is invoked every time an asynchronous function is called, and it\ncan invoke arbitrary other active futures, normal Python stack traces become useless in a\nsufficiently complicated application built on <tt>asynq</tt>. To make debugging easier, the framework\nprovides the ability to generate a custom <tt>asynq</tt> stack trace, which shows how each active\nasynchronous function was invoked.</p>\n<p>The <tt>asynq.debug.dump_asynq_stack()</tt> method can be used to print this stack, similar to\n<tt>traceback.print_stack()</tt>. The framework also registers a hook to print out the <tt>asynq</tt> stack\nwhen an exception happens.</p>\n</div>\n<div id=\"tools\">\n<h2>Tools</h2>\n<p><tt>asynq</tt> provides a number of additional tools to make it easier to write asynchronous code. Some\nof these are in the <tt>asynq.tools</tt> module. These tools include:</p>\n<ul>\n<li><tt>asynq.async_call</tt> calls a function asynchronously only if it is asynchronous. This can be\nuseful when calling an overridden method that is asynchronous on some child classes but not on others.</li>\n<li><tt>asynq.tools.call_with_context</tt> calls an asynchronous function within the provided context\nmanager. This is helpful in cases where you need to yield multiple tasks at once, but only one\nneeds to be within the context.</li>\n<li><tt>asynq.tools.afilter</tt> and <tt>asynq.tools.asorted</tt> are equivalents of the standard <tt>filter</tt>\nand <tt>sorted</tt> functions that take asynchronous functions as their filter and compare functions.</li>\n<li><tt>asynq.tools.acached_per_instance</tt> caches an asynchronous instance method.</li>\n<li><tt>asynq.tools.deduplicate</tt> prevents multiple simultaneous calls to the same asynchronous\nfunction.</li>\n<li>The <tt>asynq.mock</tt> module is an enhancement to the standard <tt>mock</tt> module that makes it\npainless to mock asynchronous functions. Without this module, mocking any asynchronous function\nwill often also require mocking its <tt>.async</tt> attribute. We recommend using <tt>asynq.mock.patch</tt>\nfor all mocking in projects that use <tt>asynq</tt>.</li>\n<li>The <tt>asynq.generator</tt> module provides an experimental implementation of asynchronous\ngenerators, which can produce a sequence of values while also using <tt>asynq</tt>\u2019s batching support.</li>\n</ul>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p><tt>asynq</tt> runs on Python 2.7 and Python 3.</p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p><a href=\"https://github.com/alexyakunin\" rel=\"nofollow\">Alex Yakunin</a>, <a href=\"https://github.com/JelleZijlstra\" rel=\"nofollow\">Jelle Zijlstra</a>, <a href=\"https://github.com/manannayak\" rel=\"nofollow\">Manan Nayak</a>, <a href=\"https://github.com/fuzziqersoftware\" rel=\"nofollow\">Martin Michelsen</a>, <a href=\"https://github.com/banga\" rel=\"nofollow\">Shrey Banga</a>, <a href=\"https://github.com/snihalani\" rel=\"nofollow\">Suren Nihalani</a> and\nother engineers at Quora.</p>\n</div>\n\n          </div>"}, "last_serial": 2619678, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "0026670d39e06f924205fafccc9197e8", "sha256": "b1d49cf538efeea17db0cf45467cc8cc010537f14d620ada0cbab18430bc2e08"}, "downloads": -1, "filename": "asynq-nocython-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0026670d39e06f924205fafccc9197e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53304, "upload_time": "2017-02-04T23:04:55", "upload_time_iso_8601": "2017-02-04T23:04:55.752347Z", "url": "https://files.pythonhosted.org/packages/48/44/f0e76bb816382ef7b02dae54b3cc94d4b8899ae7b9d8a698e55127597459/asynq-nocython-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0026670d39e06f924205fafccc9197e8", "sha256": "b1d49cf538efeea17db0cf45467cc8cc010537f14d620ada0cbab18430bc2e08"}, "downloads": -1, "filename": "asynq-nocython-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0026670d39e06f924205fafccc9197e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53304, "upload_time": "2017-02-04T23:04:55", "upload_time_iso_8601": "2017-02-04T23:04:55.752347Z", "url": "https://files.pythonhosted.org/packages/48/44/f0e76bb816382ef7b02dae54b3cc94d4b8899ae7b9d8a698e55127597459/asynq-nocython-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:39 2020"}