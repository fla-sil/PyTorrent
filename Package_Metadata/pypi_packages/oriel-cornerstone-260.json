{"info": {"author": "Brian Carlsen", "author_email": "carlsen.bri@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Oriel Cornerstone 260\nA library allowing easy control over Oriel Cornerstone 260 monochromators.\n> Install with `python -m pip install oriel-cornerstone-260`\n\n## Monochromator\nRepresents a monochromator.\n\n+ **Monochromator( port, timeout = 5 ):** Creates a new monochromator for the device at the specificed port, with the provided communication timeout.\n\n### Methods\n\n#### Low Level\nLow level methods allows reading and writing to the device.\n\n+ **connect():** Connects to the device.\n\n+ **disconnect():** Disconnects from the device.\n\n+ **write( msg ):** Writes a message to the device. Termination characters are added.\n\n+ **read():** Reads a single response from the device.\n\n+ **command( cmd, \\*args ):** Sends a command to the device with the given arguments. Returns the command.\n\n+ **query( msg ):** Queries the device. Returns a Response object.\n\n### High Level\nHigh level methods are convenience methods used for commonly needed functions.\n\n+ **goto( wavelength ):** Goes to the given wavelength.\n\n+ **abort():** Starts the given channel.\n\n+ **set_grating( grating ):** Sets the grating to the given number.\n\n+ **shutter( close = True ):** Open or close the shutter.\n\n+ **set_outport( port ):** Sets the output port.\n\n+ **slit_width( slit, width = None ):** Gets or sets the slit width.\n\n\n### Properties\n+ **connected:** Whether the device is connected or not.\n+ **port:** Device port.\n+ **term_chars:** Termination characters used for reading and writing. [Default: '\\r\\n']\n+ **info:** Device info.\n+ **position:** Wavelength position.\n+ **grating:** Current grating and its properties. Returns a dictionary with `number`, `lines`, and `label`.\n+ **shuttered:** Whether the shutter is closed or open.\n+ **outport:** The output port.\n\n## Response\nA `namedtuple` with properties `statement` which represents the command, and `response`. \n\n## Example\n\nA basic example for using a Monochromator.\n```python\nfrom oriel_cornerstone_260 import Monochromator\n\n# create device\nmono = Monochromator( 'COM9' )\n\n# print monochromator info\nprint( mono.info )\n\n# go to 600 nm\nmono.goto( 600 )\n```\n\n#### Note\nA Monochromator is a ultimately a `Serial` object from `pyserial`, so you can call any functions on a Monochromator that you would on a Serial object.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "oriel,cornerstone,newport,monochromator", "license": "", "maintainer": "", "maintainer_email": "", "name": "oriel-cornerstone-260", "package_url": "https://pypi.org/project/oriel-cornerstone-260/", "platform": "", "project_url": "https://pypi.org/project/oriel-cornerstone-260/", "project_urls": null, "release_url": "https://pypi.org/project/oriel-cornerstone-260/0.0.1/", "requires_dist": ["serial"], "requires_python": "", "summary": "Controller class for communicating with an Oriel Cornerstone 260 monochromator.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Oriel Cornerstone 260</h1>\n<p>A library allowing easy control over Oriel Cornerstone 260 monochromators.</p>\n<blockquote>\n<p>Install with <code>python -m pip install oriel-cornerstone-260</code></p>\n</blockquote>\n<h2>Monochromator</h2>\n<p>Represents a monochromator.</p>\n<ul>\n<li><strong>Monochromator( port, timeout = 5 ):</strong> Creates a new monochromator for the device at the specificed port, with the provided communication timeout.</li>\n</ul>\n<h3>Methods</h3>\n<h4>Low Level</h4>\n<p>Low level methods allows reading and writing to the device.</p>\n<ul>\n<li>\n<p><strong>connect():</strong> Connects to the device.</p>\n</li>\n<li>\n<p><strong>disconnect():</strong> Disconnects from the device.</p>\n</li>\n<li>\n<p><strong>write( msg ):</strong> Writes a message to the device. Termination characters are added.</p>\n</li>\n<li>\n<p><strong>read():</strong> Reads a single response from the device.</p>\n</li>\n<li>\n<p><strong>command( cmd, *args ):</strong> Sends a command to the device with the given arguments. Returns the command.</p>\n</li>\n<li>\n<p><strong>query( msg ):</strong> Queries the device. Returns a Response object.</p>\n</li>\n</ul>\n<h3>High Level</h3>\n<p>High level methods are convenience methods used for commonly needed functions.</p>\n<ul>\n<li>\n<p><strong>goto( wavelength ):</strong> Goes to the given wavelength.</p>\n</li>\n<li>\n<p><strong>abort():</strong> Starts the given channel.</p>\n</li>\n<li>\n<p><strong>set_grating( grating ):</strong> Sets the grating to the given number.</p>\n</li>\n<li>\n<p><strong>shutter( close = True ):</strong> Open or close the shutter.</p>\n</li>\n<li>\n<p><strong>set_outport( port ):</strong> Sets the output port.</p>\n</li>\n<li>\n<p><strong>slit_width( slit, width = None ):</strong> Gets or sets the slit width.</p>\n</li>\n</ul>\n<h3>Properties</h3>\n<ul>\n<li><strong>connected:</strong> Whether the device is connected or not.</li>\n<li><strong>port:</strong> Device port.</li>\n<li><strong>term_chars:</strong> Termination characters used for reading and writing. [Default: '\\r\\n']</li>\n<li><strong>info:</strong> Device info.</li>\n<li><strong>position:</strong> Wavelength position.</li>\n<li><strong>grating:</strong> Current grating and its properties. Returns a dictionary with <code>number</code>, <code>lines</code>, and <code>label</code>.</li>\n<li><strong>shuttered:</strong> Whether the shutter is closed or open.</li>\n<li><strong>outport:</strong> The output port.</li>\n</ul>\n<h2>Response</h2>\n<p>A <code>namedtuple</code> with properties <code>statement</code> which represents the command, and <code>response</code>.</p>\n<h2>Example</h2>\n<p>A basic example for using a Monochromator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oriel_cornerstone_260</span> <span class=\"kn\">import</span> <span class=\"n\">Monochromator</span>\n\n<span class=\"c1\"># create device</span>\n<span class=\"n\">mono</span> <span class=\"o\">=</span> <span class=\"n\">Monochromator</span><span class=\"p\">(</span> <span class=\"s1\">'COM9'</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># print monochromator info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span> <span class=\"n\">mono</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"p\">)</span>\n\n<span class=\"c1\"># go to 600 nm</span>\n<span class=\"n\">mono</span><span class=\"o\">.</span><span class=\"n\">goto</span><span class=\"p\">(</span> <span class=\"mi\">600</span> <span class=\"p\">)</span>\n</pre>\n<h4>Note</h4>\n<p>A Monochromator is a ultimately a <code>Serial</code> object from <code>pyserial</code>, so you can call any functions on a Monochromator that you would on a Serial object.</p>\n\n          </div>"}, "last_serial": 7178480, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "37673248a94989d62edbd00d6c4da582", "sha256": "b9827540b9e667d6047909a97573b11da9c08210057c1c01b938faf2b2c9c91c"}, "downloads": -1, "filename": "oriel_cornerstone_260-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37673248a94989d62edbd00d6c4da582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14616, "upload_time": "2020-05-06T08:17:05", "upload_time_iso_8601": "2020-05-06T08:17:05.788859Z", "url": "https://files.pythonhosted.org/packages/1d/c3/23fd27b7d3b402d2535bceb591bf731c78c8a7bdd5d9234425a8bbede4ab/oriel_cornerstone_260-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5ef9c1ae88a8ae60b21193111f57f34", "sha256": "6ab659050e9ac6436b4aa38d468f8baf349ab21451066f90b0a9f33898d5a7f3"}, "downloads": -1, "filename": "oriel-cornerstone-260-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d5ef9c1ae88a8ae60b21193111f57f34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2360, "upload_time": "2020-05-06T08:17:08", "upload_time_iso_8601": "2020-05-06T08:17:08.249793Z", "url": "https://files.pythonhosted.org/packages/d4/d5/efab63bf42a1ef4c3c4f093be09ebe82c06926f90b0f769277a2e52d7820/oriel-cornerstone-260-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37673248a94989d62edbd00d6c4da582", "sha256": "b9827540b9e667d6047909a97573b11da9c08210057c1c01b938faf2b2c9c91c"}, "downloads": -1, "filename": "oriel_cornerstone_260-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37673248a94989d62edbd00d6c4da582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14616, "upload_time": "2020-05-06T08:17:05", "upload_time_iso_8601": "2020-05-06T08:17:05.788859Z", "url": "https://files.pythonhosted.org/packages/1d/c3/23fd27b7d3b402d2535bceb591bf731c78c8a7bdd5d9234425a8bbede4ab/oriel_cornerstone_260-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5ef9c1ae88a8ae60b21193111f57f34", "sha256": "6ab659050e9ac6436b4aa38d468f8baf349ab21451066f90b0a9f33898d5a7f3"}, "downloads": -1, "filename": "oriel-cornerstone-260-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d5ef9c1ae88a8ae60b21193111f57f34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2360, "upload_time": "2020-05-06T08:17:08", "upload_time_iso_8601": "2020-05-06T08:17:08.249793Z", "url": "https://files.pythonhosted.org/packages/d4/d5/efab63bf42a1ef4c3c4f093be09ebe82c06926f90b0f769277a2e52d7820/oriel-cornerstone-260-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:36 2020"}