{"info": {"author": "Anna Poulakos", "author_email": "anna.poulakos@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# topical\nTopical is a simple eventing library written in Python.\n\n![build](https://github.com/annapoulakos/topical/workflows/build/badge.svg)\n\n## Table of Contents\n\n1. [Developer Requirements](#developer-requirements)\n1. [Installation](#installation)\n1. [Usage](#usage)\n    1. [Small Example](#small-example)\n    1. [Using the Event Decorator](#using-the-event-decorator)\n\n## Developer Requirements\n\n* Python 3.7 or higher\n\n## Installation\n\n```\npip install ap-topical\n```\n\n## Usage\n\n> Topical supports both synchronous and asynchronous callbacks. This documentation only details the async/await calls. For more in-depth usage instructions, please consult the wiki.\n\nFirst, you will need an event handler. This function requires a `payload` object as its only parameter:\n\n```python\nasync def event_handler_one(payload):\n    pass\n\nasync def event_handler_two(payload):\n    pass\n```\n\nNext, you will need to configure your event pipeline.\n\n```python\ntopical.subscribe('event-one', event_handler_one)\ntopical.subscribe('event-two', event_handler_two)\n```\n\nNext, you will need to publish your first event.\n\n```python\npayload = TopicalEventPayload()\nawait topical.publish_async('event-one', payload)\n```\n\nTo continue your event chain, you will need to publish an event from an existing event handler:\n\n```python\nasync def event_handler_one(payload):\n    # do something with your event payload\n\n    await topical.publish_async('event_two', payload)\n```\n\n#### Small Example\n\n```python\nimport asyncio\nfrom ap.topical import topical\nfrom ap.topical.topical_event_payload import TopicalEventPayload\n\nasync def event_handler_one(payload):\n    print(f'inside event_handler_one for {payload.idempotency_token}')\n\n    print('sleeping for 5 seconds')\n    await asyncio.sleep(5)\n    await topical.publish_async('event-two', payload)\n\nasync def event_handler_two(payload):\n    print(f'inside event_handler_two for {payload.idempotency_token}')\n\n    print('sleeping for 5 seconds')\n    await asyncio.sleep(5)\n    print('done!')\n\nasync def main():\n    topical.subscribe('event-one', event_handler_one)\n    topical.subscribe('event-two', event_handler_two)\n\n    payloads = [TopicalEventPayload() for _ in range(3)]\n\n    await asyncio.gather(*[topical.publish_async('event-one', payload) for payload in payloads])\n\nasyncio.run(main())\n\n# Output\n# (topical) \u03bb python info.py\n# inside event_handler_one for 3744628e-fb1c-4c60-a43a-175b1a09b0fd\n# sleeping for 5 seconds\n# inside event_handler_one for 64a546dc-46fd-4c23-9adc-501194376ea6\n# sleeping for 5 seconds\n# inside event_handler_one for b470535f-f65a-4c22-b764-6fe8379a0388\n# sleeping for 5 seconds\n# inside event_handler_two for 3744628e-fb1c-4c60-a43a-175b1a09b0fd\n# sleeping for 5 seconds\n# inside event_handler_two for 64a546dc-46fd-4c23-9adc-501194376ea6\n# sleeping for 5 seconds\n# inside event_handler_two for b470535f-f65a-4c22-b764-6fe8379a0388\n# sleeping for 5 seconds\n# done!\n# done!\n# done!\n```\n\n#### Using the Event Decorator\n\nManually subscribing to a lot of events could be an issue. Topical ships with a decorator that allows you to decorate any function as an event handler.\n\n```python\nimport asyncio\nfrom ap.topical import topical\n\n@topical.event('event-one')\nasync def event_handler_one(payload):\n    print('in event handler')\n\nasync def main():\n    await asyncio.gather(*[topical.publish_async('event-one', {}) for _ in range(3)])\n\nasyncio.run(main())\n\n# Output\n# (topical) \u03bb python info.py\n# in event handler\n# in event handler\n# in event handler\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "ap-topical", "package_url": "https://pypi.org/project/ap-topical/", "platform": "", "project_url": "https://pypi.org/project/ap-topical/", "project_urls": null, "release_url": "https://pypi.org/project/ap-topical/0.2.5/", "requires_dist": null, "requires_python": ">=3.7.0", "summary": "Topical is a simple event pipeline written in Python.", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>topical</h1>\n<p>Topical is a simple eventing library written in Python.</p>\n<p><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8ea56d47a7ff50dfaf75820404098bdda28c318/68747470733a2f2f6769746875622e636f6d2f616e6e61706f756c616b6f732f746f706963616c2f776f726b666c6f77732f6275696c642f62616467652e737667\"></p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#developer-requirements\" rel=\"nofollow\">Developer Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ol>\n<li><a href=\"#small-example\" rel=\"nofollow\">Small Example</a></li>\n<li><a href=\"#using-the-event-decorator\" rel=\"nofollow\">Using the Event Decorator</a></li>\n</ol>\n</li>\n</ol>\n<h2>Developer Requirements</h2>\n<ul>\n<li>Python 3.7 or higher</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install ap-topical\n</code></pre>\n<h2>Usage</h2>\n<blockquote>\n<p>Topical supports both synchronous and asynchronous callbacks. This documentation only details the async/await calls. For more in-depth usage instructions, please consult the wiki.</p>\n</blockquote>\n<p>First, you will need an event handler. This function requires a <code>payload</code> object as its only parameter:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_one</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_two</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Next, you will need to configure your event pipeline.</p>\n<pre><span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">,</span> <span class=\"n\">event_handler_one</span><span class=\"p\">)</span>\n<span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'event-two'</span><span class=\"p\">,</span> <span class=\"n\">event_handler_two</span><span class=\"p\">)</span>\n</pre>\n<p>Next, you will need to publish your first event.</p>\n<pre><span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">TopicalEventPayload</span><span class=\"p\">()</span>\n<span class=\"k\">await</span> <span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">publish_async</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<p>To continue your event chain, you will need to publish an event from an existing event handler:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_one</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something with your event payload</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">publish_async</span><span class=\"p\">(</span><span class=\"s1\">'event_two'</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h4>Small Example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ap.topical</span> <span class=\"kn\">import</span> <span class=\"n\">topical</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ap.topical.topical_event_payload</span> <span class=\"kn\">import</span> <span class=\"n\">TopicalEventPayload</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_one</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'inside event_handler_one for </span><span class=\"si\">{</span><span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">idempotency_token</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sleeping for 5 seconds'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">publish_async</span><span class=\"p\">(</span><span class=\"s1\">'event-two'</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_two</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'inside event_handler_two for </span><span class=\"si\">{</span><span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">idempotency_token</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sleeping for 5 seconds'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done!'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">,</span> <span class=\"n\">event_handler_one</span><span class=\"p\">)</span>\n    <span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'event-two'</span><span class=\"p\">,</span> <span class=\"n\">event_handler_two</span><span class=\"p\">)</span>\n\n    <span class=\"n\">payloads</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TopicalEventPayload</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">publish_async</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">payload</span> <span class=\"ow\">in</span> <span class=\"n\">payloads</span><span class=\"p\">])</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Output</span>\n<span class=\"c1\"># (topical) \u03bb python info.py</span>\n<span class=\"c1\"># inside event_handler_one for 3744628e-fb1c-4c60-a43a-175b1a09b0fd</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># inside event_handler_one for 64a546dc-46fd-4c23-9adc-501194376ea6</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># inside event_handler_one for b470535f-f65a-4c22-b764-6fe8379a0388</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># inside event_handler_two for 3744628e-fb1c-4c60-a43a-175b1a09b0fd</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># inside event_handler_two for 64a546dc-46fd-4c23-9adc-501194376ea6</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># inside event_handler_two for b470535f-f65a-4c22-b764-6fe8379a0388</span>\n<span class=\"c1\"># sleeping for 5 seconds</span>\n<span class=\"c1\"># done!</span>\n<span class=\"c1\"># done!</span>\n<span class=\"c1\"># done!</span>\n</pre>\n<h4>Using the Event Decorator</h4>\n<p>Manually subscribing to a lot of events could be an issue. Topical ships with a decorator that allows you to decorate any function as an event handler.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ap.topical</span> <span class=\"kn\">import</span> <span class=\"n\">topical</span>\n\n<span class=\"nd\">@topical</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">event_handler_one</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'in event handler'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">topical</span><span class=\"o\">.</span><span class=\"n\">publish_async</span><span class=\"p\">(</span><span class=\"s1\">'event-one'</span><span class=\"p\">,</span> <span class=\"p\">{})</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)])</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Output</span>\n<span class=\"c1\"># (topical) \u03bb python info.py</span>\n<span class=\"c1\"># in event handler</span>\n<span class=\"c1\"># in event handler</span>\n<span class=\"c1\"># in event handler</span>\n</pre>\n\n          </div>"}, "last_serial": 7114393, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "4e144809075d4e2a3c7c6e5739b99bd6", "sha256": "86360eb96e6d9ca42c34ea1f32098ce2e0eb9acd0a307acb00d0e00a1adfd634"}, "downloads": -1, "filename": "ap_topical-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e144809075d4e2a3c7c6e5739b99bd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4718, "upload_time": "2020-03-26T21:28:53", "upload_time_iso_8601": "2020-03-26T21:28:53.870133Z", "url": "https://files.pythonhosted.org/packages/f3/6b/2f299056a3c2e39a9e8d8919ecd4a95cf7b2ddc710671827542ad2dd6ba4/ap_topical-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2de9bb4cc71a7b07c859e48e386392d9", "sha256": "9fb709463de8e861b05d3341154aa3822c60ed5856a211a9952f2a74b87fa87a"}, "downloads": -1, "filename": "ap_topical-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2de9bb4cc71a7b07c859e48e386392d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 4959, "upload_time": "2020-03-26T22:36:28", "upload_time_iso_8601": "2020-03-26T22:36:28.797390Z", "url": "https://files.pythonhosted.org/packages/7d/54/afcbc95cf1995712fefd6a4314cef6c0ba3526de54bdd71c56d770e6fe04/ap_topical-0.1.2-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2b0ca535c08f361406a894d19dc1d893", "sha256": "c028be6e7eb5a67df6748388894eb47f02ee3a1a9688ce5ab7e7cc87c32f0e20"}, "downloads": -1, "filename": "ap_topical-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b0ca535c08f361406a894d19dc1d893", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 6255, "upload_time": "2020-04-23T02:33:36", "upload_time_iso_8601": "2020-04-23T02:33:36.540995Z", "url": "https://files.pythonhosted.org/packages/0f/cc/903cfa13a0f5fe4e08ec602006902f8d1ddbde537098b515bc9932d13d53/ap_topical-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5c503ecf6b4e08ea56d49f2d0139b106", "sha256": "7f0c9b9a1a9e759bc042d7e6d475997d7012fc8b3dcef373b49cc9473e0582a9"}, "downloads": -1, "filename": "ap_topical-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c503ecf6b4e08ea56d49f2d0139b106", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 6412, "upload_time": "2020-04-23T17:24:03", "upload_time_iso_8601": "2020-04-23T17:24:03.282336Z", "url": "https://files.pythonhosted.org/packages/85/8f/f1d03fd93d8de4d6eeb81ed898c5de945ecd19edb0fb69c5bb3638d49cb8/ap_topical-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "e9f42444c312263c91b8fc06190ffd94", "sha256": "691c29165ea06925752c72e162f9af9efbb0e99dd4072d024cf05b726d0737d3"}, "downloads": -1, "filename": "ap_topical-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e9f42444c312263c91b8fc06190ffd94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 5952, "upload_time": "2020-04-27T19:48:43", "upload_time_iso_8601": "2020-04-27T19:48:43.412929Z", "url": "https://files.pythonhosted.org/packages/d7/f7/40199bf57436bbe71365b8e3201b80c5bbc150841e5bbd06feb094361df9/ap_topical-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "da1b3d34703bbb5c602630cba76bf586", "sha256": "5c49ec3ce1a3afc1a99523bf9728c3449901a655bd78667f8a4ff1522a8df079"}, "downloads": -1, "filename": "ap_topical-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "da1b3d34703bbb5c602630cba76bf586", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 5952, "upload_time": "2020-04-27T19:56:06", "upload_time_iso_8601": "2020-04-27T19:56:06.424106Z", "url": "https://files.pythonhosted.org/packages/11/99/926a016b8679485736aff9774c1143a40f6e046e42a07ea29f15aff9c7d0/ap_topical-0.2.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da1b3d34703bbb5c602630cba76bf586", "sha256": "5c49ec3ce1a3afc1a99523bf9728c3449901a655bd78667f8a4ff1522a8df079"}, "downloads": -1, "filename": "ap_topical-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "da1b3d34703bbb5c602630cba76bf586", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 5952, "upload_time": "2020-04-27T19:56:06", "upload_time_iso_8601": "2020-04-27T19:56:06.424106Z", "url": "https://files.pythonhosted.org/packages/11/99/926a016b8679485736aff9774c1143a40f6e046e42a07ea29f15aff9c7d0/ap_topical-0.2.5-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:17:32 2020"}