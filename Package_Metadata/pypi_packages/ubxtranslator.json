{"info": {"author": "Dalymople", "author_email": "dalymople@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Communications"], "description": "# ubxtranslator [![Build Status](https://travis-ci.org/dalymople/ubxtranslator.svg?branch=master)](https://travis-ci.org/dalymople/ubxtranslator)\n\n## Overview\nThis module provides a simple way to decode messages from uBlox GPS devices in the UBX format. \nLike the high accuracy NEO-M8U module that I have created, \n<a href=\"https://www.tindie.com/products/dalymople/gps-dead-reckoning-board-neo-m8u-gnss\">click here for more info.</a><br>\n<br>\nThis package has no dependencies! This is written in pure python using only the standard lib and supports any\nstandard byte stream. The predefined messages are not added to the parser by default, this allows\nyou to have tight control over what messages can be parsed.\n\nIs this the fastest implementation of a UBX parser? Probably not. If speed is critical then you \nprobably need to go write something in C. If you want something that is fast enough\nand easy to use, you are in the right place. Keep reading.\n\nSupports Python 3.5 and up.\n\n\n## Quickstart\n\nInstall the package with pip<br>\n`pip install ubxtranslator`\n\nImport the core module<br>\n`from ubxtranslator import core`\n\nIf the message class you want has already been defined simply import it. \nIf not you will need to construct the messages and classes yourself, see the examples for more information.<br>\n`from ubxtranslator.predefined import CLS_ACK, CLS_NAV`\n\nConstruct the parser<br>\n`parser = core.Parser([CLS_ACK, CLS_NAV])`\n\nThen you can use the parser to decode messages from any byte stream.<br>\n`cls_name, msg_name, payload = parser.receive_from(port)`\n\nThe payload is the named tuple of the message<br>\n`print(cls_name, msg_name, payload.lat, payload.lng)`\n\n## Examples\nFor full examples see the examples directory. \n\n## TODO's\nWant to contribute? Please feel free to submit issues or pull requests. \nNothing in this package is very complicated, please have a crack and help me to improve this.\n\n- Add the ability to pack messages into packets for two way communications\n- Add repeated blocks\n- Add more and better tests\n- Add Field type RU1_3\n- Add async support", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dalymople/ubxtranslator", "keywords": "", "license": "GNU GPL v3", "maintainer": "", "maintainer_email": "", "name": "ubxtranslator", "package_url": "https://pypi.org/project/ubxtranslator/", "platform": "", "project_url": "https://pypi.org/project/ubxtranslator/", "project_urls": {"Homepage": "http://github.com/dalymople/ubxtranslator"}, "release_url": "https://pypi.org/project/ubxtranslator/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A lightweight python library for translating UBX packets", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># ubxtranslator [![Build Status](<a href=\"https://travis-ci.org/dalymople/ubxtranslator.svg?branch=master)%5D(https://travis-ci.org/dalymople/ubxtranslator\" rel=\"nofollow\">https://travis-ci.org/dalymople/ubxtranslator.svg?branch=master)](https://travis-ci.org/dalymople/ubxtranslator</a>)</p>\n<p>## Overview\nThis module provides a simple way to decode messages from uBlox GPS devices in the UBX format.\nLike the high accuracy NEO-M8U module that I have created,\n&lt;a href=\u201d<a href=\"https://www.tindie.com/products/dalymople/gps-dead-reckoning-board-neo-m8u-gnss\" rel=\"nofollow\">https://www.tindie.com/products/dalymople/gps-dead-reckoning-board-neo-m8u-gnss</a>\u201d&gt;click here for more info.&lt;/a&gt;&lt;br&gt;\n&lt;br&gt;\nThis package has no dependencies! This is written in pure python using only the standard lib and supports any\nstandard byte stream. The predefined messages are not added to the parser by default, this allows\nyou to have tight control over what messages can be parsed.</p>\n<p>Is this the fastest implementation of a UBX parser? Probably not. If speed is critical then you\nprobably need to go write something in C. If you want something that is fast enough\nand easy to use, you are in the right place. Keep reading.</p>\n<p>Supports Python 3.5 and up.</p>\n<p>## Quickstart</p>\n<p>Install the package with pip&lt;br&gt;\n<cite>pip install ubxtranslator</cite></p>\n<p>Import the core module&lt;br&gt;\n<cite>from ubxtranslator import core</cite></p>\n<p>If the message class you want has already been defined simply import it.\nIf not you will need to construct the messages and classes yourself, see the examples for more information.&lt;br&gt;\n<cite>from ubxtranslator.predefined import CLS_ACK, CLS_NAV</cite></p>\n<p>Construct the parser&lt;br&gt;\n<cite>parser = core.Parser([CLS_ACK, CLS_NAV])</cite></p>\n<p>Then you can use the parser to decode messages from any byte stream.&lt;br&gt;\n<cite>cls_name, msg_name, payload = parser.receive_from(port)</cite></p>\n<p>The payload is the named tuple of the message&lt;br&gt;\n<cite>print(cls_name, msg_name, payload.lat, payload.lng)</cite></p>\n<p>## Examples\nFor full examples see the examples directory.</p>\n<p>## TODO\u2019s\nWant to contribute? Please feel free to submit issues or pull requests.\nNothing in this package is very complicated, please have a crack and help me to improve this.</p>\n<ul>\n<li>Add the ability to pack messages into packets for two way communications</li>\n<li>Add repeated blocks</li>\n<li>Add more and better tests</li>\n<li>Add Field type RU1_3</li>\n<li>Add async support</li>\n</ul>\n\n          </div>"}, "last_serial": 5366768, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e35186e367a27dedb63968491d246928", "sha256": "47b0b2c306c062f933f00e19abf03bd932ef21eb0c6cba62cd06b1e66c08309e"}, "downloads": -1, "filename": "ubxtranslator-0.1.tar.gz", "has_sig": false, "md5_digest": "e35186e367a27dedb63968491d246928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20259, "upload_time": "2019-06-05T10:59:34", "upload_time_iso_8601": "2019-06-05T10:59:34.386548Z", "url": "https://files.pythonhosted.org/packages/22/fe/13ca9596cfcd18fff9a216d4edcc18110131991a39d2483e81ba6e536054/ubxtranslator-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b1bce995aa0632831e1a501577d6f362", "sha256": "b1d69a9fe9b09e04d7a8fe3274f8d2b1de53ceb1e310fc4b92d3d7f602156ff5"}, "downloads": -1, "filename": "ubxtranslator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1bce995aa0632831e1a501577d6f362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20397, "upload_time": "2019-06-06T11:46:19", "upload_time_iso_8601": "2019-06-06T11:46:19.130000Z", "url": "https://files.pythonhosted.org/packages/0e/67/f56dd13db628210a1b057b5c704ef3347fe29ac2dce73acf75ce4ea18572/ubxtranslator-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1bce995aa0632831e1a501577d6f362", "sha256": "b1d69a9fe9b09e04d7a8fe3274f8d2b1de53ceb1e310fc4b92d3d7f602156ff5"}, "downloads": -1, "filename": "ubxtranslator-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1bce995aa0632831e1a501577d6f362", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20397, "upload_time": "2019-06-06T11:46:19", "upload_time_iso_8601": "2019-06-06T11:46:19.130000Z", "url": "https://files.pythonhosted.org/packages/0e/67/f56dd13db628210a1b057b5c704ef3347fe29ac2dce73acf75ce4ea18572/ubxtranslator-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:14 2020"}