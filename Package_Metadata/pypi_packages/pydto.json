{"info": {"author": "Dmitry Kurkin", "author_email": "dkurkin@toidev.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "PyDTO - a Python data conversion and validation library\n=======================================================\n\nPyDTO is a data conversion library. It can validate data, that comes from\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydtoz import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.\n\nA taste of this library:\n\n>>> from decimal import Decimal\n>>> from pydto import Schema, Required, List, Enum\n>>> SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n>>> result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n>>> assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n\nCheck out documentation for more detailed review at `Github repo`_.\n\n.. _Github repo: https://github.com/deemson/pydto", "description_content_type": null, "docs_url": null, "download_url": "https://pypi.python.org/pypi/pydto", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deemson/pydto", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pydto", "package_url": "https://pypi.org/project/pydto/", "platform": "any", "project_url": "https://pypi.org/project/pydto/", "project_urls": {"Download": "https://pypi.python.org/pypi/pydto", "Homepage": "https://github.com/deemson/pydto"}, "release_url": "https://pypi.org/project/pydto/0.5.1/", "requires_dist": null, "requires_python": null, "summary": "data validation and conversion library", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyDTO is a data conversion library. It can validate data, that comes from\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydtoz import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at\nvarious data serialization formats like JSON, YAML, etc. and convert it to\nnative Python datatypes. It can also convert native Python objects to described\nDTO.</p>\n<p>A taste of this library:</p>\n<pre>&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; from pydto import Schema, Required, List, Enum\n&gt;&gt;&gt; SCHEMA = Schema(List({\n...     Required('price'): Decimal,\n...     Required('category'): Enum('laptops', 'tablets', 'phones'),\n...     Required('quantity'): int,\n...     Required('serial'): (str, int)\n... }))\n&gt;&gt;&gt; result = SCHEMA([\n... {'price': '399.99', 'category': 'tablets', 'quantity': '2', 'serial': ['ta', '237']},\n... {'price': '899.99', 'category': 'laptops', 'quantity': '1', 'serial': ['ag', '863']},\n... {'price': '199.99', 'category': 'phones', 'quantity': '3', 'serial': ['lz', '659']}\n])\n&gt;&gt;&gt; assert result == [\n... {'price': Decimal('399.99'), 'category': 'tablets', 'quantity': 2, 'serial': ['ta', 237]},\n... {'price': Decimal('899.99'), 'category': 'laptops', 'quantity': 1, 'serial': ['ag', 863]},\n... {'price': Decimal('199.99'), 'category': 'phones', 'quantity': 3, 'serial': ['lz', 659]}\n]\n</pre>\n<p>Check out documentation for more detailed review at <a href=\"https://github.com/deemson/pydto\" rel=\"nofollow\">Github repo</a>.</p>\n\n          </div>"}, "last_serial": 1687312, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "833bb95819283ebf7bdda09e0699a4c7", "sha256": "17e7102db917ec6b6c9a3830df636c7934c8342cceee66ec79144da093c4a110"}, "downloads": -1, "filename": "pydto-0.1.tar.gz", "has_sig": false, "md5_digest": "833bb95819283ebf7bdda09e0699a4c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5233, "upload_time": "2015-04-29T10:19:18", "upload_time_iso_8601": "2015-04-29T10:19:18.345584Z", "url": "https://files.pythonhosted.org/packages/ae/a5/2dd6090d8fc211dba9187c648759621aa43e65369a6f6da8cac2c36804e5/pydto-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4794ca6a04e93235b3768878da94076c", "sha256": "6b5957dde1e5d76a8c89ec76090bae97464a01713875bf8c02754a17d8da1d9d"}, "downloads": -1, "filename": "pydto-0.2.tar.gz", "has_sig": false, "md5_digest": "4794ca6a04e93235b3768878da94076c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6019, "upload_time": "2015-05-14T12:43:01", "upload_time_iso_8601": "2015-05-14T12:43:01.108172Z", "url": "https://files.pythonhosted.org/packages/5f/4d/2b66302b043912af4c3c496e72f02a20aed5e518cc0f84653aa42e487e81/pydto-0.2.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ed363a4fbb555a0006e8e1ae6ae67821", "sha256": "66cd2494664a17ab15587243ba421ec5002a33fa2cf54f0ef6d7a1d216739bd7"}, "downloads": -1, "filename": "pydto-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ed363a4fbb555a0006e8e1ae6ae67821", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7078, "upload_time": "2015-06-04T09:40:00", "upload_time_iso_8601": "2015-06-04T09:40:00.161245Z", "url": "https://files.pythonhosted.org/packages/28/bf/887a382c5fa07ed178ff814cb99ecc3de39b3758f8e7ed4acd08c0a55e56/pydto-0.3.1.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a6dafe3482e013128d51f3c26814ce96", "sha256": "f17676fd2495f9ae06f3a80bf58b5a873fd53b6e64016e16c4395bc4771fc2e7"}, "downloads": -1, "filename": "pydto-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a6dafe3482e013128d51f3c26814ce96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8031, "upload_time": "2015-06-22T15:47:22", "upload_time_iso_8601": "2015-06-22T15:47:22.931236Z", "url": "https://files.pythonhosted.org/packages/93/ad/5136629cdc405b5fbc7a3723cb4e7c6eb1d155cb26b3af2f11607f8a9f51/pydto-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a1fd108327e646d3f2121779502a4321", "sha256": "09b46c360df69e705c2fca0a898e4a9c2e754e803ccaff6d13d236da0d829b66"}, "downloads": -1, "filename": "pydto-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a1fd108327e646d3f2121779502a4321", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7548, "upload_time": "2015-07-14T11:40:28", "upload_time_iso_8601": "2015-07-14T11:40:28.807964Z", "url": "https://files.pythonhosted.org/packages/fc/d6/f541f9bdc24d88bfce399109159f9711243623ffb1b63e98f0ab12909692/pydto-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e2b2817add488947c62513b17fa5cd23", "sha256": "f6ea35828a7a714364b795ab6647ac70ef4a97c7d4045eaa12f1aa3fcf1ea4f7"}, "downloads": -1, "filename": "pydto-0.4.1.tar.gz", "has_sig": false, "md5_digest": "e2b2817add488947c62513b17fa5cd23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8419, "upload_time": "2015-07-21T14:03:29", "upload_time_iso_8601": "2015-07-21T14:03:29.503779Z", "url": "https://files.pythonhosted.org/packages/56/9b/f809df2617d2839fb35a8f2d6fa24b2d8bf62e4ca6eb3684f9b1111874ea/pydto-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a730d1a8578fa00634d8cf6d7d3edc14", "sha256": "a44f040fc574cb4e0d9e530a1e0c9c737943a51003f8cc2b5e1eefa150765da0"}, "downloads": -1, "filename": "pydto-0.5.1.tar.gz", "has_sig": false, "md5_digest": "a730d1a8578fa00634d8cf6d7d3edc14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17554, "upload_time": "2015-08-21T12:33:29", "upload_time_iso_8601": "2015-08-21T12:33:29.454995Z", "url": "https://files.pythonhosted.org/packages/62/33/94c1661967a7bbf4ab50b1dcf02c9b910674501cb622c795ed5c9d675f4c/pydto-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a730d1a8578fa00634d8cf6d7d3edc14", "sha256": "a44f040fc574cb4e0d9e530a1e0c9c737943a51003f8cc2b5e1eefa150765da0"}, "downloads": -1, "filename": "pydto-0.5.1.tar.gz", "has_sig": false, "md5_digest": "a730d1a8578fa00634d8cf6d7d3edc14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17554, "upload_time": "2015-08-21T12:33:29", "upload_time_iso_8601": "2015-08-21T12:33:29.454995Z", "url": "https://files.pythonhosted.org/packages/62/33/94c1661967a7bbf4ab50b1dcf02c9b910674501cb622c795ed5c9d675f4c/pydto-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:42 2020"}