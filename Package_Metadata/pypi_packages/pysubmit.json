{"info": {"author": "Martin Lellep", "author_email": "martin.lellep@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PySubmit\n\nThe versatile computation submission tool.\n\n## Purpose\n\nScientists who use computational methods often face the problem to test\nvarious parameter values as input for their numerical codes.\n\nHaving the power of high performance computer clusters (HPCs) at hand,\nit is easy to test up to multiple thousand input parameter values\nsimultaneously. However, HPCs typically use batch systems that schedule\ncomputation jobs. Special files called *start scripts* are required\nto get your computation running. These start scripts are even useful\nfor computations on your local workstations if they are adapted a little.\n\nThis tool enables to generate these start scripts with ease and for\narbitrary interfaces to your numerical code. The parameters are supplied\nusing Python and a boilerplate of your start script that needs to be\nfilled with values. With that, this tool helps to make your numerical\nresearch more reproducible.\n\n## Installation\n\nThe package is on PyPI so that an installation is as simple as:\n\n```sh\n$ pip install pysubmit\n```\n\nAlternatively, you can install the package in developer mode with from this repository:\n\n```sh\n$ pip install -e .\n```\n\nwith the current directory being the top level folder of the PySubmit project.\n\n## Configuration\n\nCall ```pysubmit -h``` to see possible configuration options.\n\n## Creating a template\n\nPySubmit uses regular Python files as templates for the creation of the start scripts.\nCreate a Python file with a function ```render()``` in it, which needs to return filenames\nand parameter values for the variables in the actual start script. The start script itself\nis added to this Python file with triple quotes (```\"\"\"```) at the very end. The opening triple\nquotes are followed by ```<<<``` and the ending ones are preceded by ```>>>```. Hence, the limiting\nsyntax of the start script code inside the Python file that comes with the ```render()```\nfunction is ```\"\"\"<<<``` and ```>>>\"\"\"```.\n\nThis format keeps the PySubmit template very consise and contained in a single file. A basic example\nis found in ```tests/template_example_new.py```. Try to use the template by executing:\n\n```sh\n$ pysubmit -pf <path>/<to>/<repo>/pysubmit/tests/template_example_new.py -o TEST\n```\n\nto generate the start scripts as defined in the example and save them into the folder ```TEXT/```.\n\nThe version 1.0 of PySubmit uses a different format for the templates. To use the file format\nfrom v0.1 - and thereby be backwards compatible -, the command-line tool ```pysubmit```\ncomes with an extra keyword ```--boilerplate-file```. If you would like to use the old format\nwith v1.0, use ```--pysubmit-file``` to supply your ```render.py``` file and ```--boilerplate-file```\nto supply the ```boilerplate``` file. An example of the old format can be found under\n```tests/template_example_old.py``` and ```tests/template_example_old.boilerplate```.\n\n## Upload to pypi\n\nThese are the steps to upload this project to pypi:\n\n1. Build the package, see https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives.\n2. Upload the package, see https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives.\n\nThe summary of those two resources is:\n\n1. Build the package: ```python setup.py sdist bdist_wheel```\n2. Upload the package: ```twine upload dist/*```\n\n## Help\n\nIf anything is unclear, please contact me under martin.lellep@gmail.com :-). I personally find this tool\nincredibly useful and use it literally everyday to start my simulations on HPCs.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/Mc_M/pysubmit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pysubmit", "package_url": "https://pypi.org/project/pysubmit/", "platform": "", "project_url": "https://pypi.org/project/pysubmit/", "project_urls": {"Homepage": "https://bitbucket.org/Mc_M/pysubmit"}, "release_url": "https://pypi.org/project/pysubmit/1.0.1/", "requires_dist": ["jinja2"], "requires_python": "", "summary": "Versatile computation submission tool", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PySubmit</h1>\n<p>The versatile computation submission tool.</p>\n<h2>Purpose</h2>\n<p>Scientists who use computational methods often face the problem to test\nvarious parameter values as input for their numerical codes.</p>\n<p>Having the power of high performance computer clusters (HPCs) at hand,\nit is easy to test up to multiple thousand input parameter values\nsimultaneously. However, HPCs typically use batch systems that schedule\ncomputation jobs. Special files called <em>start scripts</em> are required\nto get your computation running. These start scripts are even useful\nfor computations on your local workstations if they are adapted a little.</p>\n<p>This tool enables to generate these start scripts with ease and for\narbitrary interfaces to your numerical code. The parameters are supplied\nusing Python and a boilerplate of your start script that needs to be\nfilled with values. With that, this tool helps to make your numerical\nresearch more reproducible.</p>\n<h2>Installation</h2>\n<p>The package is on PyPI so that an installation is as simple as:</p>\n<pre>$ pip install pysubmit\n</pre>\n<p>Alternatively, you can install the package in developer mode with from this repository:</p>\n<pre>$ pip install -e .\n</pre>\n<p>with the current directory being the top level folder of the PySubmit project.</p>\n<h2>Configuration</h2>\n<p>Call <code>pysubmit -h</code> to see possible configuration options.</p>\n<h2>Creating a template</h2>\n<p>PySubmit uses regular Python files as templates for the creation of the start scripts.\nCreate a Python file with a function <code>render()</code> in it, which needs to return filenames\nand parameter values for the variables in the actual start script. The start script itself\nis added to this Python file with triple quotes (<code>\"\"\"</code>) at the very end. The opening triple\nquotes are followed by <code>&lt;&lt;&lt;</code> and the ending ones are preceded by <code>&gt;&gt;&gt;</code>. Hence, the limiting\nsyntax of the start script code inside the Python file that comes with the <code>render()</code>\nfunction is <code>\"\"\"&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;\"\"\"</code>.</p>\n<p>This format keeps the PySubmit template very consise and contained in a single file. A basic example\nis found in <code>tests/template_example_new.py</code>. Try to use the template by executing:</p>\n<pre>$ pysubmit -pf &lt;path&gt;/&lt;to&gt;/&lt;repo&gt;/pysubmit/tests/template_example_new.py -o TEST\n</pre>\n<p>to generate the start scripts as defined in the example and save them into the folder <code>TEXT/</code>.</p>\n<p>The version 1.0 of PySubmit uses a different format for the templates. To use the file format\nfrom v0.1 - and thereby be backwards compatible -, the command-line tool <code>pysubmit</code>\ncomes with an extra keyword <code>--boilerplate-file</code>. If you would like to use the old format\nwith v1.0, use <code>--pysubmit-file</code> to supply your <code>render.py</code> file and <code>--boilerplate-file</code>\nto supply the <code>boilerplate</code> file. An example of the old format can be found under\n<code>tests/template_example_old.py</code> and <code>tests/template_example_old.boilerplate</code>.</p>\n<h2>Upload to pypi</h2>\n<p>These are the steps to upload this project to pypi:</p>\n<ol>\n<li>Build the package, see <a href=\"https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives\" rel=\"nofollow\">https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives</a>.</li>\n<li>Upload the package, see <a href=\"https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives\" rel=\"nofollow\">https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives</a>.</li>\n</ol>\n<p>The summary of those two resources is:</p>\n<ol>\n<li>Build the package: <code>python setup.py sdist bdist_wheel</code></li>\n<li>Upload the package: <code>twine upload dist/*</code></li>\n</ol>\n<h2>Help</h2>\n<p>If anything is unclear, please contact me under <a href=\"mailto:martin.lellep@gmail.com\">martin.lellep@gmail.com</a> :-). I personally find this tool\nincredibly useful and use it literally everyday to start my simulations on HPCs.</p>\n\n          </div>"}, "last_serial": 6200120, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "49d2f5f765c3f84ff5a5f872562ebd6d", "sha256": "d1def8cdadd0d0116d6ee947734c81dd99bfa5cbd33a20914feb94492d0684ed"}, "downloads": -1, "filename": "pysubmit-0.1.tar.gz", "has_sig": false, "md5_digest": "49d2f5f765c3f84ff5a5f872562ebd6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6151, "upload_time": "2018-01-26T12:31:02", "upload_time_iso_8601": "2018-01-26T12:31:02.501927Z", "url": "https://files.pythonhosted.org/packages/5b/8c/628cafedd1d8650a6e383fd6e0dd3f4a204f6a03c152e35a0f287ffbd6fb/pysubmit-0.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "e6161a3c3fffd1627376dae61c3d4cf7", "sha256": "1693dc2bb9b5cd41eb388dc443cda1d3fe330fe11239f629d3d7c70cb16965f0"}, "downloads": -1, "filename": "pysubmit-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6161a3c3fffd1627376dae61c3d4cf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4999, "upload_time": "2019-11-26T09:30:52", "upload_time_iso_8601": "2019-11-26T09:30:52.667877Z", "url": "https://files.pythonhosted.org/packages/fc/41/49eeee3f93190854a2041f4479dbee4aa47ce8ef0121b546f31bd1614f2c/pysubmit-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66a22fdaac36b78375df2af1e833eb7e", "sha256": "46b8de74cf729ee2dc4b5f6b093d2a5c662d15e260730e95490bfbead37fe5fd"}, "downloads": -1, "filename": "pysubmit-1.0.tar.gz", "has_sig": false, "md5_digest": "66a22fdaac36b78375df2af1e833eb7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4500, "upload_time": "2019-11-26T09:30:53", "upload_time_iso_8601": "2019-11-26T09:30:53.983291Z", "url": "https://files.pythonhosted.org/packages/04/79/fdc4b24bdb9eda63d31a19cf84e0e8030c27e8461fb1934f39283752f9d4/pysubmit-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "db4f9d19abcff764d243f426e40c0607", "sha256": "7b43041a27d138fe9b88d26077c0f3bc4a9f44ba15e8b690e5d86a3f6b45ca93"}, "downloads": -1, "filename": "pysubmit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "db4f9d19abcff764d243f426e40c0607", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4964, "upload_time": "2019-11-26T09:35:38", "upload_time_iso_8601": "2019-11-26T09:35:38.517595Z", "url": "https://files.pythonhosted.org/packages/49/3a/7422fb5ebfce438c0129c58e6c898e21c4a7ef380eba3e4b889705de5d27/pysubmit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c6dccb6801e8d5c6436b43e8a3691ea", "sha256": "d3ede9a1b6135afad73ee495fbff358178f49a3175feb9e2d0e258a9bd53bb42"}, "downloads": -1, "filename": "pysubmit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c6dccb6801e8d5c6436b43e8a3691ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4441, "upload_time": "2019-11-26T09:35:39", "upload_time_iso_8601": "2019-11-26T09:35:39.754656Z", "url": "https://files.pythonhosted.org/packages/2a/04/8368cea3814f16c1fabb771b883696309669e4230172c6817c491a55d7f2/pysubmit-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db4f9d19abcff764d243f426e40c0607", "sha256": "7b43041a27d138fe9b88d26077c0f3bc4a9f44ba15e8b690e5d86a3f6b45ca93"}, "downloads": -1, "filename": "pysubmit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "db4f9d19abcff764d243f426e40c0607", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4964, "upload_time": "2019-11-26T09:35:38", "upload_time_iso_8601": "2019-11-26T09:35:38.517595Z", "url": "https://files.pythonhosted.org/packages/49/3a/7422fb5ebfce438c0129c58e6c898e21c4a7ef380eba3e4b889705de5d27/pysubmit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c6dccb6801e8d5c6436b43e8a3691ea", "sha256": "d3ede9a1b6135afad73ee495fbff358178f49a3175feb9e2d0e258a9bd53bb42"}, "downloads": -1, "filename": "pysubmit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2c6dccb6801e8d5c6436b43e8a3691ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4441, "upload_time": "2019-11-26T09:35:39", "upload_time_iso_8601": "2019-11-26T09:35:39.754656Z", "url": "https://files.pythonhosted.org/packages/2a/04/8368cea3814f16c1fabb771b883696309669e4230172c6817c491a55d7f2/pysubmit-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:51 2020"}