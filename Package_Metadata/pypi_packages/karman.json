{"info": {"author": "Daniel Jilg", "author_email": "daniel@breakthesystem.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Ablator Python Client\n=====================\n\nThis is *karman* -- a Python Client for the `ablator project`_.\n\n.. _ablator project: https://github.com/ablator/ablator/\n\nUsing karman, you can connect to a hosted or self-hosted instance of ablator,\nand check which functionalities to present to your user.\n\nInstallation\n~~~~~~~~~~~~\n\nTo install karman, use pip::\n\n    pip install karman\n\nUsage\n~~~~~\n\nYou can include karman.py in your code and use its `which` and `caniuse` methods. \n\nTo do so, you'll need a username -- basically any string that uniquely identifies \none of your users -- and the functionality id, which you can copy and paste from\nthe ablator web interface::\n\n    import karman\n    username = \"(your user name string)\"\n    functionality_id = \"f8077bfe-bb42-404c-a0d0-3fa107b01860\"\n    ablator_client = karman.Karman(base_url='http://ablator.space/')\n    availability = ablator_client.which(username, functionality_id)\n\n    # this will return one of the following:\n    # availability == \"breakthesystem.test-app.test-func.on\"\n    # availability == None\n\nBoth the `which` and the `caniuse` methods are blocking and will only return once\nthey get an answer from the ablator server. There is no caching implemented at the\nmoment.\n\nThe `which` method will return either a string that corresponds to the flavor slug\nof the flavor that was selected for your user, or None, if the functionality is \ndisabled for your user.\n\nThe `caniuse` method will return `True` if any flavor is activated for your user, \nand `False` otherwise. Use this method if you only want to use ablator to roll\nout a functionality, as opposed to a/b testing.\n\nCommand Line\n~~~~~~~~~~~~\n\nIf you install karman via pip, you also get the karman command line tool. To use it\nrun it like this::\n\n    karman --base_url http://ablator.space/ <username> <functionality_id>\n\nAdd the -c parameter to continuously query the ablator server. If that's too fast\nadd slow parameter as well like this: -c -s", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://ablator.io/", "keywords": "feature switching functionality testing ab red-green", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "karman", "package_url": "https://pypi.org/project/karman/", "platform": "", "project_url": "https://pypi.org/project/karman/", "project_urls": {"Homepage": "http://ablator.io/"}, "release_url": "https://pypi.org/project/karman/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A client for the ablator feature-switching server", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is <em>karman</em> \u2013 a Python Client for the <a href=\"https://github.com/ablator/ablator/\" rel=\"nofollow\">ablator project</a>.</p>\n<p>Using karman, you can connect to a hosted or self-hosted instance of ablator,\nand check which functionalities to present to your user.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install karman, use pip:</p>\n<pre>pip install karman\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You can include karman.py in your code and use its <cite>which</cite> and <cite>caniuse</cite> methods.</p>\n<p>To do so, you\u2019ll need a username \u2013 basically any string that uniquely identifies\none of your users \u2013 and the functionality id, which you can copy and paste from\nthe ablator web interface:</p>\n<pre>import karman\nusername = \"(your user name string)\"\nfunctionality_id = \"f8077bfe-bb42-404c-a0d0-3fa107b01860\"\nablator_client = karman.Karman(base_url='http://ablator.space/')\navailability = ablator_client.which(username, functionality_id)\n\n# this will return one of the following:\n# availability == \"breakthesystem.test-app.test-func.on\"\n# availability == None\n</pre>\n<p>Both the <cite>which</cite> and the <cite>caniuse</cite> methods are blocking and will only return once\nthey get an answer from the ablator server. There is no caching implemented at the\nmoment.</p>\n<p>The <cite>which</cite> method will return either a string that corresponds to the flavor slug\nof the flavor that was selected for your user, or None, if the functionality is\ndisabled for your user.</p>\n<p>The <cite>caniuse</cite> method will return <cite>True</cite> if any flavor is activated for your user,\nand <cite>False</cite> otherwise. Use this method if you only want to use ablator to roll\nout a functionality, as opposed to a/b testing.</p>\n</div>\n<div id=\"command-line\">\n<h2>Command Line</h2>\n<p>If you install karman via pip, you also get the karman command line tool. To use it\nrun it like this:</p>\n<pre>karman --base_url http://ablator.space/ &lt;username&gt; &lt;functionality_id&gt;\n</pre>\n<p>Add the -c parameter to continuously query the ablator server. If that\u2019s too fast\nadd slow parameter as well like this: -c -s</p>\n</div>\n\n          </div>"}, "last_serial": 3170113, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d9884d3d040c64f70189c90ce0b32729", "sha256": "4b1be78e2ff784750e3ad92700ec4ec70838bef280ab5fc1c982daaacf67b85c"}, "downloads": -1, "filename": "karman-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d9884d3d040c64f70189c90ce0b32729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3657, "upload_time": "2017-09-08T07:58:53", "upload_time_iso_8601": "2017-09-08T07:58:53.123005Z", "url": "https://files.pythonhosted.org/packages/b4/f5/bdf4a0098344664a8d011fa1c94817f003939fe8942bb70a4051cbb48eb9/karman-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a5d96509cb8140ea98e8d631e66329c0", "sha256": "fd5773c398d6a5a3d706e1be0bbafe7e57ed58daa58b11b4ce02a3d474fa59a6"}, "downloads": -1, "filename": "karman-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5d96509cb8140ea98e8d631e66329c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5983, "upload_time": "2017-09-13T09:07:55", "upload_time_iso_8601": "2017-09-13T09:07:55.639356Z", "url": "https://files.pythonhosted.org/packages/ce/11/a34f36ac08e8a9c238b37ff58f01cdf59e9636c548432b175e289b78fcc2/karman-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f9637acfc017823fa01f588d056e188", "sha256": "077393ec67affc07b7335003360d72c663721ae21349fdd03554257b9f13a1fa"}, "downloads": -1, "filename": "karman-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f9637acfc017823fa01f588d056e188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4451, "upload_time": "2017-09-13T09:07:29", "upload_time_iso_8601": "2017-09-13T09:07:29.476492Z", "url": "https://files.pythonhosted.org/packages/73/ab/1f26263ba4a4fbc15227d92929e7e9a458fd220f51817310724fb71ca42d/karman-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a5d96509cb8140ea98e8d631e66329c0", "sha256": "fd5773c398d6a5a3d706e1be0bbafe7e57ed58daa58b11b4ce02a3d474fa59a6"}, "downloads": -1, "filename": "karman-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a5d96509cb8140ea98e8d631e66329c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5983, "upload_time": "2017-09-13T09:07:55", "upload_time_iso_8601": "2017-09-13T09:07:55.639356Z", "url": "https://files.pythonhosted.org/packages/ce/11/a34f36ac08e8a9c238b37ff58f01cdf59e9636c548432b175e289b78fcc2/karman-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f9637acfc017823fa01f588d056e188", "sha256": "077393ec67affc07b7335003360d72c663721ae21349fdd03554257b9f13a1fa"}, "downloads": -1, "filename": "karman-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f9637acfc017823fa01f588d056e188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4451, "upload_time": "2017-09-13T09:07:29", "upload_time_iso_8601": "2017-09-13T09:07:29.476492Z", "url": "https://files.pythonhosted.org/packages/73/ab/1f26263ba4a4fbc15227d92929e7e9a458fd220f51817310724fb71ca42d/karman-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:37 2020"}