{"info": {"author": "Jimmy Yuen Ho Wong", "author_email": "wyuenho@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: CherryPy", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Internet :: WWW/HTTP :: Session", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "BlueberryPy\n===========\nSame as CherryPy, just with a different filling.\n\n\n\nWhat is it?\n-----------\nBlueberryPy is a CherryPy project skeleton generator and a collection of tools,\nplugins and utilities for `CherryPy <http://cherrypy.org/>`_ - the minimalist\nPython web framework.\n\n\nWhat does it offer?\n-------------------\nBlueberryPy is offered as a set of CherryPy tools, WSPB plugins and extra utility\nmodules. All the components are optional and completely pluggable without any\nintermodule dependencies, so you can safely pick and choose just the components\nyou want.\n\n- SQLAlchemy ORM plugin with two-phase commit support\n- Per-request SQLAlchemy ORM session tool\n- Redis session storage\n- Jinja2 template engine\n- Webassets asset pipeline integrated with Jinja2\n- Application specific logging\n- CherryPy project skeleton generator\n- Preconfigured console for experimenting inside a generated project\n- YAML configuration for CherryPy, Python's logging module and Webassets\n- Convenient Email module for sending text and HTML emails\n- JSON tools to convert to and from SQLAlchemy models\n- CSRF token\n\n\nInstallation\n------------\n\nStable version::\n\n   $ pip install blueberrypy\n\nDevelopment version::\n\n   $ pip install https://bitbucket.org/wyuenho/blueberrypy\n\n\nNote: You should probably install it inside a `virtualenv <http://www.virtualenv.org/>`_.\n\n\nUsage\n-----\n\nOnce BlueberryPy is installed, a script called `blueberrypy` should be available on\nyour PATH.\n\n::\n\n  usage: blueberrypy [-h] [-v] [-C CONFIG_DIR] [command]\n\n  BlueberryPy lightweight pluggable Web application framework command line interface.\n\n     Type 'blueberrypy -h' or 'blueberrypy --help' for general help.\n     Type 'blueberrypy help <command>' for help on that specific command.\n\n  commands:\n\n     help                print this help or a command's if an argument is given\n     create              create a project skeleton\n     console             BlueberryPy REPL for experimentations\n     bundle              bundles up web assets (type 'blueberrypy help bundle' for details)\n     serve               spawn a new CherryPy server process\n\n  positional arguments:\n     command               the action to perform\n\n  optional arguments:\n     -h, --help            show this help message and exit\n     -v, --version         print version information and exit.\n     -C CONFIG_DIR, --config_dir CONFIG_DIR\n                           path to the config directory\n\n\nTo create a project skeleton::\n\n   $ blueberrypy create\n\nAfter you've answered a couple of questions, you should see something similar to\nthis::\n\n   ===========================================================================\n   Your project skeleton has been created under /path/to/your/project .\n   \n   \n   Subsystems chosen\n   -----------------\n   Routes (RESTful controllers): True\n   Jinja2: True\n   webassets: True\n   redis: False\n   SQLAlchemy: True\n   ...\n\n\nIf you install a development version of your package now, the dependencies will\nbe automatically installed for you as well::\n\n   $ pip install -e .\n\nYou can install the optional speedup packages too::\n\n   $ pip install blueberrypy[speedups]\n\nFinally, you need to install a database driver such as `psycopg2`::\n\n   $ pip install psycopg2\n\nNow your package is ready to be served::\n\n   $ blueberrypy serve\n\nType `http://localhost:8080` into your browser's location bar and voila!\n\nHappy coding!\n\nTODO\n----\n\n#. write sphinx doc\n#. minimalist, conditional validators for json utils and form inputs\n#. babel integration\n#. request handler cache decorator\n#. search engine integration\n#. alembic or sqlalchemy-migrate integration\n#. modularize skeleton generation and commands\n#. better test coverage", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/wyuenho/blueberrypy", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "blueberrypy", "package_url": "https://pypi.org/project/blueberrypy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/blueberrypy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/wyuenho/blueberrypy"}, "release_url": "https://pypi.org/project/blueberrypy/0.5.4/", "requires_dist": null, "requires_python": null, "summary": "CherryPy plugins and tools for integration with various libraries, including logging, Redis, SQLAlchemy and Jinja2 and webassets.", "version": "0.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Same as CherryPy, just with a different filling.</p>\n<div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>BlueberryPy is a CherryPy project skeleton generator and a collection of tools,\nplugins and utilities for <a href=\"http://cherrypy.org/\" rel=\"nofollow\">CherryPy</a> - the minimalist\nPython web framework.</p>\n</div>\n<div id=\"what-does-it-offer\">\n<h2>What does it offer?</h2>\n<p>BlueberryPy is offered as a set of CherryPy tools, WSPB plugins and extra utility\nmodules. All the components are optional and completely pluggable without any\nintermodule dependencies, so you can safely pick and choose just the components\nyou want.</p>\n<ul>\n<li>SQLAlchemy ORM plugin with two-phase commit support</li>\n<li>Per-request SQLAlchemy ORM session tool</li>\n<li>Redis session storage</li>\n<li>Jinja2 template engine</li>\n<li>Webassets asset pipeline integrated with Jinja2</li>\n<li>Application specific logging</li>\n<li>CherryPy project skeleton generator</li>\n<li>Preconfigured console for experimenting inside a generated project</li>\n<li>YAML configuration for CherryPy, Python\u2019s logging module and Webassets</li>\n<li>Convenient Email module for sending text and HTML emails</li>\n<li>JSON tools to convert to and from SQLAlchemy models</li>\n<li>CSRF token</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Stable version:</p>\n<pre>$ pip install blueberrypy\n</pre>\n<p>Development version:</p>\n<pre>$ pip install https://bitbucket.org/wyuenho/blueberrypy\n</pre>\n<p>Note: You should probably install it inside a <a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Once BlueberryPy is installed, a script called <cite>blueberrypy</cite> should be available on\nyour PATH.</p>\n<pre>usage: blueberrypy [-h] [-v] [-C CONFIG_DIR] [command]\n\nBlueberryPy lightweight pluggable Web application framework command line interface.\n\n   Type 'blueberrypy -h' or 'blueberrypy --help' for general help.\n   Type 'blueberrypy help &lt;command&gt;' for help on that specific command.\n\ncommands:\n\n   help                print this help or a command's if an argument is given\n   create              create a project skeleton\n   console             BlueberryPy REPL for experimentations\n   bundle              bundles up web assets (type 'blueberrypy help bundle' for details)\n   serve               spawn a new CherryPy server process\n\npositional arguments:\n   command               the action to perform\n\noptional arguments:\n   -h, --help            show this help message and exit\n   -v, --version         print version information and exit.\n   -C CONFIG_DIR, --config_dir CONFIG_DIR\n                         path to the config directory\n</pre>\n<p>To create a project skeleton:</p>\n<pre>$ blueberrypy create\n</pre>\n<p>After you\u2019ve answered a couple of questions, you should see something similar to\nthis:</p>\n<pre>===========================================================================\nYour project skeleton has been created under /path/to/your/project .\n\n\nSubsystems chosen\n-----------------\nRoutes (RESTful controllers): True\nJinja2: True\nwebassets: True\nredis: False\nSQLAlchemy: True\n...\n</pre>\n<p>If you install a development version of your package now, the dependencies will\nbe automatically installed for you as well:</p>\n<pre>$ pip install -e .\n</pre>\n<p>You can install the optional speedup packages too:</p>\n<pre>$ pip install blueberrypy[speedups]\n</pre>\n<p>Finally, you need to install a database driver such as <cite>psycopg2</cite>:</p>\n<pre>$ pip install psycopg2\n</pre>\n<p>Now your package is ready to be served:</p>\n<pre>$ blueberrypy serve\n</pre>\n<p>Type <cite>http://localhost:8080</cite> into your browser\u2019s location bar and voila!</p>\n<p>Happy coding!</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ol>\n<li>write sphinx doc</li>\n<li>minimalist, conditional validators for json utils and form inputs</li>\n<li>babel integration</li>\n<li>request handler cache decorator</li>\n<li>search engine integration</li>\n<li>alembic or sqlalchemy-migrate integration</li>\n<li>modularize skeleton generation and commands</li>\n<li>better test coverage</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 786932, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "cb18bd2f1873664423d82386722ee360", "sha256": "23970c56b93ce733696195d2b220fa3eececc0eefe99f791f5527d62eb48ad95"}, "downloads": -1, "filename": "blueberrypy-0.5.tar.gz", "has_sig": false, "md5_digest": "cb18bd2f1873664423d82386722ee360", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34492, "upload_time": "2012-05-20T12:34:21", "upload_time_iso_8601": "2012-05-20T12:34:21.773302Z", "url": "https://files.pythonhosted.org/packages/ca/d9/68655bf34ba5ef732a37137dc51f533d7d3f2679952eb8f6383ecb2f8ce9/blueberrypy-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "07d3aac85cb7b00efd7e376d21b1ad5b", "sha256": "218178e6a7f6d3f66ecbae938a2186ce72ced2ba5ad0ee7048b8a5ce27dc996c"}, "downloads": -1, "filename": "blueberrypy-0.5.1.tar.gz", "has_sig": false, "md5_digest": "07d3aac85cb7b00efd7e376d21b1ad5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48087, "upload_time": "2012-05-20T14:19:19", "upload_time_iso_8601": "2012-05-20T14:19:19.547956Z", "url": "https://files.pythonhosted.org/packages/ca/de/746e52d86b5629d844fdda249be6476d20d4cc731006bc1c4a5ad3934b80/blueberrypy-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1e4c382975f538f851ca6667ee967b28", "sha256": "17435985e86aa327584e685839c29c34e28afa9cff392784357515963debc50b"}, "downloads": -1, "filename": "blueberrypy-0.5.2.tar.gz", "has_sig": false, "md5_digest": "1e4c382975f538f851ca6667ee967b28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48759, "upload_time": "2012-07-25T08:27:06", "upload_time_iso_8601": "2012-07-25T08:27:06.991718Z", "url": "https://files.pythonhosted.org/packages/67/88/40c59aa8577026bbaf7244881eb150c58c73863de1c3c74330432df5e28e/blueberrypy-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "7c4dea15e38b51ca7c1fc57e4d931cc9", "sha256": "213ff2829384b652ee90b643386cc4df3c030d1f76d281745129d1b7d7fd1492"}, "downloads": -1, "filename": "blueberrypy-0.5.3.tar.gz", "has_sig": false, "md5_digest": "7c4dea15e38b51ca7c1fc57e4d931cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51731, "upload_time": "2012-08-04T10:18:25", "upload_time_iso_8601": "2012-08-04T10:18:25.529613Z", "url": "https://files.pythonhosted.org/packages/09/66/e91ed3a67476007195d4aa342bcb6de5aec4ef18191760a8bc7e18166c67/blueberrypy-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "012d998fe4a69c0e14f189b920bbe57e", "sha256": "76d67e2dffa7855c43b5d20ea18c4e89bd1d62ebadc8130a4876be1502e449f7"}, "downloads": -1, "filename": "blueberrypy-0.5.4.tar.gz", "has_sig": false, "md5_digest": "012d998fe4a69c0e14f189b920bbe57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52033, "upload_time": "2012-09-06T23:15:03", "upload_time_iso_8601": "2012-09-06T23:15:03.795420Z", "url": "https://files.pythonhosted.org/packages/65/7e/f731f1e6ca8ca5f510fbc258e5a865956e5f6f2ae694a99da00eff578f44/blueberrypy-0.5.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "012d998fe4a69c0e14f189b920bbe57e", "sha256": "76d67e2dffa7855c43b5d20ea18c4e89bd1d62ebadc8130a4876be1502e449f7"}, "downloads": -1, "filename": "blueberrypy-0.5.4.tar.gz", "has_sig": false, "md5_digest": "012d998fe4a69c0e14f189b920bbe57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52033, "upload_time": "2012-09-06T23:15:03", "upload_time_iso_8601": "2012-09-06T23:15:03.795420Z", "url": "https://files.pythonhosted.org/packages/65/7e/f731f1e6ca8ca5f510fbc258e5a865956e5f6f2ae694a99da00eff578f44/blueberrypy-0.5.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:59 2020"}