{"info": {"author": "Dusty Phillips", "author_email": "dusty@archlinux.ca", "bugtrack_url": null, "classifiers": [], "description": "django-pytest\n=============\n\nThis project allows you to use py.test as a django test runner, instead of the\ndefault test runner.\n\nTo use it, add it to your python path and add `django_pytest` to your installed\napps. Also set the `TEST_RUNNER = 'django_pytest.test_runner.run_tests'` setting.\nIf you're using Django 1.3 or newer set\n`TEST_RUNNER = 'django_pytest.test_runner.TestRunner'` or Django will print\ndeprecation warnings each time you run your tests.\n\nAlso create a `conftest.py` in your project directory and include:\n\n\tfrom django_pytest.conftest import pytest_funcarg__client, pytest_funcarg__django_client\n\nYou can also use:\n\n\tfrom django_pytest.auth_funcargs import pytest_funcarg__user, pytest_funcarg__groups\n\nto import a user or some groups with users in them\n\nNow anywhere in your project, you can create files called\n`test_<something>.py`.  These are standard py.test test files. Use the funcarg\n`client` in every test to both instantiate a test database that is cleared\nafter each test and to provide you with a django test client object identical\nto the one used in django's test system. For example:\n\n\tdef test_filter(client):\n    \tresponse = client.get('/browse/', {'filter': '1'})\n    \tassert response.status_code == 200\n\nUse `./manage.py test` to run the py.test test runs (ie: it replaces the\nstandard django test runner). You can pass py.test options to the command\nand they will be forwarded to py.test. (Technically, I haven't got it passing\nall options, just the most common ones I use)\n\nThe management command has been set up so that syncdb will use the django core\nsyncdb if `SOUTH_TESTS_MIGRATE` is set to False, if south is installed. This\nprevents migrations from running when running unit tests. This speeds up test\nsetup significantly, but it means your test db may not be identical to\nproduction, if you have faulty migrations.\n\npy.test automatically picks up any subclasses of `unittest.TestCase`, provided\nthey are in a module named `test_<something>.py`. Thus, all your existing django\nunittests should work seemlessly with py.test, although you may have to rename\nyour test files if they do not conform to this convention. You can also write\ncustom py.test test collection hooks to pick up test modules that are named in\na different directory structure.\n\nThis project differs from <http://github.com/bfirsh/pytest_django> in that it\nprovides a django test runner that calls py.test, rather than creating a\npy.test plugin to test django projects. I believe there is overlapping\nfunctionality from the two projects, and also that they can be integrated into\na single project, but I have not looked at the feasibility of this yet.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/buchuki/django-pytest", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "django-pytest", "package_url": "https://pypi.org/project/django-pytest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pytest/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/buchuki/django-pytest"}, "release_url": "https://pypi.org/project/django-pytest/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "django test runner to use py.test tests", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project allows you to use py.test as a django test runner, instead of the\ndefault test runner.</p>\n<p>To use it, add it to your python path and add <cite>django_pytest</cite> to your installed\napps. Also set the <cite>TEST_RUNNER = \u2018django_pytest.test_runner.run_tests\u2019</cite> setting.\nIf you\u2019re using Django 1.3 or newer set\n<cite>TEST_RUNNER = \u2018django_pytest.test_runner.TestRunner\u2019</cite> or Django will print\ndeprecation warnings each time you run your tests.</p>\n<p>Also create a <cite>conftest.py</cite> in your project directory and include:</p>\n<blockquote>\nfrom django_pytest.conftest import pytest_funcarg__client, pytest_funcarg__django_client</blockquote>\n<p>You can also use:</p>\n<blockquote>\nfrom django_pytest.auth_funcargs import pytest_funcarg__user, pytest_funcarg__groups</blockquote>\n<p>to import a user or some groups with users in them</p>\n<p>Now anywhere in your project, you can create files called\n<cite>test_&lt;something&gt;.py</cite>.  These are standard py.test test files. Use the funcarg\n<cite>client</cite> in every test to both instantiate a test database that is cleared\nafter each test and to provide you with a django test client object identical\nto the one used in django\u2019s test system. For example:</p>\n<blockquote>\ndef test_filter(client):\nresponse = client.get(\u2018/browse/\u2019, {\u2018filter\u2019: \u20181\u2019})\nassert response.status_code == 200</blockquote>\n<p>Use <cite>./manage.py test</cite> to run the py.test test runs (ie: it replaces the\nstandard django test runner). You can pass py.test options to the command\nand they will be forwarded to py.test. (Technically, I haven\u2019t got it passing\nall options, just the most common ones I use)</p>\n<p>The management command has been set up so that syncdb will use the django core\nsyncdb if <cite>SOUTH_TESTS_MIGRATE</cite> is set to False, if south is installed. This\nprevents migrations from running when running unit tests. This speeds up test\nsetup significantly, but it means your test db may not be identical to\nproduction, if you have faulty migrations.</p>\n<p>py.test automatically picks up any subclasses of <cite>unittest.TestCase</cite>, provided\nthey are in a module named <cite>test_&lt;something&gt;.py</cite>. Thus, all your existing django\nunittests should work seemlessly with py.test, although you may have to rename\nyour test files if they do not conform to this convention. You can also write\ncustom py.test test collection hooks to pick up test modules that are named in\na different directory structure.</p>\n<p>This project differs from &lt;<a href=\"http://github.com/bfirsh/pytest_django\" rel=\"nofollow\">http://github.com/bfirsh/pytest_django</a>&gt; in that it\nprovides a django test runner that calls py.test, rather than creating a\npy.test plugin to test django projects. I believe there is overlapping\nfunctionality from the two projects, and also that they can be integrated into\na single project, but I have not looked at the feasibility of this yet.</p>\n\n          </div>"}, "last_serial": 790383, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d84d04cc8f77fdd3195837aa6db5a183", "sha256": "9556cbdfa9ddec10768d5e930f2495f7603e6d0be868fcc68191aadac1026912"}, "downloads": -1, "filename": "django-pytest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d84d04cc8f77fdd3195837aa6db5a183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3375, "upload_time": "2010-06-21T22:04:07", "upload_time_iso_8601": "2010-06-21T22:04:07.805797Z", "url": "https://files.pythonhosted.org/packages/63/57/0cc736c27bb1ca732a75db0365beee642b143c9407ae39af4e9523d4c438/django-pytest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "707b2359c2e5c73270d75017183e3795", "sha256": "527944b88618d4c529ac3e95ba5c3c3213b40fe2d98547642f1ba328a6c1c62a"}, "downloads": -1, "filename": "django-pytest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "707b2359c2e5c73270d75017183e3795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3652, "upload_time": "2010-06-24T18:25:51", "upload_time_iso_8601": "2010-06-24T18:25:51.764859Z", "url": "https://files.pythonhosted.org/packages/a3/3e/033a109ff2f99c88e5ee25e5fa2a67bb9dcb2f9e4327afd14faa56887490/django-pytest-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6408013adacad398808b295885beab1f", "sha256": "7648c81a8c168d5cac09849f166a1c65d7411dff7e55920bfabad7c96b166053"}, "downloads": -1, "filename": "django-pytest-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6408013adacad398808b295885beab1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4119, "upload_time": "2010-06-27T21:55:57", "upload_time_iso_8601": "2010-06-27T21:55:57.183818Z", "url": "https://files.pythonhosted.org/packages/fe/c7/8e82267337b0d06e1af4755883a819f48d33087712b56afc71b670a3c93f/django-pytest-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "44f5fbe22a3e7b8a29a24cbfc33c2fce", "sha256": "59cbf7d0e1c21816a1b760eb56dce50d5cd88b6c8f96b89a260bf1b3a8f80f2e"}, "downloads": -1, "filename": "django-pytest-0.1.3.tar.gz", "has_sig": false, "md5_digest": "44f5fbe22a3e7b8a29a24cbfc33c2fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4141, "upload_time": "2010-06-27T22:02:25", "upload_time_iso_8601": "2010-06-27T22:02:25.276812Z", "url": "https://files.pythonhosted.org/packages/c1/fb/52365ad010f64db989b692acb52ce0b9787f29dc91a893fba73368249c4f/django-pytest-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "f0a397525db1717125278a42750ba6e0", "sha256": "0e6bad293e081b5e759f02e56aba7ba849b49d8bba346f138bfb49a52a445594"}, "downloads": -1, "filename": "django-pytest-0.1.4.tar.gz", "has_sig": false, "md5_digest": "f0a397525db1717125278a42750ba6e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4884, "upload_time": "2010-08-23T00:03:07", "upload_time_iso_8601": "2010-08-23T00:03:07.512428Z", "url": "https://files.pythonhosted.org/packages/47/2b/29dce88ee494672047362d168cf2d051979b7115dd43926b25ba58019b18/django-pytest-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "da998f956e118c7af207201c41e2b408", "sha256": "437a39b06649b98531877fe9e342cef5cacf41c441d0ff8a99f0206ee7bf95bd"}, "downloads": -1, "filename": "django-pytest-0.1.5.tar.gz", "has_sig": false, "md5_digest": "da998f956e118c7af207201c41e2b408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5457, "upload_time": "2011-10-25T17:44:10", "upload_time_iso_8601": "2011-10-25T17:44:10.149395Z", "url": "https://files.pythonhosted.org/packages/85/40/f3ae6f7d8b7a01f3deca50d1f6e9814e195b1fd7234eb1974775c8844424/django-pytest-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f44f8792994501c37efaf7d44b7baf4e", "sha256": "de21f20f9e7eb941529d75078b18192506a9f6d4ae80f86fbe2f3bcac8e09d71"}, "downloads": -1, "filename": "django-pytest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f44f8792994501c37efaf7d44b7baf4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5906, "upload_time": "2012-03-28T21:26:17", "upload_time_iso_8601": "2012-03-28T21:26:17.372733Z", "url": "https://files.pythonhosted.org/packages/b2/e2/2a87105042c08a6f116aac1d9c666e89982a4f707652a0f7d76e8a88b554/django-pytest-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f44f8792994501c37efaf7d44b7baf4e", "sha256": "de21f20f9e7eb941529d75078b18192506a9f6d4ae80f86fbe2f3bcac8e09d71"}, "downloads": -1, "filename": "django-pytest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f44f8792994501c37efaf7d44b7baf4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5906, "upload_time": "2012-03-28T21:26:17", "upload_time_iso_8601": "2012-03-28T21:26:17.372733Z", "url": "https://files.pythonhosted.org/packages/b2/e2/2a87105042c08a6f116aac1d9c666e89982a4f707652a0f7d76e8a88b554/django-pytest-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:32 2020"}