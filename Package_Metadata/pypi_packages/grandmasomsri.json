{"info": {"author": "SomsriCat", "author_email": "s.wuttiprasit@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# How to upload your package to PyPI \n\nIf you haven\u2019t published things on PyPI before, you\u2019ll need to create an account at [PyPI](https://pypi.org/).\n\nWe need you to create an account at [TestPyPI](https://test.pypi.org/) to test before you publish your package to PyPI. (You should set username and passwords PyPI same as TestPyPI)\n\n# Picking A Name\nPython module/package names should generally follow the following constraints:\n\n* All lowercase\n* Unique on PyPI\n* Underscore-separated or no word separators at all \n\n# Creating The Scaffolding\n\nDirectory structure for <code>grandmasomsri</code> should look like this:\n```\n  somsri/\n    setup.py\n    REAME.md\n    MANIFEST.in\n    bin/\n        grandpaprayud-status\n        grandmasomsri-status\n        graph-power\n    src/\n        grandmasomsri/\n            __init__.py\n            grandmaSomsri.py\n            grandpaPrayud.py\n            graph/\n                power.py\n```\nThe subdirectory <code>grandmasomsri</code> is actually our Python module\n\n<code>setup.py</code> contains:\n```Python\nfrom setuptools import setup\n\ndef readme():\n    with open('README.md') as f:\n        return f.read()\n\nsetup(name='grandmasomsri',\n    version='0.3',\n    description='Grandma Somsri and Grandpa Prayud',\n    long_description=readme(),\n    url='https://github.com/SOMSRICAT/grandmasomsri',\n    author='SomsriCat',\n    author_email='s.wuttiprasit@gmail.com',\n    license='Somsri',\n    install_requires=[\n        'matplotlib',\n        'numpy',\n    ],\n    scripts=['bin/grandmasomsri-status',\n             'bin/grandpaprayud-status',\n             'bin/graph-power'],\n    keywords='grandmasomsri grandpaprayud somsri prayud',\n    packages=['grandmasomsri'],\n    package_dir={'grandmasomsri': 'src/grandmasomsri'},\n    package_data={'grandmasomsri': ['graph/*.py']\n    },\n)\n```\n\n* If your package required any package you needso add <code>install_requires</code> keyword argument to <code>setup.py</code> \n* Many Python packages include command line tools. This is useful for distributing support tools which are associated with a library \nfor <code>grandmasomsri</code>, we will add a <code>grandmasomsri-status</code>, <code>grandpaprayud-status</code>, <code>graph-power</code>, command line tool by adding <code>scripts</code> keyword argument \n* You\u2019ll probably want a README file in your source distribution, and that file can serve double purpose as the <code>long_description</code> specified to PyPI. Further, if that file is written in reStructuredText, it can be formatted nicely\n* Package data can be added to packages using the <code>package_data</code> keyword argument to the setup() function\n* Use <code>package_dir</code> key argument to path your package location\n* Changed in version 3.1: All the files that match <code>package_data</code> will be added to the MANIFEST file if no template is provided. \n\n\nsee more setup.py in the [PyPA sample project](https://github.com/pypa/sampleproject)\n\n# Package\n<code>grandmaSomsri.py</code> contains:\n```Python\ndef somsri():\n    print (\"---------------------------------------------\")\n    print (\"|                               /          |\")\n    print (\"|                          ,.. /           |\")\n    print (\"|                        ,'   ';           |\")\n    print (\"|            ,,.__    _,' /';  .           |\")\n    print (\"|           :','  ~~~~    '. '~            |\")\n    print (\"|         :' (   )         )::,            |\")\n    print (\"|         '. '. .=----=..-~  .;'           |\")\n    print (\"|          '  ;'  ::   ':.  ''             |\")\n    print (\"|           (:   ':    ;)                  |\")\n    print (\"|            \\\\\\  '    //'                  |\")\n    print (\"|             ''      ''                   |\")\n    print (\"---------------------------------------------\")\n    print (\"|  Name: Grandma Somsri(\u0e22\u0e32\u0e22\u0e2a\u0e21\u0e28\u0e23\u0e35)           |\")\n    print (\"|  Ability: Very good eyesight (DEX +99)   |\")\n    print (\"|  Weapon: Kar98k                          |\")\n    print (\"|  Hobby: Camping in the forest            |\")\n    print (\"---------------------------------------------\")\n```\n<code>grandpaPrayud.py</code> contains:\n```Python\ndef prayud():\n    print (\"---------------------------------------------\")\n    print (\"|          ((  ####@@!!$$    ))             |\")\n    print (\"|              `#####@@!$$`  ))             |\")\n    print (\"|           ((  '####@!!$:                  |\")\n    print (\"|         ((  ,####@!!$:   ))               |\")\n    print (\"|             .###@!!$:                     |\")\n    print (\"|             `##@@!$:                      |\")\n    print (\"|               `#@!!$                      |\")\n    print (\"|          !@#    `#@!$:       @#$          |\")\n    print (\"|           #$     `#@!$:       !@!         |\")\n    print (\"|                   '@!$:                   |\")\n    print (\"|               '`\\   !$: /`'               |\")\n    print (\"|                   '\\  '!: /'              |\")\n    print (\"|                      '\\ : /'              |\")\n    print (\"---------------------------------------------\")\n    print (\"|  Name: Grandpa Prayud(\u0e15\u0e32\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14)           |\")\n    print (\"|  Ability: Can get angry anytime           |\") \n    print (\"|           he want (str +99)               |\")\n    print (\"|  Weapon: Table                            |\")\n    print (\"|  Hobby: Do an exercise                    |\")\n    print (\"---------------------------------------------\")\n```\n```Python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n\ndef powerGraph():\n    y = np.arange(0,100)\n    prayud = []\n    somsri = []\n    for i in y:\n        tmp = i * 0.8\n        if tmp % 3 == 0:\n            tmp *= 1.2\n        if tmp % 4 == 0:\n            tmp *= 2\n        prayud.append(tmp)\n\n        tmp = i * 0.6\n        if tmp % 4 == 0:\n            tmp *= 1.1\n        if tmp % 7 == 0:\n            tmp *= 0.5\n        if tmp % 6 == 0:\n            tmp *= 2.5\n        somsri.append(tmp)\n\n\n    plt.plot(y,somsri,'-', label='Grandma Somsri')\n    plt.plot(y,prayud, '-', label='Grandpa Prayud')\n    plt.title(\"Power Graph\")\n    plt.xlabel('100 %')\n    plt.ylabel('Power')\n\n    plt.legend()\n\n    plt.show()\n\npowerGraph()\n```\n# Script\nThe <code>grandmasomsri-status</code> script in bin looks like this:\n```Python\n#!/usr/bin/env python \n\nfrom grandmasomsri.grandmaSomsri import somsri \n\nprint (somsri())\n\n``` \nThe <code>grandpaprayud-status</code> script in bin looks like this:\n```Python\n#!/usr/bin/env python \n\nfrom grandmasomsri.grandpaPrayud import prayud \n\nprint (prayud())\n\n``` \nThe <code>graph-power</code> script in bin looks like this:\n```Python\n#!/usr/bin/env python \n\nfrom grandmasomsri.graph import power\n\nprint (powerGraph())\n``` \n<code>MANIFEST.in</code> contains:\n```\ninclude README.md\n```\n\nNow we can install the package locally (for use on our system or test before publish) with:\n```\n$ pip install .\n```\n\n# Publishing on TestPyPI and PyPI \n\nFirst create a source distribution with:\n```\n$ python setup.py sdist\n```\nor\n```\n$ python3 setup.py sdist bdist_wheel\n```\nThis will create <code>dist/grandmasomsri-0.1.tar.gz</code> inside our top-level directory. \n\nYou can use <code>twine</code> to upload the distribution packages. You\u2019ll need to install <code>twine</code> by this command:\n```\n$ pip install twine --upgrade\n```\nor \n```\n$ python3 -m pip install --user --upgrade twine\n```\n\n### TestPyPI\nYou should upload your package to TestPyPI before PyPI\n\nRun Twine to upload all of the archives under dist:\n```\n$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\nYou will be prompted for the username and password you registered with TestPyPI. \nAfter the command completes you can check your package at [TestPyPI](https://test.pypi.org/manage/projects/)\n\n### PyPI\nNow you ready to upload your package to PyPI\nby following this command:\n```\n$ twine upload --repository-url https://upload.pypi.org/legacy/ dist/*\n```\nYou will be prompted for the username and password you registered with PyPI. \nAfter the command completes you can check your package at [PyPI](https://pypi.org/manage/projects/)\n\n# Installing the Package\n\nAt this point, other consumers of this package can install the package with <code>pip</code>:\n```\n$ pip install grandmasomsri\n```\n\n\nIts will be automatically installed to your Python package folder\nand <code>setuptools</code> will copy the script to your PATH and make it available for general use\n\nYou can run package in command line by following this command:\n```\n$ grandmasomsri-status\n```\n```\n$ grandpaprayud-status\n```\n```\n$ graph-power\n```", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SOMSRICAT/grandmasomsri", "keywords": "grandmasomsri grandpaprayud somsri prayud", "license": "Somsri", "maintainer": "", "maintainer_email": "", "name": "grandmasomsri", "package_url": "https://pypi.org/project/grandmasomsri/", "platform": "", "project_url": "https://pypi.org/project/grandmasomsri/", "project_urls": {"Homepage": "https://github.com/SOMSRICAT/grandmasomsri"}, "release_url": "https://pypi.org/project/grandmasomsri/0.3/", "requires_dist": null, "requires_python": "", "summary": "Grandma Somsri and Grandpa Prayud", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            # How to upload your package to PyPI <br><br>If you haven\u2019t published things on PyPI before, you\u2019ll need to create an account at [PyPI](https://pypi.org/).<br><br>We need you to create an account at [TestPyPI](https://test.pypi.org/) to test before you publish your package to PyPI. (You should set username and passwords PyPI same as TestPyPI)<br><br># Picking A Name<br>Python module/package names should generally follow the following constraints:<br><br>* All lowercase<br>* Unique on PyPI<br>* Underscore-separated or no word separators at all <br><br># Creating The Scaffolding<br><br>Directory structure for &lt;code&gt;grandmasomsri&lt;/code&gt; should look like this:<br>```<br>  somsri/<br>    setup.py<br>    REAME.md<br>    MANIFEST.in<br>    bin/<br>        grandpaprayud-status<br>        grandmasomsri-status<br>        graph-power<br>    src/<br>        grandmasomsri/<br>            __init__.py<br>            grandmaSomsri.py<br>            grandpaPrayud.py<br>            graph/<br>                power.py<br>```<br>The subdirectory &lt;code&gt;grandmasomsri&lt;/code&gt; is actually our Python module<br><br>&lt;code&gt;setup.py&lt;/code&gt; contains:<br>```Python<br>from setuptools import setup<br><br>def readme():<br>    with open('README.md') as f:<br>        return f.read()<br><br>setup(name='grandmasomsri',<br>    version='0.3',<br>    description='Grandma Somsri and Grandpa Prayud',<br>    long_description=readme(),<br>    url='https://github.com/SOMSRICAT/grandmasomsri',<br>    author='SomsriCat',<br>    author_email='s.wuttiprasit@gmail.com',<br>    license='Somsri',<br>    install_requires=[<br>        'matplotlib',<br>        'numpy',<br>    ],<br>    scripts=['bin/grandmasomsri-status',<br>             'bin/grandpaprayud-status',<br>             'bin/graph-power'],<br>    keywords='grandmasomsri grandpaprayud somsri prayud',<br>    packages=['grandmasomsri'],<br>    package_dir={'grandmasomsri': 'src/grandmasomsri'},<br>    package_data={'grandmasomsri': ['graph/*.py']<br>    },<br>)<br>```<br><br>* If your package required any package you needso add &lt;code&gt;install_requires&lt;/code&gt; keyword argument to &lt;code&gt;setup.py&lt;/code&gt; <br>* Many Python packages include command line tools. This is useful for distributing support tools which are associated with a library <br>for &lt;code&gt;grandmasomsri&lt;/code&gt;, we will add a &lt;code&gt;grandmasomsri-status&lt;/code&gt;, &lt;code&gt;grandpaprayud-status&lt;/code&gt;, &lt;code&gt;graph-power&lt;/code&gt;, command line tool by adding &lt;code&gt;scripts&lt;/code&gt; keyword argument <br>* You\u2019ll probably want a README file in your source distribution, and that file can serve double purpose as the &lt;code&gt;long_description&lt;/code&gt; specified to PyPI. Further, if that file is written in reStructuredText, it can be formatted nicely<br>* Package data can be added to packages using the &lt;code&gt;package_data&lt;/code&gt; keyword argument to the setup() function<br>* Use &lt;code&gt;package_dir&lt;/code&gt; key argument to path your package location<br>* Changed in version 3.1: All the files that match &lt;code&gt;package_data&lt;/code&gt; will be added to the MANIFEST file if no template is provided. <br><br><br>see more setup.py in the [PyPA sample project](https://github.com/pypa/sampleproject)<br><br># Package<br>&lt;code&gt;grandmaSomsri.py&lt;/code&gt; contains:<br>```Python<br>def somsri():<br>    print (\"---------------------------------------------\")<br>    print (\"|                               /          |\")<br>    print (\"|                          ,.. /           |\")<br>    print (\"|                        ,'   ';           |\")<br>    print (\"|            ,,.__    _,' /';  .           |\")<br>    print (\"|           :','  ~~~~    '. '~            |\")<br>    print (\"|         :' (   )         )::,            |\")<br>    print (\"|         '. '. .=----=..-~  .;'           |\")<br>    print (\"|          '  ;'  ::   ':.  ''             |\")<br>    print (\"|           (:   ':    ;)                  |\")<br>    print (\"|            \\\\\\  '    //'                  |\")<br>    print (\"|             ''      ''                   |\")<br>    print (\"---------------------------------------------\")<br>    print (\"|  Name: Grandma Somsri(\u0e22\u0e32\u0e22\u0e2a\u0e21\u0e28\u0e23\u0e35)           |\")<br>    print (\"|  Ability: Very good eyesight (DEX +99)   |\")<br>    print (\"|  Weapon: Kar98k                          |\")<br>    print (\"|  Hobby: Camping in the forest            |\")<br>    print (\"---------------------------------------------\")<br>```<br>&lt;code&gt;grandpaPrayud.py&lt;/code&gt; contains:<br>```Python<br>def prayud():<br>    print (\"---------------------------------------------\")<br>    print (\"|          ((  ####@@!!$$    ))             |\")<br>    print (\"|              `#####@@!$$`  ))             |\")<br>    print (\"|           ((  '####@!!$:                  |\")<br>    print (\"|         ((  ,####@!!$:   ))               |\")<br>    print (\"|             .###@!!$:                     |\")<br>    print (\"|             `##@@!$:                      |\")<br>    print (\"|               `#@!!$                      |\")<br>    print (\"|          !@#    `#@!$:       @#$          |\")<br>    print (\"|           #$     `#@!$:       !@!         |\")<br>    print (\"|                   '@!$:                   |\")<br>    print (\"|               '`\\   !$: /`'               |\")<br>    print (\"|                   '\\  '!: /'              |\")<br>    print (\"|                      '\\ : /'              |\")<br>    print (\"---------------------------------------------\")<br>    print (\"|  Name: Grandpa Prayud(\u0e15\u0e32\u0e1b\u0e23\u0e30\u0e2b\u0e22\u0e31\u0e14)           |\")<br>    print (\"|  Ability: Can get angry anytime           |\") <br>    print (\"|           he want (str +99)               |\")<br>    print (\"|  Weapon: Table                            |\")<br>    print (\"|  Hobby: Do an exercise                    |\")<br>    print (\"---------------------------------------------\")<br>```<br>```Python<br>import matplotlib.pyplot as plt<br>import numpy as np<br>import random<br><br>def powerGraph():<br>    y = np.arange(0,100)<br>    prayud = []<br>    somsri = []<br>    for i in y:<br>        tmp = i * 0.8<br>        if tmp % 3 == 0:<br>            tmp *= 1.2<br>        if tmp % 4 == 0:<br>            tmp *= 2<br>        prayud.append(tmp)<br><br>        tmp = i * 0.6<br>        if tmp % 4 == 0:<br>            tmp *= 1.1<br>        if tmp % 7 == 0:<br>            tmp *= 0.5<br>        if tmp % 6 == 0:<br>            tmp *= 2.5<br>        somsri.append(tmp)<br><br><br>    plt.plot(y,somsri,'-', label='Grandma Somsri')<br>    plt.plot(y,prayud, '-', label='Grandpa Prayud')<br>    plt.title(\"Power Graph\")<br>    plt.xlabel('100 %')<br>    plt.ylabel('Power')<br><br>    plt.legend()<br><br>    plt.show()<br><br>powerGraph()<br>```<br># Script<br>The &lt;code&gt;grandmasomsri-status&lt;/code&gt; script in bin looks like this:<br>```Python<br>#!/usr/bin/env python <br><br>from grandmasomsri.grandmaSomsri import somsri <br><br>print (somsri())<br><br>``` <br>The &lt;code&gt;grandpaprayud-status&lt;/code&gt; script in bin looks like this:<br>```Python<br>#!/usr/bin/env python <br><br>from grandmasomsri.grandpaPrayud import prayud <br><br>print (prayud())<br><br>``` <br>The &lt;code&gt;graph-power&lt;/code&gt; script in bin looks like this:<br>```Python<br>#!/usr/bin/env python <br><br>from grandmasomsri.graph import power<br><br>print (powerGraph())<br>``` <br>&lt;code&gt;MANIFEST.in&lt;/code&gt; contains:<br>```<br>include README.md<br>```<br><br>Now we can install the package locally (for use on our system or test before publish) with:<br>```<br>$ pip install .<br>```<br><br># Publishing on TestPyPI and PyPI <br><br>First create a source distribution with:<br>```<br>$ python setup.py sdist<br>```<br>or<br>```<br>$ python3 setup.py sdist bdist_wheel<br>```<br>This will create &lt;code&gt;dist/grandmasomsri-0.1.tar.gz&lt;/code&gt; inside our top-level directory. <br><br>You can use &lt;code&gt;twine&lt;/code&gt; to upload the distribution packages. You\u2019ll need to install &lt;code&gt;twine&lt;/code&gt; by this command:<br>```<br>$ pip install twine --upgrade<br>```<br>or <br>```<br>$ python3 -m pip install --user --upgrade twine<br>```<br><br>### TestPyPI<br>You should upload your package to TestPyPI before PyPI<br><br>Run Twine to upload all of the archives under dist:<br>```<br>$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*<br>```<br>You will be prompted for the username and password you registered with TestPyPI. <br>After the command completes you can check your package at [TestPyPI](https://test.pypi.org/manage/projects/)<br><br>### PyPI<br>Now you ready to upload your package to PyPI<br>by following this command:<br>```<br>$ twine upload --repository-url https://upload.pypi.org/legacy/ dist/*<br>```<br>You will be prompted for the username and password you registered with PyPI. <br>After the command completes you can check your package at [PyPI](https://pypi.org/manage/projects/)<br><br># Installing the Package<br><br>At this point, other consumers of this package can install the package with &lt;code&gt;pip&lt;/code&gt;:<br>```<br>$ pip install grandmasomsri<br>```<br><br><br>Its will be automatically installed to your Python package folder<br>and &lt;code&gt;setuptools&lt;/code&gt; will copy the script to your PATH and make it available for general use<br><br>You can run package in command line by following this command:<br>```<br>$ grandmasomsri-status<br>```<br>```<br>$ grandpaprayud-status<br>```<br>```<br>$ graph-power<br>```\n          </div>"}, "last_serial": 4045787, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "7daa9fc4e7579eef911e6b2b7fa9a94d", "sha256": "632c338c0e216126ee6990fce2e5b68658f6184d9bbb4baeda4c86dc56cd3b54"}, "downloads": -1, "filename": "grandmasomsri-0.3.tar.gz", "has_sig": false, "md5_digest": "7daa9fc4e7579eef911e6b2b7fa9a94d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4649, "upload_time": "2018-07-10T02:49:51", "upload_time_iso_8601": "2018-07-10T02:49:51.764566Z", "url": "https://files.pythonhosted.org/packages/a0/8b/1af0bed0659efc5bbdd5d39c3953b1161eda7f60270aa934cc93eaef4762/grandmasomsri-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7daa9fc4e7579eef911e6b2b7fa9a94d", "sha256": "632c338c0e216126ee6990fce2e5b68658f6184d9bbb4baeda4c86dc56cd3b54"}, "downloads": -1, "filename": "grandmasomsri-0.3.tar.gz", "has_sig": false, "md5_digest": "7daa9fc4e7579eef911e6b2b7fa9a94d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4649, "upload_time": "2018-07-10T02:49:51", "upload_time_iso_8601": "2018-07-10T02:49:51.764566Z", "url": "https://files.pythonhosted.org/packages/a0/8b/1af0bed0659efc5bbdd5d39c3953b1161eda7f60270aa934cc93eaef4762/grandmasomsri-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:50 2020"}