{"info": {"author": "zackary stevens", "author_email": "zackary.n.stevens@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# app-logger\n\nThis is a drop in logger that uses [python-json-logger](https://github.com/madzak/python-json-logger) to log json to stdout and stderr appropriately. DEBUG and INFO go to stdout, WARNING, ERROR, CRITICAL go to stderr.\n\n# Configuration\nAll configuration is through environment variables, all have defaults so none are required.\n\n## LOGGER_NAME\nWhat should the logger be called? Default will use the root logger. Using the default or `root` will log not only log statements from `app_logger` but also any statements from libraries you're using.\n**Format**: Just a regular string\n**Default**: `root`\n**Example**: `mysweetapp`\n\n## LOG_LEVELS\nUsed to set log levels. Can be used to set any log level you wish so you can selectively control logging. May be upper or lower case.\n**Format**: A comma separated string of key=value pairs\n**Default**: `root=INFO`\n**Example**: `root=DEBUG,asyncio=INFO`\n\n## LOG_FORMAT\nUsed to control the log format.\n**Format**: A log format string of [log record attributes](https://docs.python.org/3.7/library/logging.html#logrecord-attributes)\n**Default**: `%(levelname)%(name)%(asctime)%(module)%(funcName)%(lineno)%(message)``\n\n## Usage\nThe logger initializes itself and makes itself available as a variable called `app_logger`. It's a regular python logger and can be used as such.\n**Example** `app_logger.info(\"I always hated python logging but now it's easy and just works\")`\n**Resulting log** `{\"levelname\": \"INFO\", \"name\": \"root\", \"asctime\": \"2020-04-11 11:24:17,299\", \"module\": \"main\", \"funcName\": \"main\", \"lineno\": 14, \"message\": \"I always hated python logging but now it's easy and just works\"}`\n\n### Adding context\nYou can use the `extra=` feature of python-json-logger to add context to your messages. This makes it really easy to have logging that's easy to parse, search, learn, and alert on if you're using log aggregation.\n**Example**\nGiven you have something that's a dictionary, you can include it in log statements without verbose string formatting.\n`app_logger.error('Error handling message', extra=message)`\n**Resulting log**\n`{\"levelname\": \"ERROR\", \"name\": \"root\", \"asctime\": \"2020-04-11 11:27:36,584\", \"module\": \"main\", \"funcName\": \"main\", \"lineno\": 16, \"message\": \"Error handling message\", \"guid\": \"7cc81eba-3bbc-4555-8fab-2a7556072f5d\", \"subject\": \"test\"}\n`\nYou can see how easy it would be to find logs like this in kibana, and it's already in json format so it's easily indexable/searchable, including the context given via `extra=`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TnLCommunity/app-logger", "keywords": "logs,logging", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "app-logger", "package_url": "https://pypi.org/project/app-logger/", "platform": "", "project_url": "https://pypi.org/project/app-logger/", "project_urls": {"Homepage": "https://github.com/TnLCommunity/app-logger", "Repository": "https://github.com/TnLCommunity/app-logger"}, "release_url": "https://pypi.org/project/app-logger/0.1.2/", "requires_dist": ["python-json-logger (>=0.1.11,<0.2.0)"], "requires_python": ">=3.6,<4.0", "summary": "A drop in logger configurable through environment variables", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>app-logger</h1>\n<p>This is a drop in logger that uses <a href=\"https://github.com/madzak/python-json-logger\" rel=\"nofollow\">python-json-logger</a> to log json to stdout and stderr appropriately. DEBUG and INFO go to stdout, WARNING, ERROR, CRITICAL go to stderr.</p>\n<h1>Configuration</h1>\n<p>All configuration is through environment variables, all have defaults so none are required.</p>\n<h2>LOGGER_NAME</h2>\n<p>What should the logger be called? Default will use the root logger. Using the default or <code>root</code> will log not only log statements from <code>app_logger</code> but also any statements from libraries you're using.\n<strong>Format</strong>: Just a regular string\n<strong>Default</strong>: <code>root</code>\n<strong>Example</strong>: <code>mysweetapp</code></p>\n<h2>LOG_LEVELS</h2>\n<p>Used to set log levels. Can be used to set any log level you wish so you can selectively control logging. May be upper or lower case.\n<strong>Format</strong>: A comma separated string of key=value pairs\n<strong>Default</strong>: <code>root=INFO</code>\n<strong>Example</strong>: <code>root=DEBUG,asyncio=INFO</code></p>\n<h2>LOG_FORMAT</h2>\n<p>Used to control the log format.\n<strong>Format</strong>: A log format string of <a href=\"https://docs.python.org/3.7/library/logging.html#logrecord-attributes\" rel=\"nofollow\">log record attributes</a>\n<strong>Default</strong>: `%(levelname)%(name)%(asctime)%(module)%(funcName)%(lineno)%(message)``</p>\n<h2>Usage</h2>\n<p>The logger initializes itself and makes itself available as a variable called <code>app_logger</code>. It's a regular python logger and can be used as such.\n<strong>Example</strong> <code>app_logger.info(\"I always hated python logging but now it's easy and just works\")</code>\n<strong>Resulting log</strong> <code>{\"levelname\": \"INFO\", \"name\": \"root\", \"asctime\": \"2020-04-11 11:24:17,299\", \"module\": \"main\", \"funcName\": \"main\", \"lineno\": 14, \"message\": \"I always hated python logging but now it's easy and just works\"}</code></p>\n<h3>Adding context</h3>\n<p>You can use the <code>extra=</code> feature of python-json-logger to add context to your messages. This makes it really easy to have logging that's easy to parse, search, learn, and alert on if you're using log aggregation.\n<strong>Example</strong>\nGiven you have something that's a dictionary, you can include it in log statements without verbose string formatting.\n<code>app_logger.error('Error handling message', extra=message)</code>\n<strong>Resulting log</strong>\n<code>{\"levelname\": \"ERROR\", \"name\": \"root\", \"asctime\": \"2020-04-11 11:27:36,584\", \"module\": \"main\", \"funcName\": \"main\", \"lineno\": 16, \"message\": \"Error handling message\", \"guid\": \"7cc81eba-3bbc-4555-8fab-2a7556072f5d\", \"subject\": \"test\"}</code>\nYou can see how easy it would be to find logs like this in kibana, and it's already in json format so it's easily indexable/searchable, including the context given via <code>extra=</code></p>\n\n          </div>"}, "last_serial": 7000841, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "369285aa134b7274b1217fc74534f814", "sha256": "66c38a8b3fb2984f0c02c7260175e164716176d9d36334f7b05ea1c7b7d06a68"}, "downloads": -1, "filename": "app_logger-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "369285aa134b7274b1217fc74534f814", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5924, "upload_time": "2020-04-11T17:45:26", "upload_time_iso_8601": "2020-04-11T17:45:26.072024Z", "url": "https://files.pythonhosted.org/packages/88/2a/49ecfa3716a4b31f1e793698df5472f599141d1c9582699f789fd875a964/app_logger-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14bfc072e43ac98f6031ee95e50b7e42", "sha256": "0ffcb6f754197c34802adbeae1d78540bb92be66a644627aac6b3c2a1625b317"}, "downloads": -1, "filename": "app-logger-0.1.1.tar.gz", "has_sig": false, "md5_digest": "14bfc072e43ac98f6031ee95e50b7e42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5517, "upload_time": "2020-04-11T17:45:24", "upload_time_iso_8601": "2020-04-11T17:45:24.342378Z", "url": "https://files.pythonhosted.org/packages/f2/9c/1f331b3d18272ef530cd990a84a767ec874a12b72a7574862afc822dfc58/app-logger-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a835731ac83e48771778e2b5718d20ce", "sha256": "ac776d423e0c9182e8e96116480717b25b332d740b4a310af07d346d730d7cc4"}, "downloads": -1, "filename": "app_logger-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a835731ac83e48771778e2b5718d20ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7134, "upload_time": "2020-04-11T17:57:48", "upload_time_iso_8601": "2020-04-11T17:57:48.904823Z", "url": "https://files.pythonhosted.org/packages/8b/f6/49112312da1d6cd811c7567e3571c7c6a8a53e8538c1e403dec6cf66b67e/app_logger-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbcbbe15b8cf72304848c3f0cdf8872d", "sha256": "758bd7629303bb049d5bb31614f205aa9fccf6eaacf2c3964331b0ce636f969a"}, "downloads": -1, "filename": "app-logger-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cbcbbe15b8cf72304848c3f0cdf8872d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6964, "upload_time": "2020-04-11T17:57:47", "upload_time_iso_8601": "2020-04-11T17:57:47.868086Z", "url": "https://files.pythonhosted.org/packages/d6/0a/27bff0f496c5720415d2bd1dcd975075ec4239a2c66d7987c047b8cd9a50/app-logger-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a835731ac83e48771778e2b5718d20ce", "sha256": "ac776d423e0c9182e8e96116480717b25b332d740b4a310af07d346d730d7cc4"}, "downloads": -1, "filename": "app_logger-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a835731ac83e48771778e2b5718d20ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7134, "upload_time": "2020-04-11T17:57:48", "upload_time_iso_8601": "2020-04-11T17:57:48.904823Z", "url": "https://files.pythonhosted.org/packages/8b/f6/49112312da1d6cd811c7567e3571c7c6a8a53e8538c1e403dec6cf66b67e/app_logger-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbcbbe15b8cf72304848c3f0cdf8872d", "sha256": "758bd7629303bb049d5bb31614f205aa9fccf6eaacf2c3964331b0ce636f969a"}, "downloads": -1, "filename": "app-logger-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cbcbbe15b8cf72304848c3f0cdf8872d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6964, "upload_time": "2020-04-11T17:57:47", "upload_time_iso_8601": "2020-04-11T17:57:47.868086Z", "url": "https://files.pythonhosted.org/packages/d6/0a/27bff0f496c5720415d2bd1dcd975075ec4239a2c66d7987c047b8cd9a50/app-logger-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:37 2020"}