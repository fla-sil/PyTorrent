{"info": {"author": "Simon Gomizelj", "author_email": "simon@vodik.xyz", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "========\naiotimer\n========\n\nAsyncIO compatible periodic timer. Linux only and very alpha API.\n\n-------\nExample\n-------\n\nThe timer is implemented as a straightforward protocol similar to how\nthe asyncio's network protocols are handled:\n\n.. code-block:: python\n\n    class MyTimer(aiotimer.Protocol):\n        def __init__(self):\n            self.counter = 0\n\n        def timer_started(self, timer):\n            self.timer = timer\n\n        def timer_ticked(self):\n            # Callback triggered when the timer interval elapses\n            ...\n\n        def timer_overrun(self):\n            # Callback triggered if the timer_ticked callback runtime\n            # should exceed the timer interval. Return True to\n            # reschedule, otherwise the timer is aborted.\n            return True\n\n        def error_received():\n            ...\n\nThe protocol can then be used to create a new timer:\n\n.. code-block:: python\n\n    # Schedule once every 10th of a second\n    aiotimer.create_timer(MyTimer, 0.1, loop=loop)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vodik/aiotimer", "keywords": "asyncio", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "aiotimer", "package_url": "https://pypi.org/project/aiotimer/", "platform": "", "project_url": "https://pypi.org/project/aiotimer/", "project_urls": {"Homepage": "https://github.com/vodik/aiotimer"}, "release_url": "https://pypi.org/project/aiotimer/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "High resoltion timer for asyncio", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>AsyncIO compatible periodic timer. Linux only and very alpha API.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The timer is implemented as a straightforward protocol similar to how\nthe asyncio\u2019s network protocols are handled:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTimer</span><span class=\"p\">(</span><span class=\"n\">aiotimer</span><span class=\"o\">.</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">timer_started</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">timer</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">timer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">timer_ticked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Callback triggered when the timer interval elapses</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">timer_overrun</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Callback triggered if the timer_ticked callback runtime</span>\n        <span class=\"c1\"># should exceed the timer interval. Return True to</span>\n        <span class=\"c1\"># reschedule, otherwise the timer is aborted.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">error_received</span><span class=\"p\">():</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>The protocol can then be used to create a new timer:</p>\n<pre><span class=\"c1\"># Schedule once every 10th of a second</span>\n<span class=\"n\">aiotimer</span><span class=\"o\">.</span><span class=\"n\">create_timer</span><span class=\"p\">(</span><span class=\"n\">MyTimer</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3273606, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "13be3aa8c460d1e4fdff97982108c7a1", "sha256": "cd239e161792cbfd1f1fc9d7f206a42b90b588ab9592c09dc6e877c5d3f29b19"}, "downloads": -1, "filename": "aiotimer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "13be3aa8c460d1e4fdff97982108c7a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34582, "upload_time": "2017-10-24T00:11:02", "upload_time_iso_8601": "2017-10-24T00:11:02.878575Z", "url": "https://files.pythonhosted.org/packages/5a/42/51f4afa9ea19ad41606b2f20ef21cc3a6d6bee18febe16034aaea2570388/aiotimer-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13be3aa8c460d1e4fdff97982108c7a1", "sha256": "cd239e161792cbfd1f1fc9d7f206a42b90b588ab9592c09dc6e877c5d3f29b19"}, "downloads": -1, "filename": "aiotimer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "13be3aa8c460d1e4fdff97982108c7a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34582, "upload_time": "2017-10-24T00:11:02", "upload_time_iso_8601": "2017-10-24T00:11:02.878575Z", "url": "https://files.pythonhosted.org/packages/5a/42/51f4afa9ea19ad41606b2f20ef21cc3a6d6bee18febe16034aaea2570388/aiotimer-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:41 2020"}