{"info": {"author": "Chen Chen", "author_email": "chen.chen.adl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\u00ef\u00bb\u00bf\n# kde_gpu\n\nKernel density estimator using Nadaraya-Watson with GPU (CUDA)\n\nAuthor\n------\nChen Chen\n\n\nRunning Environment Setup\n------------\nYou have to have cupy installed to be able to use GPU!!\nSee https://github.com/cupy/cupy\n\n\nSimilar to [scipy.kde_gaussian](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html) and [statsmodels.nonparametric.kernel_density.KDEMultivariateConditional](https://www.statsmodels.org/stable/generated/statsmodels.nonparametric.kernel_density.KDEMultivariateConditional.html), we implemented nadaraya waston kernel density and kernel conditional probability estimator using cuda through cupy. However, it is much faster than cpu version and it maximise the use of GPU memory.\n\n1. Make a folder with name \"data\" in current directory. Then copy ORL and CroppedYaleB dataset inside. Please make sure you have the following file tree structure:  \n     |--- kde_gpu\\\\  \n     ***|--- __version__.py \\\\  \n     ***|--- nadaraya_watson.py \\\\  \n\t ***|--- conditional_probability.py \\\\  \n     *|--- setup.py \\\\  \n     *|--- example.py \\\\  \n     *|--- README.md \\\\  \n\n2. Install `kde_gpu` with following command: (Please use `pip3` if the default `python` in your computer is `python2`)\n\n   ```\n   $ pip install -e .\n   ```\n This command will run  `setup.py` where we specify the dependencies required to run  `nmf`. The dependencies we require are:\n\n           \"scipy>=1.0.0\",\n           \"pandas>=0.20.2\",\n\nPlease note that if the version number of installed package in your machine is lower than the stated version number, `pip` will uninstall your out-of-date package and install the one with version number greater than or equal to the stated one in `setup.py`.\n\nExample\n------------\n\n~~~~\n\"\"\"\n@author: chen.chen.adl@gmail.com\n\"\"\"\n\n#import kernel_smoothing\nfrom scipy import stats\nimport pandas as pd\nimport cupy as cp\nimport numpy as np\nimport time\n\n\nrv = stats.expon(0,1)\n\nx = rv.rvs(size=10000)\n\ndensity_real = rv.pdf(x)\n\nt1=time.time()\nkde_scipy=stats.gaussian_kde(x.T,bw_method='silverman')\nkde_scipy=kde_scipy(x.T)\nprint(time.time()-t1)\n\nt1=time.time()\nkde_cupy=kde(cp.asarray(x.T),bw_method='silverman')\nprint(time.time()-t1)\n\n\n\ndf = pd.DataFrame({'x1':x,'kde_scipy':kde_scipy,\n                   'kde_cupy':cp.asnumpy(kde_cupy).squeeze(),'real density':density_real})\n\ndf['scipy_mean_absolute_error']=np.abs(df['kde_scipy']-df['real density'])\ndf['cupy_mean_absolute_error']=np.abs(df['kde_cupy']-df['real density'])\nprint(df.mean())\n\n\nrv = stats.truncnorm(-3,2,30,10)\nnsample=10000\nx = cp.asarray(rv.rvs(nsample))\nycondx = cp.asarray(cp.random.rand(nsample))\ny = 10*(ycondx-0.5)+x\n\ncdf_conditional_real = ycondx\ndf = pd.DataFrame({'y':cp.asnumpy(y),'x':cp.asnumpy(x),'real density':cp.asnumpy(cdf_conditional_real)})\n\ndf['nadaraya watson']= kernel_smoothing_ecdf(y,x)\ndf['nw_error']=np.abs(df['nadaraya watson']-df['real density'])\ndf.mean()\n~~~~\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cc20002002/kde_gpu", "keywords": "Nadaraya-Watson,Nadaraya Watson,GPU,CUDA,cupy,kernel smoothing,conditional probability,KNN", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "kde-gpu", "package_url": "https://pypi.org/project/kde-gpu/", "platform": "", "project_url": "https://pypi.org/project/kde-gpu/", "project_urls": {"Homepage": "https://github.com/cc20002002/kde_gpu"}, "release_url": "https://pypi.org/project/kde-gpu/0.1.0/", "requires_dist": ["numpy (>=1.14.0)", "scipy (>=1.0.0)", "pandas (>=0.20.2)"], "requires_python": "", "summary": "We implemented nadaraya waston kernel density and kernel conditional probability estimator using cuda through cupy. It is much faster than cpu version but it requires GPU with high memory.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u00ef\u00bb\u00bf</p>\n<h1>kde_gpu</h1>\n<p>Kernel density estimator using Nadaraya-Watson with GPU (CUDA)</p>\n<h2>Author</h2>\n<p>Chen Chen</p>\n<h2>Running Environment Setup</h2>\n<p>You have to have cupy installed to be able to use GPU!!\nSee <a href=\"https://github.com/cupy/cupy\" rel=\"nofollow\">https://github.com/cupy/cupy</a></p>\n<p>Similar to <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.gaussian_kde.html\" rel=\"nofollow\">scipy.kde_gaussian</a> and <a href=\"https://www.statsmodels.org/stable/generated/statsmodels.nonparametric.kernel_density.KDEMultivariateConditional.html\" rel=\"nofollow\">statsmodels.nonparametric.kernel_density.KDEMultivariateConditional</a>, we implemented nadaraya waston kernel density and kernel conditional probability estimator using cuda through cupy. However, it is much faster than cpu version and it maximise the use of GPU memory.</p>\n<ol>\n<li>\n<p>Make a folder with name \"data\" in current directory. Then copy ORL and CroppedYaleB dataset inside. Please make sure you have the following file tree structure:<br>\n|--- kde_gpu\\<br>\n***|--- <strong>version</strong>.py \\<br>\n***|--- nadaraya_watson.py \\<br>\n***|--- conditional_probability.py \\<br>\n*|--- setup.py \\<br>\n*|--- example.py \\<br>\n*|--- README.md \\</p>\n</li>\n<li>\n<p>Install <code>kde_gpu</code> with following command: (Please use <code>pip3</code> if the default <code>python</code> in your computer is <code>python2</code>)</p>\n<pre><code>$ pip install -e .\n</code></pre>\n</li>\n</ol>\n<p>This command will run  <code>setup.py</code> where we specify the dependencies required to run  <code>nmf</code>. The dependencies we require are:</p>\n<pre><code>       \"scipy&gt;=1.0.0\",\n       \"pandas&gt;=0.20.2\",\n</code></pre>\n<p>Please note that if the version number of installed package in your machine is lower than the stated version number, <code>pip</code> will uninstall your out-of-date package and install the one with version number greater than or equal to the stated one in <code>setup.py</code>.</p>\n<h2>Example</h2>\n<pre><code>\"\"\"\n@author: chen.chen.adl@gmail.com\n\"\"\"\n\n#import kernel_smoothing\nfrom scipy import stats\nimport pandas as pd\nimport cupy as cp\nimport numpy as np\nimport time\n\n\nrv = stats.expon(0,1)\n\nx = rv.rvs(size=10000)\n\ndensity_real = rv.pdf(x)\n\nt1=time.time()\nkde_scipy=stats.gaussian_kde(x.T,bw_method='silverman')\nkde_scipy=kde_scipy(x.T)\nprint(time.time()-t1)\n\nt1=time.time()\nkde_cupy=kde(cp.asarray(x.T),bw_method='silverman')\nprint(time.time()-t1)\n\n\n\ndf = pd.DataFrame({'x1':x,'kde_scipy':kde_scipy,\n                   'kde_cupy':cp.asnumpy(kde_cupy).squeeze(),'real density':density_real})\n\ndf['scipy_mean_absolute_error']=np.abs(df['kde_scipy']-df['real density'])\ndf['cupy_mean_absolute_error']=np.abs(df['kde_cupy']-df['real density'])\nprint(df.mean())\n\n\nrv = stats.truncnorm(-3,2,30,10)\nnsample=10000\nx = cp.asarray(rv.rvs(nsample))\nycondx = cp.asarray(cp.random.rand(nsample))\ny = 10*(ycondx-0.5)+x\n\ncdf_conditional_real = ycondx\ndf = pd.DataFrame({'y':cp.asnumpy(y),'x':cp.asnumpy(x),'real density':cp.asnumpy(cdf_conditional_real)})\n\ndf['nadaraya watson']= kernel_smoothing_ecdf(y,x)\ndf['nw_error']=np.abs(df['nadaraya watson']-df['real density'])\ndf.mean()\n</code></pre>\n\n          </div>"}, "last_serial": 5713657, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a30572322f3c8274743685202c43b626", "sha256": "d103109fe47e3d0723ff32f7e3669556e4cdb9cdef9891000d8a0fdfead38d8b"}, "downloads": -1, "filename": "kde_gpu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a30572322f3c8274743685202c43b626", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9047, "upload_time": "2019-08-22T07:18:50", "upload_time_iso_8601": "2019-08-22T07:18:50.559929Z", "url": "https://files.pythonhosted.org/packages/a2/33/5e976fc5e4eece71b16d36280924d99c77d2f58e20dc445ca4eb9b22276e/kde_gpu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd53bc5d48e38575e9b324409514dcb5", "sha256": "a0215e21b1b2a2adcf3e91d145e4571bea36367a692220c7f5e7a825cca44031"}, "downloads": -1, "filename": "kde_gpu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd53bc5d48e38575e9b324409514dcb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4378, "upload_time": "2019-08-22T07:18:52", "upload_time_iso_8601": "2019-08-22T07:18:52.801779Z", "url": "https://files.pythonhosted.org/packages/d9/fe/410d24e280428efcbbabaf32f12673d2d868329cb0a70a3544d9bab46b70/kde_gpu-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a30572322f3c8274743685202c43b626", "sha256": "d103109fe47e3d0723ff32f7e3669556e4cdb9cdef9891000d8a0fdfead38d8b"}, "downloads": -1, "filename": "kde_gpu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a30572322f3c8274743685202c43b626", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9047, "upload_time": "2019-08-22T07:18:50", "upload_time_iso_8601": "2019-08-22T07:18:50.559929Z", "url": "https://files.pythonhosted.org/packages/a2/33/5e976fc5e4eece71b16d36280924d99c77d2f58e20dc445ca4eb9b22276e/kde_gpu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd53bc5d48e38575e9b324409514dcb5", "sha256": "a0215e21b1b2a2adcf3e91d145e4571bea36367a692220c7f5e7a825cca44031"}, "downloads": -1, "filename": "kde_gpu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd53bc5d48e38575e9b324409514dcb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4378, "upload_time": "2019-08-22T07:18:52", "upload_time_iso_8601": "2019-08-22T07:18:52.801779Z", "url": "https://files.pythonhosted.org/packages/d9/fe/410d24e280428efcbbabaf32f12673d2d868329cb0a70a3544d9bab46b70/kde_gpu-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:26 2020"}