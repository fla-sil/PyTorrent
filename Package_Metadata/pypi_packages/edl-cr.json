{"info": {"author": "eXceed-iDeaL", "author_email": "exceedideal@163.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.7"], "description": "# edl-cr\n\n[![](https://img.shields.io/github/stars/eXceediDeaL/edl-coderunner.svg?style=social&label=Stars)](https://github.com/eXceediDeaL/edl-coderunner) [![](https://img.shields.io/github/forks/eXceediDeaL/edl-coderunner.svg?style=social&label=Fork)](https://github.com/eXceediDeaL/edl-coderunner) ![](http://progressed.io/bar/60?title=developing) [![](https://img.shields.io/github/license/eXceediDeaL/edl-coderunner.svg)](https://github.com/eXceediDeaL/edl-coderunner/blob/master/LICENSE)\n\nA CLI tool to run code. See more at [here](https://exceedideal.github.io/edl-coderunner/)\n\nProject Status:\n\n|||\n|-|-|\n|Repository|[![](https://img.shields.io/github/issues/eXceediDeaL/edl-coderunner.svg)](https://github.com/eXceediDeaL/edl-coderunner/issues/) [![](https://img.shields.io/github/issues-pr/eXceediDeaL/edl-coderunner.svg)](https://github.com/eXceediDeaL/edl-coderunner/pulls/)|\n|Dependencies|![](https://img.shields.io/pypi/pyversions/edl-cr.svg) ![](https://img.shields.io/librariesio/github/eXceediDeaL/edl-coderunner.svg)|\n|Build|[![](https://img.shields.io/travis/eXceediDeaL/edl-coderunner/master.svg?label=master)](https://travis-ci.org/eXceediDeaL/edl-coderunner) ![](https://img.shields.io/travis/eXceediDeaL/edl-coderunner/dev.svg?label=dev)|\n|Release|[![](https://img.shields.io/github/release-pre/eXceediDeaL/edl-coderunner.svg)](https://github.com/eXceediDeaL/edl-coderunner/releases/latest/) [![](https://img.shields.io/github/tag/eXceediDeaL/edl-coderunner.svg)](https://github.com/eXceediDeaL/edl-coderunner/tags)|\n|Package|[![](https://img.shields.io/pypi/v/edl-cr.svg)](https://pypi.org/project/edl-cr/) ![](\thttps://img.shields.io/pypi/status/edl-cr.svg) ![](https://img.shields.io/pypi/dd/edl-cr.svg)|\n\n# Install\n\nUse `pip` to install edl-cr.\n\n```sh\npip install edl-cr\n```\n\n# Usage\n\nUse command `ecr` to run edl-cr.\n\n## CLI Mode\n\n|Option|Description|\n|-|-|\n|`-d --dir`|Set working directory|\n|`-c --command`|Execute command just like in interactive mode|\n|`-V --version`|Show ecr version|\n|`-v --verbose`|Enable `DEBUG` level for logging|\n\n## Interactive Mode\n\nIf you don't use `--command` options, edl-cr will run in interactive mode.\n\n|ECR Color|Description|\n|-|-|\n|Empty|No ecr data at current and global|\n|Yellow|Load from global ecr data|\n|Green|Load from current ecr data|\n|Red|Load failed|\n\n### Initialize\n\n```sh\n> init\n```\n\nInitialize ECR data. It will create a directory named `.ecr` in current directory.\n\nIf you want to clear ECR data, use this command:\n\n```sh\n> clear\n```\n\n### Create and Run\n\nCreate a new code file:\n\n```sh\n> new a.cpp\n\n# Create code file with template\n> new a.cpp -t base\n```\n\nIt will use code template in `.ecr/templates/` to create file and set current file with the new file.\n\nIf you want to set current file with a existed file, use this:\n\n```sh\n> now a.cpp\n```\n\nThen use `edit` to open default editor to edit code:\n\n```sh\n> edit\n```\n\nThen use `run` command to run code.\n\n```sh\n# run a.cpp\na.cpp> run\n\n# run b.cpp\na.cpp> run b.cpp\n\n# run a.cpp with file input and standard output\na.cpp> run -io fs\n\n# watch the file a.cpp and run auto\na.cpp> run -w\n```\n\nIf you give `input.data` and `std.data` for input data and standard output data, use `test` to run and test output data.\n\n```sh\n# run a.cpp's output\na.cpp> test\n\n# run and test b.cpp's output\na.cpp> test b.cpp -r\n\n# watch the file a.cpp and run&test auto\na.cpp> test -w -r\n```\n\n### Use Directory\n\nNot only use files, you can also use directories to create a unique environment for codes.\n\n```sh\n# Create a new directory env\n> new project -d\n\n# Set a directory env for current\n> now project -d\n\n# Run\n@project> run\n\n# Judge\n@project> test\n```\n\nFor `run` and `test` commands, it will use the command list in `config.yml` in the directory. You can write your own commands in it. And these command works in the directory of current work-item.\n\n```yaml\ntest: null\nrun: null\n```\n\nFor commands in `test` and `run`, you can use variables as same as in `executor.yml` and `judger.yml` below.\n\n### Input and Output\n\nThe file input is at `.ecr/input.data`, and the file output is at `.ecr/output.data`.\n\nThe standard output data for judging is at `.ecr/std.data`\n\n### Clean\n\nClean the compiling output and something else:\n\n```sh\n> clean\n```\n\n### Debug\n\nWhen you meet some errors, for example, ecr data loading failing, use `debug` command to get some information. This is also a useful tool when you create an issue.\n\n### Variables\n\nYou can use builtin variables just like in bash:\n\n```sh\n> echo $wdir\n```\n\n|Variable|Description|\n|-|-|\n|`wdir`|Working directory|\n|`edir`|ECR directory|\n|`jdir`|Judger directory|\n|`tdir`|Template directory|\n|`current`|Current file|\n|`input`|Input file|\n|`output`|Output file|\n|`config`|Config file|\n|`globaldir`|Get global ecr directory|\n\n### Commands\n\nThese are builtin commands. You can use system command in `importedCommand` list.\n\nIf you want to call a system command that isn't in `importedCommand` list, use `>` prefix like `>ls`.\n\n|Command|Description|\n|-|-|\n|`init [-g --globals]`|Initialize ECR data|\n|`clear [-g --globals]`|Clear ECR data|\n|`reload [-c --current]`|Reload ECR data or current work-item data|\n|`new [file] [-e --edit] [-d --dir] [-t --template name]`|Create new code file|\n|`now [file] [-d --dir]`|Change current file|\n|`edit [file] [-n --now] [-d --dir]`|Edit code file|\n|`run [file] [-io --io] [-w] [-d --dir]`|Run code file|\n|`test [file] [-r --re] [-w] [-j --judger name] [-d --dir]`|Judge output data|\n|`clean`|Clean temp files|\n|`pwd`|Print working directory|\n|`cd`|Change working directory|\n|`version`|Get version|\n|`cls`|Clear console|\n|`exit`|Exit|\n|`-h --help`|Get help|\n|`status [-v --var]`|Get status|\n|`template [new clear remove clear]`|Template tools|\n|`debug [-os --os] [-c --current] [-e --ecr] [-l --log] [-o file]`|Show debug data|\n\n# Global\n\nWhen ecr starts, it will initialize global data and config at `~` (if it doesn't exist), and you can use `init -g` , `clear -g` to re-initialize and clear that.\n\n# Template\n\nYou can write your own templates for dir-workitem.\n\n```sh\n> template new mytemp\n```\n\nIt will create a new folder `mytemp` at template folder `.ecr/templates`, and generate config files.\n\nThe files in directory `.template` are the template config files. They will not be copied to destination.\n\n## .template/config.yml\n\nThis file defines the config for the template.\n\n```yaml\n# commands to execute after copying files\n# the commands will be executed with working directory = destination\nafter: []\n\n# relative path of the directory to be copied to destination\n# the base path is the current template path\nrootPath: ''\n\n# template's subject\nsubject: test\n```\n\n# Config\n\nThe config files is at `.ecr/`\n\n## config.yml\n\nThis file contains basic config.\n\n```yaml\n# The default editor\ndefaultEditor: vim\n\n# The default judger's name\ndefaultJudger: text\n\n# The default IO when run\ndefaultIO: ss\n\n# The default shell to execute command\ndefaultShell: powershell -c\n\n# The default time limit for every step when run\ndefaultTimeLimit: 10\n\n# The ecr version for the config file\neVersion: 0.0.2\n\n# Map name to system command\nimportedCommand:\n    bash: bash\n    cat: cat\n    copy: copy\n    cp: cp\n\n# File extension name to be cleaned\ntempFileFilter:\n- exe\n- o\n- class\n- out\n```\n\n## executor.yml\n\nThis file gives the way to run a code file.\n\nYou can use these varibles in command:\n\n- `fileName` The code file name\n- `fileNameWithoutExt` The code file name without extension\n\n```yaml\nc:\n- gcc {fileName} -o {fileNameWithoutExt}\n- ./{fileNameWithoutExt}\n\ncpp:\n- g++ {fileName} -o {fileNameWithoutExt}\n- ./{fileNameWithoutExt}\n```\n\n## judger.yml\n\nThis file gives the way to test.\n\nYou can use these varibles in command:\n\n- `judgerDir` The directory path for judgers. It will be pointed to `$wdir/.ecr/judgers`\n- `expectFile` The expect output file\n- `realFile` The real output file\n\n```yaml\ntext: # Judger name\n- python -u {judgerDir}/text.py {expectFile} {realFile}\n```\n\n## judgers/\n\nThis directory contains some judgers, you can write your judgers and use them.\n\n## template.yml\n\nThis file defines the default code template for different language.\n\nIt only contains the template file name (without extension name), and it will find the file in `templates/`\n\nThe key-value pair `dir` gives the default template name for directory work-item.\n\n## templates/\n\nThis directory contains code templates.\n\n# Developing\n\n- The `Makefile` use `SHELL` varible in Windows (as well as `PY`), so if you are in Linux, change it before use `make`.\n- To build and upload the package, this requires these modules setuptools, wheel, twine. You can try `make prepare` to install these modules.\n- Maybe there are some differences between win's command and linux's command, so feel free to modify `Makefile` when you meet some errors.\n\n```sh\n# Run\nmake run\n\nmake run RARG=-h # use command args\n\n# Use pylint to check\nmake lint\n\n# Test\nmake test\n\n# Test and get coverage\nmake cover\n\n# Build\nmake build -B\n\n# Install locally\nmake install\n\n# Uninstall locally\nmake uninstall\n\n# Clean\nmake clean\n\n# Upload to PyPI\nmake upload\n\n# Upload to TestPyPI\nmake uptest\n```\n\n# Requirements\n\n- Python 3.7\n- [See more](https://github.com/eXceediDeaL/edl-coderunner/network/dependencies)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eXceediDeaL/edl-coderunner", "keywords": "code runner", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "edl-cr", "package_url": "https://pypi.org/project/edl-cr/", "platform": "", "project_url": "https://pypi.org/project/edl-cr/", "project_urls": {"Bug Tracker": "https://github.com/eXceediDeaL/edl-coderunner/issues", "Documentation": "https://github.com/eXceediDeaL/edl-coderunner/wiki", "Homepage": "https://github.com/eXceediDeaL/edl-coderunner", "Source Code": "https://github.com/eXceediDeaL/edl-coderunner"}, "release_url": "https://pypi.org/project/edl-cr/0.0.3.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A CLI tool to run code", "version": "0.0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>edl-cr</h1>\n<p><a href=\"https://github.com/eXceediDeaL/edl-coderunner\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e3e204293f067ea9de056c8790671a7095efdb6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f655863656564694465614c2f65646c2d636f646572756e6e65722e7376673f7374796c653d736f6369616c266c6162656c3d5374617273\"></a> <a href=\"https://github.com/eXceediDeaL/edl-coderunner\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f842f5e85f16956312c8708845a4344b0e617e8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f655863656564694465614c2f65646c2d636f646572756e6e65722e7376673f7374796c653d736f6369616c266c6162656c3d466f726b\"></a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e9500f246a462408c8a121622b8880ca555eee7/687474703a2f2f70726f677265737365642e696f2f6261722f36303f7469746c653d646576656c6f70696e67\"> <a href=\"https://github.com/eXceediDeaL/edl-coderunner/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2de2e310e9d0003a79b9ab64c4eab762348e2f3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></a></p>\n<p>A CLI tool to run code. See more at <a href=\"https://exceedideal.github.io/edl-coderunner/\" rel=\"nofollow\">here</a></p>\n<p>Project Status:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Repository</td>\n<td><a href=\"https://github.com/eXceediDeaL/edl-coderunner/issues/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37672492a2ba4702bb57660e1ca73db9d532b3b6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></a> <a href=\"https://github.com/eXceediDeaL/edl-coderunner/pulls/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8f2c2ee7305c2aab6b2765c2c318784a8f10f49/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></a></td>\n</tr>\n<tr>\n<td>Dependencies</td>\n<td><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5f5bf066f7d78fcd844ac6ac1fdc459e99e7b6d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f65646c2d63722e737667\"> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/316473bdf6bcdaf303f52a45f96de207653128b3/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f6769746875622f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></td>\n</tr>\n<tr>\n<td>Build</td>\n<td><a href=\"https://travis-ci.org/eXceediDeaL/edl-coderunner\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66599e4f66e44e96fd310bb6512e4ed0dcef2d9e/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f655863656564694465614c2f65646c2d636f646572756e6e65722f6d61737465722e7376673f6c6162656c3d6d6173746572\"></a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53cf82ba2ac734af65a436eb525adb9a9d7f7ce0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f655863656564694465614c2f65646c2d636f646572756e6e65722f6465762e7376673f6c6162656c3d646576\"></td>\n</tr>\n<tr>\n<td>Release</td>\n<td><a href=\"https://github.com/eXceediDeaL/edl-coderunner/releases/latest/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af29b95cc54819a55f8e242c8b83a3dce6fe3423/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d7072652f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></a> <a href=\"https://github.com/eXceediDeaL/edl-coderunner/tags\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82ce80e05f53caa89d27f72c77b4181999e1ad99/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f655863656564694465614c2f65646c2d636f646572756e6e65722e737667\"></a></td>\n</tr>\n<tr>\n<td>Package</td>\n<td><a href=\"https://pypi.org/project/edl-cr/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93d145e400a48af36725eaf0c897264232d953c9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f65646c2d63722e737667\"></a> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b42dea8fd13be969dd349f0d874d096d4d840f3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f65646c2d63722e737667\"> <img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82f599cc7812fdf92a2d2bad5fdf84720111da16/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f65646c2d63722e737667\"></td>\n</tr></tbody></table>\n<h1>Install</h1>\n<p>Use <code>pip</code> to install edl-cr.</p>\n<pre>pip install edl-cr\n</pre>\n<h1>Usage</h1>\n<p>Use command <code>ecr</code> to run edl-cr.</p>\n<h2>CLI Mode</h2>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-d --dir</code></td>\n<td>Set working directory</td>\n</tr>\n<tr>\n<td><code>-c --command</code></td>\n<td>Execute command just like in interactive mode</td>\n</tr>\n<tr>\n<td><code>-V --version</code></td>\n<td>Show ecr version</td>\n</tr>\n<tr>\n<td><code>-v --verbose</code></td>\n<td>Enable <code>DEBUG</code> level for logging</td>\n</tr></tbody></table>\n<h2>Interactive Mode</h2>\n<p>If you don't use <code>--command</code> options, edl-cr will run in interactive mode.</p>\n<table>\n<thead>\n<tr>\n<th>ECR Color</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Empty</td>\n<td>No ecr data at current and global</td>\n</tr>\n<tr>\n<td>Yellow</td>\n<td>Load from global ecr data</td>\n</tr>\n<tr>\n<td>Green</td>\n<td>Load from current ecr data</td>\n</tr>\n<tr>\n<td>Red</td>\n<td>Load failed</td>\n</tr></tbody></table>\n<h3>Initialize</h3>\n<pre>&gt; init\n</pre>\n<p>Initialize ECR data. It will create a directory named <code>.ecr</code> in current directory.</p>\n<p>If you want to clear ECR data, use this command:</p>\n<pre>&gt; clear\n</pre>\n<h3>Create and Run</h3>\n<p>Create a new code file:</p>\n<pre>&gt; new a.cpp\n\n<span class=\"c1\"># Create code file with template</span>\n&gt; new a.cpp -t base\n</pre>\n<p>It will use code template in <code>.ecr/templates/</code> to create file and set current file with the new file.</p>\n<p>If you want to set current file with a existed file, use this:</p>\n<pre>&gt; now a.cpp\n</pre>\n<p>Then use <code>edit</code> to open default editor to edit code:</p>\n<pre>&gt; edit\n</pre>\n<p>Then use <code>run</code> command to run code.</p>\n<pre><span class=\"c1\"># run a.cpp</span>\na.cpp&gt; run\n\n<span class=\"c1\"># run b.cpp</span>\na.cpp&gt; run b.cpp\n\n<span class=\"c1\"># run a.cpp with file input and standard output</span>\na.cpp&gt; run -io fs\n\n<span class=\"c1\"># watch the file a.cpp and run auto</span>\na.cpp&gt; run -w\n</pre>\n<p>If you give <code>input.data</code> and <code>std.data</code> for input data and standard output data, use <code>test</code> to run and test output data.</p>\n<pre><span class=\"c1\"># run a.cpp's output</span>\na.cpp&gt; <span class=\"nb\">test</span>\n\n<span class=\"c1\"># run and test b.cpp's output</span>\na.cpp&gt; <span class=\"nb\">test</span> b.cpp -r\n\n<span class=\"c1\"># watch the file a.cpp and run&amp;test auto</span>\na.cpp&gt; <span class=\"nb\">test</span> -w -r\n</pre>\n<h3>Use Directory</h3>\n<p>Not only use files, you can also use directories to create a unique environment for codes.</p>\n<pre><span class=\"c1\"># Create a new directory env</span>\n&gt; new project -d\n\n<span class=\"c1\"># Set a directory env for current</span>\n&gt; now project -d\n\n<span class=\"c1\"># Run</span>\n@project&gt; run\n\n<span class=\"c1\"># Judge</span>\n@project&gt; <span class=\"nb\">test</span>\n</pre>\n<p>For <code>run</code> and <code>test</code> commands, it will use the command list in <code>config.yml</code> in the directory. You can write your own commands in it. And these command works in the directory of current work-item.</p>\n<pre><span class=\"nt\">test</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">null</span>\n<span class=\"nt\">run</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">null</span>\n</pre>\n<p>For commands in <code>test</code> and <code>run</code>, you can use variables as same as in <code>executor.yml</code> and <code>judger.yml</code> below.</p>\n<h3>Input and Output</h3>\n<p>The file input is at <code>.ecr/input.data</code>, and the file output is at <code>.ecr/output.data</code>.</p>\n<p>The standard output data for judging is at <code>.ecr/std.data</code></p>\n<h3>Clean</h3>\n<p>Clean the compiling output and something else:</p>\n<pre>&gt; clean\n</pre>\n<h3>Debug</h3>\n<p>When you meet some errors, for example, ecr data loading failing, use <code>debug</code> command to get some information. This is also a useful tool when you create an issue.</p>\n<h3>Variables</h3>\n<p>You can use builtin variables just like in bash:</p>\n<pre>&gt; <span class=\"nb\">echo</span> <span class=\"nv\">$wdir</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>wdir</code></td>\n<td>Working directory</td>\n</tr>\n<tr>\n<td><code>edir</code></td>\n<td>ECR directory</td>\n</tr>\n<tr>\n<td><code>jdir</code></td>\n<td>Judger directory</td>\n</tr>\n<tr>\n<td><code>tdir</code></td>\n<td>Template directory</td>\n</tr>\n<tr>\n<td><code>current</code></td>\n<td>Current file</td>\n</tr>\n<tr>\n<td><code>input</code></td>\n<td>Input file</td>\n</tr>\n<tr>\n<td><code>output</code></td>\n<td>Output file</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>Config file</td>\n</tr>\n<tr>\n<td><code>globaldir</code></td>\n<td>Get global ecr directory</td>\n</tr></tbody></table>\n<h3>Commands</h3>\n<p>These are builtin commands. You can use system command in <code>importedCommand</code> list.</p>\n<p>If you want to call a system command that isn't in <code>importedCommand</code> list, use <code>&gt;</code> prefix like <code>&gt;ls</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>init [-g --globals]</code></td>\n<td>Initialize ECR data</td>\n</tr>\n<tr>\n<td><code>clear [-g --globals]</code></td>\n<td>Clear ECR data</td>\n</tr>\n<tr>\n<td><code>reload [-c --current]</code></td>\n<td>Reload ECR data or current work-item data</td>\n</tr>\n<tr>\n<td><code>new [file] [-e --edit] [-d --dir] [-t --template name]</code></td>\n<td>Create new code file</td>\n</tr>\n<tr>\n<td><code>now [file] [-d --dir]</code></td>\n<td>Change current file</td>\n</tr>\n<tr>\n<td><code>edit [file] [-n --now] [-d --dir]</code></td>\n<td>Edit code file</td>\n</tr>\n<tr>\n<td><code>run [file] [-io --io] [-w] [-d --dir]</code></td>\n<td>Run code file</td>\n</tr>\n<tr>\n<td><code>test [file] [-r --re] [-w] [-j --judger name] [-d --dir]</code></td>\n<td>Judge output data</td>\n</tr>\n<tr>\n<td><code>clean</code></td>\n<td>Clean temp files</td>\n</tr>\n<tr>\n<td><code>pwd</code></td>\n<td>Print working directory</td>\n</tr>\n<tr>\n<td><code>cd</code></td>\n<td>Change working directory</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>Get version</td>\n</tr>\n<tr>\n<td><code>cls</code></td>\n<td>Clear console</td>\n</tr>\n<tr>\n<td><code>exit</code></td>\n<td>Exit</td>\n</tr>\n<tr>\n<td><code>-h --help</code></td>\n<td>Get help</td>\n</tr>\n<tr>\n<td><code>status [-v --var]</code></td>\n<td>Get status</td>\n</tr>\n<tr>\n<td><code>template [new clear remove clear]</code></td>\n<td>Template tools</td>\n</tr>\n<tr>\n<td><code>debug [-os --os] [-c --current] [-e --ecr] [-l --log] [-o file]</code></td>\n<td>Show debug data</td>\n</tr></tbody></table>\n<h1>Global</h1>\n<p>When ecr starts, it will initialize global data and config at <code>~</code> (if it doesn't exist), and you can use <code>init -g</code> , <code>clear -g</code> to re-initialize and clear that.</p>\n<h1>Template</h1>\n<p>You can write your own templates for dir-workitem.</p>\n<pre>&gt; template new mytemp\n</pre>\n<p>It will create a new folder <code>mytemp</code> at template folder <code>.ecr/templates</code>, and generate config files.</p>\n<p>The files in directory <code>.template</code> are the template config files. They will not be copied to destination.</p>\n<h2>.template/config.yml</h2>\n<p>This file defines the config for the template.</p>\n<pre><span class=\"c1\"># commands to execute after copying files</span>\n<span class=\"c1\"># the commands will be executed with working directory = destination</span>\n<span class=\"nt\">after</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[]</span>\n\n<span class=\"c1\"># relative path of the directory to be copied to destination</span>\n<span class=\"c1\"># the base path is the current template path</span>\n<span class=\"nt\">rootPath</span><span class=\"p\">:</span> <span class=\"s\">''</span>\n\n<span class=\"c1\"># template's subject</span>\n<span class=\"nt\">subject</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test</span>\n</pre>\n<h1>Config</h1>\n<p>The config files is at <code>.ecr/</code></p>\n<h2>config.yml</h2>\n<p>This file contains basic config.</p>\n<pre><span class=\"c1\"># The default editor</span>\n<span class=\"nt\">defaultEditor</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">vim</span>\n\n<span class=\"c1\"># The default judger's name</span>\n<span class=\"nt\">defaultJudger</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">text</span>\n\n<span class=\"c1\"># The default IO when run</span>\n<span class=\"nt\">defaultIO</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ss</span>\n\n<span class=\"c1\"># The default shell to execute command</span>\n<span class=\"nt\">defaultShell</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">powershell -c</span>\n\n<span class=\"c1\"># The default time limit for every step when run</span>\n<span class=\"nt\">defaultTimeLimit</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n\n<span class=\"c1\"># The ecr version for the config file</span>\n<span class=\"nt\">eVersion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.0.2</span>\n\n<span class=\"c1\"># Map name to system command</span>\n<span class=\"nt\">importedCommand</span><span class=\"p\">:</span>\n    <span class=\"nt\">bash</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bash</span>\n    <span class=\"nt\">cat</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cat</span>\n    <span class=\"nt\">copy</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">copy</span>\n    <span class=\"nt\">cp</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cp</span>\n\n<span class=\"c1\"># File extension name to be cleaned</span>\n<span class=\"nt\">tempFileFilter</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">exe</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">o</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">class</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">out</span>\n</pre>\n<h2>executor.yml</h2>\n<p>This file gives the way to run a code file.</p>\n<p>You can use these varibles in command:</p>\n<ul>\n<li><code>fileName</code> The code file name</li>\n<li><code>fileNameWithoutExt</code> The code file name without extension</li>\n</ul>\n<pre><span class=\"nt\">c</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">gcc {fileName} -o {fileNameWithoutExt}</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">./{fileNameWithoutExt}</span>\n\n<span class=\"nt\">cpp</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">g++ {fileName} -o {fileNameWithoutExt}</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">./{fileNameWithoutExt}</span>\n</pre>\n<h2>judger.yml</h2>\n<p>This file gives the way to test.</p>\n<p>You can use these varibles in command:</p>\n<ul>\n<li><code>judgerDir</code> The directory path for judgers. It will be pointed to <code>$wdir/.ecr/judgers</code></li>\n<li><code>expectFile</code> The expect output file</li>\n<li><code>realFile</code> The real output file</li>\n</ul>\n<pre><span class=\"nt\">text</span><span class=\"p\">:</span> <span class=\"c1\"># Judger name</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">python -u {judgerDir}/text.py {expectFile} {realFile}</span>\n</pre>\n<h2>judgers/</h2>\n<p>This directory contains some judgers, you can write your judgers and use them.</p>\n<h2>template.yml</h2>\n<p>This file defines the default code template for different language.</p>\n<p>It only contains the template file name (without extension name), and it will find the file in <code>templates/</code></p>\n<p>The key-value pair <code>dir</code> gives the default template name for directory work-item.</p>\n<h2>templates/</h2>\n<p>This directory contains code templates.</p>\n<h1>Developing</h1>\n<ul>\n<li>The <code>Makefile</code> use <code>SHELL</code> varible in Windows (as well as <code>PY</code>), so if you are in Linux, change it before use <code>make</code>.</li>\n<li>To build and upload the package, this requires these modules setuptools, wheel, twine. You can try <code>make prepare</code> to install these modules.</li>\n<li>Maybe there are some differences between win's command and linux's command, so feel free to modify <code>Makefile</code> when you meet some errors.</li>\n</ul>\n<pre><span class=\"c1\"># Run</span>\nmake run\n\nmake run <span class=\"nv\">RARG</span><span class=\"o\">=</span>-h <span class=\"c1\"># use command args</span>\n\n<span class=\"c1\"># Use pylint to check</span>\nmake lint\n\n<span class=\"c1\"># Test</span>\nmake <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Test and get coverage</span>\nmake cover\n\n<span class=\"c1\"># Build</span>\nmake build -B\n\n<span class=\"c1\"># Install locally</span>\nmake install\n\n<span class=\"c1\"># Uninstall locally</span>\nmake uninstall\n\n<span class=\"c1\"># Clean</span>\nmake clean\n\n<span class=\"c1\"># Upload to PyPI</span>\nmake upload\n\n<span class=\"c1\"># Upload to TestPyPI</span>\nmake uptest\n</pre>\n<h1>Requirements</h1>\n<ul>\n<li>Python 3.7</li>\n<li><a href=\"https://github.com/eXceediDeaL/edl-coderunner/network/dependencies\" rel=\"nofollow\">See more</a></li>\n</ul>\n\n          </div>"}, "last_serial": 4561700, "releases": {"0.0.1.1": [{"comment_text": "", "digests": {"md5": "2315d47b337988f7b2f005d83594be3a", "sha256": "166621b65c270963cec3b30ccc724c8e8def3afa8a7b29bc5bd599984affaa1b"}, "downloads": -1, "filename": "edl_cr-0.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2315d47b337988f7b2f005d83594be3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 13897, "upload_time": "2018-11-18T09:29:11", "upload_time_iso_8601": "2018-11-18T09:29:11.581294Z", "url": "https://files.pythonhosted.org/packages/d8/48/3b8646d837eac3401e7a6383b919c480d37eaf1d5506a0932d7eff94bb38/edl_cr-0.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d05e781f78d231ef1c369f322b49c573", "sha256": "49482116af63c87db724179011a31bf2b398d9d6d09ab9c64fcbf7124726a68a"}, "downloads": -1, "filename": "edl-cr-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "d05e781f78d231ef1c369f322b49c573", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9657, "upload_time": "2018-11-18T09:29:13", "upload_time_iso_8601": "2018-11-18T09:29:13.021569Z", "url": "https://files.pythonhosted.org/packages/a2/76/fe26586b03f96bc9eef7068c803a147afcc93b7833a045bcbfd0a902aea9/edl-cr-0.0.1.1.tar.gz", "yanked": false}], "0.0.1.2": [{"comment_text": "", "digests": {"md5": "e685deef8816f77ca5c3516613e788d3", "sha256": "2c0d8ed0b2f2fec17f8f8ba59fc0ba00e1574fbc8fd50a8405b1dfe59762e9e2"}, "downloads": -1, "filename": "edl-cr-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "e685deef8816f77ca5c3516613e788d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9775, "upload_time": "2018-11-19T09:25:09", "upload_time_iso_8601": "2018-11-19T09:25:09.621561Z", "url": "https://files.pythonhosted.org/packages/46/99/fc9044a4f712618fef7acfbbe11bda354531dac1a821c0141be433fccca2/edl-cr-0.0.1.2.tar.gz", "yanked": false}], "0.0.1.4": [{"comment_text": "", "digests": {"md5": "349606893d6ae8e84d75ef44d92c6cf3", "sha256": "3c4fa4604be489eb61c7389fac3d95c445f7bd2467beaac01541c2eab8f7adac"}, "downloads": -1, "filename": "edl-cr-0.0.1.4.tar.gz", "has_sig": false, "md5_digest": "349606893d6ae8e84d75ef44d92c6cf3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11403, "upload_time": "2018-11-19T12:39:41", "upload_time_iso_8601": "2018-11-19T12:39:41.457559Z", "url": "https://files.pythonhosted.org/packages/01/0e/9e6c8bcbc85da9c679ec66b1cabcc1c93ca3b1c6bf99d2bcbe03d7d33080/edl-cr-0.0.1.4.tar.gz", "yanked": false}], "0.0.1.5": [{"comment_text": "", "digests": {"md5": "172cce6570c786c28b486618fc362c93", "sha256": "491c57a24be34281cf59a8f7784c4ec1cf4d674c8fa3d8dc9f9e8f9a332af6a5"}, "downloads": -1, "filename": "edl-cr-0.0.1.5.tar.gz", "has_sig": false, "md5_digest": "172cce6570c786c28b486618fc362c93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14108, "upload_time": "2018-11-20T12:50:46", "upload_time_iso_8601": "2018-11-20T12:50:46.116299Z", "url": "https://files.pythonhosted.org/packages/c0/20/ce674140f0abd9f544975f0371de0b040ebe63246305ad60e498cf013e7c/edl-cr-0.0.1.5.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7de5072cf66d5b66ec32bbba9b4365b5", "sha256": "7cc20f10d8c0d4b26d6056e902e4a2f54c043a166437b39f35c30134ecdb260c"}, "downloads": -1, "filename": "edl-cr-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7de5072cf66d5b66ec32bbba9b4365b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14696, "upload_time": "2018-11-21T03:58:40", "upload_time_iso_8601": "2018-11-21T03:58:40.250001Z", "url": "https://files.pythonhosted.org/packages/a3/9b/871d7c79861870fc8baa4829584a9983f17e3423558842ba02aef8a9e9e5/edl-cr-0.0.2.tar.gz", "yanked": false}], "0.0.2.8": [{"comment_text": "", "digests": {"md5": "594eabddfbade10d4bf4b39c4fea00a8", "sha256": "74355438ae0b19888fbca97e629cc19d2ab92f5978d6e6ef54bd8a64ee91107a"}, "downloads": -1, "filename": "edl-cr-0.0.2.8.tar.gz", "has_sig": false, "md5_digest": "594eabddfbade10d4bf4b39c4fea00a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 19044, "upload_time": "2018-11-30T13:22:07", "upload_time_iso_8601": "2018-11-30T13:22:07.605843Z", "url": "https://files.pythonhosted.org/packages/de/ac/fb792563694ac9ed51de0ccd7cf2db04cd78dabded58873124480e1ee80f/edl-cr-0.0.2.8.tar.gz", "yanked": false}], "0.0.3.2": [{"comment_text": "", "digests": {"md5": "3ec4754d93e9668408e9934e8441f67e", "sha256": "f61783ea96b539558e79bf4241504d9f1937f97325d593fe40d68ebb6e6a642d"}, "downloads": -1, "filename": "edl-cr-0.0.3.2.tar.gz", "has_sig": false, "md5_digest": "3ec4754d93e9668408e9934e8441f67e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1434394, "upload_time": "2018-12-05T00:53:55", "upload_time_iso_8601": "2018-12-05T00:53:55.446606Z", "url": "https://files.pythonhosted.org/packages/77/ab/670b387ae22b0662c677ce49229aeb6766af89dd61c4f42e569098f51807/edl-cr-0.0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ec4754d93e9668408e9934e8441f67e", "sha256": "f61783ea96b539558e79bf4241504d9f1937f97325d593fe40d68ebb6e6a642d"}, "downloads": -1, "filename": "edl-cr-0.0.3.2.tar.gz", "has_sig": false, "md5_digest": "3ec4754d93e9668408e9934e8441f67e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1434394, "upload_time": "2018-12-05T00:53:55", "upload_time_iso_8601": "2018-12-05T00:53:55.446606Z", "url": "https://files.pythonhosted.org/packages/77/ab/670b387ae22b0662c677ce49229aeb6766af89dd61c4f42e569098f51807/edl-cr-0.0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:42 2020"}