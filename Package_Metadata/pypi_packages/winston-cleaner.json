{"info": {"author": "Serafim Nenarokov, Martin Kolisko", "author_email": "serafim.nenarokov@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "# WinstonCleaner\nWinstonCleaner is a software tool for detecting and removing cross-contaminated \ncontigs from assembled transcriptomes. The program uses BLAST to identify \nsuspicious contigs and RPKM values to sort these as either correct or \ncontamination. \n\n# Requirements\n\nTo run WinstonCleaner, the following requirements must be satisfied:\n* Python 2.7\n* [blast](https://blast.ncbi.nlm.nih.gov/Blast.cgi)\n* [bbtools](https://jgi.doe.gov/data-and-tools/bbtools/) (`pileup.sh`)\n* [bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml)\n\n# Installation\n\n1. Checkout repository\n\n    `git clone https://github.com/kolecko007/WinstonCleaner.git`\n\n    `cd WinstonCleaner`\n\n2. Install pip dependencies:\n\n    `pip2 install --user -r requirements.txt`\n\n3. Initialize settings:\n\n    `cp config/settings.yml.default config/settings.yml`\n\n4. Check installation by running `test/integration/run.sh` from `WinstonCleaner` folder\n\n# Quick Start\n1. Prepare the folder with input data and an empty folder for the results\n1. Open `config/settings.yml` and specify input and output paths\n1. `bin/prepare_data.py`\n1. `bin/find_contaminations.py`\n1. Inspect the results in the output folder\n\n# Usage\n## Input\nThe input data should be presented as a set of triads of files for each dataset.\nFor each dataset it is necessary to prepare:\n* left reads `.fastq`\n* right reads `.fastq`\n* assembled transcriptome `.fasta` file\n\nNames of the files must be in the following format:\n* `NAME_1.fastq`\n* `NAME_2.fastq`\n* `NAME.fasta`\n\nFor example:\n* `brucei_1.fastq`\n* `brucei_2.fastq`\n* `brucei.fasta`\n* `giardia_1.fastq`\n* `giardia_2.fastq`\n* `giardia.fasta`\n\nFor file names only letters, digits and `_` symbols are allowed.\n\nAll the files must be placed together in one folder.\n\n## Configuration\n\nAll the settings are declared in `config/settings.yml`.\n\n* `winston.paths.input` &mdash; input folder with reads and contigs\n* `winston.paths.output` &mdash; output folder with the results\n* `winston.paths.tools.pileup_sh` &mdash; (_optional_) bbtools `pileup.sh` execution command\n* `winston.paths.tools.bowtie2` &mdash; (_optional_) bowtie2 execution command\n* `winston.paths.tools.bowtie2_build` &mdash; (_optional_) bowtie2-build execution command\n* `winston.hits_filtering.len_ratio` &mdash; minimal `qcovhsp` for hits filtering\n* `winston.hits_filtering.len_minimum` &mdash; minimal hit lenth for hits filtering\n* `winston.coverage_ratio.regular` &mdash; coverage ratio for REGULAR dataset pair type \n(lower values make contamination prediction more strict, less contaminations will be found)\n* `winston.coverage_ratio.close` &mdash; coverage ratio for CLOSE dataset pair type\n* `winston.threads.multithreading` &mdash; enable multithreading (disabling is convenient for debugging purposes)\n* `winston.threads.count` &mdash; number of threads if multithreading enabled\n* `winston.tools.blast.threads` &mdash; number of threads for BLAST processing\n* `winston.tools.bowtie.threads` &mdash; number of threads for bowtie2 processing\n* `winston.in_memory_db` &mdash; load coverage database to RAM in the beginning. \nMakes contamination lookup faster, but requires decent amount of memory.\n\nThe default configuration can be found in file `config/settings.yml.default`.\n\n```\nwinston:\n  in_memory_db: false\n\n  paths:\n    input: /path/to/folder/with/data/\n    output: /path/to/output/folder\n\n  hits_filtering:\n    len_ratio: 70\n    len_minimum: 100\n\n  coverage_ratio:\n    REGULAR: 1.1\n    CLOSE: 0.04\n\n  threads:\n    multithreading:  true\n    count:   8\n\n  tools:\n    blast:\n      threads: 8\n    bowtie:\n      threads: 8\n```\n\n## Data preparation\nThe first step is to prepare the data for WinstonCleaner processing.\n\n`bin/prepare_data.py`\n\nThe result will be stored in the folder, specified in `winston.paths.output` option.\n\nAfter the preparation the file `types.csv` can be inspected and edited.\nIt contains all possible combinations of dataset pairs and their types.\n\nThe default types are:\n* `CLOSE` - taxonomically close organisms\n* `REGULAR` - simple pair of organisms\n\nIn `types.csv` there can also be specified any amount of custom types.\nTheir names must be in upper case. \n\n```\npredator,prey,95.0,LEFT_EATS_RIGHT\nprey,predator,95.0,RIGHT_EATS_LEFT\n``` \n\nIn these case coverage ratio for each custom type must be specified in `winston.coverage_ratio` section of\n `settings.yml` file:\n\n```\n...\n  coverage_ratio:\n    REGULAR: 1.1\n    CLOSE: 0.04\n    LEFT_EATS_RIGHT: 10\n    RIGHT_EATS_LEFT: 0.1\n...\n```\n\n\n## Contamination cleanup\n\n`bin/find_contaminations.py`\n\n## Output\n\nThe results will be saved in the folder, specified in `winston.paths.output` option.\n\nFor each datasets there will be the following structure of files.\n\n* **DATASET_NAME_clean.fasta** &mdash; clean contigs\n* **DATASET_NAME_deleted.fasta** &mdash; contaminated contigs\n* **DATASET_NAME_suspicious_hits.csv** &mdash; all suspicious BLAST hits\n* **DATASET_NAME_contamination_sources.csv** &mdash; \nsources of contaminations with a following columns: source contamination dataset name, number of sequences\n* **DATASET_NAME_contaminations.csv** &mdash; list of blast hits from which contaminations were detected\n* **DATASET_NAME_missing_coverage.csv** &mdash; list of contig ids without a coverage\n\n\n# TODO\n* Moving to python3\n* Logging system\n* Extended testing\n* export to graph format\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kolecko007/WinstonCleaner", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "winston-cleaner", "package_url": "https://pypi.org/project/winston-cleaner/", "platform": "", "project_url": "https://pypi.org/project/winston-cleaner/", "project_urls": {"Homepage": "https://github.com/kolecko007/WinstonCleaner"}, "release_url": "https://pypi.org/project/winston-cleaner/0.1.0/", "requires_dist": ["matplotlib (==2.0.2)", "numpy (>=1.14.0)", "scipy (>=0.19.0)", "biopython (>=1.68)", "tqdm (>=4.14.0)", "pathlib (>=1.0.1)", "PyYAML (>=3.11)"], "requires_python": "==2.7.*", "summary": "WinstonCleaner - transcriptomic data cross-contamination eliminator", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WinstonCleaner</h1>\n<p>WinstonCleaner is a software tool for detecting and removing cross-contaminated\ncontigs from assembled transcriptomes. The program uses BLAST to identify\nsuspicious contigs and RPKM values to sort these as either correct or\ncontamination.</p>\n<h1>Requirements</h1>\n<p>To run WinstonCleaner, the following requirements must be satisfied:</p>\n<ul>\n<li>Python 2.7</li>\n<li><a href=\"https://blast.ncbi.nlm.nih.gov/Blast.cgi\" rel=\"nofollow\">blast</a></li>\n<li><a href=\"https://jgi.doe.gov/data-and-tools/bbtools/\" rel=\"nofollow\">bbtools</a> (<code>pileup.sh</code>)</li>\n<li><a href=\"http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\" rel=\"nofollow\">bowtie2</a></li>\n</ul>\n<h1>Installation</h1>\n<ol>\n<li>\n<p>Checkout repository</p>\n<p><code>git clone https://github.com/kolecko007/WinstonCleaner.git</code></p>\n<p><code>cd WinstonCleaner</code></p>\n</li>\n<li>\n<p>Install pip dependencies:</p>\n<p><code>pip2 install --user -r requirements.txt</code></p>\n</li>\n<li>\n<p>Initialize settings:</p>\n<p><code>cp config/settings.yml.default config/settings.yml</code></p>\n</li>\n<li>\n<p>Check installation by running <code>test/integration/run.sh</code> from <code>WinstonCleaner</code> folder</p>\n</li>\n</ol>\n<h1>Quick Start</h1>\n<ol>\n<li>Prepare the folder with input data and an empty folder for the results</li>\n<li>Open <code>config/settings.yml</code> and specify input and output paths</li>\n<li><code>bin/prepare_data.py</code></li>\n<li><code>bin/find_contaminations.py</code></li>\n<li>Inspect the results in the output folder</li>\n</ol>\n<h1>Usage</h1>\n<h2>Input</h2>\n<p>The input data should be presented as a set of triads of files for each dataset.\nFor each dataset it is necessary to prepare:</p>\n<ul>\n<li>left reads <code>.fastq</code></li>\n<li>right reads <code>.fastq</code></li>\n<li>assembled transcriptome <code>.fasta</code> file</li>\n</ul>\n<p>Names of the files must be in the following format:</p>\n<ul>\n<li><code>NAME_1.fastq</code></li>\n<li><code>NAME_2.fastq</code></li>\n<li><code>NAME.fasta</code></li>\n</ul>\n<p>For example:</p>\n<ul>\n<li><code>brucei_1.fastq</code></li>\n<li><code>brucei_2.fastq</code></li>\n<li><code>brucei.fasta</code></li>\n<li><code>giardia_1.fastq</code></li>\n<li><code>giardia_2.fastq</code></li>\n<li><code>giardia.fasta</code></li>\n</ul>\n<p>For file names only letters, digits and <code>_</code> symbols are allowed.</p>\n<p>All the files must be placed together in one folder.</p>\n<h2>Configuration</h2>\n<p>All the settings are declared in <code>config/settings.yml</code>.</p>\n<ul>\n<li><code>winston.paths.input</code> \u2014 input folder with reads and contigs</li>\n<li><code>winston.paths.output</code> \u2014 output folder with the results</li>\n<li><code>winston.paths.tools.pileup_sh</code> \u2014 (<em>optional</em>) bbtools <code>pileup.sh</code> execution command</li>\n<li><code>winston.paths.tools.bowtie2</code> \u2014 (<em>optional</em>) bowtie2 execution command</li>\n<li><code>winston.paths.tools.bowtie2_build</code> \u2014 (<em>optional</em>) bowtie2-build execution command</li>\n<li><code>winston.hits_filtering.len_ratio</code> \u2014 minimal <code>qcovhsp</code> for hits filtering</li>\n<li><code>winston.hits_filtering.len_minimum</code> \u2014 minimal hit lenth for hits filtering</li>\n<li><code>winston.coverage_ratio.regular</code> \u2014 coverage ratio for REGULAR dataset pair type\n(lower values make contamination prediction more strict, less contaminations will be found)</li>\n<li><code>winston.coverage_ratio.close</code> \u2014 coverage ratio for CLOSE dataset pair type</li>\n<li><code>winston.threads.multithreading</code> \u2014 enable multithreading (disabling is convenient for debugging purposes)</li>\n<li><code>winston.threads.count</code> \u2014 number of threads if multithreading enabled</li>\n<li><code>winston.tools.blast.threads</code> \u2014 number of threads for BLAST processing</li>\n<li><code>winston.tools.bowtie.threads</code> \u2014 number of threads for bowtie2 processing</li>\n<li><code>winston.in_memory_db</code> \u2014 load coverage database to RAM in the beginning.\nMakes contamination lookup faster, but requires decent amount of memory.</li>\n</ul>\n<p>The default configuration can be found in file <code>config/settings.yml.default</code>.</p>\n<pre><code>winston:\n  in_memory_db: false\n\n  paths:\n    input: /path/to/folder/with/data/\n    output: /path/to/output/folder\n\n  hits_filtering:\n    len_ratio: 70\n    len_minimum: 100\n\n  coverage_ratio:\n    REGULAR: 1.1\n    CLOSE: 0.04\n\n  threads:\n    multithreading:  true\n    count:   8\n\n  tools:\n    blast:\n      threads: 8\n    bowtie:\n      threads: 8\n</code></pre>\n<h2>Data preparation</h2>\n<p>The first step is to prepare the data for WinstonCleaner processing.</p>\n<p><code>bin/prepare_data.py</code></p>\n<p>The result will be stored in the folder, specified in <code>winston.paths.output</code> option.</p>\n<p>After the preparation the file <code>types.csv</code> can be inspected and edited.\nIt contains all possible combinations of dataset pairs and their types.</p>\n<p>The default types are:</p>\n<ul>\n<li><code>CLOSE</code> - taxonomically close organisms</li>\n<li><code>REGULAR</code> - simple pair of organisms</li>\n</ul>\n<p>In <code>types.csv</code> there can also be specified any amount of custom types.\nTheir names must be in upper case.</p>\n<pre><code>predator,prey,95.0,LEFT_EATS_RIGHT\nprey,predator,95.0,RIGHT_EATS_LEFT\n</code></pre>\n<p>In these case coverage ratio for each custom type must be specified in <code>winston.coverage_ratio</code> section of\n<code>settings.yml</code> file:</p>\n<pre><code>...\n  coverage_ratio:\n    REGULAR: 1.1\n    CLOSE: 0.04\n    LEFT_EATS_RIGHT: 10\n    RIGHT_EATS_LEFT: 0.1\n...\n</code></pre>\n<h2>Contamination cleanup</h2>\n<p><code>bin/find_contaminations.py</code></p>\n<h2>Output</h2>\n<p>The results will be saved in the folder, specified in <code>winston.paths.output</code> option.</p>\n<p>For each datasets there will be the following structure of files.</p>\n<ul>\n<li><strong>DATASET_NAME_clean.fasta</strong> \u2014 clean contigs</li>\n<li><strong>DATASET_NAME_deleted.fasta</strong> \u2014 contaminated contigs</li>\n<li><strong>DATASET_NAME_suspicious_hits.csv</strong> \u2014 all suspicious BLAST hits</li>\n<li><strong>DATASET_NAME_contamination_sources.csv</strong> \u2014\nsources of contaminations with a following columns: source contamination dataset name, number of sequences</li>\n<li><strong>DATASET_NAME_contaminations.csv</strong> \u2014 list of blast hits from which contaminations were detected</li>\n<li><strong>DATASET_NAME_missing_coverage.csv</strong> \u2014 list of contig ids without a coverage</li>\n</ul>\n<h1>TODO</h1>\n<ul>\n<li>Moving to python3</li>\n<li>Logging system</li>\n<li>Extended testing</li>\n<li>export to graph format</li>\n</ul>\n\n          </div>"}, "last_serial": 4973836, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2f2f53e6deb8db7c9e9d3af99bad24c4", "sha256": "1110bfe6c0b028fc7076ac359872fb03275356437638a2530cfd3419936a92fb"}, "downloads": -1, "filename": "winston_cleaner-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2f2f53e6deb8db7c9e9d3af99bad24c4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": "==2.7.*", "size": 26942, "upload_time": "2019-03-22T17:46:58", "upload_time_iso_8601": "2019-03-22T17:46:58.922430Z", "url": "https://files.pythonhosted.org/packages/70/f2/388759daf73edd64d412c3f7b2b20258bc1e40404f3422de192cb0849b5e/winston_cleaner-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a595e8e27ab7e6088b0c7479194e3927", "sha256": "2b5a8307b10ab9244379fb5982ba7f5ba30844ea6e8728d1d19b39b05535b879"}, "downloads": -1, "filename": "winston_cleaner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a595e8e27ab7e6088b0c7479194e3927", "packagetype": "sdist", "python_version": "source", "requires_python": "==2.7.*", "size": 16825, "upload_time": "2019-03-22T17:47:01", "upload_time_iso_8601": "2019-03-22T17:47:01.006028Z", "url": "https://files.pythonhosted.org/packages/58/f3/75ffb3796dda3a8b55aac6b9e769029177b761e06f1659385f4701d953c3/winston_cleaner-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f2f53e6deb8db7c9e9d3af99bad24c4", "sha256": "1110bfe6c0b028fc7076ac359872fb03275356437638a2530cfd3419936a92fb"}, "downloads": -1, "filename": "winston_cleaner-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "2f2f53e6deb8db7c9e9d3af99bad24c4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": "==2.7.*", "size": 26942, "upload_time": "2019-03-22T17:46:58", "upload_time_iso_8601": "2019-03-22T17:46:58.922430Z", "url": "https://files.pythonhosted.org/packages/70/f2/388759daf73edd64d412c3f7b2b20258bc1e40404f3422de192cb0849b5e/winston_cleaner-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a595e8e27ab7e6088b0c7479194e3927", "sha256": "2b5a8307b10ab9244379fb5982ba7f5ba30844ea6e8728d1d19b39b05535b879"}, "downloads": -1, "filename": "winston_cleaner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a595e8e27ab7e6088b0c7479194e3927", "packagetype": "sdist", "python_version": "source", "requires_python": "==2.7.*", "size": 16825, "upload_time": "2019-03-22T17:47:01", "upload_time_iso_8601": "2019-03-22T17:47:01.006028Z", "url": "https://files.pythonhosted.org/packages/58/f3/75ffb3796dda3a8b55aac6b9e769029177b761e06f1659385f4701d953c3/winston_cleaner-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:50 2020"}