{"info": {"author": "Patrick N\u00e4f", "author_email": "herzbube@herzbube.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "python-aprmd5 is a Python extension written in C that wraps the MD5 routines of\nthe Apache Portable Runtime (APR) Utility Library (libaprutil) and exposes them\nto the Python interpreter as the module aprmd5. The main purpose of writing\npython-aprmd5 in the first place has been to expose the function\napr_md5_encode(), which generates salted crypt-style hashes using a version of\nthe MD5 hash algorithm that was modified especially for the APR project.\n\nThe resulting hashes always start with the prefix characters \"$apr1$\" in order\nto distinguish them from the result of various other crypt() variants, which\nuse other prefixes. For instance, for input \"foo\" and salt \"mYJd83wW\",\napr_md5_encode() produces the following hash:\n\n  $apr1$mYJd83wW$IO.6aK3G0d4mHxcImhPX50\n\nHashes like this are typically generated by the command line utility htpasswd,\nwhich is part of the Apache HTTP server project. The hashes encrypt user\npasswords that are used by the Apache HTTP server for basic user authentication.\n\nFor completeness sake, python-aprmd5 exposes not only apr_md5_encode() but most\nof the other functions of libaprutil's MD5 routines as well. Where those\nfunctions are concerned with the original, unmodified MD5 algorithm, this is\nmostly a duplication of effort as that algorithm can be easily obtained through\nthe Python Standard Library module \"hashlib\". In fact I advise against using\npython-aprmd5 if you are interested in the original MD5 algorithm only.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/herzbube/python-aprmd5", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "python-aprmd5", "package_url": "https://pypi.org/project/python-aprmd5/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-aprmd5/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/herzbube/python-aprmd5"}, "release_url": "https://pypi.org/project/python-aprmd5/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Python interface to the MD5 routines of libaprutil", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>python-aprmd5 is a Python extension written in C that wraps the MD5 routines of\nthe Apache Portable Runtime (APR) Utility Library (libaprutil) and exposes them\nto the Python interpreter as the module aprmd5. The main purpose of writing\npython-aprmd5 in the first place has been to expose the function\napr_md5_encode(), which generates salted crypt-style hashes using a version of\nthe MD5 hash algorithm that was modified especially for the APR project.</p>\n<p>The resulting hashes always start with the prefix characters \u201c$apr1$\u201d in order\nto distinguish them from the result of various other crypt() variants, which\nuse other prefixes. For instance, for input \u201cfoo\u201d and salt \u201cmYJd83wW\u201d,\napr_md5_encode() produces the following hash:</p>\n<blockquote>\n$apr1$mYJd83wW$IO.6aK3G0d4mHxcImhPX50</blockquote>\n<p>Hashes like this are typically generated by the command line utility htpasswd,\nwhich is part of the Apache HTTP server project. The hashes encrypt user\npasswords that are used by the Apache HTTP server for basic user authentication.</p>\n<p>For completeness sake, python-aprmd5 exposes not only apr_md5_encode() but most\nof the other functions of libaprutil\u2019s MD5 routines as well. Where those\nfunctions are concerned with the original, unmodified MD5 algorithm, this is\nmostly a duplication of effort as that algorithm can be easily obtained through\nthe Python Standard Library module \u201chashlib\u201d. In fact I advise against using\npython-aprmd5 if you are interested in the original MD5 algorithm only.</p>\n\n          </div>"}, "last_serial": 558441, "releases": {"0.1": [], "0.2": [], "0.2.1": []}, "urls": [], "timestamp": "Fri May  8 02:54:17 2020"}