{"info": {"author": "Luke Paris (Paradoxis)", "author_email": "luke@paradoxis.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# PIP Module Scanner\n[![Build Status](https://travis-ci.org/Paradoxis/PIP-Module-Scanner.svg?branch=master)](https://travis-ci.org/Paradoxis/PIP-Module-Scanner)\n[![Code Coverage](https://codecov.io/gh/Paradoxis/PIP-Module-Scanner/branch/master/graph/badge.svg)](https://codecov.io/gh/Paradoxis/PIP-Module-Scanner)\n[![PyPI version](https://badge.fury.io/py/pip-module-scanner.svg)](https://badge.fury.io/py/pip-module-scanner)\n\nScans your Python project for all installed third party pip libraries that are used and generates a requirements.txt based output.\n\n## Installation\nInstalling the scanner is easy, either clone the repository and run the script or install it via pip like so:\n\n```shell\n$ pip install pip-module-scanner\n```\n\n## Usage\nUsing the scanner is incredibly simple. Open a terminal and navigate to your project folder, run the script and watch magic happen before your eyes. Example:\n\n```shell\n$ cd ~/projects/my-awesome-project/\n$ pip-module-scanner\nfoo==1.0.0\nbar==2.1.0\nbaz==0.0.1\n```    \n\n### Specifying a custom path\nYou can specify a custom path in which you want to run the script with the `-p` or `--path` argument. Example:\n\n```shell\n$ pip-module-scanner --path ~/projects/my-awesome-project/\nfoo==1.0.0 \nbar==2.1.0\nbaz==0.0.1\n```\n\n### Writing the output to a file\nYou can write the output of the script to a file by using the `-o` or `--out` argument. Example:\n\n```shell\n$ cd ~/projects/my-awesome-project/\n$ pip-module-scanner -o requirements.txt\n$ cat requirements.txt\nfoo==1.0.0\nbar==2.1.0\nbaz==0.0.1\n```\n\n## Integrating the code in your project\nYou can easily integrate the scanner code in your own project so you can get the output of the scanner yourself or modify the class to suit your own needs. To do this, you can use it like so:\n\n```python\nfrom pip_module_scanner.scanner import Scanner\n\nscanner = Scanner()\nscanner.run()\n\n# do whatever you want with the results here\n# example:\nfor lib in scanner.libraries_found:\n    print (\"Found module %s at version %s\" % (lib.key, lib.version))\n```\n\nSpecifying a path would work like so, make sure to also import the `ScannerException` as it will check if the path you specified is actually a real path:\n\n```python\nfrom pip_module_scanner.scanner import Scanner, ScannerException\n\ntry:\n   scanner = Scanner(path=\"~/projects/my-awesome-project/\")\n   scanner.run()\n\n   # do whatever you want with the results here\n   # example:\n   for lib in scanner.libraries_found:\n       print (\"Found module %s at version %s\" % (lib.key, lib.version))\n\nexcept ScannerException as e:\n    print(\"Error: %s\" % str(e))\n```\n\nFor the one-liner junkies out there (like me) you can also get all libraries with this nifty little one-liner (I'm so considerate)\n\n```python\nfrom pip_module_scanner.scanner import Scanner\n\nlibs = Scanner().run().libraries_found # Isn't it beautiful?\n```\n\n## Class definitions\n\n### pip_module_scanner.scanner.Scanner([string path [, string output]])\n\n| Method              | Argument | Type    | Required | Description                                          |\n| ------------------- | -------- | ------- | -------- | ---------------------------------------------------- |\n| \\_\\_init\\_\\_        | path     | string  | no       | Directory to recursively scan through, defaults to current working directory. |\n|                     | output   | string  | no       | Output path to write the resutlts from `output()` to |\n| run                 |          |         |          | Runs the scan, output will be stored in `libraries_found` |\n| output              |          |         |          | Writes the output to the console or a path specified in the constructor |\n\n\n| Property            | Type                                                | Description  |\n| ------------------- | --------------------------------------------------- | ------------ |\n| libraries_found     | list<pip._vendor.pkg_resources.EggInfoDistribution> | List of all found pip libraries in your project, result from `Scanner.run()`.\n\n\n## License\nMIT License\n\nCopyright (c) 2016 Luke Paris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Paradoxis/PIP-Module-Scanner", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pip-module-scanner", "package_url": "https://pypi.org/project/pip-module-scanner/", "platform": "", "project_url": "https://pypi.org/project/pip-module-scanner/", "project_urls": {"Homepage": "https://github.com/Paradoxis/PIP-Module-Scanner"}, "release_url": "https://pypi.org/project/pip-module-scanner/0.6/", "requires_dist": ["twine; extra == 'dev'", "codecov; extra == 'test'", "coverage; extra == 'test'", "requests (==2.19.1); extra == 'test'", "flask (==1.0.2); extra == 'test'"], "requires_python": ">=2.7.0", "summary": "Scans your Python project for all installed third party pip libraries and generates a requirements.txt based output.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PIP Module Scanner</h1>\n<p><a href=\"https://travis-ci.org/Paradoxis/PIP-Module-Scanner\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afa067c0ff46187588424ee9fe49e9f03f06d702/68747470733a2f2f7472617669732d63692e6f72672f50617261646f7869732f5049502d4d6f64756c652d5363616e6e65722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Paradoxis/PIP-Module-Scanner\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdb03c5efc6e0a49b714dde7d13675177516831b/68747470733a2f2f636f6465636f762e696f2f67682f50617261646f7869732f5049502d4d6f64756c652d5363616e6e65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/pip-module-scanner\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed446614c8ed92fdc855f2e6e643ea518ea055aa/68747470733a2f2f62616467652e667572792e696f2f70792f7069702d6d6f64756c652d7363616e6e65722e737667\"></a></p>\n<p>Scans your Python project for all installed third party pip libraries that are used and generates a requirements.txt based output.</p>\n<h2>Installation</h2>\n<p>Installing the scanner is easy, either clone the repository and run the script or install it via pip like so:</p>\n<pre>$ pip install pip-module-scanner\n</pre>\n<h2>Usage</h2>\n<p>Using the scanner is incredibly simple. Open a terminal and navigate to your project folder, run the script and watch magic happen before your eyes. Example:</p>\n<pre>$ <span class=\"nb\">cd</span> ~/projects/my-awesome-project/\n$ pip-module-scanner\n<span class=\"nv\">foo</span><span class=\"o\">==</span><span class=\"m\">1</span>.0.0\n<span class=\"nv\">bar</span><span class=\"o\">==</span><span class=\"m\">2</span>.1.0\n<span class=\"nv\">baz</span><span class=\"o\">==</span><span class=\"m\">0</span>.0.1\n</pre>\n<h3>Specifying a custom path</h3>\n<p>You can specify a custom path in which you want to run the script with the <code>-p</code> or <code>--path</code> argument. Example:</p>\n<pre>$ pip-module-scanner --path ~/projects/my-awesome-project/\n<span class=\"nv\">foo</span><span class=\"o\">==</span><span class=\"m\">1</span>.0.0 \n<span class=\"nv\">bar</span><span class=\"o\">==</span><span class=\"m\">2</span>.1.0\n<span class=\"nv\">baz</span><span class=\"o\">==</span><span class=\"m\">0</span>.0.1\n</pre>\n<h3>Writing the output to a file</h3>\n<p>You can write the output of the script to a file by using the <code>-o</code> or <code>--out</code> argument. Example:</p>\n<pre>$ <span class=\"nb\">cd</span> ~/projects/my-awesome-project/\n$ pip-module-scanner -o requirements.txt\n$ cat requirements.txt\n<span class=\"nv\">foo</span><span class=\"o\">==</span><span class=\"m\">1</span>.0.0\n<span class=\"nv\">bar</span><span class=\"o\">==</span><span class=\"m\">2</span>.1.0\n<span class=\"nv\">baz</span><span class=\"o\">==</span><span class=\"m\">0</span>.0.1\n</pre>\n<h2>Integrating the code in your project</h2>\n<p>You can easily integrate the scanner code in your own project so you can get the output of the scanner yourself or modify the class to suit your own needs. To do this, you can use it like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pip_module_scanner.scanner</span> <span class=\"kn\">import</span> <span class=\"n\">Scanner</span>\n\n<span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">Scanner</span><span class=\"p\">()</span>\n<span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># do whatever you want with the results here</span>\n<span class=\"c1\"># example:</span>\n<span class=\"k\">for</span> <span class=\"n\">lib</span> <span class=\"ow\">in</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">libraries_found</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"Found module </span><span class=\"si\">%s</span><span class=\"s2\"> at version </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">))</span>\n</pre>\n<p>Specifying a path would work like so, make sure to also import the <code>ScannerException</code> as it will check if the path you specified is actually a real path:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pip_module_scanner.scanner</span> <span class=\"kn\">import</span> <span class=\"n\">Scanner</span><span class=\"p\">,</span> <span class=\"n\">ScannerException</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">Scanner</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"~/projects/my-awesome-project/\"</span><span class=\"p\">)</span>\n   <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n   <span class=\"c1\"># do whatever you want with the results here</span>\n   <span class=\"c1\"># example:</span>\n   <span class=\"k\">for</span> <span class=\"n\">lib</span> <span class=\"ow\">in</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">libraries_found</span><span class=\"p\">:</span>\n       <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"s2\">\"Found module </span><span class=\"si\">%s</span><span class=\"s2\"> at version </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">))</span>\n\n<span class=\"k\">except</span> <span class=\"n\">ScannerException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Error: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n<p>For the one-liner junkies out there (like me) you can also get all libraries with this nifty little one-liner (I'm so considerate)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pip_module_scanner.scanner</span> <span class=\"kn\">import</span> <span class=\"n\">Scanner</span>\n\n<span class=\"n\">libs</span> <span class=\"o\">=</span> <span class=\"n\">Scanner</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">libraries_found</span> <span class=\"c1\"># Isn't it beautiful?</span>\n</pre>\n<h2>Class definitions</h2>\n<h3>pip_module_scanner.scanner.Scanner([string path [, string output]])</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Argument</th>\n<th>Type</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>__init__</td>\n<td>path</td>\n<td>string</td>\n<td>no</td>\n<td>Directory to recursively scan through, defaults to current working directory.</td>\n</tr>\n<tr>\n<td></td>\n<td>output</td>\n<td>string</td>\n<td>no</td>\n<td>Output path to write the resutlts from <code>output()</code> to</td>\n</tr>\n<tr>\n<td>run</td>\n<td></td>\n<td></td>\n<td></td>\n<td>Runs the scan, output will be stored in <code>libraries_found</code></td>\n</tr>\n<tr>\n<td>output</td>\n<td></td>\n<td></td>\n<td></td>\n<td>Writes the output to the console or a path specified in the constructor</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>libraries_found</td>\n<td>list&lt;pip._vendor.pkg_resources.EggInfoDistribution&gt;</td>\n<td>List of all found pip libraries in your project, result from <code>Scanner.run()</code>.</td>\n</tr></tbody></table>\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2016 Luke Paris</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 4272680, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "1fae88d674c6de9817687bae71dd7751", "sha256": "a3b4c3a355fd77057a86b0e34cd29d0f0be44f3c0c1f909b1b2325ceb2ef0e37"}, "downloads": -1, "filename": "pip-module-scanner-0.2.tar.gz", "has_sig": false, "md5_digest": "1fae88d674c6de9817687bae71dd7751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3607, "upload_time": "2016-08-10T08:59:59", "upload_time_iso_8601": "2016-08-10T08:59:59.355897Z", "url": "https://files.pythonhosted.org/packages/6f/c1/a54dd36534e23aaf0405da56c80ea369e13e9c0b572a8d6d0a8fff95b719/pip-module-scanner-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "268a1d33b07ba5bc1ffb6c01dcc88685", "sha256": "a86cf59eec7c6a7ba0e6be093a1a4ccaffee11e0af994505e1c5473a6ff61d96"}, "downloads": -1, "filename": "pip-module-scanner-0.3.tar.gz", "has_sig": false, "md5_digest": "268a1d33b07ba5bc1ffb6c01dcc88685", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2630, "upload_time": "2016-08-10T10:01:45", "upload_time_iso_8601": "2016-08-10T10:01:45.095356Z", "url": "https://files.pythonhosted.org/packages/a5/c4/8f1c2b80ff392a681fda91a079b80da828f24c079e6683b2a3cb1fbc32b0/pip-module-scanner-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "2d82ae3569e1c55402b4b1588a76e115", "sha256": "c874f9e9b2b893844faa38c9a26a9b8f2331c38a802339b736d2f0b4a24a0f05"}, "downloads": -1, "filename": "pip-module-scanner-0.4.tar.gz", "has_sig": false, "md5_digest": "2d82ae3569e1c55402b4b1588a76e115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4344, "upload_time": "2016-08-10T10:17:20", "upload_time_iso_8601": "2016-08-10T10:17:20.725370Z", "url": "https://files.pythonhosted.org/packages/6a/d1/079909eb36836e1bdf7c2f87cef0d7a7cb0f6a8493525ae5782ec56ec83c/pip-module-scanner-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "62778e4ffc5eb415b3a401b1a5d724f2", "sha256": "ed5d7a7a2d928ab11eed37a19c94fcbff8ebbc341daeac15ecd74a71d8e56dfb"}, "downloads": -1, "filename": "pip-module-scanner-0.5.tar.gz", "has_sig": false, "md5_digest": "62778e4ffc5eb415b3a401b1a5d724f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2627, "upload_time": "2016-08-10T10:18:44", "upload_time_iso_8601": "2016-08-10T10:18:44.447564Z", "url": "https://files.pythonhosted.org/packages/61/88/d7b9b0968b9ee20ec86071b9c6e9199031aa7f58e549a0888074aca08b56/pip-module-scanner-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "fb51c30aa77b49b1e2a89816aa0262b5", "sha256": "5a3ba9a2cc159ba9e1a03c3902a31e797fc41db733018534841956d0f2f9acab"}, "downloads": -1, "filename": "pip_module_scanner-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb51c30aa77b49b1e2a89816aa0262b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 9127, "upload_time": "2018-09-14T14:59:11", "upload_time_iso_8601": "2018-09-14T14:59:11.680236Z", "url": "https://files.pythonhosted.org/packages/2c/52/e38e6e7f9a8835df753e41482b2a3eba9ba002f7adc483c8d5f7620fdc19/pip_module_scanner-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7616d87d5f4b2f9a64089201dc3bd2a1", "sha256": "dc89e32c158fdd2c4eb5753858031aa4129e46bd967f463f9f3b567afd84f24f"}, "downloads": -1, "filename": "pip-module-scanner-0.6.tar.gz", "has_sig": false, "md5_digest": "7616d87d5f4b2f9a64089201dc3bd2a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 7930, "upload_time": "2018-09-14T14:59:13", "upload_time_iso_8601": "2018-09-14T14:59:13.336967Z", "url": "https://files.pythonhosted.org/packages/b5/5f/68278c856741278d04c923bb650a49bfe2cee1c3e48dfd1ee9da0a4ad756/pip-module-scanner-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb51c30aa77b49b1e2a89816aa0262b5", "sha256": "5a3ba9a2cc159ba9e1a03c3902a31e797fc41db733018534841956d0f2f9acab"}, "downloads": -1, "filename": "pip_module_scanner-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb51c30aa77b49b1e2a89816aa0262b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 9127, "upload_time": "2018-09-14T14:59:11", "upload_time_iso_8601": "2018-09-14T14:59:11.680236Z", "url": "https://files.pythonhosted.org/packages/2c/52/e38e6e7f9a8835df753e41482b2a3eba9ba002f7adc483c8d5f7620fdc19/pip_module_scanner-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7616d87d5f4b2f9a64089201dc3bd2a1", "sha256": "dc89e32c158fdd2c4eb5753858031aa4129e46bd967f463f9f3b567afd84f24f"}, "downloads": -1, "filename": "pip-module-scanner-0.6.tar.gz", "has_sig": false, "md5_digest": "7616d87d5f4b2f9a64089201dc3bd2a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 7930, "upload_time": "2018-09-14T14:59:13", "upload_time_iso_8601": "2018-09-14T14:59:13.336967Z", "url": "https://files.pythonhosted.org/packages/b5/5f/68278c856741278d04c923bb650a49bfe2cee1c3e48dfd1ee9da0a4ad756/pip-module-scanner-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:11 2020"}