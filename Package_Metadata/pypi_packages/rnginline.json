{"info": {"author": "Hal Blackburn", "author_email": "hwtb2@cam.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: XML"], "description": "rnginline: Flatten multi-file RELAX NG schemas\n==============================================\n\n.. image:: https://img.shields.io/travis/h4l/rnginline.svg\n    :target: https://travis-ci.org/h4l/rnginline\n\n.. image:: https://img.shields.io/codecov/c/github/h4l/rnginline/master.svg\n    :target: https://codecov.io/github/h4l/rnginline?ref=master\n\n.. image:: https://img.shields.io/pypi/v/rnginline.svg\n    :target: https://pypi.python.org/pypi/rnginline\n\n.. image:: https://img.shields.io/badge/docs-latest-brightgreen.svg\n    :target: http://rnginline.readthedocs.org/en/latest/\n\nrnginline is a Python library and command-line tool for loading multi-file\nRELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG\nschema.\n\n\nFeatures\n--------\n\n* Convert multi-file RNG schemas into one file **without breaking or\n  restructuring the schemas**\n\n  * Great care is taken to maintain the semantics of the separate schema files in the single output\n  * The input documents are changed as little as possible, so the output is as readable as the input\n\n* Load schemas from:\n\n  * The filesystem\n  * From a Python package's data (without unpacking it to the filesystem)\n\n* command-line interface as well as a Python API\n* Test suite covering lots of edge cases, e.g. namespace handling\n\n  * 100% line & branch code coverage\n\n\nQuickstart\n----------\n\nInstall with pip:\n\n.. code-block:: console\n\n    $ pip install rnginline\n\nYou can use it from Python like this:\n\n.. code-block:: python\n\n    >>> import rnginline\n    >>> rnginline.inline('my-nested-schema-root.rng')\n    <lxml.etree.RelaxNG object at ...>\n\nYou can load a multi-file schema from a Python package's data like this:\n\n.. code-block:: python\n\n    >>> import rnginline\n    >>> from rnginline.urlhandlers import pydata\n    >>> url = pydata.makeurl('rnginline.test',\n    ...                      'data/testcases/external-ref-1/schema.rng')\n    >>> url\n    'pydata://rnginline.test/data/testcases/external-ref-1/schema.rng'\n    >>> rnginline.inline(url)\n    <lxml.etree.RelaxNG object at ...>\n\nYou can use it from the command line like this:\n\n.. code-block:: console\n\n    $ rnginline my-nested-schema-root.rng flattened-output.rng\n\n\nDocumentation\n-------------\n\nDocumentation is available at http://rnginline.readthedocs.org/\n\n\nMotivation\n----------\n\n``lxml`` has good support for using RELAX NG schemas, but lacks support for\nloading multi-file schemas from anywhere other than the filesystem. This is a\nproblem if you wish to bundle a multi-file schema with your Python\npackage/module. You'd have to depend on setuptools being available to use its\n`resource extraction`_, or use one of the existing RELAX NG merging tools to\nconvert your schema into a single file.\n\n.. _resource extraction: https://pythonhosted.org/setuptools/pkg_resources.html#resource-extraction\n\n\nExisting RELAX NG flattening tools\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following projects didn't quite fit my needs, leading me to write rnginline.\nThey may work for you though.\n\n* `rng2srng <http://kohsuke.org/relaxng/rng2srng/>`_ - Implements full\n  simplification, so the structure of the input schema will be lost\n* `rng-incelim <http://ftp.davidashen.net/incelim/>`_ - A similar project to\n  this, implemented in XSLT. Unfortunately\n  doesn't handle namespace declarations on ``<include>`` elements correctly.\n  XSLT 1.0 doesn't support creating namespace nodes, so to fix this\n  rng-incelim would have to resolve all QNames in the schema to NCNames with\n  ns attributes, which would be undesirable for me.\n\n\nDeveloping\n----------\n\nAn `invoke <http://www.pyinvoke.org/>`_ tasks file contains testing, doc\nbuilding, linting tasks. The tox config uses invoke to run tests over various\nPython versions.\n\nTo do a full test run, install tox (``$ pip install tox``) then run\n``$ tox`` from within the checked-out repo. This will take several minutes on\nthe first run, mainly due to the amount of time ``lxml`` takes to build from\nsource.\n\nTo run invoke tasks, ensure all the dev dependencies are installed:\n\n.. code-block:: console\n\n    $ pip install -r requirements/all.txt\n    $ invoke -l\n    Available tasks:\n\n      [\u2026]\n      coverage    Combine coverage of Python 2 and Python 3 test runs\n      docs        Build sphinx documentation\n      docs_test   Test the doctests in the Sphinx docs. Must be run with Python 3.\n      pep8        Lint code for PEP 8 violations\n      readme      Lint the README for reStructuredText syntax issues\n      test        Run rnginline test suite\n    $ invoke test\n    ============================= test session starts ==============================\n    platform darwin -- Python 2.7.8 -- py-1.4.26 -- pytest-2.6.4\n    plugins: cov\n    collected 346 items\n\n    [\u2026]\n\nPrebuilding Wheels\n~~~~~~~~~~~~~~~~~~\n\nTo mitigate the time ``lxml`` takes to build, you can pre-build all the\ndependencies as Wheels into ``./wheelhouse`` and have pip use the pre-built\nwheels on every install. To do so, run:\n\n.. code-block:: console\n\n    $ invoke cache_all_requirement_wheels\n    $ export PIP_FIND_LINKS=$(pwd)/wheelhouse", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/h4l/rnginline", "keywords": "relaxng relax ng inline schema flatten lxml xml", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "rnginline", "package_url": "https://pypi.org/project/rnginline/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rnginline/", "project_urls": {"Homepage": "https://github.com/h4l/rnginline"}, "release_url": "https://pypi.org/project/rnginline/0.0.2/", "requires_dist": ["lxml", "docopt", "six", "pytest (>=2.6.4); extra == 'tests'", "mock; extra == 'tests'", "coverage; extra == 'tests'"], "requires_python": null, "summary": "Flatten multi-file RELAX NG schemas", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/h4l/rnginline\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/h4l/rnginline.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d64b846e48ead024a7fe073a15987f87ce64bc2a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f68346c2f726e67696e6c696e652e737667\"></a>\n<a href=\"https://codecov.io/github/h4l/rnginline?ref=master\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/h4l/rnginline/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7133fbe44d9933c1490901d2bda073d3be7e7583/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f68346c2f726e67696e6c696e652f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/rnginline\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/rnginline.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3440be5494cd3f2a1193ece4e259788231f7f183/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726e67696e6c696e652e737667\"></a>\n<a href=\"http://rnginline.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/docs-latest-brightgreen.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2379b41b2809fb0ad4959e1f0113f57abc80a64/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d627269676874677265656e2e737667\"></a>\n<p>rnginline is a Python library and command-line tool for loading multi-file\nRELAX NG schemas from arbitary URLs, and flattening them into a single RELAX NG\nschema.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Convert multi-file RNG schemas into one file <strong>without breaking or\nrestructuring the schemas</strong><ul>\n<li>Great care is taken to maintain the semantics of the separate schema files in the single output</li>\n<li>The input documents are changed as little as possible, so the output is as readable as the input</li>\n</ul>\n</li>\n<li>Load schemas from:<ul>\n<li>The filesystem</li>\n<li>From a Python package\u2019s data (without unpacking it to the filesystem)</li>\n</ul>\n</li>\n<li>command-line interface as well as a Python API</li>\n<li>Test suite covering lots of edge cases, e.g. namespace handling<ul>\n<li>100% line &amp; branch code coverage</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install with pip:</p>\n<pre><span class=\"gp\">$</span> pip install rnginline\n</pre>\n<p>You can use it from Python like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">rnginline</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rnginline</span><span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">(</span><span class=\"s1\">'my-nested-schema-root.rng'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">lxml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">RelaxNG</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n</pre>\n<p>You can load a multi-file schema from a Python package\u2019s data like this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">rnginline</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rnginline.urlhandlers</span> <span class=\"kn\">import</span> <span class=\"n\">pydata</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">pydata</span><span class=\"o\">.</span><span class=\"n\">makeurl</span><span class=\"p\">(</span><span class=\"s1\">'rnginline.test'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>                      <span class=\"s1\">'data/testcases/external-ref-1/schema.rng'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span>\n<span class=\"s1\">'pydata://rnginline.test/data/testcases/external-ref-1/schema.rng'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rnginline</span><span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">lxml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">RelaxNG</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n</pre>\n<p>You can use it from the command line like this:</p>\n<pre><span class=\"gp\">$</span> rnginline my-nested-schema-root.rng flattened-output.rng\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"http://rnginline.readthedocs.org/\" rel=\"nofollow\">http://rnginline.readthedocs.org/</a></p>\n</div>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p><tt>lxml</tt> has good support for using RELAX NG schemas, but lacks support for\nloading multi-file schemas from anywhere other than the filesystem. This is a\nproblem if you wish to bundle a multi-file schema with your Python\npackage/module. You\u2019d have to depend on setuptools being available to use its\n<a href=\"https://pythonhosted.org/setuptools/pkg_resources.html#resource-extraction\" rel=\"nofollow\">resource extraction</a>, or use one of the existing RELAX NG merging tools to\nconvert your schema into a single file.</p>\n<div id=\"existing-relax-ng-flattening-tools\">\n<h3>Existing RELAX NG flattening tools</h3>\n<p>The following projects didn\u2019t quite fit my needs, leading me to write rnginline.\nThey may work for you though.</p>\n<ul>\n<li><a href=\"http://kohsuke.org/relaxng/rng2srng/\" rel=\"nofollow\">rng2srng</a> - Implements full\nsimplification, so the structure of the input schema will be lost</li>\n<li><a href=\"http://ftp.davidashen.net/incelim/\" rel=\"nofollow\">rng-incelim</a> - A similar project to\nthis, implemented in XSLT. Unfortunately\ndoesn\u2019t handle namespace declarations on <tt>&lt;include&gt;</tt> elements correctly.\nXSLT 1.0 doesn\u2019t support creating namespace nodes, so to fix this\nrng-incelim would have to resolve all QNames in the schema to NCNames with\nns attributes, which would be undesirable for me.</li>\n</ul>\n</div>\n</div>\n<div id=\"developing\">\n<h2>Developing</h2>\n<p>An <a href=\"http://www.pyinvoke.org/\" rel=\"nofollow\">invoke</a> tasks file contains testing, doc\nbuilding, linting tasks. The tox config uses invoke to run tests over various\nPython versions.</p>\n<p>To do a full test run, install tox (<tt>$ pip install tox</tt>) then run\n<tt>$ tox</tt> from within the checked-out repo. This will take several minutes on\nthe first run, mainly due to the amount of time <tt>lxml</tt> takes to build from\nsource.</p>\n<p>To run invoke tasks, ensure all the dev dependencies are installed:</p>\n<pre><span class=\"gp\">$</span> pip install -r requirements/all.txt\n<span class=\"gp\">$</span> invoke -l\n<span class=\"go\">Available tasks:\n\n  [\u2026]\n  coverage    Combine coverage of Python 2 and Python 3 test runs\n  docs        Build sphinx documentation\n  docs_test   Test the doctests in the Sphinx docs. Must be run with Python 3.\n  pep8        Lint code for PEP 8 violations\n  readme      Lint the README for reStructuredText syntax issues\n  test        Run rnginline test suite\n</span><span class=\"gp\">$</span> invoke <span class=\"nb\">test</span>\n<span class=\"go\">============================= test session starts ==============================\nplatform darwin -- Python 2.7.8 -- py-1.4.26 -- pytest-2.6.4\nplugins: cov\ncollected 346 items\n\n[\u2026]</span>\n</pre>\n<div id=\"prebuilding-wheels\">\n<h3>Prebuilding Wheels</h3>\n<p>To mitigate the time <tt>lxml</tt> takes to build, you can pre-build all the\ndependencies as Wheels into <tt>./wheelhouse</tt> and have pip use the pre-built\nwheels on every install. To do so, run:</p>\n<pre><span class=\"gp\">$</span> invoke cache_all_requirement_wheels\n<span class=\"gp\">$</span> <span class=\"nb\">export</span> <span class=\"nv\">PIP_FIND_LINKS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>/wheelhouse\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1569160, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "59b5cfd4f498777cb027b6a6479c9d4c", "sha256": "c61aef50caed2a012f4f521568905c1d48a2bdb65930a40fb241ce425bb1e821"}, "downloads": -1, "filename": "rnginline-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "59b5cfd4f498777cb027b6a6479c9d4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78773, "upload_time": "2015-03-29T23:57:51", "upload_time_iso_8601": "2015-03-29T23:57:51.549293Z", "url": "https://files.pythonhosted.org/packages/ab/d3/c98e0fd4a99621741d7d21b6c4b357cd90f0305cc4cc5b1d14b707bb9c75/rnginline-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a411935b806b81428e75d1a6f8803d84", "sha256": "2add350efdec569ec308eaefc74564753bec53d39649d24de83858e06cc21e93"}, "downloads": -1, "filename": "rnginline-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a411935b806b81428e75d1a6f8803d84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63763, "upload_time": "2015-03-29T23:57:55", "upload_time_iso_8601": "2015-03-29T23:57:55.504520Z", "url": "https://files.pythonhosted.org/packages/4c/28/1e5a94b18665100f629a291056374f7cec2883f48c14953e379875e1f080/rnginline-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dcb1d667e2e8b4fb89a79a7415fa42c8", "sha256": "0cd329d21aedf3f27bb7da2e3177aae22ca4e6897a3a272bf9091cc12c6d323c"}, "downloads": -1, "filename": "rnginline-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dcb1d667e2e8b4fb89a79a7415fa42c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78592, "upload_time": "2015-05-30T15:43:14", "upload_time_iso_8601": "2015-05-30T15:43:14.708631Z", "url": "https://files.pythonhosted.org/packages/5b/04/0fd99dd40f718a9e16a847750d5419b12bfed5b391fbdda9a78995038384/rnginline-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee32790449adc0bb1ca38807ead40fbc", "sha256": "8f85b8cf01c0e3203a8801556bf2c32a9d3479e097dcf6e65a48ddd8b49419f9"}, "downloads": -1, "filename": "rnginline-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ee32790449adc0bb1ca38807ead40fbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64094, "upload_time": "2015-05-30T15:43:19", "upload_time_iso_8601": "2015-05-30T15:43:19.329174Z", "url": "https://files.pythonhosted.org/packages/6d/41/6d8e6a1259ed386fb88f9961eff46c9c0edef614147b9b4c7ac057c375e2/rnginline-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dcb1d667e2e8b4fb89a79a7415fa42c8", "sha256": "0cd329d21aedf3f27bb7da2e3177aae22ca4e6897a3a272bf9091cc12c6d323c"}, "downloads": -1, "filename": "rnginline-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dcb1d667e2e8b4fb89a79a7415fa42c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 78592, "upload_time": "2015-05-30T15:43:14", "upload_time_iso_8601": "2015-05-30T15:43:14.708631Z", "url": "https://files.pythonhosted.org/packages/5b/04/0fd99dd40f718a9e16a847750d5419b12bfed5b391fbdda9a78995038384/rnginline-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee32790449adc0bb1ca38807ead40fbc", "sha256": "8f85b8cf01c0e3203a8801556bf2c32a9d3479e097dcf6e65a48ddd8b49419f9"}, "downloads": -1, "filename": "rnginline-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ee32790449adc0bb1ca38807ead40fbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64094, "upload_time": "2015-05-30T15:43:19", "upload_time_iso_8601": "2015-05-30T15:43:19.329174Z", "url": "https://files.pythonhosted.org/packages/6d/41/6d8e6a1259ed386fb88f9961eff46c9c0edef614147b9b4c7ac057c375e2/rnginline-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:08 2020"}