{"info": {"author": "SmylerMC", "author_email": "smyler@mail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Other Audience", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Games/Entertainment"], "description": "# Litemapy\nLitemapy's goal is to provide an easy to use way to read and edit Litematica's schematic file format in python.\n[Litematica](https://github.com/maruohon/litematica) is Minecraft mod by maruohon.\n\n\n## Example\nHere is a basic example of creating a schematic, and of reading one:\n```\nfrom litemapy import Schematic, Region, BlockState\n\n\n# Creating a schematic object and attaching it a region\nschem = Schematic(21, 21, 21, name=\"Planet\", author=\"SmylerMC\", description=\"Made with litemapy\", main_region_name=\"planet\")\nreg = schem.regions[\"planet\"]\n\n# Create the block state we are going to use (this is mutable)\nblock = BlockState(\"minecraft:light_blue_concrete\")\n\n# Build the planet\nfor x in range(21):\n    for y in range(21):\n        for z in range(21):\n            if round(((x-10)**2 + (y-10)**2 + (z-10)**2)**.5) <= 10:\n                reg.setblock(x, y, z, block)\n\n# Save the schematic\nschem.save(\"planet.litematic\")\n\n# Load the schematic and get its first region\nschem = Schematic.load(\"planet.litematic\")\nreg = list(schem.regions.values())[0]\n\n# Get the range where to loop, width, height and length\n# could be negative depending on the orientation of the build\nxran = [reg.width, 0]\nxran.sort()\nyran = [reg.height, 0]\nyran.sort()\nzran = [reg.length, 0]\nzran.sort()\nsx, ex = xran\nsy, ey = yran\nsz, ez = zran\n\n# Print out the basic shape\nfor x in range(sx, ex):\n    for z in range(sz, ez):\n        b = reg.getblock(x, 10, z)\n        if b.blockid == \"minecraft:air\":\n            print(\" \", end=\"\")\n        else:\n            print(\"#\", end='')\n    print()\n```\nWhen ran, we get the expected output:\n```       #######       \n     ###########     \n    #############    \n   ###############   \n  #################  \n ################### \n ################### \n#####################\n#####################\n#####################\n#####################\n#####################\n#####################\n#####################\n ################### \n ################### \n  #################  \n   ###############   \n    #############    \n     ###########     \n       #######\n```\n\n## Installation\nLitemapy is available on pypi: ```pip install litemapy```\n\n## Content\nLitemapy is still new and only has basic functionalities, it lacks support for some of Litematica's, notably:\n  * Entities are not supported\n  * Tile entities are not supported\n  * Pending block updates are not supported\n  * Legacy Schematica schematics are not supported at all, only the newer Litematica format is\n\n## Dependencies\nThe only direct dependency is [nbtlib](https://github.com/vberlier/nbtlib), which is available on pypi and should be installed automatically when using pip.\n\nHowever, if you wish to play around with the code, please not that the test suite compares Litemapy's behavior with Litematica's to make sure it matches, and therefore needs [GitPython](https://github.com/gitpython-developers/GitPython) to clone Litematica's repo, a valid JDK installation to compile litematica, and [Py4J](https://www.py4j.org/index.html) to create a gateway between the JVM and Python. The tests perfmorming this comparison should only run on POSIX systems\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SmylerMC/litemapy", "keywords": "", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "litemapy", "package_url": "https://pypi.org/project/litemapy/", "platform": "", "project_url": "https://pypi.org/project/litemapy/", "project_urls": {"Homepage": "https://github.com/SmylerMC/litemapy"}, "release_url": "https://pypi.org/project/litemapy/0.2.0a0/", "requires_dist": ["nbtlib"], "requires_python": ">=3.5", "summary": "Read and write Litematica's Minecraft schematics files", "version": "0.2.0a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Litemapy</h1>\n<p>Litemapy's goal is to provide an easy to use way to read and edit Litematica's schematic file format in python.\n<a href=\"https://github.com/maruohon/litematica\" rel=\"nofollow\">Litematica</a> is Minecraft mod by maruohon.</p>\n<h2>Example</h2>\n<p>Here is a basic example of creating a schematic, and of reading one:</p>\n<pre><code>from litemapy import Schematic, Region, BlockState\n\n\n# Creating a schematic object and attaching it a region\nschem = Schematic(21, 21, 21, name=\"Planet\", author=\"SmylerMC\", description=\"Made with litemapy\", main_region_name=\"planet\")\nreg = schem.regions[\"planet\"]\n\n# Create the block state we are going to use (this is mutable)\nblock = BlockState(\"minecraft:light_blue_concrete\")\n\n# Build the planet\nfor x in range(21):\n    for y in range(21):\n        for z in range(21):\n            if round(((x-10)**2 + (y-10)**2 + (z-10)**2)**.5) &lt;= 10:\n                reg.setblock(x, y, z, block)\n\n# Save the schematic\nschem.save(\"planet.litematic\")\n\n# Load the schematic and get its first region\nschem = Schematic.load(\"planet.litematic\")\nreg = list(schem.regions.values())[0]\n\n# Get the range where to loop, width, height and length\n# could be negative depending on the orientation of the build\nxran = [reg.width, 0]\nxran.sort()\nyran = [reg.height, 0]\nyran.sort()\nzran = [reg.length, 0]\nzran.sort()\nsx, ex = xran\nsy, ey = yran\nsz, ez = zran\n\n# Print out the basic shape\nfor x in range(sx, ex):\n    for z in range(sz, ez):\n        b = reg.getblock(x, 10, z)\n        if b.blockid == \"minecraft:air\":\n            print(\" \", end=\"\")\n        else:\n            print(\"#\", end='')\n    print()\n</code></pre>\n<p>When ran, we get the expected output:</p>\n<pre>     ###########     \n    #############    \n   ###############   \n  #################  \n ################### \n ################### \n#####################\n#####################\n#####################\n#####################\n#####################\n#####################\n#####################\n ################### \n ################### \n  #################  \n   ###############   \n    #############    \n     ###########     \n       #######\n</pre>\n<h2>Installation</h2>\n<p>Litemapy is available on pypi: <code>pip install litemapy</code></p>\n<h2>Content</h2>\n<p>Litemapy is still new and only has basic functionalities, it lacks support for some of Litematica's, notably:</p>\n<ul>\n<li>Entities are not supported</li>\n<li>Tile entities are not supported</li>\n<li>Pending block updates are not supported</li>\n<li>Legacy Schematica schematics are not supported at all, only the newer Litematica format is</li>\n</ul>\n<h2>Dependencies</h2>\n<p>The only direct dependency is <a href=\"https://github.com/vberlier/nbtlib\" rel=\"nofollow\">nbtlib</a>, which is available on pypi and should be installed automatically when using pip.</p>\n<p>However, if you wish to play around with the code, please not that the test suite compares Litemapy's behavior with Litematica's to make sure it matches, and therefore needs <a href=\"https://github.com/gitpython-developers/GitPython\" rel=\"nofollow\">GitPython</a> to clone Litematica's repo, a valid JDK installation to compile litematica, and <a href=\"https://www.py4j.org/index.html\" rel=\"nofollow\">Py4J</a> to create a gateway between the JVM and Python. The tests perfmorming this comparison should only run on POSIX systems</p>\n\n          </div>"}, "last_serial": 6945171, "releases": {"0.1.1a0": [{"comment_text": "", "digests": {"md5": "3f206cbd99618dc53fefd49a10117087", "sha256": "b037b59d52f7364bc1ff50a85625b33028375355d7bb9154efa4bc29d907ef1f"}, "downloads": -1, "filename": "litemapy-0.1.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f206cbd99618dc53fefd49a10117087", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21728, "upload_time": "2020-03-31T22:47:58", "upload_time_iso_8601": "2020-03-31T22:47:58.835501Z", "url": "https://files.pythonhosted.org/packages/6f/99/3d725a4a32eb7c6633de167ec596fb3edcb29c35346073c2e17cf951ca3a/litemapy-0.1.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c2691fd2d85b6ccc40f750d241f42ea", "sha256": "c9cbebc3462b6e6ce81dbb70b14d67da55a7cccab00ad0607c73dc1ea00209e3"}, "downloads": -1, "filename": "litemapy-0.1.1a0.tar.gz", "has_sig": false, "md5_digest": "2c2691fd2d85b6ccc40f750d241f42ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9762, "upload_time": "2020-03-31T22:47:59", "upload_time_iso_8601": "2020-03-31T22:47:59.993584Z", "url": "https://files.pythonhosted.org/packages/61/34/ef8fbf6bc94aa79a2802acf60b7b76fa7af290235ec1297db92135e29e15/litemapy-0.1.1a0.tar.gz", "yanked": false}], "0.2.0a0": [{"comment_text": "", "digests": {"md5": "7d2ef0e15279057310eb037591a0ba88", "sha256": "bdd176ebb18fa154aaa0515781e75407759a5c251453b8d76803bc732ac07792"}, "downloads": -1, "filename": "litemapy-0.2.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d2ef0e15279057310eb037591a0ba88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24405, "upload_time": "2020-04-03T18:15:20", "upload_time_iso_8601": "2020-04-03T18:15:20.363999Z", "url": "https://files.pythonhosted.org/packages/7f/ce/9307ca60c2fe85173e9ce5422110562125e7c03f0d20a5323b297715e3b0/litemapy-0.2.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b558a86017c86895019b41fa58aa5eea", "sha256": "b3b6f57b9b10370ada206f7ea292dd9d74470f1e1072b8b3b769044b2994bc6c"}, "downloads": -1, "filename": "litemapy-0.2.0a0.tar.gz", "has_sig": false, "md5_digest": "b558a86017c86895019b41fa58aa5eea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11841, "upload_time": "2020-04-03T18:15:22", "upload_time_iso_8601": "2020-04-03T18:15:22.572243Z", "url": "https://files.pythonhosted.org/packages/e1/ad/47d105f7330d9050e18ed2cb4c9b2d0fe86058b5563a54bcd6976c5fe965/litemapy-0.2.0a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7d2ef0e15279057310eb037591a0ba88", "sha256": "bdd176ebb18fa154aaa0515781e75407759a5c251453b8d76803bc732ac07792"}, "downloads": -1, "filename": "litemapy-0.2.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d2ef0e15279057310eb037591a0ba88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24405, "upload_time": "2020-04-03T18:15:20", "upload_time_iso_8601": "2020-04-03T18:15:20.363999Z", "url": "https://files.pythonhosted.org/packages/7f/ce/9307ca60c2fe85173e9ce5422110562125e7c03f0d20a5323b297715e3b0/litemapy-0.2.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b558a86017c86895019b41fa58aa5eea", "sha256": "b3b6f57b9b10370ada206f7ea292dd9d74470f1e1072b8b3b769044b2994bc6c"}, "downloads": -1, "filename": "litemapy-0.2.0a0.tar.gz", "has_sig": false, "md5_digest": "b558a86017c86895019b41fa58aa5eea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11841, "upload_time": "2020-04-03T18:15:22", "upload_time_iso_8601": "2020-04-03T18:15:22.572243Z", "url": "https://files.pythonhosted.org/packages/e1/ad/47d105f7330d9050e18ed2cb4c9b2d0fe86058b5563a54bcd6976c5fe965/litemapy-0.2.0a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:13 2020"}