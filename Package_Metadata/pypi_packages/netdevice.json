{"info": {"author": "Yongping Guo", "author_email": "guoyoooping@163.com", "bugtrack_url": null, "classifiers": [], "description": "netdevice\n*********\n\nPython modules to execute command on remote network device.\n\nTo install easily::\n\n    pip install -U netdevice\n\nOr to install by source code::\n\n    netdevice-x.x.tar.gz\n        pexpect-2.3.tar.gz\n        xmltodict-0.10.2.tar.gz\n        lxml-3.8.0.tar.gz\n            Python-2.7.12.tgz\n            libxml2-2.9.4.tar.gz\n\n.. attention::\n\n    lxml-3.8.0.tar.gz has some bug if you don't install to the default path,\n    you must set the LD_LIBRARY_PATH enviroment varible in such case. please\n    refer to the detail: python\u7b2c\u4e09\u65b9\u5e93lxml\u6e90\u7801\u5b89\u88c5&&\u4f7f\u7528\u7b14\u8bb0,\n    http://blog.csdn.net/slvher/article/details/25829973\n\n1. Introduction\n===============\n\nnetdevice is a python module that allow you run command on remote network\ndevices just like locally. It's especially useful for network test automation:\n\nFor example, define a network devices and show the interface on it:\n\n.. code-block:: python\n\n    from netdevice import cisco, junos, linux\n    pc = linux.LinuxDevice(\"ssh://dev:1234@10.208.72.12\")\n    print(pc.cmd(\"ifconfig eth1\"))\n\nUse help command show the documents::\n\n    import from netdevice import cisco, junos, linux\n    help(linux)\n    help(junos)\n    help(cisco)\n\n2. Feature\n==========\n\n    1) Python Based: Plenty of features\n    2) Environmentally friendly: can run anywhere where there is python and connect to the devices.\n    3) Easy to Learn: Need know little about Python\n    4) Easy to write: One case only have several to dozens of lines.\n    5) Faster: run the testbed from local and is much faster.\n    6) object oriented: Flexible and Easy to extend\n\n3. Test architecture based on netdevice\n===========================================\n\n::\n\n    +---------------------------------+------------+----------------------+\n    |                                 |            | case1                |\n    |                                 |            +----------------------+\n    |  One case                       | Test Suite | ...                  |\n    |                                 |            +----------------------+\n    |                                 |            | caseN                |\n    +---------------------------------+------------+----------------------+\n    |  netdevice                                                          |\n    |                                                                     |\n    |  PC1                  DUT                  DUT                      |\n    |  +---------------+    +---------------+    +---------------+        |\n    |  | Linux devices |    | Junos devices |    | Cisco devices |  ...   |\n    |  +---------------+    +---------------+    +---------------+        |\n    |                       | Linux devices |    | Linux devices |  ...   |\n    |                       +---------------+    +---------------+        |\n    +---------------------------------------------------------------------+\n\n                     test Architecture based on netdevice\n \n4. Object overview\n==================\n\n4.1 LinuxDevice\n---------------\n\n4.1.1 Constructor\n+++++++++++++++++\n\nLinuxDevice is a common abstraction for linux like devices. It' flexible to\ndefine a LinuxDevice object.\n\n1) Use a url to define a netdevice, then you can execute the command and get\nthe result:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(\"ssh://root:1234@englab.ent-vm02.juniper.net\")\n    server = linux.LinuxDevice(\"telnet://root:1122@10.208.172.45:7012\")\n    print(client.cmd(\"ifconfig\"))\n    print(server.cmd(\"pwd\"))\n\n2) By desginating the necessary attribute such as hostname/username/password,\netc.\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(username = \"root\", password = \"1234\",\n        hostname = \"alg-vm11\")\n    print(client.cmd(\"uname -a\"))\n\n3) Use the dictionary to describe the device, it's very useful for test\nscript. for examples:\n\n.. code-block:: python\n\n    skater = {\n            \"url\": \"ssh://root:1234@skater.englab.juniper.net\",\n            \"int0\": {\"name\": \"reth1.0\", \"inet\": \"42.0.0.11/24\", \"inet6\": \"2002::11/64\", \"zone\": \"untrust\" },\n            \"int1\": {\"name\": \"reth0.0\", \"inet\": \"41.0.0.11/24\", \"inet6\": \"2001::11/64\", \"zone\": \"trust\" },\n            }\n    ent_vm02 = {\n            \"url\": \"ssh://root:1234@ent-vm02.englab.juniper.net\",\n            \"int0\": { 'name': 'eth1', 'inet': '42.0.0.2/24', 'inet6': '2002::2/64'},\n            }\n    ent_vm01 = {\n            \"scheme\": \"ssh\",\n            \"username\": \"root\",\n            \"password\": \"1234\",\n            \"hostname\": \"ent-vm01.englab.juniper.net\",\n            \"int0\": { 'name': 'eth1', 'inet': '41.0.0.2/24', 'inet6': '2001::2/64'},\n            }\n    client = linux.LinuxDevice(**ent_vm02)\n    server = linux.LinuxDevice(**ent_vm01)\n    dut = junos.JunosDevice(**skater)\n    print(client.cmd(\"ifconfig\"))\n    print(client[\"int0\"][\"inet\"])\n    dut.cli(\"show security flow status\")\n\n4.1.2 Attributes\n++++++++++++++++\n\nLinuxDevice operate based on its attributes. User input those attributes and\ncan use them after that. Some attributes are pre-defined and the LinuxDevices\nwill use them when login, log, configuration and so on. use can change those\nattribtes. Other attrubutes are defined totally by users and user define how\nto use them.\n\n1) Pre-defined attributes:\n\nI list the following pre-define attributes and their default value and the\nmeaning of them.\n\n.. code-block:: python\n\n    default = {\n        # mandtory, if not given, it will fail to construct a device\n        \"scheme\":     \"ssh\",     # login method, default is ssh, support ssh\n                                 # and telnet now;\n        \"username\":      None,   # Usename to login;\n        \"hostname\":          None,   # A ip address or hostname that can connect\n         \n        # Optional, if not given, use the default\n        \"password\":      None,   # Password to login, could be omitted if use\n                                 # public key;\n        \"root_password\": None,   # Root password is used since some configuration\n                                 # need root privillage. If not provided, some\n                                 # configurationa or command would fail since\n                                 # privilage.\n        \"url\":       None,       # url to connect the server, use url insteading\n                                 # scheme/username/passowrd/hostname/port\n        \"name\":       None,      # name of the devices, only used for log. if not\n                                 # set, the first part of hostname is used.\n        \"autologin\":  True,      # If ture, will login the devices immediately.\n        #\"interfaces\": [\n        #    #{\"name\": \"ge-7/1/0.0\", \"inet\": \"1.1.1.1/24\", \"inet6\": \"2001::1/64\", \"zone\": \"trust\" },\n        #    #{\"name\": \"ge-7/1/1.0\", \"inet\": \"2.2.2.1/24\", \"inet6\": \"2002::1/64\", \"zone\": \"untrust\" },\n        #    ],                   # A list of interfaces the device use; Will\n        #                         # configure the interface onto the devices if\n        #                         # autoconfig is True\n        \"preconfig\":  [],        # A list of cmd/configuration the device will\n                                 # configure before test;\n        \"postconfig\": [],        # A list of cmd/configuration the device will\n                                 # configure after test;\n        #\"autoconfig\": False,     # If ture, will not configure the interface\n        #                         # and preconfig automatically.\n                                  \n        # log related\n        \"log_file\": \"test_%s.log\" %(time.strftime(\"%Y%m%d%H%M%S\", time.localtime())),\n                                 # log files, set None to disable recording log in file.\n        \"log_level\":  LOG_INFO,  # log level, 0-7, the higher it's, the more log\n                                 # recorded.\n        \"log_color\":  None,      # log color, if not set will choose randomly;\n                                 # Use self.test_color() to see what each color\n                                 # looks like\n        \"log_time\":   True,      # record the log with local time;\n        #\"log_thread\": True,      # record the log with thread name;\n\n        # User can also define Whatever attributes you want.\n        # ...\n    }\n\n2) User-defined attributes:\n\nBesides the pre-defined attributes, user can define their own attributes,\nsince those kinds of attributes are used for user only, they can be in any\ntype, for examples:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(\"telnet://root:1122@10.208.172.45:7012\",\n                               \"int0\": { 'name': 'eth1', 'inet': '42.0.0.2/24', 'inet6': '2002::2/64'},\n                               description = \"Beijing\")\n    client[\"season\"] = \"summer\"\n    print(client[\"season\"], client[\"description\"])\n    print(client[\"int0\"][\"inet\"])\n\n4.1.3 Methods\n+++++++++++++\n\nLinuxDevice support the folowing method:\n\n    def __init__(self, server = None, \\*\\*kwargs)\n\n        This is the constructor for LinuxDevice, The parameter pass the\n        attribute that the object needs.\n\n        @server: the standard url of the server, support the query parameters.\n        @kwargs: attributes of the server, the parameter in this part could be used as the attribute of the object.\n\n        For example:\n\n            client = linux.LinuxDevice(\"telnet://root:1122@10.208.172.45:7012\",\n                                       \"int0\": { 'name': 'eth1', 'inet': '42.0.0.2/24', 'inet6': '2002::2/64'},\n                                       description = \"Beijing\")\n\n    __del__(self):\n\n        Recycle resource when the object is destroied.\n\n    def login(self, terminal_type = 'ansi', login_timeout = 10):\n\n        Connect the object with the constructor attribute.\n\n        The defualt attribute \"autologin\" is True, so normally it will be auto\n        called. Set attribute \"autologin\" as False and you must call it\n        explictly.\n\n    def relogin(self):\n\n        Kill the current session and relogin.\n\n    def cmd(self, cmd, expect = None, timeout = 20, control = False,\n            format = \"output\", command_leading = \"\\033[0;31m$ \\033[0m\",\n            command_color = \"no_color\", command_bg_color = \"no_color\",\n            output_color = \"no_color\", output_bg_color = \"no_color\",\n            \\*\\*kwargs):\n\n        Execute a command provided by @cmd on remote Linuxdevice and return the\n        execution result, If the @expect is found, it succeed and return\n        immediately, or it will wait for at most @timeout seconds. The return\n        result will be desginated by @format:\n        \n        @ expect: the prompt the execute is expected to include. If not\n                  provided, the self.prompt is used. For some applications,\n                  i.e ftp, it will not use the system's prompt so you must give\n                  the expected prompt.\n\n        @ timeout: Hong long to wait before it's thinked as timeout, if it\n                   timeout a \"CTRL + C\" will be trriggered, so please set the\n                   proper timeout carefully;\n\n        @ control: If it is True, send a control character to the child such as\n                   Ctrl-C or Ctrl-D. For example, to send a Ctrl-G (ASCII 7):: \n\n                       self.cmd('g', control = True)\n\n        @ format: If it's \"output\", the execute output of the command will be\n        returned, whether it succeed or timeout. \n\n        If it's \"status\", the execute status will be return, if return and the\n        @expect is found, it will return True, or it return False. \n        \n        If it's \"both\", the tuple (status, output) will be return and you can\n        check both of them.\n\n        @ command_leading: Which leading chars to add before command in the log.\n\n        @ command_color: Which color to show the command in the log.\n\n        @ command_bg_color: Which background color to show the command in the log.\n\n        @ output_color: Which color to show the output in the log.\n\n        @ output_bg_color: Which background color to show the output in the log.\n\n        @ redirect: Noramlly the output would be shown on screen or log file,\n                    if this is set then the output of the command would be\n                    saved in the given file, it's especially useful for execute\n                    command with big output. \"/dev/null\" would redirect the\n                    output to a hole. For example:\n\n            pc.cmd(\"ifconfig\", redirect = \"ifconfig_result.log\")\n\n        [CAUTION]: please increase the timeout value if the command is\n        time-consuming, or it will cause failure.\n\n    def log (self, message, level = LOG_NOTICE, leading = None, color =\n            \"no_color\", bg_color = \"no_color\", log_level = None, \\*\\*kwargs):\n\n        record the log to file self[\"log_file\"] with the color\n        self[\"log_color\"], with the local time if self['log_time'] is True,\n        the log looks like::\n\n            [ regazara ][2017-05-16 16:02:07]: ssh login succeed.\n\n        @ message: The log text.\n\n        @ level: The log level of the text. Will not show if it's large than\n        the self[\"log_level\"].\n\n        @log_level: will override the level\n\n        @ color: The log color of the text.\n\n        @ bg_color: The log background color of the text.\n\n    def sleep (self, timeout, total = 50, char = '>', description = \"sleep\"):\n\n        Sleep with progress bar, the granularity is 0.1 second. something like\n        that:\n\n        sleep 7/10[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>               ][71%]\n\n    dumps(self):\n\n        Dump all its attributes.\n\n    get_file(self, filename, localname = '.', timeout = -1):\n\n        Get file from remote host, only support scp now, will support other\n        methods later.\n\n        @filename: file to get from the host.\n\n        @localname: save name after download\n\n        @timeout: How long to wait for the files to be downloaded. If the file\n        is very big, set it to a big value or it will fail.\n\n    put_file(self, filename, remotedir, timeout = -1):\n\n        Put local file to remote host, only support scp now, will support\n        other methods later.\n\n        @filename: file to put from the local. local means the host where you\n        execute this scriopt.\n\n        @remotedir: save name after upload.\n\n        @timeout: How long to wait for the files to be uploaded. If the file\n                  is very big, set it to a big value or it will fail.\n\n    def get_files (self, \\*args, \\*\\*kwargs):\n\n        Get files from remote host. Compared @get_file, can't desgnate the\n        local file name, but can get files at a time.\n\n    def reboot (self):\n\n        reboot the device and reconnect to it until it bootup.\n\n    def pktsend (self, pkt, src = None, dst = None, sport = None, dport = None)\n\n        Replay the packet like tcpreplay on the linux box. The packet should\n        include the ip header + tcp/udp header + payload in hex format. for\n        example:\n\n        0x4500003077e240008006a5a50ac645c70aa8820b049f00154e372b0e\n        000000007002ffff27e60000020405b401010402\n\n        @pkt: the packet in hex plain text format;\n\n        @src: replace the source ip addrss in the @pkt, if none use the value\n              in the @pkt;\n\n        @dst: replace the destination ip addrss in the @pkt; if none use the\n              value in the @pkt;\n\n        Examples::\n\n            sync = '45 00 00 30 77 e2 40 00 80 06 a5 a5 0a c6 45 c7\n                    0a a8 82 0b 04 9f 00 15 4e 37 2b 0e 00 00 00 00\n                    70 02 ff ff 27 e6 00 00 02 04 05 b4 01 01 04 02'\n            client.pktsend(syn, src = \"1.1.1.2\", dst = \"2.2.2.2\")\n\n    tcpreplay (self, remote, filename, saddr = None, sport = None,\n            daddr = None, dport = None, proto = None, replay_range = None)\n\n        Replay the packet capture file @filename, the file could be collected\n        by tnpdump or wireshark.\n\n        @remote: the server which is linuxdevice object.\n        @filename: the packet capture file.\n        @saddr: the client address in the packet capture.\n        @daddr: the server address in the packet capture.\n        @sport: the client port in the packet capture.\n        @dport: the server port in the packet capture.\n        @port: the protol that to be replayed in the packet capture.\n        @replay_range: the list of frame number to be replayed in the packet capture.\n\n        It's based on sendip-2.5-mec-2, besides, there is some bugs to support ipv6::\n\n            Index: sendip.c\n            ===================================================================\n            RCS file: /home/ypguo/.cvsroot/sendip/sendip.c,v\n            retrieving revision 1.1.1.1\n            diff -u -p -r1.1.1.1 sendip.c\n            --- sendip.c\t3 Jan 2018 04:02:31 -0000\t1.1.1.1\n            +++ sendip.c\t3 Jan 2018 04:04:29 -0000\n            @@ -686,9 +686,14 @@ int main(int argc, char *const argv[]) {\n                                            free(packet.data);\n                                            unload_modules(FALSE,verbosity);\n                                            return 1;\n            -\t\t\t} else {\n            -\t\t\t\taf_type = AF_INET;\n            -\t\t\t}\n            +            } else {\n            +                if (strchr(argv[gnuoptind], ':')) {\n            +                    /* the destination address is ipv6 address. */\n            +                    af_type = AF_INET6;\n            +                } else {\n            +                    af_type = AF_INET;\n            +                }\n            +            }\n                            }\n                            else if(first->optchar=='i') af_type = AF_INET;\n                            else if(first->optchar=='6') af_type = AF_INET6;\n\n    def test_color (self):\n\n        print the color name in the color.\n\n    __getitem__(self, name):\n\n        Get certain attribute, for example::\n\n            print(self[\"name\"])\n\n    __setitem__(self, name, value):\n\n        Set certain attribute, for example::\n\n            self[\"color\"] = \"red\"\n\n    The following methods combile frequently-used methods:\n\n    def x_configure_interface (self, \\*args):\n\n        Re-configure the interface with the given parameters.\n        The interface looks like this, you can configure multi interfaces in\n        one time, for examples:\n\n        int0 = { 'name': 'eth1', 'inet': '41.0.0.2/24', 'inet6': '2001::2/64'}\n        int1 = { 'name': 'eth2', 'inet': '42.0.0.2/24', 'inet6': '2002::2/64'}\n        dut.x_configure_interface(int0, int1)\n\n    def x_configure_route (self, local, gateway, remote):\n\n        Re-configure the interface with the given parameters, for examples:\n\n        #int0 = { 'name': 'eth1', 'inet': '41.0.0.2/24', 'inet6': '2001::2/64'}\n        client.x_configure_route(client[\"int0\"], dut[\"int0\"], server[\"int0\"])\n\n    def x_get_interfaces (self, name):\n\n        Get interface configuration given a interface name.\n\n    def x_ftp (self, \\*args, \\*\\*kwargs):\n\n        Login the remote ftp server and execute some command. Example:\n\n            client.x_ftp(\"pwd\", \"ls\", \"bye\", hostname = \"42.0.0.2\", username = \"root\", password = \"Embe1mpls\")\n\n        Or:\n\n            client.x_ftp(\"pwd\", hostname = \"42.0.0.2\", username = \"root\", password = \"Embe1mpls\")\n            client.x_ftp(\"ls\", \"pwd\")\n            client.x_ftp(\"bye\")\n\n        @args: command list need to be executed\n        @kwargs: hostname/username/password parameters If need to auto logint the\n        remote ftp server, hostname/username/password should be given\n\n4.2 JunosDevice\n---------------\n\n4.2.1 Constructor\n+++++++++++++++++\n\nJunosDevice is a common abstraction for Juniper network devices. It derives\nfrom LinuxDevice so it has every method of LinuxDevice, except some of them\nare overrided. Please use the similar way to define a JunosDevice, for\nexample:\n\n.. code-block:: python\n\n    dut = junos.JunosDevice(\"ssh://root:Juniper@10.219.29.61\")\n    print(dut[\"username\"])\n    print(dut.cli(\"show security flow session\"))\n\n4.2.2 Methods\n+++++++++++++\n\nBesides all the methods derived from LinuxDevice, JunosDevice support the\nfolowing extra methods:\n\n    def cmd (self, cmd, mode = \"shell\", timeout = 30, \\*\\*kwargs):\n\n        There are total 4 modes for junos devices:\n\n            1) shell: execute the command in shell mode and return the result,\n                this is the default mode and it looks like linux.cmd().\n\n            2) cli: execute the command in cli mode and return the result,\n                self.cmd(cmd, mode = \"cli\") equal to self.cli(cmd), see detail\n                in seld.cli()\n\n            3) configure: execute the command in configure mode and return the\n                result, self.cmd(cmd, mode = \"configure\") equal to\n                self.configure(cmd), see detail in seld.configure()\n\n            4) vty: execute the command in vty mode and return the result,\n                self.cmd(cmd, mode = \"vty\") equal to self.vty(cmd), see detail\n                in seld.vty()\n\n        Supported options include:\n\n            timeout: time to wait for the execute command return. default is 5\n                     seconds\n\n    cli (self, cmd, parse = None, timeout = 30, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"cli\")\n\n        Execute a list of cli command and return the execution result of the\n        last command.\n\n        @parse: Normally, the result will be plain text or xml text. But if\n        the @parse is given, the result will be parsed and a list of\n        dictionary for @parse will be returned. It's useful to parse the xml\n        result. For example the following command return a list of session in\n        dictionary::\n        \n            sessions = dut.cli('show security flow session',\n                               parse = \"flow-session\")\n            print sessions[0]['session-identifier']\n\n        while the following command will return the plain text result::\n\n            output = dut.cli('show security flow session')\n            print output\n\n    configure(self, cmd, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"configure\"), Execute a configure command and\n        return the result of the last command. Sematics is like self.cli, see\n        detail in self.cli(), For example, Execute a configure command::\n\n            dut.configure('set security flow traceoptions flag all')\n            dut.configure('set security traceoptions file flow.log size 50m')\n            dut.configure('set security traceoptions level verbose')\n            dut.configure('set security traceoptions flag all')\n            dut.configure('commit')\n\n    def vty (self, \\*args, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"vty\")\n\n        Execute every line in every argument on every SPU(if not given) and\n        return the result.\n\n        Supported options include:\n\n            timeout: time to wait for the execute command return. default is 5\n                     seconds\n            tnp_addr: tnp address to execute, if not execut the command on\n                      every SPU.\n\n    def get_spus (self, \\*\\*kwargs):\n    \n        Get the spu list of the srx.\n\n    print_session (self, session):\n        \n        Convert a or lists of session in dictionary to plain text. print it as\n        show of \"show security flow session\".\n\n        @session: it could be a session or a list of session.\n\n    install_image (self, image):\n        \n        Install a image and reboot the dut, wait until it is up with all\n        SPU/SPC.\n        \n        @local: install a local image, first upload the image to /var/tmp/ on\n        the DUT and then install it.\n\n        @remote: install a image on the DUT\n\n    def x_print_session (self, sessions):\n\n        Convert a or lists of session in dictionary to plain text.\n\n    def x_configure_trace (self, \\*args, \\*\\*kwargs):\n        configure trace file, For examples:\n\n            dut.x_configure_trace(\"flow\", \"alg dns\", \"dynamic-application\",\n                                  filename = \"flow.log\", size = \"50m\")\n\n    def x_configure_vty_trace (self, \\*args, \\*\\*kwargs):\n        configure trace file\n        \n        An examples, to enable flow/policy/dynamic-application traceoption and\n        write the trace into one file:\n\n            dut.x_configure_vty_trace(\"flow\", \"policy\", \"fwdd\",\n                                  filename = \"flow.log\", size = \"50m\")\n\n\n5. An example\n=============\n\nIn this example, we login the client linux device and then ftp the server.\nCheck if there is session generated on the Juniper SRX firewall. Then tear\ndown the connection:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    from netdevice import cisco, junos, linux\n\n    if __name__ == '__main__':\n        dut = junos.JunosDevice(\"ssh://regress:1234@regazara.englab.juniper.net\",\n                root_password = \"5678\")\n        client = linux.LinuxDevice(\"ssh://root:5678@ent-vm01.englab.juniper.net\",\n                interfaces = [ { 'name': 'eth1', 'inet': '1.1.1.2/24', 'inet6': '2001::2/64'} ])\n        server = linux.LinuxDevice(\"ssh://root:5678@ent-vm02.englab.juniper.net\",\n                interfaces = [ { 'name': 'eth1', 'inet': '2.2.2.2/24', 'inet6': '2002::2/64'} ])\n\n        client.cmd(\"ip route add 2.2.2.0/24 via 1.1.1.1 dev eth1\")\n        server.cmd(\"ip route add 1.1.1.0/24 via 2.2.2.1 dev eth1\")\n        dut.cli(\"clear security flow session application ftp\")\n\n        # connect to the server and list the files.\n        client.cmd('ftp %s' %(server[\"interfaces\"][0][\"inet\"].split('/')[0]), expect = \"Name\")\n        client.cmd(server[\"username\"], expect = \"Password\")\n        client.cmd(server[\"password\"], expect = \"ftp\")\n        output = client.cmd('ls', expect = \"ftp> \")\n        if \"226\" in output:\n            print(\"ftp output is shown.\")\n        else:\n            print(\"ftp failed to connect the server.\")\n\n        # check the session and tear down the connection.\n        sessions = dut.cli('show security flow session application ftp', parse = \"flow-session\")\n        client.cmd('bye')\n\n        if sessions and sessions[0][\"flow-information\"][0]['pkt-cnt'] > 0 and \\\n                sessions[0][\"flow-information\"][1]['pkt-cnt'] > 0:\n            print(\"Session found, pass!\")\n        else:\n            print(\"Failed to find the session\")\n\n6. Q/A\n======\n\n1) Why some command return timeout?\n\nFor time consuming command i.g. scp, ftp get command, please set the @timeout\nproperly to avoid the command timeout.\n\nPlease make sure there is no command timeout since the output of the last\ncommand will messup the result of the next command.\n\nIf a command timeout, either send a CTRL + C to kill the current session:\n\n    client.cmd(\"c\", control = True)\n\nor kill the current session and relogin the device to open a new session:\n\n    client.relogin()\n\n7. Changelog\n============\n\n0.1:\n\n    Initial upload\n\n0.52:\n\n    1) Begin to support python3;\n    2) In demo.py and document, the host should use hostname = \"xxx\" insteading of host = \"xxx\"\n\n0.53:\n\n    Add support for Junos srx4200.\n\n0.54:\n\n    It seems that python3 only support int on default. So adjust the float to int to avoid error.\n\n0.55:\n\n    Update the help document README for more detail.\n\n0.56:\n\n    Add some options in junos vty command.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guoyoooping/networkdevice", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "netdevice", "package_url": "https://pypi.org/project/netdevice/", "platform": "", "project_url": "https://pypi.org/project/netdevice/", "project_urls": {"Homepage": "https://github.com/guoyoooping/networkdevice"}, "release_url": "https://pypi.org/project/netdevice/0.57/", "requires_dist": null, "requires_python": "", "summary": "Python modules to execute command on remote network device based on pexpect.", "version": "0.57", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python modules to execute command on remote network device.</p>\n<p>To install easily:</p>\n<pre>pip install -U netdevice\n</pre>\n<p>Or to install by source code:</p>\n<pre>netdevice-x.x.tar.gz\n    pexpect-2.3.tar.gz\n    xmltodict-0.10.2.tar.gz\n    lxml-3.8.0.tar.gz\n        Python-2.7.12.tgz\n        libxml2-2.9.4.tar.gz\n</pre>\n<div>\n<p>Attention!</p>\n<p>lxml-3.8.0.tar.gz has some bug if you don\u2019t install to the default path,\nyou must set the LD_LIBRARY_PATH enviroment varible in such case. please\nrefer to the detail: python\u7b2c\u4e09\u65b9\u5e93lxml\u6e90\u7801\u5b89\u88c5&amp;&amp;\u4f7f\u7528\u7b14\u8bb0,\n<a href=\"http://blog.csdn.net/slvher/article/details/25829973\" rel=\"nofollow\">http://blog.csdn.net/slvher/article/details/25829973</a></p>\n</div>\n<div id=\"introduction\">\n<h2>1. Introduction</h2>\n<p>netdevice is a python module that allow you run command on remote network\ndevices just like locally. It\u2019s especially useful for network test automation:</p>\n<p>For example, define a network devices and show the interface on it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netdevice</span> <span class=\"kn\">import</span> <span class=\"n\">cisco</span><span class=\"p\">,</span> <span class=\"n\">junos</span><span class=\"p\">,</span> <span class=\"n\">linux</span>\n<span class=\"n\">pc</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://dev:1234@10.208.72.12\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pc</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"ifconfig eth1\"</span><span class=\"p\">))</span>\n</pre>\n<p>Use help command show the documents:</p>\n<pre>import from netdevice import cisco, junos, linux\nhelp(linux)\nhelp(junos)\nhelp(cisco)\n</pre>\n</div>\n<div id=\"feature\">\n<h2>2. Feature</h2>\n<blockquote>\n<ol>\n<li>Python Based: Plenty of features</li>\n<li>Environmentally friendly: can run anywhere where there is python and connect to the devices.</li>\n<li>Easy to Learn: Need know little about Python</li>\n<li>Easy to write: One case only have several to dozens of lines.</li>\n<li>Faster: run the testbed from local and is much faster.</li>\n<li>object oriented: Flexible and Easy to extend</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"test-architecture-based-on-netdevice\">\n<h2>3. Test architecture based on netdevice</h2>\n<pre>+---------------------------------+------------+----------------------+\n|                                 |            | case1                |\n|                                 |            +----------------------+\n|  One case                       | Test Suite | ...                  |\n|                                 |            +----------------------+\n|                                 |            | caseN                |\n+---------------------------------+------------+----------------------+\n|  netdevice                                                          |\n|                                                                     |\n|  PC1                  DUT                  DUT                      |\n|  +---------------+    +---------------+    +---------------+        |\n|  | Linux devices |    | Junos devices |    | Cisco devices |  ...   |\n|  +---------------+    +---------------+    +---------------+        |\n|                       | Linux devices |    | Linux devices |  ...   |\n|                       +---------------+    +---------------+        |\n+---------------------------------------------------------------------+\n\n                 test Architecture based on netdevice\n</pre>\n</div>\n<div id=\"object-overview\">\n<h2>4. Object overview</h2>\n<div id=\"linuxdevice\">\n<h3>4.1 LinuxDevice</h3>\n<div id=\"constructor\">\n<h4>4.1.1 Constructor</h4>\n<p>LinuxDevice is a common abstraction for linux like devices. It\u2019 flexible to\ndefine a LinuxDevice object.</p>\n<p>1) Use a url to define a netdevice, then you can execute the command and get\nthe result:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://root:1234@englab.ent-vm02.juniper.net\"</span><span class=\"p\">)</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"telnet://root:1122@10.208.172.45:7012\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"ifconfig\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"pwd\"</span><span class=\"p\">))</span>\n</pre>\n<p>2) By desginating the necessary attribute such as hostname/username/password,\netc.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"1234\"</span><span class=\"p\">,</span>\n    <span class=\"n\">hostname</span> <span class=\"o\">=</span> <span class=\"s2\">\"alg-vm11\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"uname -a\"</span><span class=\"p\">))</span>\n</pre>\n<p>3) Use the dictionary to describe the device, it\u2019s very useful for test\nscript. for examples:</p>\n<pre><span class=\"n\">skater</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ssh://root:1234@skater.englab.juniper.net\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"int0\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reth1.0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inet\"</span><span class=\"p\">:</span> <span class=\"s2\">\"42.0.0.11/24\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inet6\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2002::11/64\"</span><span class=\"p\">,</span> <span class=\"s2\">\"zone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"untrust\"</span> <span class=\"p\">},</span>\n        <span class=\"s2\">\"int1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"reth0.0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inet\"</span><span class=\"p\">:</span> <span class=\"s2\">\"41.0.0.11/24\"</span><span class=\"p\">,</span> <span class=\"s2\">\"inet6\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2001::11/64\"</span><span class=\"p\">,</span> <span class=\"s2\">\"zone\"</span><span class=\"p\">:</span> <span class=\"s2\">\"trust\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n<span class=\"n\">ent_vm02</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ssh://root:1234@ent-vm02.englab.juniper.net\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"int0\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'eth1'</span><span class=\"p\">,</span> <span class=\"s1\">'inet'</span><span class=\"p\">:</span> <span class=\"s1\">'42.0.0.2/24'</span><span class=\"p\">,</span> <span class=\"s1\">'inet6'</span><span class=\"p\">:</span> <span class=\"s1\">'2002::2/64'</span><span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n<span class=\"n\">ent_vm01</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"scheme\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ssh\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"root\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1234\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hostname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ent-vm01.englab.juniper.net\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"int0\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'eth1'</span><span class=\"p\">,</span> <span class=\"s1\">'inet'</span><span class=\"p\">:</span> <span class=\"s1\">'41.0.0.2/24'</span><span class=\"p\">,</span> <span class=\"s1\">'inet6'</span><span class=\"p\">:</span> <span class=\"s1\">'2001::2/64'</span><span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">ent_vm02</span><span class=\"p\">)</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">ent_vm01</span><span class=\"p\">)</span>\n<span class=\"n\">dut</span> <span class=\"o\">=</span> <span class=\"n\">junos</span><span class=\"o\">.</span><span class=\"n\">JunosDevice</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">skater</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"ifconfig\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"s2\">\"int0\"</span><span class=\"p\">][</span><span class=\"s2\">\"inet\"</span><span class=\"p\">])</span>\n<span class=\"n\">dut</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"p\">(</span><span class=\"s2\">\"show security flow status\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"attributes\">\n<h4>4.1.2 Attributes</h4>\n<p>LinuxDevice operate based on its attributes. User input those attributes and\ncan use them after that. Some attributes are pre-defined and the LinuxDevices\nwill use them when login, log, configuration and so on. use can change those\nattribtes. Other attrubutes are defined totally by users and user define how\nto use them.</p>\n<ol>\n<li>Pre-defined attributes:</li>\n</ol>\n<p>I list the following pre-define attributes and their default value and the\nmeaning of them.</p>\n<pre><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># mandtory, if not given, it will fail to construct a device</span>\n    <span class=\"s2\">\"scheme\"</span><span class=\"p\">:</span>     <span class=\"s2\">\"ssh\"</span><span class=\"p\">,</span>     <span class=\"c1\"># login method, default is ssh, support ssh</span>\n                             <span class=\"c1\"># and telnet now;</span>\n    <span class=\"s2\">\"username\"</span><span class=\"p\">:</span>      <span class=\"kc\">None</span><span class=\"p\">,</span>   <span class=\"c1\"># Usename to login;</span>\n    <span class=\"s2\">\"hostname\"</span><span class=\"p\">:</span>          <span class=\"kc\">None</span><span class=\"p\">,</span>   <span class=\"c1\"># A ip address or hostname that can connect</span>\n\n    <span class=\"c1\"># Optional, if not given, use the default</span>\n    <span class=\"s2\">\"password\"</span><span class=\"p\">:</span>      <span class=\"kc\">None</span><span class=\"p\">,</span>   <span class=\"c1\"># Password to login, could be omitted if use</span>\n                             <span class=\"c1\"># public key;</span>\n    <span class=\"s2\">\"root_password\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>   <span class=\"c1\"># Root password is used since some configuration</span>\n                             <span class=\"c1\"># need root privillage. If not provided, some</span>\n                             <span class=\"c1\"># configurationa or command would fail since</span>\n                             <span class=\"c1\"># privilage.</span>\n    <span class=\"s2\">\"url\"</span><span class=\"p\">:</span>       <span class=\"kc\">None</span><span class=\"p\">,</span>       <span class=\"c1\"># url to connect the server, use url insteading</span>\n                             <span class=\"c1\"># scheme/username/passowrd/hostname/port</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span>       <span class=\"kc\">None</span><span class=\"p\">,</span>      <span class=\"c1\"># name of the devices, only used for log. if not</span>\n                             <span class=\"c1\"># set, the first part of hostname is used.</span>\n    <span class=\"s2\">\"autologin\"</span><span class=\"p\">:</span>  <span class=\"kc\">True</span><span class=\"p\">,</span>      <span class=\"c1\"># If ture, will login the devices immediately.</span>\n    <span class=\"c1\">#\"interfaces\": [</span>\n    <span class=\"c1\">#    #{\"name\": \"ge-7/1/0.0\", \"inet\": \"1.1.1.1/24\", \"inet6\": \"2001::1/64\", \"zone\": \"trust\" },</span>\n    <span class=\"c1\">#    #{\"name\": \"ge-7/1/1.0\", \"inet\": \"2.2.2.1/24\", \"inet6\": \"2002::1/64\", \"zone\": \"untrust\" },</span>\n    <span class=\"c1\">#    ],                   # A list of interfaces the device use; Will</span>\n    <span class=\"c1\">#                         # configure the interface onto the devices if</span>\n    <span class=\"c1\">#                         # autoconfig is True</span>\n    <span class=\"s2\">\"preconfig\"</span><span class=\"p\">:</span>  <span class=\"p\">[],</span>        <span class=\"c1\"># A list of cmd/configuration the device will</span>\n                             <span class=\"c1\"># configure before test;</span>\n    <span class=\"s2\">\"postconfig\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>        <span class=\"c1\"># A list of cmd/configuration the device will</span>\n                             <span class=\"c1\"># configure after test;</span>\n    <span class=\"c1\">#\"autoconfig\": False,     # If ture, will not configure the interface</span>\n    <span class=\"c1\">#                         # and preconfig automatically.</span>\n\n    <span class=\"c1\"># log related</span>\n    <span class=\"s2\">\"log_file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_</span><span class=\"si\">%s</span><span class=\"s2\">.log\"</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%Y%m</span><span class=\"si\">%d</span><span class=\"s2\">%H%M%S\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">localtime</span><span class=\"p\">())),</span>\n                             <span class=\"c1\"># log files, set None to disable recording log in file.</span>\n    <span class=\"s2\">\"log_level\"</span><span class=\"p\">:</span>  <span class=\"n\">LOG_INFO</span><span class=\"p\">,</span>  <span class=\"c1\"># log level, 0-7, the higher it's, the more log</span>\n                             <span class=\"c1\"># recorded.</span>\n    <span class=\"s2\">\"log_color\"</span><span class=\"p\">:</span>  <span class=\"kc\">None</span><span class=\"p\">,</span>      <span class=\"c1\"># log color, if not set will choose randomly;</span>\n                             <span class=\"c1\"># Use self.test_color() to see what each color</span>\n                             <span class=\"c1\"># looks like</span>\n    <span class=\"s2\">\"log_time\"</span><span class=\"p\">:</span>   <span class=\"kc\">True</span><span class=\"p\">,</span>      <span class=\"c1\"># record the log with local time;</span>\n    <span class=\"c1\">#\"log_thread\": True,      # record the log with thread name;</span>\n\n    <span class=\"c1\"># User can also define Whatever attributes you want.</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">}</span>\n</pre>\n<ol>\n<li>User-defined attributes:</li>\n</ol>\n<p>Besides the pre-defined attributes, user can define their own attributes,\nsince those kinds of attributes are used for user only, they can be in any\ntype, for examples:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"telnet://root:1122@10.208.172.45:7012\"</span><span class=\"p\">,</span>\n                           <span class=\"s2\">\"int0\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'eth1'</span><span class=\"p\">,</span> <span class=\"s1\">'inet'</span><span class=\"p\">:</span> <span class=\"s1\">'42.0.0.2/24'</span><span class=\"p\">,</span> <span class=\"s1\">'inet6'</span><span class=\"p\">:</span> <span class=\"s1\">'2002::2/64'</span><span class=\"p\">},</span>\n                           <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"Beijing\"</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"p\">[</span><span class=\"s2\">\"season\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"summer\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"s2\">\"season\"</span><span class=\"p\">],</span> <span class=\"n\">client</span><span class=\"p\">[</span><span class=\"s2\">\"description\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">[</span><span class=\"s2\">\"int0\"</span><span class=\"p\">][</span><span class=\"s2\">\"inet\"</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"methods\">\n<h4>4.1.3 Methods</h4>\n<p>LinuxDevice support the folowing method:</p>\n<blockquote>\n<p>def __init__(self, server = None, **kwargs)</p>\n<blockquote>\n<p>This is the constructor for LinuxDevice, The parameter pass the\nattribute that the object needs.</p>\n<p>@server: the standard url of the server, support the query parameters.\n@kwargs: attributes of the server, the parameter in this part could be used as the attribute of the object.</p>\n<p>For example:</p>\n<blockquote>\n<dl>\n<dt>client = linux.LinuxDevice(\u201c<a>telnet://root:1122@10.208.172.45:7012</a>\u201d,</dt>\n<dd>\u201cint0\u201d: { \u2018name\u2019: \u2018eth1\u2019, \u2018inet\u2019: \u201842.0.0.2/24\u2019, \u2018inet6\u2019: \u20182002::2/64\u2019},\ndescription = \u201cBeijing\u201d)</dd>\n</dl>\n</blockquote>\n</blockquote>\n<p>__del__(self):</p>\n<blockquote>\nRecycle resource when the object is destroied.</blockquote>\n<p>def login(self, terminal_type = \u2018ansi\u2019, login_timeout = 10):</p>\n<blockquote>\n<p>Connect the object with the constructor attribute.</p>\n<p>The defualt attribute \u201cautologin\u201d is True, so normally it will be auto\ncalled. Set attribute \u201cautologin\u201d as False and you must call it\nexplictly.</p>\n</blockquote>\n<p>def relogin(self):</p>\n<blockquote>\nKill the current session and relogin.</blockquote>\n<dl>\n<dt>def cmd(self, cmd, expect = None, timeout = 20, control = False,</dt>\n<dd><blockquote>\nformat = \u201coutput\u201d, command_leading = \u201c033[0;31m$ 033[0m\u201d,\ncommand_color = \u201cno_color\u201d, command_bg_color = \u201cno_color\u201d,\noutput_color = \u201cno_color\u201d, output_bg_color = \u201cno_color\u201d,\n**kwargs):</blockquote>\n<p>Execute a command provided by @cmd on remote Linuxdevice and return the\nexecution result, If the @expect is found, it succeed and return\nimmediately, or it will wait for at most @timeout seconds. The return\nresult will be desginated by @format:</p>\n<dl>\n<dt>@ expect: the prompt the execute is expected to include. If not</dt>\n<dd>provided, the self.prompt is used. For some applications,\ni.e ftp, it will not use the system\u2019s prompt so you must give\nthe expected prompt.</dd>\n<dt>@ timeout: Hong long to wait before it\u2019s thinked as timeout, if it</dt>\n<dd>timeout a \u201cCTRL + C\u201d will be trriggered, so please set the\nproper timeout carefully;</dd>\n<dt>@ control: If it is True, send a control character to the child such as</dt>\n<dd><p>Ctrl-C or Ctrl-D. For example, to send a Ctrl-G (ASCII 7):</p>\n<pre>self.cmd('g', control = True)\n</pre>\n</dd>\n</dl>\n<p>@ format: If it\u2019s \u201coutput\u201d, the execute output of the command will be\nreturned, whether it succeed or timeout.</p>\n<p>If it\u2019s \u201cstatus\u201d, the execute status will be return, if return and the\n@expect is found, it will return True, or it return False.</p>\n<p>If it\u2019s \u201cboth\u201d, the tuple (status, output) will be return and you can\ncheck both of them.</p>\n<p>@ command_leading: Which leading chars to add before command in the log.</p>\n<p>@ command_color: Which color to show the command in the log.</p>\n<p>@ command_bg_color: Which background color to show the command in the log.</p>\n<p>@ output_color: Which color to show the output in the log.</p>\n<p>@ output_bg_color: Which background color to show the output in the log.</p>\n<dl>\n<dt>@ redirect: Noramlly the output would be shown on screen or log file,</dt>\n<dd><blockquote>\nif this is set then the output of the command would be\nsaved in the given file, it\u2019s especially useful for execute\ncommand with big output. \u201c/dev/null\u201d would redirect the\noutput to a hole. For example:</blockquote>\n<p>pc.cmd(\u201cifconfig\u201d, redirect = \u201cifconfig_result.log\u201d)</p>\n</dd>\n</dl>\n<p>[CAUTION]: please increase the timeout value if the command is\ntime-consuming, or it will cause failure.</p>\n</dd>\n<dt>def log (self, message, level = LOG_NOTICE, leading = None, color =</dt>\n<dd><blockquote>\n\u201cno_color\u201d, bg_color = \u201cno_color\u201d, log_level = None, **kwargs):</blockquote>\n<p>record the log to file self[\u201clog_file\u201d] with the color\nself[\u201clog_color\u201d], with the local time if self[\u2018log_time\u2019] is True,\nthe log looks like:</p>\n<pre>[ regazara ][2017-05-16 16:02:07]: ssh login succeed.\n</pre>\n<p>@ message: The log text.</p>\n<p>@ level: The log level of the text. Will not show if it\u2019s large than\nthe self[\u201clog_level\u201d].</p>\n<p>@log_level: will override the level</p>\n<p>@ color: The log color of the text.</p>\n<p>@ bg_color: The log background color of the text.</p>\n</dd>\n</dl>\n<p>def sleep (self, timeout, total = 50, char = \u2018&gt;\u2019, description = \u201csleep\u201d):</p>\n<blockquote>\n<p>Sleep with progress bar, the granularity is 0.1 second. something like\nthat:</p>\n<p>sleep 7/10[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;               ][71%]</p>\n</blockquote>\n<p>dumps(self):</p>\n<blockquote>\nDump all its attributes.</blockquote>\n<p>get_file(self, filename, localname = \u2018.\u2019, timeout = -1):</p>\n<blockquote>\n<p>Get file from remote host, only support scp now, will support other\nmethods later.</p>\n<p>@filename: file to get from the host.</p>\n<p>@localname: save name after download</p>\n<p>@timeout: How long to wait for the files to be downloaded. If the file\nis very big, set it to a big value or it will fail.</p>\n</blockquote>\n<p>put_file(self, filename, remotedir, timeout = -1):</p>\n<blockquote>\n<p>Put local file to remote host, only support scp now, will support\nother methods later.</p>\n<p>@filename: file to put from the local. local means the host where you\nexecute this scriopt.</p>\n<p>@remotedir: save name after upload.</p>\n<dl>\n<dt>@timeout: How long to wait for the files to be uploaded. If the file</dt>\n<dd>is very big, set it to a big value or it will fail.</dd>\n</dl>\n</blockquote>\n<p>def get_files (self, *args, **kwargs):</p>\n<blockquote>\nGet files from remote host. Compared @get_file, can\u2019t desgnate the\nlocal file name, but can get files at a time.</blockquote>\n<p>def reboot (self):</p>\n<blockquote>\nreboot the device and reconnect to it until it bootup.</blockquote>\n<p>def pktsend (self, pkt, src = None, dst = None, sport = None, dport = None)</p>\n<blockquote>\n<p>Replay the packet like tcpreplay on the linux box. The packet should\ninclude the ip header + tcp/udp header + payload in hex format. for\nexample:</p>\n<p>0x4500003077e240008006a5a50ac645c70aa8820b049f00154e372b0e\n000000007002ffff27e60000020405b401010402</p>\n<p>@pkt: the packet in hex plain text format;</p>\n<dl>\n<dt>@src: replace the source ip addrss in the @pkt, if none use the value</dt>\n<dd>in the @pkt;</dd>\n<dt>@dst: replace the destination ip addrss in the @pkt; if none use the</dt>\n<dd>value in the @pkt;</dd>\n</dl>\n<p>Examples:</p>\n<pre>sync = '45 00 00 30 77 e2 40 00 80 06 a5 a5 0a c6 45 c7\n        0a a8 82 0b 04 9f 00 15 4e 37 2b 0e 00 00 00 00\n        70 02 ff ff 27 e6 00 00 02 04 05 b4 01 01 04 02'\nclient.pktsend(syn, src = \"1.1.1.2\", dst = \"2.2.2.2\")\n</pre>\n</blockquote>\n<dl>\n<dt>tcpreplay (self, remote, filename, saddr = None, sport = None,</dt>\n<dd><blockquote>\ndaddr = None, dport = None, proto = None, replay_range = None)</blockquote>\n<p>Replay the packet capture file @filename, the file could be collected\nby tnpdump or wireshark.</p>\n<p>@remote: the server which is linuxdevice object.\n@filename: the packet capture file.\n@saddr: the client address in the packet capture.\n@daddr: the server address in the packet capture.\n@sport: the client port in the packet capture.\n@dport: the server port in the packet capture.\n@port: the protol that to be replayed in the packet capture.\n@replay_range: the list of frame number to be replayed in the packet capture.</p>\n<p>It\u2019s based on sendip-2.5-mec-2, besides, there is some bugs to support ipv6:</p>\n<pre>Index: sendip.c\n===================================================================\nRCS file: /home/ypguo/.cvsroot/sendip/sendip.c,v\nretrieving revision 1.1.1.1\ndiff -u -p -r1.1.1.1 sendip.c\n--- sendip.c        3 Jan 2018 04:02:31 -0000       1.1.1.1\n+++ sendip.c        3 Jan 2018 04:04:29 -0000\n@@ -686,9 +686,14 @@ int main(int argc, char *const argv[]) {\n                                free(packet.data);\n                                unload_modules(FALSE,verbosity);\n                                return 1;\n-                   } else {\n-                           af_type = AF_INET;\n-                   }\n+            } else {\n+                if (strchr(argv[gnuoptind], ':')) {\n+                    /* the destination address is ipv6 address. */\n+                    af_type = AF_INET6;\n+                } else {\n+                    af_type = AF_INET;\n+                }\n+            }\n                }\n                else if(first-&gt;optchar=='i') af_type = AF_INET;\n                else if(first-&gt;optchar=='6') af_type = AF_INET6;\n</pre>\n</dd>\n</dl>\n<p>def test_color (self):</p>\n<blockquote>\nprint the color name in the color.</blockquote>\n<p>__getitem__(self, name):</p>\n<blockquote>\n<p>Get certain attribute, for example:</p>\n<pre>print(self[\"name\"])\n</pre>\n</blockquote>\n<p>__setitem__(self, name, value):</p>\n<blockquote>\n<p>Set certain attribute, for example:</p>\n<pre>self[\"color\"] = \"red\"\n</pre>\n</blockquote>\n<p>The following methods combile frequently-used methods:</p>\n<p>def x_configure_interface (self, *args):</p>\n<blockquote>\n<p>Re-configure the interface with the given parameters.\nThe interface looks like this, you can configure multi interfaces in\none time, for examples:</p>\n<p>int0 = { \u2018name\u2019: \u2018eth1\u2019, \u2018inet\u2019: \u201841.0.0.2/24\u2019, \u2018inet6\u2019: \u20182001::2/64\u2019}\nint1 = { \u2018name\u2019: \u2018eth2\u2019, \u2018inet\u2019: \u201842.0.0.2/24\u2019, \u2018inet6\u2019: \u20182002::2/64\u2019}\ndut.x_configure_interface(int0, int1)</p>\n</blockquote>\n<p>def x_configure_route (self, local, gateway, remote):</p>\n<blockquote>\n<p>Re-configure the interface with the given parameters, for examples:</p>\n<p>#int0 = { \u2018name\u2019: \u2018eth1\u2019, \u2018inet\u2019: \u201841.0.0.2/24\u2019, \u2018inet6\u2019: \u20182001::2/64\u2019}\nclient.x_configure_route(client[\u201cint0\u201d], dut[\u201cint0\u201d], server[\u201cint0\u201d])</p>\n</blockquote>\n<p>def x_get_interfaces (self, name):</p>\n<blockquote>\nGet interface configuration given a interface name.</blockquote>\n<p>def x_ftp (self, *args, **kwargs):</p>\n<blockquote>\n<p>Login the remote ftp server and execute some command. Example:</p>\n<blockquote>\nclient.x_ftp(\u201cpwd\u201d, \u201cls\u201d, \u201cbye\u201d, hostname = \u201c42.0.0.2\u201d, username = \u201croot\u201d, password = \u201cEmbe1mpls\u201d)</blockquote>\n<p>Or:</p>\n<blockquote>\nclient.x_ftp(\u201cpwd\u201d, hostname = \u201c42.0.0.2\u201d, username = \u201croot\u201d, password = \u201cEmbe1mpls\u201d)\nclient.x_ftp(\u201cls\u201d, \u201cpwd\u201d)\nclient.x_ftp(\u201cbye\u201d)</blockquote>\n<p>@args: command list need to be executed\n@kwargs: hostname/username/password parameters If need to auto logint the\nremote ftp server, hostname/username/password should be given</p>\n</blockquote>\n</blockquote>\n</div>\n</div>\n<div id=\"junosdevice\">\n<h3>4.2 JunosDevice</h3>\n<div id=\"id1\">\n<h4>4.2.1 Constructor</h4>\n<p>JunosDevice is a common abstraction for Juniper network devices. It derives\nfrom LinuxDevice so it has every method of LinuxDevice, except some of them\nare overrided. Please use the similar way to define a JunosDevice, for\nexample:</p>\n<pre><span class=\"n\">dut</span> <span class=\"o\">=</span> <span class=\"n\">junos</span><span class=\"o\">.</span><span class=\"n\">JunosDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://root:Juniper@10.219.29.61\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dut</span><span class=\"p\">[</span><span class=\"s2\">\"username\"</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dut</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"p\">(</span><span class=\"s2\">\"show security flow session\"</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h4>4.2.2 Methods</h4>\n<p>Besides all the methods derived from LinuxDevice, JunosDevice support the\nfolowing extra methods:</p>\n<blockquote>\n<p>def cmd (self, cmd, mode = \u201cshell\u201d, timeout = 30, **kwargs):</p>\n<blockquote>\n<p>There are total 4 modes for junos devices:</p>\n<blockquote>\n<ol>\n<li><dl>\n<dt>shell: execute the command in shell mode and return the result,</dt>\n<dd>this is the default mode and it looks like linux.cmd().</dd>\n</dl>\n</li>\n<li><dl>\n<dt>cli: execute the command in cli mode and return the result,</dt>\n<dd>self.cmd(cmd, mode = \u201ccli\u201d) equal to self.cli(cmd), see detail\nin seld.cli()</dd>\n</dl>\n</li>\n<li><dl>\n<dt>configure: execute the command in configure mode and return the</dt>\n<dd>result, self.cmd(cmd, mode = \u201cconfigure\u201d) equal to\nself.configure(cmd), see detail in seld.configure()</dd>\n</dl>\n</li>\n<li><dl>\n<dt>vty: execute the command in vty mode and return the result,</dt>\n<dd>self.cmd(cmd, mode = \u201cvty\u201d) equal to self.vty(cmd), see detail\nin seld.vty()</dd>\n</dl>\n</li>\n</ol>\n</blockquote>\n<p>Supported options include:</p>\n<blockquote>\n<dl>\n<dt>timeout: time to wait for the execute command return. default is 5</dt>\n<dd>seconds</dd>\n</dl>\n</blockquote>\n</blockquote>\n<p>cli (self, cmd, parse = None, timeout = 30, **kwargs):</p>\n<blockquote>\n<p>equal cmd(\u2026, mode = \u201ccli\u201d)</p>\n<p>Execute a list of cli command and return the execution result of the\nlast command.</p>\n<p>@parse: Normally, the result will be plain text or xml text. But if\nthe @parse is given, the result will be parsed and a list of\ndictionary for @parse will be returned. It\u2019s useful to parse the xml\nresult. For example the following command return a list of session in\ndictionary:</p>\n<pre>sessions = dut.cli('show security flow session',\n                   parse = \"flow-session\")\nprint sessions[0]['session-identifier']\n</pre>\n<p>while the following command will return the plain text result:</p>\n<pre>output = dut.cli('show security flow session')\nprint output\n</pre>\n</blockquote>\n<p>configure(self, cmd, **kwargs):</p>\n<blockquote>\n<p>equal cmd(\u2026, mode = \u201cconfigure\u201d), Execute a configure command and\nreturn the result of the last command. Sematics is like self.cli, see\ndetail in self.cli(), For example, Execute a configure command:</p>\n<pre>dut.configure('set security flow traceoptions flag all')\ndut.configure('set security traceoptions file flow.log size 50m')\ndut.configure('set security traceoptions level verbose')\ndut.configure('set security traceoptions flag all')\ndut.configure('commit')\n</pre>\n</blockquote>\n<p>def vty (self, *args, **kwargs):</p>\n<blockquote>\n<p>equal cmd(\u2026, mode = \u201cvty\u201d)</p>\n<p>Execute every line in every argument on every SPU(if not given) and\nreturn the result.</p>\n<p>Supported options include:</p>\n<blockquote>\n<dl>\n<dt>timeout: time to wait for the execute command return. default is 5</dt>\n<dd>seconds</dd>\n<dt>tnp_addr: tnp address to execute, if not execut the command on</dt>\n<dd>every SPU.</dd>\n</dl>\n</blockquote>\n</blockquote>\n<p>def get_spus (self, **kwargs):</p>\n<blockquote>\nGet the spu list of the srx.</blockquote>\n<p>print_session (self, session):</p>\n<blockquote>\n<p>Convert a or lists of session in dictionary to plain text. print it as\nshow of \u201cshow security flow session\u201d.</p>\n<p>@session: it could be a session or a list of session.</p>\n</blockquote>\n<p>install_image (self, image):</p>\n<blockquote>\n<p>Install a image and reboot the dut, wait until it is up with all\nSPU/SPC.</p>\n<p>@local: install a local image, first upload the image to /var/tmp/ on\nthe DUT and then install it.</p>\n<p>@remote: install a image on the DUT</p>\n</blockquote>\n<p>def x_print_session (self, sessions):</p>\n<blockquote>\nConvert a or lists of session in dictionary to plain text.</blockquote>\n<dl>\n<dt>def x_configure_trace (self, *args, **kwargs):</dt>\n<dd><p>configure trace file, For examples:</p>\n<blockquote>\n<dl>\n<dt>dut.x_configure_trace(\u201cflow\u201d, \u201calg dns\u201d, \u201cdynamic-application\u201d,</dt>\n<dd>filename = \u201cflow.log\u201d, size = \u201c50m\u201d)</dd>\n</dl>\n</blockquote>\n</dd>\n<dt>def x_configure_vty_trace (self, *args, **kwargs):</dt>\n<dd><p>configure trace file</p>\n<p>An examples, to enable flow/policy/dynamic-application traceoption and\nwrite the trace into one file:</p>\n<blockquote>\n<dl>\n<dt>dut.x_configure_vty_trace(\u201cflow\u201d, \u201cpolicy\u201d, \u201cfwdd\u201d,</dt>\n<dd>filename = \u201cflow.log\u201d, size = \u201c50m\u201d)</dd>\n</dl>\n</blockquote>\n</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"an-example\">\n<h2>5. An example</h2>\n<p>In this example, we login the client linux device and then ftp the server.\nCheck if there is session generated on the Juniper SRX firewall. Then tear\ndown the connection:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">netdevice</span> <span class=\"kn\">import</span> <span class=\"n\">cisco</span><span class=\"p\">,</span> <span class=\"n\">junos</span><span class=\"p\">,</span> <span class=\"n\">linux</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">dut</span> <span class=\"o\">=</span> <span class=\"n\">junos</span><span class=\"o\">.</span><span class=\"n\">JunosDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://regress:1234@regazara.englab.juniper.net\"</span><span class=\"p\">,</span>\n            <span class=\"n\">root_password</span> <span class=\"o\">=</span> <span class=\"s2\">\"5678\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://root:5678@ent-vm01.englab.juniper.net\"</span><span class=\"p\">,</span>\n            <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'eth1'</span><span class=\"p\">,</span> <span class=\"s1\">'inet'</span><span class=\"p\">:</span> <span class=\"s1\">'1.1.1.2/24'</span><span class=\"p\">,</span> <span class=\"s1\">'inet6'</span><span class=\"p\">:</span> <span class=\"s1\">'2001::2/64'</span><span class=\"p\">}</span> <span class=\"p\">])</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">linux</span><span class=\"o\">.</span><span class=\"n\">LinuxDevice</span><span class=\"p\">(</span><span class=\"s2\">\"ssh://root:5678@ent-vm02.englab.juniper.net\"</span><span class=\"p\">,</span>\n            <span class=\"n\">interfaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'eth1'</span><span class=\"p\">,</span> <span class=\"s1\">'inet'</span><span class=\"p\">:</span> <span class=\"s1\">'2.2.2.2/24'</span><span class=\"p\">,</span> <span class=\"s1\">'inet6'</span><span class=\"p\">:</span> <span class=\"s1\">'2002::2/64'</span><span class=\"p\">}</span> <span class=\"p\">])</span>\n\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"ip route add 2.2.2.0/24 via 1.1.1.1 dev eth1\"</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s2\">\"ip route add 1.1.1.0/24 via 2.2.2.1 dev eth1\"</span><span class=\"p\">)</span>\n    <span class=\"n\">dut</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"p\">(</span><span class=\"s2\">\"clear security flow session application ftp\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># connect to the server and list the files.</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'ftp </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">[</span><span class=\"s2\">\"interfaces\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"inet\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">expect</span> <span class=\"o\">=</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">[</span><span class=\"s2\">\"username\"</span><span class=\"p\">],</span> <span class=\"n\">expect</span> <span class=\"o\">=</span> <span class=\"s2\">\"Password\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">[</span><span class=\"s2\">\"password\"</span><span class=\"p\">],</span> <span class=\"n\">expect</span> <span class=\"o\">=</span> <span class=\"s2\">\"ftp\"</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">,</span> <span class=\"n\">expect</span> <span class=\"o\">=</span> <span class=\"s2\">\"ftp&gt; \"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s2\">\"226\"</span> <span class=\"ow\">in</span> <span class=\"n\">output</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ftp output is shown.\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ftp failed to connect the server.\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># check the session and tear down the connection.</span>\n    <span class=\"n\">sessions</span> <span class=\"o\">=</span> <span class=\"n\">dut</span><span class=\"o\">.</span><span class=\"n\">cli</span><span class=\"p\">(</span><span class=\"s1\">'show security flow session application ftp'</span><span class=\"p\">,</span> <span class=\"n\">parse</span> <span class=\"o\">=</span> <span class=\"s2\">\"flow-session\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">(</span><span class=\"s1\">'bye'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">sessions</span> <span class=\"ow\">and</span> <span class=\"n\">sessions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"flow-information\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'pkt-cnt'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> \\\n            <span class=\"n\">sessions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"flow-information\"</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">'pkt-cnt'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Session found, pass!\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Failed to find the session\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"q-a\">\n<h2>6. Q/A</h2>\n<ol>\n<li>Why some command return timeout?</li>\n</ol>\n<p>For time consuming command i.g. scp, ftp get command, please set the @timeout\nproperly to avoid the command timeout.</p>\n<p>Please make sure there is no command timeout since the output of the last\ncommand will messup the result of the next command.</p>\n<p>If a command timeout, either send a CTRL + C to kill the current session:</p>\n<blockquote>\nclient.cmd(\u201cc\u201d, control = True)</blockquote>\n<p>or kill the current session and relogin the device to open a new session:</p>\n<blockquote>\nclient.relogin()</blockquote>\n</div>\n<div id=\"changelog\">\n<h2>7. Changelog</h2>\n<p>0.1:</p>\n<blockquote>\nInitial upload</blockquote>\n<p>0.52:</p>\n<blockquote>\n<ol>\n<li>Begin to support python3;</li>\n<li>In demo.py and document, the host should use hostname = \u201cxxx\u201d insteading of host = \u201cxxx\u201d</li>\n</ol>\n</blockquote>\n<p>0.53:</p>\n<blockquote>\nAdd support for Junos srx4200.</blockquote>\n<p>0.54:</p>\n<blockquote>\nIt seems that python3 only support int on default. So adjust the float to int to avoid error.</blockquote>\n<p>0.55:</p>\n<blockquote>\nUpdate the help document README for more detail.</blockquote>\n<p>0.56:</p>\n<blockquote>\nAdd some options in junos vty command.</blockquote>\n</div>\n\n          </div>"}, "last_serial": 7021853, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "d71de3d72292d432863b610580be8d77", "sha256": "5278923a0ed0c7ecfb59443f9e50bfa8b5059775730a8acd3311561b8b742b5b"}, "downloads": -1, "filename": "netdevice-0.10.tar.gz", "has_sig": false, "md5_digest": "d71de3d72292d432863b610580be8d77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13484, "upload_time": "2017-05-19T12:20:09", "upload_time_iso_8601": "2017-05-19T12:20:09.093404Z", "url": "https://files.pythonhosted.org/packages/70/3b/7a8580850fbc2717a280f88b5131454865079a1d6318cfcad458b018bd24/netdevice-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "a316f9180ba03f38e5b8444c570fc2a5", "sha256": "beccbbb1cf0fab0ff5912b214253e9c38792d789d6fd79a90ce4bb123f935965"}, "downloads": -1, "filename": "netdevice-0.11.tar.gz", "has_sig": false, "md5_digest": "a316f9180ba03f38e5b8444c570fc2a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13514, "upload_time": "2017-05-19T12:27:02", "upload_time_iso_8601": "2017-05-19T12:27:02.241615Z", "url": "https://files.pythonhosted.org/packages/60/b9/b69c7e8ec774c471050966545d70ed77ae0e37a9e53c66efe88e2eab4ab4/netdevice-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "18ad9af0dda778e56ccbb5f82b23bc7e", "sha256": "7fbfc22c432de7e4aba21579e6093503839217e756184d0f3c4cd439801c09a1"}, "downloads": -1, "filename": "netdevice-0.12.tar.gz", "has_sig": false, "md5_digest": "18ad9af0dda778e56ccbb5f82b23bc7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15146, "upload_time": "2017-05-27T08:16:58", "upload_time_iso_8601": "2017-05-27T08:16:58.906545Z", "url": "https://files.pythonhosted.org/packages/32/04/9c697c378e2d350f9f2a53af1641b5be5242841622f45e7f7808767ca1e7/netdevice-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "ab9251e16c2cbf92ee5bc4aa1bceeebf", "sha256": "fccf82cedaddff7493ceb0db3145e2949bd1b6c1345df7a2d6eda9a7c3ae634f"}, "downloads": -1, "filename": "netdevice-0.13.tar.gz", "has_sig": false, "md5_digest": "ab9251e16c2cbf92ee5bc4aa1bceeebf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15091, "upload_time": "2017-05-27T08:48:54", "upload_time_iso_8601": "2017-05-27T08:48:54.644704Z", "url": "https://files.pythonhosted.org/packages/4a/25/93b8533f769ae60ec621cb49e7bc1511f54404af8ab0bba7ea7b14aa66c4/netdevice-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "291bf99f1b67f6038ba58e52c2dc0d5e", "sha256": "ed3e6a6273da93bd32e1da84923f16d708e2a3b830c39e866381d7fc0fb963ab"}, "downloads": -1, "filename": "netdevice-0.14.tar.gz", "has_sig": false, "md5_digest": "291bf99f1b67f6038ba58e52c2dc0d5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15110, "upload_time": "2017-05-31T08:00:36", "upload_time_iso_8601": "2017-05-31T08:00:36.262286Z", "url": "https://files.pythonhosted.org/packages/4b/51/3de8f3f9cf9f8e2991546add67cec79737f1d2b70305f5ab4d39c65dcf42/netdevice-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "e6ab9b0e0560f9db272125259fc04d7b", "sha256": "35ab8ab3520849b15e3052f784b5868170df16d7e26295a153d2490a783a1c6e"}, "downloads": -1, "filename": "netdevice-0.15.tar.gz", "has_sig": false, "md5_digest": "e6ab9b0e0560f9db272125259fc04d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15098, "upload_time": "2017-05-31T10:59:24", "upload_time_iso_8601": "2017-05-31T10:59:24.092736Z", "url": "https://files.pythonhosted.org/packages/80/b1/6c28552e9e7c8f7a132703b4ca5358ab3e2b6a9db4b016c813b675f9cf22/netdevice-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "a10ea01266cafb2841a61954cf38c0c5", "sha256": "c4c1f045c35d0265ed9f84db182eeab67c02ec6197a7ea3848627550f9edf948"}, "downloads": -1, "filename": "netdevice-0.16.tar.gz", "has_sig": false, "md5_digest": "a10ea01266cafb2841a61954cf38c0c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15259, "upload_time": "2017-06-02T07:54:53", "upload_time_iso_8601": "2017-06-02T07:54:53.268869Z", "url": "https://files.pythonhosted.org/packages/17/e0/44171bda684b6ca91179c48b5fc5477297a53c15881516310171e0d9111b/netdevice-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "a2ece34395ef66cc7eac986d3294167f", "sha256": "0df6ec419dc8c8024833737a01c56b4398f4dcb7258dff1cc8acdadb16eaa47c"}, "downloads": -1, "filename": "netdevice-0.17.tar.gz", "has_sig": false, "md5_digest": "a2ece34395ef66cc7eac986d3294167f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15891, "upload_time": "2017-06-09T06:50:20", "upload_time_iso_8601": "2017-06-09T06:50:20.105805Z", "url": "https://files.pythonhosted.org/packages/ac/33/e3d6676766157678baacf1d15bf6b9491e8160e06d90f672b0da9e647e1d/netdevice-0.17.tar.gz", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "8fd41b226a11e0beaf7a34f47a2834bb", "sha256": "18d5dd49a2d171f236b7247c32cecafad85e6e0c37613d7b4e38bc8bffce63ca"}, "downloads": -1, "filename": "netdevice-0.18.tar.gz", "has_sig": false, "md5_digest": "8fd41b226a11e0beaf7a34f47a2834bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17112, "upload_time": "2017-06-13T06:32:25", "upload_time_iso_8601": "2017-06-13T06:32:25.899845Z", "url": "https://files.pythonhosted.org/packages/32/5e/a8734fecf29518e845e807c9ed9bba4d9ca889c94e8da19dc7208cb5b65c/netdevice-0.18.tar.gz", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "6f4a8c5f1741417c87aac17ffe1083c7", "sha256": "d0c4291d7f60a831df250f59ed286f41932a8dfb91649aeaa2e058ffd3a86c84"}, "downloads": -1, "filename": "netdevice-0.19.tar.gz", "has_sig": false, "md5_digest": "6f4a8c5f1741417c87aac17ffe1083c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17356, "upload_time": "2017-06-15T11:11:15", "upload_time_iso_8601": "2017-06-15T11:11:15.353656Z", "url": "https://files.pythonhosted.org/packages/2a/15/836ee49f09a2f763d1d57e8acac511e4b79917cc424f5f31032d50504657/netdevice-0.19.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "8a714c0311f6417c365ffc49a2986fc3", "sha256": "0d7b96e2210f03bd2d4f9686ea223347854242bc3a7f5a0897e848082b28e67b"}, "downloads": -1, "filename": "netdevice-0.20.tar.gz", "has_sig": false, "md5_digest": "8a714c0311f6417c365ffc49a2986fc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18402, "upload_time": "2017-06-23T02:44:54", "upload_time_iso_8601": "2017-06-23T02:44:54.310066Z", "url": "https://files.pythonhosted.org/packages/22/9f/e4906b1eb3020ea549a6d5b08fd54c64c662f2226f67e70ace1ce84d5dc9/netdevice-0.20.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "f3fc2d0ca0b990af9ae3dd142dba2012", "sha256": "2c8cda41baeecbdc068b50862438b3e2dd4d14c6fb99dc4753d5e8e7dd10d0a8"}, "downloads": -1, "filename": "netdevice-0.21.tar.gz", "has_sig": false, "md5_digest": "f3fc2d0ca0b990af9ae3dd142dba2012", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19265, "upload_time": "2017-06-28T06:08:03", "upload_time_iso_8601": "2017-06-28T06:08:03.955588Z", "url": "https://files.pythonhosted.org/packages/14/30/8a0f69eb4bf3de6816c14b403641bf5b93ff9bdce24b5c3a050fceba4755/netdevice-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "55e51b22142e3692fbc94aaf306400ca", "sha256": "fdcb6c196aed49680adc00dc91b65aab512ecc7b25f6bbdcfc868c414fce7848"}, "downloads": -1, "filename": "netdevice-0.22.tar.gz", "has_sig": false, "md5_digest": "55e51b22142e3692fbc94aaf306400ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19503, "upload_time": "2017-07-03T02:58:42", "upload_time_iso_8601": "2017-07-03T02:58:42.096458Z", "url": "https://files.pythonhosted.org/packages/a0/96/8362ff12f3d4e8750bc26577298842b101d654bc50087491793a1c17d55f/netdevice-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "e86fba2a8bac1adf068b54a6b8e27691", "sha256": "d6a05b56347cb6019efad4071bfecd7bbfd1930b8d8a9613fd47d2e90335f601"}, "downloads": -1, "filename": "netdevice-0.23.tar.gz", "has_sig": false, "md5_digest": "e86fba2a8bac1adf068b54a6b8e27691", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19538, "upload_time": "2017-07-05T05:31:37", "upload_time_iso_8601": "2017-07-05T05:31:37.981036Z", "url": "https://files.pythonhosted.org/packages/39/f7/872df5a15410801649710b398bf2cf618549605bc393ef7b7f516fffbc82/netdevice-0.23.tar.gz", "yanked": false}], "0.24": [{"comment_text": "", "digests": {"md5": "61eb93cdb7049dd733ce4416be91555e", "sha256": "91c93d966f4080c85cae3692e7fa6fb08a0a73d952c76e1e39c12949446e2131"}, "downloads": -1, "filename": "netdevice-0.24.tar.gz", "has_sig": false, "md5_digest": "61eb93cdb7049dd733ce4416be91555e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19531, "upload_time": "2017-07-05T05:51:29", "upload_time_iso_8601": "2017-07-05T05:51:29.930905Z", "url": "https://files.pythonhosted.org/packages/81/f1/ff6ba7f0f9b74187fccde2a598bf0cb8256e2607fedd16761b505b082ce8/netdevice-0.24.tar.gz", "yanked": false}], "0.25": [{"comment_text": "", "digests": {"md5": "17d8cd4adc8cd5fbbc74dc13833e4e68", "sha256": "75e0aa4b68105888e37b11c7a51f290527d10565846c5b068d43a22adde35e24"}, "downloads": -1, "filename": "netdevice-0.25.tar.gz", "has_sig": false, "md5_digest": "17d8cd4adc8cd5fbbc74dc13833e4e68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19541, "upload_time": "2017-07-05T06:05:53", "upload_time_iso_8601": "2017-07-05T06:05:53.724169Z", "url": "https://files.pythonhosted.org/packages/d2/bb/bde7dc6788302a88ab4b1c3c291a392860e02e387f0492c245f89be43de3/netdevice-0.25.tar.gz", "yanked": false}], "0.26": [{"comment_text": "", "digests": {"md5": "bc1041f29283be6d020a9489fc921446", "sha256": "fcd370449c7777439d789724e82a91ad566a2ff5deceeb979e906eb6a84dbc07"}, "downloads": -1, "filename": "netdevice-0.26.tar.gz", "has_sig": false, "md5_digest": "bc1041f29283be6d020a9489fc921446", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19574, "upload_time": "2017-07-05T06:41:31", "upload_time_iso_8601": "2017-07-05T06:41:31.047383Z", "url": "https://files.pythonhosted.org/packages/81/d6/e5571940e23bb2515123eb7e1db4efd50a32986f6d0791ab004405313c00/netdevice-0.26.tar.gz", "yanked": false}], "0.27": [{"comment_text": "", "digests": {"md5": "5cf98f5f8ae458e2f0586fdbb8fd4f2b", "sha256": "dde7fda44fe01b4945c3b3d6c477b54b4b44494459ba24523fefab343e01f46c"}, "downloads": -1, "filename": "netdevice-0.27.tar.gz", "has_sig": false, "md5_digest": "5cf98f5f8ae458e2f0586fdbb8fd4f2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19613, "upload_time": "2017-07-05T11:08:17", "upload_time_iso_8601": "2017-07-05T11:08:17.925171Z", "url": "https://files.pythonhosted.org/packages/09/fc/9988bd486097c8e41be74a90a0d6bf78848077a51b299b147b8e398327cb/netdevice-0.27.tar.gz", "yanked": false}], "0.28": [{"comment_text": "", "digests": {"md5": "1ff514b19a40dfbf9bd15ce609526c77", "sha256": "dee08fb0f1cfa099f84f5e9158b9c631798a6fe5b24638f70ee713caf194c178"}, "downloads": -1, "filename": "netdevice-0.28.tar.gz", "has_sig": false, "md5_digest": "1ff514b19a40dfbf9bd15ce609526c77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22332, "upload_time": "2017-07-06T02:01:41", "upload_time_iso_8601": "2017-07-06T02:01:41.535725Z", "url": "https://files.pythonhosted.org/packages/5b/b5/c3b2dfc533e9ea4059205abd3891f85d6fcb8a669f6d0d425e83d4091989/netdevice-0.28.tar.gz", "yanked": false}], "0.29": [{"comment_text": "", "digests": {"md5": "1083168102a324f2e434ade1e89473c1", "sha256": "bb0f58b21dbfc4b7bd95192cc1526cd606e6c8315b319c2c48abafa4fcc4f4e6"}, "downloads": -1, "filename": "netdevice-0.29.tar.gz", "has_sig": false, "md5_digest": "1083168102a324f2e434ade1e89473c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22326, "upload_time": "2017-07-06T02:44:45", "upload_time_iso_8601": "2017-07-06T02:44:45.629663Z", "url": "https://files.pythonhosted.org/packages/16/2c/6ac8d9d2c636a3cdee68b804bc10f031b1785526337218016a0a564943b4/netdevice-0.29.tar.gz", "yanked": false}], "0.31": [{"comment_text": "", "digests": {"md5": "6483405d4f8c60f6ee9ca08252d069ce", "sha256": "58770edde04f9208f096620e42b1ec3138b86aca16ddf4e4b6454a463d171b4d"}, "downloads": -1, "filename": "netdevice-0.31.tar.gz", "has_sig": false, "md5_digest": "6483405d4f8c60f6ee9ca08252d069ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22328, "upload_time": "2017-07-06T04:04:02", "upload_time_iso_8601": "2017-07-06T04:04:02.859966Z", "url": "https://files.pythonhosted.org/packages/0e/d7/bd6c748bf10bc7aa69108993145b29569854027e9f6f64cb8d2d34bbc330/netdevice-0.31.tar.gz", "yanked": false}], "0.32": [{"comment_text": "", "digests": {"md5": "ae59c00629d41ad9583913c65bd85ff1", "sha256": "4ec106e04e0a3d48d005bf56475ebe7b8b68bafa7cdad22e72e77a5f9fedd36c"}, "downloads": -1, "filename": "netdevice-0.32.tar.gz", "has_sig": false, "md5_digest": "ae59c00629d41ad9583913c65bd85ff1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22328, "upload_time": "2017-07-10T00:26:46", "upload_time_iso_8601": "2017-07-10T00:26:46.338885Z", "url": "https://files.pythonhosted.org/packages/f6/91/c208e1d4700e1e3af5a7157b7b7a235b75093e8b23ead0da2e074aa99ca5/netdevice-0.32.tar.gz", "yanked": false}], "0.33": [{"comment_text": "", "digests": {"md5": "cbaa3a5a5098099843e054592d2e020c", "sha256": "a95062bf9f3cb771d9ede2666558426d12253da548ced4e26bfce5e6375373e1"}, "downloads": -1, "filename": "netdevice-0.33.tar.gz", "has_sig": false, "md5_digest": "cbaa3a5a5098099843e054592d2e020c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22539, "upload_time": "2017-07-17T03:20:14", "upload_time_iso_8601": "2017-07-17T03:20:14.445529Z", "url": "https://files.pythonhosted.org/packages/8a/d3/86f1036adf6f4517566bacfb4e8d4a2744651430d225391e3a491c018a5f/netdevice-0.33.tar.gz", "yanked": false}], "0.34": [{"comment_text": "", "digests": {"md5": "8b8948a57aeb08247d8599c3b7250abd", "sha256": "2661f7163ee1e0ff06db6780c9d364d4e5f0cf2d648c33b74cac327c7b7c96fa"}, "downloads": -1, "filename": "netdevice-0.34.tar.gz", "has_sig": false, "md5_digest": "8b8948a57aeb08247d8599c3b7250abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22568, "upload_time": "2017-07-27T05:49:26", "upload_time_iso_8601": "2017-07-27T05:49:26.030236Z", "url": "https://files.pythonhosted.org/packages/8b/bb/2457617f991b34a0c446a25c18c08a557ad24c0f0279df119c3615e0aa7a/netdevice-0.34.tar.gz", "yanked": false}], "0.35": [{"comment_text": "", "digests": {"md5": "bc073d85d2ccd4181c0aec30dc53ec97", "sha256": "950b5e684d976f05db5c7d7a379bcaf1f053ccfe50ce0deacd0417e9fc311ebd"}, "downloads": -1, "filename": "netdevice-0.35.tar.gz", "has_sig": false, "md5_digest": "bc073d85d2ccd4181c0aec30dc53ec97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34404, "upload_time": "2018-01-23T06:19:52", "upload_time_iso_8601": "2018-01-23T06:19:52.475963Z", "url": "https://files.pythonhosted.org/packages/70/d2/3d1d2d4cba55417d2d77fd875b7332113340f8034a81799ff83cfc713d9e/netdevice-0.35.tar.gz", "yanked": false}], "0.36": [{"comment_text": "", "digests": {"md5": "1bf1e30addfdd34a666372b925e5dcc5", "sha256": "4de3c9673b8d8506d80517d18faa20c9db52baadfb820e30bbe94a6326935394"}, "downloads": -1, "filename": "netdevice-0.36.tar.gz", "has_sig": false, "md5_digest": "1bf1e30addfdd34a666372b925e5dcc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33993, "upload_time": "2018-01-31T05:49:22", "upload_time_iso_8601": "2018-01-31T05:49:22.113632Z", "url": "https://files.pythonhosted.org/packages/56/09/33536ecf406f6d97f19edfca227e3172e879c05402219db7441b8ece05cf/netdevice-0.36.tar.gz", "yanked": false}], "0.37": [{"comment_text": "", "digests": {"md5": "3ea7b4461fb4cef1d8eb842b60176712", "sha256": "1ac2e09df27f8aee065dd9e0e53d3cc0aab99aa29167b6574878acfa0cfa3b84"}, "downloads": -1, "filename": "netdevice-0.37-py2.7.egg", "has_sig": false, "md5_digest": "3ea7b4461fb4cef1d8eb842b60176712", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 48614, "upload_time": "2018-02-27T06:43:19", "upload_time_iso_8601": "2018-02-27T06:43:19.920838Z", "url": "https://files.pythonhosted.org/packages/06/ac/c5412ede0a1bb7ac772bf3f1d70fcd6b63d7c49ba719aee3ba7efe697125/netdevice-0.37-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7218261f38027f15b13df7a83c7c926f", "sha256": "66b32017e1c60babe247991548033b630fe1c9160b3dde11da2f38b9f10bbf71"}, "downloads": -1, "filename": "netdevice-0.37.tar.gz", "has_sig": false, "md5_digest": "7218261f38027f15b13df7a83c7c926f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34337, "upload_time": "2018-02-27T06:43:21", "upload_time_iso_8601": "2018-02-27T06:43:21.809134Z", "url": "https://files.pythonhosted.org/packages/c6/dd/dc7a7c70627fce3fbb3c7f9bc978b9d5f9cabaaa3691cac9b7d43858e904/netdevice-0.37.tar.gz", "yanked": false}], "0.38": [{"comment_text": "", "digests": {"md5": "6b12c05311b38a9a81ef34c85ae63fba", "sha256": "a050c2b9aa8c4f8fab03dbed9aa1d45d0ef0d8d12e521a0dddd92fdce175f08a"}, "downloads": -1, "filename": "netdevice-0.38.tar.gz", "has_sig": false, "md5_digest": "6b12c05311b38a9a81ef34c85ae63fba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34222, "upload_time": "2018-02-27T07:15:10", "upload_time_iso_8601": "2018-02-27T07:15:10.850960Z", "url": "https://files.pythonhosted.org/packages/f0/48/859743afcf126cb201ae92eb5c4a788ff78be219f5bdd9e5d4d2fe837b0b/netdevice-0.38.tar.gz", "yanked": false}], "0.39": [{"comment_text": "", "digests": {"md5": "1654cc45b6e3096abdfa8b1c3d968189", "sha256": "1e2bd0e0cab37aaa727f86e2cdff3de92d39abd113c1af11f08b70cc79b3719f"}, "downloads": -1, "filename": "netdevice-0.39.tar.gz", "has_sig": false, "md5_digest": "1654cc45b6e3096abdfa8b1c3d968189", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34058, "upload_time": "2018-03-21T06:55:23", "upload_time_iso_8601": "2018-03-21T06:55:23.071281Z", "url": "https://files.pythonhosted.org/packages/d5/fa/3769edbe3aadb1bdfb4950c9b331931d7ac01fcb928d6dd073bc16f7560c/netdevice-0.39.tar.gz", "yanked": false}], "0.40": [{"comment_text": "", "digests": {"md5": "e208f29553f76a23d8322b459c36c6a8", "sha256": "4dd1d8910601807cedcc7877d5a08b89bc9b67ec273413a594857921d8f9933f"}, "downloads": -1, "filename": "netdevice-0.40.tar.gz", "has_sig": false, "md5_digest": "e208f29553f76a23d8322b459c36c6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34079, "upload_time": "2018-03-21T06:57:51", "upload_time_iso_8601": "2018-03-21T06:57:51.773213Z", "url": "https://files.pythonhosted.org/packages/d5/a9/d71b32cadd442a54dcdbe60fe3117a88e466dd6238e2105f5d91abbdfb67/netdevice-0.40.tar.gz", "yanked": false}], "0.41": [{"comment_text": "", "digests": {"md5": "61ea8b142c3c5d1f5e74a6867af54729", "sha256": "1aa17206744a2ad7958a500890d856ea00f6f2d5724d54e4135e11d4a06e3789"}, "downloads": -1, "filename": "netdevice-0.41.tar.gz", "has_sig": false, "md5_digest": "61ea8b142c3c5d1f5e74a6867af54729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34500, "upload_time": "2018-06-01T08:48:36", "upload_time_iso_8601": "2018-06-01T08:48:36.289460Z", "url": "https://files.pythonhosted.org/packages/83/af/296f2d6c283bd38075375dc26a04cb46ffd02b461ca57eb3f847edf70eb9/netdevice-0.41.tar.gz", "yanked": false}], "0.42": [{"comment_text": "", "digests": {"md5": "d25dc4246e481b6fe7acf5ab9bd36409", "sha256": "dfda707441c1829b48a6de6f4c027e4f8240359b3992d917f050606f371d8fcf"}, "downloads": -1, "filename": "netdevice-0.42.tar.gz", "has_sig": false, "md5_digest": "d25dc4246e481b6fe7acf5ab9bd36409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35198, "upload_time": "2018-07-05T02:43:07", "upload_time_iso_8601": "2018-07-05T02:43:07.896664Z", "url": "https://files.pythonhosted.org/packages/0b/ec/fe228a4194f93cfe83a6baa32d66d868cb6572fcff02d802133e404c152e/netdevice-0.42.tar.gz", "yanked": false}], "0.43": [{"comment_text": "", "digests": {"md5": "265d847d3b0c0166e94406fcba65993b", "sha256": "556e5dd252789bb2cee5c1d59187a507980837bcb61b2dd5eb3cb6da2d374fe7"}, "downloads": -1, "filename": "netdevice-0.43.tar.gz", "has_sig": false, "md5_digest": "265d847d3b0c0166e94406fcba65993b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35932, "upload_time": "2018-07-05T03:00:45", "upload_time_iso_8601": "2018-07-05T03:00:45.404786Z", "url": "https://files.pythonhosted.org/packages/62/c1/9cd92bb824b2a8dcbc4237cb48ee2ede15913fc5c64dd81778e4de20c867/netdevice-0.43.tar.gz", "yanked": false}], "0.44": [{"comment_text": "", "digests": {"md5": "3c98e4a118d1d99a5fd192495cef7f99", "sha256": "e1fb569c7aade48e7a52ff984c96c4c4759580d951c6eec8dafc195f0d7a3f5f"}, "downloads": -1, "filename": "netdevice-0.44.tar.gz", "has_sig": false, "md5_digest": "3c98e4a118d1d99a5fd192495cef7f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35967, "upload_time": "2018-07-27T02:20:57", "upload_time_iso_8601": "2018-07-27T02:20:57.441938Z", "url": "https://files.pythonhosted.org/packages/6c/fb/fc6694ea9babf2ae7a7b9f391b5d2570d2c5a8ac7c6b5616fbe8a8445a45/netdevice-0.44.tar.gz", "yanked": false}], "0.45": [{"comment_text": "", "digests": {"md5": "e7432d7098c58d4ea7cf28d96a061af8", "sha256": "a5d8a930ab2e2a93d523afdfcd44f1de2f38107fd2188d4ae1cbcb4eb0fde9ab"}, "downloads": -1, "filename": "netdevice-0.45.tar.gz", "has_sig": false, "md5_digest": "e7432d7098c58d4ea7cf28d96a061af8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36792, "upload_time": "2018-08-29T07:02:19", "upload_time_iso_8601": "2018-08-29T07:02:19.668980Z", "url": "https://files.pythonhosted.org/packages/b7/ee/7f51615a98cf906a3df1e6364e67b4e53ecd42d1a91075da3c88cef071b4/netdevice-0.45.tar.gz", "yanked": false}], "0.46": [{"comment_text": "", "digests": {"md5": "e7cde0a938344576c342be5f1033cea5", "sha256": "c1e9c392b57f1bb8f816a5ac9b0411483ce5e0a899c0e6353beae54a7fc3563b"}, "downloads": -1, "filename": "netdevice-0.46.tar.gz", "has_sig": false, "md5_digest": "e7cde0a938344576c342be5f1033cea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37145, "upload_time": "2018-09-26T06:30:27", "upload_time_iso_8601": "2018-09-26T06:30:27.608533Z", "url": "https://files.pythonhosted.org/packages/a9/4c/163f9833809aa19eaa500d0dfde850c2557a299be9b6c740870f4a1053af/netdevice-0.46.tar.gz", "yanked": false}], "0.47": [{"comment_text": "", "digests": {"md5": "7f66eb1801ba3657d6cd2e1badf5f396", "sha256": "366ab2165e394833625261cdd39056a94b2468318edffbe96941095dbf207dba"}, "downloads": -1, "filename": "netdevice-0.47.tar.gz", "has_sig": false, "md5_digest": "7f66eb1801ba3657d6cd2e1badf5f396", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41082, "upload_time": "2018-12-19T09:06:44", "upload_time_iso_8601": "2018-12-19T09:06:44.949227Z", "url": "https://files.pythonhosted.org/packages/89/ff/b4abebcc7617bd3545691b392b883952a9c28e7b855d9112bd5e8c50791a/netdevice-0.47.tar.gz", "yanked": false}], "0.48": [{"comment_text": "", "digests": {"md5": "2aadd72f7f605d292cba5bad615024c5", "sha256": "627bb792e354b684e8a9cbf40004c1231381024ec7d3b71e116c079d0ac483e7"}, "downloads": -1, "filename": "netdevice-0.48.tar.gz", "has_sig": false, "md5_digest": "2aadd72f7f605d292cba5bad615024c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41136, "upload_time": "2019-03-18T02:55:06", "upload_time_iso_8601": "2019-03-18T02:55:06.902953Z", "url": "https://files.pythonhosted.org/packages/cd/dc/672dd01bc58d30ea4cec5b79886f3b84d9ab096a0190817393139fd81454/netdevice-0.48.tar.gz", "yanked": false}], "0.49": [{"comment_text": "", "digests": {"md5": "c09885ceeac65f4039a784390083d8b1", "sha256": "3fd5f53ae990b1485a3a8e563d96ad8bfbde4e39a6a2b0be64a7fb7171f14379"}, "downloads": -1, "filename": "netdevice-0.49.tar.gz", "has_sig": false, "md5_digest": "c09885ceeac65f4039a784390083d8b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41209, "upload_time": "2019-04-03T07:23:43", "upload_time_iso_8601": "2019-04-03T07:23:43.907798Z", "url": "https://files.pythonhosted.org/packages/ab/86/08ea6f542a7cc9d51fcbb98659eb85387298591a8b7293e36e9c93edbfa3/netdevice-0.49.tar.gz", "yanked": false}], "0.50": [{"comment_text": "", "digests": {"md5": "47d573814fc668798aa7bf2aee9b6028", "sha256": "353fc95d4813b16594037195b6f3ad368bfda8b91cbc85bf06ae6fec9e462c60"}, "downloads": -1, "filename": "netdevice-0.50.tar.gz", "has_sig": false, "md5_digest": "47d573814fc668798aa7bf2aee9b6028", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42327, "upload_time": "2019-06-06T02:55:08", "upload_time_iso_8601": "2019-06-06T02:55:08.101451Z", "url": "https://files.pythonhosted.org/packages/37/c4/6051c779e34f0178122f44a07b5d5954fc0e6d66f3315ec97d6de899ec3b/netdevice-0.50.tar.gz", "yanked": false}], "0.51": [{"comment_text": "", "digests": {"md5": "2effa4191bb07273cc0d1db262fc21e1", "sha256": "89d99cd6c6ef48af349af074107d972df524c97c8f04c62e4257a09a54c745c3"}, "downloads": -1, "filename": "netdevice-0.51-py2.7.egg", "has_sig": false, "md5_digest": "2effa4191bb07273cc0d1db262fc21e1", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 59214, "upload_time": "2019-06-25T06:50:04", "upload_time_iso_8601": "2019-06-25T06:50:04.246506Z", "url": "https://files.pythonhosted.org/packages/bc/ee/bcbc5469f38bc8149009829e0d527af1bda6076e6c8f915efc973d81a33f/netdevice-0.51-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ec2e9795a18dd16692eb640cfcaf4ba", "sha256": "9d84063c59d93f3531320ea554f50dd872f383eda6b33d9234387dfbe65a4da0"}, "downloads": -1, "filename": "netdevice-0.51-py3.7.egg", "has_sig": false, "md5_digest": "6ec2e9795a18dd16692eb640cfcaf4ba", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 55685, "upload_time": "2019-06-25T06:50:06", "upload_time_iso_8601": "2019-06-25T06:50:06.695307Z", "url": "https://files.pythonhosted.org/packages/e4/27/e946e41cc3019a6ce829bf4c9c0ea3e8350242a223552c56c76d9126e83c/netdevice-0.51-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "03f2558cc5e2f162cd0fd8e7426e7202", "sha256": "56c8b829c0fdbaa960b18147f3a95c9c22295158de6110ff296a7b9f02db9376"}, "downloads": -1, "filename": "netdevice-0.51.tar.gz", "has_sig": false, "md5_digest": "03f2558cc5e2f162cd0fd8e7426e7202", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42347, "upload_time": "2019-06-25T06:50:08", "upload_time_iso_8601": "2019-06-25T06:50:08.966209Z", "url": "https://files.pythonhosted.org/packages/14/5b/4ea649b600d561c583bd81117f0d0bf219a1934a59d5c1d52b0f635973cd/netdevice-0.51.tar.gz", "yanked": false}], "0.52": [{"comment_text": "", "digests": {"md5": "d319991a3f76c228539b3233efd92191", "sha256": "5c75833b0a86cd5d4eea3f8b763b1e105d291495a2606b6cd99db4ed58898302"}, "downloads": -1, "filename": "netdevice-0.52.tar.gz", "has_sig": false, "md5_digest": "d319991a3f76c228539b3233efd92191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42478, "upload_time": "2019-06-25T06:53:27", "upload_time_iso_8601": "2019-06-25T06:53:27.927835Z", "url": "https://files.pythonhosted.org/packages/d3/fb/4784b8fafa24b2efcbcc8e86bb659c4684df86a98a0fe7be81a7c3220492/netdevice-0.52.tar.gz", "yanked": false}], "0.53": [{"comment_text": "", "digests": {"md5": "25eb3dfd1c02f9e5f690d35e4f4bff08", "sha256": "7ec6f90f312a360cdba59586dea4e5033adb769ae78c0567c8e7cea418a6a161"}, "downloads": -1, "filename": "netdevice-0.53.tar.gz", "has_sig": false, "md5_digest": "25eb3dfd1c02f9e5f690d35e4f4bff08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38262, "upload_time": "2019-06-25T21:32:53", "upload_time_iso_8601": "2019-06-25T21:32:53.273355Z", "url": "https://files.pythonhosted.org/packages/ff/34/5d54cb91a69f1f7ba98c486c3b62b1360ac1fd061bee10e9d4c349d45713/netdevice-0.53.tar.gz", "yanked": false}], "0.54": [{"comment_text": "", "digests": {"md5": "1ea4ab3bfd7b09a111f5318aaffd9f33", "sha256": "e8fa55faa9b86a377bcf6eb228d3b05ed2676db277d10639cef485f589ca7d5b"}, "downloads": -1, "filename": "netdevice-0.54.tar.gz", "has_sig": false, "md5_digest": "1ea4ab3bfd7b09a111f5318aaffd9f33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38582, "upload_time": "2019-07-25T02:13:36", "upload_time_iso_8601": "2019-07-25T02:13:36.922955Z", "url": "https://files.pythonhosted.org/packages/4a/3a/2fc2d56ca064ef8942bed8bbfea64b40a8112f03e0d2236a78ce562c80e4/netdevice-0.54.tar.gz", "yanked": false}], "0.55": [{"comment_text": "", "digests": {"md5": "28a6c1c357acfa7bd54503e7b1f44a57", "sha256": "31662d04b3f88825b7706622f9d20daa930c24ae171790eee85eff471d89fdd5"}, "downloads": -1, "filename": "netdevice-0.55.tar.gz", "has_sig": false, "md5_digest": "28a6c1c357acfa7bd54503e7b1f44a57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39806, "upload_time": "2019-11-01T03:38:20", "upload_time_iso_8601": "2019-11-01T03:38:20.138453Z", "url": "https://files.pythonhosted.org/packages/6c/57/5128a4321615ce79f091f3e058de4008bec76ea57d151728d1530152aeb0/netdevice-0.55.tar.gz", "yanked": false}], "0.56": [{"comment_text": "", "digests": {"md5": "ece955d35eb1e70f72231f2e4673e4f8", "sha256": "003a7cbca91ed40d5977da56802d57f6db34178609cfacac678d733d6bf1492f"}, "downloads": -1, "filename": "netdevice-0.56.tar.gz", "has_sig": false, "md5_digest": "ece955d35eb1e70f72231f2e4673e4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39879, "upload_time": "2020-01-13T06:23:17", "upload_time_iso_8601": "2020-01-13T06:23:17.117060Z", "url": "https://files.pythonhosted.org/packages/0a/10/66cf94f331fe4798cefd430039a5dabb1ba05dea64d62bf05346bf3dc04d/netdevice-0.56.tar.gz", "yanked": false}], "0.57": [{"comment_text": "", "digests": {"md5": "73441a79f7f3c4994f9a316037e6aa33", "sha256": "434f3cbd672aca985873108759fc04a4696f2ff8820dfda70754088f19f4da34"}, "downloads": -1, "filename": "netdevice-0.57.tar.gz", "has_sig": false, "md5_digest": "73441a79f7f3c4994f9a316037e6aa33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39875, "upload_time": "2020-04-15T03:29:39", "upload_time_iso_8601": "2020-04-15T03:29:39.568747Z", "url": "https://files.pythonhosted.org/packages/98/d6/ac080749f611f8af22a54cc2f674195bfb3a7a542c305ea038beffa2fa8d/netdevice-0.57.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "70e85d399ec3696ef63a846daec604f7", "sha256": "1208a34157632c18478e9ebb257c06ead7fcfa026c8c81933c20bec76c85bcef"}, "downloads": -1, "filename": "netdevice-0.9.tar.gz", "has_sig": false, "md5_digest": "70e85d399ec3696ef63a846daec604f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13776, "upload_time": "2017-05-09T02:27:24", "upload_time_iso_8601": "2017-05-09T02:27:24.918650Z", "url": "https://files.pythonhosted.org/packages/f0/8e/978a5fe150912468fcff794cbf8f9f65dd1319ff7f7a607a72e884bb4b43/netdevice-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73441a79f7f3c4994f9a316037e6aa33", "sha256": "434f3cbd672aca985873108759fc04a4696f2ff8820dfda70754088f19f4da34"}, "downloads": -1, "filename": "netdevice-0.57.tar.gz", "has_sig": false, "md5_digest": "73441a79f7f3c4994f9a316037e6aa33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39875, "upload_time": "2020-04-15T03:29:39", "upload_time_iso_8601": "2020-04-15T03:29:39.568747Z", "url": "https://files.pythonhosted.org/packages/98/d6/ac080749f611f8af22a54cc2f674195bfb3a7a542c305ea038beffa2fa8d/netdevice-0.57.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:00 2020"}