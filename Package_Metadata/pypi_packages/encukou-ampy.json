{"info": {"author": "Adafruit Industries", "author_email": "circuitpython@adafruit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "## encukou-ampy\n\nThis is an experimental fork of `adafruit-ampy` that tries to fix an issue on\nWindows 10.\n\n## ampy\n\nAdafruit MicroPython Tool (ampy) - Utility to interact with a CircuitPython or MicroPython board over a serial connection.\n\nAmpy is meant to be a simple command line tool to manipulate files and run code on a CircuitPython or\nMicroPython board over its serial connection.\nWith ampy you can send files from your computer to the\nboard's file system, download files from a board to your computer, and even send a Python script\nto a board to be executed.\n\nNote that ampy by design is meant to be simple and does not support advanced interaction like a shell\nor terminal to send input to a board.  Check out other MicroPython tools\nlike [rshell](https://github.com/dhylands/rshell)\nor [mpfshell](https://github.com/wendlers/mpfshell) for more advanced interaction with boards.\n\n## Installation\n\nYou can use ampy with either Python 2.7.x or 3.x and can install it easily from\nPython's package index.  On MacOS or Linux, in a terminal run the following command (assuming\nPython 3):\n\n    pip3 install --user encukou-ampy\n\nOn Windows, do:\n\n    pip install encukou-ampy\n\nNote on some Linux and Mac OSX systems you might need to run as root with sudo:\n\n    sudo pip3 install encukou-ampy\n\nIf you don't have Python 3 then try using Python 2 with:\n\n    pip install encukou-ampy\n\nOnce installed verify you can run the ampy program and get help output:\n\n    ampy --help\n\nYou should see usage information displayed like below:\n\n    Usage: ampy [OPTIONS] COMMAND [ARGS]...\n\n      ampy - Adafruit MicroPython Tool\n\n      Ampy is a tool to control MicroPython boards over a serial connection.\n      Using ampy you can manipulate files on the board's internal filesystem and\n      even run scripts.\n\n    Options:\n      -p, --port PORT  Name of serial port for connected board.  [required]\n      -b, --baud BAUD  Baud rate for the serial connection. (default 115200)\n      -d, --delay DELAY Delay in seconds before entering RAW MODE (default 0)\n      --help           Show this message and exit.\n\n    Commands:\n      get  Retrieve a file from the board.\n      ls   List contents of a directory on the board.\n      put  Put a file on the board.\n      rm   Remove a file from the board.\n      run  Run a script and print its output.\n\nIf you'd like to install from the Github source then use the standard Python\nsetup.py install (or develop mode):\n\n    python3 setup.py install\n\nNote to run the unit tests on Python 2 you must install the mock library:\n\n    pip install mock\n\n## Usage\n\nAmpy is made to talk to a CircuitPython MicroPython board over its serial connection.  You will\nneed your board connected and any drivers to access it serial port installed.\nThen for example to list the files on the board run a command like:\n\n    ampy --port /dev/tty.SLAB_USBtoUART ls\n\nYou should see a list of files on the board's root directory printed to the\nterminal.  Note that you'll need to change the port parameter to the name or path\nto the serial port that the MicroPython board is connected to.\n\nOther commands are available, run ampy with --help to see more information:\n\n    ampy --help\n\nEach subcommand has its own help, for example to see help for the ls command  run (note you\nunfortunately must have a board connected and serial port specified):\n\n    ampy --port /dev/tty.SLAB_USBtoUART ls --help\n\n## Configuration\n\nFor convenience you can set an `AMPY_PORT` environment variable which will be used\nif the port parameter is not specified.  For example on Linux or OSX:\n\n    export AMPY_PORT=/dev/tty.SLAB_USBtoUART\n    ampy ls\n\nOr on Windows (untested) try the SET command:\n\n    set AMPY_PORT=COM4\n    ampy ls\n\nSimilarly, you can set `AMPY_BAUD` and `AMPY_DELAY` to control your baud rate and\nthe delay before entering RAW MODE.\n\nTo set these variables automatically each time you run `ampy`, copy them into a\nfile named `.ampy`:\n\n```sh\n# Example .ampy file\n# Please fill in your own port, baud rate, and delay\nAMPY_PORT=/dev/cu.wchusbserial1410\nAMPY_BAUD=115200\n# Fix for macOS users' \"Could not enter raw repl\"; try 2.0 and lower from there:\nAMPY_DELAY=0.5\n```\n\nYou can put the `.ampy` file in your working directory, one of its parents, or in\nyour home directory.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/encukou/ampy", "keywords": "ampy hardware micropython", "license": "MIT", "maintainer": "Petr Viktorin", "maintainer_email": "encukou@gmail.com.com", "name": "encukou-ampy", "package_url": "https://pypi.org/project/encukou-ampy/", "platform": "", "project_url": "https://pypi.org/project/encukou-ampy/", "project_urls": {"Homepage": "https://github.com/encukou/ampy"}, "release_url": "https://pypi.org/project/encukou-ampy/1.0.7.1/", "requires_dist": ["click", "pyserial", "python-dotenv"], "requires_python": "", "summary": "ampy (Adafruit MicroPython tool) is a command line tool to interact with a CircuitPython or MicroPython board over a serial connection.", "version": "1.0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>encukou-ampy</h2>\n<p>This is an experimental fork of <code>adafruit-ampy</code> that tries to fix an issue on\nWindows 10.</p>\n<h2>ampy</h2>\n<p>Adafruit MicroPython Tool (ampy) - Utility to interact with a CircuitPython or MicroPython board over a serial connection.</p>\n<p>Ampy is meant to be a simple command line tool to manipulate files and run code on a CircuitPython or\nMicroPython board over its serial connection.\nWith ampy you can send files from your computer to the\nboard's file system, download files from a board to your computer, and even send a Python script\nto a board to be executed.</p>\n<p>Note that ampy by design is meant to be simple and does not support advanced interaction like a shell\nor terminal to send input to a board.  Check out other MicroPython tools\nlike <a href=\"https://github.com/dhylands/rshell\" rel=\"nofollow\">rshell</a>\nor <a href=\"https://github.com/wendlers/mpfshell\" rel=\"nofollow\">mpfshell</a> for more advanced interaction with boards.</p>\n<h2>Installation</h2>\n<p>You can use ampy with either Python 2.7.x or 3.x and can install it easily from\nPython's package index.  On MacOS or Linux, in a terminal run the following command (assuming\nPython 3):</p>\n<pre><code>pip3 install --user encukou-ampy\n</code></pre>\n<p>On Windows, do:</p>\n<pre><code>pip install encukou-ampy\n</code></pre>\n<p>Note on some Linux and Mac OSX systems you might need to run as root with sudo:</p>\n<pre><code>sudo pip3 install encukou-ampy\n</code></pre>\n<p>If you don't have Python 3 then try using Python 2 with:</p>\n<pre><code>pip install encukou-ampy\n</code></pre>\n<p>Once installed verify you can run the ampy program and get help output:</p>\n<pre><code>ampy --help\n</code></pre>\n<p>You should see usage information displayed like below:</p>\n<pre><code>Usage: ampy [OPTIONS] COMMAND [ARGS]...\n\n  ampy - Adafruit MicroPython Tool\n\n  Ampy is a tool to control MicroPython boards over a serial connection.\n  Using ampy you can manipulate files on the board's internal filesystem and\n  even run scripts.\n\nOptions:\n  -p, --port PORT  Name of serial port for connected board.  [required]\n  -b, --baud BAUD  Baud rate for the serial connection. (default 115200)\n  -d, --delay DELAY Delay in seconds before entering RAW MODE (default 0)\n  --help           Show this message and exit.\n\nCommands:\n  get  Retrieve a file from the board.\n  ls   List contents of a directory on the board.\n  put  Put a file on the board.\n  rm   Remove a file from the board.\n  run  Run a script and print its output.\n</code></pre>\n<p>If you'd like to install from the Github source then use the standard Python\nsetup.py install (or develop mode):</p>\n<pre><code>python3 setup.py install\n</code></pre>\n<p>Note to run the unit tests on Python 2 you must install the mock library:</p>\n<pre><code>pip install mock\n</code></pre>\n<h2>Usage</h2>\n<p>Ampy is made to talk to a CircuitPython MicroPython board over its serial connection.  You will\nneed your board connected and any drivers to access it serial port installed.\nThen for example to list the files on the board run a command like:</p>\n<pre><code>ampy --port /dev/tty.SLAB_USBtoUART ls\n</code></pre>\n<p>You should see a list of files on the board's root directory printed to the\nterminal.  Note that you'll need to change the port parameter to the name or path\nto the serial port that the MicroPython board is connected to.</p>\n<p>Other commands are available, run ampy with --help to see more information:</p>\n<pre><code>ampy --help\n</code></pre>\n<p>Each subcommand has its own help, for example to see help for the ls command  run (note you\nunfortunately must have a board connected and serial port specified):</p>\n<pre><code>ampy --port /dev/tty.SLAB_USBtoUART ls --help\n</code></pre>\n<h2>Configuration</h2>\n<p>For convenience you can set an <code>AMPY_PORT</code> environment variable which will be used\nif the port parameter is not specified.  For example on Linux or OSX:</p>\n<pre><code>export AMPY_PORT=/dev/tty.SLAB_USBtoUART\nampy ls\n</code></pre>\n<p>Or on Windows (untested) try the SET command:</p>\n<pre><code>set AMPY_PORT=COM4\nampy ls\n</code></pre>\n<p>Similarly, you can set <code>AMPY_BAUD</code> and <code>AMPY_DELAY</code> to control your baud rate and\nthe delay before entering RAW MODE.</p>\n<p>To set these variables automatically each time you run <code>ampy</code>, copy them into a\nfile named <code>.ampy</code>:</p>\n<pre><span class=\"c1\"># Example .ampy file</span>\n<span class=\"c1\"># Please fill in your own port, baud rate, and delay</span>\n<span class=\"nv\">AMPY_PORT</span><span class=\"o\">=</span>/dev/cu.wchusbserial1410\n<span class=\"nv\">AMPY_BAUD</span><span class=\"o\">=</span><span class=\"m\">115200</span>\n<span class=\"c1\"># Fix for macOS users' \"Could not enter raw repl\"; try 2.0 and lower from there:</span>\n<span class=\"nv\">AMPY_DELAY</span><span class=\"o\">=</span><span class=\"m\">0</span>.5\n</pre>\n<p>You can put the <code>.ampy</code> file in your working directory, one of its parents, or in\nyour home directory.</p>\n\n          </div>"}, "last_serial": 5380768, "releases": {"1.0.7.1": [{"comment_text": "", "digests": {"md5": "5b7be0b8e041106bc33753be65e6dd79", "sha256": "9686e05a07e27112ce3b4def8f7333067c73d656e3eca61c17948b913cd6b0f6"}, "downloads": -1, "filename": "encukou_ampy-1.0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b7be0b8e041106bc33753be65e6dd79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16770, "upload_time": "2019-06-10T11:27:49", "upload_time_iso_8601": "2019-06-10T11:27:49.549855Z", "url": "https://files.pythonhosted.org/packages/cc/84/938d2832d179b6b1e163774f9e787b2ca754798c438e0fdab8c90862e649/encukou_ampy-1.0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6665e5bb74ec4ec45257a2bddf764e31", "sha256": "307d3319c5e5da2cec73ce80847808ecad9108827a77be2ed1fa4bec2a09b805"}, "downloads": -1, "filename": "encukou-ampy-1.0.7.1.tar.gz", "has_sig": false, "md5_digest": "6665e5bb74ec4ec45257a2bddf764e31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18445, "upload_time": "2019-06-10T11:27:52", "upload_time_iso_8601": "2019-06-10T11:27:52.075211Z", "url": "https://files.pythonhosted.org/packages/0e/73/725e3b766c5dd11d5f558b00f9766f851dd8778b94675016a7b10ef22a6e/encukou-ampy-1.0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b7be0b8e041106bc33753be65e6dd79", "sha256": "9686e05a07e27112ce3b4def8f7333067c73d656e3eca61c17948b913cd6b0f6"}, "downloads": -1, "filename": "encukou_ampy-1.0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b7be0b8e041106bc33753be65e6dd79", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16770, "upload_time": "2019-06-10T11:27:49", "upload_time_iso_8601": "2019-06-10T11:27:49.549855Z", "url": "https://files.pythonhosted.org/packages/cc/84/938d2832d179b6b1e163774f9e787b2ca754798c438e0fdab8c90862e649/encukou_ampy-1.0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6665e5bb74ec4ec45257a2bddf764e31", "sha256": "307d3319c5e5da2cec73ce80847808ecad9108827a77be2ed1fa4bec2a09b805"}, "downloads": -1, "filename": "encukou-ampy-1.0.7.1.tar.gz", "has_sig": false, "md5_digest": "6665e5bb74ec4ec45257a2bddf764e31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18445, "upload_time": "2019-06-10T11:27:52", "upload_time_iso_8601": "2019-06-10T11:27:52.075211Z", "url": "https://files.pythonhosted.org/packages/0e/73/725e3b766c5dd11d5f558b00f9766f851dd8778b94675016a7b10ef22a6e/encukou-ampy-1.0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:25 2020"}