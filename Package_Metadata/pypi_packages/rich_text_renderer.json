{"info": {"author": "Contentful GmbH (David Litvak Bruno)", "author_email": "david.litvak@contentful.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "Contentful Rich Text Renderer\n===================================\n\n`Contentful <https://www.contentful.com>`_ provides a content infrastructure for digital teams to power content in websites, apps, and devices. Unlike a CMS, Contentful was built to integrate with the modern software stack. It offers a central hub for structured content, powerful management and delivery APIs, and a customizable web app that enable developers and content creators to ship digital products faster.\n\nThis library provides rendering capabilities for the ``RichText`` field type. It is recommended to be used alongside the `Contentful Delivery SDK <https://www.github.com/contentful/contentful.py>`.\nBy default this library will serialize ``RichText`` fields into it's corresponding HTML representation. All behaviour can be overridden to serialize to different formats.\n\nInstallation\n------------\n\nInstall Contentful Rich Text Renderer from the Python Package Index::\n\n    pip install rich_text_renderer\n\nUsage\n-----\n\nCreate a renderer::\n\n    from rich_text_renderer import RichTextRenderer\n\n    renderer = RichTextRenderer()\n\nRender your document::\n\n    renderer.render(document)\n\nUsing different renderers\n-------------------------\n\nThere are many cases in which HTML serialization is not what you want.\nTherefore, all renderers are overridable when creating a `rich_text_renderer.RichTextRenderer <rich_text_renderer.RichTextRenderer>`.\n\nAlso, if you're planning to embed entries within your rich text, overriding the ``'embedded-entry-block'`` option is a must,\nas by default it only does ``<div>str(entry)</div>``.\n\nYou can override the configuration like follows::\n\n    renderer = RichTextRenderer({\n        'embedded-entry-block': MyEntryBlockRenderer\n    })\n\nWhere ``MyEntryBlockRenderer`` requires to have a ``render(self, node)`` method and needs to return a string, also it requires to be initialized with a ``dict`` containing mappings for all renderers.\n\nAn example entry renderer, assuming our entry has 2 fields called ``name`` and ``description`` could be::\n\n    from rich_text_renderer.base_node_renderer import BaseNodeRenderer\n\n    # BaseNodeRenderer implements the `__init__` method required.\n    class MyEntryBlockRenderer(BaseNodeRenderer):\n        def render(self, node):\n            entry = node['data']['target']\n\n            return \"<div class='my-entry'><h3>{0}</h3><p><small>{1}</p></small></div>\".format(\n                entry.name,\n                entry.description\n            )\n\nDealing with unknown node types\n-------------------------------\n\nBy default, this library will treat all unknown node types as errors and will raise an exception letting the user know which node mapping is missing.\nIf you wish to remove this behaviour then replace the ``None`` key of the mapping with a ``NullRenderer`` that returns an empty string, or something similar.\n\nAn example would be like follows::\n\n    class SilentNullRenderer(BaseNodeRenderer):\n        def render(node):\n            return \"\"\n\n    renderer = RichTextRenderer({\n        None: SilentNullRenderer\n    })\n\nLicense\n-------\n\nCopyright (c) 2018 Contentful GmbH. See `LICENSE <./LICENSE>`_ for further details.\n\nContributing\n------------\n\nFeel free to improve this tool by submitting a Pull Request.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/contentful/rich-text-renderer.py", "keywords": "contentful delivery cda cms content", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rich_text_renderer", "package_url": "https://pypi.org/project/rich_text_renderer/", "platform": "", "project_url": "https://pypi.org/project/rich_text_renderer/", "project_urls": {"Homepage": "https://github.com/contentful/rich-text-renderer.py"}, "release_url": "https://pypi.org/project/rich_text_renderer/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "Contentful Rich Text Renderer", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.contentful.com\" rel=\"nofollow\">Contentful</a> provides a content infrastructure for digital teams to power content in websites, apps, and devices. Unlike a CMS, Contentful was built to integrate with the modern software stack. It offers a central hub for structured content, powerful management and delivery APIs, and a customizable web app that enable developers and content creators to ship digital products faster.</p>\n<p>This library provides rendering capabilities for the <tt>RichText</tt> field type. It is recommended to be used alongside the <cite>Contentful Delivery SDK &lt;https://www.github.com/contentful/contentful.py&gt;</cite>.\nBy default this library will serialize <tt>RichText</tt> fields into it\u2019s corresponding HTML representation. All behaviour can be overridden to serialize to different formats.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install Contentful Rich Text Renderer from the Python Package Index:</p>\n<pre>pip install rich_text_renderer\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a renderer:</p>\n<pre>from rich_text_renderer import RichTextRenderer\n\nrenderer = RichTextRenderer()\n</pre>\n<p>Render your document:</p>\n<pre>renderer.render(document)\n</pre>\n</div>\n<div id=\"using-different-renderers\">\n<h2>Using different renderers</h2>\n<p>There are many cases in which HTML serialization is not what you want.\nTherefore, all renderers are overridable when creating a <cite>rich_text_renderer.RichTextRenderer &lt;rich_text_renderer.RichTextRenderer&gt;</cite>.</p>\n<p>Also, if you\u2019re planning to embed entries within your rich text, overriding the <tt><span class=\"pre\">'embedded-entry-block'</span></tt> option is a must,\nas by default it only does <tt><span class=\"pre\">&lt;div&gt;str(entry)&lt;/div&gt;</span></tt>.</p>\n<p>You can override the configuration like follows:</p>\n<pre>renderer = RichTextRenderer({\n    'embedded-entry-block': MyEntryBlockRenderer\n})\n</pre>\n<p>Where <tt>MyEntryBlockRenderer</tt> requires to have a <tt>render(self, node)</tt> method and needs to return a string, also it requires to be initialized with a <tt>dict</tt> containing mappings for all renderers.</p>\n<p>An example entry renderer, assuming our entry has 2 fields called <tt>name</tt> and <tt>description</tt> could be:</p>\n<pre>from rich_text_renderer.base_node_renderer import BaseNodeRenderer\n\n# BaseNodeRenderer implements the `__init__` method required.\nclass MyEntryBlockRenderer(BaseNodeRenderer):\n    def render(self, node):\n        entry = node['data']['target']\n\n        return \"&lt;div class='my-entry'&gt;&lt;h3&gt;{0}&lt;/h3&gt;&lt;p&gt;&lt;small&gt;{1}&lt;/p&gt;&lt;/small&gt;&lt;/div&gt;\".format(\n            entry.name,\n            entry.description\n        )\n</pre>\n</div>\n<div id=\"dealing-with-unknown-node-types\">\n<h2>Dealing with unknown node types</h2>\n<p>By default, this library will treat all unknown node types as errors and will raise an exception letting the user know which node mapping is missing.\nIf you wish to remove this behaviour then replace the <tt>None</tt> key of the mapping with a <tt>NullRenderer</tt> that returns an empty string, or something similar.</p>\n<p>An example would be like follows:</p>\n<pre>class SilentNullRenderer(BaseNodeRenderer):\n    def render(node):\n        return \"\"\n\nrenderer = RichTextRenderer({\n    None: SilentNullRenderer\n})\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2018 Contentful GmbH. See <a href=\"./LICENSE\" rel=\"nofollow\">LICENSE</a> for further details.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Feel free to improve this tool by submitting a Pull Request.</p>\n</div>\n\n          </div>"}, "last_serial": 6206913, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ecf83acecc2bd4893d610098540e9e93", "sha256": "bf5e88de8a6924f656ed227427a1042b3ba1779808af094dd704a940c349dd90"}, "downloads": -1, "filename": "rich_text_renderer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ecf83acecc2bd4893d610098540e9e93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4451, "upload_time": "2018-10-15T15:03:07", "upload_time_iso_8601": "2018-10-15T15:03:07.823626Z", "url": "https://files.pythonhosted.org/packages/aa/52/ee0454221d817a327b880b66953d1a42fa51c325a06ee7a70c546d8ad391/rich_text_renderer-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5dc77c86795a4c9ef42da9961ce0c1ad", "sha256": "265cc2c208f8c7d094a307a0ba475ad176cddad96cba41c2b606eacf5422117a"}, "downloads": -1, "filename": "rich_text_renderer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5dc77c86795a4c9ef42da9961ce0c1ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4980, "upload_time": "2018-10-24T08:49:27", "upload_time_iso_8601": "2018-10-24T08:49:27.980714Z", "url": "https://files.pythonhosted.org/packages/7a/b3/95f76b2f9d979b1047a405b058696626eb218c525a5f197731f55969d93f/rich_text_renderer-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "823b2ae494faa1c2d6574bb16fa9c1f2", "sha256": "1061a76f7dfde69ce8ea4938c2218d545b69135c23757be34b6480206e28c6a6"}, "downloads": -1, "filename": "rich_text_renderer-0.2.1.tar.gz", "has_sig": false, "md5_digest": "823b2ae494faa1c2d6574bb16fa9c1f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4984, "upload_time": "2018-10-26T09:44:39", "upload_time_iso_8601": "2018-10-26T09:44:39.453404Z", "url": "https://files.pythonhosted.org/packages/06/e0/7e83de734531b62961b11b3a5e9ca4e439b78ca9313714798d6d56543a6b/rich_text_renderer-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4b253d17f67c80f39b5d843ca0a0fc66", "sha256": "4bb018fb3717d76ca35e0dea731c30e7e79b9fc083e777570ddb24aeac9a546c"}, "downloads": -1, "filename": "rich_text_renderer-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4b253d17f67c80f39b5d843ca0a0fc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4994, "upload_time": "2018-11-08T13:42:09", "upload_time_iso_8601": "2018-11-08T13:42:09.267762Z", "url": "https://files.pythonhosted.org/packages/53/ac/5903382b553e3d016d0900e78153053a64c2b12fe9f33a71ef9aff1dc6ef/rich_text_renderer-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c9033aae759270d2697eb6f118a75dad", "sha256": "0b300e091ec39f2d6e10c49b7191f10726d2afffb886d55a59211db00f83cad2"}, "downloads": -1, "filename": "rich_text_renderer-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c9033aae759270d2697eb6f118a75dad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5011, "upload_time": "2018-11-28T10:46:26", "upload_time_iso_8601": "2018-11-28T10:46:26.734357Z", "url": "https://files.pythonhosted.org/packages/e4/87/400c90a73a833cb0fc2a46f22d0ae88451dd78cddb950f4af51123387290/rich_text_renderer-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "d8a97e405583e1dd279dae30cca4687c", "sha256": "1363679aa1873a411d5cc461330143489727488f0b7a64688b8a088e93a7d53d"}, "downloads": -1, "filename": "rich_text_renderer-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d8a97e405583e1dd279dae30cca4687c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5202, "upload_time": "2019-11-27T09:29:47", "upload_time_iso_8601": "2019-11-27T09:29:47.953131Z", "url": "https://files.pythonhosted.org/packages/7b/dc/2f6b927672c186ab869a58591425311fe7c9bf327653f7b894a61d4ed4cd/rich_text_renderer-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8a97e405583e1dd279dae30cca4687c", "sha256": "1363679aa1873a411d5cc461330143489727488f0b7a64688b8a088e93a7d53d"}, "downloads": -1, "filename": "rich_text_renderer-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d8a97e405583e1dd279dae30cca4687c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5202, "upload_time": "2019-11-27T09:29:47", "upload_time_iso_8601": "2019-11-27T09:29:47.953131Z", "url": "https://files.pythonhosted.org/packages/7b/dc/2f6b927672c186ab869a58591425311fe7c9bf327653f7b894a61d4ed4cd/rich_text_renderer-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:45 2020"}