{"info": {"author": "Michael P. J. Camilleri", "author_email": "michael.p.camilleri@ed.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "# mpctools\nA set of python tools for extending standard (and non-standard) libraries. These originated from\n my own needs and those of my students, and I decided to put them here in case they may be useful\n to other people.\n\n## Features\n\nThe library currently contains the following two packages:\n 1. `extensions`: A number of extensions to numpy, sklearn, pandas and matplotlib, as well as general-purpose utilities.\n 2. `parallel`: A set of tools for wrapping pathos multiprocessing in a simple easy to use interface with multiple\n     parallel workers. \n \nEventually, I plan to add a neural toolbox.\n\nMore details for each library are provided as doxygen-style comments in the modules.\n\n## Setting up\n\n### Requirements\n\nThis Library has the following dependencies:\n  * scikit-learn\n  * matplotlib\n  * seaborn\n  * pandas\n  * pathos\n  * scipy\n  * numpy\n  \nIn most cases, the above can be automatically installed through the library itself (i.e. pip will attempt to download \nthem). If this causes issues, just install them manually.\n\nThere is an additional requirement for opencv: however, this is not included in the list of requirements for the reason that\nsome people may wish to build it from source. This is required for example if one wishes to use non open-source encoders: in this\ncase, I have provided a blog-post about how to do this on my \n[webpage](https://michaelpjcamilleri.wordpress.com/2019/03/21/installing-opencv-with-all-the-bells-and-whistles/).\nOtherwise, you can either chose to ignore it if you are not going to use the CV extensions module (cvext),\nor install the stock open-cv wrapper for python:\n```bash\npip install opencv-python\n```\n\n### Installing\n\nThe project is available on [PyPi](https://pypi.org/project/mpctools/0.4.0/), and hence the\n latest (stable) release can be installed simply:\n  ```shell script\n  pip install mpctools\n  ```\nAlternatively, you may choose to install directly from source. This has the added advantage that if \nyou change any of the implementations, the changes will be reflected without having to rebuild. \nHowever, you will have to manually download the source (via git or just zipped and then extracted):\n  ```shell script\n  python setup.py build develop --no-deps\n  ```\n\n### Known Issues\n\n * **Python 3.7: parallel.IWorker** - There seems to be an incompatibility in pathos with python 3.7, which is causing\n it to  default to pickle rather than dill, and sometimes preventing abc-derived classes (namely the IWorker instance)\n from  being pickled. If this happens to you, just make your worker a standard class and copy the initialiser and \n `update_progress` methods from IWorker. We are working on a solution to this.\n * **parallel Blocking** - If the program seems to hang for no reason, it could be that one of the child processes died\n maybe due  to a memory overlow... if this happens, try to limit the amount of memory usage by each IWorker.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/michael-camilleri/mpctools/archive/v_0401.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michael-camilleri/mpctools", "keywords": "extensions,parallel,utilities", "license": "GNU GPL", "maintainer": "", "maintainer_email": "", "name": "mpctools", "package_url": "https://pypi.org/project/mpctools/", "platform": "", "project_url": "https://pypi.org/project/mpctools/", "project_urls": {"Download": "https://github.com/michael-camilleri/mpctools/archive/v_0401.tar.gz", "Homepage": "https://github.com/michael-camilleri/mpctools"}, "release_url": "https://pypi.org/project/mpctools/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "A set of tools and utilities for extending common libraries and providing parallel capabilities.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mpctools</h1>\n<p>A set of python tools for extending standard (and non-standard) libraries. These originated from\nmy own needs and those of my students, and I decided to put them here in case they may be useful\nto other people.</p>\n<h2>Features</h2>\n<p>The library currently contains the following two packages:</p>\n<ol>\n<li><code>extensions</code>: A number of extensions to numpy, sklearn, pandas and matplotlib, as well as general-purpose utilities.</li>\n<li><code>parallel</code>: A set of tools for wrapping pathos multiprocessing in a simple easy to use interface with multiple\nparallel workers.</li>\n</ol>\n<p>Eventually, I plan to add a neural toolbox.</p>\n<p>More details for each library are provided as doxygen-style comments in the modules.</p>\n<h2>Setting up</h2>\n<h3>Requirements</h3>\n<p>This Library has the following dependencies:</p>\n<ul>\n<li>scikit-learn</li>\n<li>matplotlib</li>\n<li>seaborn</li>\n<li>pandas</li>\n<li>pathos</li>\n<li>scipy</li>\n<li>numpy</li>\n</ul>\n<p>In most cases, the above can be automatically installed through the library itself (i.e. pip will attempt to download\nthem). If this causes issues, just install them manually.</p>\n<p>There is an additional requirement for opencv: however, this is not included in the list of requirements for the reason that\nsome people may wish to build it from source. This is required for example if one wishes to use non open-source encoders: in this\ncase, I have provided a blog-post about how to do this on my\n<a href=\"https://michaelpjcamilleri.wordpress.com/2019/03/21/installing-opencv-with-all-the-bells-and-whistles/\" rel=\"nofollow\">webpage</a>.\nOtherwise, you can either chose to ignore it if you are not going to use the CV extensions module (cvext),\nor install the stock open-cv wrapper for python:</p>\n<pre>pip install opencv-python\n</pre>\n<h3>Installing</h3>\n<p>The project is available on <a href=\"https://pypi.org/project/mpctools/0.4.0/\" rel=\"nofollow\">PyPi</a>, and hence the\nlatest (stable) release can be installed simply:</p>\n<pre>pip install mpctools\n</pre>\n<p>Alternatively, you may choose to install directly from source. This has the added advantage that if\nyou change any of the implementations, the changes will be reflected without having to rebuild.\nHowever, you will have to manually download the source (via git or just zipped and then extracted):</p>\n<pre>python setup.py build develop --no-deps\n</pre>\n<h3>Known Issues</h3>\n<ul>\n<li><strong>Python 3.7: parallel.IWorker</strong> - There seems to be an incompatibility in pathos with python 3.7, which is causing\nit to  default to pickle rather than dill, and sometimes preventing abc-derived classes (namely the IWorker instance)\nfrom  being pickled. If this happens to you, just make your worker a standard class and copy the initialiser and\n<code>update_progress</code> methods from IWorker. We are working on a solution to this.</li>\n<li><strong>parallel Blocking</strong> - If the program seems to hang for no reason, it could be that one of the child processes died\nmaybe due  to a memory overlow... if this happens, try to limit the amount of memory usage by each IWorker.</li>\n</ul>\n\n          </div>"}, "last_serial": 7118943, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "060d93fd6e91cc68cc75e38772b773a9", "sha256": "4ec075a000562c8f5d47ae90995a3d470d5b74a505a2106844b10c2a5e86fe65"}, "downloads": -1, "filename": "mpctools-0.4.0.tar.gz", "has_sig": false, "md5_digest": "060d93fd6e91cc68cc75e38772b773a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31381, "upload_time": "2020-04-28T10:07:51", "upload_time_iso_8601": "2020-04-28T10:07:51.892602Z", "url": "https://files.pythonhosted.org/packages/1f/09/53cbae898f4e0d25a314e687519bee6d643f4288ba823a94776801380439/mpctools-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "441b8d00c295f3e32d40030cb2ffefb3", "sha256": "5026f6b2fee3fa18334cb6746f56742d656933e25ecddc4adee1075f6adf8fc5"}, "downloads": -1, "filename": "mpctools-0.4.1.tar.gz", "has_sig": false, "md5_digest": "441b8d00c295f3e32d40030cb2ffefb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32838, "upload_time": "2020-04-28T10:21:57", "upload_time_iso_8601": "2020-04-28T10:21:57.972979Z", "url": "https://files.pythonhosted.org/packages/41/f7/d82c3448d84b56f2445258d98284403be038dfd3d7a05fa1980545df2bab/mpctools-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "441b8d00c295f3e32d40030cb2ffefb3", "sha256": "5026f6b2fee3fa18334cb6746f56742d656933e25ecddc4adee1075f6adf8fc5"}, "downloads": -1, "filename": "mpctools-0.4.1.tar.gz", "has_sig": false, "md5_digest": "441b8d00c295f3e32d40030cb2ffefb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32838, "upload_time": "2020-04-28T10:21:57", "upload_time_iso_8601": "2020-04-28T10:21:57.972979Z", "url": "https://files.pythonhosted.org/packages/41/f7/d82c3448d84b56f2445258d98284403be038dfd3d7a05fa1980545df2bab/mpctools-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:19 2020"}