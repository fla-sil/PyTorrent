{"info": {"author": "Guillaume Plique", "author_email": "kropotkinepiotr@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/medialab/casanova.svg)](https://travis-ci.org/medialab/casanova)\n\n# Casanova\n\nIf you often find yourself reading CSV files using python, you will quickly notice that, while being more comfortable, `csv.DictReader` remains way slower than `csv.reader`:\n\n```\n# To read a 1.5G CSV file:\ncsv.reader: 24s\ncsv.DictReader: 84s\ncasanova.reader: 25s\ncsvmonkey: 3s\ncasanova_monkey.reader: 4s\n```\n\nCasanova is therefore an attempt to stick to `csv.reader` performance while still keeping a comfortable interface, still able to consider headers etc.\n\nCasanova is thus a good fit for you if you need to:\n\n* Stream large CSV files without running out of memory\n* Enrich the same CSV files by outputing a similar file, all while adding, filtering and editing cells.\n* Have the possibility to resume said enrichment if your process exited\n* Do so in a threadsafe fashion, and be able to resume even if your output does not have the same order as the input\n\n## Installation\n\nYou can install `casanova` with pip with the following command:\n\n```\npip install casanova\n```\n\nIf you want to be able to use the faster `casanova_monkey` namespace relying on the fantastic [csvmonkey](https://github.com/dw/csvmonkey) library, you will also need to install it alongside:\n\n```\npip install csvmonkey\n# If this fails, typically on ubuntu, run the following:\nsudo apt-get install clang\nCC=clang pip install csvmonkey\n```\n\nor you can also install `casanova` likewise:\n\n```\npip install casanova[monkey]\n```\n\n## Usage\n\n* [reader](#reader)\n* [enricher](#enricher)\n* [reverse_reader](#reverse_reader)\n\n## reader\n\nStraightforward CSV reader exposing some information and indices about the given file's headers.\n\n```python\nimport casanova\n\nwith open('./people.csv') as f:\n\n  # Creating a reader\n  reader = casanova.reader(f)\n\n  # Getting header information\n  reader.fieldnames\n  >>> ['name', 'surname']\n\n  reader.pos\n  >>> HeadersPositions(name=0, surname=1)\n\n  name_pos = reader.pos.name\n  name_pos = reader.pos['name']\n\n  'name' in reader.pos\n  >>> True\n\n  # Iterating over the rows\n  for row in reader:\n    name = row[name_pos] # it's better to cache your pos outside the loop\n    name = row[reader.pos.name] # this works, but is slower\n\n  # Intersted in a single column?\n  for name in reader.cells('name'):\n    print(name)\n\n  # Interested in several columns (handy but has a slight perf cost!)\n  for name, surname in reader.cells(['name', 'surname']):\n    print(name, surname)\n\n  # Need also the current row when iterating on cells?\n  for row, (name, surname) in reader.cells(['name', 'surname']):\n    print(row, name, surname)\n\n  # No headers? No problem.\n  reader = casanova.reader(f, no_headers=True)\n\n# Note that you can also create a reader from a path\nwith casanova.reader('./people.csv') as reader:\n  pass\n\n# And if you need exotic encodings\nwith casanova.reader('./people.csv', encoding='latin1') as reader:\n  pass\n\n# Readers can also be closed if you want to avoid context managers\nreader.close()\n```\n\n*casanova_monkey*\n\n```python\nimport casanova_monkey\n\n# NOTE: to rely on csvmonkey you will need to open the file in binary mode (e.g. \"rb\")!\nwith open('./people.csv', 'rb') as f:\n  reader = casanova_monkey.reader(f)\n\n  # For the lazy, slightly faster version\n  reader = casanova_monkey.reader(f, lazy=True)\n```\n\n*Arguments*\n\n* **file** *file|path*: file object to read or path to open.\n* **no_headers** *?bool* [`False`]: whether your CSV file is headless.\n* **lazy** *?bool* [`False`]: only for `casanova_monkey`, whether to yield `csvmonkey` raw lazy-decoding items or cast them as `list` for better compatibility.\n\n*Attributes*\n\n* **fieldnames** *list<str>*: field names in order.\n* **pos** *int|namedtuple<int>*: header positions object.\n\n## enricher\n\nThe enricher is basically a smart combination of a `csv.reader` and a `csv.writer`. It can be used to transform a given CSV file. You can then edit existing cells, add new ones and select which one from the input to keep in the output very easily, while remaining as performant as possible.\n\nWhat's more, casanova's enrichers are automatically resumable, meaning that if your process exits for whatever reason, it will be easy to restart where you left last time.\n\nAlso, if you need to output lines in an arbitrary order, typically when performing tasks in a multithreaded fashion (e.g. when fetching a large numbers of web pages), casanova exports a threadsafe version of its enricher. This enricher is also resumable thanks to a data structure you can read about in this blog [post](https://yomguithereal.github.io/posts/contiguous-range-set).\n\nResuming typically requires `O(n)` time, `n` being the number of lines already done but only consumes amortized `O(1)` memory.\n\n```python\nimport casanova\n\nwith open('./people.csv') as f, \\\n     open('./enriched-people.csv', 'w') as of:\n  enricher = casanova.enricher(f, of)\n\n  # The enricher inherits from casanova.reader\n  enricher.pos\n  >>> HeadersPositions(name=0, surname=1)\n\n  # You can iterate over its rows\n  name_pos = enricher.pos.name\n  for row in enricher:\n\n    # Editing a cell, so that everyone is called John\n    row[name_pos] = 'John'\n    enricher.writerow(row)\n\n  # Want to add columns?\n  enricher = casanova.enricher(f, of, add=['age', 'hair'])\n\n  for row in enricher:\n    enricher.writerow(row, ['34', 'blond'])\n\n  # Want to keep only some columns from input?\n  enricher = casanova.enricher(f, of, add=['age'], keep=['surname'])\n\n  for row in enricher:\n    enricher.writerow(row, ['45'])\n\n  # You can of course still use #.cells\n  for row, name in enricher.cells('name', with_rows=True):\n    print(row, name)\n```\n\n*Arguments*\n\n* **input_file** *file|str*: file object to read or path to open.\n* **output_file** *file*: file object to write.\n* **no_headers** *?bool* [`False`]: whether your CSV file is headless.\n* **add** *?iterable<str|int>*: names of columns to add to output.\n* **keep** *?iterable<str|int>*: names of colums to keep from input.\n* **resumable** *?bool* [`False`]: whether the enricher should be able to resume.\n* **listener** *?callable*: a function listening to the enricher's events.\n\n*Resuming an enricher*\n\n```python\nimport casanova\n\n# NOTE: to be able to resume you will need to open the output file with \"a+\"\nwith open('./people.csv') as f, \\\n     open('./enriched-people.csv', 'a+') as of:\n\n  # This will automatically start where it stopped last time\n  enricher = casanova.enricher(f, of, resumable=True)\n\n  for row in enricher:\n    row[1] = 'John'\n    enricher.writerow(row)\n\n  # You can also listen to events if you need to advance loading bars etc.\n  def listener(event, row):\n    print(event, row)\n\n  enricher = casanova.enricher(f, of, resumable=True, listener=listener)\n```\n\n*Threadsafe version*\n\nTo be safely resumable, the threadsafe version needs you to add an index column to the output so we can make sense of what was already done. Therefore, its `writerow` method is a bit different because it takes an additional argument being the original index of the row you need to enrich.\n\nTo help you doing so, all the enricher's iteration methods therefore yield the index alongside the row.\n\nNote finally that resuming is only possible if one line in the input is meant to produce exactly one line in the output.\n\n```python\nimport casanova\n\nwith open('./people.csv') as f, \\\n     open('./enriched-people.csv', 'w') as of:\n\n  enricher = casanova.threadsafe_enricher(f, of, add=['age', 'hair'])\n\n  for index, row in enricher:\n    enricher.writerow(index, row, ['67', 'blond'])\n```\n\n*Threadsafe arguments*\n\n* **index_column** *?str* [`index`]: name of the index column.\n\n*casanova_monkey*\n\n```python\nimport casanova_monkey\n\nwith open('./people.csv') as f, \\\n     open('./enriched-people.csv', 'w') as of:\n\n  enricher = casanova_monkey.enricher(f, of)\n  enricher = casanova_monkey.threadsafe_enricher(f, of)\n```\n\n## reverse_reader\n\ncasanova's reverse reader lets you read a CSV file backwards while still parsing its headers first. It looks silly but it is very useful if you need to read the last lines of a CSV file in constant time & memory when resuming some process.\n\nIt is basically identical to `casanova.reader` except lines will be yielded in reverse.\n\n```python\nimport casanova\n\nwith open('./people.csv', 'rb') as f:\n  reader = casanova.reverse_reader(f)\n\n  next(reader)\n  >>> ['Mr. Last', 'Line']\n\n# It also comes with a static helper if you only need to read last cell\nlast_surname = casanova.reverse_reader.last_cell('./people.csv', 'surname')\n>>> 'Mr. Last'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/medialab/casanova", "keywords": "csv", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "casanova", "package_url": "https://pypi.org/project/casanova/", "platform": "", "project_url": "https://pypi.org/project/casanova/", "project_urls": {"Homepage": "http://github.com/medialab/casanova"}, "release_url": "https://pypi.org/project/casanova/0.6.1/", "requires_dist": ["file-read-backwards (>=2.0.0)", "csvmonkey (==0.0.5) ; extra == 'monkey'"], "requires_python": ">=3.5", "summary": "Specialized & performant CSV readers, writers and enrichers for python.", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/medialab/casanova\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d774af10191007f8a29c16a13d040c4ad54c6a0f/68747470733a2f2f7472617669732d63692e6f72672f6d656469616c61622f636173616e6f76612e737667\"></a></p>\n<h1>Casanova</h1>\n<p>If you often find yourself reading CSV files using python, you will quickly notice that, while being more comfortable, <code>csv.DictReader</code> remains way slower than <code>csv.reader</code>:</p>\n<pre><code># To read a 1.5G CSV file:\ncsv.reader: 24s\ncsv.DictReader: 84s\ncasanova.reader: 25s\ncsvmonkey: 3s\ncasanova_monkey.reader: 4s\n</code></pre>\n<p>Casanova is therefore an attempt to stick to <code>csv.reader</code> performance while still keeping a comfortable interface, still able to consider headers etc.</p>\n<p>Casanova is thus a good fit for you if you need to:</p>\n<ul>\n<li>Stream large CSV files without running out of memory</li>\n<li>Enrich the same CSV files by outputing a similar file, all while adding, filtering and editing cells.</li>\n<li>Have the possibility to resume said enrichment if your process exited</li>\n<li>Do so in a threadsafe fashion, and be able to resume even if your output does not have the same order as the input</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install <code>casanova</code> with pip with the following command:</p>\n<pre><code>pip install casanova\n</code></pre>\n<p>If you want to be able to use the faster <code>casanova_monkey</code> namespace relying on the fantastic <a href=\"https://github.com/dw/csvmonkey\" rel=\"nofollow\">csvmonkey</a> library, you will also need to install it alongside:</p>\n<pre><code>pip install csvmonkey\n# If this fails, typically on ubuntu, run the following:\nsudo apt-get install clang\nCC=clang pip install csvmonkey\n</code></pre>\n<p>or you can also install <code>casanova</code> likewise:</p>\n<pre><code>pip install casanova[monkey]\n</code></pre>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"#reader\" rel=\"nofollow\">reader</a></li>\n<li><a href=\"#enricher\" rel=\"nofollow\">enricher</a></li>\n<li><a href=\"#reverse_reader\" rel=\"nofollow\">reverse_reader</a></li>\n</ul>\n<h2>reader</h2>\n<p>Straightforward CSV reader exposing some information and indices about the given file's headers.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n\n  <span class=\"c1\"># Creating a reader</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Getting header information</span>\n  <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">fieldnames</span>\n  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'surname'</span><span class=\"p\">]</span>\n\n  <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">pos</span>\n  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">HeadersPositions</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n  <span class=\"n\">name_pos</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">name</span>\n  <span class=\"n\">name_pos</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n\n  <span class=\"s1\">'name'</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">pos</span>\n  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kc\">True</span>\n\n  <span class=\"c1\"># Iterating over the rows</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">name_pos</span><span class=\"p\">]</span> <span class=\"c1\"># it's better to cache your pos outside the loop</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"c1\"># this works, but is slower</span>\n\n  <span class=\"c1\"># Intersted in a single column?</span>\n  <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Interested in several columns (handy but has a slight perf cost!)</span>\n  <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'surname'</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Need also the current row when iterating on cells?</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">([</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'surname'</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># No headers? No problem.</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">no_headers</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Note that you can also create a reader from a path</span>\n<span class=\"k\">with</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n  <span class=\"k\">pass</span>\n\n<span class=\"c1\"># And if you need exotic encodings</span>\n<span class=\"k\">with</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'latin1'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n  <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Readers can also be closed if you want to avoid context managers</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><em>casanova_monkey</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova_monkey</span>\n\n<span class=\"c1\"># NOTE: to rely on csvmonkey you will need to open the file in binary mode (e.g. \"rb\")!</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">casanova_monkey</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># For the lazy, slightly faster version</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">casanova_monkey</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>file</strong> <em>file|path</em>: file object to read or path to open.</li>\n<li><strong>no_headers</strong> <em>?bool</em> [<code>False</code>]: whether your CSV file is headless.</li>\n<li><strong>lazy</strong> <em>?bool</em> [<code>False</code>]: only for <code>casanova_monkey</code>, whether to yield <code>csvmonkey</code> raw lazy-decoding items or cast them as <code>list</code> for better compatibility.</li>\n</ul>\n<p><em>Attributes</em></p>\n<ul>\n<li><strong>fieldnames</strong> <em>list&lt;str&gt;</em>: field names in order.</li>\n<li><strong>pos</strong> <em>int|namedtuple&lt;int&gt;</em>: header positions object.</li>\n</ul>\n<h2>enricher</h2>\n<p>The enricher is basically a smart combination of a <code>csv.reader</code> and a <code>csv.writer</code>. It can be used to transform a given CSV file. You can then edit existing cells, add new ones and select which one from the input to keep in the output very easily, while remaining as performant as possible.</p>\n<p>What's more, casanova's enrichers are automatically resumable, meaning that if your process exits for whatever reason, it will be easy to restart where you left last time.</p>\n<p>Also, if you need to output lines in an arbitrary order, typically when performing tasks in a multithreaded fashion (e.g. when fetching a large numbers of web pages), casanova exports a threadsafe version of its enricher. This enricher is also resumable thanks to a data structure you can read about in this blog <a href=\"https://yomguithereal.github.io/posts/contiguous-range-set\" rel=\"nofollow\">post</a>.</p>\n<p>Resuming typically requires <code>O(n)</code> time, <code>n</code> being the number of lines already done but only consumes amortized <code>O(1)</code> memory.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">,</span> \\\n     <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./enriched-people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">of</span><span class=\"p\">:</span>\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># The enricher inherits from casanova.reader</span>\n  <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">pos</span>\n  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">HeadersPositions</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># You can iterate over its rows</span>\n  <span class=\"n\">name_pos</span> <span class=\"o\">=</span> <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">name</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># Editing a cell, so that everyone is called John</span>\n    <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">name_pos</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'John'</span>\n    <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Want to add columns?</span>\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'hair'</span><span class=\"p\">])</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"p\">:</span>\n    <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'34'</span><span class=\"p\">,</span> <span class=\"s1\">'blond'</span><span class=\"p\">])</span>\n\n  <span class=\"c1\"># Want to keep only some columns from input?</span>\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">],</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'surname'</span><span class=\"p\">])</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"p\">:</span>\n    <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'45'</span><span class=\"p\">])</span>\n\n  <span class=\"c1\"># You can of course still use #.cells</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">with_rows</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p><em>Arguments</em></p>\n<ul>\n<li><strong>input_file</strong> <em>file|str</em>: file object to read or path to open.</li>\n<li><strong>output_file</strong> <em>file</em>: file object to write.</li>\n<li><strong>no_headers</strong> <em>?bool</em> [<code>False</code>]: whether your CSV file is headless.</li>\n<li><strong>add</strong> <em>?iterable&lt;str|int&gt;</em>: names of columns to add to output.</li>\n<li><strong>keep</strong> <em>?iterable&lt;str|int&gt;</em>: names of colums to keep from input.</li>\n<li><strong>resumable</strong> <em>?bool</em> [<code>False</code>]: whether the enricher should be able to resume.</li>\n<li><strong>listener</strong> <em>?callable</em>: a function listening to the enricher's events.</li>\n</ul>\n<p><em>Resuming an enricher</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova</span>\n\n<span class=\"c1\"># NOTE: to be able to resume you will need to open the output file with \"a+\"</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">,</span> \\\n     <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./enriched-people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'a+'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">of</span><span class=\"p\">:</span>\n\n  <span class=\"c1\"># This will automatically start where it stopped last time</span>\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">resumable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"p\">:</span>\n    <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'John'</span>\n    <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># You can also listen to events if you need to advance loading bars etc.</span>\n  <span class=\"k\">def</span> <span class=\"nf\">listener</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span>\n\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">resumable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">listener</span><span class=\"o\">=</span><span class=\"n\">listener</span><span class=\"p\">)</span>\n</pre>\n<p><em>Threadsafe version</em></p>\n<p>To be safely resumable, the threadsafe version needs you to add an index column to the output so we can make sense of what was already done. Therefore, its <code>writerow</code> method is a bit different because it takes an additional argument being the original index of the row you need to enrich.</p>\n<p>To help you doing so, all the enricher's iteration methods therefore yield the index alongside the row.</p>\n<p>Note finally that resuming is only possible if one line in the input is meant to produce exactly one line in the output.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">,</span> \\\n     <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./enriched-people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">of</span><span class=\"p\">:</span>\n\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">threadsafe_enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">,</span> <span class=\"n\">add</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'hair'</span><span class=\"p\">])</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">enricher</span><span class=\"p\">:</span>\n    <span class=\"n\">enricher</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'67'</span><span class=\"p\">,</span> <span class=\"s1\">'blond'</span><span class=\"p\">])</span>\n</pre>\n<p><em>Threadsafe arguments</em></p>\n<ul>\n<li><strong>index_column</strong> <em>?str</em> [<code>index</code>]: name of the index column.</li>\n</ul>\n<p><em>casanova_monkey</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova_monkey</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">,</span> \\\n     <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./enriched-people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">of</span><span class=\"p\">:</span>\n\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova_monkey</span><span class=\"o\">.</span><span class=\"n\">enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">)</span>\n  <span class=\"n\">enricher</span> <span class=\"o\">=</span> <span class=\"n\">casanova_monkey</span><span class=\"o\">.</span><span class=\"n\">threadsafe_enricher</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">of</span><span class=\"p\">)</span>\n</pre>\n<h2>reverse_reader</h2>\n<p>casanova's reverse reader lets you read a CSV file backwards while still parsing its headers first. It looks silly but it is very useful if you need to read the last lines of a CSV file in constant time &amp; memory when resuming some process.</p>\n<p>It is basically identical to <code>casanova.reader</code> except lines will be yielded in reverse.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">casanova</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n  <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reverse_reader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n  <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n  <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'Mr. Last'</span><span class=\"p\">,</span> <span class=\"s1\">'Line'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># It also comes with a static helper if you only need to read last cell</span>\n<span class=\"n\">last_surname</span> <span class=\"o\">=</span> <span class=\"n\">casanova</span><span class=\"o\">.</span><span class=\"n\">reverse_reader</span><span class=\"o\">.</span><span class=\"n\">last_cell</span><span class=\"p\">(</span><span class=\"s1\">'./people.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'surname'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'Mr. Last'</span>\n</pre>\n\n          </div>"}, "last_serial": 7181177, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c74c73d9ef79a4649caec0d48b913681", "sha256": "19c1d2378eca2c03310d21823e9d5cb7bd75a43e4af328b0f20ab86715a37e50"}, "downloads": -1, "filename": "casanova-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c74c73d9ef79a4649caec0d48b913681", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 4592, "upload_time": "2020-04-10T15:53:12", "upload_time_iso_8601": "2020-04-10T15:53:12.236931Z", "url": "https://files.pythonhosted.org/packages/24/6e/6c3c693a6a1a824168f183e99ededd714f1db03a1be00034138aec4c37b2/casanova-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "977c865be6e3e6651bd7d90b525b362c", "sha256": "95633fe6b458e1609569f1d4e83435924a922ad52cbaaabcd6e56648a3137058"}, "downloads": -1, "filename": "casanova-0.1.0.tar.gz", "has_sig": false, "md5_digest": "977c865be6e3e6651bd7d90b525b362c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3153, "upload_time": "2020-04-10T15:53:14", "upload_time_iso_8601": "2020-04-10T15:53:14.477111Z", "url": "https://files.pythonhosted.org/packages/08/de/85c035c08f0553d44b5d58384865d9ac751692ba34923070da431e9591e7/casanova-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0c1404bd573acfec40e8a56d2477ad58", "sha256": "f5319ed0fc0bb9049bafd92834f2aa967ebe50297f778892376dcbf8245aef37"}, "downloads": -1, "filename": "casanova-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c1404bd573acfec40e8a56d2477ad58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8610, "upload_time": "2020-04-20T14:00:33", "upload_time_iso_8601": "2020-04-20T14:00:33.879885Z", "url": "https://files.pythonhosted.org/packages/a6/e2/b542959afed0dd1954c4ee3e19d78fbe2e4f94d6289049f6123c62d25e96/casanova-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f16036cb763db78c7d86fec9b489954", "sha256": "0faf1ce12a9286e10460dc16cda9f59c1f8eba6c757859169ff03682a2c330e1"}, "downloads": -1, "filename": "casanova-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0f16036cb763db78c7d86fec9b489954", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5825, "upload_time": "2020-04-20T14:00:35", "upload_time_iso_8601": "2020-04-20T14:00:35.019123Z", "url": "https://files.pythonhosted.org/packages/59/77/8cdfc7b9d18229a4f98c94f3a58df2835481a497a157a1a077e092019726/casanova-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c6a35d44171119b962763dc2a636b09b", "sha256": "2d0546ca0250760b2f958dcb33b5bd08e2dd99a9692a758d09f14031f59d4bfd"}, "downloads": -1, "filename": "casanova-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c6a35d44171119b962763dc2a636b09b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11560, "upload_time": "2020-04-21T20:38:14", "upload_time_iso_8601": "2020-04-21T20:38:14.363227Z", "url": "https://files.pythonhosted.org/packages/2f/e7/b7c81db325f99cc50a131288465984a901f35309d3c0f7e20a5a0861033f/casanova-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0dc8767a64e3b066141cf281dfc4195", "sha256": "015cdd60865e681d8cc408c72f4c41df8d240795c37128772cd7f497962eb6b0"}, "downloads": -1, "filename": "casanova-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d0dc8767a64e3b066141cf281dfc4195", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9569, "upload_time": "2020-04-21T20:38:15", "upload_time_iso_8601": "2020-04-21T20:38:15.669769Z", "url": "https://files.pythonhosted.org/packages/e8/f4/bbc6e6ff0a50169aedc88342e7db421bd94f30387af0ab24b27d629931ec/casanova-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4aebdb3d9183fa7c2069d84283ff9464", "sha256": "27d90b08663681b1d7a0aee4f9748e79aa51d6c7278dee120d3f220eee47f56f"}, "downloads": -1, "filename": "casanova-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4aebdb3d9183fa7c2069d84283ff9464", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11601, "upload_time": "2020-04-21T21:01:47", "upload_time_iso_8601": "2020-04-21T21:01:47.357940Z", "url": "https://files.pythonhosted.org/packages/d0/03/01eb0d9997549de3b11aa4612fe634481cc7e75dee88474ee44375d6d47f/casanova-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04b1584c4434ab8247d5ef3561a49a4c", "sha256": "515c7ae35c943402761a46ebe111320290b4fc6507f615aaa91e576f4256b273"}, "downloads": -1, "filename": "casanova-0.4.0.tar.gz", "has_sig": false, "md5_digest": "04b1584c4434ab8247d5ef3561a49a4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9614, "upload_time": "2020-04-21T21:01:49", "upload_time_iso_8601": "2020-04-21T21:01:49.049435Z", "url": "https://files.pythonhosted.org/packages/08/b6/e824de979c398332ac2c3e9a8fac417c427471204d36582fc0ffbe2b2026/casanova-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7e469df04fb991e863d888cb2ef95c07", "sha256": "57f993f9f387c412f2762e76c9c9671e6d57763375613af474d4318883612452"}, "downloads": -1, "filename": "casanova-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7e469df04fb991e863d888cb2ef95c07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11730, "upload_time": "2020-04-23T10:28:53", "upload_time_iso_8601": "2020-04-23T10:28:53.379731Z", "url": "https://files.pythonhosted.org/packages/db/5f/e36d05547c717641a48bcb4ecae0a7794b3b33f9cf6b2861ea51e238ff4e/casanova-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28a3e084bd9f8cf5e58ecad0068eb4c7", "sha256": "09cf9baeef8b5571779b132bc5b6cb806e7b8bc34fa351af84d184c1f0e8170e"}, "downloads": -1, "filename": "casanova-0.5.0.tar.gz", "has_sig": false, "md5_digest": "28a3e084bd9f8cf5e58ecad0068eb4c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9762, "upload_time": "2020-04-23T10:28:55", "upload_time_iso_8601": "2020-04-23T10:28:55.005192Z", "url": "https://files.pythonhosted.org/packages/60/fb/b0d6fa1e17d6f102cfd59eaf91eedef90a259ae147ff6cfbefeb010cf62b/casanova-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "34a5ebd8d168739c0669bd5dc618b4fc", "sha256": "660e9480fee6fc60af848b026bb0d9e099009032ebf925d214c07f7f54f32f78"}, "downloads": -1, "filename": "casanova-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "34a5ebd8d168739c0669bd5dc618b4fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13224, "upload_time": "2020-04-27T15:07:51", "upload_time_iso_8601": "2020-04-27T15:07:51.784410Z", "url": "https://files.pythonhosted.org/packages/60/6f/62e3e1c9c906154a894dd98209459dcba683d25ffc64451f14d71de58b71/casanova-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efae0f554d389eec8370d4fb7fe30f0e", "sha256": "76762024e7b79ed160e7eb232191174387473af5c0091f5875544f2243ff67de"}, "downloads": -1, "filename": "casanova-0.6.0.tar.gz", "has_sig": false, "md5_digest": "efae0f554d389eec8370d4fb7fe30f0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13184, "upload_time": "2020-04-27T15:07:53", "upload_time_iso_8601": "2020-04-27T15:07:53.111351Z", "url": "https://files.pythonhosted.org/packages/1e/52/97e2a8292f9ae30c8d81d300bdd05241a49694b788efe0c7448a64f222e9/casanova-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "f68fd8dfb595b1ec4a1f09f862b0401b", "sha256": "6c9d09cfcb4636a16c12d7a595689d01b5306ca2cf3ecfb6e930092ecb0e6a48"}, "downloads": -1, "filename": "casanova-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f68fd8dfb595b1ec4a1f09f862b0401b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13247, "upload_time": "2020-05-06T15:50:47", "upload_time_iso_8601": "2020-05-06T15:50:47.060004Z", "url": "https://files.pythonhosted.org/packages/07/c3/40b436ce0bad82c090a6b6163b367f3a2c1c8644fcd45c196176abe9841c/casanova-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "744e95e0b4facd84100ac7a2e513675e", "sha256": "114fa115a3d80f0d2e4fe34f2c76cc5eec06ac16e3ad0115db50ed66ccd55771"}, "downloads": -1, "filename": "casanova-0.6.1.tar.gz", "has_sig": false, "md5_digest": "744e95e0b4facd84100ac7a2e513675e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13257, "upload_time": "2020-05-06T15:50:48", "upload_time_iso_8601": "2020-05-06T15:50:48.453687Z", "url": "https://files.pythonhosted.org/packages/75/a6/c96731bf4f29b3123bd1de3a01dac558466bbd1506045a4df44e86a88553/casanova-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f68fd8dfb595b1ec4a1f09f862b0401b", "sha256": "6c9d09cfcb4636a16c12d7a595689d01b5306ca2cf3ecfb6e930092ecb0e6a48"}, "downloads": -1, "filename": "casanova-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f68fd8dfb595b1ec4a1f09f862b0401b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13247, "upload_time": "2020-05-06T15:50:47", "upload_time_iso_8601": "2020-05-06T15:50:47.060004Z", "url": "https://files.pythonhosted.org/packages/07/c3/40b436ce0bad82c090a6b6163b367f3a2c1c8644fcd45c196176abe9841c/casanova-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "744e95e0b4facd84100ac7a2e513675e", "sha256": "114fa115a3d80f0d2e4fe34f2c76cc5eec06ac16e3ad0115db50ed66ccd55771"}, "downloads": -1, "filename": "casanova-0.6.1.tar.gz", "has_sig": false, "md5_digest": "744e95e0b4facd84100ac7a2e513675e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13257, "upload_time": "2020-05-06T15:50:48", "upload_time_iso_8601": "2020-05-06T15:50:48.453687Z", "url": "https://files.pythonhosted.org/packages/75/a6/c96731bf4f29b3123bd1de3a01dac558466bbd1506045a4df44e86a88553/casanova-0.6.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:22 2020"}