{"info": {"author": "Lukas Vlcek", "author_email": "lukas.vlcek@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "Watch Elasticsearch CLI\n=======================\n\nCLI tool to pull statistics from Elasticsearch.\n\nBuild status\n------------\n\n.. image:: https://secure.travis-ci.org/ViaQ/watches-cli.png\n   :target: http://travis-ci.org/#!/ViaQ/watches-cli\n\nSupport Matrix\n--------------\n\nThe following combinations are regularly tested.\n\n=======  =============  ========\nwatches  Elasticsearch  Python\n=======  =============  ========\n1.0.3    2.4.4          2.7, 3.5\n-------  -------------  --------\n1.0.2    2.4.4          2.7, 3.5\n-------  -------------  --------\n1.0.1    2.4.4          2.7\n=======  =============  ========\n\n\nSynopsis\n--------\n\nThe tool uses `docopt <http://docopt.org/>`_ to describe command line language and supports the following options::\n\n    Usage:\n      watches cluster_health     [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--local --index=INDEX --level=LEVEL]\n      watches cluster_state      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--local --index=INDEX --metric=METRIC]\n      watches cluster_stats      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE]\n      watches nodes_stats        [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--metric=METRIC]\n      watches nodes_info         [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--node_id=NODE_ID --metric=METRIC]\n      watches indices_stats      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--level=LEVEL --index=INDEX]\n      watches nodes_hotthreads   [-i=INTERVAL -d=DURATION --url=URL -bsv] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--node_id=NODE_ID --threads=THREADS --delay=DELAY --type=TYPE]\n      watches just_nodes_stats   [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--metric=METRIC]\n      watches just_indices_stats [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--level=LEVEL --index=INDEX]\n      watches -h\n      watches --version\n\n    Options:\n      -d=DURATION, --duration=DURATION   How long the watches should run in seconds. Use value '-1' to run forever. [default: 0].\n      -i=INTERVAL, --interval=INTERVAL   Interval between data retrievals. Apply if 'duration' > 0. [default: 3].\n      --url=URL           URL of ES node HTTP endpoint [default: http://localhost:9200].\n      -b                  Disable python output buffering (not recommended for production use).\n      -l                  Single line output (no pretty-print JSON formatting).\n      -t, --timestamp     Add timestamp field to data. The value is local datetime converted to UTC in ISO 8601 format.\n      -s, --sniff         Turn on sniffing.\n      -v, --verbose       Print more debug info: input options, ... etc.\n      -f=FILTER, --filter_path=FILTER   Filter returned JSON (see http://elasticsearch-py.readthedocs.io/en/master/api.html#response-filtering)\n      --username=USERNAME Username to authenticate with\n      --password=PASSWORD Password to authenticate with\n      --cacert=CACERT     Path to Certification Authority Certificate pem file\n      --cert=CERT         Path to Client Certificate pem file\n      --key=KEY           Path to Client Key pem file\n      --level=LEVEL       Aggregation level of returned data, valid options: node/cluster, indices and shards [default: cluster].\n      --local             Return the local node information instead of master node [default: false].\n      --node_id=NODE_ID   A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from local node you're connecting to [default: ].\n      --index=INDEX       A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices.\n      --metric=METRIC     A comma-separated list of metric names; use `_all` or empty string to perform the operation for all metrics.\n      --threads=THREADS   Specify the number of threads to provide information for.\n      --delay=DELAY       Delay (interval) to do the second sampling of threads.\n      --type=TYPE         The type of threads to sample (default: cpu), valid choices are: 'cpu', 'wait', 'block'.\n      --transform=TYPE    Transform JSON response (see online doc for more details). Valid choices: 'nested'.\n      -h, --help          Show this screen.\n      --version           Show version.\n      --header=HEADER     Custom HTTP header to add to the request (e.g. --header=\"X-Proxy-Remote-User: username\")\n\n    Examples:\n      # Get cluster health from specified HTTP endpoint with added \"timestamp\" field in the response\n      $ watches cluster_health --timestamp --url=http://127.0.0.1:9200\n\n      # Get cluster health every 1 second, run forever until process is terminated\n      $ watches cluster_health --interval=1 --duration=-1\n\n      # Get cluster health every 1 second during next 10 seconds and use sniffing\n      $ watches cluster_health --interval=1 --duration=10 --sniff\n\n      # Alternatively, using short option notation\n      $ watches cluster_health -i 1 -d 10 -s\n\n      # Get cluster health from secured node\n      $ watches cluster_health \\\n          --url=https://localhots:9200 \\\n          --cacert /tmp/search-guard-ssl/example-pki-scripts/ca/chain-ca.pem \\\n          --cert /tmp/search-guard-ssl/example-pki-scripts/kirk.crt.pem \\\n          --key /tmp/search-guard-ssl/example-pki-scripts/kirk.key.pem\n\n      # Filter cluster health for status fields\n      $ watches cluster_health --level=shards -f status -f indices.*.status -f indices.*.shards.*.status\n\n      Notice:\n        Option --filter_path works under original context for commands 'just_nodes_stats' and 'just_indices_stats'.\n        For example, if command 'just_indices_stats' is called the 'indices_stats' command is executed first, then\n        --filter_path option is applied and only then the result data is transformed into 'just_indices_stats' output.\n\nTo connect to Elasticsearch cluster ``watches`` uses official\n`elasticsearch-py <https://github.com/elastic/elasticsearch-py/>`_ client which\ncan use `Sniffing <http://elasticsearch-py.readthedocs.io/en/master/index.html#sniffing>`_.\nIt is recommended to use ``--sniff`` option (see above) to enable sniffing for long running tasks.\n\nInstall\n-------\n\nIf you've cloned this project, and want to install the library (*and all\ndevelopment dependencies*), the command you'll want to run is::\n\n    $ pip install -e .[test]\n\nTest\n----\n\nIf you'd like to run all tests for this project, you would run the following command::\n\n    $ python setup.py test\n\nThis will trigger `py.test <http://pytest.org/latest/>`_, along with its popular\n`coverage <https://pypi.python.org/pypi/pytest-cov>`_ plugin.\n\nRead `Testing.md <./tests/Testing.md>`_ to learn more details.\n\nRelease\n-------\n\nIf you'd like to cut a new release of this CLI tool, and publish it to\nthe Python Package Index (`PyPI <https://pypi.python.org/pypi>`_), you can do so\nby following the following `tutorial <http://peterdowns.com/posts/first-time-with-pypi.html>`_\nor by running::\n\n    $ python setup.py sdist bdist_wheel\n    $ twine upload dist/*\n\nThis will build both a source tarball of your CLI tool, as well as a newer wheel\nbuild (*and this will, by default, run on all platforms*).\n\nThe ``twine upload`` command (which requires you to install the `twine\n<https://pypi.python.org/pypi/twine>`_ tool) will then securely upload your\nnew package to PyPI so everyone in the world can use it!\n\nDo not forget to update version by modifying `__init__.py <watches/__init__.py>`_\nand `setup.py <setup.py>`_ files (download URL and other if applicable).\n\nCredits\n-------\n\nBuilt on top of `skele-cli <https://github.com/rdegges/skele-cli.git>`_ skeleton, read\n`skele-cli blog post <https://stormpath.com/blog/building-simple-cli-interfaces-in-python>`_\nto learn more.\n\n\nLicense\n-------\n\nWatches CLI is licensed under the `Apache License, Version 2.0 <http://www.apache.org/licenses/>`_.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ViaQ/watches-cli/archive/v1.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ViaQ/watches-cli", "keywords": "cli,elasticsearch", "license": "ASL2", "maintainer": null, "maintainer_email": null, "name": "watches", "package_url": "https://pypi.org/project/watches/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/watches/", "project_urls": {"Download": "https://github.com/ViaQ/watches-cli/archive/v1.0.3.tar.gz", "Homepage": "https://github.com/ViaQ/watches-cli"}, "release_url": "https://pypi.org/project/watches/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "CLI tool to pull statistics from Elasticsearch.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>CLI tool to pull statistics from Elasticsearch.</p>\n<div id=\"build-status\">\n<h2>Build status</h2>\n<a href=\"http://travis-ci.org/#!/ViaQ/watches-cli\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/ViaQ/watches-cli.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7dbbc7ffe1cccd83b07204bee661da0e82ed56b/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f566961512f776174636865732d636c692e706e67\"></a>\n</div>\n<div id=\"support-matrix\">\n<h2>Support Matrix</h2>\n<p>The following combinations are regularly tested.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>watches</th>\n<th>Elasticsearch</th>\n<th>Python</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1.0.3</td>\n<td>2.4.4</td>\n<td>2.7, 3.5</td>\n</tr>\n<tr><td>1.0.2</td>\n<td>2.4.4</td>\n<td>2.7, 3.5</td>\n</tr>\n<tr><td>1.0.1</td>\n<td>2.4.4</td>\n<td>2.7</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<p>The tool uses <a href=\"http://docopt.org/\" rel=\"nofollow\">docopt</a> to describe command line language and supports the following options:</p>\n<pre>Usage:\n  watches cluster_health     [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--local --index=INDEX --level=LEVEL]\n  watches cluster_state      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--local --index=INDEX --metric=METRIC]\n  watches cluster_stats      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE]\n  watches nodes_stats        [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--metric=METRIC]\n  watches nodes_info         [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--node_id=NODE_ID --metric=METRIC]\n  watches indices_stats      [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--transform=TYPE] [--level=LEVEL --index=INDEX]\n  watches nodes_hotthreads   [-i=INTERVAL -d=DURATION --url=URL -bsv] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--node_id=NODE_ID --threads=THREADS --delay=DELAY --type=TYPE]\n  watches just_nodes_stats   [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--metric=METRIC]\n  watches just_indices_stats [-i=INTERVAL -d=DURATION --url=URL -bltsv -f=FILTER...] [(--cacert=CACERT --cert=CERT --key=KEY) | (--cacert=CACERT)] [(--username=USERNAME --password=PASSWORD)] [--header=HEADER...] [--level=LEVEL --index=INDEX]\n  watches -h\n  watches --version\n\nOptions:\n  -d=DURATION, --duration=DURATION   How long the watches should run in seconds. Use value '-1' to run forever. [default: 0].\n  -i=INTERVAL, --interval=INTERVAL   Interval between data retrievals. Apply if 'duration' &gt; 0. [default: 3].\n  --url=URL           URL of ES node HTTP endpoint [default: http://localhost:9200].\n  -b                  Disable python output buffering (not recommended for production use).\n  -l                  Single line output (no pretty-print JSON formatting).\n  -t, --timestamp     Add timestamp field to data. The value is local datetime converted to UTC in ISO 8601 format.\n  -s, --sniff         Turn on sniffing.\n  -v, --verbose       Print more debug info: input options, ... etc.\n  -f=FILTER, --filter_path=FILTER   Filter returned JSON (see http://elasticsearch-py.readthedocs.io/en/master/api.html#response-filtering)\n  --username=USERNAME Username to authenticate with\n  --password=PASSWORD Password to authenticate with\n  --cacert=CACERT     Path to Certification Authority Certificate pem file\n  --cert=CERT         Path to Client Certificate pem file\n  --key=KEY           Path to Client Key pem file\n  --level=LEVEL       Aggregation level of returned data, valid options: node/cluster, indices and shards [default: cluster].\n  --local             Return the local node information instead of master node [default: false].\n  --node_id=NODE_ID   A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from local node you're connecting to [default: ].\n  --index=INDEX       A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices.\n  --metric=METRIC     A comma-separated list of metric names; use `_all` or empty string to perform the operation for all metrics.\n  --threads=THREADS   Specify the number of threads to provide information for.\n  --delay=DELAY       Delay (interval) to do the second sampling of threads.\n  --type=TYPE         The type of threads to sample (default: cpu), valid choices are: 'cpu', 'wait', 'block'.\n  --transform=TYPE    Transform JSON response (see online doc for more details). Valid choices: 'nested'.\n  -h, --help          Show this screen.\n  --version           Show version.\n  --header=HEADER     Custom HTTP header to add to the request (e.g. --header=\"X-Proxy-Remote-User: username\")\n\nExamples:\n  # Get cluster health from specified HTTP endpoint with added \"timestamp\" field in the response\n  $ watches cluster_health --timestamp --url=http://127.0.0.1:9200\n\n  # Get cluster health every 1 second, run forever until process is terminated\n  $ watches cluster_health --interval=1 --duration=-1\n\n  # Get cluster health every 1 second during next 10 seconds and use sniffing\n  $ watches cluster_health --interval=1 --duration=10 --sniff\n\n  # Alternatively, using short option notation\n  $ watches cluster_health -i 1 -d 10 -s\n\n  # Get cluster health from secured node\n  $ watches cluster_health \\\n      --url=https://localhots:9200 \\\n      --cacert /tmp/search-guard-ssl/example-pki-scripts/ca/chain-ca.pem \\\n      --cert /tmp/search-guard-ssl/example-pki-scripts/kirk.crt.pem \\\n      --key /tmp/search-guard-ssl/example-pki-scripts/kirk.key.pem\n\n  # Filter cluster health for status fields\n  $ watches cluster_health --level=shards -f status -f indices.*.status -f indices.*.shards.*.status\n\n  Notice:\n    Option --filter_path works under original context for commands 'just_nodes_stats' and 'just_indices_stats'.\n    For example, if command 'just_indices_stats' is called the 'indices_stats' command is executed first, then\n    --filter_path option is applied and only then the result data is transformed into 'just_indices_stats' output.\n</pre>\n<p>To connect to Elasticsearch cluster <tt>watches</tt> uses official\n<a href=\"https://github.com/elastic/elasticsearch-py/\" rel=\"nofollow\">elasticsearch-py</a> client which\ncan use <a href=\"http://elasticsearch-py.readthedocs.io/en/master/index.html#sniffing\" rel=\"nofollow\">Sniffing</a>.\nIt is recommended to use <tt><span class=\"pre\">--sniff</span></tt> option (see above) to enable sniffing for long running tasks.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>If you\u2019ve cloned this project, and want to install the library (<em>and all\ndevelopment dependencies</em>), the command you\u2019ll want to run is:</p>\n<pre>$ pip install -e .[test]\n</pre>\n</div>\n<div id=\"test\">\n<h2>Test</h2>\n<p>If you\u2019d like to run all tests for this project, you would run the following command:</p>\n<pre>$ python setup.py test\n</pre>\n<p>This will trigger <a href=\"http://pytest.org/latest/\" rel=\"nofollow\">py.test</a>, along with its popular\n<a href=\"https://pypi.python.org/pypi/pytest-cov\" rel=\"nofollow\">coverage</a> plugin.</p>\n<p>Read <a href=\"./tests/Testing.md\" rel=\"nofollow\">Testing.md</a> to learn more details.</p>\n</div>\n<div id=\"release\">\n<h2>Release</h2>\n<p>If you\u2019d like to cut a new release of this CLI tool, and publish it to\nthe Python Package Index (<a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a>), you can do so\nby following the following <a href=\"http://peterdowns.com/posts/first-time-with-pypi.html\" rel=\"nofollow\">tutorial</a>\nor by running:</p>\n<pre>$ python setup.py sdist bdist_wheel\n$ twine upload dist/*\n</pre>\n<p>This will build both a source tarball of your CLI tool, as well as a newer wheel\nbuild (<em>and this will, by default, run on all platforms</em>).</p>\n<p>The <tt>twine upload</tt> command (which requires you to install the <a href=\"https://pypi.python.org/pypi/twine\" rel=\"nofollow\">twine</a> tool) will then securely upload your\nnew package to PyPI so everyone in the world can use it!</p>\n<p>Do not forget to update version by modifying <a href=\"watches/__init__.py\" rel=\"nofollow\">__init__.py</a>\nand <a href=\"setup.py\" rel=\"nofollow\">setup.py</a> files (download URL and other if applicable).</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Built on top of <a href=\"https://github.com/rdegges/skele-cli.git\" rel=\"nofollow\">skele-cli</a> skeleton, read\n<a href=\"https://stormpath.com/blog/building-simple-cli-interfaces-in-python\" rel=\"nofollow\">skele-cli blog post</a>\nto learn more.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Watches CLI is licensed under the <a href=\"http://www.apache.org/licenses/\" rel=\"nofollow\">Apache License, Version 2.0</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2932092, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "5115d3ceb5944689ccda368ba393bd02", "sha256": "5970b1390987c4a81aa1a41c1b3f792a3d513937a9846288378d24acb51f6bbb"}, "downloads": -1, "filename": "watches-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5115d3ceb5944689ccda368ba393bd02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37167, "upload_time": "2017-03-08T10:18:14", "upload_time_iso_8601": "2017-03-08T10:18:14.349951Z", "url": "https://files.pythonhosted.org/packages/98/0e/0fddb05b078e68dbfe5e20c291acfb0cf483d377968aa2cba1fd3b11a317/watches-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "632751f06367db5015269785c591831d", "sha256": "9b1b8a0695e90efe06dde4e1cb327a0f6fb544ae456103ced7db754d63ae24d9"}, "downloads": -1, "filename": "watches-1.0.2.tar.gz", "has_sig": false, "md5_digest": "632751f06367db5015269785c591831d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44096, "upload_time": "2017-04-18T08:16:01", "upload_time_iso_8601": "2017-04-18T08:16:01.185657Z", "url": "https://files.pythonhosted.org/packages/cd/21/8d499edd5cef41dad91c6e3e97f1a55b607bc8006f947cf8872037c6896a/watches-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "236e79f1dcb35df88f4b0e47781f8e5f", "sha256": "5600bc87d423c34dda95e7093d8f6506864bc8613698edbbe76230dad0ba5049"}, "downloads": -1, "filename": "watches-1.0.3.tar.gz", "has_sig": false, "md5_digest": "236e79f1dcb35df88f4b0e47781f8e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25125, "upload_time": "2017-06-07T12:50:57", "upload_time_iso_8601": "2017-06-07T12:50:57.735702Z", "url": "https://files.pythonhosted.org/packages/4a/b5/5a8bcc73192a88abbd9fae225e463b9206f827dc8aa3809fd1362a2bbeb0/watches-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "236e79f1dcb35df88f4b0e47781f8e5f", "sha256": "5600bc87d423c34dda95e7093d8f6506864bc8613698edbbe76230dad0ba5049"}, "downloads": -1, "filename": "watches-1.0.3.tar.gz", "has_sig": false, "md5_digest": "236e79f1dcb35df88f4b0e47781f8e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25125, "upload_time": "2017-06-07T12:50:57", "upload_time_iso_8601": "2017-06-07T12:50:57.735702Z", "url": "https://files.pythonhosted.org/packages/4a/b5/5a8bcc73192a88abbd9fae225e463b9206f827dc8aa3809fd1362a2bbeb0/watches-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:13 2020"}