{"info": {"author": "Scrapy developers", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Framework :: Django", "Framework :: Scrapy", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "=================\nscrapy-djangoitem\n=================\n\n.. image:: https://img.shields.io/pypi/v/scrapy-djangoitem.svg\n   :target: https://pypi.python.org/pypi/scrapy-djangoitem\n   :alt: PyPI Version\n\n.. image:: https://img.shields.io/travis/scrapy-plugins/scrapy-djangoitem/master.svg\n   :target: http://travis-ci.org/scrapy-plugins/scrapy-djangoitem\n   :alt: Build Status\n\n.. image:: https://img.shields.io/github/license/scrapy-plugins/scrapy-djangoitem.svg\n   :target: https://github.com/scrapy-plugins/scrapy-djangoitem/blob/master/LICENSE\n   :alt: License\n\n\n``scrapy-djangoitem`` is an extension that allows you to define `Scrapy items\n<http://doc.scrapy.org/en/latest/topics/items.html>`_ using existing `Django\nmodels <https://docs.djangoproject.com/en/latest/topics/db/models/>`_.\n\nThis utility provides a new class, named ``DjangoItem``, that you can use as a\nregular Scrapy item and link it to a Django model with its ``django_model``\nattribute. Start using it right away by importing it from this package::\n\n    from scrapy_djangoitem import DjangoItem\n\nInstallation\n============\n\nStarting with ``v1.1`` both ``Python 2.7`` and ``Python 3.4/3.5`` are\nsupported. For ``Python 3`` you need ``Scrapy v1.1`` or above.\n\nLatest tested Django version is ``Django 1.9``.\n\nInstall from ``PyPI`` using::\n\n  pip install scrapy-djangoitem\n\n\nIntroduction\n============\n\n``DjangoItem`` is a class of item that gets its fields definition from a\nDjango model, you simply create a ``DjangoItem`` and specify what Django\nmodel it relates to.\n\nBesides of getting the model fields defined on your item, ``DjangoItem``\nprovides a method to create and populate a Django model instance with the item\ndata.\n\nUsage\n=====\n\n``DjangoItem`` works much like ModelForms in Django, you create a subclass\nand define its ``django_model`` attribute to be a valid Django model. With this\nyou will get an item with a field for each Django model field.\n\nIn addition, you can define fields that aren't present in the model and even\noverride fields that are present in the model defining them in the item.\n\nLet's see some examples:\n\nCreating a Django model for the examples::\n\n    from django.db import models\n\n    class Person(models.Model):\n        name = models.CharField(max_length=255)\n        age = models.IntegerField()\n\nDefining a basic ``DjangoItem``::\n\n    from scrapy_djangoitem import DjangoItem\n\n    class PersonItem(DjangoItem):\n        django_model = Person\n\n``DjangoItem`` works just like Scrapy items::\n\n    >>> p = PersonItem()\n    >>> p['name'] = 'John'\n    >>> p['age'] = '22'\n\nTo obtain the Django model from the item, we call the extra method\n``DjangoItem.save()`` of the ``DjangoItem``::\n\n    >>> person = p.save()\n    >>> person.name\n    'John'\n    >>> person.age\n    '22'\n    >>> person.id\n    1\n\nThe model is already saved when we call ``DjangoItem.save()``, we\ncan prevent this by calling it with ``commit=False``. We can use\n``commit=False`` in ``DjangoItem.save()`` method to obtain an unsaved model::\n\n    >>> person = p.save(commit=False)\n    >>> person.name\n    'John'\n    >>> person.age\n    '22'\n    >>> person.id\n    None\n\nAs said before, we can add other fields to the item::\n\n    import scrapy\n    from scrapy_djangoitem import DjangoItem\n\n    class PersonItem(DjangoItem):\n        django_model = Person\n        sex = scrapy.Field()\n\n::\n\n   >>> p = PersonItem()\n   >>> p['name'] = 'John'\n   >>> p['age'] = '22'\n   >>> p['sex'] = 'M'\n\nAnd we can override the fields of the model with your own::\n\n    class PersonItem(DjangoItem):\n        django_model = Person\n        name = scrapy.Field(default='No Name')\n\nThis is useful to provide properties to the field, like a default or any other\nproperty that your project uses. Those additional fields won't be taken into\naccount when doing a ``DjangoItem.save()``.\n\nCaveats\n=======\n\n``DjangoItem`` is a rather convenient way to integrate Scrapy projects with Django\nmodels, but bear in mind that Django ORM **may not scale well** if you scrape a lot\nof items (ie. millions) with Scrapy. This is because a relational backend is\n**often not a good choice for a write intensive applications** (such as a web\ncrawler), specially if the database is highly normalized and with many indices.\n\nSetup\n=====\n\nTo use the Django models outside the Django application you need to set up the\n``DJANGO_SETTINGS_MODULE`` environment variable and --in most cases-- modify\nthe ``PYTHONPATH`` environment variable to be able to import the settings\nmodule.\n\nThere are many ways to do this depending on your use case and preferences.\nBelow is detailed one of the simplest ways to do it.\n\nSuppose your Django project is named ``mysite``, is located in the path\n``/home/projects/mysite`` and you have created an app ``myapp`` with the model\n``Person``. That means your directory structure is something like this::\n\n    /home/projects/mysite\n    \u251c\u2500\u2500 manage.py\n    \u251c\u2500\u2500 myapp\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n    \u2514\u2500\u2500 mysite\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 settings.py\n        \u251c\u2500\u2500 urls.py\n        \u2514\u2500\u2500 wsgi.py\n\nThen you need to add ``/home/projects/mysite`` to the ``PYTHONPATH``\nenvironment variable and set up the environment variable\n``DJANGO_SETTINGS_MODULE`` to ``mysite.settings``. That can be done in your\nScrapy's settings file by adding the lines below::\n\n  import sys\n  sys.path.append('/home/projects/mysite')\n\n  import os\n  os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'\n\nNotice that we modify the ``sys.path`` variable instead the ``PYTHONPATH``\nenvironment variable as we are already within the python runtime. If everything\nis right, you should be able to start the ``scrapy shell`` command and import\nthe model ``Person`` (i.e. ``from myapp.models import Person``).\n\nStarting with ``Django 1.8`` you also have to explicitly set up ``Django`` if using\nit outside a ``manage.py`` context\n(see `Django Docs <https://docs.djangoproject.com/en/1.8/intro/tutorial01/#playing-with-the-api>`_)::\n\n  import django\n  django.setup()\n\n\nDevelopment\n===========\n\nTest suite from the ``tests`` directory can be run using ``tox`` by running::\n\n  tox\n\n...using the configuration in ``tox.ini``. The ``Python`` interpreters\nused have to be installed locally on the system.\n\n\nChangelog\n=========\n\nv1.1.1 (2016-05-04)\n-------------------\n\n* Distribute as universal wheel\n* Fix README's markup\n\nv1.1 (2016-05-04)\n-----------------\n\n* ``Python 3.4/3.5`` support\n* Making tests work with ``Django 1.9`` again\n\nv1.0 (2015-04-29)\n-----------------\n\n* Initial version", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scrapy-plugins/scrapy-djangoitem", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "scrapy-djangoitem", "package_url": "https://pypi.org/project/scrapy-djangoitem/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/scrapy-djangoitem/", "project_urls": {"Homepage": "https://github.com/scrapy-plugins/scrapy-djangoitem"}, "release_url": "https://pypi.org/project/scrapy-djangoitem/1.1.1/", "requires_dist": ["six"], "requires_python": "", "summary": "Scrapy extension to write scraped items using Django models", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/scrapy-djangoitem\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28a05be7973631e45bf82465d36067b0cc981286/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7363726170792d646a616e676f6974656d2e737667\"></a>\n<a href=\"http://travis-ci.org/scrapy-plugins/scrapy-djangoitem\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27ef6e2cb0318fb7c2e77481ba9d769ce4fa6f8a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7363726170792d706c7567696e732f7363726170792d646a616e676f6974656d2f6d61737465722e737667\"></a>\n<a href=\"https://github.com/scrapy-plugins/scrapy-djangoitem/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f32eccddfbbb66268103694e378a490283c968d3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7363726170792d706c7567696e732f7363726170792d646a616e676f6974656d2e737667\"></a>\n<p><tt><span class=\"pre\">scrapy-djangoitem</span></tt> is an extension that allows you to define <a href=\"http://doc.scrapy.org/en/latest/topics/items.html\" rel=\"nofollow\">Scrapy items</a> using existing <a href=\"https://docs.djangoproject.com/en/latest/topics/db/models/\" rel=\"nofollow\">Django\nmodels</a>.</p>\n<p>This utility provides a new class, named <tt>DjangoItem</tt>, that you can use as a\nregular Scrapy item and link it to a Django model with its <tt>django_model</tt>\nattribute. Start using it right away by importing it from this package:</p>\n<pre>from scrapy_djangoitem import DjangoItem\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Starting with <tt>v1.1</tt> both <tt>Python 2.7</tt> and <tt>Python 3.4/3.5</tt> are\nsupported. For <tt>Python 3</tt> you need <tt>Scrapy v1.1</tt> or above.</p>\n<p>Latest tested Django version is <tt>Django 1.9</tt>.</p>\n<p>Install from <tt>PyPI</tt> using:</p>\n<pre>pip install scrapy-djangoitem\n</pre>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>DjangoItem</tt> is a class of item that gets its fields definition from a\nDjango model, you simply create a <tt>DjangoItem</tt> and specify what Django\nmodel it relates to.</p>\n<p>Besides of getting the model fields defined on your item, <tt>DjangoItem</tt>\nprovides a method to create and populate a Django model instance with the item\ndata.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>DjangoItem</tt> works much like ModelForms in Django, you create a subclass\nand define its <tt>django_model</tt> attribute to be a valid Django model. With this\nyou will get an item with a field for each Django model field.</p>\n<p>In addition, you can define fields that aren\u2019t present in the model and even\noverride fields that are present in the model defining them in the item.</p>\n<p>Let\u2019s see some examples:</p>\n<p>Creating a Django model for the examples:</p>\n<pre>from django.db import models\n\nclass Person(models.Model):\n    name = models.CharField(max_length=255)\n    age = models.IntegerField()\n</pre>\n<p>Defining a basic <tt>DjangoItem</tt>:</p>\n<pre>from scrapy_djangoitem import DjangoItem\n\nclass PersonItem(DjangoItem):\n    django_model = Person\n</pre>\n<p><tt>DjangoItem</tt> works just like Scrapy items:</p>\n<pre>&gt;&gt;&gt; p = PersonItem()\n&gt;&gt;&gt; p['name'] = 'John'\n&gt;&gt;&gt; p['age'] = '22'\n</pre>\n<p>To obtain the Django model from the item, we call the extra method\n<tt>DjangoItem.save()</tt> of the <tt>DjangoItem</tt>:</p>\n<pre>&gt;&gt;&gt; person = p.save()\n&gt;&gt;&gt; person.name\n'John'\n&gt;&gt;&gt; person.age\n'22'\n&gt;&gt;&gt; person.id\n1\n</pre>\n<p>The model is already saved when we call <tt>DjangoItem.save()</tt>, we\ncan prevent this by calling it with <tt>commit=False</tt>. We can use\n<tt>commit=False</tt> in <tt>DjangoItem.save()</tt> method to obtain an unsaved model:</p>\n<pre>&gt;&gt;&gt; person = p.save(commit=False)\n&gt;&gt;&gt; person.name\n'John'\n&gt;&gt;&gt; person.age\n'22'\n&gt;&gt;&gt; person.id\nNone\n</pre>\n<p>As said before, we can add other fields to the item:</p>\n<pre>import scrapy\nfrom scrapy_djangoitem import DjangoItem\n\nclass PersonItem(DjangoItem):\n    django_model = Person\n    sex = scrapy.Field()\n</pre>\n<pre>&gt;&gt;&gt; p = PersonItem()\n&gt;&gt;&gt; p['name'] = 'John'\n&gt;&gt;&gt; p['age'] = '22'\n&gt;&gt;&gt; p['sex'] = 'M'\n</pre>\n<p>And we can override the fields of the model with your own:</p>\n<pre>class PersonItem(DjangoItem):\n    django_model = Person\n    name = scrapy.Field(default='No Name')\n</pre>\n<p>This is useful to provide properties to the field, like a default or any other\nproperty that your project uses. Those additional fields won\u2019t be taken into\naccount when doing a <tt>DjangoItem.save()</tt>.</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<p><tt>DjangoItem</tt> is a rather convenient way to integrate Scrapy projects with Django\nmodels, but bear in mind that Django ORM <strong>may not scale well</strong> if you scrape a lot\nof items (ie. millions) with Scrapy. This is because a relational backend is\n<strong>often not a good choice for a write intensive applications</strong> (such as a web\ncrawler), specially if the database is highly normalized and with many indices.</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>To use the Django models outside the Django application you need to set up the\n<tt>DJANGO_SETTINGS_MODULE</tt> environment variable and \u2013in most cases\u2013 modify\nthe <tt>PYTHONPATH</tt> environment variable to be able to import the settings\nmodule.</p>\n<p>There are many ways to do this depending on your use case and preferences.\nBelow is detailed one of the simplest ways to do it.</p>\n<p>Suppose your Django project is named <tt>mysite</tt>, is located in the path\n<tt>/home/projects/mysite</tt> and you have created an app <tt>myapp</tt> with the model\n<tt>Person</tt>. That means your directory structure is something like this:</p>\n<pre>/home/projects/mysite\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 myapp\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tests.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py\n\u2514\u2500\u2500 mysite\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n</pre>\n<p>Then you need to add <tt>/home/projects/mysite</tt> to the <tt>PYTHONPATH</tt>\nenvironment variable and set up the environment variable\n<tt>DJANGO_SETTINGS_MODULE</tt> to <tt>mysite.settings</tt>. That can be done in your\nScrapy\u2019s settings file by adding the lines below:</p>\n<pre>import sys\nsys.path.append('/home/projects/mysite')\n\nimport os\nos.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'\n</pre>\n<p>Notice that we modify the <tt>sys.path</tt> variable instead the <tt>PYTHONPATH</tt>\nenvironment variable as we are already within the python runtime. If everything\nis right, you should be able to start the <tt>scrapy shell</tt> command and import\nthe model <tt>Person</tt> (i.e. <tt>from myapp.models import Person</tt>).</p>\n<p>Starting with <tt>Django 1.8</tt> you also have to explicitly set up <tt>Django</tt> if using\nit outside a <tt>manage.py</tt> context\n(see <a href=\"https://docs.djangoproject.com/en/1.8/intro/tutorial01/#playing-with-the-api\" rel=\"nofollow\">Django Docs</a>):</p>\n<pre>import django\ndjango.setup()\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Test suite from the <tt>tests</tt> directory can be run using <tt>tox</tt> by running:</p>\n<pre>tox\n</pre>\n<p>\u2026using the configuration in <tt>tox.ini</tt>. The <tt>Python</tt> interpreters\nused have to be installed locally on the system.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v1-1-1-2016-05-04\">\n<h3>v1.1.1 (2016-05-04)</h3>\n<ul>\n<li>Distribute as universal wheel</li>\n<li>Fix README\u2019s markup</li>\n</ul>\n</div>\n<div id=\"v1-1-2016-05-04\">\n<h3>v1.1 (2016-05-04)</h3>\n<ul>\n<li><tt>Python 3.4/3.5</tt> support</li>\n<li>Making tests work with <tt>Django 1.9</tt> again</li>\n</ul>\n</div>\n<div id=\"v1-0-2015-04-29\">\n<h3>v1.0 (2015-04-29)</h3>\n<ul>\n<li>Initial version</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2099239, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c80f7a6f12536bce4e33214063f51a93", "sha256": "bbea8a5a78060f825dc289341448591cf5906173897f28bc8071ac8830cee8ef"}, "downloads": -1, "filename": "scrapy-djangoitem-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c80f7a6f12536bce4e33214063f51a93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4538, "upload_time": "2015-04-20T19:10:37", "upload_time_iso_8601": "2015-04-20T19:10:37.663052Z", "url": "https://files.pythonhosted.org/packages/ec/2f/554dd63ffa2d7bb5086c853b2f0d685e010af47a304841c62fd20918ffa3/scrapy-djangoitem-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "67d153c38d8a0888ed54ccf6b62dd796", "sha256": "0694b7248a6b899129e445b91ba3ed207c554c1443bf70bf57bce33b47143662"}, "downloads": -1, "filename": "scrapy_djangoitem-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "67d153c38d8a0888ed54ccf6b62dd796", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7323, "upload_time": "2015-04-27T18:43:31", "upload_time_iso_8601": "2015-04-27T18:43:31.616772Z", "url": "https://files.pythonhosted.org/packages/e3/a1/619e9c5023cde8acddeb57781d87808146cae4679f5c8a5e4510d3f39fd1/scrapy_djangoitem-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b79f9aada685e24bd38e2598dd152c5e", "sha256": "bac7c14fcf8ea2ab4c4f426380316ffb636a4c43fd1161044960091c6fe61f34"}, "downloads": -1, "filename": "scrapy-djangoitem-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b79f9aada685e24bd38e2598dd152c5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4518, "upload_time": "2015-04-27T18:43:28", "upload_time_iso_8601": "2015-04-27T18:43:28.828572Z", "url": "https://files.pythonhosted.org/packages/9f/aa/71bc883e6378e3bf09b718a8567210a846d1291a0e4b96af2809acf74d38/scrapy-djangoitem-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "de85ff73ed4abccf4b516f4cfc432e00", "sha256": "e17fb904f113ae3592d6c0f48d48dfba0c4cc2822454205eca7edab6d9815726"}, "downloads": -1, "filename": "scrapy_djangoitem-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "de85ff73ed4abccf4b516f4cfc432e00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8201, "upload_time": "2016-05-04T16:17:32", "upload_time_iso_8601": "2016-05-04T16:17:32.767762Z", "url": "https://files.pythonhosted.org/packages/09/2a/d49c7fc3d61349f3f633bd28b5e8497f3b5abeceac4a7888ab79d158a26d/scrapy_djangoitem-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "033c61969b359ea5817690c291712d56", "sha256": "e6adf98a02eacf8b994f16c4c1f835bf7d326bbf8e3ecfa62de17b6416a7fa3e"}, "downloads": -1, "filename": "scrapy-djangoitem-1.1.0.tar.gz", "has_sig": false, "md5_digest": "033c61969b359ea5817690c291712d56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5163, "upload_time": "2016-05-04T16:17:49", "upload_time_iso_8601": "2016-05-04T16:17:49.670298Z", "url": "https://files.pythonhosted.org/packages/ad/ee/5cc82ba1be829b2a3a8ee38e14885d64c86a74ce55c2bc872c520a1239b0/scrapy-djangoitem-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "85e5614159e8164e7fd434a8c95668ea", "sha256": "58da093778f2cd92734b5539adcb60d59854475050d7511c42173bd8c104acef"}, "downloads": -1, "filename": "scrapy_djangoitem-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85e5614159e8164e7fd434a8c95668ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8293, "upload_time": "2016-05-04T16:45:10", "upload_time_iso_8601": "2016-05-04T16:45:10.495250Z", "url": "https://files.pythonhosted.org/packages/5c/ff/ca88e5fa4b5df11876d877c568de8f5e1a06587bcd23dab7d1847a9b1123/scrapy_djangoitem-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbd7c04100fd4e95d7ea43e99ab7ba40", "sha256": "2c633ae1559f6e3d43c9a5ebb19aa5a64152deef434aa3fa57168e6b002d9c50"}, "downloads": -1, "filename": "scrapy-djangoitem-1.1.1.tar.gz", "has_sig": false, "md5_digest": "fbd7c04100fd4e95d7ea43e99ab7ba40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5223, "upload_time": "2016-05-04T16:45:19", "upload_time_iso_8601": "2016-05-04T16:45:19.212651Z", "url": "https://files.pythonhosted.org/packages/50/10/7b8d1caf3c292069b1bc983c2c872597f429bac4673707d11ee76313515a/scrapy-djangoitem-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85e5614159e8164e7fd434a8c95668ea", "sha256": "58da093778f2cd92734b5539adcb60d59854475050d7511c42173bd8c104acef"}, "downloads": -1, "filename": "scrapy_djangoitem-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85e5614159e8164e7fd434a8c95668ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8293, "upload_time": "2016-05-04T16:45:10", "upload_time_iso_8601": "2016-05-04T16:45:10.495250Z", "url": "https://files.pythonhosted.org/packages/5c/ff/ca88e5fa4b5df11876d877c568de8f5e1a06587bcd23dab7d1847a9b1123/scrapy_djangoitem-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbd7c04100fd4e95d7ea43e99ab7ba40", "sha256": "2c633ae1559f6e3d43c9a5ebb19aa5a64152deef434aa3fa57168e6b002d9c50"}, "downloads": -1, "filename": "scrapy-djangoitem-1.1.1.tar.gz", "has_sig": false, "md5_digest": "fbd7c04100fd4e95d7ea43e99ab7ba40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5223, "upload_time": "2016-05-04T16:45:19", "upload_time_iso_8601": "2016-05-04T16:45:19.212651Z", "url": "https://files.pythonhosted.org/packages/50/10/7b8d1caf3c292069b1bc983c2c872597f429bac4673707d11ee76313515a/scrapy-djangoitem-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:47 2020"}