{"info": {"author": "Joe Studer", "author_email": "jmsxw4@mst.edu", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# StatiCFG\nPython3 control flow graph generator\n\nStatiCFG is a package that can be used to produce control flow graphs (CFGs) for Python 3 programs. \nThe CFGs it generates can be easily visualised with graphviz and used for static analysis. \nThis analysis is actually the main purpose of the module, hence the name of **StatiC**FG.\n\nBelow is an example of a piece of code that generates the Fibonacci sequence and the CFG produced for it with StatiCFG.\n\n```py\ndef fib():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfib_gen = fib()\nfor _ in range(10):\n    next(fib_gen)\n```\n\n![Fibonacci CFG](fib_cfg.png)\n\nSee `./examples/` for more examples\n\n## Installation\nTo install simply run\n```\npip3 install ccfg\n```\n\n## Usage\nIt can be used three ways:\n\n### Via CLI\n\nThe default command is ccfg:\n```py\nccfg <file.py>\n``` \n\nThis will create a <file>_cfg.png file, which contains the colored cfg of the file.\n\n### Via wrapper\nThe `cfg` script present in the *wrapper/* folder of this repository can be used to directly generate the CFG of some Python program and visualise it.\n```sh\npython3 ccfg path_to_my_code.py\n```\n\n### Via import\nTo use StatiCFG, simply import the module in your Python interpreter or program, and use the `staticfg.CFGBuilder` class to build CFGs. \nFor example, to build the CFG of a program defined in a file with the path *./example.py*, the following code can be used:\n\n```py\nfrom staticfg import CFGBuilder\n\ncfg = CFGBuilder().build_from_file('example', './example.py')\n```\n\nThis returns the CFG for the code in *./example.py* in the `cfg` variable. \nThe first parameter of `build_from_file` is the desired name for the CFG, and the second one is the path to the file containing the source code.\nThe produced CFG can then be visualised with:\n\n```py\ncfg.build_visual('exampleCFG', 'pdf')\n```\n\nThe first paramter of `build_visual` is the desired name for the DOT file produced by the method, and the second one is the format to use for the visualisation.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.mst.edu/autograding/cfg", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py2cfg", "package_url": "https://pypi.org/project/py2cfg/", "platform": "", "project_url": "https://pypi.org/project/py2cfg/", "project_urls": {"Homepage": "https://git.mst.edu/autograding/cfg", "Repository": "https://git.mst.edu/autograding/cfg"}, "release_url": "https://pypi.org/project/py2cfg/0.2/", "requires_dist": ["graphviz (>=0.11,<0.12)", "astor (>=0.8.1,<0.9.0)"], "requires_python": ">=3.6,<4.0", "summary": "A colorful cfg for python executables.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>StatiCFG</h1>\n<p>Python3 control flow graph generator</p>\n<p>StatiCFG is a package that can be used to produce control flow graphs (CFGs) for Python 3 programs.\nThe CFGs it generates can be easily visualised with graphviz and used for static analysis.\nThis analysis is actually the main purpose of the module, hence the name of <strong>StatiC</strong>FG.</p>\n<p>Below is an example of a piece of code that generates the Fibonacci sequence and the CFG produced for it with StatiCFG.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">a</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n\n<span class=\"n\">fib_gen</span> <span class=\"o\">=</span> <span class=\"n\">fib</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fib_gen</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Fibonacci CFG\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ded11fb863d538c87c0f2decaf6f939253b33ba7/6669625f6366672e706e67\"></p>\n<p>See <code>./examples/</code> for more examples</p>\n<h2>Installation</h2>\n<p>To install simply run</p>\n<pre><code>pip3 install ccfg\n</code></pre>\n<h2>Usage</h2>\n<p>It can be used three ways:</p>\n<h3>Via CLI</h3>\n<p>The default command is ccfg:</p>\n<pre><span class=\"n\">ccfg</span> <span class=\"o\">&lt;</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"o\">&gt;</span>\n</pre>\n<p>This will create a &lt;file&gt;_cfg.png file, which contains the colored cfg of the file.</p>\n<h3>Via wrapper</h3>\n<p>The <code>cfg</code> script present in the <em>wrapper/</em> folder of this repository can be used to directly generate the CFG of some Python program and visualise it.</p>\n<pre>python3 ccfg path_to_my_code.py\n</pre>\n<h3>Via import</h3>\n<p>To use StatiCFG, simply import the module in your Python interpreter or program, and use the <code>staticfg.CFGBuilder</code> class to build CFGs.\nFor example, to build the CFG of a program defined in a file with the path <em>./example.py</em>, the following code can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">staticfg</span> <span class=\"kn\">import</span> <span class=\"n\">CFGBuilder</span>\n\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">CFGBuilder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">build_from_file</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'./example.py'</span><span class=\"p\">)</span>\n</pre>\n<p>This returns the CFG for the code in <em>./example.py</em> in the <code>cfg</code> variable.\nThe first parameter of <code>build_from_file</code> is the desired name for the CFG, and the second one is the path to the file containing the source code.\nThe produced CFG can then be visualised with:</p>\n<pre><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">build_visual</span><span class=\"p\">(</span><span class=\"s1\">'exampleCFG'</span><span class=\"p\">,</span> <span class=\"s1\">'pdf'</span><span class=\"p\">)</span>\n</pre>\n<p>The first paramter of <code>build_visual</code> is the desired name for the DOT file produced by the method, and the second one is the format to use for the visualisation.</p>\n\n          </div>"}, "last_serial": 7141465, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "be789856b1b3147e0ba7bcf7796928a4", "sha256": "80cf849d9b8126219d6dd5061d964b0bfbc9473cc644a3b8af10f030553a1ba1"}, "downloads": -1, "filename": "py2cfg-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "be789856b1b3147e0ba7bcf7796928a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 61616, "upload_time": "2020-04-30T23:03:33", "upload_time_iso_8601": "2020-04-30T23:03:33.782172Z", "url": "https://files.pythonhosted.org/packages/f5/2a/db5036dcbdab58af93b76a1e5364937cde963f685139a838cc04dfb770e9/py2cfg-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abbc1fa8348fc4dbb7ceb76cb04067dc", "sha256": "8875615b9e13c1506c5da1519bdd9c09e354a812b3741d6cd18bcb77319aff80"}, "downloads": -1, "filename": "py2cfg-0.2.tar.gz", "has_sig": false, "md5_digest": "abbc1fa8348fc4dbb7ceb76cb04067dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 62569, "upload_time": "2020-04-30T23:03:36", "upload_time_iso_8601": "2020-04-30T23:03:36.629997Z", "url": "https://files.pythonhosted.org/packages/4e/1b/f01d7e634c8758c89e9ea3a0fe36fa5776c79f386e8b182830bd73675b53/py2cfg-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be789856b1b3147e0ba7bcf7796928a4", "sha256": "80cf849d9b8126219d6dd5061d964b0bfbc9473cc644a3b8af10f030553a1ba1"}, "downloads": -1, "filename": "py2cfg-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "be789856b1b3147e0ba7bcf7796928a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 61616, "upload_time": "2020-04-30T23:03:33", "upload_time_iso_8601": "2020-04-30T23:03:33.782172Z", "url": "https://files.pythonhosted.org/packages/f5/2a/db5036dcbdab58af93b76a1e5364937cde963f685139a838cc04dfb770e9/py2cfg-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abbc1fa8348fc4dbb7ceb76cb04067dc", "sha256": "8875615b9e13c1506c5da1519bdd9c09e354a812b3741d6cd18bcb77319aff80"}, "downloads": -1, "filename": "py2cfg-0.2.tar.gz", "has_sig": false, "md5_digest": "abbc1fa8348fc4dbb7ceb76cb04067dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 62569, "upload_time": "2020-04-30T23:03:36", "upload_time_iso_8601": "2020-04-30T23:03:36.629997Z", "url": "https://files.pythonhosted.org/packages/4e/1b/f01d7e634c8758c89e9ea3a0fe36fa5776c79f386e8b182830bd73675b53/py2cfg-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:34 2020"}