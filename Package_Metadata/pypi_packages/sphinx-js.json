{"info": {"author": "Erik Rose", "author_email": "erikrose@grinchcentral.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Documentation :: Sphinx", "Topic :: Software Development :: Documentation"], "description": "=========\nsphinx-js\n=========\n\nWhy\n===\n\nWhen you write a JavaScript library, how do you explain it to people? If it's a small project in a domain your users are familiar with, JSDoc's alphabetical list of routines might suffice. But in a larger project, it is useful to intersperse prose with your API docs without having to copy and paste things.\n\nsphinx-js lets you use the industry-leading `Sphinx <http://sphinx-doc.org/>`_ documentation tool with JS projects. It provides a handful of directives, patterned after the Python-centric `autodoc <www.sphinx-doc.org/en/latest/ext/autodoc.html>`_ ones, for pulling JSDoc-formatted documentation into reStructuredText pages. And, because you can keep using JSDoc in your code, you remain compatible with the rest of your JS tooling, like Google's Closure Compiler.\n\nSetup\n=====\n\n1. Install JSDoc using npm. ``jsdoc`` must be on your ``$PATH``, so you might want to install it globally::\n\n        npm install -g jsdoc\n\n   We work with jsdoc 3.6.3 and quite possibly other versions.\n\n2. Install sphinx-js, which will pull in Sphinx itself as a dependency::\n\n        pip install sphinx-js\n\n3. Make a documentation folder in your project by running ``sphinx-quickstart`` and answering its questions::\n\n        cd my-project\n        sphinx-quickstart\n\n          > Root path for the documentation [.]: docs\n          > Separate source and build directories (y/n) [n]:\n          > Name prefix for templates and static dir [_]:\n          > Project name: My Project\n          > Author name(s): Fred Fredson\n          > Project version []: 1.0\n          > Project release [1.0]:\n          > Project language [en]:\n          > Source file suffix [.rst]:\n          > Name of your master document (without suffix) [index]:\n          > Do you want to use the epub builder (y/n) [n]:\n          > autodoc: automatically insert docstrings from modules (y/n) [n]:\n          > doctest: automatically test code snippets in doctest blocks (y/n) [n]:\n          > intersphinx: link between Sphinx documentation of different projects (y/n) [n]:\n          > todo: write \"todo\" entries that can be shown or hidden on build (y/n) [n]:\n          > coverage: checks for documentation coverage (y/n) [n]:\n          > imgmath: include math, rendered as PNG or SVG images (y/n) [n]:\n          > mathjax: include math, rendered in the browser by MathJax (y/n) [n]:\n          > ifconfig: conditional inclusion of content based on config values (y/n) [n]:\n          > viewcode: include links to the source code of documented Python objects (y/n) [n]:\n          > githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]:\n          > Create Makefile? (y/n) [y]:\n          > Create Windows command file? (y/n) [y]:\n\n4. In the generated Sphinx conf.py file, turn on ``sphinx_js`` by adding it to ``extensions``::\n\n        extensions = ['sphinx_js']\n\n5. If your JS source code is anywhere but at the root of your project, add ``js_source_path = '../somewhere/else'`` on a line by itself in conf.py. The root of your JS source tree should be where that setting points, relative to the conf.py file. (The default, ``../``, works well when there is a ``docs`` folder at the root of your project and your source code lives directly inside the root.)\n6. If you have special jsdoc configuration, add ``jsdoc_config_path = '../conf.json'`` (for example) to conf.py as well.\n7. If you're documenting only JS and no other languages, you can set your \"primary domain\" to JS in conf.py::\n\n        primary_domain = 'js'\n\n   Then you can omit all the \"js:\" prefixes in the directives below.\n\nUse\n===\n\nIn short, write a folder full of reStructuredText files, use the following directives to pull in your JSDoc documentation, then tell Sphinx to render it all by running ``make html`` in your docs directory. If you have never used Sphinx or written reStructuredText before, here is `where we left off in its tutorial <http://www.sphinx-doc.org/en/stable/tutorial.html#defining-document-structure>`_. For a quick start, just add things to index.rst for now.\n\nautofunction\n------------\n\nFirst, document your JS code using standard JSDoc formatting::\n\n    /**\n     * Return the ratio of the inline text length of the links in an element to\n     * the inline text length of the entire element.\n     *\n     * @param {Node} node - Types or not: either works.\n     * @throws {PartyError|Hearty} Multiple types work fine.\n     * @returns {Number} Types and descriptions are both supported.\n     */\n    function linkDensity(node) {\n        const length = node.flavors.get('paragraphish').inlineLength;\n        const lengthWithoutLinks = inlineTextLength(node.element,\n                                                    element => element.tagName !== 'A');\n        return (length - lengthWithoutLinks) / length;\n    }\n\nThen, reference your documentation using sphinx-js directives. Our directives work much like Sphinx's standard autodoc ones. You can specify just a function's name... ::\n\n    .. js:autofunction:: someFunction\n\n...and a nicely formatted block of documentation will show up in your docs.\n\nYou can also throw in your own explicit parameter list, if you want to note\noptional parameters::\n\n    .. js:autofunction:: someFunction(foo, bar[, baz])\n\nParameter properties and destructuring parameters also work fine, using `standard JSDoc syntax <http://usejsdoc.org/tags-param.html#parameters-with-properties>`_::\n\n    /**\n     * Export an image from the given canvas and save it to the disk.\n     *\n     * @param {Object} options Output options\n     * @param {string} options.format The output format (``jpeg``,  ``png``, or\n     *     ``webp``)\n     * @param {number} options.quality The output quality when format is\n     *     ``jpeg`` or ``webp`` (from ``0.00`` to ``1.00``)\n     */\n    function saveCanvas({ format, quality }) {\n        // ...\n    }\n\nExtraction of default parameter values works as well. These act as expected, with a few caveats::\n\n    /**\n     * You must declare the params, even if you have nothing else to say, so\n     * JSDoc will extract the default values.\n     *\n     * @param [num]\n     * @param [str]\n     * @param [bool]\n     * @param [nil]\n     */\n    function defaultsDocumentedInCode(num=5, str=\"true\", bool=true, nil=null) {}\n\n    /**\n     * JSDoc guesses types for things like \"42\". If you have a string-typed\n     * default value that looks like a number or boolean, you'll need to\n     * specify its type explicitly. Conversely, if you have a more complex\n     * value like an arrow function, specify a non-string type on it so it\n     * isn't interpreted as a string. Finally, if you have a disjoint type like\n     * {string|Array} specify string first if you want your default to be\n     * interpreted as a string.\n     *\n     * @param {function} [func=() => 5]\n     * @param [str=some string]\n     * @param {string} [strNum=42]\n     * @param {string|Array} [strBool=true]\n     * @param [num=5]\n     * @param [nil=null]\n     */\n    function defaultsDocumentedInDoclet(func, strNum, strBool, num, nil) {}\n\nYou can even add additional content. If you do, it will appear just below any extracted documentation::\n\n    .. js:autofunction:: someFunction\n\n        Here are some things that will appear...\n\n        * Below\n        * The\n        * Extracted\n        * Docs\n\n        Enjoy!\n\n``js:autofunction`` has one option, ``:short-name:``, which comes in handy for chained APIs whose implementation details you want to keep out of sight. When you use it on a class method, the containing class won't be mentioned in the docs, the function will appear under its short name in indices, and cross references must use the short name as well (``:func:`someFunction```)::\n\n    .. js:autofunction:: someClass#someFunction\n       :short-name:\n\n``autofunction`` can also be used on callbacks defined with the `@callback tag <http://usejsdoc.org/tags-callback.html>`_.\n\nThere is experimental support for abusing ``autofunction`` to document `@typedef tags <http://usejsdoc.org/tags-typedef.html>`_ as well, though the result will be styled as a function, and ``@property`` tags will fall misleadingly under an \"Arguments\" heading. Still, it's better than nothing until we can do it properly.\n\nautoclass\n---------\n\nWe provide a ``js:autoclass`` directive which documents a class with the concatenation of its class comment and its constructor comment. It shares all the features of ``js:autofunction`` and even takes the same ``:short-name:`` flag, which can come in handy for inner classes. The easiest way to use it is to invoke its ``:members:`` option, which automatically documents all your class's public methods and attributes::\n\n    .. js:autoclass:: SomeEs6Class(constructor, args, if, you[, wish])\n       :members:\n\nYou can add private members by saying... ::\n\n    .. js:autoclass:: SomeEs6Class\n       :members:\n       :private-members:\n\nPrivacy is determined by JSDoc ``@private`` tags.\n\nExclude certain members by name with ``:exclude-members:``::\n\n    .. js:autoclass:: SomeEs6Class\n       :members:\n       :exclude-members: Foo, bar, baz\n\nOr explicitly list the members you want. We will respect your ordering. ::\n\n    .. js:autoclass:: SomeEs6Class\n       :members: Qux, qum\n\nWhen explicitly listing members, you can include ``*`` to include all unmentioned members. This is useful to have control over ordering of some elements, without having to include an exhaustive list. ::\n\n    .. js:autoclass:: SomeEs6Class\n       :members: importMethod, *, uncommonlyUsedMethod\n\nFinally, if you want full control, pull your class members in one at a time by embedding ``js:autofunction`` or ``js:autoattribute``::\n\n    .. js:autoclass:: SomeEs6Class\n\n       .. js:autofunction:: SomeEs6Class#someMethod\n\n       Additional content can go here and appears below the in-code comments,\n       allowing you to intersperse long prose passages and examples that you\n       don't want in your code.\n\nautoattribute\n-------------\n\nThis is useful for documenting public properties::\n\n    class Fnode {\n        constructor(element) {\n            /**\n             * The raw DOM element this wrapper describes\n             */\n            this.element = element;\n        }\n    }\n\nAnd then, in the docs... ::\n\n    .. autoclass:: Fnode\n\n       .. autoattribute:: Fnode#element\n\nThis is also the way to document ES6-style getters and setters, as it omits the trailing ``()`` of a function. The assumed practice is the usual JSDoc one: document only one of your getter/setter pair::\n\n    class Bing {\n        /** The bong of the bing */\n        get bong() {\n            return this._bong;\n        }\n\n        set bong(newBong) {\n            this._bong = newBong * 2;\n        }\n    }\n\nAnd then, in the docs... ::\n\n   .. autoattribute:: Bing#bong\n\nDodging Ambiguity With Pathnames\n--------------------------------\n\nIf you have same-named objects in different files, use pathnames to disambiguate them. Here's a particularly long example::\n\n    .. js:autofunction:: ./some/dir/some/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n\nYou may recognize the separators ``#.~`` from `JSDoc namepaths <http://usejsdoc.org/about-namepaths.html>`_; they work the same here.\n\nFor conciseness, you can use any unique suffix, as long as it consists of complete path segments. These would all be equivalent to the above, assuming they are unique within your source tree::\n\n    innerMember\n    staticMethod~innerMember\n    SomeClass#someInstanceMethod.staticMethod~innerMember\n    some/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n\nThings to note:\n\n* We use simple file paths rather than JSDoc's ``module:`` prefix.\n* We use simple backslash escaping exclusively rather than switching escaping schemes halfway through the path; JSDoc itself `is headed that way as well <https://github.com/jsdoc3/jsdoc/issues/876>`_. The characters that need to be escaped are ``#.~(/``, though you do not need to escape the dots in a leading ``./`` or ``../``. A really horrible path might be... ::\n\n    some/path\\ with\\ spaces/file.topLevelObject#instanceMember.staticMember\\(with\\(parens\n* Relative paths are relative to the ``js_source_path`` specified in the config. Absolute paths are not allowed.\n\nBehind the scenes, sphinx-js will change all separators to dots so that...\n\n* Sphinx's \"shortening\" syntax works: ``:func:`~InwardRhs.atMost``` prints as merely ``atMost()``. (For now, you should always use dots rather than other namepath separators: ``#~``.)\n* Sphinx indexes more informatively, saying methods belong to their classes.\n\nSaving Keystrokes By Setting The Primary Domain\n-----------------------------------------------\n\nTo save some keystrokes, you can set ``primary_domain = 'js'`` in conf.py and then say (for example) ``autofunction`` rather than ``js:autofunction``.\n\nTypeScript support\n------------------\n\nThere is experimental TypeScript support in sphinx-js. Enable it by setting the config variable ``js_language = 'typescript'``. Then, instead of installing JSDoc, install TypeDoc (version 0.15.0 is known to work)::\n\n    npm install -g typedoc\n\nThe main difference you'll notice is additional **type** fields in function documentation.\n\nConfiguration Reference\n-----------------------\n\n``js_language``\n  Use 'javascript' or 'typescript' depending on the language you use. The default is 'javascript'.\n\n``js_source_path``\n  A list of directories to scan (non-recursively) for JS files, relative to Sphinx's conf.py file. Can be a string instead if there is only one. If there is more than one, ``root_for_relative_js_paths`` must be specified as well.\n\n``jsdoc_config_path``\n  A conf.py-relative path to a jsdoc or typedoc config file, which is useful if you want to specify your own jsdoc options, like recursion and custom filename matching.\n\n``root_for_relative_js_paths``\n  The directory relative to which relative pathnames are resolved. Defaults to ``js_source_path`` if it is only one item.\n\n``jsdoc_cache``\n  Path to a file where jsdoc output will be cached. If omitted, jsdoc will be run every time Sphinx is. If you have a large number of source files, it may be beneficial to configure this value. But be careful: the cache is not automatically flushed if your source code changes; you must delete it manually.\n\nExample\n=======\n\nA good example using most of sphinx-js's functionality is the Fathom documentation. A particularly juicy page is https://mozilla.github.io/fathom/ruleset.html. Click the \"View page source\" link to see the raw directives.\n\n`ReadTheDocs <https://readthedocs.org/>`_ is the canonical hosting platform for Sphinx docs and now supports sphinx-js as an opt-in beta. Put this in the ``.readthedocs.yml`` file at the root of your repo::\n\n    requirements_file: docs/requirements.txt\n    build:\n      image: latest\n\nThen put the version of sphinx-js you want in ``docs/requirements.txt``. For example... ::\n\n    sphinx-js==2.8\n\nOr, if you prefer, the Fathom repo carries a `Travis CI configuration <https://github.com/mozilla/fathom/blob/92304b8ad4768e90c167c3d93f9865771f5a6d80/.travis.yml#L41>`_ and a `deployment script <https://github.com/mozilla/fathom/blob/92304b8ad4768e90c167c3d93f9865771f5a6d80/tooling/travis-deploy-docs>`_ for building docs with sphinx-js and publishing them to GitHub Pages. Feel free to borrow them.\n\nCaveats\n=======\n\n* We don't understand the inline JSDoc constructs like ``{@link foo}``; you have to use Sphinx-style equivalents for now, like ``:js:func:`foo``` (or simply ``:func:`foo``` if you have set ``primary_domain = 'js'`` in conf.py.\n* So far, we understand and convert the JSDoc block tags ``@param``, ``@returns``, ``@throws``, ``@example`` (without the optional ``<caption>``), ``@deprecated``, ``@see``, and their synonyms. Other ones will go *poof* into the ether.\n\nTests\n=====\n\nRun the tests using tox, which will also install jsdoc and typedoc at pinned versions::\n\n    pip install tox\n    tox -e py37\n\nVersion History\n===============\n\n2.8\n  * Display generic TypeScript types properly. Make fields come before methods. (Paul Grau)\n  * Combine constructor and class documentation at the top TypeScript classes. (Sebastian Weigand)\n  * Switch to pytest as the testrunner. (Sebastian Weigand)\n  * Add optional caching of jsdoc output, for large codebases. (Patrick Browne)\n  * Fix the display of union types in TypeScript. (Sebastian Weigand)\n  * Fix parsing breakage that began in typedoc 0.14.0. (Paul Grau)\n  * Fix a data-intake crash with TypeScript. (Cristiano Santos)\n\n2.7.1\n  * Fix a crash that would happen sometimes with UTF-8 on Windows. #67.\n  * Always use conf.py's dir for jsdoc's working dir. #78. (Thomas Khyn)\n\n2.7\n  * Add experimental TypeScript support. (Wim Yedema)\n\n2.6\n  * Add support for ``@deprecated`` and ``@see``. (David Li)\n  * Notice and document JS variadic params nicely. (David Li)\n  * Add linter to codebase.\n\n2.5\n  * Use documented ``@params`` to help fill out the formal param list for a\n    function. This keeps us from missing params that use destructuring. (flozz)\n  * Improve error reporting when jsdoc is missing.\n  * Add extracted default values to generated formal param lists. (flozz and erikrose)\n\n2.4\n  * Support the ``@example`` tag. (lidavidm)\n  * Work under Windows. Before, we could hardly find any documentation. (flozz)\n  * Properly unwrap multiple-line JSDoc tags, even if they have Windows line endings. (Wim Yedema)\n  * Drop support for Python 3.3, since Sphinx has also done so.\n  * Fix build-time crash when using recommonmark (for Markdown support) under Sphinx >=1.7.1. (jamrizzi)\n\n2.3.1\n  * Find the jsdoc command on Windows, where it has a different name. Then\n    patch up process communication so it doesn't hang.\n\n2.3\n  * Add the ability to say \"*\" within the ``autoclass :members:`` option, meaning \"and all the members that I didn't explicitly list\".\n\n2.2\n  * Add ``autofunction`` support for ``@callback`` tags. (krassowski)\n  * Add experimental ``autofunction`` support for ``@typedef`` tags. (krassowski)\n  * Add a nice error message for when jsdoc can't find any JS files.\n  * Pin six more tightly so ``python_2_unicode_compatible`` is sure to be around.\n\n2.1\n  * Allow multiple folders in ``js_source_path``. This is useful for gradually migrating large projects, one folder at a time, to jsdoc. Introduce ``root_for_relative_js_paths`` to keep relative paths unambiguous in the face of multiple source paths.\n  * Aggregate PathTaken errors, and report them all at once. This means you don't have to run JSDoc repeatedly while cleaning up large projects.\n  * Fix a bytes-vs-strings issue that crashed on versions of Python 3 before 3.6. (jhkennedy)\n  * Tolerate JS files that have filename extensions other than \".js\". Before, when combined with custom jsdoc configuration that ingested such files, incorrect object pathnames were generated, which led to spurious \"No JSDoc documentation was found for object ...\" errors.\n\n2.0.1\n  * Fix spurious syntax errors while loading large JSDoc output by writing it to a temp file first. (jhkennedy)\n\n2.0\n  * Deal with ambiguous object paths. Symbols with identical JSDoc longnames (such as two top-level things called \"foo\" in different files) will no longer have one shadow the other. Introduce an unambiguous path convention for referring to objects. Add a real parser to parse them rather than the dirty tricks we were using before. Backward compatibility breaks a little, because ambiguous references are now a fatal error, rather than quietly referring to the last definition JSDoc happened to encounter.\n  * Index everything into a suffix tree so you can use any unique path suffix to refer to an object.\n  * Other fallout of having a real parser:\n\n    * Stop supporting \"-\" as a namepath separator.\n    * No longer spuriously translate escaped separators in namepaths into dots.\n    * Otherwise treat paths and escapes properly. For example, we can now handle symbols that contain \"(\".\n  * Fix KeyError when trying to gather the constructor params of a plain old\n    object labeled as a ``@class``.\n\n1.5.2\n  * Fix crasher while warning that a specified longname isn't found.\n\n1.5.1\n  * Sort ``:members:`` alphabetically when an order is not explicitly specified.\n\n1.5\n  * Add ``:members:`` option to ``autoclass``.\n  * Add ``:private-members:`` and ``:exclude-members:`` options to go with it.\n  * Significantly refactor to allow directive classes to talk to each other.\n\n1.4\n  * Add ``jsdoc_config_path`` option.\n\n1.3.1\n  * Tolerate @args and other info field lines that are wrapped in the source code.\n  * Cite the file and line of the source comment in Sphinx-emitted warnings and errors.\n\n1.3\n  * Add ``autoattribute`` directive.\n\n1.2\n  * Always do full rebuilds; don't leave pages stale when JS code has changed but the RSTs have not.\n  * Make Python-3-compatible.\n  * Add basic ``autoclass`` directive.\n\n1.1\n  * Add ``:short-name:`` option.\n\n1.0\n  * Initial release, with just ``js:autofunction``\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla/sphinx-js", "keywords": "sphinx,documentation,docs,javascript,js,jsdoc,restructured,typescript,typedoc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sphinx-js", "package_url": "https://pypi.org/project/sphinx-js/", "platform": "", "project_url": "https://pypi.org/project/sphinx-js/", "project_urls": {"Homepage": "https://github.com/mozilla/sphinx-js"}, "release_url": "https://pypi.org/project/sphinx-js/2.8/", "requires_dist": ["docutils", "Jinja2 (<3.0,>2.0)", "parsimonious (<0.8.0,>=0.7.0)", "six (<2.0,>=1.9.0)", "Sphinx (<3.0,>=1.6)"], "requires_python": "", "summary": "Support for using Sphinx on JSDoc-documented JS code", "version": "2.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"why\">\n<h2>Why</h2>\n<p>When you write a JavaScript library, how do you explain it to people? If it\u2019s a small project in a domain your users are familiar with, JSDoc\u2019s alphabetical list of routines might suffice. But in a larger project, it is useful to intersperse prose with your API docs without having to copy and paste things.</p>\n<p>sphinx-js lets you use the industry-leading <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a> documentation tool with JS projects. It provides a handful of directives, patterned after the Python-centric <a href=\"www.sphinx-doc.org/en/latest/ext/autodoc.html\" rel=\"nofollow\">autodoc</a> ones, for pulling JSDoc-formatted documentation into reStructuredText pages. And, because you can keep using JSDoc in your code, you remain compatible with the rest of your JS tooling, like Google\u2019s Closure Compiler.</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<ol>\n<li><p>Install JSDoc using npm. <tt>jsdoc</tt> must be on your <tt>$PATH</tt>, so you might want to install it globally:</p>\n<pre>npm install -g jsdoc\n</pre>\n<p>We work with jsdoc 3.6.3 and quite possibly other versions.</p>\n</li>\n<li><p>Install sphinx-js, which will pull in Sphinx itself as a dependency:</p>\n<pre>pip install sphinx-js\n</pre>\n</li>\n<li><p>Make a documentation folder in your project by running <tt><span class=\"pre\">sphinx-quickstart</span></tt> and answering its questions:</p>\n<pre>cd my-project\nsphinx-quickstart\n\n  &gt; Root path for the documentation [.]: docs\n  &gt; Separate source and build directories (y/n) [n]:\n  &gt; Name prefix for templates and static dir [_]:\n  &gt; Project name: My Project\n  &gt; Author name(s): Fred Fredson\n  &gt; Project version []: 1.0\n  &gt; Project release [1.0]:\n  &gt; Project language [en]:\n  &gt; Source file suffix [.rst]:\n  &gt; Name of your master document (without suffix) [index]:\n  &gt; Do you want to use the epub builder (y/n) [n]:\n  &gt; autodoc: automatically insert docstrings from modules (y/n) [n]:\n  &gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]:\n  &gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]:\n  &gt; todo: write \"todo\" entries that can be shown or hidden on build (y/n) [n]:\n  &gt; coverage: checks for documentation coverage (y/n) [n]:\n  &gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]:\n  &gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]:\n  &gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]:\n  &gt; viewcode: include links to the source code of documented Python objects (y/n) [n]:\n  &gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]:\n  &gt; Create Makefile? (y/n) [y]:\n  &gt; Create Windows command file? (y/n) [y]:\n</pre>\n</li>\n<li><p>In the generated Sphinx conf.py file, turn on <tt>sphinx_js</tt> by adding it to <tt>extensions</tt>:</p>\n<pre>extensions = ['sphinx_js']\n</pre>\n</li>\n<li><p>If your JS source code is anywhere but at the root of your project, add <tt>js_source_path = <span class=\"pre\">'../somewhere/else'</span></tt> on a line by itself in conf.py. The root of your JS source tree should be where that setting points, relative to the conf.py file. (The default, <tt>../</tt>, works well when there is a <tt>docs</tt> folder at the root of your project and your source code lives directly inside the root.)</p>\n</li>\n<li><p>If you have special jsdoc configuration, add <tt>jsdoc_config_path = <span class=\"pre\">'../conf.json'</span></tt> (for example) to conf.py as well.</p>\n</li>\n<li><p>If you\u2019re documenting only JS and no other languages, you can set your \u201cprimary domain\u201d to JS in conf.py:</p>\n<pre>primary_domain = 'js'\n</pre>\n<p>Then you can omit all the \u201cjs:\u201d prefixes in the directives below.</p>\n</li>\n</ol>\n</div>\n<div id=\"use\">\n<h2>Use</h2>\n<p>In short, write a folder full of reStructuredText files, use the following directives to pull in your JSDoc documentation, then tell Sphinx to render it all by running <tt>make html</tt> in your docs directory. If you have never used Sphinx or written reStructuredText before, here is <a href=\"http://www.sphinx-doc.org/en/stable/tutorial.html#defining-document-structure\" rel=\"nofollow\">where we left off in its tutorial</a>. For a quick start, just add things to index.rst for now.</p>\n<div id=\"autofunction\">\n<h3>autofunction</h3>\n<p>First, document your JS code using standard JSDoc formatting:</p>\n<pre>/**\n * Return the ratio of the inline text length of the links in an element to\n * the inline text length of the entire element.\n *\n * @param {Node} node - Types or not: either works.\n * @throws {PartyError|Hearty} Multiple types work fine.\n * @returns {Number} Types and descriptions are both supported.\n */\nfunction linkDensity(node) {\n    const length = node.flavors.get('paragraphish').inlineLength;\n    const lengthWithoutLinks = inlineTextLength(node.element,\n                                                element =&gt; element.tagName !== 'A');\n    return (length - lengthWithoutLinks) / length;\n}\n</pre>\n<p>Then, reference your documentation using sphinx-js directives. Our directives work much like Sphinx\u2019s standard autodoc ones. You can specify just a function\u2019s name\u2026</p>\n<pre>.. js:autofunction:: someFunction\n</pre>\n<p>\u2026and a nicely formatted block of documentation will show up in your docs.</p>\n<p>You can also throw in your own explicit parameter list, if you want to note\noptional parameters:</p>\n<pre>.. js:autofunction:: someFunction(foo, bar[, baz])\n</pre>\n<p>Parameter properties and destructuring parameters also work fine, using <a href=\"http://usejsdoc.org/tags-param.html#parameters-with-properties\" rel=\"nofollow\">standard JSDoc syntax</a>:</p>\n<pre>/**\n * Export an image from the given canvas and save it to the disk.\n *\n * @param {Object} options Output options\n * @param {string} options.format The output format (``jpeg``,  ``png``, or\n *     ``webp``)\n * @param {number} options.quality The output quality when format is\n *     ``jpeg`` or ``webp`` (from ``0.00`` to ``1.00``)\n */\nfunction saveCanvas({ format, quality }) {\n    // ...\n}\n</pre>\n<p>Extraction of default parameter values works as well. These act as expected, with a few caveats:</p>\n<pre>/**\n * You must declare the params, even if you have nothing else to say, so\n * JSDoc will extract the default values.\n *\n * @param [num]\n * @param [str]\n * @param [bool]\n * @param [nil]\n */\nfunction defaultsDocumentedInCode(num=5, str=\"true\", bool=true, nil=null) {}\n\n/**\n * JSDoc guesses types for things like \"42\". If you have a string-typed\n * default value that looks like a number or boolean, you'll need to\n * specify its type explicitly. Conversely, if you have a more complex\n * value like an arrow function, specify a non-string type on it so it\n * isn't interpreted as a string. Finally, if you have a disjoint type like\n * {string|Array} specify string first if you want your default to be\n * interpreted as a string.\n *\n * @param {function} [func=() =&gt; 5]\n * @param [str=some string]\n * @param {string} [strNum=42]\n * @param {string|Array} [strBool=true]\n * @param [num=5]\n * @param [nil=null]\n */\nfunction defaultsDocumentedInDoclet(func, strNum, strBool, num, nil) {}\n</pre>\n<p>You can even add additional content. If you do, it will appear just below any extracted documentation:</p>\n<pre>.. js:autofunction:: someFunction\n\n    Here are some things that will appear...\n\n    * Below\n    * The\n    * Extracted\n    * Docs\n\n    Enjoy!\n</pre>\n<p><tt>js:autofunction</tt> has one option, <tt><span class=\"pre\">:short-name:</span></tt>, which comes in handy for chained APIs whose implementation details you want to keep out of sight. When you use it on a class method, the containing class won\u2019t be mentioned in the docs, the function will appear under its short name in indices, and cross references must use the short name as well (<tt><span class=\"pre\">:func:`someFunction`</span></tt>):</p>\n<pre>.. js:autofunction:: someClass#someFunction\n   :short-name:\n</pre>\n<p><tt>autofunction</tt> can also be used on callbacks defined with the <a href=\"http://usejsdoc.org/tags-callback.html\" rel=\"nofollow\">@callback tag</a>.</p>\n<p>There is experimental support for abusing <tt>autofunction</tt> to document <a href=\"http://usejsdoc.org/tags-typedef.html\" rel=\"nofollow\">@typedef tags</a> as well, though the result will be styled as a function, and <tt>@property</tt> tags will fall misleadingly under an \u201cArguments\u201d heading. Still, it\u2019s better than nothing until we can do it properly.</p>\n</div>\n<div id=\"autoclass\">\n<h3>autoclass</h3>\n<p>We provide a <tt>js:autoclass</tt> directive which documents a class with the concatenation of its class comment and its constructor comment. It shares all the features of <tt>js:autofunction</tt> and even takes the same <tt><span class=\"pre\">:short-name:</span></tt> flag, which can come in handy for inner classes. The easiest way to use it is to invoke its <tt>:members:</tt> option, which automatically documents all your class\u2019s public methods and attributes:</p>\n<pre>.. js:autoclass:: SomeEs6Class(constructor, args, if, you[, wish])\n   :members:\n</pre>\n<p>You can add private members by saying\u2026</p>\n<pre>.. js:autoclass:: SomeEs6Class\n   :members:\n   :private-members:\n</pre>\n<p>Privacy is determined by JSDoc <tt>@private</tt> tags.</p>\n<p>Exclude certain members by name with <tt><span class=\"pre\">:exclude-members:</span></tt>:</p>\n<pre>.. js:autoclass:: SomeEs6Class\n   :members:\n   :exclude-members: Foo, bar, baz\n</pre>\n<p>Or explicitly list the members you want. We will respect your ordering.</p>\n<pre>.. js:autoclass:: SomeEs6Class\n   :members: Qux, qum\n</pre>\n<p>When explicitly listing members, you can include <tt>*</tt> to include all unmentioned members. This is useful to have control over ordering of some elements, without having to include an exhaustive list.</p>\n<pre>.. js:autoclass:: SomeEs6Class\n   :members: importMethod, *, uncommonlyUsedMethod\n</pre>\n<p>Finally, if you want full control, pull your class members in one at a time by embedding <tt>js:autofunction</tt> or <tt>js:autoattribute</tt>:</p>\n<pre>.. js:autoclass:: SomeEs6Class\n\n   .. js:autofunction:: SomeEs6Class#someMethod\n\n   Additional content can go here and appears below the in-code comments,\n   allowing you to intersperse long prose passages and examples that you\n   don't want in your code.\n</pre>\n</div>\n<div id=\"autoattribute\">\n<h3>autoattribute</h3>\n<p>This is useful for documenting public properties:</p>\n<pre>class Fnode {\n    constructor(element) {\n        /**\n         * The raw DOM element this wrapper describes\n         */\n        this.element = element;\n    }\n}\n</pre>\n<p>And then, in the docs\u2026</p>\n<pre>.. autoclass:: Fnode\n\n   .. autoattribute:: Fnode#element\n</pre>\n<p>This is also the way to document ES6-style getters and setters, as it omits the trailing <tt>()</tt> of a function. The assumed practice is the usual JSDoc one: document only one of your getter/setter pair:</p>\n<pre>class Bing {\n    /** The bong of the bing */\n    get bong() {\n        return this._bong;\n    }\n\n    set bong(newBong) {\n        this._bong = newBong * 2;\n    }\n}\n</pre>\n<p>And then, in the docs\u2026</p>\n<pre>.. autoattribute:: Bing#bong\n</pre>\n</div>\n<div id=\"dodging-ambiguity-with-pathnames\">\n<h3>Dodging Ambiguity With Pathnames</h3>\n<p>If you have same-named objects in different files, use pathnames to disambiguate them. Here\u2019s a particularly long example:</p>\n<pre>.. js:autofunction:: ./some/dir/some/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n</pre>\n<p>You may recognize the separators <tt>#.~</tt> from <a href=\"http://usejsdoc.org/about-namepaths.html\" rel=\"nofollow\">JSDoc namepaths</a>; they work the same here.</p>\n<p>For conciseness, you can use any unique suffix, as long as it consists of complete path segments. These would all be equivalent to the above, assuming they are unique within your source tree:</p>\n<pre>innerMember\nstaticMethod~innerMember\nSomeClass#someInstanceMethod.staticMethod~innerMember\nsome/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n</pre>\n<p>Things to note:</p>\n<ul>\n<li><p>We use simple file paths rather than JSDoc\u2019s <tt>module:</tt> prefix.</p>\n</li>\n<li><p>We use simple backslash escaping exclusively rather than switching escaping schemes halfway through the path; JSDoc itself <a href=\"https://github.com/jsdoc3/jsdoc/issues/876\" rel=\"nofollow\">is headed that way as well</a>. The characters that need to be escaped are <tt><span class=\"pre\">#.~(/</span></tt>, though you do not need to escape the dots in a leading <tt>./</tt> or <tt>../</tt>. A really horrible path might be\u2026</p>\n<pre>some/path\\ with\\ spaces/file.topLevelObject#instanceMember.staticMember\\(with\\(parens\n</pre>\n</li>\n<li><p>Relative paths are relative to the <tt>js_source_path</tt> specified in the config. Absolute paths are not allowed.</p>\n</li>\n</ul>\n<p>Behind the scenes, sphinx-js will change all separators to dots so that\u2026</p>\n<ul>\n<li>Sphinx\u2019s \u201cshortening\u201d syntax works: <tt><span class=\"pre\">:func:`~InwardRhs.atMost`</span></tt> prints as merely <tt>atMost()</tt>. (For now, you should always use dots rather than other namepath separators: <tt>#~</tt>.)</li>\n<li>Sphinx indexes more informatively, saying methods belong to their classes.</li>\n</ul>\n</div>\n<div id=\"saving-keystrokes-by-setting-the-primary-domain\">\n<h3>Saving Keystrokes By Setting The Primary Domain</h3>\n<p>To save some keystrokes, you can set <tt>primary_domain = 'js'</tt> in conf.py and then say (for example) <tt>autofunction</tt> rather than <tt>js:autofunction</tt>.</p>\n</div>\n<div id=\"typescript-support\">\n<h3>TypeScript support</h3>\n<p>There is experimental TypeScript support in sphinx-js. Enable it by setting the config variable <tt>js_language = 'typescript'</tt>. Then, instead of installing JSDoc, install TypeDoc (version 0.15.0 is known to work):</p>\n<pre>npm install -g typedoc\n</pre>\n<p>The main difference you\u2019ll notice is additional <strong>type</strong> fields in function documentation.</p>\n</div>\n<div id=\"configuration-reference\">\n<h3>Configuration Reference</h3>\n<dl>\n<dt><tt>js_language</tt></dt>\n<dd>Use \u2018javascript\u2019 or \u2018typescript\u2019 depending on the language you use. The default is \u2018javascript\u2019.</dd>\n<dt><tt>js_source_path</tt></dt>\n<dd>A list of directories to scan (non-recursively) for JS files, relative to Sphinx\u2019s conf.py file. Can be a string instead if there is only one. If there is more than one, <tt>root_for_relative_js_paths</tt> must be specified as well.</dd>\n<dt><tt>jsdoc_config_path</tt></dt>\n<dd>A conf.py-relative path to a jsdoc or typedoc config file, which is useful if you want to specify your own jsdoc options, like recursion and custom filename matching.</dd>\n<dt><tt>root_for_relative_js_paths</tt></dt>\n<dd>The directory relative to which relative pathnames are resolved. Defaults to <tt>js_source_path</tt> if it is only one item.</dd>\n<dt><tt>jsdoc_cache</tt></dt>\n<dd>Path to a file where jsdoc output will be cached. If omitted, jsdoc will be run every time Sphinx is. If you have a large number of source files, it may be beneficial to configure this value. But be careful: the cache is not automatically flushed if your source code changes; you must delete it manually.</dd>\n</dl>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>A good example using most of sphinx-js\u2019s functionality is the Fathom documentation. A particularly juicy page is <a href=\"https://mozilla.github.io/fathom/ruleset.html\" rel=\"nofollow\">https://mozilla.github.io/fathom/ruleset.html</a>. Click the \u201cView page source\u201d link to see the raw directives.</p>\n<p><a href=\"https://readthedocs.org/\" rel=\"nofollow\">ReadTheDocs</a> is the canonical hosting platform for Sphinx docs and now supports sphinx-js as an opt-in beta. Put this in the <tt>.readthedocs.yml</tt> file at the root of your repo:</p>\n<pre>requirements_file: docs/requirements.txt\nbuild:\n  image: latest\n</pre>\n<p>Then put the version of sphinx-js you want in <tt>docs/requirements.txt</tt>. For example\u2026</p>\n<pre>sphinx-js==2.8\n</pre>\n<p>Or, if you prefer, the Fathom repo carries a <a href=\"https://github.com/mozilla/fathom/blob/92304b8ad4768e90c167c3d93f9865771f5a6d80/.travis.yml#L41\" rel=\"nofollow\">Travis CI configuration</a> and a <a href=\"https://github.com/mozilla/fathom/blob/92304b8ad4768e90c167c3d93f9865771f5a6d80/tooling/travis-deploy-docs\" rel=\"nofollow\">deployment script</a> for building docs with sphinx-js and publishing them to GitHub Pages. Feel free to borrow them.</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<ul>\n<li>We don\u2019t understand the inline JSDoc constructs like <tt>{@link foo}</tt>; you have to use Sphinx-style equivalents for now, like <tt><span class=\"pre\">:js:func:`foo`</span></tt> (or simply <tt><span class=\"pre\">:func:`foo`</span></tt> if you have set <tt>primary_domain = 'js'</tt> in conf.py.</li>\n<li>So far, we understand and convert the JSDoc block tags <tt>@param</tt>, <tt>@returns</tt>, <tt>@throws</tt>, <tt>@example</tt> (without the optional <tt>&lt;caption&gt;</tt>), <tt>@deprecated</tt>, <tt>@see</tt>, and their synonyms. Other ones will go <em>poof</em> into the ether.</li>\n</ul>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Run the tests using tox, which will also install jsdoc and typedoc at pinned versions:</p>\n<pre>pip install tox\ntox -e py37\n</pre>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<dl>\n<dt>2.8</dt>\n<dd><ul>\n<li>Display generic TypeScript types properly. Make fields come before methods. (Paul Grau)</li>\n<li>Combine constructor and class documentation at the top TypeScript classes. (Sebastian Weigand)</li>\n<li>Switch to pytest as the testrunner. (Sebastian Weigand)</li>\n<li>Add optional caching of jsdoc output, for large codebases. (Patrick Browne)</li>\n<li>Fix the display of union types in TypeScript. (Sebastian Weigand)</li>\n<li>Fix parsing breakage that began in typedoc 0.14.0. (Paul Grau)</li>\n<li>Fix a data-intake crash with TypeScript. (Cristiano Santos)</li>\n</ul>\n</dd>\n<dt>2.7.1</dt>\n<dd><ul>\n<li>Fix a crash that would happen sometimes with UTF-8 on Windows. #67.</li>\n<li>Always use conf.py\u2019s dir for jsdoc\u2019s working dir. #78. (Thomas Khyn)</li>\n</ul>\n</dd>\n<dt>2.7</dt>\n<dd><ul>\n<li>Add experimental TypeScript support. (Wim Yedema)</li>\n</ul>\n</dd>\n<dt>2.6</dt>\n<dd><ul>\n<li>Add support for <tt>@deprecated</tt> and <tt>@see</tt>. (David Li)</li>\n<li>Notice and document JS variadic params nicely. (David Li)</li>\n<li>Add linter to codebase.</li>\n</ul>\n</dd>\n<dt>2.5</dt>\n<dd><ul>\n<li>Use documented <tt>@params</tt> to help fill out the formal param list for a\nfunction. This keeps us from missing params that use destructuring. (flozz)</li>\n<li>Improve error reporting when jsdoc is missing.</li>\n<li>Add extracted default values to generated formal param lists. (flozz and erikrose)</li>\n</ul>\n</dd>\n<dt>2.4</dt>\n<dd><ul>\n<li>Support the <tt>@example</tt> tag. (lidavidm)</li>\n<li>Work under Windows. Before, we could hardly find any documentation. (flozz)</li>\n<li>Properly unwrap multiple-line JSDoc tags, even if they have Windows line endings. (Wim Yedema)</li>\n<li>Drop support for Python 3.3, since Sphinx has also done so.</li>\n<li>Fix build-time crash when using recommonmark (for Markdown support) under Sphinx &gt;=1.7.1. (jamrizzi)</li>\n</ul>\n</dd>\n<dt>2.3.1</dt>\n<dd><ul>\n<li>Find the jsdoc command on Windows, where it has a different name. Then\npatch up process communication so it doesn\u2019t hang.</li>\n</ul>\n</dd>\n<dt>2.3</dt>\n<dd><ul>\n<li>Add the ability to say \u201c*\u201d within the <tt>autoclass :members:</tt> option, meaning \u201cand all the members that I didn\u2019t explicitly list\u201d.</li>\n</ul>\n</dd>\n<dt>2.2</dt>\n<dd><ul>\n<li>Add <tt>autofunction</tt> support for <tt>@callback</tt> tags. (krassowski)</li>\n<li>Add experimental <tt>autofunction</tt> support for <tt>@typedef</tt> tags. (krassowski)</li>\n<li>Add a nice error message for when jsdoc can\u2019t find any JS files.</li>\n<li>Pin six more tightly so <tt>python_2_unicode_compatible</tt> is sure to be around.</li>\n</ul>\n</dd>\n<dt>2.1</dt>\n<dd><ul>\n<li>Allow multiple folders in <tt>js_source_path</tt>. This is useful for gradually migrating large projects, one folder at a time, to jsdoc. Introduce <tt>root_for_relative_js_paths</tt> to keep relative paths unambiguous in the face of multiple source paths.</li>\n<li>Aggregate PathTaken errors, and report them all at once. This means you don\u2019t have to run JSDoc repeatedly while cleaning up large projects.</li>\n<li>Fix a bytes-vs-strings issue that crashed on versions of Python 3 before 3.6. (jhkennedy)</li>\n<li>Tolerate JS files that have filename extensions other than \u201c.js\u201d. Before, when combined with custom jsdoc configuration that ingested such files, incorrect object pathnames were generated, which led to spurious \u201cNo JSDoc documentation was found for object \u2026\u201d errors.</li>\n</ul>\n</dd>\n<dt>2.0.1</dt>\n<dd><ul>\n<li>Fix spurious syntax errors while loading large JSDoc output by writing it to a temp file first. (jhkennedy)</li>\n</ul>\n</dd>\n<dt>2.0</dt>\n<dd><ul>\n<li>Deal with ambiguous object paths. Symbols with identical JSDoc longnames (such as two top-level things called \u201cfoo\u201d in different files) will no longer have one shadow the other. Introduce an unambiguous path convention for referring to objects. Add a real parser to parse them rather than the dirty tricks we were using before. Backward compatibility breaks a little, because ambiguous references are now a fatal error, rather than quietly referring to the last definition JSDoc happened to encounter.</li>\n<li>Index everything into a suffix tree so you can use any unique path suffix to refer to an object.</li>\n<li>Other fallout of having a real parser:<ul>\n<li>Stop supporting \u201c-\u201d as a namepath separator.</li>\n<li>No longer spuriously translate escaped separators in namepaths into dots.</li>\n<li>Otherwise treat paths and escapes properly. For example, we can now handle symbols that contain \u201c(\u201c.</li>\n</ul>\n</li>\n<li>Fix KeyError when trying to gather the constructor params of a plain old\nobject labeled as a <tt>@class</tt>.</li>\n</ul>\n</dd>\n<dt>1.5.2</dt>\n<dd><ul>\n<li>Fix crasher while warning that a specified longname isn\u2019t found.</li>\n</ul>\n</dd>\n<dt>1.5.1</dt>\n<dd><ul>\n<li>Sort <tt>:members:</tt> alphabetically when an order is not explicitly specified.</li>\n</ul>\n</dd>\n<dt>1.5</dt>\n<dd><ul>\n<li>Add <tt>:members:</tt> option to <tt>autoclass</tt>.</li>\n<li>Add <tt><span class=\"pre\">:private-members:</span></tt> and <tt><span class=\"pre\">:exclude-members:</span></tt> options to go with it.</li>\n<li>Significantly refactor to allow directive classes to talk to each other.</li>\n</ul>\n</dd>\n<dt>1.4</dt>\n<dd><ul>\n<li>Add <tt>jsdoc_config_path</tt> option.</li>\n</ul>\n</dd>\n<dt>1.3.1</dt>\n<dd><ul>\n<li>Tolerate @args and other info field lines that are wrapped in the source code.</li>\n<li>Cite the file and line of the source comment in Sphinx-emitted warnings and errors.</li>\n</ul>\n</dd>\n<dt>1.3</dt>\n<dd><ul>\n<li>Add <tt>autoattribute</tt> directive.</li>\n</ul>\n</dd>\n<dt>1.2</dt>\n<dd><ul>\n<li>Always do full rebuilds; don\u2019t leave pages stale when JS code has changed but the RSTs have not.</li>\n<li>Make Python-3-compatible.</li>\n<li>Add basic <tt>autoclass</tt> directive.</li>\n</ul>\n</dd>\n<dt>1.1</dt>\n<dd><ul>\n<li>Add <tt><span class=\"pre\">:short-name:</span></tt> option.</li>\n</ul>\n</dd>\n<dt>1.0</dt>\n<dd><ul>\n<li>Initial release, with just <tt>js:autofunction</tt></li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 5838078, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "26e8f4f7dcc8441fe24f13b55baf7cbc", "sha256": "b0d1c77bef355be71ff1cf97913a543230fe1d7b1b5927ead9f3679fcb98b8f7"}, "downloads": -1, "filename": "sphinx-js-1.0.tar.gz", "has_sig": false, "md5_digest": "26e8f4f7dcc8441fe24f13b55baf7cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5823, "upload_time": "2017-02-07T20:52:03", "upload_time_iso_8601": "2017-02-07T20:52:03.537186Z", "url": "https://files.pythonhosted.org/packages/c0/dd/e4666ea2aceab2d9135008c6b81a2f74cf4aa83cc195db6a5fc75d0351fe/sphinx-js-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "017c1542701ffc770a2fb05670aae1d6", "sha256": "3b41e8114554579428bfb2f83e58513e7dc9e76a8cf3fc1f9d4bd7240b7728b8"}, "downloads": -1, "filename": "sphinx-js-1.1.tar.gz", "has_sig": false, "md5_digest": "017c1542701ffc770a2fb05670aae1d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6566, "upload_time": "2017-02-13T20:24:29", "upload_time_iso_8601": "2017-02-13T20:24:29.235246Z", "url": "https://files.pythonhosted.org/packages/0c/d4/6bca80bab1919a41e3cb2420f1d0de55e38e88ae7fbdd2cdfc7c06e121f0/sphinx-js-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "455026ea9b80de5a2e0379707c2fdbe6", "sha256": "2910090c9f4f4c35f268ab934e78f155db52675ad9e7beb8dea537699a5f64b4"}, "downloads": -1, "filename": "sphinx-js-1.2.tar.gz", "has_sig": false, "md5_digest": "455026ea9b80de5a2e0379707c2fdbe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7869, "upload_time": "2017-02-14T22:10:48", "upload_time_iso_8601": "2017-02-14T22:10:48.112141Z", "url": "https://files.pythonhosted.org/packages/69/22/77d6025b1f7eb75e6d51532e35d206958bd5310073a27c45d0a06a1830fa/sphinx-js-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "44e12d2718cedaa83d75632feb6febac", "sha256": "d0d21ee4e601a53bbd533f01ec366601d23f915a5f7c8fff229572c1ce16e56f"}, "downloads": -1, "filename": "sphinx-js-1.3.tar.gz", "has_sig": false, "md5_digest": "44e12d2718cedaa83d75632feb6febac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8459, "upload_time": "2017-02-21T21:08:19", "upload_time_iso_8601": "2017-02-21T21:08:19.598677Z", "url": "https://files.pythonhosted.org/packages/57/6c/bad7b88829cb68798c089afcc005dff72164cacff3aca1a9b7d7c25c34b1/sphinx-js-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "f6c730af8865eb7587fced9931fb8557", "sha256": "d9b10842256b954571b1f77ec3a0f99bc23f1e8c7e4e3f8c10757c4cc2a62f1a"}, "downloads": -1, "filename": "sphinx-js-1.3.1.tar.gz", "has_sig": false, "md5_digest": "f6c730af8865eb7587fced9931fb8557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8699, "upload_time": "2017-03-06T17:31:18", "upload_time_iso_8601": "2017-03-06T17:31:18.941012Z", "url": "https://files.pythonhosted.org/packages/51/73/6c4410f829bdfe4c820da9a7a56be1161e1a90ac69aa619af63bc2c21cd5/sphinx-js-1.3.1.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "c065fa422738444c9d40c5393cf380f2", "sha256": "57ae9149ae8897436749037b159c2e3c181e0ef714b0552c71429fb4f7387e9e"}, "downloads": -1, "filename": "sphinx-js-1.4.tar.gz", "has_sig": false, "md5_digest": "c065fa422738444c9d40c5393cf380f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8817, "upload_time": "2017-03-10T21:51:38", "upload_time_iso_8601": "2017-03-10T21:51:38.261555Z", "url": "https://files.pythonhosted.org/packages/9c/9a/854431940596cd688cdbc2ba778f6918c3fd03c3de1e5a34b2d673b00eef/sphinx-js-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "9affcaad0c42ae45e223eb0220a98a74", "sha256": "701ba5b02b4878d075754ea9c31d6c496f6ba3f60ef098d552b234d2d5234358"}, "downloads": -1, "filename": "sphinx-js-1.5.tar.gz", "has_sig": false, "md5_digest": "9affcaad0c42ae45e223eb0220a98a74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14285, "upload_time": "2017-03-17T20:07:13", "upload_time_iso_8601": "2017-03-17T20:07:13.665015Z", "url": "https://files.pythonhosted.org/packages/89/d0/38cc8c3cb45d121483c33e7654480a16805e44bb326e4bc6fe79c6e5d905/sphinx-js-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "4c3bdf8f8c5e30199883aae94720f7de", "sha256": "e94865def38f84e20ba5c354043a096499c8dd579b7c89ee32c62cc4f4e86f77"}, "downloads": -1, "filename": "sphinx-js-1.5.1.tar.gz", "has_sig": false, "md5_digest": "4c3bdf8f8c5e30199883aae94720f7de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14408, "upload_time": "2017-03-20T13:49:45", "upload_time_iso_8601": "2017-03-20T13:49:45.162458Z", "url": "https://files.pythonhosted.org/packages/9f/17/3e1fe8ead23c2d496d15eb90d0f9229ee0d7b12ef2e0fef7d943a200aae6/sphinx-js-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "44c536a54d4272bad8ba23140dca863b", "sha256": "847c5ac414891fa307e9dc9b2531302ce49342fbdd3586f5976cba3ad01446c8"}, "downloads": -1, "filename": "sphinx-js-1.5.2.tar.gz", "has_sig": false, "md5_digest": "44c536a54d4272bad8ba23140dca863b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14477, "upload_time": "2017-03-22T18:21:14", "upload_time_iso_8601": "2017-03-22T18:21:14.588209Z", "url": "https://files.pythonhosted.org/packages/83/ea/2579db6b846665dd04917fe2b974cf3b5e6588cdf55301078e19012e2a46/sphinx-js-1.5.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "523411ddb442b9373b5b6fbd08640bbf", "sha256": "36e3c10fae982ec10bae62ae3b5794b74c5fc35eac0f35a85ac747f3fd13bb49"}, "downloads": -1, "filename": "sphinx-js-2.0.tar.gz", "has_sig": false, "md5_digest": "523411ddb442b9373b5b6fbd08640bbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19200, "upload_time": "2017-05-04T14:53:20", "upload_time_iso_8601": "2017-05-04T14:53:20.243837Z", "url": "https://files.pythonhosted.org/packages/0e/77/044aacdc77b6e74a7518c9a331672331a9d9650a6d03e1a5f84b369f0791/sphinx-js-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "69d0a584eeaa18745a132a8aa5c1f6b4", "sha256": "21f99519eac49f75141aa52a27217e8ba185cc0f6b43a14526a1748e79a9bb96"}, "downloads": -1, "filename": "sphinx-js-2.0.1.tar.gz", "has_sig": false, "md5_digest": "69d0a584eeaa18745a132a8aa5c1f6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20955, "upload_time": "2017-07-13T21:35:37", "upload_time_iso_8601": "2017-07-13T21:35:37.161712Z", "url": "https://files.pythonhosted.org/packages/68/0a/383d7318c57ab4500014b5a16091ef22fd9d6da9aac00ce14a747eefa3ba/sphinx-js-2.0.1.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "a78eaca4de3b1003637eb035db022678", "sha256": "8c12b2b7ccc6941cbc7c70e4fada903e2947376b48ce07cbb72c72d88f0eef1e"}, "downloads": -1, "filename": "sphinx-js-2.1.tar.gz", "has_sig": false, "md5_digest": "a78eaca4de3b1003637eb035db022678", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22761, "upload_time": "2017-08-30T19:09:48", "upload_time_iso_8601": "2017-08-30T19:09:48.427114Z", "url": "https://files.pythonhosted.org/packages/b9/a2/bada00db3556c95d97a3bf30c8bc59c9af445fdb1f1495aa31f596bd3158/sphinx-js-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "5f5385f43aefb6f00fbb7e14a26fec8a", "sha256": "6afe810d42916009cdb3194c90106574fabe3fcead1cd8990776471aeba31f5f"}, "downloads": -1, "filename": "sphinx-js-2.2.tar.gz", "has_sig": false, "md5_digest": "5f5385f43aefb6f00fbb7e14a26fec8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23429, "upload_time": "2017-10-10T19:43:12", "upload_time_iso_8601": "2017-10-10T19:43:12.441267Z", "url": "https://files.pythonhosted.org/packages/33/f5/3e0689debf554eee7d4f3b6ce18dc171a10a2456481715815ed7cc658747/sphinx-js-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "707a733fd0ef57c67e1db38899bfb0eb", "sha256": "67386758780181f5caaa994f5c9266933f826f94447c232c7f18c54662b4065a"}, "downloads": -1, "filename": "sphinx-js-2.3.tar.gz", "has_sig": false, "md5_digest": "707a733fd0ef57c67e1db38899bfb0eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23941, "upload_time": "2017-11-01T19:35:12", "upload_time_iso_8601": "2017-11-01T19:35:12.484913Z", "url": "https://files.pythonhosted.org/packages/97/7a/68793fe65d8741b82f47591082e530e6265871a3ea9a47932b808077ee23/sphinx-js-2.3.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "452987db1eec0c6f794f468abba05719", "sha256": "0c4fe34a2985fc52dc7c8574e523289d96c0e194f3730262fd4d83ff9915b531"}, "downloads": -1, "filename": "sphinx_js-2.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "452987db1eec0c6f794f468abba05719", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 26867, "upload_time": "2018-01-11T14:55:48", "upload_time_iso_8601": "2018-01-11T14:55:48.488500Z", "url": "https://files.pythonhosted.org/packages/32/cb/a8777f4920f497927c1829d0a7351dd6dd6acde0b66e1a3a475807cf23f7/sphinx_js-2.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc64b31b2378e4fc245041a84ce438b0", "sha256": "ac4d1c06bcf41a2724a61d9307be1dcc09cb968ac14c59ee56aafd0c4c29d041"}, "downloads": -1, "filename": "sphinx_js-2.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc64b31b2378e4fc245041a84ce438b0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26868, "upload_time": "2018-01-11T14:57:24", "upload_time_iso_8601": "2018-01-11T14:57:24.135511Z", "url": "https://files.pythonhosted.org/packages/46/16/4b7f96f3aeb0fa6c7da2c9444a633ebb16fd27e1bc14cf9da16b8ddf3b72/sphinx_js-2.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b73696e56a5843b9b01558fddcb42800", "sha256": "8152262356d821741a9ab3cfd635ef5de9d159a25302bb73102147fc06cc082a"}, "downloads": -1, "filename": "sphinx-js-2.3.1.tar.gz", "has_sig": false, "md5_digest": "b73696e56a5843b9b01558fddcb42800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17861, "upload_time": "2018-01-11T14:55:49", "upload_time_iso_8601": "2018-01-11T14:55:49.894288Z", "url": "https://files.pythonhosted.org/packages/4a/85/48cf7c9629ed9ec8855e8f424cb9c81ea59c15efbd3545713ed747a18afa/sphinx-js-2.3.1.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "127fceac4773e797ca29ee038e485428", "sha256": "2eea9cd65292f3699cd046d41b08738cdece3886099fcb22e2ea20b8310cabbd"}, "downloads": -1, "filename": "sphinx_js-2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "127fceac4773e797ca29ee038e485428", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29754, "upload_time": "2018-03-21T21:07:18", "upload_time_iso_8601": "2018-03-21T21:07:18.894554Z", "url": "https://files.pythonhosted.org/packages/63/9f/2debf011eb49740efb8705499c97ab411887c45f2f9be9415241ffc53a25/sphinx_js-2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f855fd9b6483c97330f6e9ee3f47f32", "sha256": "6f80e047f01deb16a20fe111f82f8cbca164499cad5614fe9d2a04450e750a7d"}, "downloads": -1, "filename": "sphinx-js-2.4.tar.gz", "has_sig": false, "md5_digest": "2f855fd9b6483c97330f6e9ee3f47f32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19488, "upload_time": "2018-03-21T21:07:21", "upload_time_iso_8601": "2018-03-21T21:07:21.756963Z", "url": "https://files.pythonhosted.org/packages/ba/d5/18899f8bb6bacfb3e3d1718c9f69d448b071e264bf77268691eae3e6b7c5/sphinx-js-2.4.tar.gz", "yanked": false}], "2.5": [{"comment_text": "", "digests": {"md5": "2741e07ccd9a52255b9bca1419efdefb", "sha256": "ae7ffdc5bb393d1f546ec556ee17be0a69bf4623f406d0bfa961ea3409789763"}, "downloads": -1, "filename": "sphinx-js-2.5.tar.gz", "has_sig": false, "md5_digest": "2741e07ccd9a52255b9bca1419efdefb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21544, "upload_time": "2018-04-20T18:23:40", "upload_time_iso_8601": "2018-04-20T18:23:40.333087Z", "url": "https://files.pythonhosted.org/packages/62/1a/d2ef1d4be345e48edf2b3c3e637f05b100c18c06a59b4c8625b586188d09/sphinx-js-2.5.tar.gz", "yanked": false}], "2.6": [{"comment_text": "", "digests": {"md5": "6c625397e034a7cd402832554e3b5dd5", "sha256": "be5b966ec05cb99b4af239979b82e69be1c2bebe002fa4a70d248baf3230e664"}, "downloads": -1, "filename": "sphinx_js-2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c625397e034a7cd402832554e3b5dd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33163, "upload_time": "2018-07-26T21:11:48", "upload_time_iso_8601": "2018-07-26T21:11:48.488449Z", "url": "https://files.pythonhosted.org/packages/0c/47/22dcc95426042ef43391bb084fe85ab06131ef5cfe7ae09561ad9bef9d34/sphinx_js-2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06405b7e124921ec7a1cbca1fa74886b", "sha256": "9e3c5880e74425135579bff67a282a507024ad3a2e9c2e1723b5ac701cb37053"}, "downloads": -1, "filename": "sphinx-js-2.6.tar.gz", "has_sig": false, "md5_digest": "06405b7e124921ec7a1cbca1fa74886b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21977, "upload_time": "2018-07-26T21:11:49", "upload_time_iso_8601": "2018-07-26T21:11:49.923568Z", "url": "https://files.pythonhosted.org/packages/4d/87/c8d3c9c8b063a0d7caff91e31c0ce2f118c5883590192267ced352c4a755/sphinx-js-2.6.tar.gz", "yanked": false}], "2.7": [{"comment_text": "", "digests": {"md5": "46caa841380ca6c08d175f30b0c956ae", "sha256": "57eee60b997a522bb5d101ac1015c21164c8b3637de819e12fb9001906f540a5"}, "downloads": -1, "filename": "sphinx_js-2.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46caa841380ca6c08d175f30b0c956ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41991, "upload_time": "2018-08-02T15:22:34", "upload_time_iso_8601": "2018-08-02T15:22:34.049360Z", "url": "https://files.pythonhosted.org/packages/26/ef/7273ee2840cc634c2a4d3398d07ff34fdf1ab5c11f6dc5fd4d3d52d81705/sphinx_js-2.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3d09349996e786cb0ac58e4a1486d50", "sha256": "f7e22e36ec421c21863ad0047bf7cedff8874ee6effbd9b7e5417c3c09f3e7c1"}, "downloads": -1, "filename": "sphinx-js-2.7.tar.gz", "has_sig": false, "md5_digest": "e3d09349996e786cb0ac58e4a1486d50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33666, "upload_time": "2018-08-02T15:22:35", "upload_time_iso_8601": "2018-08-02T15:22:35.464638Z", "url": "https://files.pythonhosted.org/packages/13/1f/d8b6fc2962a3863e4166ef022895fb3cb0a2606127924ad0977fa9655b32/sphinx-js-2.7.tar.gz", "yanked": false}], "2.7.1": [{"comment_text": "", "digests": {"md5": "67f78a6b5d7ac346b71cb6b3f0cd2d49", "sha256": "daa5a9da8f43aaeccf6cf696194d86a3a10c2e0210c392c15f95df2112fc6f6c"}, "downloads": -1, "filename": "sphinx-js-2.7.1.tar.gz", "has_sig": false, "md5_digest": "67f78a6b5d7ac346b71cb6b3f0cd2d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34977, "upload_time": "2018-11-16T16:43:49", "upload_time_iso_8601": "2018-11-16T16:43:49.004767Z", "url": "https://files.pythonhosted.org/packages/b2/12/f23b71aa1bf75c06ba0838940facbe6d4090973306690b1715a9b2f2cec7/sphinx-js-2.7.1.tar.gz", "yanked": false}], "2.8": [{"comment_text": "", "digests": {"md5": "5269583ca96281c01297dc86abc8ecc8", "sha256": "8c6775b8be82b6edbac12e1f8b590e6f5a24585549bd18043ec47d1051560de2"}, "downloads": -1, "filename": "sphinx_js-2.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5269583ca96281c01297dc86abc8ecc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35974, "upload_time": "2019-09-16T20:22:50", "upload_time_iso_8601": "2019-09-16T20:22:50.027910Z", "url": "https://files.pythonhosted.org/packages/f4/c7/e114c7458158288d8c604af8834a5d04c4c5081cfaaba1488125acaa9e2c/sphinx_js-2.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea31cfc718434638d7fcfa9007971f77", "sha256": "c7a97c4d23d592d41a38fc9c6b3a5902578ad1bfcf0ed5094691909fd5f372cd"}, "downloads": -1, "filename": "sphinx-js-2.8.tar.gz", "has_sig": false, "md5_digest": "ea31cfc718434638d7fcfa9007971f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36098, "upload_time": "2019-09-16T20:22:51", "upload_time_iso_8601": "2019-09-16T20:22:51.674906Z", "url": "https://files.pythonhosted.org/packages/d1/1f/5b8c15880b2a3c4b0ecebd780f656db5f257cea23649cb83feae8323e801/sphinx-js-2.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5269583ca96281c01297dc86abc8ecc8", "sha256": "8c6775b8be82b6edbac12e1f8b590e6f5a24585549bd18043ec47d1051560de2"}, "downloads": -1, "filename": "sphinx_js-2.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5269583ca96281c01297dc86abc8ecc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35974, "upload_time": "2019-09-16T20:22:50", "upload_time_iso_8601": "2019-09-16T20:22:50.027910Z", "url": "https://files.pythonhosted.org/packages/f4/c7/e114c7458158288d8c604af8834a5d04c4c5081cfaaba1488125acaa9e2c/sphinx_js-2.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea31cfc718434638d7fcfa9007971f77", "sha256": "c7a97c4d23d592d41a38fc9c6b3a5902578ad1bfcf0ed5094691909fd5f372cd"}, "downloads": -1, "filename": "sphinx-js-2.8.tar.gz", "has_sig": false, "md5_digest": "ea31cfc718434638d7fcfa9007971f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36098, "upload_time": "2019-09-16T20:22:51", "upload_time_iso_8601": "2019-09-16T20:22:51.674906Z", "url": "https://files.pythonhosted.org/packages/d1/1f/5b8c15880b2a3c4b0ecebd780f656db5f257cea23649cb83feae8323e801/sphinx-js-2.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:02 2020"}