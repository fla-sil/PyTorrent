{"info": {"author": "Avinash Kori, Parth Natekar", "author_email": "koriavinash1@gmail.com, parth@smail.iitm.ac.in", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# BioExp\nExplaining Deep Learning Models which perform various image processing tasks in the medical domain.\n\n# Citations\nIf you use [BioExp](https://arxiv.org/pdf/1909.01498.pdf), please cite our work:\n\n```\n@article{natekar2019demystifying,\n  title={Demystifying Brain Tumour Segmentation Networks: Interpretability and Uncertainty Analysis},\n  author={Natekar, Parth and Kori, Avinash and Krishnamurthi, Ganapathy},\n  journal={arXiv preprint arXiv:1909.01498},\n  year={2019}\n}\n\n```\n\n# Defined Pipeline\n![pipeline](./imgs/pipeline.png)\n\n\n# Features\n\nBioExp supports the following interpretability methods:\n\n- Model Dissection Analysis\n- Model Ablation Analysis\n- Model Uncertainty Analysis\n  - Epistemic Uncertainty using Bayesian Dropout\n  - Aleatoric Uncertainty using Test Time Augmentation\n- GradCAM\n- Activation Maximization\n\n# Installation\nRunning of the explainability pipeline requires a GPU and several deep learning modules. \n\n### Requirements\n- 'pandas'\n- 'numpy'\n- 'scipy==1.6.0'\n- 'matplotlib'\n- 'pillow'\n- 'simpleITK'\n- 'opencv-python'\n- 'tensorflow-gpu==1.14'\n- 'keras'\n- 'keras-vis'\n- 'lucid'\n\nThe following command will install only the dependencies listed above.\n\n```\npip install \"BioExp[gpu]\"\n\nor \n\npip install \"BioExp[cpu]\"\n```\n\n# Ablation\n\n## Usage\n```\nfrom BioExp.spatial import Ablation\n\nA = spatial.Ablation(model = model, \n\t\t\t\tweights_pth = weights_path, \n\t\t\t\tmetric      = dice_label_coef, \n\t\t\t\tlayer_name  = layer_name, \n\t\t\t\ttest_image  = test_image, \n\t\t\t\tgt \t    = gt, \n\t\t\t\tclasses     = infoclasses, \n\t\t\t\tnclasses    = 4)\n\ndf = A.ablate_filter(step = 1)\n```\n\n# Dissection\n\n## Usage\n```\nfrom BioExp.spatial import Dissector\n\nlayer_name = 'conv2d_3'\ninfoclasses = {}\nfor i in range(1): infoclasses['class_'+str(i)] = (i,)\ninfoclasses['whole'] = (1,2,3)\n\ndissector = Dissector(model=model,\n                        layer_name = layer_name)\n\nthreshold_maps = dissector.get_threshold_maps(dataset_path = data_root_path,\n                                                save_path  = savepath,\n                                                percentile = 85)\ndissector.apply_threshold(image, threshold_maps, \n                        nfeatures =9, \n                        save_path = savepath, \n                        ROI       = ROI)\n\ndissector.quantify_gt_features(image, gt, \n                        threshold_maps, \n                        nclasses   = infoclass, \n                        nfeatures  = 9, \n                        save_path  = savepath,\n                        save_fmaps = False, \n                        ROI        = ROI)\n```\n## Results\n\n![dissection](./imgs/dissection.png)\n\n\n# GradCAM\n\n## Usage\n```\nfrom BioExp.spatial import cam\n\ndice = flow.cam(model, img, gt, \n\t\t\t\tnclasses = nclasses, \n\t\t\t\tsave_path = save_path, \n\t\t\t\tlayer_idx = -1, \n\t\t\t\tthreshol = 0.5,\n\t\t\t\tmodifier = 'guided')\n\n```\n## Results\n![gradcam](./imgs/gradcam.png)\n\n\n# Activation Maximization\n\n## Usage\n```\nfrom BioExp.concept.feature import Feature_Visualizer\n\nclass Load_Model(Model):\n\n  model_path = '../../saved_models/model_flair_scaled/model.pb'\n  image_shape = [None, 1, 240, 240]\n  image_value_range = (0, 10)\n  input_name = 'input_1'\n\nE = Feature_Visualizer(Load_Model, savepath = '../results/', regularizer_params={'L1':1e-3, 'rotate':8})\na = E.run(layer = 'conv2d_17', class_ = 'None', channel = 95, transforms=True)\n\n```\n\n##Activation Results\n![lucid](./imgs/lucid.png)\n\n\n# Uncertainty\n\n## Usage\n```\nfrom BioExp.uncertainty import uncertainty\n\nD = uncertainty(test_image)\n            \n# for aleatoric\nmean, var = D.aleatoric(model, iterations = 50)\n\n# for epistemic\nmean, var = D.epistemic(model, iterations = 50)\n \n# for combined\nmean, var = D.combined(model, iterations = 50)\n\n```\n## Results\n![un](./imgs/uncertainty.png)\n\n\n# Radiomics\n## Usage\n```\nfrom BioExp.helpers import radfeatures\nfeat_extractor = radfeatures.ExtractRadiomicFeatures(image, mask, save_path = pth)\ndf = feat_extractor.all_features()\n```\n\n# Contact\n- Avinash Kori (koriavinash1@gmail.com)\n- Parth Natekar (parth@smail.iitm.ac.in)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/parthnatekar/BioExp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "BioExp", "package_url": "https://pypi.org/project/BioExp/", "platform": "", "project_url": "https://pypi.org/project/BioExp/", "project_urls": {"Homepage": "https://github.com/parthnatekar/BioExp"}, "release_url": "https://pypi.org/project/BioExp/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Deep Learning model analysis toolbox", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BioExp</h1>\n<p>Explaining Deep Learning Models which perform various image processing tasks in the medical domain.</p>\n<h1>Citations</h1>\n<p>If you use <a href=\"https://arxiv.org/pdf/1909.01498.pdf\" rel=\"nofollow\">BioExp</a>, please cite our work:</p>\n<pre><code>@article{natekar2019demystifying,\n  title={Demystifying Brain Tumour Segmentation Networks: Interpretability and Uncertainty Analysis},\n  author={Natekar, Parth and Kori, Avinash and Krishnamurthi, Ganapathy},\n  journal={arXiv preprint arXiv:1909.01498},\n  year={2019}\n}\n\n</code></pre>\n<h1>Defined Pipeline</h1>\n<p><img alt=\"pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5809643ce36c940701135f142070a3f7008ddf7/2e2f696d67732f706970656c696e652e706e67\"></p>\n<h1>Features</h1>\n<p>BioExp supports the following interpretability methods:</p>\n<ul>\n<li>Model Dissection Analysis</li>\n<li>Model Ablation Analysis</li>\n<li>Model Uncertainty Analysis\n<ul>\n<li>Epistemic Uncertainty using Bayesian Dropout</li>\n<li>Aleatoric Uncertainty using Test Time Augmentation</li>\n</ul>\n</li>\n<li>GradCAM</li>\n<li>Activation Maximization</li>\n</ul>\n<h1>Installation</h1>\n<p>Running of the explainability pipeline requires a GPU and several deep learning modules.</p>\n<h3>Requirements</h3>\n<ul>\n<li>'pandas'</li>\n<li>'numpy'</li>\n<li>'scipy==1.6.0'</li>\n<li>'matplotlib'</li>\n<li>'pillow'</li>\n<li>'simpleITK'</li>\n<li>'opencv-python'</li>\n<li>'tensorflow-gpu==1.14'</li>\n<li>'keras'</li>\n<li>'keras-vis'</li>\n<li>'lucid'</li>\n</ul>\n<p>The following command will install only the dependencies listed above.</p>\n<pre><code>pip install \"BioExp[gpu]\"\n\nor \n\npip install \"BioExp[cpu]\"\n</code></pre>\n<h1>Ablation</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.spatial import Ablation\n\nA = spatial.Ablation(model = model, \n\t\t\t\tweights_pth = weights_path, \n\t\t\t\tmetric      = dice_label_coef, \n\t\t\t\tlayer_name  = layer_name, \n\t\t\t\ttest_image  = test_image, \n\t\t\t\tgt \t    = gt, \n\t\t\t\tclasses     = infoclasses, \n\t\t\t\tnclasses    = 4)\n\ndf = A.ablate_filter(step = 1)\n</code></pre>\n<h1>Dissection</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.spatial import Dissector\n\nlayer_name = 'conv2d_3'\ninfoclasses = {}\nfor i in range(1): infoclasses['class_'+str(i)] = (i,)\ninfoclasses['whole'] = (1,2,3)\n\ndissector = Dissector(model=model,\n                        layer_name = layer_name)\n\nthreshold_maps = dissector.get_threshold_maps(dataset_path = data_root_path,\n                                                save_path  = savepath,\n                                                percentile = 85)\ndissector.apply_threshold(image, threshold_maps, \n                        nfeatures =9, \n                        save_path = savepath, \n                        ROI       = ROI)\n\ndissector.quantify_gt_features(image, gt, \n                        threshold_maps, \n                        nclasses   = infoclass, \n                        nfeatures  = 9, \n                        save_path  = savepath,\n                        save_fmaps = False, \n                        ROI        = ROI)\n</code></pre>\n<h2>Results</h2>\n<p><img alt=\"dissection\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3b384e1a54a96d2361f6ab2b5a1cf5e8d87d70f/2e2f696d67732f64697373656374696f6e2e706e67\"></p>\n<h1>GradCAM</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.spatial import cam\n\ndice = flow.cam(model, img, gt, \n\t\t\t\tnclasses = nclasses, \n\t\t\t\tsave_path = save_path, \n\t\t\t\tlayer_idx = -1, \n\t\t\t\tthreshol = 0.5,\n\t\t\t\tmodifier = 'guided')\n\n</code></pre>\n<h2>Results</h2>\n<p><img alt=\"gradcam\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b335c57625b65b9988175aa4455f8bf9b543b2b/2e2f696d67732f6772616463616d2e706e67\"></p>\n<h1>Activation Maximization</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.concept.feature import Feature_Visualizer\n\nclass Load_Model(Model):\n\n  model_path = '../../saved_models/model_flair_scaled/model.pb'\n  image_shape = [None, 1, 240, 240]\n  image_value_range = (0, 10)\n  input_name = 'input_1'\n\nE = Feature_Visualizer(Load_Model, savepath = '../results/', regularizer_params={'L1':1e-3, 'rotate':8})\na = E.run(layer = 'conv2d_17', class_ = 'None', channel = 95, transforms=True)\n\n</code></pre>\n<p>##Activation Results\n<img alt=\"lucid\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e137a2ed37ca0e4b251c0fd1d46828d02022ddf/2e2f696d67732f6c756369642e706e67\"></p>\n<h1>Uncertainty</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.uncertainty import uncertainty\n\nD = uncertainty(test_image)\n            \n# for aleatoric\nmean, var = D.aleatoric(model, iterations = 50)\n\n# for epistemic\nmean, var = D.epistemic(model, iterations = 50)\n \n# for combined\nmean, var = D.combined(model, iterations = 50)\n\n</code></pre>\n<h2>Results</h2>\n<p><img alt=\"un\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8d819ae85e6c8f27df065f6ee9bd5d6c5de7f90/2e2f696d67732f756e6365727461696e74792e706e67\"></p>\n<h1>Radiomics</h1>\n<h2>Usage</h2>\n<pre><code>from BioExp.helpers import radfeatures\nfeat_extractor = radfeatures.ExtractRadiomicFeatures(image, mask, save_path = pth)\ndf = feat_extractor.all_features()\n</code></pre>\n<h1>Contact</h1>\n<ul>\n<li>Avinash Kori (<a href=\"mailto:koriavinash1@gmail.com\">koriavinash1@gmail.com</a>)</li>\n<li>Parth Natekar (<a href=\"mailto:parth@smail.iitm.ac.in\">parth@smail.iitm.ac.in</a>)</li>\n</ul>\n\n          </div>"}, "last_serial": 6146154, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b03a35b3f17ae61aaa75682065dd4f89", "sha256": "50e4c23a07122decf0d7a4bf0f7755ad3ff0e103a81fa33275d0138c38559dd6"}, "downloads": -1, "filename": "BioExp-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "b03a35b3f17ae61aaa75682065dd4f89", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 28359, "upload_time": "2019-11-15T20:00:45", "upload_time_iso_8601": "2019-11-15T20:00:45.238780Z", "url": "https://files.pythonhosted.org/packages/0d/24/18b1c74b1f2adeb70a4dfd9ea4378b646dea10a775fe5484c21656c3ad7a/BioExp-0.0.1-py3.7.egg", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "edb6a38b13b916c12abac1fadbf05d74", "sha256": "e0bbf100e134aa5a795a38e9d8ccb61811eedbd43d966cf52085fb2d13922840"}, "downloads": -1, "filename": "BioExp-0.0.2-py3.7.egg", "has_sig": false, "md5_digest": "edb6a38b13b916c12abac1fadbf05d74", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 26892, "upload_time": "2019-11-16T06:25:30", "upload_time_iso_8601": "2019-11-16T06:25:30.303783Z", "url": "https://files.pythonhosted.org/packages/b3/d1/5ff13437ba9ee9b82e8d54dbc5c7cdfee04513ae17230a902c2c2161e823/BioExp-0.0.2-py3.7.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edb6a38b13b916c12abac1fadbf05d74", "sha256": "e0bbf100e134aa5a795a38e9d8ccb61811eedbd43d966cf52085fb2d13922840"}, "downloads": -1, "filename": "BioExp-0.0.2-py3.7.egg", "has_sig": false, "md5_digest": "edb6a38b13b916c12abac1fadbf05d74", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 26892, "upload_time": "2019-11-16T06:25:30", "upload_time_iso_8601": "2019-11-16T06:25:30.303783Z", "url": "https://files.pythonhosted.org/packages/b3/d1/5ff13437ba9ee9b82e8d54dbc5c7cdfee04513ae17230a902c2c2161e823/BioExp-0.0.2-py3.7.egg", "yanked": false}], "timestamp": "Thu May  7 22:37:26 2020"}