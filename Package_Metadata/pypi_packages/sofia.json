{"info": {"author": "Liam H. Childs", "author_email": "liam.h.childs@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "[![Build Status](https://travis-ci.org/childsish/sofia.svg?branch=master)](https://travis-ci.org/childsish/sofia)\n\nSoFIA\n=====\n\nSoftware for the Flexible Integration of Annotation (SoFIA) is a framework designed to make integrating information from multiple sources as easy and painless as possible. This is achieved through the use of a worflow engine capable of automatically resolving a workflow dedicated toward fulfilling a particular purpose from a parent template. In practice, this means that the user only needs to provide the resources they wish to draw their information from and the entities they wish to associate with their resources, and the framework will do the rest.\n\nBy default, vanilla SoFIA comes with a genomics workflow, capable of annotating variants and genes, and calculating sequence features. If different functionality is required, SoFIA has been designed to be extensible allowing the user to easily extend the current workflow or even create a whole new workflow for completely different purposes.\n\nThere is a [Google Group][google-group] for discussions about SoFIA.  \n\nInstallation\n------------\n\nSoFIA requires [Python 3][python] to be installed with the pip package management system. Pip should come with the latest Python.\n\n1. Open the command line with administrator priveleges (Powershell in Windows, Shell in Linux)\n2. Update pip:\n    * Windows: `python -m pip install -U pip setuptools`\n    * Linux: `pip install -U pip setuptools`\n3. Install SoFIA:\n    * Windows: `python -m pip install sofia`\n    * Linux: `pip install sofia`\n\nRunning SoFIA\n-------------\n\nWe provide example data to help familiarise yourself with SoFIA. To get the data, run:\n\n`python -m sofia get http://childsish.github.io/static/sofia/example.tar.gz`\n\nTo try the example, run:\n\n`python -m sofia execute -e chromosome_id -e position -e gene_id -e amino_acid_variant -e variant_effect -r ./example/data/randome.gff -r ./example/data/randome.fasta -r ./example/data/randome.vcf variants -t variants -o output.txt`\n\nThe command line can be broken down into several parts:\n\n1. `python -m sofia` Call the SoFIA script.\n2. `execute` Build a template then resolve and run a workflow.\n3. Define provided entities (resources):\n   * `-r ./data/example/randome.gff features`. Provide a resource containing genomic features. Call it \"features\".\n   * `-r ./data/example/randome.fasta sequences`. Provide a resource containing chromosome sequences. Call it \"sequence\".\n   * `-r ./data/example/randome.vcf variants`. Provide a resource containing variants. Call it \"variants\".\n4. `-e chromosome_id -e position -e gene_id -e amino_acid_variant -e variant_effect`. Annotate each variant with the chromosome, position, gene name, amino acid variant and variant effect.\n5. `-t variants`. Declare the \"variants\" resource as the target. This means each variant gets annotated with the requested entities.\n\nThe output will be placed in the current directory in the `output.txt` file. To check if you got the correct output, run:\n\n`diff ./example/data/output.txt output.txt`\n\n### Data download scripts\n\nSoFIA does not package any further data internally as you know best what is required your own analyses. However, to help you get started, we provide shell scripts in the `scripts` directory that download the basic necessities for annotation. If you wish for further \"standard\" annotation sets to be added, please let us know the url of each file or provide us a shell script and we will consider adding it to the default SoFIA installation.\n\nAvailable:\n * GRCh37 version of the human genome\n\nUsing the API\n-------------\n\nSoFIA can also be used programatically. To use SoFIA, you must build a template, resolve a workflow from the template, then the workflow can be executed.\n\n```python\nfrom sofia.tools.build import build\nfrom sofia.tools.resolve import resolve\nfrom sofia.tools.execute import execute\n\ntemplate_directories = ['path_to_template_1', 'path_to_template_2']\nprovided_entity_definitions = ['provided_entity_1', 'provided_entity_2']\nrequested_entity_definitions = ['requested_entity_1', 'requested_entity_2']\ntemplate = build(template_directories)\nprovided_entities = [template.parser.parse_provided_entity(definition) for definition in provided_entity_definitions]\nrequested_entities = [template.parser.parse_requested_entity(definition) for definition in requested_entity_definitions]\nworkflow = resolve(template, provided_entities, requested_entities)\nexecute(workflow)\n```\n\nDefining a template\n-------------------\n\nTemplates are found in the `sofia/templates` directory. Each template has a directory with it's own name. There are three main locations in the template's directory.\n\n1. `sofia/templates/<template_name>/steps`. All steps are defined in this directory.\n2. `sofia/templates/<template_name>/entities.json`. Complex entity relationships are defined in this file.\n3. `sofia/templates/<template_name>/data`. Default data for the template is placed in this directory.\n\n### Defining steps\n\nNew steps are implemented by creating a new Python class that inherits from the `Step` class found in modules.step. A step consists of several concepts.\n\n1. **The name of the step.** This is the name that is referred to from the command line and other steps. It is defined by the name of the class.\n2. **Required entities.** A list of entities that the step will use. Required entities are defined by the class variable \"IN\".\n3. **Provided entities.** A list of entities that the step will provide. Provided entities are defined by the class variable \"OUT\".\n4. **Calculating the step.** The function to actually calculate the desired step also needs to be defined. The arguments that are passed to it are determined by the names of the given dependencies. The function is defined by the class member \"calculate\".\n\nExample:\n```python\nfrom sofia.step import Step\n\nclass GetCodonUSage(Step):\n\n    IN = ['coding_sequence']\n    OUT = ['codon_usage']\n\n    def calculate(self, coding_sequence):\n        codon_usage = {}\n        for i in range(0, len(coding_sequence), 3):\n            codon = coding_sequence[i:i+3]\n            if codon not in codon_usage:\n                codon_usage[codon] = 0\n            codon_usage[codon] += 1\n        return codon_usage\n```\n\n### Defining resources\n\nResources are practically identical to steps, but they have no incoming entities and some extra details to match them to provided filenames is required. \n\n### Defining entities\n\nNew entities are just as simple to create. Any entities declared by the step (in the IN and OUT member variables) are automatically created. If complex relationships among the entities need to be defined, then the `entities.json` is used for this purpose.\n\nThe root json object is an array in which several associative arrays can be stored, each representing an entity with complex relationships. The entity is defined by the following key:pair values:\n\n* **name**. This is the name of the entity that the framework uses to identify it. The current format for the name is underscore separated, lower-case words.\n* **is_a** (optional). This is the name of a single other entity that this entity can be considered equivalent to. This equivalency is not bi-directional (e.g. a `variant` can be considered a `genomic_position` but a `genomic_position` can not be used as a `variant`).\n* **has_a** (optional). This is a set of the other entities that this entity contains. It is implemented as an array of associative arrays where the associative array describes how to access the contained entity:\n    * **name**. The name that the framework uses to identify the child entity.\n    * **key**. The key that is used by the Python object to access the child entity.\n    * **type**. The type of access to the child entity required. If it is an attibute of an object then this values should be `attr`. If it is a key in a dictionary then this value should be `item`.\n* **description** (optional). A description of the entity used by the `sofia info` command.\n\nExample:\n```json\n\n[\n  {\n    \"name\": \"genomic_feature\",\n    \"is_a\": \"genomic_interval\",\n    \"has_a\": [\n      { \"name\": \"gene_id\", \"key\": \"name\", \"type\": \"attr\" }\n    ],\n    \"description\": \"A model of transcribed DNA. This includes all alternative transcripts.\"\n  }\n]\n```\n\nDesign Philosophy\n-----------------\n\nBatteries included.\n\n * There should be as few library dependencies as possible.\n\nThe user has to change the resource data as little as possible.\n\n * Ideally, all files can be used as-is. However, indexing the file is highly recommended as it will greatly speed up the framework. Indexing using the [htslib][htslib] is supported by default.\n\nThe tool should be easily extended.\n\n * The default state is not a one-size-fits-all solution. Different groups have different needs. However, it should be easily extended to accomodate new types of resources and steps.\n\n\nStandardisation (Variant annotation)\n------------------------------------\n\nThe genomic template that comes with SoFIA will use the major transcript when finding the variant effect on a gene. The major transcript is defined as the longest transcript (in coding nucleotides).\n\nThe template attempts to follow the guidelines laid out by the [Human Genome Variation Society][hgvs] when showing the coding and amino acid changes. However, we deviate from the guidelines by using only the 1-letter code for amino acids. Any other deviation is unintentional and should be brought to my attention.\n\nThe template also attempts to follow the [The Sequence Ontology][so] when describing the type of variant. Any deviation is unintentional and should be brought to my attention.\n\n\nTo Do\n-----\n\nThere are still many ways in which SoFIA can be improved. Here are some that I plan to do, but I am always open to suggestions.\n\nRefer to the GitHub [issues][issues] page for upcoming improvements, to make suggestions and bug submissions.\n\n[python]: https://www.python.org/downloads/ \"Download Python 2.7\"\n[hgvs]: http://www.hgvs.org/mutnomen/ \"Human Genome Variation Society\"\n[so]: http://www.sequenceontology.org/ \"The Sequence Ontology\"\n[issues]: https://github.com/childsish/sofia/issues \"To Do\"\n[google-group]: https://groups.google.com/forum/#!forum/workflows-on-demand\n[vbox]: https://www.virtualbox.org/wiki/Downloads\n[mint]: http://www.linuxmint.com/download.php\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/childsish/sofia", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "sofia", "package_url": "https://pypi.org/project/sofia/", "platform": "", "project_url": "https://pypi.org/project/sofia/", "project_urls": {"Homepage": "https://github.com/childsish/sofia"}, "release_url": "https://pypi.org/project/sofia/1.8.1/", "requires_dist": ["lhc-python (==2.0.3)"], "requires_python": "", "summary": "Software for the Flexible Integration of Annotation", "version": "1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/childsish/sofia.svg?branch=master)](https://travis-ci.org/childsish/sofia)<br><br>SoFIA<br>=====<br><br>Software for the Flexible Integration of Annotation (SoFIA) is a framework designed to make integrating information from multiple sources as easy and painless as possible. This is achieved through the use of a worflow engine capable of automatically resolving a workflow dedicated toward fulfilling a particular purpose from a parent template. In practice, this means that the user only needs to provide the resources they wish to draw their information from and the entities they wish to associate with their resources, and the framework will do the rest.<br><br>By default, vanilla SoFIA comes with a genomics workflow, capable of annotating variants and genes, and calculating sequence features. If different functionality is required, SoFIA has been designed to be extensible allowing the user to easily extend the current workflow or even create a whole new workflow for completely different purposes.<br><br>There is a [Google Group][google-group] for discussions about SoFIA.  <br><br>Installation<br>------------<br><br>SoFIA requires [Python 3][python] to be installed with the pip package management system. Pip should come with the latest Python.<br><br>1. Open the command line with administrator priveleges (Powershell in Windows, Shell in Linux)<br>2. Update pip:<br>    * Windows: `python -m pip install -U pip setuptools`<br>    * Linux: `pip install -U pip setuptools`<br>3. Install SoFIA:<br>    * Windows: `python -m pip install sofia`<br>    * Linux: `pip install sofia`<br><br>Running SoFIA<br>-------------<br><br>We provide example data to help familiarise yourself with SoFIA. To get the data, run:<br><br>`python -m sofia get http://childsish.github.io/static/sofia/example.tar.gz`<br><br>To try the example, run:<br><br>`python -m sofia execute -e chromosome_id -e position -e gene_id -e amino_acid_variant -e variant_effect -r ./example/data/randome.gff -r ./example/data/randome.fasta -r ./example/data/randome.vcf variants -t variants -o output.txt`<br><br>The command line can be broken down into several parts:<br><br>1. `python -m sofia` Call the SoFIA script.<br>2. `execute` Build a template then resolve and run a workflow.<br>3. Define provided entities (resources):<br>   * `-r ./data/example/randome.gff features`. Provide a resource containing genomic features. Call it \"features\".<br>   * `-r ./data/example/randome.fasta sequences`. Provide a resource containing chromosome sequences. Call it \"sequence\".<br>   * `-r ./data/example/randome.vcf variants`. Provide a resource containing variants. Call it \"variants\".<br>4. `-e chromosome_id -e position -e gene_id -e amino_acid_variant -e variant_effect`. Annotate each variant with the chromosome, position, gene name, amino acid variant and variant effect.<br>5. `-t variants`. Declare the \"variants\" resource as the target. This means each variant gets annotated with the requested entities.<br><br>The output will be placed in the current directory in the `output.txt` file. To check if you got the correct output, run:<br><br>`diff ./example/data/output.txt output.txt`<br><br>### Data download scripts<br><br>SoFIA does not package any further data internally as you know best what is required your own analyses. However, to help you get started, we provide shell scripts in the `scripts` directory that download the basic necessities for annotation. If you wish for further \"standard\" annotation sets to be added, please let us know the url of each file or provide us a shell script and we will consider adding it to the default SoFIA installation.<br><br>Available:<br> * GRCh37 version of the human genome<br><br>Using the API<br>-------------<br><br>SoFIA can also be used programatically. To use SoFIA, you must build a template, resolve a workflow from the template, then the workflow can be executed.<br><br>```python<br>from sofia.tools.build import build<br>from sofia.tools.resolve import resolve<br>from sofia.tools.execute import execute<br><br>template_directories = ['path_to_template_1', 'path_to_template_2']<br>provided_entity_definitions = ['provided_entity_1', 'provided_entity_2']<br>requested_entity_definitions = ['requested_entity_1', 'requested_entity_2']<br>template = build(template_directories)<br>provided_entities = [template.parser.parse_provided_entity(definition) for definition in provided_entity_definitions]<br>requested_entities = [template.parser.parse_requested_entity(definition) for definition in requested_entity_definitions]<br>workflow = resolve(template, provided_entities, requested_entities)<br>execute(workflow)<br>```<br><br>Defining a template<br>-------------------<br><br>Templates are found in the `sofia/templates` directory. Each template has a directory with it's own name. There are three main locations in the template's directory.<br><br>1. `sofia/templates/&lt;template_name&gt;/steps`. All steps are defined in this directory.<br>2. `sofia/templates/&lt;template_name&gt;/entities.json`. Complex entity relationships are defined in this file.<br>3. `sofia/templates/&lt;template_name&gt;/data`. Default data for the template is placed in this directory.<br><br>### Defining steps<br><br>New steps are implemented by creating a new Python class that inherits from the `Step` class found in modules.step. A step consists of several concepts.<br><br>1. **The name of the step.** This is the name that is referred to from the command line and other steps. It is defined by the name of the class.<br>2. **Required entities.** A list of entities that the step will use. Required entities are defined by the class variable \"IN\".<br>3. **Provided entities.** A list of entities that the step will provide. Provided entities are defined by the class variable \"OUT\".<br>4. **Calculating the step.** The function to actually calculate the desired step also needs to be defined. The arguments that are passed to it are determined by the names of the given dependencies. The function is defined by the class member \"calculate\".<br><br>Example:<br>```python<br>from sofia.step import Step<br><br>class GetCodonUSage(Step):<br><br>    IN = ['coding_sequence']<br>    OUT = ['codon_usage']<br><br>    def calculate(self, coding_sequence):<br>        codon_usage = {}<br>        for i in range(0, len(coding_sequence), 3):<br>            codon = coding_sequence[i:i+3]<br>            if codon not in codon_usage:<br>                codon_usage[codon] = 0<br>            codon_usage[codon] += 1<br>        return codon_usage<br>```<br><br>### Defining resources<br><br>Resources are practically identical to steps, but they have no incoming entities and some extra details to match them to provided filenames is required. <br><br>### Defining entities<br><br>New entities are just as simple to create. Any entities declared by the step (in the IN and OUT member variables) are automatically created. If complex relationships among the entities need to be defined, then the `entities.json` is used for this purpose.<br><br>The root json object is an array in which several associative arrays can be stored, each representing an entity with complex relationships. The entity is defined by the following key:pair values:<br><br>* **name**. This is the name of the entity that the framework uses to identify it. The current format for the name is underscore separated, lower-case words.<br>* **is_a** (optional). This is the name of a single other entity that this entity can be considered equivalent to. This equivalency is not bi-directional (e.g. a `variant` can be considered a `genomic_position` but a `genomic_position` can not be used as a `variant`).<br>* **has_a** (optional). This is a set of the other entities that this entity contains. It is implemented as an array of associative arrays where the associative array describes how to access the contained entity:<br>    * **name**. The name that the framework uses to identify the child entity.<br>    * **key**. The key that is used by the Python object to access the child entity.<br>    * **type**. The type of access to the child entity required. If it is an attibute of an object then this values should be `attr`. If it is a key in a dictionary then this value should be `item`.<br>* **description** (optional). A description of the entity used by the `sofia info` command.<br><br>Example:<br>```json<br><br>[<br>  {<br>    \"name\": \"genomic_feature\",<br>    \"is_a\": \"genomic_interval\",<br>    \"has_a\": [<br>      { \"name\": \"gene_id\", \"key\": \"name\", \"type\": \"attr\" }<br>    ],<br>    \"description\": \"A model of transcribed DNA. This includes all alternative transcripts.\"<br>  }<br>]<br>```<br><br>Design Philosophy<br>-----------------<br><br>Batteries included.<br><br> * There should be as few library dependencies as possible.<br><br>The user has to change the resource data as little as possible.<br><br> * Ideally, all files can be used as-is. However, indexing the file is highly recommended as it will greatly speed up the framework. Indexing using the [htslib][htslib] is supported by default.<br><br>The tool should be easily extended.<br><br> * The default state is not a one-size-fits-all solution. Different groups have different needs. However, it should be easily extended to accomodate new types of resources and steps.<br><br><br>Standardisation (Variant annotation)<br>------------------------------------<br><br>The genomic template that comes with SoFIA will use the major transcript when finding the variant effect on a gene. The major transcript is defined as the longest transcript (in coding nucleotides).<br><br>The template attempts to follow the guidelines laid out by the [Human Genome Variation Society][hgvs] when showing the coding and amino acid changes. However, we deviate from the guidelines by using only the 1-letter code for amino acids. Any other deviation is unintentional and should be brought to my attention.<br><br>The template also attempts to follow the [The Sequence Ontology][so] when describing the type of variant. Any deviation is unintentional and should be brought to my attention.<br><br><br>To Do<br>-----<br><br>There are still many ways in which SoFIA can be improved. Here are some that I plan to do, but I am always open to suggestions.<br><br>Refer to the GitHub [issues][issues] page for upcoming improvements, to make suggestions and bug submissions.<br><br>[python]: https://www.python.org/downloads/ \"Download Python 2.7\"<br>[hgvs]: http://www.hgvs.org/mutnomen/ \"Human Genome Variation Society\"<br>[so]: http://www.sequenceontology.org/ \"The Sequence Ontology\"<br>[issues]: https://github.com/childsish/sofia/issues \"To Do\"<br>[google-group]: https://groups.google.com/forum/#!forum/workflows-on-demand<br>[vbox]: https://www.virtualbox.org/wiki/Downloads<br>[mint]: http://www.linuxmint.com/download.php<br><br><br>\n          </div>"}, "last_serial": 3034937, "releases": {"1.8.1": [{"comment_text": "", "digests": {"md5": "01d94deb43d74a715bb09871bd4e5ca5", "sha256": "ef2368c63df409cd1dd5318c0a3a4fcadae08080ee413a7e4d6aa638b836b406"}, "downloads": -1, "filename": "sofia-1.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01d94deb43d74a715bb09871bd4e5ca5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 76059, "upload_time": "2017-07-19T19:21:32", "upload_time_iso_8601": "2017-07-19T19:21:32.859433Z", "url": "https://files.pythonhosted.org/packages/6c/15/650490a7f49fa8d84c8bd16756e503030928ef31a150dc27a1cabee76d38/sofia-1.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8c5321ad8a1bff6ba9c8542354b05f7", "sha256": "6eb5a76a796af79a0aad316626ecc3a66c3e46edb9845f70256f6d61a2f952aa"}, "downloads": -1, "filename": "sofia-1.8.1.tar.gz", "has_sig": false, "md5_digest": "c8c5321ad8a1bff6ba9c8542354b05f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52640, "upload_time": "2017-07-19T19:21:34", "upload_time_iso_8601": "2017-07-19T19:21:34.576146Z", "url": "https://files.pythonhosted.org/packages/d8/b6/c2fcbdcbf2484c7692470060f246060960ca118b3e10f78e8ed8f1fa1b69/sofia-1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01d94deb43d74a715bb09871bd4e5ca5", "sha256": "ef2368c63df409cd1dd5318c0a3a4fcadae08080ee413a7e4d6aa638b836b406"}, "downloads": -1, "filename": "sofia-1.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "01d94deb43d74a715bb09871bd4e5ca5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 76059, "upload_time": "2017-07-19T19:21:32", "upload_time_iso_8601": "2017-07-19T19:21:32.859433Z", "url": "https://files.pythonhosted.org/packages/6c/15/650490a7f49fa8d84c8bd16756e503030928ef31a150dc27a1cabee76d38/sofia-1.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8c5321ad8a1bff6ba9c8542354b05f7", "sha256": "6eb5a76a796af79a0aad316626ecc3a66c3e46edb9845f70256f6d61a2f952aa"}, "downloads": -1, "filename": "sofia-1.8.1.tar.gz", "has_sig": false, "md5_digest": "c8c5321ad8a1bff6ba9c8542354b05f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52640, "upload_time": "2017-07-19T19:21:34", "upload_time_iso_8601": "2017-07-19T19:21:34.576146Z", "url": "https://files.pythonhosted.org/packages/d8/b6/c2fcbdcbf2484c7692470060f246060960ca118b3e10f78e8ed8f1fa1b69/sofia-1.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:56 2020"}