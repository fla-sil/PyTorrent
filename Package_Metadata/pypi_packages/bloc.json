{"info": {"author": "Manish Tomar", "author_email": "manishtomar.public@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP"], "description": "bloc\n====\n\n.. image:: https://img.shields.io/pypi/v/bloc.svg\n   :target: https://pypi.org/project/bloc\n   :alt: PyPI package\n\n.. image:: https://travis-ci.org/manishtomar/bloc.svg?branch=master\n   :target: https://travis-ci.org/manishtomar/bloc\n   :alt: CI Status\n\n.. image:: https://codecov.io/github/manishtomar/bloc/branch/master/graph/badge.svg\n   :target: https://codecov.io/github/manishtomar/bloc\n   :alt: Test Coverage\n\nSimple single-master group membership framework based on Twisted that helps in partitioning workloads or\nstateless data among multiple nodes. It consists of 2 components: \n\n1) Standalone TCP server provided as a twisted plugin that keeps track of the group. Currently the protocol\n   is HTTP but it may change in future.\n2) Twisted based client library talking to the above server (Other language libraries \u00e7an be implemented on demand)\n\nIt provides failure detection based on heartbeats. However, since it is single master the server is\na single point of failure. But since the server is completely stateless it can be easily restarted without any issues.\n\nIt works on Python 2.7 and 3.6.\n\nInstallation\n------------\n``pip install bloc`` on both server and client nodes. \n\nUsage\n-----\nOn server run ``twist -t 4 -s 6`` where 4 is client heartbeat timeout and 6 is settling timeout (explained below).\nThis will start HTTP server on port 8989 by default. One can give different port via ``-l tcp:port`` option.\n\nOn client, to equally partition ``items`` among multiple nodes, create ``BlocClient`` and call ``get_index_total``\non regular basis. Following is sample code:\n\n.. code-block:: python\n\n    from functools import partial\n    from twisted.internet import task\n    from twisted.internet.defer import inlineCallbacks, gatherResults\n\n    @inlineCallbacks\n    def do_stuff(bc):\n        \"\"\" Process items based on index and total got from BlocClient \"\"\"\n        # get_index_total returns this node's index and total number of nodes in the group\n        index_total = bc.get_index_total()\n        if index_total is None:\n            return\n        index, total = index_total\n        items = yield get_items_to_process()\n        my_items = filter(partial(is_my_item, index, total), items)\n        yield gatherResults([process_item(item) for item in my_items])\n\n    def is_my_item(index, total, item):\n        \"\"\" Can I process this item? \"\"\"\n        return hash(item) % total + 1 == index\n\n    @task.react\n    def main(reactor):\n        bc = BlocClient(reactor, \"server_ip:8989\", 3)\n        bc.startService()\n        # Call do_stuff every 2 seconds\n        return task.LoopingCall(do_stuff, bc).start(2)\n\nHere, the important function is ``is_my_item`` which decides whether the item can be processed by\nthis node based on the index and total. It works based on item's hash. Needless to say, it is important\nto have stable hash function implemented for your item. Ideally, there shouldn't be any necessity for item\nto be anything other than some kind of key (string). This function will guarantee that only one node\nwill process a particular item provided bloc server provides a unique index to each node which it does.\n\nAs an example, say node A and B are running above code talking to same bloc server and items is following\nlist of userids being processed::\n\n    1. 365f54e9-5de8-4509-be16-38e0c37f5fe9\n    2. f6a6a396-d0bf-428a-b63b-830f98874b6c\n    3. 6bec3551-163d-4eb8-b2d8-1f2c4b106d33\n    4. b6691e16-1d95-42de-8ad6-7aa0c81fe080\n\nIf node A's ``get_item_index`` returns ``(1, 2)`` then ``is_my_item`` will return ``True`` for userid 1 and 3\nand in node B's ``get_item_index`` returns ``(2, 2)`` and ``is_my_item`` will return ``True`` for userid 2 and 4.\nThis way you can partition the user ids among multiple nodes.\n\nThe choice of hash function and keyspace may decide how equally the workload is distributed across the nodes.\n\nThe above code assumes that ``items`` is dynamic which will be true if it is based on your application\ndata like users. However, there are situations where it can be a fixed number if your data is already\npartitioned among fixed number of buckets in which case you can use bloc to assign buckets to each node.\nAn example of this is `otter's scheduling feature <https://github.com/rackerlabs/otter/blob/master/otter/scheduler.py>`_\nwhich partitions events to be executed among a fixed set of 10 buckets and distributes the buckets\nwithin < 10 nodes. Another example is kafka's partitioned topic. Each node can consume a particular\npartition based on index and total provided.\n\n``get_index_total`` returns ``None`` when there is no index assigned which can happen when nodes are added/removed\nor when the client cannot talk to the server due to any networking issues. The client must stop doing its work\nwhen this happens because next time the node could have different index assigned. This is why the\nclient's processing based on the index must be stateless.\n\nindex and total are internally updated on interval provided when creating ``BlocClient``. They can change \nover time but only after ``get_index_total`` returns ``None`` for settling period (provided when starting server).\nHence, ``get_index_total`` must be called at least once during the settling period to always have the latest value\nand not accidentally work with incorrect index.\n\nYou would have noticed ``bc.startService`` in above code which is required to be called before calling\n``get_index_total``. If you are setting up twisted server using service hierarchy then it is best\nto add ``BlocClient`` object as a child service. This way Twisted will start and stop the service when required.\n\nHow does it work:\n-----------------\n\nThe server at any time remains in either of the two states: SETTLING or SETTLED. It starts of in\nSETTLING and remains in that state when nodes start to join or leave. When the nodes stop having\nactivity (no more joins / leaving) for configurable time (called settling time given when starting server),\nit then transitions to SETTLED state at which time it assigns each node an index and informs them about it.\nThe settling time is provided with ``-s`` option when starting the server and should generally be few seconds\ngreater than heartbeat interval. This way the server avoids unnecessarily assigning indexes when\nmultiple nodes are joining/leaving at close times.\n\nClient hearbeats to the server at interval provided when creating ``BlocClient``. The server keeps\ntrack of clients based on this heartbeat and removes any client that does not heartbeat in configured\ntime. This time is provided as ``-t`` option when starting the server. The heartbeat timeout provided\nin server should be a little more than the heartbeat interval provided in client to take into account\nlatency or temporary network glitches. In example above, server times out after 4 seconds and client\nheartbeats every 3 seconds. This hearbeat mechanism provides failure detection. If any of the nodes\nis bad that node will just stop processing work.\n\nSome things to know:\n--------------------\n\n* **No security**: Currently the server does not authenticate the client and accepts from any client.\n  The connection is also not encrypted. Depending on demand I am planning to add mutual TLS authentication\n* **No benchmarks done**. However, since its all in memory and Twisted it should easily scale to\n  few hundred clients. I'll do some testing and update later.\n* By default ``twist`` logging is at info level and due to heartbeats in HTTP every request is logged.\n  You can give ``--log-level=warn`` option to avoid it.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manishtomar/bloc", "keywords": "group membership distributed systems", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bloc", "package_url": "https://pypi.org/project/bloc/", "platform": "", "project_url": "https://pypi.org/project/bloc/", "project_urls": {"Homepage": "https://github.com/manishtomar/bloc"}, "release_url": "https://pypi.org/project/bloc/0.1.2/", "requires_dist": ["klein (>=15.0.0)", "treq (>=15.1.0)", "twisted (>=16.5.0)"], "requires_python": "", "summary": "Single-master group membership framework", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/bloc\" rel=\"nofollow\"><img alt=\"PyPI package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaa91ecd1dea2af7ee3282c59d7d7d70c221b5a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626c6f632e737667\"></a>\n<a href=\"https://travis-ci.org/manishtomar/bloc\" rel=\"nofollow\"><img alt=\"CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c29c633c6ec9da7f009c7a4f5beb5a787d036fea/68747470733a2f2f7472617669732d63692e6f72672f6d616e697368746f6d61722f626c6f632e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/manishtomar/bloc\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c05dd8c4154e35a3600ffcd29135de1973971bb1/68747470733a2f2f636f6465636f762e696f2f6769746875622f6d616e697368746f6d61722f626c6f632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>Simple single-master group membership framework based on Twisted that helps in partitioning workloads or\nstateless data among multiple nodes. It consists of 2 components:</p>\n<ol>\n<li>Standalone TCP server provided as a twisted plugin that keeps track of the group. Currently the protocol\nis HTTP but it may change in future.</li>\n<li>Twisted based client library talking to the above server (Other language libraries \u00e7an be implemented on demand)</li>\n</ol>\n<p>It provides failure detection based on heartbeats. However, since it is single master the server is\na single point of failure. But since the server is completely stateless it can be easily restarted without any issues.</p>\n<p>It works on Python 2.7 and 3.6.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install bloc</tt> on both server and client nodes.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>On server run <tt>twist <span class=\"pre\">-t</span> 4 <span class=\"pre\">-s</span> 6</tt> where 4 is client heartbeat timeout and 6 is settling timeout (explained below).\nThis will start HTTP server on port 8989 by default. One can give different port via <tt><span class=\"pre\">-l</span> tcp:port</tt> option.</p>\n<p>On client, to equally partition <tt>items</tt> among multiple nodes, create <tt>BlocClient</tt> and call <tt>get_index_total</tt>\non regular basis. Following is sample code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span><span class=\"p\">,</span> <span class=\"n\">gatherResults</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_stuff</span><span class=\"p\">(</span><span class=\"n\">bc</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Process items based on index and total got from BlocClient \"\"\"</span>\n    <span class=\"c1\"># get_index_total returns this node's index and total number of nodes in the group</span>\n    <span class=\"n\">index_total</span> <span class=\"o\">=</span> <span class=\"n\">bc</span><span class=\"o\">.</span><span class=\"n\">get_index_total</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">index_total</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">index_total</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">get_items_to_process</span><span class=\"p\">()</span>\n    <span class=\"n\">my_items</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">is_my_item</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">),</span> <span class=\"n\">items</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">gatherResults</span><span class=\"p\">([</span><span class=\"n\">process_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">my_items</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_my_item</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Can I process this item? \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">total</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"n\">index</span>\n\n<span class=\"nd\">@task</span><span class=\"o\">.</span><span class=\"n\">react</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">):</span>\n    <span class=\"n\">bc</span> <span class=\"o\">=</span> <span class=\"n\">BlocClient</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"s2\">\"server_ip:8989\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">bc</span><span class=\"o\">.</span><span class=\"n\">startService</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Call do_stuff every 2 seconds</span>\n    <span class=\"k\">return</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">LoopingCall</span><span class=\"p\">(</span><span class=\"n\">do_stuff</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Here, the important function is <tt>is_my_item</tt> which decides whether the item can be processed by\nthis node based on the index and total. It works based on item\u2019s hash. Needless to say, it is important\nto have stable hash function implemented for your item. Ideally, there shouldn\u2019t be any necessity for item\nto be anything other than some kind of key (string). This function will guarantee that only one node\nwill process a particular item provided bloc server provides a unique index to each node which it does.</p>\n<p>As an example, say node A and B are running above code talking to same bloc server and items is following\nlist of userids being processed:</p>\n<pre>1. 365f54e9-5de8-4509-be16-38e0c37f5fe9\n2. f6a6a396-d0bf-428a-b63b-830f98874b6c\n3. 6bec3551-163d-4eb8-b2d8-1f2c4b106d33\n4. b6691e16-1d95-42de-8ad6-7aa0c81fe080\n</pre>\n<p>If node A\u2019s <tt>get_item_index</tt> returns <tt>(1, 2)</tt> then <tt>is_my_item</tt> will return <tt>True</tt> for userid 1 and 3\nand in node B\u2019s <tt>get_item_index</tt> returns <tt>(2, 2)</tt> and <tt>is_my_item</tt> will return <tt>True</tt> for userid 2 and 4.\nThis way you can partition the user ids among multiple nodes.</p>\n<p>The choice of hash function and keyspace may decide how equally the workload is distributed across the nodes.</p>\n<p>The above code assumes that <tt>items</tt> is dynamic which will be true if it is based on your application\ndata like users. However, there are situations where it can be a fixed number if your data is already\npartitioned among fixed number of buckets in which case you can use bloc to assign buckets to each node.\nAn example of this is <a href=\"https://github.com/rackerlabs/otter/blob/master/otter/scheduler.py\" rel=\"nofollow\">otter\u2019s scheduling feature</a>\nwhich partitions events to be executed among a fixed set of 10 buckets and distributes the buckets\nwithin &lt; 10 nodes. Another example is kafka\u2019s partitioned topic. Each node can consume a particular\npartition based on index and total provided.</p>\n<p><tt>get_index_total</tt> returns <tt>None</tt> when there is no index assigned which can happen when nodes are added/removed\nor when the client cannot talk to the server due to any networking issues. The client must stop doing its work\nwhen this happens because next time the node could have different index assigned. This is why the\nclient\u2019s processing based on the index must be stateless.</p>\n<p>index and total are internally updated on interval provided when creating <tt>BlocClient</tt>. They can change\nover time but only after <tt>get_index_total</tt> returns <tt>None</tt> for settling period (provided when starting server).\nHence, <tt>get_index_total</tt> must be called at least once during the settling period to always have the latest value\nand not accidentally work with incorrect index.</p>\n<p>You would have noticed <tt>bc.startService</tt> in above code which is required to be called before calling\n<tt>get_index_total</tt>. If you are setting up twisted server using service hierarchy then it is best\nto add <tt>BlocClient</tt> object as a child service. This way Twisted will start and stop the service when required.</p>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work:</h2>\n<p>The server at any time remains in either of the two states: SETTLING or SETTLED. It starts of in\nSETTLING and remains in that state when nodes start to join or leave. When the nodes stop having\nactivity (no more joins / leaving) for configurable time (called settling time given when starting server),\nit then transitions to SETTLED state at which time it assigns each node an index and informs them about it.\nThe settling time is provided with <tt><span class=\"pre\">-s</span></tt> option when starting the server and should generally be few seconds\ngreater than heartbeat interval. This way the server avoids unnecessarily assigning indexes when\nmultiple nodes are joining/leaving at close times.</p>\n<p>Client hearbeats to the server at interval provided when creating <tt>BlocClient</tt>. The server keeps\ntrack of clients based on this heartbeat and removes any client that does not heartbeat in configured\ntime. This time is provided as <tt><span class=\"pre\">-t</span></tt> option when starting the server. The heartbeat timeout provided\nin server should be a little more than the heartbeat interval provided in client to take into account\nlatency or temporary network glitches. In example above, server times out after 4 seconds and client\nheartbeats every 3 seconds. This hearbeat mechanism provides failure detection. If any of the nodes\nis bad that node will just stop processing work.</p>\n</div>\n<div id=\"some-things-to-know\">\n<h2>Some things to know:</h2>\n<ul>\n<li><strong>No security</strong>: Currently the server does not authenticate the client and accepts from any client.\nThe connection is also not encrypted. Depending on demand I am planning to add mutual TLS authentication</li>\n<li><strong>No benchmarks done</strong>. However, since its all in memory and Twisted it should easily scale to\nfew hundred clients. I\u2019ll do some testing and update later.</li>\n<li>By default <tt>twist</tt> logging is at info level and due to heartbeats in HTTP every request is logged.\nYou can give <tt><span class=\"pre\">--log-level=warn</span></tt> option to avoid it.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2852075, "releases": {"0.0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "fcf554c5e67b7cdcbd794b4573b67c5f", "sha256": "c4a83eaf192c2fe2eaf532a438dc6174290866941287ddc1065902458ecb1a4b"}, "downloads": -1, "filename": "bloc-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcf554c5e67b7cdcbd794b4573b67c5f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12732, "upload_time": "2017-05-03T06:32:09", "upload_time_iso_8601": "2017-05-03T06:32:09.502794Z", "url": "https://files.pythonhosted.org/packages/79/5d/e81fb7a177d9778ae8bdb8b3907711fdd45f82d4c017609b6c6cc4b7cd32/bloc-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c2a92f054974d932cd2783bfc69cb24d", "sha256": "336c3e2a45b06a69475da3c591303b7feef70063f9aba08aa02bd0c938bb734c"}, "downloads": -1, "filename": "bloc-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2a92f054974d932cd2783bfc69cb24d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12737, "upload_time": "2017-05-03T06:39:16", "upload_time_iso_8601": "2017-05-03T06:39:16.500548Z", "url": "https://files.pythonhosted.org/packages/59/74/22d7ce30f33d8a8be8244e5af6f1e2f52b0e688fe2f8bd4456ae08450c56/bloc-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "576e2276b6fcf42a2dfa415fbed80f97", "sha256": "361d8f98cec055bc3193832adfebb894d7dad689cbe46de23eea80a23e9e460b"}, "downloads": -1, "filename": "bloc-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "576e2276b6fcf42a2dfa415fbed80f97", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13366, "upload_time": "2017-05-04T19:01:37", "upload_time_iso_8601": "2017-05-04T19:01:37.159153Z", "url": "https://files.pythonhosted.org/packages/99/ed/df234b3a250148e6e0520ea0b2d96e5c3fec2dce52b7e0d9f509465ab16c/bloc-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b1d2c9646f14ccf55631bf54bd960fb", "sha256": "33850ced7a99c4598562510dbed0da207fb32cd00adb60353fbee56b81f2200f"}, "downloads": -1, "filename": "bloc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7b1d2c9646f14ccf55631bf54bd960fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9116, "upload_time": "2017-05-04T19:01:39", "upload_time_iso_8601": "2017-05-04T19:01:39.127725Z", "url": "https://files.pythonhosted.org/packages/61/b0/b889ff20dd89e91d0116d4c8a155d6a9d3dfa44b656077d97a08ddf6dddf/bloc-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "576e2276b6fcf42a2dfa415fbed80f97", "sha256": "361d8f98cec055bc3193832adfebb894d7dad689cbe46de23eea80a23e9e460b"}, "downloads": -1, "filename": "bloc-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "576e2276b6fcf42a2dfa415fbed80f97", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13366, "upload_time": "2017-05-04T19:01:37", "upload_time_iso_8601": "2017-05-04T19:01:37.159153Z", "url": "https://files.pythonhosted.org/packages/99/ed/df234b3a250148e6e0520ea0b2d96e5c3fec2dce52b7e0d9f509465ab16c/bloc-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b1d2c9646f14ccf55631bf54bd960fb", "sha256": "33850ced7a99c4598562510dbed0da207fb32cd00adb60353fbee56b81f2200f"}, "downloads": -1, "filename": "bloc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7b1d2c9646f14ccf55631bf54bd960fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9116, "upload_time": "2017-05-04T19:01:39", "upload_time_iso_8601": "2017-05-04T19:01:39.127725Z", "url": "https://files.pythonhosted.org/packages/61/b0/b889ff20dd89e91d0116d4c8a155d6a9d3dfa44b656077d97a08ddf6dddf/bloc-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:03 2020"}