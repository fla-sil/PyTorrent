{"info": {"author": "Olist Developers", "author_email": "pactum@olist.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing"], "description": "# Pactum\n## The HTTP-API specification sketchbook for pythonistas\n\n[![Circle CI](https://circleci.com/gh/olist/pactum.svg?style=svg)](https://circleci.com/gh/olist/pactum)\n\n```shell\npip install pactum\n```\n\nWith `Pactum` you can **specify** HTTP-APIs using pure python.\n\nPactum is easy to use, easy to extend and easy to contribute:\n\n### Easy to use\n\nThe only requirements to start writing an API specification with `pactum`\nis `pactum` package itself and some knowledge of python.\n\n```python\nimport pactum\n\nclass MyAPI(pactum.API):\n    name = 'My API'\n    versions = [...]\n```\n\n### Easy to extend\n\nUsing the [visitor pattern](http://wiki.c2.com/?VisitorPattern) you can create\nexporters and extensions for any format or service you want.\n\nTake a look at [pactum/exporters/openapi.py](https://github.com/olist/pactum/blob/master/pactum/exporters/openapi.py).\n\n### Architecture\n\nAlways keep [this diagram](https://github.com/olist/pactum/wiki/Architecture-Diagram) in mind when defining your APIs.\n\n\n### Tutorial\n\nCreate a file called specs.py and start defining your API.\n\nYou can define a `Resource` object for your API.\n\n```python\nfrom pactum import Action, API, Resource, Response, Version\nfrom pactum import fields, verbs\n\nclass Order(Resource):\n    fields = [\n        fields.IntegerField(name='code', required=True),\n        fields.TimestampField(name='created_at'),\n        fields.StringField(name='item')\n    ]\nresource = Order()\n\nerror_resource = Resource(\n    name = 'ErrorResource'\n    fields = [fields.StringField(name='error', required=False)]\n)\n```\nYou can define any element of your specification by calling it directly as in\n`error_resource` or by class definition as in `MyResource` and then calling it.\n\n\nList resources are definitions of lists of the same resource.\n```python\nlist_order_resource = ListResource(resource=resource)\n```\n\nYou can define `Response` objects with `status`, `description`(optional)  a\n`header`(optional) and a `Resource`/`ListResource` object as `body` (optionally)...\n\n```python\nlist_response = Response(\n    status=200, description='Here is your orders list.', body=list_resource\n)\n\ndetail_response = Response(\n    status=200, description='Here is your order.', body=resource\n)\n\nerror_response = Response(status=404, resource=error_resource, headers=[('Content-type': 'application-json')])\n```\n\n... and `Request` objects with `verb`, `description`, `header`(optional) and a `Resource`/`ListResource`\nobject as `payload`.\n\n```python\nget_request = Request(verb=verbs.GET)\n```\n\nAn `Action` groups your request and a list of responses for a specified action passed in the description parameter.\n```python\nlist_action = Action(\n    description='Returns a list of resources.',\n    request=get_request,\n    responses=[error_response, list_response]\n)\n\ndetail_action = Action(\n    description='Returns a resource based on its code.',\n    request=get_request,\n    responses=[error_response, detail_response]\n)\n\n\n```\nThe Action object, as all other elements in Pactum, receive a description string\nthat sets the `.__doc__` attribute and can be the docstring of the class\nif the object is defined by class definition.\n\nA route can have a list of actions in an HTTP path.\n```python\nclass OrderListRoute(Route):\n    path = '/orders'\n    actions = [list_action]\n\nlist_route = OrderListRoute()\n\ndetail_route = OrderRoute(path='/orders/{code}', actions=detail_action)\n```\n\nYour routes can be grouped in API versions.\n```python\nclass V1(Version):\n    name = 'V1'\n    routes = [list_route, detail_route]\n\nv1 = V1()\n```\nThen you can define your API. ;)\n```python\nclass OrdersAPI(API):\n    name = 'Orders API'\n    versions = [v1]\n\napi = OrdersAPI()\n```\nBe happy and ready to export your specification to any format you want.\n\n# Exporting to openapi specs.\nPactum has a command that exports your specification to OpenAPI. You can call it by using:\n```\npactum-openapi <spec_file.py> <output_file> [--format=<json or yaml>]\n```\n\n\n# Road to version 1.\n- [ ] Test elements .accept(visitor) methods.\n- [ ] Support for version selectors (Versions should be specified on HTTP header, path, or custom fields)\n- [x] Stabilize the way we work with path parameters.\n- [ ] Support for Authorization and Authentication Specifications.\n- [ ] Support for extensions.\n- [ ] Behaviors", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/olist/pactum", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pactum", "package_url": "https://pypi.org/project/pactum/", "platform": "", "project_url": "https://pypi.org/project/pactum/", "project_urls": {"Homepage": "https://github.com/olist/pactum"}, "release_url": "https://pypi.org/project/pactum/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Create API specifications and documentation using Python", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pactum</h1>\n<h2>The HTTP-API specification sketchbook for pythonistas</h2>\n<p><a href=\"https://circleci.com/gh/olist/pactum\" rel=\"nofollow\"><img alt=\"Circle CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/094afb9bd5aaaf1538b86fcd5fc8a54e00352095/68747470733a2f2f636972636c6563692e636f6d2f67682f6f6c6973742f70616374756d2e7376673f7374796c653d737667\"></a></p>\n<pre>pip install pactum\n</pre>\n<p>With <code>Pactum</code> you can <strong>specify</strong> HTTP-APIs using pure python.</p>\n<p>Pactum is easy to use, easy to extend and easy to contribute:</p>\n<h3>Easy to use</h3>\n<p>The only requirements to start writing an API specification with <code>pactum</code>\nis <code>pactum</code> package itself and some knowledge of python.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pactum</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAPI</span><span class=\"p\">(</span><span class=\"n\">pactum</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'My API'</span>\n    <span class=\"n\">versions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<h3>Easy to extend</h3>\n<p>Using the <a href=\"http://wiki.c2.com/?VisitorPattern\" rel=\"nofollow\">visitor pattern</a> you can create\nexporters and extensions for any format or service you want.</p>\n<p>Take a look at <a href=\"https://github.com/olist/pactum/blob/master/pactum/exporters/openapi.py\" rel=\"nofollow\">pactum/exporters/openapi.py</a>.</p>\n<h3>Architecture</h3>\n<p>Always keep <a href=\"https://github.com/olist/pactum/wiki/Architecture-Diagram\" rel=\"nofollow\">this diagram</a> in mind when defining your APIs.</p>\n<h3>Tutorial</h3>\n<p>Create a file called specs.py and start defining your API.</p>\n<p>You can define a <code>Resource</code> object for your API.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pactum</span> <span class=\"kn\">import</span> <span class=\"n\">Action</span><span class=\"p\">,</span> <span class=\"n\">API</span><span class=\"p\">,</span> <span class=\"n\">Resource</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">Version</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pactum</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">verbs</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Order</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">TimestampField</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'created_at'</span><span class=\"p\">),</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'item'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">Order</span><span class=\"p\">()</span>\n\n<span class=\"n\">error_resource</span> <span class=\"o\">=</span> <span class=\"n\">Resource</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'ErrorResource'</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can define any element of your specification by calling it directly as in\n<code>error_resource</code> or by class definition as in <code>MyResource</code> and then calling it.</p>\n<p>List resources are definitions of lists of the same resource.</p>\n<pre><span class=\"n\">list_order_resource</span> <span class=\"o\">=</span> <span class=\"n\">ListResource</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">resource</span><span class=\"p\">)</span>\n</pre>\n<p>You can define <code>Response</code> objects with <code>status</code>, <code>description</code>(optional)  a\n<code>header</code>(optional) and a <code>Resource</code>/<code>ListResource</code> object as <code>body</code> (optionally)...</p>\n<pre><span class=\"n\">list_response</span> <span class=\"o\">=</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n    <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Here is your orders list.'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">list_resource</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">detail_response</span> <span class=\"o\">=</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n    <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Here is your order.'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">resource</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">error_response</span> <span class=\"o\">=</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"n\">error_resource</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'Content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'application-json'</span><span class=\"p\">)])</span>\n</pre>\n<p>... and <code>Request</code> objects with <code>verb</code>, <code>description</code>, <code>header</code>(optional) and a <code>Resource</code>/<code>ListResource</code>\nobject as <code>payload</code>.</p>\n<pre><span class=\"n\">get_request</span> <span class=\"o\">=</span> <span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">verbs</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">)</span>\n</pre>\n<p>An <code>Action</code> groups your request and a list of responses for a specified action passed in the description parameter.</p>\n<pre><span class=\"n\">list_action</span> <span class=\"o\">=</span> <span class=\"n\">Action</span><span class=\"p\">(</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Returns a list of resources.'</span><span class=\"p\">,</span>\n    <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">get_request</span><span class=\"p\">,</span>\n    <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">error_response</span><span class=\"p\">,</span> <span class=\"n\">list_response</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">detail_action</span> <span class=\"o\">=</span> <span class=\"n\">Action</span><span class=\"p\">(</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Returns a resource based on its code.'</span><span class=\"p\">,</span>\n    <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">get_request</span><span class=\"p\">,</span>\n    <span class=\"n\">responses</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">error_response</span><span class=\"p\">,</span> <span class=\"n\">detail_response</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The Action object, as all other elements in Pactum, receive a description string\nthat sets the <code>.__doc__</code> attribute and can be the docstring of the class\nif the object is defined by class definition.</p>\n<p>A route can have a list of actions in an HTTP path.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">OrderListRoute</span><span class=\"p\">(</span><span class=\"n\">Route</span><span class=\"p\">):</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'/orders'</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">list_action</span><span class=\"p\">]</span>\n\n<span class=\"n\">list_route</span> <span class=\"o\">=</span> <span class=\"n\">OrderListRoute</span><span class=\"p\">()</span>\n\n<span class=\"n\">detail_route</span> <span class=\"o\">=</span> <span class=\"n\">OrderRoute</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/orders/</span><span class=\"si\">{code}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"n\">detail_action</span><span class=\"p\">)</span>\n</pre>\n<p>Your routes can be grouped in API versions.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">V1</span><span class=\"p\">(</span><span class=\"n\">Version</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'V1'</span>\n    <span class=\"n\">routes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">list_route</span><span class=\"p\">,</span> <span class=\"n\">detail_route</span><span class=\"p\">]</span>\n\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">V1</span><span class=\"p\">()</span>\n</pre>\n<p>Then you can define your API. ;)</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">OrdersAPI</span><span class=\"p\">(</span><span class=\"n\">API</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Orders API'</span>\n    <span class=\"n\">versions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">v1</span><span class=\"p\">]</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">OrdersAPI</span><span class=\"p\">()</span>\n</pre>\n<p>Be happy and ready to export your specification to any format you want.</p>\n<h1>Exporting to openapi specs.</h1>\n<p>Pactum has a command that exports your specification to OpenAPI. You can call it by using:</p>\n<pre><code>pactum-openapi &lt;spec_file.py&gt; &lt;output_file&gt; [--format=&lt;json or yaml&gt;]\n</code></pre>\n<h1>Road to version 1.</h1>\n<ul>\n<li>[ ] Test elements .accept(visitor) methods.</li>\n<li>[ ] Support for version selectors (Versions should be specified on HTTP header, path, or custom fields)</li>\n<li>[x] Stabilize the way we work with path parameters.</li>\n<li>[ ] Support for Authorization and Authentication Specifications.</li>\n<li>[ ] Support for extensions.</li>\n<li>[ ] Behaviors</li>\n</ul>\n\n          </div>"}, "last_serial": 4653362, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4d309305f48a3b66bdc8b3f1412c0fa5", "sha256": "b1bb8c8699f85f70dbb97a15b90c550bf64aa5492b1a99e7e3654451dc76b596"}, "downloads": -1, "filename": "pactum-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4d309305f48a3b66bdc8b3f1412c0fa5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4268, "upload_time": "2017-08-29T04:55:08", "upload_time_iso_8601": "2017-08-29T04:55:08.610547Z", "url": "https://files.pythonhosted.org/packages/76/ae/722ed147652494dec29e4f2c2b730dcb97555d410a091d9a2410b0efe9d9/pactum-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a29219d00c95f2654bc6218518b9688", "sha256": "1e5e46fdf2fffd7a9aa1547abb8420ef62dc6201c883fc5a197c46fb4dddd658"}, "downloads": -1, "filename": "pactum-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8a29219d00c95f2654bc6218518b9688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2731, "upload_time": "2017-08-29T04:55:10", "upload_time_iso_8601": "2017-08-29T04:55:10.156458Z", "url": "https://files.pythonhosted.org/packages/a8/1d/94238cdbe0325966c0d8db0629d2ec4710d95c9aab45bf1862021ed89042/pactum-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "9036298180b539688b4fb0d35ddebb29", "sha256": "e039bcadf44e0f1fe8d3d6ba8f6d74ec9331b9ab575308dae8a0491ca72dad17"}, "downloads": -1, "filename": "pactum-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9036298180b539688b4fb0d35ddebb29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14236, "upload_time": "2018-11-27T11:13:55", "upload_time_iso_8601": "2018-11-27T11:13:55.810242Z", "url": "https://files.pythonhosted.org/packages/5f/cd/61a389467ef8327b66283136ba46b505f49d0a329515aa5651c547890194/pactum-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2273ce7872cb909a39f86d105c460710", "sha256": "efefe324b63e4323811c475d07583f9e8e853d9fa5e7c60e2fc9d40719ac6e90"}, "downloads": -1, "filename": "pactum-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2273ce7872cb909a39f86d105c460710", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14273, "upload_time": "2018-11-28T11:25:12", "upload_time_iso_8601": "2018-11-28T11:25:12.340020Z", "url": "https://files.pythonhosted.org/packages/09/82/3b8af5cd0a34b45d60b212c7976294112b52f8dfc7a7b2a3269ac253952d/pactum-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8dd09ed0845b0686ae8da6393cb91f3b", "sha256": "ff930010fe6abca237ec924297f28a719564e6356c2d6f0b882bb44b5917e89e"}, "downloads": -1, "filename": "pactum-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8dd09ed0845b0686ae8da6393cb91f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16045, "upload_time": "2019-01-02T16:43:51", "upload_time_iso_8601": "2019-01-02T16:43:51.995825Z", "url": "https://files.pythonhosted.org/packages/ef/86/1f21a7429b40ac83e6c32980cdb406ea2a27f185a7d314084cf93d70bb24/pactum-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8dd09ed0845b0686ae8da6393cb91f3b", "sha256": "ff930010fe6abca237ec924297f28a719564e6356c2d6f0b882bb44b5917e89e"}, "downloads": -1, "filename": "pactum-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8dd09ed0845b0686ae8da6393cb91f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16045, "upload_time": "2019-01-02T16:43:51", "upload_time_iso_8601": "2019-01-02T16:43:51.995825Z", "url": "https://files.pythonhosted.org/packages/ef/86/1f21a7429b40ac83e6c32980cdb406ea2a27f185a7d314084cf93d70bb24/pactum-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:00 2020"}