{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: User Interfaces"], "description": "whaaaaat?\n=========\n\nA collection of common interactive command line user interfaces.\n\nTable of Contents\n-----------------\n\n1. `Documentation <#documentation>`__\n\n   1. `Installation <#installation>`__\n   2. `Examples <#examples>`__\n   3. `Quickstart <#quickstart>`__\n   4. `Question Types <#types>`__\n   5. `Question Properties <#properties>`__\n   6. `User Interfaces and Styles <#styles>`__\n\n2. `Windows Platform <#windows>`__\n3. `Support <#support>`__\n4. `Contributing <#contributing>`__\n5. `Acknowledgments <#acknowledgements>`__\n6. `License <#license>`__\n\nGoal and Philosophy\n-------------------\n\n**``whaaaaat``** strives to be an easily embeddable and beautiful\ncommand line interface for `Python <https://python.org/>`__.\n**``whaaaaat``** wants to make it easy for existing Inquirer.js users to\nwrite immersive command line applications in Python. We are convinced\nthat its feature-set is the most complete for building immersive CLI\napplications. We also hope that **``whaaaaat``** proves itself useful to\nPython users.\n\n**``whaaaaat``** should ease the process of - providing *error feedback*\n- *asking questions* - *parsing* input - *validating* answers - managing\n*hierarchical prompts*\n\n**Note:** **``whaaaaat``** provides the user interface and the inquiry\nsession flow. > If you're searching for a scaffolding utility, then\ncheck out `banana <https://github.com/finklabs/banana>`__, the\nwhaaaaat's sister utility.\n\nDocumentation\n-------------\n\nInstallation\n~~~~~~~~~~~~\n\nLike most Python packages whaaaaat is available on `PyPi <TODO>`__.\nSimply use pip to install the whaaaaat package\n\n.. code:: shell\n\n    pip install whaaaaat\n\nQuickstart\n~~~~~~~~~~\n\nLike Inquirer.js, using inquirer is structured into two simple steps:\n\n-  you define a **list of questions** and hand them to **prompt**\n-  promt returns a **list of answers**\n\n.. code:: python\n\n    from __future__ import print_function, unicode_literals\n    from whaaaaat import prompt, print_json\n\n    questions = [\n        {\n            'type': 'input',\n            'name': 'first_name',\n            'message': 'What\\'s your first name',\n        }\n    ]\n\n    answers = prompt(questions)\n    print_json(answers)  # use the answers as input for your app\n\nA good starting point from here is probably the examples section.\n\nExamples\n~~~~~~~~\n\nMost of the examples intend to demonstrate a single question type or\nfeature:\n\n-  bottom-bar.py\n-  expand.py\n-  list.py\n-  password.py\n-  when.py\n-  checkbox.py\n-  hierarchical.py\n-  pizza.py - demonstrate using different question types\n-  editor.py\n-  input.py\n-  rawlist.py\n\nQuestion Types\n~~~~~~~~~~~~~~\n\n``questions`` is a list of questions. Each question has a type.\n\nList - ``{type: 'list'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,\n``filter``] properties. (Note that default must be the choice ``index``\nin the array or a choice ``value``)\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/input-prompt.png\n   :alt: List prompt\n\n   List prompt\n\n--------------\n\nRaw List - ``{type: 'rawlist'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``,\n``filter``] properties. (Note that default must the choice ``index`` in\nthe array)\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/raw-list.png\n   :alt: Raw list prompt\n\n   Raw list prompt\n\n--------------\n\nExpand - ``{type: 'expand'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``default``]\nproperties. (Note that default must be the choice ``index`` in the\narray. If ``default`` key not provided, then ``help`` will be used as\ndefault choice)\n\nNote that the ``choices`` object will take an extra parameter called\n``key`` for the ``expand`` prompt. This parameter must be a single\n(lowercased) character. The ``h`` option is added by the prompt and\nshouldn't be defined by the user.\n\nSee ``examples/expand.py`` for a running example.\n\n|Expand prompt closed| |Expand prompt expanded|\n\n--------------\n\nCheckbox - ``{type: 'checkbox'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``, ``choices``\\ [, ``filter``,\n``validate``, ``default``] properties. ``default`` is expected to be an\nArray of the checked choices value.\n\nChoices marked as ``{checked: true}`` will be checked by default.\n\nChoices whose property ``disabled`` is truthy will be unselectable. If\n``disabled`` is a string, then the string will be outputted next to the\ndisabled choice, otherwise it'll default to ``\"Disabled\"``. The\n``disabled`` property can also be a synchronous function receiving the\ncurrent answers as argument and returning a boolean or a string.\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/checkbox-prompt.png\n   :alt: Checkbox prompt\n\n   Checkbox prompt\n\n--------------\n\nConfirm - ``{type: 'confirm'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``] properties.\n``default`` is expected to be a boolean if used.\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/confirm-prompt.png\n   :alt: Confirm prompt\n\n   Confirm prompt\n\n--------------\n\nInput - ``{type: 'input'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``] properties.\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/input-prompt.png\n   :alt: Input prompt\n\n   Input prompt\n\n--------------\n\nPassword - ``{type: 'password'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``] properties.\n\n.. figure:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/password-prompt.png\n   :alt: Password prompt\n\n   Password prompt\n\n--------------\n\nEditor - ``{type: 'editor'}``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake ``type``, ``name``, ``message``\\ [, ``default``, ``filter``,\n``validate``] properties\n\nLaunches an instance of the users preferred editor on a temporary file.\nOnce the user exits their editor, the contents of the temporary file are\nread in as the result. The editor to use is determined by reading the\n$VISUAL or $EDITOR environment variables. If neither of those are\npresent, notepad (on Windows) or vim (Linux or Mac) is used.\n\nQuestion Properties\n~~~~~~~~~~~~~~~~~~~\n\nA question is a dictionary containing question related values:\n\n-  type: (String) Type of the prompt. Defaults: input - Possible values:\n   input, confirm, list, rawlist, expand, checkbox, password, editor\n-  name: (String) The name to use when storing the answer in the answers\n   hash. If the name contains periods, it will define a path in the\n   answers hash.\n-  message: (String\\|Function) The question to print. If defined as a\n   function, the first parameter will be the current inquirer session\n   answers.\n-  default: (String\\|Number\\|Array\\|Function) Default value(s) to use if\n   nothing is entered, or a function that returns the default value(s).\n   If defined as a function, the first parameter will be the current\n   inquirer session answers.\n-  choices: (Array\\|Function) Choices array or a function returning a\n   choices array. If defined as a function, the first parameter will be\n   the current inquirer session answers. Array values can be simple\n   strings, or objects containing a name (to display in list), a value\n   (to save in the answers hash) and a short (to display after\n   selection) properties. The choices array can also contain a\n   Separator.\n-  validate: (Function) Receive the user input and should return true if\n   the value is valid, and an error message (String) otherwise. If false\n   is returned, a default error message is provided.\n-  filter: (Function) Receive the user input and return the filtered\n   value to be used inside the program. The value returned will be added\n   to the Answers hash.\n-  when: (Function, Boolean) Receive the current user answers hash and\n   should return true or false depending on whether or not this question\n   should be asked. The value can also be a simple boolean.\n-  pageSize: (Number) Change the number of lines that will be rendered\n   when using list, rawList, expand or checkbox.\n\nUser Interfaces and Styles\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTODO\n\nWindows Platform\n----------------\n\n**``whaaaaat``** is build on prompt\\_toolkit which is cross platform,\nand everything that you build on top should run fine on both Unix and\nWindows systems. On Windows, it uses a different event loop\n(WaitForMultipleObjects instead of select), and another input and output\nsystem. (Win32 APIs instead of pseudo-terminals and VT100.)\n\nIt's worth noting that the implementation is a \"best effort of what is\npossible\". Both Unix and Windows terminals have their limitations. But\nin general, the Unix experience will still be a little better.\n\nFor Windows, it's recommended to use either cmder or conemu.\n\nSupport\n-------\n\nMost of the questions are probably related to using a question type or\nfeature. Please lookup and study the appropriate examples.\n\nIssue on Github TODO link\n\nFor many issues like for example common Python programming issues\nstackoverflow might be a good place to search for an answer. TODO link\n\nVisit the finklabs slack channel for announcements and news. TODO link\n\nContributing\n------------\n\nUnit test Unit test are written using pytest. Please add a unit test for\nevery new feature or bug fix.\n\nDocumentation Add documentation for every API change. Feel free to send\ntypo fixes and better docs!\n\nWe're looking to offer good support for multiple prompts and\nenvironments. If you want to help, we'd like to keep a list of testers\nfor each terminal/OS so we can contact you and get feedback before\nrelease. Let us know if you want to be added to the list.\n\nAcknowledgments\n---------------\n\nMany thanks to our friends at Inquirer.js. We think they did a great job\ndeveloping the tooling to support the nodejs technology.\n\nLicense\n-------\n\nCopyright (c) 2016-2017 Mark Fink (twitter: @markfink) Licensed under\nthe MIT license.\n\n.. |Expand prompt closed| image:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/expand-prompt-1.png\n.. |Expand prompt expanded| image:: https://raw.githubusercontent.com/finklabs/whaaaaat/develop/docs/images/expand-prompt-2.png\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/finklabs/whaaaaat/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "whaaaaat", "package_url": "https://pypi.org/project/whaaaaat/", "platform": "", "project_url": "https://pypi.org/project/whaaaaat/", "project_urls": {"Homepage": "https://github.com/finklabs/whaaaaat/"}, "release_url": "https://pypi.org/project/whaaaaat/0.5.2/", "requires_dist": null, "requires_python": "", "summary": "Collection of common interactive command line user interfaces, based on Inquirer.js", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A collection of common interactive command line user interfaces.</p>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a><ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#types\" rel=\"nofollow\">Question Types</a></li>\n<li><a href=\"#properties\" rel=\"nofollow\">Question Properties</a></li>\n<li><a href=\"#styles\" rel=\"nofollow\">User Interfaces and Styles</a></li>\n</ol>\n</li>\n<li><a href=\"#windows\" rel=\"nofollow\">Windows Platform</a></li>\n<li><a href=\"#support\" rel=\"nofollow\">Support</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#acknowledgements\" rel=\"nofollow\">Acknowledgments</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ol>\n</div>\n<div id=\"goal-and-philosophy\">\n<h2>Goal and Philosophy</h2>\n<p><strong>``whaaaaat``</strong> strives to be an easily embeddable and beautiful\ncommand line interface for <a href=\"https://python.org/\" rel=\"nofollow\">Python</a>.\n<strong>``whaaaaat``</strong> wants to make it easy for existing Inquirer.js users to\nwrite immersive command line applications in Python. We are convinced\nthat its feature-set is the most complete for building immersive CLI\napplications. We also hope that <strong>``whaaaaat``</strong> proves itself useful to\nPython users.</p>\n<p><strong>``whaaaaat``</strong> should ease the process of - providing <em>error feedback</em>\n- <em>asking questions</em> - <em>parsing</em> input - <em>validating</em> answers - managing\n<em>hierarchical prompts</em></p>\n<p><strong>Note:</strong> <strong>``whaaaaat``</strong> provides the user interface and the inquiry\nsession flow. &gt; If you\u2019re searching for a scaffolding utility, then\ncheck out <a href=\"https://github.com/finklabs/banana\" rel=\"nofollow\">banana</a>, the\nwhaaaaat\u2019s sister utility.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Like most Python packages whaaaaat is available on <a href=\"TODO\" rel=\"nofollow\">PyPi</a>.\nSimply use pip to install the whaaaaat package</p>\n<pre>pip install whaaaaat\n</pre>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>Like Inquirer.js, using inquirer is structured into two simple steps:</p>\n<ul>\n<li>you define a <strong>list of questions</strong> and hand them to <strong>prompt</strong></li>\n<li>promt returns a <strong>list of answers</strong></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span>\n<span class=\"kn\">from</span> <span class=\"nn\">whaaaaat</span> <span class=\"kn\">import</span> <span class=\"n\">prompt</span><span class=\"p\">,</span> <span class=\"n\">print_json</span>\n\n<span class=\"n\">questions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'input'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'first_name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'What</span><span class=\"se\">\\'</span><span class=\"s1\">s your first name'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">prompt</span><span class=\"p\">(</span><span class=\"n\">questions</span><span class=\"p\">)</span>\n<span class=\"n\">print_json</span><span class=\"p\">(</span><span class=\"n\">answers</span><span class=\"p\">)</span>  <span class=\"c1\"># use the answers as input for your app</span>\n</pre>\n<p>A good starting point from here is probably the examples section.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Most of the examples intend to demonstrate a single question type or\nfeature:</p>\n<ul>\n<li>bottom-bar.py</li>\n<li>expand.py</li>\n<li>list.py</li>\n<li>password.py</li>\n<li>when.py</li>\n<li>checkbox.py</li>\n<li>hierarchical.py</li>\n<li>pizza.py - demonstrate using different question types</li>\n<li>editor.py</li>\n<li>input.py</li>\n<li>rawlist.py</li>\n</ul>\n</div>\n<div id=\"question-types\">\n<h3>Question Types</h3>\n<p><tt>questions</tt> is a list of questions. Each question has a type.</p>\n<div id=\"list-type-list\">\n<h4>List - <tt>{type: 'list'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>, <tt>choices</tt>[, <tt>default</tt>,\n<tt>filter</tt>] properties. (Note that default must be the choice <tt>index</tt>\nin the array or a choice <tt>value</tt>)</p>\n<div>\n<img alt=\"List prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/828dda1e48593df48e5024c6e6a496b3e547b039/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f696e7075742d70726f6d70742e706e67\">\n<p>List prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"raw-list-type-rawlist\">\n<h4>Raw List - <tt>{type: 'rawlist'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>, <tt>choices</tt>[, <tt>default</tt>,\n<tt>filter</tt>] properties. (Note that default must the choice <tt>index</tt> in\nthe array)</p>\n<div>\n<img alt=\"Raw list prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce15fc1f818814852fff145cc37772ad7867ec37/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f7261772d6c6973742e706e67\">\n<p>Raw list prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"expand-type-expand\">\n<h4>Expand - <tt>{type: 'expand'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>, <tt>choices</tt>[, <tt>default</tt>]\nproperties. (Note that default must be the choice <tt>index</tt> in the\narray. If <tt>default</tt> key not provided, then <tt>help</tt> will be used as\ndefault choice)</p>\n<p>Note that the <tt>choices</tt> object will take an extra parameter called\n<tt>key</tt> for the <tt>expand</tt> prompt. This parameter must be a single\n(lowercased) character. The <tt>h</tt> option is added by the prompt and\nshouldn\u2019t be defined by the user.</p>\n<p>See <tt>examples/expand.py</tt> for a running example.</p>\n<p><img alt=\"Expand prompt closed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/169efdb2a03a6fecdf78f1383e836ca3b1da5139/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f657870616e642d70726f6d70742d312e706e67\"> <img alt=\"Expand prompt expanded\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68b90670a7eadd6eba97428e36b3a4fc17b01b97/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f657870616e642d70726f6d70742d322e706e67\"></p>\n</div>\n<hr class=\"docutils\">\n<div id=\"checkbox-type-checkbox\">\n<h4>Checkbox - <tt>{type: 'checkbox'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>, <tt>choices</tt>[, <tt>filter</tt>,\n<tt>validate</tt>, <tt>default</tt>] properties. <tt>default</tt> is expected to be an\nArray of the checked choices value.</p>\n<p>Choices marked as <tt>{checked: true}</tt> will be checked by default.</p>\n<p>Choices whose property <tt>disabled</tt> is truthy will be unselectable. If\n<tt>disabled</tt> is a string, then the string will be outputted next to the\ndisabled choice, otherwise it\u2019ll default to <tt>\"Disabled\"</tt>. The\n<tt>disabled</tt> property can also be a synchronous function receiving the\ncurrent answers as argument and returning a boolean or a string.</p>\n<div>\n<img alt=\"Checkbox prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6190c7e08b199f08eff94c32bda2e93095c09ee/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f636865636b626f782d70726f6d70742e706e67\">\n<p>Checkbox prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"confirm-type-confirm\">\n<h4>Confirm - <tt>{type: 'confirm'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>[, <tt>default</tt>] properties.\n<tt>default</tt> is expected to be a boolean if used.</p>\n<div>\n<img alt=\"Confirm prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99863c9602884c74dddf4e62e886c3bb28b8ca51/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f636f6e6669726d2d70726f6d70742e706e67\">\n<p>Confirm prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"input-type-input\">\n<h4>Input - <tt>{type: 'input'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>[, <tt>default</tt>, <tt>filter</tt>,\n<tt>validate</tt>] properties.</p>\n<div>\n<img alt=\"Input prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/828dda1e48593df48e5024c6e6a496b3e547b039/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f696e7075742d70726f6d70742e706e67\">\n<p>Input prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"password-type-password\">\n<h4>Password - <tt>{type: 'password'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>[, <tt>default</tt>, <tt>filter</tt>,\n<tt>validate</tt>] properties.</p>\n<div>\n<img alt=\"Password prompt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/739cc8994a3b3d439f16f4257d68ae40d2d5abb2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66696e6b6c6162732f77686161616161742f646576656c6f702f646f63732f696d616765732f70617373776f72642d70726f6d70742e706e67\">\n<p>Password prompt</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"editor-type-editor\">\n<h4>Editor - <tt>{type: 'editor'}</tt></h4>\n<p>Take <tt>type</tt>, <tt>name</tt>, <tt>message</tt>[, <tt>default</tt>, <tt>filter</tt>,\n<tt>validate</tt>] properties</p>\n<p>Launches an instance of the users preferred editor on a temporary file.\nOnce the user exits their editor, the contents of the temporary file are\nread in as the result. The editor to use is determined by reading the\n$VISUAL or $EDITOR environment variables. If neither of those are\npresent, notepad (on Windows) or vim (Linux or Mac) is used.</p>\n</div>\n</div>\n<div id=\"question-properties\">\n<h3>Question Properties</h3>\n<p>A question is a dictionary containing question related values:</p>\n<ul>\n<li>type: (String) Type of the prompt. Defaults: input - Possible values:\ninput, confirm, list, rawlist, expand, checkbox, password, editor</li>\n<li>name: (String) The name to use when storing the answer in the answers\nhash. If the name contains periods, it will define a path in the\nanswers hash.</li>\n<li>message: (String|Function) The question to print. If defined as a\nfunction, the first parameter will be the current inquirer session\nanswers.</li>\n<li>default: (String|Number|Array|Function) Default value(s) to use if\nnothing is entered, or a function that returns the default value(s).\nIf defined as a function, the first parameter will be the current\ninquirer session answers.</li>\n<li>choices: (Array|Function) Choices array or a function returning a\nchoices array. If defined as a function, the first parameter will be\nthe current inquirer session answers. Array values can be simple\nstrings, or objects containing a name (to display in list), a value\n(to save in the answers hash) and a short (to display after\nselection) properties. The choices array can also contain a\nSeparator.</li>\n<li>validate: (Function) Receive the user input and should return true if\nthe value is valid, and an error message (String) otherwise. If false\nis returned, a default error message is provided.</li>\n<li>filter: (Function) Receive the user input and return the filtered\nvalue to be used inside the program. The value returned will be added\nto the Answers hash.</li>\n<li>when: (Function, Boolean) Receive the current user answers hash and\nshould return true or false depending on whether or not this question\nshould be asked. The value can also be a simple boolean.</li>\n<li>pageSize: (Number) Change the number of lines that will be rendered\nwhen using list, rawList, expand or checkbox.</li>\n</ul>\n</div>\n<div id=\"user-interfaces-and-styles\">\n<h3>User Interfaces and Styles</h3>\n<p>TODO</p>\n</div>\n</div>\n<div id=\"windows-platform\">\n<h2>Windows Platform</h2>\n<p><strong>``whaaaaat``</strong> is build on prompt_toolkit which is cross platform,\nand everything that you build on top should run fine on both Unix and\nWindows systems. On Windows, it uses a different event loop\n(WaitForMultipleObjects instead of select), and another input and output\nsystem. (Win32 APIs instead of pseudo-terminals and VT100.)</p>\n<p>It\u2019s worth noting that the implementation is a \u201cbest effort of what is\npossible\u201d. Both Unix and Windows terminals have their limitations. But\nin general, the Unix experience will still be a little better.</p>\n<p>For Windows, it\u2019s recommended to use either cmder or conemu.</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>Most of the questions are probably related to using a question type or\nfeature. Please lookup and study the appropriate examples.</p>\n<p>Issue on Github TODO link</p>\n<p>For many issues like for example common Python programming issues\nstackoverflow might be a good place to search for an answer. TODO link</p>\n<p>Visit the finklabs slack channel for announcements and news. TODO link</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Unit test Unit test are written using pytest. Please add a unit test for\nevery new feature or bug fix.</p>\n<p>Documentation Add documentation for every API change. Feel free to send\ntypo fixes and better docs!</p>\n<p>We\u2019re looking to offer good support for multiple prompts and\nenvironments. If you want to help, we\u2019d like to keep a list of testers\nfor each terminal/OS so we can contact you and get feedback before\nrelease. Let us know if you want to be added to the list.</p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<p>Many thanks to our friends at Inquirer.js. We think they did a great job\ndeveloping the tooling to support the nodejs technology.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2016-2017 Mark Fink (twitter: @markfink) Licensed under\nthe MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 2745429, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "0219ca610ca039f5568ed9ee662355fb", "sha256": "ff3c03424b435bb6858a7c1657655c013c81e21a86db894f3ae850cb0c6d68eb"}, "downloads": -1, "filename": "whaaaaat-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0219ca610ca039f5568ed9ee662355fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16173, "upload_time": "2017-01-06T16:09:40", "upload_time_iso_8601": "2017-01-06T16:09:40.470031Z", "url": "https://files.pythonhosted.org/packages/c7/7c/0e998a55929b845ae26f8f7ce926ae9528e24c8637c7b850b318c17915fb/whaaaaat-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "08152dfe9ce959b302323c8be42d9f1e", "sha256": "8850fe3ef72e7265de0d44ce66b93c938e5bd9d29d77c73f8f97e74c78932898"}, "downloads": -1, "filename": "whaaaaat-0.3.0.tar.gz", "has_sig": false, "md5_digest": "08152dfe9ce959b302323c8be42d9f1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12947, "upload_time": "2017-01-08T17:04:51", "upload_time_iso_8601": "2017-01-08T17:04:51.559879Z", "url": "https://files.pythonhosted.org/packages/c0/2e/ec627bc66b68f6a44d17c63ffafa1fc17461fa542523e6722b5752634c40/whaaaaat-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2fce03d343fd203eb92471e2fe29a8ce", "sha256": "66f745ff77c403aa54f3aea3e161fad12f3d1d8a9921873c1836df6e2353b0aa"}, "downloads": -1, "filename": "whaaaaat-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2fce03d343fd203eb92471e2fe29a8ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13017, "upload_time": "2017-01-15T07:52:33", "upload_time_iso_8601": "2017-01-15T07:52:33.422108Z", "url": "https://files.pythonhosted.org/packages/67/a6/e5e6bfdc3018caafcc051891623d61adfa2c246d1cc2785be90d39b16df8/whaaaaat-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "9780a0d34e1f8df37ddc76220305e91c", "sha256": "47b99abb7e9913c8ef745061ea64cf2d6e24e8168fbf6d86c275a02afabb1cb7"}, "downloads": -1, "filename": "whaaaaat-0.3.2.tar.gz", "has_sig": false, "md5_digest": "9780a0d34e1f8df37ddc76220305e91c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13047, "upload_time": "2017-01-15T07:59:58", "upload_time_iso_8601": "2017-01-15T07:59:58.338363Z", "url": "https://files.pythonhosted.org/packages/f3/e2/73188e9cb840fac9e5400194a5c3250ed95d15b3e02f682842ed319cece5/whaaaaat-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "bc0b08f0212e83640c43901121df3e59", "sha256": "9248feff0e5a3207294818f4e1ab8bbf97b5cfbd54982a2742e54b3ffe06d3e2"}, "downloads": -1, "filename": "whaaaaat-0.3.3.tar.gz", "has_sig": false, "md5_digest": "bc0b08f0212e83640c43901121df3e59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13007, "upload_time": "2017-01-15T08:35:09", "upload_time_iso_8601": "2017-01-15T08:35:09.375268Z", "url": "https://files.pythonhosted.org/packages/13/18/b23b2009bdb80e476f7a96fb2bf764d9f143fbd81fc7da2d5ad5ebe73dec/whaaaaat-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f37cfa1acaca4e4da52923b91472fb44", "sha256": "7542f98d365bfc2dab4566113c4d0bde1280932d1d90d8755a9c68f501d667b7"}, "downloads": -1, "filename": "whaaaaat-0.3.4.tar.gz", "has_sig": false, "md5_digest": "f37cfa1acaca4e4da52923b91472fb44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13033, "upload_time": "2017-01-15T13:06:18", "upload_time_iso_8601": "2017-01-15T13:06:18.168371Z", "url": "https://files.pythonhosted.org/packages/a1/ab/95e667302c9355ea2ceee21113828eaa5562567879114fbb155a67cc7b42/whaaaaat-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "6a5cc64d733f500df33c9c9a251b0eb8", "sha256": "e5d3939e89e92bf5e1ece13ccbacc8eb9393af8fe58879f0f83c4f06a6ca6d8d"}, "downloads": -1, "filename": "whaaaaat-0.3.5.tar.gz", "has_sig": false, "md5_digest": "6a5cc64d733f500df33c9c9a251b0eb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13923, "upload_time": "2017-01-15T13:42:42", "upload_time_iso_8601": "2017-01-15T13:42:42.745976Z", "url": "https://files.pythonhosted.org/packages/66/f3/0c93907f95e3fe6447eda0882c0ef6b12f2f68108fc5163f6d1628ae2661/whaaaaat-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "1a0489e7aa9bde8238b1b295deffe36a", "sha256": "136fc12a4f8257cdd1c1445cdd536fb79e98bd4d5f549850b9b5d1001139010c"}, "downloads": -1, "filename": "whaaaaat-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1a0489e7aa9bde8238b1b295deffe36a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14288, "upload_time": "2017-01-15T17:06:08", "upload_time_iso_8601": "2017-01-15T17:06:08.048708Z", "url": "https://files.pythonhosted.org/packages/a5/0b/7e7241511fbd138a5eaaed590b9f1d309df48b2bf9e741521a517b7d4cd8/whaaaaat-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "1a979fcb2d65551751d0c77dd4a12302", "sha256": "a1a4dfe5d84be40899c855f203389833dd09d0dbace900bbeade3eb2f3b59e8f"}, "downloads": -1, "filename": "whaaaaat-0.3.7.tar.gz", "has_sig": false, "md5_digest": "1a979fcb2d65551751d0c77dd4a12302", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13421, "upload_time": "2017-01-21T17:44:25", "upload_time_iso_8601": "2017-01-21T17:44:25.985626Z", "url": "https://files.pythonhosted.org/packages/82/ce/094bc340160776191ee59dc26c1375f709c0839d30ccb13e078fd32416bc/whaaaaat-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "1ad865d4ffc3a87a1daaed79b557fec1", "sha256": "ed664e7c1e227884c1aa0a6bbfeac345947ef4aa1b3c3bd66c5d102a18429a2e"}, "downloads": -1, "filename": "whaaaaat-0.3.8.tar.gz", "has_sig": false, "md5_digest": "1ad865d4ffc3a87a1daaed79b557fec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14371, "upload_time": "2017-02-11T08:01:20", "upload_time_iso_8601": "2017-02-11T08:01:20.666998Z", "url": "https://files.pythonhosted.org/packages/a7/4e/8a72968f7df16a55daa777c6012f404dc0e46a124178ceee39a983b0d2f1/whaaaaat-0.3.8.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "01bab52c1e71d4bd17d3e333b8665cd0", "sha256": "2755cb6b694e85763d01a8b44f2ac71ffedb471a481b513903d732c2ba5015a3"}, "downloads": -1, "filename": "whaaaaat-0.4.0.tar.gz", "has_sig": false, "md5_digest": "01bab52c1e71d4bd17d3e333b8665cd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16957, "upload_time": "2017-03-24T10:29:43", "upload_time_iso_8601": "2017-03-24T10:29:43.290905Z", "url": "https://files.pythonhosted.org/packages/e9/be/b8c86c4b0a72592336d672dddc8b6dc1b9bd4042cc49d1decb76ddf2748c/whaaaaat-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "97e4207337f7b95bd8d801339fac3f93", "sha256": "2ab02e8e3627919fffdab3dfb2068fafaae74b486c4da81567d4fb16d0183be2"}, "downloads": -1, "filename": "whaaaaat-0.5.0.tar.gz", "has_sig": false, "md5_digest": "97e4207337f7b95bd8d801339fac3f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14505, "upload_time": "2017-03-29T18:53:37", "upload_time_iso_8601": "2017-03-29T18:53:37.132434Z", "url": "https://files.pythonhosted.org/packages/b4/9b/1a23d70f64d737d7c4a2844e8d072d0426ba9ba4ddc31574e5fb1a99d8d3/whaaaaat-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "251cf587176ffa5313eee2352b0ad052", "sha256": "86cd5dfc38fb1cded3eb6150028dfbcf9f67a1f7a7b91f0dd732701d91ed310f"}, "downloads": -1, "filename": "whaaaaat-0.5.1.tar.gz", "has_sig": false, "md5_digest": "251cf587176ffa5313eee2352b0ad052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14510, "upload_time": "2017-03-29T19:04:17", "upload_time_iso_8601": "2017-03-29T19:04:17.097080Z", "url": "https://files.pythonhosted.org/packages/b0/14/dfc0797c0aa601475373085aeed5d2fa37c3bee9c0e32e7de5f1fb75bdfb/whaaaaat-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "79d6cac0b4a4d4c84188c656f033c1be", "sha256": "cda3c149dc3e6dacdbc1f6d445ee8005c9fc540aa7d8b00c1553a6f7e37e917e"}, "downloads": -1, "filename": "whaaaaat-0.5.2.tar.gz", "has_sig": false, "md5_digest": "79d6cac0b4a4d4c84188c656f033c1be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14505, "upload_time": "2017-04-01T03:56:57", "upload_time_iso_8601": "2017-04-01T03:56:57.747213Z", "url": "https://files.pythonhosted.org/packages/85/06/299520d293ec7a654f3b71453fee348011e6366f80cb6140181e438f6f9c/whaaaaat-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79d6cac0b4a4d4c84188c656f033c1be", "sha256": "cda3c149dc3e6dacdbc1f6d445ee8005c9fc540aa7d8b00c1553a6f7e37e917e"}, "downloads": -1, "filename": "whaaaaat-0.5.2.tar.gz", "has_sig": false, "md5_digest": "79d6cac0b4a4d4c84188c656f033c1be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14505, "upload_time": "2017-04-01T03:56:57", "upload_time_iso_8601": "2017-04-01T03:56:57.747213Z", "url": "https://files.pythonhosted.org/packages/85/06/299520d293ec7a654f3b71453fee348011e6366f80cb6140181e438f6f9c/whaaaaat-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:00 2020"}