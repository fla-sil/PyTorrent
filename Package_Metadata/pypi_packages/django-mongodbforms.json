{"info": {"author": "Daniel Valverde", "author_email": "danielfvalverde@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "django mongodbforms\n===================\n\nThis is an implementation of django's model forms for mongoengine\ndocuments.\n\nRequirements\n------------\n\n-  Django >= 1.4\n-  `mongoengine <http://mongoengine.org/>`__ >= 0.8.3\n\nSupported field types\n---------------------\n\nMongodbforms supports all the fields that have a simple representation\nin Django's formfields (IntField, TextField, etc). In addition it also\nsupports ``ListFields`` and ``MapFields``.\n\nFile fields\n~~~~~~~~~~~\n\nMongodbforms handles file uploads just like the normal Django forms.\nUploaded files are stored in GridFS using the mongoengine fields.\nBecause GridFS has no directories and stores files in a flat space an\nuploaded file whose name already exists gets a unique filename with the\nform ``<filename>_<unique_number>.<extension>``.\n\nContainer fields\n~~~~~~~~~~~~~~~~\n\nFor container fields like ``ListFields`` and ``MapFields`` a very simple\nwidget is used. The widget renders the container content in the\nappropriate field plus one empty field. This is mainly done to not\nintroduce any Javascript dependencies, the backend code will happily\nhandle any kind of dynamic form, as long as the field ids are\ncontinuously numbered in the POST data.\n\nYou can use any of the other supported fields inside list or map fields.\nIncluding ``FileFields`` which aren't really supported by mongoengine\ninside container fields.\n\nUsage\n-----\n\nmongodbforms supports forms for normal documents and embedded documents.\n\nNormal documents\n~~~~~~~~~~~~~~~~\n\nTo use mongodbforms with normal documents replace djangos forms with\nmongodbform forms.\n\n.. code:: python\n\n    from mongodbforms import DocumentForm\n\n    class BlogForm(DocumentForm)\n        ...\n\nEmbedded documents\n~~~~~~~~~~~~~~~~~~\n\nFor embedded documents use ``EmbeddedDocumentForm``. The Meta-object of\nthe form has to be provided with an embedded field name. The embedded\nobject is appended to this. The form constructor takes a couple of\nadditional arguments: The document the embedded document gets added to\nand an optional position argument.\n\nIf no position is provided the form adds a new embedded document to the\nlist if the form is saved. To edit an embedded document stored in a list\nfield the position argument is required. If you provide a position and\nno instance to the form the instance is automatically loaded using the\nposition argument.\n\nIf the embedded field is a plain embedded field the current object is\nsimply overwritten.\n\n.. code:: python\n\n    # forms.py\n    from mongodbforms import EmbeddedDocumentForm\n        \n    class MessageForm(EmbeddedDocumentForm):\n        class Meta:\n            document = Message\n            embedded_field_name = 'messages'\n        \n            fields = ['subject', 'sender', 'message',]\n\n    # views.py\n\n    # create a new embedded object\n    form = MessageForm(parent_document=some_document, ...)\n    # edit the 4th embedded object\n    form = MessageForm(parent_document=some_document, position=3, ...)\n\nDocumentation\n-------------\n\nIn theory the documentation `Django's\nmodelform <https://docs.djangoproject.com/en/dev/topics/forms/modelforms/>`__\ndocumentation should be all you need (except for one exception; read\non). If you find a discrepancy between something that mongodbforms does\nand what Django's documentation says, you have most likely found a bug.\nPlease `report\nit <https://github.com/jschrewe/django-mongodbforms/issues>`__.\n\nForm field generation\n~~~~~~~~~~~~~~~~~~~~~\n\nBecause the fields on mongoengine documents have no notion of form\nfields mongodbform uses a generator class to generate the form field for\na db field, which is not explicitly set.\n\nTo use your own field generator you can either set a generator for your\nwhole project using ``MONGODBFORMS_FIELDGENERATOR`` in settings.py or\nyou can use the ``formfield_generator`` option on the form's Meta class.\n\nThe default generator is defined in ``mongodbforms/fieldgenerator.py``\nand should make it easy to override form fields and widgets. If you set\na generator on the document form you can also pass two dicts\n``field_overrides`` and ``widget_overrides`` to ``__init__``. For a list\nof valid keys have a look at ``MongoFormFieldGenerator``.\n\n.. code:: python\n\n    # settings.py\n\n    # set the fieldgeneretor for the whole application\n    MONGODBFORMS_FIELDGENERATOR = 'myproject.fieldgenerator.GeneratorClass'\n\n    # generator.py\n    from mongodbforms.fieldgenerator import MongoFormFieldGenerator\n        \n    class MyFieldGenerator(MongoFormFieldGenerator):\n        ...\n\n    # forms.py\n    from mongodbforms import DocumentForm\n        \n    from generator import MyFieldGenerator\n        \n    class MessageForm(DocumentForm):\n        class Meta:\n            formfield_generator = MyFieldGenerator", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.schafproductions.com/projects/django-mongodb-forms/", "keywords": null, "license": "New BSD License", "maintainer": null, "maintainer_email": null, "name": "django-mongodbforms", "package_url": "https://pypi.org/project/django-mongodbforms/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-mongodbforms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.schafproductions.com/projects/django-mongodb-forms/"}, "release_url": "https://pypi.org/project/django-mongodbforms/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "An implementation of django forms using mongoengine.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is an implementation of django\u2019s model forms for mongoengine\ndocuments.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django &gt;= 1.4</li>\n<li><a href=\"http://mongoengine.org/\" rel=\"nofollow\">mongoengine</a> &gt;= 0.8.3</li>\n</ul>\n</div>\n<div id=\"supported-field-types\">\n<h2>Supported field types</h2>\n<p>Mongodbforms supports all the fields that have a simple representation\nin Django\u2019s formfields (IntField, TextField, etc). In addition it also\nsupports <tt>ListFields</tt> and <tt>MapFields</tt>.</p>\n<div id=\"file-fields\">\n<h3>File fields</h3>\n<p>Mongodbforms handles file uploads just like the normal Django forms.\nUploaded files are stored in GridFS using the mongoengine fields.\nBecause GridFS has no directories and stores files in a flat space an\nuploaded file whose name already exists gets a unique filename with the\nform <tt><span class=\"pre\">&lt;filename&gt;_&lt;unique_number&gt;.&lt;extension&gt;</span></tt>.</p>\n</div>\n<div id=\"container-fields\">\n<h3>Container fields</h3>\n<p>For container fields like <tt>ListFields</tt> and <tt>MapFields</tt> a very simple\nwidget is used. The widget renders the container content in the\nappropriate field plus one empty field. This is mainly done to not\nintroduce any Javascript dependencies, the backend code will happily\nhandle any kind of dynamic form, as long as the field ids are\ncontinuously numbered in the POST data.</p>\n<p>You can use any of the other supported fields inside list or map fields.\nIncluding <tt>FileFields</tt> which aren\u2019t really supported by mongoengine\ninside container fields.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>mongodbforms supports forms for normal documents and embedded documents.</p>\n<div id=\"normal-documents\">\n<h3>Normal documents</h3>\n<p>To use mongodbforms with normal documents replace djangos forms with\nmongodbform forms.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mongodbforms</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentForm</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogForm</span><span class=\"p\">(</span><span class=\"n\">DocumentForm</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"embedded-documents\">\n<h3>Embedded documents</h3>\n<p>For embedded documents use <tt>EmbeddedDocumentForm</tt>. The Meta-object of\nthe form has to be provided with an embedded field name. The embedded\nobject is appended to this. The form constructor takes a couple of\nadditional arguments: The document the embedded document gets added to\nand an optional position argument.</p>\n<p>If no position is provided the form adds a new embedded document to the\nlist if the form is saved. To edit an embedded document stored in a list\nfield the position argument is required. If you provide a position and\nno instance to the form the instance is automatically loaded using the\nposition argument.</p>\n<p>If the embedded field is a plain embedded field the current object is\nsimply overwritten.</p>\n<pre><span class=\"c1\"># forms.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongodbforms</span> <span class=\"kn\">import</span> <span class=\"n\">EmbeddedDocumentForm</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MessageForm</span><span class=\"p\">(</span><span class=\"n\">EmbeddedDocumentForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">Message</span>\n        <span class=\"n\">embedded_field_name</span> <span class=\"o\">=</span> <span class=\"s1\">'messages'</span>\n\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'subject'</span><span class=\"p\">,</span> <span class=\"s1\">'sender'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">,]</span>\n\n<span class=\"c1\"># views.py</span>\n\n<span class=\"c1\"># create a new embedded object</span>\n<span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MessageForm</span><span class=\"p\">(</span><span class=\"n\">parent_document</span><span class=\"o\">=</span><span class=\"n\">some_document</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"c1\"># edit the 4th embedded object</span>\n<span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MessageForm</span><span class=\"p\">(</span><span class=\"n\">parent_document</span><span class=\"o\">=</span><span class=\"n\">some_document</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>In theory the documentation <a href=\"https://docs.djangoproject.com/en/dev/topics/forms/modelforms/\" rel=\"nofollow\">Django\u2019s\nmodelform</a>\ndocumentation should be all you need (except for one exception; read\non). If you find a discrepancy between something that mongodbforms does\nand what Django\u2019s documentation says, you have most likely found a bug.\nPlease <a href=\"https://github.com/jschrewe/django-mongodbforms/issues\" rel=\"nofollow\">report\nit</a>.</p>\n<div id=\"form-field-generation\">\n<h3>Form field generation</h3>\n<p>Because the fields on mongoengine documents have no notion of form\nfields mongodbform uses a generator class to generate the form field for\na db field, which is not explicitly set.</p>\n<p>To use your own field generator you can either set a generator for your\nwhole project using <tt>MONGODBFORMS_FIELDGENERATOR</tt> in settings.py or\nyou can use the <tt>formfield_generator</tt> option on the form\u2019s Meta class.</p>\n<p>The default generator is defined in <tt>mongodbforms/fieldgenerator.py</tt>\nand should make it easy to override form fields and widgets. If you set\na generator on the document form you can also pass two dicts\n<tt>field_overrides</tt> and <tt>widget_overrides</tt> to <tt>__init__</tt>. For a list\nof valid keys have a look at <tt>MongoFormFieldGenerator</tt>.</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"c1\"># set the fieldgeneretor for the whole application</span>\n<span class=\"n\">MONGODBFORMS_FIELDGENERATOR</span> <span class=\"o\">=</span> <span class=\"s1\">'myproject.fieldgenerator.GeneratorClass'</span>\n\n<span class=\"c1\"># generator.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongodbforms.fieldgenerator</span> <span class=\"kn\">import</span> <span class=\"n\">MongoFormFieldGenerator</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFieldGenerator</span><span class=\"p\">(</span><span class=\"n\">MongoFormFieldGenerator</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># forms.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mongodbforms</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentForm</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">generator</span> <span class=\"kn\">import</span> <span class=\"n\">MyFieldGenerator</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MessageForm</span><span class=\"p\">(</span><span class=\"n\">DocumentForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">formfield_generator</span> <span class=\"o\">=</span> <span class=\"n\">MyFieldGenerator</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1537342, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "b90db5bdf060c9ead78ef5ada7043296", "sha256": "b447b64ba8177e46e5092bcc7b406a454b92a099251d0ff03628addef9dd30cf"}, "downloads": -1, "filename": "django-mongodbforms-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b90db5bdf060c9ead78ef5ada7043296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25717, "upload_time": "2015-05-07T14:54:50", "upload_time_iso_8601": "2015-05-07T14:54:50.708047Z", "url": "https://files.pythonhosted.org/packages/85/5b/588d9ba168aed664dcd842cc180aa84605e8a7bac9441f7b61075baa00cf/django-mongodbforms-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b90db5bdf060c9ead78ef5ada7043296", "sha256": "b447b64ba8177e46e5092bcc7b406a454b92a099251d0ff03628addef9dd30cf"}, "downloads": -1, "filename": "django-mongodbforms-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b90db5bdf060c9ead78ef5ada7043296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25717, "upload_time": "2015-05-07T14:54:50", "upload_time_iso_8601": "2015-05-07T14:54:50.708047Z", "url": "https://files.pythonhosted.org/packages/85/5b/588d9ba168aed664dcd842cc180aa84605e8a7bac9441f7b61075baa00cf/django-mongodbforms-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:34:59 2020"}