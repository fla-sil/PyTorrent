{"info": {"author": "Germain Masse", "author_email": "g-dev@masse.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# universal-tsdb\nA Universal Time-Series Database Python Client (InfluxDB, Warp10, ...)\n\n\n## Introduction\nThis project aims to abstract your Time-Series backend, keeping your code as agnostic as possible.\n\nSome examples:\n - proof of concept\n - early stages of development (when you are not sure which plateform you should use)\n - ETL (Extract-Transform-Load), for the load step\n\n:warning: The current code only offer INGESTING functions (writing points to a backend).\n\n\n## Quickstart\n\n### Installation\n```bash\n$ pip install universal-tsdb\n```\n```python\n>>> from universal_tsdb import Client, Ingester\n>>> backend = Client('influx', 'http://localhost:8086', database='test')\n>>> series = Ingester(backend)\n>>> series.append(1585934895000, measurement='data', field1=42.0)\n>>> series.payload()\n'data field1=42.0 1585934895000000000\\n'\n>>> series.commit()\n```\n\n### InfluxDB\n```python\nfrom universal_tsdb import Client, Ingester\n\nbackend = Client('influx', 'http://localhost:8086', database='metrics',\n                 backend_username='user', backend_password='passwd')\nseries = Ingester(backend)\nseries.append(1585934895000, measurement='mes', field1=42.0)\nseries.append(1585934896000, measurement='mes', tags={'tag1':'value1'}, field1=43.4, field2='value')\nseries.commit()\n```\nThe code above will generate a data payload based on InfluxDB line protocol\nand send it via a HTTP(S) request.\n```\nPOST /write?db=metrics&u=user&p=passwd HTTP/1.1\nHost: localhost:8086\n\nmes field1=42.0 1585934895000000000\nmes,tag1=value1 field1=43.4 field2=\"value\" 1585934896000000000\n```\n\n### Warp10\n```python\nfrom universal_tsdb import Client, Ingester\n\nbackend = Client('warp10', 'http://localhost/api/v0', token='WRITING_TOKEN_ABCDEF0123456789')\nseries = Ingester(backend)\nseries.append(1585934895000, field1=42.0)\nseries.append(1585934896000, tags={'tag1':'value1'}, field1=43.4, field2='value')\nseries.commit()\n```\nThe code above will generate a data payload based on Warp10 GTS format\nand send it via a HTTP(S) request.\n```\nPOST /api/v0/update HTTP/1.1\nHost: localhost\nX-Warp10-Token: WRITING_TOKEN_ABCDEF0123456789\n\n1585934895000000// field1{} 42.0\n1585934896000000// field1{tag1=value1} 42.0\n1585934896000000// field2{tag1=value1} 'value'\n```\n\n\n## Advanced Usage\n\n### Batch processing\nWhen you have a large volume of data to send, you may want to split in several HTTP requests.\nIn 'batch'-mode, the library commit (send) the data automatically:\n```python\nbackend = Client('influx', 'http://localhost:8086', database='metrics')\nseries = Ingester(backend, batch=10)\nfor i in range(0..26):\n    series.append(field=i)\nseries.commit() # final commit to save the last 6 values\n```\n```\nCommit#1 Sent 10 new series (total: 10) in 0.02 s @ 2000.0 series/s (total execution: 0.13 s)\nCommit#2 Sent 10 new series (total: 20) in 0.02 s @ 2000.0 series/s (total execution: 0.15 s)\nCommit#3 Sent 6 new series (total: 26) in 0.01 s @ 2000.0 series/s (total execution: 0.17 s)\nREPORT: 3 commits (3 successes), 26 series, 26 values in 0.17 s @ 2000.0 values/s\",\n```\n\n### Omitting Timestamp\nIf you omit timestamp, the library uses the function `time.time()`\nto generate a UTC Epoch Time. Precision is system dependent.\n\n### Measurement in Warp10\nInfluxDB measurement does not exist in Warp10.\nThe library emulates measurement by prefixing the Warp10 classname:\n```python\nbackend = Client('warp10', token='WRITING_TOKEN_ABCDEF0123456789')\nseries = Ingester(backend)\nseries.append(1585934895000, measurement='mes', field1=42.0) \nseries.commit()\n```\n```\n1585934896000000// mes.field1{} 42.0 \n```\n\n\n## Todo\n- [ ] API documentation\n- [ ] Examples\n- [ ] Data query/fetch functions\n- [ ] Refactoring of backend specific code (inherited classes?)\n- [ ] Time-Series Line protocol optimization\n- [ ] Gzip/deflate HTTP compression\n- [ ] Code coverage / additional tests\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gmasse/universal-tsdb", "keywords": "timeseries-database,time-series,python,influxdb,warp10", "license": "", "maintainer": "", "maintainer_email": "", "name": "universal-tsdb", "package_url": "https://pypi.org/project/universal-tsdb/", "platform": "", "project_url": "https://pypi.org/project/universal-tsdb/", "project_urls": {"Homepage": "https://github.com/gmasse/universal-tsdb"}, "release_url": "https://pypi.org/project/universal-tsdb/0.1.1/", "requires_dist": ["requests", "pylint ; extra == 'dev'", "pytest ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "A Universal Time-Series Database Python Client", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>universal-tsdb</h1>\n<p>A Universal Time-Series Database Python Client (InfluxDB, Warp10, ...)</p>\n<h2>Introduction</h2>\n<p>This project aims to abstract your Time-Series backend, keeping your code as agnostic as possible.</p>\n<p>Some examples:</p>\n<ul>\n<li>proof of concept</li>\n<li>early stages of development (when you are not sure which plateform you should use)</li>\n<li>ETL (Extract-Transform-Load), for the load step</li>\n</ul>\n<p>:warning: The current code only offer INGESTING functions (writing points to a backend).</p>\n<h2>Quickstart</h2>\n<h3>Installation</h3>\n<pre>$ pip install universal-tsdb\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">universal_tsdb</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Ingester</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'influx'</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost:8086'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Ingester</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934895000</span><span class=\"p\">,</span> <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">42.0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">()</span>\n<span class=\"s1\">'data field1=42.0 1585934895000000000</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<h3>InfluxDB</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">universal_tsdb</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Ingester</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'influx'</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost:8086'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span>\n                 <span class=\"n\">backend_username</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"n\">backend_password</span><span class=\"o\">=</span><span class=\"s1\">'passwd'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Ingester</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934895000</span><span class=\"p\">,</span> <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"s1\">'mes'</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">42.0</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934896000</span><span class=\"p\">,</span> <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"s1\">'mes'</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'tag1'</span><span class=\"p\">:</span><span class=\"s1\">'value1'</span><span class=\"p\">},</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">43.4</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>The code above will generate a data payload based on InfluxDB line protocol\nand send it via a HTTP(S) request.</p>\n<pre><code>POST /write?db=metrics&amp;u=user&amp;p=passwd HTTP/1.1\nHost: localhost:8086\n\nmes field1=42.0 1585934895000000000\nmes,tag1=value1 field1=43.4 field2=\"value\" 1585934896000000000\n</code></pre>\n<h3>Warp10</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">universal_tsdb</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Ingester</span>\n\n<span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'warp10'</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost/api/v0'</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s1\">'WRITING_TOKEN_ABCDEF0123456789'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Ingester</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934895000</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">42.0</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934896000</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'tag1'</span><span class=\"p\">:</span><span class=\"s1\">'value1'</span><span class=\"p\">},</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">43.4</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<p>The code above will generate a data payload based on Warp10 GTS format\nand send it via a HTTP(S) request.</p>\n<pre><code>POST /api/v0/update HTTP/1.1\nHost: localhost\nX-Warp10-Token: WRITING_TOKEN_ABCDEF0123456789\n\n1585934895000000// field1{} 42.0\n1585934896000000// field1{tag1=value1} 42.0\n1585934896000000// field2{tag1=value1} 'value'\n</code></pre>\n<h2>Advanced Usage</h2>\n<h3>Batch processing</h3>\n<p>When you have a large volume of data to send, you may want to split in several HTTP requests.\nIn 'batch'-mode, the library commit (send) the data automatically:</p>\n<pre><span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'influx'</span><span class=\"p\">,</span> <span class=\"s1\">'http://localhost:8086'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'metrics'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Ingester</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">,</span> <span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"o\">.</span><span class=\"mi\">26</span><span class=\"p\">):</span>\n    <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span> <span class=\"c1\"># final commit to save the last 6 values</span>\n</pre>\n<pre><code>Commit#1 Sent 10 new series (total: 10) in 0.02 s @ 2000.0 series/s (total execution: 0.13 s)\nCommit#2 Sent 10 new series (total: 20) in 0.02 s @ 2000.0 series/s (total execution: 0.15 s)\nCommit#3 Sent 6 new series (total: 26) in 0.01 s @ 2000.0 series/s (total execution: 0.17 s)\nREPORT: 3 commits (3 successes), 26 series, 26 values in 0.17 s @ 2000.0 values/s\",\n</code></pre>\n<h3>Omitting Timestamp</h3>\n<p>If you omit timestamp, the library uses the function <code>time.time()</code>\nto generate a UTC Epoch Time. Precision is system dependent.</p>\n<h3>Measurement in Warp10</h3>\n<p>InfluxDB measurement does not exist in Warp10.\nThe library emulates measurement by prefixing the Warp10 classname:</p>\n<pre><span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'warp10'</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s1\">'WRITING_TOKEN_ABCDEF0123456789'</span><span class=\"p\">)</span>\n<span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Ingester</span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1585934895000</span><span class=\"p\">,</span> <span class=\"n\">measurement</span><span class=\"o\">=</span><span class=\"s1\">'mes'</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mf\">42.0</span><span class=\"p\">)</span> \n<span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n</pre>\n<pre><code>1585934896000000// mes.field1{} 42.0 \n</code></pre>\n<h2>Todo</h2>\n<ul>\n<li>[ ] API documentation</li>\n<li>[ ] Examples</li>\n<li>[ ] Data query/fetch functions</li>\n<li>[ ] Refactoring of backend specific code (inherited classes?)</li>\n<li>[ ] Time-Series Line protocol optimization</li>\n<li>[ ] Gzip/deflate HTTP compression</li>\n<li>[ ] Code coverage / additional tests</li>\n</ul>\n\n          </div>"}, "last_serial": 7005002, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "87d8acf74e89ae82c9beac2f854233c0", "sha256": "5489cbb6013c5c1dfadb67263562d25b5753d41ed7367dd69218308a63237d56"}, "downloads": -1, "filename": "universal_tsdb-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87d8acf74e89ae82c9beac2f854233c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21794, "upload_time": "2020-04-12T15:27:06", "upload_time_iso_8601": "2020-04-12T15:27:06.673313Z", "url": "https://files.pythonhosted.org/packages/1c/61/160353acedd9d07cdc6b9f3eb70efe0f2e7851cc2e0ed2825d7b8383ad37/universal_tsdb-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "332853587ce3d66b16a50c809531015b", "sha256": "261d8e57d04c67e6b759f508b31f2505a9c07aa97067352fc05c4257aa8d8153"}, "downloads": -1, "filename": "universal_tsdb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "332853587ce3d66b16a50c809531015b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9678, "upload_time": "2020-04-12T15:27:08", "upload_time_iso_8601": "2020-04-12T15:27:08.382041Z", "url": "https://files.pythonhosted.org/packages/79/28/396d56e846e93b61c540ec0f74daed973671f34dc5610c63b37a44603361/universal_tsdb-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87d8acf74e89ae82c9beac2f854233c0", "sha256": "5489cbb6013c5c1dfadb67263562d25b5753d41ed7367dd69218308a63237d56"}, "downloads": -1, "filename": "universal_tsdb-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87d8acf74e89ae82c9beac2f854233c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21794, "upload_time": "2020-04-12T15:27:06", "upload_time_iso_8601": "2020-04-12T15:27:06.673313Z", "url": "https://files.pythonhosted.org/packages/1c/61/160353acedd9d07cdc6b9f3eb70efe0f2e7851cc2e0ed2825d7b8383ad37/universal_tsdb-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "332853587ce3d66b16a50c809531015b", "sha256": "261d8e57d04c67e6b759f508b31f2505a9c07aa97067352fc05c4257aa8d8153"}, "downloads": -1, "filename": "universal_tsdb-0.1.1.tar.gz", "has_sig": false, "md5_digest": "332853587ce3d66b16a50c809531015b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9678, "upload_time": "2020-04-12T15:27:08", "upload_time_iso_8601": "2020-04-12T15:27:08.382041Z", "url": "https://files.pythonhosted.org/packages/79/28/396d56e846e93b61c540ec0f74daed973671f34dc5610c63b37a44603361/universal_tsdb-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:15 2020"}