{"info": {"author": "Scott Rigney, Peter Ott, Sergio Sainz Palacios, Michal Ciesielski, Zofia Rogala, Ignacy Hologa, Piotr Czyz, Oskar Duda, Wojciech Antonczyk, Michal Drzazga, Adam Piotrowski", "author_email": "srigney@microstrategy.com, ssainz@microstrategy.com, mciesielski@microstrategy.com,zrogala@microstrategy.com, ihologa@microstrategy.com, pczyz@microstrategy.com, oduda@microstrategy.com, wantonczyk@microstrategy.com, mdrzazga@microstrategy.com, apiotrowski@microstrategy.com", "bugtrack_url": null, "classifiers": [], "description": "[![image](https://img.shields.io/pypi/v/mstrio-py.svg)](https://pypi.org/project/mstrio-py)\n[![image](https://img.shields.io/pypi/l/mstrio-py.svg)](https://pypi.org/project/mstrio-py)\n[![image](https://img.shields.io/pypi/dm/mstrio-py.svg)](https://pypi.org/project/mstrio-py)\n\n\n# mstrio: simple and secure access to MicroStrategy data\nCurrent version: **11.2.1** (27 Mar 2020). Check out [Release Notes](https://github.com/MicroStrategy/mstrio-py/blob/master/NEWS.md) to see what's new.\n\n**mstrio** provides a high-level interface for [Python][py_github] and [R][r_github] and is designed to give data scientists and developers simple and secure access to MicroStrategy data. It wraps [MicroStrategy REST APIs][mstr_rest_docs] into simple workflows, allowing users to connect to their MicroStrategy environment, fetch data from cubes and reports, create new datasets, and add new data to existing datasets. And, because it enforces MicroStrategy's user and object security model, you don't need to worry about setting up separate security rules.\n\nWith **mstrio**, it's easy to integrate cross-departmental, trustworthy business data in machine learning workflows and enable decision-makers to take action on predictive insights in MicroStrategy Reports, Dossiers, HyperIntelligence Cards, and customized, embedded analytical applications.\n\n## Table of contents\n<!--ts-->\n   * [Installation](#installation)\n      * [Installing Jupyter Notebook extension](#installing-jupyter-notebook-extension)\n   * [Versioning](#versioning)\n   * [Usage](#usage)\n      * [Connect to MicroStrategy](#connect-to-microStrategy)\n      * [Import data from Cubes and Reports](#import-data-from-cubes-and-reports)\n      * [Export data into MicroStrategy with Datasets](#export-data-into-microStrategy-with-datasets)\n        * [Create a new dataset](#create-a-new-dataset)\n        * [Update a dataset](#update-a-dataset)\n        * [Certify a dataset](#certify-a-dataset)\n   * [More resources](#more-resources)\n<!--te-->\n\n## Installation\nInstallation is easy when using [pip](https://pypi.org/project/mstrio-py). Read more about installation on MicroStrategy's [product documentation][mstr_help_docs].\n\n### Install the `mstrio-py` package\n```\npip3 install mstrio-py\n```\n### Enable the Jupyter Notebook extension\n```\njupyter nbextension install connector-jupyter --py --sys-prefix\njupyter nbextension enable connector-jupyter --py --sys-prefix\n```\n\n## Versioning\nFunctionalities may be added to mstrio either in combination with annual MicroStrategy platform releases or through updates to platform releases. To ensure compatibility with APIs supported by your MicroStrategy environment, it is recommended to install a version of mstrio that corresponds to the version number of your MicroStrategy environment.\n\nThe current version of mstrio-py is 11.2.1 and is supported on MicroStrategy 2019 Update 4 (11.1.4) and later. To leverage MicroStrategy for Jupyter, mstrio-py (11.2.1), Jupyter Notebook (6.0.2 or higher), ipywidgets (7.5.1 or higher) and MicroStrategy 2019 Update 4 (11.1.4) or higher are required.\n\nIf you intend to use mstrio with MicroStrategy version older than 11.1.4, refer to the Pypi package archive to download mstrio 10.11.1, which is supported on:\n * MicroStrategy 2019 (11.1)\n * MicroStrategy 2019 Update 1 (11.1.1)\n * MicroStrategy 2019 Update 2 (11.1.2)\n * MicroStrategy 2019 Update 3 (11.1.3)\n \nRefer to the [PyPi package archive][pypi_archive] for a list of available versions. \n\nTo install a specific, archived version of mstrio, [package archive on PyPi][pypi_archive], do so by specifying the desired version number when installing the package with `pip`, as follows:\n\n```python\npip install mstrio-py==10.11.1\n```\n\n\n## Main Features\nRead the following tutorials to become more familiar with **mstrio**\n- Connect to your MicroStrategy environment\n- Import data from a Report into a Pandas DataFrame\n- Import data from a Cube into a Pandas DataFrame\n- Export data into MicroStrategy by creating datasets\n- Update, replace, or append new data to an existing dataset\n\n## Usage\n### Connect to MicroStrategy\nThe connection object manages your connection to MicroStrategy. Connect to your MicroStrategy environment by providing the URL to the MicroStrategy REST API server, your username, password, and the project id (case-sensistive) to connect to. By default, the `connect()` function expects your MicroStrategy username and password. \n```python\nfrom mstrio.microstrategy import Connection\nimport getpass\n\nbase_url = \"https://mycompany.microstrategy.com/MicroStrategyLibrary/api\"\nmstr_username = \"username\"\nmstr_password = getpass.getpass('password: ')\nproject_id = \"id\"\nconn = Connection(base_url, mstr_username, mstr_password, project_id=project_id)\nconn.connect()\n```\n\nThe URL for the REST API server typically follows this format: _https://mycompany.microstrategy.com/MicroStrategyLibrary/api_. Validate that the REST API server is running by accessing _https://mycompany.microstrategy.com/MicroStrategyLibrary/api-docs_ in your web browser.\n\nCurrently, supported authentication modes are Standard (the default) and LDAP. To use LDAP, add `login_mode` when creating your Connection object:\n```python\nconn = Connection(base_url, mstr_username, mstr_password, project_id=project_id,\n                 login_mode=16)\nconn.connect()\n```\n\nBy default, SSL certificates are validated with each API request. To turn this off, use:\n```python\nconn = Connection(base_url, mstr_username, mstr_password, project_id=project_id, \n                ssl_verify=False)\nconn.connect()\n```\n\n### Import data from Cubes and Reports\nIn **mstrio-py**, Reports and Cubes have the same API, so you can use these examples for importing Report data to a DataFrame, too. To import the contents of a published cube into a DataFrame for analysis in Python, use the `Cube` class:\n```python\nfrom mstrio.cube import Cube\nmy_cube = Cube(connection=conn, cube_id=\"...\")\ndf = my_cube.to_dataframe()\n```\nTo import Reports into a DataFrame for analysis in Python use the optimized `Report` class:\n```python\nfrom mstrio.report import Report\nmy_report = Report(connection=conn, report_id=\"...\")\ndf = my_report.to_dataframe()\n```\nBy default, all rows are imported when `my_cube.to_dataframe()` or `my_report.to_dataframe()` are called. Filter the contents of a cube/report by passing the object IDs for the metrics, attributes, and attribute elements you need. First, get the object IDs of the metrics, attributes that are available within the Cube/Report object instance:\n```python\nmy_cube.metrics\nmy_cube.attributes\n```\nIf you need to filter by attribute elements, call `my_cube.get_attr_elements()` or `my_report.get_attr_elements()` which will fetch all unique attribute elements per attribute. The attribute elements are available within the Cube/Report object instance:\n```python\nmy_cube.attr_elements\n```\nThen, choose those elements by passing their IDs to the `my_cube.apply_filters()` method. To see the chosen elements, call `my_cube.filters` and to clear any active filters, call `my_cube.clear_filters()`.\n```python\nmy_cube.apply_filters(\n   attributes=[\"A598372E11E9910D1CBF0080EFD54D63\", \"A59855D811E9910D1CC50080EFD54D63\"],\n   metrics=[\"B4054F5411E9910D672E0080EFC5AE5B\"],\n   attr_elements=[\"A598372E11E9910D1CBF0080EFD54D63:Los Angeles\", \"A598372E11E9910D1CBF0080EFD54D63:Seattle\"])\ndf = my_cube.to_dataframe()\n```\n\n### Export data into MicroStrategy with Datasets\n##### Create a new dataset\nWith **mstrio** you can create and publish single or multi-table datasets. This is done by passing Pandas DataFrames to a dataset constructor which translates the data into the format needed by MicroStrategy.\n```python\nimport pandas as pd\nstores = {\"store_id\": [1, 2, 3],\n          \"location\": [\"New York\", \"Seattle\", \"Los Angeles\"]}\nstores_df = pd.DataFrame(stores, columns=[\"store_id\", \"location\"])\n\nsales = {\"store_id\": [1, 2, 3],\n         \"category\": [\"TV\", \"Books\", \"Accessories\"],\n         \"sales\": [400, 200, 100],\n         \"sales_fmt\": [\"$400\", \"$200\", \"$100\"]}\nsales_df = pd.DataFrame(sales, columns=[\"store_id\", \"category\", \"sales\", \"sales_fmt\"])\n\nfrom mstrio.dataset import Dataset\nds = Dataset(connection=conn, name=\"Store Analysis\")\nds.add_table(name=\"Stores\", data_frame=stores_df, update_policy=\"add\")\nds.add_table(name=\"Sales\", data_frame=sales_df, update_policy=\"add\")\nds.create()\n```\nBy default `Dataset.create()` will upload the data to the Intelligence Server and publish the dataset. If you just want to _create_ the dataset but not upload the row-level data, use `Dataset.create(auto_upload=False)`.\n\nWhen using `Dataset.add_table()`, Pandas data types are mapped to MicroStrategy data types. By default, numeric data (integers and floats) are modeled as MicroStrategy Metrics and non-numeric data are modeled as MicroStrategy Attributes. This can be problematic if your data contains columns with integers that should behave as Attributes (e.g. a row ID), or if your data contains string-based, numeric _looking_ data which should be Metrics (e.g. formatted sales data, [\"$450\", \"$325\"]). To control this behavior, provide a list of columns that you want to convert from one type to another.\n```python\nds.add_table(name=\"Stores\", data_frame=stores_df, update_policy=\"add\",\n             to_attribute=[\"store_id\"])\n\nds.add_table(name=\"Sales\", data_frame=sales_df, update_policy=\"add\",\n             to_attribute=[\"store_id\"],\n             to_metric=[\"sales_fmt\"])\n```\n It is also possible to specify where the dataset should be created by providing a folder ID in `Dataset.create(folder_id=\"...\")`.\n \nAfter creating the dataset, you can obtain its ID using `Datasets.dataset_id`. This ID is needed for updating the data later.\n\n##### Update a dataset\nWhen the source data changes and users need the latest data for analysis and reporting in MicroStrategy, **mstrio** allows you to update the previously created dataset.\n```python\nfrom mstrio.dataset import Dataset\nds = Dataset(connection=conn, dataset_id=\"...\")\nds.add_table(name=\"Stores\", data_frame=stores_df, update_policy='update')\nds.add_table(name=\"Sales\", data_frame=sales_df, update_policy='upsert')\nds.update()\nds.publish()\n```\nThe `update_policy` parameter controls how the data in the dataset gets updated. Currently supported update operations are `add` (inserts entirely new data), `update` (updates existing data), `upsert` (simultaneously updates existing data and inserts new data), and `replace` (truncates and replaces the data).\n\nBy default, the raw data is transmitted to the server in increments of 100,000 rows. On very large datasets (>1 GB), it is beneficial to increase the number of rows transmitted to the Intelligence Server with each request. Do this with the `chunksize` parameter:\n```python\nds.update(chunksize=500000)\n```\n\nFinally, note that updating datasets that were _not_ created using the REST API is not supported.\n\n##### Certify a dataset\nUse `Dataset.certify()` to certify / decertify an existing dataset. Note that this will only work for datasets created using mstrio or any other client leveraging MicroStrategy REST API.\n\n## More resources\n- [Tutorials for mstrio][mstr_datasci_comm]\n- [mstrio-py online documentation][mstrio_py_doc]\n- [Check out mstrio for R][r_github]\n- [Learn more about the MicroStrategy REST API][mstr_rest_docs]\n- [MicroStrategy REST API Demo environment][mstr_rest_demo]\n\n## Other\n\"Jupyter\" and the Jupyter logos are trademarks or registered trademarks of NumFOCUS.\n\n[pypi_archive]: <https://pypi.org/project/mstrio-py/#history>\n[py_github]: <https://github.com/MicroStrategy/mstrio-py>\n[r_github]: <https://github.com/MicroStrategy/mstrio>\n[mstr_datasci_comm]: <https://community.microstrategy.com/s/topic/0TO44000000AJ2dGAG/python-r-u108>\n[mstrio_py_doc]: <http://www2.microstrategy.com/producthelp/Current/mstrio-py/>\n[mstr_rest_demo]: <https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html>\n[mstr_rest_docs]: <https://lw.microstrategy.com/msdz/MSDL/GARelease_Current/docs/projects/RESTSDK/Content/topics/REST_API/REST_API.htm>\n[mstr_help_docs]: <https://www2.microstrategy.com/producthelp/current/MSTR-for-Jupyter/Content/mstr_for_jupyter.htm>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MicroStrategy/mstrio-py", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "mstrio-py", "package_url": "https://pypi.org/project/mstrio-py/", "platform": "", "project_url": "https://pypi.org/project/mstrio-py/", "project_urls": {"Bug Tracker": "https://github.com/MicroStrategy/mstrio-py/issues", "Documentation": "http://www2.microstrategy.com/producthelp/Current/mstrio-py/", "Homepage": "https://github.com/MicroStrategy/mstrio-py", "Quick Manual": "https://www2.microstrategy.com/producthelp/current/MSTR-for-Jupyter/Content/mstr_for_jupyter.htm", "Source Code": "https://github.com/MicroStrategy/mstrio-py"}, "release_url": "https://pypi.org/project/mstrio-py/11.2.1/", "requires_dist": null, "requires_python": "", "summary": "Python interface for the MicroStrategy REST API", "version": "11.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/mstrio-py\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc116a66748b85d58227609e1e33ee08f3ca2267/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d737472696f2d70792e737667\"></a>\n<a href=\"https://pypi.org/project/mstrio-py\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec97005c0ff6cade42748333cd2bdb0d8dbb2659/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d737472696f2d70792e737667\"></a>\n<a href=\"https://pypi.org/project/mstrio-py\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aba4f0f9535b177c2977be745e32f25767c5e02d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d737472696f2d70792e737667\"></a></p>\n<h1>mstrio: simple and secure access to MicroStrategy data</h1>\n<p>Current version: <strong>11.2.1</strong> (27 Mar 2020). Check out <a href=\"https://github.com/MicroStrategy/mstrio-py/blob/master/NEWS.md\" rel=\"nofollow\">Release Notes</a> to see what's new.</p>\n<p><strong>mstrio</strong> provides a high-level interface for <a href=\"https://github.com/MicroStrategy/mstrio-py\" rel=\"nofollow\">Python</a> and <a href=\"https://github.com/MicroStrategy/mstrio\" rel=\"nofollow\">R</a> and is designed to give data scientists and developers simple and secure access to MicroStrategy data. It wraps <a href=\"https://lw.microstrategy.com/msdz/MSDL/GARelease_Current/docs/projects/RESTSDK/Content/topics/REST_API/REST_API.htm\" rel=\"nofollow\">MicroStrategy REST APIs</a> into simple workflows, allowing users to connect to their MicroStrategy environment, fetch data from cubes and reports, create new datasets, and add new data to existing datasets. And, because it enforces MicroStrategy's user and object security model, you don't need to worry about setting up separate security rules.</p>\n<p>With <strong>mstrio</strong>, it's easy to integrate cross-departmental, trustworthy business data in machine learning workflows and enable decision-makers to take action on predictive insights in MicroStrategy Reports, Dossiers, HyperIntelligence Cards, and customized, embedded analytical applications.</p>\n<h2>Table of contents</h2>\n\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#installing-jupyter-notebook-extension\" rel=\"nofollow\">Installing Jupyter Notebook extension</a></li>\n</ul>\n</li>\n<li><a href=\"#versioning\" rel=\"nofollow\">Versioning</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#connect-to-microStrategy\" rel=\"nofollow\">Connect to MicroStrategy</a></li>\n<li><a href=\"#import-data-from-cubes-and-reports\" rel=\"nofollow\">Import data from Cubes and Reports</a></li>\n<li><a href=\"#export-data-into-microStrategy-with-datasets\" rel=\"nofollow\">Export data into MicroStrategy with Datasets</a>\n<ul>\n<li><a href=\"#create-a-new-dataset\" rel=\"nofollow\">Create a new dataset</a></li>\n<li><a href=\"#update-a-dataset\" rel=\"nofollow\">Update a dataset</a></li>\n<li><a href=\"#certify-a-dataset\" rel=\"nofollow\">Certify a dataset</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#more-resources\" rel=\"nofollow\">More resources</a></li>\n</ul>\n\n<h2>Installation</h2>\n<p>Installation is easy when using <a href=\"https://pypi.org/project/mstrio-py\" rel=\"nofollow\">pip</a>. Read more about installation on MicroStrategy's <a href=\"https://www2.microstrategy.com/producthelp/current/MSTR-for-Jupyter/Content/mstr_for_jupyter.htm\" rel=\"nofollow\">product documentation</a>.</p>\n<h3>Install the <code>mstrio-py</code> package</h3>\n<pre><code>pip3 install mstrio-py\n</code></pre>\n<h3>Enable the Jupyter Notebook extension</h3>\n<pre><code>jupyter nbextension install connector-jupyter --py --sys-prefix\njupyter nbextension enable connector-jupyter --py --sys-prefix\n</code></pre>\n<h2>Versioning</h2>\n<p>Functionalities may be added to mstrio either in combination with annual MicroStrategy platform releases or through updates to platform releases. To ensure compatibility with APIs supported by your MicroStrategy environment, it is recommended to install a version of mstrio that corresponds to the version number of your MicroStrategy environment.</p>\n<p>The current version of mstrio-py is 11.2.1 and is supported on MicroStrategy 2019 Update 4 (11.1.4) and later. To leverage MicroStrategy for Jupyter, mstrio-py (11.2.1), Jupyter Notebook (6.0.2 or higher), ipywidgets (7.5.1 or higher) and MicroStrategy 2019 Update 4 (11.1.4) or higher are required.</p>\n<p>If you intend to use mstrio with MicroStrategy version older than 11.1.4, refer to the Pypi package archive to download mstrio 10.11.1, which is supported on:</p>\n<ul>\n<li>MicroStrategy 2019 (11.1)</li>\n<li>MicroStrategy 2019 Update 1 (11.1.1)</li>\n<li>MicroStrategy 2019 Update 2 (11.1.2)</li>\n<li>MicroStrategy 2019 Update 3 (11.1.3)</li>\n</ul>\n<p>Refer to the <a href=\"https://pypi.org/project/mstrio-py/#history\" rel=\"nofollow\">PyPi package archive</a> for a list of available versions.</p>\n<p>To install a specific, archived version of mstrio, <a href=\"https://pypi.org/project/mstrio-py/#history\" rel=\"nofollow\">package archive on PyPi</a>, do so by specifying the desired version number when installing the package with <code>pip</code>, as follows:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">mstrio</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">==</span><span class=\"mf\">10.11</span><span class=\"o\">.</span><span class=\"mi\">1</span>\n</pre>\n<h2>Main Features</h2>\n<p>Read the following tutorials to become more familiar with <strong>mstrio</strong></p>\n<ul>\n<li>Connect to your MicroStrategy environment</li>\n<li>Import data from a Report into a Pandas DataFrame</li>\n<li>Import data from a Cube into a Pandas DataFrame</li>\n<li>Export data into MicroStrategy by creating datasets</li>\n<li>Update, replace, or append new data to an existing dataset</li>\n</ul>\n<h2>Usage</h2>\n<h3>Connect to MicroStrategy</h3>\n<p>The connection object manages your connection to MicroStrategy. Connect to your MicroStrategy environment by providing the URL to the MicroStrategy REST API server, your username, password, and the project id (case-sensistive) to connect to. By default, the <code>connect()</code> function expects your MicroStrategy username and password.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mstrio.microstrategy</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n<span class=\"kn\">import</span> <span class=\"nn\">getpass</span>\n\n<span class=\"n\">base_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://mycompany.microstrategy.com/MicroStrategyLibrary/api\"</span>\n<span class=\"n\">mstr_username</span> <span class=\"o\">=</span> <span class=\"s2\">\"username\"</span>\n<span class=\"n\">mstr_password</span> <span class=\"o\">=</span> <span class=\"n\">getpass</span><span class=\"o\">.</span><span class=\"n\">getpass</span><span class=\"p\">(</span><span class=\"s1\">'password: '</span><span class=\"p\">)</span>\n<span class=\"n\">project_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"id\"</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">mstr_username</span><span class=\"p\">,</span> <span class=\"n\">mstr_password</span><span class=\"p\">,</span> <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"n\">project_id</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>The URL for the REST API server typically follows this format: <em><a href=\"https://mycompany.microstrategy.com/MicroStrategyLibrary/api\" rel=\"nofollow\">https://mycompany.microstrategy.com/MicroStrategyLibrary/api</a></em>. Validate that the REST API server is running by accessing <em><a href=\"https://mycompany.microstrategy.com/MicroStrategyLibrary/api-docs\" rel=\"nofollow\">https://mycompany.microstrategy.com/MicroStrategyLibrary/api-docs</a></em> in your web browser.</p>\n<p>Currently, supported authentication modes are Standard (the default) and LDAP. To use LDAP, add <code>login_mode</code> when creating your Connection object:</p>\n<pre><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">mstr_username</span><span class=\"p\">,</span> <span class=\"n\">mstr_password</span><span class=\"p\">,</span> <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"n\">project_id</span><span class=\"p\">,</span>\n                 <span class=\"n\">login_mode</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>By default, SSL certificates are validated with each API request. To turn this off, use:</p>\n<pre><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">mstr_username</span><span class=\"p\">,</span> <span class=\"n\">mstr_password</span><span class=\"p\">,</span> <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"n\">project_id</span><span class=\"p\">,</span> \n                <span class=\"n\">ssl_verify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h3>Import data from Cubes and Reports</h3>\n<p>In <strong>mstrio-py</strong>, Reports and Cubes have the same API, so you can use these examples for importing Report data to a DataFrame, too. To import the contents of a published cube into a DataFrame for analysis in Python, use the <code>Cube</code> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mstrio.cube</span> <span class=\"kn\">import</span> <span class=\"n\">Cube</span>\n<span class=\"n\">my_cube</span> <span class=\"o\">=</span> <span class=\"n\">Cube</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">cube_id</span><span class=\"o\">=</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</pre>\n<p>To import Reports into a DataFrame for analysis in Python use the optimized <code>Report</code> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mstrio.report</span> <span class=\"kn\">import</span> <span class=\"n\">Report</span>\n<span class=\"n\">my_report</span> <span class=\"o\">=</span> <span class=\"n\">Report</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">report_id</span><span class=\"o\">=</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">my_report</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</pre>\n<p>By default, all rows are imported when <code>my_cube.to_dataframe()</code> or <code>my_report.to_dataframe()</code> are called. Filter the contents of a cube/report by passing the object IDs for the metrics, attributes, and attribute elements you need. First, get the object IDs of the metrics, attributes that are available within the Cube/Report object instance:</p>\n<pre><span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">metrics</span>\n<span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">attributes</span>\n</pre>\n<p>If you need to filter by attribute elements, call <code>my_cube.get_attr_elements()</code> or <code>my_report.get_attr_elements()</code> which will fetch all unique attribute elements per attribute. The attribute elements are available within the Cube/Report object instance:</p>\n<pre><span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">attr_elements</span>\n</pre>\n<p>Then, choose those elements by passing their IDs to the <code>my_cube.apply_filters()</code> method. To see the chosen elements, call <code>my_cube.filters</code> and to clear any active filters, call <code>my_cube.clear_filters()</code>.</p>\n<pre><span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">apply_filters</span><span class=\"p\">(</span>\n   <span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"A598372E11E9910D1CBF0080EFD54D63\"</span><span class=\"p\">,</span> <span class=\"s2\">\"A59855D811E9910D1CC50080EFD54D63\"</span><span class=\"p\">],</span>\n   <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"B4054F5411E9910D672E0080EFC5AE5B\"</span><span class=\"p\">],</span>\n   <span class=\"n\">attr_elements</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"A598372E11E9910D1CBF0080EFD54D63:Los Angeles\"</span><span class=\"p\">,</span> <span class=\"s2\">\"A598372E11E9910D1CBF0080EFD54D63:Seattle\"</span><span class=\"p\">])</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">my_cube</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</pre>\n<h3>Export data into MicroStrategy with Datasets</h3>\n<h5>Create a new dataset</h5>\n<p>With <strong>mstrio</strong> you can create and publish single or multi-table datasets. This is done by passing Pandas DataFrames to a dataset constructor which translates the data into the format needed by MicroStrategy.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">stores</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n          <span class=\"s2\">\"location\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"New York\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Seattle\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Los Angeles\"</span><span class=\"p\">]}</span>\n<span class=\"n\">stores_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">stores</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"location\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">sales</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n         <span class=\"s2\">\"category\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"TV\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Books\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Accessories\"</span><span class=\"p\">],</span>\n         <span class=\"s2\">\"sales\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>\n         <span class=\"s2\">\"sales_fmt\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"$400\"</span><span class=\"p\">,</span> <span class=\"s2\">\"$200\"</span><span class=\"p\">,</span> <span class=\"s2\">\"$100\"</span><span class=\"p\">]}</span>\n<span class=\"n\">sales_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">sales</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"category\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sales\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sales_fmt\"</span><span class=\"p\">])</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mstrio.dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Store Analysis\"</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Stores\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">stores_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s2\">\"add\"</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Sales\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">sales_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s2\">\"add\"</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n<p>By default <code>Dataset.create()</code> will upload the data to the Intelligence Server and publish the dataset. If you just want to <em>create</em> the dataset but not upload the row-level data, use <code>Dataset.create(auto_upload=False)</code>.</p>\n<p>When using <code>Dataset.add_table()</code>, Pandas data types are mapped to MicroStrategy data types. By default, numeric data (integers and floats) are modeled as MicroStrategy Metrics and non-numeric data are modeled as MicroStrategy Attributes. This can be problematic if your data contains columns with integers that should behave as Attributes (e.g. a row ID), or if your data contains string-based, numeric <em>looking</em> data which should be Metrics (e.g. formatted sales data, [\"$450\", \"$325\"]). To control this behavior, provide a list of columns that you want to convert from one type to another.</p>\n<pre><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Stores\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">stores_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span>\n             <span class=\"n\">to_attribute</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">])</span>\n\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Sales\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">sales_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span>\n             <span class=\"n\">to_attribute</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"store_id\"</span><span class=\"p\">],</span>\n             <span class=\"n\">to_metric</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sales_fmt\"</span><span class=\"p\">])</span>\n</pre>\n<p>It is also possible to specify where the dataset should be created by providing a folder ID in <code>Dataset.create(folder_id=\"...\")</code>.</p>\n<p>After creating the dataset, you can obtain its ID using <code>Datasets.dataset_id</code>. This ID is needed for updating the data later.</p>\n<h5>Update a dataset</h5>\n<p>When the source data changes and users need the latest data for analysis and reporting in MicroStrategy, <strong>mstrio</strong> allows you to update the previously created dataset.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mstrio.dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">dataset_id</span><span class=\"o\">=</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Stores\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">stores_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s1\">'update'</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Sales\"</span><span class=\"p\">,</span> <span class=\"n\">data_frame</span><span class=\"o\">=</span><span class=\"n\">sales_df</span><span class=\"p\">,</span> <span class=\"n\">update_policy</span><span class=\"o\">=</span><span class=\"s1\">'upsert'</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>update_policy</code> parameter controls how the data in the dataset gets updated. Currently supported update operations are <code>add</code> (inserts entirely new data), <code>update</code> (updates existing data), <code>upsert</code> (simultaneously updates existing data and inserts new data), and <code>replace</code> (truncates and replaces the data).</p>\n<p>By default, the raw data is transmitted to the server in increments of 100,000 rows. On very large datasets (&gt;1 GB), it is beneficial to increase the number of rows transmitted to the Intelligence Server with each request. Do this with the <code>chunksize</code> parameter:</p>\n<pre><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">500000</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, note that updating datasets that were <em>not</em> created using the REST API is not supported.</p>\n<h5>Certify a dataset</h5>\n<p>Use <code>Dataset.certify()</code> to certify / decertify an existing dataset. Note that this will only work for datasets created using mstrio or any other client leveraging MicroStrategy REST API.</p>\n<h2>More resources</h2>\n<ul>\n<li><a href=\"https://community.microstrategy.com/s/topic/0TO44000000AJ2dGAG/python-r-u108\" rel=\"nofollow\">Tutorials for mstrio</a></li>\n<li><a href=\"http://www2.microstrategy.com/producthelp/Current/mstrio-py/\" rel=\"nofollow\">mstrio-py online documentation</a></li>\n<li><a href=\"https://github.com/MicroStrategy/mstrio\" rel=\"nofollow\">Check out mstrio for R</a></li>\n<li><a href=\"https://lw.microstrategy.com/msdz/MSDL/GARelease_Current/docs/projects/RESTSDK/Content/topics/REST_API/REST_API.htm\" rel=\"nofollow\">Learn more about the MicroStrategy REST API</a></li>\n<li><a href=\"https://demo.microstrategy.com/MicroStrategyLibrary/api-docs/index.html\" rel=\"nofollow\">MicroStrategy REST API Demo environment</a></li>\n</ul>\n<h2>Other</h2>\n<p>\"Jupyter\" and the Jupyter logos are trademarks or registered trademarks of NumFOCUS.</p>\n\n          </div>"}, "last_serial": 6896221, "releases": {"10.11": [{"comment_text": "", "digests": {"md5": "ff72ffba1534ab9ec6edd509dd3d9f94", "sha256": "d50f97054e30c473fc0536cf8bf7845b6e8fa2945c0aa2c4c1602cb29c22a477"}, "downloads": -1, "filename": "mstrio_py-10.11-py3-none-any.whl", "has_sig": false, "md5_digest": "ff72ffba1534ab9ec6edd509dd3d9f94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11903, "upload_time": "2018-07-25T17:43:03", "upload_time_iso_8601": "2018-07-25T17:43:03.182398Z", "url": "https://files.pythonhosted.org/packages/b4/a8/8ed3f013c6de6130a4e80e20978efd3fdbd0bed3dd9b04bf8806402cbb13/mstrio_py-10.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92497fb280e00030b17cfa0f84a9abfa", "sha256": "7c1eefce90625308343057378187bd329ab2567dc7fb252c49532de6cf66d87e"}, "downloads": -1, "filename": "mstrio-py-10.11.tar.gz", "has_sig": false, "md5_digest": "92497fb280e00030b17cfa0f84a9abfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9275, "upload_time": "2018-07-25T17:43:04", "upload_time_iso_8601": "2018-07-25T17:43:04.228325Z", "url": "https://files.pythonhosted.org/packages/3d/3d/2c23e0ffb1397f5fb3d3d7b845c311314cfbb33e38941994ae522d25d516/mstrio-py-10.11.tar.gz", "yanked": false}], "10.11.1": [{"comment_text": "", "digests": {"md5": "16165c4a9717cdaf0e9d15448ff9b69a", "sha256": "c87e06a88578ffabdeb8b37c7ee3bece1b0fbb79c6f8f257da23a9820ad5230d"}, "downloads": -1, "filename": "mstrio_py-10.11.1-py3-none-any.whl", "has_sig": false, "md5_digest": "16165c4a9717cdaf0e9d15448ff9b69a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16107, "upload_time": "2019-09-27T16:22:03", "upload_time_iso_8601": "2019-09-27T16:22:03.596115Z", "url": "https://files.pythonhosted.org/packages/e5/a0/c6b73c159509ad23e3a6166221b599308030a527cb65cd3f0240fd214ee3/mstrio_py-10.11.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8081c400b92b405b6c94adaaa4fc5a09", "sha256": "226cea5e84ae31b291aef99128e2a135ece92cdac7b134238eb5d63d3a02713b"}, "downloads": -1, "filename": "mstrio-py-10.11.1.tar.gz", "has_sig": false, "md5_digest": "8081c400b92b405b6c94adaaa4fc5a09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9261, "upload_time": "2019-09-27T16:22:05", "upload_time_iso_8601": "2019-09-27T16:22:05.126694Z", "url": "https://files.pythonhosted.org/packages/95/22/f3a1b3bb18698410af14e1b54e27ada64431b0814af5f2882b6d4cd47de5/mstrio-py-10.11.1.tar.gz", "yanked": false}], "11.1.4.002": [{"comment_text": "", "digests": {"md5": "c972acb269b2116ce6eba41d0a7348b2", "sha256": "c6e1fa65c129d0c79fcd9b3b0c3318add65e71ba0dc3d2c5caaa48a65799a7cf"}, "downloads": -1, "filename": "mstrio_py-11.1.4.002-py3-none-any.whl", "has_sig": false, "md5_digest": "c972acb269b2116ce6eba41d0a7348b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2725726, "upload_time": "2019-10-29T11:26:17", "upload_time_iso_8601": "2019-10-29T11:26:17.075197Z", "url": "https://files.pythonhosted.org/packages/25/78/8f70d194df07b94e564c6e28965ff13434f334b0e35ccc4a7d2baee6a707/mstrio_py-11.1.4.002-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2801ac45f920e41111847a43c1f0e43d", "sha256": "5b69086c685d4e50d9cb837d1166a3bf5481636f75fe631269b8f9d9dec89b2a"}, "downloads": -1, "filename": "mstrio-py-11.1.4.002.tar.gz", "has_sig": false, "md5_digest": "2801ac45f920e41111847a43c1f0e43d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2597095, "upload_time": "2019-10-29T11:26:19", "upload_time_iso_8601": "2019-10-29T11:26:19.451852Z", "url": "https://files.pythonhosted.org/packages/b8/41/d196d18bc7d01fb0f18786a068f026918a35b33c9da74fb2e3048f975e1b/mstrio-py-11.1.4.002.tar.gz", "yanked": false}], "11.2.0": [{"comment_text": "", "digests": {"md5": "59f43e3d0c1c9a9fa75c0d414c816696", "sha256": "65431ccc66a40b3703091380889e2d0f2ecfb2e35f0831f7ae38c38dd5b8dea5"}, "downloads": -1, "filename": "mstrio-py-11.2.0.tar.gz", "has_sig": false, "md5_digest": "59f43e3d0c1c9a9fa75c0d414c816696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2581594, "upload_time": "2019-12-10T14:31:44", "upload_time_iso_8601": "2019-12-10T14:31:44.443651Z", "url": "https://files.pythonhosted.org/packages/1f/93/a7bb4e5d3654e11cea8fcad51a0e33d3974ab93a9c9bbc2feab0aab05a76/mstrio-py-11.2.0.tar.gz", "yanked": false}], "11.2.1": [{"comment_text": "", "digests": {"md5": "54b748eedfe769a4735230cf736b11f1", "sha256": "9664c0e9837206949a636029ee5e5505717ccccb60ce2e4e2800f932bbe0f823"}, "downloads": -1, "filename": "mstrio-py-11.2.1.tar.gz", "has_sig": false, "md5_digest": "54b748eedfe769a4735230cf736b11f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2638285, "upload_time": "2020-03-27T13:45:36", "upload_time_iso_8601": "2020-03-27T13:45:36.211523Z", "url": "https://files.pythonhosted.org/packages/19/64/f5e229184dbb46e6965e401b80be0eb994849f90beaaac9d737d5740c8e9/mstrio-py-11.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54b748eedfe769a4735230cf736b11f1", "sha256": "9664c0e9837206949a636029ee5e5505717ccccb60ce2e4e2800f932bbe0f823"}, "downloads": -1, "filename": "mstrio-py-11.2.1.tar.gz", "has_sig": false, "md5_digest": "54b748eedfe769a4735230cf736b11f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2638285, "upload_time": "2020-03-27T13:45:36", "upload_time_iso_8601": "2020-03-27T13:45:36.211523Z", "url": "https://files.pythonhosted.org/packages/19/64/f5e229184dbb46e6965e401b80be0eb994849f90beaaac9d737d5740c8e9/mstrio-py-11.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:45 2020"}