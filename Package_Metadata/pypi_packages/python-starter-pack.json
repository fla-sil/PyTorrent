{"info": {"author": "Alejandro Piad", "author_email": "apiad@apiad.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Python Starter Pack\n\n<img alt=\"PyPI - License\" src=\"https://img.shields.io/pypi/l/python-starter-pack.svg\"> <img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/python-starter-pack.svg\"> <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/python-starter-pack.svg\"> <img alt=\"Travis (.org)\" src=\"https://img.shields.io/travis/apiad/python-starter-pack/master.svg\"> <img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/apiad/python-starter-pack.svg\">\n\n> Quickly setup a Python 3 library complete with continuous integration, code coverage and automatic deployment to PyPi in 5 minutes.\n\n## What's this about?\n\nHave you ever wanted to make a Python library available on PyPi, but struggled with all the fuss about `setup.py`, continuous integration, unit testing, and such? Been there ;).\n\nAfter reading a bunch of tutorials and trying a few different ways on my own, this is the most condensed and streamlined checklist I've come up with. Just by forking this project and following the next few steps you'll be up on your own with a brand new Python library project, together with unit testing, continuous integration, code coverage, and automatic deployment to PyPi. Tag along.\n\n## A Python starter pack\n\nStarting a new Python library project? Follow these steps:\n\n### Step 1: Setting up the environment\n\nFirst, it should go without saying, get a [Github account](https://github.com/signup) if you haven't.\n\nNext, [fork this project](https://github.com/apiad/python-starter-pack), and then clone your own version, or directly clone the project:\n\n```bash\n$ git clone git@github.com:apiad/python-starter-pack <my-project>\n```\n\nNow you can head over to your project's folder and see what's inside:\n\n```bash\n$ cd <my-project>\n$ ls\n\ntotal 48K\n-rw-r--r-- 1 user user 1,1K may 19 18:44 LICENSE\n-rw-r--r-- 1 user user  321 may 22 15:29 makefile\n-rw-r--r-- 1 user user   16 may 19 19:34 MANIFEST.in\n-rw-r--r-- 1 user user  206 may 19 19:36 Pipfile\n-rw-r--r-- 1 user user  13K may 19 19:36 Pipfile.lock\ndrwxr-xr-x 2 user user 4,0K may 22 15:31 python_starter_pack\n-rw-r--r-- 1 user user 2,2K may 22 15:40 Readme.md\n-rw-r--r-- 1 user user 2,1K may 22 15:31 setup.py\ndrwxr-xr-x 2 user user 4,0K may 22 15:31 tests\n```\n\nWe'll go in depth on the contents of each file later on. The most important things now is to notice that we have a `Pipfile`, hence, we will be using `pipenv` for dependency management.\n\nSo, if you haven't already, [install pipenv](https://github.com/pypa/pipenv). The easiest way, in Linux, is simply to run:\n\n```bash\n$ make install\n\npip install pipenv\n...\npipenv install --dev --skip-lock\nInstalling dependencies from Pipfile\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 5/5 \u2014 00:00:01\n...\n```\n\nThis will use our `makefile` definition for `install` which basically installs `pipenv` and updates the dependencies.\n\n### Step 2: Adding your code\n\nNow that you have the dependencies and development environment in place, you can start adding your code.\nWe have sample code in the `python_starter_pack` folder. Check the folder and files' content if you need a little guidance, or simply replace with your own code.\n\nFor starters, the `python_starter_pack` folder is what we call a _Python module_, because it contains a `__init__.py` file which allows it to be imported from Python code.\n\nThere are also some basic functions in there just to illustrate the basic functionality for importing code and, as we'll see next, for testing.\n\n### Step 3: Running tests\n\nThe `tests` folder will contain all your unit tests. We'll be using the awesome `pytest` module, and also `pylint` for ensuring our code is Pythonic and beautiful.\n\nIf you have been changing code, you will need to make some changes to `makefile` to ensure everything is consistent. Open it and update the value of the `PROJECT` variable to point to your project's folder. In Linux you can just hack your way with the following (where `<my-project>` is your project's folder):\n\n```bash\n$ sed -i -E \"/^PROJECT/s/(.*)/PROJECT=<my-project>/\" makefile\n```\n\nIn any case, now you can test your code with:\n\n```bash\n$ make test\n```\n\nThis will run `pylint` and then `pytest`, testing doc-strings and unit tests in the `tests` folder. Check the file `tests/test_module.py` for head-start on unit testing in Python.\nThis will also create and print `codecov` coverage reports, telling you how much of your code is tested.\nMake sure to re-test every time you change something.\n\n### Step 4: Publishing on Github\n\nIf you forked your project then your git remote is set. Otherwise, you will need [to create a new project](https://github.com/new) on Github and set up your remote. In any case, when ready, you can just push your code:\n\n```bash\n$ git push origin master\n```\n\n### Step 5: Setup continuous integration\n\nNow that your project is on Github, the next step is to setup continuous integration with [Travis-CI](https://travis-ci.org). If you don't still have an account on Travis-CI, register there and [activate your repository](https://travis-ci.org/account/repositories).\n\nTravis-CI will ask you to link with your Github account, and install the `travis` app in your Github profile. Once that is done, every push will automatically trigger Travis-CI to run the tests online.\n\nPlus, Travis-CI will automatically push coverage reports to [Codecov](https://codecov.io). Make sure to register there as well, and you will see coverage statistics automatically (there is no need to \"activate\" a repository there, it happens automatically when Travis pushes coverage stats).\n\nThis all just works because of the file `.travis.yml` which you are free to open and modify according to your preferences (e.g., change the preferred Python version).\n\nOnce Travis-CI and Codecov are setup, make sure to modify the top of this `Readme.md` file and update these links:\n\n```html\n<img alt=\"Travis (.org)\" src=\"https://img.shields.io/travis/apiad/python-starter-pack/master.svg\">\n<img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/apiad/python-starter-pack.svg\">\n```\n\nChange the `apiad/python-starter-pack` part to match your Github user/repository and you will immediately get these nice badges on your Readme file.\n\n### Step 6: Automatic deploy on PyPi\n\nThe next step is to setup automatic deployment on the Python Package Index. We will start with deploying to the test channel before moving on deploying to the real channel.\n\nFirst, to keep things tidy up, let me explain the how the workflow will be. We will create a `develop` branch:\n\n```bash\n$ git branch -C develop\n$ git checkout develop\n```\n\nNow, on this branch, we will test that deployment to PyPi works. Head over to [test.pypi.org](https://test.pypi.org) and register there. Remember your **username** and **password**.\n\nNow it's time to setup up your package configuration. Open the file `setup.py` and modify the necessary lines. They all say `TODO` on top. You should define there your project's name and modules, copyright info, entry-points (if any) and other metadata (known as classifiers).\n\nOnce that is ready, **make sure to change** the `VERSION` variable on top. This `VERSION` variable is what PyPi will use to determine the current version, and if you push twice with the same version you'll get an error because you cannot override something published to PyPi.\n\nNow head over to [Travis-CI](https://travis-ci.org) and navigate to your project's settings. There you will need to set two **environment variables**: `TEST_PYPI_USER` and `TEST_PYPI_PASSWORD` with the values of your username and password for [test.pypi.org](https://test.pypi.org).\n\nOnce that is done, you can now push to Github from the `develop` branch and your project will be automatically published on [test.pypi.org](https://test.pypi.org). You can check it there.\n\nBy now you should have a workflow cycle that looks something like this:\n- Work on the `develop` branch (or a `feature-*` and them merge to `develop`).\n- Commit as much as you like.\n- Run `make test` often to make sure everything works.\n- When you are confident the next feature is working, go over to `setup.py` and bump the `VERSION` variable to your new version.\n- Push the `develop` branch to Github.\n- Check [Travis-CI](https://travis-ci.org) and [test.pypi.org](https://test.pypi.org) to make sure everything is Ok.\n\n### Step 7: Deploy on PyPi for real\n\nNow you are going to setup deployment on the **real** PyPi index. Head over to [pypi.org](https://test.pypi.org) and register there.\n\nNow go over to Travis-CI settings for your project and set the **environment variables** `PYPI_USERNAME` and `PYPI_PASSWORD`. Once this is ready, Travis will be able to push to PyPi when you commit and push to `master`.\n\nHowever, for safety reasons, we **do not** deploy on PyPI on every commit to `master`, but **only on tags**. Hence, the workflow is the following:\n\n- Develop on the `develop` branch and commit, bump version, push, rinse, repeat.\n- Once you are confident everything is Ok on `develop`, navigate to [Github](https://github.com), and in your project's page, create a **pull request** from `develop` to `master`.\n- When the pull request has been created, you will notice that automatically Travis and Codecov start working and basically block your commit until all tests pass.\n- Once everything is green, you will be able to **merge** to `master`.\n- Finally, **create a release** on Github, with a proper version number (please, the same as in `setup.py`) and then, and only then, will Travis deploy to PyPi.\n\nWhen everything is working, make sure to change the remaining `<img>` tags in this `Readme.md` to match your repository's name.\n\n**Enjoy!**\n\n## Collaboration\n\nLicense is MIT, so you know the drill.\n\n> MIT License\n>\n> Copyright (c) 2019 Alejandro Piad\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/apiad/python-starter-pack/tarball/0.2.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/apiad/python-starter-pack", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-starter-pack", "package_url": "https://pypi.org/project/python-starter-pack/", "platform": "", "project_url": "https://pypi.org/project/python-starter-pack/", "project_urls": {"Download": "https://github.com/apiad/python-starter-pack/tarball/0.2.0", "Homepage": "https://github.com/apiad/python-starter-pack"}, "release_url": "https://pypi.org/project/python-starter-pack/0.2.0/", "requires_dist": ["toml"], "requires_python": "", "summary": "A starter pack for Python modules.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Starter Pack</h1>\n<p><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/180937675cb2e174a43ff9ec16955dde6a9a1615/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f707974686f6e2d737461727465722d7061636b2e737667\"> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fd19fc6ef6665b88a452244a3a326dc94d3241c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974686f6e2d737461727465722d7061636b2e737667\"> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7462ab08ccc8d1350842597c90beb7201633d735/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e2d737461727465722d7061636b2e737667\"> <img alt=\"Travis (.org)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62728c3c940f5ff394f6a4579d9092bba079b992/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f61706961642f707974686f6e2d737461727465722d7061636b2f6d61737465722e737667\"> <img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35cdb8a45d54b7448e9a76de02ecbc325d1ca107/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f61706961642f707974686f6e2d737461727465722d7061636b2e737667\"></p>\n<blockquote>\n<p>Quickly setup a Python 3 library complete with continuous integration, code coverage and automatic deployment to PyPi in 5 minutes.</p>\n</blockquote>\n<h2>What's this about?</h2>\n<p>Have you ever wanted to make a Python library available on PyPi, but struggled with all the fuss about <code>setup.py</code>, continuous integration, unit testing, and such? Been there ;).</p>\n<p>After reading a bunch of tutorials and trying a few different ways on my own, this is the most condensed and streamlined checklist I've come up with. Just by forking this project and following the next few steps you'll be up on your own with a brand new Python library project, together with unit testing, continuous integration, code coverage, and automatic deployment to PyPi. Tag along.</p>\n<h2>A Python starter pack</h2>\n<p>Starting a new Python library project? Follow these steps:</p>\n<h3>Step 1: Setting up the environment</h3>\n<p>First, it should go without saying, get a <a href=\"https://github.com/signup\" rel=\"nofollow\">Github account</a> if you haven't.</p>\n<p>Next, <a href=\"https://github.com/apiad/python-starter-pack\" rel=\"nofollow\">fork this project</a>, and then clone your own version, or directly clone the project:</p>\n<pre>$ git clone git@github.com:apiad/python-starter-pack &lt;my-project&gt;\n</pre>\n<p>Now you can head over to your project's folder and see what's inside:</p>\n<pre>$ <span class=\"nb\">cd</span> &lt;my-project&gt;\n$ ls\n\ntotal 48K\n-rw-r--r-- <span class=\"m\">1</span> user user <span class=\"m\">1</span>,1K may <span class=\"m\">19</span> <span class=\"m\">18</span>:44 LICENSE\n-rw-r--r-- <span class=\"m\">1</span> user user  <span class=\"m\">321</span> may <span class=\"m\">22</span> <span class=\"m\">15</span>:29 makefile\n-rw-r--r-- <span class=\"m\">1</span> user user   <span class=\"m\">16</span> may <span class=\"m\">19</span> <span class=\"m\">19</span>:34 MANIFEST.in\n-rw-r--r-- <span class=\"m\">1</span> user user  <span class=\"m\">206</span> may <span class=\"m\">19</span> <span class=\"m\">19</span>:36 Pipfile\n-rw-r--r-- <span class=\"m\">1</span> user user  13K may <span class=\"m\">19</span> <span class=\"m\">19</span>:36 Pipfile.lock\ndrwxr-xr-x <span class=\"m\">2</span> user user <span class=\"m\">4</span>,0K may <span class=\"m\">22</span> <span class=\"m\">15</span>:31 python_starter_pack\n-rw-r--r-- <span class=\"m\">1</span> user user <span class=\"m\">2</span>,2K may <span class=\"m\">22</span> <span class=\"m\">15</span>:40 Readme.md\n-rw-r--r-- <span class=\"m\">1</span> user user <span class=\"m\">2</span>,1K may <span class=\"m\">22</span> <span class=\"m\">15</span>:31 setup.py\ndrwxr-xr-x <span class=\"m\">2</span> user user <span class=\"m\">4</span>,0K may <span class=\"m\">22</span> <span class=\"m\">15</span>:31 tests\n</pre>\n<p>We'll go in depth on the contents of each file later on. The most important things now is to notice that we have a <code>Pipfile</code>, hence, we will be using <code>pipenv</code> for dependency management.</p>\n<p>So, if you haven't already, <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">install pipenv</a>. The easiest way, in Linux, is simply to run:</p>\n<pre>$ make install\n\npip install pipenv\n...\npipenv install --dev --skip-lock\nInstalling dependencies from Pipfile\u2026\n  \ud83d\udc0d   \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 <span class=\"m\">5</span>/5 \u2014 <span class=\"m\">00</span>:00:01\n...\n</pre>\n<p>This will use our <code>makefile</code> definition for <code>install</code> which basically installs <code>pipenv</code> and updates the dependencies.</p>\n<h3>Step 2: Adding your code</h3>\n<p>Now that you have the dependencies and development environment in place, you can start adding your code.\nWe have sample code in the <code>python_starter_pack</code> folder. Check the folder and files' content if you need a little guidance, or simply replace with your own code.</p>\n<p>For starters, the <code>python_starter_pack</code> folder is what we call a <em>Python module</em>, because it contains a <code>__init__.py</code> file which allows it to be imported from Python code.</p>\n<p>There are also some basic functions in there just to illustrate the basic functionality for importing code and, as we'll see next, for testing.</p>\n<h3>Step 3: Running tests</h3>\n<p>The <code>tests</code> folder will contain all your unit tests. We'll be using the awesome <code>pytest</code> module, and also <code>pylint</code> for ensuring our code is Pythonic and beautiful.</p>\n<p>If you have been changing code, you will need to make some changes to <code>makefile</code> to ensure everything is consistent. Open it and update the value of the <code>PROJECT</code> variable to point to your project's folder. In Linux you can just hack your way with the following (where <code>&lt;my-project&gt;</code> is your project's folder):</p>\n<pre>$ sed -i -E <span class=\"s2\">\"/^PROJECT/s/(.*)/PROJECT=&lt;my-project&gt;/\"</span> makefile\n</pre>\n<p>In any case, now you can test your code with:</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>This will run <code>pylint</code> and then <code>pytest</code>, testing doc-strings and unit tests in the <code>tests</code> folder. Check the file <code>tests/test_module.py</code> for head-start on unit testing in Python.\nThis will also create and print <code>codecov</code> coverage reports, telling you how much of your code is tested.\nMake sure to re-test every time you change something.</p>\n<h3>Step 4: Publishing on Github</h3>\n<p>If you forked your project then your git remote is set. Otherwise, you will need <a href=\"https://github.com/new\" rel=\"nofollow\">to create a new project</a> on Github and set up your remote. In any case, when ready, you can just push your code:</p>\n<pre>$ git push origin master\n</pre>\n<h3>Step 5: Setup continuous integration</h3>\n<p>Now that your project is on Github, the next step is to setup continuous integration with <a href=\"https://travis-ci.org\" rel=\"nofollow\">Travis-CI</a>. If you don't still have an account on Travis-CI, register there and <a href=\"https://travis-ci.org/account/repositories\" rel=\"nofollow\">activate your repository</a>.</p>\n<p>Travis-CI will ask you to link with your Github account, and install the <code>travis</code> app in your Github profile. Once that is done, every push will automatically trigger Travis-CI to run the tests online.</p>\n<p>Plus, Travis-CI will automatically push coverage reports to <a href=\"https://codecov.io\" rel=\"nofollow\">Codecov</a>. Make sure to register there as well, and you will see coverage statistics automatically (there is no need to \"activate\" a repository there, it happens automatically when Travis pushes coverage stats).</p>\n<p>This all just works because of the file <code>.travis.yml</code> which you are free to open and modify according to your preferences (e.g., change the preferred Python version).</p>\n<p>Once Travis-CI and Codecov are setup, make sure to modify the top of this <code>Readme.md</code> file and update these links:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">\"Travis (.org)\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://img.shields.io/travis/apiad/python-starter-pack/master.svg\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">\"Codecov\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://img.shields.io/codecov/c/github/apiad/python-starter-pack.svg\"</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Change the <code>apiad/python-starter-pack</code> part to match your Github user/repository and you will immediately get these nice badges on your Readme file.</p>\n<h3>Step 6: Automatic deploy on PyPi</h3>\n<p>The next step is to setup automatic deployment on the Python Package Index. We will start with deploying to the test channel before moving on deploying to the real channel.</p>\n<p>First, to keep things tidy up, let me explain the how the workflow will be. We will create a <code>develop</code> branch:</p>\n<pre>$ git branch -C develop\n$ git checkout develop\n</pre>\n<p>Now, on this branch, we will test that deployment to PyPi works. Head over to <a href=\"https://test.pypi.org\" rel=\"nofollow\">test.pypi.org</a> and register there. Remember your <strong>username</strong> and <strong>password</strong>.</p>\n<p>Now it's time to setup up your package configuration. Open the file <code>setup.py</code> and modify the necessary lines. They all say <code>TODO</code> on top. You should define there your project's name and modules, copyright info, entry-points (if any) and other metadata (known as classifiers).</p>\n<p>Once that is ready, <strong>make sure to change</strong> the <code>VERSION</code> variable on top. This <code>VERSION</code> variable is what PyPi will use to determine the current version, and if you push twice with the same version you'll get an error because you cannot override something published to PyPi.</p>\n<p>Now head over to <a href=\"https://travis-ci.org\" rel=\"nofollow\">Travis-CI</a> and navigate to your project's settings. There you will need to set two <strong>environment variables</strong>: <code>TEST_PYPI_USER</code> and <code>TEST_PYPI_PASSWORD</code> with the values of your username and password for <a href=\"https://test.pypi.org\" rel=\"nofollow\">test.pypi.org</a>.</p>\n<p>Once that is done, you can now push to Github from the <code>develop</code> branch and your project will be automatically published on <a href=\"https://test.pypi.org\" rel=\"nofollow\">test.pypi.org</a>. You can check it there.</p>\n<p>By now you should have a workflow cycle that looks something like this:</p>\n<ul>\n<li>Work on the <code>develop</code> branch (or a <code>feature-*</code> and them merge to <code>develop</code>).</li>\n<li>Commit as much as you like.</li>\n<li>Run <code>make test</code> often to make sure everything works.</li>\n<li>When you are confident the next feature is working, go over to <code>setup.py</code> and bump the <code>VERSION</code> variable to your new version.</li>\n<li>Push the <code>develop</code> branch to Github.</li>\n<li>Check <a href=\"https://travis-ci.org\" rel=\"nofollow\">Travis-CI</a> and <a href=\"https://test.pypi.org\" rel=\"nofollow\">test.pypi.org</a> to make sure everything is Ok.</li>\n</ul>\n<h3>Step 7: Deploy on PyPi for real</h3>\n<p>Now you are going to setup deployment on the <strong>real</strong> PyPi index. Head over to <a href=\"https://test.pypi.org\" rel=\"nofollow\">pypi.org</a> and register there.</p>\n<p>Now go over to Travis-CI settings for your project and set the <strong>environment variables</strong> <code>PYPI_USERNAME</code> and <code>PYPI_PASSWORD</code>. Once this is ready, Travis will be able to push to PyPi when you commit and push to <code>master</code>.</p>\n<p>However, for safety reasons, we <strong>do not</strong> deploy on PyPI on every commit to <code>master</code>, but <strong>only on tags</strong>. Hence, the workflow is the following:</p>\n<ul>\n<li>Develop on the <code>develop</code> branch and commit, bump version, push, rinse, repeat.</li>\n<li>Once you are confident everything is Ok on <code>develop</code>, navigate to <a href=\"https://github.com\" rel=\"nofollow\">Github</a>, and in your project's page, create a <strong>pull request</strong> from <code>develop</code> to <code>master</code>.</li>\n<li>When the pull request has been created, you will notice that automatically Travis and Codecov start working and basically block your commit until all tests pass.</li>\n<li>Once everything is green, you will be able to <strong>merge</strong> to <code>master</code>.</li>\n<li>Finally, <strong>create a release</strong> on Github, with a proper version number (please, the same as in <code>setup.py</code>) and then, and only then, will Travis deploy to PyPi.</li>\n</ul>\n<p>When everything is working, make sure to change the remaining <code>&lt;img&gt;</code> tags in this <code>Readme.md</code> to match your repository's name.</p>\n<p><strong>Enjoy!</strong></p>\n<h2>Collaboration</h2>\n<p>License is MIT, so you know the drill.</p>\n<blockquote>\n<p>MIT License</p>\n<p>Copyright (c) 2019 Alejandro Piad</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 5304202, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "df05b601f9b0152787268e9d2971da4e", "sha256": "0b3b03034c3336a29668a4472dc5f93acb4a63279b8152759a9f5c9d49e650c2"}, "downloads": -1, "filename": "python_starter_pack-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "df05b601f9b0152787268e9d2971da4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3513, "upload_time": "2019-05-20T21:36:59", "upload_time_iso_8601": "2019-05-20T21:36:59.241085Z", "url": "https://files.pythonhosted.org/packages/74/72/9f9775476c9d1e54bacb91055b2a7b9086480bd5f70ca11c5979d59f35cd/python_starter_pack-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41579891b59ed9a1c23035964a492cbf", "sha256": "6ae8e9e1f7e5190919a22725ddc3e436f8ad20620b8a2f13d6100ba6cff406dd"}, "downloads": -1, "filename": "python-starter-pack-0.1.2.tar.gz", "has_sig": false, "md5_digest": "41579891b59ed9a1c23035964a492cbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2497, "upload_time": "2019-05-20T21:37:01", "upload_time_iso_8601": "2019-05-20T21:37:01.320339Z", "url": "https://files.pythonhosted.org/packages/fc/58/0cc6cfde1ef53abac2130c7c7e72e22e17c9fed7969a25db8cf58178bff4/python-starter-pack-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "793e738f859be1770469edac9c439572", "sha256": "d6597171b776f9c06ad99d486ecde127de50c796d94e7368a9fa4d9d801c16ea"}, "downloads": -1, "filename": "python_starter_pack-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "793e738f859be1770469edac9c439572", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3555, "upload_time": "2019-05-20T21:56:00", "upload_time_iso_8601": "2019-05-20T21:56:00.150799Z", "url": "https://files.pythonhosted.org/packages/19/97/3694590185bac0603a047668f0b20f906849f91adc2b94489aa12be5fde8/python_starter_pack-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f60ae48fe0051e5e40f8a314b0ce65a", "sha256": "531507e5f49a3f6c5de0544c8abfedd83d53b62823830cbd2ec94eb1ed788c3d"}, "downloads": -1, "filename": "python-starter-pack-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6f60ae48fe0051e5e40f8a314b0ce65a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2483, "upload_time": "2019-05-20T21:56:01", "upload_time_iso_8601": "2019-05-20T21:56:01.308960Z", "url": "https://files.pythonhosted.org/packages/c9/cc/73a8bd09ebe53b949dda440ab4a7e3af671ef349c8a8b5071398d1315a50/python-starter-pack-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "298beb14618be259a0692b9cb40dcd3b", "sha256": "e5638eee2621c0357ba7bb7af9a3970c530c22c85416748489537f56ed9578dd"}, "downloads": -1, "filename": "python_starter_pack-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "298beb14618be259a0692b9cb40dcd3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4054, "upload_time": "2019-05-20T22:20:37", "upload_time_iso_8601": "2019-05-20T22:20:37.448648Z", "url": "https://files.pythonhosted.org/packages/fe/ca/78fcca217528a87b4372804711ab85ef754edd58d36954d4a058958542c0/python_starter_pack-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c54d069e50905f594f1b134be08cbef", "sha256": "bb3c884ed8c97cce0173d8dcf1bf11c647aafc9ea15084f938dce794e9e8d23e"}, "downloads": -1, "filename": "python-starter-pack-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9c54d069e50905f594f1b134be08cbef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3020, "upload_time": "2019-05-20T22:20:38", "upload_time_iso_8601": "2019-05-20T22:20:38.716504Z", "url": "https://files.pythonhosted.org/packages/88/80/2a4c4ef9d8b55b5fd0db82291f54df9c641fc945f56ca7d4fac457dac6d5/python-starter-pack-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b4d26f71240b4ff2aea01f31d6cf9629", "sha256": "35c3ae56245383eb82ef3be2374b9370c663434e923ca475424bb880bdd24b6e"}, "downloads": -1, "filename": "python_starter_pack-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b4d26f71240b4ff2aea01f31d6cf9629", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7592, "upload_time": "2019-05-22T19:25:02", "upload_time_iso_8601": "2019-05-22T19:25:02.589215Z", "url": "https://files.pythonhosted.org/packages/22/42/4438dd76ee3039caf8fe32db686d618fbadc1d99f292b5c230a2f41940bf/python_starter_pack-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82b879d0b6314e189b10aaa9393fda1e", "sha256": "014f8267859b2113185afcd9e44f5a92eadd26cd3e672d0ccbef7bbb5e11909b"}, "downloads": -1, "filename": "python-starter-pack-0.2.0.tar.gz", "has_sig": false, "md5_digest": "82b879d0b6314e189b10aaa9393fda1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6716, "upload_time": "2019-05-22T19:25:03", "upload_time_iso_8601": "2019-05-22T19:25:03.975022Z", "url": "https://files.pythonhosted.org/packages/8f/63/7b4c6c8c8e1699792da4dc61f3e612446c934a6a5c928e9829085d9173db/python-starter-pack-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4d26f71240b4ff2aea01f31d6cf9629", "sha256": "35c3ae56245383eb82ef3be2374b9370c663434e923ca475424bb880bdd24b6e"}, "downloads": -1, "filename": "python_starter_pack-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b4d26f71240b4ff2aea01f31d6cf9629", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7592, "upload_time": "2019-05-22T19:25:02", "upload_time_iso_8601": "2019-05-22T19:25:02.589215Z", "url": "https://files.pythonhosted.org/packages/22/42/4438dd76ee3039caf8fe32db686d618fbadc1d99f292b5c230a2f41940bf/python_starter_pack-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82b879d0b6314e189b10aaa9393fda1e", "sha256": "014f8267859b2113185afcd9e44f5a92eadd26cd3e672d0ccbef7bbb5e11909b"}, "downloads": -1, "filename": "python-starter-pack-0.2.0.tar.gz", "has_sig": false, "md5_digest": "82b879d0b6314e189b10aaa9393fda1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6716, "upload_time": "2019-05-22T19:25:03", "upload_time_iso_8601": "2019-05-22T19:25:03.975022Z", "url": "https://files.pythonhosted.org/packages/8f/63/7b4c6c8c8e1699792da4dc61f3e612446c934a6a5c928e9829085d9173db/python-starter-pack-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:12 2020"}