{"info": {"author": "Matt J Williams", "author_email": "mattjw@mattjw.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# sparkql \u2728\n\n[![PyPI version](https://badge.fury.io/py/sparkql.svg)](https://badge.fury.io/py/sparkql)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://github.com/mattjw/sparkql/workflows/CI/badge.svg)](https://github.com/mattjw/sparkql/actions)\n[![codecov](https://codecov.io/gh/mattjw/sparkql/branch/master/graph/badge.svg)](https://codecov.io/gh/mattjw/sparkql)\n\nPython Spark SQL DataFrame schema management for sensible humans.\n\n> _Don't sweat it... sparkql it \u2728_\n\n## Why use sparkql\n\n`sparkql` takes the pain out of working with DataFrame schemas in PySpark.\nIt makes schema definition more Pythonic. And it's\nparticularly useful you're dealing with structured data.\n\nIn plain old PySpark, you might find that you write schemas\n[like this](https://github.com/mattjw/sparkql/tree/master/examples/conferences_comparison/plain_schema.py):\n\n```python\nCITY_SCHEMA = StructType()\nCITY_NAME_FIELD = \"name\"\nCITY_SCHEMA.add(StructField(CITY_NAME_FIELD, StringType(), False))\nCITY_LAT_FIELD = \"latitude\"\nCITY_SCHEMA.add(StructField(CITY_LAT_FIELD, FloatType()))\nCITY_LONG_FIELD = \"longitude\"\nCITY_SCHEMA.add(StructField(CITY_LONG_FIELD, FloatType()))\n\nCONFERENCE_SCHEMA = StructType()\nCONF_NAME_FIELD = \"name\"\nCONFERENCE_SCHEMA.add(StructField(CONF_NAME_FIELD, StringType(), False))\nCONF_CITY_FIELD = \"city\"\nCONFERENCE_SCHEMA.add(StructField(CONF_CITY_FIELD, CITY_SCHEMA))\n```\n\nAnd then plain old PySpark makes you deal with nested fields like this:\n\n```python\ndframe.withColumn(\"city_name\", df[CONF_CITY_FIELD][CITY_NAME_FIELD])\n```\n\nInstead, with `sparkql`, schemas become a lot\n[more literate](https://github.com/mattjw/sparkql/tree/master/examples/conferences_comparison/sparkql_schema.py):\n\n```python\nclass City(Struct):\n    name = String(nullable=False)\n    latitude = Float()\n    longitude = Float()\n\nclass Conference(Struct):\n    name = String(nullable=False)\n    city = City()\n```\n\nAs does dealing with nested fields:\n\n```python\ndframe.withColumn(\"city_name\", Conference.city.name.COL)\n```\n\nHere's a summary of `sparkql`'s features.\n\n- ORM-like class-based Spark schema definitions.\n- Automated field naming: The attribute name of a field as it appears\n  in its `Struct` is (by default) used as its field name. This name can\n  be optionally overridden.\n- Programatically reference nested fields in your structs with the\n  `PATH` and `COL` special properties. Avoid hand-constructing strings\n  (or `Column`s) to reference your nested fields.\n- Validate that a DataFrame matches a `sparkql` schema.\n- Reuse and build composite schemas with `inheritance`, `includes`, and\n  `implements`.\n- Get a human-readable Spark schema representation with `pretty_schema`.\n- Create an instance of a schema as a dictionary, with validation of\n  the input values.\n\nRead on for documentation on these features.\n\n## Defining a schema\n\nEach Spark atomic type has a counterpart `sparkql` field:\n\n| PySpark type | `sparkql` field |\n|---|---|\n| `ByteType` | `Byte` |\n| `IntegerType` | `Integer` |\n| `LongType` | `Long` |\n| `ShortType` | `Short` |\n| `DecimalType` | `Decimal` |\n| `DoubleType` | `Double` |\n| `FloatType` | `Float` |\n| `StringType` | `String` |\n| `BinaryType` | `Binary` |\n| `BooleanType` | `Boolean` |\n| `DateType` | `Date` |\n| `TimestampType` | `Timestamp` |\n\n`Array` (counterpart to `ArrayType` in PySpark) allows the definition\nof arrays of objects. By creating a subclass of `Struct`, we can\ndefine a custom class that will be converted to a `StructType`.\n\nFor\n[example](https://github.com/mattjw/sparkql/tree/master/examples/arrays/arrays.py),\ngiven the `sparkql` schema definition:\n\n```python\nfrom sparkql import Struct, String, Array\n\nclass Article(Struct):\n    title = String(nullable=False)\n    tags = Array(String(), nullable=False)\n    comments = Array(String(nullable=False))\n```\n\nThen we can build the equivalent PySpark schema (a `StructType`)\nwith:\n\n```python\nfrom sparkql import schema\n\npyspark_struct = schema(Article)\n```\n\nPretty printing the schema with the expression\n`sparkql.pretty_schema(pyspark_struct)` will give the following:\n\n```text\nStructType(List(\n    StructField(title,StringType,false),\n    StructField(tags,\n        ArrayType(StringType,true),\n        false),\n    StructField(comments,\n        ArrayType(StringType,false),\n        true)))\n```\n\n## Features\n\nMany examples of how to use `sparkql` can be found in\n[`examples`](https://github.com/mattjw/sparkql/tree/master/examples).\n\n### Automated field naming\n\nBy default, field names are inferred from the attribute name in the\nstruct they are declared.\n\nFor example, given the struct\n\n```python\nclass Geolocation(Struct):\n    latitude = Float()\n    longitude = Float()\n```\n\nthe concrete name of the `Geolocation.latitude` field is `latitude`.\n\nNames also be overridden by explicitly specifying the field name as an\nargument to the field\n\n```python\nclass Geolocation(Struct):\n    latitude = Float(name=\"lat\")\n    longitude = Float(name=\"lon\")\n```\n\nwhich would mean the concrete name of the `Geolocation.latitude` field\nis `lat`.\n\n### Field paths and nested objects\n\nReferencing fields in nested data can be a chore. `sparkql` simplifies this\nwith path referencing.\n\n[For example](https://github.com/mattjw/sparkql/tree/master/examples/nested_objects/sparkql_example.py), if we have a\nschema with nested objects:\n\n```python\nclass Address(Struct):\n    post_code = String()\n    city = String()\n\n\nclass User(Struct):\n    username = String(nullable=False)\n    address = Address()\n\n\nclass Comment(Struct):\n    message = String()\n    author = User(nullable=False)\n\n\nclass Article(Struct):\n    title = String(nullable=False)\n    author = User(nullable=False)\n    comments = Array(Comment())\n```\n\nWe can use the special `PATH` property to turn a path into a\nSpark-understandable string:\n\n```python\nauthor_city_str = Article.author.address.city.PATH\n\"author.address.city\"\n```\n\n`COL` is a counterpart to `PATH` that returns a Spark `Column`\nobject for the path, allowing it to be used in all places where Spark\nrequires a column.\n\nFunction equivalents `path_str`, `path_col`, and `name` are also available.\nThis table demonstrates the equivalence of the property styles and the function\nstyles:\n\n| Property style | Function style | Result (both styles are equivalent) |\n| --- | --- | --- |\n| `Article.author.address.city.PATH` | `sparkql.path_str(Article.author.address.city)` | `\"author.address.city\"` |\n| `Article.author.address.city.COL` | `sparkql.path_col(Article.author.address.city)` | `Column` pointing to `author.address.city` |\n| `Article.author.address.city.NAME` | `sparkql.name(Article.author.address.city)` | `\"city\"` |\n\nFor paths that include an array, two approaches are provided:\n\n```python\ncomment_usernames_str = Article.comments.e.author.username.PATH\n\"comments.author.username\"\n\ncomment_usernames_str = Article.comments.author.username.PATH\n\"comments.author.username\"\n```\n\nBoth give the same result. However, the former (`e`) is more\ntype-oriented. The `e` attribute corresponds to the array's element\nfield. Although this looks strange at first, it has the advantage of\nbeing inspectable by IDEs and other tools, allowing goodness such as\nIDE auto-completion, automated refactoring, and identifying errors\nbefore runtime.\n\n### DataFrame validation\n\nStruct method `validate_data_frame` will verify if a given DataFrame's\nschema matches the Struct.\n[For example](https://github.com/mattjw/sparkql/tree/master/examples/validation/test_validation.py),\nif we have our `Article`\nstruct and a DataFrame we want to ensure adheres to the `Article`\nschema:\n\n```python\ndframe = spark_session.createDataFrame([{\"title\": \"abc\"}])\n\nclass Article(Struct):\n    title = String()\n    body = String()\n```\n\nThen we can can validate with:\n\n```python\nvalidation_result = Article.validate_data_frame(dframe)\n```\n\n`validation_result.is_valid` indicates whether the DataFrame is valid\n(`False` in this case), and `validation_result.report` is a\nhuman-readable string describing the differences:\n\n```text\nStruct schema...\n\nStructType(List(\n    StructField(title,StringType,true),\n    StructField(body,StringType,true)))\n\nDataFrame schema...\n\nStructType(List(\n    StructField(title,StringType,true)))\n\nDiff of struct -> data frame...\n\n  StructType(List(\n-     StructField(title,StringType,true)))\n+     StructField(title,StringType,true),\n+     StructField(body,StringType,true)))\n```\n\nFor convenience,\n\n```python\nArticle.validate_data_frame(dframe).raise_on_invalid()\n```\n\nwill raise a `InvalidDataFrameError` (see `sparkql.exceptions`) if the  \nDataFrame is not valid.\n\n### Creating an instance of a schema\n\n`sparkql` simplifies the process of creating an instance of a struct.\nYou might need to do this, for example, when creating test data, or\nwhen creating an object (a dict or a row) to return from a UDF.\n\nUse `Struct.make_dict(...)` to instantiate a struct as a dictionary.\nThis has the advantage that the input values will be correctly\nvalidated, and it will convert schema property names into their\nunderlying field names.\n\nFor\n[example](https://github.com/mattjw/sparkql/tree/master/examples/struct_instantiation/instantiate_as_dict.py),\ngiven some simple Structs:\n\n```python\nclass User(Struct):\n    id = Integer(name=\"user_id\", nullable=False)\n    username = String()\n\nclass Article(Struct):\n    id = Integer(name=\"article_id\", nullable=False)\n    title = String()\n    author = User()\n    text = String(name=\"body\")\n```\n\nHere are a few examples of creating dicts from `Article`:\n\n```python\nArticle.make_dict(\n    id=1001,\n    title=\"The article title\",\n    author=User.make_dict(\n        id=440,\n        username=\"user\"\n    ),\n    text=\"Lorem ipsum article text lorem ipsum.\"\n)\n\n# generates...\n{\n    \"article_id\": 1001,\n    \"author\": {\n        \"user_id\": 440,\n        \"username\": \"user\"},\n    \"body\": \"Lorem ipsum article text lorem ipsum.\",\n    \"title\": \"The article title\"\n}\n```\n\n```python\nArticle.make_dict(\n    id=1002\n)\n\n# generates...\n{\n    \"article_id\": 1002,\n    \"author\": None,\n    \"body\": None,\n    \"title\": None\n}\n```\n\nSee\n[this example](https://github.com/mattjw/sparkql/tree/master/examples/conferences_extended/conferences.py)\nfor an extended example of using `make_dict`.\n\n### Composite schemas\n\nIt is sometimes useful to be able to re-use the fields of one struct\nin another struct. `sparkql` provides a few features to enable this:\n\n- _inheritance_: A subclass inherits the fields of a base struct class.\n- _includes_: Incorporate fields from another struct.\n- _implements_: Enforce that a struct must implement the fields of\n  another struct.\n\nSee the following examples for a better explanation.\n\n#### Using inheritance\n\nFor [example](https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/inheritance.py), the following:\n\n```python\nclass BaseEvent(Struct):\n    correlation_id = String(nullable=False)\n    event_time = Timestamp(nullable=False)\n\nclass RegistrationEvent(BaseEvent):\n    user_id = String(nullable=False)\n```\n\nwill produce the following `RegistrationEvent` schema:\n\n```text\nStructType(List(\n    StructField(correlation_id,StringType,false),\n    StructField(event_time,TimestampType,false),\n    StructField(user_id,StringType,false)))\n```\n\n#### Using an `includes` declaration\n\nFor [example](https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/includes.py), the following:\n\n```python\nclass EventMetadata(Struct):\n    correlation_id = String(nullable=False)\n    event_time = Timestamp(nullable=False)\n\nclass RegistrationEvent(Struct):\n    class Meta:\n        includes = [EventMetadata]\n    user_id = String(nullable=False)\n```\n\nwill produce the `RegistrationEvent` schema:\n\n```text\nStructType(List(\n    StructField(user_id,StringType,false),\n    StructField(correlation_id,StringType,false),\n    StructField(event_time,TimestampType,false)))\n```\n\n#### Using an `implements` declaration\n\n`implements` is similar to `includes`, but does not automatically\nincorporate the fields of specified structs. Instead, it is up to\nthe implementor to ensure that the required fields are declared in\nthe struct.\n\nFailing to implement a field from an `implements` struct will result in\na `StructImplementationError` error.\n\n[For example](https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/implements.py):\n\n```\nclass LogEntryMetadata(Struct):\n    logged_at = Timestamp(nullable=False)\n\nclass PageViewLogEntry(Struct):\n    class Meta:\n        implements = [LogEntryMetadata]\n    page_id = String(nullable=False)\n\n# the above class declaration will fail with the following StructImplementationError error:\n#   Struct 'RegistrationEvent' does not implement field 'correlation_id' required by struct 'EventMetadata'\n```\n\n\n### Prettified Spark schema strings\n\nSpark's stringified schema representation isn't very user friendly, particularly for large schemas:\n\n\n```text\nStructType(List(StructField(name,StringType,false),StructField(city,StructType(List(StructField(name,StringType,false),StructField(latitude,FloatType,true),StructField(longitude,FloatType,true))),true)))\n```\n\nThe function `pretty_schema` will return something more useful:\n\n```text\nStructType(List(\n    StructField(name,StringType,false),\n    StructField(city,\n        StructType(List(\n            StructField(name,StringType,false),\n            StructField(latitude,FloatType,true),\n            StructField(longitude,FloatType,true))),\n        true)))\n```\n\n### Merge two Spark `StructType` types\n\nIt can be useful to build a composite schema from two `StructType`s. sparkql provides a\n`merge_schemas` function to do this.\n\n[For example](https://github.com/mattjw/sparkql/tree/master/examples/merge_struct_types/merge_struct_types.py):\n\n```python\nschema_a = StructType([\n    StructField(\"message\", StringType()),\n    StructField(\"author\", ArrayType(\n        StructType([\n            StructField(\"name\", StringType())\n        ])\n    ))\n])\n\nschema_b = StructType([\n    StructField(\"author\", ArrayType(\n        StructType([\n            StructField(\"address\", StringType())\n        ])\n    ))\n])\n\nmerged_schema = merge_schemas(schema_a, schema_b) \n```\n\nresults in a `merged_schema` that looks like:\n\n```text\nStructType(List(\n    StructField(message,StringType,true),\n    StructField(author,\n        ArrayType(StructType(List(\n            StructField(name,StringType,true),\n            StructField(address,StringType,true))),true),\n        true)))\n```\n\n\n## Contributing\n\nContributions are very welcome. Developers who'd like to contribute to\nthis project should refer to [CONTRIBUTING.md](./CONTRIBUTING.md).\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattjw/sparkql", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sparkql", "package_url": "https://pypi.org/project/sparkql/", "platform": "", "project_url": "https://pypi.org/project/sparkql/", "project_urls": {"Homepage": "https://github.com/mattjw/sparkql", "Repository": "https://github.com/mattjw/sparkql"}, "release_url": "https://pypi.org/project/sparkql/0.5.1/", "requires_dist": ["pyspark (>=2.4.1,<3.0.0)", "dataclasses (>=0.7.0,<0.8.0); python_version >= \"3.6\" and python_version < \"3.7\""], "requires_python": ">=3.6,<3.8", "summary": "sparkql: Apache Spark SQL DataFrame schema management for sensible humans", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sparkql \u2728</h1>\n<p><a href=\"https://badge.fury.io/py/sparkql\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed5b3e4bd6d1741465d8316f2ae6e006ede6a462/68747470733a2f2f62616467652e667572792e696f2f70792f737061726b716c2e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://github.com/mattjw/sparkql/actions\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee2850ad26f9599256f4f64938773b6abea18d98/68747470733a2f2f6769746875622e636f6d2f6d6174746a772f737061726b716c2f776f726b666c6f77732f43492f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/mattjw/sparkql\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee5f9aed5fa26b3565f1c377db996681c6f29a10/68747470733a2f2f636f6465636f762e696f2f67682f6d6174746a772f737061726b716c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Python Spark SQL DataFrame schema management for sensible humans.</p>\n<blockquote>\n<p><em>Don't sweat it... sparkql it \u2728</em></p>\n</blockquote>\n<h2>Why use sparkql</h2>\n<p><code>sparkql</code> takes the pain out of working with DataFrame schemas in PySpark.\nIt makes schema definition more Pythonic. And it's\nparticularly useful you're dealing with structured data.</p>\n<p>In plain old PySpark, you might find that you write schemas\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/conferences_comparison/plain_schema.py\" rel=\"nofollow\">like this</a>:</p>\n<pre><span class=\"n\">CITY_SCHEMA</span> <span class=\"o\">=</span> <span class=\"n\">StructType</span><span class=\"p\">()</span>\n<span class=\"n\">CITY_NAME_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">\"name\"</span>\n<span class=\"n\">CITY_SCHEMA</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"n\">CITY_NAME_FIELD</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">(),</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"n\">CITY_LAT_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">\"latitude\"</span>\n<span class=\"n\">CITY_SCHEMA</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"n\">CITY_LAT_FIELD</span><span class=\"p\">,</span> <span class=\"n\">FloatType</span><span class=\"p\">()))</span>\n<span class=\"n\">CITY_LONG_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">\"longitude\"</span>\n<span class=\"n\">CITY_SCHEMA</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"n\">CITY_LONG_FIELD</span><span class=\"p\">,</span> <span class=\"n\">FloatType</span><span class=\"p\">()))</span>\n\n<span class=\"n\">CONFERENCE_SCHEMA</span> <span class=\"o\">=</span> <span class=\"n\">StructType</span><span class=\"p\">()</span>\n<span class=\"n\">CONF_NAME_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">\"name\"</span>\n<span class=\"n\">CONFERENCE_SCHEMA</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"n\">CONF_NAME_FIELD</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">(),</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"n\">CONF_CITY_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">\"city\"</span>\n<span class=\"n\">CONFERENCE_SCHEMA</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"n\">CONF_CITY_FIELD</span><span class=\"p\">,</span> <span class=\"n\">CITY_SCHEMA</span><span class=\"p\">))</span>\n</pre>\n<p>And then plain old PySpark makes you deal with nested fields like this:</p>\n<pre><span class=\"n\">dframe</span><span class=\"o\">.</span><span class=\"n\">withColumn</span><span class=\"p\">(</span><span class=\"s2\">\"city_name\"</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">CONF_CITY_FIELD</span><span class=\"p\">][</span><span class=\"n\">CITY_NAME_FIELD</span><span class=\"p\">])</span>\n</pre>\n<p>Instead, with <code>sparkql</code>, schemas become a lot\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/conferences_comparison/sparkql_schema.py\" rel=\"nofollow\">more literate</a>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">City</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">latitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">()</span>\n    <span class=\"n\">longitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Conference</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"n\">City</span><span class=\"p\">()</span>\n</pre>\n<p>As does dealing with nested fields:</p>\n<pre><span class=\"n\">dframe</span><span class=\"o\">.</span><span class=\"n\">withColumn</span><span class=\"p\">(</span><span class=\"s2\">\"city_name\"</span><span class=\"p\">,</span> <span class=\"n\">Conference</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">COL</span><span class=\"p\">)</span>\n</pre>\n<p>Here's a summary of <code>sparkql</code>'s features.</p>\n<ul>\n<li>ORM-like class-based Spark schema definitions.</li>\n<li>Automated field naming: The attribute name of a field as it appears\nin its <code>Struct</code> is (by default) used as its field name. This name can\nbe optionally overridden.</li>\n<li>Programatically reference nested fields in your structs with the\n<code>PATH</code> and <code>COL</code> special properties. Avoid hand-constructing strings\n(or <code>Column</code>s) to reference your nested fields.</li>\n<li>Validate that a DataFrame matches a <code>sparkql</code> schema.</li>\n<li>Reuse and build composite schemas with <code>inheritance</code>, <code>includes</code>, and\n<code>implements</code>.</li>\n<li>Get a human-readable Spark schema representation with <code>pretty_schema</code>.</li>\n<li>Create an instance of a schema as a dictionary, with validation of\nthe input values.</li>\n</ul>\n<p>Read on for documentation on these features.</p>\n<h2>Defining a schema</h2>\n<p>Each Spark atomic type has a counterpart <code>sparkql</code> field:</p>\n<table>\n<thead>\n<tr>\n<th>PySpark type</th>\n<th><code>sparkql</code> field</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ByteType</code></td>\n<td><code>Byte</code></td>\n</tr>\n<tr>\n<td><code>IntegerType</code></td>\n<td><code>Integer</code></td>\n</tr>\n<tr>\n<td><code>LongType</code></td>\n<td><code>Long</code></td>\n</tr>\n<tr>\n<td><code>ShortType</code></td>\n<td><code>Short</code></td>\n</tr>\n<tr>\n<td><code>DecimalType</code></td>\n<td><code>Decimal</code></td>\n</tr>\n<tr>\n<td><code>DoubleType</code></td>\n<td><code>Double</code></td>\n</tr>\n<tr>\n<td><code>FloatType</code></td>\n<td><code>Float</code></td>\n</tr>\n<tr>\n<td><code>StringType</code></td>\n<td><code>String</code></td>\n</tr>\n<tr>\n<td><code>BinaryType</code></td>\n<td><code>Binary</code></td>\n</tr>\n<tr>\n<td><code>BooleanType</code></td>\n<td><code>Boolean</code></td>\n</tr>\n<tr>\n<td><code>DateType</code></td>\n<td><code>Date</code></td>\n</tr>\n<tr>\n<td><code>TimestampType</code></td>\n<td><code>Timestamp</code></td>\n</tr></tbody></table>\n<p><code>Array</code> (counterpart to <code>ArrayType</code> in PySpark) allows the definition\nof arrays of objects. By creating a subclass of <code>Struct</code>, we can\ndefine a custom class that will be converted to a <code>StructType</code>.</p>\n<p>For\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/arrays/arrays.py\" rel=\"nofollow\">example</a>,\ngiven the <code>sparkql</code> schema definition:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sparkql</span> <span class=\"kn\">import</span> <span class=\"n\">Struct</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Array</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">(),</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n</pre>\n<p>Then we can build the equivalent PySpark schema (a <code>StructType</code>)\nwith:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sparkql</span> <span class=\"kn\">import</span> <span class=\"n\">schema</span>\n\n<span class=\"n\">pyspark_struct</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">)</span>\n</pre>\n<p>Pretty printing the schema with the expression\n<code>sparkql.pretty_schema(pyspark_struct)</code> will give the following:</p>\n<pre>StructType(List(\n    StructField(title,StringType,false),\n    StructField(tags,\n        ArrayType(StringType,true),\n        false),\n    StructField(comments,\n        ArrayType(StringType,false),\n        true)))\n</pre>\n<h2>Features</h2>\n<p>Many examples of how to use <code>sparkql</code> can be found in\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples\" rel=\"nofollow\"><code>examples</code></a>.</p>\n<h3>Automated field naming</h3>\n<p>By default, field names are inferred from the attribute name in the\nstruct they are declared.</p>\n<p>For example, given the struct</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Geolocation</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">latitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">()</span>\n    <span class=\"n\">longitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">()</span>\n</pre>\n<p>the concrete name of the <code>Geolocation.latitude</code> field is <code>latitude</code>.</p>\n<p>Names also be overridden by explicitly specifying the field name as an\nargument to the field</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Geolocation</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">latitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lat\"</span><span class=\"p\">)</span>\n    <span class=\"n\">longitude</span> <span class=\"o\">=</span> <span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lon\"</span><span class=\"p\">)</span>\n</pre>\n<p>which would mean the concrete name of the <code>Geolocation.latitude</code> field\nis <code>lat</code>.</p>\n<h3>Field paths and nested objects</h3>\n<p>Referencing fields in nested data can be a chore. <code>sparkql</code> simplifies this\nwith path referencing.</p>\n<p><a href=\"https://github.com/mattjw/sparkql/tree/master/examples/nested_objects/sparkql_example.py\" rel=\"nofollow\">For example</a>, if we have a\nschema with nested objects:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Address</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">post_code</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">Address</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">Comment</span><span class=\"p\">())</span>\n</pre>\n<p>We can use the special <code>PATH</code> property to turn a path into a\nSpark-understandable string:</p>\n<pre><span class=\"n\">author_city_str</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"o\">.</span><span class=\"n\">PATH</span>\n<span class=\"s2\">\"author.address.city\"</span>\n</pre>\n<p><code>COL</code> is a counterpart to <code>PATH</code> that returns a Spark <code>Column</code>\nobject for the path, allowing it to be used in all places where Spark\nrequires a column.</p>\n<p>Function equivalents <code>path_str</code>, <code>path_col</code>, and <code>name</code> are also available.\nThis table demonstrates the equivalence of the property styles and the function\nstyles:</p>\n<table>\n<thead>\n<tr>\n<th>Property style</th>\n<th>Function style</th>\n<th>Result (both styles are equivalent)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Article.author.address.city.PATH</code></td>\n<td><code>sparkql.path_str(Article.author.address.city)</code></td>\n<td><code>\"author.address.city\"</code></td>\n</tr>\n<tr>\n<td><code>Article.author.address.city.COL</code></td>\n<td><code>sparkql.path_col(Article.author.address.city)</code></td>\n<td><code>Column</code> pointing to <code>author.address.city</code></td>\n</tr>\n<tr>\n<td><code>Article.author.address.city.NAME</code></td>\n<td><code>sparkql.name(Article.author.address.city)</code></td>\n<td><code>\"city\"</code></td>\n</tr></tbody></table>\n<p>For paths that include an array, two approaches are provided:</p>\n<pre><span class=\"n\">comment_usernames_str</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"o\">.</span><span class=\"n\">PATH</span>\n<span class=\"s2\">\"comments.author.username\"</span>\n\n<span class=\"n\">comment_usernames_str</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"o\">.</span><span class=\"n\">PATH</span>\n<span class=\"s2\">\"comments.author.username\"</span>\n</pre>\n<p>Both give the same result. However, the former (<code>e</code>) is more\ntype-oriented. The <code>e</code> attribute corresponds to the array's element\nfield. Although this looks strange at first, it has the advantage of\nbeing inspectable by IDEs and other tools, allowing goodness such as\nIDE auto-completion, automated refactoring, and identifying errors\nbefore runtime.</p>\n<h3>DataFrame validation</h3>\n<p>Struct method <code>validate_data_frame</code> will verify if a given DataFrame's\nschema matches the Struct.\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/validation/test_validation.py\" rel=\"nofollow\">For example</a>,\nif we have our <code>Article</code>\nstruct and a DataFrame we want to ensure adheres to the <code>Article</code>\nschema:</p>\n<pre><span class=\"n\">dframe</span> <span class=\"o\">=</span> <span class=\"n\">spark_session</span><span class=\"o\">.</span><span class=\"n\">createDataFrame</span><span class=\"p\">([{</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">}])</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n</pre>\n<p>Then we can can validate with:</p>\n<pre><span class=\"n\">validation_result</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">validate_data_frame</span><span class=\"p\">(</span><span class=\"n\">dframe</span><span class=\"p\">)</span>\n</pre>\n<p><code>validation_result.is_valid</code> indicates whether the DataFrame is valid\n(<code>False</code> in this case), and <code>validation_result.report</code> is a\nhuman-readable string describing the differences:</p>\n<pre>Struct schema...\n\nStructType(List(\n    StructField(title,StringType,true),\n    StructField(body,StringType,true)))\n\nDataFrame schema...\n\nStructType(List(\n    StructField(title,StringType,true)))\n\nDiff of struct -&gt; data frame...\n\n  StructType(List(\n-     StructField(title,StringType,true)))\n+     StructField(title,StringType,true),\n+     StructField(body,StringType,true)))\n</pre>\n<p>For convenience,</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">validate_data_frame</span><span class=\"p\">(</span><span class=\"n\">dframe</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">raise_on_invalid</span><span class=\"p\">()</span>\n</pre>\n<p>will raise a <code>InvalidDataFrameError</code> (see <code>sparkql.exceptions</code>) if the<br>\nDataFrame is not valid.</p>\n<h3>Creating an instance of a schema</h3>\n<p><code>sparkql</code> simplifies the process of creating an instance of a struct.\nYou might need to do this, for example, when creating test data, or\nwhen creating an object (a dict or a row) to return from a UDF.</p>\n<p>Use <code>Struct.make_dict(...)</code> to instantiate a struct as a dictionary.\nThis has the advantage that the input values will be correctly\nvalidated, and it will convert schema property names into their\nunderlying field names.</p>\n<p>For\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/struct_instantiation/instantiate_as_dict.py\" rel=\"nofollow\">example</a>,\ngiven some simple Structs:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"article_id\"</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"body\"</span><span class=\"p\">)</span>\n</pre>\n<p>Here are a few examples of creating dicts from <code>Article</code>:</p>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">make_dict</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1001</span><span class=\"p\">,</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"The article title\"</span><span class=\"p\">,</span>\n    <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">make_dict</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">440</span><span class=\"p\">,</span>\n        <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"user\"</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Lorem ipsum article text lorem ipsum.\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># generates...</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"article_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1001</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"user_id\"</span><span class=\"p\">:</span> <span class=\"mi\">440</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"user\"</span><span class=\"p\">},</span>\n    <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lorem ipsum article text lorem ipsum.\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The article title\"</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">make_dict</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1002</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># generates...</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"article_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1002</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"p\">}</span>\n</pre>\n<p>See\n<a href=\"https://github.com/mattjw/sparkql/tree/master/examples/conferences_extended/conferences.py\" rel=\"nofollow\">this example</a>\nfor an extended example of using <code>make_dict</code>.</p>\n<h3>Composite schemas</h3>\n<p>It is sometimes useful to be able to re-use the fields of one struct\nin another struct. <code>sparkql</code> provides a few features to enable this:</p>\n<ul>\n<li><em>inheritance</em>: A subclass inherits the fields of a base struct class.</li>\n<li><em>includes</em>: Incorporate fields from another struct.</li>\n<li><em>implements</em>: Enforce that a struct must implement the fields of\nanother struct.</li>\n</ul>\n<p>See the following examples for a better explanation.</p>\n<h4>Using inheritance</h4>\n<p>For <a href=\"https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/inheritance.py\" rel=\"nofollow\">example</a>, the following:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseEvent</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">correlation_id</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">event_time</span> <span class=\"o\">=</span> <span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RegistrationEvent</span><span class=\"p\">(</span><span class=\"n\">BaseEvent</span><span class=\"p\">):</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>will produce the following <code>RegistrationEvent</code> schema:</p>\n<pre>StructType(List(\n    StructField(correlation_id,StringType,false),\n    StructField(event_time,TimestampType,false),\n    StructField(user_id,StringType,false)))\n</pre>\n<h4>Using an <code>includes</code> declaration</h4>\n<p>For <a href=\"https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/includes.py\" rel=\"nofollow\">example</a>, the following:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EventMetadata</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"n\">correlation_id</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">event_time</span> <span class=\"o\">=</span> <span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RegistrationEvent</span><span class=\"p\">(</span><span class=\"n\">Struct</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">includes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">EventMetadata</span><span class=\"p\">]</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>will produce the <code>RegistrationEvent</code> schema:</p>\n<pre>StructType(List(\n    StructField(user_id,StringType,false),\n    StructField(correlation_id,StringType,false),\n    StructField(event_time,TimestampType,false)))\n</pre>\n<h4>Using an <code>implements</code> declaration</h4>\n<p><code>implements</code> is similar to <code>includes</code>, but does not automatically\nincorporate the fields of specified structs. Instead, it is up to\nthe implementor to ensure that the required fields are declared in\nthe struct.</p>\n<p>Failing to implement a field from an <code>implements</code> struct will result in\na <code>StructImplementationError</code> error.</p>\n<p><a href=\"https://github.com/mattjw/sparkql/tree/master/examples/composite_schemas/implements.py\" rel=\"nofollow\">For example</a>:</p>\n<pre><code>class LogEntryMetadata(Struct):\n    logged_at = Timestamp(nullable=False)\n\nclass PageViewLogEntry(Struct):\n    class Meta:\n        implements = [LogEntryMetadata]\n    page_id = String(nullable=False)\n\n# the above class declaration will fail with the following StructImplementationError error:\n#   Struct 'RegistrationEvent' does not implement field 'correlation_id' required by struct 'EventMetadata'\n</code></pre>\n<h3>Prettified Spark schema strings</h3>\n<p>Spark's stringified schema representation isn't very user friendly, particularly for large schemas:</p>\n<pre>StructType(List(StructField(name,StringType,false),StructField(city,StructType(List(StructField(name,StringType,false),StructField(latitude,FloatType,true),StructField(longitude,FloatType,true))),true)))\n</pre>\n<p>The function <code>pretty_schema</code> will return something more useful:</p>\n<pre>StructType(List(\n    StructField(name,StringType,false),\n    StructField(city,\n        StructType(List(\n            StructField(name,StringType,false),\n            StructField(latitude,FloatType,true),\n            StructField(longitude,FloatType,true))),\n        true)))\n</pre>\n<h3>Merge two Spark <code>StructType</code> types</h3>\n<p>It can be useful to build a composite schema from two <code>StructType</code>s. sparkql provides a\n<code>merge_schemas</code> function to do this.</p>\n<p><a href=\"https://github.com/mattjw/sparkql/tree/master/examples/merge_struct_types/merge_struct_types.py\" rel=\"nofollow\">For example</a>:</p>\n<pre><span class=\"n\">schema_a</span> <span class=\"o\">=</span> <span class=\"n\">StructType</span><span class=\"p\">([</span>\n    <span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">()),</span>\n    <span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"s2\">\"author\"</span><span class=\"p\">,</span> <span class=\"n\">ArrayType</span><span class=\"p\">(</span>\n        <span class=\"n\">StructType</span><span class=\"p\">([</span>\n            <span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">())</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">))</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">schema_b</span> <span class=\"o\">=</span> <span class=\"n\">StructType</span><span class=\"p\">([</span>\n    <span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"s2\">\"author\"</span><span class=\"p\">,</span> <span class=\"n\">ArrayType</span><span class=\"p\">(</span>\n        <span class=\"n\">StructType</span><span class=\"p\">([</span>\n            <span class=\"n\">StructField</span><span class=\"p\">(</span><span class=\"s2\">\"address\"</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">())</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">))</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">merged_schema</span> <span class=\"o\">=</span> <span class=\"n\">merge_schemas</span><span class=\"p\">(</span><span class=\"n\">schema_a</span><span class=\"p\">,</span> <span class=\"n\">schema_b</span><span class=\"p\">)</span> \n</pre>\n<p>results in a <code>merged_schema</code> that looks like:</p>\n<pre>StructType(List(\n    StructField(message,StringType,true),\n    StructField(author,\n        ArrayType(StructType(List(\n            StructField(name,StringType,true),\n            StructField(address,StringType,true))),true),\n        true)))\n</pre>\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Developers who'd like to contribute to\nthis project should refer to <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a>.</p>\n\n          </div>"}, "last_serial": 7009458, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c59933ba97a587e77de817de19cf23c1", "sha256": "9b81a1d85c9590288b0aa6a5030d93305c62bc59a76ab3d35080d35d1fda5d13"}, "downloads": -1, "filename": "sparkql-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c59933ba97a587e77de817de19cf23c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8,<4.0.0", "size": 9849, "upload_time": "2020-01-12T23:19:49", "upload_time_iso_8601": "2020-01-12T23:19:49.511001Z", "url": "https://files.pythonhosted.org/packages/8e/59/5b98914efc7de3cdca88e3fd3761067a84ebc43927e10080ee7d53ff0c9f/sparkql-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c00ed174b83b40e6ee8063899e92354b", "sha256": "7cd9c5e163884e751883f9e102b1256a5ea6ecce5b6a5123738318386cc971ba"}, "downloads": -1, "filename": "sparkql-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c00ed174b83b40e6ee8063899e92354b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8,<4.0.0", "size": 6998, "upload_time": "2020-01-12T23:19:51", "upload_time_iso_8601": "2020-01-12T23:19:51.826494Z", "url": "https://files.pythonhosted.org/packages/6a/1f/a8747196aab3224fcf51d25695df5e5168d53ec9f48923a36a4a0a42190d/sparkql-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f3060241c34c66df6d87cc6632b0c84f", "sha256": "2ec019ce42e2235d0d85eb951f08942e212e82beafceddafa1030b21e8dd6a7d"}, "downloads": -1, "filename": "sparkql-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f3060241c34c66df6d87cc6632b0c84f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8,<3.7.0", "size": 9840, "upload_time": "2020-01-13T00:04:35", "upload_time_iso_8601": "2020-01-13T00:04:35.618054Z", "url": "https://files.pythonhosted.org/packages/8a/75/82a252406c2488593566cfd22719fa377472498c8e5effc2da8d6bfd8d3b/sparkql-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e1532062e7e8f4a1e5e9cc64e4a7fb6", "sha256": "a91c48b0e3e7f53ee95f5ca10e785f42db8f159097eab8a671a53f813815c60f"}, "downloads": -1, "filename": "sparkql-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3e1532062e7e8f4a1e5e9cc64e4a7fb6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8,<3.7.0", "size": 6903, "upload_time": "2020-01-13T00:04:36", "upload_time_iso_8601": "2020-01-13T00:04:36.785651Z", "url": "https://files.pythonhosted.org/packages/a0/74/dce008bb4239dd548bacf2899a314916b70af8d2fd990bc0d278a28724d8/sparkql-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e0eb691b8024cd0c891fedbc3660d2ef", "sha256": "843a1ffaad9befe6408bd0a78b587df84b6809e1ebe304b40d670937e009ef50"}, "downloads": -1, "filename": "sparkql-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e0eb691b8024cd0c891fedbc3660d2ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8,<3.7.0", "size": 11756, "upload_time": "2020-01-20T01:39:11", "upload_time_iso_8601": "2020-01-20T01:39:11.142105Z", "url": "https://files.pythonhosted.org/packages/ef/af/ae4580e8a6ad3903aab91c850be1223cdacc9f095df5f2336a61383b9d03/sparkql-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "043fcb7af45560e6547f0a29f7a61cc5", "sha256": "d179dcacd08f21c412d40376b85c804c743556a6cedc8ec50c7b395d76261939"}, "downloads": -1, "filename": "sparkql-0.1.2.tar.gz", "has_sig": false, "md5_digest": "043fcb7af45560e6547f0a29f7a61cc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8,<3.7.0", "size": 10042, "upload_time": "2020-01-20T01:39:12", "upload_time_iso_8601": "2020-01-20T01:39:12.732326Z", "url": "https://files.pythonhosted.org/packages/83/42/7fbe5d63b333d27bbfcfee24f56138f5f703e7732dbcc7325966278b07c6/sparkql-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "4d28b0883dfd16841f048057816dfb1d", "sha256": "065332a35114abcb81f894ac05976b7381356b62f78b74357bbf8b5940fe9fb5"}, "downloads": -1, "filename": "sparkql-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4d28b0883dfd16841f048057816dfb1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8,<3.7.0", "size": 11868, "upload_time": "2020-01-26T23:07:39", "upload_time_iso_8601": "2020-01-26T23:07:39.398746Z", "url": "https://files.pythonhosted.org/packages/33/27/ff9fb041af501b69ec34d04603c14c4e73945f5559b59092e914deb47f0d/sparkql-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "775df3e5fb3240542ce3de03d45ce04e", "sha256": "28b273191a70821fba341b6b8d98878ab3e89e9bc770b3e2fe4143ffd4d5275b"}, "downloads": -1, "filename": "sparkql-0.1.3.tar.gz", "has_sig": false, "md5_digest": "775df3e5fb3240542ce3de03d45ce04e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8,<3.7.0", "size": 10010, "upload_time": "2020-01-26T23:07:40", "upload_time_iso_8601": "2020-01-26T23:07:40.633002Z", "url": "https://files.pythonhosted.org/packages/9e/0d/2789bd5c18eb1d7c8bb467489ad91e966dca666d757ac7ab1f6788e0a5bd/sparkql-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c84832148782f9558452eb7561889e0e", "sha256": "aeed2bf7658d0ff79356f3315e1a31e108913c4194f093fef519e98956507203"}, "downloads": -1, "filename": "sparkql-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c84832148782f9558452eb7561889e0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.8,<3.7.0", "size": 12205, "upload_time": "2020-01-27T23:03:20", "upload_time_iso_8601": "2020-01-27T23:03:20.889995Z", "url": "https://files.pythonhosted.org/packages/9f/ff/12844fc7e188b5d1332f11701299fcc627510c6f93bd7c44e1bfe21eda53/sparkql-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5054c33d4095949e44910758b6ba73f3", "sha256": "5076ec6d9c7bdef02bc92389564f0c37c83dd6f4370f822be3ba8abf66fd039f"}, "downloads": -1, "filename": "sparkql-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5054c33d4095949e44910758b6ba73f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.8,<3.7.0", "size": 10305, "upload_time": "2020-01-27T23:03:21", "upload_time_iso_8601": "2020-01-27T23:03:21.746470Z", "url": "https://files.pythonhosted.org/packages/95/22/a477670ca84205ac192890696b6b1b5c1ca2e60906645bc3a44a9d676dca/sparkql-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3438d4a80e5fcbf84e0215857fb1de45", "sha256": "116802fb06fd317878424f4a3f94727e63a1f05d5000bc651ded2b2b4de0a6e7"}, "downloads": -1, "filename": "sparkql-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3438d4a80e5fcbf84e0215857fb1de45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 15739, "upload_time": "2020-02-08T00:14:03", "upload_time_iso_8601": "2020-02-08T00:14:03.692672Z", "url": "https://files.pythonhosted.org/packages/08/6b/963556f4e7c76dc7f379a59968b4a367a4cee212d884610a585bc2cc201f/sparkql-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb4cfca4a350c0f8104eccba7dee6167", "sha256": "0e5d32fd497d1f7dfa7c5d7b18f98559733b37ee8c7eb7d0ee19400fb304c435"}, "downloads": -1, "filename": "sparkql-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fb4cfca4a350c0f8104eccba7dee6167", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 15145, "upload_time": "2020-02-08T00:14:04", "upload_time_iso_8601": "2020-02-08T00:14:04.590142Z", "url": "https://files.pythonhosted.org/packages/bc/92/9dd0d2f6b6454e267b961a2884cf93e8453eabdea800c1ae06f72c174f8c/sparkql-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a59f55a7cf0a9d503ffe339d5ee78759", "sha256": "58418764f57237a7c0e42623b8c722e28504e5e6f183954bcb20899669a6dce1"}, "downloads": -1, "filename": "sparkql-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a59f55a7cf0a9d503ffe339d5ee78759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 16858, "upload_time": "2020-02-09T23:04:27", "upload_time_iso_8601": "2020-02-09T23:04:27.781539Z", "url": "https://files.pythonhosted.org/packages/85/5b/72188a85996d50c054b9d9d8b2d674066b89a022a6d4c645c1406da0e05b/sparkql-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92dea631df51b434129d67350c0a8131", "sha256": "065c626b36e127e016c0942dabbeb03d2b12245287135caea7c94acd54ddb7e4"}, "downloads": -1, "filename": "sparkql-0.3.0.tar.gz", "has_sig": false, "md5_digest": "92dea631df51b434129d67350c0a8131", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 16775, "upload_time": "2020-02-09T23:04:29", "upload_time_iso_8601": "2020-02-09T23:04:29.095611Z", "url": "https://files.pythonhosted.org/packages/00/7e/1ad6e0e5cdd4f27ec62cc590ce5063674d538e76ae48f2c9e4c4f1c789ca/sparkql-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e8fdaf633b7a6f3b9719b393180a54c3", "sha256": "4cbbafc0d725cad2c155cd0c20539856e997b41a317d02c1360a34a20236ef74"}, "downloads": -1, "filename": "sparkql-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e8fdaf633b7a6f3b9719b393180a54c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 21395, "upload_time": "2020-03-09T15:19:48", "upload_time_iso_8601": "2020-03-09T15:19:48.405545Z", "url": "https://files.pythonhosted.org/packages/48/5a/1cbfe09d700511c543528ca87a2e2c0255e72d55e3732d1a5f513e5f14f1/sparkql-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bd81a82bfa68adb610d3220ca54ef7c", "sha256": "110beb46cffe777707fcad195f7d5b46fed788aab837f804433ba48fdc3a9c72"}, "downloads": -1, "filename": "sparkql-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1bd81a82bfa68adb610d3220ca54ef7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 22700, "upload_time": "2020-03-09T15:19:49", "upload_time_iso_8601": "2020-03-09T15:19:49.724393Z", "url": "https://files.pythonhosted.org/packages/a9/aa/25f26694814820f8e008401dcad6097a70f3c4a5f3bd73e7b6986d27a157/sparkql-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4bf30243494224975ec3cf28a05edd0f", "sha256": "9ed9f82ba59737931a639301adb22dc452abf6adb53d3676d1aa3f2118c941fc"}, "downloads": -1, "filename": "sparkql-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4bf30243494224975ec3cf28a05edd0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 21385, "upload_time": "2020-03-09T15:55:48", "upload_time_iso_8601": "2020-03-09T15:55:48.484466Z", "url": "https://files.pythonhosted.org/packages/65/fa/88cc9acd77a628f47108f8f17de049a564831bed3af02d04f94d55b6c573/sparkql-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1de94bfede5a31b6dc5db2a6394312d", "sha256": "6066dbbf45e99f533309f6e539e261188f1ae5d4c2dd749b126e703381e18ffe"}, "downloads": -1, "filename": "sparkql-0.4.1.tar.gz", "has_sig": false, "md5_digest": "e1de94bfede5a31b6dc5db2a6394312d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 22687, "upload_time": "2020-03-09T15:55:49", "upload_time_iso_8601": "2020-03-09T15:55:49.810053Z", "url": "https://files.pythonhosted.org/packages/11/18/4c40378cdbe39d55f215ac136df79c056cf221ace512700b35c9da04e76a/sparkql-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "eb495b9f7c43e3e6570f437fb5572e50", "sha256": "cc6faf838bf30ebdfcd5e4ae7ab1dbc2da7f17d6955f57ca37b2990f88901444"}, "downloads": -1, "filename": "sparkql-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "eb495b9f7c43e3e6570f437fb5572e50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 22088, "upload_time": "2020-03-11T15:19:47", "upload_time_iso_8601": "2020-03-11T15:19:47.216902Z", "url": "https://files.pythonhosted.org/packages/43/2b/31886adc096734a75db9f1211a6093c72f9eeb37743f3105721ef650fcbd/sparkql-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf99a711b4a46856407d4fc96d0193cf", "sha256": "5842bae46714cca447725401c46de9780dd997d8e2012ea5ab8c5e58d152645b"}, "downloads": -1, "filename": "sparkql-0.4.2.tar.gz", "has_sig": false, "md5_digest": "bf99a711b4a46856407d4fc96d0193cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 23802, "upload_time": "2020-03-11T15:19:48", "upload_time_iso_8601": "2020-03-11T15:19:48.529693Z", "url": "https://files.pythonhosted.org/packages/9b/af/607abd48a7b0d465beac29b727a24f353a624f4a1a28f26984fa18c9dcd6/sparkql-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "e0548e8604f1a0f5b995a25bb93a32af", "sha256": "04169ea0a0d06ae78726861f78a5b44759d71fe8070309201822436a3b1b419a"}, "downloads": -1, "filename": "sparkql-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e0548e8604f1a0f5b995a25bb93a32af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 22495, "upload_time": "2020-03-15T19:14:09", "upload_time_iso_8601": "2020-03-15T19:14:09.291087Z", "url": "https://files.pythonhosted.org/packages/d8/55/53cd564afffe63b4d7c3fe43ee766f0ffa492712760047fc11e54c541c87/sparkql-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96799089e594a4023394d493d807680f", "sha256": "b7caf6faffa53193c8ddf94e20744a8997cc4ba970e39d50fa00c05032dc3313"}, "downloads": -1, "filename": "sparkql-0.4.3.tar.gz", "has_sig": false, "md5_digest": "96799089e594a4023394d493d807680f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 24037, "upload_time": "2020-03-15T19:14:10", "upload_time_iso_8601": "2020-03-15T19:14:10.630822Z", "url": "https://files.pythonhosted.org/packages/f7/48/ed4c1da7d655449233a08926be1c3b595f7eb2391cba15a5ba9f91dad60e/sparkql-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "705b9949c8b9742ecaf9fa734d50c964", "sha256": "0da4b71b765b96cf4c23b17cd940a90171b65d6faf12f50608f0049bb543f6ab"}, "downloads": -1, "filename": "sparkql-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "705b9949c8b9742ecaf9fa734d50c964", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 22691, "upload_time": "2020-04-02T22:23:03", "upload_time_iso_8601": "2020-04-02T22:23:03.032982Z", "url": "https://files.pythonhosted.org/packages/e8/28/e95420693d4b5eccbd22a6f5abf5104af6d2281d660cd409f272a5a36135/sparkql-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3941297c733e4c52041f11a4b9d76459", "sha256": "ac71560ae9f925eac987e411013f55339887442ec400424e98e0ffe782cb9869"}, "downloads": -1, "filename": "sparkql-0.4.4.tar.gz", "has_sig": false, "md5_digest": "3941297c733e4c52041f11a4b9d76459", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 24194, "upload_time": "2020-04-02T22:23:04", "upload_time_iso_8601": "2020-04-02T22:23:04.366294Z", "url": "https://files.pythonhosted.org/packages/74/04/562d2d7d8a8ccdf621410036f48294ffc40fdeb10ee520b41b59657ad5dd/sparkql-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "38a6db2b4143c052cafd5f5d7594091f", "sha256": "2db301b2c5c063956095d25864e44df011027c54826a6d308b4967b79b0fe588"}, "downloads": -1, "filename": "sparkql-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "38a6db2b4143c052cafd5f5d7594091f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 22780, "upload_time": "2020-04-07T10:23:04", "upload_time_iso_8601": "2020-04-07T10:23:04.760328Z", "url": "https://files.pythonhosted.org/packages/18/c3/bb01bd08a74cd25f3f15c90f886f70ceb7e5a51bb32cc661f8ebb48acf74/sparkql-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cec55e9dae1dd8a2dec289ebea371d9", "sha256": "e5e913798b8bb0f61d0f01ff454052e4a28a4078965c4555d4353df917db5ba3"}, "downloads": -1, "filename": "sparkql-0.4.5.tar.gz", "has_sig": false, "md5_digest": "2cec55e9dae1dd8a2dec289ebea371d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 24277, "upload_time": "2020-04-07T10:23:06", "upload_time_iso_8601": "2020-04-07T10:23:06.015636Z", "url": "https://files.pythonhosted.org/packages/34/07/ce48b26ab52e2cc677b0588af44b2131c502b3a3132e396e481c38d0bbed/sparkql-0.4.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "bf4bd391a166320616059941c1a8f5e6", "sha256": "8da7f6522f2db88ee2db43f8270fb472d360cff8c8b14b817e62313daebc990d"}, "downloads": -1, "filename": "sparkql-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bf4bd391a166320616059941c1a8f5e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 24906, "upload_time": "2020-04-12T22:38:09", "upload_time_iso_8601": "2020-04-12T22:38:09.676204Z", "url": "https://files.pythonhosted.org/packages/9a/70/91116012e084bcc22a874f9501bf8b8162d57116c6913771028c00b767ba/sparkql-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "245f52f17050a92ab1463c879b7b2725", "sha256": "3b2d3774c04de1dcaa4a36a7e6bb79f77975dbffaf6538d2915da8f1fe2694f6"}, "downloads": -1, "filename": "sparkql-0.5.0.tar.gz", "has_sig": false, "md5_digest": "245f52f17050a92ab1463c879b7b2725", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 26502, "upload_time": "2020-04-12T22:38:10", "upload_time_iso_8601": "2020-04-12T22:38:10.698836Z", "url": "https://files.pythonhosted.org/packages/93/22/01e0ce7774207574e7ca01ce50c8afbd4b88c146437e1de8b28eb01b12b8/sparkql-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "2e8234cc618ca90966ec9680facfb95c", "sha256": "bdb86d5f482ff340edbb2e5d3148a90124234e81ef3c662c261bf083fafb0341"}, "downloads": -1, "filename": "sparkql-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2e8234cc618ca90966ec9680facfb95c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 25081, "upload_time": "2020-04-13T11:52:49", "upload_time_iso_8601": "2020-04-13T11:52:49.553546Z", "url": "https://files.pythonhosted.org/packages/c7/58/6bdc2a98dce20c2e61b850366deecd8f3f4c21091f879379141547d90024/sparkql-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c750b4bd764da014c86359d44470abba", "sha256": "e19e4ddb1b33e603d5a7a1cfc24007a913968fe9af7ac34534d28c6458108525"}, "downloads": -1, "filename": "sparkql-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c750b4bd764da014c86359d44470abba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 26692, "upload_time": "2020-04-13T11:52:50", "upload_time_iso_8601": "2020-04-13T11:52:50.501070Z", "url": "https://files.pythonhosted.org/packages/0f/18/4faec8f30cacf1166f342ddd4d290098f5513f484f206f5b13f384cb7890/sparkql-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e8234cc618ca90966ec9680facfb95c", "sha256": "bdb86d5f482ff340edbb2e5d3148a90124234e81ef3c662c261bf083fafb0341"}, "downloads": -1, "filename": "sparkql-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2e8234cc618ca90966ec9680facfb95c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.8", "size": 25081, "upload_time": "2020-04-13T11:52:49", "upload_time_iso_8601": "2020-04-13T11:52:49.553546Z", "url": "https://files.pythonhosted.org/packages/c7/58/6bdc2a98dce20c2e61b850366deecd8f3f4c21091f879379141547d90024/sparkql-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c750b4bd764da014c86359d44470abba", "sha256": "e19e4ddb1b33e603d5a7a1cfc24007a913968fe9af7ac34534d28c6458108525"}, "downloads": -1, "filename": "sparkql-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c750b4bd764da014c86359d44470abba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.8", "size": 26692, "upload_time": "2020-04-13T11:52:50", "upload_time_iso_8601": "2020-04-13T11:52:50.501070Z", "url": "https://files.pythonhosted.org/packages/0f/18/4faec8f30cacf1166f342ddd4d290098f5513f484f206f5b13f384cb7890/sparkql-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:53 2020"}