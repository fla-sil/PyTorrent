{"info": {"author": "Facebook AI Research", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "<p align=\"center\"><img width=\"70%\" src=\"https://raw.githubusercontent.com/facebookresearch/CrypTen/master/docs/_static/img/CrypTen_Identity_Horizontal_Lockup_01_FullColor.png\" alt=\"CrypTen logo\" /></p>\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/facebookresearch/CrypTen/blob/master/LICENSE) [![CircleCI](https://circleci.com/gh/facebookresearch/CrypTen.svg?style=shield)](https://circleci.com/gh/facebookresearch/CrypTen/tree/master) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/facebookresearch/CrypTen/blob/master/CONTRIBUTING.md)\n\n--------------------------------------------------------------------------------\n\nCrypTen is a framework for Privacy Preserving Machine Learning built on PyTorch.\nIts goal is to make secure computing techniques accessible to Machine Learning practitioners.\nIt currently implements [Secure Multiparty Computation](https://en.wikipedia.org/wiki/Secure_multi-party_computation)\nas its secure computing backend and offers three main benefits to ML researchers:\n\n1. It is machine learning first. The framework presents the protocols via a `CrypTensor`\n   object that looks and feels exactly like a PyTorch `Tensor`. This allows the user to use\n   automatic differentiation and neural network modules akin to those in PyTorch.\n\n2. CrypTen is library-based. It implements a tensor library just as PyTorch does.\n   This makes it easier for practitioners to debug, experiment on, and explore ML models.\n\n3. The framework is built with real-world challenges in mind. CrypTen does not scale back or\n   oversimplify the implementation of the secure protocols.\n\nHere is a bit of CrypTen code that encrypts and decrypts tensors and adds them\n\n```python\nimport torch\nimport crypten\n\ncrypten.init()\n\nx = torch.tensor([1.0, 2.0, 3.0])\nx_enc = crypten.cryptensor(x) # encrypt\n\nx_dec = x_enc.get_plain_text() # decrypt\n\ny_enc = crypten.cryptensor([2.0, 3.0, 4.0])\nsum_xy = x_enc + y_enc # add encrypted tensors\nsum_xy_dec = sum_xy.get_plain_text() # decrypt sum\n```\n\nIt is currently not production ready and its main use is as a research framework.\n\n## Installing CrypTen\n\nCrypTen currently runs on Linux and Mac with Python >= 3.7.\nWindows is not supported. We also do not currently support computation on GPUs.\n\n\n_For Linux or Mac_\n```bash\npip install crypten\n```\n\nIf you want to run the examples in the `examples` directory, you should also do the following\n```bash\npip install -r requirements.examples.txt\n```\n\n## Examples\n\nWe provide examples covering a range of models in the `examples` directory\n\n1. The linear SVM example, `mpc_linear_svm`, generates random data and trains a\n  SVM classifier on encrypted data.\n2. The LeNet example, `mpc_cifar`, trains an adaptation of LeNet on CIFAR in\n  cleartext and encrypts the model and data for inference.\n3. The TFE benchmark example, `tfe_benchmarks`, trains three different network\n  architectures on MNIST in cleartext, and encrypts the trained model and data\n  for inference.\n4. The bandits example, `bandits`, trains a contextual bandits model on\n  encrypted data (MNIST).\n5. The imagenet example, `mpc_imagenet`, performs inference on pretrained\n  models from `torchvision`.\n\nFor examples that train in cleartext, we also provide pre-trained models in\ncleartext in the `model` subdirectory of each example subdirectory.\n\nYou can check all example specific command line options by doing the following;\nshown here for `tfe_benchmarks`:\n\n```bash\n    $ python3 examples/tfe_benchmarks/launcher.py --help\n```\n\n## How CrypTen works\n\nWe have a set of tutorials in the `tutorials` directory to show how\nCrypTen works. These are presented as Jupyter notebooks so please install\nthe following in your conda environment\n\n```bash\nconda install ipython jupyter\npip install -r requirements.examples.txt\n```\n\n1. `Introduction.ipynb` - an introduction to Secure Multiparty Compute; CrypTen's\n   underlying secure computing protocol; use cases we are trying to solve and the\n   threat model we assume.\n2. `Tutorial_1_Basics_of_CrypTen_Tensors.ipynb` - introduces `CrypTensor`, CrypTen's\n   encrypted tensor object, and shows how to use it to do various operations on\n   this object.\n3. `Tutorial_2_Inside_CrypTensors.ipynb` \u2013 delves deeper into `CrypTensor` to show\n   the inner workings; specifically how `CrypTensor` uses `MPCTensor` for its\n   backend and the two different kind of _sharings_, arithmetic and binary, are\n   used for two different kind of functions. It also shows CrypTen's\n   [MPI](https://en.wikipedia.org/wiki/Message_Passing_Interface)-inspired\n   programming model.\n4. `Tutorial_3_Introduction_to_Access_Control.ipynb` - shows how to train a linear\n   model using CrypTen and shows various scenarios of data labeling, feature\n   aggregation, dataset augmentation and model hiding where this is applicable.\n5. `Tutorial_4_Classification_with_Encrypted_Neural_Networks.ipynb` \u2013 shows how\n   CrypTen can load a pre-trained PyTorch model, encrypt it and then do inference\n   on encrypted data.\n6. `Tutorial_5_Under_the_hood_of_Encrypted_Networks.ipynb` - examines how CrypTen\n   loads PyTorch models, how they are encrypted and how data moves through a multilayer\n   network.\n7. `Tutorial_6_CrypTen_on_AWS_instances.ipynb` - shows how to use `scrips/aws_launcher.py`\n   to launch our examples on AWS. It can also work with your code written in CrypTen.\n8. `Tutorial_7_Training_an_Encrypted_Neural_Network.ipynb` - introduces `AutogradCrypTensor`,\n   a wrapper that adds automatic differentiation functionality to `CrypTensor`. This\n   allows you to train neural networks in CrypTen. We expect to move this functionality\n   into the `CrypTensor` object in a future release.\n\n\n## Documentation\nCrypTen is documented [here](https://crypten.readthedocs.io/en/latest/)\n\n## Join the CrypTen community\nPlease contact [us](mailto:ssengupta@fb.com) to join the CrypTen community on [Slack](https://cryptensor.slack.com)\n\nSee the [CONTRIBUTING](CONTRIBUTING.md) file for how to help out.\n\n## License\nCrypTen is MIT licensed, as found in the LICENSE file.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/facebookresearch/CrypTen", "keywords": "", "license": "Type license() to see the full license text", "maintainer": "", "maintainer_email": "", "name": "crypten", "package_url": "https://pypi.org/project/crypten/", "platform": "", "project_url": "https://pypi.org/project/crypten/", "project_urls": {"Homepage": "https://github.com/facebookresearch/CrypTen"}, "release_url": "https://pypi.org/project/crypten/0.1/", "requires_dist": ["torch (==1.4.0)", "torchvision (==0.5.0)", "onnx", "tensorboard", "future"], "requires_python": "", "summary": "CrypTen: secure machine learning in PyTorch.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img alt=\"CrypTen logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8dcf65d48870c794759dd636a1e7e0414d741535/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f66616365626f6f6b72657365617263682f4372797054656e2f6d61737465722f646f63732f5f7374617469632f696d672f4372797054656e5f4964656e746974795f486f72697a6f6e74616c5f4c6f636b75705f30315f46756c6c436f6c6f722e706e67\" width=\"70%\"></p>\n<p><a href=\"https://github.com/facebookresearch/CrypTen/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a> <a href=\"https://circleci.com/gh/facebookresearch/CrypTen/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a07b51ab89926501d4d5d8668636fc4d32344f6/68747470733a2f2f636972636c6563692e636f6d2f67682f66616365626f6f6b72657365617263682f4372797054656e2e7376673f7374796c653d736869656c64\"></a> <a href=\"https://github.com/facebookresearch/CrypTen/blob/master/CONTRIBUTING.md\" rel=\"nofollow\"><img alt=\"PRs Welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6482ead086859c79e80e1d7af03e30a98f345bf0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e737667\"></a></p>\n<hr>\n<p>CrypTen is a framework for Privacy Preserving Machine Learning built on PyTorch.\nIts goal is to make secure computing techniques accessible to Machine Learning practitioners.\nIt currently implements <a href=\"https://en.wikipedia.org/wiki/Secure_multi-party_computation\" rel=\"nofollow\">Secure Multiparty Computation</a>\nas its secure computing backend and offers three main benefits to ML researchers:</p>\n<ol>\n<li>\n<p>It is machine learning first. The framework presents the protocols via a <code>CrypTensor</code>\nobject that looks and feels exactly like a PyTorch <code>Tensor</code>. This allows the user to use\nautomatic differentiation and neural network modules akin to those in PyTorch.</p>\n</li>\n<li>\n<p>CrypTen is library-based. It implements a tensor library just as PyTorch does.\nThis makes it easier for practitioners to debug, experiment on, and explore ML models.</p>\n</li>\n<li>\n<p>The framework is built with real-world challenges in mind. CrypTen does not scale back or\noversimplify the implementation of the secure protocols.</p>\n</li>\n</ol>\n<p>Here is a bit of CrypTen code that encrypts and decrypts tensors and adds them</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">crypten</span>\n\n<span class=\"n\">crypten</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">])</span>\n<span class=\"n\">x_enc</span> <span class=\"o\">=</span> <span class=\"n\">crypten</span><span class=\"o\">.</span><span class=\"n\">cryptensor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># encrypt</span>\n\n<span class=\"n\">x_dec</span> <span class=\"o\">=</span> <span class=\"n\">x_enc</span><span class=\"o\">.</span><span class=\"n\">get_plain_text</span><span class=\"p\">()</span> <span class=\"c1\"># decrypt</span>\n\n<span class=\"n\">y_enc</span> <span class=\"o\">=</span> <span class=\"n\">crypten</span><span class=\"o\">.</span><span class=\"n\">cryptensor</span><span class=\"p\">([</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">])</span>\n<span class=\"n\">sum_xy</span> <span class=\"o\">=</span> <span class=\"n\">x_enc</span> <span class=\"o\">+</span> <span class=\"n\">y_enc</span> <span class=\"c1\"># add encrypted tensors</span>\n<span class=\"n\">sum_xy_dec</span> <span class=\"o\">=</span> <span class=\"n\">sum_xy</span><span class=\"o\">.</span><span class=\"n\">get_plain_text</span><span class=\"p\">()</span> <span class=\"c1\"># decrypt sum</span>\n</pre>\n<p>It is currently not production ready and its main use is as a research framework.</p>\n<h2>Installing CrypTen</h2>\n<p>CrypTen currently runs on Linux and Mac with Python &gt;= 3.7.\nWindows is not supported. We also do not currently support computation on GPUs.</p>\n<p><em>For Linux or Mac</em></p>\n<pre>pip install crypten\n</pre>\n<p>If you want to run the examples in the <code>examples</code> directory, you should also do the following</p>\n<pre>pip install -r requirements.examples.txt\n</pre>\n<h2>Examples</h2>\n<p>We provide examples covering a range of models in the <code>examples</code> directory</p>\n<ol>\n<li>The linear SVM example, <code>mpc_linear_svm</code>, generates random data and trains a\nSVM classifier on encrypted data.</li>\n<li>The LeNet example, <code>mpc_cifar</code>, trains an adaptation of LeNet on CIFAR in\ncleartext and encrypts the model and data for inference.</li>\n<li>The TFE benchmark example, <code>tfe_benchmarks</code>, trains three different network\narchitectures on MNIST in cleartext, and encrypts the trained model and data\nfor inference.</li>\n<li>The bandits example, <code>bandits</code>, trains a contextual bandits model on\nencrypted data (MNIST).</li>\n<li>The imagenet example, <code>mpc_imagenet</code>, performs inference on pretrained\nmodels from <code>torchvision</code>.</li>\n</ol>\n<p>For examples that train in cleartext, we also provide pre-trained models in\ncleartext in the <code>model</code> subdirectory of each example subdirectory.</p>\n<p>You can check all example specific command line options by doing the following;\nshown here for <code>tfe_benchmarks</code>:</p>\n<pre>    $ python3 examples/tfe_benchmarks/launcher.py --help\n</pre>\n<h2>How CrypTen works</h2>\n<p>We have a set of tutorials in the <code>tutorials</code> directory to show how\nCrypTen works. These are presented as Jupyter notebooks so please install\nthe following in your conda environment</p>\n<pre>conda install ipython jupyter\npip install -r requirements.examples.txt\n</pre>\n<ol>\n<li><code>Introduction.ipynb</code> - an introduction to Secure Multiparty Compute; CrypTen's\nunderlying secure computing protocol; use cases we are trying to solve and the\nthreat model we assume.</li>\n<li><code>Tutorial_1_Basics_of_CrypTen_Tensors.ipynb</code> - introduces <code>CrypTensor</code>, CrypTen's\nencrypted tensor object, and shows how to use it to do various operations on\nthis object.</li>\n<li><code>Tutorial_2_Inside_CrypTensors.ipynb</code> \u2013 delves deeper into <code>CrypTensor</code> to show\nthe inner workings; specifically how <code>CrypTensor</code> uses <code>MPCTensor</code> for its\nbackend and the two different kind of <em>sharings</em>, arithmetic and binary, are\nused for two different kind of functions. It also shows CrypTen's\n<a href=\"https://en.wikipedia.org/wiki/Message_Passing_Interface\" rel=\"nofollow\">MPI</a>-inspired\nprogramming model.</li>\n<li><code>Tutorial_3_Introduction_to_Access_Control.ipynb</code> - shows how to train a linear\nmodel using CrypTen and shows various scenarios of data labeling, feature\naggregation, dataset augmentation and model hiding where this is applicable.</li>\n<li><code>Tutorial_4_Classification_with_Encrypted_Neural_Networks.ipynb</code> \u2013 shows how\nCrypTen can load a pre-trained PyTorch model, encrypt it and then do inference\non encrypted data.</li>\n<li><code>Tutorial_5_Under_the_hood_of_Encrypted_Networks.ipynb</code> - examines how CrypTen\nloads PyTorch models, how they are encrypted and how data moves through a multilayer\nnetwork.</li>\n<li><code>Tutorial_6_CrypTen_on_AWS_instances.ipynb</code> - shows how to use <code>scrips/aws_launcher.py</code>\nto launch our examples on AWS. It can also work with your code written in CrypTen.</li>\n<li><code>Tutorial_7_Training_an_Encrypted_Neural_Network.ipynb</code> - introduces <code>AutogradCrypTensor</code>,\na wrapper that adds automatic differentiation functionality to <code>CrypTensor</code>. This\nallows you to train neural networks in CrypTen. We expect to move this functionality\ninto the <code>CrypTensor</code> object in a future release.</li>\n</ol>\n<h2>Documentation</h2>\n<p>CrypTen is documented <a href=\"https://crypten.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a></p>\n<h2>Join the CrypTen community</h2>\n<p>Please contact <a href=\"mailto:ssengupta@fb.com\">us</a> to join the CrypTen community on <a href=\"https://cryptensor.slack.com\" rel=\"nofollow\">Slack</a></p>\n<p>See the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING</a> file for how to help out.</p>\n<h2>License</h2>\n<p>CrypTen is MIT licensed, as found in the LICENSE file.</p>\n\n          </div>"}, "last_serial": 6577584, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e2aff9f7e785ac5d5cd3a52bdc53863e", "sha256": "35dac57c19d952c60dd3d3432b0538d4b25d911573c74e15734cd8ae04f1a599"}, "downloads": -1, "filename": "crypten-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2aff9f7e785ac5d5cd3a52bdc53863e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 148118, "upload_time": "2020-02-05T18:53:03", "upload_time_iso_8601": "2020-02-05T18:53:03.286478Z", "url": "https://files.pythonhosted.org/packages/19/6a/008b0935bc28eea0d1b80a8e967117bf5975c2c259d4b864ec25307308a5/crypten-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60254b49512ef5b59a577b95edc3bcbd", "sha256": "ad6b8bdc1ee3a38184235591a622c0fcd1bd76bfe2fc9f7ca3b8a4126857ba62"}, "downloads": -1, "filename": "crypten-0.1.tar.gz", "has_sig": false, "md5_digest": "60254b49512ef5b59a577b95edc3bcbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121942, "upload_time": "2020-02-05T18:53:06", "upload_time_iso_8601": "2020-02-05T18:53:06.031617Z", "url": "https://files.pythonhosted.org/packages/4c/50/4ea22bc0dc0a5e9f4f4b5ec72f91b52d9d59c4c2a7417e5b5dcd6432e78a/crypten-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2aff9f7e785ac5d5cd3a52bdc53863e", "sha256": "35dac57c19d952c60dd3d3432b0538d4b25d911573c74e15734cd8ae04f1a599"}, "downloads": -1, "filename": "crypten-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2aff9f7e785ac5d5cd3a52bdc53863e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 148118, "upload_time": "2020-02-05T18:53:03", "upload_time_iso_8601": "2020-02-05T18:53:03.286478Z", "url": "https://files.pythonhosted.org/packages/19/6a/008b0935bc28eea0d1b80a8e967117bf5975c2c259d4b864ec25307308a5/crypten-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60254b49512ef5b59a577b95edc3bcbd", "sha256": "ad6b8bdc1ee3a38184235591a622c0fcd1bd76bfe2fc9f7ca3b8a4126857ba62"}, "downloads": -1, "filename": "crypten-0.1.tar.gz", "has_sig": false, "md5_digest": "60254b49512ef5b59a577b95edc3bcbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121942, "upload_time": "2020-02-05T18:53:06", "upload_time_iso_8601": "2020-02-05T18:53:06.031617Z", "url": "https://files.pythonhosted.org/packages/4c/50/4ea22bc0dc0a5e9f4f4b5ec72f91b52d9d59c4c2a7417e5b5dcd6432e78a/crypten-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:04 2020"}