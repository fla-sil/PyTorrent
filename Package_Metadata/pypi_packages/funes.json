{"info": {"author": "Taliesin Beynon", "author_email": "contact@taliesin.ai", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Funes\n\nFunes lets you decorate functions in such a way that their computations are memorized permanently to disk.\n\nIt is named after the Borges short story [Funes the Memories](https://en.wikipedia.org/wiki/Funes_the_Memorious).\n\n## Background\n\nThis package allows the results of expensive functions be cached to disk, by decorating these functions with the `@memorious` decorator. When that function is called again on an identical input, the cached result will be loaded from disk and returned. \n\nThis is achieved by pickling the result and input and writing it to disk, using a unique path that identifies the particular version of the function that is being cached (based on a hash that depends on its definition, thanks to the 'dill' package), as well as a key that depends on the hashed arguments of the function.\n\nMemorious functions should not contain (possibly mutually) recursive definitions, or the stack will overflow. Their hash values WILL change if functions that depend on are changed, but these dependencies are only followed if they remain within the current module. \n\nThe pickled results will be cached under cache/funcname/hexhash/arg_hash.dill. These files can be deleted manually to clear the cache, or transported between computers.\n\nEach pickled computation contains a dictionary with the following keys:\n`input`: ordered dict of function arguments + their provided (or defaulting) values  \n`output`: whatever the function produced\n`time`: time in seconds the function took to run\n\nA special `global_seed` keyword argument can be provided to any memorious function to set the global random seed prior to running the function. This allows controlled stochasticity to be used, while maintaining the benefits of caching. \n\n## Examples\n\nThe following script demonstrates the basic idea behind funes:\n\n```\nfrom funes import memorious, load_cached_results\nfrom time import sleep\n\n@memorious\ndef double(x):\n    print('doubling', x)\n    sleep(0.5)\n    return x * 2\n\nprint(\"uncached (will be slow)\")\nfor i in range(5):\n    double(i)\n\nprint(\"cached (will be fast)\")\nfor i in range(5):\n    double(i)\n\nprint(\"uncached (will be slow, unique global seed)\")\nfor seed in range(5):\n    double(0, global_seed=seed)\n\nprint(\"cached (will be fast, reuse global seed)\")\nfor seed in range(5):\n    double(0, global_seed=seed)\n\nprint(\"all cached values\")\nprint(list(load_cached_results(double)))\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/taliesinb/funes/archive/v0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/taliesinb/funes", "keywords": "persistent,cache,hash,stable,archive,memoize", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "funes", "package_url": "https://pypi.org/project/funes/", "platform": "", "project_url": "https://pypi.org/project/funes/", "project_urls": {"Download": "https://github.com/taliesinb/funes/archive/v0.0.1.tar.gz", "Homepage": "https://github.com/taliesinb/funes"}, "release_url": "https://pypi.org/project/funes/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Decorator to memorize function computations permanently to disk.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Funes</h1>\n<p>Funes lets you decorate functions in such a way that their computations are memorized permanently to disk.</p>\n<p>It is named after the Borges short story <a href=\"https://en.wikipedia.org/wiki/Funes_the_Memorious\" rel=\"nofollow\">Funes the Memories</a>.</p>\n<h2>Background</h2>\n<p>This package allows the results of expensive functions be cached to disk, by decorating these functions with the <code>@memorious</code> decorator. When that function is called again on an identical input, the cached result will be loaded from disk and returned.</p>\n<p>This is achieved by pickling the result and input and writing it to disk, using a unique path that identifies the particular version of the function that is being cached (based on a hash that depends on its definition, thanks to the 'dill' package), as well as a key that depends on the hashed arguments of the function.</p>\n<p>Memorious functions should not contain (possibly mutually) recursive definitions, or the stack will overflow. Their hash values WILL change if functions that depend on are changed, but these dependencies are only followed if they remain within the current module.</p>\n<p>The pickled results will be cached under cache/funcname/hexhash/arg_hash.dill. These files can be deleted manually to clear the cache, or transported between computers.</p>\n<p>Each pickled computation contains a dictionary with the following keys:\n<code>input</code>: ordered dict of function arguments + their provided (or defaulting) values<br>\n<code>output</code>: whatever the function produced\n<code>time</code>: time in seconds the function took to run</p>\n<p>A special <code>global_seed</code> keyword argument can be provided to any memorious function to set the global random seed prior to running the function. This allows controlled stochasticity to be used, while maintaining the benefits of caching.</p>\n<h2>Examples</h2>\n<p>The following script demonstrates the basic idea behind funes:</p>\n<pre><code>from funes import memorious, load_cached_results\nfrom time import sleep\n\n@memorious\ndef double(x):\n    print('doubling', x)\n    sleep(0.5)\n    return x * 2\n\nprint(\"uncached (will be slow)\")\nfor i in range(5):\n    double(i)\n\nprint(\"cached (will be fast)\")\nfor i in range(5):\n    double(i)\n\nprint(\"uncached (will be slow, unique global seed)\")\nfor seed in range(5):\n    double(0, global_seed=seed)\n\nprint(\"cached (will be fast, reuse global seed)\")\nfor seed in range(5):\n    double(0, global_seed=seed)\n\nprint(\"all cached values\")\nprint(list(load_cached_results(double)))\n</code></pre>\n\n          </div>"}, "last_serial": 6139296, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "957077b5d2e6bfe2e18ffbd20dceee2b", "sha256": "91d5e4900dfdea2d3f99ab1dd3f15006afbc21b4e831ff973f2ca431c33ccfa4"}, "downloads": -1, "filename": "funes-0.0.1.tar.gz", "has_sig": false, "md5_digest": "957077b5d2e6bfe2e18ffbd20dceee2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5033, "upload_time": "2019-11-14T22:51:51", "upload_time_iso_8601": "2019-11-14T22:51:51.423873Z", "url": "https://files.pythonhosted.org/packages/69/7d/a45aaf3483d9ba38475c9163d0ff27183c464cb1cb2dc956def57d6eef5e/funes-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "957077b5d2e6bfe2e18ffbd20dceee2b", "sha256": "91d5e4900dfdea2d3f99ab1dd3f15006afbc21b4e831ff973f2ca431c33ccfa4"}, "downloads": -1, "filename": "funes-0.0.1.tar.gz", "has_sig": false, "md5_digest": "957077b5d2e6bfe2e18ffbd20dceee2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5033, "upload_time": "2019-11-14T22:51:51", "upload_time_iso_8601": "2019-11-14T22:51:51.423873Z", "url": "https://files.pythonhosted.org/packages/69/7d/a45aaf3483d9ba38475c9163d0ff27183c464cb1cb2dc956def57d6eef5e/funes-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:39 2020"}