{"info": {"author": "Los Angeles Times Data Desk", "author_email": "datadesk@latimes.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "census-data-aggregator\n======================\n\nCombine U.S. census data responsibly\n\n\nFeatures\n^^^^^^^^\n\n* Approximating sums\n* Approximating means\n* Approximating medians\n* Approximating percent change\n* Approximating products\n* Approximating proportions\n* Approximating ratios\n\n\nInstallation\n^^^^^^^^^^^^\n\n.. code-block:: bash\n\n   $ pipenv install census-data-aggregator\n\n\nUsage\n^^^^^\n\nImport the library.\n\n.. code-block:: python\n\n   >>> import census_data_aggregator\n\n\nApproximating sums\n~~~~~~~~~~~~~~~~~~\n\nTotal together estimates from the U.S. Census Bureau and approximate the combined margin of error. Follows the bureau's `official guidelines <https://www.documentcloud.org/documents/6162551-20180418-MOE.html>`_ for how to calculate a new margin of error when totaling multiple values. Useful for aggregating census categories and geographies.\n\nAccepts an open-ended set of paired lists, each expected to provide an estimate followed by its margin of error.\n\n.. code-block:: python\n\n  >>> males_under_5, males_under_5_moe = 10154024, 3778\n  >>> females_under_5, females_under_5_moe = 9712936, 3911\n  >>> census_data_aggregator.approximate_sum(\n      (males_under_5, males_under_5_moe),\n      (females_under_5, females_under_5_moe)\n  )\n  19866960, 5437.757350231803\n\n\nApproximating means\n~~~~~~~~~~~~~~~~~~~\n\nEstimate a mean and approximate the margin of error.\n\nThe Census Bureau guidelines do not provide instructions for approximating a mean using data from the ACS. Instead, we implement our own simulation-based approach.\n\nExpects a list of dictionaries that divide the full range of data values into continuous categories. Each dictionary should have four keys:\n\n.. list-table::\n  :header-rows: 1\n\n  * - key\n    - value\n  * - min\n    - The minimum value of the range\n  * - max\n    - The maximum value of the range\n  * - n\n    - The number of people, households or other units in the range\n  * - moe\n    - The margin of error for the number of units in the range\n\n.. code-block:: python\n\n    >>> income = [\n        dict(min=0, max=9999, n=7942251, moe=17662),\n        dict(min=10000, max=14999, n=5768114, moe=16409),\n        dict(min=15000, max=19999, n=5727180, moe=16801),\n        dict(min=20000, max=24999, n=5910725, moe=17864),\n        dict(min=25000, max=29999, n=5619002, moe=16113),\n        dict(min=30000, max=34999, n=5711286, moe=15891),\n        dict(min=35000, max=39999, n=5332778, moe=16488),\n        dict(min=40000, max=44999, n=5354520, moe=15415),\n        dict(min=45000, max=49999, n=4725195, moe=16890),\n        dict(min=50000, max=59999, n=9181800, moe=20965),\n        dict(min=60000, max=74999, n=11818514, moe=30723),\n        dict(min=75000, max=99999, n=14636046, moe=49159),\n        dict(min=100000, max=124999, n=10273788, moe=47842),\n        dict(min=125000, max=149999, n=6428069, moe=37952),\n        dict(min=150000, max=199999, n=6931136, moe=37236),\n        dict(min=200000, max=1000000, n=7465517, moe=42206)\n    ]\n    >>> approximate_mean(income)\n    (98045.44530685373, 194.54892406267754)\n\nNote that this function expects you to submit a lower bound for the smallest bin and an upper bound for the largest bin. This is often not available for ACS datasets like income. We recommend experimenting with different lower and upper bounds to assess its effect on the resulting mean.\n\nBy default the simulation is run 50 times, which can take as long as a minute. The number of simulations can be changed by setting the `simulation` keyword argument.\n\n.. code-block:: python\n\n     >>> approximate_mean(income, simulations=10)\n\nThe simulation assumes a uniform distribution of values within each bin. In some cases, like income, it is common to assume the `Pareto distribution <https://en.wikipedia.org/wiki/Pareto_distribution>`_ in the highest bin. You can employ it here by passing `True` to the `pareto` keyword argument.\n\n.. code-block:: python\n\n     >>> approximate_mean(income, pareto=True)\n     (60364.96525340687, 58.60735554621351)\n\nAlso, due to the stochastic nature of the simulation approach, you will need to set a seed before running this function to ensure replicability.\n\n.. code-block:: python\n\n     >>> import numpy\n     >>> numpy.random.seed(711355)\n     >>> approximate_mean(income, pareto=True)\n     (60364.96525340687, 58.60735554621351)\n     >>> numpy.random.seed(711355)\n     >>> approximate_mean(income, pareto=True)\n     (60364.96525340687, 58.60735554621351)\n\n\nApproximating medians\n~~~~~~~~~~~~~~~~~~~~~\n\nEstimate a median and approximate the margin of error. Follows the U.S. Census Bureau's official guidelines for estimation. Useful for generating medians for measures like household income and age when aggregating census geographies.\n\nExpects a list of dictionaries that divide the full range of data values into continuous categories. Each dictionary should have three keys:\n\n.. list-table::\n  :header-rows: 1\n\n  * - key\n    - value\n  * - min\n    - The minimum value of the range\n  * - max\n    - The maximum value of the range\n  * - n\n    - The number of people, households or other units in the range\n\n\n.. code-block:: python\n\n  >>> household_income_la_2013_acs1 = [\n      dict(min=2499, max=9999, n=1382),\n      dict(min=10000, max=14999, n=2377),\n      dict(min=15000, max=19999, n=1332),\n      dict(min=20000, max=24999, n=3129),\n      dict(min=25000, max=29999, n=1927),\n      dict(min=30000, max=34999, n=1825),\n      dict(min=35000, max=39999, n=1567),\n      dict(min=40000, max=44999, n=1996),\n      dict(min=45000, max=49999, n=1757),\n      dict(min=50000, max=59999, n=3523),\n      dict(min=60000, max=74999, n=4360),\n      dict(min=75000, max=99999, n=6424),\n      dict(min=100000, max=124999, n=5257),\n      dict(min=125000, max=149999, n=3485),\n      dict(min=150000, max=199999, n=2926),\n      dict(min=200000, max=250001, n=4215)\n  ]\n\nFor a margin of error to be returned, a sampling percentage must be provided to calculate the standard error. The sampling percentage represents what proportion of the population that participated in the survey. Here are the values for some common census surveys.\n\n.. list-table::\n  :header-rows: 1\n\n  * - survey\n    - samping percentage\n  * - One-year PUMS\n    - 1\n  * - One-year ACS\n    - 2.5\n  * - Three-year ACS\n    - 7.5\n  * - Five-year ACS\n    - 12.5\n\n.. code-block:: python\n\n    >>> census_data_aggregator.approximate_median(household_income_Los_Angeles_County_2013_acs1, sampling_percentage=2.5)\n    70065.84266055046, 3850.680465234964\n\nIf you do not provide the value to the function, no margin of error will be returned.\n\n.. code-block:: python\n\n  >>> census_data_aggregator.approximate_median(household_income_Los_Angeles_County_2013_acs1)\n  70065.84266055046, None\n\nIf the data being approximated comes from PUMS, an additional design factor must also be provided. The design factor is a statistical input used to tailor the estimate to the variance of the dataset. Find the value for the dataset you are estimating by referring to `the bureau's reference material <https://www.census.gov/programs-surveys/acs/technical-documentation/pums/documentation.html>`_.\n\n\nApproximating percent change\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCalculates the percent change between two estimates and approximates its margin of error. Follows the bureau's `ACS handbook <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html>`_.\n\nAccepts two paired lists, each expected to provide an estimate followed by its margin of error. The first input should be the earlier estimate in the comparison. The second input should be the later estimate.\n\nReturns both values as percentages multiplied by 100.\n\n.. code-block:: python\n\n    >>> single_women_in_fairfax_before = 135173, 3860\n    >>> single_women_in_fairfax_after = 139301, 4047\n    >>> census_data_aggregator.approximate_percentchange(\n      single_women_in_fairfax_before,\n      single_women_in_fairfax_after\n    )\n    3.0538643072211165, 4.198069852261231\n\n\nApproximating products\n~~~~~~~~~~~~~~~~~~~~~~\n\nCalculates the product of two estimates and approximates its margin of error. Follows the bureau's `ACS handbook <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html>`_.\n\nAccepts two paired lists, each expected to provide an estimate followed by its margin of error.\n\n.. code-block:: python\n\n   >>> owner_occupied_units = 74506512, 228238\n   >>> single_family_percent = 0.824, 0.001\n   >>> census_data_aggregator.approximate_product(\n       owner_occupied_units,\n       single_family_percent\n   )\n   61393366, 202289\n\n\nApproximating proportions\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCalculate an estimate's proportion of another estimate and approximate the margin of error. Follows the bureau's `ACS handbook <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html>`_. Simply multiply the result by 100 for a percentage. Recommended when the first value is smaller than the second.\n\nAccepts two paired lists, each expected to provide an estimate followed by its margin of error. The numerator goes in first. The denominator goes in second. In cases where the numerator is not a subset of the denominator, the bureau recommends using the approximate_ratio method instead.\n\n.. code-block:: python\n\n  >>> single_women_in_virginia = 203119, 5070\n  >>> total_women_in_virginia = 690746, 831\n  >>> census_data_aggregator.approximate_proportion(\n      single_women_in_virginia,\n      total_women_in_virginia\n  )\n  0.322, 0.008\n\n\nApproximating ratios\n~~~~~~~~~~~~~~~~~~~~\n\nCalculate the ratio between two estimates and approximate its margin of error. Follows the bureau's `ACS handbook <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html>`_.\n\nAccepts two paired lists, each expected to provide an estimate followed by its margin of error. The numerator goes in first. The denominator goes in second. In cases where the numerator is a subset of the denominator, the bureau recommends uses the approximate_proportion method.\n\n.. code-block:: python\n\n  >>> single_men_in_virginia = 226840, 5556\n  >>> single_women_in_virginia = 203119, 5070\n  >>> census_data_aggregator.approximate_ratio(\n      single_men_in_virginia,\n      single_women_in_virginia\n  )\n  1.117, 0.039\n\n\nA note from the experts\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThe California State Data Center's Demographic Research Unit `notes <https://www.documentcloud.org/documents/6165014-How-to-Recalculate-a-Median.html#document/p4/a508562>`_\\ :\n\n..\n\n   The user should be aware that the formulas are actually approximations that overstate the MOE compared to the more precise methods based on the actual survey returns that the Census Bureau uses. Therefore, the calculated MOEs will be higher, or more conservative, than those found in published tabulations for similarly-sized areas. This knowledge may affect the level of error you are willing to accept.\n\n\nThe American Community Survey's handbook `adds <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html#document/p3/a509993>`_\\ :\n\n..\n\n   As the number of estimates involved in a sum or difference increases, the results of the approximation formula become increasingly different from the [standard error] derived directly from the ACS microdata. Users are encouraged to work with the fewest number of estimates possible.\n\n\nReferences\n^^^^^^^^^^\n\nThis module was designed to conform with the Census Bureau's April 18, 2018, presentation `\"Using American Community Survey Estimates and Margin of Error\" <https://www.documentcloud.org/documents/6162551-20180418-MOE.html>`_\\ , the bureau's `PUMS Accuracy statement <https://www.documentcloud.org/documents/6165603-2013-2017AccuracyPUMS.html>`_ and the California State Data Center's 2016 edition of `\"Recalculating medians and their margins of error for aggregated ACS data.\" <https://www.documentcloud.org/documents/6165014-How-to-Recalculate-a-Median.html>`_\\ , and the Census Bureau's `ACS 2018 General Handbook Chapter 8, \"Calculating Measures of Error for Derived Estimates\" <https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/datadesk/census-data-aggregator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "census-data-aggregator", "package_url": "https://pypi.org/project/census-data-aggregator/", "platform": "", "project_url": "https://pypi.org/project/census-data-aggregator/", "project_urls": {"Homepage": "http://www.github.com/datadesk/census-data-aggregator", "Maintainer": "https://github.com/datadesk", "Source": "https://github.com/datadesk/census-data-aggregator", "Tracker": "https://github.com/datadesk/census-data-aggregator/issues"}, "release_url": "https://pypi.org/project/census-data-aggregator/0.0.6/", "requires_dist": ["numpy"], "requires_python": "", "summary": "Combine U.S. census data responsibly", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Combine U.S. census data responsibly</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Approximating sums</li>\n<li>Approximating means</li>\n<li>Approximating medians</li>\n<li>Approximating percent change</li>\n<li>Approximating products</li>\n<li>Approximating proportions</li>\n<li>Approximating ratios</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pipenv install census-data-aggregator\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Import the library.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">census_data_aggregator</span>\n</pre>\n<div id=\"approximating-sums\">\n<h3>Approximating sums</h3>\n<p>Total together estimates from the U.S. Census Bureau and approximate the combined margin of error. Follows the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6162551-20180418-MOE.html\" rel=\"nofollow\">official guidelines</a> for how to calculate a new margin of error when totaling multiple values. Useful for aggregating census categories and geographies.</p>\n<p>Accepts an open-ended set of paired lists, each expected to provide an estimate followed by its margin of error.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">males_under_5</span><span class=\"p\">,</span> <span class=\"n\">males_under_5_moe</span> <span class=\"o\">=</span> <span class=\"mi\">10154024</span><span class=\"p\">,</span> <span class=\"mi\">3778</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">females_under_5</span><span class=\"p\">,</span> <span class=\"n\">females_under_5_moe</span> <span class=\"o\">=</span> <span class=\"mi\">9712936</span><span class=\"p\">,</span> <span class=\"mi\">3911</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_sum</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">males_under_5</span><span class=\"p\">,</span> <span class=\"n\">males_under_5_moe</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">females_under_5</span><span class=\"p\">,</span> <span class=\"n\">females_under_5_moe</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"mi\">19866960</span><span class=\"p\">,</span> <span class=\"mf\">5437.757350231803</span>\n</pre>\n</div>\n<div id=\"approximating-means\">\n<h3>Approximating means</h3>\n<p>Estimate a mean and approximate the margin of error.</p>\n<p>The Census Bureau guidelines do not provide instructions for approximating a mean using data from the ACS. Instead, we implement our own simulation-based approach.</p>\n<p>Expects a list of dictionaries that divide the full range of data values into continuous categories. Each dictionary should have four keys:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>min</td>\n<td>The minimum value of the range</td>\n</tr>\n<tr><td>max</td>\n<td>The maximum value of the range</td>\n</tr>\n<tr><td>n</td>\n<td>The number of people, households or other units in the range</td>\n</tr>\n<tr><td>moe</td>\n<td>The margin of error for the number of units in the range</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">income</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">9999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">7942251</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">17662</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">14999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5768114</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">16409</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">15000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">19999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5727180</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">16801</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">24999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5910725</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">17864</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">25000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">29999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5619002</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">16113</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">30000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">34999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5711286</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">15891</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">35000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">39999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5332778</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">16488</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">40000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">44999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5354520</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">15415</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">45000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">49999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4725195</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">16890</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">50000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">59999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">9181800</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">20965</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">60000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">74999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">11818514</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">30723</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">75000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">99999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">14636046</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">49159</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">124999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">10273788</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">47842</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">125000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">149999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6428069</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">37952</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">150000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">199999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6931136</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">37236</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">200000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">7465517</span><span class=\"p\">,</span> <span class=\"n\">moe</span><span class=\"o\">=</span><span class=\"mi\">42206</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">approximate_mean</span><span class=\"p\">(</span><span class=\"n\">income</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">98045.44530685373</span><span class=\"p\">,</span> <span class=\"mf\">194.54892406267754</span><span class=\"p\">)</span>\n</pre>\n<p>Note that this function expects you to submit a lower bound for the smallest bin and an upper bound for the largest bin. This is often not available for ACS datasets like income. We recommend experimenting with different lower and upper bounds to assess its effect on the resulting mean.</p>\n<p>By default the simulation is run 50 times, which can take as long as a minute. The number of simulations can be changed by setting the <cite>simulation</cite> keyword argument.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">approximate_mean</span><span class=\"p\">(</span><span class=\"n\">income</span><span class=\"p\">,</span> <span class=\"n\">simulations</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>The simulation assumes a uniform distribution of values within each bin. In some cases, like income, it is common to assume the <a href=\"https://en.wikipedia.org/wiki/Pareto_distribution\" rel=\"nofollow\">Pareto distribution</a> in the highest bin. You can employ it here by passing <cite>True</cite> to the <cite>pareto</cite> keyword argument.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">approximate_mean</span><span class=\"p\">(</span><span class=\"n\">income</span><span class=\"p\">,</span> <span class=\"n\">pareto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">60364.96525340687</span><span class=\"p\">,</span> <span class=\"mf\">58.60735554621351</span><span class=\"p\">)</span>\n</pre>\n<p>Also, due to the stochastic nature of the simulation approach, you will need to set a seed before running this function to ensure replicability.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">711355</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">approximate_mean</span><span class=\"p\">(</span><span class=\"n\">income</span><span class=\"p\">,</span> <span class=\"n\">pareto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">60364.96525340687</span><span class=\"p\">,</span> <span class=\"mf\">58.60735554621351</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">711355</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">approximate_mean</span><span class=\"p\">(</span><span class=\"n\">income</span><span class=\"p\">,</span> <span class=\"n\">pareto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">60364.96525340687</span><span class=\"p\">,</span> <span class=\"mf\">58.60735554621351</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"approximating-medians\">\n<h3>Approximating medians</h3>\n<p>Estimate a median and approximate the margin of error. Follows the U.S. Census Bureau\u2019s official guidelines for estimation. Useful for generating medians for measures like household income and age when aggregating census geographies.</p>\n<p>Expects a list of dictionaries that divide the full range of data values into continuous categories. Each dictionary should have three keys:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>min</td>\n<td>The minimum value of the range</td>\n</tr>\n<tr><td>max</td>\n<td>The maximum value of the range</td>\n</tr>\n<tr><td>n</td>\n<td>The number of people, households or other units in the range</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">household_income_la_2013_acs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">2499</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">9999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1382</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">14999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2377</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">15000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">19999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1332</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">24999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3129</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">25000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">29999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1927</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">30000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">34999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1825</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">35000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">39999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1567</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">40000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">44999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1996</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">45000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">49999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1757</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">50000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">59999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3523</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">60000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">74999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4360</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">75000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">99999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">6424</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">124999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5257</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">125000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">149999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3485</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">150000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">199999</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2926</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">200000</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">250001</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4215</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>For a margin of error to be returned, a sampling percentage must be provided to calculate the standard error. The sampling percentage represents what proportion of the population that participated in the survey. Here are the values for some common census surveys.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>survey</th>\n<th>samping percentage</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>One-year PUMS</td>\n<td>1</td>\n</tr>\n<tr><td>One-year ACS</td>\n<td>2.5</td>\n</tr>\n<tr><td>Three-year ACS</td>\n<td>7.5</td>\n</tr>\n<tr><td>Five-year ACS</td>\n<td>12.5</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_median</span><span class=\"p\">(</span><span class=\"n\">household_income_Los_Angeles_County_2013_acs1</span><span class=\"p\">,</span> <span class=\"n\">sampling_percentage</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">)</span>\n<span class=\"mf\">70065.84266055046</span><span class=\"p\">,</span> <span class=\"mf\">3850.680465234964</span>\n</pre>\n<p>If you do not provide the value to the function, no margin of error will be returned.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_median</span><span class=\"p\">(</span><span class=\"n\">household_income_Los_Angeles_County_2013_acs1</span><span class=\"p\">)</span>\n<span class=\"mf\">70065.84266055046</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n</pre>\n<p>If the data being approximated comes from PUMS, an additional design factor must also be provided. The design factor is a statistical input used to tailor the estimate to the variance of the dataset. Find the value for the dataset you are estimating by referring to <a href=\"https://www.census.gov/programs-surveys/acs/technical-documentation/pums/documentation.html\" rel=\"nofollow\">the bureau\u2019s reference material</a>.</p>\n</div>\n<div id=\"approximating-percent-change\">\n<h3>Approximating percent change</h3>\n<p>Calculates the percent change between two estimates and approximates its margin of error. Follows the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html\" rel=\"nofollow\">ACS handbook</a>.</p>\n<p>Accepts two paired lists, each expected to provide an estimate followed by its margin of error. The first input should be the earlier estimate in the comparison. The second input should be the later estimate.</p>\n<p>Returns both values as percentages multiplied by 100.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_women_in_fairfax_before</span> <span class=\"o\">=</span> <span class=\"mi\">135173</span><span class=\"p\">,</span> <span class=\"mi\">3860</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_women_in_fairfax_after</span> <span class=\"o\">=</span> <span class=\"mi\">139301</span><span class=\"p\">,</span> <span class=\"mi\">4047</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_percentchange</span><span class=\"p\">(</span>\n  <span class=\"n\">single_women_in_fairfax_before</span><span class=\"p\">,</span>\n  <span class=\"n\">single_women_in_fairfax_after</span>\n<span class=\"p\">)</span>\n<span class=\"mf\">3.0538643072211165</span><span class=\"p\">,</span> <span class=\"mf\">4.198069852261231</span>\n</pre>\n</div>\n<div id=\"approximating-products\">\n<h3>Approximating products</h3>\n<p>Calculates the product of two estimates and approximates its margin of error. Follows the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html\" rel=\"nofollow\">ACS handbook</a>.</p>\n<p>Accepts two paired lists, each expected to provide an estimate followed by its margin of error.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">owner_occupied_units</span> <span class=\"o\">=</span> <span class=\"mi\">74506512</span><span class=\"p\">,</span> <span class=\"mi\">228238</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_family_percent</span> <span class=\"o\">=</span> <span class=\"mf\">0.824</span><span class=\"p\">,</span> <span class=\"mf\">0.001</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_product</span><span class=\"p\">(</span>\n    <span class=\"n\">owner_occupied_units</span><span class=\"p\">,</span>\n    <span class=\"n\">single_family_percent</span>\n<span class=\"p\">)</span>\n<span class=\"mi\">61393366</span><span class=\"p\">,</span> <span class=\"mi\">202289</span>\n</pre>\n</div>\n<div id=\"approximating-proportions\">\n<h3>Approximating proportions</h3>\n<p>Calculate an estimate\u2019s proportion of another estimate and approximate the margin of error. Follows the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html\" rel=\"nofollow\">ACS handbook</a>. Simply multiply the result by 100 for a percentage. Recommended when the first value is smaller than the second.</p>\n<p>Accepts two paired lists, each expected to provide an estimate followed by its margin of error. The numerator goes in first. The denominator goes in second. In cases where the numerator is not a subset of the denominator, the bureau recommends using the approximate_ratio method instead.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_women_in_virginia</span> <span class=\"o\">=</span> <span class=\"mi\">203119</span><span class=\"p\">,</span> <span class=\"mi\">5070</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">total_women_in_virginia</span> <span class=\"o\">=</span> <span class=\"mi\">690746</span><span class=\"p\">,</span> <span class=\"mi\">831</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_proportion</span><span class=\"p\">(</span>\n    <span class=\"n\">single_women_in_virginia</span><span class=\"p\">,</span>\n    <span class=\"n\">total_women_in_virginia</span>\n<span class=\"p\">)</span>\n<span class=\"mf\">0.322</span><span class=\"p\">,</span> <span class=\"mf\">0.008</span>\n</pre>\n</div>\n<div id=\"approximating-ratios\">\n<h3>Approximating ratios</h3>\n<p>Calculate the ratio between two estimates and approximate its margin of error. Follows the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html\" rel=\"nofollow\">ACS handbook</a>.</p>\n<p>Accepts two paired lists, each expected to provide an estimate followed by its margin of error. The numerator goes in first. The denominator goes in second. In cases where the numerator is a subset of the denominator, the bureau recommends uses the approximate_proportion method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_men_in_virginia</span> <span class=\"o\">=</span> <span class=\"mi\">226840</span><span class=\"p\">,</span> <span class=\"mi\">5556</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">single_women_in_virginia</span> <span class=\"o\">=</span> <span class=\"mi\">203119</span><span class=\"p\">,</span> <span class=\"mi\">5070</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">census_data_aggregator</span><span class=\"o\">.</span><span class=\"n\">approximate_ratio</span><span class=\"p\">(</span>\n    <span class=\"n\">single_men_in_virginia</span><span class=\"p\">,</span>\n    <span class=\"n\">single_women_in_virginia</span>\n<span class=\"p\">)</span>\n<span class=\"mf\">1.117</span><span class=\"p\">,</span> <span class=\"mf\">0.039</span>\n</pre>\n</div>\n</div>\n<div id=\"a-note-from-the-experts\">\n<h2>A note from the experts</h2>\n<p>The California State Data Center\u2019s Demographic Research Unit <a href=\"https://www.documentcloud.org/documents/6165014-How-to-Recalculate-a-Median.html#document/p4/a508562\" rel=\"nofollow\">notes</a>:</p>\n<blockquote>\nThe user should be aware that the formulas are actually approximations that overstate the MOE compared to the more precise methods based on the actual survey returns that the Census Bureau uses. Therefore, the calculated MOEs will be higher, or more conservative, than those found in published tabulations for similarly-sized areas. This knowledge may affect the level of error you are willing to accept.</blockquote>\n<p>The American Community Survey\u2019s handbook <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html#document/p3/a509993\" rel=\"nofollow\">adds</a>:</p>\n<blockquote>\nAs the number of estimates involved in a sum or difference increases, the results of the approximation formula become increasingly different from the [standard error] derived directly from the ACS microdata. Users are encouraged to work with the fewest number of estimates possible.</blockquote>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>This module was designed to conform with the Census Bureau\u2019s April 18, 2018, presentation <a href=\"https://www.documentcloud.org/documents/6162551-20180418-MOE.html\" rel=\"nofollow\">\u201cUsing American Community Survey Estimates and Margin of Error\u201d</a>, the bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6165603-2013-2017AccuracyPUMS.html\" rel=\"nofollow\">PUMS Accuracy statement</a> and the California State Data Center\u2019s 2016 edition of <a href=\"https://www.documentcloud.org/documents/6165014-How-to-Recalculate-a-Median.html\" rel=\"nofollow\">\u201cRecalculating medians and their margins of error for aggregated ACS data.\u201d</a>, and the Census Bureau\u2019s <a href=\"https://www.documentcloud.org/documents/6177941-Acs-General-Handbook-2018-ch08.html\" rel=\"nofollow\">ACS 2018 General Handbook Chapter 8, \u201cCalculating Measures of Error for Derived Estimates\u201d</a></p>\n</div>\n\n          </div>"}, "last_serial": 5677947, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "51287e5ecabef356d743bb4eea033873", "sha256": "5cd9a18ac4b5d6e43a8db341eba2b01fe4649c1262c48abb34228c3acc5c1e4b"}, "downloads": -1, "filename": "census_data_aggregator-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51287e5ecabef356d743bb4eea033873", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5738, "upload_time": "2019-06-23T16:07:37", "upload_time_iso_8601": "2019-06-23T16:07:37.548884Z", "url": "https://files.pythonhosted.org/packages/a1/d6/d586cb66c9ce319b0362deb24000e684808fd8f1507501c54d48cb59f706/census_data_aggregator-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19b493092b609775931a34f60435c117", "sha256": "c9230e9d0ccbd204b8b3b56f82deec07140531757164f1959ce67748d4f38749"}, "downloads": -1, "filename": "census-data-aggregator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "19b493092b609775931a34f60435c117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5624, "upload_time": "2019-06-23T16:07:38", "upload_time_iso_8601": "2019-06-23T16:07:38.935927Z", "url": "https://files.pythonhosted.org/packages/86/7a/6cb5abff0beca54e6a88f9a59a7552e3a32967517142b52f04d0b4d9f07e/census-data-aggregator-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "35a0023cfd63084828a1d8aee8f97d42", "sha256": "75fa0c0f6fd69dfb627e17e95e5d46defd6865992f0d0a0239d7b2fa0aec7ac9"}, "downloads": -1, "filename": "census_data_aggregator-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35a0023cfd63084828a1d8aee8f97d42", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9034, "upload_time": "2019-07-01T17:17:31", "upload_time_iso_8601": "2019-07-01T17:17:31.134864Z", "url": "https://files.pythonhosted.org/packages/94/80/86d9f78a08202320ac00b6003207302bbda339b40f2316ed434644333577/census_data_aggregator-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9cd03859dcdb265e03e88f19096770c", "sha256": "09c0161348bf7ed1dda0b148ef04c613cfc436f090666d020df413a648ffa3a2"}, "downloads": -1, "filename": "census-data-aggregator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b9cd03859dcdb265e03e88f19096770c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7810, "upload_time": "2019-07-01T17:17:33", "upload_time_iso_8601": "2019-07-01T17:17:33.007553Z", "url": "https://files.pythonhosted.org/packages/d2/35/5a483927508291b086de126025f232a4e8586119439ed9e972685edd3602/census-data-aggregator-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e4593fcba7253a14a76f04c2d708d210", "sha256": "6d08a319d618bd9460c66fc95956642b9de99c405729ebcd09f814eb5d66a0d1"}, "downloads": -1, "filename": "census_data_aggregator-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4593fcba7253a14a76f04c2d708d210", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9584, "upload_time": "2019-07-05T16:15:16", "upload_time_iso_8601": "2019-07-05T16:15:16.798926Z", "url": "https://files.pythonhosted.org/packages/33/f2/1f89a92234baa486eb798bb01a81cc019e6ddf1331c3adecf4327757ecaf/census_data_aggregator-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79cbe56693c1cdb0540be9327ebb851b", "sha256": "1c288c3182b228fd36ffde408b839d254c3686303a4919046da3903a17bf0398"}, "downloads": -1, "filename": "census-data-aggregator-0.0.4.tar.gz", "has_sig": false, "md5_digest": "79cbe56693c1cdb0540be9327ebb851b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8375, "upload_time": "2019-07-05T16:15:18", "upload_time_iso_8601": "2019-07-05T16:15:18.548268Z", "url": "https://files.pythonhosted.org/packages/66/b9/b9aacd2165604caff0544b0e861e3aa2b8ee38fe26e2398626b642e7a50a/census-data-aggregator-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "98df6591f81102c1bd0cb1e233667566", "sha256": "5726b1d548d7bd8e1532ece6ac8ad1659fc919cde5f59bd4f7efcad1a9ebfeba"}, "downloads": -1, "filename": "census_data_aggregator-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "98df6591f81102c1bd0cb1e233667566", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9582, "upload_time": "2019-07-10T00:51:51", "upload_time_iso_8601": "2019-07-10T00:51:51.543163Z", "url": "https://files.pythonhosted.org/packages/b1/c4/d466c74633adc515a2c068d96ec4c080c6bbf168e42091678b883a617efc/census_data_aggregator-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2c17bdeeb4b8715761d1d40c81455d6", "sha256": "684a47a5cfec5e4bf5b2cc7181890c7c07a921cec14d534b93df73abe87d5292"}, "downloads": -1, "filename": "census-data-aggregator-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a2c17bdeeb4b8715761d1d40c81455d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8379, "upload_time": "2019-07-10T00:51:53", "upload_time_iso_8601": "2019-07-10T00:51:53.491187Z", "url": "https://files.pythonhosted.org/packages/7b/f8/46743560f6e85a0511ab835f64cbfd6935f3da5303c0defbb43bbcc1d6bb/census-data-aggregator-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "8e7780befbb74df975a2f327dcd28eb6", "sha256": "cf527a1378aebe688584f5828a403778f73be5a74b2f04b9a13edc65c57db49e"}, "downloads": -1, "filename": "census_data_aggregator-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e7780befbb74df975a2f327dcd28eb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12076, "upload_time": "2019-08-14T16:26:01", "upload_time_iso_8601": "2019-08-14T16:26:01.806502Z", "url": "https://files.pythonhosted.org/packages/1e/d0/f4b1024dc1d2c47376141938ba4419b3a8231b1bed454d53960053d9a6ba/census_data_aggregator-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d170ee3f6cedb3e55b4f3ae546ac3e74", "sha256": "4443165f9e9fc00becb346e7af58868b4a0f80c77b3ca8eb1f468e35bf920f52"}, "downloads": -1, "filename": "census-data-aggregator-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d170ee3f6cedb3e55b4f3ae546ac3e74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10881, "upload_time": "2019-08-14T16:26:03", "upload_time_iso_8601": "2019-08-14T16:26:03.835426Z", "url": "https://files.pythonhosted.org/packages/ff/e3/1464cee6c90230e16e6fa1ad581d3e00340e824a3e1a072dd5adaae4ffe0/census-data-aggregator-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e7780befbb74df975a2f327dcd28eb6", "sha256": "cf527a1378aebe688584f5828a403778f73be5a74b2f04b9a13edc65c57db49e"}, "downloads": -1, "filename": "census_data_aggregator-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e7780befbb74df975a2f327dcd28eb6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12076, "upload_time": "2019-08-14T16:26:01", "upload_time_iso_8601": "2019-08-14T16:26:01.806502Z", "url": "https://files.pythonhosted.org/packages/1e/d0/f4b1024dc1d2c47376141938ba4419b3a8231b1bed454d53960053d9a6ba/census_data_aggregator-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d170ee3f6cedb3e55b4f3ae546ac3e74", "sha256": "4443165f9e9fc00becb346e7af58868b4a0f80c77b3ca8eb1f468e35bf920f52"}, "downloads": -1, "filename": "census-data-aggregator-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d170ee3f6cedb3e55b4f3ae546ac3e74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10881, "upload_time": "2019-08-14T16:26:03", "upload_time_iso_8601": "2019-08-14T16:26:03.835426Z", "url": "https://files.pythonhosted.org/packages/ff/e3/1464cee6c90230e16e6fa1ad581d3e00340e824a3e1a072dd5adaae4ffe0/census-data-aggregator-0.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:49 2020"}