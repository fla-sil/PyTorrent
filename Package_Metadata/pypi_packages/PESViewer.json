{"info": {"author": "Ruben Van de Vijver", "author_email": "vandevijver.ruben@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PESViewer\nVisualize a potential energy surface\n\n## Developer: Ruben Van de Vijver, Laboratory for Chemical Technology, Ghent University\n\nThe PESViewer is a code to depict and analyze a potential energy surface \ncharacterized by wells, bimolecular products, transition states and barrierless reactions.\nTheir energy is needed to plot the potential energy surface. \nWritten values of the energies and 2D plots (structural formulas) of the wells and products can be added to the figure \n\nTo run this code, you need python version 2.7, matplotlib, numpy and optionally OpenBabel or RDKit to create 2D plots\n\n## INSTALL\n\nClone the project onto your machine and go to the PESViewer directory. Type:\n\n    python setup.py build\n    python setup.py install \n\n## INPUT\n\nA text file containing the stationary points, energies, names identifiers and options, see the input.txt as example.\n\nFor wells, write each well on a separate line as follows (smiles are optional to depict the molecule, if no xyz's are available):\n\n    name energy smiles\n\nFor bimolecular products (again smiles are optional):\n\n    name energy smiles\n\nFor reactions (colors are optional, and if available the line of the reaction will be given that color):\n\n    name energy reactant product color\n\nFor bimolecular products (again colors are optional)\n\n    name reactant product color\n\n\nThe plotting options (to be written in the input file) are:\n\n\n| option | default | Description |\n| ------- | ------- | ------- |\n| title | 0 | print a title (1) or not (0) |\n| units | kcal/mol | energy units |\n| use_xyz | 1 |use xyz, put 0  to switch off |\n| rescale | 0 | no rescale , put the well or bimolecular name here to rescale to that value |\n| fh | 9. | figure height |\n| fw | 18. | figure width |\n| margin | 0.2 | margin fraction on the x and y axis |\n| dpi | 120 | dpi of the molecule figures |\n| save | 0 | does the plot need to be saved (1) or displayed (0) |\n| write_ts_values | 1 | booleans tell if the ts energy values should be written |\n| write_well_values | 1 | booleans tell if the well and bimolecular energy values should be written |\n| bimol_color | red | color of the energy values for the bimolecular products |\n| well_color | blue | color of the energy values of the wells |\n| ts_color | green | color or the energy values of the ts, put to 'none' to use same color as line |\n| show_images | 1 | boolean tells whether the molecule images should be shown on the graph |\n| rdkit4depict | 1 | boolean that specifies which code to use for the 2D depiction |\n| axes_size | 10 | font size of the axes |\n| text_size | 10 | font size of the energy values on the graph |\n\nOptionally a folder xyz/ containing the xyz coordinates of the stationary points ($name.xyz)\n(for bimolecular products, use several xyz coordinates files ($name$index.xyz) )\n\n\n## RUN\n\nWith the input file input.inp, type:\n\n    pesviewer input.inp\n\n## OUTPUT\n\nThe output is a modifiable matplotlib figure.\n\n2 modifications are possible\n- modifing the x-position of a stationary point by a 'drag and drop' of the energy value\n- modifing the position of 2D structure images by a 'drag and drop' of the image\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rubenvdvijver/PESViewer.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PESViewer", "package_url": "https://pypi.org/project/PESViewer/", "platform": "", "project_url": "https://pypi.org/project/PESViewer/", "project_urls": {"Homepage": "https://github.com/rubenvdvijver/PESViewer.git"}, "release_url": "https://pypi.org/project/PESViewer/1.1/", "requires_dist": ["matplotlib", "numpy"], "requires_python": "", "summary": "Depiction of Potential Energy Surfaces.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PESViewer</h1>\n<p>Visualize a potential energy surface</p>\n<h2>Developer: Ruben Van de Vijver, Laboratory for Chemical Technology, Ghent University</h2>\n<p>The PESViewer is a code to depict and analyze a potential energy surface\ncharacterized by wells, bimolecular products, transition states and barrierless reactions.\nTheir energy is needed to plot the potential energy surface.\nWritten values of the energies and 2D plots (structural formulas) of the wells and products can be added to the figure</p>\n<p>To run this code, you need python version 2.7, matplotlib, numpy and optionally OpenBabel or RDKit to create 2D plots</p>\n<h2>INSTALL</h2>\n<p>Clone the project onto your machine and go to the PESViewer directory. Type:</p>\n<pre><code>python setup.py build\npython setup.py install \n</code></pre>\n<h2>INPUT</h2>\n<p>A text file containing the stationary points, energies, names identifiers and options, see the input.txt as example.</p>\n<p>For wells, write each well on a separate line as follows (smiles are optional to depict the molecule, if no xyz's are available):</p>\n<pre><code>name energy smiles\n</code></pre>\n<p>For bimolecular products (again smiles are optional):</p>\n<pre><code>name energy smiles\n</code></pre>\n<p>For reactions (colors are optional, and if available the line of the reaction will be given that color):</p>\n<pre><code>name energy reactant product color\n</code></pre>\n<p>For bimolecular products (again colors are optional)</p>\n<pre><code>name reactant product color\n</code></pre>\n<p>The plotting options (to be written in the input file) are:</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th>default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>0</td>\n<td>print a title (1) or not (0)</td>\n</tr>\n<tr>\n<td>units</td>\n<td>kcal/mol</td>\n<td>energy units</td>\n</tr>\n<tr>\n<td>use_xyz</td>\n<td>1</td>\n<td>use xyz, put 0  to switch off</td>\n</tr>\n<tr>\n<td>rescale</td>\n<td>0</td>\n<td>no rescale , put the well or bimolecular name here to rescale to that value</td>\n</tr>\n<tr>\n<td>fh</td>\n<td>9.</td>\n<td>figure height</td>\n</tr>\n<tr>\n<td>fw</td>\n<td>18.</td>\n<td>figure width</td>\n</tr>\n<tr>\n<td>margin</td>\n<td>0.2</td>\n<td>margin fraction on the x and y axis</td>\n</tr>\n<tr>\n<td>dpi</td>\n<td>120</td>\n<td>dpi of the molecule figures</td>\n</tr>\n<tr>\n<td>save</td>\n<td>0</td>\n<td>does the plot need to be saved (1) or displayed (0)</td>\n</tr>\n<tr>\n<td>write_ts_values</td>\n<td>1</td>\n<td>booleans tell if the ts energy values should be written</td>\n</tr>\n<tr>\n<td>write_well_values</td>\n<td>1</td>\n<td>booleans tell if the well and bimolecular energy values should be written</td>\n</tr>\n<tr>\n<td>bimol_color</td>\n<td>red</td>\n<td>color of the energy values for the bimolecular products</td>\n</tr>\n<tr>\n<td>well_color</td>\n<td>blue</td>\n<td>color of the energy values of the wells</td>\n</tr>\n<tr>\n<td>ts_color</td>\n<td>green</td>\n<td>color or the energy values of the ts, put to 'none' to use same color as line</td>\n</tr>\n<tr>\n<td>show_images</td>\n<td>1</td>\n<td>boolean tells whether the molecule images should be shown on the graph</td>\n</tr>\n<tr>\n<td>rdkit4depict</td>\n<td>1</td>\n<td>boolean that specifies which code to use for the 2D depiction</td>\n</tr>\n<tr>\n<td>axes_size</td>\n<td>10</td>\n<td>font size of the axes</td>\n</tr>\n<tr>\n<td>text_size</td>\n<td>10</td>\n<td>font size of the energy values on the graph</td>\n</tr></tbody></table>\n<p>Optionally a folder xyz/ containing the xyz coordinates of the stationary points ($name.xyz)\n(for bimolecular products, use several xyz coordinates files ($name$index.xyz) )</p>\n<h2>RUN</h2>\n<p>With the input file input.inp, type:</p>\n<pre><code>pesviewer input.inp\n</code></pre>\n<h2>OUTPUT</h2>\n<p>The output is a modifiable matplotlib figure.</p>\n<p>2 modifications are possible</p>\n<ul>\n<li>modifing the x-position of a stationary point by a 'drag and drop' of the energy value</li>\n<li>modifing the position of 2D structure images by a 'drag and drop' of the image</li>\n</ul>\n\n          </div>"}, "last_serial": 5545991, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "1e9eabfbf2e5e480e17e2de4ce6455bd", "sha256": "e4a333561684be6852bb8e3780145592f11b082981fb5f366ab5f7172ca7351e"}, "downloads": -1, "filename": "PESViewer-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e9eabfbf2e5e480e17e2de4ce6455bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13032, "upload_time": "2019-07-17T13:56:40", "upload_time_iso_8601": "2019-07-17T13:56:40.016886Z", "url": "https://files.pythonhosted.org/packages/48/3a/26c46d234c36e668b40bc909a447cdf92bb0727b27def67947b3ed4c3c7f/PESViewer-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e484011250fc876d4ae12325c71efb7", "sha256": "dd0074242dcaa7824874424c549d746221bd212260554afdf9e7ea1d1205d31d"}, "downloads": -1, "filename": "PESViewer-1.1.tar.gz", "has_sig": false, "md5_digest": "1e484011250fc876d4ae12325c71efb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11561, "upload_time": "2019-07-17T13:56:42", "upload_time_iso_8601": "2019-07-17T13:56:42.456244Z", "url": "https://files.pythonhosted.org/packages/5f/16/21d83b743021887b9b034c3a3593a13e35c134735cd32f30df665080c927/PESViewer-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e9eabfbf2e5e480e17e2de4ce6455bd", "sha256": "e4a333561684be6852bb8e3780145592f11b082981fb5f366ab5f7172ca7351e"}, "downloads": -1, "filename": "PESViewer-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e9eabfbf2e5e480e17e2de4ce6455bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13032, "upload_time": "2019-07-17T13:56:40", "upload_time_iso_8601": "2019-07-17T13:56:40.016886Z", "url": "https://files.pythonhosted.org/packages/48/3a/26c46d234c36e668b40bc909a447cdf92bb0727b27def67947b3ed4c3c7f/PESViewer-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e484011250fc876d4ae12325c71efb7", "sha256": "dd0074242dcaa7824874424c549d746221bd212260554afdf9e7ea1d1205d31d"}, "downloads": -1, "filename": "PESViewer-1.1.tar.gz", "has_sig": false, "md5_digest": "1e484011250fc876d4ae12325c71efb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11561, "upload_time": "2019-07-17T13:56:42", "upload_time_iso_8601": "2019-07-17T13:56:42.456244Z", "url": "https://files.pythonhosted.org/packages/5f/16/21d83b743021887b9b034c3a3593a13e35c134735cd32f30df665080c927/PESViewer-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:05 2020"}