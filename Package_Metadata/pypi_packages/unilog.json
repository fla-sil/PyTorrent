{"info": {"author": "Oleg Golovanov", "author_email": "golovanov.ov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "unilog\n------\n\n|Version| |PyVersions| |PyImplementations| |Status| |Coverage| |License|\n\nUnilog module aimed at facilitating the development and logging complex data structures, mainly for python2.7.\nIn python3, there is no such pain when printing complex data structures, so python3 support is due to backward\ncompatibility with the old code. But for python3, the functionality of registering converters will be useful,\nfor printing or logging complex data structures that do not override the __str__ method or need to represent them\nin a different way. The functionality of registering converters is also available for python2.7.\n\nUnilog provides 3 functions (their description can be obtained by the help function):\n\n* as_unicode\n* as_str\n* register_converter\n\nInstallation\n------------\n::\n\n    $ pip install unilog\n\nExample\n-------\n.. code-block:: python\n\n    data = {\n        'date': datetime.date(2016, 12, 6),\n        'datetime': datetime.datetime(2016, 12, 6, 11, 22, 33, 444444),\n        'str': 'item1',\n        'str2': '\u043f\u0443\u043d\u043a\u04422',\n        u'\u044e\u043d\u0438\u043a\u043e\u0434': u'\u043f\u0443\u043d\u043a\u04423',\n        'int': 4,\n        'float': 4.44,\n        'bytearray': bytearray([0, 1, 2]),\n        'NoneType': None,\n        'True': True,\n        'False': False,\n        'list': [\n            datetime.date(2016, 12, 6), datetime.datetime(2016, 12, 6, 11, 22, 33, 444444),\n            'item1', '\u043f\u0443\u043d\u043a\u04422', u'\u043f\u0443\u043d\u043a\u04423', 4, 4.44, bytearray([0, 1, 2]), None, True, False\n        ],\n        'tuple': (\n            datetime.date(2016, 12, 6), datetime.datetime(2016, 12, 6, 11, 22, 33, 444444),\n            'item1', '\u043f\u0443\u043d\u043a\u04422', u'\u043f\u0443\u043d\u043a\u04423', 4, 4.44, bytearray([0, 1, 2]), None, True, False\n        ),\n        'generator': (i for i in xrange(3, 6))\n    }\n\n    # default python2.7 behavior\n    >>> print unicode(data)\n    {'bytearray': bytearray(b'\\x00\\x01\\x02'), 'tuple': (datetime.date(2016, 12, 6),\n    datetime.datetime(2016, 12, 6, 11, 22, 33, 444444), 'item1',\n    '\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x822', u'\\u043f\\u0443\\u043d\\u043a\\u04423', 4, 4.44,\n    bytearray(b'\\x00\\x01\\x02'), None, True, False), 'int': 4, 'float': 4.44,\n    'datetime': datetime.datetime(2016, 12, 6, 11, 22, 33, 444444), 'date': datetime.date(2016, 12, 6),\n    'False': False, 'generator': <generator object <genexpr> at 0x7ff51a58df00>,\n    'str2': '\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x822', 'list': [datetime.date(2016, 12, 6),\n    datetime.datetime(2016, 12, 6, 11, 22, 33, 444444), 'item1',\n    '\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x822', u'\\u043f\\u0443\\u043d\\u043a\\u04423', 4, 4.44,\n    bytearray(b'\\x00\\x01\\x02'), None, True, False], 'str': 'item1',\n    u'\\u044e\\u043d\\u0438\\u043a\\u043e\\u0434': u'\\u043f\\u0443\\u043d\\u043a\\u04423', 'True': True,\n    'NoneType': None}\n\n    # use unilog.as_unicode function\n    >>> print unilog.as_unicode(data)\n    {'bytearray': b'\\\\x00\\\\x01\\\\x02', 'tuple': (u'2016-12-06', u'2016-12-06 11:22:33.444444', 'item1',\n    '\u043f\u0443\u043d\u043a\u04422', u'\u043f\u0443\u043d\u043a\u04423', 4, 4.44, b'\\\\x00\\\\x01\\\\x02', None, True, False), 'int': 4, 'float': 4.44,\n    'datetime': u'2016-12-06 11:22:33.444444', 'date': u'2016-12-06', 'False': False,\n    'generator': '<generator object <genexpr> at 0x7ff51a58df00>', 'str2': '\u043f\u0443\u043d\u043a\u04422',\n     'list': [u'2016-12-06', u'2016-12-06 11:22:33.444444', 'item1', '\u043f\u0443\u043d\u043a\u04422', u'\u043f\u0443\u043d\u043a\u04423', 4, 4.44,\n     b'\\\\x00\\\\x01\\\\x02', None, True, False], 'str': 'item1', u'\u044e\u043d\u0438\u043a\u043e\u0434': u'\u043f\u0443\u043d\u043a\u04423', 'True': True, 'NoneType': None}\n\n    # use unilog.as_unicode function with pretty print\n    >>> print unilog.as_unicode(data, pretty=True)\n    {\n        'bytearray': b'\\\\x00\\\\x01\\\\x02',\n        'tuple': (\n            u'2016-12-06',\n            u'2016-12-06 11:22:33.444444',\n            'item1',\n            '\u043f\u0443\u043d\u043a\u04422',\n            u'\u043f\u0443\u043d\u043a\u04423',\n            4,\n            4.44,\n            b'\\\\x00\\\\x01\\\\x02',\n            None,\n            True,\n            False\n        ),\n        'int': 4,\n        'float': 4.44,\n        'datetime': u'2016-12-06 11:22:33.444444',\n        'date': u'2016-12-06',\n        'False': False,\n        'generator': '<generator object <genexpr> at 0x7ff51a58df00>',\n        'str2': '\u043f\u0443\u043d\u043a\u04422',\n        'list': [\n            u'2016-12-06',\n            u'2016-12-06 11:22:33.444444',\n            'item1',\n            '\u043f\u0443\u043d\u043a\u04422',\n            u'\u043f\u0443\u043d\u043a\u04423',\n            4,\n            4.44,\n            b'\\\\x00\\\\x01\\\\x02',\n            None,\n            True,\n            False\n        ],\n        'str': 'item1',\n        u'\u044e\u043d\u0438\u043a\u043e\u0434': u'\u043f\u0443\u043d\u043a\u04423',\n        'True': True,\n        'NoneType': None\n    }\n\nLicense\n-------\nMIT licensed. See the bundled `LICENSE <https://github.com/oleg-golovanov/unilog/blob/master/LICENSE>`_ file for more details.\n\n.. |Version| image:: https://img.shields.io/pypi/v/unilog.svg\n    :target: https://pypi.python.org/pypi/unilog\n.. |PyVersions| image:: https://img.shields.io/pypi/pyversions/unilog.svg\n    :target: https://pypi.python.org/pypi/unilog\n.. |PyImplementations| image:: https://img.shields.io/pypi/implementation/unilog.svg\n    :target: https://pypi.python.org/pypi/unilog\n.. |Status| image:: https://img.shields.io/travis/oleg-golovanov/unilog.svg\n    :target: https://travis-ci.org/oleg-golovanov/unilog\n.. |Coverage| image:: https://img.shields.io/coveralls/oleg-golovanov/unilog.svg\n    :target: https://coveralls.io/github/oleg-golovanov/unilog\n.. |License| image:: https://img.shields.io/github/license/oleg-golovanov/unilog.svg\n    :target: https://github.com/oleg-golovanov/unilog/blob/master/LICENSE\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oleg-golovanov/unilog", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "unilog", "package_url": "https://pypi.org/project/unilog/", "platform": "any", "project_url": "https://pypi.org/project/unilog/", "project_urls": {"Homepage": "https://github.com/oleg-golovanov/unilog"}, "release_url": "https://pypi.org/project/unilog/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "Representing complex object as unicode or simple string.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"unilog\">\n<h2>unilog</h2>\n<p><a href=\"https://pypi.python.org/pypi/unilog\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce89b3fc0be2c468e25b11e05e0f0dcc3793ffc2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f756e696c6f672e737667\"></a> <a href=\"https://pypi.python.org/pypi/unilog\" rel=\"nofollow\"><img alt=\"PyVersions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/216d83090c2d20b8a5d764552724e8805d21d483/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f756e696c6f672e737667\"></a> <a href=\"https://pypi.python.org/pypi/unilog\" rel=\"nofollow\"><img alt=\"PyImplementations\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/729e15e5f92dcf72b497166b8f77a5dbd5290c1d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f756e696c6f672e737667\"></a> <a href=\"https://travis-ci.org/oleg-golovanov/unilog\" rel=\"nofollow\"><img alt=\"Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/453812354e159a7a710c2af3baa6b08177474f87/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f6c65672d676f6c6f76616e6f762f756e696c6f672e737667\"></a> <a href=\"https://coveralls.io/github/oleg-golovanov/unilog\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc6f2e4d5f86655d92f305e0f56491f4fd131174/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6f6c65672d676f6c6f76616e6f762f756e696c6f672e737667\"></a> <a href=\"https://github.com/oleg-golovanov/unilog/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a603ec02d5308f7239be6826a16a5c2eb9a6a440/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f6c65672d676f6c6f76616e6f762f756e696c6f672e737667\"></a></p>\n<p>Unilog module aimed at facilitating the development and logging complex data structures, mainly for python2.7.\nIn python3, there is no such pain when printing complex data structures, so python3 support is due to backward\ncompatibility with the old code. But for python3, the functionality of registering converters will be useful,\nfor printing or logging complex data structures that do not override the __str__ method or need to represent them\nin a different way. The functionality of registering converters is also available for python2.7.</p>\n<p>Unilog provides 3 functions (their description can be obtained by the help function):</p>\n<ul>\n<li>as_unicode</li>\n<li>as_str</li>\n<li>register_converter</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install unilog\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n    <span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span>\n    <span class=\"s1\">'str'</span><span class=\"p\">:</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'str2'</span><span class=\"p\">:</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span>\n    <span class=\"sa\">u</span><span class=\"s1\">'\u044e\u043d\u0438\u043a\u043e\u0434'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'int'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'float'</span><span class=\"p\">:</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n    <span class=\"s1\">'bytearray'</span><span class=\"p\">:</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'NoneType'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'True'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'False'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span>\n        <span class=\"s1\">'item1'</span><span class=\"p\">,</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'tuple'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span>\n        <span class=\"s1\">'item1'</span><span class=\"p\">,</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span> <span class=\"nb\">bytearray</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'generator'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># default python2.7 behavior</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">unicode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'bytearray'</span><span class=\"p\">:</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00\\x01\\x02</span><span class=\"s1\">'</span><span class=\"p\">),</span> <span class=\"s1\">'tuple'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n<span class=\"s1\">'</span><span class=\"se\">\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x82</span><span class=\"s1\">2'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\u043f\\u0443\\u043d\\u043a\\u0442</span><span class=\"s1\">3'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00\\x01\\x02</span><span class=\"s1\">'</span><span class=\"p\">),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"s1\">'int'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'float'</span><span class=\"p\">:</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n<span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span> <span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"s1\">'False'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'generator'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"o\">&lt;</span><span class=\"n\">genexpr</span><span class=\"o\">&gt;</span> <span class=\"n\">at</span> <span class=\"mh\">0x7ff51a58df00</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"s1\">'str2'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x82</span><span class=\"s1\">2'</span><span class=\"p\">,</span> <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">444444</span><span class=\"p\">),</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n<span class=\"s1\">'</span><span class=\"se\">\\xd0\\xbf\\xd1\\x83\\xd0\\xbd\\xd0\\xba\\xd1\\x82</span><span class=\"s1\">2'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\u043f\\u0443\\u043d\\u043a\\u0442</span><span class=\"s1\">3'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n<span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00\\x01\\x02</span><span class=\"s1\">'</span><span class=\"p\">),</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span> <span class=\"s1\">'str'</span><span class=\"p\">:</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n<span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\u044e\\u043d\\u0438\\u043a\\u043e\\u0434</span><span class=\"s1\">'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\u043f\\u0443\\u043d\\u043a\\u0442</span><span class=\"s1\">3'</span><span class=\"p\">,</span> <span class=\"s1\">'True'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"s1\">'NoneType'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># use unilog.as_unicode function</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">unilog</span><span class=\"o\">.</span><span class=\"n\">as_unicode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'bytearray'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span> <span class=\"s1\">'tuple'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n<span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"s1\">'int'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'float'</span><span class=\"p\">:</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n<span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span> <span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span> <span class=\"s1\">'False'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"s1\">'generator'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;generator object &lt;genexpr&gt; at 0x7ff51a58df00&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'str2'</span><span class=\"p\">:</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span>\n <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">],</span> <span class=\"s1\">'str'</span><span class=\"p\">:</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'\u044e\u043d\u0438\u043a\u043e\u0434'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span> <span class=\"s1\">'True'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'NoneType'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># use unilog.as_unicode function with pretty print</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">unilog</span><span class=\"o\">.</span><span class=\"n\">as_unicode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">pretty</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'bytearray'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'tuple'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span>\n        <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n        <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">'int'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'float'</span><span class=\"p\">:</span> <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n    <span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'date'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'False'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'generator'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;generator object &lt;genexpr&gt; at 0x7ff51a58df00&gt;'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'str2'</span><span class=\"p\">:</span> <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'list'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06'</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'2016-12-06 11:22:33.444444'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u043f\u0443\u043d\u043a\u04422'</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span>\n        <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"mf\">4.44</span><span class=\"p\">,</span>\n        <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">x00</span><span class=\"se\">\\\\</span><span class=\"s1\">x01</span><span class=\"se\">\\\\</span><span class=\"s1\">x02'</span><span class=\"p\">,</span>\n        <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"kc\">False</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'str'</span><span class=\"p\">:</span> <span class=\"s1\">'item1'</span><span class=\"p\">,</span>\n    <span class=\"sa\">u</span><span class=\"s1\">'\u044e\u043d\u0438\u043a\u043e\u0434'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'\u043f\u0443\u043d\u043a\u04423'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'True'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'NoneType'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT licensed. See the bundled <a href=\"https://github.com/oleg-golovanov/unilog/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 3112735, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0271cca455a008ed5fa4fcdab606dc9a", "sha256": "a2e0fa8d32698ab33451c6c1f9c891404c3918728a345d51593e36dae5dadde1"}, "downloads": -1, "filename": "unilog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0271cca455a008ed5fa4fcdab606dc9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2926, "upload_time": "2016-12-07T08:21:54", "upload_time_iso_8601": "2016-12-07T08:21:54.259055Z", "url": "https://files.pythonhosted.org/packages/74/91/2520ff8271d4611d46d387c610c5d84c6d6e11b4bd2a603f1296c575311c/unilog-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "59429d66f69bc5a5004f96ccce3888c8", "sha256": "9643dec2e5441be11740408a8f0da96ed9439e3b15652148ec85026bb9aeed4a"}, "downloads": -1, "filename": "unilog-1.1.0.tar.gz", "has_sig": false, "md5_digest": "59429d66f69bc5a5004f96ccce3888c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2952, "upload_time": "2016-12-07T10:32:08", "upload_time_iso_8601": "2016-12-07T10:32:08.622550Z", "url": "https://files.pythonhosted.org/packages/81/93/8b971e72a859429c155cd2a05f58a891ec6cf77a9c978096f968188e58b1/unilog-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "cee1b4f230566fc4f478220bc729a654", "sha256": "9b5eca2ae78dc5852677ac75b54f4dd8211a02a1fc74bbc08caf64c8b33ab427"}, "downloads": -1, "filename": "unilog-1.2.0.tar.gz", "has_sig": false, "md5_digest": "cee1b4f230566fc4f478220bc729a654", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3025, "upload_time": "2016-12-08T10:06:22", "upload_time_iso_8601": "2016-12-08T10:06:22.317982Z", "url": "https://files.pythonhosted.org/packages/4a/7e/5bcae68876955b4a6ddff3942788b8d91f62d95790715454cf1b77c5c020/unilog-1.2.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "92bd8c46c74ffedd9b72b4e18fda5900", "sha256": "9b4701f061bce6081e18eb55b22dea1917fee5ddcfee6d296866724345f1925f"}, "downloads": -1, "filename": "unilog-1.3.1.tar.gz", "has_sig": false, "md5_digest": "92bd8c46c74ffedd9b72b4e18fda5900", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3551, "upload_time": "2016-12-28T13:25:54", "upload_time_iso_8601": "2016-12-28T13:25:54.321620Z", "url": "https://files.pythonhosted.org/packages/6f/3f/159a6ffc1778b2521969d130600e27e57c2adbeaa2112fc1bbef8fe4b99d/unilog-1.3.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "c003ce2ee3bad4ed284f4d7fbd4d0727", "sha256": "5256dd85bb9ba331cee1d4c4c59ac44e98e99052be1487162fd0e93d01090e82"}, "downloads": -1, "filename": "unilog-2.0.0.tar.gz", "has_sig": false, "md5_digest": "c003ce2ee3bad4ed284f4d7fbd4d0727", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4464, "upload_time": "2017-08-21T19:06:20", "upload_time_iso_8601": "2017-08-21T19:06:20.009747Z", "url": "https://files.pythonhosted.org/packages/ca/5a/f1e0be335facc69e9590b0f89cb3011366d4b12979d2103dff87306cb871/unilog-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c003ce2ee3bad4ed284f4d7fbd4d0727", "sha256": "5256dd85bb9ba331cee1d4c4c59ac44e98e99052be1487162fd0e93d01090e82"}, "downloads": -1, "filename": "unilog-2.0.0.tar.gz", "has_sig": false, "md5_digest": "c003ce2ee3bad4ed284f4d7fbd4d0727", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4464, "upload_time": "2017-08-21T19:06:20", "upload_time_iso_8601": "2017-08-21T19:06:20.009747Z", "url": "https://files.pythonhosted.org/packages/ca/5a/f1e0be335facc69e9590b0f89cb3011366d4b12979d2103dff87306cb871/unilog-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:31 2020"}