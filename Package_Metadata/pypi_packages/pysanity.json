{"info": {"author": "Trevor Joynson", "author_email": "github@skywww.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Software Development :: Libraries"], "description": "pysanity\n========\n\nEmulates sanity for other people's dirty ass non-pep compliant code via only the /dirtiest/ of means.\n\nTested with Python 2.7, 3.5.\n\n|Test Status| |Coverage Status| |Documentation Status|\n\n-  PyPi: https://pypi.python.org/pypi/pysanity\n\nAnd that means?\n---------------\n\nHi! I'm `pysanity` and I turn:\n\n.. code:: python\n\n    import logging\n    log = logging.getLogger(__name__)\n\nInto the much less brain numbing:\n\n.. code:: python\n\n    from pysanity import logging\n    log = logging.get_logger(__name__)\n\nAll the while keeping your precious code completion working as expected thanks to a not grossly over-dynamic nature.\n\nYou're welcome for my existence on PyPi.\n\nLogging you say?\n----------------\n\n*Hint:* Try this out and stop accepting needless boilerplate in your code, stdlib or not:\n\n.. code:: python\n\n    import logging\n    import logging.config\n    import inspect\n\n\n    def _namespace_from_calling_context():\n        \"\"\"\n        Derive a namespace from the module containing the caller's caller.\n\n        :return str: the fully qualified python name of a module.\n        \"\"\"\n        return inspect.currentframe().f_back.f_back.f_globals['__name__']\n\n\n    def get_logger(name=None):\n        \"\"\"\n        Gets a logger instance with sensible defaults according to caller context.\n\n        :param str name: Logger name. Defaults to caller's `__name__`.\n        :return logging.Logger: Logger instance\n        \"\"\"\n        if not name:\n            name = _namespace_from_calling_context()\n\n        return logging.getLogger(name)\n\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install pysanity\n\n\nRunning tests\n-------------\n\nTox is used to handle testing multiple python versions.\n\n.. code:: sh\n\n    tox\n\n\n.. |Test Status| image:: https://circleci.com/gh/akatrevorjay/pysanity.svg?style=svg\n   :target: https://circleci.com/gh/akatrevorjay/pysanity\n.. |Coverage Status| image:: https://coveralls.io/repos/akatrevorjay/pysanity/badge.svg?branch=develop&service=github\n   :target: https://coveralls.io/github/akatrevorjay/pysanity?branch=develop\n.. |Documentation Status| image:: https://readthedocs.org/projects/pysanity/badge/?version=latest\n   :target: http://pysanity.readthedocs.org/en/latest/?badge=latest\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/akatrevorjay/pysanity", "keywords": "magic\nsanity\npep8\nlogging\ntwisted", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "pysanity", "package_url": "https://pypi.org/project/pysanity/", "platform": "", "project_url": "https://pypi.org/project/pysanity/", "project_urls": {"Homepage": "https://github.com/akatrevorjay/pysanity"}, "release_url": "https://pypi.org/project/pysanity/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Emulates sanity for other people's dirty ass non-pep compliant code via only the /dirtiest/ of means.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Emulates sanity for other people\u2019s dirty ass non-pep compliant code via only the /dirtiest/ of means.</p>\n<p>Tested with Python 2.7, 3.5.</p>\n<p><a href=\"https://circleci.com/gh/akatrevorjay/pysanity\" rel=\"nofollow\"><img alt=\"Test Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05a5a955c7c873309244149759dd40bbe492e1de/68747470733a2f2f636972636c6563692e636f6d2f67682f616b61747265766f726a61792f707973616e6974792e7376673f7374796c653d737667\"></a> <a href=\"https://coveralls.io/github/akatrevorjay/pysanity?branch=develop\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/571229c7ceb33df267e08b567c9dcdcb9bdee393/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616b61747265766f726a61792f707973616e6974792f62616467652e7376673f6272616e63683d646576656c6f7026736572766963653d676974687562\"></a> <a href=\"http://pysanity.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af7becc50292a23ab5eb7c628b609c92d07d87c2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707973616e6974792f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<ul>\n<li>PyPi: <a href=\"https://pypi.python.org/pypi/pysanity\" rel=\"nofollow\">https://pypi.python.org/pypi/pysanity</a></li>\n</ul>\n<div id=\"and-that-means\">\n<h2>And that means?</h2>\n<p>Hi! I\u2019m <cite>pysanity</cite> and I turn:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>Into the much less brain numbing:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pysanity</span> <span class=\"kn\">import</span> <span class=\"n\">logging</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>All the while keeping your precious code completion working as expected thanks to a not grossly over-dynamic nature.</p>\n<p>You\u2019re welcome for my existence on PyPi.</p>\n</div>\n<div id=\"logging-you-say\">\n<h2>Logging you say?</h2>\n<p><em>Hint:</em> Try this out and stop accepting needless boilerplate in your code, stdlib or not:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_namespace_from_calling_context</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"\n    Derive a namespace from the module containing the caller's caller.\n\n    :return str: the fully qualified python name of a module.\n    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">currentframe</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">f_back</span><span class=\"o\">.</span><span class=\"n\">f_back</span><span class=\"o\">.</span><span class=\"n\">f_globals</span><span class=\"p\">[</span><span class=\"s1\">'__name__'</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_logger</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Gets a logger instance with sensible defaults according to caller context.\n\n    :param str name: Logger name. Defaults to caller's `__name__`.\n    :return logging.Logger: Logger instance\n    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">_namespace_from_calling_context</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pysanity\n</pre>\n</div>\n<div id=\"running-tests\">\n<h2>Running tests</h2>\n<p>Tox is used to handle testing multiple python versions.</p>\n<pre>tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3021394, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fe255fc049c5b3bdf94773a7f5e4192d", "sha256": "230750eb7d7320f6fea7760d02de22fe06f0e057b29f166fdc89cefc814df14e"}, "downloads": -1, "filename": "pysanity-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "fe255fc049c5b3bdf94773a7f5e4192d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7985, "upload_time": "2017-07-13T20:23:43", "upload_time_iso_8601": "2017-07-13T20:23:43.243686Z", "url": "https://files.pythonhosted.org/packages/2b/57/5798de7fb3e005b2fa946c439e921f8cdf7c65e997be5d4b36c825a46562/pysanity-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "577200c89ab160381870169010f83242", "sha256": "e9b413b805c6f18d97514f7b4016f3e9a812a4c3a4dacd1161c76877ff397985"}, "downloads": -1, "filename": "pysanity-0.0.1.tar.gz", "has_sig": false, "md5_digest": "577200c89ab160381870169010f83242", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18264, "upload_time": "2017-07-13T20:23:41", "upload_time_iso_8601": "2017-07-13T20:23:41.471292Z", "url": "https://files.pythonhosted.org/packages/63/69/07cce0e83ce5746a6e6613013fa781931c23f18af8dfebf20b80f2cad6c8/pysanity-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe255fc049c5b3bdf94773a7f5e4192d", "sha256": "230750eb7d7320f6fea7760d02de22fe06f0e057b29f166fdc89cefc814df14e"}, "downloads": -1, "filename": "pysanity-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "fe255fc049c5b3bdf94773a7f5e4192d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7985, "upload_time": "2017-07-13T20:23:43", "upload_time_iso_8601": "2017-07-13T20:23:43.243686Z", "url": "https://files.pythonhosted.org/packages/2b/57/5798de7fb3e005b2fa946c439e921f8cdf7c65e997be5d4b36c825a46562/pysanity-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "577200c89ab160381870169010f83242", "sha256": "e9b413b805c6f18d97514f7b4016f3e9a812a4c3a4dacd1161c76877ff397985"}, "downloads": -1, "filename": "pysanity-0.0.1.tar.gz", "has_sig": false, "md5_digest": "577200c89ab160381870169010f83242", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18264, "upload_time": "2017-07-13T20:23:41", "upload_time_iso_8601": "2017-07-13T20:23:41.471292Z", "url": "https://files.pythonhosted.org/packages/63/69/07cce0e83ce5746a6e6613013fa781931c23f18af8dfebf20b80f2cad6c8/pysanity-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:24 2020"}