{"info": {"author": "Blixt", "author_email": "me@blixt.nyc", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Games/Entertainment", "Topic :: Utilities"], "description": "# Starbound utilities for Python\n\nThis is a library to parse Starbound's file formats which are used to\nstore worlds, player characters, assets, etc.\n\nFeel free to contribute either via submitting pull requests or writing\nup issues with suggestions and/or bugs.\n\n## File & data formats\n\nCheck out [FORMATS.md](./FORMATS.md) for technical information on\nStarbound's file and data formats.\n\n## Installation\n\npy-starbound can be installed (either to your system, user account, or\nvirtualenv) using the usual `setup.py` script:\n\n```bash\n$ python setup.py install\n```\n\nAfter installation, the commandline utilities (described below) should\nbe available in your `$PATH` can can be run like any other app:\n\n```bash\n$ pystarbound-export [args]\n$ pystarbound-region [args]\n```\n\nIf you wish to run these utilities from the git checkout itself (without\ninstalling first), the syntax is slightly more verbose:\n\n```bash\n$ python -m starbound.cliexport [args]\n$ python -m starbound.cliregion [args]\n```\n\n## Command line utilities\n\n### Extracting `.pak` files\n\nYou can use the `pystarbound-export` script to extract all the files in a `.pak`\n(or `.modpak`) file.\n\nExample:\n\n```bash\n$ pystarbound-export -d assets /Starbound/assets/packed.pak\n```\n\nOr from the git checkout directly:\n\n```bash\n$ python -m starbound.cliexport -d assets /Starbound/assets/packed.pak\n```\n\n### Getting world info\n\nIf you want information about a region in a world (planet or ship), you\ncan use the `region.py` script. For example, here's how to pretty print\nthe tiles in a region:\n\n```bash\n$ pystarbound-region /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world\nWorld size:        3000\u00d72000\nSpawn point:       (1224.0, 676.0)\nOutputting region: (37, 21)\nOutputting value:  foreground_material\n```\n\nOr from the git checkout directly:\n\n```bash\n$ python -m starbound.cliregion /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world\n```\n\nOutputs something like this:\n\n![](http://i.imgur.com/b4ZitYX.png)\n\nIf you don't provide X and Y coordinates after the path, it will\ndefault to the region that the spawn point is in.\n\nYou can also output specific tile values (instead of the foreground)\nusing `--value-index` (or `-v`):\n\n```bash\n$ pystarbound-region --value-index=12 /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world 69 27\nWorld size:        3000\u00d72000\nSpawn point:       (1224.0, 676.0)\nOutputting region: (69, 27)\nOutputting value:  liquid_pressure\n```\n\nOutputs something like this:\n\n![](http://i.imgur.com/XZ3OYTO.png)\n\nAnd here's how to print the entities in a region:\n\n```bash\n$ pystarbound-region --entities /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world 69 27\nWorld size:        3000\u00d72000\nSpawn point:       (1224.0, 676.0)\nOutputting region: (69, 27)\n\n[\n  [\n    \"ObjectEntity\",\n    8,\n    {\n      \"direction\": \"left\",\n      \"inputWireNodes\": [],\n      \"interactive\": true,\n      \"name\": \"wiringstation\",\n      \"orientationIndex\": 0,\n      \"outputWireNodes\": [],\n      \"parameters\": {\n        \"owner\": \"916d5878483e3a40d10467dc419982c2\"\n      },\n      \"scriptStorage\": {},\n...\n```\n\n## Using the Python package\n\nThe Python package lets you read data from Starbound's various file\nformats. The classes and functions expect file objects to read from.\n\nYou can use the `mmap` package to improve performance for large files,\nsuch as `packed.pak` and world files.\n\n### Example: Reading a player file\n\nHere's how to print the name of a player:\n\n```python\nimport starbound\n\nwith open('player/11475cedd80ead373c19a91de2e2c4d3.player', 'rb') as fh:\n  player = starbound.read_sbvj01(fh)\n  print('Hello, {}!'.format(player.data['identity']['name']))\n```\n\n### Example: World files\n\nIn the following example the `mmap` package is used for faster access:\n\n```python\nimport mmap, starbound\n\nwith open('universe/43619853_198908799_-9440367_6_3.world', 'rb') as fh:\n  mm = mmap.mmap(fh.fileno(), 0, access=mmap.ACCESS_READ)\n\n  world = starbound.World(mm)\n  world.read_metadata()\n\n  print('World size: {}\u00d7{}'.format(world.width, world.height))\n  x, y = world.metadata['playerStart']\n  print('Player spawns at ({}, {})'.format(x, y))\n\n  # Regions consist of 32\u00d732 tiles.\n  rx, ry = x // 32, y // 32\n  print('An entity: {}'.format(world.get_entities(rx, ry)[0]))\n```\n\n### Example: Easy access to various world attributes\n\nA vast amount of information about loaded Worlds is available via the\n`metadata` attribute (as seen in the above section), but some\ninformation is also abstracted out into an `info` attribute. For instance:\n\n```python\nworld = starbound.World(fh)\nprint('World Name: {}'.format(world.info.name))\nprint('World Description: {}'.format(world.info.description))\nprint('World Coordinates: ({}, {})'.format(world.info.coords[0], world.info.coords[1]))\n```\n\nThe full list of attributes currently available are:\n\n| Attribute      | Description                                                                                                                                                     |\n| -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `biomes`       | The full set of biomes found on the world. This should be a complete list, regardless of how much of the world has been explored.                               |\n| `coords`       | World coordinates, as a tuple. The first two elements are the in-map coordinates of the system, the third is effectively random but describes the world itself. |\n| `description`  | The internal description of the world. Will often include text describing the tier of the world.                                                                |\n| `dungeons`     | The full set of dungeons found on the world. This should be a complete list, regardless of how much of the world has been explored.                             |\n| `name`         | The name of the world. Will often include Starbound coloration markup.                                                                                          |\n| `size`         | A tuple describing the width and height of the world.                                                                                                           |\n| `world_biomes` | A set of the main biome IDs of the world, of the sort reported in the ingame navigation screen.                                                                 |\n\n### Example: Finding an entity by UUID/ID\n\nMany entities in Starbound, such as bookmarked flags, mech beacons,\nquest markers, etc, have UUIDs or IDs which the game can use to find\nwhere they are in the map without having to have all regions loaded.\nPlayer bookmark UUIDs can be found in the `player.data['universeMap']`\ndict, underneath `teleportBookmarks`. One object type which does\n_not_ use UUIDs is a level's mech beacon, which instead uses the magic\nstring `mechbeacon`. To find the ingame coordinates for a level's\nbeacon (if one is present), this can be used:\n\n```python\nmechbeacon_coords = world.get_entity_uuid_coords('mechbeacon')\nif mechbeacon_coords:\n  print('Mech beacon found at ({}, {})'.format(*mechbeacon_coords))\nelse:\n  print('No mech beacon in level!')\n```\n\n### Example: Getting assets from `packed.pak`\n\nStarbound keeps most of the assets (images, configuration files,\ndungeons, etc.) in a file called `packed.pak`. This file uses a special\nformat which can be read by py-starbound, as you can see below.\n\n```python\nimport starbound\n\nwith open('assets/packed.pak', 'rb') as fh:\n  package = starbound.SBAsset6(fh)\n\n  # Print the contents of a file in the asset package.\n  print(package.get('/lighting.config'))\n```\n\n### Example: Modifying Starbound files\n\nCurrently, only the SBVJ01 file format can be written by py-starbound.\nThis means player files, client context files, and the statistics file.\n\nHere's an example that renames a player (WARNING: Always back up files\nbefore writing to them!):\n\n```python\nimport starbound\n\nwith open('player/420ed511f83b3760dead42a173339b3e.player', 'r+b') as fh:\n  player = starbound.read_sbvj01(fh)\n\n  old_name = player.data['identity']['name']\n  new_name = old_name.encode('rot13')\n  player.data['identity']['name'] = new_name\n  print('Updating name: {} -> {}'.format(old_name, new_name))\n\n  # Go back to the beginning of the file and write the updated data.\n  fh.seek(0)\n  starbound.write_sbvj01(fh, player)\n  # If the file got shorter, truncate away the remaining content.\n  fh.truncate()\n```\n\n## License\n\n[MIT License](./LICENSE)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blixt/py-starbound", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "py-starbound", "package_url": "https://pypi.org/project/py-starbound/", "platform": "", "project_url": "https://pypi.org/project/py-starbound/", "project_urls": {"Homepage": "https://github.com/blixt/py-starbound"}, "release_url": "https://pypi.org/project/py-starbound/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Python package for working with Starbound files.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Starbound utilities for Python</h1>\n<p>This is a library to parse Starbound's file formats which are used to\nstore worlds, player characters, assets, etc.</p>\n<p>Feel free to contribute either via submitting pull requests or writing\nup issues with suggestions and/or bugs.</p>\n<h2>File &amp; data formats</h2>\n<p>Check out <a href=\"./FORMATS.md\" rel=\"nofollow\">FORMATS.md</a> for technical information on\nStarbound's file and data formats.</p>\n<h2>Installation</h2>\n<p>py-starbound can be installed (either to your system, user account, or\nvirtualenv) using the usual <code>setup.py</code> script:</p>\n<pre>$ python setup.py install\n</pre>\n<p>After installation, the commandline utilities (described below) should\nbe available in your <code>$PATH</code> can can be run like any other app:</p>\n<pre>$ pystarbound-export <span class=\"o\">[</span>args<span class=\"o\">]</span>\n$ pystarbound-region <span class=\"o\">[</span>args<span class=\"o\">]</span>\n</pre>\n<p>If you wish to run these utilities from the git checkout itself (without\ninstalling first), the syntax is slightly more verbose:</p>\n<pre>$ python -m starbound.cliexport <span class=\"o\">[</span>args<span class=\"o\">]</span>\n$ python -m starbound.cliregion <span class=\"o\">[</span>args<span class=\"o\">]</span>\n</pre>\n<h2>Command line utilities</h2>\n<h3>Extracting <code>.pak</code> files</h3>\n<p>You can use the <code>pystarbound-export</code> script to extract all the files in a <code>.pak</code>\n(or <code>.modpak</code>) file.</p>\n<p>Example:</p>\n<pre>$ pystarbound-export -d assets /Starbound/assets/packed.pak\n</pre>\n<p>Or from the git checkout directly:</p>\n<pre>$ python -m starbound.cliexport -d assets /Starbound/assets/packed.pak\n</pre>\n<h3>Getting world info</h3>\n<p>If you want information about a region in a world (planet or ship), you\ncan use the <code>region.py</code> script. For example, here's how to pretty print\nthe tiles in a region:</p>\n<pre>$ pystarbound-region /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world\nWorld size:        <span class=\"m\">3000</span>\u00d72000\nSpawn point:       <span class=\"o\">(</span><span class=\"m\">1224</span>.0, <span class=\"m\">676</span>.0<span class=\"o\">)</span>\nOutputting region: <span class=\"o\">(</span><span class=\"m\">37</span>, <span class=\"m\">21</span><span class=\"o\">)</span>\nOutputting value:  foreground_material\n</pre>\n<p>Or from the git checkout directly:</p>\n<pre>$ python -m starbound.cliregion /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world\n</pre>\n<p>Outputs something like this:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53e8d2f3d6b94d91a385f32675d79fa44ae1a461/687474703a2f2f692e696d6775722e636f6d2f62345a697459582e706e67\"></p>\n<p>If you don't provide X and Y coordinates after the path, it will\ndefault to the region that the spawn point is in.</p>\n<p>You can also output specific tile values (instead of the foreground)\nusing <code>--value-index</code> (or <code>-v</code>):</p>\n<pre>$ pystarbound-region --value-index<span class=\"o\">=</span><span class=\"m\">12</span> /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world <span class=\"m\">69</span> <span class=\"m\">27</span>\nWorld size:        <span class=\"m\">3000</span>\u00d72000\nSpawn point:       <span class=\"o\">(</span><span class=\"m\">1224</span>.0, <span class=\"m\">676</span>.0<span class=\"o\">)</span>\nOutputting region: <span class=\"o\">(</span><span class=\"m\">69</span>, <span class=\"m\">27</span><span class=\"o\">)</span>\nOutputting value:  liquid_pressure\n</pre>\n<p>Outputs something like this:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc829192dbcd3c936f893266bd413495583ac570/687474703a2f2f692e696d6775722e636f6d2f585a334f59544f2e706e67\"></p>\n<p>And here's how to print the entities in a region:</p>\n<pre>$ pystarbound-region --entities /Starbound/storage/universe/-382912739_-582615456_-73870035_3.world <span class=\"m\">69</span> <span class=\"m\">27</span>\nWorld size:        <span class=\"m\">3000</span>\u00d72000\nSpawn point:       <span class=\"o\">(</span><span class=\"m\">1224</span>.0, <span class=\"m\">676</span>.0<span class=\"o\">)</span>\nOutputting region: <span class=\"o\">(</span><span class=\"m\">69</span>, <span class=\"m\">27</span><span class=\"o\">)</span>\n\n<span class=\"o\">[</span>\n  <span class=\"o\">[</span>\n    <span class=\"s2\">\"ObjectEntity\"</span>,\n    <span class=\"m\">8</span>,\n    <span class=\"o\">{</span>\n      <span class=\"s2\">\"direction\"</span>: <span class=\"s2\">\"left\"</span>,\n      <span class=\"s2\">\"inputWireNodes\"</span>: <span class=\"o\">[]</span>,\n      <span class=\"s2\">\"interactive\"</span>: true,\n      <span class=\"s2\">\"name\"</span>: <span class=\"s2\">\"wiringstation\"</span>,\n      <span class=\"s2\">\"orientationIndex\"</span>: <span class=\"m\">0</span>,\n      <span class=\"s2\">\"outputWireNodes\"</span>: <span class=\"o\">[]</span>,\n      <span class=\"s2\">\"parameters\"</span>: <span class=\"o\">{</span>\n        <span class=\"s2\">\"owner\"</span>: <span class=\"s2\">\"916d5878483e3a40d10467dc419982c2\"</span>\n      <span class=\"o\">}</span>,\n      <span class=\"s2\">\"scriptStorage\"</span>: <span class=\"o\">{}</span>,\n...\n</pre>\n<h2>Using the Python package</h2>\n<p>The Python package lets you read data from Starbound's various file\nformats. The classes and functions expect file objects to read from.</p>\n<p>You can use the <code>mmap</code> package to improve performance for large files,\nsuch as <code>packed.pak</code> and world files.</p>\n<h3>Example: Reading a player file</h3>\n<p>Here's how to print the name of a player:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starbound</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'player/11475cedd80ead373c19a91de2e2c4d3.player'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n  <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">read_sbvj01</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello, </span><span class=\"si\">{}</span><span class=\"s1\">!'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'identity'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">]))</span>\n</pre>\n<h3>Example: World files</h3>\n<p>In the following example the <code>mmap</code> package is used for faster access:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mmap</span><span class=\"o\">,</span> <span class=\"nn\">starbound</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'universe/43619853_198908799_-9440367_6_3.world'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n  <span class=\"n\">mm</span> <span class=\"o\">=</span> <span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">mmap</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">(),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">access</span><span class=\"o\">=</span><span class=\"n\">mmap</span><span class=\"o\">.</span><span class=\"n\">ACCESS_READ</span><span class=\"p\">)</span>\n\n  <span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">World</span><span class=\"p\">(</span><span class=\"n\">mm</span><span class=\"p\">)</span>\n  <span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">read_metadata</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'World size: </span><span class=\"si\">{}</span><span class=\"s1\">\u00d7</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">))</span>\n  <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">'playerStart'</span><span class=\"p\">]</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Player spawns at (</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n\n  <span class=\"c1\"># Regions consist of 32\u00d732 tiles.</span>\n  <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">//</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">//</span> <span class=\"mi\">32</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'An entity: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">get_entities</span><span class=\"p\">(</span><span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n</pre>\n<h3>Example: Easy access to various world attributes</h3>\n<p>A vast amount of information about loaded Worlds is available via the\n<code>metadata</code> attribute (as seen in the above section), but some\ninformation is also abstracted out into an <code>info</code> attribute. For instance:</p>\n<pre><span class=\"n\">world</span> <span class=\"o\">=</span> <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">World</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'World Name: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'World Description: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'World Coordinates: (</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">coords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</pre>\n<p>The full list of attributes currently available are:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>biomes</code></td>\n<td>The full set of biomes found on the world. This should be a complete list, regardless of how much of the world has been explored.</td>\n</tr>\n<tr>\n<td><code>coords</code></td>\n<td>World coordinates, as a tuple. The first two elements are the in-map coordinates of the system, the third is effectively random but describes the world itself.</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>The internal description of the world. Will often include text describing the tier of the world.</td>\n</tr>\n<tr>\n<td><code>dungeons</code></td>\n<td>The full set of dungeons found on the world. This should be a complete list, regardless of how much of the world has been explored.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>The name of the world. Will often include Starbound coloration markup.</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>A tuple describing the width and height of the world.</td>\n</tr>\n<tr>\n<td><code>world_biomes</code></td>\n<td>A set of the main biome IDs of the world, of the sort reported in the ingame navigation screen.</td>\n</tr></tbody></table>\n<h3>Example: Finding an entity by UUID/ID</h3>\n<p>Many entities in Starbound, such as bookmarked flags, mech beacons,\nquest markers, etc, have UUIDs or IDs which the game can use to find\nwhere they are in the map without having to have all regions loaded.\nPlayer bookmark UUIDs can be found in the <code>player.data['universeMap']</code>\ndict, underneath <code>teleportBookmarks</code>. One object type which does\n<em>not</em> use UUIDs is a level's mech beacon, which instead uses the magic\nstring <code>mechbeacon</code>. To find the ingame coordinates for a level's\nbeacon (if one is present), this can be used:</p>\n<pre><span class=\"n\">mechbeacon_coords</span> <span class=\"o\">=</span> <span class=\"n\">world</span><span class=\"o\">.</span><span class=\"n\">get_entity_uuid_coords</span><span class=\"p\">(</span><span class=\"s1\">'mechbeacon'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">mechbeacon_coords</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Mech beacon found at (</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">mechbeacon_coords</span><span class=\"p\">))</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'No mech beacon in level!'</span><span class=\"p\">)</span>\n</pre>\n<h3>Example: Getting assets from <code>packed.pak</code></h3>\n<p>Starbound keeps most of the assets (images, configuration files,\ndungeons, etc.) in a file called <code>packed.pak</code>. This file uses a special\nformat which can be read by py-starbound, as you can see below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starbound</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'assets/packed.pak'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n  <span class=\"n\">package</span> <span class=\"o\">=</span> <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">SBAsset6</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Print the contents of a file in the asset package.</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/lighting.config'</span><span class=\"p\">))</span>\n</pre>\n<h3>Example: Modifying Starbound files</h3>\n<p>Currently, only the SBVJ01 file format can be written by py-starbound.\nThis means player files, client context files, and the statistics file.</p>\n<p>Here's an example that renames a player (WARNING: Always back up files\nbefore writing to them!):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starbound</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'player/420ed511f83b3760dead42a173339b3e.player'</span><span class=\"p\">,</span> <span class=\"s1\">'r+b'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fh</span><span class=\"p\">:</span>\n  <span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">read_sbvj01</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">)</span>\n\n  <span class=\"n\">old_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'identity'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n  <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">old_name</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'rot13'</span><span class=\"p\">)</span>\n  <span class=\"n\">player</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'identity'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_name</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Updating name: </span><span class=\"si\">{}</span><span class=\"s1\"> -&gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">old_name</span><span class=\"p\">,</span> <span class=\"n\">new_name</span><span class=\"p\">))</span>\n\n  <span class=\"c1\"># Go back to the beginning of the file and write the updated data.</span>\n  <span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"n\">starbound</span><span class=\"o\">.</span><span class=\"n\">write_sbvj01</span><span class=\"p\">(</span><span class=\"n\">fh</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">)</span>\n  <span class=\"c1\"># If the file got shorter, truncate away the remaining content.</span>\n  <span class=\"n\">fh</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">()</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"./LICENSE\" rel=\"nofollow\">MIT License</a></p>\n\n          </div>"}, "last_serial": 4477915, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a2ed66889b69198f945ca0fca210eb1a", "sha256": "8fa6afa34c74d6ae1e11d2b1411b1b89b34c4639407f1454456ba7eab8b89adb"}, "downloads": -1, "filename": "py-starbound-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a2ed66889b69198f945ca0fca210eb1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21380, "upload_time": "2018-11-12T15:53:25", "upload_time_iso_8601": "2018-11-12T15:53:25.182303Z", "url": "https://files.pythonhosted.org/packages/b6/06/1e50530cf16eddfd7848bf5535e3fc5b8460ab898f1aceca083e8b956ec8/py-starbound-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2ed66889b69198f945ca0fca210eb1a", "sha256": "8fa6afa34c74d6ae1e11d2b1411b1b89b34c4639407f1454456ba7eab8b89adb"}, "downloads": -1, "filename": "py-starbound-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a2ed66889b69198f945ca0fca210eb1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21380, "upload_time": "2018-11-12T15:53:25", "upload_time_iso_8601": "2018-11-12T15:53:25.182303Z", "url": "https://files.pythonhosted.org/packages/b6/06/1e50530cf16eddfd7848bf5535e3fc5b8460ab898f1aceca083e8b956ec8/py-starbound-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:00 2020"}