{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "maurus.networks Authentication server\n=====================================\n\nThis is a Python Django based server application that provides single sign-on\nservices for my own setup. It has OAuth2 endpoints and for applications\nthat don't support any of these: a SQL stored procedure database abstraction.\n\nAs a second application it provides *dkimsigner*, a daemon that speaks SMTP and\nreceives mail, then forwards it to another SMTP port after signing it with a\nDKIM key from its database.\n\nThe third included application is *mailforwarder*. As OpenSMTPD 6.x does not\noffer a stable filter API and `my OpenSMTPD setup`_ already `relies on\n<opensmtpd_spapi_>`__ the \"stored procedure API\", *mailforwarder* provides\na daemon speaking SMTP that resolves domains and email-addresses in\n*authserver's* database and can then forward email to one-or-more other\nemail addresses. Basically a ``.forward`` or ``.qmail`` implementation based on\nauthserver's database schema as a Python daemon.\n\nIt also provides Django ``manage.py`` commands for registering OAuth2\napplications, users, domains and  Docker registries. Those are useful for\ncreating configuration entries through configuration management systems.\n\nIt also includes an implementation of the\n`Docker Token Authentication protocol <dockerauth_>`__ and can therefore be\nused to secure Docker registries for push and pull with SSO credentials. The\nincluded ``manage.py`` command: ``manage.py dockerauth registry add ...``\nallows script based setup.\n\nFinally, it includes a ``checkpassword`` compatible client application that can\nbe used to integrate Apache2 ``mod_authnz_external`` or DJB checkpassword\ncompatible clients with authserver.\n\nUsers can use the admin interface to create \"service users\" which are specific\naliases for user accounts that can be used with applications that don't support\nOAuth2 so users don't have to share their passwords with the service\n(equivalent to the same feature on Google Gmail).\n\nPlanned features\n----------------\n* OAuth2 applications can use a SSL client certificate to authenticate for a\n  non-standard HTTP API to register as an OAuth2 client and get their OAuth2\n  credentials, cutting down on manual configuration.\n\n* OpenID Connect support\n\n* Service-specific username and passwords for systems that don't support\n  OAuth2/OIDC\n\n* CAS support through ``mama-cas``\n\n* add Google Authenticator support via ``django-otp``\n\n\nInstallation\n------------\nThere is no widely available Docker container available yet, but you can install\nfrom this repository:\n\n.. code-block:: shell\n\n    $ virtualenv -p python3 authserver\n    $ authserver/bin/pip install net.maurus.authserver\n\n\nOr for Debian 9.0 Stretch:\n\n.. code-block:: shell\n\n    $ echo \"deb http://repo.maurus.net/release/stretch mn-release main\" >> /etc/apt/sources.list.d/maurusnet.list\n    $ apt update\n    $ apt install authserver authclient\n\n\nAPPCONFIG FOLDER\n----------------\nThis application uses `12factor <12factor_>`__ and in its systemd configuration\nloads its configuration from a `appconfig folder <appconfig_>`__.\n\nCanonical reserved configuration folders for this app:\n\n* **/etc/appconfig/authserver**\n* **/etc/appconfig/dkimsigner**\n* **/etc/appconfig/mailforwarder**\n\nRun ``django-admin.py`` like this:\n\n.. code-block:: shell\n\n    bin/envdir /etc/appconfig/authserver/env bin/django-admin.py [command]\n        --settings=authserver.settings\n\n\n12factor Environment configuration\n----------------------------------\n\nManaged configuration\n+++++++++++++++++++++\nThese environment variables must be placed in the appconfig folder manually (or\nthrough configuration management). You can just leave ``VAULT_*`` empty and set\n``DATABASE_URL`` if you're not planning on using Vault.\n\n====================  ========================================================\nVariable              Description\n====================  ========================================================\nVAULT_CA              Pinned CA to use to validate that we're talking to the\n                      right Vault.\nVAULT_DATABASE_PATH   The key path to read from Vault to get database\n                      credentials for a full access role.\nDATABASE_PARENTROLE   The role that authserver should \"sudo\" into (via\n                      ``SET ROLE``) after connecting to the database, i.e. the\n                      primary access role (only used with Vault).\nDATABASE_NAME         The name of the database to connect to (only used with\n                      Vault).\nDATABASE_URL          When client SSL certificates or usernames and passwords\n                      are used to connect to the database instead of Vault,\n                      then this URL (parsed by dj-database-url) is used to\n                      connect (only used without Vault).\n====================  ========================================================\n\n\nSmartstack services\n-------------------\nThis application relies on the following smartstack services being available\non localhost:\n\n==== =========== ================\nPort Service     SSL Hostname\n==== =========== ================\n5432 PostgreSQL  postgresql.local\n8200 Vault       vault.local\n==== =========== ================\n\n\nSmartstack registration and loadbalancing\n-----------------------------------------\n\n\nBuilding\n========\n\nBuild script\n------------\nThis application is meant to be built using `GoPythonGo <gopythongo_>`__.\n\n.. code-block:: shell\n\n    export REPO=maurusnet\n    export APTLY_DISTRIBUTION=mn-nightly\n    export APTLY_PUBLISH_ENDPOINT=s3:maurusnet:nightly/stretch\n    export GNUPGHOME=/etc/gpg-managed-keyring/\n    export VAULTWRAPPER_READ_PATH=secret/gpg/packaging_passphrase\n    /opt/gopythongo/bin/gopythongo -v /usr/local/authserver /path/to/source\n\n\nAccess methods\n==============\n\nThere are multiple ways to authenticate user accounts against this program.\nOffered APIs include OAuth2, CAS and a \"if nothing else works\" abstraction\nlayer for direct user database access based on stored procedures.\n\nStored Procedure API\n--------------------\nSince some applications (like OpenSMTPD and Dovecot) which are used by\n`my saltshaker <jdelics_saltshaker_>`__  need lowest common denominator\nauthentication, authserver includes a pgplsql stored procedure API tailored to\nOpenSMTPD to validate user accounts.\n\n==  ===================================  =====================================\nN   Function Name                        Description\n==  ===================================  =====================================\n1   ``authserver_get_credentials(        Gets a username password pair for the\n    varchar)``                           provided email address together with\n                                         the primary delivery email address.\n                                         (Users can log in with every email\n                                         alias and their account password.)\n2   ``authserver_check_domain(           Checks whether the passed domain is a\n    varchar)``                           valid delivery domain.\n3   ``authserver_resolve_alias(varchar,  Resolves email addresses to known\n    boolean)``                           ``MNUser`` or ``MailingList``\n                                         instances. Resolving a primary\n                                         delivery address will return the\n                                         \"magic\" value \"virtmail\" pointing to\n                                         the system user normally handling\n                                         email delivery if the boolean\n                                         parameter is ``true``. If the boolean\n                                         parameter is ``false`` it will return\n                                         the primary delivery address again. If\n                                         the resolved address is a\n                                         ``MailingList`` it will return the\n                                         input unchanged.\n4   ``authserver_iterate_users()``       Returns a list of all valid delivery\n                                         mailboxes.\n==  ===================================  =====================================\n\nAccess to the stored procedure API is managed by the ``django-admin.py spapi``\ncommand which allows you to ``grant`` access to database users, ``install`` the\nstored procedures on the database and ``check`` whether the stored procedures\nhave been installed or if a specific database user has ``execute`` access to\nthe stored procedures. For more information, please run:\n\n.. code-block:: shell\n\n    /usr/local/authserver/bin/envdir /etc/appconfig/authserver/env/ \\\n        /usr/local/authserver/bin/django-admin.py spapi --help\n\n\nOAuth2\n------\nauthserver delivers OAuth2 support over the following endpoints:\n\n* ``/o2/authorize/``\n* ``/o2/token/``\n* ``/o2/revoke_token/``\n\nYou can create client applications and authorization scopes via the Django\nadmin interface or ``manage.py oauth2|permissions`` and assign scopes to users\nand groups respectively. The authorization view will list the scopes for the\nuser to approve unless automatic authorization is turned on for the OAuth2\nclient.\n\n\nDocker Auth\n-----------\nauthserver supports Docker-compatible JWTs using the \"resource owner\" OAuth2\nflow via ``docker login`` at ``https://your.authserver.domain/docker/token/``.\nYou can generally just use ``docker login https://your.authserver.domain/`` and\ncreate Docker registry instances and access rights to namespaces on that\nregistry via the Django admin interface or the ``manage.py dockerauth``\ncommand.\n\n\nPropietary endpoints and mod_authnz_external\n--------------------------------------------\nThe ``checkpassword.py`` command-line script, also shipped in the\n``authclient`` Debian package is compatible with djb checkpassword and Apache2\nmod_authnz_external. It uses two proprietary API endpoints:\n\n* ``/checkpassword/`` which takes a username and optionally a list of\n  scopes and password (for something akin to the \"resource owner\" OAuth2 flow)\n  and issues a JWT that has the user's assigned scopes and validates the\n  password (if transmitted).\n\n* ``/getkey/`` exports a RSA public key for a domain registered with authserver\n  to allow a client to validate an issued JWT.\n\nYou should prefer OAuth2 where possible as this solution will bring the client\ninto possession of the user's password. However, if you trust the client this\nis an alternative solution. Obviously it's also an easy way to integrate legacy\nsystems.\n\n``checkpassword.py`` can operate in 5 modes:\n\n* ``-m init`` uses the getkey API to load a RSA public key for the authserver's\n  domain and output it to stdout or into a file.\n* ``-m check`` behaves like ``init`` but makes no changes, it's useful to check\n  whether a domain has a JWT key to export or that key is readable to\n  checkpassword on the file system.\n* ``-m authext`` and ``-m checkpassword`` read username and password from stdin\n  (either in the way specified by mod_authnz_external or djb checkpassword) and\n  send them to the server to be validated. The program then either exits with\n  exit code ``0`` (success), ``1`` if the auth domain is invalid, ``2`` if\n  there are API connection problems and ``3`` for anything else.\n* ``-m authextgroup`` validates a list of scopes for a username. This does\n  **not** validate the user's password. This is useful for\n  mod_authnz_external's ``GroupExternal`` configuration, but you must\n  additionally authenticate the user.\n\nThe API endpoints respond with a JSON Web Token (JWT) with the following\nclaims:\n\n.. code-block:: json\n\n    {\n        \"sub\": \"the provided username\"\n        \"canonical_username\": \"the user's delivery_mailbox name\"\n        \"authenticated\": true or false depending on the status of the password check\n        \"authorized\": true or false depending on whether the user has all submitted scopes,\n        \"scopes\": [\"a list of\", \"all the scopes\", \"assigned to this user\"],\n        \"nbf\": int(Unix Epoch timestamp of now minus 5 seconds),\n        \"exp\": int(Unix Epoch timestamp of now plus 3600 seconds),\n        \"iss\": \"the auth domain name\",\n        \"aud\": \"net.maurus.authclient\"\n    }\n\n\nTODO\n====\n\n* refactor Vault fullaccess role into actually granting access to new tables\n\n\nLicensing\n=========\n\nPlease see the `LICENSE <LICENSE>`__ document for the terms under which this\nsource code is licensed.\n\nThis program includes a copy of\n`django12factor <django12factor_>`__ which is licensed under The MIT License\n(MIT) Copyright (c) 2013-2017 Kristian Glass.\n\nThis program includes a copy of\n`Select2 JavaScript library <select2_>`__ which is licensed user the MIT\nLicense (MIT)\nCopyright (c) 2012-2017 Kevin Brown, Igor Vaynberg, and Select2 contributors\n\n\n.. _12factor: https://12factor.net/\n.. _appconfig:\n   https://github.com/jdelic/saltshaker/blob/master/ETC_APPCONFIG.md\n.. _certified_builds:\n   https://github.com/jdelic/saltshaker/blob/master/CERTIFIED_BUILDS.md\n.. _django12factor: https://github.com/doismellburning/django12factor/\n.. _dockerauth: https://docs.docker.com/registry/spec/auth/token/\n.. _gopythongo: https://github.com/gopythongo/gopythongo/\n.. _jdelics_saltshaker: https://github.com/jdelic/saltshaker/\n.. _my OpenSMTPD setup:\n   https://github.com/jdelic/saltshaker/blob/master/srv/salt/opensmtpd/\n   smtpd.jinja.conf\n.. _opensmtpd_spapi:\n   https://github.com/jdelic/saltshaker/blob/master/srv/salt/opensmtpd/\n   postgresql.table.jinja.conf\n.. _select2:\n   https://github.com/select2/select2/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "net.maurus.authserver", "package_url": "https://pypi.org/project/net.maurus.authserver/", "platform": "", "project_url": "https://pypi.org/project/net.maurus.authserver/", "project_urls": null, "release_url": "https://pypi.org/project/net.maurus.authserver/0.1.77/", "requires_dist": ["12factor-vault (==0.1.20)", "cryptography (==2.2.2)", "Django (==1.11.13)", "django-cors-headers (==2.2.0)", "django-dbconn-retry (==0.1.5)", "django-mama-cas (==2.3.0)", "django-oauth-toolkit (==1.1.2)", "django-postgresql-setrole (==1.0.10)", "django-ratelimit (==1.1.0)", "django-select2 (==5.11.1)", "envdir (==1.0.1)", "gunicorn (==19.8.1)", "hvac (==0.6.0)", "passlib (==1.7.1)", "psycopg2-binary (==2.7.4)", "pyjwt (==1.6.4)", "python-consul (==1.0.1)", "python-json-logger (==0.1.9)", "requests (==2.19.1)", "sqlparse (==0.2.4)", "typing (==3.6.4)", "whitenoise (==3.3.1)", "valimail-dkimpy (==0.7.1)", "authres (==1.1.0)", "python-daemon (==2.1.2)", "dj-database-url (==0.5.0)", "dj-email-url (==0.1.0)", "django-cache-url (==3.0.0)", "six (==1.11.0)", "pytz"], "requires_python": "", "summary": "A Python 3 Django-based OAuth2/Docker Auth/JWT SSO server with additional mail routing.", "version": "0.1.77", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"maurus-networks-authentication-server\">\n<h2>maurus.networks Authentication server</h2>\n<p>This is a Python Django based server application that provides single sign-on\nservices for my own setup. It has OAuth2 endpoints and for applications\nthat don\u2019t support any of these: a SQL stored procedure database abstraction.</p>\n<p>As a second application it provides <em>dkimsigner</em>, a daemon that speaks SMTP and\nreceives mail, then forwards it to another SMTP port after signing it with a\nDKIM key from its database.</p>\n<p>The third included application is <em>mailforwarder</em>. As OpenSMTPD 6.x does not\noffer a stable filter API and <a href=\"https://github.com/jdelic/saltshaker/blob/master/srv/salt/opensmtpd/smtpd.jinja.conf\" rel=\"nofollow\">my OpenSMTPD setup</a> already <a href=\"https://github.com/jdelic/saltshaker/blob/master/srv/salt/opensmtpd/postgresql.table.jinja.conf\" rel=\"nofollow\">relies on</a> the \u201cstored procedure API\u201d, <em>mailforwarder</em> provides\na daemon speaking SMTP that resolves domains and email-addresses in\n<em>authserver\u2019s</em> database and can then forward email to one-or-more other\nemail addresses. Basically a <tt>.forward</tt> or <tt>.qmail</tt> implementation based on\nauthserver\u2019s database schema as a Python daemon.</p>\n<p>It also provides Django <tt>manage.py</tt> commands for registering OAuth2\napplications, users, domains and  Docker registries. Those are useful for\ncreating configuration entries through configuration management systems.</p>\n<p>It also includes an implementation of the\n<a href=\"https://docs.docker.com/registry/spec/auth/token/\" rel=\"nofollow\">Docker Token Authentication protocol</a> and can therefore be\nused to secure Docker registries for push and pull with SSO credentials. The\nincluded <tt>manage.py</tt> command: <tt>manage.py dockerauth registry add ...</tt>\nallows script based setup.</p>\n<p>Finally, it includes a <tt>checkpassword</tt> compatible client application that can\nbe used to integrate Apache2 <tt>mod_authnz_external</tt> or DJB checkpassword\ncompatible clients with authserver.</p>\n<p>Users can use the admin interface to create \u201cservice users\u201d which are specific\naliases for user accounts that can be used with applications that don\u2019t support\nOAuth2 so users don\u2019t have to share their passwords with the service\n(equivalent to the same feature on Google Gmail).</p>\n<div id=\"planned-features\">\n<h3>Planned features</h3>\n<ul>\n<li>OAuth2 applications can use a SSL client certificate to authenticate for a\nnon-standard HTTP API to register as an OAuth2 client and get their OAuth2\ncredentials, cutting down on manual configuration.</li>\n<li>OpenID Connect support</li>\n<li>Service-specific username and passwords for systems that don\u2019t support\nOAuth2/OIDC</li>\n<li>CAS support through <tt><span class=\"pre\">mama-cas</span></tt></li>\n<li>add Google Authenticator support via <tt><span class=\"pre\">django-otp</span></tt></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>There is no widely available Docker container available yet, but you can install\nfrom this repository:</p>\n<pre>$ virtualenv -p python3 authserver\n$ authserver/bin/pip install net.maurus.authserver\n</pre>\n<p>Or for Debian 9.0 Stretch:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"deb http://repo.maurus.net/release/stretch mn-release main\"</span> &gt;&gt; /etc/apt/sources.list.d/maurusnet.list\n$ apt update\n$ apt install authserver authclient\n</pre>\n</div>\n<div id=\"appconfig-folder\">\n<h3>APPCONFIG FOLDER</h3>\n<p>This application uses <a href=\"https://12factor.net/\" rel=\"nofollow\">12factor</a> and in its systemd configuration\nloads its configuration from a <a href=\"https://github.com/jdelic/saltshaker/blob/master/ETC_APPCONFIG.md\" rel=\"nofollow\">appconfig folder</a>.</p>\n<p>Canonical reserved configuration folders for this app:</p>\n<ul>\n<li><strong>/etc/appconfig/authserver</strong></li>\n<li><strong>/etc/appconfig/dkimsigner</strong></li>\n<li><strong>/etc/appconfig/mailforwarder</strong></li>\n</ul>\n<p>Run <tt><span class=\"pre\">django-admin.py</span></tt> like this:</p>\n<pre>bin/envdir /etc/appconfig/authserver/env bin/django-admin.py <span class=\"o\">[</span>command<span class=\"o\">]</span>\n    --settings<span class=\"o\">=</span>authserver.settings\n</pre>\n</div>\n<div id=\"factor-environment-configuration\">\n<h3>12factor Environment configuration</h3>\n<h3 id=\"managed-configuration\"><span class=\"section-subtitle\">Managed configuration</span></h3>\n<p>These environment variables must be placed in the appconfig folder manually (or\nthrough configuration management). You can just leave <tt>VAULT_*</tt> empty and set\n<tt>DATABASE_URL</tt> if you\u2019re not planning on using Vault.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>VAULT_CA</td>\n<td>Pinned CA to use to validate that we\u2019re talking to the\nright Vault.</td>\n</tr>\n<tr><td>VAULT_DATABASE_PATH</td>\n<td>The key path to read from Vault to get database\ncredentials for a full access role.</td>\n</tr>\n<tr><td>DATABASE_PARENTROLE</td>\n<td>The role that authserver should \u201csudo\u201d into (via\n<tt>SET ROLE</tt>) after connecting to the database, i.e. the\nprimary access role (only used with Vault).</td>\n</tr>\n<tr><td>DATABASE_NAME</td>\n<td>The name of the database to connect to (only used with\nVault).</td>\n</tr>\n<tr><td>DATABASE_URL</td>\n<td>When client SSL certificates or usernames and passwords\nare used to connect to the database instead of Vault,\nthen this URL (parsed by dj-database-url) is used to\nconnect (only used without Vault).</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"smartstack-services\">\n<h3>Smartstack services</h3>\n<p>This application relies on the following smartstack services being available\non localhost:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Port</th>\n<th>Service</th>\n<th>SSL Hostname</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>5432</td>\n<td>PostgreSQL</td>\n<td>postgresql.local</td>\n</tr>\n<tr><td>8200</td>\n<td>Vault</td>\n<td>vault.local</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"smartstack-registration-and-loadbalancing\">\n<h3>Smartstack registration and loadbalancing</h3>\n</div>\n</div>\n<div id=\"building\">\n<h2>Building</h2>\n<h2 id=\"build-script\"><span class=\"section-subtitle\">Build script</span></h2>\n<p>This application is meant to be built using <a href=\"https://github.com/gopythongo/gopythongo/\" rel=\"nofollow\">GoPythonGo</a>.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">REPO</span><span class=\"o\">=</span>maurusnet\n<span class=\"nb\">export</span> <span class=\"nv\">APTLY_DISTRIBUTION</span><span class=\"o\">=</span>mn-nightly\n<span class=\"nb\">export</span> <span class=\"nv\">APTLY_PUBLISH_ENDPOINT</span><span class=\"o\">=</span>s3:maurusnet:nightly/stretch\n<span class=\"nb\">export</span> <span class=\"nv\">GNUPGHOME</span><span class=\"o\">=</span>/etc/gpg-managed-keyring/\n<span class=\"nb\">export</span> <span class=\"nv\">VAULTWRAPPER_READ_PATH</span><span class=\"o\">=</span>secret/gpg/packaging_passphrase\n/opt/gopythongo/bin/gopythongo -v /usr/local/authserver /path/to/source\n</pre>\n</div>\n<div id=\"access-methods\">\n<h2>Access methods</h2>\n<p>There are multiple ways to authenticate user accounts against this program.\nOffered APIs include OAuth2, CAS and a \u201cif nothing else works\u201d abstraction\nlayer for direct user database access based on stored procedures.</p>\n<div id=\"stored-procedure-api\">\n<h3>Stored Procedure API</h3>\n<p>Since some applications (like OpenSMTPD and Dovecot) which are used by\n<a href=\"https://github.com/jdelic/saltshaker/\" rel=\"nofollow\">my saltshaker</a>  need lowest common denominator\nauthentication, authserver includes a pgplsql stored procedure API tailored to\nOpenSMTPD to validate user accounts.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>N</th>\n<th>Function Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>1</td>\n<td><tt>authserver_get_credentials(\nvarchar)</tt></td>\n<td>Gets a username password pair for the\nprovided email address together with\nthe primary delivery email address.\n(Users can log in with every email\nalias and their account password.)</td>\n</tr>\n<tr><td>2</td>\n<td><tt>authserver_check_domain(\nvarchar)</tt></td>\n<td>Checks whether the passed domain is a\nvalid delivery domain.</td>\n</tr>\n<tr><td>3</td>\n<td><tt>authserver_resolve_alias(varchar,\nboolean)</tt></td>\n<td>Resolves email addresses to known\n<tt>MNUser</tt> or <tt>MailingList</tt>\ninstances. Resolving a primary\ndelivery address will return the\n\u201cmagic\u201d value \u201cvirtmail\u201d pointing to\nthe system user normally handling\nemail delivery if the boolean\nparameter is <tt>true</tt>. If the boolean\nparameter is <tt>false</tt> it will return\nthe primary delivery address again. If\nthe resolved address is a\n<tt>MailingList</tt> it will return the\ninput unchanged.</td>\n</tr>\n<tr><td>4</td>\n<td><tt>authserver_iterate_users()</tt></td>\n<td>Returns a list of all valid delivery\nmailboxes.</td>\n</tr>\n</tbody>\n</table>\n<p>Access to the stored procedure API is managed by the <tt><span class=\"pre\">django-admin.py</span> spapi</tt>\ncommand which allows you to <tt>grant</tt> access to database users, <tt>install</tt> the\nstored procedures on the database and <tt>check</tt> whether the stored procedures\nhave been installed or if a specific database user has <tt>execute</tt> access to\nthe stored procedures. For more information, please run:</p>\n<pre>/usr/local/authserver/bin/envdir /etc/appconfig/authserver/env/ <span class=\"se\">\\\n</span>    /usr/local/authserver/bin/django-admin.py spapi --help\n</pre>\n</div>\n<div id=\"oauth2\">\n<h3>OAuth2</h3>\n<p>authserver delivers OAuth2 support over the following endpoints:</p>\n<ul>\n<li><tt>/o2/authorize/</tt></li>\n<li><tt>/o2/token/</tt></li>\n<li><tt>/o2/revoke_token/</tt></li>\n</ul>\n<p>You can create client applications and authorization scopes via the Django\nadmin interface or <tt>manage.py oauth2|permissions</tt> and assign scopes to users\nand groups respectively. The authorization view will list the scopes for the\nuser to approve unless automatic authorization is turned on for the OAuth2\nclient.</p>\n</div>\n<div id=\"docker-auth\">\n<h3>Docker Auth</h3>\n<p>authserver supports Docker-compatible JWTs using the \u201cresource owner\u201d OAuth2\nflow via <tt>docker login</tt> at <tt><span class=\"pre\">https://your.authserver.domain/docker/token/</span></tt>.\nYou can generally just use <tt>docker login <span class=\"pre\">https://your.authserver.domain/</span></tt> and\ncreate Docker registry instances and access rights to namespaces on that\nregistry via the Django admin interface or the <tt>manage.py dockerauth</tt>\ncommand.</p>\n</div>\n<div id=\"propietary-endpoints-and-mod-authnz-external\">\n<h3>Propietary endpoints and mod_authnz_external</h3>\n<p>The <tt>checkpassword.py</tt> command-line script, also shipped in the\n<tt>authclient</tt> Debian package is compatible with djb checkpassword and Apache2\nmod_authnz_external. It uses two proprietary API endpoints:</p>\n<ul>\n<li><tt>/checkpassword/</tt> which takes a username and optionally a list of\nscopes and password (for something akin to the \u201cresource owner\u201d OAuth2 flow)\nand issues a JWT that has the user\u2019s assigned scopes and validates the\npassword (if transmitted).</li>\n<li><tt>/getkey/</tt> exports a RSA public key for a domain registered with authserver\nto allow a client to validate an issued JWT.</li>\n</ul>\n<p>You should prefer OAuth2 where possible as this solution will bring the client\ninto possession of the user\u2019s password. However, if you trust the client this\nis an alternative solution. Obviously it\u2019s also an easy way to integrate legacy\nsystems.</p>\n<p><tt>checkpassword.py</tt> can operate in 5 modes:</p>\n<ul>\n<li><tt><span class=\"pre\">-m</span> init</tt> uses the getkey API to load a RSA public key for the authserver\u2019s\ndomain and output it to stdout or into a file.</li>\n<li><tt><span class=\"pre\">-m</span> check</tt> behaves like <tt>init</tt> but makes no changes, it\u2019s useful to check\nwhether a domain has a JWT key to export or that key is readable to\ncheckpassword on the file system.</li>\n<li><tt><span class=\"pre\">-m</span> authext</tt> and <tt><span class=\"pre\">-m</span> checkpassword</tt> read username and password from stdin\n(either in the way specified by mod_authnz_external or djb checkpassword) and\nsend them to the server to be validated. The program then either exits with\nexit code <tt>0</tt> (success), <tt>1</tt> if the auth domain is invalid, <tt>2</tt> if\nthere are API connection problems and <tt>3</tt> for anything else.</li>\n<li><tt><span class=\"pre\">-m</span> authextgroup</tt> validates a list of scopes for a username. This does\n<strong>not</strong> validate the user\u2019s password. This is useful for\nmod_authnz_external\u2019s <tt>GroupExternal</tt> configuration, but you must\nadditionally authenticate the user.</li>\n</ul>\n<p>The API endpoints respond with a JSON Web Token (JWT) with the following\nclaims:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"sub\"</span><span class=\"p\">:</span> <span class=\"s2\">\"the provided username\"</span>\n    <span class=\"s2\">\"canonical_username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"the user's delivery_mailbox name\"</span>\n    <span class=\"s2\">\"authenticated\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"err\">or</span> <span class=\"kc\">false</span> <span class=\"err\">depending</span> <span class=\"err\">on</span> <span class=\"err\">the</span> <span class=\"err\">status</span> <span class=\"err\">of</span> <span class=\"err\">the</span> <span class=\"err\">password</span> <span class=\"err\">check</span>\n    <span class=\"s2\">\"authorized\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"err\">or</span> <span class=\"kc\">false</span> <span class=\"err\">depending</span> <span class=\"err\">on</span> <span class=\"err\">whether</span> <span class=\"err\">the</span> <span class=\"err\">user</span> <span class=\"err\">has</span> <span class=\"err\">all</span> <span class=\"err\">submitted</span> <span class=\"err\">scopes</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"scopes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"a list of\"</span><span class=\"p\">,</span> <span class=\"s2\">\"all the scopes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"assigned to this user\"</span><span class=\"p\">],</span>\n    <span class=\"nt\">\"nbf\"</span><span class=\"p\">:</span> <span class=\"err\">int(Unix</span> <span class=\"err\">Epoch</span> <span class=\"err\">timestamp</span> <span class=\"err\">of</span> <span class=\"err\">now</span> <span class=\"err\">minus</span> <span class=\"mi\">5</span> <span class=\"err\">seconds)</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"exp\"</span><span class=\"p\">:</span> <span class=\"err\">int(Unix</span> <span class=\"err\">Epoch</span> <span class=\"err\">timestamp</span> <span class=\"err\">of</span> <span class=\"err\">now</span> <span class=\"err\">plus</span> <span class=\"mi\">3600</span> <span class=\"err\">seconds)</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"iss\"</span><span class=\"p\">:</span> <span class=\"s2\">\"the auth domain name\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"aud\"</span><span class=\"p\">:</span> <span class=\"s2\">\"net.maurus.authclient\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>refactor Vault fullaccess role into actually granting access to new tables</li>\n</ul>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Please see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> document for the terms under which this\nsource code is licensed.</p>\n<p>This program includes a copy of\n<a href=\"https://github.com/doismellburning/django12factor/\" rel=\"nofollow\">django12factor</a> which is licensed under The MIT License\n(MIT) Copyright (c) 2013-2017 Kristian Glass.</p>\n<p>This program includes a copy of\n<a href=\"https://github.com/select2/select2/\" rel=\"nofollow\">Select2 JavaScript library</a> which is licensed user the MIT\nLicense (MIT)\nCopyright (c) 2012-2017 Kevin Brown, Igor Vaynberg, and Select2 contributors</p>\n</div>\n\n          </div>"}, "last_serial": 3970832, "releases": {"0.1.70": [{"comment_text": "", "digests": {"md5": "641fa511f4b6d6de0afffcee7c9cb559", "sha256": "8d3441e6817b63438bbf9dd7cc1870a4d6140232c46528fae041a7ff9798e4f4"}, "downloads": -1, "filename": "net.maurus.authserver-0.1.70-py3-none-any.whl", "has_sig": false, "md5_digest": "641fa511f4b6d6de0afffcee7c9cb559", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 106319, "upload_time": "2018-04-23T13:26:18", "upload_time_iso_8601": "2018-04-23T13:26:18.973888Z", "url": "https://files.pythonhosted.org/packages/a0/ae/3496d260d9a23806d3f17d7a728663de586a572d70a3124dca148db26549/net.maurus.authserver-0.1.70-py3-none-any.whl", "yanked": false}], "0.1.75": [{"comment_text": "", "digests": {"md5": "0e8bdadac9b84825f4e1dd579eb5b7ef", "sha256": "1fcf5da159170aa8e233dedd71bc89787619d615aae9d80c3c34c3ecb41442af"}, "downloads": -1, "filename": "net.maurus.authserver-0.1.75-py3-none-any.whl", "has_sig": false, "md5_digest": "0e8bdadac9b84825f4e1dd579eb5b7ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122771, "upload_time": "2018-05-07T22:26:43", "upload_time_iso_8601": "2018-05-07T22:26:43.958254Z", "url": "https://files.pythonhosted.org/packages/d4/29/c4a1427f839ea7eff24225b945f69449543c4c6ecc0aaa7bbbe9eb4b9c99/net.maurus.authserver-0.1.75-py3-none-any.whl", "yanked": false}], "0.1.77": [{"comment_text": "", "digests": {"md5": "dc15197b2393bd96a400fa710a47bead", "sha256": "0ab57d098605010319309766bb55eebef7964cf5a1b56e1a7f32ca8bfaefa7bc"}, "downloads": -1, "filename": "net.maurus.authserver-0.1.77-py3-none-any.whl", "has_sig": false, "md5_digest": "dc15197b2393bd96a400fa710a47bead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122795, "upload_time": "2018-06-17T11:12:48", "upload_time_iso_8601": "2018-06-17T11:12:48.867866Z", "url": "https://files.pythonhosted.org/packages/4a/79/d0b244caed2b82619395773925908d111cbe9cecad339b7b9e38517eb022/net.maurus.authserver-0.1.77-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc15197b2393bd96a400fa710a47bead", "sha256": "0ab57d098605010319309766bb55eebef7964cf5a1b56e1a7f32ca8bfaefa7bc"}, "downloads": -1, "filename": "net.maurus.authserver-0.1.77-py3-none-any.whl", "has_sig": false, "md5_digest": "dc15197b2393bd96a400fa710a47bead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122795, "upload_time": "2018-06-17T11:12:48", "upload_time_iso_8601": "2018-06-17T11:12:48.867866Z", "url": "https://files.pythonhosted.org/packages/4a/79/d0b244caed2b82619395773925908d111cbe9cecad339b7b9e38517eb022/net.maurus.authserver-0.1.77-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:56 2020"}