{"info": {"author": "Stanislav Kraev", "author_email": "stanislav.kraev@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Watermill data stream organizing framework\n\nAssume that you have numerous stream data producers and processors.\nIf data streams are logically linked together you may want to organize processing of joined data stream.\nWatermill helps to get streams joined in a clear, lightweight way.\n\n![  ](https://gitlab.com/kraevs/watermill/-/raw/d6665483c9bc44d39f3584a9f8082fb6bd39f4b6/img/fig-1.png)\n\n## User guide\n\n### Briefly\n\nInput data stream is configured using processing function signature.\n```python\ndef calculate_robot_speed(\n        prev_location: RobotLocation, \n        next_locations: Mapping[RobotLocation, List[RobotLocationNextStep]]\n) -> RobotSpeed:\n    pass\n```\nFirst argument can have type of data stream element or list of stream elements.\n\nSubsequent arguments are mapping of types of stream elements when using stream joins. In the example above\nwe want to get all robot locations joined with joined locations of the next time step.\n\nIf there is no result data stream simply omit return value or explicitly specify NoReturn type.\n\nIf you want to return several results for every processing function call you can return generator. \nNote that you have to yield at least one valid element when returning generator. \n\nData themselves can be stored in any shared storage like Kafka, file system, databases.\n\n![ ](https://gitlab.com/kraevs/watermill/-/raw/837cdb32affb3ab8b715bbffcb0dd6e8daab00b9/img/fig2.png)\n\nWatermill doesn't introduce any dependency/coupling between services based on it.\nEvery service or simply process can independently decide which actual data stream it wants to input and \nhow to join data streams together. The only shared key of data streams is file name of file in FS, topic name for Kafka, etc.\n\nSmallest piece of data of which data streams consists is dictionary. To describe data stream elements in code python dataclasses are used. \n\nVery often you have to get reference to external objects in the processing function. \nDependency injection is used for that. It is enough to specify an argument with the type of the required object\nin the processing function and DI will provide this argument with reference to the object.\n\n```python\ndef store_robot_path(location: RobotLocation, db_connection: Connection) -> NoReturn:\n    pass\n```\n\nMessage brokers are used to access to streams data in storages. \nWatermill package includes two commonly used brokers. JSON file broker and Kafka message broker. \nBoth of them can use default serializers and deserializers. \nMoreover Watermill users can implement deserializers that receive only the required fields.\n\n![ ](https://gitlab.com/kraevs/watermill/-/raw/837cdb32affb3ab8b715bbffcb0dd6e8daab00b9/img/fig3.png)\n\n### Stream joins\n\nFor the simplest case when there is only one data stream data processing function looks like\n\n```python\ndef is_inside_area(location: RobotLocation) -> InsideArea:\n    return InsideArea(\n        x=location.x,\n        y=locatin.y,\n        inside=check_inside_area(location.x, location.y)\n    )\n``` \n\nBut usually there are several input data streams that should be combined by some condition.\n\nHere 2 data streams are joined and falls into the processing function as combined elements.\nFor example join condition can be `audio_stream.frame_index = video_stream.frame_index`.\nIn the code it looks like\n\n```python\ndef merge_audio_video(\n        audio_frame: AudioFrame, \n        video_frames: Mapping[AudioFrame, List[VideoFrame]]\n) -> AudioVideoFrame:\n    pass\n```\n\nThe first argument describes left data stream in the join and is called the master stream.\n\nIterating over the master stream returns every element just once. \nElements from secondary streams can be skipped if join condition is not met.\n\nUnlike SQL joins Watermill supports only inner joins. So if there are no matching data in secondary streams\nthere will be no data at all for the processing. Furthermore, if there are no data at all in secondary streams\nthe processing function will never be executed.\n\nIt may be easier to understand streams join if you thing about join tree with a master stream as the root node.\nTo get next data for processing Watermill goes through the join tree and returns linked streams elements\nonly when there is at least one element found for each join tree node.\nAs can be seen from the processing function signature secondary streams can return more than one element.  \n\nJoin tree can have no loops or duplicate nodes.\n\n### End of stream\n\nStream elements are processed until there are elements in every input stream.\n\nThis is quite simple to understand where the data stream for files in file system ends. But originally _indefinite_\ndata streams like Kafka or RabbitMQ should be provided with some **End Of Stream** mark explicitly.\n`KafkaMessageBroker` supports special type of elements `EndOfStream` defined in `message_brokers.message_broker` module.\nData stream processing is immediately stopped as soon as `EndOfStream` message appears in any of joined data streams.\n`EndOfStream` message is then automatically put to output stream to state that there will be no more data.\n\nYou can also manually return instance  of `EndOfStream` dataclass from the processing function \nto indicate that processing loop should be stopped. `EndOfStream` is allowed to be the last element of yielded by\nprocessing function generator. \n\n### Join conditions\n\nWhen joining streams join condition is evaluated for left and right elements.\n\nEvery element must consist of key. It can be ordinary field of expression based on one or more fields.\nJoin conditions are defined as a parameter to Watermill constructor. \n\nThe following examples demonstrates how to join streams based on conditions with expressions.\n\n```python\n@dataclass\nclass AudioFrame:\n    time_seconds: int\n    data: float\n\n\n@dataclass\nclass VideoFrame:\n    time_ms: int\n    data: float\n    frame_index: int\n    first_frame_ts_seconds: int\n...\n\nmill = WaterMill(\n    ...\n    process_func=merge_audio_video,\n    join_tree=join_streams(\n        AudioFrame,\n        JoinWith(\n            with_type=VideoFrame,\n            left_expression=get_field('time_seconds'),\n            right_expression=get_field('time_ms') // 1000\n        )\n    )\n)\n\nmill = WaterMill(\n    ...\n    process_func=merge_audio_video,\n    join_tree=join_streams(\n        AudioFrame,\n        JoinWith(\n            with_type=VideoFrame,\n            left_expression=get_field('time_seconds'),\n            right_expression=\n                get_field('frame_index') * FRAME_DURATION_SECONDS + \n                get_fields('first_frame_ts_seconds')\n        )\n    )\n)\n\n``` \n\nExpressions calculation implementation is trivial and does not support operator precedence or parentheses.\n\nComputed key value for every stream must increase monotonously. Based on this rule Watermill can detect streams\ndivergence. For example at the start of data processing left (master) stream key less than right (secondary) stream key.\nIn this case Watermill will skip right stream elements until stream elements synchronizes.\n\nDuring data streams design you should keep in mind key comparison rules to correctly identify what the key will be\nfor every data stream.\n\nSpecial case for joining streams is when the stream appears in join tree several times, e.g. self-join of the stream.\nIn this case separate class have to be defined for every join tree node of this stream type. \nRefer to [kafka_join_streams](https://gitlab.com/kraevs/watermill/-/blob/master/examples/kafka_join_streams.py) example.\n\n### Windows\nSometimes you may want to get master stream elements combined into lists based on some condition before processing.\nFor example collect one minute statistics and then process whole bunch of elements at once. \nThus processing function will get list of elements every time. Below is the illustration of appropriate stream configuration.\n\n```python\ndef calculate_robot_speed(prev_location: List[RobotLocation]) -> RobotSpeed:\n    pass\n\n...\n\nmill = WaterMill(\n    ...\n    process_func=calculate_robot_speed,\n    stream_cls = window(\n        cls=RobotLocation,\n        window_expression=get_field('time') // 30\n    )\n)\n```  \n\nNotice the additional `List` type hint in the processing function and call to `window` function that returns\nspecial `Window` object. `window_expression` field of Window is key-based expression that distinguish elements \nof adjacent windows. \n\nIn the same way windowing is configured:\n\n```python\ndef calculate_robot_speed(\n        prev_location: List[RobotLocation], \n        next_locations: Mapping[RobotLocation, List[RobotLocationNextStep]]\n) -> RobotSpeed:\n    pass\n\n...\n\nmill = WaterMill(\n    ...\n    process_func=calculate_robot_speed,\n    join_tree=join_streams(\n        window(\n            cls=RobotLocation,\n            window_expression=get_field('time') // 30\n        ),\n        JoinWith(\n            with_type=RobotLocationNextStep,\n            left_expression=get_field('time') + 10,\n            right_expression=get_field('time')\n        ),\n    )\n)\n```  \n\nElement-based window expressions may be not sufficient. E.g. processing function should receive list of all elements\narrived in every 20 seconds. Default configuration of Kafka message broker is blocking. It means that if there are \nno new messages in the topic then window expression checking time elapsed will not be called at all.\nTo let Watermill periodic call of window expression `poll_timeout` of `KafkaMesasgeBroker` construction should be set\nto appropriate value. Such data stream windowing has two limitations:\n - there must be only one (master) stream;\n - window expression must be able to deal with `None` values which are passed to it on poll timeouts.\n\n### Message brokers\n\nWatermill includes the following message brokers:\n1. **JsonFileMessageBroker**\n\n   Reads whole input files into memory and provide Watermill with data elements.\n   Writes output stream elements into file at the end of stream.\n\n   Files contents is JSON list of objects.\n\n   `JsonFileMessageBroker` configuration is quite obvious:\n\n   ```python\n    JsonFileMessageBroker({\n        GoodsItem: Path('/samples/goods.json')\n    })\n   ```\n   The only constructor argument is element type \u2014 file path mapping. \n\n   This broker should not be used if files are very big.  \n2. **KafkaMessageBroker**\n\n   This broker uses `kafka-python` internally to communicate with Kafka.\n\n   Every data stream is topic. There is no limitation on topic naming due to explicit element type \u2014 topic name mapping: \n   ```python\n    KafkaMessageBroker(\n        topic_names={\n            RobotLocation: 'robot-locations',\n            RobotLocationNextStep: 'robot-locations',\n            RobotSpeed: 'robot-speed',\n        },\n        kafka_url='kafka:9092'\n    )\n   ```\n\n    When using `KafkaMessageBroker` data stream positions are automatically saved. So whenever the processing service \n    crashes and restarts it continues processing from the same data streams positions.\n\n    `KafkaMessageBroker` creates consumer for every join tree node with dedicated consumer group with name based on \n    element class name. So positions for every data stream is saved (committed) individually.\n\n### Logging\n\nWatermill utilizes common logging configuration pattern:\n\n```python\nlogger = getLogger(__name__)\n```\n\nSo you can easily change Watermill logger parameters based on logger prefix `'watermill'`.\n\n### Multiple Watermill instances\n\nWatermill processing loops can be safely run in separate threads. \n\nNote that Watermill was not designed to be thread-safe and should not be accessed from different threads.\n\n### Code examples\n\nBasic usage examples can be found in repository: [Examples](https://gitlab.com/kraevs/watermill/-/blob/master/examples/)\n\n## Watermill benefits \n\n - tiny amount of user code necessary to organize data stream processing;\n - rapid and safe streams join configuration and reconfiguration\n - every Watermill-based service independently specifies its input, output streams\n - explicit typed processing function interface\n - stream data structure is defined by pure dataclasses\n - Watermill loop does not keep streams data in memory\n - end of streams are always explicit\n - failsafe:\n   - Watermill brokers can be configured to raise EndOfStream by data timeout;\n   - Watermill-based service crashes and restarts do not cause data loss/duplication or state corruption when\n     using Kafka message broker.\n - rich join functionality allows to build self-joins where the data stream is joined with itself\n - dependency injection allows to add side-effects to processing functions\n - streams misalignment is automatically eliminates using join conditions\n - straightforward message brokers interface encourage to implement own specific brokers \n\n## Caveats and limitations\n\n - Lack of stream state saving transactionality when using Kafka message broker. \n   Watermill saves topics position every time after outputting processing result.\n   In the case of process crash between result and state save there will be generated result data duplicate.\n   It will be improved after `python-kafka` client is support **exactly-once** guarantee Kafka API.\n - When using Watermill in python3.6 you have to add `dataclasses` package manually to project requirements.\n - Kafka topics have to be created manually.\n\n![Speech Technology Center](https://gitlab.com/kraevs/watermill/-/raw/837cdb32affb3ab8b715bbffcb0dd6e8daab00b9/img/stc.png)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/kraevs/watermill", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "watermill", "package_url": "https://pypi.org/project/watermill/", "platform": "any", "project_url": "https://pypi.org/project/watermill/", "project_urls": {"Code": "https://gitlab.com/kraevs/watermill", "Homepage": "https://gitlab.com/kraevs/watermill", "Issue tracker": "https://gitlab.com/kraevs/watermill/issues"}, "release_url": "https://pypi.org/project/watermill/3.5.0/", "requires_dist": ["botox-di (==1.5.0)", "dataclass-factory (==2.8.1)", "dataclasses ; python_version < \"3.7\""], "requires_python": ">=3.6", "summary": "Watermill data stream organizing framework.", "version": "3.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Watermill data stream organizing framework</h1>\n<p>Assume that you have numerous stream data producers and processors.\nIf data streams are logically linked together you may want to organize processing of joined data stream.\nWatermill helps to get streams joined in a clear, lightweight way.</p>\n<p><img alt=\"  \" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dfd0a9317bb83043eebb210116607e6cff7adebf/68747470733a2f2f6769746c61622e636f6d2f6b72616576732f77617465726d696c6c2f2d2f7261772f643636363534383363396263343464333966333538346139663830383266623662643339663462362f696d672f6669672d312e706e67\"></p>\n<h2>User guide</h2>\n<h3>Briefly</h3>\n<p>Input data stream is configured using processing function signature.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">calculate_robot_speed</span><span class=\"p\">(</span>\n        <span class=\"n\">prev_location</span><span class=\"p\">:</span> <span class=\"n\">RobotLocation</span><span class=\"p\">,</span> \n        <span class=\"n\">next_locations</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">RobotLocation</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RobotLocationNextStep</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RobotSpeed</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>First argument can have type of data stream element or list of stream elements.</p>\n<p>Subsequent arguments are mapping of types of stream elements when using stream joins. In the example above\nwe want to get all robot locations joined with joined locations of the next time step.</p>\n<p>If there is no result data stream simply omit return value or explicitly specify NoReturn type.</p>\n<p>If you want to return several results for every processing function call you can return generator.\nNote that you have to yield at least one valid element when returning generator.</p>\n<p>Data themselves can be stored in any shared storage like Kafka, file system, databases.</p>\n<p><img alt=\" \" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02dd28ba7bbb39eda31c49fd21780a89cc56993a/68747470733a2f2f6769746c61622e636f6d2f6b72616576732f77617465726d696c6c2f2d2f7261772f383337636462333261666662336162386237313562626666636230646436653864616162303062392f696d672f666967322e706e67\"></p>\n<p>Watermill doesn't introduce any dependency/coupling between services based on it.\nEvery service or simply process can independently decide which actual data stream it wants to input and\nhow to join data streams together. The only shared key of data streams is file name of file in FS, topic name for Kafka, etc.</p>\n<p>Smallest piece of data of which data streams consists is dictionary. To describe data stream elements in code python dataclasses are used.</p>\n<p>Very often you have to get reference to external objects in the processing function.\nDependency injection is used for that. It is enough to specify an argument with the type of the required object\nin the processing function and DI will provide this argument with reference to the object.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">store_robot_path</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">RobotLocation</span><span class=\"p\">,</span> <span class=\"n\">db_connection</span><span class=\"p\">:</span> <span class=\"n\">Connection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">NoReturn</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Message brokers are used to access to streams data in storages.\nWatermill package includes two commonly used brokers. JSON file broker and Kafka message broker.\nBoth of them can use default serializers and deserializers.\nMoreover Watermill users can implement deserializers that receive only the required fields.</p>\n<p><img alt=\" \" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6e93960789156288fe96a1055f5929b1cbc5b37/68747470733a2f2f6769746c61622e636f6d2f6b72616576732f77617465726d696c6c2f2d2f7261772f383337636462333261666662336162386237313562626666636230646436653864616162303062392f696d672f666967332e706e67\"></p>\n<h3>Stream joins</h3>\n<p>For the simplest case when there is only one data stream data processing function looks like</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">is_inside_area</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">:</span> <span class=\"n\">RobotLocation</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InsideArea</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">InsideArea</span><span class=\"p\">(</span>\n        <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span>\n        <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">locatin</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span>\n        <span class=\"n\">inside</span><span class=\"o\">=</span><span class=\"n\">check_inside_area</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>But usually there are several input data streams that should be combined by some condition.</p>\n<p>Here 2 data streams are joined and falls into the processing function as combined elements.\nFor example join condition can be <code>audio_stream.frame_index = video_stream.frame_index</code>.\nIn the code it looks like</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">merge_audio_video</span><span class=\"p\">(</span>\n        <span class=\"n\">audio_frame</span><span class=\"p\">:</span> <span class=\"n\">AudioFrame</span><span class=\"p\">,</span> \n        <span class=\"n\">video_frames</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">AudioFrame</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">VideoFrame</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">AudioVideoFrame</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>The first argument describes left data stream in the join and is called the master stream.</p>\n<p>Iterating over the master stream returns every element just once.\nElements from secondary streams can be skipped if join condition is not met.</p>\n<p>Unlike SQL joins Watermill supports only inner joins. So if there are no matching data in secondary streams\nthere will be no data at all for the processing. Furthermore, if there are no data at all in secondary streams\nthe processing function will never be executed.</p>\n<p>It may be easier to understand streams join if you thing about join tree with a master stream as the root node.\nTo get next data for processing Watermill goes through the join tree and returns linked streams elements\nonly when there is at least one element found for each join tree node.\nAs can be seen from the processing function signature secondary streams can return more than one element.</p>\n<p>Join tree can have no loops or duplicate nodes.</p>\n<h3>End of stream</h3>\n<p>Stream elements are processed until there are elements in every input stream.</p>\n<p>This is quite simple to understand where the data stream for files in file system ends. But originally <em>indefinite</em>\ndata streams like Kafka or RabbitMQ should be provided with some <strong>End Of Stream</strong> mark explicitly.\n<code>KafkaMessageBroker</code> supports special type of elements <code>EndOfStream</code> defined in <code>message_brokers.message_broker</code> module.\nData stream processing is immediately stopped as soon as <code>EndOfStream</code> message appears in any of joined data streams.\n<code>EndOfStream</code> message is then automatically put to output stream to state that there will be no more data.</p>\n<p>You can also manually return instance  of <code>EndOfStream</code> dataclass from the processing function\nto indicate that processing loop should be stopped. <code>EndOfStream</code> is allowed to be the last element of yielded by\nprocessing function generator.</p>\n<h3>Join conditions</h3>\n<p>When joining streams join condition is evaluated for left and right elements.</p>\n<p>Every element must consist of key. It can be ordinary field of expression based on one or more fields.\nJoin conditions are defined as a parameter to Watermill constructor.</p>\n<p>The following examples demonstrates how to join streams based on conditions with expressions.</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">AudioFrame</span><span class=\"p\">:</span>\n    <span class=\"n\">time_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">VideoFrame</span><span class=\"p\">:</span>\n    <span class=\"n\">time_ms</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">frame_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">first_frame_ts_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">mill</span> <span class=\"o\">=</span> <span class=\"n\">WaterMill</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">process_func</span><span class=\"o\">=</span><span class=\"n\">merge_audio_video</span><span class=\"p\">,</span>\n    <span class=\"n\">join_tree</span><span class=\"o\">=</span><span class=\"n\">join_streams</span><span class=\"p\">(</span>\n        <span class=\"n\">AudioFrame</span><span class=\"p\">,</span>\n        <span class=\"n\">JoinWith</span><span class=\"p\">(</span>\n            <span class=\"n\">with_type</span><span class=\"o\">=</span><span class=\"n\">VideoFrame</span><span class=\"p\">,</span>\n            <span class=\"n\">left_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time_seconds'</span><span class=\"p\">),</span>\n            <span class=\"n\">right_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time_ms'</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">1000</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">mill</span> <span class=\"o\">=</span> <span class=\"n\">WaterMill</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">process_func</span><span class=\"o\">=</span><span class=\"n\">merge_audio_video</span><span class=\"p\">,</span>\n    <span class=\"n\">join_tree</span><span class=\"o\">=</span><span class=\"n\">join_streams</span><span class=\"p\">(</span>\n        <span class=\"n\">AudioFrame</span><span class=\"p\">,</span>\n        <span class=\"n\">JoinWith</span><span class=\"p\">(</span>\n            <span class=\"n\">with_type</span><span class=\"o\">=</span><span class=\"n\">VideoFrame</span><span class=\"p\">,</span>\n            <span class=\"n\">left_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time_seconds'</span><span class=\"p\">),</span>\n            <span class=\"n\">right_expression</span><span class=\"o\">=</span>\n                <span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'frame_index'</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">FRAME_DURATION_SECONDS</span> <span class=\"o\">+</span> \n                <span class=\"n\">get_fields</span><span class=\"p\">(</span><span class=\"s1\">'first_frame_ts_seconds'</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Expressions calculation implementation is trivial and does not support operator precedence or parentheses.</p>\n<p>Computed key value for every stream must increase monotonously. Based on this rule Watermill can detect streams\ndivergence. For example at the start of data processing left (master) stream key less than right (secondary) stream key.\nIn this case Watermill will skip right stream elements until stream elements synchronizes.</p>\n<p>During data streams design you should keep in mind key comparison rules to correctly identify what the key will be\nfor every data stream.</p>\n<p>Special case for joining streams is when the stream appears in join tree several times, e.g. self-join of the stream.\nIn this case separate class have to be defined for every join tree node of this stream type.\nRefer to <a href=\"https://gitlab.com/kraevs/watermill/-/blob/master/examples/kafka_join_streams.py\" rel=\"nofollow\">kafka_join_streams</a> example.</p>\n<h3>Windows</h3>\n<p>Sometimes you may want to get master stream elements combined into lists based on some condition before processing.\nFor example collect one minute statistics and then process whole bunch of elements at once.\nThus processing function will get list of elements every time. Below is the illustration of appropriate stream configuration.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">calculate_robot_speed</span><span class=\"p\">(</span><span class=\"n\">prev_location</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RobotLocation</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RobotSpeed</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">mill</span> <span class=\"o\">=</span> <span class=\"n\">WaterMill</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">process_func</span><span class=\"o\">=</span><span class=\"n\">calculate_robot_speed</span><span class=\"p\">,</span>\n    <span class=\"n\">stream_cls</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">RobotLocation</span><span class=\"p\">,</span>\n        <span class=\"n\">window_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">30</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Notice the additional <code>List</code> type hint in the processing function and call to <code>window</code> function that returns\nspecial <code>Window</code> object. <code>window_expression</code> field of Window is key-based expression that distinguish elements\nof adjacent windows.</p>\n<p>In the same way windowing is configured:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">calculate_robot_speed</span><span class=\"p\">(</span>\n        <span class=\"n\">prev_location</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RobotLocation</span><span class=\"p\">],</span> \n        <span class=\"n\">next_locations</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">RobotLocation</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RobotLocationNextStep</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">RobotSpeed</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">mill</span> <span class=\"o\">=</span> <span class=\"n\">WaterMill</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">process_func</span><span class=\"o\">=</span><span class=\"n\">calculate_robot_speed</span><span class=\"p\">,</span>\n    <span class=\"n\">join_tree</span><span class=\"o\">=</span><span class=\"n\">join_streams</span><span class=\"p\">(</span>\n        <span class=\"n\">window</span><span class=\"p\">(</span>\n            <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">RobotLocation</span><span class=\"p\">,</span>\n            <span class=\"n\">window_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">30</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">JoinWith</span><span class=\"p\">(</span>\n            <span class=\"n\">with_type</span><span class=\"o\">=</span><span class=\"n\">RobotLocationNextStep</span><span class=\"p\">,</span>\n            <span class=\"n\">left_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n            <span class=\"n\">right_expression</span><span class=\"o\">=</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s1\">'time'</span><span class=\"p\">)</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Element-based window expressions may be not sufficient. E.g. processing function should receive list of all elements\narrived in every 20 seconds. Default configuration of Kafka message broker is blocking. It means that if there are\nno new messages in the topic then window expression checking time elapsed will not be called at all.\nTo let Watermill periodic call of window expression <code>poll_timeout</code> of <code>KafkaMesasgeBroker</code> construction should be set\nto appropriate value. Such data stream windowing has two limitations:</p>\n<ul>\n<li>there must be only one (master) stream;</li>\n<li>window expression must be able to deal with <code>None</code> values which are passed to it on poll timeouts.</li>\n</ul>\n<h3>Message brokers</h3>\n<p>Watermill includes the following message brokers:</p>\n<ol>\n<li>\n<p><strong>JsonFileMessageBroker</strong></p>\n<p>Reads whole input files into memory and provide Watermill with data elements.\nWrites output stream elements into file at the end of stream.</p>\n<p>Files contents is JSON list of objects.</p>\n<p><code>JsonFileMessageBroker</code> configuration is quite obvious:</p>\n<pre> <span class=\"n\">JsonFileMessageBroker</span><span class=\"p\">({</span>\n     <span class=\"n\">GoodsItem</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'/samples/goods.json'</span><span class=\"p\">)</span>\n <span class=\"p\">})</span>\n</pre>\n<p>The only constructor argument is element type \u2014 file path mapping.</p>\n<p>This broker should not be used if files are very big.</p>\n</li>\n<li>\n<p><strong>KafkaMessageBroker</strong></p>\n<p>This broker uses <code>kafka-python</code> internally to communicate with Kafka.</p>\n<p>Every data stream is topic. There is no limitation on topic naming due to explicit element type \u2014 topic name mapping:</p>\n<pre> <span class=\"n\">KafkaMessageBroker</span><span class=\"p\">(</span>\n     <span class=\"n\">topic_names</span><span class=\"o\">=</span><span class=\"p\">{</span>\n         <span class=\"n\">RobotLocation</span><span class=\"p\">:</span> <span class=\"s1\">'robot-locations'</span><span class=\"p\">,</span>\n         <span class=\"n\">RobotLocationNextStep</span><span class=\"p\">:</span> <span class=\"s1\">'robot-locations'</span><span class=\"p\">,</span>\n         <span class=\"n\">RobotSpeed</span><span class=\"p\">:</span> <span class=\"s1\">'robot-speed'</span><span class=\"p\">,</span>\n     <span class=\"p\">},</span>\n     <span class=\"n\">kafka_url</span><span class=\"o\">=</span><span class=\"s1\">'kafka:9092'</span>\n <span class=\"p\">)</span>\n</pre>\n<p>When using <code>KafkaMessageBroker</code> data stream positions are automatically saved. So whenever the processing service\ncrashes and restarts it continues processing from the same data streams positions.</p>\n<p><code>KafkaMessageBroker</code> creates consumer for every join tree node with dedicated consumer group with name based on\nelement class name. So positions for every data stream is saved (committed) individually.</p>\n</li>\n</ol>\n<h3>Logging</h3>\n<p>Watermill utilizes common logging configuration pattern:</p>\n<pre><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>So you can easily change Watermill logger parameters based on logger prefix <code>'watermill'</code>.</p>\n<h3>Multiple Watermill instances</h3>\n<p>Watermill processing loops can be safely run in separate threads.</p>\n<p>Note that Watermill was not designed to be thread-safe and should not be accessed from different threads.</p>\n<h3>Code examples</h3>\n<p>Basic usage examples can be found in repository: <a href=\"https://gitlab.com/kraevs/watermill/-/blob/master/examples/\" rel=\"nofollow\">Examples</a></p>\n<h2>Watermill benefits</h2>\n<ul>\n<li>tiny amount of user code necessary to organize data stream processing;</li>\n<li>rapid and safe streams join configuration and reconfiguration</li>\n<li>every Watermill-based service independently specifies its input, output streams</li>\n<li>explicit typed processing function interface</li>\n<li>stream data structure is defined by pure dataclasses</li>\n<li>Watermill loop does not keep streams data in memory</li>\n<li>end of streams are always explicit</li>\n<li>failsafe:\n<ul>\n<li>Watermill brokers can be configured to raise EndOfStream by data timeout;</li>\n<li>Watermill-based service crashes and restarts do not cause data loss/duplication or state corruption when\nusing Kafka message broker.</li>\n</ul>\n</li>\n<li>rich join functionality allows to build self-joins where the data stream is joined with itself</li>\n<li>dependency injection allows to add side-effects to processing functions</li>\n<li>streams misalignment is automatically eliminates using join conditions</li>\n<li>straightforward message brokers interface encourage to implement own specific brokers</li>\n</ul>\n<h2>Caveats and limitations</h2>\n<ul>\n<li>Lack of stream state saving transactionality when using Kafka message broker.\nWatermill saves topics position every time after outputting processing result.\nIn the case of process crash between result and state save there will be generated result data duplicate.\nIt will be improved after <code>python-kafka</code> client is support <strong>exactly-once</strong> guarantee Kafka API.</li>\n<li>When using Watermill in python3.6 you have to add <code>dataclasses</code> package manually to project requirements.</li>\n<li>Kafka topics have to be created manually.</li>\n</ul>\n<p><img alt=\"Speech Technology Center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ffa5a3632cf3aa4ab5b8d9a0ec15cbe87237aaf/68747470733a2f2f6769746c61622e636f6d2f6b72616576732f77617465726d696c6c2f2d2f7261772f383337636462333261666662336162386237313562626666636230646436653864616162303062392f696d672f7374632e706e67\"></p>\n\n          </div>"}, "last_serial": 6842769, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "137c792f761359da4641703d3b9a8797", "sha256": "1203c4f2a10cd84e32e1480d9ff4764bd41916fdbc6e19cad257f8a947bcd48e"}, "downloads": -1, "filename": "watermill-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "137c792f761359da4641703d3b9a8797", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10827, "upload_time": "2020-02-11T14:44:33", "upload_time_iso_8601": "2020-02-11T14:44:33.800947Z", "url": "https://files.pythonhosted.org/packages/e8/98/587e33c1773cb43ab61830d9c44fe56a32f978acf075e2979e254940335c/watermill-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76c99552ba5f319cb20b26ea085da69d", "sha256": "421dba7a6755d1fe8d26e7f10070f6e68405c6e1f98802422ce67a04aa121aaf"}, "downloads": -1, "filename": "watermill-1.0.0.tar.gz", "has_sig": false, "md5_digest": "76c99552ba5f319cb20b26ea085da69d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13630, "upload_time": "2020-02-11T14:44:35", "upload_time_iso_8601": "2020-02-11T14:44:35.897079Z", "url": "https://files.pythonhosted.org/packages/8b/9b/24ce3e615e56f0586c973001f5df5a33cfdc5d07ac5da5b5f35b7268a367/watermill-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "cb0b8e1b51761529032fdc8cf9cc4063", "sha256": "7de9e0563b89d9597cb8cebe742bf8bca40cb3640989a96408a0d15b362c5f29"}, "downloads": -1, "filename": "watermill-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0b8e1b51761529032fdc8cf9cc4063", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11263, "upload_time": "2020-02-14T09:58:15", "upload_time_iso_8601": "2020-02-14T09:58:15.211347Z", "url": "https://files.pythonhosted.org/packages/89/30/22c06f14379dac32170224676c2e779ebb2e31799a4bab01665a0692f962/watermill-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4f0e6f95e292e5c43b7316d058a691c", "sha256": "c9a004c0e62057bd9b3c9cd44159f4b59186605b4e279d0df105f4612dbc6c98"}, "downloads": -1, "filename": "watermill-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a4f0e6f95e292e5c43b7316d058a691c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14374, "upload_time": "2020-02-14T09:58:17", "upload_time_iso_8601": "2020-02-14T09:58:17.006781Z", "url": "https://files.pythonhosted.org/packages/7b/0a/bce3b0e6d24211d71e1d7a9b28274ed1627bd70298ec4fce8cbcecdfde5b/watermill-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "bce0cda59ed143e96fc4977b09568d1f", "sha256": "2e5c830f73c1c819eef23081747201d5259dc19712b55299e8c60606a5f7537a"}, "downloads": -1, "filename": "watermill-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bce0cda59ed143e96fc4977b09568d1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11510, "upload_time": "2020-02-14T11:54:47", "upload_time_iso_8601": "2020-02-14T11:54:47.559778Z", "url": "https://files.pythonhosted.org/packages/03/4b/79d481e95e6a6ac3de8712fbbec8bb167571be5b92c0c7ef35fdb4077ea5/watermill-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72735b8a8f508f8151aeae71371510d0", "sha256": "65f3c35b526a03d929b3f51718a735c5a7233faae730205aafef0b01d79a2119"}, "downloads": -1, "filename": "watermill-2.0.0.tar.gz", "has_sig": false, "md5_digest": "72735b8a8f508f8151aeae71371510d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14728, "upload_time": "2020-02-14T11:54:49", "upload_time_iso_8601": "2020-02-14T11:54:49.075359Z", "url": "https://files.pythonhosted.org/packages/aa/bb/9a086332a0a556bfc2e43cf0ffee68c36a63dae407d179786371b6d64fc8/watermill-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "0876390d4a6dcabac75bb3a461ee3560", "sha256": "a884ac76ee250f193d3c79e2144eb000bfde24148592a5827abc943b1ca47404"}, "downloads": -1, "filename": "watermill-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0876390d4a6dcabac75bb3a461ee3560", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31942, "upload_time": "2020-02-17T10:43:38", "upload_time_iso_8601": "2020-02-17T10:43:38.809402Z", "url": "https://files.pythonhosted.org/packages/4d/23/e65f8022130289e94ca60aa0877c343737ab230e39a7d6f1379c0f2b1c91/watermill-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3b7d1a5edba1042d87980a0034bd936", "sha256": "6cd3a6ac39d528b8a459c39e156d49dd98662f51d4516cbb8f77bbadfc1b0c6f"}, "downloads": -1, "filename": "watermill-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c3b7d1a5edba1042d87980a0034bd936", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21058, "upload_time": "2020-02-17T10:43:39", "upload_time_iso_8601": "2020-02-17T10:43:39.980138Z", "url": "https://files.pythonhosted.org/packages/a9/6a/678a2d4ea4d0bd3af4f03621d02a22e577f90f5e9f42f120daa581be0d59/watermill-2.0.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "febefc9ad22d1074d6216f934c28bd75", "sha256": "28d18369e7af4b595b8ae3ee6e2fff08435092f510054bb5e8b7aeb258f2efbd"}, "downloads": -1, "filename": "watermill-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "febefc9ad22d1074d6216f934c28bd75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31962, "upload_time": "2020-02-17T11:23:58", "upload_time_iso_8601": "2020-02-17T11:23:58.493110Z", "url": "https://files.pythonhosted.org/packages/52/c3/2248c19ced0a591114f79c28ce781731a378620141766976e88080df954b/watermill-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a426679907b2429794faba22319aafa", "sha256": "ac244b95ea7e3279b8e72a46b91aef8227329392a37e0eb4ab1e09ae3e60a448"}, "downloads": -1, "filename": "watermill-3.0.0.tar.gz", "has_sig": false, "md5_digest": "8a426679907b2429794faba22319aafa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21084, "upload_time": "2020-02-17T11:23:59", "upload_time_iso_8601": "2020-02-17T11:23:59.932823Z", "url": "https://files.pythonhosted.org/packages/ac/4b/59e3fdaa53506bd2272bd4ccab1db40779eae9a6cce73f33423cbc02fbbb/watermill-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "4f01e51504802712d7b48d9358386b3e", "sha256": "12213d23c15b64c51d896592cdc629ef5f78efe389452a8fe94c4d91fe8f088f"}, "downloads": -1, "filename": "watermill-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4f01e51504802712d7b48d9358386b3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31961, "upload_time": "2020-02-17T14:45:25", "upload_time_iso_8601": "2020-02-17T14:45:25.381999Z", "url": "https://files.pythonhosted.org/packages/c2/ee/751dc70cf1c91dbeac45f606013a3baa49643490b4628b4bb04f85eab7e3/watermill-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e87e9374d9dc206b30315df53870680", "sha256": "a4a0e4ec902c32cc366ff71edeca43fab79e2019ae3797168bb976698adbc1ea"}, "downloads": -1, "filename": "watermill-3.0.1.tar.gz", "has_sig": false, "md5_digest": "7e87e9374d9dc206b30315df53870680", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21089, "upload_time": "2020-02-17T14:45:26", "upload_time_iso_8601": "2020-02-17T14:45:26.511412Z", "url": "https://files.pythonhosted.org/packages/0a/4e/5d9c04aa329ac760b1cdb00a0f7e5e5b25ebf5904a484ed5387cdca3dac2/watermill-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "3cfc0d68c5c15f7122429419db324ee0", "sha256": "bf3b206ca590fcef449469b3e42a736dbf3825bbcbe1b4d6916c9a35717fd883"}, "downloads": -1, "filename": "watermill-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3cfc0d68c5c15f7122429419db324ee0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31976, "upload_time": "2020-02-17T16:18:02", "upload_time_iso_8601": "2020-02-17T16:18:02.677304Z", "url": "https://files.pythonhosted.org/packages/3a/04/0df1d58a27ae69d7c4cc34e219833e6e2dcde55d661a40135c8c9a580e51/watermill-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ab9c179a92d20e2f74d9170b80bd819", "sha256": "4e8bffd5fb9da8811c09eb04f875d5852d63f2ee686effb9938d241014504bce"}, "downloads": -1, "filename": "watermill-3.0.2.tar.gz", "has_sig": false, "md5_digest": "8ab9c179a92d20e2f74d9170b80bd819", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21106, "upload_time": "2020-02-17T16:18:03", "upload_time_iso_8601": "2020-02-17T16:18:03.892021Z", "url": "https://files.pythonhosted.org/packages/17/c1/519cec08f620b422d5bf7322cc183be473348fb7384deb7bebadc2f7861a/watermill-3.0.2.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "6fcb60774ba66b690469c45a0831ddc1", "sha256": "b0f4400e74176c5e02c03c054f171406067ec763fd38fe342bcd2cdc64101ece"}, "downloads": -1, "filename": "watermill-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6fcb60774ba66b690469c45a0831ddc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32019, "upload_time": "2020-02-17T16:32:33", "upload_time_iso_8601": "2020-02-17T16:32:33.325496Z", "url": "https://files.pythonhosted.org/packages/e5/04/9a88e69687e02dc15f7e1c5faa10f0a72e5e4cec8bdcf6954f521271b010/watermill-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f1c8a0c1e9ac9a89619c281532885bb", "sha256": "9ae3ccdfb5dffe29d5729ba7030fa7808f439321e88d693fe333c1b78128da1c"}, "downloads": -1, "filename": "watermill-3.1.0.tar.gz", "has_sig": false, "md5_digest": "6f1c8a0c1e9ac9a89619c281532885bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21157, "upload_time": "2020-02-17T16:32:34", "upload_time_iso_8601": "2020-02-17T16:32:34.678761Z", "url": "https://files.pythonhosted.org/packages/51/40/69a6c6c5336b40d3ec6c49e1629095d04158b612e8bc47f031c6aaef0f65/watermill-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "bbc68d745a46a1c529a47375f8f0082c", "sha256": "7c5c6d31a563d161311e538ae848d83176d2a7404e34edcee0e250154ac9c042"}, "downloads": -1, "filename": "watermill-3.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bbc68d745a46a1c529a47375f8f0082c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32032, "upload_time": "2020-02-17T17:11:41", "upload_time_iso_8601": "2020-02-17T17:11:41.811949Z", "url": "https://files.pythonhosted.org/packages/2b/ba/8a259dc871ed799697b992e51dfe284b2d402523926a11e7de35a235fdec/watermill-3.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e6dd4d028b194ad6114dca0462e60a9", "sha256": "ab0807eca18c9b4d575e9509bfcc72e34820b35005195a9ec74c238f921bb262"}, "downloads": -1, "filename": "watermill-3.1.1.tar.gz", "has_sig": false, "md5_digest": "1e6dd4d028b194ad6114dca0462e60a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21174, "upload_time": "2020-02-17T17:11:43", "upload_time_iso_8601": "2020-02-17T17:11:43.197711Z", "url": "https://files.pythonhosted.org/packages/fb/ef/68d765ff7e4bd398ab04dfe5f868f82619b01026d7b8710f7941e62557cf/watermill-3.1.1.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "fff04a7d8dffde243bf82a006ef937e5", "sha256": "f2f9f0aeead5296dabd1a7e9fb6c3322ae3ee7342d369ac2dfc67ab5dfaebb4e"}, "downloads": -1, "filename": "watermill-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fff04a7d8dffde243bf82a006ef937e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32150, "upload_time": "2020-02-18T15:51:58", "upload_time_iso_8601": "2020-02-18T15:51:58.310243Z", "url": "https://files.pythonhosted.org/packages/21/b4/90ab08f39cbeb2739cde7dec3d718642ed02ec0147cd0431f7bcbc68ee96/watermill-3.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad80fcdd956779e948c7c1557833110d", "sha256": "c0b093ae4aba0d67fe1074d790502e71acbeca52a07079042bc2e27bde75e433"}, "downloads": -1, "filename": "watermill-3.2.0.tar.gz", "has_sig": false, "md5_digest": "ad80fcdd956779e948c7c1557833110d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21320, "upload_time": "2020-02-18T15:51:59", "upload_time_iso_8601": "2020-02-18T15:51:59.782870Z", "url": "https://files.pythonhosted.org/packages/a5/39/38a1274e54cfed56a90905639effca0ae3533f669b697889134d10a9fcfe/watermill-3.2.0.tar.gz", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "96d2962f9877820775b92ce962581747", "sha256": "ce39a445985185341274f51a3316d4f511436c233a4195dfeaf5e069d9bdfa5a"}, "downloads": -1, "filename": "watermill-3.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "96d2962f9877820775b92ce962581747", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32127, "upload_time": "2020-02-18T16:18:11", "upload_time_iso_8601": "2020-02-18T16:18:11.989401Z", "url": "https://files.pythonhosted.org/packages/88/bf/6ec50dd174ef1b6714fafac9b841cdd47ee72bbee353e79f2d6b3dc88d2d/watermill-3.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "771051e7a53a67e72be7516f7c6cbed1", "sha256": "6056657179a046b84684c395880927e38e2802057eb9ed0ec7eb40322d76eb44"}, "downloads": -1, "filename": "watermill-3.2.1.tar.gz", "has_sig": false, "md5_digest": "771051e7a53a67e72be7516f7c6cbed1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21293, "upload_time": "2020-02-18T16:18:13", "upload_time_iso_8601": "2020-02-18T16:18:13.252223Z", "url": "https://files.pythonhosted.org/packages/a0/d8/e14f678cc37fda298f9ce062628d4ef533af1a168839e7d3387f037a8cbc/watermill-3.2.1.tar.gz", "yanked": false}], "3.2.2": [{"comment_text": "", "digests": {"md5": "9acc95fcae60e6ebebc7ab04e51728f5", "sha256": "9bd5bcacec464bc12a9452dd159f971984c5bc5b0e51674c1a417c5863ec36a8"}, "downloads": -1, "filename": "watermill-3.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9acc95fcae60e6ebebc7ab04e51728f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32151, "upload_time": "2020-02-18T16:40:31", "upload_time_iso_8601": "2020-02-18T16:40:31.219559Z", "url": "https://files.pythonhosted.org/packages/6c/a1/6ea07b53535c45434b3e08dd3f18e332ce4563aff2a0e5863ae25ac4219f/watermill-3.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "796d9a4c0e4c71248aa8530637f39032", "sha256": "db9b5d18b8c90c7d06d3a22aa4820243884e1fb972b06edb478f1aa606e64be4"}, "downloads": -1, "filename": "watermill-3.2.2.tar.gz", "has_sig": false, "md5_digest": "796d9a4c0e4c71248aa8530637f39032", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21305, "upload_time": "2020-02-18T16:40:32", "upload_time_iso_8601": "2020-02-18T16:40:32.742804Z", "url": "https://files.pythonhosted.org/packages/6a/57/8f6b34be690252b455f04cde77ae1003e0e0b2bf1bda7b9c67ef6418d436/watermill-3.2.2.tar.gz", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "1ec8bcddbad6c46e3d0a458ccd21d034", "sha256": "18b3f3b5406c777d8bc18c92e5766a0b8dc06285365d15e33fc35912dbbff0c5"}, "downloads": -1, "filename": "watermill-3.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1ec8bcddbad6c46e3d0a458ccd21d034", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 33969, "upload_time": "2020-03-12T15:18:55", "upload_time_iso_8601": "2020-03-12T15:18:55.875867Z", "url": "https://files.pythonhosted.org/packages/7a/11/de748587865518745288e988c94fd3cfa6c47a50ef18bcd989563ce1f264/watermill-3.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d612754e45b5e10b3c501f72683b4472", "sha256": "aff76a484c372e787c0b837767523d7629606b7d6859ec621ce39e86896d4e81"}, "downloads": -1, "filename": "watermill-3.3.0.tar.gz", "has_sig": false, "md5_digest": "d612754e45b5e10b3c501f72683b4472", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21898, "upload_time": "2020-03-12T15:18:57", "upload_time_iso_8601": "2020-03-12T15:18:57.347062Z", "url": "https://files.pythonhosted.org/packages/eb/ab/5f7c286b43abc232cf992c4f96ed51545d0c02e63e1244cf42ecd15bd81c/watermill-3.3.0.tar.gz", "yanked": false}], "3.3.1": [{"comment_text": "", "digests": {"md5": "5ba3eea63e2eaf1967f426bed57115de", "sha256": "86384d31edc3af372fb2bdbc7b385db1866b262da56b6e0d047f55d9a2d52c13"}, "downloads": -1, "filename": "watermill-3.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ba3eea63e2eaf1967f426bed57115de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 33998, "upload_time": "2020-03-12T16:03:58", "upload_time_iso_8601": "2020-03-12T16:03:58.261078Z", "url": "https://files.pythonhosted.org/packages/22/46/f0745d0cbf3c9ef9f6f5c5c1f68773d794afc6bd562434d4a0da80084944/watermill-3.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1947588bfd466897a5a20524932a7385", "sha256": "9803864df5452bcddbf4a50cf0ef9581bd47714f2e0fb453143b421ff39e47dc"}, "downloads": -1, "filename": "watermill-3.3.1.tar.gz", "has_sig": false, "md5_digest": "1947588bfd466897a5a20524932a7385", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21918, "upload_time": "2020-03-12T16:03:59", "upload_time_iso_8601": "2020-03-12T16:03:59.364400Z", "url": "https://files.pythonhosted.org/packages/96/f4/d4670b47c445a0ae3f2e6eac6673fadf9209ba0f9e499a06efdce0b24b7e/watermill-3.3.1.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "4974b9cbde258089e56ed62b40547380", "sha256": "1fa42c48122c470388dbb4c2a7a747cbe3f490d1236f910897c0a3a93e22098a"}, "downloads": -1, "filename": "watermill-3.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4974b9cbde258089e56ed62b40547380", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36625, "upload_time": "2020-03-13T16:28:20", "upload_time_iso_8601": "2020-03-13T16:28:20.964194Z", "url": "https://files.pythonhosted.org/packages/89/72/301135b35cce6c367fe0aa1dc0ebe8f6059d7406ad1e3ff13cbac6bf4b4d/watermill-3.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1bedd838f6d92aa692560c1975e2faf", "sha256": "763c79cd1d45cec3de01166f3cd2eaaf8ca9cfc724154609e2a94d25ea55d161"}, "downloads": -1, "filename": "watermill-3.4.0.tar.gz", "has_sig": false, "md5_digest": "c1bedd838f6d92aa692560c1975e2faf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23138, "upload_time": "2020-03-13T16:28:23", "upload_time_iso_8601": "2020-03-13T16:28:23.065765Z", "url": "https://files.pythonhosted.org/packages/8a/04/df06c126ee0e5079b50e3d6cf16c79310feea430a748674fcf1a4ce5a533/watermill-3.4.0.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "9fec093d1015b850b9cb57e5fd39ef80", "sha256": "9f8cb532cb253af69263f64c65d8b0eefa76432e743a5079883813804cd7087e"}, "downloads": -1, "filename": "watermill-3.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fec093d1015b850b9cb57e5fd39ef80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36660, "upload_time": "2020-03-19T10:18:14", "upload_time_iso_8601": "2020-03-19T10:18:14.617919Z", "url": "https://files.pythonhosted.org/packages/9a/bf/6096326e15c390e63927a165fa966b0796af950d33a415c2f3b0ae222038/watermill-3.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a90e2459821bbec80136cb417491bd58", "sha256": "0eef5b7fe28fd74a11c16f79bec00b7984c0482a59ac862a1f2de8dcfe80146a"}, "downloads": -1, "filename": "watermill-3.4.1.tar.gz", "has_sig": false, "md5_digest": "a90e2459821bbec80136cb417491bd58", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23181, "upload_time": "2020-03-19T10:18:17", "upload_time_iso_8601": "2020-03-19T10:18:17.106907Z", "url": "https://files.pythonhosted.org/packages/88/28/1908a805ff716f48574875892298ba20d5076322930d9f79eec9d233d55e/watermill-3.4.1.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "046b47b0284820b43625f9adff2c0cf1", "sha256": "37a495b61cd54d319146828cd76b0cf0d29a56579d7c1881a0804a89cee68701"}, "downloads": -1, "filename": "watermill-3.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "046b47b0284820b43625f9adff2c0cf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36755, "upload_time": "2020-03-19T12:02:21", "upload_time_iso_8601": "2020-03-19T12:02:21.857433Z", "url": "https://files.pythonhosted.org/packages/70/02/ef45075fac9901b0a2f501f96ca9d6564de540dbd4e783863e66b2db320c/watermill-3.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9fcb9d1ddbdc2cfe30bc5d38d7cc6f2", "sha256": "e7bc2d12c0d937f44af9b778152b654264ce5b65b630e62d7d1c81062084109d"}, "downloads": -1, "filename": "watermill-3.5.0.tar.gz", "has_sig": false, "md5_digest": "a9fcb9d1ddbdc2cfe30bc5d38d7cc6f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23363, "upload_time": "2020-03-19T12:02:23", "upload_time_iso_8601": "2020-03-19T12:02:23.320581Z", "url": "https://files.pythonhosted.org/packages/bf/c5/4291d9f31fb165b74c9495cda3af1055ea5702a57c9ee26051bf08495a17/watermill-3.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "046b47b0284820b43625f9adff2c0cf1", "sha256": "37a495b61cd54d319146828cd76b0cf0d29a56579d7c1881a0804a89cee68701"}, "downloads": -1, "filename": "watermill-3.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "046b47b0284820b43625f9adff2c0cf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36755, "upload_time": "2020-03-19T12:02:21", "upload_time_iso_8601": "2020-03-19T12:02:21.857433Z", "url": "https://files.pythonhosted.org/packages/70/02/ef45075fac9901b0a2f501f96ca9d6564de540dbd4e783863e66b2db320c/watermill-3.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9fcb9d1ddbdc2cfe30bc5d38d7cc6f2", "sha256": "e7bc2d12c0d937f44af9b778152b654264ce5b65b630e62d7d1c81062084109d"}, "downloads": -1, "filename": "watermill-3.5.0.tar.gz", "has_sig": false, "md5_digest": "a9fcb9d1ddbdc2cfe30bc5d38d7cc6f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23363, "upload_time": "2020-03-19T12:02:23", "upload_time_iso_8601": "2020-03-19T12:02:23.320581Z", "url": "https://files.pythonhosted.org/packages/bf/c5/4291d9f31fb165b74c9495cda3af1055ea5702a57c9ee26051bf08495a17/watermill-3.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:06 2020"}