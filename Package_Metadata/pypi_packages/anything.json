{"info": {"author": "Martin Vilcans", "author_email": "martin@librador.com", "bugtrack_url": null, "classifiers": [], "description": "anything\n========\n\nDefines the `Anything` and `Something` constants.\n\n`Anything` compares true with any other object::\n\n    >>> Anything == 42\n    True\n    >>> 'hello' == Anything\n    True\n\nYou can use it to check that specific values in a data structure\nhave a value, but it doesn't matter what they are,\nfor example in a unit test::\n\n    >>> [1, 2, 3] == [1, Anything, 3]\n    True\n    >>> {'x': 10, 'y': -3} == {'x': 10, 'y': Anything}\n    True\n    >>> {'x': 10} == {'x': 10, 'y': Anything}\n    False\n\nInequality behaves consistently with equality::\n\n    >>> 'hello' != Anything\n    False\n\nEven None is considered equal to Anything::\n\n    >>> Anything == None\n    True\n\nIf you want to make sure that a value is not None, use `Something`\ninstead::\n\n    >>> Something == None\n    False\n    >>> Something == 1\n    True\n    >>> 1 == Something\n    True\n    >>> Something != None\n    True\n    >>> Something != 'foo'\n    False\n\n`Something` only checks for None specifically, i.e. it does not accept any\nfalsy value::\n\n    >>> Something == False\n    True\n    >>> Something != False\n    False\n\nEquality between the two constants works as you probably expect::\n\n    >>> Anything == Anything\n    True\n    >>> Something == Something\n    True\n    >>> Anything == Something\n    True\n    >>> Something == Anything\n    True\n\nUsage in Tests\n--------------\n\nExample: Creating a user and making sure its data is returned.\nAs the generated ID can be anything, we can't check it's value,\nbut this makes sure it is returned::\n\n    import unittest\n\n    class MyTest(unittest.TestCase):\n        def test_create_user(self):\n            data = create_user(name='Mary')\n            self.assertEqual({\n                'name': 'Mary',\n                'id': Anything\n            }, data)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vilcans/anything", "keywords": "unittest", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "anything", "package_url": "https://pypi.org/project/anything/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/anything/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vilcans/anything"}, "release_url": "https://pypi.org/project/anything/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Python constants that consider themselves equal to everything else. Useful for unit testing and more.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Defines the <cite>Anything</cite> and <cite>Something</cite> constants.</p>\n<p><cite>Anything</cite> compares true with any other object:</p>\n<pre>&gt;&gt;&gt; Anything == 42\nTrue\n&gt;&gt;&gt; 'hello' == Anything\nTrue\n</pre>\n<p>You can use it to check that specific values in a data structure\nhave a value, but it doesn\u2019t matter what they are,\nfor example in a unit test:</p>\n<pre>&gt;&gt;&gt; [1, 2, 3] == [1, Anything, 3]\nTrue\n&gt;&gt;&gt; {'x': 10, 'y': -3} == {'x': 10, 'y': Anything}\nTrue\n&gt;&gt;&gt; {'x': 10} == {'x': 10, 'y': Anything}\nFalse\n</pre>\n<p>Inequality behaves consistently with equality:</p>\n<pre>&gt;&gt;&gt; 'hello' != Anything\nFalse\n</pre>\n<p>Even None is considered equal to Anything:</p>\n<pre>&gt;&gt;&gt; Anything == None\nTrue\n</pre>\n<p>If you want to make sure that a value is not None, use <cite>Something</cite>\ninstead:</p>\n<pre>&gt;&gt;&gt; Something == None\nFalse\n&gt;&gt;&gt; Something == 1\nTrue\n&gt;&gt;&gt; 1 == Something\nTrue\n&gt;&gt;&gt; Something != None\nTrue\n&gt;&gt;&gt; Something != 'foo'\nFalse\n</pre>\n<p><cite>Something</cite> only checks for None specifically, i.e. it does not accept any\nfalsy value:</p>\n<pre>&gt;&gt;&gt; Something == False\nTrue\n&gt;&gt;&gt; Something != False\nFalse\n</pre>\n<p>Equality between the two constants works as you probably expect:</p>\n<pre>&gt;&gt;&gt; Anything == Anything\nTrue\n&gt;&gt;&gt; Something == Something\nTrue\n&gt;&gt;&gt; Anything == Something\nTrue\n&gt;&gt;&gt; Something == Anything\nTrue\n</pre>\n<div id=\"usage-in-tests\">\n<h2>Usage in Tests</h2>\n<p>Example: Creating a user and making sure its data is returned.\nAs the generated ID can be anything, we can\u2019t check it\u2019s value,\nbut this makes sure it is returned:</p>\n<pre>import unittest\n\nclass MyTest(unittest.TestCase):\n    def test_create_user(self):\n        data = create_user(name='Mary')\n        self.assertEqual({\n            'name': 'Mary',\n            'id': Anything\n        }, data)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1892851, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "72341526ad74036dd745fc3fbb0e5874", "sha256": "478900e490d224d0de2eb12390639bf9859b14da3687c0e84ae16e8f2ade81ad"}, "downloads": -1, "filename": "anything-0.1.0.tar.gz", "has_sig": false, "md5_digest": "72341526ad74036dd745fc3fbb0e5874", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1790, "upload_time": "2014-06-17T14:46:21", "upload_time_iso_8601": "2014-06-17T14:46:21.669859Z", "url": "https://files.pythonhosted.org/packages/2e/f1/cbc1c9e62b17e17cf253e32f892c7c74765e72110772696a588a58cc68a9/anything-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9a1c49582d64d72be83a5afdcbcc2e50", "sha256": "42980e614b77130b9ba83f4a902f9748911d95e17393c44fd3b6dfa41713c806"}, "downloads": -1, "filename": "anything-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9a1c49582d64d72be83a5afdcbcc2e50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2221, "upload_time": "2015-12-21T08:46:39", "upload_time_iso_8601": "2015-12-21T08:46:39.688362Z", "url": "https://files.pythonhosted.org/packages/7d/0d/7a2cf7e41cd21208099cc267fbd4f902a2bf238cf8c6893c3f8a416ec665/anything-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "63db97a49e11e54b7481b33f6f7865dc", "sha256": "ad3f9112bab0e09a7d0608a54139325bf264e2f38471e76c194fe7a64faad19c"}, "downloads": -1, "filename": "anything-0.2.1.tar.gz", "has_sig": false, "md5_digest": "63db97a49e11e54b7481b33f6f7865dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2233, "upload_time": "2016-01-07T12:24:05", "upload_time_iso_8601": "2016-01-07T12:24:05.154601Z", "url": "https://files.pythonhosted.org/packages/5c/cf/472ddcfd30d2aba865b5b9f861697e499c62f9ce29d18e27f97e1b760848/anything-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63db97a49e11e54b7481b33f6f7865dc", "sha256": "ad3f9112bab0e09a7d0608a54139325bf264e2f38471e76c194fe7a64faad19c"}, "downloads": -1, "filename": "anything-0.2.1.tar.gz", "has_sig": false, "md5_digest": "63db97a49e11e54b7481b33f6f7865dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2233, "upload_time": "2016-01-07T12:24:05", "upload_time_iso_8601": "2016-01-07T12:24:05.154601Z", "url": "https://files.pythonhosted.org/packages/5c/cf/472ddcfd30d2aba865b5b9f861697e499c62f9ce29d18e27f97e1b760848/anything-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:55 2020"}