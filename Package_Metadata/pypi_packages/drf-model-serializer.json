{"info": {"author": "Panji Y. Wiwaha", "author_email": "panjiyudasetya@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# drf-model-serializer\n\n## Description\nThe scope of this module is to enhance DRF's [ModelSerializer](https://www.django-rest-framework.org/api-guide/serializers/#modelserializer) class, and provide object-level validation out of the box. \n\nThe idea is that the model defines its object-level validation in its `clean` method. The serializer class `ModelSerializer` provided by this module, overrides its `validate` method so that it invokes the model's `clean` method. Therefore whenever invoking the serializer's `is_valid` method, the `validate` method runs and provides the object-level validation.\n\nThis way, object-level validation is defined once in the model and is used automatically by the Django admin, the model when explicitly invoking `full_clean` and the serializer whenever invoking `is_valid`. This follows the convention for *field-level* validation. When defined correctly using *[model validators](https://docs.djangoproject.com/en/2.2/ref/validators/)*, the field-level validation is used out of the box by the Django admin, serializer and model.\n\n## Proving the validation idea\nIn this module, we also provide a Django project that will show you how the object level validations works together with Django admin, Serializer, and a model by implementing `drf-model-serializer` and model `clean()` method. A main focus of the test project lives on create/update actions over any drinks or main dishes recipe, which all any incoming data either from Admin or Serializer must be validated. See the [Recipe model](https://github.com/senseobservationsystems/drf-model-serializer/blob/master/test_project/test_app/models.py) and the [tests section](https://github.com/senseobservationsystems/drf-model-serializer/tree/master/test_project/test_app/tests) to understand it in more detail.\n\n### Prerequisite\nEnsure pip installed on your local machine. If you don't have it, you can follow the installation guide [here](https://pip.pypa.io/en/stable/installing/).\n\n### How to run the tests\n1. Open terminal and go to the root directory of where the package live, for instance: `$ cd Documents/py-projects/drf-model-serializer`.\n2. Run `$ ./scripts/requirement-install.sh` from your command line.\n3. Run `$ ./scripts/checker.sh`.\n\n### How to run the test project\nCurrently only Recipe admin page that available to be explored, and to try it out you can follow these steps:\n1. Open terminal and go to the root directory of where the package live, for instance: `$ cd Documents/py-projects/drf-model-serializer`.\n3. Run `$ ./scripts/requirement-install.sh` from your command line (you can skip this if you already did it when running the tests).\n4. Run `$ source venv/bin/activate && cd test_project && python manage.py migrate`.\n5. Create admin user, run `$ python manage.py createsuperuser --email admin@mail.com --username admin`.\n6. Run `$ python manage.py runserver 0.0.0.0:8000` and when server is ready, open the admin page and logged in with the previous Admin account.\n\n\n## Installation\n```bash\n$ pip install drf-model-serializer\n```\nor add this on your `requirements.txt`\n```\ndrf-model-serializer==0.0.1\n```\n\n## Get involved!\n\nWe are happy to receive bug reports, fixes, documentation enhancements, and other improvements.\n\nPlease report bugs via the github [issue tracker](https://github.com/senseobservationsystems/drf-model-serializer/issues).\n\nMaster git repository [drf-model-serializer](https://github.com/senseobservationsystems/drf-model-serializer).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/senseobservationsystems/drf-model-serializer", "keywords": "django,drf,serializer", "license": "", "maintainer": "", "maintainer_email": "", "name": "drf-model-serializer", "package_url": "https://pypi.org/project/drf-model-serializer/", "platform": "", "project_url": "https://pypi.org/project/drf-model-serializer/", "project_urls": {"Homepage": "https://github.com/senseobservationsystems/drf-model-serializer"}, "release_url": "https://pypi.org/project/drf-model-serializer/0.0.1/", "requires_dist": ["django", "djangorestframework"], "requires_python": "", "summary": "A simple library that enhance 'ModelSerializer' class so that it performs object-level validation for free.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>drf-model-serializer</h1>\n<h2>Description</h2>\n<p>The scope of this module is to enhance DRF's <a href=\"https://www.django-rest-framework.org/api-guide/serializers/#modelserializer\" rel=\"nofollow\">ModelSerializer</a> class, and provide object-level validation out of the box.</p>\n<p>The idea is that the model defines its object-level validation in its <code>clean</code> method. The serializer class <code>ModelSerializer</code> provided by this module, overrides its <code>validate</code> method so that it invokes the model's <code>clean</code> method. Therefore whenever invoking the serializer's <code>is_valid</code> method, the <code>validate</code> method runs and provides the object-level validation.</p>\n<p>This way, object-level validation is defined once in the model and is used automatically by the Django admin, the model when explicitly invoking <code>full_clean</code> and the serializer whenever invoking <code>is_valid</code>. This follows the convention for <em>field-level</em> validation. When defined correctly using <em><a href=\"https://docs.djangoproject.com/en/2.2/ref/validators/\" rel=\"nofollow\">model validators</a></em>, the field-level validation is used out of the box by the Django admin, serializer and model.</p>\n<h2>Proving the validation idea</h2>\n<p>In this module, we also provide a Django project that will show you how the object level validations works together with Django admin, Serializer, and a model by implementing <code>drf-model-serializer</code> and model <code>clean()</code> method. A main focus of the test project lives on create/update actions over any drinks or main dishes recipe, which all any incoming data either from Admin or Serializer must be validated. See the <a href=\"https://github.com/senseobservationsystems/drf-model-serializer/blob/master/test_project/test_app/models.py\" rel=\"nofollow\">Recipe model</a> and the <a href=\"https://github.com/senseobservationsystems/drf-model-serializer/tree/master/test_project/test_app/tests\" rel=\"nofollow\">tests section</a> to understand it in more detail.</p>\n<h3>Prerequisite</h3>\n<p>Ensure pip installed on your local machine. If you don't have it, you can follow the installation guide <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">here</a>.</p>\n<h3>How to run the tests</h3>\n<ol>\n<li>Open terminal and go to the root directory of where the package live, for instance: <code>$ cd Documents/py-projects/drf-model-serializer</code>.</li>\n<li>Run <code>$ ./scripts/requirement-install.sh</code> from your command line.</li>\n<li>Run <code>$ ./scripts/checker.sh</code>.</li>\n</ol>\n<h3>How to run the test project</h3>\n<p>Currently only Recipe admin page that available to be explored, and to try it out you can follow these steps:</p>\n<ol>\n<li>Open terminal and go to the root directory of where the package live, for instance: <code>$ cd Documents/py-projects/drf-model-serializer</code>.</li>\n<li>Run <code>$ ./scripts/requirement-install.sh</code> from your command line (you can skip this if you already did it when running the tests).</li>\n<li>Run <code>$ source venv/bin/activate &amp;&amp; cd test_project &amp;&amp; python manage.py migrate</code>.</li>\n<li>Create admin user, run <code>$ python manage.py createsuperuser --email admin@mail.com --username admin</code>.</li>\n<li>Run <code>$ python manage.py runserver 0.0.0.0:8000</code> and when server is ready, open the admin page and logged in with the previous Admin account.</li>\n</ol>\n<h2>Installation</h2>\n<pre>$ pip install drf-model-serializer\n</pre>\n<p>or add this on your <code>requirements.txt</code></p>\n<pre><code>drf-model-serializer==0.0.1\n</code></pre>\n<h2>Get involved!</h2>\n<p>We are happy to receive bug reports, fixes, documentation enhancements, and other improvements.</p>\n<p>Please report bugs via the github <a href=\"https://github.com/senseobservationsystems/drf-model-serializer/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n<p>Master git repository <a href=\"https://github.com/senseobservationsystems/drf-model-serializer\" rel=\"nofollow\">drf-model-serializer</a>.</p>\n\n          </div>"}, "last_serial": 6178527, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d2aefebb41dd4c45bf19ac1842a6f33f", "sha256": "006364fa9562b1e021b256ca1b280f3b98ac19b25961911dd112498b167fd66c"}, "downloads": -1, "filename": "drf_model_serializer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d2aefebb41dd4c45bf19ac1842a6f33f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4340, "upload_time": "2019-11-22T02:39:10", "upload_time_iso_8601": "2019-11-22T02:39:10.892746Z", "url": "https://files.pythonhosted.org/packages/87/b7/02f36bd8e2daff1f6f42e936fe36093b8433a63fbe413bca28efbd183ff6/drf_model_serializer-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06f29753cac67bf785116b824d3b1087", "sha256": "063fe89c27db242050bbdd8fd7aff3bb139aed11cb4021985f7577cb3464e66f"}, "downloads": -1, "filename": "drf-model-serializer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "06f29753cac67bf785116b824d3b1087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3123, "upload_time": "2019-11-22T02:39:13", "upload_time_iso_8601": "2019-11-22T02:39:13.222778Z", "url": "https://files.pythonhosted.org/packages/53/56/6eda865b55b223467082c3d3a7928fefca41cb1caef27e5850253cb91d0e/drf-model-serializer-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2aefebb41dd4c45bf19ac1842a6f33f", "sha256": "006364fa9562b1e021b256ca1b280f3b98ac19b25961911dd112498b167fd66c"}, "downloads": -1, "filename": "drf_model_serializer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d2aefebb41dd4c45bf19ac1842a6f33f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4340, "upload_time": "2019-11-22T02:39:10", "upload_time_iso_8601": "2019-11-22T02:39:10.892746Z", "url": "https://files.pythonhosted.org/packages/87/b7/02f36bd8e2daff1f6f42e936fe36093b8433a63fbe413bca28efbd183ff6/drf_model_serializer-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06f29753cac67bf785116b824d3b1087", "sha256": "063fe89c27db242050bbdd8fd7aff3bb139aed11cb4021985f7577cb3464e66f"}, "downloads": -1, "filename": "drf-model-serializer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "06f29753cac67bf785116b824d3b1087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3123, "upload_time": "2019-11-22T02:39:13", "upload_time_iso_8601": "2019-11-22T02:39:13.222778Z", "url": "https://files.pythonhosted.org/packages/53/56/6eda865b55b223467082c3d3a7928fefca41cb1caef27e5850253cb91d0e/drf-model-serializer-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:43 2020"}