{"info": {"author": "Antony Lee", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Matplotlib", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "====================================\nA (new) cairo backend for Matplotlib\n====================================\n\n|PyPI| |Fedora Rawhide|\n\n|Azure Pipelines|\n\n.. |PyPI|\n   image:: https://img.shields.io/pypi/v/mplcairo.svg\n   :target: https://pypi.python.org/pypi/mplcairo\n.. |Fedora Rawhide|\n   image:: https://repology.org/badge/version-for-repo/fedora_rawhide/python:mplcairo.svg\n   :target: fedora-package_\n.. |Azure Pipelines|\n   image:: https://dev.azure.com/matplotlib/mplcairo/_apis/build/status/matplotlib.mplcairo\n   :target: https://dev.azure.com/matplotlib/mplcairo/_build/latest?definitionId=1\n\n.. _fedora-package: https://apps.fedoraproject.org/packages/python-mplcairo\n\n.. contents:: :local:\n\nThis is a new, essentially complete implementation of a cairo_ backend for\nMatplotlib_.  It can be used in combination with a Qt5, GTK3, Tk, wx, or macOS\nUI, or non-interactively (i.e., to save figure to various file formats).\n\nNoteworthy points include:\n\n.. ... sadly, currently not true.\n\n   - Speed (the backend can be up to ~10\u00d7 faster than Agg, e.g., when stamping\n     circular markers of variable colors).\n\n- Improved accuracy (e.g., with marker positioning, quad meshes, and text\n  kerning; floating point surfaces are supported with cairo\u22651.17.2).\n- Support for a wider variety of font formats, such as otf and pfb, for vector\n  (PDF, PS, SVG) backends (Matplotlib's Agg backend also supports such fonts).\n- Optional support for complex text layout (right-to-left languages, etc.) and\n  OpenType font features (see `examples/opentype_features.py`_) using Raqm_.\n  **Note** that Raqm depends on Fribidi,\n  which is licensed under the LGPLv2.1+.\n- Support for embedding URLs in PDF (but not SVG) output (requires\n  cairo\u22651.15.4).\n- Support for multi-page output both for PDF and PS (Matplotlib only supports\n  multi-page PDF).\n- Support for custom blend modes (see `examples/operators.py`_).\n\n.. _cairo: https://www.cairographics.org/\n.. _Matplotlib: http://matplotlib.org/\n.. _Raqm: https://github.com/HOST-Oman/libraqm\n.. _examples/opentype_features.py: examples/opentype_features.py\n.. _examples/operators.py: examples/operators.py\n\nInstallation\n============\n\nmplcairo requires\n\n- Python\u22653.6,\n- Matplotlib\u22652.2 (declared as ``install_requires``),\n- on Linux and macOS, pycairo\u22651.16.0 [#]_ (declared as ``install_requires``),\n- on Windows, cairo\u22651.11.4 [#]_ (shipped with the wheel).\n\nAdditionally, building mplcairo from source requires\n\n- pybind11\u22652.5.0 [#]_ (declared as ``setup_requires``),\n- on Linux and macOS, pycairo\u22651.16.0 (declared as ``setup_requires`` on macOS,\n  but not on Linux).\n\nAs usual, install using pip:\n\n.. code-block:: sh\n\n   $ pip install mplcairo  # from PyPI\n   $ pip install git+https://github.com/matplotlib/mplcairo  # from Github\n\nNote that wheels are not available for macOS<10.13, because the libc++ included\nwith these versions is too old and vendoring of libc++ appears to be fragile.\nHelp for packaging would be welcome.\n\nmplcairo can use Raqm_ (\u22650.2) for complex text layout and handling of\nOpenType font features.  Refer to the instructions on that project's\nwebsite for installation on Linux and macOS.  You may want to look at\nhttps://github.com/HOST-Oman/libraqm-cmake for Windows build scripts.\n\n.. [#] pycairo 1.16.0 added ``get_include()``.\n\n   We do not actually rely on pycairo's Python bindings.  Rather, specifying a\n   dependency on pycairo is a convenient way to specify a dependency on cairo\n   (\u22651.13.1, for pycairo\u22651.14.0) itself, and allows us to load cairo at\n   runtime instead of linking to it (simplifying the build of self-contained\n   wheels).\n\n   On Windows, this strategy is (AFAIK) not possible, so we explicitly link\n   against the cairo DLL.\n\n   pycairo is not declared as a ``setup_requires`` on Linux because the\n   manylinux wheel builder needs to work around it.\n\n.. [#] cairo 1.11.4 added mesh gradient support (used by ``draw_quad_mesh()``).\n\n   cairo 1.15.4 added support for PDF metadata and links; the presence of this\n   feature is detected at runtime.\n\n   cairo 1.17.2 added support for floating point surfaces, usable with\n   ``mplcairo.set_options(float_surface=True)``; the presence of this feature\n   is detected at runtime.\n\n   Note that cairo 1.17.2 (and only that version) has a bug that causes (in\n   particular) polar gridlines to be incorrectly cropped.  This bug was fixed\n   in 2d1a137.  However, if you are already using a non-tagged, >1.17.2 version\n   of cairo, it is suggested to use a commit \u2265dfe3aa6, as the latter further\n   fixes another bug that can cause crashes in mplcairo.\n\n.. [#] pybind11 2.5.0 is the earliest version that supports being added as\n   ``setup_requires`` (and read-only buffers).\n\nOn Fedora, the package is available as `python-mplcairo <fedora-package_>`_.\n\nBuilding/packaging\n==================\n\nThis section is only relevant if you wish to build mplcairo yourself, or\npackage it for redistribution.  Otherwise, proceed to the Use_ section.\n\nIn all cases, once the dependencies described below are installed, mplcairo\ncan be built and installed using any of the standard commands (``pip wheel\n--no-deps .``, ``pip install .``, ``pip install -e .`` and ``python setup.py\nbuild_ext -i`` being the most relevant ones).\n\nUnix\n----\n\nThe following additional dependencies are required:\n\n- a C++ compiler with C++17 support, e.g. GCC\u22657.2 or Clang\u22655.0.\n\n- cairo and FreeType headers, and pkg-config information to locate them.\n\n  If using conda, they can be installed using ::\n\n     conda install -y -c conda-forge pycairo pkg-config\n\n  as pycairo (also a dependency) depends on cairo, which depends on freetype.\n  Note that cairo and pkg-config from the ``anaconda`` channel will *not* work.\n\n  On Linux, they can also be installed with your distribution's package manager\n  (Arch: ``cairo``, Debian/Ubuntu: ``libcairo2-dev``, Fedora: ``cairo-devel``).\n\nRaqm (\u22650.2) headers are also needed, but will be automatically downloaded if\nnot found.\n\nLinux\n`````\n\nconda's compilers (``gxx_linux-64`` on the ``anaconda`` channel) `currently\ninteract poorly with installing cairo and pkg-config from conda-forge\n<conda-build-2523_>`_, so you are on your own to install a recent compiler\n(e.g., using your distribution's package manager).  You may want to set the\n``CC`` and ``CXX`` environment variables to point to your C++ compiler if it is\nnonstandard [#]_.  In that case, be careful to set them to e.g. ``g++-7`` and\n**not** ``gcc-7``, otherwise the compilation will succeed but the shared object\nwill be mis-linked and fail to load.\n\nThe manylinux wheel is built using `tools/build-manylinux-wheel.sh`_.\n\n.. _tools/build-manylinux-wheel.sh: tools/build-manylinux-wheel.sh\n\n**NOTE**: On Arch Linux, the python-pillow (Arch) package includes an invalid\nversion of ``raqm.h`` (https://bugs.archlinux.org/task/57492) and must not be\ninstalled while building mplcairo with the system Python, even in a virtualenv\n(it can be installed when *using* mplcairo without causing any problems).  One\nsolution is to temporarily uninstall the package; another one is to package it\nyourself using e.g. pypi2pkgbuild_.\n\n.. [#] ``distutils`` uses ``CC`` for *compiling* C++ sources but ``CXX`` for\n   linking them (don't ask).  You may run into additional issues if ``CC`` or\n   ``CXX`` has multiple words; e.g., if ``CC`` is set to ``ccache g++``, you\n   also need to set ``CXX`` to ``ccache gcc``.\n\n.. _conda-build-2523: https://github.com/conda/conda-build/issues/2523\n.. _pypi2pkgbuild: https://github.com/anntzer/pypi2pkgbuild\n\nmacOS\n`````\n\nClang\u22655.0 can be installed from ``conda``'s ``anaconda`` channel (``conda\ninstall -c anaconda clangxx_osx-64``), or can also be installed with Homebrew\n(``brew install llvm``).  Note that Homebrew's llvm formula is keg-only, i.e.\nit requires manual modifications to the PATH and LDFLAGS (as documented by\n``brew info llvm``).\n\nOn macOS<10.14, it is additionally necessary to use clang<8.0 (e.g. with ``brew\ninstall llvm@7``) as clang 8.0 appears to believe that code relying on C++17\ncan only be run on macOS\u226510.14+.\n\nThe macOS wheel is built using ``tools/build-macos-wheel.sh``, which relies on\ndelocate-wheel_ (to vendor a recent version of libc++).  Currently, it can only\nbe built from a Homebrew-clang wheel, not a conda-clang wheel (due to some path\nintricacies...).\n\nAs I can personally only test the macOS build on CI, any help with the build\nand the packaging on that platform would be welcome.\n\n.. _delocate-wheel: https://github.com/matthew-brett/delocate\n\nWindows\n-------\n\nThe following additional dependencies are required:\n\n- VS2019 (The exact minimum version is unknown, but it is known that mplcairo\n  fails to build on the Azure ``vs2017-win2016`` agent and requires the\n  ``windows-2019`` agent.)\n\n- cairo headers and import and dynamic libraries (``cairo.lib`` and\n  ``cairo.dll``) *with FreeType support*.  Note that this excludes, in\n  particular, the Anaconda and conda-forge builds: they do not include\n  FreeType support.\n\n  I am in fact not aware of any such build available online, with the exception\n  of https://github.com/preshing/cairo-windows/releases; however, this specific\n  build appears to `misrender pdfs`_.  Instead, a solution is to get the\n  headers e.g. from a Linux distribution package, the DLL from Christoph\n  Gohlke's cairocffi_ build, and generate the import library oneself using\n  ``dumpbin`` and ``lib``.\n\n- FreeType headers and import and dynamic libraries (``freetype.lib`` and\n  ``freetype.dll``), which can be retrieved from\n  https://github.com/ubawurinna/freetype-windows-binaries, or alternatively\n  using conda::\n\n     conda install -y freetype\n\n.. _misrender pdfs: https://preshing.com/20170529/heres-a-standalone-cairo-dll-for-windows/#IDComment1047546463\n.. _cairocffi: https://www.lfd.uci.edu/~gohlke/pythonlibs/#cairocffi\n\nThe (standard) |CL|_ and |LINK|_ environment variables (which always get\nprepended respectively to the invocations of the compiler and the linker)\nshould be set as follows::\n\n   set CL=/IC:\\path\\to\\dir\\containing\\cairo.h /IC:\\same\\for\\ft2build.h\n   set LINK=/LIBPATH:C:\\path\\to\\dir\\containing\\cairo.lib /LIBPATH:C:\\same\\for\\freetype.lib\n\nMoreover, we also need to find ``cairo.dll`` and ``freetype.dll`` and copy\nthem next to ``mplcairo``'s extension module.  As the dynamic libraries are\ntypically found next to import libraries, we search the ``/LIBPATH:`` entries\nin the ``LINK`` environment variable and copy the first ``cairo.dll`` and\n``freetype.dll`` found there.\n\nThe script ``tools/build-windows-wheel.py`` automates the retrieval of the\ncairo (assuming that a Gohlke cairocffi is already installed) and FreeType and\nthe wheel build.\n\n.. |CL| replace:: ``CL``\n.. _CL: https://docs.microsoft.com/en-us/cpp/build/reference/cl-environment-variables\n.. |LINK| replace:: ``LINK``\n.. _LINK: https://docs.microsoft.com/en-us/cpp/build/reference/link-environment-variables\n\nUse\n===\n\nOn Linux and Windows, mplcairo can be used as any normal Matplotlib backend:\ncall e.g. ``matplotlib.use(\"module://mplcairo.qt\")`` before importing pyplot,\nadd a ``backend: module://mplcairo.qt`` line in your ``matplotlibrc``, or set\nthe ``MPLBACKEND`` environment variable to ``module://mplcairo.qt``.  More\nspecifically, the following backends are provided:\n\n- ``module://mplcairo.base`` (No GUI, but can output to EPS, PDF, PS, SVG, and\n  SVGZ using cairo's implementation, rather than Matplotlib's),\n- ``module://mplcairo.gtk`` (GTK3 widget, copying data from a cairo image\n  surface),\n- ``module://mplcairo.gtk_native`` (GTK3 widget, directly drawn onto as a\n  native surface; does not and cannot support blitting),\n- ``module://mplcairo.qt`` (Qt4/5 widget, copying data from a cairo image\n  surface \u2014 select the binding to use by importing it before mplcairo, or by\n  setting the ``QT_API`` environment variable),\n- ``module://mplcairo.tk`` (Tk widget, copying data from a cairo image\n  surface),\n- ``module://mplcairo.wx`` (wx widget, copying data from a cairo image\n  surface),\n- ``module://mplcairo.macosx`` (macOS widget, copying data from a cairo image\n  surface).\n\nOn macOS, **it is necessary to explicitly import mplcairo before importing\nMatplotlib** due to incompatibilities associated with the use of a recent\nlibc++.  As such, the most practical option is to import mplcairo, then call\ne.g. ``matplotlib.use(\"module://mplcairo.macosx\")``.\n\nTo use cairo rendering in Jupyter's ``inline`` mode, patch, in your\n``ipython_config.py``:\n\n.. code-block:: python\n\n   import mplcairo.base\n   import ipykernel.pylab.backend_inline\n   ipykernel.pylab.backend_inline.new_figure_manager = \\\n       mplcairo.base.new_figure_manager\n\nAlternatively, set the ``MPLCAIRO_PATCH_AGG`` environment variable to a\nnon-empty value to fully replace the Agg renderer by the cairo renderer\nthroughout Matplotlib.  However, this approach is inefficient (due to the need\nof copies and conversions between premultiplied ARGB32 and straight RGBA8888\nbuffers); additionally, it does not work with the wx and macosx backends due\nto peculiarities of the corresponding canvas classes.  On the other hand, this\nis currently the only way in which the webagg-based backends (e.g., Jupyter's\ninteractive widgets) are supported.\n\nAt import-time, mplcairo will attempt to load Raqm_.  The use of that library\ncan be controlled and checked using the ``set_options`` and ``get_options``\nfunctions.\n\nThe examples_ directory contains a few cases where the output of this renderer\nis arguably more accurate than the one of the default renderer, Agg:\n\n- circle_markers.py_ and square_markers.py_: more accurate and faster marker\n  stamping.\n- marker_stamping.py_: more accurate marker stamping.\n- quadmesh.py_: better antialiasing of quad meshes, fewer artefacts with\n  masked data.\n- text_kerning.py_: improved text kerning.\n\n.. _examples: examples/\n.. _circle_markers.py: examples/circle_markers.py\n.. _square_markers.py: examples/square_markers.py\n.. _marker_stamping.py: examples/marker_stamping.py\n.. _quadmesh.py: examples/quadmesh.py\n.. _text_kerning.py: examples/text_kerning.py\n\nBenchmarks\n==========\n\nInstall (in the virtualenv) ``pytest>=3.1.0`` and ``pytest-benchmark``, then\ncall (e.g.):\n\n.. code-block:: sh\n\n   pytest --benchmark-group-by=fullfunc --benchmark-timer=time.process_time\n\nKeep in mind that conda-forge's cairo is (on my setup) ~2\u00d7 slower than a\n\"native\" build of cairo.\n\nTest suite\n==========\n\nRun ``run-mpl-test-suite.py`` (which depends on ``pytest>=3.2.2``) to run the\nMatplotlib test suite with the Agg backend patched by the mplcairo backend.\nNote that Matplotlib must be installed with its test data, which is not the\ncase when it is installed from conda or from most Linux distributions; instead,\nit should be installed from PyPI or from source.\n\nNearly all image comparison tests \"fail\" as the renderers are fundamentally\ndifferent; currently, the intent is to manually check the diff images.  Passing\n``--tolerance=inf`` marks these tests as \"passed\" (while still textually\nreporting the image differences) so that one can spot issues not related to\nrendering differences.  In practice, ``--tolerance=50`` appears to be enough.\n\nSome other (non-image-comparison) tests are also known to fail (they are listed\nin ``ISSUES.rst``, with the relevant explanations), and automatically skipped.\n\nRun ``run-examples.py`` to run some examples that exercise some more aspects of\nmplcairo.\n\nNotes\n=====\n\nAntialiasing\n------------\n\nThe artist antialiasing property can be set to any of the ``cairo_antialias_t``\nenum values, or ``True`` (the default) or ``False`` (which is synonym to\n``NONE``).\n\nSetting antialiasing to ``True`` uses ``FAST`` antialiasing for lines thicker\nthan 1/3px and ``BEST`` for lines thinner than that: for lines thinner\nthan 1/3px, the former leads to artefacts such as lines disappearing in\ncertain sections (see e.g. ``test_cycles.test_property_collision_plot`` after\nforcing the antialiasing to ``FAST``).  The threshold of 1/3px was determined\nempirically, see `examples/thin_line_antialiasing.py`_.\n\n.. _examples/thin_line_antialiasing.py: examples/thin_line_antialiasing.py\n\nNote that in order to set the ``lines.antialiased`` or ``patch.antialiased``\nrcparams to a ``cairo_antialias_t`` enum value, it is necessary to bypass\nrcparam validation, using, e.g.\n\n.. code-block:: python\n\n   dict.__setitem__(plt.rcParams, \"lines.antialiased\", antialias_t.FAST)\n\nThe ``text.antialiased`` rcparam can likewise be set to any\n``cairo_antialias_t`` enum value, or ``True`` (the default, which maps to\n``SUBPIXEL`` \u2014 ``GRAY`` is not sufficient to benefit from Raqm_'s subpixel\npositioning; see also `cairo issue #152 <cairo-152_>`_) or ``False`` (which\nmaps to ``NONE``).\n\n.. _cairo-152: https://gitlab.freedesktop.org/cairo/cairo/issues/152\n\nNote that in rare cases, ``FAST`` antialiasing can trigger a \"double free or\ncorruption\" bug in cairo (`#44 <cairo-44_>`_).  If you hit this problem,\nconsider using ``BEST`` or ``NONE`` antialiasing (depending on your quality and\nspeed requirements).\n\n.. _cairo-44: https://gitlab.freedesktop.org/cairo/cairo/issues/44\n\nFast drawing\n------------\n\nFor fast drawing of path with many segments, the ``agg.path.chunksize`` rcparam\nshould be set to e.g. 1000 (see `examples/time_drawing_per_element.py`_ for the\ndetermination of this value); this causes longer paths to be split into\nindividually rendered sections of 1000 segments each (directly rendering longer\npaths appears to have slightly superlinear complexity).\n\n.. _examples/time_drawing_per_element.py: examples/time_drawing_per_element.py\n\nSimplification threshold\n------------------------\n\nThe ``path.simplify_threshold`` rcparam is used to control the accuracy of\nmarker stamping, down to an arbitrarily chosen threshold of 1/16px.  If the\nthreshold is set to a lower value, the exact (slower) marker drawing path will\nbe used.  Marker stamping is also implemented for scatter plots (which can have\nmultiple colors).  Likewise, markers of different sizes get mapped into markers\nof discretized sizes, with an error bounded by the threshold.\n\n**NOTE**: ``pcolor`` and mplot3d's ``plot_surface`` display some artifacts\nwhere the facets join each other.  This is because these functions internally\nuse a ``PathCollection``; this triggers the approximate stamping, and\neven without it (by setting ``path.simplify_threshold`` to zero), cairo's\nrasterization of the edge between the facets is poor.  ``pcolormesh`` (which\ninternally uses a ``QuadMesh``) should generally be preferred over ``pcolor``\nanyways.  ``plot_surface`` could likewise instead represent the surface using\n``QuadMesh``, which is drawn without such artefacts.\n\nFont formats and features\n-------------------------\n\nIn order to use a specific font that Matplotlib may be unable to use, pass a\nfilename directly:\n\n.. code-block:: python\n\n   from matplotlib.font_manager import FontProperties\n   fig.text(.5, .5, \"hello, world\",\n            fontproperties=FontProperties(fname=\"/path/to/font.ttf\"))\n\nor more simply, with Matplotlib\u22653.3:\n\n.. code-block:: python\n\n   from pathlib import Path\n   fig.text(.5, .5, \"hello, world\", font=Path(\"/path/to/font.ttf\"))\n\nmplcairo still relies on Matplotlib's font cache, so fonts unsupported by\nMatplotlib remain unavailable by other means.\n\nFor TTC fonts (and, more generally, font formats that include multiple font\nfaces in a single file), the *n*\\th font (*n*\\\u22650) can be selected by appending\n``#n`` to the filename (e.g., ``\"/path/to/font.ttc#1\"``).\n\nOpenType font features can be selected by appending ``|feature,...``\nto the filename, followed by a `HarfBuzz feature string`_ (e.g.,\n``\"/path/to/font.otf|frac,onum\"``); see `examples/opentype_features.py`_.\n\n.. _HarfBuzz feature string: https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-feature-from-string\n\nThe syntaxes for selecting TTC subfonts and OpenType font features are\n**experimental** and may change, especially if such features are implemented in\nMatplotlib itself.\n\nNote that Matplotlib's (default) Agg backend will handle most (single-face)\nfonts equally well (ultimately, both backends relies on FreeType for\nrasterization).  It is Matplotlib's vector backends (PS, PDF, and, for pfb\nfonts, SVG) that do not support these fonts, whereas mplcairo support these\nfonts in all output formats.\n\nMulti-page output\n-----------------\n\nMatplotlib's ``PdfPages`` class is deeply tied with the builtin ``backend_pdf``\n(in fact, it cannot even be used with Matplotlib's own cairo backend).\nInstead, use ``mplcairo.multipage.MultiPage`` for multi-page PDF and PS output.\nThe API is similar:\n\n.. code-block:: python\n\n   from mplcairo.multipage import MultiPage\n\n   fig1 = ...\n   fig2 = ...\n   with MultiPage(path_or_stream, metadata=...) as mp:\n       mp.savefig(fig1)\n       mp.savefig(fig2)\n\nSee the class' docstring for additional information.\n\n``cairo-script`` output\n-----------------------\n\nSetting the ``MPLCAIRO_SCRIPT_SURFACE`` environment variable *before mplcairo\nis imported* to ``vector`` or ``raster`` allows one to save figures (with\n``savefig``) in the ``.cairoscript`` format, which is a \"native script that\nmatches the cairo drawing model\".  The value of the variable determines the\nrendering path used (e.g., whether marker stamping is used at all).  This may\nbe helpful for troubleshooting purposes.\n\nNote that this may crash the process after the file is written, due to `cairo\nissue #277 <cairo-277_>`_.\n\n.. _cairo-277: https://gitlab.freedesktop.org/cairo/cairo/issues/277\n\nMarkers at B\u00e9zier control points\n--------------------------------\n\n``draw_markers`` draws a marker at each control point of the given path, which\nis the documented behavior, even though all builtin renderers only draw markers\nat straight or B\u00e9zier segment ends.\n\nKnown issues\n============\n\nMissing support from cairo\n--------------------------\n\n- SVG output does not set URLs or ids on any element, as cairo provides no\n  support to do so.\n- PS output does not respect SOURCE_DATE_EPOCH.\n- PS output does not support the ``Creator`` metadata key; however it supports\n  the ``Title`` key.\n- The following rcparams have no effect:\n\n  - ``pdf.fonttype`` (font type is selected by cairo internally),\n  - ``pdf.inheritcolor`` (effectively always ``False``),\n  - ``pdf.use14corefonts`` (effectively always ``False``),\n  - ``ps.fonttype`` (font type is selected by cairo internally),\n  - ``ps.useafm`` (effectively always ``False``),\n  - ``svg.fonttype`` (effectively always ``\"path\"``, see `cairo issue #253\n    <cairo-253_>`_),\n  - ``svg.hashsalt``.\n\n.. _cairo-253: https://gitlab.freedesktop.org/cairo/cairo/issues/253\n\nPossible optimizations\n======================\n\n- Cache eviction policy and persistent cache for ``draw_path_collection``.\n- Path simplification (although cairo appears to use vertex reduction and\n  Douglas-Peucker internally?).\n- Use QtOpenGLWidget and the cairo-gl backend.\n\nWhat about the already existing cairo (gtk3/qt4/qt5/wx/tk/...cairo) backends?\n=============================================================================\n\nThey are very slow (try running `examples/mplot3d/wire3d_animation.py`_) and\nrender math poorly (try ``title(r\"$\\sqrt{2}$\")``).\n\n.. _examples/mplot3d/wire3d_animation.py: examples/mplot3d/wire3d_animation.py\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matplotlib/mplcairo", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mplcairo", "package_url": "https://pypi.org/project/mplcairo/", "platform": "", "project_url": "https://pypi.org/project/mplcairo/", "project_urls": {"Homepage": "https://github.com/matplotlib/mplcairo"}, "release_url": "https://pypi.org/project/mplcairo/0.3/", "requires_dist": ["matplotlib (>=2.2)", "pillow", "pycairo (>=1.16.0) ; os_name == \"posix\""], "requires_python": ">=3.6", "summary": "A (new) cairo backend for Matplotlib.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/mplcairo\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/858e85120eadb4b03e578cf3b6ae1e4000b7f8bf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d706c636169726f2e737667\"></a> <a href=\"https://apps.fedoraproject.org/packages/python-mplcairo\" rel=\"nofollow\"><img alt=\"Fedora Rawhide\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d813c9337fb3c9930b95a9075024258b601959b0/68747470733a2f2f7265706f6c6f67792e6f72672f62616467652f76657273696f6e2d666f722d7265706f2f6665646f72615f726177686964652f707974686f6e3a6d706c636169726f2e737667\"></a></p>\n<p><a href=\"https://dev.azure.com/matplotlib/mplcairo/_build/latest?definitionId=1\" rel=\"nofollow\"><img alt=\"Azure Pipelines\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a5c3c7312308bb4550176b0dec65ff2ef9b91a9/68747470733a2f2f6465762e617a7572652e636f6d2f6d6174706c6f746c69622f6d706c636169726f2f5f617069732f6275696c642f7374617475732f6d6174706c6f746c69622e6d706c636169726f\"></a></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id9\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#building-packaging\" id=\"id10\" rel=\"nofollow\">Building/packaging</a><ul>\n<li><a href=\"#unix\" id=\"id11\" rel=\"nofollow\">Unix</a><ul>\n<li><a href=\"#linux\" id=\"id12\" rel=\"nofollow\">Linux</a></li>\n<li><a href=\"#macos\" id=\"id13\" rel=\"nofollow\">macOS</a></li>\n</ul>\n</li>\n<li><a href=\"#windows\" id=\"id14\" rel=\"nofollow\">Windows</a></li>\n</ul>\n</li>\n<li><a href=\"#use\" id=\"id15\" rel=\"nofollow\">Use</a></li>\n<li><a href=\"#benchmarks\" id=\"id16\" rel=\"nofollow\">Benchmarks</a></li>\n<li><a href=\"#test-suite\" id=\"id17\" rel=\"nofollow\">Test suite</a></li>\n<li><a href=\"#notes\" id=\"id18\" rel=\"nofollow\">Notes</a><ul>\n<li><a href=\"#antialiasing\" id=\"id19\" rel=\"nofollow\">Antialiasing</a></li>\n<li><a href=\"#fast-drawing\" id=\"id20\" rel=\"nofollow\">Fast drawing</a></li>\n<li><a href=\"#simplification-threshold\" id=\"id21\" rel=\"nofollow\">Simplification threshold</a></li>\n<li><a href=\"#font-formats-and-features\" id=\"id22\" rel=\"nofollow\">Font formats and features</a></li>\n<li><a href=\"#multi-page-output\" id=\"id23\" rel=\"nofollow\">Multi-page output</a></li>\n<li><a href=\"#cairo-script-output\" id=\"id24\" rel=\"nofollow\"><tt><span class=\"pre\">cairo-script</span></tt> output</a></li>\n<li><a href=\"#markers-at-bezier-control-points\" id=\"id25\" rel=\"nofollow\">Markers at B\u00e9zier control points</a></li>\n</ul>\n</li>\n<li><a href=\"#known-issues\" id=\"id26\" rel=\"nofollow\">Known issues</a></li>\n<li><a href=\"#possible-optimizations\" id=\"id27\" rel=\"nofollow\">Possible optimizations</a></li>\n<li><a href=\"#what-about-the-already-existing-cairo-gtk3-qt4-qt5-wx-tk-cairo-backends\" id=\"id28\" rel=\"nofollow\">What about the already existing cairo (gtk3/qt4/qt5/wx/tk/\u2026cairo) backends?</a></li>\n</ul>\n</div>\n<p>This is a new, essentially complete implementation of a <a href=\"https://www.cairographics.org/\" rel=\"nofollow\">cairo</a> backend for\n<a href=\"http://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a>.  It can be used in combination with a Qt5, GTK3, Tk, wx, or macOS\nUI, or non-interactively (i.e., to save figure to various file formats).</p>\n<p>Noteworthy points include:</p>\n<ul>\n<li>Improved accuracy (e.g., with marker positioning, quad meshes, and text\nkerning; floating point surfaces are supported with cairo\u22651.17.2).</li>\n<li>Support for a wider variety of font formats, such as otf and pfb, for vector\n(PDF, PS, SVG) backends (Matplotlib\u2019s Agg backend also supports such fonts).</li>\n<li>Optional support for complex text layout (right-to-left languages, etc.) and\nOpenType font features (see <a href=\"examples/opentype_features.py\" rel=\"nofollow\">examples/opentype_features.py</a>) using <a href=\"https://github.com/HOST-Oman/libraqm\" rel=\"nofollow\">Raqm</a>.\n<strong>Note</strong> that Raqm depends on Fribidi,\nwhich is licensed under the LGPLv2.1+.</li>\n<li>Support for embedding URLs in PDF (but not SVG) output (requires\ncairo\u22651.15.4).</li>\n<li>Support for multi-page output both for PDF and PS (Matplotlib only supports\nmulti-page PDF).</li>\n<li>Support for custom blend modes (see <a href=\"examples/operators.py\" rel=\"nofollow\">examples/operators.py</a>).</li>\n</ul>\n<div id=\"installation\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Installation</a></h2>\n<p>mplcairo requires</p>\n<ul>\n<li>Python\u22653.6,</li>\n<li>Matplotlib\u22652.2 (declared as <tt>install_requires</tt>),</li>\n<li>on Linux and macOS, pycairo\u22651.16.0 <a href=\"#id4\" id=\"id1\" rel=\"nofollow\">[1]</a> (declared as <tt>install_requires</tt>),</li>\n<li>on Windows, cairo\u22651.11.4 <a href=\"#id5\" id=\"id2\" rel=\"nofollow\">[2]</a> (shipped with the wheel).</li>\n</ul>\n<p>Additionally, building mplcairo from source requires</p>\n<ul>\n<li>pybind11\u22652.5.0 <a href=\"#id6\" id=\"id3\" rel=\"nofollow\">[3]</a> (declared as <tt>setup_requires</tt>),</li>\n<li>on Linux and macOS, pycairo\u22651.16.0 (declared as <tt>setup_requires</tt> on macOS,\nbut not on Linux).</li>\n</ul>\n<p>As usual, install using pip:</p>\n<pre>$ pip install mplcairo  <span class=\"c1\"># from PyPI\n</span>$ pip install git+https://github.com/matplotlib/mplcairo  <span class=\"c1\"># from Github</span>\n</pre>\n<p>Note that wheels are not available for macOS&lt;10.13, because the libc++ included\nwith these versions is too old and vendoring of libc++ appears to be fragile.\nHelp for packaging would be welcome.</p>\n<p>mplcairo can use <a href=\"https://github.com/HOST-Oman/libraqm\" rel=\"nofollow\">Raqm</a> (\u22650.2) for complex text layout and handling of\nOpenType font features.  Refer to the instructions on that project\u2019s\nwebsite for installation on Linux and macOS.  You may want to look at\n<a href=\"https://github.com/HOST-Oman/libraqm-cmake\" rel=\"nofollow\">https://github.com/HOST-Oman/libraqm-cmake</a> for Windows build scripts.</p>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td><p>pycairo 1.16.0 added <tt>get_include()</tt>.</p>\n<p>We do not actually rely on pycairo\u2019s Python bindings.  Rather, specifying a\ndependency on pycairo is a convenient way to specify a dependency on cairo\n(\u22651.13.1, for pycairo\u22651.14.0) itself, and allows us to load cairo at\nruntime instead of linking to it (simplifying the build of self-contained\nwheels).</p>\n<p>On Windows, this strategy is (AFAIK) not possible, so we explicitly link\nagainst the cairo DLL.</p>\n<p>pycairo is not declared as a <tt>setup_requires</tt> on Linux because the\nmanylinux wheel builder needs to work around it.</p>\n</td></tr>\n</tbody>\n</table>\n<table id=\"id5\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td><p>cairo 1.11.4 added mesh gradient support (used by <tt>draw_quad_mesh()</tt>).</p>\n<p>cairo 1.15.4 added support for PDF metadata and links; the presence of this\nfeature is detected at runtime.</p>\n<p>cairo 1.17.2 added support for floating point surfaces, usable with\n<tt>mplcairo.set_options(float_surface=True)</tt>; the presence of this feature\nis detected at runtime.</p>\n<p>Note that cairo 1.17.2 (and only that version) has a bug that causes (in\nparticular) polar gridlines to be incorrectly cropped.  This bug was fixed\nin 2d1a137.  However, if you are already using a non-tagged, &gt;1.17.2 version\nof cairo, it is suggested to use a commit \u2265dfe3aa6, as the latter further\nfixes another bug that can cause crashes in mplcairo.</p>\n</td></tr>\n</tbody>\n</table>\n<table id=\"id6\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td>pybind11 2.5.0 is the earliest version that supports being added as\n<tt>setup_requires</tt> (and read-only buffers).</td></tr>\n</tbody>\n</table>\n<p>On Fedora, the package is available as <a href=\"https://apps.fedoraproject.org/packages/python-mplcairo\" rel=\"nofollow\">python-mplcairo</a>.</p>\n</div>\n<div id=\"building-packaging\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Building/packaging</a></h2>\n<p>This section is only relevant if you wish to build mplcairo yourself, or\npackage it for redistribution.  Otherwise, proceed to the <a href=\"#use\" rel=\"nofollow\">Use</a> section.</p>\n<p>In all cases, once the dependencies described below are installed, mplcairo\ncan be built and installed using any of the standard commands (<tt>pip wheel\n<span class=\"pre\">--no-deps</span> .</tt>, <tt>pip install .</tt>, <tt>pip install <span class=\"pre\">-e</span> .</tt> and <tt>python setup.py\nbuild_ext <span class=\"pre\">-i</span></tt> being the most relevant ones).</p>\n<div id=\"unix\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Unix</a></h3>\n<p>The following additional dependencies are required:</p>\n<ul>\n<li><p>a C++ compiler with C++17 support, e.g. GCC\u22657.2 or Clang\u22655.0.</p>\n</li>\n<li><p>cairo and FreeType headers, and pkg-config information to locate them.</p>\n<p>If using conda, they can be installed using</p>\n<pre>conda install -y -c conda-forge pycairo pkg-config\n</pre>\n<p>as pycairo (also a dependency) depends on cairo, which depends on freetype.\nNote that cairo and pkg-config from the <tt>anaconda</tt> channel will <em>not</em> work.</p>\n<p>On Linux, they can also be installed with your distribution\u2019s package manager\n(Arch: <tt>cairo</tt>, Debian/Ubuntu: <tt><span class=\"pre\">libcairo2-dev</span></tt>, Fedora: <tt><span class=\"pre\">cairo-devel</span></tt>).</p>\n</li>\n</ul>\n<p>Raqm (\u22650.2) headers are also needed, but will be automatically downloaded if\nnot found.</p>\n<div id=\"linux\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Linux</a></h4>\n<p>conda\u2019s compilers (<tt><span class=\"pre\">gxx_linux-64</span></tt> on the <tt>anaconda</tt> channel) <a href=\"https://github.com/conda/conda-build/issues/2523\" rel=\"nofollow\">currently\ninteract poorly with installing cairo and pkg-config from conda-forge</a>, so you are on your own to install a recent compiler\n(e.g., using your distribution\u2019s package manager).  You may want to set the\n<tt>CC</tt> and <tt>CXX</tt> environment variables to point to your C++ compiler if it is\nnonstandard <a href=\"#id8\" id=\"id7\" rel=\"nofollow\">[4]</a>.  In that case, be careful to set them to e.g. <tt><span class=\"pre\">g++-7</span></tt> and\n<strong>not</strong> <tt><span class=\"pre\">gcc-7</span></tt>, otherwise the compilation will succeed but the shared object\nwill be mis-linked and fail to load.</p>\n<p>The manylinux wheel is built using <a href=\"tools/build-manylinux-wheel.sh\" rel=\"nofollow\">tools/build-manylinux-wheel.sh</a>.</p>\n<p><strong>NOTE</strong>: On Arch Linux, the python-pillow (Arch) package includes an invalid\nversion of <tt>raqm.h</tt> (<a href=\"https://bugs.archlinux.org/task/57492\" rel=\"nofollow\">https://bugs.archlinux.org/task/57492</a>) and must not be\ninstalled while building mplcairo with the system Python, even in a virtualenv\n(it can be installed when <em>using</em> mplcairo without causing any problems).  One\nsolution is to temporarily uninstall the package; another one is to package it\nyourself using e.g. <a href=\"https://github.com/anntzer/pypi2pkgbuild\" rel=\"nofollow\">pypi2pkgbuild</a>.</p>\n<table id=\"id8\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id7\" rel=\"nofollow\">[4]</a></td><td><tt>distutils</tt> uses <tt>CC</tt> for <em>compiling</em> C++ sources but <tt>CXX</tt> for\nlinking them (don\u2019t ask).  You may run into additional issues if <tt>CC</tt> or\n<tt>CXX</tt> has multiple words; e.g., if <tt>CC</tt> is set to <tt>ccache g++</tt>, you\nalso need to set <tt>CXX</tt> to <tt>ccache gcc</tt>.</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"macos\">\n<h4><a href=\"#id13\" rel=\"nofollow\">macOS</a></h4>\n<p>Clang\u22655.0 can be installed from <tt>conda</tt>\u2019s <tt>anaconda</tt> channel (<tt>conda\ninstall <span class=\"pre\">-c</span> anaconda <span class=\"pre\">clangxx_osx-64</span></tt>), or can also be installed with Homebrew\n(<tt>brew install llvm</tt>).  Note that Homebrew\u2019s llvm formula is keg-only, i.e.\nit requires manual modifications to the PATH and LDFLAGS (as documented by\n<tt>brew info llvm</tt>).</p>\n<p>On macOS&lt;10.14, it is additionally necessary to use clang&lt;8.0 (e.g. with <tt>brew\ninstall llvm@7</tt>) as clang 8.0 appears to believe that code relying on C++17\ncan only be run on macOS\u226510.14+.</p>\n<p>The macOS wheel is built using <tt><span class=\"pre\">tools/build-macos-wheel.sh</span></tt>, which relies on\n<a href=\"https://github.com/matthew-brett/delocate\" rel=\"nofollow\">delocate-wheel</a> (to vendor a recent version of libc++).  Currently, it can only\nbe built from a Homebrew-clang wheel, not a conda-clang wheel (due to some path\nintricacies\u2026).</p>\n<p>As I can personally only test the macOS build on CI, any help with the build\nand the packaging on that platform would be welcome.</p>\n</div>\n</div>\n<div id=\"windows\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Windows</a></h3>\n<p>The following additional dependencies are required:</p>\n<ul>\n<li><p>VS2019 (The exact minimum version is unknown, but it is known that mplcairo\nfails to build on the Azure <tt><span class=\"pre\">vs2017-win2016</span></tt> agent and requires the\n<tt><span class=\"pre\">windows-2019</span></tt> agent.)</p>\n</li>\n<li><p>cairo headers and import and dynamic libraries (<tt>cairo.lib</tt> and\n<tt>cairo.dll</tt>) <em>with FreeType support</em>.  Note that this excludes, in\nparticular, the Anaconda and conda-forge builds: they do not include\nFreeType support.</p>\n<p>I am in fact not aware of any such build available online, with the exception\nof <a href=\"https://github.com/preshing/cairo-windows/releases\" rel=\"nofollow\">https://github.com/preshing/cairo-windows/releases</a>; however, this specific\nbuild appears to <a href=\"https://preshing.com/20170529/heres-a-standalone-cairo-dll-for-windows/#IDComment1047546463\" rel=\"nofollow\">misrender pdfs</a>.  Instead, a solution is to get the\nheaders e.g. from a Linux distribution package, the DLL from Christoph\nGohlke\u2019s <a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#cairocffi\" rel=\"nofollow\">cairocffi</a> build, and generate the import library oneself using\n<tt>dumpbin</tt> and <tt>lib</tt>.</p>\n</li>\n<li><p>FreeType headers and import and dynamic libraries (<tt>freetype.lib</tt> and\n<tt>freetype.dll</tt>), which can be retrieved from\n<a href=\"https://github.com/ubawurinna/freetype-windows-binaries\" rel=\"nofollow\">https://github.com/ubawurinna/freetype-windows-binaries</a>, or alternatively\nusing conda:</p>\n<pre>conda install -y freetype\n</pre>\n</li>\n</ul>\n<p>The (standard) <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/cl-environment-variables\" rel=\"nofollow\"><tt>CL</tt></a> and <a href=\"https://docs.microsoft.com/en-us/cpp/build/reference/link-environment-variables\" rel=\"nofollow\"><tt>LINK</tt></a> environment variables (which always get\nprepended respectively to the invocations of the compiler and the linker)\nshould be set as follows:</p>\n<pre>set CL=/IC:\\path\\to\\dir\\containing\\cairo.h /IC:\\same\\for\\ft2build.h\nset LINK=/LIBPATH:C:\\path\\to\\dir\\containing\\cairo.lib /LIBPATH:C:\\same\\for\\freetype.lib\n</pre>\n<p>Moreover, we also need to find <tt>cairo.dll</tt> and <tt>freetype.dll</tt> and copy\nthem next to <tt>mplcairo</tt>\u2019s extension module.  As the dynamic libraries are\ntypically found next to import libraries, we search the <tt>/LIBPATH:</tt> entries\nin the <tt>LINK</tt> environment variable and copy the first <tt>cairo.dll</tt> and\n<tt>freetype.dll</tt> found there.</p>\n<p>The script <tt><span class=\"pre\">tools/build-windows-wheel.py</span></tt> automates the retrieval of the\ncairo (assuming that a Gohlke cairocffi is already installed) and FreeType and\nthe wheel build.</p>\n</div>\n</div>\n<div id=\"use\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Use</a></h2>\n<p>On Linux and Windows, mplcairo can be used as any normal Matplotlib backend:\ncall e.g. <tt><span class=\"pre\">matplotlib.use(\"module://mplcairo.qt\")</span></tt> before importing pyplot,\nadd a <tt>backend: <span class=\"pre\">module://mplcairo.qt</span></tt> line in your <tt>matplotlibrc</tt>, or set\nthe <tt>MPLBACKEND</tt> environment variable to <tt><span class=\"pre\">module://mplcairo.qt</span></tt>.  More\nspecifically, the following backends are provided:</p>\n<ul>\n<li><tt><span class=\"pre\">module://mplcairo.base</span></tt> (No GUI, but can output to EPS, PDF, PS, SVG, and\nSVGZ using cairo\u2019s implementation, rather than Matplotlib\u2019s),</li>\n<li><tt><span class=\"pre\">module://mplcairo.gtk</span></tt> (GTK3 widget, copying data from a cairo image\nsurface),</li>\n<li><tt><span class=\"pre\">module://mplcairo.gtk_native</span></tt> (GTK3 widget, directly drawn onto as a\nnative surface; does not and cannot support blitting),</li>\n<li><tt><span class=\"pre\">module://mplcairo.qt</span></tt> (Qt4/5 widget, copying data from a cairo image\nsurface \u2014 select the binding to use by importing it before mplcairo, or by\nsetting the <tt>QT_API</tt> environment variable),</li>\n<li><tt><span class=\"pre\">module://mplcairo.tk</span></tt> (Tk widget, copying data from a cairo image\nsurface),</li>\n<li><tt><span class=\"pre\">module://mplcairo.wx</span></tt> (wx widget, copying data from a cairo image\nsurface),</li>\n<li><tt><span class=\"pre\">module://mplcairo.macosx</span></tt> (macOS widget, copying data from a cairo image\nsurface).</li>\n</ul>\n<p>On macOS, <strong>it is necessary to explicitly import mplcairo before importing\nMatplotlib</strong> due to incompatibilities associated with the use of a recent\nlibc++.  As such, the most practical option is to import mplcairo, then call\ne.g. <tt><span class=\"pre\">matplotlib.use(\"module://mplcairo.macosx\")</span></tt>.</p>\n<p>To use cairo rendering in Jupyter\u2019s <tt>inline</tt> mode, patch, in your\n<tt>ipython_config.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mplcairo.base</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ipykernel.pylab.backend_inline</span>\n<span class=\"n\">ipykernel</span><span class=\"o\">.</span><span class=\"n\">pylab</span><span class=\"o\">.</span><span class=\"n\">backend_inline</span><span class=\"o\">.</span><span class=\"n\">new_figure_manager</span> <span class=\"o\">=</span> \\\n    <span class=\"n\">mplcairo</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">new_figure_manager</span>\n</pre>\n<p>Alternatively, set the <tt>MPLCAIRO_PATCH_AGG</tt> environment variable to a\nnon-empty value to fully replace the Agg renderer by the cairo renderer\nthroughout Matplotlib.  However, this approach is inefficient (due to the need\nof copies and conversions between premultiplied ARGB32 and straight RGBA8888\nbuffers); additionally, it does not work with the wx and macosx backends due\nto peculiarities of the corresponding canvas classes.  On the other hand, this\nis currently the only way in which the webagg-based backends (e.g., Jupyter\u2019s\ninteractive widgets) are supported.</p>\n<p>At import-time, mplcairo will attempt to load <a href=\"https://github.com/HOST-Oman/libraqm\" rel=\"nofollow\">Raqm</a>.  The use of that library\ncan be controlled and checked using the <tt>set_options</tt> and <tt>get_options</tt>\nfunctions.</p>\n<p>The <a href=\"examples/\" rel=\"nofollow\">examples</a> directory contains a few cases where the output of this renderer\nis arguably more accurate than the one of the default renderer, Agg:</p>\n<ul>\n<li><a href=\"examples/circle_markers.py\" rel=\"nofollow\">circle_markers.py</a> and <a href=\"examples/square_markers.py\" rel=\"nofollow\">square_markers.py</a>: more accurate and faster marker\nstamping.</li>\n<li><a href=\"examples/marker_stamping.py\" rel=\"nofollow\">marker_stamping.py</a>: more accurate marker stamping.</li>\n<li><a href=\"examples/quadmesh.py\" rel=\"nofollow\">quadmesh.py</a>: better antialiasing of quad meshes, fewer artefacts with\nmasked data.</li>\n<li><a href=\"examples/text_kerning.py\" rel=\"nofollow\">text_kerning.py</a>: improved text kerning.</li>\n</ul>\n</div>\n<div id=\"benchmarks\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Benchmarks</a></h2>\n<p>Install (in the virtualenv) <tt><span class=\"pre\">pytest&gt;=3.1.0</span></tt> and <tt><span class=\"pre\">pytest-benchmark</span></tt>, then\ncall (e.g.):</p>\n<pre>pytest --benchmark-group-by<span class=\"o\">=</span>fullfunc --benchmark-timer<span class=\"o\">=</span>time.process_time\n</pre>\n<p>Keep in mind that conda-forge\u2019s cairo is (on my setup) ~2\u00d7 slower than a\n\u201cnative\u201d build of cairo.</p>\n</div>\n<div id=\"test-suite\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Test suite</a></h2>\n<p>Run <tt><span class=\"pre\">run-mpl-test-suite.py</span></tt> (which depends on <tt><span class=\"pre\">pytest&gt;=3.2.2</span></tt>) to run the\nMatplotlib test suite with the Agg backend patched by the mplcairo backend.\nNote that Matplotlib must be installed with its test data, which is not the\ncase when it is installed from conda or from most Linux distributions; instead,\nit should be installed from PyPI or from source.</p>\n<p>Nearly all image comparison tests \u201cfail\u201d as the renderers are fundamentally\ndifferent; currently, the intent is to manually check the diff images.  Passing\n<tt><span class=\"pre\">--tolerance=inf</span></tt> marks these tests as \u201cpassed\u201d (while still textually\nreporting the image differences) so that one can spot issues not related to\nrendering differences.  In practice, <tt><span class=\"pre\">--tolerance=50</span></tt> appears to be enough.</p>\n<p>Some other (non-image-comparison) tests are also known to fail (they are listed\nin <tt>ISSUES.rst</tt>, with the relevant explanations), and automatically skipped.</p>\n<p>Run <tt><span class=\"pre\">run-examples.py</span></tt> to run some examples that exercise some more aspects of\nmplcairo.</p>\n</div>\n<div id=\"notes\">\n<h2><a href=\"#id18\" rel=\"nofollow\">Notes</a></h2>\n<div id=\"antialiasing\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Antialiasing</a></h3>\n<p>The artist antialiasing property can be set to any of the <tt>cairo_antialias_t</tt>\nenum values, or <tt>True</tt> (the default) or <tt>False</tt> (which is synonym to\n<tt>NONE</tt>).</p>\n<p>Setting antialiasing to <tt>True</tt> uses <tt>FAST</tt> antialiasing for lines thicker\nthan 1/3px and <tt>BEST</tt> for lines thinner than that: for lines thinner\nthan 1/3px, the former leads to artefacts such as lines disappearing in\ncertain sections (see e.g. <tt>test_cycles.test_property_collision_plot</tt> after\nforcing the antialiasing to <tt>FAST</tt>).  The threshold of 1/3px was determined\nempirically, see <a href=\"examples/thin_line_antialiasing.py\" rel=\"nofollow\">examples/thin_line_antialiasing.py</a>.</p>\n<p>Note that in order to set the <tt>lines.antialiased</tt> or <tt>patch.antialiased</tt>\nrcparams to a <tt>cairo_antialias_t</tt> enum value, it is necessary to bypass\nrcparam validation, using, e.g.</p>\n<pre><span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">rcParams</span><span class=\"p\">,</span> <span class=\"s2\">\"lines.antialiased\"</span><span class=\"p\">,</span> <span class=\"n\">antialias_t</span><span class=\"o\">.</span><span class=\"n\">FAST</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>text.antialiased</tt> rcparam can likewise be set to any\n<tt>cairo_antialias_t</tt> enum value, or <tt>True</tt> (the default, which maps to\n<tt>SUBPIXEL</tt> \u2014 <tt>GRAY</tt> is not sufficient to benefit from <a href=\"https://github.com/HOST-Oman/libraqm\" rel=\"nofollow\">Raqm</a>\u2019s subpixel\npositioning; see also <a href=\"https://gitlab.freedesktop.org/cairo/cairo/issues/152\" rel=\"nofollow\">cairo issue #152</a>) or <tt>False</tt> (which\nmaps to <tt>NONE</tt>).</p>\n<p>Note that in rare cases, <tt>FAST</tt> antialiasing can trigger a \u201cdouble free or\ncorruption\u201d bug in cairo (<a href=\"https://gitlab.freedesktop.org/cairo/cairo/issues/44\" rel=\"nofollow\">#44</a>).  If you hit this problem,\nconsider using <tt>BEST</tt> or <tt>NONE</tt> antialiasing (depending on your quality and\nspeed requirements).</p>\n</div>\n<div id=\"fast-drawing\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Fast drawing</a></h3>\n<p>For fast drawing of path with many segments, the <tt>agg.path.chunksize</tt> rcparam\nshould be set to e.g. 1000 (see <a href=\"examples/time_drawing_per_element.py\" rel=\"nofollow\">examples/time_drawing_per_element.py</a> for the\ndetermination of this value); this causes longer paths to be split into\nindividually rendered sections of 1000 segments each (directly rendering longer\npaths appears to have slightly superlinear complexity).</p>\n</div>\n<div id=\"simplification-threshold\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Simplification threshold</a></h3>\n<p>The <tt>path.simplify_threshold</tt> rcparam is used to control the accuracy of\nmarker stamping, down to an arbitrarily chosen threshold of 1/16px.  If the\nthreshold is set to a lower value, the exact (slower) marker drawing path will\nbe used.  Marker stamping is also implemented for scatter plots (which can have\nmultiple colors).  Likewise, markers of different sizes get mapped into markers\nof discretized sizes, with an error bounded by the threshold.</p>\n<p><strong>NOTE</strong>: <tt>pcolor</tt> and mplot3d\u2019s <tt>plot_surface</tt> display some artifacts\nwhere the facets join each other.  This is because these functions internally\nuse a <tt>PathCollection</tt>; this triggers the approximate stamping, and\neven without it (by setting <tt>path.simplify_threshold</tt> to zero), cairo\u2019s\nrasterization of the edge between the facets is poor.  <tt>pcolormesh</tt> (which\ninternally uses a <tt>QuadMesh</tt>) should generally be preferred over <tt>pcolor</tt>\nanyways.  <tt>plot_surface</tt> could likewise instead represent the surface using\n<tt>QuadMesh</tt>, which is drawn without such artefacts.</p>\n</div>\n<div id=\"font-formats-and-features\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Font formats and features</a></h3>\n<p>In order to use a specific font that Matplotlib may be unable to use, pass a\nfilename directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib.font_manager</span> <span class=\"kn\">import</span> <span class=\"n\">FontProperties</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"hello, world\"</span><span class=\"p\">,</span>\n         <span class=\"n\">fontproperties</span><span class=\"o\">=</span><span class=\"n\">FontProperties</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/font.ttf\"</span><span class=\"p\">))</span>\n</pre>\n<p>or more simply, with Matplotlib\u22653.3:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"hello, world\"</span><span class=\"p\">,</span> <span class=\"n\">font</span><span class=\"o\">=</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/font.ttf\"</span><span class=\"p\">))</span>\n</pre>\n<p>mplcairo still relies on Matplotlib\u2019s font cache, so fonts unsupported by\nMatplotlib remain unavailable by other means.</p>\n<p>For TTC fonts (and, more generally, font formats that include multiple font\nfaces in a single file), the <em>n</em>th font (<em>n</em>\u22650) can be selected by appending\n<tt>#n</tt> to the filename (e.g., <tt>\"/path/to/font.ttc#1\"</tt>).</p>\n<p>OpenType font features can be selected by appending <tt><span class=\"pre\">|feature,...</span></tt>\nto the filename, followed by a <a href=\"https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-feature-from-string\" rel=\"nofollow\">HarfBuzz feature string</a> (e.g.,\n<tt>\"/path/to/font.otf|frac,onum\"</tt>); see <a href=\"examples/opentype_features.py\" rel=\"nofollow\">examples/opentype_features.py</a>.</p>\n<p>The syntaxes for selecting TTC subfonts and OpenType font features are\n<strong>experimental</strong> and may change, especially if such features are implemented in\nMatplotlib itself.</p>\n<p>Note that Matplotlib\u2019s (default) Agg backend will handle most (single-face)\nfonts equally well (ultimately, both backends relies on FreeType for\nrasterization).  It is Matplotlib\u2019s vector backends (PS, PDF, and, for pfb\nfonts, SVG) that do not support these fonts, whereas mplcairo support these\nfonts in all output formats.</p>\n</div>\n<div id=\"multi-page-output\">\n<h3><a href=\"#id23\" rel=\"nofollow\">Multi-page output</a></h3>\n<p>Matplotlib\u2019s <tt>PdfPages</tt> class is deeply tied with the builtin <tt>backend_pdf</tt>\n(in fact, it cannot even be used with Matplotlib\u2019s own cairo backend).\nInstead, use <tt>mplcairo.multipage.MultiPage</tt> for multi-page PDF and PS output.\nThe API is similar:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mplcairo.multipage</span> <span class=\"kn\">import</span> <span class=\"n\">MultiPage</span>\n\n<span class=\"n\">fig1</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">fig2</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"k\">with</span> <span class=\"n\">MultiPage</span><span class=\"p\">(</span><span class=\"n\">path_or_stream</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"o\">=...</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mp</span><span class=\"p\">:</span>\n    <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">fig1</span><span class=\"p\">)</span>\n    <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">fig2</span><span class=\"p\">)</span>\n</pre>\n<p>See the class\u2019 docstring for additional information.</p>\n</div>\n<div id=\"cairo-script-output\">\n<h3><a href=\"#id24\" rel=\"nofollow\"><tt><span class=\"pre\">cairo-script</span></tt> output</a></h3>\n<p>Setting the <tt>MPLCAIRO_SCRIPT_SURFACE</tt> environment variable <em>before mplcairo\nis imported</em> to <tt>vector</tt> or <tt>raster</tt> allows one to save figures (with\n<tt>savefig</tt>) in the <tt>.cairoscript</tt> format, which is a \u201cnative script that\nmatches the cairo drawing model\u201d.  The value of the variable determines the\nrendering path used (e.g., whether marker stamping is used at all).  This may\nbe helpful for troubleshooting purposes.</p>\n<p>Note that this may crash the process after the file is written, due to <a href=\"https://gitlab.freedesktop.org/cairo/cairo/issues/277\" rel=\"nofollow\">cairo\nissue #277</a>.</p>\n</div>\n<div id=\"markers-at-bezier-control-points\">\n<h3><a href=\"#id25\" rel=\"nofollow\">Markers at B\u00e9zier control points</a></h3>\n<p><tt>draw_markers</tt> draws a marker at each control point of the given path, which\nis the documented behavior, even though all builtin renderers only draw markers\nat straight or B\u00e9zier segment ends.</p>\n</div>\n</div>\n<div id=\"known-issues\">\n<h2><a href=\"#id26\" rel=\"nofollow\">Known issues</a></h2>\n<h2 id=\"missing-support-from-cairo\"><span class=\"section-subtitle\">Missing support from cairo</span></h2>\n<ul>\n<li>SVG output does not set URLs or ids on any element, as cairo provides no\nsupport to do so.</li>\n<li>PS output does not respect SOURCE_DATE_EPOCH.</li>\n<li>PS output does not support the <tt>Creator</tt> metadata key; however it supports\nthe <tt>Title</tt> key.</li>\n<li>The following rcparams have no effect:<ul>\n<li><tt>pdf.fonttype</tt> (font type is selected by cairo internally),</li>\n<li><tt>pdf.inheritcolor</tt> (effectively always <tt>False</tt>),</li>\n<li><tt>pdf.use14corefonts</tt> (effectively always <tt>False</tt>),</li>\n<li><tt>ps.fonttype</tt> (font type is selected by cairo internally),</li>\n<li><tt>ps.useafm</tt> (effectively always <tt>False</tt>),</li>\n<li><tt>svg.fonttype</tt> (effectively always <tt>\"path\"</tt>, see <a href=\"https://gitlab.freedesktop.org/cairo/cairo/issues/253\" rel=\"nofollow\">cairo issue #253</a>),</li>\n<li><tt>svg.hashsalt</tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"possible-optimizations\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Possible optimizations</a></h2>\n<ul>\n<li>Cache eviction policy and persistent cache for <tt>draw_path_collection</tt>.</li>\n<li>Path simplification (although cairo appears to use vertex reduction and\nDouglas-Peucker internally?).</li>\n<li>Use QtOpenGLWidget and the cairo-gl backend.</li>\n</ul>\n</div>\n<div id=\"what-about-the-already-existing-cairo-gtk3-qt4-qt5-wx-tk-cairo-backends\">\n<h2><a href=\"#id28\" rel=\"nofollow\">What about the already existing cairo (gtk3/qt4/qt5/wx/tk/\u2026cairo) backends?</a></h2>\n<p>They are very slow (try running <a href=\"examples/mplot3d/wire3d_animation.py\" rel=\"nofollow\">examples/mplot3d/wire3d_animation.py</a>) and\nrender math poorly (try <tt><span class=\"pre\">title(r\"$\\sqrt{2}$\")</span></tt>).</p>\n</div>\n\n          </div>"}, "last_serial": 7159562, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cafe9240f2948dac972f9d4e3067b14c", "sha256": "0bd5ec45584a6f9a9f316eed5784b8ba0bc7026f7e7a236041487f8b43e88e7f"}, "downloads": -1, "filename": "mplcairo-0.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "cafe9240f2948dac972f9d4e3067b14c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.4", "size": 2762190, "upload_time": "2018-07-22T20:42:53", "upload_time_iso_8601": "2018-07-22T20:42:53.509656Z", "url": "https://files.pythonhosted.org/packages/4a/8e/ce2a482c675634c0b3ec93eb01d1db4dfe6dea46c2348dcc3a377ce1ee42/mplcairo-0.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30f5f706c39375725ec596458b42074a", "sha256": "79cb03a6dc29b67de3a7010dfc6c4d26f65c25cbe8f4f99ce7a09a74500d0140"}, "downloads": -1, "filename": "mplcairo-0.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "30f5f706c39375725ec596458b42074a", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.4", "size": 1339087, "upload_time": "2018-07-22T20:42:56", "upload_time_iso_8601": "2018-07-22T20:42:56.398174Z", "url": "https://files.pythonhosted.org/packages/6a/70/45f26f57cfd23f4bfaa63c24562cd523144071f3fcea11f7de85d3122a5b/mplcairo-0.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f98e6bc91da9ac309a66448604b0c95", "sha256": "4b627b057ecf13a39405d62c02bc38cff713944a18f6a64e9c85d5e226469838"}, "downloads": -1, "filename": "mplcairo-0.1.tar.gz", "has_sig": false, "md5_digest": "6f98e6bc91da9ac309a66448604b0c95", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 102800, "upload_time": "2018-07-22T20:42:58", "upload_time_iso_8601": "2018-07-22T20:42:58.626161Z", "url": "https://files.pythonhosted.org/packages/2a/0a/c2a79cff380d45689f6ee0f9f81550e4437ec4c4dbddf3173340140e08ce/mplcairo-0.1.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "12178e5869774732241d089e149d1d6b", "sha256": "76b498d3b2818e4eed1d7b5451af8a1db312205d00e7af02fae93a7a4e88a6d7"}, "downloads": -1, "filename": "mplcairo-0.1a1-cp36-cp36m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "12178e5869774732241d089e149d1d6b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.4", "size": 449991, "upload_time": "2018-03-13T07:41:28", "upload_time_iso_8601": "2018-03-13T07:41:28.111828Z", "url": "https://files.pythonhosted.org/packages/8b/64/0a96d01f7c5cc1eeaa32213d9a84d2af866fac4f10b5e050182b015134e4/mplcairo-0.1a1-cp36-cp36m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75dff4f37d0b502edbce44351c35940d", "sha256": "3ed149bc183063e8a7e44bfb9bb87b74f4a72e176c9e03f521a438cbc16684ac"}, "downloads": -1, "filename": "mplcairo-0.1a1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "75dff4f37d0b502edbce44351c35940d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.4", "size": 2726599, "upload_time": "2018-03-13T07:40:46", "upload_time_iso_8601": "2018-03-13T07:40:46.410459Z", "url": "https://files.pythonhosted.org/packages/51/6d/47a75ea58d2345b4fca3b39723f71950da168fa718f07821cb92e66db204/mplcairo-0.1a1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebacd992880c435ec984eeef2a7924de", "sha256": "c71e9ae20221e47915f692b372d39318ee9c36dcd2e7a8387d6ba4ff27f10821"}, "downloads": -1, "filename": "mplcairo-0.1a1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "ebacd992880c435ec984eeef2a7924de", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.4", "size": 1339420, "upload_time": "2018-03-13T07:41:40", "upload_time_iso_8601": "2018-03-13T07:41:40.090568Z", "url": "https://files.pythonhosted.org/packages/a2/06/e1ddc36ed74684a8605ba17e43ad34b6cbb1d80e5abe0a6e4c6dc20fa1a4/mplcairo-0.1a1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13db3ae4800bfc5f2492ef8eec28c1dd", "sha256": "e728f4fbb58ae0124ac8e9efc72cf0797cb914011cdc0050f85920a95ea831e6"}, "downloads": -1, "filename": "mplcairo-0.1a1.tar.gz", "has_sig": false, "md5_digest": "13db3ae4800bfc5f2492ef8eec28c1dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 90457, "upload_time": "2018-03-13T07:47:04", "upload_time_iso_8601": "2018-03-13T07:47:04.011986Z", "url": "https://files.pythonhosted.org/packages/df/9d/87fd894a4423e3ee6a46c602ebc21be49a47731f1e239c35ada2b5b9a864/mplcairo-0.1a1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9e485c537b9b42825a1d2e5e1e741911", "sha256": "a35ff59a314c0d59d165f502c2d8b86b316f60900db954825fc0d7aa0fb07639"}, "downloads": -1, "filename": "mplcairo-0.2-cp35-cp35m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "9e485c537b9b42825a1d2e5e1e741911", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 299734, "upload_time": "2019-09-22T18:05:43", "upload_time_iso_8601": "2019-09-22T18:05:43.796117Z", "url": "https://files.pythonhosted.org/packages/7a/e9/ea397d3077db063fe6ba9807e1720fc0eed804d5027f7ca4c76a651bc7e4/mplcairo-0.2-cp35-cp35m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "583b02da6fcaacd43aa04a6f7ed5de58", "sha256": "1426c3dabef11f27b2f8444391ccde0e47743fe1443077a4172f05722d78ecba"}, "downloads": -1, "filename": "mplcairo-0.2-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "583b02da6fcaacd43aa04a6f7ed5de58", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": ">=3.5", "size": 815589, "upload_time": "2019-09-22T18:05:47", "upload_time_iso_8601": "2019-09-22T18:05:47.598212Z", "url": "https://files.pythonhosted.org/packages/82/2a/efc63131f5e7f51e442be03c88dd765735873d0cb05fbdbaf3a810665cc5/mplcairo-0.2-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b90d60428d18093640d7cd6cb6b32465", "sha256": "134a0bb4fbb7946d85f2339957d021fd6f64e35103fec9d8f82edbad2c797a0a"}, "downloads": -1, "filename": "mplcairo-0.2-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "b90d60428d18093640d7cd6cb6b32465", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 299907, "upload_time": "2019-09-22T18:05:51", "upload_time_iso_8601": "2019-09-22T18:05:51.065663Z", "url": "https://files.pythonhosted.org/packages/e4/65/5d82385c4b0800e2590d9709b3a82c4fa8ee7008ae6e0dadd95dcdee6739/mplcairo-0.2-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8558a850d82361952eb17b5e110fefd2", "sha256": "adee11a4213863f10e5b34e04e8df1a9010ff879b1f4dfd95c2aa2e0bac69021"}, "downloads": -1, "filename": "mplcairo-0.2-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8558a850d82361952eb17b5e110fefd2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 815874, "upload_time": "2019-09-22T18:05:55", "upload_time_iso_8601": "2019-09-22T18:05:55.894553Z", "url": "https://files.pythonhosted.org/packages/7c/3f/17c51e757ef9d13b3dc1dafa29ad31a3b75cb0653a4b9c764f6fac9a4bb4/mplcairo-0.2-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ad880fc2064f94c3dacaaca9ad8f06", "sha256": "2bb83bdd6a1cd4b5c5e954b843bea322d658dc56e1fb93b2537d5ffbeac3db96"}, "downloads": -1, "filename": "mplcairo-0.2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "13ad880fc2064f94c3dacaaca9ad8f06", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 1658394, "upload_time": "2019-09-22T18:06:03", "upload_time_iso_8601": "2019-09-22T18:06:03.424387Z", "url": "https://files.pythonhosted.org/packages/19/47/55812358e50327dbc0d9b6616065a54aa11d5eb4a798f4d70014cca2e674/mplcairo-0.2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5365ef4ee97cab41b4e27f1147f0780a", "sha256": "f69b8f14183f627f608ef8df1ca57b17f8436d717a861f5d6ffd56368313a5d7"}, "downloads": -1, "filename": "mplcairo-0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "5365ef4ee97cab41b4e27f1147f0780a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 299936, "upload_time": "2019-09-22T18:06:07", "upload_time_iso_8601": "2019-09-22T18:06:07.387807Z", "url": "https://files.pythonhosted.org/packages/62/71/344af4b2f546a0a5fa74e4761b080c0164b76bf25757e9d759a9935c7c14/mplcairo-0.2-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cd9d160291316da2085b20ab02e79ba", "sha256": "03cacf3bb34d0832ce29657721cbd342dda4ef6f987c62b35df3cc28e6d59fc8"}, "downloads": -1, "filename": "mplcairo-0.2-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6cd9d160291316da2085b20ab02e79ba", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 815880, "upload_time": "2019-09-22T18:06:12", "upload_time_iso_8601": "2019-09-22T18:06:12.721430Z", "url": "https://files.pythonhosted.org/packages/6d/9b/c5aee8db7be8d2ff6bf4735c6184d698ce9574e3f49d0dcf35ca9a702d5f/mplcairo-0.2-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75dd287f5432a14d2a1e25eda3f502ba", "sha256": "1accb1c0baa54909ee811b3fa8ec618f40fddf214fe8060fff77f097c5cc2345"}, "downloads": -1, "filename": "mplcairo-0.2-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "75dd287f5432a14d2a1e25eda3f502ba", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.5", "size": 1671236, "upload_time": "2019-09-22T18:06:21", "upload_time_iso_8601": "2019-09-22T18:06:21.109347Z", "url": "https://files.pythonhosted.org/packages/aa/fe/5d66d0e0a6c4ceb6bad24077fc5d5f7594b002f3a49538747b389998da9d/mplcairo-0.2-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c70daba57e3e2669e84d0537e322090", "sha256": "b384429f80873d5ba728931fa118ed25b2a5a144847ff767b245c95f0a17c3a6"}, "downloads": -1, "filename": "mplcairo-0.2.tar.gz", "has_sig": false, "md5_digest": "1c70daba57e3e2669e84d0537e322090", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 113679, "upload_time": "2019-09-22T18:06:23", "upload_time_iso_8601": "2019-09-22T18:06:23.762783Z", "url": "https://files.pythonhosted.org/packages/4f/40/05b259a7746dc9a5ef6438910ef5b3ab7e9110bb1a462ce895358bd028d4/mplcairo-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f9ec0a7607be6a11a15e73d28d9d02dd", "sha256": "b768f7ddd8d3a800361c181da2602cf83de585e652087a8a285515bd30040326"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "f9ec0a7607be6a11a15e73d28d9d02dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 311471, "upload_time": "2020-05-03T20:29:17", "upload_time_iso_8601": "2020-05-03T20:29:17.384541Z", "url": "https://files.pythonhosted.org/packages/eb/32/2490d386841ca35d11812e955c775b13fe0c0aa8ca2427cfa85f8da797dd/mplcairo-0.3-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0f81b397e6714b35bf28c6c1c6fa876", "sha256": "a31aa3e52cb8cdba0024d84171170b84bb31975a2567718949fea28b691d1473"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b0f81b397e6714b35bf28c6c1c6fa876", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 828781, "upload_time": "2020-05-03T20:29:19", "upload_time_iso_8601": "2020-05-03T20:29:19.786668Z", "url": "https://files.pythonhosted.org/packages/76/ae/8ebfecbc1cfd1155d1fb6ff900de002e53d791f66f57dd325ea12f0f8c14/mplcairo-0.3-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d94cb0e3dd9a1e3a1f2d1474932f40a9", "sha256": "d9212070ea9cf829a237431732ac58b3c03c65e99dbd5e23441262f340b9a3ff"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "d94cb0e3dd9a1e3a1f2d1474932f40a9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 1653769, "upload_time": "2020-05-03T20:29:24", "upload_time_iso_8601": "2020-05-03T20:29:24.098903Z", "url": "https://files.pythonhosted.org/packages/e5/cf/291a66c2c75cd7c5402d4603c8e91e0a9047c6270ad8a2c10154560452ad/mplcairo-0.3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1331a826185f1346ddc1964235fe6b00", "sha256": "6c1bc4ae62610b1132084bb9f7e9a9358658cf12e5821e08496afa60ed43bf83"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "1331a826185f1346ddc1964235fe6b00", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 311487, "upload_time": "2020-05-03T20:29:26", "upload_time_iso_8601": "2020-05-03T20:29:26.230841Z", "url": "https://files.pythonhosted.org/packages/0d/61/cbb2fce1cc3627aceb397e190f9add0951caa8dfee4ddba78b7167ff8981/mplcairo-0.3-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afdf4fee0b250f24cc465622cbbdcadc", "sha256": "a48a12870579eaaf6e3ad50915e5a0b8a2c22bb88d48a3a11f1cde3ddb17a06f"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "afdf4fee0b250f24cc465622cbbdcadc", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 828727, "upload_time": "2020-05-03T20:29:28", "upload_time_iso_8601": "2020-05-03T20:29:28.740425Z", "url": "https://files.pythonhosted.org/packages/7d/a2/9b74472a88b4eed55850dc487b4e848b3ccb6e8ed3568ba35189c63e9261/mplcairo-0.3-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "692be73c52ee37e727f957de8e1667db", "sha256": "cb3fb9283f2493b72d8362cffba4c3fb4d473fa9482bc5e927e1532f00ebedee"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "692be73c52ee37e727f957de8e1667db", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 1652364, "upload_time": "2020-05-03T20:29:33", "upload_time_iso_8601": "2020-05-03T20:29:33.422212Z", "url": "https://files.pythonhosted.org/packages/a1/a4/19d274a1b576d8f51edf8d391bcdcb90aeff34a3c9a232d6aad21f18f284/mplcairo-0.3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "862a5c84ef2e789a866c9308aaecb3d1", "sha256": "0411aa2709ea0776c40fa6196d9bf00027cf93bef8df332f498e266d1af400c8"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "862a5c84ef2e789a866c9308aaecb3d1", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 317278, "upload_time": "2020-05-03T20:29:41", "upload_time_iso_8601": "2020-05-03T20:29:41.020765Z", "url": "https://files.pythonhosted.org/packages/c6/aa/2a55872f339b98f622c3356fe34b57a0e7e98c3eb48e254089a194b1c1cf/mplcairo-0.3-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c20cb3b4d911d8775ec35bfc7cba10a5", "sha256": "950d9a2cabd158dd68320fed25590cb490966129af241ee71b5e3d929b795795"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c20cb3b4d911d8775ec35bfc7cba10a5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 829624, "upload_time": "2020-05-03T20:29:44", "upload_time_iso_8601": "2020-05-03T20:29:44.835119Z", "url": "https://files.pythonhosted.org/packages/2a/a4/20a2837fb8167cc61ce097b59a08af0e127c8027d81333e6dcdc3c8bec2c/mplcairo-0.3-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86f386b4f2e8f9ad145678b81579c989", "sha256": "5e11022084be6ec2629e616ab5fc729483aa18192d430011448408cf364157c2"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "86f386b4f2e8f9ad145678b81579c989", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 1650957, "upload_time": "2020-05-03T20:29:49", "upload_time_iso_8601": "2020-05-03T20:29:49.373745Z", "url": "https://files.pythonhosted.org/packages/59/32/2135645e83f21f4d443e27b464f2868e46dae074925f38b36e5d0fd6a8c0/mplcairo-0.3-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36dc12a2bbe3b7f8c3a0aeaf1f45d1ca", "sha256": "98f3d2c6f6c6d23e9593ffc9237bc43532ad72a54a50991f4ee1b86b96ad3174"}, "downloads": -1, "filename": "mplcairo-0.3.tar.gz", "has_sig": false, "md5_digest": "36dc12a2bbe3b7f8c3a0aeaf1f45d1ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 86893, "upload_time": "2020-05-03T20:29:51", "upload_time_iso_8601": "2020-05-03T20:29:51.331683Z", "url": "https://files.pythonhosted.org/packages/ee/11/b7cae7f58eff95f5cc416ca95027f3ec4c003cdb01ca0a2559e600beac4a/mplcairo-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9ec0a7607be6a11a15e73d28d9d02dd", "sha256": "b768f7ddd8d3a800361c181da2602cf83de585e652087a8a285515bd30040326"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "f9ec0a7607be6a11a15e73d28d9d02dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 311471, "upload_time": "2020-05-03T20:29:17", "upload_time_iso_8601": "2020-05-03T20:29:17.384541Z", "url": "https://files.pythonhosted.org/packages/eb/32/2490d386841ca35d11812e955c775b13fe0c0aa8ca2427cfa85f8da797dd/mplcairo-0.3-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0f81b397e6714b35bf28c6c1c6fa876", "sha256": "a31aa3e52cb8cdba0024d84171170b84bb31975a2567718949fea28b691d1473"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b0f81b397e6714b35bf28c6c1c6fa876", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 828781, "upload_time": "2020-05-03T20:29:19", "upload_time_iso_8601": "2020-05-03T20:29:19.786668Z", "url": "https://files.pythonhosted.org/packages/76/ae/8ebfecbc1cfd1155d1fb6ff900de002e53d791f66f57dd325ea12f0f8c14/mplcairo-0.3-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d94cb0e3dd9a1e3a1f2d1474932f40a9", "sha256": "d9212070ea9cf829a237431732ac58b3c03c65e99dbd5e23441262f340b9a3ff"}, "downloads": -1, "filename": "mplcairo-0.3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "d94cb0e3dd9a1e3a1f2d1474932f40a9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 1653769, "upload_time": "2020-05-03T20:29:24", "upload_time_iso_8601": "2020-05-03T20:29:24.098903Z", "url": "https://files.pythonhosted.org/packages/e5/cf/291a66c2c75cd7c5402d4603c8e91e0a9047c6270ad8a2c10154560452ad/mplcairo-0.3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1331a826185f1346ddc1964235fe6b00", "sha256": "6c1bc4ae62610b1132084bb9f7e9a9358658cf12e5821e08496afa60ed43bf83"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "1331a826185f1346ddc1964235fe6b00", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 311487, "upload_time": "2020-05-03T20:29:26", "upload_time_iso_8601": "2020-05-03T20:29:26.230841Z", "url": "https://files.pythonhosted.org/packages/0d/61/cbb2fce1cc3627aceb397e190f9add0951caa8dfee4ddba78b7167ff8981/mplcairo-0.3-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afdf4fee0b250f24cc465622cbbdcadc", "sha256": "a48a12870579eaaf6e3ad50915e5a0b8a2c22bb88d48a3a11f1cde3ddb17a06f"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "afdf4fee0b250f24cc465622cbbdcadc", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 828727, "upload_time": "2020-05-03T20:29:28", "upload_time_iso_8601": "2020-05-03T20:29:28.740425Z", "url": "https://files.pythonhosted.org/packages/7d/a2/9b74472a88b4eed55850dc487b4e848b3ccb6e8ed3568ba35189c63e9261/mplcairo-0.3-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "692be73c52ee37e727f957de8e1667db", "sha256": "cb3fb9283f2493b72d8362cffba4c3fb4d473fa9482bc5e927e1532f00ebedee"}, "downloads": -1, "filename": "mplcairo-0.3-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "692be73c52ee37e727f957de8e1667db", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 1652364, "upload_time": "2020-05-03T20:29:33", "upload_time_iso_8601": "2020-05-03T20:29:33.422212Z", "url": "https://files.pythonhosted.org/packages/a1/a4/19d274a1b576d8f51edf8d391bcdcb90aeff34a3c9a232d6aad21f18f284/mplcairo-0.3-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "862a5c84ef2e789a866c9308aaecb3d1", "sha256": "0411aa2709ea0776c40fa6196d9bf00027cf93bef8df332f498e266d1af400c8"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "862a5c84ef2e789a866c9308aaecb3d1", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 317278, "upload_time": "2020-05-03T20:29:41", "upload_time_iso_8601": "2020-05-03T20:29:41.020765Z", "url": "https://files.pythonhosted.org/packages/c6/aa/2a55872f339b98f622c3356fe34b57a0e7e98c3eb48e254089a194b1c1cf/mplcairo-0.3-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c20cb3b4d911d8775ec35bfc7cba10a5", "sha256": "950d9a2cabd158dd68320fed25590cb490966129af241ee71b5e3d929b795795"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c20cb3b4d911d8775ec35bfc7cba10a5", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 829624, "upload_time": "2020-05-03T20:29:44", "upload_time_iso_8601": "2020-05-03T20:29:44.835119Z", "url": "https://files.pythonhosted.org/packages/2a/a4/20a2837fb8167cc61ce097b59a08af0e127c8027d81333e6dcdc3c8bec2c/mplcairo-0.3-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86f386b4f2e8f9ad145678b81579c989", "sha256": "5e11022084be6ec2629e616ab5fc729483aa18192d430011448408cf364157c2"}, "downloads": -1, "filename": "mplcairo-0.3-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "86f386b4f2e8f9ad145678b81579c989", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 1650957, "upload_time": "2020-05-03T20:29:49", "upload_time_iso_8601": "2020-05-03T20:29:49.373745Z", "url": "https://files.pythonhosted.org/packages/59/32/2135645e83f21f4d443e27b464f2868e46dae074925f38b36e5d0fd6a8c0/mplcairo-0.3-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36dc12a2bbe3b7f8c3a0aeaf1f45d1ca", "sha256": "98f3d2c6f6c6d23e9593ffc9237bc43532ad72a54a50991f4ee1b86b96ad3174"}, "downloads": -1, "filename": "mplcairo-0.3.tar.gz", "has_sig": false, "md5_digest": "36dc12a2bbe3b7f8c3a0aeaf1f45d1ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 86893, "upload_time": "2020-05-03T20:29:51", "upload_time_iso_8601": "2020-05-03T20:29:51.331683Z", "url": "https://files.pythonhosted.org/packages/ee/11/b7cae7f58eff95f5cc416ca95027f3ec4c003cdb01ca0a2559e600beac4a/mplcairo-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:14 2020"}