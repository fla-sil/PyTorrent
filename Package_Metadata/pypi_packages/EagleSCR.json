{"info": {"author": "Derp Ston", "author_email": "derpston+pypi@sleepygeek.org", "bugtrack_url": null, "classifiers": [], "description": "pyEagleSCR\n----------\n\npyEagleSCR is a pure Python parser for the scripting language used by\n`AutoDesk/CADSoft Eagle\u2019s PCB schematic/layout\ntool <https://www.autodesk.com/products/eagle>`__.\n\nFor now, it aims to support only the functionality needed to parse\nsymbols and packages, to ease use of part specifications in other tools\nlike `KiCad <http://kicad-pcb.org/>`__.\n\nStatus\n------\n\nBasic functionality working, including (probably not quite full) support\nfor these commands:\n\n-  Edit, with support for Symbols, Packages and Devices\n-  Prefix\n-  Pin\n-  Wire\n-  Layer\n-  Connect\n-  Description\n-  Attribute\n-  Add\n-  Package\n-  Smd\n-  Grid\n-  Set\n\nExample\n-------\n\nRunning this tool against the .SCR file found in `this ZIP on\nfarnell.com <http://www.farnell.com/cad/1724597.zip>`__ (for the\ncomponent\n`STM32F405RGT6 <http://uk.farnell.com/stmicroelectronics/stm32f405rgt6/mcu-32bit-cortex-m4-168mhz-lqfp/dp/2064363?st=stm32F405rgt6>`__,\nfarnell stock number 2064363) produces this result:\n\n.. code:: python\n\n    {'devices': {'STM32F405RGT6': <Device STM32F405RGT6>},\n     'grid': 'mil',\n     'layer': '96',\n     'packages': {'QFP50P1200X1200X160-64N': <Package QFP50P1200X1200X160-64N lines=278 smd_pads=64>},\n     'settings': {'Wire_Bend': '2'},\n     'symbols': {'STM32F405RGT6': <Symbol STM32F405RGT6, 64 pins, 4 lines>}}\n\nIt doesn\u2019t look like much, but this is a bare summary of the rich\ninformation inside this tree of objects. The parsed symbol here, a\n``STM32F405RGT6``, has a listing of all 64 pins, correctly mapped to the\n64 SMD pads in the ``QFP50P1200X1200X160-64N`` package via the\nconnections specified by the device ``STM32F405RGT6``.\n\nUsage\n-----\n\nCreate a Parser object, and feed the SCR in, line-by-line, then read the\ninformation you want out of the Parser.context object:\n\n.. code:: python\n\n    scrparser = parser.Parser()\n\n    for line in open(\"yourfile.scr\"):\n        scrparser.handle_line(line)\n        \n    print scrparser.context['symbols']\n    # {'STM32F405RGT6': <Symbol STM32F405RGT6, 64 pins, 4 lines>}\n\nYou can fetch information about the pins on this symbol, like what type\nof pin it is, and the co-ordinates that the pin should be displayed at\nwhen drawing the symbol:\n\n.. code:: python\n\n    pins = scrparser.context['symbols']['STM32F405RGT6'].pins\n    print pins.keys()[:10]\n    # ['PB11', 'PB10', 'PB13', 'PB12', 'PB15', 'PB14', 'VDDA', 'PC14', 'PC15', 'VSS_2']\n    print pins['PB11']\n    # <Pin PB11 type=I/O rotation=0 position=-700,-1600 device=STM32F405RGT6.30> \n    print pins['VDDA']\n    # <Pin VDDA type=Pwr rotation=0 position=-700,1800 device=STM32F405RGT6.13>\n\nIf this script file had information about the package and the device for\nthis symbol, you can also get the physical pad information for any pin\nby looking up the corresponding pin in the package spec:\n\n.. code:: python\n\n    pin_number = pins['VDDA'].device_pin_number\n    # '13'\n    scrparser.context['packages']['QFP50P1200X1200X160-64N'].smd_pads[pin_number]\n    # <Smd 13 x=11 y=58 width=270 height=-221 rotation=-89>\n\nContributing\n------------\n\nContributions are welcome! Please open a PR!\n\nTODO\n----\n\n-  The API is a little janky:\n\n   -  Names of attributes could be more obvious\n   -  Pins should have references to their corresponding pads on the\n      package\n\n-  Support more Eagle SCR commands, like:\n\n   -  Change (applies to Package and Symbol)\n   -  Text (applies to Package and Symbol)\n   -  Value (applies to Device?)\n   -  Pad (through hole components, applies to Package?)\n   -  Technology (applies to Device?)\n   -  Wire (four-tuple variant, probably for rectangles?)\n\n-  Support stripping comments after the end of a command.\n\n   -  More examples in\n      https://github.com/sparkfun/SparkFun_Eagle_Settings/blob/master/scr/eagle.scr\n\n-  Set up sensible defaults in the context, to match what Eagle does.\n\n   -  layer\n   -  grid\n   -  Any other default settings that should be initialised here?\n\n-  Support case-insensitive commands\n-  Python 3 support\n-  Tests!\n-  Support for processing a whole file so we don\u2019t have to feed it in\n   line-by-line, which is silly.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/derpston/pyEagleSCR", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "EagleSCR", "package_url": "https://pypi.org/project/EagleSCR/", "platform": "", "project_url": "https://pypi.org/project/EagleSCR/", "project_urls": {"Homepage": "https://github.com/derpston/pyEagleSCR"}, "release_url": "https://pypi.org/project/EagleSCR/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Parser for the Eagle scripting language", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyeaglescr\">\n<h2>pyEagleSCR</h2>\n<p>pyEagleSCR is a pure Python parser for the scripting language used by\n<a href=\"https://www.autodesk.com/products/eagle\" rel=\"nofollow\">AutoDesk/CADSoft Eagle\u2019s PCB schematic/layout\ntool</a>.</p>\n<p>For now, it aims to support only the functionality needed to parse\nsymbols and packages, to ease use of part specifications in other tools\nlike <a href=\"http://kicad-pcb.org/\" rel=\"nofollow\">KiCad</a>.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Basic functionality working, including (probably not quite full) support\nfor these commands:</p>\n<ul>\n<li>Edit, with support for Symbols, Packages and Devices</li>\n<li>Prefix</li>\n<li>Pin</li>\n<li>Wire</li>\n<li>Layer</li>\n<li>Connect</li>\n<li>Description</li>\n<li>Attribute</li>\n<li>Add</li>\n<li>Package</li>\n<li>Smd</li>\n<li>Grid</li>\n<li>Set</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Running this tool against the .SCR file found in <a href=\"http://www.farnell.com/cad/1724597.zip\" rel=\"nofollow\">this ZIP on\nfarnell.com</a> (for the\ncomponent\n<a href=\"http://uk.farnell.com/stmicroelectronics/stm32f405rgt6/mcu-32bit-cortex-m4-168mhz-lqfp/dp/2064363?st=stm32F405rgt6\" rel=\"nofollow\">STM32F405RGT6</a>,\nfarnell stock number 2064363) produces this result:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'devices'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'STM32F405RGT6'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Device</span> <span class=\"n\">STM32F405RGT6</span><span class=\"o\">&gt;</span><span class=\"p\">},</span>\n <span class=\"s1\">'grid'</span><span class=\"p\">:</span> <span class=\"s1\">'mil'</span><span class=\"p\">,</span>\n <span class=\"s1\">'layer'</span><span class=\"p\">:</span> <span class=\"s1\">'96'</span><span class=\"p\">,</span>\n <span class=\"s1\">'packages'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'QFP50P1200X1200X160-64N'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Package</span> <span class=\"n\">QFP50P1200X1200X160</span><span class=\"o\">-</span><span class=\"mi\">64</span><span class=\"n\">N</span> <span class=\"n\">lines</span><span class=\"o\">=</span><span class=\"mi\">278</span> <span class=\"n\">smd_pads</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"o\">&gt;</span><span class=\"p\">},</span>\n <span class=\"s1\">'settings'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'Wire_Bend'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">},</span>\n <span class=\"s1\">'symbols'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'STM32F405RGT6'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Symbol</span> <span class=\"n\">STM32F405RGT6</span><span class=\"p\">,</span> <span class=\"mi\">64</span> <span class=\"n\">pins</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"n\">lines</span><span class=\"o\">&gt;</span><span class=\"p\">}}</span>\n</pre>\n<p>It doesn\u2019t look like much, but this is a bare summary of the rich\ninformation inside this tree of objects. The parsed symbol here, a\n<tt>STM32F405RGT6</tt>, has a listing of all 64 pins, correctly mapped to the\n64 SMD pads in the <tt><span class=\"pre\">QFP50P1200X1200X160-64N</span></tt> package via the\nconnections specified by the device <tt>STM32F405RGT6</tt>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a Parser object, and feed the SCR in, line-by-line, then read the\ninformation you want out of the Parser.context object:</p>\n<pre><span class=\"n\">scrparser</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"yourfile.scr\"</span><span class=\"p\">):</span>\n    <span class=\"n\">scrparser</span><span class=\"o\">.</span><span class=\"n\">handle_line</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">scrparser</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'symbols'</span><span class=\"p\">]</span>\n<span class=\"c1\"># {'STM32F405RGT6': &lt;Symbol STM32F405RGT6, 64 pins, 4 lines&gt;}</span>\n</pre>\n<p>You can fetch information about the pins on this symbol, like what type\nof pin it is, and the co-ordinates that the pin should be displayed at\nwhen drawing the symbol:</p>\n<pre><span class=\"n\">pins</span> <span class=\"o\">=</span> <span class=\"n\">scrparser</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'symbols'</span><span class=\"p\">][</span><span class=\"s1\">'STM32F405RGT6'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pins</span>\n<span class=\"nb\">print</span> <span class=\"n\">pins</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()[:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"c1\"># ['PB11', 'PB10', 'PB13', 'PB12', 'PB15', 'PB14', 'VDDA', 'PC14', 'PC15', 'VSS_2']</span>\n<span class=\"nb\">print</span> <span class=\"n\">pins</span><span class=\"p\">[</span><span class=\"s1\">'PB11'</span><span class=\"p\">]</span>\n<span class=\"c1\"># &lt;Pin PB11 type=I/O rotation=0 position=-700,-1600 device=STM32F405RGT6.30&gt;</span>\n<span class=\"nb\">print</span> <span class=\"n\">pins</span><span class=\"p\">[</span><span class=\"s1\">'VDDA'</span><span class=\"p\">]</span>\n<span class=\"c1\"># &lt;Pin VDDA type=Pwr rotation=0 position=-700,1800 device=STM32F405RGT6.13&gt;</span>\n</pre>\n<p>If this script file had information about the package and the device for\nthis symbol, you can also get the physical pad information for any pin\nby looking up the corresponding pin in the package spec:</p>\n<pre><span class=\"n\">pin_number</span> <span class=\"o\">=</span> <span class=\"n\">pins</span><span class=\"p\">[</span><span class=\"s1\">'VDDA'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">device_pin_number</span>\n<span class=\"c1\"># '13'</span>\n<span class=\"n\">scrparser</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'packages'</span><span class=\"p\">][</span><span class=\"s1\">'QFP50P1200X1200X160-64N'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">smd_pads</span><span class=\"p\">[</span><span class=\"n\">pin_number</span><span class=\"p\">]</span>\n<span class=\"c1\"># &lt;Smd 13 x=11 y=58 width=270 height=-221 rotation=-89&gt;</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome! Please open a PR!</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>The API is a little janky:<ul>\n<li>Names of attributes could be more obvious</li>\n<li>Pins should have references to their corresponding pads on the\npackage</li>\n</ul>\n</li>\n<li>Support more Eagle SCR commands, like:<ul>\n<li>Change (applies to Package and Symbol)</li>\n<li>Text (applies to Package and Symbol)</li>\n<li>Value (applies to Device?)</li>\n<li>Pad (through hole components, applies to Package?)</li>\n<li>Technology (applies to Device?)</li>\n<li>Wire (four-tuple variant, probably for rectangles?)</li>\n</ul>\n</li>\n<li>Support stripping comments after the end of a command.<ul>\n<li>More examples in\n<a href=\"https://github.com/sparkfun/SparkFun_Eagle_Settings/blob/master/scr/eagle.scr\" rel=\"nofollow\">https://github.com/sparkfun/SparkFun_Eagle_Settings/blob/master/scr/eagle.scr</a></li>\n</ul>\n</li>\n<li>Set up sensible defaults in the context, to match what Eagle does.<ul>\n<li>layer</li>\n<li>grid</li>\n<li>Any other default settings that should be initialised here?</li>\n</ul>\n</li>\n<li>Support case-insensitive commands</li>\n<li>Python 3 support</li>\n<li>Tests!</li>\n<li>Support for processing a whole file so we don\u2019t have to feed it in\nline-by-line, which is silly.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3593660, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "23b774a8bfdcd883f5ce58af6a82695b", "sha256": "d37c954eead65acd281cb2bfe6928d6bc267d33b731fa44c6eff56fe5bed3332"}, "downloads": -1, "filename": "EagleSCR-0.0.1.tar.gz", "has_sig": false, "md5_digest": "23b774a8bfdcd883f5ce58af6a82695b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 656, "upload_time": "2018-02-18T13:56:03", "upload_time_iso_8601": "2018-02-18T13:56:03.711014Z", "url": "https://files.pythonhosted.org/packages/ef/bf/f0a83a26f6484c6f5d75962d0fb6c9abe718e07839850a9d4a28ed879328/EagleSCR-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2e475f41e57213fb117056522a27e0e2", "sha256": "11b35e70d1730e77bab828759f3dbac5f0d62060f6539497f6b6360e0355566e"}, "downloads": -1, "filename": "EagleSCR-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2e475f41e57213fb117056522a27e0e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5243, "upload_time": "2018-02-18T14:10:23", "upload_time_iso_8601": "2018-02-18T14:10:23.472429Z", "url": "https://files.pythonhosted.org/packages/9f/15/e12a8c9470af08b01f91f0ee6a706cf0a50bd17a62b31a5d92f3c5f6c55c/EagleSCR-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0b8f3023a79a3604db74086304bffce5", "sha256": "ef56764edadfbf0e34c3a2c861c10c27c729e7fb8dab2f33208a6c4399a1e34d"}, "downloads": -1, "filename": "EagleSCR-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0b8f3023a79a3604db74086304bffce5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5276, "upload_time": "2018-02-18T17:00:06", "upload_time_iso_8601": "2018-02-18T17:00:06.449191Z", "url": "https://files.pythonhosted.org/packages/35/96/ffdd4801429e5f10d74255557e340e62ace28495b33bc25395b45028d48c/EagleSCR-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b8f3023a79a3604db74086304bffce5", "sha256": "ef56764edadfbf0e34c3a2c861c10c27c729e7fb8dab2f33208a6c4399a1e34d"}, "downloads": -1, "filename": "EagleSCR-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0b8f3023a79a3604db74086304bffce5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5276, "upload_time": "2018-02-18T17:00:06", "upload_time_iso_8601": "2018-02-18T17:00:06.449191Z", "url": "https://files.pythonhosted.org/packages/35/96/ffdd4801429e5f10d74255557e340e62ace28495b33bc25395b45028d48c/EagleSCR-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:32 2020"}