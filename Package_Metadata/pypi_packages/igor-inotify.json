{"info": {"author": "Da_Blitz", "author_email": "code@pocketnix.org", "bugtrack_url": null, "classifiers": [], "description": "======\n Igor\n======\nA Runner/Manager of plugins that perform work in response to filesystem events\n\nThe intended usage of this is to manage creation/deletion of containers by symlinking into a 'containers-enabled'\ndirectory\n\nStarting the App\n----------------\nIgor is relativly simple and in most cases cna be run without arguments. -v can be specified multiple times\nto increase the verbosity of logging to stdout and -c can be used to override the default config file\n\nexample: ::\n\n    $ igor\n\nigor also understand/can override the default config dirs with the 2 following environment variables\n\n * IGOR_CONFIG_DIR: The directory to look for config files in\n * IGOR_CONFIG: The full path to igor's config file. If this is not specified, igor looks for 'igor.conf'\n   in IGOR_CONFIG_DIR\n\nTo get a list of all possible environment variables that can be set, use the following command::\n\n    $ python -m igor.consts\n\n\nPlugins\n--------\nPlugins are defined in a config file ending in \\*.conf in the IGOR_CONFIG_DIR. These files are a yaml file\nwith at least 2 keys:\n\n * name: The name of the plugin, mainly used for logging\n * plugin: The path to the plugin in the form path/to/module/on/the/filesystem[:name of the setup function]\n   where the name of the setup function is optional and defaults to 'setup'\n\nIn a plugin there exists a single setup function that takes 3 arguments, a config, a logger and a way to \ngenerate inotify instances\n\n * config: The Yaml config file that defines this plugin as python objects including the 'name' and 'plugin' as \n   defined above. any extra keys in the config file automatically get passed in via config.\n * logger: logging.getLogger instance that has been set up for this plugin with the correct logging policy applied\n * inotify: Takes a callable and returns a butter.inotify.Inotify instance that allows the adding of watches\n   (listening for events is done by igor). The callable provided is called on each inotify event and is given a \n   butter.inotify.InotifyEvent object\n\nfor an example of how this works, take a look at 'inotify.py' and 'inotify.conf' in example_fs", "description_content_type": null, "docs_url": null, "download_url": "http://code.pocketnix.org/igor/archive/tip.tar.bz2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.pocketnix.org/igor/file/tip", "keywords": "inotify linux managment", "license": "MIT BSD", "maintainer": null, "maintainer_email": null, "name": "igor-inotify", "package_url": "https://pypi.org/project/igor-inotify/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/igor-inotify/", "project_urls": {"Download": "http://code.pocketnix.org/igor/archive/tip.tar.bz2", "Homepage": "http://code.pocketnix.org/igor/file/tip"}, "release_url": "https://pypi.org/project/igor-inotify/0.4/", "requires_dist": null, "requires_python": null, "summary": "inotify based managment system", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Runner/Manager of plugins that perform work in response to filesystem events</p>\n<p>The intended usage of this is to manage creation/deletion of containers by symlinking into a \u2018containers-enabled\u2019\ndirectory</p>\n<div id=\"starting-the-app\">\n<h2>Starting the App</h2>\n<p>Igor is relativly simple and in most cases cna be run without arguments. -v can be specified multiple times\nto increase the verbosity of logging to stdout and -c can be used to override the default config file</p>\n<p>example:</p>\n<pre>$ igor\n</pre>\n<p>igor also understand/can override the default config dirs with the 2 following environment variables</p>\n<blockquote>\n<ul>\n<li>IGOR_CONFIG_DIR: The directory to look for config files in</li>\n<li>IGOR_CONFIG: The full path to igor\u2019s config file. If this is not specified, igor looks for \u2018igor.conf\u2019\nin IGOR_CONFIG_DIR</li>\n</ul>\n</blockquote>\n<p>To get a list of all possible environment variables that can be set, use the following command:</p>\n<pre>$ python -m igor.consts\n</pre>\n</div>\n<div id=\"plugins\">\n<h2>Plugins</h2>\n<p>Plugins are defined in a config file ending in *.conf in the IGOR_CONFIG_DIR. These files are a yaml file\nwith at least 2 keys:</p>\n<blockquote>\n<ul>\n<li>name: The name of the plugin, mainly used for logging</li>\n<li>plugin: The path to the plugin in the form path/to/module/on/the/filesystem[:name of the setup function]\nwhere the name of the setup function is optional and defaults to \u2018setup\u2019</li>\n</ul>\n</blockquote>\n<p>In a plugin there exists a single setup function that takes 3 arguments, a config, a logger and a way to\ngenerate inotify instances</p>\n<blockquote>\n<ul>\n<li>config: The Yaml config file that defines this plugin as python objects including the \u2018name\u2019 and \u2018plugin\u2019 as\ndefined above. any extra keys in the config file automatically get passed in via config.</li>\n<li>logger: logging.getLogger instance that has been set up for this plugin with the correct logging policy applied</li>\n<li>inotify: Takes a callable and returns a butter.inotify.Inotify instance that allows the adding of watches\n(listening for events is done by igor). The callable provided is called on each inotify event and is given a\nbutter.inotify.InotifyEvent object</li>\n</ul>\n</blockquote>\n<p>for an example of how this works, take a look at \u2018inotify.py\u2019 and \u2018inotify.conf\u2019 in example_fs</p>\n</div>\n\n          </div>"}, "last_serial": 1371071, "releases": {"0.1": [], "0.2": [{"comment_text": "", "digests": {"md5": "92f452172ad6733d4414d700baf256c4", "sha256": "8360424b575f28c13d553410a23403f1d35e70eaf319260122339d855b19174b"}, "downloads": -1, "filename": "igor-inotify-0.2.tar.gz", "has_sig": false, "md5_digest": "92f452172ad6733d4414d700baf256c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5404, "upload_time": "2013-11-17T09:18:35", "upload_time_iso_8601": "2013-11-17T09:18:35.730522Z", "url": "https://files.pythonhosted.org/packages/4e/ff/cd584f77b418ef6e7b6fb09ec69c4d32912de905383271e855101befc429/igor-inotify-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0a8471b6ca31b95033169ccccd14e69d", "sha256": "a9b06e4bae63d02a4c6202f23eec5fc6a81ab35d9147a50dc13e56ffa69738a4"}, "downloads": -1, "filename": "igor-inotify-0.3.tar.gz", "has_sig": false, "md5_digest": "0a8471b6ca31b95033169ccccd14e69d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5440, "upload_time": "2013-11-18T13:17:03", "upload_time_iso_8601": "2013-11-18T13:17:03.893266Z", "url": "https://files.pythonhosted.org/packages/5e/22/9de47ef08a3477df48c026167df5806929213620d716306df454752fbb74/igor-inotify-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a3e254ceedfd989cb2fbe900e5553895", "sha256": "8f687a50c19db03264cc1e528cf38667c58cbf63c3e0a35295e42e4113fa0fff"}, "downloads": -1, "filename": "igor-inotify-0.4.tar.bz2", "has_sig": false, "md5_digest": "a3e254ceedfd989cb2fbe900e5553895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5629, "upload_time": "2015-01-05T12:29:01", "upload_time_iso_8601": "2015-01-05T12:29:01.871862Z", "url": "https://files.pythonhosted.org/packages/b8/dc/46400669124c02debc8a93ab63e11f0f67addc6632fa581861fde0b5a623/igor-inotify-0.4.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "827626691f5530e3e8b2e49e49bfb867", "sha256": "1527b55b594c6f5ef12add0ddd8f165d45a3e0f6d7faeff69ab086c02db2ce6e"}, "downloads": -1, "filename": "igor-inotify-0.4.zip", "has_sig": false, "md5_digest": "827626691f5530e3e8b2e49e49bfb867", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12221, "upload_time": "2015-01-05T12:28:52", "upload_time_iso_8601": "2015-01-05T12:28:52.657917Z", "url": "https://files.pythonhosted.org/packages/13/00/886731d94615d91c030758ff5227d72247028a818dc0c48dca762bccdfa7/igor-inotify-0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3e254ceedfd989cb2fbe900e5553895", "sha256": "8f687a50c19db03264cc1e528cf38667c58cbf63c3e0a35295e42e4113fa0fff"}, "downloads": -1, "filename": "igor-inotify-0.4.tar.bz2", "has_sig": false, "md5_digest": "a3e254ceedfd989cb2fbe900e5553895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5629, "upload_time": "2015-01-05T12:29:01", "upload_time_iso_8601": "2015-01-05T12:29:01.871862Z", "url": "https://files.pythonhosted.org/packages/b8/dc/46400669124c02debc8a93ab63e11f0f67addc6632fa581861fde0b5a623/igor-inotify-0.4.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "827626691f5530e3e8b2e49e49bfb867", "sha256": "1527b55b594c6f5ef12add0ddd8f165d45a3e0f6d7faeff69ab086c02db2ce6e"}, "downloads": -1, "filename": "igor-inotify-0.4.zip", "has_sig": false, "md5_digest": "827626691f5530e3e8b2e49e49bfb867", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12221, "upload_time": "2015-01-05T12:28:52", "upload_time_iso_8601": "2015-01-05T12:28:52.657917Z", "url": "https://files.pythonhosted.org/packages/13/00/886731d94615d91c030758ff5227d72247028a818dc0c48dca762bccdfa7/igor-inotify-0.4.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:05 2020"}