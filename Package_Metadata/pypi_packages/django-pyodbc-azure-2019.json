{"info": {"author": "Michiya Takahashi, updated by Eric A Scuccimarra (skooch@gmail.com)", "author_email": "michiya.takahashi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "django-pyodbc-azure\n===================\n\n.. image:: http://img.shields.io/pypi/v/django-pyodbc-azure.svg?style=flat\n    :target: https://pypi.python.org/pypi/django-pyodbc-azure\n\n.. image:: http://img.shields.io/pypi/l/django-pyodbc-azure.svg?style=flat\n    :target: http://opensource.org/licenses/BSD-3-Clause\n\n*django-pyodbc-azure* is a modern fork of\n`django-pyodbc <https://code.google.com/archive/p/django-pyodbc/>`__, a\n`Django <https://www.djangoproject.com/>`__ Microsoft SQL Server external\nDB backend that uses ODBC by employing the\n`pyodbc <https://github.com/mkleehammer/pyodbc>`__ library. It supports\nMicrosoft SQL Server and Azure SQL Database.\n\nThis current fork has added a single line of code to enable compatibility with SQL Server 2019 v15. \n\nFeatures\n--------\n\n-  Supports Django 2.1\n-  Supports Microsoft SQL Server 2008/2008R2, 2012, 2014, 2016, 2017 and\n   Azure SQL Database\n-  Passes most of the tests of the Django test suite\n-  Compatible with\n   `Micosoft ODBC Driver for SQL Server <https://docs.microsoft.com/en-us/sql/connect/odbc/microsoft-odbc-driver-for-sql-server>`__,\n   `SQL Server Native Client <https://msdn.microsoft.com/en-us/library/ms131321(v=sql.120).aspx>`__,\n   and `FreeTDS <http://www.freetds.org/>`__ ODBC drivers\n\nDependencies\n------------\n\n-  Django 2.1\n-  pyodbc 3.0 or newer\n\nInstallation\n------------\n\n1. Install pyodbc and Django\n\n2. Install django-pyodbc-azure ::\n\n    pip install django-pyodbc-azure\n\n3. Now you can point the ``ENGINE`` setting in the settings file used by\n   your Django application or project to the ``'sql_server.pyodbc'``\n   module path ::\n\n    'ENGINE': 'sql_server.pyodbc'\n\nConfiguration\n-------------\n\nStandard Django settings\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following entries in a database-level settings dictionary\nin DATABASES control the behavior of the backend:\n\n-  ENGINE\n\n   String. It must be ``\"sql_server.pyodbc\"``.\n\n-  NAME\n\n   String. Database name. Required.\n\n-  HOST\n\n   String. SQL Server instance in ``\"server\\instance\"`` (on-premise) or\n   ``\"server.database.windows.net\"`` (Azure SQL Database) format.\n\n-  PORT\n\n   String. Server instance port.\n   An empty string means the default port.\n\n-  USER\n\n   String. Database user name in ``\"user\"`` (on-premise) or\n   ``\"user@server\"`` (Azure SQL Database) format.\n   If not given then MS Integrated Security will be used.\n\n-  PASSWORD\n\n   String. Database user password.\n\n-  AUTOCOMMIT\n\n   Boolean. Set this to False if you want to disable\n   Django's transaction management and implement your own.\n\nand the following entries are also available in the TEST dictionary\nfor any given database-level settings dictionary:\n\n-  NAME\n\n   String. The name of database to use when running the test suite.\n   If the default value (``None``) is used, the test database will use\n   the name \"test\\_\" + ``NAME``.\n\n-  COLLATION\n\n   String. The collation order to use when creating the test database.\n   If the default value (``None``) is used, the test database is assigned\n   the default collation of the instance of SQL Server.\n\n-  DEPENDENCIES\n\n   String. The creation-order dependencies of the database.\n   See the official Django documentation for more details.\n\n-  MIRROR\n\n   String. The alias of the database that this database should\n   mirror during testing. Default value is ``None``.\n   See the official Django documentation for more details.\n\nOPTIONS\n~~~~~~~\n\nDictionary. Current available keys are:\n\n-  driver\n\n   String. ODBC Driver to use (``\"ODBC Driver 13 for SQL Server\"``,\n   ``\"SQL Server Native Client 11.0\"``, ``\"FreeTDS\"`` etc).\n   Default is ``\"ODBC Driver 13 for SQL Server\"``.\n\n-  isolation_level\n\n   String. Sets `transaction isolation level\n   <https://docs.microsoft.com/en-us/sql/t-sql/statements/set-transaction-isolation-level-transact-sql>`__\n   for each database session. Valid values for this entry are\n   ``READ UNCOMMITTED``, ``READ COMMITTED``, ``REPEATABLE READ``,\n   ``SNAPSHOT``, and ``SERIALIZABLE``. Default is ``None`` which means\n   no isolation levei is set to a database session and SQL Server default\n   will be used.\n\n-  dsn\n\n   String. A named DSN can be used instead of ``HOST``.\n\n-  host_is_server\n\n   Boolean. Only relevant if using the FreeTDS ODBC driver under\n   Unix/Linux.\n\n   By default, when using the FreeTDS ODBC driver the value specified in\n   the ``HOST`` setting is used in a ``SERVERNAME`` ODBC connection\n   string component instead of being used in a ``SERVER`` component;\n   this means that this value should be the name of a *dataserver*\n   definition present in the ``freetds.conf`` FreeTDS configuration file\n   instead of a hostname or an IP address.\n\n   But if this option is present and it's value is ``True``, this\n   special behavior is turned off.\n\n   See http://www.freetds.org/userguide/dsnless.htm for more information.\n\n-  unicode_results\n\n   Boolean. If it is set to ``True``, pyodbc's *unicode_results* feature\n   is activated and strings returned from pyodbc are always Unicode.\n   Default value is ``False``.\n\n-  extra_params\n\n   String. Additional parameters for the ODBC connection. The format is\n   ``\"param=value;param=value\"``.\n\n-  collation\n\n   String. Name of the collation to use when performing text field\n   lookups against the database. Default is ``None``; this means no\n   collation specifier is added to your lookup SQL (the default\n   collation of your database will be used). For Chinese language you\n   can set it to ``\"Chinese_PRC_CI_AS\"``.\n\n-  connection_timeout\n\n   Integer. Sets the timeout in seconds for the database connection process.\n   Default value is ``0`` which disables the timeout.\n\n-  connection_retries\n\n   Integer. Sets the times to retry the database connection process.\n   Default value is ``5``.\n\n-  connection_retry_backoff_time\n\n   Integer. Sets the back off time in seconds for reries of\n   the database connection process. Default value is ``5``.\n\n-  query_timeout\n\n   Integer. Sets the timeout in seconds for the database query.\n   Default value is ``0`` which disables the timeout.\n\nbackend-specific settings\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following project-level settings also control the behavior of the backend:\n\n-  DATABASE_CONNECTION_POOLING\n\n   Boolean. If it is set to ``False``, pyodbc's connection pooling feature\n   won't be activated.\n\nExample\n~~~~~~~\n\nHere is an example of the database settings:\n\n::\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'sql_server.pyodbc',\n            'NAME': 'mydb',\n            'USER': 'user@myserver',             \n            'PASSWORD': 'password',\n            'HOST': 'myserver.database.windows.net',\n            'PORT': '',\n\n            'OPTIONS': {\n                'driver': 'ODBC Driver 13 for SQL Server',\n            },\n        },\n    }\n\n    # set this to False if you want to turn off pyodbc's connection pooling\n    DATABASE_CONNECTION_POOLING = False\n\nLimitations\n-----------\n\nThe following features are currently not supported:\n\n- Altering a model field from or to AutoField at migration\n\nNotice\n------\n\nThis version of *django-pyodbc-azure* only supports Django 2.1.\nIf you want to use it on older versions of Django,\nspecify an appropriate version number (2.0.x.x for Django 2.0)\nat installation like this: ::\n\n    pip install \"django-pyodbc-azure<2.1\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/escuccim/django-pyodbc-azure", "keywords": "azure django", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-pyodbc-azure-2019", "package_url": "https://pypi.org/project/django-pyodbc-azure-2019/", "platform": "", "project_url": "https://pypi.org/project/django-pyodbc-azure-2019/", "project_urls": {"Homepage": "https://github.com/escuccim/django-pyodbc-azure"}, "release_url": "https://pypi.org/project/django-pyodbc-azure-2019/2.1.0.0/", "requires_dist": ["Django (<2.2,>=2.1.0)", "pyodbc (>=3.0)"], "requires_python": "", "summary": "Django backend for Microsoft SQL Server and Azure SQL Database using pyodbc, compatible with SQL Server 2019", "version": "2.1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/django-pyodbc-azure\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/v/django-pyodbc-azure.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d91c10c49066f9874b0543b85f2f6ef78dc4fe3a/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d70796f6462632d617a7572652e7376673f7374796c653d666c6174\"></a>\n<a href=\"http://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/l/django-pyodbc-azure.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cf39d7520a2bcbfb620f8d03ce850aa8d37abda/687474703a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d70796f6462632d617a7572652e7376673f7374796c653d666c6174\"></a>\n<p><em>django-pyodbc-azure</em> is a modern fork of\n<a href=\"https://code.google.com/archive/p/django-pyodbc/\" rel=\"nofollow\">django-pyodbc</a>, a\n<a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> Microsoft SQL Server external\nDB backend that uses ODBC by employing the\n<a href=\"https://github.com/mkleehammer/pyodbc\" rel=\"nofollow\">pyodbc</a> library. It supports\nMicrosoft SQL Server and Azure SQL Database.</p>\n<p>This current fork has added a single line of code to enable compatibility with SQL Server 2019 v15.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Supports Django 2.1</li>\n<li>Supports Microsoft SQL Server 2008/2008R2, 2012, 2014, 2016, 2017 and\nAzure SQL Database</li>\n<li>Passes most of the tests of the Django test suite</li>\n<li>Compatible with\n<a href=\"https://docs.microsoft.com/en-us/sql/connect/odbc/microsoft-odbc-driver-for-sql-server\" rel=\"nofollow\">Micosoft ODBC Driver for SQL Server</a>,\n<a href=\"https://msdn.microsoft.com/en-us/library/ms131321(v=sql.120).aspx\" rel=\"nofollow\">SQL Server Native Client</a>,\nand <a href=\"http://www.freetds.org/\" rel=\"nofollow\">FreeTDS</a> ODBC drivers</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Django 2.1</li>\n<li>pyodbc 3.0 or newer</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install pyodbc and Django</p>\n</li>\n<li><p>Install django-pyodbc-azure</p>\n<pre>pip install django-pyodbc-azure\n</pre>\n</li>\n<li><p>Now you can point the <tt>ENGINE</tt> setting in the settings file used by\nyour Django application or project to the <tt>'sql_server.pyodbc'</tt>\nmodule path</p>\n<pre>'ENGINE': 'sql_server.pyodbc'\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"standard-django-settings\">\n<h3>Standard Django settings</h3>\n<p>The following entries in a database-level settings dictionary\nin DATABASES control the behavior of the backend:</p>\n<ul>\n<li><p>ENGINE</p>\n<p>String. It must be <tt>\"sql_server.pyodbc\"</tt>.</p>\n</li>\n<li><p>NAME</p>\n<p>String. Database name. Required.</p>\n</li>\n<li><p>HOST</p>\n<p>String. SQL Server instance in <tt>\"server\\instance\"</tt> (on-premise) or\n<tt>\"server.database.windows.net\"</tt> (Azure SQL Database) format.</p>\n</li>\n<li><p>PORT</p>\n<p>String. Server instance port.\nAn empty string means the default port.</p>\n</li>\n<li><p>USER</p>\n<p>String. Database user name in <tt>\"user\"</tt> (on-premise) or\n<tt>\"user@server\"</tt> (Azure SQL Database) format.\nIf not given then MS Integrated Security will be used.</p>\n</li>\n<li><p>PASSWORD</p>\n<p>String. Database user password.</p>\n</li>\n<li><p>AUTOCOMMIT</p>\n<p>Boolean. Set this to False if you want to disable\nDjango\u2019s transaction management and implement your own.</p>\n</li>\n</ul>\n<p>and the following entries are also available in the TEST dictionary\nfor any given database-level settings dictionary:</p>\n<ul>\n<li><p>NAME</p>\n<p>String. The name of database to use when running the test suite.\nIf the default value (<tt>None</tt>) is used, the test database will use\nthe name \u201ctest_\u201d + <tt>NAME</tt>.</p>\n</li>\n<li><p>COLLATION</p>\n<p>String. The collation order to use when creating the test database.\nIf the default value (<tt>None</tt>) is used, the test database is assigned\nthe default collation of the instance of SQL Server.</p>\n</li>\n<li><p>DEPENDENCIES</p>\n<p>String. The creation-order dependencies of the database.\nSee the official Django documentation for more details.</p>\n</li>\n<li><p>MIRROR</p>\n<p>String. The alias of the database that this database should\nmirror during testing. Default value is <tt>None</tt>.\nSee the official Django documentation for more details.</p>\n</li>\n</ul>\n</div>\n<div id=\"options\">\n<h3>OPTIONS</h3>\n<p>Dictionary. Current available keys are:</p>\n<ul>\n<li><p>driver</p>\n<p>String. ODBC Driver to use (<tt>\"ODBC Driver 13 for SQL Server\"</tt>,\n<tt>\"SQL Server Native Client 11.0\"</tt>, <tt>\"FreeTDS\"</tt> etc).\nDefault is <tt>\"ODBC Driver 13 for SQL Server\"</tt>.</p>\n</li>\n<li><p>isolation_level</p>\n<p>String. Sets <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/set-transaction-isolation-level-transact-sql\" rel=\"nofollow\">transaction isolation level</a>\nfor each database session. Valid values for this entry are\n<tt>READ UNCOMMITTED</tt>, <tt>READ COMMITTED</tt>, <tt>REPEATABLE READ</tt>,\n<tt>SNAPSHOT</tt>, and <tt>SERIALIZABLE</tt>. Default is <tt>None</tt> which means\nno isolation levei is set to a database session and SQL Server default\nwill be used.</p>\n</li>\n<li><p>dsn</p>\n<p>String. A named DSN can be used instead of <tt>HOST</tt>.</p>\n</li>\n<li><p>host_is_server</p>\n<p>Boolean. Only relevant if using the FreeTDS ODBC driver under\nUnix/Linux.</p>\n<p>By default, when using the FreeTDS ODBC driver the value specified in\nthe <tt>HOST</tt> setting is used in a <tt>SERVERNAME</tt> ODBC connection\nstring component instead of being used in a <tt>SERVER</tt> component;\nthis means that this value should be the name of a <em>dataserver</em>\ndefinition present in the <tt>freetds.conf</tt> FreeTDS configuration file\ninstead of a hostname or an IP address.</p>\n<p>But if this option is present and it\u2019s value is <tt>True</tt>, this\nspecial behavior is turned off.</p>\n<p>See <a href=\"http://www.freetds.org/userguide/dsnless.htm\" rel=\"nofollow\">http://www.freetds.org/userguide/dsnless.htm</a> for more information.</p>\n</li>\n<li><p>unicode_results</p>\n<p>Boolean. If it is set to <tt>True</tt>, pyodbc\u2019s <em>unicode_results</em> feature\nis activated and strings returned from pyodbc are always Unicode.\nDefault value is <tt>False</tt>.</p>\n</li>\n<li><p>extra_params</p>\n<p>String. Additional parameters for the ODBC connection. The format is\n<tt>\"param=value;param=value\"</tt>.</p>\n</li>\n<li><p>collation</p>\n<p>String. Name of the collation to use when performing text field\nlookups against the database. Default is <tt>None</tt>; this means no\ncollation specifier is added to your lookup SQL (the default\ncollation of your database will be used). For Chinese language you\ncan set it to <tt>\"Chinese_PRC_CI_AS\"</tt>.</p>\n</li>\n<li><p>connection_timeout</p>\n<p>Integer. Sets the timeout in seconds for the database connection process.\nDefault value is <tt>0</tt> which disables the timeout.</p>\n</li>\n<li><p>connection_retries</p>\n<p>Integer. Sets the times to retry the database connection process.\nDefault value is <tt>5</tt>.</p>\n</li>\n<li><p>connection_retry_backoff_time</p>\n<p>Integer. Sets the back off time in seconds for reries of\nthe database connection process. Default value is <tt>5</tt>.</p>\n</li>\n<li><p>query_timeout</p>\n<p>Integer. Sets the timeout in seconds for the database query.\nDefault value is <tt>0</tt> which disables the timeout.</p>\n</li>\n</ul>\n</div>\n<div id=\"backend-specific-settings\">\n<h3>backend-specific settings</h3>\n<p>The following project-level settings also control the behavior of the backend:</p>\n<ul>\n<li><p>DATABASE_CONNECTION_POOLING</p>\n<p>Boolean. If it is set to <tt>False</tt>, pyodbc\u2019s connection pooling feature\nwon\u2019t be activated.</p>\n</li>\n</ul>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Here is an example of the database settings:</p>\n<pre>DATABASES = {\n    'default': {\n        'ENGINE': 'sql_server.pyodbc',\n        'NAME': 'mydb',\n        'USER': 'user@myserver',\n        'PASSWORD': 'password',\n        'HOST': 'myserver.database.windows.net',\n        'PORT': '',\n\n        'OPTIONS': {\n            'driver': 'ODBC Driver 13 for SQL Server',\n        },\n    },\n}\n\n# set this to False if you want to turn off pyodbc's connection pooling\nDATABASE_CONNECTION_POOLING = False\n</pre>\n</div>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>The following features are currently not supported:</p>\n<ul>\n<li>Altering a model field from or to AutoField at migration</li>\n</ul>\n</div>\n<div id=\"notice\">\n<h2>Notice</h2>\n<p>This version of <em>django-pyodbc-azure</em> only supports Django 2.1.\nIf you want to use it on older versions of Django,\nspecify an appropriate version number (2.0.x.x for Django 2.0)\nat installation like this:</p>\n<pre>pip install \"django-pyodbc-azure&lt;2.1\"\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6443081, "releases": {"2.1.0.0": [{"comment_text": "", "digests": {"md5": "df3aa89326afb5aab8b61933e3cd3f79", "sha256": "a61d3a4ebf090c073a2b2b404efa0b63691518e4ed95a41868d1b57be9d29f13"}, "downloads": -1, "filename": "django_pyodbc_azure_2019-2.1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df3aa89326afb5aab8b61933e3cd3f79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37308, "upload_time": "2020-01-13T08:23:03", "upload_time_iso_8601": "2020-01-13T08:23:03.966946Z", "url": "https://files.pythonhosted.org/packages/9d/27/ee3f497ae6c072a8606645b32f2516bc78a2fa8e4b383e7d40622850cf55/django_pyodbc_azure_2019-2.1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40b00163b81899da85ac0edd98b21812", "sha256": "ee59d59397ba5b433396c49b10fe0e9a6dcbb4ab8f0c4c01cd41957dd6cccdf6"}, "downloads": -1, "filename": "django-pyodbc-azure-2019-2.1.0.0.tar.gz", "has_sig": false, "md5_digest": "40b00163b81899da85ac0edd98b21812", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33504, "upload_time": "2020-01-13T08:23:07", "upload_time_iso_8601": "2020-01-13T08:23:07.197025Z", "url": "https://files.pythonhosted.org/packages/c5/37/1c27e06a971369c256338e13034bfeb5167f454f5c6d55b7fe1876ae3c0a/django-pyodbc-azure-2019-2.1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df3aa89326afb5aab8b61933e3cd3f79", "sha256": "a61d3a4ebf090c073a2b2b404efa0b63691518e4ed95a41868d1b57be9d29f13"}, "downloads": -1, "filename": "django_pyodbc_azure_2019-2.1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df3aa89326afb5aab8b61933e3cd3f79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37308, "upload_time": "2020-01-13T08:23:03", "upload_time_iso_8601": "2020-01-13T08:23:03.966946Z", "url": "https://files.pythonhosted.org/packages/9d/27/ee3f497ae6c072a8606645b32f2516bc78a2fa8e4b383e7d40622850cf55/django_pyodbc_azure_2019-2.1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40b00163b81899da85ac0edd98b21812", "sha256": "ee59d59397ba5b433396c49b10fe0e9a6dcbb4ab8f0c4c01cd41957dd6cccdf6"}, "downloads": -1, "filename": "django-pyodbc-azure-2019-2.1.0.0.tar.gz", "has_sig": false, "md5_digest": "40b00163b81899da85ac0edd98b21812", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33504, "upload_time": "2020-01-13T08:23:07", "upload_time_iso_8601": "2020-01-13T08:23:07.197025Z", "url": "https://files.pythonhosted.org/packages/c5/37/1c27e06a971369c256338e13034bfeb5167f454f5c6d55b7fe1876ae3c0a/django-pyodbc-azure-2019-2.1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:34 2020"}