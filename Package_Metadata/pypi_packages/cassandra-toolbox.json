{"info": {"author": "Knewton Database Team", "author_email": "database@knewton.com", "bugtrack_url": null, "classifiers": [], "description": "cassandra-toolbox\n=========================\n\nA suite of tools for Cassandra - A highly scalable distributed NoSQL datastore.\n\nThese are a set of monitoring and analysis tools that were initially developed at Knewton in order to introspect behavior and performance of the Cassandra clusters at knewton.  These scripts are designed to run locally or remotely against a cassandra cluster.  Just install this into your virtual environment and go for it.\n\n**Be aware that these scripts may cause some load on the target server which can impact your performance.  Nothing comes without a price.**\n\nInstallation\n============\n\nIt is preferable to create a virtual environment to install these tools into\n\n.. code:: shell\n\n    pip install virtualenv\n    virtualenv /path/to/your/virtualenv\n    source /path/to/your/virtualenv/bin/activate\n\nTo install the project you can clone this repo and install it directly into your virtual environment, this would get you the latest code\n\n.. code:: shell\n\n    git clone git@github.com:Knewton/cassandra-toolbox.git\n    cd cassandra-toolbox\n    ./setup.py install\n\nYou can also directly install our package from pip\n\n.. code:: shell\n\n    pip install cassandra-toolbox\n\n\nUsage\n=====\n\nThis package consists of several scripts that get installed as executables into the environment that the package is in.  Each script does something different and is described independently below.\n\ncassandra-stat\n----------------\n\nThe cassandra-stat tool shows a real-time feed of how many operations have gone through Cassandra as reported by the JMX interface that is exposed.  Many people pump this information through Graphite or another data collector which is a good idea so you can visualize and store the data.  However these systems usually poll every minute and can lag behind events.  This allows you to see to the second what is occuring on the system in a manner similar to iostat.\n\nThis script interfaces with the jolokia jmx-http bridge which must be attached to your Cassandra instances that you plan to run cassandra-stat against.  This is very easy however and not intrustive to Cassandra.\n\nInstalling Jolokia is painless.  You first `Link download the JVM agent from their website <https://jolokia.org/download.html>` .  Then you modify your ``cassandra-env.sh`` file to include the following line:\n    JVM_OPTS=\"$JVM_OPTS -javaagent:<Path To Jolokia JVM Agent Jar>.jar\"\n\nA restart of the Cassandra instance is required after this modification.\n\nTo use cassandra-stat you only need to execute the following local to the Cassandra instance you wish to monitor.  You must have activated the virtual environment that cassandra-toolbox is installed into if you have installed the pacakge into a virtual environment.  The output will look similar to the following:\n\n.. code:: shell\n\n    $cassandra-stat\n    Reads     Ranges    Writes    Reads (99%) ms   Ranges (99%) ms   Writes (99%) ms   Compactions     Flushes    Row Cache Misses     Time    ns\n      1         0        111          91.462            68.81            17.4               0             0              0           20:15:36  total\n      2         4        113           91.4             68.30            17.98              0             0              0           20:15:37  total\n      0         0        117           91.4             68.30            17.17              0             0              0           20:15:38  total\n      0         0         72           91.4             68.30            17.34              0             0              0           20:15:39  total\n      0         2         69           91.4             68.30            17.3               0             0              0           20:15:40  total\n\nThe fields that are output are as follows:\n\n * Reads:               Number of reads since the last line was reported\n * Ranges:              Number of range queries since the last line was reported\n * Writes:              Number of writes (updates/insertions/deletions) since the last line was reported\n * Reads (99%):         99th percentile latency in reads given in milliseconds\n * Ranges (99%):        99th percentile latency in range queries given in milliseconds\n * Writes (99%):        99th percentile latency in writes (updates/insertions/deletions) given in milliseconds\n * Compactions:         Number of pending compactions\n * Flushes :            Number of memtable flushes that are in progress\n * Row Cache Misses:    Number of row cache misses that have occured since the last line was reported\n * time:                Time in HH:MM:SS that the line was recorded at\n * ns:                  Namespace that the statistic is output for.  This can be \"total\" which is a sum for all keyspaces, ``<keyspace>`` which is a sum of all column families inside that keyspace, or ``<keyspace>.<columnfamily>`` which is the most granular output\n\nIf a namespace has no traffic, that is if there are 0 reads, range queries, or writes reported for that namespace then the namespace will not be output to the screen with the exception of \"total\" which will always be output.  Note that some of the statistics are differences with the previous line so the absolute numbers can vary depending on the rate that is chosen (this is configurable, see below).  Additionally the 99 percentile outputs are for a moving average that is generated internally by the Cassandra metric libraries so they are not representative of the 99th percentile at that instant.  Any aggregate level metrics (total or keyspace level metrics) will show the highest 99th percentile latency.  Aggregates for other metrics are summations of the constituent column families.  By default system keyspaces are not included in these aggregations, but this is configurable.\n\nConfigurations are set by command line flags, these can be accessed by running ``cassandra-stat --help``:\n\n  * ``--header_rows int``:\n  \t* An integer of how many rows should pass before a new header line is output.  If this is 0 then only the first header will be printed, and if this is -1 then the top header row will not be printed.  Default 10.\n  * ``--rate int``:\n  \t* How many seconds should pass between server polls.  Default 1.\n  * ``--show_system``:\n\t* Include system keyspaces and their related column families in the output.  The aggregation in \"total\" will include system keyspace entires as well, which is not the default behavior.\n  * ``--host string``:\n\t* The http://HOST:PORT that this script should connect to.  Default http://localhost:8778.\n  * ``--show_keyspaces``:\n\t* Set this flag in order to show keyspace level output.\n  * ``--show_cfs``:\n\t* Set this flag to show `<keyspace>.<columnfamily>` level output.\n  * ``--no_total``:\n\t* Set this flag to suppress output of the aggregated total.  This may have the effect of having no output when there is no traffic in the database.\n  * ``--show_zeros``:\n\t* Show all namespaces that are set to be output regardless if there is no activity.\n  * ``--namespaces string``:\n  \t* Comma separated list of namespaces to process and show.  To show an entire keyspace then use the keyspace name as an entry, and to show only a column family then add ``<keyspace>.<columnfamily>`` to the list.  For example ``--namespaces keyspace1,keyspace2.test1`` would show all column families from ``keyspace1`` and only the ``test1`` column family from ``keyspace2``.  Note that there can be strange behaviors with this flag as other flags.  Adding a system keyspace to this flag will have no effect unless the ``--show_system`` flag is also included.  Adding namespaces to this flag will change what namespaces are included in the total for aggregations but these namespaces will not be printed out if the ``--show_keyspaces`` or ``--show_cfs`` flags are not included.  For example ``--namespaces keyspace1,keyspace2.test1 --show_keyspaces`` would output an entry for ``total``, ``keyspace1``, and ``keyspace2`` where ``total`` will be the aggregate of all column families in ``keyspace1`` as well as the column family ``test1`` in ``keyspace2``, ``keyspace1`` will be the aggregate of all column families within it, and ``keyspace2`` will be the aggregate of only the column family ``test1``.  If you are using this flag and ``--show_system`` then you must include which system keyspaces you wish to include, they will not be included by default if using the ``--namespaces`` flag.\n\ncassandra-tracing\n-----------------\nThis script facilitates analysis of Cassandra tracing data, which on its own is difficult to draw conclusions from.  Tracing is very useful to look at individual CQL queries in the cqlsh shell, however to get a better idea of your system's behavior it is often useful to sample a percentage of queries, trace them, and save these traces for later.  Cassandra makes this easy to do with nodetool.  You can use the following to set the probability that any cql query (that is coordinated by the cassandra node local to this command) is traced to 0.1%.\n\n.. code:: shell\n\n\t$nodetool settraceprobability 0.001\n\nNote that a value of 1 means every query will be traced.  A trace logs many lines for every query so be careful of setting this value very high.  It is possible that tracing less than 5% of all queries can result in a write workload which is equal in number to the load which it is tracing.\n\nTo use cassandra-tracing you only need to execute the following local to the Cassandra instance you wish to investigate the tracing logs of.  You must have activated the virtual environment that cassandra-toolbox is installed into if you have installed the pacakge into a virtual environment.  The output will look similar to the following:\n\n.. code:: shell\n\n\t$ cassandra-tracing `hostname -I`\n\t100% Complete: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX|100\n\n\tTotal skipped due to null duration:\t0\n\tTotal skipped due to error:\t0\n\n\t175 sessions satisfying criteria.\n\tShowing 100 longest running results.\n\tSession Id                             Duration (microsecs)    Max Tombstones     Total Tombstones    Flags            Time Started         Query\n\tbedd77a0-159e-11e6-af1d-5b2aec1d0944          19696                  32                  32                     2016-05-09T04:30:23.259000  SELECT * FROM system.schema_columnfamilies\n\tbe941af0-1801-11e6-9deb-25e4276011e4          20569                  0                   0                      2016-05-12T05:24:05.280000  Executing single-partition query on ColumnFamilyA\n\tb4c924a0-1565-11e6-af1d-5b2aec1d0944          20905                  32                  32                     2016-05-08T21:42:05.041000  SELECT * FROM system.schema_columnfamilies\n\tfdf6fda0-174a-11e6-ace9-39442dcd207a          21056                  0                   0                      2016-05-11T07:35:53.724000  Executing single-partition query on ColumnFamilyB\n\tc5f24e80-1751-11e6-af1d-5b2aec1d0944          21397                  0                   0                      2016-05-11T08:24:26.216000  Executing single-partition query on ColumnFamilyB\n\tf7670600-183b-11e6-af1d-5b2aec1d0944          21992                  0                   0                      2016-05-12T12:20:51.425000  Executing single-partition query on ColumnFamilyC\n\nThe output displays the following information, sorted by duration:\n\n  * Session ID\n  * Duration in microseconds\n  * Max number of tombstones encountered on a single session\n  * Total tombstones encountered\n  * Flags signifying special behavior, according to the legend:\n      * R = read repair\n      * T = timeout\n      * I = index used\n  * Starting timestamp of the session (hidden in slim mode)\n  * CQL query or inferred query fragment (hidden in slim mode)\n\nThe Session Id can be used to introspect specific queries (which are logged as a session) in cqlsh yourself, by querying for the session id in the events table of the system_tracing keyspace.\n\n.. code:: shell\n\n    $ cqlsh `hostname -I`\n    Connected to cassandra at 172.ip.ip.ip:9042.\n    [cqlsh 5.0.1 | Cassandra 2.1.11 | CQL spec 3.2.1 | Native protocol v3]\n    Use HELP for help.\n    cqlsh> use system_traces;\n    cqlsh:system_traces> select * from events WHERE session_id=bedd77a0-159e-11e6-af1d-5b2aec1d0944;\n    session_id                           | event_id                             | activity                                                                                         | source       | source_elapsed | thread\n    --------------------------------------+--------------------------------------+--------------------------------------------------------------------------------------------------+--------------+----------------+---------------------\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bedd9eb0-159e-11e6-af1d-5b2aec1d0944 |                                               Parsing SELECT * FROM system.schema_columnfamilies | 172.ip.ip.ip |             21 | SharedPool-Worker-2\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | beddecd0-159e-11e6-af1d-5b2aec1d0944 |                                                                              Preparing statement | 172.ip.ip.ip |             31 | SharedPool-Worker-2\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bede13e0-159e-11e6-af1d-5b2aec1d0944 |                                                                        Computing ranges to query | 172.ip.ip.ip |             73 | SharedPool-Worker-2\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bede3af0-159e-11e6-af1d-5b2aec1d0944 | Submitting range requests on 1 ranges with a concurrency of 1 (22.37143 rows per range expected) | 172.ip.ip.ip |             88 | SharedPool-Worker-2\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bede6200-159e-11e6-af1d-5b2aec1d0944 |                                          Submitted 1 concurrent range requests covering 1 ranges | 172.ip.ip.ip |             96 | SharedPool-Worker-2\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | beded730-159e-11e6-af1d-5b2aec1d0944 |                                      Executing seq scan across 3 sstables for [min(-1), min(-1)] | 172.ip.ip.ip |            382 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bedefe40-159e-11e6-af1d-5b2aec1d0944 |                                                                Read 7 live and 0 tombstone cells | 172.ip.ip.ip |           2057 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bedf2550-159e-11e6-af1d-5b2aec1d0944 |                                                                Read 2 live and 0 tombstone cells | 172.ip.ip.ip |           2495 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bedf7370-159e-11e6-af1d-5b2aec1d0944 |                                                                Read 1 live and 0 tombstone cells | 172.ip.ip.ip |           3066 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bee00fb0-159e-11e6-af1d-5b2aec1d0944 |                                                              Read 17 live and 32 tombstone cells | 172.ip.ip.ip |          16892 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bee05dd0-159e-11e6-af1d-5b2aec1d0944 |                                                                Read 7 live and 0 tombstone cells | 172.ip.ip.ip |          18757 | SharedPool-Worker-4\n    bedd77a0-159e-11e6-af1d-5b2aec1d0944 | bee084e0-159e-11e6-af1d-5b2aec1d0944 |                                                                     Scanned 5 rows and matched 5 | 172.ip.ip.ip |          19172 | SharedPool-Worker-4\n\nThe results from ``cassandra-tracing`` can be limited by thresholds on both duration and tombstones, and by and a result cap. The result cap gathers the same number of results but caps the display.  When limited results are displayed the results displayed are always the longest duration events.\n\nRegardless of limiting mechanisms, note that full table scans must be done on the ``sessions`` and ``events`` tables in the ``system_traces`` keyspace.\n\nConfigurations are set by command line flags, these can be accessed by running `cassandra-tracing --help`:\n\n  * node_ip:\n\t* Specify ip of the node being queried\n  * --tombstoneThreshold int:\n\t* Show only sessions who read tombstones equal to or greater than this threshold.  Default 0.\n  * --time int:\n\t* Show only sessions that took longer than this threshold in microseconds.  Default 10000 (10ms).\n  * --resultCap int:\n\t* Maximum number of results to print out. To print all results, use 0.  Default 100.\n  * --slim:\n  \t* Enable slim mode, where the query and time started are suppressed in the output.\n\nSupported Python Versions\n=========================\n\nPython 2.7 and Python 3.4+ are supported.\n\nLicenses\n========\n\nThe cassandra-toolbox pacakge is licensed under the MIT license.\n\nIssues\n======\n\nPlease report any bugs or requests that you have using the GitHub issue tracker!\n\nAuthors\n=======\n\n* Dr. Jeffrey Berger\n* Dr. Joshua Wickman\n* Carlos Monroy Nieblas", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Knewton/cassandra-toolbox", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "cassandra-toolbox", "package_url": "https://pypi.org/project/cassandra-toolbox/", "platform": "", "project_url": "https://pypi.org/project/cassandra-toolbox/", "project_urls": {"Homepage": "https://github.com/Knewton/cassandra-toolbox"}, "release_url": "https://pypi.org/project/cassandra-toolbox/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "A suite of tools for Cassandra - A highly scalable distributed NoSQL datastore.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cassandra-toolbox\">\n<h2>cassandra-toolbox</h2>\n<p>A suite of tools for Cassandra - A highly scalable distributed NoSQL datastore.</p>\n<p>These are a set of monitoring and analysis tools that were initially developed at Knewton in order to introspect behavior and performance of the Cassandra clusters at knewton.  These scripts are designed to run locally or remotely against a cassandra cluster.  Just install this into your virtual environment and go for it.</p>\n<p><strong>Be aware that these scripts may cause some load on the target server which can impact your performance.  Nothing comes without a price.</strong></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>It is preferable to create a virtual environment to install these tools into</p>\n<pre>pip install virtualenv\nvirtualenv /path/to/your/virtualenv\n<span class=\"nb\">source</span> /path/to/your/virtualenv/bin/activate\n</pre>\n<p>To install the project you can clone this repo and install it directly into your virtual environment, this would get you the latest code</p>\n<pre>git clone git@github.com:Knewton/cassandra-toolbox.git\n<span class=\"nb\">cd</span> cassandra-toolbox\n./setup.py install\n</pre>\n<p>You can also directly install our package from pip</p>\n<pre>pip install cassandra-toolbox\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This package consists of several scripts that get installed as executables into the environment that the package is in.  Each script does something different and is described independently below.</p>\n<div id=\"cassandra-stat\">\n<h3>cassandra-stat</h3>\n<p>The cassandra-stat tool shows a real-time feed of how many operations have gone through Cassandra as reported by the JMX interface that is exposed.  Many people pump this information through Graphite or another data collector which is a good idea so you can visualize and store the data.  However these systems usually poll every minute and can lag behind events.  This allows you to see to the second what is occuring on the system in a manner similar to iostat.</p>\n<p>This script interfaces with the jolokia jmx-http bridge which must be attached to your Cassandra instances that you plan to run cassandra-stat against.  This is very easy however and not intrustive to Cassandra.</p>\n<dl>\n<dt>Installing Jolokia is painless.  You first <cite>Link download the JVM agent from their website &lt;https://jolokia.org/download.html&gt;</cite> .  Then you modify your <tt><span class=\"pre\">cassandra-env.sh</span></tt> file to include the following line:</dt>\n<dd>JVM_OPTS=\u201d$JVM_OPTS -javaagent:&lt;Path To Jolokia JVM Agent Jar&gt;.jar\u201d</dd>\n</dl>\n<p>A restart of the Cassandra instance is required after this modification.</p>\n<p>To use cassandra-stat you only need to execute the following local to the Cassandra instance you wish to monitor.  You must have activated the virtual environment that cassandra-toolbox is installed into if you have installed the pacakge into a virtual environment.  The output will look similar to the following:</p>\n<pre><span class=\"nv\">$cassandra</span>-stat\nReads     Ranges    Writes    Reads <span class=\"o\">(</span><span class=\"m\">99</span>%<span class=\"o\">)</span> ms   Ranges <span class=\"o\">(</span><span class=\"m\">99</span>%<span class=\"o\">)</span> ms   Writes <span class=\"o\">(</span><span class=\"m\">99</span>%<span class=\"o\">)</span> ms   Compactions     Flushes    Row Cache Misses     Time    ns\n  <span class=\"m\">1</span>         <span class=\"m\">0</span>        <span class=\"m\">111</span>          <span class=\"m\">91</span>.462            <span class=\"m\">68</span>.81            <span class=\"m\">17</span>.4               <span class=\"m\">0</span>             <span class=\"m\">0</span>              <span class=\"m\">0</span>           <span class=\"m\">20</span>:15:36  total\n  <span class=\"m\">2</span>         <span class=\"m\">4</span>        <span class=\"m\">113</span>           <span class=\"m\">91</span>.4             <span class=\"m\">68</span>.30            <span class=\"m\">17</span>.98              <span class=\"m\">0</span>             <span class=\"m\">0</span>              <span class=\"m\">0</span>           <span class=\"m\">20</span>:15:37  total\n  <span class=\"m\">0</span>         <span class=\"m\">0</span>        <span class=\"m\">117</span>           <span class=\"m\">91</span>.4             <span class=\"m\">68</span>.30            <span class=\"m\">17</span>.17              <span class=\"m\">0</span>             <span class=\"m\">0</span>              <span class=\"m\">0</span>           <span class=\"m\">20</span>:15:38  total\n  <span class=\"m\">0</span>         <span class=\"m\">0</span>         <span class=\"m\">72</span>           <span class=\"m\">91</span>.4             <span class=\"m\">68</span>.30            <span class=\"m\">17</span>.34              <span class=\"m\">0</span>             <span class=\"m\">0</span>              <span class=\"m\">0</span>           <span class=\"m\">20</span>:15:39  total\n  <span class=\"m\">0</span>         <span class=\"m\">2</span>         <span class=\"m\">69</span>           <span class=\"m\">91</span>.4             <span class=\"m\">68</span>.30            <span class=\"m\">17</span>.3               <span class=\"m\">0</span>             <span class=\"m\">0</span>              <span class=\"m\">0</span>           <span class=\"m\">20</span>:15:40  total\n</pre>\n<p>The fields that are output are as follows:</p>\n<blockquote>\n<ul>\n<li>Reads:               Number of reads since the last line was reported</li>\n<li>Ranges:              Number of range queries since the last line was reported</li>\n<li>Writes:              Number of writes (updates/insertions/deletions) since the last line was reported</li>\n<li>Reads (99%):         99th percentile latency in reads given in milliseconds</li>\n<li>Ranges (99%):        99th percentile latency in range queries given in milliseconds</li>\n<li>Writes (99%):        99th percentile latency in writes (updates/insertions/deletions) given in milliseconds</li>\n<li>Compactions:         Number of pending compactions</li>\n<li>Flushes :            Number of memtable flushes that are in progress</li>\n<li>Row Cache Misses:    Number of row cache misses that have occured since the last line was reported</li>\n<li>time:                Time in HH:MM:SS that the line was recorded at</li>\n<li>ns:                  Namespace that the statistic is output for.  This can be \u201ctotal\u201d which is a sum for all keyspaces, <tt>&lt;keyspace&gt;</tt> which is a sum of all column families inside that keyspace, or <tt><span class=\"pre\">&lt;keyspace&gt;.&lt;columnfamily&gt;</span></tt> which is the most granular output</li>\n</ul>\n</blockquote>\n<p>If a namespace has no traffic, that is if there are 0 reads, range queries, or writes reported for that namespace then the namespace will not be output to the screen with the exception of \u201ctotal\u201d which will always be output.  Note that some of the statistics are differences with the previous line so the absolute numbers can vary depending on the rate that is chosen (this is configurable, see below).  Additionally the 99 percentile outputs are for a moving average that is generated internally by the Cassandra metric libraries so they are not representative of the 99th percentile at that instant.  Any aggregate level metrics (total or keyspace level metrics) will show the highest 99th percentile latency.  Aggregates for other metrics are summations of the constituent column families.  By default system keyspaces are not included in these aggregations, but this is configurable.</p>\n<p>Configurations are set by command line flags, these can be accessed by running <tt><span class=\"pre\">cassandra-stat</span> <span class=\"pre\">--help</span></tt>:</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt><tt><span class=\"pre\">--header_rows</span> int</tt>:</dt>\n<dd><ul>\n<li>An integer of how many rows should pass before a new header line is output.  If this is 0 then only the first header will be printed, and if this is -1 then the top header row will not be printed.  Default 10.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--rate</span> int</tt>:</dt>\n<dd><ul>\n<li>How many seconds should pass between server polls.  Default 1.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--show_system</span></tt>:</dt>\n<dd><ul>\n<li>Include system keyspaces and their related column families in the output.  The aggregation in \u201ctotal\u201d will include system keyspace entires as well, which is not the default behavior.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--host</span> string</tt>:</dt>\n<dd><ul>\n<li>The <a href=\"http://HOST:PORT\" rel=\"nofollow\">http://HOST:PORT</a> that this script should connect to.  Default <a href=\"http://localhost:8778\" rel=\"nofollow\">http://localhost:8778</a>.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--show_keyspaces</span></tt>:</dt>\n<dd><ul>\n<li>Set this flag in order to show keyspace level output.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--show_cfs</span></tt>:</dt>\n<dd><ul>\n<li>Set this flag to show <cite>&lt;keyspace&gt;.&lt;columnfamily&gt;</cite> level output.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--no_total</span></tt>:</dt>\n<dd><ul>\n<li>Set this flag to suppress output of the aggregated total.  This may have the effect of having no output when there is no traffic in the database.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--show_zeros</span></tt>:</dt>\n<dd><ul>\n<li>Show all namespaces that are set to be output regardless if there is no activity.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt><span class=\"pre\">--namespaces</span> string</tt>:</dt>\n<dd><ul>\n<li>Comma separated list of namespaces to process and show.  To show an entire keyspace then use the keyspace name as an entry, and to show only a column family then add <tt><span class=\"pre\">&lt;keyspace&gt;.&lt;columnfamily&gt;</span></tt> to the list.  For example <tt><span class=\"pre\">--namespaces</span> keyspace1,keyspace2.test1</tt> would show all column families from <tt>keyspace1</tt> and only the <tt>test1</tt> column family from <tt>keyspace2</tt>.  Note that there can be strange behaviors with this flag as other flags.  Adding a system keyspace to this flag will have no effect unless the <tt><span class=\"pre\">--show_system</span></tt> flag is also included.  Adding namespaces to this flag will change what namespaces are included in the total for aggregations but these namespaces will not be printed out if the <tt><span class=\"pre\">--show_keyspaces</span></tt> or <tt><span class=\"pre\">--show_cfs</span></tt> flags are not included.  For example <tt><span class=\"pre\">--namespaces</span> keyspace1,keyspace2.test1 <span class=\"pre\">--show_keyspaces</span></tt> would output an entry for <tt>total</tt>, <tt>keyspace1</tt>, and <tt>keyspace2</tt> where <tt>total</tt> will be the aggregate of all column families in <tt>keyspace1</tt> as well as the column family <tt>test1</tt> in <tt>keyspace2</tt>, <tt>keyspace1</tt> will be the aggregate of all column families within it, and <tt>keyspace2</tt> will be the aggregate of only the column family <tt>test1</tt>.  If you are using this flag and <tt><span class=\"pre\">--show_system</span></tt> then you must include which system keyspaces you wish to include, they will not be included by default if using the <tt><span class=\"pre\">--namespaces</span></tt> flag.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"cassandra-tracing\">\n<h3>cassandra-tracing</h3>\n<p>This script facilitates analysis of Cassandra tracing data, which on its own is difficult to draw conclusions from.  Tracing is very useful to look at individual CQL queries in the cqlsh shell, however to get a better idea of your system\u2019s behavior it is often useful to sample a percentage of queries, trace them, and save these traces for later.  Cassandra makes this easy to do with nodetool.  You can use the following to set the probability that any cql query (that is coordinated by the cassandra node local to this command) is traced to 0.1%.</p>\n<pre><span class=\"nv\">$nodetool</span> settraceprobability <span class=\"m\">0</span>.001\n</pre>\n<p>Note that a value of 1 means every query will be traced.  A trace logs many lines for every query so be careful of setting this value very high.  It is possible that tracing less than 5% of all queries can result in a write workload which is equal in number to the load which it is tracing.</p>\n<p>To use cassandra-tracing you only need to execute the following local to the Cassandra instance you wish to investigate the tracing logs of.  You must have activated the virtual environment that cassandra-toolbox is installed into if you have installed the pacakge into a virtual environment.  The output will look similar to the following:</p>\n<pre>$ cassandra-tracing <span class=\"sb\">`</span>hostname -I<span class=\"sb\">`</span>\n<span class=\"m\">100</span>% Complete: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<span class=\"p\">|</span><span class=\"m\">100</span>\n\nTotal skipped due to null duration:     <span class=\"m\">0</span>\nTotal skipped due to error:     <span class=\"m\">0</span>\n\n<span class=\"m\">175</span> sessions satisfying criteria.\nShowing <span class=\"m\">100</span> longest running results.\nSession Id                             Duration <span class=\"o\">(</span>microsecs<span class=\"o\">)</span>    Max Tombstones     Total Tombstones    Flags            Time Started         Query\nbedd77a0-159e-11e6-af1d-5b2aec1d0944          <span class=\"m\">19696</span>                  <span class=\"m\">32</span>                  <span class=\"m\">32</span>                     <span class=\"m\">2016</span>-05-09T04:30:23.259000  SELECT * FROM system.schema_columnfamilies\nbe941af0-1801-11e6-9deb-25e4276011e4          <span class=\"m\">20569</span>                  <span class=\"m\">0</span>                   <span class=\"m\">0</span>                      <span class=\"m\">2016</span>-05-12T05:24:05.280000  Executing single-partition query on ColumnFamilyA\nb4c924a0-1565-11e6-af1d-5b2aec1d0944          <span class=\"m\">20905</span>                  <span class=\"m\">32</span>                  <span class=\"m\">32</span>                     <span class=\"m\">2016</span>-05-08T21:42:05.041000  SELECT * FROM system.schema_columnfamilies\nfdf6fda0-174a-11e6-ace9-39442dcd207a          <span class=\"m\">21056</span>                  <span class=\"m\">0</span>                   <span class=\"m\">0</span>                      <span class=\"m\">2016</span>-05-11T07:35:53.724000  Executing single-partition query on ColumnFamilyB\nc5f24e80-1751-11e6-af1d-5b2aec1d0944          <span class=\"m\">21397</span>                  <span class=\"m\">0</span>                   <span class=\"m\">0</span>                      <span class=\"m\">2016</span>-05-11T08:24:26.216000  Executing single-partition query on ColumnFamilyB\nf7670600-183b-11e6-af1d-5b2aec1d0944          <span class=\"m\">21992</span>                  <span class=\"m\">0</span>                   <span class=\"m\">0</span>                      <span class=\"m\">2016</span>-05-12T12:20:51.425000  Executing single-partition query on ColumnFamilyC\n</pre>\n<p>The output displays the following information, sorted by duration:</p>\n<blockquote>\n<ul>\n<li>Session ID</li>\n<li>Duration in microseconds</li>\n<li>Max number of tombstones encountered on a single session</li>\n<li>Total tombstones encountered</li>\n<li><dl>\n<dt>Flags signifying special behavior, according to the legend:</dt>\n<dd><ul>\n<li>R = read repair</li>\n<li>T = timeout</li>\n<li>I = index used</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>Starting timestamp of the session (hidden in slim mode)</li>\n<li>CQL query or inferred query fragment (hidden in slim mode)</li>\n</ul>\n</blockquote>\n<p>The Session Id can be used to introspect specific queries (which are logged as a session) in cqlsh yourself, by querying for the session id in the events table of the system_tracing keyspace.</p>\n<pre>$ cqlsh <span class=\"sb\">`</span>hostname -I<span class=\"sb\">`</span>\nConnected to cassandra at <span class=\"m\">172</span>.ip.ip.ip:9042.\n<span class=\"o\">[</span>cqlsh <span class=\"m\">5</span>.0.1 <span class=\"p\">|</span> Cassandra <span class=\"m\">2</span>.1.11 <span class=\"p\">|</span> CQL spec <span class=\"m\">3</span>.2.1 <span class=\"p\">|</span> Native protocol v3<span class=\"o\">]</span>\nUse HELP <span class=\"k\">for</span> help.\ncqlsh&gt; use system_traces<span class=\"p\">;</span>\ncqlsh:system_traces&gt; <span class=\"k\">select</span> * from events WHERE <span class=\"nv\">session_id</span><span class=\"o\">=</span>bedd77a0-159e-11e6-af1d-5b2aec1d0944<span class=\"p\">;</span>\nsession_id                           <span class=\"p\">|</span> event_id                             <span class=\"p\">|</span> activity                                                                                         <span class=\"p\">|</span> <span class=\"nb\">source</span>       <span class=\"p\">|</span> source_elapsed <span class=\"p\">|</span> thread\n--------------------------------------+--------------------------------------+--------------------------------------------------------------------------------------------------+--------------+----------------+---------------------\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bedd9eb0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                               Parsing SELECT * FROM system.schema_columnfamilies <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>             <span class=\"m\">21</span> <span class=\"p\">|</span> SharedPool-Worker-2\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> beddecd0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                              Preparing statement <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>             <span class=\"m\">31</span> <span class=\"p\">|</span> SharedPool-Worker-2\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bede13e0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                        Computing ranges to query <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>             <span class=\"m\">73</span> <span class=\"p\">|</span> SharedPool-Worker-2\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bede3af0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> Submitting range requests on <span class=\"m\">1</span> ranges with a concurrency of <span class=\"m\">1</span> <span class=\"o\">(</span><span class=\"m\">22</span>.37143 rows per range expected<span class=\"o\">)</span> <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>             <span class=\"m\">88</span> <span class=\"p\">|</span> SharedPool-Worker-2\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bede6200-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                          Submitted <span class=\"m\">1</span> concurrent range requests covering <span class=\"m\">1</span> ranges <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>             <span class=\"m\">96</span> <span class=\"p\">|</span> SharedPool-Worker-2\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> beded730-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                      Executing seq scan across <span class=\"m\">3</span> sstables <span class=\"k\">for</span> <span class=\"o\">[</span>min<span class=\"o\">(</span>-1<span class=\"o\">)</span>, min<span class=\"o\">(</span>-1<span class=\"o\">)]</span> <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>            <span class=\"m\">382</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bedefe40-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                Read <span class=\"m\">7</span> live and <span class=\"m\">0</span> tombstone cells <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>           <span class=\"m\">2057</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bedf2550-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                Read <span class=\"m\">2</span> live and <span class=\"m\">0</span> tombstone cells <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>           <span class=\"m\">2495</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bedf7370-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                Read <span class=\"m\">1</span> live and <span class=\"m\">0</span> tombstone cells <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>           <span class=\"m\">3066</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bee00fb0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                              Read <span class=\"m\">17</span> live and <span class=\"m\">32</span> tombstone cells <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>          <span class=\"m\">16892</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bee05dd0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                Read <span class=\"m\">7</span> live and <span class=\"m\">0</span> tombstone cells <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>          <span class=\"m\">18757</span> <span class=\"p\">|</span> SharedPool-Worker-4\nbedd77a0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span> bee084e0-159e-11e6-af1d-5b2aec1d0944 <span class=\"p\">|</span>                                                                     Scanned <span class=\"m\">5</span> rows and matched <span class=\"m\">5</span> <span class=\"p\">|</span> <span class=\"m\">172</span>.ip.ip.ip <span class=\"p\">|</span>          <span class=\"m\">19172</span> <span class=\"p\">|</span> SharedPool-Worker-4\n</pre>\n<p>The results from <tt><span class=\"pre\">cassandra-tracing</span></tt> can be limited by thresholds on both duration and tombstones, and by and a result cap. The result cap gathers the same number of results but caps the display.  When limited results are displayed the results displayed are always the longest duration events.</p>\n<p>Regardless of limiting mechanisms, note that full table scans must be done on the <tt>sessions</tt> and <tt>events</tt> tables in the <tt>system_traces</tt> keyspace.</p>\n<p>Configurations are set by command line flags, these can be accessed by running <cite>cassandra-tracing \u2013help</cite>:</p>\n<blockquote>\n<ul>\n<li><dl>\n<dt>node_ip:</dt>\n<dd><ul>\n<li>Specify ip of the node being queried</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>\u2013tombstoneThreshold int:</dt>\n<dd><ul>\n<li>Show only sessions who read tombstones equal to or greater than this threshold.  Default 0.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>\u2013time int:</dt>\n<dd><ul>\n<li>Show only sessions that took longer than this threshold in microseconds.  Default 10000 (10ms).</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>\u2013resultCap int:</dt>\n<dd><ul>\n<li>Maximum number of results to print out. To print all results, use 0.  Default 100.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>\u2013slim:</dt>\n<dd><ul>\n<li>Enable slim mode, where the query and time started are suppressed in the output.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"supported-python-versions\">\n<h2>Supported Python Versions</h2>\n<p>Python 2.7 and Python 3.4+ are supported.</p>\n</div>\n<div id=\"licenses\">\n<h2>Licenses</h2>\n<p>The cassandra-toolbox pacakge is licensed under the MIT license.</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>Please report any bugs or requests that you have using the GitHub issue tracker!</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li>Dr. Jeffrey Berger</li>\n<li>Dr. Joshua Wickman</li>\n<li>Carlos Monroy Nieblas</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2317245, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "c5e76c4eb27e6c2a281c84db34c8d1a7", "sha256": "34bfb7bebd5e7711fd13bbf79e28db88630418b513223b90acf01c50c4857ef6"}, "downloads": -1, "filename": "cassandra-toolbox-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c5e76c4eb27e6c2a281c84db34c8d1a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15925, "upload_time": "2016-08-31T21:53:24", "upload_time_iso_8601": "2016-08-31T21:53:24.176349Z", "url": "https://files.pythonhosted.org/packages/ec/61/91d3dd526bd1e962e79bf9daa9ff733096dfa94a8fba378422408b9932d3/cassandra-toolbox-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "45a08ba1a0e5574dcd8ebc470af99930", "sha256": "3ddcfe34911c77ae07a154f6bc70b0ce20aa6b6ed7c8653aaadd04465d92ac0c"}, "downloads": -1, "filename": "cassandra-toolbox-0.1.3.tar.gz", "has_sig": false, "md5_digest": "45a08ba1a0e5574dcd8ebc470af99930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15999, "upload_time": "2016-08-31T22:29:13", "upload_time_iso_8601": "2016-08-31T22:29:13.560227Z", "url": "https://files.pythonhosted.org/packages/6c/51/b4251c7cbf0be11dcacf0a1f2b818d2bcead5b7df6baa0cbb2c1b147a64f/cassandra-toolbox-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b14053eb9af3268f0717692837d8ecb3", "sha256": "a8b74bc74d85e967494846e7d66800c03e4687c3fca9310cfea00983984a059b"}, "downloads": -1, "filename": "cassandra-toolbox-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b14053eb9af3268f0717692837d8ecb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15992, "upload_time": "2016-08-31T22:40:53", "upload_time_iso_8601": "2016-08-31T22:40:53.690432Z", "url": "https://files.pythonhosted.org/packages/5b/b2/3679efa5bb22ff83cafa3055d5afbd857a1721cb1c27f43578a490c04890/cassandra-toolbox-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b14053eb9af3268f0717692837d8ecb3", "sha256": "a8b74bc74d85e967494846e7d66800c03e4687c3fca9310cfea00983984a059b"}, "downloads": -1, "filename": "cassandra-toolbox-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b14053eb9af3268f0717692837d8ecb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15992, "upload_time": "2016-08-31T22:40:53", "upload_time_iso_8601": "2016-08-31T22:40:53.690432Z", "url": "https://files.pythonhosted.org/packages/5b/b2/3679efa5bb22ff83cafa3055d5afbd857a1721cb1c27f43578a490c04890/cassandra-toolbox-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:19 2020"}