{"info": {"author": "Daniel Rodriguez", "author_email": "danjrod@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "metaframe\n=========\n\n.. image:: https://img.shields.io/pypi/v/metaframe.svg\n   :alt: PyPi Version\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaframe/\n\n.. image:: https://img.shields.io/pypi/dm/metaframe.svg\n   :alt: PyPi Monthly Donwloads\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaframe/\n\n.. image:: https://img.shields.io/pypi/l/metaframe.svg\n   :alt: License\n   :scale: 100%\n   :target: https://github.com/mementum/metaframe/blob/master/LICENSE\n\n.. image:: https://travis-ci.org/mementum/metaframe.png?branch=master\n   :alt: Travis-ci Build Status\n   :scale: 100%\n   :target: https://travis-ci.org/mementum/metaframe\n\n.. image:: https://readthedocs.org/projects/metaframe/badge/?version=latest\n   :alt: Documentation Status\n   :scale: 100%\n   :target: https://readthedocs.org/projects/metaframe/\n\n.. image:: https://img.shields.io/pypi/pyversions/metaframe.svg\n   :alt: Pytghon versions\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaframe/\n\nMetaClass infrastructure to intercept instance creation/initialization enabling\nmodification of args/kwargs and instance.\n\nDocumentation\n=============\n\nRead the full documentation at readthedocs.org:\n\n  - `metaframe documentation <http://metaframe.readthedocs.org/en/latest/introduction.html>`_\n\nPython 2/3 Support\n==================\n\n  - Python 2.7\n  - Python 3.2/3.3/3.4/3.5\n\n  - It also works with pypy and pypy3\n\nInstallation\n============\n\n``metaframe`` is self-contained with no external dependencies\n\nFrom pypi::\n\n  pip install metaframe\n\nFrom source:\n\n  - Place the *metaframe* directory found in the sources inside your project\n\nFeatures:\n=========\n\n  - ``MetaFrame`` metaclass to apply to any object\n    - With embedded staticmethod with_metaclass to enable inheritance\n\n  - ``MetaFrameBase`` class from which classes can inherit\n  - 3 hooks (classmethods)\n\n    - ``_new_pre``: called before object creation\n    - ``_new_do``: called for object creation\n    - ``_init_pre``: called after object creation / before object initialization\n    - ``_init_do``: called fo object initialization\n    - ``_init_post``: called after object initialization\n\nUsage:\n======\n\nA quick example which filters None and arguments which do not convert to float\nfrom the kwargs before the object is created::\n\n    from metaframe import MetaFrame\n\n\n    class A(MetaFrame.as_metaclass(object)):\n\n        @classmethod\n        def _new_do(cls, *args, **kwargs):\n\n            nkwargs = dict()\n            for key, val in kwargs.items():\n\n                # Remove any argument with a value of None\n                if val is None:\n                    continue\n\n                try:\n                    val = float(val)\n                except:\n                    continue\n\n                nkwargs[key] = val\n\n            # The only nuisance being the cumbersome call to _new_do\n            # super doesn't work\n            obj, args, kwargs = cls.__class__._new_do(cls, *args, **nkwargs)\n            return obj, args, kwargs\n\n        def __init__(self, **kwargs):\n            for key, val in kwargs.items():\n                print('key, val, type', key, val, type(val))\n\n\n    a = A(p1=72, p2=None, p3='hello', p4=None, p5='72.5')\n\n\n    # Now with a subclassed MetaB from MetaFrame\n    # Here super can be applied to find the higher in the hierarchy _new_do\n\n    class MetaB(MetaFrame):\n\n        def _new_do(cls, *args, **kwargs):\n\n            nkwargs = dict()\n            for key, val in kwargs.items():\n\n                # Remove any argument with a value of None\n                if val is None:\n                    continue\n\n                try:\n                    val = float(val)\n                except:\n                    continue\n\n                nkwargs[key] = val\n\n            # super can be called directly\n            obj, args, kwargs = super(MetaB, cls)._new_do(*args, **nkwargs)\n            return obj, args, kwargs\n\n\n    class B(MetaB.as_metaclass()):\n        def __init__(self, **kwargs):\n            for key, val in kwargs.items():\n                print('key, val, type', key, val, type(val))\n\n\n    b = B(p1=27, p2=None, p3='olleh', p4=None, p5='5.27')", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mementum/metaframe/tarball/1.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mementum/metaframe", "keywords": "metaclass,development", "license": "GPLv3+", "maintainer": null, "maintainer_email": null, "name": "metaframe", "package_url": "https://pypi.org/project/metaframe/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/metaframe/", "project_urls": {"Download": "https://github.com/mementum/metaframe/tarball/1.0.1", "Homepage": "https://github.com/mementum/metaframe"}, "release_url": "https://pypi.org/project/metaframe/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "MetaClass supporting fine grained control of object creationand initialization", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"metaframe\">\n<h2>metaframe</h2>\n<a href=\"https://pypi.python.org/pypi/metaframe/\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bcdd797ac510295c2157b3689f6ea8ecd9c3d08d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6574616672616d652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/metaframe/\" rel=\"nofollow\"><img alt=\"PyPi Monthly Donwloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2304d7dd2af9e5176cd8130ca522548d12219407/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d6574616672616d652e737667\"></a>\n<a href=\"https://github.com/mementum/metaframe/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df857caf7b45e7d9287c0877bc06f63591087dc8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d6574616672616d652e737667\"></a>\n<a href=\"https://travis-ci.org/mementum/metaframe\" rel=\"nofollow\"><img alt=\"Travis-ci Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13bb120a57b9ee7f1a9a7390bc44c12b40ff6938/68747470733a2f2f7472617669732d63692e6f72672f6d656d656e74756d2f6d6574616672616d652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://readthedocs.org/projects/metaframe/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b32f01e172687a560ae9e8bfec725c7fb0ef1b1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d6574616672616d652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.python.org/pypi/metaframe/\" rel=\"nofollow\"><img alt=\"Pytghon versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c04e2562736a7dcca34e19952eab25c8dedeef63/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6574616672616d652e737667\"></a>\n<p>MetaClass infrastructure to intercept instance creation/initialization enabling\nmodification of args/kwargs and instance.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Read the full documentation at readthedocs.org:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://metaframe.readthedocs.org/en/latest/introduction.html\" rel=\"nofollow\">metaframe documentation</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"python-2-3-support\">\n<h2>Python 2/3 Support</h2>\n<blockquote>\n<ul>\n<li>Python 2.7</li>\n<li>Python 3.2/3.3/3.4/3.5</li>\n<li>It also works with pypy and pypy3</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>metaframe</tt> is self-contained with no external dependencies</p>\n<p>From pypi:</p>\n<pre>pip install metaframe\n</pre>\n<p>From source:</p>\n<blockquote>\n<ul>\n<li>Place the <em>metaframe</em> directory found in the sources inside your project</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"features\">\n<h2>Features:</h2>\n<blockquote>\n<ul>\n<li><tt>MetaFrame</tt> metaclass to apply to any object\n- With embedded staticmethod with_metaclass to enable inheritance</li>\n<li><tt>MetaFrameBase</tt> class from which classes can inherit</li>\n<li>3 hooks (classmethods)<ul>\n<li><tt>_new_pre</tt>: called before object creation</li>\n<li><tt>_new_do</tt>: called for object creation</li>\n<li><tt>_init_pre</tt>: called after object creation / before object initialization</li>\n<li><tt>_init_do</tt>: called fo object initialization</li>\n<li><tt>_init_post</tt>: called after object initialization</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage:</h2>\n<p>A quick example which filters None and arguments which do not convert to float\nfrom the kwargs before the object is created:</p>\n<pre>from metaframe import MetaFrame\n\n\nclass A(MetaFrame.as_metaclass(object)):\n\n    @classmethod\n    def _new_do(cls, *args, **kwargs):\n\n        nkwargs = dict()\n        for key, val in kwargs.items():\n\n            # Remove any argument with a value of None\n            if val is None:\n                continue\n\n            try:\n                val = float(val)\n            except:\n                continue\n\n            nkwargs[key] = val\n\n        # The only nuisance being the cumbersome call to _new_do\n        # super doesn't work\n        obj, args, kwargs = cls.__class__._new_do(cls, *args, **nkwargs)\n        return obj, args, kwargs\n\n    def __init__(self, **kwargs):\n        for key, val in kwargs.items():\n            print('key, val, type', key, val, type(val))\n\n\na = A(p1=72, p2=None, p3='hello', p4=None, p5='72.5')\n\n\n# Now with a subclassed MetaB from MetaFrame\n# Here super can be applied to find the higher in the hierarchy _new_do\n\nclass MetaB(MetaFrame):\n\n    def _new_do(cls, *args, **kwargs):\n\n        nkwargs = dict()\n        for key, val in kwargs.items():\n\n            # Remove any argument with a value of None\n            if val is None:\n                continue\n\n            try:\n                val = float(val)\n            except:\n                continue\n\n            nkwargs[key] = val\n\n        # super can be called directly\n        obj, args, kwargs = super(MetaB, cls)._new_do(*args, **nkwargs)\n        return obj, args, kwargs\n\n\nclass B(MetaB.as_metaclass()):\n    def __init__(self, **kwargs):\n        for key, val in kwargs.items():\n            print('key, val, type', key, val, type(val))\n\n\nb = B(p1=27, p2=None, p3='olleh', p4=None, p5='5.27')\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1795428, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d3136ef583576e05d9a8ec783e418536", "sha256": "3e2846d0cfa1a872680562df1e046ab54c96b40bf274e8fcc9039ee518fda939"}, "downloads": -1, "filename": "metaframe-1.0.0.zip", "has_sig": false, "md5_digest": "d3136ef583576e05d9a8ec783e418536", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8849, "upload_time": "2015-10-23T22:30:45", "upload_time_iso_8601": "2015-10-23T22:30:45.791899Z", "url": "https://files.pythonhosted.org/packages/35/d1/0d778b7f5b8ae6791adb5defe0d2d379f8b59c8da5769278897ae2e235ac/metaframe-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b8148957beeee8537326ce340e692073", "sha256": "336c564ad36e081eb1fef896683d13ae4af2c428cf0db08432e10b000840192b"}, "downloads": -1, "filename": "metaframe-1.0.1.zip", "has_sig": false, "md5_digest": "b8148957beeee8537326ce340e692073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2015-10-31T22:21:18", "upload_time_iso_8601": "2015-10-31T22:21:18.318126Z", "url": "https://files.pythonhosted.org/packages/11/2c/c2d55ddc1dc85d60a263d8f66552dbe117c4e332f5fa594bdd0fd4918bbc/metaframe-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8148957beeee8537326ce340e692073", "sha256": "336c564ad36e081eb1fef896683d13ae4af2c428cf0db08432e10b000840192b"}, "downloads": -1, "filename": "metaframe-1.0.1.zip", "has_sig": false, "md5_digest": "b8148957beeee8537326ce340e692073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2015-10-31T22:21:18", "upload_time_iso_8601": "2015-10-31T22:21:18.318126Z", "url": "https://files.pythonhosted.org/packages/11/2c/c2d55ddc1dc85d60a263d8f66552dbe117c4e332f5fa594bdd0fd4918bbc/metaframe-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:55:56 2020"}