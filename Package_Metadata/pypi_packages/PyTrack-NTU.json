{"info": {"author": "Upamanyu Ghose, Arvind Srinivasan", "author_email": "titoghose@gmail.com, 96arvind@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Documentation Status](https://readthedocs.org/projects/pytrack-ntu/badge/?version=latest)](https://pytrack-ntu.readthedocs.io/en/latest/?badge=latest)\n[![Build Status](https://travis-ci.org/titoghose/PyTrack.svg?branch=master)](https://travis-ci.org/titoghose/PyTrack)\n[![codecov](https://codecov.io/gh/titoghose/PyTrack/branch/master/graph/badge.svg)](https://codecov.io/gh/titoghose/PyTrack)\n[![Documentation Status](https://readthedocs.org/projects/pytrack-ntu/badge/?style=flat-square)](https://pytrack-ntu.rtfd.io)\n\n# PyTrack\n\nThis is a toolkit to analyse and visualize eye tracking data. It provides the following functionality:\n\n## Feature Extraction\nThis involves extraction of parameters or meta-data related to blinks, fixations, saccades, microsaccades and pupil diameter. The features extracted are as follows:\n\n| Blink        |  Fixations   | Saccades  | Microsaccades | Pupil            | Revisits to AOI/ROI  |\n|------------  | -----------  | --------- | ------------- | ---------------- |--------------------- |\n| Count        | Count        | Count     | Count         | Size             | Count                |\n| Avg Duration | Avg Duration | Velocity  | Velocity      | Time to Peak     | First Pass Duration  |\n| Max Duration | Max Duration | Amplitude | Amplitude     | Peak Size        | Second Pass Duration |\n|              |              | Duration  | Duration      | Avg Size         |                      |\n|              |              |           |               | Slope            |                      |\n|              |              |           |               | Area Under Curve |                      |\n\n## Statistical Analysis\nAfter extraction of features, PyTrack can perform tests such as the student T-Test, Welch T-Test, ANOVA, RMANOVA, n-way ANOVA and Mixed ANOVA. The between and within group factors can be specified.\n\n## Visualization\nPyTrack can generate a variety of plots. The visualization is through an interactive GUI. The plots that can be generated are as follows:\n1. Fixation plot\n2. Individual subject gaze heat map\n3. Aggregate subject gaze heat map\n4. Dynamic pupil size and gaze plot\n5. Microsaccade position and velocity plot\n6. Microsaccade main sequence plot\n\n\n\n# Table of Contents\n- [PyTrack](#PyTrack)\n  - [Feature Extraction](#Feature-Extraction)\n  - [Statistical Analysis](#Statistical-Analysis)\n  - [Visualization](#Visualization)\n- [Table of Contents](#Table-of-Contents)\n- [Documentation](#Documentation)\n- [Installation](#Installation)\n- [Sample Data](#Sample-Data)\n- [Using PyTrack](#Using-PyTrack)\n  - [Setup](#Setup)\n  - [Running PyTrack](#Running-PyTrack)\n- [Advanced Functionality](#Advanced-Functionality)\n  - [Statistical Tests](#Statistical-Tests)\n  - [Accessing extracted features as a dictionary](#Accessing-extracted-features-as-a-dictionary)\n  - [Using PyTrack in Stand-alone mode](#Using-PyTrack-in-Stand-alone-mode)\n- [Authors](#Authors)\n- [License](#License)\n- [Acknowledgments](#Acknowledgments)\n\n# Documentation\nThe detailed documentation for the methods and classes of PyTrack can be found [here](https://pytrack-ntu.readthedocs.io/en/latest/)\n\n# Installation\n\nPyTrack is built for Python3 because support for the Python2 is going to be stopped at the end of 2019. In order to install PyTrack please use any of the following:\n\n```\npython3 -m pip install PyTrack-NTU\npip install PyTrack-NTU\npip3 install PyTrack-NTU\n```\n\nPlease make sure that pip is for Python3 and not Python2. Python3  can be found [here](https://www.python.org/downloads/) or Anaconda Python3 can be found [here](https://www.anaconda.com/distribution/).\n\n**NOTE:** Python3 can be installed alongside Python2\n\n# Sample Data\nIn order to test the toolkit some sample data in SMI, EyeLink and Tobii formats can be found [here](https://osf.io/f9mey/files/). The .txt file in the folder describes the data found. The SMI and Tobii files have been taken from [here](http://www2.hu-berlin.de/eyetracking-eeg/testdata.html).\n\n# Using PyTrack\n\n## Setup\n\nBefore running the framework, lets setup the folder so PyTrack can read and save all the generated figures in one central location and things are organised.\n\nCreate a directory structure like the one shown below. It is essential for the listed directories to be present for the proper functioning of PyTrack.\n\n**NOTE:** The sample data has a folder called NTU_Experiment which is already organised in the following manner. It can be used as reference.\n\n```\n[Experiment-Name]\n|\n\u2514\u2500\u2500 Data/\n\u2502   \u2502   subject_001.[asc/txt/tsv/...]\n\u2502   \u2502   subject_002.[asc/txt/tsv/...]\n|   |__ ......\n\u2502\n\u2514\u2500\u2500 Stimulus/\n\u2502   \u2502   stim_1.[jpg/jpeg]\n\u2502   \u2502   stim_2.[jpg/jpeg]\n|   |__ ......\n|\n\u2514\u2500\u2500 [Experiment-Name].json\n\n```\n*[Experiment-Name]* stands for the name of your experiment. The rest of the steps will use *NTU_Experiment* as the *[Experiment-Name]* folder.\n\nNow, follow these steps:\n\n1. Place the data of all your subjects in the *Data* folder under the main *NTU_Experiment* folder. Make sure the name of each of the data files is the name of the subjects/paticipants. Replace all spaces( ) with underscores (_).\n\n    eg. *waffle_buttersnaps.asc* or *subject_001.asc*\n\n2. For proper visualization of gaze data, its best if you include the stimuli presented during your experiment inside the *Stimuli* folder. Make sure the images have either **jpg, jpeg** or **png** extensions and the names match the names of the stimuli as present in your recorded data.\n\n    eg. *stim_1.jpg* or *random_picture.png*\n\n3. The last and final step to setup the experiment directory is to include the experiment description json file. This file should contain the essential details of your experiment. It contains specifications regarding your experiment such as the stimuli you wish to analyse or the participants/subjects you wish to include. Mentioned below is the json file structure. The content below can be copied and pasted in a file called *NTU_Experiment*.json\n\n    * \"*Experiment_name*\" should be the same name as the json file without the extension and \"*Path*\" should be the absolute path to your experiment directory without the final \"/\" at the end.\n    * The subjects should be added under the \"*Subjects*\" field. You may specify one or more groups of division for your subjects (recommended for between group statistical analysis). **There must be atleast 1 group**.\n    * The stimuli names should be added under the \"*Stimuli*\" field and again you may specify one or more types (recommended for between/within stimulus type statistical analysis). **There must be atleast 1 type**.\n    * The \"*Control_Questions*\" field is optional. In case you have some stimuli that should be used to standardise/normalise features extracted from all stimuli, specify the names here. **These stimuli must be present under the \"*Stimuli*\" field under one of the types**.\n    * **The field marked \"*Columns_of_interest*\" should not be altered**.\n    * Under \"*Analysis_Params*\", just change the values of \"Sampling_Freq\", \"Display_height\" and \"Display_width\" to match the values of your experiment.\n\n    **Note**: If you wish to analyse only a subset of your stimuli or subjects, specify only the ones of interest in the json file. The analysis and visualization will be done only for the ones mentioned in the json file.\n\n**NOTE:** A sample json file is present in the NTU_Experiment folder in the sample data. You can just edit it to make your work simpler.\n\n```json\n{\n   \"Experiment_name\":\"NTU_Experiment\",\n   \"Path\":\"abcd/efgh/NTU_Experiment\",\n   \"Subjects\":{\n      \"group1\":[\n         \"Subject_01\",\n         \"Subject_02\"\n      ],\n      \"group2\":[\n         \"Subject_03\",\n         \"Subject_04\"\n      ]\n   },\n   \"Stimuli\":{\n      \"Type_1\":[\n         \"Stim_1\",\n         \"Stim_2\"\n      ],\n      \"Type_2\":[\n         \"Stim_3\",\n         \"Stim_4\"\n      ],\n   },\n   \"Control_Questions\":[\n         \"Stim_1\"\n    ],\n   \"Columns_of_interest\":{\n      \"EyeTracker\":[\n         \"GazeLeftx\",\n         \"GazeLefty\",\n         \"GazeRightx\",\n         \"GazeRighty\",\n         \"PupilLeft\",\n         \"PupilRight\",\n         \"FixationSeq\",\n         \"GazeAOI\"\n      ],\n      \"Extra\":[\n         \"EventSource\"\n      ]\n   },\n   \"Analysis_Params\":{\n      \"EyeTracker\":{\n        \"Sampling_Freq\": 1000,\n        \"Display_width\": 1920,\n        \"Display_height\": 1280\n      }\n   }\n}\n\n```\n\n## Running PyTrack\n\n**NOTE:** All sample segments shown below are for the NTU_Experiment folder in the sample data.\n\n1. In order to use the features, the **first step is to convert the raw data into a readable format**. In order to do so, the following code segment can be used:\n\n    ```python\n    from PyTrack.formatBridge import generateCompatibleFormat\n\n    # For windows the path will look like \n    #    a. exp_path=\"complete\\\\path\\\\to\\\\NTU_Experiment\"\n    # or b. exp_path=r\"complete\\path\\to\\NTU_Experiment\"\n    generateCompatibleFormat(exp_path=\"complete/path/to/NTU_Experiment\",\n                            device=\"eyelink\",\n                            stim_list_mode='NA',\n                            start='start_trial',\n                            stop='stop_trial',\n                            eye='B')\n\n    ```\n\n    To get a detailed understanding of the parameters of *generateCompatibleFormats* and modify it to your needs see the documentation [here](https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#formatBridge.generateCompatibleFormat).\n\n2. The **second step is to create an object of the Experiment class**.\n\n    ```python\n    from PyTrack.Experiment import Experiment\n\n    # Creating an object of the Experiment class\n    exp = Experiment(json_file=\"complete/path/to/NTU_Experiment/NTU_Experiment.json\")\n    ```\n\n3. Now you can run the **feature extraction and statistical tests**\n\n    ```python\n    # Instantiate the meta_matrix_dict of an Experiment to find and extract all features from the raw data\n    exp.metaMatrixInitialisation()\n\n    # Calling the function for the statistical analysis of the data\n    exp.analyse(parameter_list={\"all\"},\n                between_factor_list=[\"Subject_type\"],\n                within_factor_list=[\"Stimuli_type\"],\n                statistical_test=\"anova\",\n                file_creation=True)\n\n    # Does not run any statistical test. Just saves all the data as csv files.\n    exp.analyse(parameter_list={\"all\"},\n                statistical_test=\"None\",\n                file_creation=True)\n\n    ```\n    To get a detailed understanding of the parameters of the *analyse* function: [here](https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#experiment.analyse)\n\n    To get a detailed understanding of the parameters of the *metaMatrixInitialisation* function: [here](https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#experiment.metaMatrixInitialisation)\n\n4. For **visualization**\n\n    ```python\n    # This function call will open up a GUI which you can use to navigate the entire visualization process\n    exp.visualizeData()\n    ```\n\n\n# Advanced Functionality\n\n## Statistical Tests\nThe Experiment class contains a function called analyse() which is used to perform statistical analysis (eg: ANOVA or T test), by default there is only 1 between group factor (\"Subject_type\") and 1 within group factor (\"Stimuli_type\") that is considered. If additional factors need to be considered they need to added to the json file.\n\n* For example if Gender is to be considered as an additional between group factor then in the json file, under \"Subjects\", for each subject, a corresponding dicitionary must be created where you mention the factor name and the corresponding value. Please also note that the square brackets ('[', ']') after group type need to be changed to curly brackets ('{', '}').\n\n* Similarly for Stimuli, for example, if you are showing Words and Pictures to elicit different responses from a user and you additonally have 2 different brightness levels (\"High\" and \"Low\") then mention Brightness as an additional within group factor.\n\n\n```json\n{\n   \"Subjects\":{\n      \"group1\":{\n         \"Subject_01\": {\"Gender\": \"M\"},\n         \"Subject_02\": {\"Gender\": \"F\"}\n      },\n      \"group2\":{\n         \"Subject_03\": {\"Gender\": \"F\"},\n         \"Subject_04\": {\"Gender\": \"M\"}\n      }\n   },\n   \"Stimuli\":{\n      \"Type_1\":{\n         \"Stim_1\": {\"Brightness\": \"High\"},\n         \"Stim_2\": {\"Brightness\": \"Low\"}\n      },\n      \"Type_2\":{\n         \"Stim_3\": {\"Brightness\": \"Low\"},\n         \"Stim_4\": {\"Brightness\": \"High\"}\n      },\n   },\n}\n\n```\nSample code segment to use the advanced statistical test:\n\n```python\nfrom PyTrack.Experiment import Experiment\n\nexp = Experiment(json_file=\"abcd/efgh/NTU_Experiment/NTU_Experiment.json\")\n\nexp.metaMatrixInitialisation()\n\nexp.analyse(parameter_list={\"all\"},\n            between_factor_list=[\"Subject_type\", \"Gender\"],\n            within_factor_list=[\"Stimuli_type\", \"Brightness\"],\n            statistical_test=\"anova\",\n            file_creation=True)\n\n```\n\n## Accessing extracted features as a dictionary\n\nIn case you wish to get the extracted features for a particilar Subject on a particular Stimulus:\n\n```python\nfrom PyTrack.Experiment import Experiment\n\nexp = Experiment(json_file=\"complete/path/to/NTU_Experiment/NTU_Experiment.json\")\n\nsubject_name = \"sub_333\" #specify your own subject's name (must be in json file)\nstimulus_name = \"Alpha1\" #specify your own stimulus name (must be in json file)\n\n# Access metadata dictionary for particular subject and stimulus\nexp.metaMatrixInitialisation()\nsingle_meta = exp.getMetaData(sub=subject_name,\n                              stim=stimulus_name)\n\n# Access metadata dictionary for particular subject and averaged for stimulus types\nexp.metaMatrixInitialisation(average_flag=True)\nagg_type_meta = exp.getMetaData(sub=subject_name,\n                                 stim=None)\n\n```\n\n## Using PyTrack in Stand-alone mode\nThe stand-alone design requires only interaction with tyhe Stimulus class. This is recommended if you wish to extract features or visualize data for only 1 subject on a particular stimulus.\n\n\n```python\nfrom PyTrack.Stimulus import Stimulus\nfrom PyTrack.formatBridge import generateCompatibleFormat\nimport pandas as pd\nimport numpy as np\n\n\n# function to convert data to generate csv file for data file recorded using EyeLink on both eyes and the stimulus name specified in the message section\ngenerateCompatibleFormat(exp_path=\"/path/to/smi_eyetracker_freeviewing.txt\",\n                        device=\"smi\",\n                        stim_list_mode='NA',\n                        start='12',\n                        stop='99')\n\ndf = pd.read_csv(\"/path/to/smi_eyetracker_freeviewing.csv\")\n\n# Dictionary containing details of recording. Please change the values according to your experiment. If no AOI is desired, set aoi value to [0, 0, Display_width, Display_height]\nsensor_dict = {\n                  \"EyeTracker\":\n                  {\n                     \"Sampling_Freq\": 1000,\n                     \"Display_width\": 1280,\n                     \"Display_height\": 1024,\n                     \"aoi\": [390, 497, 759, 732]\n                  }\n               }\n\n# Creating Stimulus object. See the documentation for advanced parameters.\nstim = Stimulus(path=\"path/to/experiment/folder\",\n               data=df,\n               sensor_names=sensor_dict)\n\n# Some functionality usage. See documentation of Stimulus class for advanced use.\nstim.findEyeMetaData()\nfeatures = stim.sensors[\"EyeTracker\"].metadata  # Getting dictioary of found metadata/features\n\n# Visualization of plots\nstim.gazePlot(save_fig=True)\nstim.gazeHeatMap(save_fig=True)\nstim.visualize()\n\n# Extracting features\nMS, ms_count, ms_duration = stim.findMicrosaccades(plot_ms=True)\n\n```\nSee the stimulus class for more details on the functions: [here](https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#Stimulus.Stimulus)\n\n\n# Authors\n\n* **Upamanyu Ghose** ([github](https://github.com/titoghose) | [email](titoghose@gmail.com))\n* **Arvind A S** ([github](https://github.com/arvindas) | [email](96arvind@gmail.com))\n\nSee also the list of [contributors](https://github.com/titoghose/PyTrack/contributors) who participated in this project.\n\n# License\n\nThis project is licensed under the GPL3 License - see the [LICENSE.txt](LICENSE.txt) file for details\n\n# Acknowledgments\n\n* We would like to thank [Dr. Dominique Makowski](https://dominiquemakowski.github.io/) for helping us develop this toolkit.\n\n* The formatsBridge module was adapted from the work done by [Edwin Dalmaijer](https://github.com/esdalmaijer) in [PyGazeAnalyser](https://github.com/esdalmaijer/PyGazeAnalyser/).\n\n* This work was done under the supervision of [Dr. Chng Eng Siong](http://www.ntu.edu.sg/home/aseschng/) - School of Computer Science and Engineering NTU and in collaboration with [Dr. Xu Hong](http://www.ntu.edu.sg/home/xuhong/) - School of Humanitites and Social Sciences NTU.\n\n* We extend our thanks to the **Department of Computer Science and Engineering Manipal Isntitute of Technology**[[link]](https://manipal.edu/mit/department-faculty/department-list/computer-science-and-engineering.html) and the **Department of Computer Science and Information Systems BITS Pilani, Hyderabad Campus** [[link]](https://www.bits-pilani.ac.in/hyderabad/computerscience/ComputerScience).\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pytrack-ntu.readthedocs.io", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyTrack-NTU", "package_url": "https://pypi.org/project/PyTrack-NTU/", "platform": "", "project_url": "https://pypi.org/project/PyTrack-NTU/", "project_urls": {"Homepage": "https://pytrack-ntu.readthedocs.io"}, "release_url": "https://pypi.org/project/PyTrack-NTU/1.0.3/", "requires_dist": ["numpy (>=1.16.2)", "scipy (==1.2.1)", "matplotlib (>=3.0.2)", "pandas", "Pillow", "sqlalchemy", "statsmodels", "pingouin"], "requires_python": "", "summary": "An end-to-end python analysis toolkit for eye tracking", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pytrack-ntu.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3d23e88354391a888ff2cf879099969da69f3a5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079747261636b2d6e74752f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/titoghose/PyTrack\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90f5bf123ac684a629762b0c2e43ddc7a128fac8/68747470733a2f2f7472617669732d63692e6f72672f7469746f67686f73652f5079547261636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/titoghose/PyTrack\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84aa3360a004a33fe05d732e3c030dd31f5005c0/68747470733a2f2f636f6465636f762e696f2f67682f7469746f67686f73652f5079547261636b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pytrack-ntu.rtfd.io\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a758bfbe0447fcd240dabf94db4bce96c0a73929/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079747261636b2d6e74752f62616467652f3f7374796c653d666c61742d737175617265\"></a></p>\n<h1>PyTrack</h1>\n<p>This is a toolkit to analyse and visualize eye tracking data. It provides the following functionality:</p>\n<h2>Feature Extraction</h2>\n<p>This involves extraction of parameters or meta-data related to blinks, fixations, saccades, microsaccades and pupil diameter. The features extracted are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Blink</th>\n<th>Fixations</th>\n<th>Saccades</th>\n<th>Microsaccades</th>\n<th>Pupil</th>\n<th>Revisits to AOI/ROI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Count</td>\n<td>Count</td>\n<td>Count</td>\n<td>Count</td>\n<td>Size</td>\n<td>Count</td>\n</tr>\n<tr>\n<td>Avg Duration</td>\n<td>Avg Duration</td>\n<td>Velocity</td>\n<td>Velocity</td>\n<td>Time to Peak</td>\n<td>First Pass Duration</td>\n</tr>\n<tr>\n<td>Max Duration</td>\n<td>Max Duration</td>\n<td>Amplitude</td>\n<td>Amplitude</td>\n<td>Peak Size</td>\n<td>Second Pass Duration</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Duration</td>\n<td>Duration</td>\n<td>Avg Size</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Slope</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>Area Under Curve</td>\n<td></td>\n</tr></tbody></table>\n<h2>Statistical Analysis</h2>\n<p>After extraction of features, PyTrack can perform tests such as the student T-Test, Welch T-Test, ANOVA, RMANOVA, n-way ANOVA and Mixed ANOVA. The between and within group factors can be specified.</p>\n<h2>Visualization</h2>\n<p>PyTrack can generate a variety of plots. The visualization is through an interactive GUI. The plots that can be generated are as follows:</p>\n<ol>\n<li>Fixation plot</li>\n<li>Individual subject gaze heat map</li>\n<li>Aggregate subject gaze heat map</li>\n<li>Dynamic pupil size and gaze plot</li>\n<li>Microsaccade position and velocity plot</li>\n<li>Microsaccade main sequence plot</li>\n</ol>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#PyTrack\" rel=\"nofollow\">PyTrack</a>\n<ul>\n<li><a href=\"#Feature-Extraction\" rel=\"nofollow\">Feature Extraction</a></li>\n<li><a href=\"#Statistical-Analysis\" rel=\"nofollow\">Statistical Analysis</a></li>\n<li><a href=\"#Visualization\" rel=\"nofollow\">Visualization</a></li>\n</ul>\n</li>\n<li><a href=\"#Table-of-Contents\" rel=\"nofollow\">Table of Contents</a></li>\n<li><a href=\"#Documentation\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Sample-Data\" rel=\"nofollow\">Sample Data</a></li>\n<li><a href=\"#Using-PyTrack\" rel=\"nofollow\">Using PyTrack</a>\n<ul>\n<li><a href=\"#Setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#Running-PyTrack\" rel=\"nofollow\">Running PyTrack</a></li>\n</ul>\n</li>\n<li><a href=\"#Advanced-Functionality\" rel=\"nofollow\">Advanced Functionality</a>\n<ul>\n<li><a href=\"#Statistical-Tests\" rel=\"nofollow\">Statistical Tests</a></li>\n<li><a href=\"#Accessing-extracted-features-as-a-dictionary\" rel=\"nofollow\">Accessing extracted features as a dictionary</a></li>\n<li><a href=\"#Using-PyTrack-in-Stand-alone-mode\" rel=\"nofollow\">Using PyTrack in Stand-alone mode</a></li>\n</ul>\n</li>\n<li><a href=\"#Authors\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#License\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#Acknowledgments\" rel=\"nofollow\">Acknowledgments</a></li>\n</ul>\n<h1>Documentation</h1>\n<p>The detailed documentation for the methods and classes of PyTrack can be found <a href=\"https://pytrack-ntu.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a></p>\n<h1>Installation</h1>\n<p>PyTrack is built for Python3 because support for the Python2 is going to be stopped at the end of 2019. In order to install PyTrack please use any of the following:</p>\n<pre><code>python3 -m pip install PyTrack-NTU\npip install PyTrack-NTU\npip3 install PyTrack-NTU\n</code></pre>\n<p>Please make sure that pip is for Python3 and not Python2. Python3  can be found <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">here</a> or Anaconda Python3 can be found <a href=\"https://www.anaconda.com/distribution/\" rel=\"nofollow\">here</a>.</p>\n<p><strong>NOTE:</strong> Python3 can be installed alongside Python2</p>\n<h1>Sample Data</h1>\n<p>In order to test the toolkit some sample data in SMI, EyeLink and Tobii formats can be found <a href=\"https://osf.io/f9mey/files/\" rel=\"nofollow\">here</a>. The .txt file in the folder describes the data found. The SMI and Tobii files have been taken from <a href=\"http://www2.hu-berlin.de/eyetracking-eeg/testdata.html\" rel=\"nofollow\">here</a>.</p>\n<h1>Using PyTrack</h1>\n<h2>Setup</h2>\n<p>Before running the framework, lets setup the folder so PyTrack can read and save all the generated figures in one central location and things are organised.</p>\n<p>Create a directory structure like the one shown below. It is essential for the listed directories to be present for the proper functioning of PyTrack.</p>\n<p><strong>NOTE:</strong> The sample data has a folder called NTU_Experiment which is already organised in the following manner. It can be used as reference.</p>\n<pre><code>[Experiment-Name]\n|\n\u2514\u2500\u2500 Data/\n\u2502   \u2502   subject_001.[asc/txt/tsv/...]\n\u2502   \u2502   subject_002.[asc/txt/tsv/...]\n|   |__ ......\n\u2502\n\u2514\u2500\u2500 Stimulus/\n\u2502   \u2502   stim_1.[jpg/jpeg]\n\u2502   \u2502   stim_2.[jpg/jpeg]\n|   |__ ......\n|\n\u2514\u2500\u2500 [Experiment-Name].json\n\n</code></pre>\n<p><em>[Experiment-Name]</em> stands for the name of your experiment. The rest of the steps will use <em>NTU_Experiment</em> as the <em>[Experiment-Name]</em> folder.</p>\n<p>Now, follow these steps:</p>\n<ol>\n<li>\n<p>Place the data of all your subjects in the <em>Data</em> folder under the main <em>NTU_Experiment</em> folder. Make sure the name of each of the data files is the name of the subjects/paticipants. Replace all spaces( ) with underscores (_).</p>\n<p>eg. <em>waffle_buttersnaps.asc</em> or <em>subject_001.asc</em></p>\n</li>\n<li>\n<p>For proper visualization of gaze data, its best if you include the stimuli presented during your experiment inside the <em>Stimuli</em> folder. Make sure the images have either <strong>jpg, jpeg</strong> or <strong>png</strong> extensions and the names match the names of the stimuli as present in your recorded data.</p>\n<p>eg. <em>stim_1.jpg</em> or <em>random_picture.png</em></p>\n</li>\n<li>\n<p>The last and final step to setup the experiment directory is to include the experiment description json file. This file should contain the essential details of your experiment. It contains specifications regarding your experiment such as the stimuli you wish to analyse or the participants/subjects you wish to include. Mentioned below is the json file structure. The content below can be copied and pasted in a file called <em>NTU_Experiment</em>.json</p>\n<ul>\n<li>\"<em>Experiment_name</em>\" should be the same name as the json file without the extension and \"<em>Path</em>\" should be the absolute path to your experiment directory without the final \"/\" at the end.</li>\n<li>The subjects should be added under the \"<em>Subjects</em>\" field. You may specify one or more groups of division for your subjects (recommended for between group statistical analysis). <strong>There must be atleast 1 group</strong>.</li>\n<li>The stimuli names should be added under the \"<em>Stimuli</em>\" field and again you may specify one or more types (recommended for between/within stimulus type statistical analysis). <strong>There must be atleast 1 type</strong>.</li>\n<li>The \"<em>Control_Questions</em>\" field is optional. In case you have some stimuli that should be used to standardise/normalise features extracted from all stimuli, specify the names here. <strong>These stimuli must be present under the \"<em>Stimuli</em>\" field under one of the types</strong>.</li>\n<li><strong>The field marked \"<em>Columns_of_interest</em>\" should not be altered</strong>.</li>\n<li>Under \"<em>Analysis_Params</em>\", just change the values of \"Sampling_Freq\", \"Display_height\" and \"Display_width\" to match the values of your experiment.</li>\n</ul>\n<p><strong>Note</strong>: If you wish to analyse only a subset of your stimuli or subjects, specify only the ones of interest in the json file. The analysis and visualization will be done only for the ones mentioned in the json file.</p>\n</li>\n</ol>\n<p><strong>NOTE:</strong> A sample json file is present in the NTU_Experiment folder in the sample data. You can just edit it to make your work simpler.</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"Experiment_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"NTU_Experiment\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"Path\"</span><span class=\"p\">:</span><span class=\"s2\">\"abcd/efgh/NTU_Experiment\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"Subjects\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"group1\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"Subject_01\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"Subject_02\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"group2\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"Subject_03\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"Subject_04\"</span>\n      <span class=\"p\">]</span>\n   <span class=\"p\">},</span>\n   <span class=\"nt\">\"Stimuli\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"Type_1\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"Stim_1\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"Stim_2\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"Type_2\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"Stim_3\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"Stim_4\"</span>\n      <span class=\"p\">],</span>\n   <span class=\"p\">},</span>\n   <span class=\"nt\">\"Control_Questions\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"Stim_1\"</span>\n    <span class=\"p\">],</span>\n   <span class=\"nt\">\"Columns_of_interest\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"EyeTracker\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"GazeLeftx\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"GazeLefty\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"GazeRightx\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"GazeRighty\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"PupilLeft\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"PupilRight\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"FixationSeq\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"GazeAOI\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"nt\">\"Extra\"</span><span class=\"p\">:[</span>\n         <span class=\"s2\">\"EventSource\"</span>\n      <span class=\"p\">]</span>\n   <span class=\"p\">},</span>\n   <span class=\"nt\">\"Analysis_Params\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"EyeTracker\"</span><span class=\"p\">:{</span>\n        <span class=\"nt\">\"Sampling_Freq\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"Display_width\"</span><span class=\"p\">:</span> <span class=\"mi\">1920</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"Display_height\"</span><span class=\"p\">:</span> <span class=\"mi\">1280</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Running PyTrack</h2>\n<p><strong>NOTE:</strong> All sample segments shown below are for the NTU_Experiment folder in the sample data.</p>\n<ol>\n<li>\n<p>In order to use the features, the <strong>first step is to convert the raw data into a readable format</strong>. In order to do so, the following code segment can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyTrack.formatBridge</span> <span class=\"kn\">import</span> <span class=\"n\">generateCompatibleFormat</span>\n\n<span class=\"c1\"># For windows the path will look like </span>\n<span class=\"c1\">#    a. exp_path=\"complete\\\\path\\\\to\\\\NTU_Experiment\"</span>\n<span class=\"c1\"># or b. exp_path=r\"complete\\path\\to\\NTU_Experiment\"</span>\n<span class=\"n\">generateCompatibleFormat</span><span class=\"p\">(</span><span class=\"n\">exp_path</span><span class=\"o\">=</span><span class=\"s2\">\"complete/path/to/NTU_Experiment\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"eyelink\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">stim_list_mode</span><span class=\"o\">=</span><span class=\"s1\">'NA'</span><span class=\"p\">,</span>\n                        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s1\">'start_trial'</span><span class=\"p\">,</span>\n                        <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"s1\">'stop_trial'</span><span class=\"p\">,</span>\n                        <span class=\"n\">eye</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>\n</pre>\n<p>To get a detailed understanding of the parameters of <em>generateCompatibleFormats</em> and modify it to your needs see the documentation <a href=\"https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#formatBridge.generateCompatibleFormat\" rel=\"nofollow\">here</a>.</p>\n</li>\n<li>\n<p>The <strong>second step is to create an object of the Experiment class</strong>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyTrack.Experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"c1\"># Creating an object of the Experiment class</span>\n<span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"o\">=</span><span class=\"s2\">\"complete/path/to/NTU_Experiment/NTU_Experiment.json\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Now you can run the <strong>feature extraction and statistical tests</strong></p>\n<pre><span class=\"c1\"># Instantiate the meta_matrix_dict of an Experiment to find and extract all features from the raw data</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">metaMatrixInitialisation</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Calling the function for the statistical analysis of the data</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">analyse</span><span class=\"p\">(</span><span class=\"n\">parameter_list</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"all\"</span><span class=\"p\">},</span>\n            <span class=\"n\">between_factor_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Subject_type\"</span><span class=\"p\">],</span>\n            <span class=\"n\">within_factor_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Stimuli_type\"</span><span class=\"p\">],</span>\n            <span class=\"n\">statistical_test</span><span class=\"o\">=</span><span class=\"s2\">\"anova\"</span><span class=\"p\">,</span>\n            <span class=\"n\">file_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Does not run any statistical test. Just saves all the data as csv files.</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">analyse</span><span class=\"p\">(</span><span class=\"n\">parameter_list</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"all\"</span><span class=\"p\">},</span>\n            <span class=\"n\">statistical_test</span><span class=\"o\">=</span><span class=\"s2\">\"None\"</span><span class=\"p\">,</span>\n            <span class=\"n\">file_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>To get a detailed understanding of the parameters of the <em>analyse</em> function: <a href=\"https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#experiment.analyse\" rel=\"nofollow\">here</a></p>\n<p>To get a detailed understanding of the parameters of the <em>metaMatrixInitialisation</em> function: <a href=\"https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#experiment.metaMatrixInitialisation\" rel=\"nofollow\">here</a></p>\n</li>\n<li>\n<p>For <strong>visualization</strong></p>\n<pre><span class=\"c1\"># This function call will open up a GUI which you can use to navigate the entire visualization process</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">visualizeData</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ol>\n<h1>Advanced Functionality</h1>\n<h2>Statistical Tests</h2>\n<p>The Experiment class contains a function called analyse() which is used to perform statistical analysis (eg: ANOVA or T test), by default there is only 1 between group factor (\"Subject_type\") and 1 within group factor (\"Stimuli_type\") that is considered. If additional factors need to be considered they need to added to the json file.</p>\n<ul>\n<li>\n<p>For example if Gender is to be considered as an additional between group factor then in the json file, under \"Subjects\", for each subject, a corresponding dicitionary must be created where you mention the factor name and the corresponding value. Please also note that the square brackets ('[', ']') after group type need to be changed to curly brackets ('{', '}').</p>\n</li>\n<li>\n<p>Similarly for Stimuli, for example, if you are showing Words and Pictures to elicit different responses from a user and you additonally have 2 different brightness levels (\"High\" and \"Low\") then mention Brightness as an additional within group factor.</p>\n</li>\n</ul>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"Subjects\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"group1\"</span><span class=\"p\">:{</span>\n         <span class=\"nt\">\"Subject_01\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"M\"</span><span class=\"p\">},</span>\n         <span class=\"nt\">\"Subject_02\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F\"</span><span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"group2\"</span><span class=\"p\">:{</span>\n         <span class=\"nt\">\"Subject_03\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"F\"</span><span class=\"p\">},</span>\n         <span class=\"nt\">\"Subject_04\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"M\"</span><span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">},</span>\n   <span class=\"nt\">\"Stimuli\"</span><span class=\"p\">:{</span>\n      <span class=\"nt\">\"Type_1\"</span><span class=\"p\">:{</span>\n         <span class=\"nt\">\"Stim_1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Brightness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"High\"</span><span class=\"p\">},</span>\n         <span class=\"nt\">\"Stim_2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Brightness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Low\"</span><span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"nt\">\"Type_2\"</span><span class=\"p\">:{</span>\n         <span class=\"nt\">\"Stim_3\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Brightness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Low\"</span><span class=\"p\">},</span>\n         <span class=\"nt\">\"Stim_4\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"Brightness\"</span><span class=\"p\">:</span> <span class=\"s2\">\"High\"</span><span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n   <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Sample code segment to use the advanced statistical test:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyTrack.Experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"o\">=</span><span class=\"s2\">\"abcd/efgh/NTU_Experiment/NTU_Experiment.json\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">metaMatrixInitialisation</span><span class=\"p\">()</span>\n\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">analyse</span><span class=\"p\">(</span><span class=\"n\">parameter_list</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"all\"</span><span class=\"p\">},</span>\n            <span class=\"n\">between_factor_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Subject_type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Gender\"</span><span class=\"p\">],</span>\n            <span class=\"n\">within_factor_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Stimuli_type\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Brightness\"</span><span class=\"p\">],</span>\n            <span class=\"n\">statistical_test</span><span class=\"o\">=</span><span class=\"s2\">\"anova\"</span><span class=\"p\">,</span>\n            <span class=\"n\">file_creation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Accessing extracted features as a dictionary</h2>\n<p>In case you wish to get the extracted features for a particilar Subject on a particular Stimulus:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyTrack.Experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">json_file</span><span class=\"o\">=</span><span class=\"s2\">\"complete/path/to/NTU_Experiment/NTU_Experiment.json\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">subject_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"sub_333\"</span> <span class=\"c1\">#specify your own subject's name (must be in json file)</span>\n<span class=\"n\">stimulus_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Alpha1\"</span> <span class=\"c1\">#specify your own stimulus name (must be in json file)</span>\n\n<span class=\"c1\"># Access metadata dictionary for particular subject and stimulus</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">metaMatrixInitialisation</span><span class=\"p\">()</span>\n<span class=\"n\">single_meta</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">getMetaData</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"o\">=</span><span class=\"n\">subject_name</span><span class=\"p\">,</span>\n                              <span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"n\">stimulus_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access metadata dictionary for particular subject and averaged for stimulus types</span>\n<span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">metaMatrixInitialisation</span><span class=\"p\">(</span><span class=\"n\">average_flag</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">agg_type_meta</span> <span class=\"o\">=</span> <span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">getMetaData</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"o\">=</span><span class=\"n\">subject_name</span><span class=\"p\">,</span>\n                                 <span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h2>Using PyTrack in Stand-alone mode</h2>\n<p>The stand-alone design requires only interaction with tyhe Stimulus class. This is recommended if you wish to extract features or visualize data for only 1 subject on a particular stimulus.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyTrack.Stimulus</span> <span class=\"kn\">import</span> <span class=\"n\">Stimulus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PyTrack.formatBridge</span> <span class=\"kn\">import</span> <span class=\"n\">generateCompatibleFormat</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"c1\"># function to convert data to generate csv file for data file recorded using EyeLink on both eyes and the stimulus name specified in the message section</span>\n<span class=\"n\">generateCompatibleFormat</span><span class=\"p\">(</span><span class=\"n\">exp_path</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/smi_eyetracker_freeviewing.txt\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s2\">\"smi\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">stim_list_mode</span><span class=\"o\">=</span><span class=\"s1\">'NA'</span><span class=\"p\">,</span>\n                        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s1\">'12'</span><span class=\"p\">,</span>\n                        <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"s1\">'99'</span><span class=\"p\">)</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/smi_eyetracker_freeviewing.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dictionary containing details of recording. Please change the values according to your experiment. If no AOI is desired, set aoi value to [0, 0, Display_width, Display_height]</span>\n<span class=\"n\">sensor_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                  <span class=\"s2\">\"EyeTracker\"</span><span class=\"p\">:</span>\n                  <span class=\"p\">{</span>\n                     <span class=\"s2\">\"Sampling_Freq\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"Display_width\"</span><span class=\"p\">:</span> <span class=\"mi\">1280</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"Display_height\"</span><span class=\"p\">:</span> <span class=\"mi\">1024</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"aoi\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">390</span><span class=\"p\">,</span> <span class=\"mi\">497</span><span class=\"p\">,</span> <span class=\"mi\">759</span><span class=\"p\">,</span> <span class=\"mi\">732</span><span class=\"p\">]</span>\n                  <span class=\"p\">}</span>\n               <span class=\"p\">}</span>\n\n<span class=\"c1\"># Creating Stimulus object. See the documentation for advanced parameters.</span>\n<span class=\"n\">stim</span> <span class=\"o\">=</span> <span class=\"n\">Stimulus</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/experiment/folder\"</span><span class=\"p\">,</span>\n               <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span>\n               <span class=\"n\">sensor_names</span><span class=\"o\">=</span><span class=\"n\">sensor_dict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Some functionality usage. See documentation of Stimulus class for advanced use.</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">findEyeMetaData</span><span class=\"p\">()</span>\n<span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">sensors</span><span class=\"p\">[</span><span class=\"s2\">\"EyeTracker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">metadata</span>  <span class=\"c1\"># Getting dictioary of found metadata/features</span>\n\n<span class=\"c1\"># Visualization of plots</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">gazePlot</span><span class=\"p\">(</span><span class=\"n\">save_fig</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">gazeHeatMap</span><span class=\"p\">(</span><span class=\"n\">save_fig</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">visualize</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Extracting features</span>\n<span class=\"n\">MS</span><span class=\"p\">,</span> <span class=\"n\">ms_count</span><span class=\"p\">,</span> <span class=\"n\">ms_duration</span> <span class=\"o\">=</span> <span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">findMicrosaccades</span><span class=\"p\">(</span><span class=\"n\">plot_ms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>See the stimulus class for more details on the functions: <a href=\"https://pytrack-ntu.readthedocs.io/en/latest/PyTrack.html#Stimulus.Stimulus\" rel=\"nofollow\">here</a></p>\n<h1>Authors</h1>\n<ul>\n<li><strong>Upamanyu Ghose</strong> (<a href=\"https://github.com/titoghose\" rel=\"nofollow\">github</a> | <a href=\"titoghose@gmail.com\" rel=\"nofollow\">email</a>)</li>\n<li><strong>Arvind A S</strong> (<a href=\"https://github.com/arvindas\" rel=\"nofollow\">github</a> | <a href=\"96arvind@gmail.com\" rel=\"nofollow\">email</a>)</li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/titoghose/PyTrack/contributors\" rel=\"nofollow\">contributors</a> who participated in this project.</p>\n<h1>License</h1>\n<p>This project is licensed under the GPL3 License - see the <a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file for details</p>\n<h1>Acknowledgments</h1>\n<ul>\n<li>\n<p>We would like to thank <a href=\"https://dominiquemakowski.github.io/\" rel=\"nofollow\">Dr. Dominique Makowski</a> for helping us develop this toolkit.</p>\n</li>\n<li>\n<p>The formatsBridge module was adapted from the work done by <a href=\"https://github.com/esdalmaijer\" rel=\"nofollow\">Edwin Dalmaijer</a> in <a href=\"https://github.com/esdalmaijer/PyGazeAnalyser/\" rel=\"nofollow\">PyGazeAnalyser</a>.</p>\n</li>\n<li>\n<p>This work was done under the supervision of <a href=\"http://www.ntu.edu.sg/home/aseschng/\" rel=\"nofollow\">Dr. Chng Eng Siong</a> - School of Computer Science and Engineering NTU and in collaboration with <a href=\"http://www.ntu.edu.sg/home/xuhong/\" rel=\"nofollow\">Dr. Xu Hong</a> - School of Humanitites and Social Sciences NTU.</p>\n</li>\n<li>\n<p>We extend our thanks to the <strong>Department of Computer Science and Engineering Manipal Isntitute of Technology</strong><a href=\"https://manipal.edu/mit/department-faculty/department-list/computer-science-and-engineering.html\" rel=\"nofollow\">[link]</a> and the <strong>Department of Computer Science and Information Systems BITS Pilani, Hyderabad Campus</strong> <a href=\"https://www.bits-pilani.ac.in/hyderabad/computerscience/ComputerScience\" rel=\"nofollow\">[link]</a>.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6316061, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "6dbe697ece25e1d328ba06a74cf257aa", "sha256": "3a87bcfabcf623dd84abd20c5906369ecf67e84b2ad9d076be526b9428ae9b26"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "6dbe697ece25e1d328ba06a74cf257aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56864, "upload_time": "2019-05-13T04:23:35", "upload_time_iso_8601": "2019-05-13T04:23:35.948528Z", "url": "https://files.pythonhosted.org/packages/af/b9/5c7d013c2e418642505e6047fe5f502c88793794f0409e66b24d2ed23a50/PyTrack_NTU-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "947c33a1187c7a1eac1460337a6fd4a2", "sha256": "ff098ede2abce3896e030ba1f762c9187674fc0565dab9df13388adad591abcf"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.10.tar.gz", "has_sig": false, "md5_digest": "947c33a1187c7a1eac1460337a6fd4a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42859, "upload_time": "2019-05-13T04:23:38", "upload_time_iso_8601": "2019-05-13T04:23:38.443476Z", "url": "https://files.pythonhosted.org/packages/c5/89/07c496547bbba29bd77ef6371412715488d7059ef0462fa09a416d8ecf5c/PyTrack-NTU-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "65c7da5507c4f74e444e6d479c28a550", "sha256": "b16beae08671d7937de2da5a5ba4b7079417927f531d2959ca0ff34d57fe523d"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "65c7da5507c4f74e444e6d479c28a550", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56920, "upload_time": "2019-05-13T06:24:39", "upload_time_iso_8601": "2019-05-13T06:24:39.681980Z", "url": "https://files.pythonhosted.org/packages/53/0c/afe3a29039c53f0684d3e467d1beb87e45c777ee9718e538fb54adab86a1/PyTrack_NTU-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2e62745c62887ac5d015e2880b64d53", "sha256": "18ff3468bff803b2aa288c028db348a87a3408afb5507e0d4b7d92b7491736f1"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.11.tar.gz", "has_sig": false, "md5_digest": "d2e62745c62887ac5d015e2880b64d53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42942, "upload_time": "2019-05-13T06:24:41", "upload_time_iso_8601": "2019-05-13T06:24:41.779368Z", "url": "https://files.pythonhosted.org/packages/2c/40/7dd9c45d2c345a033fb2ac699aeb6ae6e9bde681295f86248d2b02f59060/PyTrack-NTU-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "d8317f5e4475d066f7783d56d3660db3", "sha256": "bb661263519743d8d05cf90252bf3efb8a659a8312ce4bacbecc677abdfaa9ed"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "d8317f5e4475d066f7783d56d3660db3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58068, "upload_time": "2019-05-23T07:37:35", "upload_time_iso_8601": "2019-05-23T07:37:35.969487Z", "url": "https://files.pythonhosted.org/packages/e8/ad/e3dd5f6343f8ef40069c64c507e15fae2c25479d91569b52177580b25cdd/PyTrack_NTU-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d180b6b221b895a95f23208654f27df", "sha256": "8183dce58936bb1d1f81da63519cb2b0db9d208f4e91747dc674a5967edd1260"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.12.tar.gz", "has_sig": false, "md5_digest": "3d180b6b221b895a95f23208654f27df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44333, "upload_time": "2019-05-23T07:37:38", "upload_time_iso_8601": "2019-05-23T07:37:38.539227Z", "url": "https://files.pythonhosted.org/packages/e9/3b/ab09726aac93f2e722d899fc2c99d1d87ce25a4957ee8ba4f71ccc2e18f0/PyTrack-NTU-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "6850a510c8f6ca2e5bfa140ba33fe8d9", "sha256": "1236f4cb8f7b28a8f564eb78b918b25b0f006a39161870ef45634e983e85df4c"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "6850a510c8f6ca2e5bfa140ba33fe8d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58551, "upload_time": "2019-06-27T15:52:00", "upload_time_iso_8601": "2019-06-27T15:52:00.661568Z", "url": "https://files.pythonhosted.org/packages/c0/a2/3b1b2331e20f4f3631e32cc131b2ec499ebeab694ce2f56f568b4c0e1c69/PyTrack_NTU-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6610e66272cc0aa2b2eee50c3a92b246", "sha256": "fb8ded850146476106d47e6b96f1bf7cc3c6047a997d1b66dd21d0c210637b5f"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.13.tar.gz", "has_sig": false, "md5_digest": "6610e66272cc0aa2b2eee50c3a92b246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44813, "upload_time": "2019-06-27T15:52:03", "upload_time_iso_8601": "2019-06-27T15:52:03.082779Z", "url": "https://files.pythonhosted.org/packages/7c/1a/6affd98ac377164227c3da7f1da853009a85442a45f03931c541e580798c/PyTrack-NTU-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "4e6002c1e7100136cad782144bd50bcc", "sha256": "7631c5a855aad01b3506074b62cba73535f89b61dde60512adb319a84d12949c"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "4e6002c1e7100136cad782144bd50bcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58547, "upload_time": "2019-06-28T10:31:06", "upload_time_iso_8601": "2019-06-28T10:31:06.789067Z", "url": "https://files.pythonhosted.org/packages/11/5d/8d46412761dfed2607601226e96d2c70b32bed00fe92d663562b2e6187c9/PyTrack_NTU-0.0.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c207a1c308d944fff7227bffe5f96b9f", "sha256": "bd7177f9a9de2f057ab028d0f8695db2170d7a4a7050ae84b5976be7366ad013"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.14.tar.gz", "has_sig": false, "md5_digest": "c207a1c308d944fff7227bffe5f96b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44771, "upload_time": "2019-06-28T10:31:08", "upload_time_iso_8601": "2019-06-28T10:31:08.935820Z", "url": "https://files.pythonhosted.org/packages/2c/b5/74c20665f98eb65fec059cb2f4992c3590b64af84b2b86438ad55d3a7ecf/PyTrack-NTU-0.0.14.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "36c748c750f3b2ffe6da2193b724a598", "sha256": "08a31871652c073a12e1f7ffb8b00e28015e0ae9ca8cb36c078aaa50c0314256"}, "downloads": -1, "filename": "PyTrack_NTU-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "36c748c750f3b2ffe6da2193b724a598", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56853, "upload_time": "2019-05-13T04:21:25", "upload_time_iso_8601": "2019-05-13T04:21:25.824767Z", "url": "https://files.pythonhosted.org/packages/9a/05/eef8136a5b8ea14b38407c934a0f899c2576c28593ccff6ca5d7af1e19b2/PyTrack_NTU-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "084cd26eb14e8dc732b7eef0efe03f1f", "sha256": "bb2632f54604e1f61224fee6aac59a2e8f5c9c532d3d2e24e00618f9ab25c211"}, "downloads": -1, "filename": "PyTrack-NTU-0.0.9.tar.gz", "has_sig": false, "md5_digest": "084cd26eb14e8dc732b7eef0efe03f1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42864, "upload_time": "2019-05-13T04:21:28", "upload_time_iso_8601": "2019-05-13T04:21:28.763063Z", "url": "https://files.pythonhosted.org/packages/b4/ef/4dc914de1867e5a56d0e1f089db29abf5e1605471222b28d4c29a07d98d7/PyTrack-NTU-0.0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c9194a4b61b9b367523e71d47c799d41", "sha256": "9499c17d93b8f80853eb132a44247598305b75bb40f082042f93e71747a2930a"}, "downloads": -1, "filename": "PyTrack_NTU-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9194a4b61b9b367523e71d47c799d41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59236, "upload_time": "2019-06-30T07:10:53", "upload_time_iso_8601": "2019-06-30T07:10:53.349133Z", "url": "https://files.pythonhosted.org/packages/84/d4/c9b7b51a07d98d73a4bad09ccf404e48fbb114f875011da555bb17f740bc/PyTrack_NTU-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e501613e2ac62bebe746917b0270644a", "sha256": "82a042a64327d4784ac3fe2174fede3acca4d224d57e8b8a3a6b7e17ead59a39"}, "downloads": -1, "filename": "PyTrack_NTU-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e501613e2ac62bebe746917b0270644a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58787, "upload_time": "2019-09-02T17:45:29", "upload_time_iso_8601": "2019-09-02T17:45:29.036804Z", "url": "https://files.pythonhosted.org/packages/03/9e/aa093a5f068d39a2d4a14ed4494a4cd37a625bd9175696df432fb520c77a/PyTrack_NTU-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f836434fc9adcf37ca4d1dee42534fc1", "sha256": "27b212242cc467a85a8d8747e187be7b7efbb508f86dca6a01cd194a26366581"}, "downloads": -1, "filename": "PyTrack-NTU-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f836434fc9adcf37ca4d1dee42534fc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50009, "upload_time": "2019-09-02T17:45:31", "upload_time_iso_8601": "2019-09-02T17:45:31.484719Z", "url": "https://files.pythonhosted.org/packages/a3/8d/cd84485d281fc98c8d91856cfe76ec4b348a2472aadc2de3687c748bcca1/PyTrack-NTU-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "635bc175999bef504bd8b627876058c8", "sha256": "2d06b51cb0b1cb46b547bb7db96a7cde0e6c39932276678a9cb06e74ffbc8e64"}, "downloads": -1, "filename": "PyTrack_NTU-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "635bc175999bef504bd8b627876058c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59291, "upload_time": "2019-09-08T05:41:16", "upload_time_iso_8601": "2019-09-08T05:41:16.617589Z", "url": "https://files.pythonhosted.org/packages/39/10/c736dbb7f31d5e97000b89a1f33f92a7acddb4884b37bdef9e2d9a2d4647/PyTrack_NTU-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "587e1b1ed135d023224f5529adc9efff", "sha256": "0bfd5c8a690466627c6d746a91acb71bc93687c1729743bac5b7a2eaca5b0bf6"}, "downloads": -1, "filename": "PyTrack-NTU-1.0.2.tar.gz", "has_sig": false, "md5_digest": "587e1b1ed135d023224f5529adc9efff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50479, "upload_time": "2019-09-08T05:41:18", "upload_time_iso_8601": "2019-09-08T05:41:18.778916Z", "url": "https://files.pythonhosted.org/packages/37/9e/29eb6fca3f3f569193276a64822c37b15ee10ba46da2f604feb65dff32f3/PyTrack-NTU-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "132b6c39d6a2fc099b7c9c9eb9818215", "sha256": "7dea6f6de43fd8170cb2919d6cbf669382cafcb8fe951a0cbacbc8f6fd4ee915"}, "downloads": -1, "filename": "PyTrack_NTU-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "132b6c39d6a2fc099b7c9c9eb9818215", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58885, "upload_time": "2019-12-17T08:49:48", "upload_time_iso_8601": "2019-12-17T08:49:48.985563Z", "url": "https://files.pythonhosted.org/packages/d3/41/4ece17d547cf3a57b0c415c2ff9e1413c8815fc459710159210fddda57dc/PyTrack_NTU-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083ded34f6123ec75f3868ad9ed5e8d8", "sha256": "ebae993b5ff3f8f88f2b8bef204daef4f56c527fff5cb5b2e79430b3ef52772d"}, "downloads": -1, "filename": "PyTrack-NTU-1.0.3.tar.gz", "has_sig": false, "md5_digest": "083ded34f6123ec75f3868ad9ed5e8d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50100, "upload_time": "2019-12-17T08:49:50", "upload_time_iso_8601": "2019-12-17T08:49:50.789734Z", "url": "https://files.pythonhosted.org/packages/00/05/9cb2af138b0ddd17602637878dbec2ea4494f0f2c13b57ecac716f8a2c0f/PyTrack-NTU-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "132b6c39d6a2fc099b7c9c9eb9818215", "sha256": "7dea6f6de43fd8170cb2919d6cbf669382cafcb8fe951a0cbacbc8f6fd4ee915"}, "downloads": -1, "filename": "PyTrack_NTU-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "132b6c39d6a2fc099b7c9c9eb9818215", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58885, "upload_time": "2019-12-17T08:49:48", "upload_time_iso_8601": "2019-12-17T08:49:48.985563Z", "url": "https://files.pythonhosted.org/packages/d3/41/4ece17d547cf3a57b0c415c2ff9e1413c8815fc459710159210fddda57dc/PyTrack_NTU-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083ded34f6123ec75f3868ad9ed5e8d8", "sha256": "ebae993b5ff3f8f88f2b8bef204daef4f56c527fff5cb5b2e79430b3ef52772d"}, "downloads": -1, "filename": "PyTrack-NTU-1.0.3.tar.gz", "has_sig": false, "md5_digest": "083ded34f6123ec75f3868ad9ed5e8d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50100, "upload_time": "2019-12-17T08:49:50", "upload_time_iso_8601": "2019-12-17T08:49:50.789734Z", "url": "https://files.pythonhosted.org/packages/00/05/9cb2af138b0ddd17602637878dbec2ea4494f0f2c13b57ecac716f8a2c0f/PyTrack-NTU-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:24 2020"}