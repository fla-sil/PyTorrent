{"info": {"author": "kai zhu", "author_email": "kaizhu256@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: C", "Programming Language :: C++", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Topic :: Multimedia", "Topic :: Multimedia :: Graphics", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "DESCRIPTION: ast2src - reverse compile ast tree back to legal python source code\n\n  REQUIRES: LINUX OS AND PYTHON3.1\n\n  QUICK TEST: $ python3.1 setup.py build dev --quicktest\n\n  SUMMARY:\n  ast2src is a pure python module.\n  ast2src is a python ast tree hack.\n  \nRECENT CHANGELOG:\n  20100121 - added ast2src\n  20091231 - added <<<< and >>>> sugar\n  20091224 - added pseudomethod interactive console - revamped pseudomethod import hook\n  20091224 - modularized package - fix install issues - added sdist check\n  20091209 - improved documentation\n  20091205 - moved source code to c++\n  20091116 - package integrated\n\nDEMO USAGE:\n\n  PseudoSugar - adding hook <ast2src.PseudoSugar object at 0xb7ba856c> to sys.meta_path\n>>> from ast2src import *\n\n>>> ## let's use ast2src's source code as example\n>>> import ast2src, ast\n>>> source_code1 = open(ast2src.__file__).read()\n>>> print( '\\n' + re.sub('\\n+', '\\n', source_code1[:1024]) + '...' )\n\n## import ast2src; reload(ast2src); from ast2src import *\nimport os, sys\nif os.name != 'posix': sys.stderr.write('\\nast2src requires linux os\\n\\n'); exit()\nif sys.version_info[:2] != (3, 1): sys.stderr.write('\\nast2src requires python3.1\\n\\n'); exit()\nif 1: ###### INIT\n  import ast2src as _MODULE\n  if '_SETUP' not in globals(): _SETUP = sys.modules.get('ast2src.setup', None)\n  def closure(*args, **kwds): return lambda fnc: fnc(*args, **kwds)\n  def identity(aa): return aa\n  def _import(ss, globals = globals()):\n    for aa in ss.split(' '): globals[aa] = __import__(aa)\n    return identity\n  class Namespace(object):\n    def __init__(self, **kwds): vars(self).update(kwds)\n  @_import('ast builtins collections re ' #### pseudosugar compiler\n           'imp importlib importlib.abc importlib.util ' #### import hook\n           'locale') ## PYTHON BUG\n  class PseudoSugar(ast.NodeVisitor, importlib.abc.Finder, importlib.abc.PyLoader):\n    ## convenience function\n    @staticmethod\n    def exec(ss, globa...\n\n>>> ## compile source to ast\n>>> ast_tree1 = compile(source_code1, '', 'exec', ast.PyCF_ONLY_AST)\n>>> print( Ast2Src.debugnode(ast_tree1)[:1024], '...' )\n<class '_ast.Module'>\tbody [<_ast.Import object at 0x9c6ea2c>, <_ast.If object at 0x9c6e7cc>, <_ast.If object at 0x9ab2b0c>, <_ast.If object at 0x9ab2fec>]\n <class '_ast.Import'>\tcol_offset 0\tlineno 2\tnames [<_ast.alias object at 0x9c6e2ec>, <_ast.alias object at 0x9c6e9ac>]\n  <class '_ast.alias'>\tasname None\tname 'os'\n  <class '_ast.alias'>\tasname None\tname 'sys'\n <class '_ast.If'>\tbody [<_ast.Expr object at 0x9ccc92c>, <_ast.Expr object at 0x9ab2acc>]\tcol_offset 0\tlineno 3\torelse []\ttest <_ast.Compare object at 0x9c6eccc>\n  <class '_ast.Compare'>\tcol_offset 3\tcomparators [<_ast.Str object at 0x9ccc9ec>]\tleft <_ast.Attribute object at 0x9c948cc>\tlineno 3\tops [<_ast.NotEq object at 0xb7b3682c>]\n   <class '_ast.Attribute'>\tattr 'name'\tcol_offset 3\tctx <_ast.Load object at 0xb7bb2ccc>\tlineno 3\tvalue <_ast.Name object at 0x9ccc46c>\n    <class '_ast.Name'>\tcol_offset 3\tctx <_ast.Load object at 0xb7bb2ccc>\tid 'os'\tlineno 3\n     <class '_ast.Load'>\t\n    <class '_ast.Load'>\t\n   <class '_ast.NotEq'>\t\n   <class '_ast. ...\n\n>>> ## reverse compile ast back to source\n>>> source_code2 = Ast2Src.unparse(ast_tree1)\n>>> print( '\\n' + re.sub('\\n+', '\\n', source_code1[:1024]) + '...' )\n\n## import ast2src; reload(ast2src); from ast2src import *\nimport os, sys\nif os.name != 'posix': sys.stderr.write('\\nast2src requires linux os\\n\\n'); exit()\nif sys.version_info[:2] != (3, 1): sys.stderr.write('\\nast2src requires python3.1\\n\\n'); exit()\nif 1: ###### INIT\n  import ast2src as _MODULE\n  if '_SETUP' not in globals(): _SETUP = sys.modules.get('ast2src.setup', None)\n  def closure(*args, **kwds): return lambda fnc: fnc(*args, **kwds)\n  def identity(aa): return aa\n  def _import(ss, globals = globals()):\n    for aa in ss.split(' '): globals[aa] = __import__(aa)\n    return identity\n  class Namespace(object):\n    def __init__(self, **kwds): vars(self).update(kwds)\n  @_import('ast builtins collections re ' #### pseudosugar compiler\n           'imp importlib importlib.abc importlib.util ' #### import hook\n           'locale') ## PYTHON BUG\n  class PseudoSugar(ast.NodeVisitor, importlib.abc.Finder, importlib.abc.PyLoader):\n    ## convenience function\n    @staticmethod\n    def exec(ss, globa...\n\n>>> ## recompile reverse-compiled source\n>>> ast_tree2 = compile(source_code2, '', 'exec', ast.PyCF_ONLY_AST)\n>>> print( Ast2Src.debugnode(ast_tree2)[:1024], '...' )\n<class '_ast.Module'>\tbody [<_ast.Import object at 0x9ad7ecc>, <_ast.If object at 0x9b3316c>, <_ast.If object at 0x9b3abcc>, <_ast.If object at 0x9b3ae6c>]\n <class '_ast.Import'>\tcol_offset 0\tlineno 2\tnames [<_ast.alias object at 0x9c2966c>, <_ast.alias object at 0x9c022ec>]\n  <class '_ast.alias'>\tasname None\tname 'os'\n  <class '_ast.alias'>\tasname None\tname 'sys'\n <class '_ast.If'>\tbody [<_ast.Expr object at 0x9b3aaac>, <_ast.Expr object at 0x9b3ab6c>]\tcol_offset 0\tlineno 3\torelse []\ttest <_ast.Compare object at 0x9b332ac>\n  <class '_ast.Compare'>\tcol_offset 4\tcomparators [<_ast.Str object at 0x9b3a80c>]\tleft <_ast.Attribute object at 0x9b3490c>\tlineno 3\tops [<_ast.NotEq object at 0xb7b3682c>]\n   <class '_ast.Attribute'>\tattr 'name'\tcol_offset 4\tctx <_ast.Load object at 0xb7bb2ccc>\tlineno 3\tvalue <_ast.Name object at 0x9b3a10c>\n    <class '_ast.Name'>\tcol_offset 4\tctx <_ast.Load object at 0xb7bb2ccc>\tid 'os'\tlineno 3\n     <class '_ast.Load'>\t\n    <class '_ast.Load'>\t\n   <class '_ast.NotEq'>\t\n   <class '_ast. ...", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/ast2src", "keywords": null, "license": "gpl", "maintainer": null, "maintainer_email": null, "name": "ast2src", "package_url": "https://pypi.org/project/ast2src/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ast2src/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/ast2src"}, "release_url": "https://pypi.org/project/ast2src/2010.01.21.ast2src/", "requires_dist": null, "requires_python": null, "summary": "DESCRIPTION: ast2src - reverse compile ast tree back to legal python source code", "version": "2010.01.21.ast2src", "yanked": false, "html_description": "<div class=\"project-description\">\n            DESCRIPTION: ast2src - reverse compile ast tree back to legal python source code<br><br>  REQUIRES: LINUX OS AND PYTHON3.1<br><br>  QUICK TEST: $ python3.1 setup.py build dev --quicktest<br><br>  SUMMARY:<br>  ast2src is a pure python module.<br>  ast2src is a python ast tree hack.<br>  <br>RECENT CHANGELOG:<br>  20100121 - added ast2src<br>  20091231 - added &lt;&lt;&lt;&lt; and &gt;&gt;&gt;&gt; sugar<br>  20091224 - added pseudomethod interactive console - revamped pseudomethod import hook<br>  20091224 - modularized package - fix install issues - added sdist check<br>  20091209 - improved documentation<br>  20091205 - moved source code to c++<br>  20091116 - package integrated<br><br>DEMO USAGE:<br><br>  PseudoSugar - adding hook &lt;ast2src.PseudoSugar object at 0xb7ba856c&gt; to sys.meta_path<br>&gt;&gt;&gt; from ast2src import *<br><br>&gt;&gt;&gt; ## let's use ast2src's source code as example<br>&gt;&gt;&gt; import ast2src, ast<br>&gt;&gt;&gt; source_code1 = open(ast2src.__file__).read()<br>&gt;&gt;&gt; print( '\\n' + re.sub('\\n+', '\\n', source_code1[:1024]) + '...' )<br><br>## import ast2src; reload(ast2src); from ast2src import *<br>import os, sys<br>if os.name != 'posix': sys.stderr.write('\\nast2src requires linux os\\n\\n'); exit()<br>if sys.version_info[:2] != (3, 1): sys.stderr.write('\\nast2src requires python3.1\\n\\n'); exit()<br>if 1: ###### INIT<br>  import ast2src as _MODULE<br>  if '_SETUP' not in globals(): _SETUP = sys.modules.get('ast2src.setup', None)<br>  def closure(*args, **kwds): return lambda fnc: fnc(*args, **kwds)<br>  def identity(aa): return aa<br>  def _import(ss, globals = globals()):<br>    for aa in ss.split(' '): globals[aa] = __import__(aa)<br>    return identity<br>  class Namespace(object):<br>    def __init__(self, **kwds): vars(self).update(kwds)<br>  @_import('ast builtins collections re ' #### pseudosugar compiler<br>           'imp importlib importlib.abc importlib.util ' #### import hook<br>           'locale') ## PYTHON BUG<br>  class PseudoSugar(ast.NodeVisitor, importlib.abc.Finder, importlib.abc.PyLoader):<br>    ## convenience function<br>    @staticmethod<br>    def exec(ss, globa...<br><br>&gt;&gt;&gt; ## compile source to ast<br>&gt;&gt;&gt; ast_tree1 = compile(source_code1, '', 'exec', ast.PyCF_ONLY_AST)<br>&gt;&gt;&gt; print( Ast2Src.debugnode(ast_tree1)[:1024], '...' )<br>&lt;class '_ast.Module'&gt;\tbody [&lt;_ast.Import object at 0x9c6ea2c&gt;, &lt;_ast.If object at 0x9c6e7cc&gt;, &lt;_ast.If object at 0x9ab2b0c&gt;, &lt;_ast.If object at 0x9ab2fec&gt;]<br> &lt;class '_ast.Import'&gt;\tcol_offset 0\tlineno 2\tnames [&lt;_ast.alias object at 0x9c6e2ec&gt;, &lt;_ast.alias object at 0x9c6e9ac&gt;]<br>  &lt;class '_ast.alias'&gt;\tasname None\tname 'os'<br>  &lt;class '_ast.alias'&gt;\tasname None\tname 'sys'<br> &lt;class '_ast.If'&gt;\tbody [&lt;_ast.Expr object at 0x9ccc92c&gt;, &lt;_ast.Expr object at 0x9ab2acc&gt;]\tcol_offset 0\tlineno 3\torelse []\ttest &lt;_ast.Compare object at 0x9c6eccc&gt;<br>  &lt;class '_ast.Compare'&gt;\tcol_offset 3\tcomparators [&lt;_ast.Str object at 0x9ccc9ec&gt;]\tleft &lt;_ast.Attribute object at 0x9c948cc&gt;\tlineno 3\tops [&lt;_ast.NotEq object at 0xb7b3682c&gt;]<br>   &lt;class '_ast.Attribute'&gt;\tattr 'name'\tcol_offset 3\tctx &lt;_ast.Load object at 0xb7bb2ccc&gt;\tlineno 3\tvalue &lt;_ast.Name object at 0x9ccc46c&gt;<br>    &lt;class '_ast.Name'&gt;\tcol_offset 3\tctx &lt;_ast.Load object at 0xb7bb2ccc&gt;\tid 'os'\tlineno 3<br>     &lt;class '_ast.Load'&gt;\t<br>    &lt;class '_ast.Load'&gt;\t<br>   &lt;class '_ast.NotEq'&gt;\t<br>   &lt;class '_ast. ...<br><br>&gt;&gt;&gt; ## reverse compile ast back to source<br>&gt;&gt;&gt; source_code2 = Ast2Src.unparse(ast_tree1)<br>&gt;&gt;&gt; print( '\\n' + re.sub('\\n+', '\\n', source_code1[:1024]) + '...' )<br><br>## import ast2src; reload(ast2src); from ast2src import *<br>import os, sys<br>if os.name != 'posix': sys.stderr.write('\\nast2src requires linux os\\n\\n'); exit()<br>if sys.version_info[:2] != (3, 1): sys.stderr.write('\\nast2src requires python3.1\\n\\n'); exit()<br>if 1: ###### INIT<br>  import ast2src as _MODULE<br>  if '_SETUP' not in globals(): _SETUP = sys.modules.get('ast2src.setup', None)<br>  def closure(*args, **kwds): return lambda fnc: fnc(*args, **kwds)<br>  def identity(aa): return aa<br>  def _import(ss, globals = globals()):<br>    for aa in ss.split(' '): globals[aa] = __import__(aa)<br>    return identity<br>  class Namespace(object):<br>    def __init__(self, **kwds): vars(self).update(kwds)<br>  @_import('ast builtins collections re ' #### pseudosugar compiler<br>           'imp importlib importlib.abc importlib.util ' #### import hook<br>           'locale') ## PYTHON BUG<br>  class PseudoSugar(ast.NodeVisitor, importlib.abc.Finder, importlib.abc.PyLoader):<br>    ## convenience function<br>    @staticmethod<br>    def exec(ss, globa...<br><br>&gt;&gt;&gt; ## recompile reverse-compiled source<br>&gt;&gt;&gt; ast_tree2 = compile(source_code2, '', 'exec', ast.PyCF_ONLY_AST)<br>&gt;&gt;&gt; print( Ast2Src.debugnode(ast_tree2)[:1024], '...' )<br>&lt;class '_ast.Module'&gt;\tbody [&lt;_ast.Import object at 0x9ad7ecc&gt;, &lt;_ast.If object at 0x9b3316c&gt;, &lt;_ast.If object at 0x9b3abcc&gt;, &lt;_ast.If object at 0x9b3ae6c&gt;]<br> &lt;class '_ast.Import'&gt;\tcol_offset 0\tlineno 2\tnames [&lt;_ast.alias object at 0x9c2966c&gt;, &lt;_ast.alias object at 0x9c022ec&gt;]<br>  &lt;class '_ast.alias'&gt;\tasname None\tname 'os'<br>  &lt;class '_ast.alias'&gt;\tasname None\tname 'sys'<br> &lt;class '_ast.If'&gt;\tbody [&lt;_ast.Expr object at 0x9b3aaac&gt;, &lt;_ast.Expr object at 0x9b3ab6c&gt;]\tcol_offset 0\tlineno 3\torelse []\ttest &lt;_ast.Compare object at 0x9b332ac&gt;<br>  &lt;class '_ast.Compare'&gt;\tcol_offset 4\tcomparators [&lt;_ast.Str object at 0x9b3a80c&gt;]\tleft &lt;_ast.Attribute object at 0x9b3490c&gt;\tlineno 3\tops [&lt;_ast.NotEq object at 0xb7b3682c&gt;]<br>   &lt;class '_ast.Attribute'&gt;\tattr 'name'\tcol_offset 4\tctx &lt;_ast.Load object at 0xb7bb2ccc&gt;\tlineno 3\tvalue &lt;_ast.Name object at 0x9b3a10c&gt;<br>    &lt;class '_ast.Name'&gt;\tcol_offset 4\tctx &lt;_ast.Load object at 0xb7bb2ccc&gt;\tid 'os'\tlineno 3<br>     &lt;class '_ast.Load'&gt;\t<br>    &lt;class '_ast.Load'&gt;\t<br>   &lt;class '_ast.NotEq'&gt;\t<br>   &lt;class '_ast. ...\n          </div>"}, "last_serial": 786510, "releases": {"2010.01.21.ast2src": [{"comment_text": "", "digests": {"md5": "0c89fca6fc155321d7305111dbc9e500", "sha256": "e1108ce558b89dce5ffc2aad84c1fbbbee541f04682dbf938ded96af1534a35a"}, "downloads": -1, "filename": "ast2src-2010.01.21.ast2src.tar.gz", "has_sig": false, "md5_digest": "0c89fca6fc155321d7305111dbc9e500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93536, "upload_time": "2010-01-23T03:55:28", "upload_time_iso_8601": "2010-01-23T03:55:28.777067Z", "url": "https://files.pythonhosted.org/packages/46/ed/2442689c6649daafe0f23e909f58f707f214a704ce7e855be60460bee168/ast2src-2010.01.21.ast2src.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c89fca6fc155321d7305111dbc9e500", "sha256": "e1108ce558b89dce5ffc2aad84c1fbbbee541f04682dbf938ded96af1534a35a"}, "downloads": -1, "filename": "ast2src-2010.01.21.ast2src.tar.gz", "has_sig": false, "md5_digest": "0c89fca6fc155321d7305111dbc9e500", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93536, "upload_time": "2010-01-23T03:55:28", "upload_time_iso_8601": "2010-01-23T03:55:28.777067Z", "url": "https://files.pythonhosted.org/packages/46/ed/2442689c6649daafe0f23e909f58f707f214a704ce7e855be60460bee168/ast2src-2010.01.21.ast2src.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:52 2020"}