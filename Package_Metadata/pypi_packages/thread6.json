{"info": {"author": "Anh Le", "author_email": "hi@imanhle.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# thread6\nSimple parallel processing interface for python\n\n## Why?\nPython's built in parallel processing and threading library is pretty simple to implement but sometimes you just want to chuck data at a function and make it run faster\n\n## Requirements\nPython 3+\n\n## Installation\n\n## Quickstart\nUse the `threaded` decorator to turn a method into a threaded method. That's it!\n```python\n@thread6.threaded()\ndef threaded_print():\n    print(\"\")\n    return 1\n```\n\nAlternatively, use `run_threaded` function\n```python\nthread6.run_threaded(threaded_print)\n```\n\nBoth the `threaded` decorator and `run_threaded` method will return an instance of\n`ResultThread`. This allow you to optionally wait for the function to finish executing \nand get the return value. To get the return value, use `.await_output()`\n```python\nresult = threaded_print()\nresult.await_output()  # this will return 1\n```\n\nIf you have a function that needs to execute on a large list of data, use `run_chunked`\n```python\ndef update_items(items):\n    ...\n\nitems = [...]\nthread6.run_chunked(update_items, items)\n```\n`.await_output()` also work with `run_chunked` but will return a list of return values instead\n\n## Usage\n\n\n## Todo\n- [x] threaded function decorator\n- [x] run something in a separate thread function\n- [x] split data into chunk and run in separate threads\n- [ ] add way for errors to fail loudly\n- [ ] auto spawn to run fx on a set of data\n- [ ] explore multi processing?\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Haizzz/thread6", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "thread6", "package_url": "https://pypi.org/project/thread6/", "platform": "", "project_url": "https://pypi.org/project/thread6/", "project_urls": {"Homepage": "https://github.com/Haizzz/thread6"}, "release_url": "https://pypi.org/project/thread6/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A plug n play multithreading interface", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>thread6</h1>\n<p>Simple parallel processing interface for python</p>\n<h2>Why?</h2>\n<p>Python's built in parallel processing and threading library is pretty simple to implement but sometimes you just want to chuck data at a function and make it run faster</p>\n<h2>Requirements</h2>\n<p>Python 3+</p>\n<h2>Installation</h2>\n<h2>Quickstart</h2>\n<p>Use the <code>threaded</code> decorator to turn a method into a threaded method. That's it!</p>\n<pre><span class=\"nd\">@thread6</span><span class=\"o\">.</span><span class=\"n\">threaded</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">threaded_print</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n</pre>\n<p>Alternatively, use <code>run_threaded</code> function</p>\n<pre><span class=\"n\">thread6</span><span class=\"o\">.</span><span class=\"n\">run_threaded</span><span class=\"p\">(</span><span class=\"n\">threaded_print</span><span class=\"p\">)</span>\n</pre>\n<p>Both the <code>threaded</code> decorator and <code>run_threaded</code> method will return an instance of\n<code>ResultThread</code>. This allow you to optionally wait for the function to finish executing\nand get the return value. To get the return value, use <code>.await_output()</code></p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">threaded_print</span><span class=\"p\">()</span>\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">await_output</span><span class=\"p\">()</span>  <span class=\"c1\"># this will return 1</span>\n</pre>\n<p>If you have a function that needs to execute on a large list of data, use <code>run_chunked</code></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">update_items</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">thread6</span><span class=\"o\">.</span><span class=\"n\">run_chunked</span><span class=\"p\">(</span><span class=\"n\">update_items</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">)</span>\n</pre>\n<p><code>.await_output()</code> also work with <code>run_chunked</code> but will return a list of return values instead</p>\n<h2>Usage</h2>\n<h2>Todo</h2>\n<ul>\n<li>[x] threaded function decorator</li>\n<li>[x] run something in a separate thread function</li>\n<li>[x] split data into chunk and run in separate threads</li>\n<li>[ ] add way for errors to fail loudly</li>\n<li>[ ] auto spawn to run fx on a set of data</li>\n<li>[ ] explore multi processing?</li>\n</ul>\n\n          </div>"}, "last_serial": 4183484, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "d63080b4d13e6ff0edfc91f3585df86d", "sha256": "618037241f4a486940ca8e9c1f8cb0a476473c6036dc10a717c1ff5fbdabd7fc"}, "downloads": -1, "filename": "thread6-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d63080b4d13e6ff0edfc91f3585df86d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4199, "upload_time": "2018-08-18T16:35:21", "upload_time_iso_8601": "2018-08-18T16:35:21.946458Z", "url": "https://files.pythonhosted.org/packages/f0/46/3a1220d4f933c1a2b4eba2d0d9306cac0ba0d758a9c3958a4213edba6866/thread6-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3d9b27b3e686a992e607541c0fc8a8", "sha256": "ed7a398e7f4d7fcedfcbc689ed3ef11179b040ead277ba15a6b316ff7d4d1b81"}, "downloads": -1, "filename": "thread6-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7b3d9b27b3e686a992e607541c0fc8a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3583, "upload_time": "2018-08-18T16:35:23", "upload_time_iso_8601": "2018-08-18T16:35:23.366990Z", "url": "https://files.pythonhosted.org/packages/39/f2/cd7b53367c00a0e4a37c53c5b18007a50fb66f19331699c894c918230b8b/thread6-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d63080b4d13e6ff0edfc91f3585df86d", "sha256": "618037241f4a486940ca8e9c1f8cb0a476473c6036dc10a717c1ff5fbdabd7fc"}, "downloads": -1, "filename": "thread6-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d63080b4d13e6ff0edfc91f3585df86d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4199, "upload_time": "2018-08-18T16:35:21", "upload_time_iso_8601": "2018-08-18T16:35:21.946458Z", "url": "https://files.pythonhosted.org/packages/f0/46/3a1220d4f933c1a2b4eba2d0d9306cac0ba0d758a9c3958a4213edba6866/thread6-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3d9b27b3e686a992e607541c0fc8a8", "sha256": "ed7a398e7f4d7fcedfcbc689ed3ef11179b040ead277ba15a6b316ff7d4d1b81"}, "downloads": -1, "filename": "thread6-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7b3d9b27b3e686a992e607541c0fc8a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3583, "upload_time": "2018-08-18T16:35:23", "upload_time_iso_8601": "2018-08-18T16:35:23.366990Z", "url": "https://files.pythonhosted.org/packages/39/f2/cd7b53367c00a0e4a37c53c5b18007a50fb66f19331699c894c918230b8b/thread6-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:48 2020"}