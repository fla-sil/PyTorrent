{"info": {"author": "Philipp Hanslovsky, Curtis Rueden", "author_email": "hanslovskyp@janelia.hhmi.org", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/scijava/jgo.svg?branch=master)](https://travis-ci.org/scijava/jgo)\n\n# jgo: painless Java component execution\n\n![](jgo.png)\n\n## Summary\n\n[Maven](https://maven.apache.org/) is a great tool. It manages dependencies so\nthat Java projects become reusable \"building blocks\" in a much more robust way\nthan many other languages offer. And the\n[Maven Central repository](https://search.maven.org/) contains a tremendous\nwealth of code, ripe for reuse in your own projects.\n\nBut shockingly, Maven provides no easy way to actually __launch code__ from the\nbeautifully managed dependencies stored so lovingly into `~/.m2/repository`.\n\nThis project fills that gap: `jgo` launches Java code. You do not need to\ndownload or install any JARs; you just specify an \"endpoint\" consisting of a\n[Maven artifact](http://stackoverflow.com/a/2487511/1207769) identifier, plus\na main class if needed/desired, and `jgo` uses Maven to obtain and run it.\n\n## Installation\n\nThere are two implementations from which to choose! Each has pros and cons.\n\n### Prerequisites\n\n`jgo` uses `mvn` and `java` for the heavy lifting.\nThe shell script version needs some common utilities (e.g., `cat`).\nIf you are missing anything, the script will tell you.\n\n### The shell script\n\nThe `jgo.sh` shell script requires a POSIX-friendly system. It is known to\nwork on Linux, macOS, [Cygwin](https://www.cygwin.com/), Microsoft's\n[Windows Subsystem for Linux](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide),\nand [MinGW](http://www.mingw.org/) via the\n[Git for Windows](https://git-for-windows.github.io/) project.\n\n<details><summary><strong>Installing the shell script</strong></summary>\n\nJust clone this repo and symlink `jgo.sh` into your favorite `bin` directory.\n\nFor example, assuming `~/bin` is on your PATH:\n\n```\ncd\ngit clone https://github.com/scijava/jgo\ncd bin\nln -s ../jgo/jgo.sh jgo\njgo --help\n```\n\n</details>\n\n### The Python module\n\nThe `jgo/jgo.py` module requires Python. It offers a `jgo` console script,\nas well as a `jgo` module for programmatically creating endpoints.\n\n<details><summary><strong>Installing with pip</strong></summary>\n\n```\npip install jgo\n```\n\n</details>\n<details><summary><strong>Installing with conda</strong></summary>\n\n```\nconda install -c conda-forge jgo\n```\n\n</details>\n<details><summary><strong>Installing from source</strong></summary>\n\n```\ngit clone https://github.com/scijava/jgo\ncd jgo\n\n# install globally (not recommended unless using conda or other virtual environment)\npip install .\n\n# install into $HOME/.local (see pip install --help for details)\npip install --user .\n\n# install into $PREFIX\npip install --prefix=$PREFIX .\n```\n\n</details>\n\n## Usage\n\n```\nUsage: jgo [-v] [-u] [-U] [-m] <jvm-args> <endpoint> <main-args>\n\n  -v          : verbose mode flag\n  -u          : update/regenerate cached environment\n  -U          : force update from remote Maven repositories (implies -u)\n  -m          : use endpoints for dependency management (see \"Details\" below)\n  <jvm-args>  : any list of arguments to the JVM\n  <endpoint>  : the artifact(s) + main class to execute\n  <main-args> : any list of arguments to the main class\n\nThe endpoint should have one of the following formats:\n\n- groupId:artifactId\n- groupId:artifactId:version\n- groupId:artifactId:mainClass\n- groupId:artifactId:version:mainClass\n- groupId:artifactId:version:classifier:mainClass\n\nIf version is omitted, then RELEASE is used.\nIf mainClass is omitted, it is auto-detected.\nYou can also write part of a class beginning with an @ sign,\nand it will be auto-completed.\n\nMultiple artifacts can be concatenated with pluses,\nand all of them will be included on the classpath.\nHowever, you should not specify multiple main classes.\n```\n\n### Examples\n\n| Program                      | Command                                                                             |\n|-----------------------------:|:------------------------------------------------------------------------------------|\n| Jython REPL                  | `jgo org.python:jython-standalone`                                                  |\n| JRuby eval                   | `echo \"puts 'Hello Ruby'\" \\| jgo org.jruby:jruby-complete:@jruby.Main`              |\n| Groovy REPL                  | `jgo org.codehaus.groovy:groovy-groovysh:@shell.Main+commons-cli:commons-cli:1.3.1` |\n| SciJava REPL with JRuby      | `jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-jruby`            |\n| SciJava REPL with Jython     | `jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-jython`           |\n| SciJava REPL with Groovy     | `jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-groovy`           |\n| SciJava REPL with Clojure    | `jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-clojure`          |\n| SciJava REPL with JavaScript | `jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-javascript`       |\n\nNote the usage of the `+` syntax as needed to append elements to the classpath.\n\n### FAQ\n\n* __Is it fast?__\n  Endpoints are synthesized in a local cache under `~/.jgo`.\n  So invoking the same endpoint a second time is really quick.\n* __What does \"no installation\" mean?__\n  Classpath elements are [hard-linked](https://en.wikipedia.org/wiki/Hard_link)\n  into `~/.jgo` from `~/.m2/repository` rather than copied, so the `~/.jgo`\n  folder has a tiny footprint even if you execute lots of different endpoints.\n* __What if an endpoint has a new version?__\n  Pass the `-U` flag to `jgo` to rebuild the endpoint.\n  Note that unlike `mvn`, though, `jgo` does not check for updates otherwise.\n\n### Configuration\n\nYou can configure the behavior of `jgo` using the `$HOME/.jgorc` file.\n\n#### Repositories\n\nYou can define additional remote Maven repositories,\nfrom which artifacts will be retrieved. E.g.:\n\n```ini\n[repositories]\nscijava.public = https://maven.scijava.org/content/groups/public\n```\n\nIf you need more control over where artifacts come from\u2014for example, if you\nwant to use your own remote Maven repository as a mirror of Maven Central\u2014you\ncan do it using Maven's usual `~/.m2/settings.xml`; see [Using Mirrors for\nRepositories](https://maven.apache.org/guides/mini/guide-mirror-settings.html).\n\n#### Shortcuts\n\nYou can define shortcuts for launching commonly used programs:\n\n```ini\n[shortcuts]\nrepl = imagej:org.scijava.script.ScriptREPL\nimagej = net.imagej:imagej\nfiji = sc.fiji:fiji:LATEST\nscifio = io.scif:scifio-cli\n```\n\nShortcuts are substituted verbatim from the beginning of the endpoint,\nsingle-pass in the order they are defined. So e.g. now you can run:\n```\njgo repl\n```\nNote that with the `repl` shortcut above, the main class\n(`org.scijava.script.ScriptREPL`) comes from a _different_ artifact than\nthe toplevel artifact (`net.imagej:imagej`). This is intentional, so that\nall of [ImageJ](https://imagej.net/), including all of the various SciJava\n`scripting-<foo>` plugins, is included in the classpath of the REPL.\n\n#### Settings\n\nThere are a few configurable settings:\n\n```ini\n[settings]\nm2Repo = /path/to/.m2Repo (default ~/.m2/repository)\ncacheDir = /path/to/.jgo (default ~/.jgo)\nlinks = soft (options: hard, soft, none; default hard)\n```\nNote that the `jgo` cache dir can also be set via the `JGO_CACHE_DIR` environment\nvariable when using **Python** `jgo`. The precedence of reading the cache dir, from\nhighest to lowest:\n  - `JGO_CACHE_DIR` environment variable\n  - `cacheDir` in `settings` sections in `~/.jgorc`\n  - default to `~/.jgo`\n\n### Details\n\n#### Dependency management\n\nMaven has a feature whereby a project can override the versions of transitive\n(a.k.a. inherited) dependencies, via a `<dependencyManagement>` configuration.\nThe problem is: a library may then believe it depends on components at\nparticular versions as defined by its `<dependencyManagement>`, but downstream\nprojects which depend on that library will resolve to different versions.\nSee [this SO thread](https://stackoverflow.com/q/45041888/1207769) and\n[this gist](https://gist.github.com/ctrueden/d058330c8a3687317806ce8cc18332c3)\nfor full details.\n\nTo work around this issue, you can pass `-m` to jgo, which\ncauses it to add all endpoints to the synthesized POM's\n`<dependencyManagement>` section using\n[import scope](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies).\nBy doing this, the versions of transitive dependencies used in the synthesized\nproject should more precisely match those of each endpoint itself\u2014although in\nthe case of multiple endpoints concatenated via the `+` operator with\nconflicting dependency management, the earlier endpoints will win because they\nwill be declared earlier in the POM. See also\n[issue #9](https://github.com/scijava/jgo/issues/9) in the jgo issue tracker.\n\n## Alternatives\n\n* [JPM4J](https://github.com/jpm4j) (discontinued)\n* [Mop](https://github.com/chirino/mop) (unmaintained)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scijava/jgo", "keywords": "", "license": "Public domain", "maintainer": "", "maintainer_email": "", "name": "jgo", "package_url": "https://pypi.org/project/jgo/", "platform": "", "project_url": "https://pypi.org/project/jgo/", "project_urls": {"Homepage": "https://github.com/scijava/jgo"}, "release_url": "https://pypi.org/project/jgo/0.5.0/", "requires_dist": ["psutil"], "requires_python": ">=3", "summary": "Launch Java code from Python and the CLI, installation-free.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/scijava/jgo\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2416682065661d29ebc721bbc6fee0a57b3b1d9f/68747470733a2f2f7472617669732d63692e6f72672f7363696a6176612f6a676f2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>jgo: painless Java component execution</h1>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/516d7599a0368fa4b3163927c1b8864359e0d51e/6a676f2e706e67\"></p>\n<h2>Summary</h2>\n<p><a href=\"https://maven.apache.org/\" rel=\"nofollow\">Maven</a> is a great tool. It manages dependencies so\nthat Java projects become reusable \"building blocks\" in a much more robust way\nthan many other languages offer. And the\n<a href=\"https://search.maven.org/\" rel=\"nofollow\">Maven Central repository</a> contains a tremendous\nwealth of code, ripe for reuse in your own projects.</p>\n<p>But shockingly, Maven provides no easy way to actually <strong>launch code</strong> from the\nbeautifully managed dependencies stored so lovingly into <code>~/.m2/repository</code>.</p>\n<p>This project fills that gap: <code>jgo</code> launches Java code. You do not need to\ndownload or install any JARs; you just specify an \"endpoint\" consisting of a\n<a href=\"http://stackoverflow.com/a/2487511/1207769\" rel=\"nofollow\">Maven artifact</a> identifier, plus\na main class if needed/desired, and <code>jgo</code> uses Maven to obtain and run it.</p>\n<h2>Installation</h2>\n<p>There are two implementations from which to choose! Each has pros and cons.</p>\n<h3>Prerequisites</h3>\n<p><code>jgo</code> uses <code>mvn</code> and <code>java</code> for the heavy lifting.\nThe shell script version needs some common utilities (e.g., <code>cat</code>).\nIf you are missing anything, the script will tell you.</p>\n<h3>The shell script</h3>\n<p>The <code>jgo.sh</code> shell script requires a POSIX-friendly system. It is known to\nwork on Linux, macOS, <a href=\"https://www.cygwin.com/\" rel=\"nofollow\">Cygwin</a>, Microsoft's\n<a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/install_guide\" rel=\"nofollow\">Windows Subsystem for Linux</a>,\nand <a href=\"http://www.mingw.org/\" rel=\"nofollow\">MinGW</a> via the\n<a href=\"https://git-for-windows.github.io/\" rel=\"nofollow\">Git for Windows</a> project.</p>\n<details><summary><strong>Installing the shell script</strong></summary>\n<p>Just clone this repo and symlink <code>jgo.sh</code> into your favorite <code>bin</code> directory.</p>\n<p>For example, assuming <code>~/bin</code> is on your PATH:</p>\n<pre><code>cd\ngit clone https://github.com/scijava/jgo\ncd bin\nln -s ../jgo/jgo.sh jgo\njgo --help\n</code></pre>\n</details>\n<h3>The Python module</h3>\n<p>The <code>jgo/jgo.py</code> module requires Python. It offers a <code>jgo</code> console script,\nas well as a <code>jgo</code> module for programmatically creating endpoints.</p>\n<details><summary><strong>Installing with pip</strong></summary>\n<pre><code>pip install jgo\n</code></pre>\n</details>\n<details><summary><strong>Installing with conda</strong></summary>\n<pre><code>conda install -c conda-forge jgo\n</code></pre>\n</details>\n<details><summary><strong>Installing from source</strong></summary>\n<pre><code>git clone https://github.com/scijava/jgo\ncd jgo\n\n# install globally (not recommended unless using conda or other virtual environment)\npip install .\n\n# install into $HOME/.local (see pip install --help for details)\npip install --user .\n\n# install into $PREFIX\npip install --prefix=$PREFIX .\n</code></pre>\n</details>\n<h2>Usage</h2>\n<pre><code>Usage: jgo [-v] [-u] [-U] [-m] &lt;jvm-args&gt; &lt;endpoint&gt; &lt;main-args&gt;\n\n  -v          : verbose mode flag\n  -u          : update/regenerate cached environment\n  -U          : force update from remote Maven repositories (implies -u)\n  -m          : use endpoints for dependency management (see \"Details\" below)\n  &lt;jvm-args&gt;  : any list of arguments to the JVM\n  &lt;endpoint&gt;  : the artifact(s) + main class to execute\n  &lt;main-args&gt; : any list of arguments to the main class\n\nThe endpoint should have one of the following formats:\n\n- groupId:artifactId\n- groupId:artifactId:version\n- groupId:artifactId:mainClass\n- groupId:artifactId:version:mainClass\n- groupId:artifactId:version:classifier:mainClass\n\nIf version is omitted, then RELEASE is used.\nIf mainClass is omitted, it is auto-detected.\nYou can also write part of a class beginning with an @ sign,\nand it will be auto-completed.\n\nMultiple artifacts can be concatenated with pluses,\nand all of them will be included on the classpath.\nHowever, you should not specify multiple main classes.\n</code></pre>\n<h3>Examples</h3>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Program</th>\n<th align=\"left\">Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">Jython REPL</td>\n<td align=\"left\"><code>jgo org.python:jython-standalone</code></td>\n</tr>\n<tr>\n<td align=\"right\">JRuby eval</td>\n<td align=\"left\"><code>echo \"puts 'Hello Ruby'\" | jgo org.jruby:jruby-complete:@jruby.Main</code></td>\n</tr>\n<tr>\n<td align=\"right\">Groovy REPL</td>\n<td align=\"left\"><code>jgo org.codehaus.groovy:groovy-groovysh:@shell.Main+commons-cli:commons-cli:1.3.1</code></td>\n</tr>\n<tr>\n<td align=\"right\">SciJava REPL with JRuby</td>\n<td align=\"left\"><code>jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-jruby</code></td>\n</tr>\n<tr>\n<td align=\"right\">SciJava REPL with Jython</td>\n<td align=\"left\"><code>jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-jython</code></td>\n</tr>\n<tr>\n<td align=\"right\">SciJava REPL with Groovy</td>\n<td align=\"left\"><code>jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-groovy</code></td>\n</tr>\n<tr>\n<td align=\"right\">SciJava REPL with Clojure</td>\n<td align=\"left\"><code>jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-clojure</code></td>\n</tr>\n<tr>\n<td align=\"right\">SciJava REPL with JavaScript</td>\n<td align=\"left\"><code>jgo org.scijava:scijava-common:@ScriptREPL+org.scijava:scripting-javascript</code></td>\n</tr></tbody></table>\n<p>Note the usage of the <code>+</code> syntax as needed to append elements to the classpath.</p>\n<h3>FAQ</h3>\n<ul>\n<li><strong>Is it fast?</strong>\nEndpoints are synthesized in a local cache under <code>~/.jgo</code>.\nSo invoking the same endpoint a second time is really quick.</li>\n<li><strong>What does \"no installation\" mean?</strong>\nClasspath elements are <a href=\"https://en.wikipedia.org/wiki/Hard_link\" rel=\"nofollow\">hard-linked</a>\ninto <code>~/.jgo</code> from <code>~/.m2/repository</code> rather than copied, so the <code>~/.jgo</code>\nfolder has a tiny footprint even if you execute lots of different endpoints.</li>\n<li><strong>What if an endpoint has a new version?</strong>\nPass the <code>-U</code> flag to <code>jgo</code> to rebuild the endpoint.\nNote that unlike <code>mvn</code>, though, <code>jgo</code> does not check for updates otherwise.</li>\n</ul>\n<h3>Configuration</h3>\n<p>You can configure the behavior of <code>jgo</code> using the <code>$HOME/.jgorc</code> file.</p>\n<h4>Repositories</h4>\n<p>You can define additional remote Maven repositories,\nfrom which artifacts will be retrieved. E.g.:</p>\n<pre><span class=\"k\">[repositories]</span>\n<span class=\"na\">scijava.public</span> <span class=\"o\">=</span> <span class=\"s\">https://maven.scijava.org/content/groups/public</span>\n</pre>\n<p>If you need more control over where artifacts come from\u2014for example, if you\nwant to use your own remote Maven repository as a mirror of Maven Central\u2014you\ncan do it using Maven's usual <code>~/.m2/settings.xml</code>; see <a href=\"https://maven.apache.org/guides/mini/guide-mirror-settings.html\" rel=\"nofollow\">Using Mirrors for\nRepositories</a>.</p>\n<h4>Shortcuts</h4>\n<p>You can define shortcuts for launching commonly used programs:</p>\n<pre><span class=\"k\">[shortcuts]</span>\n<span class=\"na\">repl</span> <span class=\"o\">=</span> <span class=\"s\">imagej:org.scijava.script.ScriptREPL</span>\n<span class=\"na\">imagej</span> <span class=\"o\">=</span> <span class=\"s\">net.imagej:imagej</span>\n<span class=\"na\">fiji</span> <span class=\"o\">=</span> <span class=\"s\">sc.fiji:fiji:LATEST</span>\n<span class=\"na\">scifio</span> <span class=\"o\">=</span> <span class=\"s\">io.scif:scifio-cli</span>\n</pre>\n<p>Shortcuts are substituted verbatim from the beginning of the endpoint,\nsingle-pass in the order they are defined. So e.g. now you can run:</p>\n<pre><code>jgo repl\n</code></pre>\n<p>Note that with the <code>repl</code> shortcut above, the main class\n(<code>org.scijava.script.ScriptREPL</code>) comes from a <em>different</em> artifact than\nthe toplevel artifact (<code>net.imagej:imagej</code>). This is intentional, so that\nall of <a href=\"https://imagej.net/\" rel=\"nofollow\">ImageJ</a>, including all of the various SciJava\n<code>scripting-&lt;foo&gt;</code> plugins, is included in the classpath of the REPL.</p>\n<h4>Settings</h4>\n<p>There are a few configurable settings:</p>\n<pre><span class=\"k\">[settings]</span>\n<span class=\"na\">m2Repo</span> <span class=\"o\">=</span> <span class=\"s\">/path/to/.m2Repo (default ~/.m2/repository)</span>\n<span class=\"na\">cacheDir</span> <span class=\"o\">=</span> <span class=\"s\">/path/to/.jgo (default ~/.jgo)</span>\n<span class=\"na\">links</span> <span class=\"o\">=</span> <span class=\"s\">soft (options: hard, soft, none; default hard)</span>\n</pre>\n<p>Note that the <code>jgo</code> cache dir can also be set via the <code>JGO_CACHE_DIR</code> environment\nvariable when using <strong>Python</strong> <code>jgo</code>. The precedence of reading the cache dir, from\nhighest to lowest:</p>\n<ul>\n<li><code>JGO_CACHE_DIR</code> environment variable</li>\n<li><code>cacheDir</code> in <code>settings</code> sections in <code>~/.jgorc</code></li>\n<li>default to <code>~/.jgo</code></li>\n</ul>\n<h3>Details</h3>\n<h4>Dependency management</h4>\n<p>Maven has a feature whereby a project can override the versions of transitive\n(a.k.a. inherited) dependencies, via a <code>&lt;dependencyManagement&gt;</code> configuration.\nThe problem is: a library may then believe it depends on components at\nparticular versions as defined by its <code>&lt;dependencyManagement&gt;</code>, but downstream\nprojects which depend on that library will resolve to different versions.\nSee <a href=\"https://stackoverflow.com/q/45041888/1207769\" rel=\"nofollow\">this SO thread</a> and\n<a href=\"https://gist.github.com/ctrueden/d058330c8a3687317806ce8cc18332c3\" rel=\"nofollow\">this gist</a>\nfor full details.</p>\n<p>To work around this issue, you can pass <code>-m</code> to jgo, which\ncauses it to add all endpoints to the synthesized POM's\n<code>&lt;dependencyManagement&gt;</code> section using\n<a href=\"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies\" rel=\"nofollow\">import scope</a>.\nBy doing this, the versions of transitive dependencies used in the synthesized\nproject should more precisely match those of each endpoint itself\u2014although in\nthe case of multiple endpoints concatenated via the <code>+</code> operator with\nconflicting dependency management, the earlier endpoints will win because they\nwill be declared earlier in the POM. See also\n<a href=\"https://github.com/scijava/jgo/issues/9\" rel=\"nofollow\">issue #9</a> in the jgo issue tracker.</p>\n<h2>Alternatives</h2>\n<ul>\n<li><a href=\"https://github.com/jpm4j\" rel=\"nofollow\">JPM4J</a> (discontinued)</li>\n<li><a href=\"https://github.com/chirino/mop\" rel=\"nofollow\">Mop</a> (unmaintained)</li>\n</ul>\n\n          </div>"}, "last_serial": 6266609, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bb48f3a87f98b36de635d741eaba1276", "sha256": "af58189358467899e473b0bc4cd5ad6a7217313d3820f5a8a5659cd54e37712c"}, "downloads": -1, "filename": "jgo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb48f3a87f98b36de635d741eaba1276", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11758, "upload_time": "2018-11-17T05:07:00", "upload_time_iso_8601": "2018-11-17T05:07:00.249248Z", "url": "https://files.pythonhosted.org/packages/6c/21/dbe2aed0821219183c6581bdea8e70d6908c2581b51f8576a7203b87288a/jgo-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0a63d59ade3d21dda53fad6f97a78e3", "sha256": "880d880badc2b3ec88ed15f063be3fe12c83eec5c951b743b182b66d81977188"}, "downloads": -1, "filename": "jgo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f0a63d59ade3d21dda53fad6f97a78e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 15327, "upload_time": "2018-11-17T05:07:03", "upload_time_iso_8601": "2018-11-17T05:07:03.296054Z", "url": "https://files.pythonhosted.org/packages/53/79/ed76f1b53d64474e9b8cba96e6bbf547ed5ce39e2ff324a4d409112e95e3/jgo-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "36abe4e0d7361f48c206e2b65fc965e9", "sha256": "4b71151ce4c98b286280774867afebce09a33bb479ce3d81668f7865298edd43"}, "downloads": -1, "filename": "jgo-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36abe4e0d7361f48c206e2b65fc965e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11995, "upload_time": "2018-11-27T17:46:10", "upload_time_iso_8601": "2018-11-27T17:46:10.383899Z", "url": "https://files.pythonhosted.org/packages/6e/2c/08febbd4221776bdad014478e0be5bcb4f7fe4db11a02dedad726534bd0d/jgo-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7d204c2ed4d66c2944bc8debb274cc5", "sha256": "440d23946d5d91b9855b8329373a7b2b66d77231486cbb82542aed7177122a40"}, "downloads": -1, "filename": "jgo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f7d204c2ed4d66c2944bc8debb274cc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 15708, "upload_time": "2018-11-27T17:46:12", "upload_time_iso_8601": "2018-11-27T17:46:12.123707Z", "url": "https://files.pythonhosted.org/packages/fb/57/3bf6556915aaa6e0575c6ca420d0990ce7929735049a01a351554ad818a1/jgo-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b140c0f861442d56090f23ef013b3eda", "sha256": "bffd3427666677cd6e98b37315333d307d9a348f212418d8feaf87c4abbfa707"}, "downloads": -1, "filename": "jgo-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b140c0f861442d56090f23ef013b3eda", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16268, "upload_time": "2019-01-16T17:39:24", "upload_time_iso_8601": "2019-01-16T17:39:24.086262Z", "url": "https://files.pythonhosted.org/packages/59/ac/4bf59049ac5eb20c9f82f9e620359da735f1cd6b094365cc88a098903e0d/jgo-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "25f702747a9f6001a7bde4bf596eec44", "sha256": "2a94536a47cfcf88f15becf3f71b4020df988d72e007eb9303b79342b6f6d00d"}, "downloads": -1, "filename": "jgo-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "25f702747a9f6001a7bde4bf596eec44", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3", "size": 13832, "upload_time": "2019-06-11T14:52:43", "upload_time_iso_8601": "2019-06-11T14:52:43.082182Z", "url": "https://files.pythonhosted.org/packages/b5/1f/d6f57c8b3ba30247f9cf88a8c650fca7a5fdec8231f49ad03af2a251d7dc/jgo-0.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d247a49e201f45ec54a0eec88f656008", "sha256": "ac4e97b740da4e739db118355b8e4f53df2a3ab9f94350dc1c2e7c7e4fda544d"}, "downloads": -1, "filename": "jgo-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d247a49e201f45ec54a0eec88f656008", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 17373, "upload_time": "2019-06-11T14:52:44", "upload_time_iso_8601": "2019-06-11T14:52:44.834102Z", "url": "https://files.pythonhosted.org/packages/98/98/2d0ead6ddf3eda5d9cea001f516ac64ddd096e16af0241285881a0da0e1b/jgo-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "285a6dbd6c2db4e021ec26365246d241", "sha256": "a8eb35610905f337a288db9763801b420a0e1ed1f123a2bddff78d51ad1499ac"}, "downloads": -1, "filename": "jgo-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "285a6dbd6c2db4e021ec26365246d241", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 13833, "upload_time": "2019-10-30T18:28:07", "upload_time_iso_8601": "2019-10-30T18:28:07.632404Z", "url": "https://files.pythonhosted.org/packages/80/39/4636af69b50e993c7023ab1845fde25db264aa8a35a6315976ad80ad04b8/jgo-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eec320d13a14c8983648d234bcffe1ae", "sha256": "0fa63c9cf5f57010e0c150f94dda313e6139287c57dfa325e3af914965ee10ed"}, "downloads": -1, "filename": "jgo-0.5.0.tar.gz", "has_sig": false, "md5_digest": "eec320d13a14c8983648d234bcffe1ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16761, "upload_time": "2019-10-30T18:28:09", "upload_time_iso_8601": "2019-10-30T18:28:09.026780Z", "url": "https://files.pythonhosted.org/packages/4f/64/41cace9c0aa04818bd7d17caba12c1d19dd192d5a25cbb3cb5dfeb79c469/jgo-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "285a6dbd6c2db4e021ec26365246d241", "sha256": "a8eb35610905f337a288db9763801b420a0e1ed1f123a2bddff78d51ad1499ac"}, "downloads": -1, "filename": "jgo-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "285a6dbd6c2db4e021ec26365246d241", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 13833, "upload_time": "2019-10-30T18:28:07", "upload_time_iso_8601": "2019-10-30T18:28:07.632404Z", "url": "https://files.pythonhosted.org/packages/80/39/4636af69b50e993c7023ab1845fde25db264aa8a35a6315976ad80ad04b8/jgo-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eec320d13a14c8983648d234bcffe1ae", "sha256": "0fa63c9cf5f57010e0c150f94dda313e6139287c57dfa325e3af914965ee10ed"}, "downloads": -1, "filename": "jgo-0.5.0.tar.gz", "has_sig": false, "md5_digest": "eec320d13a14c8983648d234bcffe1ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16761, "upload_time": "2019-10-30T18:28:09", "upload_time_iso_8601": "2019-10-30T18:28:09.026780Z", "url": "https://files.pythonhosted.org/packages/4f/64/41cace9c0aa04818bd7d17caba12c1d19dd192d5a25cbb3cb5dfeb79c469/jgo-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:46 2020"}