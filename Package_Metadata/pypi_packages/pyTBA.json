{"info": {"author": "Wes Jordan", "author_email": "wes@wesj.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "# pyTBA\nPython 3 Blue Alliance API Layer for parsing FIRST Robotics Competition event data.\nhttps://www.thebluealliance.com/\n\n## Features:\n* Simple and lightweight API for downloading and parsing BlueAlliance data\n* Data caching faster performance\n* OPR / Individual Stats calculation\n\n## Adding it to your code:\nTo install with `pip`:\n```bash\npip install pyTBA\n```\n\nTo add PyTBA to your project, import the `pytba.api` module, and set an app id:\n\n```python\nfrom pytba import api as tba\n\ntba.set_api_key(\"<Your Name>\", \"<App Name>\", \"<App Version>\")\n```\n## Basic Usage:\nThe most basic usage is to make a query to an arbitrary URL in the TBA API.\n This is done by:\n ```python\n tba.tba_get('relative/url/goes/here')\n ```\n PyTBA makes a request to the TBA API (https://www.thebluealliance.com/api/v2/)\n  and returns the response, stored as a `dict`. (See [TBA API docs](https://www.thebluealliance.com/apidocs) for more information about keys)\n\n PyTBA can also retrieve data for entire events:\n ```python\n    tba.event_get('<Event Code>')\n ```\n This returns an `Event` object, which groups together location, team, match, awards, and rankings data.\n For example, to retrieve a list of `match` models from an `Event`:\n ```python\n    event = tba.event_get('2016chcmp')\n    matches = event.matches\n ```\n\n More advanced usage can be found in the documentation in the source code.\n\n##Modules required:\n* `requests`\n* `cachecontrol`\n* `dpath`\n* `numpy` - for OPR calculation\n\n###Note about older versions:\nIf you are updating from an older version (with the single blualliance.py file), be aware that the package structure has become more modularized. The core API code is now in the `pytba.api` module. The `Event` class is now under `pytba.models`. The decorators and utility methods are now under `pytba.util`, and OPR calcuation is now under `pytba.stat`. Check out [the init release](https://github.com/Thing342/pyTBA/releases/tag/init) if you need to clone the older code.\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Thing342/pyTBA", "keywords": "Python implementation of Blue Alliance API for FRC", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyTBA", "package_url": "https://pypi.org/project/pyTBA/", "platform": "", "project_url": "https://pypi.org/project/pyTBA/", "project_urls": {"Homepage": "https://github.com/Thing342/pyTBA"}, "release_url": "https://pypi.org/project/pyTBA/1.2.1/", "requires_dist": ["cachecontrol", "dpath", "numpy", "requests"], "requires_python": "", "summary": "Python implementation for The Blue Alliance API", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pyTBA<br>Python 3 Blue Alliance API Layer for parsing FIRST Robotics Competition event data.<br>https://www.thebluealliance.com/<br><br>## Features:<br>* Simple and lightweight API for downloading and parsing BlueAlliance data<br>* Data caching faster performance<br>* OPR / Individual Stats calculation<br><br>## Adding it to your code:<br>To install with `pip`:<br>```bash<br>pip install pyTBA<br>```<br><br>To add PyTBA to your project, import the `pytba.api` module, and set an app id:<br><br>```python<br>from pytba import api as tba<br><br>tba.set_api_key(\"&lt;Your Name&gt;\", \"&lt;App Name&gt;\", \"&lt;App Version&gt;\")<br>```<br>## Basic Usage:<br>The most basic usage is to make a query to an arbitrary URL in the TBA API.<br> This is done by:<br> ```python<br> tba.tba_get('relative/url/goes/here')<br> ```<br> PyTBA makes a request to the TBA API (https://www.thebluealliance.com/api/v2/)<br>  and returns the response, stored as a `dict`. (See [TBA API docs](https://www.thebluealliance.com/apidocs) for more information about keys)<br><br> PyTBA can also retrieve data for entire events:<br> ```python<br>    tba.event_get('&lt;Event Code&gt;')<br> ```<br> This returns an `Event` object, which groups together location, team, match, awards, and rankings data.<br> For example, to retrieve a list of `match` models from an `Event`:<br> ```python<br>    event = tba.event_get('2016chcmp')<br>    matches = event.matches<br> ```<br><br> More advanced usage can be found in the documentation in the source code.<br><br>##Modules required:<br>* `requests`<br>* `cachecontrol`<br>* `dpath`<br>* `numpy` - for OPR calculation<br><br>###Note about older versions:<br>If you are updating from an older version (with the single blualliance.py file), be aware that the package structure has become more modularized. The core API code is now in the `pytba.api` module. The `Event` class is now under `pytba.models`. The decorators and utility methods are now under `pytba.util`, and OPR calcuation is now under `pytba.stat`. Check out [the init release](https://github.com/Thing342/pyTBA/releases/tag/init) if you need to clone the older code.<br><br><br><br>\n          </div>"}, "last_serial": 2728608, "releases": {"1.1.1b1": [{"comment_text": "", "digests": {"md5": "dda8d889dbde5092d9f81da1484738c2", "sha256": "ab074848cc90a1bf782518b1256136c9c04b30f426ebf6a68171b5ece9fc8b33"}, "downloads": -1, "filename": "pyTBA-1.1.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "dda8d889dbde5092d9f81da1484738c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14559, "upload_time": "2017-02-05T17:03:23", "upload_time_iso_8601": "2017-02-05T17:03:23.284080Z", "url": "https://files.pythonhosted.org/packages/b1/e6/c6236aa2b6081d75f6b89d1a78984ce381e24e68f05f98b5e47f918a18fb/pyTBA-1.1.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "595f04e4b1a01fd98acb7b7370f8ddcf", "sha256": "2637a384b696fc20ff5063cc592b81c820baf1396c2fd06c5d9dd926df8b4ab3"}, "downloads": -1, "filename": "pyTBA-1.1.1b1.tar.gz", "has_sig": false, "md5_digest": "595f04e4b1a01fd98acb7b7370f8ddcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10618, "upload_time": "2017-02-05T17:03:25", "upload_time_iso_8601": "2017-02-05T17:03:25.210155Z", "url": "https://files.pythonhosted.org/packages/8f/7b/83a1f129dcdd5f49896f87f8650bc5411b9feda27fe12c82334103f45ccd/pyTBA-1.1.1b1.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "de690d1d23b4b522443392bd781b8c9e", "sha256": "f861bb7e59435fbcabc7615e41ee2280d3f6f2bdbee8df34efba2c8054e9d208"}, "downloads": -1, "filename": "pyTBA-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de690d1d23b4b522443392bd781b8c9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17584, "upload_time": "2017-03-24T16:21:55", "upload_time_iso_8601": "2017-03-24T16:21:55.355497Z", "url": "https://files.pythonhosted.org/packages/c8/6d/eac02fb5fb9ee9b25da65270732cc4a02f183ed8dc0af38bf975b7c0544e/pyTBA-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ed0c0c9bff35b7dc0bb752fc3ec6d8f", "sha256": "d35ec5adb3c52719863f43debd966e713e759d5c6534ac220d0258ef859b5a1f"}, "downloads": -1, "filename": "pyTBA-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5ed0c0c9bff35b7dc0bb752fc3ec6d8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12125, "upload_time": "2017-03-24T16:21:56", "upload_time_iso_8601": "2017-03-24T16:21:56.530892Z", "url": "https://files.pythonhosted.org/packages/b4/38/7d30febcdde6acdf4e25ad937be428bea887c95844916ce5dfabf96e5803/pyTBA-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "de690d1d23b4b522443392bd781b8c9e", "sha256": "f861bb7e59435fbcabc7615e41ee2280d3f6f2bdbee8df34efba2c8054e9d208"}, "downloads": -1, "filename": "pyTBA-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "de690d1d23b4b522443392bd781b8c9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17584, "upload_time": "2017-03-24T16:21:55", "upload_time_iso_8601": "2017-03-24T16:21:55.355497Z", "url": "https://files.pythonhosted.org/packages/c8/6d/eac02fb5fb9ee9b25da65270732cc4a02f183ed8dc0af38bf975b7c0544e/pyTBA-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ed0c0c9bff35b7dc0bb752fc3ec6d8f", "sha256": "d35ec5adb3c52719863f43debd966e713e759d5c6534ac220d0258ef859b5a1f"}, "downloads": -1, "filename": "pyTBA-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5ed0c0c9bff35b7dc0bb752fc3ec6d8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12125, "upload_time": "2017-03-24T16:21:56", "upload_time_iso_8601": "2017-03-24T16:21:56.530892Z", "url": "https://files.pythonhosted.org/packages/b4/38/7d30febcdde6acdf4e25ad937be428bea887c95844916ce5dfabf96e5803/pyTBA-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:37 2020"}