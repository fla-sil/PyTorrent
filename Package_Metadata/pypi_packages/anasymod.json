{"info": {"author": "Gabriel Rutsch, Steven Herbst, Shivani Saravanan", "author_email": "gabriel.rutsch@infineon.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"], "description": "# anasymod\n[![BuildKite status](https://badge.buildkite.com/7f10348afca3b631bbbb2175919b9039101c2a5e55c3371460.svg?branch=master)](https://buildkite.com/stanford-aha/anasymod)\n[![Code Coverage](https://codecov.io/gh/sgherbst/anasymod/branch/master/graph/badge.svg)](https://codecov.io/gh/sgherbst/anasymod)\n[![License:BSD-3-Clause](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n**anasymod** is a tool for running FPGA emulations of mixed-signal systems.  It supports digital blocks described with Verilog or VHDL and synthesizable analog models created using [msdsl](https://github.com/sgherbst/msdsl) and [svreal](https://github.com/sgherbst/svreal).\n\n# Installation\n\n```shell\n> pip install anasymod\n```\n\nIf you get a permissions error when running one of the **pip** commands, you can try adding the **--user** flag to the **pip** command.  This will cause **pip** to install packages in your user directory rather than to a system-wide location.\n\nCheck to see if the **anasymod** command-line script is accessible by running:\n```shell\n> anasymod -h\n```\n\nIf the **anasymod** script isn't found, then you'll have to add the directory containing it to the path.  On Windows, a typical location is **C:\\\\Python3\\*\\\\Scripts**, while on Linux or macOS you might want to check **~/.local/bin** (particularly if you used the **--user** flag).\n\n# Prerequites to run the examples\n\nThe examples included with **anasymod** use [Icarus Verilog](http://iverilog.icarus.com) for running simulations, [Xilinx Vivado](https://www.xilinx.com/products/design-tools/vivado.html) for running synthesis and place-and-route, and [GTKWave](http://gtkwave.sourceforge.net) for viewing the simulation and emulation results.  The instructions for setting up these tools are included below for various platforms.\n\n## Windows\n\nInstall Xilinx Vivado by going to the [downloads page](https://www.xilinx.com/support/download.html).  Scroll to the latest version of the \"Full Product Installation\", and download the Windows self-extracting web installer.  Launch the installer and follow the instructions.  You'll need a Xilinx account (free), and will have to select a license, although the free WebPACK license option is fine you're just planning to work with small FPGAs like the one on the Pynq-Z1 board.\n\nGTKwave and Icarus Verilog can be installed at the same time using the latest Icarus binary [here](http://bleyer.org/icarus/).\n\n## Linux\n\nInstall Xilinx Vivado by going to the [downloads page](https://www.xilinx.com/support/download.html).  Scroll to the latest version of the \"Full Product Installation\", and download the Linux self-extracting web installer.  Then, in a terminal:\n\n```shell\n> sudo ./Xilinx_Vivado_SDK_Web_*.bin\n```\n\nA GUI will pop up and guide you through the rest of the installation.  Note that you'll need a Xilinx account (free), and that you can select the free WebPACK license option if you're planning to work with relatively small FPGAs like the one on the Pynq-Z1 board.\n\nNext, the Xilinx cable drivers must be installed ([AR #66440](https://www.xilinx.com/support/answers/66440.html)):\n```shell\n> cd <YOUR_XILINX_INSTALL>/data/xicom/cable_drivers/lin(32|64)/install_script/install_drivers\n> sudo ./install_drivers\n```\n\nFinally, some permissions cleanup is required ([AR #62240](https://www.xilinx.com/support/answers/62240.html))\n\n```shell\n> cd ~/.Xilinx/Vivado\n> sudo chown -R $USER *\n> sudo chmod -R 777 *\n> sudo chgrp -R $USER *\n```\n\nInstalling GTKWave and Icarus Verilog is much simpler; just run the following in a terminal:\n```shell\n> sudo apt-get install gtkwave iverilog\n```\n\n## macOS\n\nUnfortunately Xilinx Vivado does not run natively on macOS.  But running Windows or Linux through a virtual machine on macOS should work.\n\n## Running the Simulation Example\n\nFrom within the folder **anasymod/tests**, run\n\n```shell\n> anasymod -i buck --models --sim --view\n```\n\nThis will generate a synthesizable model for a buck converter, run a simulation, and display the results.\n\n## Running the Emulation Example\n\nFor this test, you'll need a [Pynq-Z1](https://store.digilentinc.com/pynq-z1-python-productivity-for-zynq-7000-arm-fpga-soc/) board.\n\n1. To start, make sure that your board is set up correctly:\n    1. Jumper JP4 should be set for \"JTAG\"\n    2. Jumper \"JP5\" should be set for \"USB\"\n2. Plug the Pynq board into your computer using a micro USB cable.\n3. Move the Pynq board power switch to \"ON\"\n4. Go to the folder **anasymod/tests** and run the following command.  It will take ~10 min to build the bitstream.\n```shell\n> anasymod -i buck --models --build\n```\n5. Run the emulation with the following command:\n```shell\n> anasymod -i buck --emulate\n```\n6. View the results with the following command:\n```shell\n> anasymod -i buck --view\n```\n7. Note that you can adjust the emulation time using the --start_time and/or --stop_time options:\n```shell\n> anasymod -i buck --emulate --start_time 1.23e-6 --stop_time 4.56e-6\n```\n\n## Contributing\n\nTo improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with Infineon Technologies AG under Gabriel.Rutsch@infineon.com.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sgherbst/anasymod/archive/v0.2.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sgherbst/anasymod", "keywords": "analog,mixed-signal,mixed signal,vivado,xcelium,iverilog,icarus-verilog,icarus verilog,generator,verilog,system-verilog,system verilog,emulation,fpga", "license": "BSD 3-Clause \"New\" or \"Revised\" License", "maintainer": "", "maintainer_email": "", "name": "anasymod", "package_url": "https://pypi.org/project/anasymod/", "platform": "", "project_url": "https://pypi.org/project/anasymod/", "project_urls": {"Download": "https://github.com/sgherbst/anasymod/archive/v0.2.2.tar.gz", "Homepage": "https://github.com/sgherbst/anasymod"}, "release_url": "https://pypi.org/project/anasymod/0.2.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Tool for running mixed-signal emulations on FPGAs", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>anasymod</h1>\n<p><a href=\"https://buildkite.com/stanford-aha/anasymod\" rel=\"nofollow\"><img alt=\"BuildKite status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4b7f48b01b5ff12868ea408a5a19bb5d4b12e21/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f37663130333438616663613362363331626262623231373539313962393033393130316332613565353563333337313436302e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/sgherbst/anasymod\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/952461df5c855803f1a63795aaf2c7a2792964ef/68747470733a2f2f636f6465636f762e696f2f67682f73676865726273742f616e6173796d6f642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License:BSD-3-Clause\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a></p>\n<p><strong>anasymod</strong> is a tool for running FPGA emulations of mixed-signal systems.  It supports digital blocks described with Verilog or VHDL and synthesizable analog models created using <a href=\"https://github.com/sgherbst/msdsl\" rel=\"nofollow\">msdsl</a> and <a href=\"https://github.com/sgherbst/svreal\" rel=\"nofollow\">svreal</a>.</p>\n<h1>Installation</h1>\n<pre>&gt; pip install anasymod\n</pre>\n<p>If you get a permissions error when running one of the <strong>pip</strong> commands, you can try adding the <strong>--user</strong> flag to the <strong>pip</strong> command.  This will cause <strong>pip</strong> to install packages in your user directory rather than to a system-wide location.</p>\n<p>Check to see if the <strong>anasymod</strong> command-line script is accessible by running:</p>\n<pre>&gt; anasymod -h\n</pre>\n<p>If the <strong>anasymod</strong> script isn't found, then you'll have to add the directory containing it to the path.  On Windows, a typical location is <strong>C:\\Python3*\\Scripts</strong>, while on Linux or macOS you might want to check <strong>~/.local/bin</strong> (particularly if you used the <strong>--user</strong> flag).</p>\n<h1>Prerequites to run the examples</h1>\n<p>The examples included with <strong>anasymod</strong> use <a href=\"http://iverilog.icarus.com\" rel=\"nofollow\">Icarus Verilog</a> for running simulations, <a href=\"https://www.xilinx.com/products/design-tools/vivado.html\" rel=\"nofollow\">Xilinx Vivado</a> for running synthesis and place-and-route, and <a href=\"http://gtkwave.sourceforge.net\" rel=\"nofollow\">GTKWave</a> for viewing the simulation and emulation results.  The instructions for setting up these tools are included below for various platforms.</p>\n<h2>Windows</h2>\n<p>Install Xilinx Vivado by going to the <a href=\"https://www.xilinx.com/support/download.html\" rel=\"nofollow\">downloads page</a>.  Scroll to the latest version of the \"Full Product Installation\", and download the Windows self-extracting web installer.  Launch the installer and follow the instructions.  You'll need a Xilinx account (free), and will have to select a license, although the free WebPACK license option is fine you're just planning to work with small FPGAs like the one on the Pynq-Z1 board.</p>\n<p>GTKwave and Icarus Verilog can be installed at the same time using the latest Icarus binary <a href=\"http://bleyer.org/icarus/\" rel=\"nofollow\">here</a>.</p>\n<h2>Linux</h2>\n<p>Install Xilinx Vivado by going to the <a href=\"https://www.xilinx.com/support/download.html\" rel=\"nofollow\">downloads page</a>.  Scroll to the latest version of the \"Full Product Installation\", and download the Linux self-extracting web installer.  Then, in a terminal:</p>\n<pre>&gt; sudo ./Xilinx_Vivado_SDK_Web_*.bin\n</pre>\n<p>A GUI will pop up and guide you through the rest of the installation.  Note that you'll need a Xilinx account (free), and that you can select the free WebPACK license option if you're planning to work with relatively small FPGAs like the one on the Pynq-Z1 board.</p>\n<p>Next, the Xilinx cable drivers must be installed (<a href=\"https://www.xilinx.com/support/answers/66440.html\" rel=\"nofollow\">AR #66440</a>):</p>\n<pre>&gt; <span class=\"nb\">cd</span> &lt;YOUR_XILINX_INSTALL&gt;/data/xicom/cable_drivers/lin<span class=\"o\">(</span><span class=\"m\">32</span><span class=\"p\">|</span><span class=\"m\">64</span><span class=\"o\">)</span>/install_script/install_drivers\n&gt; sudo ./install_drivers\n</pre>\n<p>Finally, some permissions cleanup is required (<a href=\"https://www.xilinx.com/support/answers/62240.html\" rel=\"nofollow\">AR #62240</a>)</p>\n<pre>&gt; <span class=\"nb\">cd</span> ~/.Xilinx/Vivado\n&gt; sudo chown -R <span class=\"nv\">$USER</span> *\n&gt; sudo chmod -R <span class=\"m\">777</span> *\n&gt; sudo chgrp -R <span class=\"nv\">$USER</span> *\n</pre>\n<p>Installing GTKWave and Icarus Verilog is much simpler; just run the following in a terminal:</p>\n<pre>&gt; sudo apt-get install gtkwave iverilog\n</pre>\n<h2>macOS</h2>\n<p>Unfortunately Xilinx Vivado does not run natively on macOS.  But running Windows or Linux through a virtual machine on macOS should work.</p>\n<h2>Running the Simulation Example</h2>\n<p>From within the folder <strong>anasymod/tests</strong>, run</p>\n<pre>&gt; anasymod -i buck --models --sim --view\n</pre>\n<p>This will generate a synthesizable model for a buck converter, run a simulation, and display the results.</p>\n<h2>Running the Emulation Example</h2>\n<p>For this test, you'll need a <a href=\"https://store.digilentinc.com/pynq-z1-python-productivity-for-zynq-7000-arm-fpga-soc/\" rel=\"nofollow\">Pynq-Z1</a> board.</p>\n<ol>\n<li>To start, make sure that your board is set up correctly:\n<ol>\n<li>Jumper JP4 should be set for \"JTAG\"</li>\n<li>Jumper \"JP5\" should be set for \"USB\"</li>\n</ol>\n</li>\n<li>Plug the Pynq board into your computer using a micro USB cable.</li>\n<li>Move the Pynq board power switch to \"ON\"</li>\n<li>Go to the folder <strong>anasymod/tests</strong> and run the following command.  It will take ~10 min to build the bitstream.</li>\n</ol>\n<pre>&gt; anasymod -i buck --models --build\n</pre>\n<ol>\n<li>Run the emulation with the following command:</li>\n</ol>\n<pre>&gt; anasymod -i buck --emulate\n</pre>\n<ol>\n<li>View the results with the following command:</li>\n</ol>\n<pre>&gt; anasymod -i buck --view\n</pre>\n<ol>\n<li>Note that you can adjust the emulation time using the --start_time and/or --stop_time options:</li>\n</ol>\n<pre>&gt; anasymod -i buck --emulate --start_time <span class=\"m\">1</span>.23e-6 --stop_time <span class=\"m\">4</span>.56e-6\n</pre>\n<h2>Contributing</h2>\n<p>To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with Infineon Technologies AG under <a href=\"mailto:Gabriel.Rutsch@infineon.com\">Gabriel.Rutsch@infineon.com</a>.</p>\n\n          </div>"}, "last_serial": 6840012, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "025a282ddbea150429ec5fca95dd1230", "sha256": "ae60cfa4caae50b629560f0cce9c9a1c0017b8a6f73d1069e4bace88a2b3882c"}, "downloads": -1, "filename": "anasymod-0.1.1.tar.gz", "has_sig": false, "md5_digest": "025a282ddbea150429ec5fca95dd1230", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 36490, "upload_time": "2020-01-17T00:07:36", "upload_time_iso_8601": "2020-01-17T00:07:36.750565Z", "url": "https://files.pythonhosted.org/packages/d0/de/7f22c3122ef3d3c39b4d51a1d2842a8443064574687d4231cc3c639627ad/anasymod-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "de52ccb033360c03d1fce8b8aaa9888e", "sha256": "a1746f50da382e2021d0f7bde6156795ce3e251fe6d3971171187f3e0a297ece"}, "downloads": -1, "filename": "anasymod-0.1.2.tar.gz", "has_sig": false, "md5_digest": "de52ccb033360c03d1fce8b8aaa9888e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 36500, "upload_time": "2020-01-17T00:25:07", "upload_time_iso_8601": "2020-01-17T00:25:07.351631Z", "url": "https://files.pythonhosted.org/packages/c8/55/ec567e8d6483d1af3610a8b68dca9dc2b23a8d15e3d856a0d8e77f63e5f6/anasymod-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "3c43238e68feb9823bb56b75c510ec2a", "sha256": "8ad87426d2736d3a932cbea85b77c486207f5e7f0813598c5cce3d044d3647d0"}, "downloads": -1, "filename": "anasymod-0.1.3.tar.gz", "has_sig": false, "md5_digest": "3c43238e68feb9823bb56b75c510ec2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 36435, "upload_time": "2020-01-17T00:56:39", "upload_time_iso_8601": "2020-01-17T00:56:39.218463Z", "url": "https://files.pythonhosted.org/packages/fd/0b/4e3aec9d9aacab341c91506ec2b13d90a67257728c8836a585d86800740c/anasymod-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "30c31803075606d9a3e65bf55bd4d02c", "sha256": "cc80d1fc216f407d304f9017db3d1645854cc4162cdbc1a297c5f2438fcb27e5"}, "downloads": -1, "filename": "anasymod-0.1.4.tar.gz", "has_sig": false, "md5_digest": "30c31803075606d9a3e65bf55bd4d02c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 62519, "upload_time": "2020-01-17T01:16:58", "upload_time_iso_8601": "2020-01-17T01:16:58.602135Z", "url": "https://files.pythonhosted.org/packages/01/83/c03ee6a46e09ac5ce2699413000371b44b954c84a01c764f2fc8649f3d18/anasymod-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "340e1111f3414d47675cba95d30f3adc", "sha256": "f83cd6fb85b4cb206a9bad524f58348673f5537812fb0884ad8cd8896cca0394"}, "downloads": -1, "filename": "anasymod-0.1.5.tar.gz", "has_sig": false, "md5_digest": "340e1111f3414d47675cba95d30f3adc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 64687, "upload_time": "2020-01-21T01:01:18", "upload_time_iso_8601": "2020-01-21T01:01:18.677326Z", "url": "https://files.pythonhosted.org/packages/ae/26/c040036c15c22b9fac491b512215d908d764412d67418c1dc5d1c061901b/anasymod-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "1ac5a4435209edf4c2302983e0dad44c", "sha256": "a627c093b79a7bf953345ad022ea1a3f4666ff749ac945c21e72ea3fe0b33dee"}, "downloads": -1, "filename": "anasymod-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1ac5a4435209edf4c2302983e0dad44c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 64691, "upload_time": "2020-01-21T02:38:36", "upload_time_iso_8601": "2020-01-21T02:38:36.738182Z", "url": "https://files.pythonhosted.org/packages/6a/1f/8ca8afe4aa7e44d006794765f8bdc9fc5b9326fafc93459ee242abddc806/anasymod-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "7c99abc0d0a887c03620c705131db6c3", "sha256": "336aac974d702b41e59cf4579d313ee5ad80fe0ee7b29067fb08e7844c92d440"}, "downloads": -1, "filename": "anasymod-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7c99abc0d0a887c03620c705131db6c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 66794, "upload_time": "2020-01-22T05:47:58", "upload_time_iso_8601": "2020-01-22T05:47:58.819763Z", "url": "https://files.pythonhosted.org/packages/e9/1e/1852fbdb42d38d16c6f69e9519222b04b10f6edd61abe64e14bd6d0c07c7/anasymod-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "a53c11ada9f0aff3a14f13d728a09ba3", "sha256": "afbfa22217b355c9a2bbb7f1b0bb50c51b099f2349b3bee2ad98b5cde4bc91d7"}, "downloads": -1, "filename": "anasymod-0.1.8.tar.gz", "has_sig": false, "md5_digest": "a53c11ada9f0aff3a14f13d728a09ba3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 66789, "upload_time": "2020-01-22T05:51:11", "upload_time_iso_8601": "2020-01-22T05:51:11.640243Z", "url": "https://files.pythonhosted.org/packages/b7/0d/6e54f2d77692086678f220730f307cfe5b6b262d945abf4f30b9d35c8132/anasymod-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "6980f07e2ac0a43d394ed56e3ff3b440", "sha256": "e0291e784c48945f55615e27d368a285df1a35b8dc6cc38d61fc5d1e9e8a1f40"}, "downloads": -1, "filename": "anasymod-0.1.9.tar.gz", "has_sig": false, "md5_digest": "6980f07e2ac0a43d394ed56e3ff3b440", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 66797, "upload_time": "2020-01-22T06:42:51", "upload_time_iso_8601": "2020-01-22T06:42:51.880708Z", "url": "https://files.pythonhosted.org/packages/05/d4/ec124d1e7f51c79b82b1b5f593f391d39c12237287ca297d3dd4adcc6c56/anasymod-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2ea766483b545df52f0a5a1aec7f8c1e", "sha256": "1f0ef22b6837d5c3bf174545ec10e6550bc618fc89803f4d33c2f943d6185cbf"}, "downloads": -1, "filename": "anasymod-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2ea766483b545df52f0a5a1aec7f8c1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78084, "upload_time": "2020-02-29T04:20:27", "upload_time_iso_8601": "2020-02-29T04:20:27.058448Z", "url": "https://files.pythonhosted.org/packages/42/90/70062ebf46c342540a9b668fcf93bea6422c7521dc4645d7ae3604795ff3/anasymod-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "dcbdcd39adbe405db6752ad642cb3cf4", "sha256": "caebeef5239b5c6da7815a94a98a846bedfec80bde6cababc7dd3d9f471e66f4"}, "downloads": -1, "filename": "anasymod-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dcbdcd39adbe405db6752ad642cb3cf4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78270, "upload_time": "2020-03-06T02:52:31", "upload_time_iso_8601": "2020-03-06T02:52:31.997420Z", "url": "https://files.pythonhosted.org/packages/0e/2e/a520d8b1921fdda0f9ac45c3ae0839a9908e32977727c11a08cd81076d15/anasymod-0.2.1.tar.gz", "yanked": false}], "0.2.1.dev1": [{"comment_text": "", "digests": {"md5": "dc95dc54a3033c499c9a73abcdca2534", "sha256": "1b350b488fcacbc830810ab105b22df7115f19065dcbcf648e6953c6979682cd"}, "downloads": -1, "filename": "anasymod-0.2.1.dev1.tar.gz", "has_sig": false, "md5_digest": "dc95dc54a3033c499c9a73abcdca2534", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78183, "upload_time": "2020-03-06T01:43:22", "upload_time_iso_8601": "2020-03-06T01:43:22.106586Z", "url": "https://files.pythonhosted.org/packages/a7/e0/6ba6c13d42c53bf31515145c5243fa4bcba112a600e307718825ad8946b0/anasymod-0.2.1.dev1.tar.gz", "yanked": false}], "0.2.1.dev2": [{"comment_text": "", "digests": {"md5": "b9a978e78bd2fe2a8ef9639caf5206f4", "sha256": "327dada88c2a19ab661e2136bf2d1dfb5075ef42e7e3a7a6a8ed45571d7351f5"}, "downloads": -1, "filename": "anasymod-0.2.1.dev2.tar.gz", "has_sig": false, "md5_digest": "b9a978e78bd2fe2a8ef9639caf5206f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78292, "upload_time": "2020-03-06T02:24:13", "upload_time_iso_8601": "2020-03-06T02:24:13.071978Z", "url": "https://files.pythonhosted.org/packages/9a/66/013e340a3bd29eb9108c57d19af3ba5aa9ad02eb82d871fc16541e83dc0a/anasymod-0.2.1.dev2.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4fff40dd6c06e0a7e3eefd27ec0587dd", "sha256": "4d0ff74984ab7e3ba8cab1d1688a5bd3b1f807cb671b464cfe9a1ddb8581cf7e"}, "downloads": -1, "filename": "anasymod-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4fff40dd6c06e0a7e3eefd27ec0587dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78146, "upload_time": "2020-03-18T22:17:24", "upload_time_iso_8601": "2020-03-18T22:17:24.012701Z", "url": "https://files.pythonhosted.org/packages/0f/a5/8eda7adb5cac85228403031149c122f877dd8ccf4054e837082d7248a644/anasymod-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fff40dd6c06e0a7e3eefd27ec0587dd", "sha256": "4d0ff74984ab7e3ba8cab1d1688a5bd3b1f807cb671b464cfe9a1ddb8581cf7e"}, "downloads": -1, "filename": "anasymod-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4fff40dd6c06e0a7e3eefd27ec0587dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 78146, "upload_time": "2020-03-18T22:17:24", "upload_time_iso_8601": "2020-03-18T22:17:24.012701Z", "url": "https://files.pythonhosted.org/packages/0f/a5/8eda7adb5cac85228403031149c122f877dd8ccf4054e837082d7248a644/anasymod-0.2.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:15 2020"}