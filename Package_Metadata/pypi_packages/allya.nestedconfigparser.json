{"info": {"author": "Kadeem Hassam", "author_email": "kadeem.hassam@peckypanda.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Other/Proprietary License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "By default, configparser only loads values from 'vars', 'section', and then 'default_section'. This extension allows for nested sections by use of a section splitter (default '.') and attempts to find values from 'vars', then 'section', then its logical parents, and finally 'default_section'.\n\nFor example, given the configuration below::\n\n  [DEFAULT]\n  alpha=first level\n\n  [section]\n  beta=second level\n\n  [section.subsection]\n  gamma=third level\n\nthe default configparser would behave like::\n\n  >>> settings = configparser.ConfigParser()\n  >>> settings.read('config.ini')\n  ['config.ini']\n  >>> settings.get('section.subsection', 'alpha')\n  first level\n  >>> settings.get('section.subsection', 'beta')\n  None\n  >>> settings.get('section.subsection', 'gamma')\n  third level\n\nInstead, in this extension, the behaviour would be::\n\n  >>> settings = nestedconfigparser.NestedConfigParser()\n  >>> settings.read('config.ini')\n  ['config.ini']\n  >>> settings.get('section.subsection', 'alpha')\n  first level\n  >>> settings.get('section.subsection', 'beta')\n  second level\n  >>> settings.get('section.subsection', 'gamma')\n  third level\n\nThis extensions supports theoretically unlimited levels of nesting. It also does not require each level of the subsection to exist for the case where a section has no additional configurations.\n\nNote: this extension intentionally does not raise a NoSectionError if a section does not exist when using 'nestedconfigparser.NestedConfigParser().get(section, option)'. This is because it will attempt to fallback to higher sections and avoids potentially empty sections that don't have any added configurations at the highest subsection.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kazzer/nestedconfigparser", "keywords": "configparser Nested Recursive", "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "allya.nestedconfigparser", "package_url": "https://pypi.org/project/allya.nestedconfigparser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/allya.nestedconfigparser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Kazzer/nestedconfigparser"}, "release_url": "https://pypi.org/project/allya.nestedconfigparser/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A simple extension to configparser that allows nested fallback configurations", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>By default, configparser only loads values from \u2018vars\u2019, \u2018section\u2019, and then \u2018default_section\u2019. This extension allows for nested sections by use of a section splitter (default \u2018.\u2019) and attempts to find values from \u2018vars\u2019, then \u2018section\u2019, then its logical parents, and finally \u2018default_section\u2019.</p>\n<p>For example, given the configuration below:</p>\n<pre>[DEFAULT]\nalpha=first level\n\n[section]\nbeta=second level\n\n[section.subsection]\ngamma=third level\n</pre>\n<p>the default configparser would behave like:</p>\n<pre>&gt;&gt;&gt; settings = configparser.ConfigParser()\n&gt;&gt;&gt; settings.read('config.ini')\n['config.ini']\n&gt;&gt;&gt; settings.get('section.subsection', 'alpha')\nfirst level\n&gt;&gt;&gt; settings.get('section.subsection', 'beta')\nNone\n&gt;&gt;&gt; settings.get('section.subsection', 'gamma')\nthird level\n</pre>\n<p>Instead, in this extension, the behaviour would be:</p>\n<pre>&gt;&gt;&gt; settings = nestedconfigparser.NestedConfigParser()\n&gt;&gt;&gt; settings.read('config.ini')\n['config.ini']\n&gt;&gt;&gt; settings.get('section.subsection', 'alpha')\nfirst level\n&gt;&gt;&gt; settings.get('section.subsection', 'beta')\nsecond level\n&gt;&gt;&gt; settings.get('section.subsection', 'gamma')\nthird level\n</pre>\n<p>This extensions supports theoretically unlimited levels of nesting. It also does not require each level of the subsection to exist for the case where a section has no additional configurations.</p>\n<p>Note: this extension intentionally does not raise a NoSectionError if a section does not exist when using \u2018nestedconfigparser.NestedConfigParser().get(section, option)\u2019. This is because it will attempt to fallback to higher sections and avoids potentially empty sections that don\u2019t have any added configurations at the highest subsection.</p>\n\n          </div>"}, "last_serial": 2287293, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0491f4034f601cb16bb03d6d14fda9a8", "sha256": "2ff13cae92f453ebdb98471398394ad8418fbc2b97d3a24defc3ed76a84b06d1"}, "downloads": -1, "filename": "allya.nestedconfigparser-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0491f4034f601cb16bb03d6d14fda9a8", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 4653, "upload_time": "2016-08-17T22:57:06", "upload_time_iso_8601": "2016-08-17T22:57:06.429666Z", "url": "https://files.pythonhosted.org/packages/83/49/029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414/allya.nestedconfigparser-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0491f4034f601cb16bb03d6d14fda9a8", "sha256": "2ff13cae92f453ebdb98471398394ad8418fbc2b97d3a24defc3ed76a84b06d1"}, "downloads": -1, "filename": "allya.nestedconfigparser-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0491f4034f601cb16bb03d6d14fda9a8", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 4653, "upload_time": "2016-08-17T22:57:06", "upload_time_iso_8601": "2016-08-17T22:57:06.429666Z", "url": "https://files.pythonhosted.org/packages/83/49/029660b57f095dd8e1800e993605c776f62d46604f34f287ceed59820414/allya.nestedconfigparser-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:19:22 2020"}