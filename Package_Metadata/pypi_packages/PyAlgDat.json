{"info": {"author": "Brian Horn", "author_email": "trycatchhorn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=======\nCONTENT\n=======\n+ ABOUT PYALGDAT\n+ FEATURES\n+ REQUIREMENTS\n+ INSTALLATION\n+ EXAMPLES\n+ DOCUMENTATION\n+ LICENSE\n+ AUTHOR\n+ CHANGELOG\n\nABOUT PYALGDAT\n==============\nPyAlgDat is a collection of data structures and algorithms written in Python.\nThe purpose of the code is to show how many of the abstract data types (ADTs) and\nalgorithms being thought in Computer Science courses can be realised in Python.\n\nMy primary focus has been to write a library which presents a clear\nimplementation of the various data structures and algorithms and how they can\nbe used. This means that I have made a conscious tradeoff where clarity of the\ncode outweighs subtle and exotic implementation constructs.\n\nThe library has mostly been implemented as a recreational project and should\nas such not be used in production code, since most of the data structures and\nalgorithms are already available in the standard Python library. However,\nwriting software that is robust, performs well, and is easy to maintain requires\nknowledge of data structures and algorithms. Therefore, implementing and\nexperimenting with these provides valuable knowledge about the inner workings\nand implementation details found in such standard libraries.\n\nFEATURES\n========\nData structures included in the library\n\n+ Dynamic array\n+ Stack\n+ Queue\n+ BinaryHeap\n\n   - MinHeap\n   - MaxHeap\n\n+ LinkedList\n\n   - Singly linked list\n   - Doubly linked list\n\n+ Partition/Union-Find\n+ Graph\n   - Directed\n   - Undirected \n   - Directed weighted\n   - Undirected weighted\n\nAdditionally, the library contains the most common algorithms and operations\nneeded when working with these data structures.\n\nREQUIREMENTS\n============\nThe library is selfcontained and does not have any external dependencies.\nPyAlgDat should run on any platform with Python 2.7 or above.\n\nINSTALLATION\n============\nThe package can be installed using `pip <https://pypi.python.org/pypi/pip>`_\n\n.. code-block:: shell\n\n   $ pip install PyAlgDat\n\nEXAMPLES\n========\nPyAlgDat has a collection of functional test examples which shows how the\nlibrary can be used from a client's perspective. \n\nShortest path using Dijkstra's algorithm\n----------------------------------------\nBelow is a simple example showing howto create a directed weighted graph\nusing PyAlgDat and how the shortest path in this graph can be found using\nDijkstra's algorithm.\n\n.. code-block:: python\n\n   #!/usr/bin/env python\n\n   \"\"\"\n   Test of Dijkstra's algorithm for a Directed Weighted Graph.\n   \"\"\"\n\n   def create_graph():\n        \"\"\"\n   \tCreates a Directed Weighted Graph\n\t\"\"\"\n    \t# Create an empty directed weighted graph\n    \tgraph = DirectedWeightedGraph(7)\n\n    \t# Create vertices\n    \tvertex0 = UnWeightedGraphVertex(graph, \"A\")\n    \tvertex1 = UnWeightedGraphVertex(graph, \"B\")\n    \tvertex2 = UnWeightedGraphVertex(graph, \"C\")\n    \tvertex3 = UnWeightedGraphVertex(graph, \"D\")\n    \tvertex4 = UnWeightedGraphVertex(graph, \"E\")\n    \tvertex5 = UnWeightedGraphVertex(graph, \"F\")\n    \tvertex6 = UnWeightedGraphVertex(graph, \"G\")\n\n    \t# Add vertices\n    \tgraph.add_vertex(vertex0)\n    \tgraph.add_vertex(vertex1)\n    \tgraph.add_vertex(vertex2)\n    \tgraph.add_vertex(vertex3)\n    \tgraph.add_vertex(vertex4)\n    \tgraph.add_vertex(vertex5)\n    \tgraph.add_vertex(vertex6)\n\n    \t# Add edges\n    \tgraph.add_edge(vertex0, vertex1, 7)   # ( A <- B, 7 )\n    \tgraph.add_edge(vertex1, vertex2, 2)   # ( B <- C, 2 )\n    \tgraph.add_edge(vertex1, vertex6, 3)   # ( B -> G, 3 )\n    \tgraph.add_edge(vertex2, vertex3, 2)   # ( C -> D, 2 )\n    \tgraph.add_edge(vertex2, vertex6, 4)   # ( C -> G, 4 )\n    \tgraph.add_edge(vertex3, vertex4, 5)   # ( D -> E, 5 )\n    \tgraph.add_edge(vertex3, vertex6, 1)   # ( D -> G, 1 )\n    \tgraph.add_edge(vertex4, vertex5, 6)   # ( E -> F, 6 )\n    \tgraph.add_edge(vertex5, vertex0, 1)   # ( F <- A, 1 )\n    \tgraph.add_edge(vertex5, vertex6, 4)   # ( F <- G, 4 )\n    \tgraph.add_edge(vertex6, vertex0, 7)   # ( G -> A, 7 )\n    \tgraph.add_edge(vertex6, vertex4, 1)   # ( G -> E, 1 )\n\n    \t#       B--<--7--<--A\n    \t#      / \\         / \\\n    \t#     /   \\       /   \\\n    \t#    2     3     7     1\n    \t#   /       \\   /       \\\n    \t#  /         \\ /         \\\n    \t# C-->--4-->--G--<--4--<--F\n    \t#  \\         / \\         /\n    \t#   \\       /   \\       /\n    \t#    2     1     1     6\n    \t#     \\   /       \\   /\n    \t#      \\ /         \\ /\n    \t#       D-->--5-->--E\n\n    \treturn graph\n\n   if __name__ == \"__main__\":\n\n      # Make it possible to use py_alg_dat without performing\n      # an installation. This is needed in order to be able\n      # to run: python dijkstra_test.py, without having\n      # performed an installation of the package. The is\n      # neccessary due to Python's handling of relative\n      # imports.\n      if __package__ is None:\n        import sys\n        from os import path\n        sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))\n        from py_alg_dat.graph import DirectedWeightedGraph\n        from py_alg_dat.graph_vertex import UnWeightedGraphVertex\n        from py_alg_dat.graph_algorithms import GraphAlgorithms\n      else:\n        from ..py_alg_dat.graph import DirectedWeightedGraph\n        from ..py_alg_dat.graph_vertex import UnWeightedGraphVertex\n        from ..py_alg_dat.graph_algorithms import GraphAlgorithms\n\n      # Create the graph\n      GRAPH = create_graph()\n      # Run Dijkstra starting at vertex \"A\"\n      TABLE = GraphAlgorithms.dijkstras_algorithm(GRAPH, GRAPH[0])\n      # Find the edges in the Spanning Tree and its total weight\n      SPANNING_TREE_EDGES = set()\n      SPANNING_TREE_WEIGHT = 0\n      for i in xrange(len(TABLE)):\n        entry = TABLE[i]\n        if entry.predecessor != None:\n            edge = entry.edge\n            SPANNING_TREE_EDGES.add(edge)\n            SPANNING_TREE_WEIGHT += edge.get_weight()\n      print \"Edges in Spanning Tree: \" + str(SPANNING_TREE_EDGES)\n      print \"Weight of Spanning Tree: \" + str(SPANNING_TREE_WEIGHT)\n\n\nMinimum spanning tree using Kruskal's algorithm\n-----------------------------------------------\nBelow is a simple example showing howto create an un-directed weighted graph\nusing PyAlgDat and how the minimum spanning tree of this graph can be found\nusing Kruskal's algorithm.\n\n.. code-block:: python\n\n   #!/usr/bin/env python\n\n   \"\"\"\n   Test of Kruskal's algorithm for a UnDirected Weighted Graph.\n   \"\"\"\n\n   def create_graph():\n       \"\"\"\n       Creates an UnDirected Weighted Graph\n       \"\"\"\n       # Create an empty undirected weighted graph\n       graph = UnDirectedWeightedGraph(7)\n\n       # Create vertices\n       vertex1 = UnWeightedGraphVertex(graph, \"A\")\n       vertex2 = UnWeightedGraphVertex(graph, \"B\")\n       vertex3 = UnWeightedGraphVertex(graph, \"C\")\n       vertex4 = UnWeightedGraphVertex(graph, \"D\")\n       vertex5 = UnWeightedGraphVertex(graph, \"E\")\n       vertex6 = UnWeightedGraphVertex(graph, \"F\")\n       vertex7 = UnWeightedGraphVertex(graph, \"G\")\n\n       # Add vertices\n       graph.add_vertex(vertex1)\n       graph.add_vertex(vertex2)\n       graph.add_vertex(vertex3)\n       graph.add_vertex(vertex4)\n       graph.add_vertex(vertex5)\n       graph.add_vertex(vertex6)\n       graph.add_vertex(vertex7)\n\n       # Add edges\n       graph.add_edge(vertex1, vertex2, 7)    # (A - B, 7)\n       graph.add_edge(vertex1, vertex4, 5)    # (A - D, 5)\n       graph.add_edge(vertex2, vertex3, 8)    # (B - C, 8)\n       graph.add_edge(vertex2, vertex4, 9)    # (B - D, 9)\n       graph.add_edge(vertex2, vertex5, 7)    # (B - E, 7)\n       graph.add_edge(vertex3, vertex5, 5)    # (C - E, 5)\n       graph.add_edge(vertex4, vertex5, 15)   # (D - E, 1)\n       graph.add_edge(vertex4, vertex6, 6)    # (D - F, 6)\n       graph.add_edge(vertex5, vertex6, 8)    # (E - F, 8)\n       graph.add_edge(vertex5, vertex7, 9)    # (E - G, 9)\n       graph.add_edge(vertex6, vertex7, 11)   # (F - G, 11)\n       return graph\n\n   if __name__ == \"__main__\":\n       # Make it possible to use py_alg_dat without performing\n       # an installation. This is needed in order to be able\n       # to run: python kruskal_test.py, without having\n       # performed an installation of the package. The is\n       # neccessary due to Python's handling of relative\n       # imports.\n       if __package__ is None:\n       \t  import sys\n          from os import path\n          sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))\n          from py_alg_dat.graph import UnDirectedWeightedGraph\n          from py_alg_dat.graph_vertex import UnWeightedGraphVertex\n          from py_alg_dat.graph_algorithms import GraphAlgorithms\n       else:\n\t  from ..py_alg_dat.graph import UnDirectedWeightedGraph\n          from ..py_alg_dat.graph_vertex import UnWeightedGraphVertex\n          from ..py_alg_dat.graph_algorithms import GraphAlgorithms\n\n       # Create the graph\n       GRAPH = create_graph()\n       # Run Kruskal's algorithm\n       MST = GraphAlgorithms.kruskals_algorithm(GRAPH)\n       print MST\n\nThe above examples -and others can be found in the 'examples' folder in\nthe PyAlgDat directory.\n\nDOCUMENTATION\n=============\nThe PyAlgDat API contains Docstrings for all classes and methods. Additional\ndocumentation about the library can be found in the 'docs' folder in the\nPyAlgDat directory.\n\nThe full documentation is at http://pyalgdat.readthedocs.org/en/latest/.\n\nLICENSE\n=======\nPyAlgDat is published under the MIT License. The copyright and license are\nspecified in the file \"LICENSE.txt\" in the PyAlgDat directory and shown\nbelow.\n\nAUTHOR\n======\nBrian Horn, trycatchhorn@gmail.com\n\n\n\n\n\nCHANGELOG\n=========\n\n1.0.2 (2016-09-01)\n==================\n\n* Added Bellman-Ford graph algorithm\n* Made unit tests part of the distribution\n\n\n1.0.1 (2015-07-19)\n==================\n\n* First release on PyPi\n* Fixed a problem in singly linked list when inserting an element at a specific index, causing the reference to the tail element to be wrong.\n* Fixed a problem in singly linked list when removing the last element.\n* Implemented functionality to remove a vertex from a graph.\n* Implemented functionality to remove an edge from a graph.\n* Implemented shallow copy functionality in array_list.py.\n* Implemented support for slicing in array_list.py.\n* Implemented equal -and not equal operators in class UnDirectedGraph.\n* Implemented equal -and not equal operators in singly_linked_list.py.\n* Implemented equal -and not equal operators in doubly_linked_list.py.\n* Implemented shallow copy functionality in singly_linked_list.py.\n* Implemented shallow copy functionality in doubly_linked_list.py.\n* Library has now changed name to PyAlgDat.\n* Removed attribute 'numberOfVertices' in graph.py.\n* Removed attribute 'numberOfEdges' in graph.py.\n* Renamed attribute 'vertexName' in graph_vertex.py to 'vertex_name'\n* Renamed attribute 'vertexNumber' in graph_vertex.py to 'vertex_number'\n* Renamed attribute 'vertexWeight' in graph_vertex.py to 'vertex_weight'\n* PyAlgDat is licensed under The MIT License (MIT)\n* Made PyAlgDat pylint compliant\n* Added content to README.rst\n* Added examples folder containing test programs showing API usage\n\n\n1.0.0 (2014-02-09)\n==================\n\n* First public release", "description_content_type": null, "docs_url": null, "download_url": "http://www.brianhorn.dk/projects/pyalgdat/release/PyAlgDat-1.0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.brianhorn.dk", "keywords": "algorithms,data structures,graph,heap,linked list,partition", "license": "The MIT License (MIT)\n\nCopyright (c) 2015 by Brian Horn, trycatchhorn@gmail.com.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.", "maintainer": null, "maintainer_email": null, "name": "PyAlgDat", "package_url": "https://pypi.org/project/PyAlgDat/", "platform": "any", "project_url": "https://pypi.org/project/PyAlgDat/", "project_urls": {"Download": "http://www.brianhorn.dk/projects/pyalgdat/release/PyAlgDat-1.0.2.tar.gz", "Homepage": "http://www.brianhorn.dk"}, "release_url": "https://pypi.org/project/PyAlgDat/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Various data structures and algorithms.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>ABOUT PYALGDAT</li>\n<li>FEATURES</li>\n<li>REQUIREMENTS</li>\n<li>INSTALLATION</li>\n<li>EXAMPLES</li>\n<li>DOCUMENTATION</li>\n<li>LICENSE</li>\n<li>AUTHOR</li>\n<li>CHANGELOG</li>\n</ul>\n<div id=\"about-pyalgdat\">\n<h2>ABOUT PYALGDAT</h2>\n<p>PyAlgDat is a collection of data structures and algorithms written in Python.\nThe purpose of the code is to show how many of the abstract data types (ADTs) and\nalgorithms being thought in Computer Science courses can be realised in Python.</p>\n<p>My primary focus has been to write a library which presents a clear\nimplementation of the various data structures and algorithms and how they can\nbe used. This means that I have made a conscious tradeoff where clarity of the\ncode outweighs subtle and exotic implementation constructs.</p>\n<p>The library has mostly been implemented as a recreational project and should\nas such not be used in production code, since most of the data structures and\nalgorithms are already available in the standard Python library. However,\nwriting software that is robust, performs well, and is easy to maintain requires\nknowledge of data structures and algorithms. Therefore, implementing and\nexperimenting with these provides valuable knowledge about the inner workings\nand implementation details found in such standard libraries.</p>\n</div>\n<div id=\"features\">\n<h2>FEATURES</h2>\n<p>Data structures included in the library</p>\n<ul>\n<li><p>Dynamic array</p>\n</li>\n<li><p>Stack</p>\n</li>\n<li><p>Queue</p>\n</li>\n<li><p>BinaryHeap</p>\n<blockquote>\n<ul>\n<li>MinHeap</li>\n<li>MaxHeap</li>\n</ul>\n</blockquote>\n</li>\n<li><p>LinkedList</p>\n<blockquote>\n<ul>\n<li>Singly linked list</li>\n<li>Doubly linked list</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Partition/Union-Find</p>\n</li>\n<li><dl>\n<dt>Graph</dt>\n<dd><ul>\n<li>Directed</li>\n<li>Undirected</li>\n<li>Directed weighted</li>\n<li>Undirected weighted</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>Additionally, the library contains the most common algorithms and operations\nneeded when working with these data structures.</p>\n</div>\n<div id=\"requirements\">\n<h2>REQUIREMENTS</h2>\n<p>The library is selfcontained and does not have any external dependencies.\nPyAlgDat should run on any platform with Python 2.7 or above.</p>\n</div>\n<div id=\"installation\">\n<h2>INSTALLATION</h2>\n<p>The package can be installed using <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a></p>\n<pre>$ pip install PyAlgDat\n</pre>\n</div>\n<div id=\"examples\">\n<h2>EXAMPLES</h2>\n<p>PyAlgDat has a collection of functional test examples which shows how the\nlibrary can be used from a client\u2019s perspective.</p>\n<div id=\"shortest-path-using-dijkstra-s-algorithm\">\n<h3>Shortest path using Dijkstra\u2019s algorithm</h3>\n<p>Below is a simple example showing howto create a directed weighted graph\nusing PyAlgDat and how the shortest path in this graph can be found using\nDijkstra\u2019s algorithm.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"sd\">\"\"\"\nTest of Dijkstra's algorithm for a Directed Weighted Graph.\n\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_graph</span><span class=\"p\">():</span>\n     <span class=\"sd\">\"\"\"\n     Creates a Directed Weighted Graph\n     \"\"\"</span>\n     <span class=\"c1\"># Create an empty directed weighted graph</span>\n     <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">DirectedWeightedGraph</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n     <span class=\"c1\"># Create vertices</span>\n     <span class=\"n\">vertex0</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex1</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex2</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex3</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex4</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"E\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex5</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"F\"</span><span class=\"p\">)</span>\n     <span class=\"n\">vertex6</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"G\"</span><span class=\"p\">)</span>\n\n     <span class=\"c1\"># Add vertices</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex0</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex3</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex4</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">)</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex6</span><span class=\"p\">)</span>\n\n     <span class=\"c1\"># Add edges</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex0</span><span class=\"p\">,</span> <span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>   <span class=\"c1\"># ( A &lt;- B, 7 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>   <span class=\"c1\"># ( B &lt;- C, 2 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>   <span class=\"c1\"># ( B -&gt; G, 3 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"n\">vertex3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>   <span class=\"c1\"># ( C -&gt; D, 2 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>   <span class=\"c1\"># ( C -&gt; G, 4 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex3</span><span class=\"p\">,</span> <span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>   <span class=\"c1\"># ( D -&gt; E, 5 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex3</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># ( D -&gt; G, 1 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>   <span class=\"c1\"># ( E -&gt; F, 6 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"n\">vertex0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># ( F &lt;- A, 1 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>   <span class=\"c1\"># ( F &lt;- G, 4 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"n\">vertex0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>   <span class=\"c1\"># ( G -&gt; A, 7 )</span>\n     <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># ( G -&gt; E, 1 )</span>\n\n     <span class=\"c1\">#       B--&lt;--7--&lt;--A</span>\n     <span class=\"c1\">#      / \\         / \\</span>\n     <span class=\"c1\">#     /   \\       /   \\</span>\n     <span class=\"c1\">#    2     3     7     1</span>\n     <span class=\"c1\">#   /       \\   /       \\</span>\n     <span class=\"c1\">#  /         \\ /         \\</span>\n     <span class=\"c1\"># C--&gt;--4--&gt;--G--&lt;--4--&lt;--F</span>\n     <span class=\"c1\">#  \\         / \\         /</span>\n     <span class=\"c1\">#   \\       /   \\       /</span>\n     <span class=\"c1\">#    2     1     1     6</span>\n     <span class=\"c1\">#     \\   /       \\   /</span>\n     <span class=\"c1\">#      \\ /         \\ /</span>\n     <span class=\"c1\">#       D--&gt;--5--&gt;--E</span>\n\n     <span class=\"k\">return</span> <span class=\"n\">graph</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n   <span class=\"c1\"># Make it possible to use py_alg_dat without performing</span>\n   <span class=\"c1\"># an installation. This is needed in order to be able</span>\n   <span class=\"c1\"># to run: python dijkstra_test.py, without having</span>\n   <span class=\"c1\"># performed an installation of the package. The is</span>\n   <span class=\"c1\"># neccessary due to Python's handling of relative</span>\n   <span class=\"c1\"># imports.</span>\n   <span class=\"k\">if</span> <span class=\"n\">__package__</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n     <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n     <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))))</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph</span> <span class=\"kn\">import</span> <span class=\"n\">DirectedWeightedGraph</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph_vertex</span> <span class=\"kn\">import</span> <span class=\"n\">UnWeightedGraphVertex</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph_algorithms</span> <span class=\"kn\">import</span> <span class=\"n\">GraphAlgorithms</span>\n   <span class=\"k\">else</span><span class=\"p\">:</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph</span> <span class=\"kn\">import</span> <span class=\"n\">DirectedWeightedGraph</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph_vertex</span> <span class=\"kn\">import</span> <span class=\"n\">UnWeightedGraphVertex</span>\n     <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph_algorithms</span> <span class=\"kn\">import</span> <span class=\"n\">GraphAlgorithms</span>\n\n   <span class=\"c1\"># Create the graph</span>\n   <span class=\"n\">GRAPH</span> <span class=\"o\">=</span> <span class=\"n\">create_graph</span><span class=\"p\">()</span>\n   <span class=\"c1\"># Run Dijkstra starting at vertex \"A\"</span>\n   <span class=\"n\">TABLE</span> <span class=\"o\">=</span> <span class=\"n\">GraphAlgorithms</span><span class=\"o\">.</span><span class=\"n\">dijkstras_algorithm</span><span class=\"p\">(</span><span class=\"n\">GRAPH</span><span class=\"p\">,</span> <span class=\"n\">GRAPH</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n   <span class=\"c1\"># Find the edges in the Spanning Tree and its total weight</span>\n   <span class=\"n\">SPANNING_TREE_EDGES</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n   <span class=\"n\">SPANNING_TREE_WEIGHT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n   <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">xrange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">TABLE</span><span class=\"p\">)):</span>\n     <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">TABLE</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n     <span class=\"k\">if</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">predecessor</span> <span class=\"o\">!=</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n         <span class=\"n\">edge</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">edge</span>\n         <span class=\"n\">SPANNING_TREE_EDGES</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">edge</span><span class=\"p\">)</span>\n         <span class=\"n\">SPANNING_TREE_WEIGHT</span> <span class=\"o\">+=</span> <span class=\"n\">edge</span><span class=\"o\">.</span><span class=\"n\">get_weight</span><span class=\"p\">()</span>\n   <span class=\"nb\">print</span> <span class=\"s2\">\"Edges in Spanning Tree: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">SPANNING_TREE_EDGES</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span> <span class=\"s2\">\"Weight of Spanning Tree: \"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">SPANNING_TREE_WEIGHT</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"minimum-spanning-tree-using-kruskal-s-algorithm\">\n<h3>Minimum spanning tree using Kruskal\u2019s algorithm</h3>\n<p>Below is a simple example showing howto create an un-directed weighted graph\nusing PyAlgDat and how the minimum spanning tree of this graph can be found\nusing Kruskal\u2019s algorithm.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"sd\">\"\"\"\nTest of Kruskal's algorithm for a UnDirected Weighted Graph.\n\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_graph</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"\n    Creates an UnDirected Weighted Graph\n    \"\"\"</span>\n    <span class=\"c1\"># Create an empty undirected weighted graph</span>\n    <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">UnDirectedWeightedGraph</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create vertices</span>\n    <span class=\"n\">vertex1</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex2</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex3</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"C\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex4</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"D\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex5</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"E\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex6</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"F\"</span><span class=\"p\">)</span>\n    <span class=\"n\">vertex7</span> <span class=\"o\">=</span> <span class=\"n\">UnWeightedGraphVertex</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"s2\">\"G\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add vertices</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex3</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex4</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex6</span><span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_vertex</span><span class=\"p\">(</span><span class=\"n\">vertex7</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Add edges</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>    <span class=\"c1\"># (A - B, 7)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex1</span><span class=\"p\">,</span> <span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>    <span class=\"c1\"># (A - D, 5)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"n\">vertex3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>    <span class=\"c1\"># (B - C, 8)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>    <span class=\"c1\"># (B - D, 9)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex2</span><span class=\"p\">,</span> <span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>    <span class=\"c1\"># (B - E, 7)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex3</span><span class=\"p\">,</span> <span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>    <span class=\"c1\"># (C - E, 5)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>   <span class=\"c1\"># (D - E, 1)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex4</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>    <span class=\"c1\"># (D - F, 6)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>    <span class=\"c1\"># (E - F, 8)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex5</span><span class=\"p\">,</span> <span class=\"n\">vertex7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>    <span class=\"c1\"># (E - G, 9)</span>\n    <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">vertex6</span><span class=\"p\">,</span> <span class=\"n\">vertex7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>   <span class=\"c1\"># (F - G, 11)</span>\n    <span class=\"k\">return</span> <span class=\"n\">graph</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Make it possible to use py_alg_dat without performing</span>\n    <span class=\"c1\"># an installation. This is needed in order to be able</span>\n    <span class=\"c1\"># to run: python kruskal_test.py, without having</span>\n    <span class=\"c1\"># performed an installation of the package. The is</span>\n    <span class=\"c1\"># neccessary due to Python's handling of relative</span>\n    <span class=\"c1\"># imports.</span>\n    <span class=\"k\">if</span> <span class=\"n\">__package__</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n       <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n       <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))))</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph</span> <span class=\"kn\">import</span> <span class=\"n\">UnDirectedWeightedGraph</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph_vertex</span> <span class=\"kn\">import</span> <span class=\"n\">UnWeightedGraphVertex</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">py_alg_dat.graph_algorithms</span> <span class=\"kn\">import</span> <span class=\"n\">GraphAlgorithms</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph</span> <span class=\"kn\">import</span> <span class=\"n\">UnDirectedWeightedGraph</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph_vertex</span> <span class=\"kn\">import</span> <span class=\"n\">UnWeightedGraphVertex</span>\n       <span class=\"kn\">from</span> <span class=\"nn\">..py_alg_dat.graph_algorithms</span> <span class=\"kn\">import</span> <span class=\"n\">GraphAlgorithms</span>\n\n    <span class=\"c1\"># Create the graph</span>\n    <span class=\"n\">GRAPH</span> <span class=\"o\">=</span> <span class=\"n\">create_graph</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Run Kruskal's algorithm</span>\n    <span class=\"n\">MST</span> <span class=\"o\">=</span> <span class=\"n\">GraphAlgorithms</span><span class=\"o\">.</span><span class=\"n\">kruskals_algorithm</span><span class=\"p\">(</span><span class=\"n\">GRAPH</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">MST</span>\n</pre>\n<p>The above examples -and others can be found in the \u2018examples\u2019 folder in\nthe PyAlgDat directory.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>DOCUMENTATION</h2>\n<p>The PyAlgDat API contains Docstrings for all classes and methods. Additional\ndocumentation about the library can be found in the \u2018docs\u2019 folder in the\nPyAlgDat directory.</p>\n<p>The full documentation is at <a href=\"http://pyalgdat.readthedocs.org/en/latest/\" rel=\"nofollow\">http://pyalgdat.readthedocs.org/en/latest/</a>.</p>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>PyAlgDat is published under the MIT License. The copyright and license are\nspecified in the file \u201cLICENSE.txt\u201d in the PyAlgDat directory and shown\nbelow.</p>\n</div>\n<div id=\"author\">\n<h2>AUTHOR</h2>\n<p>Brian Horn, <a href=\"mailto:trycatchhorn%40gmail.com\">trycatchhorn<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n</div>\n<div id=\"id1\">\n<h2>1.0.2 (2016-09-01)</h2>\n<ul>\n<li>Added Bellman-Ford graph algorithm</li>\n<li>Made unit tests part of the distribution</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>1.0.1 (2015-07-19)</h2>\n<ul>\n<li>First release on PyPi</li>\n<li>Fixed a problem in singly linked list when inserting an element at a specific index, causing the reference to the tail element to be wrong.</li>\n<li>Fixed a problem in singly linked list when removing the last element.</li>\n<li>Implemented functionality to remove a vertex from a graph.</li>\n<li>Implemented functionality to remove an edge from a graph.</li>\n<li>Implemented shallow copy functionality in array_list.py.</li>\n<li>Implemented support for slicing in array_list.py.</li>\n<li>Implemented equal -and not equal operators in class UnDirectedGraph.</li>\n<li>Implemented equal -and not equal operators in singly_linked_list.py.</li>\n<li>Implemented equal -and not equal operators in doubly_linked_list.py.</li>\n<li>Implemented shallow copy functionality in singly_linked_list.py.</li>\n<li>Implemented shallow copy functionality in doubly_linked_list.py.</li>\n<li>Library has now changed name to PyAlgDat.</li>\n<li>Removed attribute \u2018numberOfVertices\u2019 in graph.py.</li>\n<li>Removed attribute \u2018numberOfEdges\u2019 in graph.py.</li>\n<li>Renamed attribute \u2018vertexName\u2019 in graph_vertex.py to \u2018vertex_name\u2019</li>\n<li>Renamed attribute \u2018vertexNumber\u2019 in graph_vertex.py to \u2018vertex_number\u2019</li>\n<li>Renamed attribute \u2018vertexWeight\u2019 in graph_vertex.py to \u2018vertex_weight\u2019</li>\n<li>PyAlgDat is licensed under The MIT License (MIT)</li>\n<li>Made PyAlgDat pylint compliant</li>\n<li>Added content to README.rst</li>\n<li>Added examples folder containing test programs showing API usage</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>1.0.0 (2014-02-09)</h2>\n<ul>\n<li>First public release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2317513, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "dcc171cfaa4e5efff3e9c0294ca07ff8", "sha256": "8afe70155263cb3aef6959c8c505faefe4bd43a70a34b6781c8ba3af3afa6ce6"}, "downloads": -1, "filename": "PyAlgDat-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dcc171cfaa4e5efff3e9c0294ca07ff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46159, "upload_time": "2015-07-19T16:57:27", "upload_time_iso_8601": "2015-07-19T16:57:27.943583Z", "url": "https://files.pythonhosted.org/packages/17/fb/3d7c4b3ac70070328f23abbb57228a46cc053188e37532d359eb5d1ba1a6/PyAlgDat-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f8b2fbe38dac3eac198805e9d87d72f5", "sha256": "3f5f849439ea6172d4f8237b44a9d48d1f9e6c864ebb8701cfaa38c31ab4df7a"}, "downloads": -1, "filename": "PyAlgDat-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f8b2fbe38dac3eac198805e9d87d72f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124351, "upload_time": "2016-09-01T03:00:55", "upload_time_iso_8601": "2016-09-01T03:00:55.008025Z", "url": "https://files.pythonhosted.org/packages/d3/2b/073c0637bc618162696e49c7c3a318def11aea93335b24b4e242605b3f95/PyAlgDat-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8b2fbe38dac3eac198805e9d87d72f5", "sha256": "3f5f849439ea6172d4f8237b44a9d48d1f9e6c864ebb8701cfaa38c31ab4df7a"}, "downloads": -1, "filename": "PyAlgDat-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f8b2fbe38dac3eac198805e9d87d72f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124351, "upload_time": "2016-09-01T03:00:55", "upload_time_iso_8601": "2016-09-01T03:00:55.008025Z", "url": "https://files.pythonhosted.org/packages/d3/2b/073c0637bc618162696e49c7c3a318def11aea93335b24b4e242605b3f95/PyAlgDat-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:51 2020"}