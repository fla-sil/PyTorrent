{"info": {"author": "David Read", "author_email": "david.read@hackneyworkshop.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 2.7"], "description": ".. You should enable this project on travis-ci.org and coveralls.io to make\n   these badges work. The necessary Travis and Coverage config files have been\n   generated for you.\n\n.. image:: https://travis-ci.org/ckan/ckanext-xloader.svg?branch=master\n    :target: https://travis-ci.org/ckan/ckanext-xloader\n\n.. image:: https://img.shields.io/pypi/v/ckanext-xloader.svg\n    :target: https://pypi.org/project/ckanext-xloader/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/ckanext-xloader.svg\n    :target: https://pypi.org/project/ckanext-xloader/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/status/ckanext-xloader.svg\n    :target: https://pypi.org/project/ckanext-xloader/\n    :alt: Development Status\n\n.. image:: https://img.shields.io/pypi/l/ckanext-xloader.svg\n    :target: https://pypi.org/project/ckanext-xloader/\n    :alt: License\n\n=========================\nXLoader - ckanext-xloader\n=========================\n\nLoads CSV (and similar) data into CKAN's DataStore. Designed as a replacement\nfor DataPusher because it offers ten times the speed and more robustness\n(hence the name, derived from \"Express Loader\")\n\n**OpenGov Inc.** has sponsored this development, with the aim of benefitting\nopen data infrastructure worldwide.\n\n-------------------------------\nKey differences from DataPusher\n-------------------------------\n\nSpeed of loading\n----------------\n\nDataPusher - parses CSV rows, converts to detected column types, converts the\ndata to a JSON string, calls datastore_create for each batch of rows, which\nreformats the data into an INSERT statement string, which is passed to\nPostgreSQL.\n\nXLoader - pipes the CSV file directly into PostgreSQL using COPY.\n\nIn `tests <https://github.com/ckan/ckanext-xloader/issues/25>`_, XLoader\nis over ten times faster than DataPusher.\n\nRobustness\n----------\n\nDataPusher - one cause of failure was when casting cells to a guessed type. The\ntype of a column was decided by looking at the values of only the first few\nrows. So if a column is mainly numeric or dates, but a string (like \"N/A\")\ncomes later on, then this will cause the load to error at that point, leaving\nit half-loaded into DataStore.\n\nXLoader - loads all the cells as text, before allowing the admin to\nconvert columns to the types they want (using the Data Dictionary feature). In\nfuture it could do automatic detection and conversion.\n\nSimpler queueing tech\n---------------------\n\nDataPusher - job queue is done by ckan-service-provider which is bespoke,\ncomplicated and stores jobs in its own database (sqlite by default).\n\nXLoader - job queue is done by RQ, which is simpler, is backed by Redis, allows\naccess to the CKAN model and is CKAN's default queue technology (sinc CKAN\n2.7). You can also debug jobs easily using pdb. Job results are stored in\nSqlite by default, and for production simply specify CKAN's database in the\nconfig and it's held there - easy.\n\n(The other obvious candidate is Celery, but we don't need its heavyweight\narchitecture and its jobs are not debuggable with pdb.)\n\nSeparate web server\n-------------------\n\nDataPusher - has the complication that the queue jobs are done by a separate\n(Flask) web app, apart from CKAN. This was the design because the job requires\nintensive processing to convert every line of the data into JSON. However it\nmeans more complicated code as info needs to be passed between the services in\nhttp requests, more for the user to set-up and manage - another app config,\nanother apache config, separate log files.\n\nXLoader - the job runs in a worker process, in the same app as CKAN, so\ncan access the CKAN config, db and logging directly and avoids many HTTP calls.\nThis simplification makes sense because the xloader job doesn't need to do much\nprocessing - mainly it is streaming the CSV file from disk into PostgreSQL.\n\nCaveat - column types\n---------------------\n\nNote: With XLoader, all columns are stored in DataStore's database as 'text'\ntype (whereas DataPusher did some rudimentary type guessing - see 'Robustness'\nabove). However once a resource is xloaded, an admin can use the resource's\nData Dictionary tab (CKAN 2.7 onwards) to change these types to numeric or\ndatestamp and re-load the file. When migrating from DataPusher to XLoader you\ncan preserve the types of existing resources by using the ``migrate_types``\ncommand.\n\nThere is scope to add functionality for automatically guessing column type -\noffers to contribute this are welcomed.\n\n\n------------\nRequirements\n------------\n\nWorks with CKAN 2.7.x and later.\n\nWorks with CKAN 2.3.x - 2.6.x if you install ckanext-rq.\n\nCompatibility with core CKAN versions:\n\n=============== =============\nCKAN version    Compatibility\n=============== =============\n2.3             yes, but no longer tested and you must install ckanext-rq\n2.4             yes, but no longer tested and you must install ckanext-rq\n2.5             yes, but no longer tested and you must install ckanext-rq\n2.6             yes, but no longer tested and you must install ckanext-rq\n2.7             yes\n2.8             yes\n2.9             not yet - see https://github.com/ckan/ckanext-xloader/issues/104\n=============== =============\n\n------------\nInstallation\n------------\n\nTo install XLoader:\n\n1. Activate your CKAN virtual environment, for example::\n\n     . /usr/lib/ckan/default/bin/activate\n\n2. Install the ckanext-xloader Python package into your virtual environment::\n\n     pip install ckanext-xloader\n\n3. Install dependencies::\n\n     pip install -r https://raw.githubusercontent.com/ckan/ckanext-xloader/master/requirements.txt\n     pip install -U requests[security]\n\n4. If you are using CKAN version before 2.8.x you need to define the\n   ``populate_full_text_trigger`` in your database\n   ::\n\n     sudo -u postgres psql datastore_default -f full_text_function.sql\n\n   If successful it will print\n   ::\n\n     CREATE FUNCTION\n     ALTER FUNCTION\n\n   NB this assumes you used the defaults for the database name and username.\n   If in doubt, check your config's ``ckan.datastore.write_url``. If you don't have\n   database name ``datastore_default`` and username ``ckan_default`` then adjust\n   the psql option and ``full_text_function.sql`` before running this.\n\n5. Add ``xloader`` to the ``ckan.plugins`` setting in your CKAN\n   config file (by default the config file is located at\n   ``/etc/ckan/default/production.ini``).\n\n   You should also remove ``datapusher`` if it is in the list, to avoid them\n   both trying to load resources into the DataStore.\n\n   Ensure ``datastore`` is also listed, to enable CKAN DataStore.\n\n6. If it is a production server, you'll want to store jobs info in a more\n   robust database than the default sqlite file. It can happily use the main\n   CKAN postgres db by adding this line to the config, but with the same value\n   as you have for ``sqlalchemy.url``::\n\n     ckanext.xloader.jobs_db.uri = postgresql://ckan_default:pass@localhost/ckan_default\n\n   (This step can be skipped when just developing or testing.)\n\n7. Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu::\n\n     sudo service apache2 reload\n\n8. Run the worker. First test it on the command-line::\n\n     paster --plugin=ckan jobs -c /etc/ckan/default/ckan.ini worker\n\n   or if you have CKAN version 2.6.x or less (and are therefore using ckanext-rq)::\n\n     paster --plugin=ckanext-rq jobs -c /etc/ckan/default/ckan.ini worker\n\n   Test it will load a CSV ok by submitting a `CSV in the web interface <http://docs.ckan.org/projects/datapusher/en/latest/using.html#ckan-2-2-and-above>`_\n   or in another shell::\n\n     paster --plugin=ckanext-xloader xloader submit <dataset-name> -c /etc/ckan/default/ckan.ini\n\n   Clearly, running the worker on the command-line is only for testing - for\n   production services see:\n\n       http://docs.ckan.org/en/ckan-2.7.0/maintaining/background-tasks.html#using-supervisor\n\n   If you have CKAN version 2.6.x or less then you'll need to download\n   `supervisor-ckan-worker.conf <https://raw.githubusercontent.com/ckan/ckan/master/ckan/config/supervisor-ckan-worker.conf>`_ and adjust the ``command`` to reference\n   ckanext-rq.\n\n\n---------------\nConfig settings\n---------------\n\nConfiguration:\n\n::\n\n    # The connection string for the jobs database used by XLoader. The\n    # default of an sqlite file is fine for development. For production use a\n    # Postgresql database.\n    ckanext.xloader.jobs_db.uri = sqlite:////tmp/xloader_jobs.db\n\n    # The formats that are accepted. If the value of the resource.format is\n    # anything else then it won't be 'xloadered' to DataStore (and will therefore\n    # only be available to users in the form of the original download/link).\n    # Case insensitive.\n    # (optional, defaults are listed in plugin.py - DEFAULT_FORMATS).\n    ckanext.xloader.formats = csv application/csv xls application/vnd.ms-excel\n\n    # The maximum size of files to load into DataStore. In bytes. Default is 1 GB.\n    ckanext.xloader.max_content_length = 1000000000\n\n    # To always use messytables to load data, instead of attempting a direct\n    # PostgreSQL COPY, set this to True. This more closely matches the\n    # DataPusher's behavior. It has the advantage that the column types\n    # are guessed. However it is more error prone, far slower and you can't run\n    # the CPU-intensive queue on a separate machine.\n    ckanext.xloader.just_load_with_messytables = False\n\n    # The maximum time for the loading of a resource before it is aborted.\n    # Give an amount in seconds. Default is 60 minutes\n    ckanext.xloader.job_timeout = 3600\n\n    # Ignore the file hash when submitting to the DataStore, if set to True\n    # resources are always submitted (if their format matches), if set to\n    # False (default), resources are only submitted if their hash has changed.\n    ckanext.xloader.ignore_hash = False\n\n    # When loading a file that is bigger than `max_content_length`, xloader can\n    # still try and load some of the file, which is useful to display a\n    # preview. Set this option to the desired number of lines/rows that it\n    # loads in this case.\n    # If the file-type is supported (CSV, TSV) an excerpt with the number of\n    # `max_excerpt_lines` lines will be submitted while the `max_content_length`\n    # is not exceeded.\n    # If set to 0 (default) files that exceed the `max_content_length` will\n    # not be loaded into the datastore.\n    ckanext.xloader.max_excerpt_lines = 100\n\n------------------------\nDeveloper installation\n------------------------\n\nTo install XLoader for development, activate your CKAN virtualenv and\nin the directory up from your local ckan repo::\n\n    git clone https://github.com/ckan/ckanext-xloader.git\n    cd ckanext-xloader\n    python setup.py develop\n    pip install -r requirements.txt\n    pip install -r dev-requirements.txt\n\n\n-------------------------\nUpgrading from DataPusher\n-------------------------\n\nTo upgrade from DataPusher to XLoader:\n\n1. Install XLoader as above, including running the xloader worker.\n\n2. (Optional) For existing datasets that have been datapushed to datastore, freeze the column types (in the data dictionaries), so that XLoader doesn't change them back to string on next xload::\n\n       paster --plugin=ckanext-xloader migrate_types -c /etc/ckan/default/ckan.ini\n\n3. If you've not already, change the enabled plugin in your config - on the\n   ``ckan.plugins`` line replace ``datapusher`` with ``xloader``.\n\n4. (Optional) If you wish, you can disable the direct loading and continue to\n   just use messytables - for more about this see the docs on config option:\n   ``ckanext.xloader.just_load_with_messytables``\n\n5. Stop the datapusher worker::\n\n       sudo a2dissite datapusher\n\n6. Restart CKAN::\n\n       sudo service apache2 reload\n       sudo service nginx reload\n\n----------------------\nCommand-line interface\n----------------------\n\nYou can submit single or multiple resources to be xloaded using the\ncommand-line interface.\n\ne.g. ::\n\n    paster --plugin=ckanext-xloader xloader submit <dataset-name> -c /etc/ckan/default/ckan.ini\n\nFor debugging you can try xloading it synchronously (which does the load\ndirectly, rather than asking the worker to do it) with the ``-s`` option::\n\n    paster --plugin=ckanext-xloader xloader submit <dataset-name> -s -c /etc/ckan/default/ckan.ini\n\nSee the status of jobs::\n\n    paster --plugin=ckanext-xloader xloader status -c /etc/ckan/default/development.ini\n\nSubmit all datasets' resources to the DataStore::\n\n    paster --plugin=ckanext-xloader xloader submit all -c /etc/ckan/default/ckan.ini\n\nRe-submit all the resources already in the DataStore (Ignores any resources\nthat have not been stored in DataStore e.g. because they are not tabular)::\n\n    paster --plugin=ckanext-xloader xloader submit all-existing -c /etc/ckan/default/ckan.ini\n\n**Full list of XLoader CLI commands**::\n\n    paster --plugin=ckanext-xloader xloader --help\n\nJobs and workers\n----------------\n\nMain docs for managing jobs: <https://docs.ckan.org/en/latest/maintaining/background-tasks.html#managing-background-jobs>\n\nMain docs for running and managing workers are here: https://docs.ckan.org/en/latest/maintaining/background-tasks.html#running-background-jobs\n\nUseful commands:\n\nClear (delete) all outstanding jobs::\n\n    paster --plugin=ckan jobs clear [QUEUES] -c /etc/ckan/default/development.ini\n\nIf having trouble with the worker process, restarting it can help::\n\n    sudo supervisorctl restart ckan-worker:*\n\n---------------\nTroubleshooting\n---------------\n\n**KeyError: \"Action 'datastore_search' not found\"**\n\nYou need to enable the `datastore` plugin in your CKAN config. See\n'Installation' section above to do this and restart the worker.\n\n**ProgrammingError: (ProgrammingError) relation \"_table_metadata\" does not\nexist**\n\nYour DataStore permissions have not been set-up - see:\n<https://docs.ckan.org/en/latest/maintaining/datastore.html#set-permissions>\n\n**When editing a package, all its existing resources get re-loaded by xloader**\n\nThis behavior was documented in\n`Issue 75 <https://github.com/ckan/ckanext-xloader/issues/75>`_ and is related\nto a bug in CKAN that is fixed in versions 2.6.9, 2.7.7, 2.8.4\nand 2.9.0+.\n\n-----------------\nRunning the Tests\n-----------------\n\nThe first time, your test datastore database needs the trigger applied::\n\n    sudo -u postgres psql datastore_test -f full_text_function.sql\n\nTo run the tests, do::\n\n    nosetests --nologcapture --with-pylons=test.ini\n\nTo run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (``pip install coverage``) then run::\n\n    nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.xloader --cover-inclusive --cover-erase --cover-tests\n\n----------------------------------\nReleasing a New Version of XLoader\n----------------------------------\n\nXLoader is available on PyPI as https://pypi.org/project/ckanext-xloader.\n\nTo publish a new version to PyPI follow these steps:\n\n1. Update the version number in the ``setup.py`` file.\n   See `PEP 440 <http://legacy.python.org/dev/peps/pep-0440/#public-version-identifiers>`_\n   for how to choose version numbers.\n\n2. Update the CHANGELOG.\n\n3. Make sure you have the latest version of necessary packages::\n\n       pip install --upgrade setuptools wheel twine\n\n4. Create source and binary distributions of the new version::\n\n       python setup.py sdist bdist_wheel && twine check dist/*\n\n   Fix any errors you get.\n\n5. Upload the source distribution to PyPI::\n\n       twine upload dist/*\n\n6. Commit any outstanding changes::\n\n       git commit -a\n       git push\n\n7. Tag the new release of the project on GitHub with the version number from\n   the ``setup.py`` file. For example if the version number in ``setup.py`` is\n   0.0.1 then do::\n\n       git tag 0.0.1\n       git push --tags\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ckan/ckanext-xloader", "keywords": "CKAN extension datastore", "license": "AGPL", "maintainer": "", "maintainer_email": "", "name": "ckanext-xloader", "package_url": "https://pypi.org/project/ckanext-xloader/", "platform": "", "project_url": "https://pypi.org/project/ckanext-xloader/", "project_urls": {"Homepage": "https://github.com/ckan/ckanext-xloader"}, "release_url": "https://pypi.org/project/ckanext-xloader/0.6.1/", "requires_dist": null, "requires_python": "", "summary": "Express Loader - quickly load data into CKAN DataStore", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/ckan/ckanext-xloader\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ckan/ckanext-xloader.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e2f8c9690f3894f45b1b110394a45ea570a464b/68747470733a2f2f7472617669732d63692e6f72672f636b616e2f636b616e6578742d786c6f616465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/ckanext-xloader/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97a19fc068dff36408d6b1b4c3bf441d8c958271/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636b616e6578742d786c6f616465722e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-xloader/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49b7ac93a0f704a3c493c36045d254e9564de196/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636b616e6578742d786c6f616465722e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-xloader/\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1653f71f45cbb98b1066fd03c30e986693a72b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f636b616e6578742d786c6f616465722e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-xloader/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08b47e09cc48b33f5bd375f44b12027e40f7f9a0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636b616e6578742d786c6f616465722e737667\"></a>\n<div id=\"xloader-ckanext-xloader\">\n<h2>XLoader - ckanext-xloader</h2>\n<p>Loads CSV (and similar) data into CKAN\u2019s DataStore. Designed as a replacement\nfor DataPusher because it offers ten times the speed and more robustness\n(hence the name, derived from \u201cExpress Loader\u201d)</p>\n<p><strong>OpenGov Inc.</strong> has sponsored this development, with the aim of benefitting\nopen data infrastructure worldwide.</p>\n<div id=\"key-differences-from-datapusher\">\n<h3>Key differences from DataPusher</h3>\n<div id=\"speed-of-loading\">\n<h4>Speed of loading</h4>\n<p>DataPusher - parses CSV rows, converts to detected column types, converts the\ndata to a JSON string, calls datastore_create for each batch of rows, which\nreformats the data into an INSERT statement string, which is passed to\nPostgreSQL.</p>\n<p>XLoader - pipes the CSV file directly into PostgreSQL using COPY.</p>\n<p>In <a href=\"https://github.com/ckan/ckanext-xloader/issues/25\" rel=\"nofollow\">tests</a>, XLoader\nis over ten times faster than DataPusher.</p>\n</div>\n<div id=\"robustness\">\n<h4>Robustness</h4>\n<p>DataPusher - one cause of failure was when casting cells to a guessed type. The\ntype of a column was decided by looking at the values of only the first few\nrows. So if a column is mainly numeric or dates, but a string (like \u201cN/A\u201d)\ncomes later on, then this will cause the load to error at that point, leaving\nit half-loaded into DataStore.</p>\n<p>XLoader - loads all the cells as text, before allowing the admin to\nconvert columns to the types they want (using the Data Dictionary feature). In\nfuture it could do automatic detection and conversion.</p>\n</div>\n<div id=\"simpler-queueing-tech\">\n<h4>Simpler queueing tech</h4>\n<p>DataPusher - job queue is done by ckan-service-provider which is bespoke,\ncomplicated and stores jobs in its own database (sqlite by default).</p>\n<p>XLoader - job queue is done by RQ, which is simpler, is backed by Redis, allows\naccess to the CKAN model and is CKAN\u2019s default queue technology (sinc CKAN\n2.7). You can also debug jobs easily using pdb. Job results are stored in\nSqlite by default, and for production simply specify CKAN\u2019s database in the\nconfig and it\u2019s held there - easy.</p>\n<p>(The other obvious candidate is Celery, but we don\u2019t need its heavyweight\narchitecture and its jobs are not debuggable with pdb.)</p>\n</div>\n<div id=\"separate-web-server\">\n<h4>Separate web server</h4>\n<p>DataPusher - has the complication that the queue jobs are done by a separate\n(Flask) web app, apart from CKAN. This was the design because the job requires\nintensive processing to convert every line of the data into JSON. However it\nmeans more complicated code as info needs to be passed between the services in\nhttp requests, more for the user to set-up and manage - another app config,\nanother apache config, separate log files.</p>\n<p>XLoader - the job runs in a worker process, in the same app as CKAN, so\ncan access the CKAN config, db and logging directly and avoids many HTTP calls.\nThis simplification makes sense because the xloader job doesn\u2019t need to do much\nprocessing - mainly it is streaming the CSV file from disk into PostgreSQL.</p>\n</div>\n<div id=\"caveat-column-types\">\n<h4>Caveat - column types</h4>\n<p>Note: With XLoader, all columns are stored in DataStore\u2019s database as \u2018text\u2019\ntype (whereas DataPusher did some rudimentary type guessing - see \u2018Robustness\u2019\nabove). However once a resource is xloaded, an admin can use the resource\u2019s\nData Dictionary tab (CKAN 2.7 onwards) to change these types to numeric or\ndatestamp and re-load the file. When migrating from DataPusher to XLoader you\ncan preserve the types of existing resources by using the <tt>migrate_types</tt>\ncommand.</p>\n<p>There is scope to add functionality for automatically guessing column type -\noffers to contribute this are welcomed.</p>\n</div>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Works with CKAN 2.7.x and later.</p>\n<p>Works with CKAN 2.3.x - 2.6.x if you install ckanext-rq.</p>\n<p>Compatibility with core CKAN versions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>CKAN version</th>\n<th>Compatibility</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>2.3</td>\n<td>yes, but no longer tested and you must install ckanext-rq</td>\n</tr>\n<tr><td>2.4</td>\n<td>yes, but no longer tested and you must install ckanext-rq</td>\n</tr>\n<tr><td>2.5</td>\n<td>yes, but no longer tested and you must install ckanext-rq</td>\n</tr>\n<tr><td>2.6</td>\n<td>yes, but no longer tested and you must install ckanext-rq</td>\n</tr>\n<tr><td>2.7</td>\n<td>yes</td>\n</tr>\n<tr><td>2.8</td>\n<td>yes</td>\n</tr>\n<tr><td>2.9</td>\n<td>not yet - see <a href=\"https://github.com/ckan/ckanext-xloader/issues/104\" rel=\"nofollow\">https://github.com/ckan/ckanext-xloader/issues/104</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install XLoader:</p>\n<ol>\n<li><p>Activate your CKAN virtual environment, for example:</p>\n<pre>. /usr/lib/ckan/default/bin/activate\n</pre>\n</li>\n<li><p>Install the ckanext-xloader Python package into your virtual environment:</p>\n<pre>pip install ckanext-xloader\n</pre>\n</li>\n<li><p>Install dependencies:</p>\n<pre>pip install -r https://raw.githubusercontent.com/ckan/ckanext-xloader/master/requirements.txt\npip install -U requests[security]\n</pre>\n</li>\n<li><p>If you are using CKAN version before 2.8.x you need to define the\n<tt>populate_full_text_trigger</tt> in your database</p>\n<pre>sudo -u postgres psql datastore_default -f full_text_function.sql\n</pre>\n<p>If successful it will print</p>\n<pre>CREATE FUNCTION\nALTER FUNCTION\n</pre>\n<p>NB this assumes you used the defaults for the database name and username.\nIf in doubt, check your config\u2019s <tt>ckan.datastore.write_url</tt>. If you don\u2019t have\ndatabase name <tt>datastore_default</tt> and username <tt>ckan_default</tt> then adjust\nthe psql option and <tt>full_text_function.sql</tt> before running this.</p>\n</li>\n<li><p>Add <tt>xloader</tt> to the <tt>ckan.plugins</tt> setting in your CKAN\nconfig file (by default the config file is located at\n<tt>/etc/ckan/default/production.ini</tt>).</p>\n<p>You should also remove <tt>datapusher</tt> if it is in the list, to avoid them\nboth trying to load resources into the DataStore.</p>\n<p>Ensure <tt>datastore</tt> is also listed, to enable CKAN DataStore.</p>\n</li>\n<li><p>If it is a production server, you\u2019ll want to store jobs info in a more\nrobust database than the default sqlite file. It can happily use the main\nCKAN postgres db by adding this line to the config, but with the same value\nas you have for <tt>sqlalchemy.url</tt>:</p>\n<pre>ckanext.xloader.jobs_db.uri = postgresql://ckan_default:pass@localhost/ckan_default\n</pre>\n<p>(This step can be skipped when just developing or testing.)</p>\n</li>\n<li><p>Restart CKAN. For example if you\u2019ve deployed CKAN with Apache on Ubuntu:</p>\n<pre>sudo service apache2 reload\n</pre>\n</li>\n<li><p>Run the worker. First test it on the command-line:</p>\n<pre>paster --plugin=ckan jobs -c /etc/ckan/default/ckan.ini worker\n</pre>\n<p>or if you have CKAN version 2.6.x or less (and are therefore using ckanext-rq):</p>\n<pre>paster --plugin=ckanext-rq jobs -c /etc/ckan/default/ckan.ini worker\n</pre>\n<p>Test it will load a CSV ok by submitting a <a href=\"http://docs.ckan.org/projects/datapusher/en/latest/using.html#ckan-2-2-and-above\" rel=\"nofollow\">CSV in the web interface</a>\nor in another shell:</p>\n<pre>paster --plugin=ckanext-xloader xloader submit &lt;dataset-name&gt; -c /etc/ckan/default/ckan.ini\n</pre>\n<p>Clearly, running the worker on the command-line is only for testing - for\nproduction services see:</p>\n<blockquote>\n<p><a href=\"http://docs.ckan.org/en/ckan-2.7.0/maintaining/background-tasks.html#using-supervisor\" rel=\"nofollow\">http://docs.ckan.org/en/ckan-2.7.0/maintaining/background-tasks.html#using-supervisor</a></p>\n</blockquote>\n<p>If you have CKAN version 2.6.x or less then you\u2019ll need to download\n<a href=\"https://raw.githubusercontent.com/ckan/ckan/master/ckan/config/supervisor-ckan-worker.conf\" rel=\"nofollow\">supervisor-ckan-worker.conf</a> and adjust the <tt>command</tt> to reference\nckanext-rq.</p>\n</li>\n</ol>\n</div>\n<div id=\"config-settings\">\n<h3>Config settings</h3>\n<p>Configuration:</p>\n<pre># The connection string for the jobs database used by XLoader. The\n# default of an sqlite file is fine for development. For production use a\n# Postgresql database.\nckanext.xloader.jobs_db.uri = sqlite:////tmp/xloader_jobs.db\n\n# The formats that are accepted. If the value of the resource.format is\n# anything else then it won't be 'xloadered' to DataStore (and will therefore\n# only be available to users in the form of the original download/link).\n# Case insensitive.\n# (optional, defaults are listed in plugin.py - DEFAULT_FORMATS).\nckanext.xloader.formats = csv application/csv xls application/vnd.ms-excel\n\n# The maximum size of files to load into DataStore. In bytes. Default is 1 GB.\nckanext.xloader.max_content_length = 1000000000\n\n# To always use messytables to load data, instead of attempting a direct\n# PostgreSQL COPY, set this to True. This more closely matches the\n# DataPusher's behavior. It has the advantage that the column types\n# are guessed. However it is more error prone, far slower and you can't run\n# the CPU-intensive queue on a separate machine.\nckanext.xloader.just_load_with_messytables = False\n\n# The maximum time for the loading of a resource before it is aborted.\n# Give an amount in seconds. Default is 60 minutes\nckanext.xloader.job_timeout = 3600\n\n# Ignore the file hash when submitting to the DataStore, if set to True\n# resources are always submitted (if their format matches), if set to\n# False (default), resources are only submitted if their hash has changed.\nckanext.xloader.ignore_hash = False\n\n# When loading a file that is bigger than `max_content_length`, xloader can\n# still try and load some of the file, which is useful to display a\n# preview. Set this option to the desired number of lines/rows that it\n# loads in this case.\n# If the file-type is supported (CSV, TSV) an excerpt with the number of\n# `max_excerpt_lines` lines will be submitted while the `max_content_length`\n# is not exceeded.\n# If set to 0 (default) files that exceed the `max_content_length` will\n# not be loaded into the datastore.\nckanext.xloader.max_excerpt_lines = 100\n</pre>\n</div>\n<div id=\"developer-installation\">\n<h3>Developer installation</h3>\n<p>To install XLoader for development, activate your CKAN virtualenv and\nin the directory up from your local ckan repo:</p>\n<pre>git clone https://github.com/ckan/ckanext-xloader.git\ncd ckanext-xloader\npython setup.py develop\npip install -r requirements.txt\npip install -r dev-requirements.txt\n</pre>\n</div>\n<div id=\"upgrading-from-datapusher\">\n<h3>Upgrading from DataPusher</h3>\n<p>To upgrade from DataPusher to XLoader:</p>\n<ol>\n<li><p>Install XLoader as above, including running the xloader worker.</p>\n</li>\n<li><p>(Optional) For existing datasets that have been datapushed to datastore, freeze the column types (in the data dictionaries), so that XLoader doesn\u2019t change them back to string on next xload:</p>\n<pre>paster --plugin=ckanext-xloader migrate_types -c /etc/ckan/default/ckan.ini\n</pre>\n</li>\n<li><p>If you\u2019ve not already, change the enabled plugin in your config - on the\n<tt>ckan.plugins</tt> line replace <tt>datapusher</tt> with <tt>xloader</tt>.</p>\n</li>\n<li><p>(Optional) If you wish, you can disable the direct loading and continue to\njust use messytables - for more about this see the docs on config option:\n<tt>ckanext.xloader.just_load_with_messytables</tt></p>\n</li>\n<li><p>Stop the datapusher worker:</p>\n<pre>sudo a2dissite datapusher\n</pre>\n</li>\n<li><p>Restart CKAN:</p>\n<pre>sudo service apache2 reload\nsudo service nginx reload\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"command-line-interface\">\n<h3>Command-line interface</h3>\n<p>You can submit single or multiple resources to be xloaded using the\ncommand-line interface.</p>\n<p>e.g.</p>\n<pre>paster --plugin=ckanext-xloader xloader submit &lt;dataset-name&gt; -c /etc/ckan/default/ckan.ini\n</pre>\n<p>For debugging you can try xloading it synchronously (which does the load\ndirectly, rather than asking the worker to do it) with the <tt><span class=\"pre\">-s</span></tt> option:</p>\n<pre>paster --plugin=ckanext-xloader xloader submit &lt;dataset-name&gt; -s -c /etc/ckan/default/ckan.ini\n</pre>\n<p>See the status of jobs:</p>\n<pre>paster --plugin=ckanext-xloader xloader status -c /etc/ckan/default/development.ini\n</pre>\n<p>Submit all datasets\u2019 resources to the DataStore:</p>\n<pre>paster --plugin=ckanext-xloader xloader submit all -c /etc/ckan/default/ckan.ini\n</pre>\n<p>Re-submit all the resources already in the DataStore (Ignores any resources\nthat have not been stored in DataStore e.g. because they are not tabular):</p>\n<pre>paster --plugin=ckanext-xloader xloader submit all-existing -c /etc/ckan/default/ckan.ini\n</pre>\n<p><strong>Full list of XLoader CLI commands</strong>:</p>\n<pre>paster --plugin=ckanext-xloader xloader --help\n</pre>\n<div id=\"jobs-and-workers\">\n<h4>Jobs and workers</h4>\n<p>Main docs for managing jobs: &lt;<a href=\"https://docs.ckan.org/en/latest/maintaining/background-tasks.html#managing-background-jobs\" rel=\"nofollow\">https://docs.ckan.org/en/latest/maintaining/background-tasks.html#managing-background-jobs</a>&gt;</p>\n<p>Main docs for running and managing workers are here: <a href=\"https://docs.ckan.org/en/latest/maintaining/background-tasks.html#running-background-jobs\" rel=\"nofollow\">https://docs.ckan.org/en/latest/maintaining/background-tasks.html#running-background-jobs</a></p>\n<p>Useful commands:</p>\n<p>Clear (delete) all outstanding jobs:</p>\n<pre>paster --plugin=ckan jobs clear [QUEUES] -c /etc/ckan/default/development.ini\n</pre>\n<p>If having trouble with the worker process, restarting it can help:</p>\n<pre>sudo supervisorctl restart ckan-worker:*\n</pre>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<p><strong>KeyError: \u201cAction \u2018datastore_search\u2019 not found\u201d</strong></p>\n<p>You need to enable the <cite>datastore</cite> plugin in your CKAN config. See\n\u2018Installation\u2019 section above to do this and restart the worker.</p>\n<p><strong>ProgrammingError: (ProgrammingError) relation \u201c_table_metadata\u201d does not\nexist</strong></p>\n<p>Your DataStore permissions have not been set-up - see:\n&lt;<a href=\"https://docs.ckan.org/en/latest/maintaining/datastore.html#set-permissions\" rel=\"nofollow\">https://docs.ckan.org/en/latest/maintaining/datastore.html#set-permissions</a>&gt;</p>\n<p><strong>When editing a package, all its existing resources get re-loaded by xloader</strong></p>\n<p>This behavior was documented in\n<a href=\"https://github.com/ckan/ckanext-xloader/issues/75\" rel=\"nofollow\">Issue 75</a> and is related\nto a bug in CKAN that is fixed in versions 2.6.9, 2.7.7, 2.8.4\nand 2.9.0+.</p>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the Tests</h3>\n<p>The first time, your test datastore database needs the trigger applied:</p>\n<pre>sudo -u postgres psql datastore_test -f full_text_function.sql\n</pre>\n<p>To run the tests, do:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini\n</pre>\n<p>To run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (<tt>pip install coverage</tt>) then run:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.xloader --cover-inclusive --cover-erase --cover-tests\n</pre>\n</div>\n<div id=\"releasing-a-new-version-of-xloader\">\n<h3>Releasing a New Version of XLoader</h3>\n<p>XLoader is available on PyPI as <a href=\"https://pypi.org/project/ckanext-xloader\" rel=\"nofollow\">https://pypi.org/project/ckanext-xloader</a>.</p>\n<p>To publish a new version to PyPI follow these steps:</p>\n<ol>\n<li><p>Update the version number in the <tt>setup.py</tt> file.\nSee <a href=\"http://legacy.python.org/dev/peps/pep-0440/#public-version-identifiers\" rel=\"nofollow\">PEP 440</a>\nfor how to choose version numbers.</p>\n</li>\n<li><p>Update the CHANGELOG.</p>\n</li>\n<li><p>Make sure you have the latest version of necessary packages:</p>\n<pre>pip install --upgrade setuptools wheel twine\n</pre>\n</li>\n<li><p>Create source and binary distributions of the new version:</p>\n<pre>python setup.py sdist bdist_wheel &amp;&amp; twine check dist/*\n</pre>\n<p>Fix any errors you get.</p>\n</li>\n<li><p>Upload the source distribution to PyPI:</p>\n<pre>twine upload dist/*\n</pre>\n</li>\n<li><p>Commit any outstanding changes:</p>\n<pre>git commit -a\ngit push\n</pre>\n</li>\n<li><p>Tag the new release of the project on GitHub with the version number from\nthe <tt>setup.py</tt> file. For example if the version number in <tt>setup.py</tt> is\n0.0.1 then do:</p>\n<pre>git tag 0.0.1\ngit push --tags\n</pre>\n</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7159693, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3c5cb8760f1edf5af7a37933de8a590a", "sha256": "993b741e3d91a81ae5ff74bc38c7c5b473a7667e31baf0bcf58b7dcede59f54c"}, "downloads": -1, "filename": "ckanext-xloader-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3c5cb8760f1edf5af7a37933de8a590a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92091, "upload_time": "2017-11-10T17:06:55", "upload_time_iso_8601": "2017-11-10T17:06:55.342183Z", "url": "https://files.pythonhosted.org/packages/8f/6b/eff2c598831795c9b28de61fafcae4278e2dce70e5922ab32fd1126c7829/ckanext-xloader-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3319d8bf65856eec1793fb8a7bb3bc15", "sha256": "728908df2e324b6a931463480072cbc94840e690b9a74bbbf5286d1d3bf3e8e5"}, "downloads": -1, "filename": "ckanext-xloader-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3319d8bf65856eec1793fb8a7bb3bc15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92191, "upload_time": "2017-11-17T14:50:48", "upload_time_iso_8601": "2017-11-17T14:50:48.661554Z", "url": "https://files.pythonhosted.org/packages/47/ee/d6a9fe9758d5407487df9cb46b028c75e5f235f22fa157da6fc8c3ef71db/ckanext-xloader-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "af542faed8b77ea24aff0f815b119269", "sha256": "6edf820b563295527838f927bf36c70073f70568e8bc8e682d526efa4c3eaf4a"}, "downloads": -1, "filename": "ckanext-xloader-0.3.1.tar.gz", "has_sig": false, "md5_digest": "af542faed8b77ea24aff0f815b119269", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94686, "upload_time": "2018-01-22T09:58:20", "upload_time_iso_8601": "2018-01-22T09:58:20.766439Z", "url": "https://files.pythonhosted.org/packages/1c/f4/59d2de5b425af29a9ef79c95f7d0e0a3af31230cd8b3f805d0c14d15626d/ckanext-xloader-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "59ae0cc52840e2ad3db6f68ec4ecbefc", "sha256": "631dc8cd9f0787832c8d043602800512def7ca49653486691d25087c149f4e7d"}, "downloads": -1, "filename": "ckanext_xloader-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "59ae0cc52840e2ad3db6f68ec4ecbefc", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 61544, "upload_time": "2019-06-21T12:53:50", "upload_time_iso_8601": "2019-06-21T12:53:50.864067Z", "url": "https://files.pythonhosted.org/packages/0f/ef/dc5ca0dd4f2d65c6b25038ffaf932fc22159bd853d69e99d2afa28056508/ckanext_xloader-0.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "757b02c968cd5e3d157276e5e9d58639", "sha256": "acdf44a3efd89208f05c56089089f6e2ad5fbe452641318c9e3175c8f2c3513e"}, "downloads": -1, "filename": "ckanext-xloader-0.4.0.tar.gz", "has_sig": false, "md5_digest": "757b02c968cd5e3d157276e5e9d58639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47415, "upload_time": "2019-06-21T12:53:53", "upload_time_iso_8601": "2019-06-21T12:53:53.379858Z", "url": "https://files.pythonhosted.org/packages/eb/ea/2109b80bdaa16eaab13dba7b39d4c39e9c79c122db37c24dd7d714540499/ckanext-xloader-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "9c824aceb045f979b0d8b20b0b97c22b", "sha256": "49ebec215b7474a0586b77c61de7d4eba14c7558d5ea49b2b468a444d06789fe"}, "downloads": -1, "filename": "ckanext_xloader-0.4.1-py2-none-any.whl", "has_sig": false, "md5_digest": "9c824aceb045f979b0d8b20b0b97c22b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 61973, "upload_time": "2019-11-13T07:33:06", "upload_time_iso_8601": "2019-11-13T07:33:06.559179Z", "url": "https://files.pythonhosted.org/packages/35/6e/714fda64b53e8a3f4f109e0fd4f5ff65a28431bda263bde42dc17d222daa/ckanext_xloader-0.4.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8397ea1343a102e64c530f8a4d4716af", "sha256": "5efc3138ca325bdb0e741516244083cb57d89eea1c59b5b1d3cd3bbedf46d30f"}, "downloads": -1, "filename": "ckanext-xloader-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8397ea1343a102e64c530f8a4d4716af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48075, "upload_time": "2019-11-13T07:33:09", "upload_time_iso_8601": "2019-11-13T07:33:09.859450Z", "url": "https://files.pythonhosted.org/packages/7d/21/4f41996bc74e4525f0f4c652a7587462abe3f175411cc7c882d443abf1b0/ckanext-xloader-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "10132b1433559ead8a708cd49b6726bc", "sha256": "c516138999c50224d1d8d5d36092bc48df1bfd429ba73d9f9993a285073e1c94"}, "downloads": -1, "filename": "ckanext_xloader-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "10132b1433559ead8a708cd49b6726bc", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 66880, "upload_time": "2019-12-04T10:30:15", "upload_time_iso_8601": "2019-12-04T10:30:15.197953Z", "url": "https://files.pythonhosted.org/packages/54/d3/4d6239bff1338bac2d5bd90f9700f923dda450152d33dc3804cb42a289c8/ckanext_xloader-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74669c489073a27c9e8dcff3278b1b8b", "sha256": "d5d6f61a32c92cb2813a5a97169e875a40907b103ae7ced56fd570969006656d"}, "downloads": -1, "filename": "ckanext-xloader-0.5.0.tar.gz", "has_sig": false, "md5_digest": "74669c489073a27c9e8dcff3278b1b8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70019, "upload_time": "2019-12-04T10:30:17", "upload_time_iso_8601": "2019-12-04T10:30:17.326624Z", "url": "https://files.pythonhosted.org/packages/3e/c5/087c5ac36e4cd4407d85c9dcb5264f1b8de2024be028cde02f94b1067d1a/ckanext-xloader-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "1531d19108712fb7cd1c487b89a0131c", "sha256": "0752bc4d1dcfb913884803f338021e2b102e352ff370c2806418786179951955"}, "downloads": -1, "filename": "ckanext_xloader-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1531d19108712fb7cd1c487b89a0131c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 81488, "upload_time": "2020-04-27T21:34:00", "upload_time_iso_8601": "2020-04-27T21:34:00.188236Z", "url": "https://files.pythonhosted.org/packages/ed/a7/f6a288cb3c2c85d99d282f30ce5bdfb60c5a31ff54524a1dbc597a879238/ckanext_xloader-0.6.0-py2-none-any.whl", "yanked": true}, {"comment_text": "", "digests": {"md5": "2f83195131bcd69eb5b9512faee17e96", "sha256": "901828e9545611441be27f6df5c70614da8907efae8805e797a3ca262da5645d"}, "downloads": -1, "filename": "ckanext-xloader-0.6.0.tar.gz", "has_sig": false, "md5_digest": "2f83195131bcd69eb5b9512faee17e96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77786, "upload_time": "2020-04-27T21:34:01", "upload_time_iso_8601": "2020-04-27T21:34:01.701086Z", "url": "https://files.pythonhosted.org/packages/a4/28/2ae67a8474679fdd5b8a7820bcaee7b74863d3906425fcda0fcb8b808373/ckanext-xloader-0.6.0.tar.gz", "yanked": true}], "0.6.1": [{"comment_text": "", "digests": {"md5": "b0fc249f6288e7ceb784d48458915939", "sha256": "85d4106e1703927c7a2ce7a1cbfcb8016996ee19abbd60ad9ae15af1d9f1cbec"}, "downloads": -1, "filename": "ckanext_xloader-0.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b0fc249f6288e7ceb784d48458915939", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 67878, "upload_time": "2020-05-03T21:00:40", "upload_time_iso_8601": "2020-05-03T21:00:40.191471Z", "url": "https://files.pythonhosted.org/packages/e4/96/82c6b35ded10324b9845b53f0a99a200d75d1b45ad2fcc79e569d58f8bf6/ckanext_xloader-0.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12144bffa1e36158c61120e379b66e3d", "sha256": "6589672f9e4b037c0ae862696e3954a33a2865b5370b114b6a436b43cc297b98"}, "downloads": -1, "filename": "ckanext-xloader-0.6.1.tar.gz", "has_sig": false, "md5_digest": "12144bffa1e36158c61120e379b66e3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72291, "upload_time": "2020-05-03T21:00:42", "upload_time_iso_8601": "2020-05-03T21:00:42.360664Z", "url": "https://files.pythonhosted.org/packages/c9/fa/99005a94e106a3703de2a90afc84808cba845ba49e061a3341a5fe3d7a6b/ckanext-xloader-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0fc249f6288e7ceb784d48458915939", "sha256": "85d4106e1703927c7a2ce7a1cbfcb8016996ee19abbd60ad9ae15af1d9f1cbec"}, "downloads": -1, "filename": "ckanext_xloader-0.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b0fc249f6288e7ceb784d48458915939", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 67878, "upload_time": "2020-05-03T21:00:40", "upload_time_iso_8601": "2020-05-03T21:00:40.191471Z", "url": "https://files.pythonhosted.org/packages/e4/96/82c6b35ded10324b9845b53f0a99a200d75d1b45ad2fcc79e569d58f8bf6/ckanext_xloader-0.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12144bffa1e36158c61120e379b66e3d", "sha256": "6589672f9e4b037c0ae862696e3954a33a2865b5370b114b6a436b43cc297b98"}, "downloads": -1, "filename": "ckanext-xloader-0.6.1.tar.gz", "has_sig": false, "md5_digest": "12144bffa1e36158c61120e379b66e3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72291, "upload_time": "2020-05-03T21:00:42", "upload_time_iso_8601": "2020-05-03T21:00:42.360664Z", "url": "https://files.pythonhosted.org/packages/c9/fa/99005a94e106a3703de2a90afc84808cba845ba49e061a3341a5fe3d7a6b/ckanext-xloader-0.6.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:13 2020"}