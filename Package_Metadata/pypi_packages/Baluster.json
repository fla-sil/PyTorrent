{"info": {"author": "Csaba Palankai", "author_email": "csaba.palankai@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "==================================\nBaluster - Python Composition tool\n==================================\n\n.. image:: https://travis-ci.org/palankai/baluster.svg?branch=master\n    :target: https://travis-ci.org/palankai/baluster\n\n| Project homepage: `<https://github.com/palankai/baluster>`_\n| Issues: `<https://github.com/palankai/baluster/issues>`_\n|\n\nWhat is this package for\n------------------------\n\nThis package provides a simple way to build back structure of application.\nCan be used building composite root as acting a factory for resources,\nbuilding a fixture factory for tests.\n\nFeatures\n--------\n\n  - Lazy initialisation\n  - Simple composition and dependency handling\n\n\nExample - composie root\n-----------------------\n\n.. code:: python\n\n    from baluster import Baluster, placeholders\n    import psycopg2\n\n    class ApplicationRoot(Baluster):\n        @placeholders.factory\n        def db(self, root):\n            # Will be called at the first use\n            # Will be cached so won't be called again\n            return psycopg2.connect(\"dbname=test user=postgres\")\n\n        @db.close\n        def _close_db(self, root, db):\n            db.close()\n\n        @placeholders.factory\n        def cr(self, root):\n            return self.db.cursor()\n\n        @cr.close\n        def _close_cr(self, root, cr):\n            cr.close()\n\n\n    def main():\n        approot = ApplicationRoot()\n        with approot:\n            approot.cr.execute('SELECT * FROM user')\n\n        # at this point the connection and the cursor has already been closed\n\n\nExample - async composie root\n-----------------------------\n\n.. code:: python\n\n    from baluster import Baluster, placeholders\n\n    class AsyncApplicationRoot(Baluster):\n\n        @placeholders.factory\n        async def resource(self, root):\n            # Will be called at the first use\n            # Will be cached so won't be called again\n            return await some_aync_resource()\n\n        @db.close\n        async def _close_resource(self, root, resource):\n            await resource.close()\n\n\n    def main():\n        approot = AsyncApplicationRoot()\n        async with approot:\n            conn = await approot.resource\n            await conn.operation(...)\n\n        # at this point the resource has already been closed\n\n\nExample - fixture factory for tests\n-----------------------------------\n\n.. code:: python\n\n    from baluster import Baluster, placeholders\n    import psycopg2\n\n    class Fixtures(Baluster):\n\n        @placeholders.factory\n        def cr(self, root):\n            conn = psycopg2.connect(\"dbname=test user=postgres\")\n            return conn.cursor()\n\n        class users(Baluster):\n\n            @placeholders.factory\n            def user(self, root):\n                root.cr.execute('SELECT * FROM user WHERE id=1')\n                return User(root.cr.fetchone())\n\n            @placeholders.factory\n            def customer(self, root):\n                root.cr.execute('SELECT * FROM customer WHERE id=1')\n                return Customer(root.cr.fetchone())\n\n        class orders(Baluster):\n\n            @placeholders.factory\n            def amount(self, root):\n                return 100\n\n            @placeholders.factory\n            def quantity(self, root):\n                return 1\n\n            @placeholders.factory\n            def order(self, root):\n                customer = root.users.customer\n                created_by = root.users.user\n                amount = self.amount\n                # Fictive order object...\n                return Order(\n                    customer=customer, created_by=created_by,\n                    amount=amount, quantity=quantity\n                )\n\n            @placeholders.factory\n            def shipped_order(self, root):\n                order = self.order\n                order.mark_shipped()\n                return order\n\n\n    def test_order():\n        # Demonstrate a few use fictive usecase\n\n        # Creating order with defaults\n        f = Fixtures()\n        assert f.order.calculated_total_value == 100\n        assert f.order.shipping_address == f.users.customer.address\n\n        # Create new fixtures, but keep some cached data\n        f2 = f.copy('cr', 'users')\n\n        # Set some value\n        f2.order.amount = 50\n        f2.order.quantity = 3\n        assert f2.order.calculated_total_value == 150\n\n        # Manage different stage of object life\n        f3 = f.copy('cr', 'users')\n        order = f3.shipped_order\n\n        with pytest.raises(OrderException):\n            order.cancel()\n            # as it is shipped\n\n\nInstallation\n------------\n\nPython target: >=3.6\n\n.. code::\n\n    $ pip install baluster\n\nDependencies\n------------\n\nThe package is independent, using only the python standard library.\n\n\nDevelopment\n-----------\n\n.. code::\n\n   pip install -r requirements-dev.txt\n\nThis installs the package in development mode (`setup.py develop`)\nand the testing packages.\nI would like to achive nearly 100% test coverage.\n\nTest\n~~~~\n.. code::\n\n   pytest\n\n\nContribution\n------------\n\nI really welcome any comments!\nI would be happy if you fork my code and create pull requests.\nFor an approved pull request flake8 have to pass just as all of tests.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/palankai/baluster", "keywords": "context,context manager,async", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Baluster", "package_url": "https://pypi.org/project/Baluster/", "platform": "", "project_url": "https://pypi.org/project/Baluster/", "project_urls": {"Homepage": "https://gitlab.com/palankai/baluster"}, "release_url": "https://pypi.org/project/Baluster/0.2.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Provides hierarchical factory", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/palankai/baluster\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/palankai/baluster.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7edb3b3f2ff38d0a45e4cd6e0f2080adcc95267b/68747470733a2f2f7472617669732d63692e6f72672f70616c616e6b61692f62616c75737465722e7376673f6272616e63683d6d6173746572\"></a>\n<div>\n<div>Project homepage: <a href=\"https://github.com/palankai/baluster\" rel=\"nofollow\">https://github.com/palankai/baluster</a></div>\n<div>Issues: <a href=\"https://github.com/palankai/baluster/issues\" rel=\"nofollow\">https://github.com/palankai/baluster/issues</a></div>\n<div><br></div>\n</div>\n<div id=\"what-is-this-package-for\">\n<h2>What is this package for</h2>\n<p>This package provides a simple way to build back structure of application.\nCan be used building composite root as acting a factory for resources,\nbuilding a fixture factory for tests.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>Lazy initialisation</li>\n<li>Simple composition and dependency handling</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"example-composie-root\">\n<h2>Example - composie root</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baluster</span> <span class=\"kn\">import</span> <span class=\"n\">Baluster</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span>\n<span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ApplicationRoot</span><span class=\"p\">(</span><span class=\"n\">Baluster</span><span class=\"p\">):</span>\n    <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Will be called at the first use</span>\n        <span class=\"c1\"># Will be cached so won't be called again</span>\n        <span class=\"k\">return</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"dbname=test user=postgres\"</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@db</span><span class=\"o\">.</span><span class=\"n\">close</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_close_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@cr</span><span class=\"o\">.</span><span class=\"n\">close</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_close_cr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">cr</span><span class=\"p\">):</span>\n        <span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">approot</span> <span class=\"o\">=</span> <span class=\"n\">ApplicationRoot</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">approot</span><span class=\"p\">:</span>\n        <span class=\"n\">approot</span><span class=\"o\">.</span><span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM user'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># at this point the connection and the cursor has already been closed</span>\n</pre>\n</div>\n<div id=\"example-async-composie-root\">\n<h2>Example - async composie root</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baluster</span> <span class=\"kn\">import</span> <span class=\"n\">Baluster</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncApplicationRoot</span><span class=\"p\">(</span><span class=\"n\">Baluster</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Will be called at the first use</span>\n        <span class=\"c1\"># Will be cached so won't be called again</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">some_aync_resource</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@db</span><span class=\"o\">.</span><span class=\"n\">close</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_close_resource</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">approot</span> <span class=\"o\">=</span> <span class=\"n\">AsyncApplicationRoot</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">approot</span><span class=\"p\">:</span>\n        <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">approot</span><span class=\"o\">.</span><span class=\"n\">resource</span>\n        <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">operation</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># at this point the resource has already been closed</span>\n</pre>\n</div>\n<div id=\"example-fixture-factory-for-tests\">\n<h2>Example - fixture factory for tests</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baluster</span> <span class=\"kn\">import</span> <span class=\"n\">Baluster</span><span class=\"p\">,</span> <span class=\"n\">placeholders</span>\n<span class=\"kn\">import</span> <span class=\"nn\">psycopg2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Fixtures</span><span class=\"p\">(</span><span class=\"n\">Baluster</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n        <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"dbname=test user=postgres\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">users</span><span class=\"p\">(</span><span class=\"n\">Baluster</span><span class=\"p\">):</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM user WHERE id=1'</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">())</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">customer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM customer WHERE id=1'</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">Customer</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">())</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">orders</span><span class=\"p\">(</span><span class=\"n\">Baluster</span><span class=\"p\">):</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">amount</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"mi\">100</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">quantity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"n\">customer</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">customer</span>\n            <span class=\"n\">created_by</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">user</span>\n            <span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">amount</span>\n            <span class=\"c1\"># Fictive order object...</span>\n            <span class=\"k\">return</span> <span class=\"n\">Order</span><span class=\"p\">(</span>\n                <span class=\"n\">customer</span><span class=\"o\">=</span><span class=\"n\">customer</span><span class=\"p\">,</span> <span class=\"n\">created_by</span><span class=\"o\">=</span><span class=\"n\">created_by</span><span class=\"p\">,</span>\n                <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">quantity</span><span class=\"o\">=</span><span class=\"n\">quantity</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"nd\">@placeholders</span><span class=\"o\">.</span><span class=\"n\">factory</span>\n        <span class=\"k\">def</span> <span class=\"nf\">shipped_order</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">):</span>\n            <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">order</span>\n            <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">mark_shipped</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">order</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_order</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Demonstrate a few use fictive usecase</span>\n\n    <span class=\"c1\"># Creating order with defaults</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Fixtures</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">calculated_total_value</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">shipping_address</span> <span class=\"o\">==</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">customer</span><span class=\"o\">.</span><span class=\"n\">address</span>\n\n    <span class=\"c1\"># Create new fixtures, but keep some cached data</span>\n    <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s1\">'cr'</span><span class=\"p\">,</span> <span class=\"s1\">'users'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Set some value</span>\n    <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n    <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n    <span class=\"k\">assert</span> <span class=\"n\">f2</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">calculated_total_value</span> <span class=\"o\">==</span> <span class=\"mi\">150</span>\n\n    <span class=\"c1\"># Manage different stage of object life</span>\n    <span class=\"n\">f3</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"s1\">'cr'</span><span class=\"p\">,</span> <span class=\"s1\">'users'</span><span class=\"p\">)</span>\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">f3</span><span class=\"o\">.</span><span class=\"n\">shipped_order</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">OrderException</span><span class=\"p\">):</span>\n        <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n        <span class=\"c1\"># as it is shipped</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Python target: &gt;=3.6</p>\n<pre>$ pip install baluster\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The package is independent, using only the python standard library.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>This installs the package in development mode (<cite>setup.py develop</cite>)\nand the testing packages.\nI would like to achive nearly 100% test coverage.</p>\n<div id=\"test\">\n<h3>Test</h3>\n<pre>pytest\n</pre>\n</div>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>I really welcome any comments!\nI would be happy if you fork my code and create pull requests.\nFor an approved pull request flake8 have to pass just as all of tests.</p>\n</div>\n\n          </div>"}, "last_serial": 3370189, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "effdb00c0764b9d826a6abd5a1a72e3c", "sha256": "8bb81d4c503023dfb2e9cfa9f230a0cd61854d4488004e0205210d01431298e1"}, "downloads": -1, "filename": "Baluster-0.1.tar.gz", "has_sig": false, "md5_digest": "effdb00c0764b9d826a6abd5a1a72e3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5279, "upload_time": "2017-05-22T21:21:11", "upload_time_iso_8601": "2017-05-22T21:21:11.787709Z", "url": "https://files.pythonhosted.org/packages/bc/fa/7be8565a13457fcb62ba0e24f8f3fa3e5b959e6b506d75571c9a239b5d41/Baluster-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "6f46b016745c13e7d85398f17d5b1188", "sha256": "64aef13ed91118934752792659d3f33746e63f6f77d7e1d03bba9b2ddfae9920"}, "downloads": -1, "filename": "Baluster-0.2.tar.gz", "has_sig": false, "md5_digest": "6f46b016745c13e7d85398f17d5b1188", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8793, "upload_time": "2017-05-28T09:47:05", "upload_time_iso_8601": "2017-05-28T09:47:05.489481Z", "url": "https://files.pythonhosted.org/packages/57/c7/b7864494fae91a23808a16cf112ea9c0e6b4b1d1c4d748e3bdc58b7fccb0/Baluster-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "55ab55d6661917446e84a38295ab4366", "sha256": "5bbfee5bf113eb1c7285c4445bc9bf5de9b2e7e0595975423b062f6301971edd"}, "downloads": -1, "filename": "Baluster-0.2.1.tar.gz", "has_sig": false, "md5_digest": "55ab55d6661917446e84a38295ab4366", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8937, "upload_time": "2017-11-28T06:45:26", "upload_time_iso_8601": "2017-11-28T06:45:26.908883Z", "url": "https://files.pythonhosted.org/packages/89/7f/f25028e9b2ab6a830222562c826a19ac4906ddab82a2246b4b0e3f799632/Baluster-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55ab55d6661917446e84a38295ab4366", "sha256": "5bbfee5bf113eb1c7285c4445bc9bf5de9b2e7e0595975423b062f6301971edd"}, "downloads": -1, "filename": "Baluster-0.2.1.tar.gz", "has_sig": false, "md5_digest": "55ab55d6661917446e84a38295ab4366", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8937, "upload_time": "2017-11-28T06:45:26", "upload_time_iso_8601": "2017-11-28T06:45:26.908883Z", "url": "https://files.pythonhosted.org/packages/89/7f/f25028e9b2ab6a830222562c826a19ac4906ddab82a2246b4b0e3f799632/Baluster-0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:59 2020"}