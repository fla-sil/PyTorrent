{"info": {"author": "Caramel", "author_email": "support@caramel.com.au", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "django-viewtracker\r\n==================\r\n\r\nCopyright 2010 - 2013 `Caramel <http://www.caramel.com.au/>`_ (formerly\r\nuAnywhere). Released under the 3-clause BSD license.\r\n\r\n``django-viewtracker`` is a simple Django application to allow you to do\r\nview tracking on objects. The primary purpose of the module is so that a\r\nuser can determine what objects they have already seen.\r\n\r\nIt contains some additional \"smarts\" for dealing with updates as well -\r\nso if you haven't read it since an update, then you haven't read it at\r\nall.\r\n\r\nThe module is generic, and can be applied to any model you like.\r\n\r\nUnlike some other view tracking modules for Django, this one stores it's\r\ndata in a ``Model`` (instead of the session), and thus only works for\r\nusers who are registered. Unregistered users won't have any view\r\ntracking at all, and all objects will appear as read for them. The\r\nadvantage of doing this is that view tracking works across all\r\ndevices/browsers that someone uses.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall the module with the normal ``sudo ./setup.py install``.\r\n\r\nAdd ``viewtracker`` to your ``INSTALLED_APPS`` in the ``settings.py`` of\r\nyour application.\r\n\r\nYou'll need to ``./manage.py syncdb`` so that viewtracker's modules can\r\nbe installed.\r\n\r\nNow you're ready to use it.\r\n\r\nDesign\r\n------\r\n\r\nThe system has three levels of view tracking. It will check each of\r\nthese in order to determine if an object has been viewed.\r\n\r\nThe first level is \"all view\" tracking. Your application may allow a\r\nuser to mark all objects as read. This is checked first against the\r\nobject's modification time. When you mark everything as viewed, all\r\nother records of views for the user are deleted to save space.\r\n\r\nThe second level is \"model view\" tracking. Your application may allow a\r\nuser to mark all objects of a particular type as read. This the second\r\nthing to be checked against the object's modification time. When you\r\nmark all of a model as viewed, all other records of individual item\r\nviews are deleted to save space.\r\n\r\nThe third level is \"instance view\" tracking. A user views an object, you\r\nwould use this to mark it as having being viewed.\r\n\r\nThis means to determine if an object has been viewed, it goes through\r\nthree levels of checks, each increasing in complexity. The viewtracker\r\ntables may become quite large.\r\n\r\nUsing\r\n-----\r\n\r\nFirst, track views of your object in your view (normally object detail\r\nview):\r\n\r\n::\r\n\r\n    from viewtracker.models import ViewTracker\r\n    from .models import Car\r\n\r\n\r\n    class CarDetailView(View):\r\n        def get(self, request, object_id):\r\n            # Get the instance of the object to view\r\n            # (Though in reality you'd probably use the Django Generic CBVs instead\r\n            # of this.)\r\n            car = get_object_or_404(Car, id=object_id)\r\n\r\n            # Create an instance of the tracker for this user\r\n            # If they are anonymous, then everything is viewed.\r\n            tracking = ViewTracker(request.user)\r\n\r\n            # Mark the instance viewed by this user\r\n            tracking.mark_instance_viewed(car)\r\n\r\n            # Render the template to display the object.\r\n            return render(request, 'my_app/car_detail.html', dict(car=car, user=user))\r\n\r\nYou can then look up if an object has some changed data. You could show\r\nthis in a list:\r\n\r\n::\r\n\r\n    from django_globals import globals as django_globals\r\n\r\n\r\n    class Car(models.Model):\r\n        # ... other fields ..\r\n\r\n        # Use the name \"last_updated\" as the app will automatically to use this\r\n        # field name\r\n        last_updated = models.DateTimeField(auto_now=True)\r\n\r\n        def has_viewed(self):\r\n            tracker = ViewTracker(django_globals.request.user)\r\n            \r\n            # Here we've manually supplied the updated field name.\r\n            return tracking.has_viewed(self, updated_field='last_updated')\r\n\r\nThen in the template, you would have something like:\r\n\r\n::\r\n\r\n    {% for car in car_list %}\r\n        {# ... #}\r\n        <td>\r\n            <a href=\"{{ car.get_absolute_url }}\">Listing #{{ car.id }}</a>\r\n            {% if not car.has_viewed %}\r\n                <img src=\"{{ STATIC_URL }}img/new.png\" alt=\"New!\" />\r\n            {% endif %}\r\n        </td>\r\n        {# ... #}\r\n    {% endfor %}\r\n\r\nThere are also some built-in views, which you can use for marking all\r\nobjects read, or all instances of a model as read:\r\n\r\n::\r\n\r\n    url(\r\n        r'^cars/mark_all_read/$',\r\n        login_required()(viewtracker.views.mark_model_as_viewed),\r\n        dict(model=Car),\r\n        name='mark_all_cars_as_viewed'\r\n    ),\r\n\r\nThen call it in your template with something like:\r\n\r\n::\r\n\r\n    <form method=\"post\" action=\"{% url 'mark_all_cars_as_viewed' %}\">\r\n        {% csrf_token %}\r\n        <input type=\"submit\" value=\"Mark all cars as viewed\" />\r\n    </form>\r\n\r\nNote that by default all objects will be \"unviewed\", so when you first\r\nroll the application out, you may wish to set everyone as having viewed\r\nall objects up to a particular point in time.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Caramel/django-viewtracker", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-viewtracker", "package_url": "https://pypi.org/project/django-viewtracker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-viewtracker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Caramel/django-viewtracker"}, "release_url": "https://pypi.org/project/django-viewtracker/1.2/", "requires_dist": null, "requires_python": null, "summary": "Object view tracker for Django", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Copyright 2010 - 2013 <a href=\"http://www.caramel.com.au/\" rel=\"nofollow\">Caramel</a> (formerly\nuAnywhere). Released under the 3-clause BSD license.</p>\n<p><tt><span class=\"pre\">django-viewtracker</span></tt> is a simple Django application to allow you to do\nview tracking on objects. The primary purpose of the module is so that a\nuser can determine what objects they have already seen.</p>\n<p>It contains some additional \u201csmarts\u201d for dealing with updates as well -\nso if you haven\u2019t read it since an update, then you haven\u2019t read it at\nall.</p>\n<p>The module is generic, and can be applied to any model you like.</p>\n<p>Unlike some other view tracking modules for Django, this one stores it\u2019s\ndata in a <tt>Model</tt> (instead of the session), and thus only works for\nusers who are registered. Unregistered users won\u2019t have any view\ntracking at all, and all objects will appear as read for them. The\nadvantage of doing this is that view tracking works across all\ndevices/browsers that someone uses.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the module with the normal <tt>sudo ./setup.py install</tt>.</p>\n<p>Add <tt>viewtracker</tt> to your <tt>INSTALLED_APPS</tt> in the <tt>settings.py</tt> of\nyour application.</p>\n<p>You\u2019ll need to <tt>./manage.py syncdb</tt> so that viewtracker\u2019s modules can\nbe installed.</p>\n<p>Now you\u2019re ready to use it.</p>\n</div>\n<div id=\"design\">\n<h2>Design</h2>\n<p>The system has three levels of view tracking. It will check each of\nthese in order to determine if an object has been viewed.</p>\n<p>The first level is \u201call view\u201d tracking. Your application may allow a\nuser to mark all objects as read. This is checked first against the\nobject\u2019s modification time. When you mark everything as viewed, all\nother records of views for the user are deleted to save space.</p>\n<p>The second level is \u201cmodel view\u201d tracking. Your application may allow a\nuser to mark all objects of a particular type as read. This the second\nthing to be checked against the object\u2019s modification time. When you\nmark all of a model as viewed, all other records of individual item\nviews are deleted to save space.</p>\n<p>The third level is \u201cinstance view\u201d tracking. A user views an object, you\nwould use this to mark it as having being viewed.</p>\n<p>This means to determine if an object has been viewed, it goes through\nthree levels of checks, each increasing in complexity. The viewtracker\ntables may become quite large.</p>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>First, track views of your object in your view (normally object detail\nview):</p>\n<pre>from viewtracker.models import ViewTracker\nfrom .models import Car\n\n\nclass CarDetailView(View):\n    def get(self, request, object_id):\n        # Get the instance of the object to view\n        # (Though in reality you'd probably use the Django Generic CBVs instead\n        # of this.)\n        car = get_object_or_404(Car, id=object_id)\n\n        # Create an instance of the tracker for this user\n        # If they are anonymous, then everything is viewed.\n        tracking = ViewTracker(request.user)\n\n        # Mark the instance viewed by this user\n        tracking.mark_instance_viewed(car)\n\n        # Render the template to display the object.\n        return render(request, 'my_app/car_detail.html', dict(car=car, user=user))\n</pre>\n<p>You can then look up if an object has some changed data. You could show\nthis in a list:</p>\n<pre>from django_globals import globals as django_globals\n\n\nclass Car(models.Model):\n    # ... other fields ..\n\n    # Use the name \"last_updated\" as the app will automatically to use this\n    # field name\n    last_updated = models.DateTimeField(auto_now=True)\n\n    def has_viewed(self):\n        tracker = ViewTracker(django_globals.request.user)\n\n        # Here we've manually supplied the updated field name.\n        return tracking.has_viewed(self, updated_field='last_updated')\n</pre>\n<p>Then in the template, you would have something like:</p>\n<pre>{% for car in car_list %}\n    {# ... #}\n    &lt;td&gt;\n        &lt;a href=\"{{ car.get_absolute_url }}\"&gt;Listing #{{ car.id }}&lt;/a&gt;\n        {% if not car.has_viewed %}\n            &lt;img src=\"{{ STATIC_URL }}img/new.png\" alt=\"New!\" /&gt;\n        {% endif %}\n    &lt;/td&gt;\n    {# ... #}\n{% endfor %}\n</pre>\n<p>There are also some built-in views, which you can use for marking all\nobjects read, or all instances of a model as read:</p>\n<pre>url(\n    r'^cars/mark_all_read/$',\n    login_required()(viewtracker.views.mark_model_as_viewed),\n    dict(model=Car),\n    name='mark_all_cars_as_viewed'\n),\n</pre>\n<p>Then call it in your template with something like:</p>\n<pre>&lt;form method=\"post\" action=\"{% url 'mark_all_cars_as_viewed' %}\"&gt;\n    {% csrf_token %}\n    &lt;input type=\"submit\" value=\"Mark all cars as viewed\" /&gt;\n&lt;/form&gt;\n</pre>\n<p>Note that by default all objects will be \u201cunviewed\u201d, so when you first\nroll the application out, you may wish to set everyone as having viewed\nall objects up to a particular point in time.</p>\n</div>\n\n          </div>"}, "last_serial": 995895, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "8a449d68cd571e201669bb2136cc8417", "sha256": "b71f648a8fcfc7e7437fb62f50a85079e6b01849b70ececcc745cfbe303526bb"}, "downloads": -1, "filename": "django-viewtracker-1.2.tar.gz", "has_sig": false, "md5_digest": "8a449d68cd571e201669bb2136cc8417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5759, "upload_time": "2014-02-10T05:49:09", "upload_time_iso_8601": "2014-02-10T05:49:09.606675Z", "url": "https://files.pythonhosted.org/packages/4c/68/acff16a4148d3942b9329687407f1243ed7bc273ba6c397bd1811c6c5ca4/django-viewtracker-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a449d68cd571e201669bb2136cc8417", "sha256": "b71f648a8fcfc7e7437fb62f50a85079e6b01849b70ececcc745cfbe303526bb"}, "downloads": -1, "filename": "django-viewtracker-1.2.tar.gz", "has_sig": false, "md5_digest": "8a449d68cd571e201669bb2136cc8417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5759, "upload_time": "2014-02-10T05:49:09", "upload_time_iso_8601": "2014-02-10T05:49:09.606675Z", "url": "https://files.pythonhosted.org/packages/4c/68/acff16a4148d3942b9329687407f1243ed7bc273ba6c397bd1811c6c5ca4/django-viewtracker-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:01 2020"}