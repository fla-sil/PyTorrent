{"info": {"author": "Ram Rachum,yvan", "author_email": "ram@rachum.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Debuggers"], "description": "# PySnooper - Never use print for debugging again #\n\n[![Travis CI](https://img.shields.io/travis/cool-RR/PySnooper/master.svg)](https://travis-ci.org/cool-RR/PySnooper)\n\n**PySnooper** is a poor man's debugger.\n\nYou're trying to figure out why your Python code isn't doing what you think it should be doing. You'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered to set one up right now.\n\nYou want to know which lines are running and which aren't, and what the values of the local variables are.\n\nMost people would use `print` lines, in strategic locations, some of them showing the values of variables.\n\n**PySnooper** lets you do the same, except instead of carefully crafting the right `print` lines, you just add one decorator line to the function you're interested in. You'll get a play-by-play log of your function, including which lines ran and   when, and exactly when local variables were changed.\n\nWhat makes **PySnooper** stand out from all other code intelligence tools? You can use it in your shitty, sprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below, and redirect the output to a dedicated log file by specifying its path as the first argument.\n\n# Example #\n\nWe're writing a function that converts a number to binary, by returning a list of bits. Let's snoop on it by adding the `@pysnooper.snoop()` decorator:\n\n```python\nimport pysnooper\n\n@pysnooper.snoop()\ndef number_to_bits(number):\n    if number:\n        bits = []\n        while number:\n            number, remainder = divmod(number, 2)\n            bits.insert(0, remainder)\n        return bits\n    else:\n        return [0]\n\nnumber_to_bits(6)\n```\nThe output to stderr is:\n\n```\nSource path:... /my_code/foo.py\nStarting var:.. number = 6\n15:29:11.327032 call         4 def number_to_bits(number):\n15:29:11.327032 line         5     if number:\n15:29:11.327032 line         6         bits = []\nNew var:....... bits = []\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nNew var:....... remainder = 0\nModified var:.. number = 3\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nModified var:.. number = 1\nModified var:.. remainder = 1\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [1, 0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nModified var:.. number = 0\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [1, 1, 0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line        10         return bits\n15:29:11.327032 return      10         return bits\nReturn value:.. [1, 1, 0]\n```\n\nOr if you don't want to trace an entire function, you can wrap the relevant part in a `with` block:\n\n```python\nimport pysnooper\nimport random\n\ndef foo():\n    lst = []\n    for i in range(10):\n        lst.append(random.randrange(1, 1000))\n\n    with pysnooper.snoop():\n        lower = min(lst)\n        upper = max(lst)\n        mid = (lower + upper) / 2\n        print(lower, mid, upper)\n\nfoo()\n```\n\nwhich outputs something like:\n\n```\nNew var:....... i = 9\nNew var:....... lst = [681, 267, 74, 832, 284, 678, ...]\n09:37:35.881721 line        10         lower = min(lst)\nNew var:....... lower = 74\n09:37:35.882137 line        11         upper = max(lst)\nNew var:....... upper = 832\n09:37:35.882304 line        12         mid = (lower + upper) / 2\n74 453.0 832\nNew var:....... mid = 453.0\n09:37:35.882486 line        13         print(lower, mid, upper)\n```\n\n# Features #\n\nIf stderr is not easily accessible for you, you can redirect the output to a file:\n\n```python\n@pysnooper.snoop('/my/log/file.log')\n```\n\nYou can also pass a stream or a callable instead, and they'll be used.\n\nSee values of some expressions that aren't local variables:\n\n```python\n@pysnooper.snoop(watch=('foo.bar', 'self.x[\"whatever\"]'))\n```\n\nShow snoop lines for functions that your function calls:\n\n```python\n@pysnooper.snoop(depth=2)\n```\n\n**See [Advanced Usage](https://github.com/cool-RR/PySnooper/blob/master/ADVANCED_USAGE.md) for more options.** <------\n\n\n# Installation #\n\nYou can install **PySnooper** by:\n\n* pip:\n```console\n$ pip install pysnooper\n```\n\n* conda with conda-forge channel:\n```console\n$ conda install -c conda-forge pysnooper\n```\n\n\n# License #\n\nCopyright (c) 2019 Ram Rachum and collaborators, released under the MIT license.\n\nI provide [Development services in Python and Django](https://chipmunkdev.com\n) and I [give Python workshops](http://pythonworkshops.co/) to teach people\nPython and related topics.\n\n# Media Coverage #\n\n[Hacker News thread](https://news.ycombinator.com/item?id=19717786)\nand [/r/Python Reddit thread](https://www.reddit.com/r/Python/comments/bg0ida/pysnooper_never_use_print_for_debugging_again/) (22 April 2019)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yvan233/PySnooperDB", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PySnooperDB", "package_url": "https://pypi.org/project/PySnooperDB/", "platform": "", "project_url": "https://pypi.org/project/PySnooperDB/", "project_urls": {"Homepage": "https://github.com/yvan233/PySnooperDB"}, "release_url": "https://pypi.org/project/PySnooperDB/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A poor man's debugger for Python.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PySnooper - Never use print for debugging again</h1>\n<p><a href=\"https://travis-ci.org/cool-RR/PySnooper\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d68ef5a690c1ef8b4125a9a797279f3bc05f9a45/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6f6c2d52522f5079536e6f6f7065722f6d61737465722e737667\"></a></p>\n<p><strong>PySnooper</strong> is a poor man's debugger.</p>\n<p>You're trying to figure out why your Python code isn't doing what you think it should be doing. You'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered to set one up right now.</p>\n<p>You want to know which lines are running and which aren't, and what the values of the local variables are.</p>\n<p>Most people would use <code>print</code> lines, in strategic locations, some of them showing the values of variables.</p>\n<p><strong>PySnooper</strong> lets you do the same, except instead of carefully crafting the right <code>print</code> lines, you just add one decorator line to the function you're interested in. You'll get a play-by-play log of your function, including which lines ran and   when, and exactly when local variables were changed.</p>\n<p>What makes <strong>PySnooper</strong> stand out from all other code intelligence tools? You can use it in your shitty, sprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below, and redirect the output to a dedicated log file by specifying its path as the first argument.</p>\n<h1>Example</h1>\n<p>We're writing a function that converts a number to binary, by returning a list of bits. Let's snoop on it by adding the <code>@pysnooper.snoop()</code> decorator:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pysnooper</span>\n\n<span class=\"nd\">@pysnooper</span><span class=\"o\">.</span><span class=\"n\">snoop</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">number_to_bits</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span><span class=\"p\">:</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">while</span> <span class=\"n\">number</span><span class=\"p\">:</span>\n            <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">remainder</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n            <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">remainder</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">bits</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">number_to_bits</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre>\n<p>The output to stderr is:</p>\n<pre><code>Source path:... /my_code/foo.py\nStarting var:.. number = 6\n15:29:11.327032 call         4 def number_to_bits(number):\n15:29:11.327032 line         5     if number:\n15:29:11.327032 line         6         bits = []\nNew var:....... bits = []\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nNew var:....... remainder = 0\nModified var:.. number = 3\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nModified var:.. number = 1\nModified var:.. remainder = 1\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [1, 0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line         8             number, remainder = divmod(number, 2)\nModified var:.. number = 0\n15:29:11.327032 line         9             bits.insert(0, remainder)\nModified var:.. bits = [1, 1, 0]\n15:29:11.327032 line         7         while number:\n15:29:11.327032 line        10         return bits\n15:29:11.327032 return      10         return bits\nReturn value:.. [1, 1, 0]\n</code></pre>\n<p>Or if you don't want to trace an entire function, you can wrap the relevant part in a <code>with</code> block:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pysnooper</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pysnooper</span><span class=\"o\">.</span><span class=\"n\">snoop</span><span class=\"p\">():</span>\n        <span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n        <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n        <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">lower</span> <span class=\"o\">+</span> <span class=\"n\">upper</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\n</pre>\n<p>which outputs something like:</p>\n<pre><code>New var:....... i = 9\nNew var:....... lst = [681, 267, 74, 832, 284, 678, ...]\n09:37:35.881721 line        10         lower = min(lst)\nNew var:....... lower = 74\n09:37:35.882137 line        11         upper = max(lst)\nNew var:....... upper = 832\n09:37:35.882304 line        12         mid = (lower + upper) / 2\n74 453.0 832\nNew var:....... mid = 453.0\n09:37:35.882486 line        13         print(lower, mid, upper)\n</code></pre>\n<h1>Features</h1>\n<p>If stderr is not easily accessible for you, you can redirect the output to a file:</p>\n<pre><span class=\"nd\">@pysnooper</span><span class=\"o\">.</span><span class=\"n\">snoop</span><span class=\"p\">(</span><span class=\"s1\">'/my/log/file.log'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass a stream or a callable instead, and they'll be used.</p>\n<p>See values of some expressions that aren't local variables:</p>\n<pre><span class=\"nd\">@pysnooper</span><span class=\"o\">.</span><span class=\"n\">snoop</span><span class=\"p\">(</span><span class=\"n\">watch</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'foo.bar'</span><span class=\"p\">,</span> <span class=\"s1\">'self.x[\"whatever\"]'</span><span class=\"p\">))</span>\n</pre>\n<p>Show snoop lines for functions that your function calls:</p>\n<pre><span class=\"nd\">@pysnooper</span><span class=\"o\">.</span><span class=\"n\">snoop</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p><strong>See <a href=\"https://github.com/cool-RR/PySnooper/blob/master/ADVANCED_USAGE.md\" rel=\"nofollow\">Advanced Usage</a> for more options.</strong> &lt;------</p>\n<h1>Installation</h1>\n<p>You can install <strong>PySnooper</strong> by:</p>\n<ul>\n<li>pip:</li>\n</ul>\n<pre><span class=\"gp\">$</span> pip install pysnooper\n</pre>\n<ul>\n<li>conda with conda-forge channel:</li>\n</ul>\n<pre><span class=\"gp\">$</span> conda install -c conda-forge pysnooper\n</pre>\n<h1>License</h1>\n<p>Copyright (c) 2019 Ram Rachum and collaborators, released under the MIT license.</p>\n<p>I provide <a href=\"https://chipmunkdev.com\" rel=\"nofollow\">Development services in Python and Django</a> and I <a href=\"http://pythonworkshops.co/\" rel=\"nofollow\">give Python workshops</a> to teach people\nPython and related topics.</p>\n<h1>Media Coverage</h1>\n<p><a href=\"https://news.ycombinator.com/item?id=19717786\" rel=\"nofollow\">Hacker News thread</a>\nand <a href=\"https://www.reddit.com/r/Python/comments/bg0ida/pysnooper_never_use_print_for_debugging_again/\" rel=\"nofollow\">/r/Python Reddit thread</a> (22 April 2019)</p>\n\n          </div>"}, "last_serial": 6499107, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0f78afd9fe01d6ace020367cf37627a0", "sha256": "4fec9fb981ef9975f0d36db90f71b95e0651e6b991e1f3e37fabe7560a32338a"}, "downloads": -1, "filename": "PySnooperDB-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0f78afd9fe01d6ace020367cf37627a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43279, "upload_time": "2020-01-15T15:28:58", "upload_time_iso_8601": "2020-01-15T15:28:58.114144Z", "url": "https://files.pythonhosted.org/packages/5f/2e/67eef4b5f1c9b74d6c4c23142f118adc502a7ce6e8b07ea2ec44c2965a8b/PySnooperDB-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "54afe497932f05e4ad7f1f849077075f", "sha256": "7c81ed8d7dc54b69522017bfad82991682e16742e5aa29a927db52453e02d80b"}, "downloads": -1, "filename": "PySnooperDB-0.1.1.tar.gz", "has_sig": false, "md5_digest": "54afe497932f05e4ad7f1f849077075f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44755, "upload_time": "2020-01-15T15:35:01", "upload_time_iso_8601": "2020-01-15T15:35:01.222708Z", "url": "https://files.pythonhosted.org/packages/17/06/c298489d421c404ba9fdd974f518d61ee18c44927b0858a15964b1f287c7/PySnooperDB-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2d7948383e9252f8a934d56ba47211f5", "sha256": "07e45736f3ad66869f5aa2d860cd8181a26e7ef560c33620969e83a1e3727665"}, "downloads": -1, "filename": "PySnooperDB-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2d7948383e9252f8a934d56ba47211f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44085, "upload_time": "2020-01-21T03:26:30", "upload_time_iso_8601": "2020-01-21T03:26:30.246677Z", "url": "https://files.pythonhosted.org/packages/e5/76/54a977a57c754b2714f98ce55adee458a2c381f243f9532ada2011ca860c/PySnooperDB-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d53b55407b168dae575ad7765cc7a6e9", "sha256": "e50ef08b157d2cba8a2dfb3540714a9fe2d656ea3da06c442b393f92e044167b"}, "downloads": -1, "filename": "PySnooperDB-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d53b55407b168dae575ad7765cc7a6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44078, "upload_time": "2020-01-22T08:04:04", "upload_time_iso_8601": "2020-01-22T08:04:04.739422Z", "url": "https://files.pythonhosted.org/packages/97/99/41e37b0c210ab448f3371ac8c507c64a218d1e353dc17afb04f85623f69f/PySnooperDB-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6a8d6da82a0449a095f16a87264e3d8b", "sha256": "56f636d2417dde6f55e3143746db353d8b5fb1e6c0d54b2f459ff7486c6fefc0"}, "downloads": -1, "filename": "PySnooperDB-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6a8d6da82a0449a095f16a87264e3d8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44097, "upload_time": "2020-01-22T08:54:43", "upload_time_iso_8601": "2020-01-22T08:54:43.948318Z", "url": "https://files.pythonhosted.org/packages/62/d9/ecb12af3e64ae9c0a811fdcf65842749a1256f852373f044bab8cefd307f/PySnooperDB-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a8d6da82a0449a095f16a87264e3d8b", "sha256": "56f636d2417dde6f55e3143746db353d8b5fb1e6c0d54b2f459ff7486c6fefc0"}, "downloads": -1, "filename": "PySnooperDB-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6a8d6da82a0449a095f16a87264e3d8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44097, "upload_time": "2020-01-22T08:54:43", "upload_time_iso_8601": "2020-01-22T08:54:43.948318Z", "url": "https://files.pythonhosted.org/packages/62/d9/ecb12af3e64ae9c0a811fdcf65842749a1256f852373f044bab8cefd307f/PySnooperDB-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:28 2020"}