{"info": {"author": "Jacek Tomaszewski", "author_email": "jacek.tomek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "|\n\n================================\nStoring settings in the database\n================================\n\nNot all settings belong in ``settings.py``, as it has some particular\nlimitations:\n\n    * Settings are project-wide. This not only requires apps to clutter up\n      ``settings.py``, but also increases the chances of naming conflicts.\n\n    * Settings are constant throughout an instance of Django. They cannot be\n      changed without restarting the application.\n\n    * Settings require a programmer in order to be changed. This is true even\n      if the setting has no functional impact on anything else.\n\nMany applications find need to overcome these limitations, and ``dbsettings``\nprovides a convenient way to do so.\n\nThe main goal in using this application is to define a set of placeholders that\nwill be used to represent the settings that are stored in the database. Then,\nthe settings may be edited at run-time using the provided editor, and all Python\ncode in your application that uses the setting will receive the updated value.\n\nRequirements\n============\n\n+------------------+------------+--------------+\n| Dbsettings       | Python     | Django       |\n+==================+============+==============+\n| >=1.0            | 3.5        | 2.0 - 2.2    |\n|                  +------------+--------------+\n|                  | 3.6 - 3.8  | 2.0 - 3.0    |\n+------------------+------------+--------------+\n| ==0.11           | 3.5 - 3.7  | 1.10 - 2.2   |\n|                  +------------+--------------+\n|                  | 2.7        | 1.10 - 1.11  |\n+------------------+------------+--------------+\n| ==0.10           | 3.4 - 3.5  | 1.7 - 1.10   |\n|                  +------------+--------------+\n|                  | 3.2 - 3.3  | 1.7 - 1.8    |\n|                  +------------+--------------+\n|                  | 2.7        | 1.7 - 1.10   |\n+------------------+------------+--------------+\n| ==0.9            | 3.4 - 3.5  | 1.7 - 1.9    |\n|                  +------------+--------------+\n|                  | 3.2 - 3.3  | 1.7 - 1.8    |\n|                  +------------+--------------+\n|                  | 2.7        | 1.7 - 1.9    |\n+------------------+------------+--------------+\n| ==0.8            | 3.2        | 1.5 - 1.8    |\n|                  +------------+--------------+\n|                  | 2.7        | 1.4 - 1.8    |\n|                  +------------+--------------+\n|                  | 2.6        | 1.4 - 1.6    |\n+------------------+------------+--------------+\n| ==0.7            | 3.2        | 1.5 - 1.7    |\n|                  +------------+--------------+\n|                  | 2.7        | 1.3 - 1.7    |\n|                  +------------+--------------+\n|                  | 2.6        | 1.3 - 1.6    |\n+------------------+------------+--------------+\n| ==0.6            | 3.2        |       1.5    |\n|                  +------------+--------------+\n|                  | 2.6 - 2.7  | 1.3 - 1.5    |\n+------------------+------------+--------------+\n| <=0.5            | 2.6 - 2.7  | 1.2\\* - 1.4  |\n+------------------+------------+--------------+\n\n\\* Possibly version below 1.2 will work too, but not tested.\n\nInstallation\n============\n\nTo install the ``dbsettings`` package, simply place it anywhere on your\n``PYTHONPATH``.\n\nProject settings\n----------------\n\nIn order to setup database storage, and to let Django know about your use of\n``dbsettings``, simply add it to your ``INSTALLED_APPS`` setting, like so::\n\n    INSTALLED_APPS = (\n        ...\n        'dbsettings',\n        ...\n    )\n\nIf your Django project utilizes ``sites`` framework, all setting would be related\nto some site. If ``sites`` are not present, settings won't be connected to any site\n(and ``sites`` framework is no longer required since 0.8.1).\n\nYou can force to do (not) use ``sites`` via ``DBSETTINGS_USE_SITES = True / False``\nconfiguration variable (put it in project's ``settings.py``).\n\nBy default, values stored in database are limited to 255 characters per setting.\nYou can change this limit with ``DBSETTINGS_VALUE_LENGTH`` configuration variable.\nIf you change this value after migrations were run, you need to manually alter\nthe ``dbsettings_setting`` table schema.\n\nURL Configuration\n-----------------\n\nIn order to edit your settings at run-time, you'll need to configure a URL to\naccess the provided editors. You'll just need to add a single line, defining\nthe base URL for the editors, as ``dbsettings`` has its own URLconf to handle\nthe rest. You may choose any location you like::\n\n    urlpatterns = patterns('',\n        ...\n        (r'^settings/', include('dbsettings.urls')),\n        ...\n    )\n\nor (django 2)::\n\n    from django.urls import path, include\n\n    urlpatterns = [\n        ...\n        path('settings/', include('dbsettings.urls')),\n        ...\n    ]\n\nA note about caching\n--------------------\n\nThis framework utilizes Django's built-in `cache framework`_, which is used to\nminimize how often the database needs to be accessed. During development,\nDjango's built-in server runs in a single process, so all cache backends will\nwork just fine.\n\nMost productions environments, including mod_python, FastCGI or WSGI, run multiple\nprocesses, which some backends don't fully support. When using the ``simple``\nor ``locmem`` backends, updates to your settings won't be reflected immediately\nin all workers, causing your application to ignore the new changes.\n\nNo other backends exhibit this behavior, but since ``simple`` is the default,\nmake sure to specify a proper backend when moving to a production environment.\n\n.. _`cache framework`: http://docs.djangoproject.com/en/dev/topics/cache/\n\nAlternatively you can disable caching of settings by setting\n``DBSETTINGS_USE_CACHE = False`` in ``settings.py``. Beware though: every\naccess of any setting will result in database hit.\n\nUsage\n=====\n\nThese database-backed settings can be applied to any model in any app, or even\nin the app itself. All the tools necessary to do so are available within the\n``dbsettings`` module. A single import provides everything you'll need::\n\n    import dbsettings\n\nDefining a group of settings\n----------------------------\n\nSettings are be defined in groups that allow them to be referenced together\nunder a single attribute. Defining a group uses a declarative syntax similar\nto that of models, by declaring a new subclass of the ``Group`` class and\npopulating it with values.\n\n::\n\n    class ImageLimits(dbsettings.Group):\n        maximum_width = dbsettings.PositiveIntegerValue()\n        maximum_height = dbsettings.PositiveIntegerValue()\n\nYou may name your groups anything you like, and they may be defined in any\nmodule. This allows them to be imported from common applications if applicable.\n\nDefining individual settings\n----------------------------\n\nWithin your groups, you may define any number of individual settings by simply\nassigning the value types to appropriate names. The names you assign them to\nwill be the attribute names you'll use to reference the setting later, so be\nsure to choose names accordingly.\n\nFor the editor, the default description of each setting will be retrieved from\nthe attribute name, similar to how the ``verbose_name`` of model fields is\nretrieved. Also like model fields, however, an optional argument may be provided\nto define a more fitting description. It's recommended to leave the first letter\nlower-case, as it will be capitalized as necessary, automatically.\n\n::\n\n    class EmailOptions(dbsettings.Group):\n        enabled = dbsettings.BooleanValue('whether to send emails or not')\n        sender = dbsettings.StringValue('address to send emails from')\n        subject = dbsettings.StringValue(default='SiteMail')\n\nFor more descriptive explanation, the ``help_text`` argument can be used. It\nwill be shown in the editor.\n\nThe ``default`` argument is very useful - it specify an initial value of the\nsetting.\n\nIn addition, settings may be supplied with a list of available options, through\nthe use of of the ``choices`` argument. This works exactly like the ``choices``\nargument for model fields, and that of the newforms ``ChoiceField``.\n\nThe widget used for a value can be overriden using the ``widget`` keyword. For example:\n\n::\n\n    payment_instructions = dbsettings.StringValue(\n        help_text=\"Printed on every invoice.\",\n        default=\"Payment to Example XYZ\\nBank name here\\nAccount: 0123456\\nSort: 01-02-03\",\n        widget=forms.Textarea\n    )\n\nA full list of value types is available later in this document, but the process\nand arguments are the same for each.\n\nAssigning settings\n------------------\n\nOnce your settings are defined and grouped properly, they must be assigned to a\nlocation where they will be referenced later. This is as simple as instantiating\nthe settings group in the appropriate location. This may be at the module level\nor within any standard Django model.\n\nGroup instance may receive one optional argument: verbose name of the group.\nThis name will be displayed in the editor.\n\n::\n\n    email = EmailOptions()\n\n    class Image(models.Model):\n        image = models.ImageField(upload_to='/upload/path')\n        caption = models.TextField()\n\n        limits = ImageLimits('Dimension settings')\n\nMultiple groups may be assigned to the same module or model, and they can even\nbe combined into a single group by using standard addition syntax::\n\n    options = EmailOptions() + ImageLimits()\n\nTo separate and tag settings nicely in the editor, use verbose names::\n\n    options = EmailOptions('Email') + ImageLimits('Dimesions')\n\nDatabase setup\n--------------\n\nA single model is provided for database storage, and this model must be\ninstalled in your database before you can use the included editors or the\npermissions that will be automatically created. This is a simple matter of\nrunning ``manage.py syncdb`` or ``manage.py migrate`` now that your settings\nare configured.\n\nThis step need only be repeate when settings are added to a new application,\nas it will create the appropriate permissions. Once those are in place, new\nsettings may be added to existing applications with no impact on the database.\n\nUsing your settings\n===================\n\nOnce the above steps are completed, you're ready to make use of database-backed\nsettings.\n\nEditing settings\n----------------\n\nWhen first defined, your settings will default to ``None`` (or ``False`` in\nthe case of ``BooleanValue``), so their values must be set using one of the\nsupplied editors before they can be considered useful (however, if the setting\nhad the ``default`` argument passed in the constructor, its value is already\nuseful - equal to the defined default).\n\nThe editor will be available at the URL configured earlier.\nFor example, if you used the prefix of ``'settings/'``, the URL ``/settings/``\nwill provide an editor of all available settings, while ``/settings/myapp/``\nwould contain a list of just the settings for ``myapp``.\n\nURL patterns are named: ``'site_settings'`` and ``'app_settings'``, respectively.\n\nThe editors are restricted to staff members, and the particular settings that\nwill be available to users is based on permissions that are set for them. This\nmeans that superusers will automatically be able to edit all settings, while\nother staff members will need to have permissions set explicitly.\n\nAccessing settings in Python\n----------------------------\n\nOnce settings have been assigned to an appropriate location, they may be\nreferenced as standard Python attributes. The group becomes an attribute of the\nlocation where it was assigned, and the individual values are attributes of the\ngroup.\n\nIf any settings are referenced without being set to a particular value, they\nwill default to ``None`` (or ``False`` in the case of ``BooleanValue``, or\nwhatever was passed as ``default``). In the\nfollowing example, assume that ``EmailOptions`` were just added to the project\nand the ``ImageLimits`` were added earlier and already set via editor.\n\n::\n\n    >>> from myproject.myapp import models\n\n    # EmailOptions are not defined\n    >>> models.email.enabled\n    False\n    >>> models.email.sender\n    >>> models.email.subject\n    'SiteMail'  # Since default was defined\n\n    # ImageLimits are defined\n    >>> models.Image.limits.maximum_width\n    1024\n    >>> models.Image.limits.maximum_height\n    768\n\nThese settings are accessible from any Python code, making them especially\nuseful in model methods and views. Each time the attribute is accessed, it will\nretrieve the current value, so your code doesn't need to worry about what\nhappens behind the scenes.\n\n::\n\n    def is_valid(self):\n        if self.width > Image.limits.maximum_width:\n            return False\n        if self.height > Image.limits.maximum_height:\n            return False\n    return True\n\nAs mentioned, views can make use of these settings as well.\n\n::\n\n    from myproject.myapp.models import email\n\n    def submit(request):\n\n        ...\n        # Deal with a form submission\n        ...\n\n        if email.enabled:\n            from django.core.mail import send_mail\n        send_mail(email.subject, 'message', email.sender, [request.user.email])\n\nSettings can be not only read, but also written. The admin editor is more\nuser-friendly, but in case code need to change something::\n\n    from myproject.myapp.models import Image\n\n    def low_disk_space():\n        Image.limits.maximum_width = Image.limits.maximum_height = 200\n\nEvery write is immediately commited to the database and proper cache key is deleted.\n\nA note about model instances\n----------------------------\n\nSince settings aren't related to individual model instances, any settings that\nare set on models may only be accessed by the model class itself. Attempting to\naccess settings on an instance will raise an ``AttributeError``.\n\nTriggering actions on settings changes\n--------------------------------------\n\nA signal is sent whenever a setting changes. You can receive it by doing\nsomething like this in your appconfig's ``ready()`` method::\n\n    from dbsetting.loading import get_setting\n    from dbsettings.signals import setting_changed\n\n    setting_changed.connect(my_function, sender=get_setting('myapp', 'MyClass', 'myattr'))\n\n`my_function` will be called with a `sender` and `value` parameters, the latter containing a\nnew value assigned to the setting.\n\nValue types\n===========\n\nThere are several various value types available for database-backed settings.\nSelect the one most appropriate for each individual setting, but all types use\nthe same set of arguments.\n\nBooleanValue\n------------\n\nPresents a checkbox in the editor, and returns ``True`` or ``False`` in Python.\n\nDurationValue\n-------------\n\nPresents a set of inputs suitable for specifying a length of time. This is\nrepresented in Python as a |timedelta|_ object.\n\n.. |timedelta| replace:: ``timedelta``\n.. _timedelta: https://docs.python.org/2/library/datetime.html#timedelta-objects\n\nFloatValue\n----------\n\nPresents a standard input field, which becomes a ``float`` in Python.\n\nIntegerValue\n------------\n\nPresents a standard input field, which becomes an ``int`` in Python.\n\nPercentValue\n------------\n\nSimilar to ``IntegerValue``, but with a limit requiring that the value be\nbetween 0 and 100. In addition, when accessed in Python, the value will be\ndivided by 100, so that it is immediately suitable for calculations.\n\nFor instance, if a ``myapp.taxes.sales_tax`` was set to 5 in the editor,\nthe following calculation would be valid::\n\n    >>> 5.00 * myapp.taxes.sales_tax\n    0.25\n\nPositiveIntegerValue\n--------------------\n\nSimilar to ``IntegerValue``, but limited to positive values and 0.\n\nStringValue\n-----------\n\nPresents a standard input, accepting any text string up to 255\n(or ``DBSETTINGS_VALUE_LENGTH``) characters. In\nPython, the value is accessed as a standard string.\n\nDateTimeValue\n-------------\n\nPresents a standard input field, which becomes a ``datetime`` in Python.\n\nUser input will be parsed according to ``DATETIME_INPUT_FORMATS`` setting.\n\nIn code, one can assign to field string or datetime object::\n\n    # These two statements has the same effect\n    myapp.Feed.next_feed = '2012-06-01 00:00:00'\n    myapp.Feed.next_feed = datetime.datetime(2012, 6, 1, 0, 0, 0)\n\nDateValue\n---------\n\nPresents a standard input field, which becomes a ``date`` in Python.\n\nUser input will be parsed according to ``DATE_INPUT_FORMATS`` setting.\n\nSee ``DateTimeValue`` for the remark about assigning.\n\nTimeValue\n---------\n\nPresents a standard input field, which becomes a ``time`` in Python.\n\nUser input will be parsed according to ``TIME_INPUT_FORMATS`` setting.\n\nSee ``DateTimeValue`` for the remark about assigning.\n\nImageValue\n----------\n\n(requires PIL or Pillow imaging library to work)\n\nAllows to upload image and view its preview.\n\nImageValue has optional keyword arguments:\n\n- ``upload_to`` specifies path (relative to ``MEDIA_ROOT``), where uploaded\n  images will be stored. If argument is not present, files will be saved\n  directly under ``MEDIA_ROOT``.\n- ``delete_old`` (default to True) controls whether to delete the old file when\n  the value has changed\n\nIn Python, the value is accessed as a standard string (file name, relative to\n``MEDIA_ROOT``).\n\nPasswordValue\n-------------\n\nPresents a standard password input. Retain old setting value if not changed.\n\n\nSetting defaults for a distributed application\n==============================================\n\nDistributed applications often have need for certain default settings that are\nuseful for the common case, but which may be changed to suit individual\ninstallations. For such cases, a utility is provided to enable applications to\nset any applicable defaults.\n\nLiving at ``dbsettings.utils.set_defaults``, this utility is designed to be used\nwithin the app's ``management.py``. This way, when the application is installed\nusing ``syncdb``/``migrate``, the default settings will also be installed to the database.\n\nThe function requires a single positional argument, which is the ``models``\nmodule for the application. Any additional arguments must represent the actual\nsettings that will be installed. Each argument is a 3-tuple, of the following\nformat: ``(class_name, setting_name, value)``.\n\nIf the value is intended for a module-level setting, simply set ``class_name``\nto an empty string. The value for ``setting_name`` should be the name given to\nthe setting itself, while the name assigned to the group isn't supplied, as it\nisn't used for storing the value.\n\nFor example, the following code in ``management.py`` would set defaults for\nsome of the settings provided earlier in this document::\n\n    from django.conf import settings\n    from dbsettings.utils import set_defaults\n    from myproject.myapp import models as myapp\n\n    set_defaults(myapp,\n        ('', 'enabled', True)\n        ('', 'sender', settings.ADMINS[0][1]) # Email of the first listed admin\n        ('Image', 'maximum_width', 800)\n        ('Image', 'maximum_height', 600)\n    )\n\n----------\n\nChangelog\n=========\n\n**1.1.0** (21/03/2020)\n    - Fixed image widget in Django 2.1\n    - Added ``delete_old`` parameter to ImageValue\n    - Make ``upload_to`` parameter to ImageValue no longer required.\n    - Fix PasswordValue to not render widget as required.\n**1.0.1** (26/12/2019)\n    - Introduced a signal `setting_changed`\n    - Added compatibility with Django 3.0\n    - Dropped compatibility with Django 1.10, 1.11\n    - Dropped compatibility with Python 2\n**0.11.0** (31/07/2019)\n    - Added compatibility with Django 1.11, 2.0, 2.1, 2.2\n    - Dropped compatibility with Django 1.7, 1.8, 1.9\n**0.10.0** (25/09/2016)\n    - Added compatibility with Django 1.10\n**0.9.3** (02/06/2016)\n    - Fixed (hopefully for good) problem with ImageValue in Python 3 (thanks rolexCoder)\n**0.9.2** (01/05/2016)\n    - Fixed bug when saving non-required settings\n    - Fixed problem with ImageValue in Python 3 (thanks rolexCoder)\n**0.9.1** (10/01/2016)\n    - Fixed `Sites` app being optional (thanks rolexCoder)\n**0.9.0** (25/12/2015)\n    - Added compatibility with Django 1.9 (thanks Alonso)\n    - Dropped compatibility with Django 1.4, 1.5, 1.6\n**0.8.2** (17/09/2015)\n    - Added migrations to distro\n    - Add configuration option to change max length of setting values from 255 to whatever\n    - Add configuration option to disable caching (thanks nwaxiomatic)\n    - Fixed PercentValue rendering (thanks last-partizan)\n**0.8.1** (21/06/2015)\n    - Made ``django.contrib.sites`` framework dependency optional\n    - Added migration for app\n**0.8.0** (16/04/2015)\n    - Switched to using django.utils.six instead of standalone six.\n    - Added compatibility with Django 1.8\n    - Dropped compatibility with Django 1.3\n**0.7.4** (24/03/2015)\n    - Added default values for fields.\n    - Fixed Python 3.3 compatibility\n    - Added creation of folders with ImageValue\n**0.7.3**, **0.7.2**\n    pypi problems\n**0.7.1** (11/03/2015)\n    - Fixed pypi distribution.\n**0.7** (06/07/2014)\n    - Added PasswordValue\n    - Added compatibility with Django 1.6 and 1.7.\n**0.6** (16/09/2013)\n    - Added compatibility with Django 1.5 and python3, dropped support for Django 1.2.\n    - Fixed permissions: added permission for editing non-model (module-level) settings\n    - Make PIL/Pillow not required in setup.py\n**0.5** (11/10/2012)\n    - Fixed error occuring when test are run with ``LANGUAGE_CODE`` different than 'en'\n    - Added verbose_name option for Groups\n    - Cleaned code\n**0.4.1** (02/10/2012)\n    - Fixed Image import\n**0.4** (30/09/2012)\n    - Named urls\n    - Added polish translation\n**0.3** (04/09/2012)\n    Included testrunner in distribution\n**0.2** (05/07/2012)\n    - Fixed errors appearing when module-level and model-level settings have\n      same attribute names\n    - Corrected the editor templates admin integration\n    - Updated README\n**0.1** (29/06/2012)\n    Initial PyPI release\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/zlorf/django-dbsettings", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-dbsettings", "package_url": "https://pypi.org/project/django-dbsettings/", "platform": "", "project_url": "https://pypi.org/project/django-dbsettings/", "project_urls": {"Homepage": "http://github.com/zlorf/django-dbsettings"}, "release_url": "https://pypi.org/project/django-dbsettings/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Application settings whose values can be updated while a project is up and running.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div><br></div>\n</div>\n<div id=\"storing-settings-in-the-database\">\n<h2>Storing settings in the database</h2>\n<p>Not all settings belong in <tt>settings.py</tt>, as it has some particular\nlimitations:</p>\n<blockquote>\n<ul>\n<li>Settings are project-wide. This not only requires apps to clutter up\n<tt>settings.py</tt>, but also increases the chances of naming conflicts.</li>\n<li>Settings are constant throughout an instance of Django. They cannot be\nchanged without restarting the application.</li>\n<li>Settings require a programmer in order to be changed. This is true even\nif the setting has no functional impact on anything else.</li>\n</ul>\n</blockquote>\n<p>Many applications find need to overcome these limitations, and <tt>dbsettings</tt>\nprovides a convenient way to do so.</p>\n<p>The main goal in using this application is to define a set of placeholders that\nwill be used to represent the settings that are stored in the database. Then,\nthe settings may be edited at run-time using the provided editor, and all Python\ncode in your application that uses the setting will receive the updated value.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Dbsettings</th>\n<th>Python</th>\n<th>Django</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>&gt;=1.0</td>\n<td>3.5</td>\n<td>2.0 - 2.2</td>\n</tr>\n<tr><td>3.6 - 3.8</td>\n<td>2.0 - 3.0</td>\n</tr>\n<tr><td>==0.11</td>\n<td>3.5 - 3.7</td>\n<td>1.10 - 2.2</td>\n</tr>\n<tr><td>2.7</td>\n<td>1.10 - 1.11</td>\n</tr>\n<tr><td>==0.10</td>\n<td>3.4 - 3.5</td>\n<td>1.7 - 1.10</td>\n</tr>\n<tr><td>3.2 - 3.3</td>\n<td>1.7 - 1.8</td>\n</tr>\n<tr><td>2.7</td>\n<td>1.7 - 1.10</td>\n</tr>\n<tr><td>==0.9</td>\n<td>3.4 - 3.5</td>\n<td>1.7 - 1.9</td>\n</tr>\n<tr><td>3.2 - 3.3</td>\n<td>1.7 - 1.8</td>\n</tr>\n<tr><td>2.7</td>\n<td>1.7 - 1.9</td>\n</tr>\n<tr><td>==0.8</td>\n<td>3.2</td>\n<td>1.5 - 1.8</td>\n</tr>\n<tr><td>2.7</td>\n<td>1.4 - 1.8</td>\n</tr>\n<tr><td>2.6</td>\n<td>1.4 - 1.6</td>\n</tr>\n<tr><td>==0.7</td>\n<td>3.2</td>\n<td>1.5 - 1.7</td>\n</tr>\n<tr><td>2.7</td>\n<td>1.3 - 1.7</td>\n</tr>\n<tr><td>2.6</td>\n<td>1.3 - 1.6</td>\n</tr>\n<tr><td>==0.6</td>\n<td>3.2</td>\n<td>1.5</td>\n</tr>\n<tr><td>2.6 - 2.7</td>\n<td>1.3 - 1.5</td>\n</tr>\n<tr><td>&lt;=0.5</td>\n<td>2.6 - 2.7</td>\n<td>1.2* - 1.4</td>\n</tr>\n</tbody>\n</table>\n<p>* Possibly version below 1.2 will work too, but not tested.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install the <tt>dbsettings</tt> package, simply place it anywhere on your\n<tt>PYTHONPATH</tt>.</p>\n<div id=\"project-settings\">\n<h4>Project settings</h4>\n<p>In order to setup database storage, and to let Django know about your use of\n<tt>dbsettings</tt>, simply add it to your <tt>INSTALLED_APPS</tt> setting, like so:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'dbsettings',\n    ...\n)\n</pre>\n<p>If your Django project utilizes <tt>sites</tt> framework, all setting would be related\nto some site. If <tt>sites</tt> are not present, settings won\u2019t be connected to any site\n(and <tt>sites</tt> framework is no longer required since 0.8.1).</p>\n<p>You can force to do (not) use <tt>sites</tt> via <tt>DBSETTINGS_USE_SITES = True / False</tt>\nconfiguration variable (put it in project\u2019s <tt>settings.py</tt>).</p>\n<p>By default, values stored in database are limited to 255 characters per setting.\nYou can change this limit with <tt>DBSETTINGS_VALUE_LENGTH</tt> configuration variable.\nIf you change this value after migrations were run, you need to manually alter\nthe <tt>dbsettings_setting</tt> table schema.</p>\n</div>\n<div id=\"url-configuration\">\n<h4>URL Configuration</h4>\n<p>In order to edit your settings at run-time, you\u2019ll need to configure a URL to\naccess the provided editors. You\u2019ll just need to add a single line, defining\nthe base URL for the editors, as <tt>dbsettings</tt> has its own URLconf to handle\nthe rest. You may choose any location you like:</p>\n<pre>urlpatterns = patterns('',\n    ...\n    (r'^settings/', include('dbsettings.urls')),\n    ...\n)\n</pre>\n<p>or (django 2):</p>\n<pre>from django.urls import path, include\n\nurlpatterns = [\n    ...\n    path('settings/', include('dbsettings.urls')),\n    ...\n]\n</pre>\n</div>\n<div id=\"a-note-about-caching\">\n<h4>A note about caching</h4>\n<p>This framework utilizes Django\u2019s built-in <a href=\"http://docs.djangoproject.com/en/dev/topics/cache/\" rel=\"nofollow\">cache framework</a>, which is used to\nminimize how often the database needs to be accessed. During development,\nDjango\u2019s built-in server runs in a single process, so all cache backends will\nwork just fine.</p>\n<p>Most productions environments, including mod_python, FastCGI or WSGI, run multiple\nprocesses, which some backends don\u2019t fully support. When using the <tt>simple</tt>\nor <tt>locmem</tt> backends, updates to your settings won\u2019t be reflected immediately\nin all workers, causing your application to ignore the new changes.</p>\n<p>No other backends exhibit this behavior, but since <tt>simple</tt> is the default,\nmake sure to specify a proper backend when moving to a production environment.</p>\n<p>Alternatively you can disable caching of settings by setting\n<tt>DBSETTINGS_USE_CACHE = False</tt> in <tt>settings.py</tt>. Beware though: every\naccess of any setting will result in database hit.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>These database-backed settings can be applied to any model in any app, or even\nin the app itself. All the tools necessary to do so are available within the\n<tt>dbsettings</tt> module. A single import provides everything you\u2019ll need:</p>\n<pre>import dbsettings\n</pre>\n<div id=\"defining-a-group-of-settings\">\n<h4>Defining a group of settings</h4>\n<p>Settings are be defined in groups that allow them to be referenced together\nunder a single attribute. Defining a group uses a declarative syntax similar\nto that of models, by declaring a new subclass of the <tt>Group</tt> class and\npopulating it with values.</p>\n<pre>class ImageLimits(dbsettings.Group):\n    maximum_width = dbsettings.PositiveIntegerValue()\n    maximum_height = dbsettings.PositiveIntegerValue()\n</pre>\n<p>You may name your groups anything you like, and they may be defined in any\nmodule. This allows them to be imported from common applications if applicable.</p>\n</div>\n<div id=\"defining-individual-settings\">\n<h4>Defining individual settings</h4>\n<p>Within your groups, you may define any number of individual settings by simply\nassigning the value types to appropriate names. The names you assign them to\nwill be the attribute names you\u2019ll use to reference the setting later, so be\nsure to choose names accordingly.</p>\n<p>For the editor, the default description of each setting will be retrieved from\nthe attribute name, similar to how the <tt>verbose_name</tt> of model fields is\nretrieved. Also like model fields, however, an optional argument may be provided\nto define a more fitting description. It\u2019s recommended to leave the first letter\nlower-case, as it will be capitalized as necessary, automatically.</p>\n<pre>class EmailOptions(dbsettings.Group):\n    enabled = dbsettings.BooleanValue('whether to send emails or not')\n    sender = dbsettings.StringValue('address to send emails from')\n    subject = dbsettings.StringValue(default='SiteMail')\n</pre>\n<p>For more descriptive explanation, the <tt>help_text</tt> argument can be used. It\nwill be shown in the editor.</p>\n<p>The <tt>default</tt> argument is very useful - it specify an initial value of the\nsetting.</p>\n<p>In addition, settings may be supplied with a list of available options, through\nthe use of of the <tt>choices</tt> argument. This works exactly like the <tt>choices</tt>\nargument for model fields, and that of the newforms <tt>ChoiceField</tt>.</p>\n<p>The widget used for a value can be overriden using the <tt>widget</tt> keyword. For example:</p>\n<pre>payment_instructions = dbsettings.StringValue(\n    help_text=\"Printed on every invoice.\",\n    default=\"Payment to Example XYZ\\nBank name here\\nAccount: 0123456\\nSort: 01-02-03\",\n    widget=forms.Textarea\n)\n</pre>\n<p>A full list of value types is available later in this document, but the process\nand arguments are the same for each.</p>\n</div>\n<div id=\"assigning-settings\">\n<h4>Assigning settings</h4>\n<p>Once your settings are defined and grouped properly, they must be assigned to a\nlocation where they will be referenced later. This is as simple as instantiating\nthe settings group in the appropriate location. This may be at the module level\nor within any standard Django model.</p>\n<p>Group instance may receive one optional argument: verbose name of the group.\nThis name will be displayed in the editor.</p>\n<pre>email = EmailOptions()\n\nclass Image(models.Model):\n    image = models.ImageField(upload_to='/upload/path')\n    caption = models.TextField()\n\n    limits = ImageLimits('Dimension settings')\n</pre>\n<p>Multiple groups may be assigned to the same module or model, and they can even\nbe combined into a single group by using standard addition syntax:</p>\n<pre>options = EmailOptions() + ImageLimits()\n</pre>\n<p>To separate and tag settings nicely in the editor, use verbose names:</p>\n<pre>options = EmailOptions('Email') + ImageLimits('Dimesions')\n</pre>\n</div>\n<div id=\"database-setup\">\n<h4>Database setup</h4>\n<p>A single model is provided for database storage, and this model must be\ninstalled in your database before you can use the included editors or the\npermissions that will be automatically created. This is a simple matter of\nrunning <tt>manage.py syncdb</tt> or <tt>manage.py migrate</tt> now that your settings\nare configured.</p>\n<p>This step need only be repeate when settings are added to a new application,\nas it will create the appropriate permissions. Once those are in place, new\nsettings may be added to existing applications with no impact on the database.</p>\n</div>\n</div>\n<div id=\"using-your-settings\">\n<h3>Using your settings</h3>\n<p>Once the above steps are completed, you\u2019re ready to make use of database-backed\nsettings.</p>\n<div id=\"editing-settings\">\n<h4>Editing settings</h4>\n<p>When first defined, your settings will default to <tt>None</tt> (or <tt>False</tt> in\nthe case of <tt>BooleanValue</tt>), so their values must be set using one of the\nsupplied editors before they can be considered useful (however, if the setting\nhad the <tt>default</tt> argument passed in the constructor, its value is already\nuseful - equal to the defined default).</p>\n<p>The editor will be available at the URL configured earlier.\nFor example, if you used the prefix of <tt>'settings/'</tt>, the URL <tt>/settings/</tt>\nwill provide an editor of all available settings, while <tt>/settings/myapp/</tt>\nwould contain a list of just the settings for <tt>myapp</tt>.</p>\n<p>URL patterns are named: <tt>'site_settings'</tt> and <tt>'app_settings'</tt>, respectively.</p>\n<p>The editors are restricted to staff members, and the particular settings that\nwill be available to users is based on permissions that are set for them. This\nmeans that superusers will automatically be able to edit all settings, while\nother staff members will need to have permissions set explicitly.</p>\n</div>\n<div id=\"accessing-settings-in-python\">\n<h4>Accessing settings in Python</h4>\n<p>Once settings have been assigned to an appropriate location, they may be\nreferenced as standard Python attributes. The group becomes an attribute of the\nlocation where it was assigned, and the individual values are attributes of the\ngroup.</p>\n<p>If any settings are referenced without being set to a particular value, they\nwill default to <tt>None</tt> (or <tt>False</tt> in the case of <tt>BooleanValue</tt>, or\nwhatever was passed as <tt>default</tt>). In the\nfollowing example, assume that <tt>EmailOptions</tt> were just added to the project\nand the <tt>ImageLimits</tt> were added earlier and already set via editor.</p>\n<pre>&gt;&gt;&gt; from myproject.myapp import models\n\n# EmailOptions are not defined\n&gt;&gt;&gt; models.email.enabled\nFalse\n&gt;&gt;&gt; models.email.sender\n&gt;&gt;&gt; models.email.subject\n'SiteMail'  # Since default was defined\n\n# ImageLimits are defined\n&gt;&gt;&gt; models.Image.limits.maximum_width\n1024\n&gt;&gt;&gt; models.Image.limits.maximum_height\n768\n</pre>\n<p>These settings are accessible from any Python code, making them especially\nuseful in model methods and views. Each time the attribute is accessed, it will\nretrieve the current value, so your code doesn\u2019t need to worry about what\nhappens behind the scenes.</p>\n<pre>def is_valid(self):\n    if self.width &gt; Image.limits.maximum_width:\n        return False\n    if self.height &gt; Image.limits.maximum_height:\n        return False\nreturn True\n</pre>\n<p>As mentioned, views can make use of these settings as well.</p>\n<pre>from myproject.myapp.models import email\n\ndef submit(request):\n\n    ...\n    # Deal with a form submission\n    ...\n\n    if email.enabled:\n        from django.core.mail import send_mail\n    send_mail(email.subject, 'message', email.sender, [request.user.email])\n</pre>\n<p>Settings can be not only read, but also written. The admin editor is more\nuser-friendly, but in case code need to change something:</p>\n<pre>from myproject.myapp.models import Image\n\ndef low_disk_space():\n    Image.limits.maximum_width = Image.limits.maximum_height = 200\n</pre>\n<p>Every write is immediately commited to the database and proper cache key is deleted.</p>\n</div>\n<div id=\"a-note-about-model-instances\">\n<h4>A note about model instances</h4>\n<p>Since settings aren\u2019t related to individual model instances, any settings that\nare set on models may only be accessed by the model class itself. Attempting to\naccess settings on an instance will raise an <tt>AttributeError</tt>.</p>\n</div>\n<div id=\"triggering-actions-on-settings-changes\">\n<h4>Triggering actions on settings changes</h4>\n<p>A signal is sent whenever a setting changes. You can receive it by doing\nsomething like this in your appconfig\u2019s <tt>ready()</tt> method:</p>\n<pre>from dbsetting.loading import get_setting\nfrom dbsettings.signals import setting_changed\n\nsetting_changed.connect(my_function, sender=get_setting('myapp', 'MyClass', 'myattr'))\n</pre>\n<p><cite>my_function</cite> will be called with a <cite>sender</cite> and <cite>value</cite> parameters, the latter containing a\nnew value assigned to the setting.</p>\n</div>\n</div>\n<div id=\"value-types\">\n<h3>Value types</h3>\n<p>There are several various value types available for database-backed settings.\nSelect the one most appropriate for each individual setting, but all types use\nthe same set of arguments.</p>\n<div id=\"booleanvalue\">\n<h4>BooleanValue</h4>\n<p>Presents a checkbox in the editor, and returns <tt>True</tt> or <tt>False</tt> in Python.</p>\n</div>\n<div id=\"durationvalue\">\n<h4>DurationValue</h4>\n<p>Presents a set of inputs suitable for specifying a length of time. This is\nrepresented in Python as a <a href=\"https://docs.python.org/2/library/datetime.html#timedelta-objects\" rel=\"nofollow\"><tt>timedelta</tt></a> object.</p>\n</div>\n<div id=\"floatvalue\">\n<h4>FloatValue</h4>\n<p>Presents a standard input field, which becomes a <tt>float</tt> in Python.</p>\n</div>\n<div id=\"integervalue\">\n<h4>IntegerValue</h4>\n<p>Presents a standard input field, which becomes an <tt>int</tt> in Python.</p>\n</div>\n<div id=\"percentvalue\">\n<h4>PercentValue</h4>\n<p>Similar to <tt>IntegerValue</tt>, but with a limit requiring that the value be\nbetween 0 and 100. In addition, when accessed in Python, the value will be\ndivided by 100, so that it is immediately suitable for calculations.</p>\n<p>For instance, if a <tt>myapp.taxes.sales_tax</tt> was set to 5 in the editor,\nthe following calculation would be valid:</p>\n<pre>&gt;&gt;&gt; 5.00 * myapp.taxes.sales_tax\n0.25\n</pre>\n</div>\n<div id=\"positiveintegervalue\">\n<h4>PositiveIntegerValue</h4>\n<p>Similar to <tt>IntegerValue</tt>, but limited to positive values and 0.</p>\n</div>\n<div id=\"stringvalue\">\n<h4>StringValue</h4>\n<p>Presents a standard input, accepting any text string up to 255\n(or <tt>DBSETTINGS_VALUE_LENGTH</tt>) characters. In\nPython, the value is accessed as a standard string.</p>\n</div>\n<div id=\"datetimevalue\">\n<h4>DateTimeValue</h4>\n<p>Presents a standard input field, which becomes a <tt>datetime</tt> in Python.</p>\n<p>User input will be parsed according to <tt>DATETIME_INPUT_FORMATS</tt> setting.</p>\n<p>In code, one can assign to field string or datetime object:</p>\n<pre># These two statements has the same effect\nmyapp.Feed.next_feed = '2012-06-01 00:00:00'\nmyapp.Feed.next_feed = datetime.datetime(2012, 6, 1, 0, 0, 0)\n</pre>\n</div>\n<div id=\"datevalue\">\n<h4>DateValue</h4>\n<p>Presents a standard input field, which becomes a <tt>date</tt> in Python.</p>\n<p>User input will be parsed according to <tt>DATE_INPUT_FORMATS</tt> setting.</p>\n<p>See <tt>DateTimeValue</tt> for the remark about assigning.</p>\n</div>\n<div id=\"timevalue\">\n<h4>TimeValue</h4>\n<p>Presents a standard input field, which becomes a <tt>time</tt> in Python.</p>\n<p>User input will be parsed according to <tt>TIME_INPUT_FORMATS</tt> setting.</p>\n<p>See <tt>DateTimeValue</tt> for the remark about assigning.</p>\n</div>\n<div id=\"imagevalue\">\n<h4>ImageValue</h4>\n<p>(requires PIL or Pillow imaging library to work)</p>\n<p>Allows to upload image and view its preview.</p>\n<p>ImageValue has optional keyword arguments:</p>\n<ul>\n<li><tt>upload_to</tt> specifies path (relative to <tt>MEDIA_ROOT</tt>), where uploaded\nimages will be stored. If argument is not present, files will be saved\ndirectly under <tt>MEDIA_ROOT</tt>.</li>\n<li><tt>delete_old</tt> (default to True) controls whether to delete the old file when\nthe value has changed</li>\n</ul>\n<p>In Python, the value is accessed as a standard string (file name, relative to\n<tt>MEDIA_ROOT</tt>).</p>\n</div>\n<div id=\"passwordvalue\">\n<h4>PasswordValue</h4>\n<p>Presents a standard password input. Retain old setting value if not changed.</p>\n</div>\n</div>\n<div id=\"setting-defaults-for-a-distributed-application\">\n<h3>Setting defaults for a distributed application</h3>\n<p>Distributed applications often have need for certain default settings that are\nuseful for the common case, but which may be changed to suit individual\ninstallations. For such cases, a utility is provided to enable applications to\nset any applicable defaults.</p>\n<p>Living at <tt>dbsettings.utils.set_defaults</tt>, this utility is designed to be used\nwithin the app\u2019s <tt>management.py</tt>. This way, when the application is installed\nusing <tt>syncdb</tt>/<tt>migrate</tt>, the default settings will also be installed to the database.</p>\n<p>The function requires a single positional argument, which is the <tt>models</tt>\nmodule for the application. Any additional arguments must represent the actual\nsettings that will be installed. Each argument is a 3-tuple, of the following\nformat: <tt>(class_name, setting_name, value)</tt>.</p>\n<p>If the value is intended for a module-level setting, simply set <tt>class_name</tt>\nto an empty string. The value for <tt>setting_name</tt> should be the name given to\nthe setting itself, while the name assigned to the group isn\u2019t supplied, as it\nisn\u2019t used for storing the value.</p>\n<p>For example, the following code in <tt>management.py</tt> would set defaults for\nsome of the settings provided earlier in this document:</p>\n<pre>from django.conf import settings\nfrom dbsettings.utils import set_defaults\nfrom myproject.myapp import models as myapp\n\nset_defaults(myapp,\n    ('', 'enabled', True)\n    ('', 'sender', settings.ADMINS[0][1]) # Email of the first listed admin\n    ('Image', 'maximum_width', 800)\n    ('Image', 'maximum_height', 600)\n)\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<dl>\n<dt><strong>1.1.0</strong> (21/03/2020)</dt>\n<dd><ul>\n<li>Fixed image widget in Django 2.1</li>\n<li>Added <tt>delete_old</tt> parameter to ImageValue</li>\n<li>Make <tt>upload_to</tt> parameter to ImageValue no longer required.</li>\n<li>Fix PasswordValue to not render widget as required.</li>\n</ul>\n</dd>\n<dt><strong>1.0.1</strong> (26/12/2019)</dt>\n<dd><ul>\n<li>Introduced a signal <cite>setting_changed</cite></li>\n<li>Added compatibility with Django 3.0</li>\n<li>Dropped compatibility with Django 1.10, 1.11</li>\n<li>Dropped compatibility with Python 2</li>\n</ul>\n</dd>\n<dt><strong>0.11.0</strong> (31/07/2019)</dt>\n<dd><ul>\n<li>Added compatibility with Django 1.11, 2.0, 2.1, 2.2</li>\n<li>Dropped compatibility with Django 1.7, 1.8, 1.9</li>\n</ul>\n</dd>\n<dt><strong>0.10.0</strong> (25/09/2016)</dt>\n<dd><ul>\n<li>Added compatibility with Django 1.10</li>\n</ul>\n</dd>\n<dt><strong>0.9.3</strong> (02/06/2016)</dt>\n<dd><ul>\n<li>Fixed (hopefully for good) problem with ImageValue in Python 3 (thanks rolexCoder)</li>\n</ul>\n</dd>\n<dt><strong>0.9.2</strong> (01/05/2016)</dt>\n<dd><ul>\n<li>Fixed bug when saving non-required settings</li>\n<li>Fixed problem with ImageValue in Python 3 (thanks rolexCoder)</li>\n</ul>\n</dd>\n<dt><strong>0.9.1</strong> (10/01/2016)</dt>\n<dd><ul>\n<li>Fixed <cite>Sites</cite> app being optional (thanks rolexCoder)</li>\n</ul>\n</dd>\n<dt><strong>0.9.0</strong> (25/12/2015)</dt>\n<dd><ul>\n<li>Added compatibility with Django 1.9 (thanks Alonso)</li>\n<li>Dropped compatibility with Django 1.4, 1.5, 1.6</li>\n</ul>\n</dd>\n<dt><strong>0.8.2</strong> (17/09/2015)</dt>\n<dd><ul>\n<li>Added migrations to distro</li>\n<li>Add configuration option to change max length of setting values from 255 to whatever</li>\n<li>Add configuration option to disable caching (thanks nwaxiomatic)</li>\n<li>Fixed PercentValue rendering (thanks last-partizan)</li>\n</ul>\n</dd>\n<dt><strong>0.8.1</strong> (21/06/2015)</dt>\n<dd><ul>\n<li>Made <tt>django.contrib.sites</tt> framework dependency optional</li>\n<li>Added migration for app</li>\n</ul>\n</dd>\n<dt><strong>0.8.0</strong> (16/04/2015)</dt>\n<dd><ul>\n<li>Switched to using django.utils.six instead of standalone six.</li>\n<li>Added compatibility with Django 1.8</li>\n<li>Dropped compatibility with Django 1.3</li>\n</ul>\n</dd>\n<dt><strong>0.7.4</strong> (24/03/2015)</dt>\n<dd><ul>\n<li>Added default values for fields.</li>\n<li>Fixed Python 3.3 compatibility</li>\n<li>Added creation of folders with ImageValue</li>\n</ul>\n</dd>\n<dt><strong>0.7.3</strong>, <strong>0.7.2</strong></dt>\n<dd>pypi problems</dd>\n<dt><strong>0.7.1</strong> (11/03/2015)</dt>\n<dd><ul>\n<li>Fixed pypi distribution.</li>\n</ul>\n</dd>\n<dt><strong>0.7</strong> (06/07/2014)</dt>\n<dd><ul>\n<li>Added PasswordValue</li>\n<li>Added compatibility with Django 1.6 and 1.7.</li>\n</ul>\n</dd>\n<dt><strong>0.6</strong> (16/09/2013)</dt>\n<dd><ul>\n<li>Added compatibility with Django 1.5 and python3, dropped support for Django 1.2.</li>\n<li>Fixed permissions: added permission for editing non-model (module-level) settings</li>\n<li>Make PIL/Pillow not required in setup.py</li>\n</ul>\n</dd>\n<dt><strong>0.5</strong> (11/10/2012)</dt>\n<dd><ul>\n<li>Fixed error occuring when test are run with <tt>LANGUAGE_CODE</tt> different than \u2018en\u2019</li>\n<li>Added verbose_name option for Groups</li>\n<li>Cleaned code</li>\n</ul>\n</dd>\n<dt><strong>0.4.1</strong> (02/10/2012)</dt>\n<dd><ul>\n<li>Fixed Image import</li>\n</ul>\n</dd>\n<dt><strong>0.4</strong> (30/09/2012)</dt>\n<dd><ul>\n<li>Named urls</li>\n<li>Added polish translation</li>\n</ul>\n</dd>\n<dt><strong>0.3</strong> (04/09/2012)</dt>\n<dd>Included testrunner in distribution</dd>\n<dt><strong>0.2</strong> (05/07/2012)</dt>\n<dd><ul>\n<li>Fixed errors appearing when module-level and model-level settings have\nsame attribute names</li>\n<li>Corrected the editor templates admin integration</li>\n<li>Updated README</li>\n</ul>\n</dd>\n<dt><strong>0.1</strong> (29/06/2012)</dt>\n<dd>Initial PyPI release</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6854570, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f127d98195fbab49ebb58879eb4aa3e2", "sha256": "a930ffaa6bf3508f541fdeaacfebb972773298f94201b552756f9dc2969a1f2a"}, "downloads": -1, "filename": "django-dbsettings-0.1.tar.gz", "has_sig": false, "md5_digest": "f127d98195fbab49ebb58879eb4aa3e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17261, "upload_time": "2012-06-29T11:53:24", "upload_time_iso_8601": "2012-06-29T11:53:24.967590Z", "url": "https://files.pythonhosted.org/packages/aa/cc/110bca24e2bc4145f4d1f74cf31d41b52b3ab12a59ab19f7e74f884306d4/django-dbsettings-0.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "71ef952b0c84a3f7e155f0289fc8dee4", "sha256": "18f2a8c80801d4a16f159c762385010ce13303bf83b05058c5a72ee4ce958ec6"}, "downloads": -1, "filename": "django-dbsettings-0.10.0.tar.gz", "has_sig": false, "md5_digest": "71ef952b0c84a3f7e155f0289fc8dee4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21697, "upload_time": "2016-09-25T08:51:58", "upload_time_iso_8601": "2016-09-25T08:51:58.690167Z", "url": "https://files.pythonhosted.org/packages/f4/f6/2948424ecf14c3477609633b2b38f5f4b810e18c383eaf65236d1eb1b774/django-dbsettings-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "8ca894a5ec10244ea45fd8848a928558", "sha256": "e3147ced54b7db3371df10df8845e4514aeae96720000bca1a01d0a6490a1404"}, "downloads": -1, "filename": "django-dbsettings-0.11.0.tar.gz", "has_sig": false, "md5_digest": "8ca894a5ec10244ea45fd8848a928558", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21857, "upload_time": "2019-08-02T08:53:55", "upload_time_iso_8601": "2019-08-02T08:53:55.291863Z", "url": "https://files.pythonhosted.org/packages/06/1b/8b76c69e9f87561475586753bafd3fc9bf1b6440511a7c9ce4668e23f105/django-dbsettings-0.11.0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4dd79f54015f0f1250a4b7fef7d39d89", "sha256": "cd5f299b4dfa864308619ff587014e2c73cc8d0ad9789a51fe1ff072552b907b"}, "downloads": -1, "filename": "django-dbsettings-0.2.tar.gz", "has_sig": false, "md5_digest": "4dd79f54015f0f1250a4b7fef7d39d89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17914, "upload_time": "2012-07-05T13:30:49", "upload_time_iso_8601": "2012-07-05T13:30:49.564645Z", "url": "https://files.pythonhosted.org/packages/25/44/21d26873159637a197a922fe2434be944d4d337fa39dce83f4956b325124/django-dbsettings-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "9b9bc7bd29d76dd657ab58676979332d", "sha256": "f11580af973c54019ead80c7d30488e6bfc8896d1c952d88db640b8e8a6659bd"}, "downloads": -1, "filename": "django-dbsettings-0.3.tar.gz", "has_sig": false, "md5_digest": "9b9bc7bd29d76dd657ab58676979332d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18612, "upload_time": "2012-09-04T12:28:26", "upload_time_iso_8601": "2012-09-04T12:28:26.899776Z", "url": "https://files.pythonhosted.org/packages/43/bd/2227114fd5176cb73db562ac8b63e3f073a1394142551c9beaaed166b853/django-dbsettings-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "f7332315085dab026a2145caea0ca0da", "sha256": "ac1ab330235fa73305b71025869986052be06150a145cef7bad06a34185ce414"}, "downloads": -1, "filename": "django-dbsettings-0.4.tar.gz", "has_sig": false, "md5_digest": "f7332315085dab026a2145caea0ca0da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21603, "upload_time": "2012-09-30T17:48:49", "upload_time_iso_8601": "2012-09-30T17:48:49.627026Z", "url": "https://files.pythonhosted.org/packages/41/cd/2b6e3bd9da07a76514a970c992dfb4d472c8e4d37e6cafe56a9b97773b0b/django-dbsettings-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e0e30383989638211729e934768a047b", "sha256": "84ed05af0349bbcca6fed15ba09fab112097fe83e2e93fdd8bf1a31211d856d1"}, "downloads": -1, "filename": "django-dbsettings-0.4.1.tar.gz", "has_sig": false, "md5_digest": "e0e30383989638211729e934768a047b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21695, "upload_time": "2012-10-02T09:23:09", "upload_time_iso_8601": "2012-10-02T09:23:09.269544Z", "url": "https://files.pythonhosted.org/packages/d5/ff/632e90af3c1ebd31f0bfa840481d0d722caab9a2a8b1e8c7e99276569825/django-dbsettings-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "496507ed58121281d2a8719a015f6a2f", "sha256": "e5630de56f129d6ecde98096f8bdd66d4304e6d44e4d7f7821740c54c1a279ac"}, "downloads": -1, "filename": "django-dbsettings-0.5.tar.gz", "has_sig": false, "md5_digest": "496507ed58121281d2a8719a015f6a2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22137, "upload_time": "2012-10-11T14:08:52", "upload_time_iso_8601": "2012-10-11T14:08:52.414433Z", "url": "https://files.pythonhosted.org/packages/2d/4a/4acd3417bb07c03f663c4e9cd42fca121125fc40c613c9e4e696453dde3f/django-dbsettings-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3b68e813dd6046fbc33f06c435aa21fe", "sha256": "2bf6184f43609a4955199708d22be4d0825ed8559483e7f01062dc278075e278"}, "downloads": -1, "filename": "django-dbsettings-0.6.tar.gz", "has_sig": false, "md5_digest": "3b68e813dd6046fbc33f06c435aa21fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23218, "upload_time": "2013-09-15T22:13:44", "upload_time_iso_8601": "2013-09-15T22:13:44.209007Z", "url": "https://files.pythonhosted.org/packages/7e/b8/17b90be47968f2c3fc18efb8c544f723b2d1fc91c94e7ec60b9fac19b8ee/django-dbsettings-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "84ed368d43fb54d0f72f0257fef3f6fd", "sha256": "834c31eef9330d7ee823a8f5041422920178aef35d6bc99ed30069d68cee8864"}, "downloads": -1, "filename": "django-dbsettings-0.7.tar.gz", "has_sig": false, "md5_digest": "84ed368d43fb54d0f72f0257fef3f6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26970, "upload_time": "2014-07-06T20:24:22", "upload_time_iso_8601": "2014-07-06T20:24:22.782024Z", "url": "https://files.pythonhosted.org/packages/23/97/e7d667a4705ee4a007bc32e678fecd08cf4003c5780113a1373c80a8bac0/django-dbsettings-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "263be8d5c68c696b2461bbba9a75ce91", "sha256": "a772bbbb082ca67c987cc03cef7943103bde74aa43fab642ee9fb2e8746cc651"}, "downloads": -1, "filename": "django-dbsettings-0.7.1.tar.gz", "has_sig": false, "md5_digest": "263be8d5c68c696b2461bbba9a75ce91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23767, "upload_time": "2015-03-11T21:16:25", "upload_time_iso_8601": "2015-03-11T21:16:25.625922Z", "url": "https://files.pythonhosted.org/packages/97/18/e38a4446f7d97c80bbd2f3d69f9c8c2f097a9eae3e6bf3101383e8de4127/django-dbsettings-0.7.1.tar.gz", "yanked": false}], "0.7.2": [], "0.7.3": [{"comment_text": "", "digests": {"md5": "d4a7fbc75aaa14ca62e0e6294ac1a616", "sha256": "66f3ac079c2439346072d74023a4fadbd7e1b52f792cb4e9024e63b35b5f19bc"}, "downloads": -1, "filename": "django-dbsettings-0.7.3.tar.gz", "has_sig": false, "md5_digest": "d4a7fbc75aaa14ca62e0e6294ac1a616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19811, "upload_time": "2015-03-23T23:51:04", "upload_time_iso_8601": "2015-03-23T23:51:04.714324Z", "url": "https://files.pythonhosted.org/packages/a5/0a/d4614dba115920c383c6fe29d95de28a69ece5d5abcc590fe383cb4a6341/django-dbsettings-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "37a52429ee31350d8289d5ad0bb66b8e", "sha256": "d995b9ea9a8b7486293e237867895d51263b000880d7ac122fb14c077cf4eed5"}, "downloads": -1, "filename": "django-dbsettings-0.7.4.tar.gz", "has_sig": false, "md5_digest": "37a52429ee31350d8289d5ad0bb66b8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19827, "upload_time": "2015-03-23T23:53:35", "upload_time_iso_8601": "2015-03-23T23:53:35.609523Z", "url": "https://files.pythonhosted.org/packages/60/ca/a7281ed824fde73c0bbb326a1cf8a650666df2606d8a5ad8ab384ab4310c/django-dbsettings-0.7.4.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "9fd5e3c9b088e46c21cff70ced2ae3b2", "sha256": "b3670d756e780eb0025a0892bfa1fabf35acd51ca525f6ff2d236c5ea839f455"}, "downloads": -1, "filename": "django-dbsettings-0.8.0.tar.gz", "has_sig": false, "md5_digest": "9fd5e3c9b088e46c21cff70ced2ae3b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19814, "upload_time": "2015-04-16T19:04:46", "upload_time_iso_8601": "2015-04-16T19:04:46.247945Z", "url": "https://files.pythonhosted.org/packages/38/17/9c94c0f76239d297be853b136e523ca6806ef94e819abbf8341f98711157/django-dbsettings-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "6b0d3d2acbd0cb77c8af2e140c21f640", "sha256": "a5ee36ef5e97779020347937273af335f6301f7897c4f3c36824748ae99e2f76"}, "downloads": -1, "filename": "django-dbsettings-0.8.1.tar.gz", "has_sig": false, "md5_digest": "6b0d3d2acbd0cb77c8af2e140c21f640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20208, "upload_time": "2015-06-21T20:30:20", "upload_time_iso_8601": "2015-06-21T20:30:20.335644Z", "url": "https://files.pythonhosted.org/packages/a6/31/02be5a7b2ef0e2cc9d46c41b43c1e65b06f3abf2fd6226d2a9b33576d55c/django-dbsettings-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "bee1f613193ab76c7385b9e6e6f15d89", "sha256": "a314f8f5f4ec4939a108dd7bd9f2b03eac118a284ed697075e797f2aa954d76c"}, "downloads": -1, "filename": "django-dbsettings-0.8.2.tar.gz", "has_sig": false, "md5_digest": "bee1f613193ab76c7385b9e6e6f15d89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20919, "upload_time": "2015-09-17T15:24:36", "upload_time_iso_8601": "2015-09-17T15:24:36.225599Z", "url": "https://files.pythonhosted.org/packages/39/63/bf3f3d5b37f11c108884d72e863a88ca05ef6abe4bb8ea4459b7d6772746/django-dbsettings-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "8a88cb13e663c22a6412c9ef3831b745", "sha256": "f71e91edb0b914231798b92ad2ab63555c405898ea5c122e7c3b8fcb04b632ca"}, "downloads": -1, "filename": "django-dbsettings-0.9.0.tar.gz", "has_sig": false, "md5_digest": "8a88cb13e663c22a6412c9ef3831b745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21155, "upload_time": "2015-12-25T20:05:58", "upload_time_iso_8601": "2015-12-25T20:05:58.033902Z", "url": "https://files.pythonhosted.org/packages/89/27/46dab189d91cb5ef03aa9e7a3781b135106e98f17b8c4ae74a98e0352ce9/django-dbsettings-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "543185501f233b290289e152d32cf7b7", "sha256": "5786d997deb1203395bfee3243643198fabe9b22db598dee288dcc6073a0032a"}, "downloads": -1, "filename": "django-dbsettings-0.9.1.tar.gz", "has_sig": false, "md5_digest": "543185501f233b290289e152d32cf7b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21266, "upload_time": "2016-01-10T11:18:47", "upload_time_iso_8601": "2016-01-10T11:18:47.300558Z", "url": "https://files.pythonhosted.org/packages/81/54/92e0f88e34013208a95da16b263575fddba68daef1168d5fb11878bfda7f/django-dbsettings-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "620a5228ffb53b29b1cb4d42cdc2a778", "sha256": "62d03accc323a38a80a527ae3e404f398cbff8569e8349066c2743195b67eb54"}, "downloads": -1, "filename": "django-dbsettings-0.9.2.tar.gz", "has_sig": false, "md5_digest": "620a5228ffb53b29b1cb4d42cdc2a778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21365, "upload_time": "2016-05-01T20:41:27", "upload_time_iso_8601": "2016-05-01T20:41:27.441238Z", "url": "https://files.pythonhosted.org/packages/aa/59/e767b6dbddf023c4f90ca6c782ef3790798682813c4ae32d7ae2f5e73214/django-dbsettings-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "1ad00e8a21e6e13e300136c9cf918d7e", "sha256": "6f514d40c36caa3777ad2df8d02cd7e469a48e24bf74c5c31655bc241057ec50"}, "downloads": -1, "filename": "django-dbsettings-0.9.3.tar.gz", "has_sig": false, "md5_digest": "1ad00e8a21e6e13e300136c9cf918d7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21393, "upload_time": "2016-06-02T21:40:03", "upload_time_iso_8601": "2016-06-02T21:40:03.203105Z", "url": "https://files.pythonhosted.org/packages/66/fb/69f33014dc9dbca5b50c10d32f6486c1cfc76e426d41ecb68f6a68b52d09/django-dbsettings-0.9.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "27febeb083812136d30aa19f6974ddfd", "sha256": "42b04dffd3bc90d91718c822f1e0212d9368e8efe340f7ef09517b5fb1cf49f5"}, "downloads": -1, "filename": "django-dbsettings-1.0.0.tar.gz", "has_sig": false, "md5_digest": "27febeb083812136d30aa19f6974ddfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22350, "upload_time": "2019-12-26T20:25:19", "upload_time_iso_8601": "2019-12-26T20:25:19.134273Z", "url": "https://files.pythonhosted.org/packages/47/75/7d49a3e24a575cacf34cd5c94ff14be3cbef7de42ee5d62dad4a607e79ef/django-dbsettings-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "95ec204b8678c9fbfc0237c08c16692a", "sha256": "41069507bacf963f97644ea3e49041509e8c68f0437d8074be08b3777a8610d1"}, "downloads": -1, "filename": "django-dbsettings-1.0.1.tar.gz", "has_sig": false, "md5_digest": "95ec204b8678c9fbfc0237c08c16692a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22384, "upload_time": "2020-01-26T11:01:24", "upload_time_iso_8601": "2020-01-26T11:01:24.858924Z", "url": "https://files.pythonhosted.org/packages/c1/cc/5f1d8996adb3a837af749d95826a61649c702dc0e42f4f166be82883dc60/django-dbsettings-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "11debd445d9e50017ab6ac356798b757", "sha256": "1f07fd390a7783253e20edcfad118ecb25408284ca329128535de7382f516167"}, "downloads": -1, "filename": "django-dbsettings-1.1.0.tar.gz", "has_sig": false, "md5_digest": "11debd445d9e50017ab6ac356798b757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22723, "upload_time": "2020-03-21T08:40:20", "upload_time_iso_8601": "2020-03-21T08:40:20.594208Z", "url": "https://files.pythonhosted.org/packages/e0/4b/aa613c4ff877d04ed4c65c9454b518eb5e53f8bb30da54a5433a55138699/django-dbsettings-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11debd445d9e50017ab6ac356798b757", "sha256": "1f07fd390a7783253e20edcfad118ecb25408284ca329128535de7382f516167"}, "downloads": -1, "filename": "django-dbsettings-1.1.0.tar.gz", "has_sig": false, "md5_digest": "11debd445d9e50017ab6ac356798b757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22723, "upload_time": "2020-03-21T08:40:20", "upload_time_iso_8601": "2020-03-21T08:40:20.594208Z", "url": "https://files.pythonhosted.org/packages/e0/4b/aa613c4ff877d04ed4c65c9454b518eb5e53f8bb30da54a5433a55138699/django-dbsettings-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:38 2020"}