{"info": {"author": "zgallerie", "author_email": "developers@directbuy.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "====================\nLovely Pytest Docker\n====================\n\n.. image:: https://img.shields.io/pypi/v/lovely-pytest-docker.svg\n    :target: https://pypi.org/project/lovely-pytest-docker/\n\n.. image:: https://img.shields.io/pypi/pyversions/lovely-pytest-docker.svg\n    :target: https://pypi.org/project/lovely-pytest-docker/\n\n.. image:: https://travis-ci.com/lovelysystems/lovely-pytest-docker.svg?branch=master\n    :target: https://travis-ci.com/lovelysystems/lovely-pytest-docker\n\n\nCreate simple Pytest_ fixtures for writing integration tests based on Docker\ncontainers. The framework provides a service class to start and stop containers\nbased Docker Compose. Each single container can be started individually.\n\nSome parts of this package are taken from\nhttps://github.com/AndreLouisCaron/pytest-docker\n\n\nUsage with Pytest\n=================\n\nThe docker compose file should contain all desired containers and the ports\nshould be exposed. In the following example we want to start the app to test\nand a SQL database (Crate). Let's assume there is a ``Dockerfile`` for the app\nin the same folder as the docker compose file::\n\n    version: \"3\"\n    services:\n      app:\n        build: .\n        ports:\n          - \"8080\"\n        depends_on:\n          - \"crate\"\n\n      crate:\n        image: crate:latest\n        ports:\n          - \"4200\"\n\nIn the ``conftest.py`` file we can declare the docker fixtures for each service\nwe want to be able to start in the tests::\n\n    import pytest\n\n    @pytest.fixture(scope='session')\n    def docker_app(docker_services):\n        docker_services.start('app')\n        public_port = docker_services.wait_for_service(\"app\", 8080)\n        url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return url\n\n    @pytest.fixture(scope='session')\n    def docker_crate(docker_services):\n        docker_services.start('crate')\n        public_port = docker_services.wait_for_service(\"crate\", 4200)\n        dsn = \"{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return dsn\n\nBy default the fixture will look for the ``docker-compose.yml`` file in the\n``tests`` subfolder of the path where ``pytest.ini`` resides (or the project's\nroot directory if no ini file is given - as in the tests example). In many\ncases you will want to override the location for the docker compose files. Just\noverwrite the ``docker_compose_files`` fixture in your ``conftest.py`` file::\n\n    @pytest.fixture(scope='session')\n    def docker_compose_files(pytestconfig):\n        \"\"\"Get the docker-compose.yml absolute path.\n        Override this fixture in your tests if you need a custom location.\n        \"\"\"\n        return [\n            project_path('docker', 'docker-compose.yml'),\n        ]\n\nIn your test file declare the fixtures you want to use::\n\n    def test_something(docker_app, docker_crate):\n        # e.g. initialize database\n        ...\n        # test something (e.g. request to docker_app)\n        ...\n\nA working configuration and test example can be found in the ``tests`` folder\nof this package.\n\n\nExecution in Docker Container\n=============================\n\nIt's possible to execute a command inside one of the Docker containers. Use\nthe ``exec`` method of the ``docker_services`` fixture::\n\n    def test_exec(docker_services):\n        # the first argument is the service name of the compose file,\n        # the following arguments build the command to run\n        res = docker_services.exec('crate', 'ls', '-a')\n\n\nWait for Service\n================\n\nThe ``wait_for_service`` method of the service module checks whether the\ndocker service is really started. By default it makes a HTTP GET request to the\nserver's ``/`` endpoint. The service will retry to check until a timeout of\n30 seconds has passed.\n\nCustom Service Checker\n----------------------\n\nSome services may work differently and require a custom checker.\n\nCreate a custom service checker function which receives the IP address and the\nport as parameters::\n\n    def custom_service_checker(ip_address, port):\n        # if service is ready\n        return True\n        # otherwise return False\n\nIn the fixture provide the custom service checker function as ``check_service``\nparameter to the ``wait_for_service`` method::\n\n    @pytest.fixture(scope='session')\n    def docker_custom_service(docker_services):\n        docker_services.start('custom_service')\n        public_port = docker_services.wait_for_service(\n            \"app\",\n            8080,\n            check_service=custom_service_checker\n        )\n        url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return url\n\n\nRun Tests\n=========\n\nTests are held in the ``tests`` directory. Running tests is done via the\npytest package with::\n\n    ./gradlew pytest\n\n\n.. _Pytest: http://doc.pytest.org\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/angry-penguins/lovely-pytest-docker", "keywords": "pytest testing docker compose", "license": "", "maintainer": "", "maintainer_email": "", "name": "penguins-pytest-docker", "package_url": "https://pypi.org/project/penguins-pytest-docker/", "platform": "", "project_url": "https://pypi.org/project/penguins-pytest-docker/", "project_urls": {"Homepage": "https://github.com/angry-penguins/lovely-pytest-docker"}, "release_url": "https://pypi.org/project/penguins-pytest-docker/0.0.7/", "requires_dist": ["pytest"], "requires_python": "", "summary": "Pytest testing utilities with docker containers.", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/lovely-pytest-docker/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/lovely-pytest-docker.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40fe3ae4565fa1626bd9ed0f292915a6b736a1ee/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6f76656c792d7079746573742d646f636b65722e737667\"></a>\n<a href=\"https://pypi.org/project/lovely-pytest-docker/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/lovely-pytest-docker.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8035b2df6f385481475b78eac7c9e07c470165a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c6f76656c792d7079746573742d646f636b65722e737667\"></a>\n<a href=\"https://travis-ci.com/lovelysystems/lovely-pytest-docker\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/lovelysystems/lovely-pytest-docker.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f97c31fd7b4517a1caf046cae0d588bbb562294/68747470733a2f2f7472617669732d63692e636f6d2f6c6f76656c7973797374656d732f6c6f76656c792d7079746573742d646f636b65722e7376673f6272616e63683d6d6173746572\"></a>\n<p>Create simple <a href=\"http://doc.pytest.org\" rel=\"nofollow\">Pytest</a> fixtures for writing integration tests based on Docker\ncontainers. The framework provides a service class to start and stop containers\nbased Docker Compose. Each single container can be started individually.</p>\n<p>Some parts of this package are taken from\n<a href=\"https://github.com/AndreLouisCaron/pytest-docker\" rel=\"nofollow\">https://github.com/AndreLouisCaron/pytest-docker</a></p>\n<div id=\"usage-with-pytest\">\n<h2>Usage with Pytest</h2>\n<p>The docker compose file should contain all desired containers and the ports\nshould be exposed. In the following example we want to start the app to test\nand a SQL database (Crate). Let\u2019s assume there is a <tt>Dockerfile</tt> for the app\nin the same folder as the docker compose file:</p>\n<pre>version: \"3\"\nservices:\n  app:\n    build: .\n    ports:\n      - \"8080\"\n    depends_on:\n      - \"crate\"\n\n  crate:\n    image: crate:latest\n    ports:\n      - \"4200\"\n</pre>\n<p>In the <tt>conftest.py</tt> file we can declare the docker fixtures for each service\nwe want to be able to start in the tests:</p>\n<pre>import pytest\n\n@pytest.fixture(scope='session')\ndef docker_app(docker_services):\n    docker_services.start('app')\n    public_port = docker_services.wait_for_service(\"app\", 8080)\n    url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n    return url\n\n@pytest.fixture(scope='session')\ndef docker_crate(docker_services):\n    docker_services.start('crate')\n    public_port = docker_services.wait_for_service(\"crate\", 4200)\n    dsn = \"{docker_services.docker_ip}:{public_port}\".format(**locals())\n    return dsn\n</pre>\n<p>By default the fixture will look for the <tt><span class=\"pre\">docker-compose.yml</span></tt> file in the\n<tt>tests</tt> subfolder of the path where <tt>pytest.ini</tt> resides (or the project\u2019s\nroot directory if no ini file is given - as in the tests example). In many\ncases you will want to override the location for the docker compose files. Just\noverwrite the <tt>docker_compose_files</tt> fixture in your <tt>conftest.py</tt> file:</p>\n<pre>@pytest.fixture(scope='session')\ndef docker_compose_files(pytestconfig):\n    \"\"\"Get the docker-compose.yml absolute path.\n    Override this fixture in your tests if you need a custom location.\n    \"\"\"\n    return [\n        project_path('docker', 'docker-compose.yml'),\n    ]\n</pre>\n<p>In your test file declare the fixtures you want to use:</p>\n<pre>def test_something(docker_app, docker_crate):\n    # e.g. initialize database\n    ...\n    # test something (e.g. request to docker_app)\n    ...\n</pre>\n<p>A working configuration and test example can be found in the <tt>tests</tt> folder\nof this package.</p>\n</div>\n<div id=\"execution-in-docker-container\">\n<h2>Execution in Docker Container</h2>\n<p>It\u2019s possible to execute a command inside one of the Docker containers. Use\nthe <tt>exec</tt> method of the <tt>docker_services</tt> fixture:</p>\n<pre>def test_exec(docker_services):\n    # the first argument is the service name of the compose file,\n    # the following arguments build the command to run\n    res = docker_services.exec('crate', 'ls', '-a')\n</pre>\n</div>\n<div id=\"wait-for-service\">\n<h2>Wait for Service</h2>\n<p>The <tt>wait_for_service</tt> method of the service module checks whether the\ndocker service is really started. By default it makes a HTTP GET request to the\nserver\u2019s <tt>/</tt> endpoint. The service will retry to check until a timeout of\n30 seconds has passed.</p>\n<div id=\"custom-service-checker\">\n<h3>Custom Service Checker</h3>\n<p>Some services may work differently and require a custom checker.</p>\n<p>Create a custom service checker function which receives the IP address and the\nport as parameters:</p>\n<pre>def custom_service_checker(ip_address, port):\n    # if service is ready\n    return True\n    # otherwise return False\n</pre>\n<p>In the fixture provide the custom service checker function as <tt>check_service</tt>\nparameter to the <tt>wait_for_service</tt> method:</p>\n<pre>@pytest.fixture(scope='session')\ndef docker_custom_service(docker_services):\n    docker_services.start('custom_service')\n    public_port = docker_services.wait_for_service(\n        \"app\",\n        8080,\n        check_service=custom_service_checker\n    )\n    url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n    return url\n</pre>\n</div>\n</div>\n<div id=\"run-tests\">\n<h2>Run Tests</h2>\n<p>Tests are held in the <tt>tests</tt> directory. Running tests is done via the\npytest package with:</p>\n<pre>./gradlew pytest\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5667581, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "004ae7ca579a306512b357f5c265a5e3", "sha256": "695c677b7ada26766497049b140a27efe340a4258a4bff5a702154e1861fcf6e"}, "downloads": -1, "filename": "penguins-pytest-docker-0.0.6.tar.gz", "has_sig": false, "md5_digest": "004ae7ca579a306512b357f5c265a5e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6073, "upload_time": "2019-08-01T14:28:43", "upload_time_iso_8601": "2019-08-01T14:28:43.779648Z", "url": "https://files.pythonhosted.org/packages/a5/8f/ecfb3d8cab1735dc314420e28f8a074b8f0549e6356dab2c1f2b553aa1ae/penguins-pytest-docker-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "f6718c1d085dde57fe15baab495a684c", "sha256": "205982032b1d8b7b954552f5cddb25bb3dd0e0f88f79ff1439f1c484efb56180"}, "downloads": -1, "filename": "penguins_pytest_docker-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f6718c1d085dde57fe15baab495a684c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11241, "upload_time": "2019-08-12T16:58:22", "upload_time_iso_8601": "2019-08-12T16:58:22.216777Z", "url": "https://files.pythonhosted.org/packages/86/29/405811544f2b8239c822f8018357ca3a11923f7aa63cb640631e52d08b66/penguins_pytest_docker-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e07affcef015cb40f7804abfa458312", "sha256": "247baf72e07e76429b8ddacb0285eadf273bef181275f3972d431bfee525d0c3"}, "downloads": -1, "filename": "penguins-pytest-docker-0.0.7.tar.gz", "has_sig": false, "md5_digest": "4e07affcef015cb40f7804abfa458312", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6088, "upload_time": "2019-08-12T16:58:23", "upload_time_iso_8601": "2019-08-12T16:58:23.777043Z", "url": "https://files.pythonhosted.org/packages/41/32/355c7a590f2be38d2873c1445882d9143a65fd353dc97479cbf3ab7e2682/penguins-pytest-docker-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6718c1d085dde57fe15baab495a684c", "sha256": "205982032b1d8b7b954552f5cddb25bb3dd0e0f88f79ff1439f1c484efb56180"}, "downloads": -1, "filename": "penguins_pytest_docker-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f6718c1d085dde57fe15baab495a684c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11241, "upload_time": "2019-08-12T16:58:22", "upload_time_iso_8601": "2019-08-12T16:58:22.216777Z", "url": "https://files.pythonhosted.org/packages/86/29/405811544f2b8239c822f8018357ca3a11923f7aa63cb640631e52d08b66/penguins_pytest_docker-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e07affcef015cb40f7804abfa458312", "sha256": "247baf72e07e76429b8ddacb0285eadf273bef181275f3972d431bfee525d0c3"}, "downloads": -1, "filename": "penguins-pytest-docker-0.0.7.tar.gz", "has_sig": false, "md5_digest": "4e07affcef015cb40f7804abfa458312", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6088, "upload_time": "2019-08-12T16:58:23", "upload_time_iso_8601": "2019-08-12T16:58:23.777043Z", "url": "https://files.pythonhosted.org/packages/41/32/355c7a590f2be38d2873c1445882d9143a65fd353dc97479cbf3ab7e2682/penguins-pytest-docker-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:32 2020"}