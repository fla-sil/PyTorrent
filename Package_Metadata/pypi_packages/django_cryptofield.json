{"info": {"author": "Felix Morgner", "author_email": "felix.morgner@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "Crypto-fields for Django\n========================\n\nThis package provides database backed, encrypted fields for Django. The fields use database internal mechanisms to encrypt and verify strings completely inside the database. This functionality is interesting for use with passwords that are stored in a database as it allows the database to manage salting, hashing, and verification of the passwords.\n\nSupport notes\n~~~~~~~~~~~~~\n\nCurrently only PostgreSQL is supported as a database backend. I would be happy if someone with experience in MySQL or other databases that support encryption would provide hints or implementations for their favourite database.\n\nUsage\n-----\n\nUsing ``cryptofield`` is easy::\n\n  from django.db import models\n  import cryptofield\n\n  class ModelWithCrypto(models.Model):\n      password = cryptofield.CryptoField()\n\nKeyword arguments\n~~~~~~~~~~~~~~~~~\n\nThe ``CryptoField`` class supports the following keyword arguments:\n\n=========  ============================  ============================\nKeyword    Description                   Values\n---------  ----------------------------  ----------------------------\nalgorithm  The hashing algorithm to use  bf (default), md5, xdes, des\n=========  ============================  ============================\n\nRequirements (PostgreSQL)\n-------------------------\n\nTo use this package with PostgreSQL, make sure that the database in use has the ``pgcrypto`` extension activated. To do so, issue the following command to the desired database::\n\n  CREATE EXTENSION IF NOT EXISTS pgcrypto;\n\nIf no error occurs, the ``CryptoField`` class can now be used with the database.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/fmorgner/django_cryptofield", "keywords": "django crypto pgcrypto", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django_cryptofield", "package_url": "https://pypi.org/project/django_cryptofield/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django_cryptofield/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/fmorgner/django_cryptofield"}, "release_url": "https://pypi.org/project/django_cryptofield/0.2/", "requires_dist": null, "requires_python": null, "summary": "A field for database backed password crypto", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides database backed, encrypted fields for Django. The fields use database internal mechanisms to encrypt and verify strings completely inside the database. This functionality is interesting for use with passwords that are stored in a database as it allows the database to manage salting, hashing, and verification of the passwords.</p>\n<div id=\"support-notes\">\n<h2>Support notes</h2>\n<p>Currently only PostgreSQL is supported as a database backend. I would be happy if someone with experience in MySQL or other databases that support encryption would provide hints or implementations for their favourite database.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Using <tt>cryptofield</tt> is easy:</p>\n<pre>from django.db import models\nimport cryptofield\n\nclass ModelWithCrypto(models.Model):\n    password = cryptofield.CryptoField()\n</pre>\n</div>\n</div>\n<div id=\"keyword-arguments\">\n<h2>Keyword arguments</h2>\n<p>The <tt>CryptoField</tt> class supports the following keyword arguments:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Keyword</td>\n<td>Description</td>\n<td>Values</td>\n</tr>\n<tr><td>algorithm</td>\n<td>The hashing algorithm to use</td>\n<td>bf (default), md5, xdes, des</td>\n</tr>\n</tbody>\n</table>\n<div id=\"requirements-postgresql\">\n<h3>Requirements (PostgreSQL)</h3>\n<p>To use this package with PostgreSQL, make sure that the database in use has the <tt>pgcrypto</tt> extension activated. To do so, issue the following command to the desired database:</p>\n<pre>CREATE EXTENSION IF NOT EXISTS pgcrypto;\n</pre>\n<p>If no error occurs, the <tt>CryptoField</tt> class can now be used with the database.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2200333, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "315c9737c3b68e3da246ba94e51bacb2", "sha256": "7bce4190d129e023eab6c5c9d0ed236111d2b66fc40c79e15a6057a2aca8f4ff"}, "downloads": -1, "filename": "django_cryptofield-0.1.tar.gz", "has_sig": false, "md5_digest": "315c9737c3b68e3da246ba94e51bacb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2367, "upload_time": "2016-07-02T15:59:44", "upload_time_iso_8601": "2016-07-02T15:59:44.793993Z", "url": "https://files.pythonhosted.org/packages/94/9e/436d82ce81d297f5567fdcdb109f4a5329f74c6d3f9fefbeb70c0ab02116/django_cryptofield-0.1.tar.gz", "yanked": false}], "0.1a0": [{"comment_text": "", "digests": {"md5": "17f9e80f01044e9ae3d2af0b8b1919f4", "sha256": "0c8590a5f507e46a30588f0e7f832723da29939e357e7153f404c9aae9c63222"}, "downloads": -1, "filename": "django_cryptofield-0.1a0.tar.gz", "has_sig": false, "md5_digest": "17f9e80f01044e9ae3d2af0b8b1919f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2368, "upload_time": "2016-07-02T16:20:59", "upload_time_iso_8601": "2016-07-02T16:20:59.293260Z", "url": "https://files.pythonhosted.org/packages/d5/78/0e39ba5be50a321f1ea6ee48cfc4b8124d2f5fe9c3884d02e160816481f7/django_cryptofield-0.1a0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0cc8e3f0a1cb631a8e58d27d4ab07d86", "sha256": "864480e30972fb9f24f9e2d3e39c3e264f42f8f17cd1b6024791925f41de0e00"}, "downloads": -1, "filename": "django_cryptofield-0.2.tar.gz", "has_sig": false, "md5_digest": "0cc8e3f0a1cb631a8e58d27d4ab07d86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2463, "upload_time": "2016-07-03T12:14:22", "upload_time_iso_8601": "2016-07-03T12:14:22.580964Z", "url": "https://files.pythonhosted.org/packages/14/7f/4f57f0bf0305cbc29ec9fc707590b522fdb9697e715b9b4883cc8d2628cc/django_cryptofield-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0cc8e3f0a1cb631a8e58d27d4ab07d86", "sha256": "864480e30972fb9f24f9e2d3e39c3e264f42f8f17cd1b6024791925f41de0e00"}, "downloads": -1, "filename": "django_cryptofield-0.2.tar.gz", "has_sig": false, "md5_digest": "0cc8e3f0a1cb631a8e58d27d4ab07d86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2463, "upload_time": "2016-07-03T12:14:22", "upload_time_iso_8601": "2016-07-03T12:14:22.580964Z", "url": "https://files.pythonhosted.org/packages/14/7f/4f57f0bf0305cbc29ec9fc707590b522fdb9697e715b9b4883cc8d2628cc/django_cryptofield-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:46 2020"}