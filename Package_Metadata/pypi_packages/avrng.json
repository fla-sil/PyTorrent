{"info": {"author": "Emilie Ma", "author_email": "kewbish@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# AVRNG - GVRSF 2020 submission\nAn audio-visual random number generator, built for the Vancouver District Science Fair 2020.  \nBuilt with Python 3.7, October 2019 - current.  \nThis PIP package is a mirror of the project at [the GitHub](https://github.com/kewbish/avrng). This distribution may lag behind development at the GitHub.  \n\n## Applications\nThe AVRNG works well in a variety of application, mainly for security and surveillance-based solutions. One example use case is in an office, where security cameras can pass footage to the AVRNG and generate keys for the office's encryption algorithms. These keys are *truly random* due to the inherent randomness in sensor data when capturing footage, and to unpredictable compression and time-stamps.  \nTo find the key, an attacker would have to obtain the exact data source with the same compression and XOR rate, and hash at the exact time and parameters the program would be running at. This security makes the AVRNG a [TRNG](https://en.wikipedia.org/wiki/Hardware_random_number_generator).  \nA main inspiration was unique TRNG creations, such as the ones employed by [Cloudflare](https://blog.cloudflare.com/lavarand-in-production-the-nitty-gritty-technical-details/). A great video on the topic was created by [Tom Scott](https://www.youtube.com/watch?v=1cUUfMeOijg).  \n\n## How it works\nA video is split into audio and video streams. These streams are cut to smaller intervals.  \nFor the audio, it's split on the interval specified in running the AVRNG. This smaller .wav file is hashed with [Skein](http://www.skein-hash.info/about), a next-level hash and former SHA3 candidate.  \nThe video stream is cut with the [scenedetect](https://pypi.org/project/scenedetect/) tool, splitting at every unique scene. This works especially well with security footage (main application) with many pauses or intervals of near-identical footage. These smaller videos are then split into individual JPEGS, due to the JPEG's compression algorithm that will preserve the inherent randomness in the camera's sensor data. These photos then are hashed with Skein, as above.  \nThese two data streams are intertwined together along with a time component, using XOR and bit addition algorithms. These outputs are written to a file, which can then be used as keys for cryptosecure applications.  \n\n## Installation\n### With PIP\nThis method requires PIP to be installed and set up on your machine.  \nOpen Terminal, and run `pip install avrng` to install the package.\n### With Git / Command Line\nThis method requires Git to be set up properly and configured on your machine.  \nOpen Terminal, Command Prompt, or Git Bash (or any terminal app), and run `git clone https://github.com/kewbish/avrng.git` to create a copy of this repo on your local machine.  \nYou should have a folder with the files. Proceed to installing dependencies.  \n### With GitHub.com UI\nNavigate to [https://github.com/kewbish/avrng](https://github.com/kewbish/avrng) and click the green `Clone or download` button. Choose to `Download ZIP`. Navigate to the folder downloaded, and unzip the project files. Proceed to installing dependencies.   \n### With GitHub Desktop\nThis method requires GitHub Desktop.  \nOpen GitHub Desktop. (Alternatively, click `Clone or download` and select `Open with Desktop`.)  \nClick the `Add` dropdown in the top-left, and select `Clone a repository`. Open the `URL` pane, and paste `https://github.com/kewbish/avrng` into the `Repository URL` field. Select a local path, and click `Clone`.  \nYou should now have a copy of the project files. Proceed to installing dependencies.   \n### Dependencies\nInstall the following via pip:\n- [Pydub](https://pypi.org/project/pydub/)\n- [Pyskein](https://pypi.org/project/pyskein/)\n- [Scenedetect](https://pypi.org/project/scenedetect/) (requires [numpy](https://numpy.org), [opencv2](https://github.com/opencv/opencv), and [ffmpeg](https://ffmpeg.org))\nAlternatively, run `pip install -r requirements.txt` with the prepackaged requirements file. \n\n## Documentation\nA GUI tool and a CLI are included.  \n### GUI Usage\nTo run the GUI, open Terminal (or similar) and run `python3 main.py` in the project root. Alternatively, run `main.py` in an IDE.  \nTo use the Tkinter GUI, input your desired values. The defaults are what I've tested to be the most consistent.  \nThe end button will open a file dialog. Navigate to your desired source .mp4.  \nThe output file will be generated in the parent directory of the selected video file.  \n### CLI Usage\nTo use the CLI, open Terminal (or similar) and run `python3 hash.py path\\to\\file.mp4 17 1`.  \nThe `return_all()` function wraps all the functionality of the AVRNG into one function.  \nIts three arguments are as follows:\n- path: complete path to source file\n- cs: length of individual output number\n- ai: interval to read data, in seconds\nSample command - `python hash.py \\files\\video.mp4 17 1`\nThis will generate a text file with individual numbers in `videos` directory.  \nThis format is also used when importing and using the `avrng` pip package.  \n### PIP Package\nAdd `import avrng.avrng as av` to the top of your Python file to add the package to your script.  \nUse the function as `av.return_all()` with the appropriate arguments.  \n(If you alternatively only want hashed lists of audio or video streams, you can access these through `av.handle_audio()` or `av.handle_video()` with the path and an integer as arguments.)\n\n## Comparison\nThe following comparison is between the AVRNG and the inbuilt Python random.randint() function.\nTest | AVRNG | Inbuilt Python | Comments\n--- | --- | --- | ---\nRuns Test | 0.38529 | 0.15147 | AVRNG 2.5 times more random\nEntropy / bit | 0.984360 | 0.982485 | AVRNG 0.19% more random\nChi square | 28742.64 | 365.44 | AVRNG 78.65 times more distributed\nArithmetic mean | 0.4265 | 0.4222 | AVRNG closer to target 0.5\nSerial correlation | 0.018786 | 0.019704 | AVRNG closer to zero, more unexpected\nSpeed | 22.47s | 0.03513s | Inbuilt Python 639.5 times more efficient\n\n## License\nReleased under the [GNU General Public License](https://www.gnu.org/licenses/gpl-3.0.en.html).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kewbish/avrng", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "avrng", "package_url": "https://pypi.org/project/avrng/", "platform": "", "project_url": "https://pypi.org/project/avrng/", "project_urls": {"Homepage": "https://github.com/kewbish/avrng"}, "release_url": "https://pypi.org/project/avrng/1.0/", "requires_dist": ["pydub (==0.23.1)", "pyskein (==1.0)", "scenedetect (==0.5.1.1)", "opencv-python (==4.1.2.30)"], "requires_python": ">=3.5", "summary": "An AVRNG implementation", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AVRNG - GVRSF 2020 submission</h1>\n<p>An audio-visual random number generator, built for the Vancouver District Science Fair 2020.<br>\nBuilt with Python 3.7, October 2019 - current.<br>\nThis PIP package is a mirror of the project at <a href=\"https://github.com/kewbish/avrng\" rel=\"nofollow\">the GitHub</a>. This distribution may lag behind development at the GitHub.</p>\n<h2>Applications</h2>\n<p>The AVRNG works well in a variety of application, mainly for security and surveillance-based solutions. One example use case is in an office, where security cameras can pass footage to the AVRNG and generate keys for the office's encryption algorithms. These keys are <em>truly random</em> due to the inherent randomness in sensor data when capturing footage, and to unpredictable compression and time-stamps.<br>\nTo find the key, an attacker would have to obtain the exact data source with the same compression and XOR rate, and hash at the exact time and parameters the program would be running at. This security makes the AVRNG a <a href=\"https://en.wikipedia.org/wiki/Hardware_random_number_generator\" rel=\"nofollow\">TRNG</a>.<br>\nA main inspiration was unique TRNG creations, such as the ones employed by <a href=\"https://blog.cloudflare.com/lavarand-in-production-the-nitty-gritty-technical-details/\" rel=\"nofollow\">Cloudflare</a>. A great video on the topic was created by <a href=\"https://www.youtube.com/watch?v=1cUUfMeOijg\" rel=\"nofollow\">Tom Scott</a>.</p>\n<h2>How it works</h2>\n<p>A video is split into audio and video streams. These streams are cut to smaller intervals.<br>\nFor the audio, it's split on the interval specified in running the AVRNG. This smaller .wav file is hashed with <a href=\"http://www.skein-hash.info/about\" rel=\"nofollow\">Skein</a>, a next-level hash and former SHA3 candidate.<br>\nThe video stream is cut with the <a href=\"https://pypi.org/project/scenedetect/\" rel=\"nofollow\">scenedetect</a> tool, splitting at every unique scene. This works especially well with security footage (main application) with many pauses or intervals of near-identical footage. These smaller videos are then split into individual JPEGS, due to the JPEG's compression algorithm that will preserve the inherent randomness in the camera's sensor data. These photos then are hashed with Skein, as above.<br>\nThese two data streams are intertwined together along with a time component, using XOR and bit addition algorithms. These outputs are written to a file, which can then be used as keys for cryptosecure applications.</p>\n<h2>Installation</h2>\n<h3>With PIP</h3>\n<p>This method requires PIP to be installed and set up on your machine.<br>\nOpen Terminal, and run <code>pip install avrng</code> to install the package.</p>\n<h3>With Git / Command Line</h3>\n<p>This method requires Git to be set up properly and configured on your machine.<br>\nOpen Terminal, Command Prompt, or Git Bash (or any terminal app), and run <code>git clone https://github.com/kewbish/avrng.git</code> to create a copy of this repo on your local machine.<br>\nYou should have a folder with the files. Proceed to installing dependencies.</p>\n<h3>With GitHub.com UI</h3>\n<p>Navigate to <a href=\"https://github.com/kewbish/avrng\" rel=\"nofollow\">https://github.com/kewbish/avrng</a> and click the green <code>Clone or download</code> button. Choose to <code>Download ZIP</code>. Navigate to the folder downloaded, and unzip the project files. Proceed to installing dependencies.</p>\n<h3>With GitHub Desktop</h3>\n<p>This method requires GitHub Desktop.<br>\nOpen GitHub Desktop. (Alternatively, click <code>Clone or download</code> and select <code>Open with Desktop</code>.)<br>\nClick the <code>Add</code> dropdown in the top-left, and select <code>Clone a repository</code>. Open the <code>URL</code> pane, and paste <code>https://github.com/kewbish/avrng</code> into the <code>Repository URL</code> field. Select a local path, and click <code>Clone</code>.<br>\nYou should now have a copy of the project files. Proceed to installing dependencies.</p>\n<h3>Dependencies</h3>\n<p>Install the following via pip:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/pydub/\" rel=\"nofollow\">Pydub</a></li>\n<li><a href=\"https://pypi.org/project/pyskein/\" rel=\"nofollow\">Pyskein</a></li>\n<li><a href=\"https://pypi.org/project/scenedetect/\" rel=\"nofollow\">Scenedetect</a> (requires <a href=\"https://numpy.org\" rel=\"nofollow\">numpy</a>, <a href=\"https://github.com/opencv/opencv\" rel=\"nofollow\">opencv2</a>, and <a href=\"https://ffmpeg.org\" rel=\"nofollow\">ffmpeg</a>)\nAlternatively, run <code>pip install -r requirements.txt</code> with the prepackaged requirements file.</li>\n</ul>\n<h2>Documentation</h2>\n<p>A GUI tool and a CLI are included.</p>\n<h3>GUI Usage</h3>\n<p>To run the GUI, open Terminal (or similar) and run <code>python3 main.py</code> in the project root. Alternatively, run <code>main.py</code> in an IDE.<br>\nTo use the Tkinter GUI, input your desired values. The defaults are what I've tested to be the most consistent.<br>\nThe end button will open a file dialog. Navigate to your desired source .mp4.<br>\nThe output file will be generated in the parent directory of the selected video file.</p>\n<h3>CLI Usage</h3>\n<p>To use the CLI, open Terminal (or similar) and run <code>python3 hash.py path\\to\\file.mp4 17 1</code>.<br>\nThe <code>return_all()</code> function wraps all the functionality of the AVRNG into one function.<br>\nIts three arguments are as follows:</p>\n<ul>\n<li>path: complete path to source file</li>\n<li>cs: length of individual output number</li>\n<li>ai: interval to read data, in seconds\nSample command - <code>python hash.py \\files\\video.mp4 17 1</code>\nThis will generate a text file with individual numbers in <code>videos</code> directory.<br>\nThis format is also used when importing and using the <code>avrng</code> pip package.</li>\n</ul>\n<h3>PIP Package</h3>\n<p>Add <code>import avrng.avrng as av</code> to the top of your Python file to add the package to your script.<br>\nUse the function as <code>av.return_all()</code> with the appropriate arguments.<br>\n(If you alternatively only want hashed lists of audio or video streams, you can access these through <code>av.handle_audio()</code> or <code>av.handle_video()</code> with the path and an integer as arguments.)</p>\n<h2>Comparison</h2>\n<p>The following comparison is between the AVRNG and the inbuilt Python random.randint() function.\nTest | AVRNG | Inbuilt Python | Comments\n--- | --- | --- | ---\nRuns Test | 0.38529 | 0.15147 | AVRNG 2.5 times more random\nEntropy / bit | 0.984360 | 0.982485 | AVRNG 0.19% more random\nChi square | 28742.64 | 365.44 | AVRNG 78.65 times more distributed\nArithmetic mean | 0.4265 | 0.4222 | AVRNG closer to target 0.5\nSerial correlation | 0.018786 | 0.019704 | AVRNG closer to zero, more unexpected\nSpeed | 22.47s | 0.03513s | Inbuilt Python 639.5 times more efficient</p>\n<h2>License</h2>\n<p>Released under the <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" rel=\"nofollow\">GNU General Public License</a>.</p>\n\n          </div>"}, "last_serial": 6724878, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "36919c0f4ba5255ecbf138032382d86f", "sha256": "c4a103cb2b60531bb84da37bc128281e33aa025e9d46d5dfd0d6945b4da8dbf6"}, "downloads": -1, "filename": "avrng-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36919c0f4ba5255ecbf138032382d86f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17629, "upload_time": "2020-02-17T01:21:04", "upload_time_iso_8601": "2020-02-17T01:21:04.862224Z", "url": "https://files.pythonhosted.org/packages/f3/db/da7c57e0a473420b8bc3e4fbbd18f5831459f3edc7ff043ee4a1807af76d/avrng-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e517bb75aeb9c12f6e40d7fb2e075c1", "sha256": "1a547723a9a3fddbe68a54396a92ab9c52f59de9739d4fe924f6d3eb410a833c"}, "downloads": -1, "filename": "avrng-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "8e517bb75aeb9c12f6e40d7fb2e075c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16130, "upload_time": "2020-02-16T03:41:12", "upload_time_iso_8601": "2020-02-16T03:41:12.724316Z", "url": "https://files.pythonhosted.org/packages/9c/5a/654df405a22e4d22d482f25f360bbc9affb574ac71a01c31c71fe84d1318/avrng-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29ec859e4ce87f9797b8efa296141cf9", "sha256": "d7129ccd4b56bdf09ff2218f5aa20ced39435546ba65d15d855913e12e3da799"}, "downloads": -1, "filename": "avrng-0.9.tar.gz", "has_sig": false, "md5_digest": "29ec859e4ce87f9797b8efa296141cf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3883, "upload_time": "2020-02-16T03:41:15", "upload_time_iso_8601": "2020-02-16T03:41:15.578911Z", "url": "https://files.pythonhosted.org/packages/df/89/e1bcecafb3af5ceee986bde383e0a21c9ba3324399567b07b0ca572d3bf8/avrng-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "30ed5056dcd93fdd92c088d0cf1c2cf8", "sha256": "58bbecd1cc6516c42bfeeaefdba7237f7225535465d9929ec911f40a8c635403"}, "downloads": -1, "filename": "avrng-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "30ed5056dcd93fdd92c088d0cf1c2cf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17627, "upload_time": "2020-02-17T01:25:16", "upload_time_iso_8601": "2020-02-17T01:25:16.174682Z", "url": "https://files.pythonhosted.org/packages/2b/55/369febb45b4df2b00cdb5757de37047cde368b5d3b22b384ca3a4ce05447/avrng-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dace17f24da98d62355a70a8770202d8", "sha256": "bd6105e8e86ec597aca46499820b11b9a35778dd914d57d4118c30db93642a08"}, "downloads": -1, "filename": "avrng-0.9.1.tar.gz", "has_sig": false, "md5_digest": "dace17f24da98d62355a70a8770202d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5116, "upload_time": "2020-02-17T01:25:17", "upload_time_iso_8601": "2020-02-17T01:25:17.736872Z", "url": "https://files.pythonhosted.org/packages/87/04/1eb0509c18837ae55fa1bd7cb1353c76f7eccb35edd80edd337b7899fd6b/avrng-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "7431d080ff0dc861279c0dfa5fa65b2d", "sha256": "a0b20a9a9e70356d89fe35cd08e17e98ec98a70dc55be739416dfd4dc033f296"}, "downloads": -1, "filename": "avrng-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7431d080ff0dc861279c0dfa5fa65b2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17793, "upload_time": "2020-02-18T01:22:05", "upload_time_iso_8601": "2020-02-18T01:22:05.973389Z", "url": "https://files.pythonhosted.org/packages/99/9c/1a986546ef8b1262886f7b97441c4951f1486197d857bc3c1434235066fd/avrng-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5aa9867ce0ce20fe4087784f7184293c", "sha256": "ea123bdffd53e3108f016fb025734bd5423b4da1b4c458727a766b20358c1e03"}, "downloads": -1, "filename": "avrng-0.9.2.tar.gz", "has_sig": false, "md5_digest": "5aa9867ce0ce20fe4087784f7184293c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5298, "upload_time": "2020-02-18T01:22:07", "upload_time_iso_8601": "2020-02-18T01:22:07.388635Z", "url": "https://files.pythonhosted.org/packages/5c/8b/1eb51bab044665818eaf810d152ba466bfab4d34aebc4b0ed43f3df854e2/avrng-0.9.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "094e6c382faeeb9a20ddc467e1346221", "sha256": "92f05f51c5d7fc84bac9a01af207775d2b3c12d2e04a663fbc349450d2176a9a"}, "downloads": -1, "filename": "avrng-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "094e6c382faeeb9a20ddc467e1346221", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17761, "upload_time": "2020-02-29T16:07:53", "upload_time_iso_8601": "2020-02-29T16:07:53.996444Z", "url": "https://files.pythonhosted.org/packages/dc/16/338ef67344eae33c1bbcdfe6e9ad1ddd46e7a385440a5b372736bba6ccde/avrng-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72e8bdd8365f0387e4162c48d2a953f7", "sha256": "67af7420d8754bfa16c00432ddcd64be39ea63cb95fed1a1f9a69611eb9b49d0"}, "downloads": -1, "filename": "avrng-1.0.tar.gz", "has_sig": false, "md5_digest": "72e8bdd8365f0387e4162c48d2a953f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5291, "upload_time": "2020-02-29T16:07:55", "upload_time_iso_8601": "2020-02-29T16:07:55.164322Z", "url": "https://files.pythonhosted.org/packages/1c/78/8e27bd1a6e13ff6b06123fe87b3d35a6c348884c7a3df41e1089a4e608b3/avrng-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "094e6c382faeeb9a20ddc467e1346221", "sha256": "92f05f51c5d7fc84bac9a01af207775d2b3c12d2e04a663fbc349450d2176a9a"}, "downloads": -1, "filename": "avrng-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "094e6c382faeeb9a20ddc467e1346221", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17761, "upload_time": "2020-02-29T16:07:53", "upload_time_iso_8601": "2020-02-29T16:07:53.996444Z", "url": "https://files.pythonhosted.org/packages/dc/16/338ef67344eae33c1bbcdfe6e9ad1ddd46e7a385440a5b372736bba6ccde/avrng-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72e8bdd8365f0387e4162c48d2a953f7", "sha256": "67af7420d8754bfa16c00432ddcd64be39ea63cb95fed1a1f9a69611eb9b49d0"}, "downloads": -1, "filename": "avrng-1.0.tar.gz", "has_sig": false, "md5_digest": "72e8bdd8365f0387e4162c48d2a953f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5291, "upload_time": "2020-02-29T16:07:55", "upload_time_iso_8601": "2020-02-29T16:07:55.164322Z", "url": "https://files.pythonhosted.org/packages/1c/78/8e27bd1a6e13ff6b06123fe87b3d35a6c348884c7a3df41e1089a4e608b3/avrng-1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:02 2020"}