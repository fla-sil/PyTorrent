{"info": {"author": "Paul Martin", "author_email": "paulmartinforwork@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "REPOSITORY HAS BEEN ARCHIVED AND IS NO LONGER MAINTAINED FOR NOW\n\n# Pycryptotools, Python library for Crypto coins signatures and transactions\n\nThis is a fork of Vitalik Buterin's original [pybitcointools](https://github.com/vbuterin/pybitcointools) library.\n\nInstallation:\n\n```bash\npip install cryptos\n```\n\nLibrary now supports making and pushing raw transactions for:\n\n* Bitcoin mainnet\n* Bitcoin testnet \n* Bitcoin Cash mainnet (with replay protection)\n* Bitcoin Cash testnet (with replay protection)\n* Litecoin mainnet\n* Litecoin testnet\n* Dash mainnet\n* Dash testnet\n* Dogecoin mainnet\n* Bitcoin Gold mainnet (with replay protection)\n\nTransaction broadcast has been tested for all of these.\n\nFor the following, local operations such as making and signing transactions are supported but explorer dependant\noperations (unspent, pushtx, etc.) are not yet supported.:\n\n* Bitcoin Gold testnet\n\nSegregrated Witness transactions also supported for:\n* Bitcoin mainnet\n* Bitcoin testnet\n* Litecoin mainnet\n* Litecoin testnet\n\nHere are the first mainnet segwit transactions made with this library:\n\nBitcoin: https://blockchain.info/tx/9f3bd4fa14e424abd5623ba98877e33cfee3e7bd6f9f71d7a39e402501458c81\n\nLitecoin: https://live.blockcypher.com/ltc/tx/b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989/\nhttps://live.blockcypher.com/ltc/tx/3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000/\n\nAim is to provide a simple, class-based API which makes switching between different coins and mainnet and testnet, and adding new coins, all very easy.\n\nRoadmap:\n* Replaceable transactions\n* Change from explorers to electrumx servers\n* Correct fee detection algorithm\n* Extend wallets to make transactions\n* Read the docs page\n* E-commerce tools (exchange rates, short-time invoices)\n* Desktop GUI for easy creation, signing and broadcasting of raw transactions\n* Multi-crypto wallet GUI\n\n### Advantages:\n\n* Methods have a simple interface, inputting and outputting in standard formats\n* Classes for different coins with a common interface\n* Many functions can be taken out and used individually\n* Supports binary, hex and base58\n* Transaction deserialization format almost compatible with BitcoinJS\n* Electrum and BIP0032 support\n* Make and publish a transaction all in a single command line instruction with full control\n* Includes non-bitcoin-specific conversion and JSON utilities\n\n### Disadvantages:\n\n* Not a full node, has no idea what blocks are\n* Relies on centralized explorers for blockchain operations\n\n### Example usage - the long way (best way to learn :) ):\n\nWARNING: While it's fun to mess around with this on the testnet, do not do the following procedure on the mainnet \nunless you really know what you are doing. Any value in the inputs not included in the ouputs will be lost.\nSo if the total inputs value is 1 BTC, and the total outputs amount to 0.6 BTC, 0.4 BTC will be given to the \nminers as a fee. The faster way, listed later in the README, ensures the difference between\ninputs and outputs is sent as change back to the sender (except for a small fee).\nIf in doubt, before broadcasting a transaction, visit https://live.blockcypher.com/btc/decodetx/ and decode the raw tx\nand make sure it looks right. If you aren't familiar with how Bitcoin transactions work, you should run through\n this procedure a few times on the testnet before developing for mainnet.\n\nOTHER WARNING: Default fees for Bitcoin mainnet are probably too low throughout this library. \nThis can cause coins to be lost for a period of time until they are finally confirmed by a miner. Hopefully, some kind\nof \"correct fee\" detection algorithm will be implemented soon but for now it is recommended to think about and set an \nappropriate fee when making transactions. There are many different ways of making a transaction. Whichever method you\nchoose, make sure you understand how to set the correct fee. Here's a link about for information about the current recommended fees:\n\nhttps://bitcoinfees.earn.com/\n\n    > from cryptos import *\n    > c = Bitcoin(testnet=True)\n    > priv = sha256('a big long brainwallet password')\n    > priv\n    '89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n    > pub = c.privtopub(priv)\n    > pub\n    '041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f'\n    > addr = c.pubtoaddr(pub)\n    > addr\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > inputs = c.unspent(addr)\n    > inputs\n    [{'output': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508:0', 'value': 180000000}, {'output': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38:0', 'value': 90000000}]\n    > outs = [{'value': 269845600, 'address': '2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF'}, {'value': 100000, 'address': 'mrvHv6ggk5gFMatuJtBKAzktTU1N3MYdu2'}]\n    > tx = c.mktx(inputs,outs)\n    > tx\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx2 = c.sign(tx,0,priv)\n    > tx2\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx3 = c.sign(tx2,1,priv)\n    > tx3\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx4 = c.serialize(tx)\n    > tx4\n    '01000000020875f07948460160db60ac4a1dc648b8c5abfe4e4ffd71637608f1af0a0ae13b000000008b483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff38aa1ff4695d937db4677085d9fdd7fe30992b05b56e416730fda4e10498ce51000000008b483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02608415100000000017a914a9974100aeee974a20cda9a2f545704a0ab54fdc87a0860100000000001976a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac00000000'\n    > c.pushtx(tx4)\n    {'status': 'success', 'data': {'network': 'BTCTEST', 'txid': '00af7b794355aa4ea5851a792713934b524b820cf7f20e2a0e01ab61910b5299'}}\n\n### Faster way\n\nTo send 12 DASH from addr belonging to privkey 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678 \nto address yd8Q7MwTDe9yJdeMx1YSSYS4wdxQ2HDqTg, with change returned to the sender address:\n\n    > from cryptos import *\n    > dash = Dash(testnet=True)\n    > dash.send(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"yd8Q7MwTDe9yJdeMx1YSSYS4wdxQ2HDqTg\", 1200000000)\n    {'status': 'success', 'data': {'txid': '6a510a129bf1e229e99c3eede516d3bde8bdccf859199937a98eaab2ce1cd7ab', 'network': 'DASHTEST'}}\n\nOr if you prefer to verify the tx (for example, with Blockcypher) you can break it into two steps:\n\n    > from cryptos import *\n    > dash = Dash()\n    > tx = dash.preparesignedtx(priv, \"Xhcmzs5wKECBiWwSEsTZu8wNonguH5poaz\", 9800000-20000, fee=20000)\n    > tx\n    '010000000194f2f955627dfd549f213a70d65dcd5550c0b14a484d38b6ae47fe7a8896ca41000000008b483045022100b125b1f4848c145193f70b915b0074539d90fd74c2e75492169f06927acafa39022025a009711a354a7d84e19f234dfb5d20e155b64acad40941670e634c1100101a01410437b81f8f1376a87556380ad9f3a6b7f642754b3497ce42518f8dbd39bfedea24d897ae5d8d1dd41c04f55700ed6f3b7cee99df5aed74f98a54cbc576d75c0b9fffffffff01203b9500000000001976a9144c0404140e6ad8d04bdf625888bf6dfcc20fa12d88ac00000000'\n    > dash.pushtx(tx)\n    {'status': 'success', 'data': {'txid': '0d889f6a268340c8fd30cdc6567eb588765e911fdd1fb0aac870dc3125ffde76', 'network': 'DASH'}}\n\nAnother example with Bitcoin Cash testnet:\n\n    > from cryptos import *\n    > crypto = BitcoinCash(testnet=True)\n    > tx = crypto.preparesignedtx(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"mgRoeWs2CeCEuqQmNfhJjnpX8YvtPACmCX\", 967916800)\n    > tx\n    '010000000144ea7b41df09cee54c43f817dc11fd4d88c9b721b4c13b588f6a764eab78f692000000008b4830450221008efa819db89f714dbe0a19a7eb605d03259f4755a0f12876e9dddf477e1867b8022072bc76d120e92668f4765b5d694aee4a3cafd6cd4aaa8d5ebf88c3f821c81d9c4141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02003db139000000001976a91409fed3e08e624b23dbbacc77f7b2a39998351a6888acf046df07000000001976a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac00000000'\n    > crypto.pushtx(tx)\n    {'status': 'success', 'data': {'txid': 'd8b130183824d0001d3bc669b31e798e2654868a7fda743aaf35d757d89db0eb', 'network': 'tbcc'}}\n    \n### Segregated Witness - the long way\nThe same warnings about testnet practice and fees as discussed earlier applies here.\n\nTo create a segwit transaction, generate a pay to witness script hash (P2WPKH) \naddress and mark all the Segwit UTXOs with segwit=True.\n\n    > from cryptos import *\n    > c = Litecoin(testnet=True)\n    > priv = sha256('a big long brainwallet password')\n    > priv\n    '89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n    > addr = c.privtop2w(priv)\n    > addr\n    '2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'\n    > inputs = c.unspent(addr)\n    > inputs\n    [{'output': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a:0', 'value': 100000000}]\n    > inputs[0]['segwit']=True\n    > inputs\n    [{'output': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a:0', 'value': 100000000, 'segwit': True}]\n    > outs = [{'value': 79956800, 'address': 'mxYcACPJWAMMkXu7S9SM8npicFWehpYCWx'}, {'value': 19989200, 'address': '2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'}]\n    > tx = c.mktx(inputs,outs)\n    > tx\n    {'locktime': 0, 'version': 1, 'ins': [{'script': '', 'sequence': 4294967295, 'outpoint': {'hash': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a', 'index': 0}, 'amount': 100000000, 'segwit': True}], 'outs': [{'script': '76a914baca2979689786ba311edcfc04d9ad95d393679488ac', 'value': 79956800}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 19989200}], 'marker': 0, 'flag': 1, 'witness': []}\n    > tx2 = c.sign(tx,0,priv)\n    > tx2\n    {'locktime': 0, 'version': 1, 'ins': [{'script': '160014804aff26594cc36c0ac89e95895ab9bdd0c540ef', 'sequence': 4294967295, 'outpoint': {'hash': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a', 'index': 0}, 'amount': 100000000, 'segwit': True}], 'outs': [{'script': '76a914baca2979689786ba311edcfc04d9ad95d393679488ac', 'value': 79956800}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 19989200}], 'marker': 0, 'flag': 1, 'witness': [{'number': 2, 'scriptCode': '47304402201632cb84a0aed4934df83fbc3cd2682f920eef37f76aa64d477702dd59633c900220198cfe15c28b26247c8e49974b4fda825ae16441112f13e754322964a9f24ec80121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc'}]}\n    > tx3 = serialize(tx)\n    > tx3\n    '010000000001018ae8cbcc03151997368c95f4d5940bb8842f72b07660a1a5d3e7b154639d18630000000017160014804aff26594cc36c0ac89e95895ab9bdd0c540efffffffff02400bc404000000001976a914baca2979689786ba311edcfc04d9ad95d393679488acd00231010000000017a9141039471d8d44f3693cd34d1b9d69fd957799cf30870247304402201632cb84a0aed4934df83fbc3cd2682f920eef37f76aa64d477702dd59633c900220198cfe15c28b26247c8e49974b4fda825ae16441112f13e754322964a9f24ec80121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc00000000'\n    > c.pushtx(tx3)\n    {'status': 'success', 'data': {'network': 'LTCTEST', 'txid': '51d5be05d0a35ef5a8ff5f43855ea59e8361874aff1039d6cf5d9a1f93ae1042'}}\n\n\nIt's also possible to mix segwit inputs with non-segwit inputs. Only one input needs to be marked as segwit \nto create a segwit transaction.\n\n### Segregated Witness - Faster Way:\n\nSend 0.23486583 LTC to LPZd11JyAd6fJh5ZBMcmu6qczV14CZnz55 from segwit address 3P1bEPk5v4CUhvX9VqDuxqJGnTutt9czZb, \nreturning change to LchaMS51XFYmks3fJLAyuSeYSbiyByPLUD:\n \n    >from cryptos import *\n    >l = Litecoin()\n    l.send(\"<privkey>\", \"LNM9Hpc6EFd7SsKkPU6ATLJNdXSNPnNdqs\", 23486583, fee=20000, change_addr=\"LchaMS51XFYmks3fJLAyuSeYSbiyByPLUD\", segwit=True)\n    {'status': 'success', 'data': {'network': 'LTC', 'txid': '3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000'}}\n\nIt's also possible to provide the send address in addition to the private key in which case segwit will be \nauto-detected, so no need to know in advance if the address is segwit or not:\n    \n    >from cryptos import *\n    >c = Bitcoin()\n    >c.send('<privkey>', '1CBFPfNotcVcWg26WdhfnoDDvZqzuBxKDb', 88036480, addr=\"3AGe5CkW5CKFAgKpQE82VSWkEjoxfDxMxQ\")\n    {'status': 'success', 'data': {'network': 'LTC', 'txid': 'b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989'}}\n\nIt's also possible to provide the send address in addition to the private key in which case segwit will be \nauto-detected, so no need to know in advance if the address is segwit or not:\n    \n    >from cryptos import *\n    >c = Bitcoin()\n    >c.send('<privkey>', '1CBFPfNotcVcWg26WdhfnoDDvZqzuBxKDb', 88036480, addr=\"3AGe5CkW5CKFAgKpQE82VSWkEjoxfDxMxQ\")\n    {'status': 'success', 'data': {'network': 'LTC', 'txid': 'b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989'}}\n    \n### 2-of-3 MultiSig Transaction example:\n    > from cryptos import *\n    > coin = Bitcoin(testnet=True)\n    > publickeys = ['02e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609', '0391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0', '0415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb']\n    > script, address = coin.mk_multsig_address(publickeys, 2)\n    > script\n    '522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53ae'\n    > address\n    '2ND6ptW19yaFEmBa5LtEDzjKc2rSsYyUvqA'\n    > tx = coin.preparetx(address, \"myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW\", 1100000, 50000)\n    > for i in range(0, len(tx['ins'])):\n        sig1 = coin.multisign(tx, i, script, \"cUdNKzomacP2631fa5Q4yHv2fADc8Ueymr5Z5NUSJjVM13igcVJk\")\n        sig3 = coin.multisign(tx, i, script, \"cMrziExc6iMV8vvAML8QX9hGDP8zNhcsKbdS9BqrRa1b4mhKvK6f\")\n        tx = apply_multisignatures(tx, i, script, sig1, sig3)\n    > tx\n    '0100000001e62c0b5434108607f52856bfbcf5093363fbd4789141a661a4c6c8042769ed2001000000fd1d0100483045022100dfc75916f6bb5c5b72a45dea44dbc45b47ba90912efb84680a373acadb3b1212022022dbbd66e4871624609d875bdb592d11335eb4ec49c7b87bb0b8bc76f72f80f30147304402204c38cab196ec0e82a9f65ecba70a0dbf73f49e5886e1000b9bc52894e28fa5c9022007bff3f90bcece19036625806d4d1951a03c256627163f1ac4e76a6ee8eae072014c89522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53aeffffffff02e0c81000000000001976a914c384950342cb6f8df55175b48586838b03130fad88ac301224030000000017a914d9cbe7c2c507c306f4872cf965cbb4fe51b621998700000000'\n    > coin.pushtx(tx)\n    {'status': 'success', 'data': {'txid': 'b64e19311e3aa197063e03657679e2974e04c02c5b651c4e8d55f428490ab75f', 'network': 'BTCTEST'}}\n\n\n### Supported coins\n\n    > from cryptos import *\n    > priv = sha256('a big long brainwallet password')\n    > b = Bitcoin()\n    > b.privtoaddr(priv)\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n    > b = Bitcoin(testnet=True)\n    > b.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > l = Litecoin()\n    > l.privtoaddr(priv)\n    'Lb1UNkrYrQkTFZ5xTgpta61MAUTdUq7iJ1'\n    > l = Litecoin(testnet=True)\n    > l.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > c = BitcoinCash()\n    > c.privtoaddr(priv)\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n    > c = BitcoinCash(testnet=True)\n    > c.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > d = Dash()\n    > d.privtoaddr(priv)\n    'XrUMwoCcjTiz9gzP9S9p9bdNnbg3MvAB1F'\n    > d = Dash(testnet=True)\n    > d.privtoaddr(priv)\n    'yc6xxkH4B1P4VRuviHUDBd3j4tAQpy4fzn'\n    > d = Doge()\n    > d.privtoaddr(priv)\n    'DLvceoVN5AQgXkaQ28q9qq7BqPpefFRp4E'\n    > bg = BitcinGold()\n    > bg.privtoaddr(priv)\n    'GZdSXfsfkc7h5Dh6DVVhiqHUsRtCMQ9fxG'\n    > bg = BitcoinGold(legacy=True)\n    > bg.privtoaddr(priv)\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n    > bg = BitcoinGold(testnet=True)\n    > bg.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    \n\n### BIP39-BIP44 Standard Wallets:\n\nAims to be compatible with https://iancoleman.io/bip39/. Good choice for supporting different coins and networks from \nthe same wallet words. Also compatible with electrum when bip39 option is selected.\n    \n    > from cryptos import *\n    > words = entropy_to_words(os.urandom(16))\n    > words\n    'practice display use aisle armor salon glue okay sphere rather belt mansion'  \n    > keystore.bip39_is_checksum_valid(words)\n    (True, True)\n    > coin = Bitcoin()\n    > wallet = coin.wallet(words)\n    > wallet.keystore.root_derivation\n    \"m/44'/0'/0'\"\n    > wallet.keystore.xprv      #Account Extended Private Key\n    'xprv9y1M42LhHxTuoQbCuySz4Ek6EB3guE4CiXDXhHQnR7LwgpUV7AxQVm7D4HpUWRStwUXFepQRz7av2iaAXXYoizT9JoqWE6qffxNdiMxFQtc'\n    > wallet.keystore.xpub      # Account Extended Public Key\n    'xpub6BzhTXsb8L2D1tfg1zyzRNgpnCtBJgn45k98VfpPySsvZcodeiGf3ZRguZLoS6VwEQ4iZ7Y4bq5A5eqyooyc4jC9beFTB3mmxrGwjRLa3pm'\n    > addr1 = wallet.new_receiving_address()\n    > addr1\n    '18q3EiCiKd5vydnaVwWEpAFyzfL2ftAZ1L'\n    > wallet.privkey(addr1)\n    'L4cKz3epcM3CAmwkSwJwZ2c4q5ukmSVWCrE9PqE46ybU3XyzfTYx'\n    > addr2 = wallet.new_change_address()\n    > addr2\n    '1BgkpwEDrTbCNduyR97EpW4zvFhEzWsyvi'\n    > wallet.privkey(addr2)\n    'L5Xmbnsen2cN36WxbuHkAixBmuJ8b3GZPmLtaRPf66p4gfnqHDqi'\n    > addr3 = wallet.new_change_address()\n    > addr3\n    '1KjxFsDP9SXAmKKD4ZgSep5kYaYgAGK3P9'\n    > priv3 = wallet.privkey(addr3)\n    > priv3\n    'L1ktR1kifTXLXoroLZiB3AF9UtKLRW2FmYnnR7VbPZBYkscgRkyn'\n    > assert coin.privtoaddr(priv3) == addr3\n    True\n    \nDash example:\n\n    > from cryptos import *\n    > words = 'practice display use aisle armor salon glue okay sphere rather belt mansion'  \n    > coin = Dash()\n    > wallet = coin.wallet(words)\n    > wallet.keystore.root_derivation\n    \"m/44'/5'/0'\"\n    > wallet.keystore.xprv      #Account Extended Private Key\n    'xprv9yiTHjM4MPNQndsxkrvE2QgF36nvutGt3e9k5DjkjfAnNbqGm1wL77XV2xHiwnUfwcgAZUWkdpEnxRWELTrgXDVhvntNFwme1CqCgm1a91f'\n    > wallet.keystore.xpub      # Account Extended Public Key\n    'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\n    > addr1 = wallet.new_receiving_address()\n    > addr1\n    'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\n    > wallet.privkey(addr1)\n    'XDbSZeVzBiHanwrSU5yripFd8Lq5tnrjxgvbaksNPhAExbS29aAa'\n    > addr2 = wallet.new_change_address()\n    > addr2\n    'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\n    > wallet.privkey(addr2)\n    'XHwHKxVfhzPEGZGGfQ9uwKK2xQjavF2yNUkq7FGXFA6SyZv4jge1'\n    > addr3 = wallet.new_change_address()\n    > addr3\n    'XfZwJaFiBx4qLqnQydvqGyWDPciAtjFmgn'\n    > priv3 = wallet.privkey(addr3)\n    > priv3\n    'XCNac8eQE642wWKaxnWHLa1GW1Y1uppvT5uda3LYVXAJZAAdR1Fx'\n    > assert coin.privtoaddr(priv3) == addr3\n    True\n    \n### BIP39-BIP49 Segwit Wallets:\n\n    > from cryptos import *\n    > words = entropy_to_words(os.urandom(20))\n    > words\n    'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack' \n    > keystore.bip39_is_checksum_valid(words)\n    (True, True)\n    > coin = Bitcoin()\n    > wallet = coin.p2wpkh_p2sh_wallet(words)\n    > wallet.keystore.root_derivation\n    \"m/49'/0'/0'\"\n    > wallet.keystore.xprv      #Account Extended Private Key\n    'yprvAHoU8z6164hTNdwpArPgn2bdNExmUu9HwxeyhUok8pLDNQSCzYo8rvD6tFvMKk4EQXF2UGzRea5FBHjrtcuYmuBB7Z6EoznKCPeUwXaZduB'\n    > wallet.keystore.xpub      # Account Extended Public Key\n    'ypub6WnpYVctvSFkb82HGsvh9AYMvGoFtMs9KBaaVsDMh9sCFCmMY67PQiXajW1FQq7AKsgvWGSrmZ82rquUpwcKR6Ey1sdMdeQWvgCKvABjWy8'\n    > addr1 = wallet.new_receiving_address()\n    > addr1\n    '38yA1L6u6NiADrafrqZKDt1fTRHpGC3E7g'\n    > wallet.privkey(addr1)\n    'Ky13njnYGrj5jowjUarqcmaRCG37zSwqRJkTj296cQsSvFtsV5a5'\n    > addr2 = wallet.new_change_address()\n    > addr2\n    '3B5f8vVBRTAh2krbd4PiCtpyn7LhFJBDdV'\n    > wallet.privkey(addr2)\n    'KzCNhiuvwQ1T6hXL21Act86HacauJGe1c8ttECqx1Fai6tPc1bEG'\n    > addr3 = wallet.new_change_address()\n    > addr3\n    '3NvrTctHm6dQc6G2p3XYciWH8H6Lfcz9Jc'\n    > wallet.privkey(addr3)\n    'KwdZhDopz3UVNW3Qso5UiyGkiDmayRZmAZdfAojvGsoP7da7HueX'\n    \n### BIP39-BIP84 New Segwit Wallets:\n\n    > from cryptos import *\n    > words = 'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack'\n    > coin = Bitcoin()\n    > wallet = coin.p2wpkh_wallet(words)\n    > wallet.keystore.root_derivation\n    \"m/84'/0'/0'\n    > wallet.keystore.xprv      #Account Extended Private Key\n    'zprvAcSKXVdgJHh5vyEeC6HSVScUCHxrKEWkkFSE2YsLpTborr4y2rHMrmr66yvxkGVqiiwwUCqUVkPB7o5ThnK3Dybi5PEywikXbNKQcHNMYPd'\n    > wallet.keystore.xpub      # Account Extended Public Key\n    'zpub6qRfw1Aa8fFP9TK7J7pSraZCkKoLihEc7UMppwGxNo8njeQ7aPbcQaAZxFtnjCj9XveSJEnwV88YPyXXUCr3yRSSAKzibVCQB7AudUQn6Qg'\n    > addr1 = wallet.new_receiving_address()\n    > addr1\n    'bc1qkh6wwkyhfceuxq236pc9gtv2agfqnelzh5m94f'\n    > wallet.privkey(addr1)\n    'Kwnaq7cvD4CAnTcppou6wpUpMFx5yZRqkpZcy6bBvPVKp2FQzJNf'\n    > addr2 = wallet.new_change_address()\n    > addr2\n    'bc1qj3vc5ft8nuka447z7ecujksszq6cm2r8p750n9'\n    > wallet.privkey(addr2)\n    'L1QjmcLmeR5tbH62WxKoSdZBBHn69PuQSnLo2LaimnztsDANMP5M'\n    > addr3 = wallet.new_change_address()\n    > addr3\n    'bc1qft00enx8c6unn00pmfdgq36ftd0u0q4lk5ajpy'\n    > wallet.privkey(addr3)\n    'Kx91EteCnRmUPr8eibiEsAcFDyKJ2z9uAwGUQfMVw5ABQx7QyVgg'\n\n### Electrum wallets\nThese aim to be compatible with the default Electrum wallet seed style. They do not have different derivation paths for different coins. \nNo checks have been made against any non-Bitcoin Electum wallet (e.g. Electrum Litecoin, Electron Cash)\nAt this moment, there is no support generating the seed words Electrum requires (which contains versioning) so seed words need to be copied from Electrum.\nElectrum versioning allows for auto-detection of wallet type, .e.g standard or segwit.\n\n    > from cryptos import *\n    > seed_words = 'bitter grass shiver impose acquire brush forget axis eager alone wine silver'\n    > wallet = Bitcoin().electrum_wallet(seed_words)\n    > wallet.keystore.xtype\n    'p2wpkh'\n    > wallet.keystore.root_derivation\n    \"m/0'/\"\n    > wallet.keystore.xprv\n    'zprvAZswDvNeJeha8qZ8g7efN3FXYVJLaEUsE9TW6qXDEbVe74AZ75c2sZFZXPNFzxnhChDQ89oC8C5AjWwHmH1HeRKE1c4kKBQAmjUDdKDUZw2'\n    > wallet.keystore.xpub\n    'zpub6nsHdRuY92FsMKdbn9BfjBCG6X8pyhCibNP6uDvpnw2cyrVhecvHRMa3Ne8kdJZxjxgwnpbHLkcR4bfnhHy6auHPJyDTQ3kianeuVLdkCYQ'\n    > addr1 = wallet.new_receiving_address()\n    > addr1\n    'bc1q3g5tmkmlvxryhh843v4dz026avatc0zzr6h3af'\n    > wallet.privkey(addr1)\n    'L9fSXYNxYWHJWUqrQ6yhZCAJXq6XsfvcJ1Y2EnMAZfLLRNVQswQj'\n    > addr2 = wallet.new_change_address()\n    > addr2\n    'bc1qdy94n2q5qcp0kg7v9yzwe6wvfkhnvyzje7nx2p'\n    > wallet.privkey(addr2)\n    'L8rPGyfyzdLLEzxuBeC87Jvpp8FKxwrRtmkZ2PkRmRjqxNF8TVwG'\n    > addr3 = wallet.new_change_address()\n    > addr3\n    'bc1q6xwxcw6m9ga35687tnu5tstmsvmzjwdnzktemv'\n    > wallet.privkey(addr3)\n    'L7NeR6r9yU2n4zddxTCUpKYmzugYuouyLsCZR9naTqkBW6sjpxDM'\n\n### Watch wallets\n\nFor security reasons the seed and xprv should ideally be held in cold storage only. If a web application needs to be \nable to provide addresses on demand, the solution is to use a watch wallet, generated from the xpub.\n\nFor example, let's take the Dash xpub from a previous example:\n\n    > from cryptos import *\n    > coin = Dash()\n    > xpub = 'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\n    > wallet = coin.watch_wallet(xpub)\n    > wallet.is_watching_only\n    True\n    > wallet.new_receiving_address()\n    'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\n    > wallet.new_change_address()\n    'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\n\nFull list of wallet methods:\n\n* wallet -> BIP 39 Standard\n* watch_wallet -> BIP 39 Standard, watch-only\n* p2wpkh_p2sh_wallet -> BIP 39 Segwit P2SH addresses, beginning with 3 for Bitcoin mainnet\n* watch_p2wpkh_p2sh_wallet -> BIP 39 Segwit P2SH addresses, watch-only\n* p2wpkh_wallet -> BIP 39 New Segwit Addresses, beginning with 'bc' for Bitcoin mainnet\n* watch_p2wpkh_wallet -> BIP New Segwit Address, watch-only\n* electrum_wallet -> detects p2kh or p2wpkh based on seed\n* watch_electrum_wallet -> Watch electrum standard wallet\n* watch_electrum_p2wpkh_wallet -> Watch electrum new segwit wallet\n\n### Old style Electrum words wallet:\n    > import os\n    > from cryptos import *\n    > words = entropy_to_words(os.urandom(16))\n    > words\n    'float skirt road remind fire antique vendor select senior latin small glide'\n    > seed = mnemonic_to_seed(words)\n    > seed\n    b'\\xb7Z\\x9b\\x9b\\x9c\\x1bq\\x81\\x1b\\xdc\\x98\\x1c\\xbc\\xb8\\xbb\\x130\\xea,\\xda\\x14\\xeb\\x9bF\\xafu\\x88\\xc2\\xf9\\xfc\\x7f\\xd0\\xb0?\\x9d\\xf3\\xa7$0Tx\\xd3\\xb7\\x82\\x87U\\xe7\\xcc\\xdd\\x16\\xddd\\xbf'T\\t_\\xdc R!x\\t'\n    > electrum_privkey(seed, 0)\n    '5a37812b3057e44636c6e07023e16a8669e12a4365dfabbcb376ed272081d522'\n    > electrum_privkey(seed, 300, 0)\n    '04cf414f200cd090239f2116d90608a74eae34ae21103ca9eef7bd9579e48bed'\n    > electrum_privkey(seed, 0, 1)      #Change address\n    '9ca3631f813a6f81b70fbfc4384122bfe6fb159e6f7aea2811fe968c2a39d42a'\n\n### The cryptotool command line interface:\n\n    cryptotool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\n    xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n\n    cryptotool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\n    xprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw \n\n    cryptotool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n    xpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF\n\nThe -s option lets you read arguments from the command line\n\n    cryptotool sha256 'some big long brainwallet password' | pybtctool -s privtoaddr | pybtctool -s history\n    [{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\n    cryptotool random_electrum_seed | pybtctool -s electrum_privkey 0 0\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n\nThe -b option lets you read binary data as an argument\n\n    cryptotool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\n    a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a\n\nThe -j option lets you read json from the command line (-J to split a json list into multiple arguments)\n\n    cryptotool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\n    0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000\n\nFun stuff with json:\n\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\n    625216206372\n\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\n    6198\n\nTo use the testnet you can add --testnet:\n\n    cryptotool unspent 2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF --testnet\n    [{\"output\": \"209e5caf8997a3caed4dce0399804ad7fa50c70f866bb7118a42c79de1b76efc:1\", \"value\": 120000000}, {\"output\": \"79f38b3e730eea0e44b5a2e645f0979\n    2d9f8732a823079ba4778110657cbe7b2:0\", \"value\": 100000000}, {\"output\": \"99d88509d5f0e298bdb6883161c64c7f54444519ce28a0ef3d5942ff4ff7a924:0\", \"value\n    \": 82211600}, {\"output\": \"80acca12cf4b3b562b583f1dc7e43fff936e432a7ed4b16ac3cd10024820d027:0\", \"value\": 192470000}, {\"output\": \"3e5a3fa342c767d524b653aec51f3efe2122644c57340fbf5f79c75d1911ad35:0\", \"value\": 10000000}]\n\nOr the --coin option to use a coin other than bitcoin (bch, btc, dash, doge or ltc)\n\n    cryptotool unspent LV3VLesnCi3p3zf26Y86kH2FZxfQq2RjrA --coin ltc\n    [{\"output\": \"42bfe7376410696e260b2198f484f5df4aa6c744465940f9922ac9f8589670a4:0\", \"value\": 14282660}]\n\n    cryptotool unspent myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW --coin ltc --testnet\n    [{\"output\": \"68f9c662503715a3baf29fe4b07c056b0bf6654dbdd9d5393f4d6a18225d0ff3:0\", \"value\": 16333531}, {\"output\": \"aa40041a1fcdb952d6a38594a27529f890d17d715fd54b6914cd6709fa94ca67:0\", \"value\": 100000000}, {\"output\": \"3b72bae956d27ab0ad309808ab76beaf203109f423e533fd7c40f1201672f598:1\", \"value\": 164712303}]\n\nMake and broadcast a transaction on the Bitcoin Cash testnet:\n\n    cryptotool send 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678 mgRoeWs2CeCEuqQmNfhJjnpX8YvtPACmCX 999950000 --fee 50000 --coin bch --testnet\n    {\"status\": \"success\", \"data\": {\"txid\": \"caae4c059ac07827047237560ff44f97c940600f8f0a1e3392f4bcaf91e38c5c\", \"network\": \"tbcc\"}}\n\nThe arguments are the private key of the sender, the receiver's address and the fee (default 10000). Change will be returned to the sender. \n\n### Listing of main coin-specific methods:\n\n* privtopub            : (privkey) -> pubkey\n* pubtoaddr            : (pubkey) -> address\n* privtoaddr           : (privkey) -> address\n* sign                 : (txobj, i, privkey) -> create digital signature of tx with privkey and add to input i\n* signall              : (txobj, privkey) -> create digital signature of tx with privkey for all inputs\n* history              : (address) -> tx history and balance of an address\n* unspent              : (address) -> unspent outputs for an addresses\n* pushtx               : (hex or bin tx) -> push a transaction to the blockchain\n* fetchtx              : (txhash) -> fetch a tx from the blockchain\n* txinputs             : (txhash) -> fetch inputs from a previous transaction in a format to be re-used as unspents             \n* send                 : (privkey, to, value, fee=10000, change_addr=None, segwit=False, addr=None) -> create and a push a simple transaction to send coins to an address and return change to the change address or sender\n* sendmultitx          : (privkey, to:value pairs, fee=10000, change_addr=None, segwit=False, addr=None) -> create and a push a transaction to send coins to multiple addresses and return change to the change address or sender\n* preparetx            : (frm, to, value, fee, change_addr=None, segwit=False): -> create unsigned txobj with change output\n* preparemultitx       : (frm, to:value pairs, fee, change_addr=None, segwit=False): -> create unsigned txobj with multiple outputs and additional change output\n* preparesignedtx      : (privkey, to, value, fee=10000, change_addr=None, segwit=False, addr=None) -> create signed txobj with change output\n* preparesignedmultitx : (privkey, *args, change_addr=None, segwit=False, addr=None) -> create signed txobj with multiple outputs and additional change output\n* mktx                 : (inputs, outputs) -> create unsigned txobj\n* mksend               : (inputs, outputs, change_addr, fee, segwit) -> create unsigned txobj\n* mk_multisig_address  : (pubkeys, M) -> Returns both M-of-N multsig script and address pubkeys\n* pubtop2w             : (pub) -> pay to witness script hash (segwit address)\n* privtop2w            : (priv) -> pay to witness script hash (segwit address)\n* is_address           : (addr) -> true if addr is a valid address for this network\n* is_p2sh              : (addr) -> true if addr is a pay to script hash for this network\n* is_segwit            : (priv, addr) -> true if priv-addr pair represent a pay to witness script hash\n* current_block_height : () -> Latest block height\n* block_height         : (txhash) -> Block height containing the txhash\n* inspect              : (tx_hex) -> Deserialize a transaction and decode and ins and outs\n* merkle_prove         : (txhash) -> Proves a transaction is valid and returns txhash, merkle siblings and block header.\n\n### Listing of main non-coin specific commands:\n\n* add                  : (key1, key2) -> key1 + key2 (works on privkeys or pubkeys)\n* multiply             : (pubkey, privkey) -> returns pubkey * privkey\n\n* ecdsa_sign           : (message, privkey) -> sig\n* ecdsa_verify         : (message, sig, pubkey) -> True/False\n* ecdsa_recover        : (message, sig) -> pubkey\n\n* random_key           : () -> privkey\n* random_electrum_seed : () -> electrum seed\n\n* electrum_stretch     : (seed) -> secret exponent\n* electrum_privkey     : (seed or secret exponent, i, type) -> privkey\n* electrum_mpk         : (seed or secret exponent) -> master public key\n* electrum_pubkey      : (seed or secexp or mpk) -> pubkey\n\n* bip32_master_key     : (seed) -> bip32 master key\n* bip32_ckd            : (private or public bip32 key, i) -> child key\n* bip32_privtopub      : (private bip32 key) -> public bip32 key\n* bip32_extract_key    : (private or public bip32_key) -> privkey or pubkey\n\n* deserialize          : (hex or bin transaction) -> JSON tx\n* serialize            : (JSON tx) -> hex or bin tx\n* multisign            : (txobj, i, script, privkey) -> signature\n* apply_multisignatures: (txobj, i, script, sigs) -> tx with index i signed with sigs\n* scriptaddr           : (script) -> P2SH address\n* mk_multisig_script   : (pubkeys, M) -> M-of-N multisig script from pubkeys\n* verify_tx_input      : (tx, i, script, sig, pub) -> True/False\n* tx_hash              : (hex or bin tx) -> hash\n\n* access               : (json list/object, prop) -> desired property of that json object\n* multiaccess          : (json list, prop) -> like access, but mapped across each list element\n* slice                : (json list, start, end) -> given slice of the list\n* count                : (json list) -> number of elements\n* sum                  : (json list) -> sum of all values\n\n* select               : (unspent, value) -> returns list of unspents which are enough to cover the value\n\n### Another reminder and useful links\nAnother reminder, if you are doing something new with the library, whether a regular transaction, multisig,\nsegwit or a coin you haven't worked with before, try it out in testnet first or alternatively with small amounts\non the mainnet. The original pybitcointools had issues opened in Github where people lost money either due to \nnot understanding what they were doing or because of bugs. \n\nHere are some links to testnet faucets:\n\nhttps://testnet.manu.backend.hamburg/faucet\n\nhttps://testnet.manu.backend.hamburg/bitcoin-cash-faucet\n\nhttp://test.faucet.masternode.io/\n\nhttps://faucet.thonguyen.net/ltc\n\nhttp://testnet.litecointools.com/\n\nAnyone know a working Dogecoin testnet faucet, or willing to send testnet coins to address \nnmfnMVSjfyfiv37HtbphRbLgMPUHQE7QdP so I can test? (Dogecoin mainnet is tested).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/primal100/pybitcointools", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycointools", "package_url": "https://pypi.org/project/pycointools/", "platform": "", "project_url": "https://pypi.org/project/pycointools/", "project_urls": {"Homepage": "http://github.com/primal100/pybitcointools"}, "release_url": "https://pypi.org/project/pycointools/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Python Crypto Coin Tools", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>REPOSITORY HAS BEEN ARCHIVED AND IS NO LONGER MAINTAINED FOR NOW</p>\n<h1>Pycryptotools, Python library for Crypto coins signatures and transactions</h1>\n<p>This is a fork of Vitalik Buterin's original <a href=\"https://github.com/vbuterin/pybitcointools\" rel=\"nofollow\">pybitcointools</a> library.</p>\n<p>Installation:</p>\n<pre>pip install cryptos\n</pre>\n<p>Library now supports making and pushing raw transactions for:</p>\n<ul>\n<li>Bitcoin mainnet</li>\n<li>Bitcoin testnet</li>\n<li>Bitcoin Cash mainnet (with replay protection)</li>\n<li>Bitcoin Cash testnet (with replay protection)</li>\n<li>Litecoin mainnet</li>\n<li>Litecoin testnet</li>\n<li>Dash mainnet</li>\n<li>Dash testnet</li>\n<li>Dogecoin mainnet</li>\n<li>Bitcoin Gold mainnet (with replay protection)</li>\n</ul>\n<p>Transaction broadcast has been tested for all of these.</p>\n<p>For the following, local operations such as making and signing transactions are supported but explorer dependant\noperations (unspent, pushtx, etc.) are not yet supported.:</p>\n<ul>\n<li>Bitcoin Gold testnet</li>\n</ul>\n<p>Segregrated Witness transactions also supported for:</p>\n<ul>\n<li>Bitcoin mainnet</li>\n<li>Bitcoin testnet</li>\n<li>Litecoin mainnet</li>\n<li>Litecoin testnet</li>\n</ul>\n<p>Here are the first mainnet segwit transactions made with this library:</p>\n<p>Bitcoin: <a href=\"https://blockchain.info/tx/9f3bd4fa14e424abd5623ba98877e33cfee3e7bd6f9f71d7a39e402501458c81\" rel=\"nofollow\">https://blockchain.info/tx/9f3bd4fa14e424abd5623ba98877e33cfee3e7bd6f9f71d7a39e402501458c81</a></p>\n<p>Litecoin: <a href=\"https://live.blockcypher.com/ltc/tx/b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989/\" rel=\"nofollow\">https://live.blockcypher.com/ltc/tx/b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989/</a>\n<a href=\"https://live.blockcypher.com/ltc/tx/3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000/\" rel=\"nofollow\">https://live.blockcypher.com/ltc/tx/3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000/</a></p>\n<p>Aim is to provide a simple, class-based API which makes switching between different coins and mainnet and testnet, and adding new coins, all very easy.</p>\n<p>Roadmap:</p>\n<ul>\n<li>Replaceable transactions</li>\n<li>Change from explorers to electrumx servers</li>\n<li>Correct fee detection algorithm</li>\n<li>Extend wallets to make transactions</li>\n<li>Read the docs page</li>\n<li>E-commerce tools (exchange rates, short-time invoices)</li>\n<li>Desktop GUI for easy creation, signing and broadcasting of raw transactions</li>\n<li>Multi-crypto wallet GUI</li>\n</ul>\n<h3>Advantages:</h3>\n<ul>\n<li>Methods have a simple interface, inputting and outputting in standard formats</li>\n<li>Classes for different coins with a common interface</li>\n<li>Many functions can be taken out and used individually</li>\n<li>Supports binary, hex and base58</li>\n<li>Transaction deserialization format almost compatible with BitcoinJS</li>\n<li>Electrum and BIP0032 support</li>\n<li>Make and publish a transaction all in a single command line instruction with full control</li>\n<li>Includes non-bitcoin-specific conversion and JSON utilities</li>\n</ul>\n<h3>Disadvantages:</h3>\n<ul>\n<li>Not a full node, has no idea what blocks are</li>\n<li>Relies on centralized explorers for blockchain operations</li>\n</ul>\n<h3>Example usage - the long way (best way to learn :) ):</h3>\n<p>WARNING: While it's fun to mess around with this on the testnet, do not do the following procedure on the mainnet\nunless you really know what you are doing. Any value in the inputs not included in the ouputs will be lost.\nSo if the total inputs value is 1 BTC, and the total outputs amount to 0.6 BTC, 0.4 BTC will be given to the\nminers as a fee. The faster way, listed later in the README, ensures the difference between\ninputs and outputs is sent as change back to the sender (except for a small fee).\nIf in doubt, before broadcasting a transaction, visit <a href=\"https://live.blockcypher.com/btc/decodetx/\" rel=\"nofollow\">https://live.blockcypher.com/btc/decodetx/</a> and decode the raw tx\nand make sure it looks right. If you aren't familiar with how Bitcoin transactions work, you should run through\nthis procedure a few times on the testnet before developing for mainnet.</p>\n<p>OTHER WARNING: Default fees for Bitcoin mainnet are probably too low throughout this library.\nThis can cause coins to be lost for a period of time until they are finally confirmed by a miner. Hopefully, some kind\nof \"correct fee\" detection algorithm will be implemented soon but for now it is recommended to think about and set an\nappropriate fee when making transactions. There are many different ways of making a transaction. Whichever method you\nchoose, make sure you understand how to set the correct fee. Here's a link about for information about the current recommended fees:</p>\n<p><a href=\"https://bitcoinfees.earn.com/\" rel=\"nofollow\">https://bitcoinfees.earn.com/</a></p>\n<pre><code>&gt; from cryptos import *\n&gt; c = Bitcoin(testnet=True)\n&gt; priv = sha256('a big long brainwallet password')\n&gt; priv\n'89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n&gt; pub = c.privtopub(priv)\n&gt; pub\n'041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f'\n&gt; addr = c.pubtoaddr(pub)\n&gt; addr\n'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n&gt; inputs = c.unspent(addr)\n&gt; inputs\n[{'output': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508:0', 'value': 180000000}, {'output': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38:0', 'value': 90000000}]\n&gt; outs = [{'value': 269845600, 'address': '2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF'}, {'value': 100000, 'address': 'mrvHv6ggk5gFMatuJtBKAzktTU1N3MYdu2'}]\n&gt; tx = c.mktx(inputs,outs)\n&gt; tx\n{'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n&gt; tx2 = c.sign(tx,0,priv)\n&gt; tx2\n{'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n&gt; tx3 = c.sign(tx2,1,priv)\n&gt; tx3\n{'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n&gt; tx4 = c.serialize(tx)\n&gt; tx4\n'01000000020875f07948460160db60ac4a1dc648b8c5abfe4e4ffd71637608f1af0a0ae13b000000008b483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff38aa1ff4695d937db4677085d9fdd7fe30992b05b56e416730fda4e10498ce51000000008b483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02608415100000000017a914a9974100aeee974a20cda9a2f545704a0ab54fdc87a0860100000000001976a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac00000000'\n&gt; c.pushtx(tx4)\n{'status': 'success', 'data': {'network': 'BTCTEST', 'txid': '00af7b794355aa4ea5851a792713934b524b820cf7f20e2a0e01ab61910b5299'}}\n</code></pre>\n<h3>Faster way</h3>\n<p>To send 12 DASH from addr belonging to privkey 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\nto address yd8Q7MwTDe9yJdeMx1YSSYS4wdxQ2HDqTg, with change returned to the sender address:</p>\n<pre><code>&gt; from cryptos import *\n&gt; dash = Dash(testnet=True)\n&gt; dash.send(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"yd8Q7MwTDe9yJdeMx1YSSYS4wdxQ2HDqTg\", 1200000000)\n{'status': 'success', 'data': {'txid': '6a510a129bf1e229e99c3eede516d3bde8bdccf859199937a98eaab2ce1cd7ab', 'network': 'DASHTEST'}}\n</code></pre>\n<p>Or if you prefer to verify the tx (for example, with Blockcypher) you can break it into two steps:</p>\n<pre><code>&gt; from cryptos import *\n&gt; dash = Dash()\n&gt; tx = dash.preparesignedtx(priv, \"Xhcmzs5wKECBiWwSEsTZu8wNonguH5poaz\", 9800000-20000, fee=20000)\n&gt; tx\n'010000000194f2f955627dfd549f213a70d65dcd5550c0b14a484d38b6ae47fe7a8896ca41000000008b483045022100b125b1f4848c145193f70b915b0074539d90fd74c2e75492169f06927acafa39022025a009711a354a7d84e19f234dfb5d20e155b64acad40941670e634c1100101a01410437b81f8f1376a87556380ad9f3a6b7f642754b3497ce42518f8dbd39bfedea24d897ae5d8d1dd41c04f55700ed6f3b7cee99df5aed74f98a54cbc576d75c0b9fffffffff01203b9500000000001976a9144c0404140e6ad8d04bdf625888bf6dfcc20fa12d88ac00000000'\n&gt; dash.pushtx(tx)\n{'status': 'success', 'data': {'txid': '0d889f6a268340c8fd30cdc6567eb588765e911fdd1fb0aac870dc3125ffde76', 'network': 'DASH'}}\n</code></pre>\n<p>Another example with Bitcoin Cash testnet:</p>\n<pre><code>&gt; from cryptos import *\n&gt; crypto = BitcoinCash(testnet=True)\n&gt; tx = crypto.preparesignedtx(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"mgRoeWs2CeCEuqQmNfhJjnpX8YvtPACmCX\", 967916800)\n&gt; tx\n'010000000144ea7b41df09cee54c43f817dc11fd4d88c9b721b4c13b588f6a764eab78f692000000008b4830450221008efa819db89f714dbe0a19a7eb605d03259f4755a0f12876e9dddf477e1867b8022072bc76d120e92668f4765b5d694aee4a3cafd6cd4aaa8d5ebf88c3f821c81d9c4141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02003db139000000001976a91409fed3e08e624b23dbbacc77f7b2a39998351a6888acf046df07000000001976a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac00000000'\n&gt; crypto.pushtx(tx)\n{'status': 'success', 'data': {'txid': 'd8b130183824d0001d3bc669b31e798e2654868a7fda743aaf35d757d89db0eb', 'network': 'tbcc'}}\n</code></pre>\n<h3>Segregated Witness - the long way</h3>\n<p>The same warnings about testnet practice and fees as discussed earlier applies here.</p>\n<p>To create a segwit transaction, generate a pay to witness script hash (P2WPKH)\naddress and mark all the Segwit UTXOs with segwit=True.</p>\n<pre><code>&gt; from cryptos import *\n&gt; c = Litecoin(testnet=True)\n&gt; priv = sha256('a big long brainwallet password')\n&gt; priv\n'89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n&gt; addr = c.privtop2w(priv)\n&gt; addr\n'2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'\n&gt; inputs = c.unspent(addr)\n&gt; inputs\n[{'output': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a:0', 'value': 100000000}]\n&gt; inputs[0]['segwit']=True\n&gt; inputs\n[{'output': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a:0', 'value': 100000000, 'segwit': True}]\n&gt; outs = [{'value': 79956800, 'address': 'mxYcACPJWAMMkXu7S9SM8npicFWehpYCWx'}, {'value': 19989200, 'address': '2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'}]\n&gt; tx = c.mktx(inputs,outs)\n&gt; tx\n{'locktime': 0, 'version': 1, 'ins': [{'script': '', 'sequence': 4294967295, 'outpoint': {'hash': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a', 'index': 0}, 'amount': 100000000, 'segwit': True}], 'outs': [{'script': '76a914baca2979689786ba311edcfc04d9ad95d393679488ac', 'value': 79956800}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 19989200}], 'marker': 0, 'flag': 1, 'witness': []}\n&gt; tx2 = c.sign(tx,0,priv)\n&gt; tx2\n{'locktime': 0, 'version': 1, 'ins': [{'script': '160014804aff26594cc36c0ac89e95895ab9bdd0c540ef', 'sequence': 4294967295, 'outpoint': {'hash': '63189d6354b1e7d3a5a16076b0722f84b80b94d5f4958c3697191503cccbe88a', 'index': 0}, 'amount': 100000000, 'segwit': True}], 'outs': [{'script': '76a914baca2979689786ba311edcfc04d9ad95d393679488ac', 'value': 79956800}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 19989200}], 'marker': 0, 'flag': 1, 'witness': [{'number': 2, 'scriptCode': '47304402201632cb84a0aed4934df83fbc3cd2682f920eef37f76aa64d477702dd59633c900220198cfe15c28b26247c8e49974b4fda825ae16441112f13e754322964a9f24ec80121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc'}]}\n&gt; tx3 = serialize(tx)\n&gt; tx3\n'010000000001018ae8cbcc03151997368c95f4d5940bb8842f72b07660a1a5d3e7b154639d18630000000017160014804aff26594cc36c0ac89e95895ab9bdd0c540efffffffff02400bc404000000001976a914baca2979689786ba311edcfc04d9ad95d393679488acd00231010000000017a9141039471d8d44f3693cd34d1b9d69fd957799cf30870247304402201632cb84a0aed4934df83fbc3cd2682f920eef37f76aa64d477702dd59633c900220198cfe15c28b26247c8e49974b4fda825ae16441112f13e754322964a9f24ec80121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc00000000'\n&gt; c.pushtx(tx3)\n{'status': 'success', 'data': {'network': 'LTCTEST', 'txid': '51d5be05d0a35ef5a8ff5f43855ea59e8361874aff1039d6cf5d9a1f93ae1042'}}\n</code></pre>\n<p>It's also possible to mix segwit inputs with non-segwit inputs. Only one input needs to be marked as segwit\nto create a segwit transaction.</p>\n<h3>Segregated Witness - Faster Way:</h3>\n<p>Send 0.23486583 LTC to LPZd11JyAd6fJh5ZBMcmu6qczV14CZnz55 from segwit address 3P1bEPk5v4CUhvX9VqDuxqJGnTutt9czZb,\nreturning change to LchaMS51XFYmks3fJLAyuSeYSbiyByPLUD:</p>\n<pre><code>&gt;from cryptos import *\n&gt;l = Litecoin()\nl.send(\"&lt;privkey&gt;\", \"LNM9Hpc6EFd7SsKkPU6ATLJNdXSNPnNdqs\", 23486583, fee=20000, change_addr=\"LchaMS51XFYmks3fJLAyuSeYSbiyByPLUD\", segwit=True)\n{'status': 'success', 'data': {'network': 'LTC', 'txid': '3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000'}}\n</code></pre>\n<p>It's also possible to provide the send address in addition to the private key in which case segwit will be\nauto-detected, so no need to know in advance if the address is segwit or not:</p>\n<pre><code>&gt;from cryptos import *\n&gt;c = Bitcoin()\n&gt;c.send('&lt;privkey&gt;', '1CBFPfNotcVcWg26WdhfnoDDvZqzuBxKDb', 88036480, addr=\"3AGe5CkW5CKFAgKpQE82VSWkEjoxfDxMxQ\")\n{'status': 'success', 'data': {'network': 'LTC', 'txid': 'b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989'}}\n</code></pre>\n<p>It's also possible to provide the send address in addition to the private key in which case segwit will be\nauto-detected, so no need to know in advance if the address is segwit or not:</p>\n<pre><code>&gt;from cryptos import *\n&gt;c = Bitcoin()\n&gt;c.send('&lt;privkey&gt;', '1CBFPfNotcVcWg26WdhfnoDDvZqzuBxKDb', 88036480, addr=\"3AGe5CkW5CKFAgKpQE82VSWkEjoxfDxMxQ\")\n{'status': 'success', 'data': {'network': 'LTC', 'txid': 'b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989'}}\n</code></pre>\n<h3>2-of-3 MultiSig Transaction example:</h3>\n<pre><code>&gt; from cryptos import *\n&gt; coin = Bitcoin(testnet=True)\n&gt; publickeys = ['02e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609', '0391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0', '0415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb']\n&gt; script, address = coin.mk_multsig_address(publickeys, 2)\n&gt; script\n'522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53ae'\n&gt; address\n'2ND6ptW19yaFEmBa5LtEDzjKc2rSsYyUvqA'\n&gt; tx = coin.preparetx(address, \"myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW\", 1100000, 50000)\n&gt; for i in range(0, len(tx['ins'])):\n    sig1 = coin.multisign(tx, i, script, \"cUdNKzomacP2631fa5Q4yHv2fADc8Ueymr5Z5NUSJjVM13igcVJk\")\n    sig3 = coin.multisign(tx, i, script, \"cMrziExc6iMV8vvAML8QX9hGDP8zNhcsKbdS9BqrRa1b4mhKvK6f\")\n    tx = apply_multisignatures(tx, i, script, sig1, sig3)\n&gt; tx\n'0100000001e62c0b5434108607f52856bfbcf5093363fbd4789141a661a4c6c8042769ed2001000000fd1d0100483045022100dfc75916f6bb5c5b72a45dea44dbc45b47ba90912efb84680a373acadb3b1212022022dbbd66e4871624609d875bdb592d11335eb4ec49c7b87bb0b8bc76f72f80f30147304402204c38cab196ec0e82a9f65ecba70a0dbf73f49e5886e1000b9bc52894e28fa5c9022007bff3f90bcece19036625806d4d1951a03c256627163f1ac4e76a6ee8eae072014c89522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53aeffffffff02e0c81000000000001976a914c384950342cb6f8df55175b48586838b03130fad88ac301224030000000017a914d9cbe7c2c507c306f4872cf965cbb4fe51b621998700000000'\n&gt; coin.pushtx(tx)\n{'status': 'success', 'data': {'txid': 'b64e19311e3aa197063e03657679e2974e04c02c5b651c4e8d55f428490ab75f', 'network': 'BTCTEST'}}\n</code></pre>\n<h3>Supported coins</h3>\n<pre><code>&gt; from cryptos import *\n&gt; priv = sha256('a big long brainwallet password')\n&gt; b = Bitcoin()\n&gt; b.privtoaddr(priv)\n'1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n&gt; b = Bitcoin(testnet=True)\n&gt; b.privtoaddr(priv)\n'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n&gt; l = Litecoin()\n&gt; l.privtoaddr(priv)\n'Lb1UNkrYrQkTFZ5xTgpta61MAUTdUq7iJ1'\n&gt; l = Litecoin(testnet=True)\n&gt; l.privtoaddr(priv)\n'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n&gt; c = BitcoinCash()\n&gt; c.privtoaddr(priv)\n'1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n&gt; c = BitcoinCash(testnet=True)\n&gt; c.privtoaddr(priv)\n'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n&gt; d = Dash()\n&gt; d.privtoaddr(priv)\n'XrUMwoCcjTiz9gzP9S9p9bdNnbg3MvAB1F'\n&gt; d = Dash(testnet=True)\n&gt; d.privtoaddr(priv)\n'yc6xxkH4B1P4VRuviHUDBd3j4tAQpy4fzn'\n&gt; d = Doge()\n&gt; d.privtoaddr(priv)\n'DLvceoVN5AQgXkaQ28q9qq7BqPpefFRp4E'\n&gt; bg = BitcinGold()\n&gt; bg.privtoaddr(priv)\n'GZdSXfsfkc7h5Dh6DVVhiqHUsRtCMQ9fxG'\n&gt; bg = BitcoinGold(legacy=True)\n&gt; bg.privtoaddr(priv)\n'1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n&gt; bg = BitcoinGold(testnet=True)\n&gt; bg.privtoaddr(priv)\n'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n</code></pre>\n<h3>BIP39-BIP44 Standard Wallets:</h3>\n<p>Aims to be compatible with <a href=\"https://iancoleman.io/bip39/\" rel=\"nofollow\">https://iancoleman.io/bip39/</a>. Good choice for supporting different coins and networks from\nthe same wallet words. Also compatible with electrum when bip39 option is selected.</p>\n<pre><code>&gt; from cryptos import *\n&gt; words = entropy_to_words(os.urandom(16))\n&gt; words\n'practice display use aisle armor salon glue okay sphere rather belt mansion'  \n&gt; keystore.bip39_is_checksum_valid(words)\n(True, True)\n&gt; coin = Bitcoin()\n&gt; wallet = coin.wallet(words)\n&gt; wallet.keystore.root_derivation\n\"m/44'/0'/0'\"\n&gt; wallet.keystore.xprv      #Account Extended Private Key\n'xprv9y1M42LhHxTuoQbCuySz4Ek6EB3guE4CiXDXhHQnR7LwgpUV7AxQVm7D4HpUWRStwUXFepQRz7av2iaAXXYoizT9JoqWE6qffxNdiMxFQtc'\n&gt; wallet.keystore.xpub      # Account Extended Public Key\n'xpub6BzhTXsb8L2D1tfg1zyzRNgpnCtBJgn45k98VfpPySsvZcodeiGf3ZRguZLoS6VwEQ4iZ7Y4bq5A5eqyooyc4jC9beFTB3mmxrGwjRLa3pm'\n&gt; addr1 = wallet.new_receiving_address()\n&gt; addr1\n'18q3EiCiKd5vydnaVwWEpAFyzfL2ftAZ1L'\n&gt; wallet.privkey(addr1)\n'L4cKz3epcM3CAmwkSwJwZ2c4q5ukmSVWCrE9PqE46ybU3XyzfTYx'\n&gt; addr2 = wallet.new_change_address()\n&gt; addr2\n'1BgkpwEDrTbCNduyR97EpW4zvFhEzWsyvi'\n&gt; wallet.privkey(addr2)\n'L5Xmbnsen2cN36WxbuHkAixBmuJ8b3GZPmLtaRPf66p4gfnqHDqi'\n&gt; addr3 = wallet.new_change_address()\n&gt; addr3\n'1KjxFsDP9SXAmKKD4ZgSep5kYaYgAGK3P9'\n&gt; priv3 = wallet.privkey(addr3)\n&gt; priv3\n'L1ktR1kifTXLXoroLZiB3AF9UtKLRW2FmYnnR7VbPZBYkscgRkyn'\n&gt; assert coin.privtoaddr(priv3) == addr3\nTrue\n</code></pre>\n<p>Dash example:</p>\n<pre><code>&gt; from cryptos import *\n&gt; words = 'practice display use aisle armor salon glue okay sphere rather belt mansion'  \n&gt; coin = Dash()\n&gt; wallet = coin.wallet(words)\n&gt; wallet.keystore.root_derivation\n\"m/44'/5'/0'\"\n&gt; wallet.keystore.xprv      #Account Extended Private Key\n'xprv9yiTHjM4MPNQndsxkrvE2QgF36nvutGt3e9k5DjkjfAnNbqGm1wL77XV2xHiwnUfwcgAZUWkdpEnxRWELTrgXDVhvntNFwme1CqCgm1a91f'\n&gt; wallet.keystore.xpub      # Account Extended Public Key\n'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\n&gt; addr1 = wallet.new_receiving_address()\n&gt; addr1\n'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\n&gt; wallet.privkey(addr1)\n'XDbSZeVzBiHanwrSU5yripFd8Lq5tnrjxgvbaksNPhAExbS29aAa'\n&gt; addr2 = wallet.new_change_address()\n&gt; addr2\n'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\n&gt; wallet.privkey(addr2)\n'XHwHKxVfhzPEGZGGfQ9uwKK2xQjavF2yNUkq7FGXFA6SyZv4jge1'\n&gt; addr3 = wallet.new_change_address()\n&gt; addr3\n'XfZwJaFiBx4qLqnQydvqGyWDPciAtjFmgn'\n&gt; priv3 = wallet.privkey(addr3)\n&gt; priv3\n'XCNac8eQE642wWKaxnWHLa1GW1Y1uppvT5uda3LYVXAJZAAdR1Fx'\n&gt; assert coin.privtoaddr(priv3) == addr3\nTrue\n</code></pre>\n<h3>BIP39-BIP49 Segwit Wallets:</h3>\n<pre><code>&gt; from cryptos import *\n&gt; words = entropy_to_words(os.urandom(20))\n&gt; words\n'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack' \n&gt; keystore.bip39_is_checksum_valid(words)\n(True, True)\n&gt; coin = Bitcoin()\n&gt; wallet = coin.p2wpkh_p2sh_wallet(words)\n&gt; wallet.keystore.root_derivation\n\"m/49'/0'/0'\"\n&gt; wallet.keystore.xprv      #Account Extended Private Key\n'yprvAHoU8z6164hTNdwpArPgn2bdNExmUu9HwxeyhUok8pLDNQSCzYo8rvD6tFvMKk4EQXF2UGzRea5FBHjrtcuYmuBB7Z6EoznKCPeUwXaZduB'\n&gt; wallet.keystore.xpub      # Account Extended Public Key\n'ypub6WnpYVctvSFkb82HGsvh9AYMvGoFtMs9KBaaVsDMh9sCFCmMY67PQiXajW1FQq7AKsgvWGSrmZ82rquUpwcKR6Ey1sdMdeQWvgCKvABjWy8'\n&gt; addr1 = wallet.new_receiving_address()\n&gt; addr1\n'38yA1L6u6NiADrafrqZKDt1fTRHpGC3E7g'\n&gt; wallet.privkey(addr1)\n'Ky13njnYGrj5jowjUarqcmaRCG37zSwqRJkTj296cQsSvFtsV5a5'\n&gt; addr2 = wallet.new_change_address()\n&gt; addr2\n'3B5f8vVBRTAh2krbd4PiCtpyn7LhFJBDdV'\n&gt; wallet.privkey(addr2)\n'KzCNhiuvwQ1T6hXL21Act86HacauJGe1c8ttECqx1Fai6tPc1bEG'\n&gt; addr3 = wallet.new_change_address()\n&gt; addr3\n'3NvrTctHm6dQc6G2p3XYciWH8H6Lfcz9Jc'\n&gt; wallet.privkey(addr3)\n'KwdZhDopz3UVNW3Qso5UiyGkiDmayRZmAZdfAojvGsoP7da7HueX'\n</code></pre>\n<h3>BIP39-BIP84 New Segwit Wallets:</h3>\n<pre><code>&gt; from cryptos import *\n&gt; words = 'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack'\n&gt; coin = Bitcoin()\n&gt; wallet = coin.p2wpkh_wallet(words)\n&gt; wallet.keystore.root_derivation\n\"m/84'/0'/0'\n&gt; wallet.keystore.xprv      #Account Extended Private Key\n'zprvAcSKXVdgJHh5vyEeC6HSVScUCHxrKEWkkFSE2YsLpTborr4y2rHMrmr66yvxkGVqiiwwUCqUVkPB7o5ThnK3Dybi5PEywikXbNKQcHNMYPd'\n&gt; wallet.keystore.xpub      # Account Extended Public Key\n'zpub6qRfw1Aa8fFP9TK7J7pSraZCkKoLihEc7UMppwGxNo8njeQ7aPbcQaAZxFtnjCj9XveSJEnwV88YPyXXUCr3yRSSAKzibVCQB7AudUQn6Qg'\n&gt; addr1 = wallet.new_receiving_address()\n&gt; addr1\n'bc1qkh6wwkyhfceuxq236pc9gtv2agfqnelzh5m94f'\n&gt; wallet.privkey(addr1)\n'Kwnaq7cvD4CAnTcppou6wpUpMFx5yZRqkpZcy6bBvPVKp2FQzJNf'\n&gt; addr2 = wallet.new_change_address()\n&gt; addr2\n'bc1qj3vc5ft8nuka447z7ecujksszq6cm2r8p750n9'\n&gt; wallet.privkey(addr2)\n'L1QjmcLmeR5tbH62WxKoSdZBBHn69PuQSnLo2LaimnztsDANMP5M'\n&gt; addr3 = wallet.new_change_address()\n&gt; addr3\n'bc1qft00enx8c6unn00pmfdgq36ftd0u0q4lk5ajpy'\n&gt; wallet.privkey(addr3)\n'Kx91EteCnRmUPr8eibiEsAcFDyKJ2z9uAwGUQfMVw5ABQx7QyVgg'\n</code></pre>\n<h3>Electrum wallets</h3>\n<p>These aim to be compatible with the default Electrum wallet seed style. They do not have different derivation paths for different coins.\nNo checks have been made against any non-Bitcoin Electum wallet (e.g. Electrum Litecoin, Electron Cash)\nAt this moment, there is no support generating the seed words Electrum requires (which contains versioning) so seed words need to be copied from Electrum.\nElectrum versioning allows for auto-detection of wallet type, .e.g standard or segwit.</p>\n<pre><code>&gt; from cryptos import *\n&gt; seed_words = 'bitter grass shiver impose acquire brush forget axis eager alone wine silver'\n&gt; wallet = Bitcoin().electrum_wallet(seed_words)\n&gt; wallet.keystore.xtype\n'p2wpkh'\n&gt; wallet.keystore.root_derivation\n\"m/0'/\"\n&gt; wallet.keystore.xprv\n'zprvAZswDvNeJeha8qZ8g7efN3FXYVJLaEUsE9TW6qXDEbVe74AZ75c2sZFZXPNFzxnhChDQ89oC8C5AjWwHmH1HeRKE1c4kKBQAmjUDdKDUZw2'\n&gt; wallet.keystore.xpub\n'zpub6nsHdRuY92FsMKdbn9BfjBCG6X8pyhCibNP6uDvpnw2cyrVhecvHRMa3Ne8kdJZxjxgwnpbHLkcR4bfnhHy6auHPJyDTQ3kianeuVLdkCYQ'\n&gt; addr1 = wallet.new_receiving_address()\n&gt; addr1\n'bc1q3g5tmkmlvxryhh843v4dz026avatc0zzr6h3af'\n&gt; wallet.privkey(addr1)\n'L9fSXYNxYWHJWUqrQ6yhZCAJXq6XsfvcJ1Y2EnMAZfLLRNVQswQj'\n&gt; addr2 = wallet.new_change_address()\n&gt; addr2\n'bc1qdy94n2q5qcp0kg7v9yzwe6wvfkhnvyzje7nx2p'\n&gt; wallet.privkey(addr2)\n'L8rPGyfyzdLLEzxuBeC87Jvpp8FKxwrRtmkZ2PkRmRjqxNF8TVwG'\n&gt; addr3 = wallet.new_change_address()\n&gt; addr3\n'bc1q6xwxcw6m9ga35687tnu5tstmsvmzjwdnzktemv'\n&gt; wallet.privkey(addr3)\n'L7NeR6r9yU2n4zddxTCUpKYmzugYuouyLsCZR9naTqkBW6sjpxDM'\n</code></pre>\n<h3>Watch wallets</h3>\n<p>For security reasons the seed and xprv should ideally be held in cold storage only. If a web application needs to be\nable to provide addresses on demand, the solution is to use a watch wallet, generated from the xpub.</p>\n<p>For example, let's take the Dash xpub from a previous example:</p>\n<pre><code>&gt; from cryptos import *\n&gt; coin = Dash()\n&gt; xpub = 'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\n&gt; wallet = coin.watch_wallet(xpub)\n&gt; wallet.is_watching_only\nTrue\n&gt; wallet.new_receiving_address()\n'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\n&gt; wallet.new_change_address()\n'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\n</code></pre>\n<p>Full list of wallet methods:</p>\n<ul>\n<li>wallet -&gt; BIP 39 Standard</li>\n<li>watch_wallet -&gt; BIP 39 Standard, watch-only</li>\n<li>p2wpkh_p2sh_wallet -&gt; BIP 39 Segwit P2SH addresses, beginning with 3 for Bitcoin mainnet</li>\n<li>watch_p2wpkh_p2sh_wallet -&gt; BIP 39 Segwit P2SH addresses, watch-only</li>\n<li>p2wpkh_wallet -&gt; BIP 39 New Segwit Addresses, beginning with 'bc' for Bitcoin mainnet</li>\n<li>watch_p2wpkh_wallet -&gt; BIP New Segwit Address, watch-only</li>\n<li>electrum_wallet -&gt; detects p2kh or p2wpkh based on seed</li>\n<li>watch_electrum_wallet -&gt; Watch electrum standard wallet</li>\n<li>watch_electrum_p2wpkh_wallet -&gt; Watch electrum new segwit wallet</li>\n</ul>\n<h3>Old style Electrum words wallet:</h3>\n<pre><code>&gt; import os\n&gt; from cryptos import *\n&gt; words = entropy_to_words(os.urandom(16))\n&gt; words\n'float skirt road remind fire antique vendor select senior latin small glide'\n&gt; seed = mnemonic_to_seed(words)\n&gt; seed\nb'\\xb7Z\\x9b\\x9b\\x9c\\x1bq\\x81\\x1b\\xdc\\x98\\x1c\\xbc\\xb8\\xbb\\x130\\xea,\\xda\\x14\\xeb\\x9bF\\xafu\\x88\\xc2\\xf9\\xfc\\x7f\\xd0\\xb0?\\x9d\\xf3\\xa7$0Tx\\xd3\\xb7\\x82\\x87U\\xe7\\xcc\\xdd\\x16\\xddd\\xbf'T\\t_\\xdc R!x\\t'\n&gt; electrum_privkey(seed, 0)\n'5a37812b3057e44636c6e07023e16a8669e12a4365dfabbcb376ed272081d522'\n&gt; electrum_privkey(seed, 300, 0)\n'04cf414f200cd090239f2116d90608a74eae34ae21103ca9eef7bd9579e48bed'\n&gt; electrum_privkey(seed, 0, 1)      #Change address\n'9ca3631f813a6f81b70fbfc4384122bfe6fb159e6f7aea2811fe968c2a39d42a'\n</code></pre>\n<h3>The cryptotool command line interface:</h3>\n<pre><code>cryptotool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\nxprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n\ncryptotool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\nxprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw \n\ncryptotool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\nxpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF\n</code></pre>\n<p>The -s option lets you read arguments from the command line</p>\n<pre><code>cryptotool sha256 'some big long brainwallet password' | pybtctool -s privtoaddr | pybtctool -s history\n[{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\ncryptotool random_electrum_seed | pybtctool -s electrum_privkey 0 0\n593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n</code></pre>\n<p>The -b option lets you read binary data as an argument</p>\n<pre><code>cryptotool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\na665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a\n</code></pre>\n<p>The -j option lets you read json from the command line (-J to split a json list into multiple arguments)</p>\n<pre><code>cryptotool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\n0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000\n</code></pre>\n<p>Fun stuff with json:</p>\n<pre><code>cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\n625216206372\n\ncryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\n6198\n</code></pre>\n<p>To use the testnet you can add --testnet:</p>\n<pre><code>cryptotool unspent 2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF --testnet\n[{\"output\": \"209e5caf8997a3caed4dce0399804ad7fa50c70f866bb7118a42c79de1b76efc:1\", \"value\": 120000000}, {\"output\": \"79f38b3e730eea0e44b5a2e645f0979\n2d9f8732a823079ba4778110657cbe7b2:0\", \"value\": 100000000}, {\"output\": \"99d88509d5f0e298bdb6883161c64c7f54444519ce28a0ef3d5942ff4ff7a924:0\", \"value\n\": 82211600}, {\"output\": \"80acca12cf4b3b562b583f1dc7e43fff936e432a7ed4b16ac3cd10024820d027:0\", \"value\": 192470000}, {\"output\": \"3e5a3fa342c767d524b653aec51f3efe2122644c57340fbf5f79c75d1911ad35:0\", \"value\": 10000000}]\n</code></pre>\n<p>Or the --coin option to use a coin other than bitcoin (bch, btc, dash, doge or ltc)</p>\n<pre><code>cryptotool unspent LV3VLesnCi3p3zf26Y86kH2FZxfQq2RjrA --coin ltc\n[{\"output\": \"42bfe7376410696e260b2198f484f5df4aa6c744465940f9922ac9f8589670a4:0\", \"value\": 14282660}]\n\ncryptotool unspent myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW --coin ltc --testnet\n[{\"output\": \"68f9c662503715a3baf29fe4b07c056b0bf6654dbdd9d5393f4d6a18225d0ff3:0\", \"value\": 16333531}, {\"output\": \"aa40041a1fcdb952d6a38594a27529f890d17d715fd54b6914cd6709fa94ca67:0\", \"value\": 100000000}, {\"output\": \"3b72bae956d27ab0ad309808ab76beaf203109f423e533fd7c40f1201672f598:1\", \"value\": 164712303}]\n</code></pre>\n<p>Make and broadcast a transaction on the Bitcoin Cash testnet:</p>\n<pre><code>cryptotool send 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678 mgRoeWs2CeCEuqQmNfhJjnpX8YvtPACmCX 999950000 --fee 50000 --coin bch --testnet\n{\"status\": \"success\", \"data\": {\"txid\": \"caae4c059ac07827047237560ff44f97c940600f8f0a1e3392f4bcaf91e38c5c\", \"network\": \"tbcc\"}}\n</code></pre>\n<p>The arguments are the private key of the sender, the receiver's address and the fee (default 10000). Change will be returned to the sender.</p>\n<h3>Listing of main coin-specific methods:</h3>\n<ul>\n<li>privtopub            : (privkey) -&gt; pubkey</li>\n<li>pubtoaddr            : (pubkey) -&gt; address</li>\n<li>privtoaddr           : (privkey) -&gt; address</li>\n<li>sign                 : (txobj, i, privkey) -&gt; create digital signature of tx with privkey and add to input i</li>\n<li>signall              : (txobj, privkey) -&gt; create digital signature of tx with privkey for all inputs</li>\n<li>history              : (address) -&gt; tx history and balance of an address</li>\n<li>unspent              : (address) -&gt; unspent outputs for an addresses</li>\n<li>pushtx               : (hex or bin tx) -&gt; push a transaction to the blockchain</li>\n<li>fetchtx              : (txhash) -&gt; fetch a tx from the blockchain</li>\n<li>txinputs             : (txhash) -&gt; fetch inputs from a previous transaction in a format to be re-used as unspents</li>\n<li>send                 : (privkey, to, value, fee=10000, change_addr=None, segwit=False, addr=None) -&gt; create and a push a simple transaction to send coins to an address and return change to the change address or sender</li>\n<li>sendmultitx          : (privkey, to:value pairs, fee=10000, change_addr=None, segwit=False, addr=None) -&gt; create and a push a transaction to send coins to multiple addresses and return change to the change address or sender</li>\n<li>preparetx            : (frm, to, value, fee, change_addr=None, segwit=False): -&gt; create unsigned txobj with change output</li>\n<li>preparemultitx       : (frm, to:value pairs, fee, change_addr=None, segwit=False): -&gt; create unsigned txobj with multiple outputs and additional change output</li>\n<li>preparesignedtx      : (privkey, to, value, fee=10000, change_addr=None, segwit=False, addr=None) -&gt; create signed txobj with change output</li>\n<li>preparesignedmultitx : (privkey, *args, change_addr=None, segwit=False, addr=None) -&gt; create signed txobj with multiple outputs and additional change output</li>\n<li>mktx                 : (inputs, outputs) -&gt; create unsigned txobj</li>\n<li>mksend               : (inputs, outputs, change_addr, fee, segwit) -&gt; create unsigned txobj</li>\n<li>mk_multisig_address  : (pubkeys, M) -&gt; Returns both M-of-N multsig script and address pubkeys</li>\n<li>pubtop2w             : (pub) -&gt; pay to witness script hash (segwit address)</li>\n<li>privtop2w            : (priv) -&gt; pay to witness script hash (segwit address)</li>\n<li>is_address           : (addr) -&gt; true if addr is a valid address for this network</li>\n<li>is_p2sh              : (addr) -&gt; true if addr is a pay to script hash for this network</li>\n<li>is_segwit            : (priv, addr) -&gt; true if priv-addr pair represent a pay to witness script hash</li>\n<li>current_block_height : () -&gt; Latest block height</li>\n<li>block_height         : (txhash) -&gt; Block height containing the txhash</li>\n<li>inspect              : (tx_hex) -&gt; Deserialize a transaction and decode and ins and outs</li>\n<li>merkle_prove         : (txhash) -&gt; Proves a transaction is valid and returns txhash, merkle siblings and block header.</li>\n</ul>\n<h3>Listing of main non-coin specific commands:</h3>\n<ul>\n<li>\n<p>add                  : (key1, key2) -&gt; key1 + key2 (works on privkeys or pubkeys)</p>\n</li>\n<li>\n<p>multiply             : (pubkey, privkey) -&gt; returns pubkey * privkey</p>\n</li>\n<li>\n<p>ecdsa_sign           : (message, privkey) -&gt; sig</p>\n</li>\n<li>\n<p>ecdsa_verify         : (message, sig, pubkey) -&gt; True/False</p>\n</li>\n<li>\n<p>ecdsa_recover        : (message, sig) -&gt; pubkey</p>\n</li>\n<li>\n<p>random_key           : () -&gt; privkey</p>\n</li>\n<li>\n<p>random_electrum_seed : () -&gt; electrum seed</p>\n</li>\n<li>\n<p>electrum_stretch     : (seed) -&gt; secret exponent</p>\n</li>\n<li>\n<p>electrum_privkey     : (seed or secret exponent, i, type) -&gt; privkey</p>\n</li>\n<li>\n<p>electrum_mpk         : (seed or secret exponent) -&gt; master public key</p>\n</li>\n<li>\n<p>electrum_pubkey      : (seed or secexp or mpk) -&gt; pubkey</p>\n</li>\n<li>\n<p>bip32_master_key     : (seed) -&gt; bip32 master key</p>\n</li>\n<li>\n<p>bip32_ckd            : (private or public bip32 key, i) -&gt; child key</p>\n</li>\n<li>\n<p>bip32_privtopub      : (private bip32 key) -&gt; public bip32 key</p>\n</li>\n<li>\n<p>bip32_extract_key    : (private or public bip32_key) -&gt; privkey or pubkey</p>\n</li>\n<li>\n<p>deserialize          : (hex or bin transaction) -&gt; JSON tx</p>\n</li>\n<li>\n<p>serialize            : (JSON tx) -&gt; hex or bin tx</p>\n</li>\n<li>\n<p>multisign            : (txobj, i, script, privkey) -&gt; signature</p>\n</li>\n<li>\n<p>apply_multisignatures: (txobj, i, script, sigs) -&gt; tx with index i signed with sigs</p>\n</li>\n<li>\n<p>scriptaddr           : (script) -&gt; P2SH address</p>\n</li>\n<li>\n<p>mk_multisig_script   : (pubkeys, M) -&gt; M-of-N multisig script from pubkeys</p>\n</li>\n<li>\n<p>verify_tx_input      : (tx, i, script, sig, pub) -&gt; True/False</p>\n</li>\n<li>\n<p>tx_hash              : (hex or bin tx) -&gt; hash</p>\n</li>\n<li>\n<p>access               : (json list/object, prop) -&gt; desired property of that json object</p>\n</li>\n<li>\n<p>multiaccess          : (json list, prop) -&gt; like access, but mapped across each list element</p>\n</li>\n<li>\n<p>slice                : (json list, start, end) -&gt; given slice of the list</p>\n</li>\n<li>\n<p>count                : (json list) -&gt; number of elements</p>\n</li>\n<li>\n<p>sum                  : (json list) -&gt; sum of all values</p>\n</li>\n<li>\n<p>select               : (unspent, value) -&gt; returns list of unspents which are enough to cover the value</p>\n</li>\n</ul>\n<h3>Another reminder and useful links</h3>\n<p>Another reminder, if you are doing something new with the library, whether a regular transaction, multisig,\nsegwit or a coin you haven't worked with before, try it out in testnet first or alternatively with small amounts\non the mainnet. The original pybitcointools had issues opened in Github where people lost money either due to\nnot understanding what they were doing or because of bugs.</p>\n<p>Here are some links to testnet faucets:</p>\n<p><a href=\"https://testnet.manu.backend.hamburg/faucet\" rel=\"nofollow\">https://testnet.manu.backend.hamburg/faucet</a></p>\n<p><a href=\"https://testnet.manu.backend.hamburg/bitcoin-cash-faucet\" rel=\"nofollow\">https://testnet.manu.backend.hamburg/bitcoin-cash-faucet</a></p>\n<p><a href=\"http://test.faucet.masternode.io/\" rel=\"nofollow\">http://test.faucet.masternode.io/</a></p>\n<p><a href=\"https://faucet.thonguyen.net/ltc\" rel=\"nofollow\">https://faucet.thonguyen.net/ltc</a></p>\n<p><a href=\"http://testnet.litecointools.com/\" rel=\"nofollow\">http://testnet.litecointools.com/</a></p>\n<p>Anyone know a working Dogecoin testnet faucet, or willing to send testnet coins to address\nnmfnMVSjfyfiv37HtbphRbLgMPUHQE7QdP so I can test? (Dogecoin mainnet is tested).</p>\n\n          </div>"}, "last_serial": 6212244, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3ffac383bacf6b9ae4c6b745dc5b67d3", "sha256": "73071e0127a64494ce05bf9da24d2b7382acbb9d04b36b599d23bb8db364e057"}, "downloads": -1, "filename": "pycointools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3ffac383bacf6b9ae4c6b745dc5b67d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102755, "upload_time": "2019-11-28T05:24:36", "upload_time_iso_8601": "2019-11-28T05:24:36.331355Z", "url": "https://files.pythonhosted.org/packages/b7/c1/a2433eb6aea06cd7c274d548d5228cc975be861f943deee275e58c64427a/pycointools-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ffac383bacf6b9ae4c6b745dc5b67d3", "sha256": "73071e0127a64494ce05bf9da24d2b7382acbb9d04b36b599d23bb8db364e057"}, "downloads": -1, "filename": "pycointools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3ffac383bacf6b9ae4c6b745dc5b67d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102755, "upload_time": "2019-11-28T05:24:36", "upload_time_iso_8601": "2019-11-28T05:24:36.331355Z", "url": "https://files.pythonhosted.org/packages/b7/c1/a2433eb6aea06cd7c274d548d5228cc975be861f943deee275e58c64427a/pycointools-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:14 2020"}