{"info": {"author": "ymat", "author_email": "drowse314@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "XMLPumpkin\n==========\n\nParse XMLs from `CaboCha\n<http://code.google.com/p/cabocha/>`_ and provides simple tree accessors.\n\n\nUsage\n-----\n\nExpected usages are focused on chunk surfaces and dependency links::\n\n    >>> aisansan = xmlpumpkin.parse_to_tree(\n    ...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n    ... )\n    >>> len(aisansan.chunks)\n    8\n    >>> print(aisansan.root.surface)\n    \u6d41\u3057\u305f\u308a\u3057\u3066\n    >>> print(aisansan.root.func_surface)\n    \u3066\n    >>> for dep in aisansan.root.linked:\n    ...     print(dep.surface)\n    ...\n    \u964d\u3063\u3066\n    \u6d99\u3092\n\nYou need CaboCha in your path, or shortly with prepared XML::\n\n    >>> tree = xmlpumpkin.Tree(xml_as_unicode)\n\nShould you need an easy interface from Python to CaboCha::\n\n    >>> from xmlpumpkin import cabocha\n    >>> print(cabocha.txttree(\n    ...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n    ... ))\n        \u611b\u71e6\u3005\u3068-----D\n              \u3053\u306e-D |\n                \u8eab\u306b-D\n                \u964d\u3063\u3066-------D\n                \u5fc3\u5bc6\u304b\u306a---D |\n                  \u3046\u308c\u3057\u3044-D |\n                        \u6d99\u3092-D\n                  \u6d41\u3057\u305f\u308a\u3057\u3066\n    EOS\n    >>> print(cabocha.as_xml(\n    ...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n    ... ))\n    <sentence>\n      ...\n    </sentence>\n\nAll I/Os are unicodes!\nIf encodings other than UTF-8 is preferred, directly modify following constants::\n\n    >>> import xmlpumpkin.runner\n    >>> xmlpumpkin.runner.CABOCHA_ENCODING = 'SJIS'\n    >>>\n    >>> import xmlpumpkin.tree\n    >>> xmlpumpkin.tree.XML_ENCODING = 'SJIS'\n\n\nProperties\n----------\n\nNot enough but a few properties are provided via `Tree` and `Chunk` objects.\n\n`class xmlpumpkin.Tree(cabocha_xml)`\n    * chunks - tuple of chunks\n    * root - root (not depending on any chunks) Chunk object\n    * chunk_by_id(chunk_id) - get Chunk object by its id generated by CaboCha\n    * _element - origin XML as lxml Element object\n\n`class xmlpumpkin.Chunk(element, parent)`\n    * id - chunk id\n    * link_to_id - its depending chunk id\n    * linked_from_ids - tuple of chunk id depending to this chunk\n    * func_id - functional token id of this chunk\n    * dep - its depending Chunk object\n    * linked - list of all Chunk objects depending to this chunk\n    * surface - surface of this chunk\n    * func_surface - surface of this chunk's functional token\n    * _tokens() - its containing tokens as lxml Element objects", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drowse314-dev-ymat/xmlpumpkin", "keywords": "cabocha nlp xml parsing", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "xmlpumpkin", "package_url": "https://pypi.org/project/xmlpumpkin/", "platform": "any", "project_url": "https://pypi.org/project/xmlpumpkin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/drowse314-dev-ymat/xmlpumpkin"}, "release_url": "https://pypi.org/project/xmlpumpkin/0.1/", "requires_dist": null, "requires_python": null, "summary": "CaboCha output-XML accessor", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Parse XMLs from <a href=\"http://code.google.com/p/cabocha/\" rel=\"nofollow\">CaboCha</a> and provides simple tree accessors.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Expected usages are focused on chunk surfaces and dependency links:</p>\n<pre>&gt;&gt;&gt; aisansan = xmlpumpkin.parse_to_tree(\n...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n... )\n&gt;&gt;&gt; len(aisansan.chunks)\n8\n&gt;&gt;&gt; print(aisansan.root.surface)\n\u6d41\u3057\u305f\u308a\u3057\u3066\n&gt;&gt;&gt; print(aisansan.root.func_surface)\n\u3066\n&gt;&gt;&gt; for dep in aisansan.root.linked:\n...     print(dep.surface)\n...\n\u964d\u3063\u3066\n\u6d99\u3092\n</pre>\n<p>You need CaboCha in your path, or shortly with prepared XML:</p>\n<pre>&gt;&gt;&gt; tree = xmlpumpkin.Tree(xml_as_unicode)\n</pre>\n<p>Should you need an easy interface from Python to CaboCha:</p>\n<pre>&gt;&gt;&gt; from xmlpumpkin import cabocha\n&gt;&gt;&gt; print(cabocha.txttree(\n...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n... ))\n    \u611b\u71e6\u3005\u3068-----D\n          \u3053\u306e-D |\n            \u8eab\u306b-D\n            \u964d\u3063\u3066-------D\n            \u5fc3\u5bc6\u304b\u306a---D |\n              \u3046\u308c\u3057\u3044-D |\n                    \u6d99\u3092-D\n              \u6d41\u3057\u305f\u308a\u3057\u3066\nEOS\n&gt;&gt;&gt; print(cabocha.as_xml(\n...     u'\u611b\u71e6\u3005\u3068\u3053\u306e\u8eab\u306b\u964d\u3063\u3066\u5fc3\u5bc6\u304b\u306a\u3046\u308c\u3057\u3044\u6d99\u3092\u6d41\u3057\u305f\u308a\u3057\u3066'\n... ))\n&lt;sentence&gt;\n  ...\n&lt;/sentence&gt;\n</pre>\n<p>All I/Os are unicodes!\nIf encodings other than UTF-8 is preferred, directly modify following constants:</p>\n<pre>&gt;&gt;&gt; import xmlpumpkin.runner\n&gt;&gt;&gt; xmlpumpkin.runner.CABOCHA_ENCODING = 'SJIS'\n&gt;&gt;&gt;\n&gt;&gt;&gt; import xmlpumpkin.tree\n&gt;&gt;&gt; xmlpumpkin.tree.XML_ENCODING = 'SJIS'\n</pre>\n</div>\n<div id=\"properties\">\n<h2>Properties</h2>\n<p>Not enough but a few properties are provided via <cite>Tree</cite> and <cite>Chunk</cite> objects.</p>\n<dl>\n<dt><cite>class xmlpumpkin.Tree(cabocha_xml)</cite></dt>\n<dd><ul>\n<li>chunks - tuple of chunks</li>\n<li>root - root (not depending on any chunks) Chunk object</li>\n<li>chunk_by_id(chunk_id) - get Chunk object by its id generated by CaboCha</li>\n<li>_element - origin XML as lxml Element object</li>\n</ul>\n</dd>\n<dt><cite>class xmlpumpkin.Chunk(element, parent)</cite></dt>\n<dd><ul>\n<li>id - chunk id</li>\n<li>link_to_id - its depending chunk id</li>\n<li>linked_from_ids - tuple of chunk id depending to this chunk</li>\n<li>func_id - functional token id of this chunk</li>\n<li>dep - its depending Chunk object</li>\n<li>linked - list of all Chunk objects depending to this chunk</li>\n<li>surface - surface of this chunk</li>\n<li>func_surface - surface of this chunk\u2019s functional token</li>\n<li>_tokens() - its containing tokens as lxml Element objects</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 995947, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8c767bd63e6070cecd87a804acf83405", "sha256": "e512285393a96fbf4680feed1311795cc3dc61162ccbd248db5802f602ccaa56"}, "downloads": -1, "filename": "xmlpumpkin-0.1.tar.gz", "has_sig": false, "md5_digest": "8c767bd63e6070cecd87a804acf83405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7087, "upload_time": "2014-02-10T08:53:35", "upload_time_iso_8601": "2014-02-10T08:53:35.684161Z", "url": "https://files.pythonhosted.org/packages/21/b1/f810408b8f548a413c9f2728599940c9e37fea0242d7770bd0a54f5a9a33/xmlpumpkin-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c767bd63e6070cecd87a804acf83405", "sha256": "e512285393a96fbf4680feed1311795cc3dc61162ccbd248db5802f602ccaa56"}, "downloads": -1, "filename": "xmlpumpkin-0.1.tar.gz", "has_sig": false, "md5_digest": "8c767bd63e6070cecd87a804acf83405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7087, "upload_time": "2014-02-10T08:53:35", "upload_time_iso_8601": "2014-02-10T08:53:35.684161Z", "url": "https://files.pythonhosted.org/packages/21/b1/f810408b8f548a413c9f2728599940c9e37fea0242d7770bd0a54f5a9a33/xmlpumpkin-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:57 2020"}