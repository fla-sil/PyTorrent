{"info": {"author": "metalcorebear", "author_email": "mark.mbailey@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "# Quantitaive Discursive Analysis\r\n\r\n(C) 2019 Mark M. Bailey\r\n\r\n## About\r\nQuantitative Discursive Analysis (QDA) will convert bodies of text into mathematical graph objects built from noun phrases, where each noun or modifier becomes a vertex, and each edge is determined by how the nouns and vertexes are linked within phrases.  The more central the noun is to the overall text content, the higher the centrality measure of that particular noun.  Thus, the graph is a weighted representation of discursive content, making it more robust that simple keyword frequencies.  This object can be used to mathematically compare the discursive content of two or more bodies of text.  This is done by calculating the \"resonance\" between two bodies of text, where resonance is the cosine angle between the betweenness centralities of the intersection of all vertices.  This resonance value is normalized between [0,1], where 0 indicates no discursive similarity, and 1 indicates perfect discursive similarity.\r\n\r\n## Resonance in Series\r\nWhen lists of discursive objects are generated, this tool can be used to measure the resonance in series, where resonance between object i and object i+1 is measured throughout the entire series.  This feature can be useful in measuring time series resonance, for example, discursive similarity of aggregated news over time.\r\n\r\n## Discursive Communities\r\nThis tool can also be used to generate discursive communities.  When a list of discursive objects are generated, a weighted association matrix and associated graph (with edge weights representing resonance) can be generated, as well as its weighted betweenness centralities (indicating the relative importance of each discursive object within the network).  This feature can be useful for community identification on social media, where disursive similarity is used as a measure of connection (more robust than simply being \"friended,\" \"followed,\" or \"liked\").\r\n\r\n## More information\r\nThis tool is built on NetworkX and TextBlob.  Please see relevant documentation for additional information on what other calculations can be done on NetworkX graph objects generated using this library.\r\n\r\n## Sample Usage\r\n\r\nimport QDA\r\n\r\n*#Instantiate discursive object.*\r\ntext_graph = QDA.discursive_object('This is a string of your text.  For best results, this string should be at least as long as a typical news article.')\r\n\r\n*#Return list of noun phrases.*\r\n#Reuturns a list of tuples.\r\ntext_graph.nouns\r\n\r\n*#Return graph object.*\r\n#Returns a NetworkX graph object.\r\ntext_graph.graph\r\n\r\n*#Return dictionary of betweenness centrality measurements.*\r\ntext_graph.spectrum\r\n\r\n*#Calculate resonance between two discursive objects.*\r\n#Returns a float.\r\na = QDA.resonate(text_graph_1, text_graph_2)\r\n\r\n*#Calcuate resonance in series from a list of discursive objects.*\r\n#G_list is a list of discursive objects.\r\n#Returns a dictionary\r\nresonance_series = QDA.resonate_as_series(G_list)\r\n\r\n*#Instantiate a discursive community from a list of discursive objects.*\r\n#G_list is a list of discursive objects.\r\nd_community = QDA.discursive_community(G_list)\r\n\r\n*#Return weighted association matrix.*\r\n#Returns Numpy array.\r\nd_community.A\r\n\r\n*#Return community graph object.*\r\n#Returns NetworkX graph object.\r\nd_community.G\r\n\r\n*#Return community betweenness centrality dictionary.*\r\nd_community.spectrum\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/metalcorebear/Quantitative-Discursive-Analysis", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "QDA", "package_url": "https://pypi.org/project/QDA/", "platform": "", "project_url": "https://pypi.org/project/QDA/", "project_urls": {"Homepage": "https://github.com/metalcorebear/Quantitative-Discursive-Analysis"}, "release_url": "https://pypi.org/project/QDA/0.0.1/", "requires_dist": ["networkx", "textblob", "numpy"], "requires_python": ">=2.7", "summary": "A tool for quantitatively measuring the discursive similarity between bodies of text.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Quantitaive Discursive Analysis</h1>\n<p>(C) 2019 Mark M. Bailey</p>\n<h2>About</h2>\n<p>Quantitative Discursive Analysis (QDA) will convert bodies of text into mathematical graph objects built from noun phrases, where each noun or modifier becomes a vertex, and each edge is determined by how the nouns and vertexes are linked within phrases.  The more central the noun is to the overall text content, the higher the centrality measure of that particular noun.  Thus, the graph is a weighted representation of discursive content, making it more robust that simple keyword frequencies.  This object can be used to mathematically compare the discursive content of two or more bodies of text.  This is done by calculating the \"resonance\" between two bodies of text, where resonance is the cosine angle between the betweenness centralities of the intersection of all vertices.  This resonance value is normalized between [0,1], where 0 indicates no discursive similarity, and 1 indicates perfect discursive similarity.</p>\n<h2>Resonance in Series</h2>\n<p>When lists of discursive objects are generated, this tool can be used to measure the resonance in series, where resonance between object i and object i+1 is measured throughout the entire series.  This feature can be useful in measuring time series resonance, for example, discursive similarity of aggregated news over time.</p>\n<h2>Discursive Communities</h2>\n<p>This tool can also be used to generate discursive communities.  When a list of discursive objects are generated, a weighted association matrix and associated graph (with edge weights representing resonance) can be generated, as well as its weighted betweenness centralities (indicating the relative importance of each discursive object within the network).  This feature can be useful for community identification on social media, where disursive similarity is used as a measure of connection (more robust than simply being \"friended,\" \"followed,\" or \"liked\").</p>\n<h2>More information</h2>\n<p>This tool is built on NetworkX and TextBlob.  Please see relevant documentation for additional information on what other calculations can be done on NetworkX graph objects generated using this library.</p>\n<h2>Sample Usage</h2>\n<p>import QDA</p>\n<p><em>#Instantiate discursive object.</em>\ntext_graph = QDA.discursive_object('This is a string of your text.  For best results, this string should be at least as long as a typical news article.')</p>\n<p><em>#Return list of noun phrases.</em>\n#Reuturns a list of tuples.\ntext_graph.nouns</p>\n<p><em>#Return graph object.</em>\n#Returns a NetworkX graph object.\ntext_graph.graph</p>\n<p><em>#Return dictionary of betweenness centrality measurements.</em>\ntext_graph.spectrum</p>\n<p><em>#Calculate resonance between two discursive objects.</em>\n#Returns a float.\na = QDA.resonate(text_graph_1, text_graph_2)</p>\n<p><em>#Calcuate resonance in series from a list of discursive objects.</em>\n#G_list is a list of discursive objects.\n#Returns a dictionary\nresonance_series = QDA.resonate_as_series(G_list)</p>\n<p><em>#Instantiate a discursive community from a list of discursive objects.</em>\n#G_list is a list of discursive objects.\nd_community = QDA.discursive_community(G_list)</p>\n<p><em>#Return weighted association matrix.</em>\n#Returns Numpy array.\nd_community.A</p>\n<p><em>#Return community graph object.</em>\n#Returns NetworkX graph object.\nd_community.G</p>\n<p><em>#Return community betweenness centrality dictionary.</em>\nd_community.spectrum</p>\n\n          </div>"}, "last_serial": 6119411, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e1ce38ffc308f93647e9d5789806b588", "sha256": "b26b85b02de1a2bda75d51ee42cc6376540589a99ce435d2355a6c7386ec6cb6"}, "downloads": -1, "filename": "QDA-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1ce38ffc308f93647e9d5789806b588", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 3823, "upload_time": "2019-11-11T20:12:57", "upload_time_iso_8601": "2019-11-11T20:12:57.866151Z", "url": "https://files.pythonhosted.org/packages/f1/31/18984447f7459fa9c215d86e1c05d37ee817ca0d2cd19ccfa96d429fcf98/QDA-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "309b1fb03ce6f5d4a8e7a98e187dbbf2", "sha256": "71eb51d30d0e7ab6d6307809dd827ae177ea788e90cd1c972223942605205489"}, "downloads": -1, "filename": "QDA-0.0.1.tar.gz", "has_sig": false, "md5_digest": "309b1fb03ce6f5d4a8e7a98e187dbbf2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3713, "upload_time": "2019-11-11T20:13:00", "upload_time_iso_8601": "2019-11-11T20:13:00.870860Z", "url": "https://files.pythonhosted.org/packages/ae/aa/5dce363193509a90c804167a29e63b2e6c32a30aa4c675c32a064fe107f0/QDA-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1ce38ffc308f93647e9d5789806b588", "sha256": "b26b85b02de1a2bda75d51ee42cc6376540589a99ce435d2355a6c7386ec6cb6"}, "downloads": -1, "filename": "QDA-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "e1ce38ffc308f93647e9d5789806b588", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7", "size": 3823, "upload_time": "2019-11-11T20:12:57", "upload_time_iso_8601": "2019-11-11T20:12:57.866151Z", "url": "https://files.pythonhosted.org/packages/f1/31/18984447f7459fa9c215d86e1c05d37ee817ca0d2cd19ccfa96d429fcf98/QDA-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "309b1fb03ce6f5d4a8e7a98e187dbbf2", "sha256": "71eb51d30d0e7ab6d6307809dd827ae177ea788e90cd1c972223942605205489"}, "downloads": -1, "filename": "QDA-0.0.1.tar.gz", "has_sig": false, "md5_digest": "309b1fb03ce6f5d4a8e7a98e187dbbf2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3713, "upload_time": "2019-11-11T20:13:00", "upload_time_iso_8601": "2019-11-11T20:13:00.870860Z", "url": "https://files.pythonhosted.org/packages/ae/aa/5dce363193509a90c804167a29e63b2e6c32a30aa4c675c32a064fe107f0/QDA-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:53 2020"}