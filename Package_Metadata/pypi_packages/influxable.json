{"info": {"author": "Javid Mougamadou", "author_email": "javidjms0@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": ".. figure:: ./artwork/logo.svg\n   :alt:\n\nInfluxable\n==========\n\n|pypi version| |build status| |code coverage| |license: MIT|\n\nA lightweight python ORM / ODM / Client for InfluxDB\n\nNote\n----\n\nThis project is currently in development.\n\nA better documentation and testing scripts will be added in the next release.\n\nGenesis\n-------\n\nI worked on a project with InfluxDB. I needed to build an API for InfluxDB and to plug with Python libraries (scipy, pandas, etc ...).\n\nThat's why I decided to create this repository in order to deal with InfluxDB in a smooth way and to manipulate Python object.\n\nFeatures\n--------\n\n-  Add automation for measurement class generation (command: *autogenerate*)\n\n-  Admin commands allowing to manage the database (ex: *create\\_user()*, *show\\_series()*).\n\n-  Measurement class allowing to make queries in order to fetch/save points (ex: *Measurement.where()*, *Measurement.bulk\\_save()*).\n\n-  Different serializers for easy data manipulation (ex: *PandasSerializer*).\n\nDependencies\n------------\n\n-  Python 3 (Tested with Python 3.7.3)\n\n-  InfluxDB (Tested with InfluxDB 1.5.4)\n\nInstallation\n------------\n\nThe package is available in pypi. You can install it via pip :\n\n::\n\n    pip install influxable\n\nGetting started\n---------------\n\nConnection\n~~~~~~~~~~\n\nYou can set your environment variable for the connection of InfluxDB in order to override the default values :\n\n::\n\n    INFLUXDB_URL=http://localhost:8086\n    INFLUXDB_DATABASE_NAME=default\n\n    #Optional\n    INFLUXDB_USER=admin\n    INFLUXDB_PASSWORD=changme\n\nThen you just have to import the influxable package and create an instance of *Influxable* :\n\n.. code:: python\n\n    from influxable import Influxable\n\n    client = Influxable()\n\nYou can also set connection variable in *Influxable* constructor :\n\n.. code:: python\n\n    # Without authentication\n\n    client = Influxable(\n        base_url='http://localhost:8086',\n        database_name='default',\n    )\n\n    # With authentication\n\n    client = Influxable(\n        base_url='http://localhost:8086',\n        database_name='default',\n        user='admin',\n        password='changeme',\n    )\n\nMeasurement\n~~~~~~~~~~~\n\n.. code:: python\n\n    from influxable import attributes, serializers\n    from influxable.measurement import Measurement\n\n    class TemperatureMeasurement(Measurement):\n        parser_class = serializers.MeasurementPointSerializer # Default\n        measurement_name = 'temperature'\n\n        time = attributes.TimestampFieldAttribute()\n        phase = attributes.TagFieldAttribute()\n        value = attributes.FloatFieldAttribute()\n\nFields :\n\n-  GenericFieldAttribute (IntegerFieldAttribute, FloatFieldAttribute, StringFieldAttribute, BooleanFieldAttribute)\n\n-  TagFieldAttribute\n\n-  TimestampFieldAttribute, DateTimeFieldAttribute\n\nParser Classes :\n\n-  MeasurementPointSerializer (default)\n\n-  JsonSerializer\n\n-  FormattedSerieSerializer\n\n-  FlatFormattedSerieSerializer\n\n-  FlatSimpleResultSerializer\n\n-  PandasSerializer\n\nSimple Measurement\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from influxable.measurement import SimpleMeasurement\n\n    my_measurement = SimpleMeasurement('temperature', ['value'], ['phase'])\n\nInstanciation\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    point = TemperatureMeasurement(\n      time=1568970572,\n      phase=\"HOT\",\n      value=23.5,\n    )\n\nQuery\n~~~~~\n\nYou can query with *Measurement.get\\_query()* :\n\n.. code:: python\n\n    from influxable.db import Field\n\n    points = TemperatureMeasurement\\\n      .get_query()\\\n      .select('phase', 'value')\\\n      .where(\n         Field('value') > 15.2,\n         Field('value') < 30.5,\n      )\\\n      .limit(100)\n      .evaluate()\n\nYou can also query with *Query* :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n\n    points = Query()\\\n      .select('phase', 'value')\\\n      .from_measurements('temperature')\\\n      .where(\n         Field('value') > 15.2,\n         Field('value') < 30.5,\n      )\\\n      .limit(100)\n      .execute()\n\nSaving Data\n~~~~~~~~~~~\n\nYou can create data by using *Measurement.bulk\\_save()*\n\n.. code:: python\n\n    points = [\n        TemperatureMeasurement(phase=\"HOT\",value=10,time=1463289075),\n        TemperatureMeasurement(phase=\"COLD\",value=10,time=1463289076),\n    ]\n    TemperatureMeasurement.bulk_save(points)\n\nYou can also create data with *BulkInsertQuery*\n\n.. code:: python\n\n    str_query = '''\n    temperature,phase=HOT value=10 1463289075000000000\n    temperature,phase=COLD value=10 1463289076000000000\n    '''\n\n    raw_query = BulkInsertQuery(str_query)\n    res = raw_query.execute()\n\nAuto Generation of Measurements\n-------------------------------\n\nYou can automatically generate measurement classes file with the bash command *autogenerate*\n\n.. code:: bash\n\n    influxable autogenerate #(default to auto_generate_measurement.py)\n    influxable autogenerate -o measurement.py\n\nHere is the output generated file :\n\n.. code:: python\n\n    # auto_generate_measurement.py\n\n    from influxable import attributes\n    from influxable.measurement import Measurement\n\n\n    class CpuMeasurement(Measurement):\n        measurement_name = 'cpu'\n\n        time = attributes.TimestampFieldAttribute(precision='s')\n        value = attributes.FloatFieldAttribute()\n        host = attributes.TagFieldAttribute()\n\nInfluxable commands\n-------------------\n\n-  *autogenerate* : automatic generation of measurement classes\n\n.. code:: bash\n\n    influxable autogenerate #(default to auto_generate_measurement.py)\n    influxable autogenerate -o measurement.py\n\n-  *populate* : create a measurement filled with a set of random data\n\n.. code:: bash\n\n    influxable populate\n    influxable populate --min_value 5 --max_value 35 -s 2011-01-01T00:00:00 -id 1\n    influxable populate --help\n\nInfluxable API\n--------------\n\nInfluxable\n~~~~~~~~~~\n\nThe Influxable main app class is a singleton. You can access it via the method *Influxable.get\\_instance()*\n\n\\_\\_init\\_\\_():\n^^^^^^^^^^^^^^^\n\n-  base\\_url : url to connect to the InfluxDB server (default = 'http://localhost:8086')\n\n-  user : authentication user name (default = 'admin')\n\n-  password : authentication user password (default = 'changeme')\n\n-  database\\_name : name of the database (default = 'default')\n\ncreate\\_connection() -> Connection:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  base\\_url : url to connect to the InfluxDB server (default = 'http://localhost:8086')\n\n-  user : authentication user name (default = 'admin')\n\n-  password : authentication user password (default = 'changeme')\n\n-  database\\_name : name of the database (default = 'default')\n\nping() -> bool:\n^^^^^^^^^^^^^^^\n\n-  verbose : enables verbose mode (default = True)\n\nexecute\\_query() -> json():\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  query: influxdb query to execute\n-  method: http method of the request (default='get')\n-  chunked: if enabled, responses will be chunked by series or by every 10,000 points (default=False)\n-  epoch: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default='ns')\n-  pretty: if enadble, the json response is pretty-printed (default=False)\n\nwrite\\_points() -> bool:\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  points: data to write in InfluxDB line protocol format\n\nex: mymeas,mytag1=1 value=21 1463689680000000000\n\n-  precision: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default='ns')\n-  consistency: sets the write consistency for the point [any,one,quorum,all] (default='all')\n-  retention\\_policy\\_name: sets the target retention policy for the write (default='DEFAULT')\n\nInfluxDBApi\n~~~~~~~~~~~\n\nget\\_debug\\_requests() -> bool:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  request : instance of InfluxDBRequest\n\nget\\_debug\\_vars() -> bool:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  request : instance of InfluxDBRequest\n\nping() -> bool:\n^^^^^^^^^^^^^^^\n\n-  request : instance of InfluxDBRequest\n\n-  verbose : enables verbose mode (default = True)\n\nexecute\\_query() -> json():\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  request : instance of InfluxDBRequest\n-  query: influxdb query to execute\n-  method: http method of the request (default='get')\n-  chunked: if enabled, responses will be chunked by series or by every 10,000 points (default=False)\n-  epoch: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default='ns')\n-  pretty: if enadble, the json response is pretty-printed (default=False)\n\nwrite\\_points() -> bool:\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  request : instance of InfluxDBRequest\n\n-  points: data to write in InfluxDB line protocol format\n\nex: mymeas,mytag1=1 value=21 1463689680000000000\n\n-  precision: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default='ns')\n-  consistency: sets the write consistency for the point [any,one,quorum,all] (default='all')\n-  retention\\_policy\\_name: sets the target retention policy for the write (default='DEFAULT')\n\nConnection\n~~~~~~~~~~\n\n\\_\\_init\\_\\_():\n^^^^^^^^^^^^^^^\n\n-  base\\_url : url to connect to the InfluxDB server (default = 'http://localhost:8086')\n\n-  user : authentication user name (default = 'admin')\n\n-  password : authentication user password (default = 'changeme')\n\n-  database\\_name : name of the database (default = 'default')\n\ncreate() -> Connection:\n^^^^^^^^^^^^^^^^^^^^^^^\n\n-  base\\_url : url to connect to the InfluxDB server (default = 'http://localhost:8086')\n\n-  user : authentication user name (default = 'admin')\n\n-  password : authentication user password (default = 'changeme')\n\n-  database\\_name : name of the database (default = 'default')\n\nMeasurement\n~~~~~~~~~~~\n\nfields\n^^^^^^\n\nMust be an instance of class located in *influxable.attributes*\n\n-  GenericFieldAttribute\n\n-  IntegerFieldAttribute\n\n-  FloatFieldAttribute\n\n-  StringFieldAttribute\n\n-  BooleanFieldAttribute\n\n-  TagFieldAttribute\n\n-  TimestampFieldAttribute\n\n-  DateTimeFieldAttribute\n\nExample :\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        time = TimestampFieldAttribute(auto_now=True, precision='s')\n        phase = TagFieldAttribute()\n        value = IntegerFieldAttribute()\n\nparser\\_class\n^^^^^^^^^^^^^\n\nMust be a class of *influxable.serializers* :\n\n-  MeasurementPointSerializer (default)\n\n-  JsonSerializer\n\n-  FormattedSerieSerializer\n\n-  FlatFormattedSerieSerializer\n\n-  FlatSimpleResultSerializer\n\n-  PandasSerializer\n\nmeasurement\\_name\n^^^^^^^^^^^^^^^^^\n\nName of the measurement in InfluxDB\n\n\\_\\_init\\_\\_():\n^^^^^^^^^^^^^^^\n\nSet the attribute value of a Measurement\n\nExample\n\n.. code:: python\n\n    point = MySensorMeasurement(value=0.5, phase=\"MOON\")\n\nget\\_query() -> Query:\n^^^^^^^^^^^^^^^^^^^^^^\n\nReturn an instance of Query which\n\nExample\n\n.. code:: python\n\n    points = MySensorMeasurement\\\n      .get_query()\\\n      .select()\\\n      .where()\\\n      .limit()\\\n      .evaluate()\n\ndict()\n^^^^^^\n\nReturn a dict of the point values\n\nExample\n\n.. code:: python\n\n    point = MySensorMeasurement(value=0.5, phase=\"MOON\")\n\n    point.dict()\n\n    # {'time': Decimal('1568970572'), 'phase': 'MOON', 'value': 0.5}\n\nitems()\n^^^^^^^\n\nReturn an item list of the point values\n\nExample\n\n.. code:: python\n\n    point = MySensorMeasurement(value=0.5, phase=\"MOON\")\n\n    point.items()\n\n    # dict_items([('time', Decimal('1568970572')), ('phase', 'MOON'), ('value', 0.5)])\n\nbulk\\_save()\n^^^^^^^^^^^^\n\nSave a list of measurement point\n\n.. code:: python\n\n    points = [\n        MySensorMeasurement(phase=\"moon\",value=5,time=1463489075),\n        MySensorMeasurement(phase=\"moon\",value=7,time=1463489076),\n        MySensorMeasurement(phase=\"sun\",value=8,time=1463489077),\n    ]\n    MySensorMeasurement.bulk_save(points)\n\nAttributes\n~~~~~~~~~~\n\nGenericFieldAttribute\n^^^^^^^^^^^^^^^^^^^^^\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        temperature_value = GenericFieldAttribute(\n          attribute_name=\"temp_v1\",\n          default=\"15\",\n          is_nullable=True,\n          enforce_cast=False,\n        )\n\nIntegerFieldAttribute\n^^^^^^^^^^^^^^^^^^^^^\n\n-  min\\_value : an error is raised if the value is less than the min\\_value\n\n-  max\\_value : an error is raised if the value is greater than the max\\_value\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        temperature_value = IntegerFieldAttribute(\n          min_value=10,\n          max_value=30,\n        )\n\nFloatFieldAttribute\n^^^^^^^^^^^^^^^^^^^\n\n-  max\\_nb\\_decimals : set the maximal number of decimals to display\n\n-  min\\_value : an error is raised if the value is less than the min\\_value\n\n-  max\\_value : an error is raised if the value is greater than the max\\_value\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        value = FloatFieldAttribute(\n          max_nb_decimals=5,\n        )\n\nStringFieldAttribute\n^^^^^^^^^^^^^^^^^^^^\n\n-  choices : an error is raised if the value is not in the list of string options\n\n-  max\\_length : an error is raised if the string value length is greater than the max\\_length\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        position = FloatFieldAttribute(\n          choices=['first', 'last'],\n          max_length=7,\n        )\n\nBooleanFieldAttribute\n^^^^^^^^^^^^^^^^^^^^^\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        is_marked = BooleanFieldAttribute(\n          default=False,\n        )\n\nTagFieldAttribute\n^^^^^^^^^^^^^^^^^\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        phase = TagFieldAttribute(\n          default='MOON',\n        )\n\nTimestampFieldAttribute\n^^^^^^^^^^^^^^^^^^^^^^^\n\n-  auto\\_now : Set automatically the current date (default=False)\n\n-  precision : Set the timestamp precision which must be one of [ns,u,ms,s,m,h] (default= 'ns')\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        time = TimestampFieldAttribute(\n          auto_now=True,\n          precision='s',\n        )\n\nDateTimeFieldAttribute\n^^^^^^^^^^^^^^^^^^^^^^\n\n-  str\\_format : Set the arrow format of the timestamp to display (default: \"YYYY-MM-DD HH:mm:ss\")\n\n-  auto\\_now : Set automatically the current date\n\n-  precision : Set the timestamp precision which must be one of [ns,u,ms,s,m,h]\n\n-  attribute\\_name : real name of the measurement attribute in database\n\n-  default : set a default value if it is not filled at the instanciation\n\n-  is\\_nullable : if False, it will raise an error if the value is null (default=True)\n\n-  enforce\\_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n\n        date = DateTimeFieldAttribute(\n          attribute_name='time',\n          auto_now=True,\n          str_format='YYYY-MM-DD',\n        )\n\nInfluxDBResponse\n~~~~~~~~~~~~~~~~\n\n\\_\\_init\\_\\_():\n^^^^^^^^^^^^^^^\n\n-  raw\\_json : the raw json response object\n\nraw\n^^^\n\nReturn the raw\\_json value\n\nmain\\_serie\n^^^^^^^^^^^\n\nReturn the first serie from the *series* field in the raw\\_json value\n\nseries\n^^^^^^\n\nReturn the *series* field in the raw\\_json value\n\nerror\n^^^^^\n\nReturn the *error* field in the raw\\_json value\n\nExample of json raw response :\n\n.. code:: python\n\n    {\n       \"results\":[\n          {\n             \"statement_id\":0,\n             \"series\":[\n                {\n                   \"name\":\"mymeas\",\n                   \"columns\":[\n                      \"time\",\n                      \"myfield\",\n                      \"mytag1\",\n                      \"mytag2\"\n                   ],\n                   \"values\":[\n                      [\n                         \"2017-03-01T00:16:18Z\",\n                         33.1,\n                         null,\n                         null\n                      ],\n                      [\n                         \"2017-03-01T00:17:18Z\",\n                         12.4,\n                         \"12\",\n                         \"14\"\n                      ]\n                   ]\n                }\n             ]\n          }\n       ]\n    }\n\nSerializers\n~~~~~~~~~~~\n\nSerializers can be used in *parser\\_class* field of *Measurement* class.\n\n.. code:: python\n\n    class MySensorMeasurement(Measurement):\n        measurement_name = 'mysensor'\n        parser_class = serializers.BaseSerializer\n\nIt allow to change the output response format of a influxb request\n\n.. code:: python\n\n    # res is formatted with BaseSerializer\n    res = MySensorMeasurement.get_query().limit(10).evaluate()\n\nBaseSerializer\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # res is formatted with BaseSerializer\n    res\n    {'results': [{'statement_id': 0, 'series': [{'name': 'mysamplemeasurement', 'columns': ['time', 'value'], 'values': [[1570481055000000000, 10], [1570481065000000000, 20], [1570481075000000000, 30]]}]}]}\n\nJsonSerializer\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # res is formatted with JsonSerializer\n    res\n    '{\"results\": [{\"statement_id\": 0, \"series\": [{\"name\": \"mysamplemeasurement\", \"columns\": [\"time\", \"value\"], \"values\": [[1570481055000000000, 10], [1570481065000000000, 20], [1570481075000000000, 30]]}]}]}'\n\nFormattedSerieSerializer\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # res is formatted with FormattedSerieSerializer\n    res\n    [{'mysamplemeasurement': [{'time': 1570481055000000000, 'value': 10}, {'time': 1570481065000000000, 'value': 20}, {'time': 1570481075000000000, 'value': 30}]}]\n\nFlatFormattedSerieSerializer\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # res is formatted with FlatFormattedSerieSerializer\n    [{'time': 1570481055000000000, 'value': 10}, {'time': 1570481065000000000, 'value': 20}, {'time': 1570481075000000000, 'value': 30}]\n\nFlatSimpleResultSerializer\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis serializer is used only when the result set contains only one column\n\n.. code:: python\n\n    res = InfluxDBAdmin.show_databases()\n\n    # res is formatted with FlatSimpleResultSerializer\n    res\n    ['_internal', 'example', 'test', 'telegraf', 'mydb', ...]\n\nFlatSingleValueSerializer\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis serializer is used only when the result set contains only one value\n\n.. code:: python\n\n    res = InfluxDBAdmin.show_measurement_cardinality()\n\n    # res is formatted with FlatSingleValueSerializer\n    res\n    2\n\nPandasSerializer\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # res is formatted with PandasSerializer\n    res                   time  value\n    0  1570481055000000000     10\n    1  1570481065000000000     20\n    2  1570481075000000000     30\n\nMeasurementPointSerializer\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis is the default serializer class for Measurement\n\n.. code:: python\n\n    [<MySensorMeasurement object at 0x7f49a16227f0>, <MySensorMeasurement object at 0x7f49a16228d0>, <MySensorMeasurement object at 0x7f49a1622438>]\n\nRaw Query\n~~~~~~~~~\n\n-  str\\_query\n\nExample :\n\n.. code:: python\n\n    from influxable.db import RawQuery\n    str_query = 'SHOW DATABASES'\n    res = RawQuery(str_query).execute()\n\n.. code:: python\n\n    from influxable.db import RawQuery\n    str_query = 'SELECT * FROM temperature LIMIT 10'\n    res = RawQuery(str_query).execute()\n\nQuery\n~~~~~\n\nYou can generate an instance of Query via the initial Query constructor or from a measurement.\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query\n    query = Query()\n    ...\n\n.. code:: python\n\n    query = MySensorMeasurement.get_query()\n    ...\n\nMethods :\n\nfrom\\_measurements()\n^^^^^^^^^^^^^^^^^^^^\n\n-  \\*measurements\n\nExample :\n\n.. code:: python\n\n    query = Query()\\\n      .from_measurements('measurement1', 'measurement2')\n\nRender :\n\n.. code:: sql\n\n    FROM measurement1, measurement2\n\nselect()\n^^^^^^^^\n\n-  \\*fields\n\nExample :\n\n.. code:: python\n\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\n\nRender :\n\n.. code:: sql\n\n    SELECT value, phase\n\nwhere()\n^^^^^^^\n\n-  \\*criteria\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\n\nRender :\n\n.. code:: sql\n\n    WHERE param1 > 800 AND param1 < 900\n\nlimit()\n^^^^^^^\n\n-  value\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .limit(10)\n\nRender :\n\n.. code:: sql\n\n    LIMIT 10\n\nslimit()\n^^^^^^^^\n\n-  value\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .limit(10)\\\n      .slimit(5)\n\nRender :\n\n.. code:: sql\n\n    SLIMIT 5\n\noffset()\n^^^^^^^^\n\n-  value\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .offset(10)\n\nRender :\n\n.. code:: sql\n\n    OFFSET 10\n\nsoffset()\n^^^^^^^^^\n\n-  value\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .offset(10)\\\n      .soffset(5)\n\nRender :\n\n.. code:: sql\n\n    SOFFSET 5\n\nexecute()\n^^^^^^^^^\n\nExecute the query and return the response\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    res = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .execute()\n    res\n\nResult :\n\n.. code:: python\n\n    {'results': [{'statement_id': 0, 'series': [{'name': 'measurement1', 'columns': ['time', 'value'], 'values': [[1570481055000000000, 10], [1570481065000000000, 20], [1570481075000000000, 30]]}]}]}\n\nevaluate()\n^^^^^^^^^^\n\nExecute the query and return the serialized response\n\n-  parser\\_class (default=BaseSerializer for Query and MeasurementPointSerializer for Measurement)\n\nExample with Query :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    res = Query()\\\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .evaluate()\n    res\n\nResult :\n\n.. code:: python\n\n    {'results': [{'statement_id': 0, 'series': [{'name': 'measurement1', 'columns': ['time', 'value'], 'values': [[1570481055000000000, 10], [1570481065000000000, 20], [1570481075000000000, 30]]}]}]}\n\nExample with Measurement :\n\n.. code:: python\n\n    from influxable.db import Field\n    points = MySensorMeasurement.get_query()\n      .select('param1', 'param2')\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .evaluate()\n    points\n\nResult :\n\n.. code:: python\n\n    [<MySensorMeasurement object at 0x7f49a16227f0>, <MySensorMeasurement object at 0x7f49a16228d0>, <MySensorMeasurement object at 0x7f49a1622438>]\n\ncount()\n^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .count()\n\nRender :\n\n.. code:: sql\n\n    SELECT COUNT(*)\n\ndistinct()\n^^^^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .distinct()\n\nRender :\n\n.. code:: sql\n\n    SELECT DISTINCT(*)\n\nintegral()\n^^^^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .integral()\n\nRender :\n\n.. code:: sql\n\n    SELECT INTEGRAL(*)\n\nmean()\n^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .mean()\n\nRender :\n\n.. code:: sql\n\n    SELECT MEAN(*)\n\nmedian()\n^^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .median()\n\nRender :\n\n.. code:: sql\n\n    SELECT MEDIAN(*)\n\nmode()\n^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .mode()\n\nRender :\n\n.. code:: sql\n\n    SELECT MODE(*)\n\nspread()\n^^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .spread()\n\nRender :\n\n.. code:: sql\n\n    SELECT SPREAD(*)\n\nstd\\_dev()\n^^^^^^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .std_dev()\n\nRender :\n\n.. code:: sql\n\n    SELECT STDDEV(*)\n\nsum()\n^^^^^\n\n-  value (default='\\*')\n\nExample :\n\n.. code:: python\n\n    from influxable.db import Query, Field\n    query = Query()\\\n      .from_measurements('measurement1')\\\n      .where(\n          Field('param1') > 800,\n          Field('param1') < 900,\n      )\\\n      .sum()\n\nRender :\n\n.. code:: sql\n\n    SELECT SUM(*)\n\nQuery aggregations function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsage :\n\n.. code:: python\n\n    from influxable.db.function import aggregations\n    res = Query()\\\n        .select(aggregations.Sum('value'))\\\n        .from_measurements('param1')\\\n        .execute()\n\nCount\n^^^^^\n\nDistinct\n^^^^^^^^\n\nIntegral\n^^^^^^^^\n\nMean\n^^^^\n\nMedian\n^^^^^^\n\nMode\n^^^^\n\nSpread\n^^^^^^\n\nStdDev\n^^^^^^\n\nSum\n^^^\n\nQuery selectors function\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsage :\n\n.. code:: python\n\n    from influxable.db.function import selectors\n    res = Query()\\\n        .select(selectors.Min('value'), selectors.Max('value'))\\\n        .from_measurements('param1')\\\n        .execute()\n\nBottom\n^^^^^^\n\nFirst\n^^^^^\n\nLast\n^^^^\n\nMax\n^^^\n\nMin\n^^^\n\nPercentile\n^^^^^^^^^^\n\nSample\n^^^^^^\n\nTop\n^^^\n\nQuery transformations function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsage :\n\n.. code:: python\n\n    from influxable.db.function import selectors, transformations\n    res = Query()\\\n        .select(transformations.Abs('value'))\\\n        .from_measurements('param1')\\\n        .execute()\n\n.. code:: python\n\n    from influxable.db.function.selectors import Min, Max\n    from influxable.db.function.transformations import Abs\n    res = Query()\\\n        .select(Abs(Min('value')), Abs(Max('value')))\\\n        .from_measurements('param1')\\\n        .execute()\n\nAbs\n^^^\n\nACos\n^^^^\n\nASin\n^^^^\n\nATan\n^^^^\n\nATan2\n^^^^^\n\nCeil\n^^^^\n\nCos\n^^^\n\nCumulativeSum\n^^^^^^^^^^^^^\n\nDerivative\n^^^^^^^^^^\n\nDifference\n^^^^^^^^^^\n\nElapsed\n^^^^^^^\n\nExp\n^^^\n\nFloor\n^^^^^\n\nHistogram\n^^^^^^^^^\n\nLn\n^^\n\nLog\n^^^\n\nLog2\n^^^^\n\nLog10\n^^^^^\n\nMovingAverage\n^^^^^^^^^^^^^\n\nNonNegativeDerivative\n^^^^^^^^^^^^^^^^^^^^^\n\nNonNegativeDifference\n^^^^^^^^^^^^^^^^^^^^^\n\nPow\n^^^\n\nRound\n^^^^^\n\nSin\n^^^\n\nSqrt\n^^^^\n\nTan\n^^^\n\nInfluxDBAdmin\n~~~~~~~~~~~~~\n\nalter\\_retention\\_policy()\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  policy\\_name\n\n-  duration (default=None)\n\n-  replication (default=None)\n\n-  shard\\_duration (default=None)\n\n-  is\\_default (default=False)\n\n.. code:: sql\n\n    ALTER RETENTION POLICY {policy_name} ON {database_name} [DURATION {duration} REPLICATION {replication} SHARD DURATION {shard_duration} DEFAULT]\n\ncreate\\_database()\n^^^^^^^^^^^^^^^^^^\n\n-  new\\_database\\_name\n\n-  duration (default=None)\n\n-  replication (default=None)\n\n-  shard\\_duration (default=None)\n\n-  policy\\_name (default=False)\n\n.. code:: sql\n\n    CREATE DATABASE {new_database_name} [WITH DURATION {duration} REPLICATION {replication} SHARD DURATION {shard_duration} NAME {policy_name}]\n\ncreate\\_retention\\_policy()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  policy\\_name\n\n-  duration (default=None)\n\n-  replication (default=None)\n\n-  shard\\_duration (default=None)\n\n-  is\\_default (default=False)\n\n.. code:: sql\n\n    CREATE RETENTION POLICY {policy_name} ON {database_name} [DURATION {duration} REPLICATION {replication} SHARD DURATION {shard_duration} DEFAULT]\n\ncreate\\_subscription()\n^^^^^^^^^^^^^^^^^^^^^^\n\n-  subscription\\_name\n\n-  hosts\n\n-  any (default=False)\n\n.. code:: sql\n\n    CREATE SUBSCRIPTION {subscription_name} ON {database_name} DESTINATIONS ANY/ALL {hosts}\n\ncreate\\_user()\n^^^^^^^^^^^^^^\n\n-  user\\_name\n\n-  password\n\n-  with\\_privileges (default=False)\n\n.. code:: sql\n\n    CREATE USER {user_name} WITH PASSWORD {password} [WITH ALL PRIVILEGES]\n\ndelete()\n^^^^^^^^\n\n-  measurements (default=[])\n\n-  criteria (default=[])\n\n.. code:: sql\n\n    DELETE FROM {measurements} WHERE {criteria}\n\ndrop\\_continuous\\_query()\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  query\\_name\n\n.. code:: sql\n\n    DROP CONTINUOUS QUERY {query_name} ON {database_name}\n\ndrop\\_database()\n^^^^^^^^^^^^^^^^\n\n-  database\\_name\\_to\\_delete\n\n.. code:: sql\n\n    DROP DATABASE {database_name_to_delete}\n\ndrop\\_measurement()\n^^^^^^^^^^^^^^^^^^^\n\n-  measurement\\_name\n\n.. code:: sql\n\n    DROP MEASUREMENT {measurement_name}\n\ndrop\\_retention\\_policy()\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  policy\\_name\n\n.. code:: sql\n\n    DROP RETENTION POLICY {policy_name} ON {database_name}\n\ndrop\\_series()\n^^^^^^^^^^^^^^\n\n-  measurements (default=[])\n\n-  criteria (default=[])\n\n.. code:: sql\n\n    DROP SERIES FROM {measurements} WHERE {criteria}\n\ndrop\\_subscription()\n^^^^^^^^^^^^^^^^^^^^\n\n-  subscription\\_name\n\n.. code:: sql\n\n    DROP SUBSCRIPTION {subscription_name} ON {full_database_name}\n\ndrop\\_user()\n^^^^^^^^^^^^\n\n-  user\\_name\n\n.. code:: sql\n\n    DROP USER {user_name}\n\nexplain()\n^^^^^^^^^\n\n-  query\n\n-  analyze (default=False)\n\n.. code:: sql\n\n    EXPLAIN [ANALYZE] {query}\n\ngrant()\n^^^^^^^\n\n-  privilege\n\n-  user\\_name\n\n.. code:: sql\n\n    GRANT {privilege} ON {database_name} TO {user_name}\n\nkill()\n^^^^^^\n\n-  query\\_id\n\n.. code:: sql\n\n    KILL QUERY {query_id}\n\nrevoke()\n^^^^^^^^\n\n-  privilege\n\n-  user\\_name\n\n.. code:: sql\n\n    REVOKE {privilege} ON {database_name} FROM {user_name}\n\nshow\\_field\\_key\\_cardinality()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  exact (default=False)\n\n.. code:: sql\n\n    SHOW FIELD KEY [EXACT] CARDINALITY\n\nshow\\_measurement\\_cardinality()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  exact (default=False)\n\n.. code:: sql\n\n    SHOW MEASUREMENT [EXACT] CARDINALITY\n\nshow\\_series\\_cardinality()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  exact (default=False)\n\n.. code:: sql\n\n    SHOW SERIES [EXACT] CARDINALITY\n\nshow\\_tag\\_key\\_cardinality()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  key\n\n-  exact (default=False)\n\n.. code:: sql\n\n    SHOW TAG VALUES [EXACT] CARDINALITY WITH KEY = {key}\n\nshow\\_continuous\\_queries()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW CONTINUOUS QUERIES\n\nshow\\_diagnostics()\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW DIAGNOSTICS\n\nshow\\_field\\_keys()\n^^^^^^^^^^^^^^^^^^^\n\n-  measurements (default=[])\n\n.. code:: sql\n\n    SHOW FIELD KEYS FROM {measurements}\n\nshow\\_grants()\n^^^^^^^^^^^^^^\n\n-  user\\_name\n\n.. code:: sql\n\n    SHOW GRANTS FOR {user_name}\n\nshow\\_databases()\n^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW DATABASES\n\nshow\\_measurements()\n^^^^^^^^^^^^^^^^^^^^\n\n-  criteria (default=[])\n\n.. code:: sql\n\n    SHOW MEASUREMENTS WHERE {criteria}\n\nshow\\_queries()\n^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW QUERIES\n\nshow\\_retention\\_policies()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW RETENTION POLICIES\n\nshow\\_series()\n^^^^^^^^^^^^^^\n\n-  measurements (default=[])\n\n-  criteria (default=[])\n\n-  limit (default=None)\n\n-  offset (default=None)\n\n.. code:: sql\n\n    SHOW SERIES ON {database_name} [FROM {measurements} WHERE {criteria} LIMIT {limit} OFFSET {offset}]\n\nshow\\_stats()\n^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW STATS\n\nshow\\_shards()\n^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW SHARDS\n\nshow\\_shard\\_groups()\n^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW SHARD GROUPS\n\nshow\\_subscriptions()\n^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW SUBSCRIPTIONS\n\nshow\\_tag\\_keys()\n^^^^^^^^^^^^^^^^^\n\n-  measurements (default=[])\n\n.. code:: sql\n\n    SHOW TAG KEYS [FROM {measurements}]\n\nshow\\_tag\\_values()\n^^^^^^^^^^^^^^^^^^^\n\n-  key\n\n-  measurements (default=[])\n\n.. code:: sql\n\n    SHOW TAG VALUES [FROM {measurements}] WITH KEY = {key}\n\nshow\\_users()\n^^^^^^^^^^^^^\n\n.. code:: sql\n\n    SHOW USERS\n\nExceptions\n~~~~~~~~~~\n\nInfluxDBException\n^^^^^^^^^^^^^^^^^\n\nInfluxDBError\n^^^^^^^^^^^^^\n\nInfluxDBConnectionError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidResponseError\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidChoiceError\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidTypeError\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidURLError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBBadRequestError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBBadQueryError\n^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidNumberError\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBInvalidTimestampError\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBUnauthorizedError\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfluxDBAttributeValueError\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTesting\n-------\n\nFirst, you need to install pytest via the file *requirements-test.txt*\n\n.. code:: bash\n\n    pip install -r requirements-test.txt\n\nThen, you can launch the *pytest* command.\n\n.. code:: python\n\n    pytest -v\n\nSupporting\n----------\n\nFeel free to post issues your feedback or if you reach a problem with influxable library.\n\nIf you want to contribute, please use the pull requests section.\n\nVersioning\n----------\n\nWe use `SemVer <http://semver.org/>`__ for versioning. For the versions available, see the `tags on this repository <https://github.com/Javidjms/influxable/releases>`__\n\nContributors\n------------\n\n-  `Javid Mougamadou <https://github.com/Javidjms>`__\n\nCredits\n-------\n\n-  Logo designed by `Maxime Bergerard <https://github.com/maximebergerard>`__\n\nReferences\n----------\n\n-  `Influxdb Website <https://docs.influxdata.com/platform/introduction>`__\n\n-  `Influxdb Github Repository <https://github.com/influxdata/influxdb>`__\n\n-  `Influxdb-Python Github Repository <https://github.com/influxdata/influxdb-python>`__\n\nLicense\n-------\n\n`MIT <LICENSE.txt>`__\n\n.. |pypi version| image:: https://img.shields.io/badge/pypi-1.2.0-blue\n   :target: https://pypi.org/project/influxable/\n.. |build status| image:: https://img.shields.io/badge/build-passing-green\n.. |code coverage| image:: https://img.shields.io/badge/coverage-100-green\n.. |license: MIT| image:: https://img.shields.io/badge/License-MIT-blue.svg", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/Javidjms/influxable/archive/1.2.0.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Javidjms/influxable", "keywords": "python,influxdb,odm,orm,driver,client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "influxable", "package_url": "https://pypi.org/project/influxable/", "platform": "", "project_url": "https://pypi.org/project/influxable/", "project_urls": {"Download": "https://github.com/Javidjms/influxable/archive/1.2.0.zip", "Homepage": "https://github.com/Javidjms/influxable", "Source": "https://github.com/Javidjms/influxable"}, "release_url": "https://pypi.org/project/influxable/1.2.0/", "requires_dist": null, "requires_python": ">=3.0.*", "summary": "A lightweight python ORM / ODM for InfluxDB", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62979b764c5ea5a04785eec44fa6f52715b53f86/2e2f617274776f726b2f6c6f676f2e737667\">\n</div>\n<div id=\"influxable\">\n<h2>Influxable</h2>\n<p><a href=\"https://pypi.org/project/influxable/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1d4b113594b3250d8a6fe17d81629ef8284de3e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d312e322e302d626c7565\"></a> <img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e3e6b87b65d971f254d4334e8c76bbec0f5cb3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d677265656e\"> <img alt=\"code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7bfabe2a633452d12b252bd39068d40b7012f9a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302d677265656e\"> <img alt=\"license: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></p>\n<p>A lightweight python ORM / ODM / Client for InfluxDB</p>\n<div id=\"note\">\n<h3>Note</h3>\n<p>This project is currently in development.</p>\n<p>A better documentation and testing scripts will be added in the next release.</p>\n</div>\n<div id=\"genesis\">\n<h3>Genesis</h3>\n<p>I worked on a project with InfluxDB. I needed to build an API for InfluxDB and to plug with Python libraries (scipy, pandas, etc \u2026).</p>\n<p>That\u2019s why I decided to create this repository in order to deal with InfluxDB in a smooth way and to manipulate Python object.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Add automation for measurement class generation (command: <em>autogenerate</em>)</li>\n<li>Admin commands allowing to manage the database (ex: <em>create_user()</em>, <em>show_series()</em>).</li>\n<li>Measurement class allowing to make queries in order to fetch/save points (ex: <em>Measurement.where()</em>, <em>Measurement.bulk_save()</em>).</li>\n<li>Different serializers for easy data manipulation (ex: <em>PandasSerializer</em>).</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Python 3 (Tested with Python 3.7.3)</li>\n<li>InfluxDB (Tested with InfluxDB 1.5.4)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The package is available in pypi. You can install it via pip :</p>\n<pre>pip install influxable\n</pre>\n</div>\n<div id=\"getting-started\">\n<h3>Getting started</h3>\n<div id=\"connection\">\n<h4>Connection</h4>\n<p>You can set your environment variable for the connection of InfluxDB in order to override the default values :</p>\n<pre>INFLUXDB_URL=http://localhost:8086\nINFLUXDB_DATABASE_NAME=default\n\n#Optional\nINFLUXDB_USER=admin\nINFLUXDB_PASSWORD=changme\n</pre>\n<p>Then you just have to import the influxable package and create an instance of <em>Influxable</em> :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable</span> <span class=\"kn\">import</span> <span class=\"n\">Influxable</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Influxable</span><span class=\"p\">()</span>\n</pre>\n<p>You can also set connection variable in <em>Influxable</em> constructor :</p>\n<pre><span class=\"c1\"># Without authentication</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Influxable</span><span class=\"p\">(</span>\n    <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8086'</span><span class=\"p\">,</span>\n    <span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># With authentication</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Influxable</span><span class=\"p\">(</span>\n    <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"s1\">'http://localhost:8086'</span><span class=\"p\">,</span>\n    <span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">,</span>\n    <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'changeme'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"measurement\">\n<h4>Measurement</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable</span> <span class=\"kn\">import</span> <span class=\"n\">attributes</span><span class=\"p\">,</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">influxable.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">Measurement</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TemperatureMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">parser_class</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">MeasurementPointSerializer</span> <span class=\"c1\"># Default</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'temperature'</span>\n\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">TimestampFieldAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">TagFieldAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">FloatFieldAttribute</span><span class=\"p\">()</span>\n</pre>\n<p>Fields :</p>\n<ul>\n<li>GenericFieldAttribute (IntegerFieldAttribute, FloatFieldAttribute, StringFieldAttribute, BooleanFieldAttribute)</li>\n<li>TagFieldAttribute</li>\n<li>TimestampFieldAttribute, DateTimeFieldAttribute</li>\n</ul>\n<p>Parser Classes :</p>\n<ul>\n<li>MeasurementPointSerializer (default)</li>\n<li>JsonSerializer</li>\n<li>FormattedSerieSerializer</li>\n<li>FlatFormattedSerieSerializer</li>\n<li>FlatSimpleResultSerializer</li>\n<li>PandasSerializer</li>\n</ul>\n</div>\n<div id=\"simple-measurement\">\n<h4>Simple Measurement</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleMeasurement</span>\n\n<span class=\"n\">my_measurement</span> <span class=\"o\">=</span> <span class=\"n\">SimpleMeasurement</span><span class=\"p\">(</span><span class=\"s1\">'temperature'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'phase'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"instanciation\">\n<h4>Instanciation</h4>\n<pre><span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">TemperatureMeasurement</span><span class=\"p\">(</span>\n  <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1568970572</span><span class=\"p\">,</span>\n  <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"HOT\"</span><span class=\"p\">,</span>\n  <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">23.5</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"query\">\n<h4>Query</h4>\n<p>You can query with <em>Measurement.get_query()</em> :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">TemperatureMeasurement</span>\\\n  <span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'phase'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n     <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mf\">15.2</span><span class=\"p\">,</span>\n     <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mf\">30.5</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n</pre>\n<p>You can also query with <em>Query</em> :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'phase'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'temperature'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n     <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mf\">15.2</span><span class=\"p\">,</span>\n     <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mf\">30.5</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"saving-data\">\n<h4>Saving Data</h4>\n<p>You can create data by using <em>Measurement.bulk_save()</em></p>\n<pre><span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">TemperatureMeasurement</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"HOT\"</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1463289075</span><span class=\"p\">),</span>\n    <span class=\"n\">TemperatureMeasurement</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"COLD\"</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1463289076</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n<span class=\"n\">TemperatureMeasurement</span><span class=\"o\">.</span><span class=\"n\">bulk_save</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n</pre>\n<p>You can also create data with <em>BulkInsertQuery</em></p>\n<pre><span class=\"n\">str_query</span> <span class=\"o\">=</span> <span class=\"s1\">'''\ntemperature,phase=HOT value=10 1463289075000000000\ntemperature,phase=COLD value=10 1463289076000000000\n'''</span>\n\n<span class=\"n\">raw_query</span> <span class=\"o\">=</span> <span class=\"n\">BulkInsertQuery</span><span class=\"p\">(</span><span class=\"n\">str_query</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">raw_query</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"auto-generation-of-measurements\">\n<h3>Auto Generation of Measurements</h3>\n<p>You can automatically generate measurement classes file with the bash command <em>autogenerate</em></p>\n<pre>influxable autogenerate <span class=\"c1\">#(default to auto_generate_measurement.py)\n</span>influxable autogenerate -o measurement.py\n</pre>\n<p>Here is the output generated file :</p>\n<pre><span class=\"c1\"># auto_generate_measurement.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">influxable</span> <span class=\"kn\">import</span> <span class=\"n\">attributes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">influxable.measurement</span> <span class=\"kn\">import</span> <span class=\"n\">Measurement</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CpuMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'cpu'</span>\n\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">TimestampFieldAttribute</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">FloatFieldAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">TagFieldAttribute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"influxable-commands\">\n<h3>Influxable commands</h3>\n<ul>\n<li><em>autogenerate</em> : automatic generation of measurement classes</li>\n</ul>\n<pre>influxable autogenerate <span class=\"c1\">#(default to auto_generate_measurement.py)\n</span>influxable autogenerate -o measurement.py\n</pre>\n<ul>\n<li><em>populate</em> : create a measurement filled with a set of random data</li>\n</ul>\n<pre>influxable populate\ninfluxable populate --min_value <span class=\"m\">5</span> --max_value <span class=\"m\">35</span> -s <span class=\"m\">2011</span>-01-01T00:00:00 -id <span class=\"m\">1</span>\ninfluxable populate --help\n</pre>\n</div>\n<div id=\"influxable-api\">\n<h3>Influxable API</h3>\n<div id=\"id1\">\n<h4>Influxable</h4>\n<p>The Influxable main app class is a singleton. You can access it via the method <em>Influxable.get_instance()</em></p>\n<div id=\"init\">\n<h5>__init__():</h5>\n<ul>\n<li>base_url : url to connect to the InfluxDB server (default = \u2018<a href=\"http://localhost:8086\" rel=\"nofollow\">http://localhost:8086</a>\u2019)</li>\n<li>user : authentication user name (default = \u2018admin\u2019)</li>\n<li>password : authentication user password (default = \u2018changeme\u2019)</li>\n<li>database_name : name of the database (default = \u2018default\u2019)</li>\n</ul>\n</div>\n<div id=\"create-connection-connection\">\n<h5>create_connection() -&gt; Connection:</h5>\n<ul>\n<li>base_url : url to connect to the InfluxDB server (default = \u2018<a href=\"http://localhost:8086\" rel=\"nofollow\">http://localhost:8086</a>\u2019)</li>\n<li>user : authentication user name (default = \u2018admin\u2019)</li>\n<li>password : authentication user password (default = \u2018changeme\u2019)</li>\n<li>database_name : name of the database (default = \u2018default\u2019)</li>\n</ul>\n</div>\n<div id=\"ping-bool\">\n<h5>ping() -&gt; bool:</h5>\n<ul>\n<li>verbose : enables verbose mode (default = True)</li>\n</ul>\n</div>\n<div id=\"execute-query-json\">\n<h5>execute_query() -&gt; json():</h5>\n<ul>\n<li>query: influxdb query to execute</li>\n<li>method: http method of the request (default=\u2019get\u2019)</li>\n<li>chunked: if enabled, responses will be chunked by series or by every 10,000 points (default=False)</li>\n<li>epoch: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default=\u2019ns\u2019)</li>\n<li>pretty: if enadble, the json response is pretty-printed (default=False)</li>\n</ul>\n</div>\n<div id=\"write-points-bool\">\n<h5>write_points() -&gt; bool:</h5>\n<ul>\n<li>points: data to write in InfluxDB line protocol format</li>\n</ul>\n<p>ex: mymeas,mytag1=1 value=21 1463689680000000000</p>\n<ul>\n<li>precision: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default=\u2019ns\u2019)</li>\n<li>consistency: sets the write consistency for the point [any,one,quorum,all] (default=\u2019all\u2019)</li>\n<li>retention_policy_name: sets the target retention policy for the write (default=\u2019DEFAULT\u2019)</li>\n</ul>\n</div>\n</div>\n<div id=\"influxdbapi\">\n<h4>InfluxDBApi</h4>\n<div id=\"get-debug-requests-bool\">\n<h5>get_debug_requests() -&gt; bool:</h5>\n<ul>\n<li>request : instance of InfluxDBRequest</li>\n</ul>\n</div>\n<div id=\"get-debug-vars-bool\">\n<h5>get_debug_vars() -&gt; bool:</h5>\n<ul>\n<li>request : instance of InfluxDBRequest</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h5>ping() -&gt; bool:</h5>\n<ul>\n<li>request : instance of InfluxDBRequest</li>\n<li>verbose : enables verbose mode (default = True)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h5>execute_query() -&gt; json():</h5>\n<ul>\n<li>request : instance of InfluxDBRequest</li>\n<li>query: influxdb query to execute</li>\n<li>method: http method of the request (default=\u2019get\u2019)</li>\n<li>chunked: if enabled, responses will be chunked by series or by every 10,000 points (default=False)</li>\n<li>epoch: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default=\u2019ns\u2019)</li>\n<li>pretty: if enadble, the json response is pretty-printed (default=False)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h5>write_points() -&gt; bool:</h5>\n<ul>\n<li>request : instance of InfluxDBRequest</li>\n<li>points: data to write in InfluxDB line protocol format</li>\n</ul>\n<p>ex: mymeas,mytag1=1 value=21 1463689680000000000</p>\n<ul>\n<li>precision: specified precision of the timestamp [ns,u,\u00b5,ms,s,m,h] (default=\u2019ns\u2019)</li>\n<li>consistency: sets the write consistency for the point [any,one,quorum,all] (default=\u2019all\u2019)</li>\n<li>retention_policy_name: sets the target retention policy for the write (default=\u2019DEFAULT\u2019)</li>\n</ul>\n</div>\n</div>\n<div id=\"id5\">\n<h4>Connection</h4>\n<div id=\"id6\">\n<h5>__init__():</h5>\n<ul>\n<li>base_url : url to connect to the InfluxDB server (default = \u2018<a href=\"http://localhost:8086\" rel=\"nofollow\">http://localhost:8086</a>\u2019)</li>\n<li>user : authentication user name (default = \u2018admin\u2019)</li>\n<li>password : authentication user password (default = \u2018changeme\u2019)</li>\n<li>database_name : name of the database (default = \u2018default\u2019)</li>\n</ul>\n</div>\n<div id=\"create-connection\">\n<h5>create() -&gt; Connection:</h5>\n<ul>\n<li>base_url : url to connect to the InfluxDB server (default = \u2018<a href=\"http://localhost:8086\" rel=\"nofollow\">http://localhost:8086</a>\u2019)</li>\n<li>user : authentication user name (default = \u2018admin\u2019)</li>\n<li>password : authentication user password (default = \u2018changeme\u2019)</li>\n<li>database_name : name of the database (default = \u2018default\u2019)</li>\n</ul>\n</div>\n</div>\n<div id=\"id7\">\n<h4>Measurement</h4>\n<div id=\"fields\">\n<h5>fields</h5>\n<p>Must be an instance of class located in <em>influxable.attributes</em></p>\n<ul>\n<li>GenericFieldAttribute</li>\n<li>IntegerFieldAttribute</li>\n<li>FloatFieldAttribute</li>\n<li>StringFieldAttribute</li>\n<li>BooleanFieldAttribute</li>\n<li>TagFieldAttribute</li>\n<li>TimestampFieldAttribute</li>\n<li>DateTimeFieldAttribute</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">TimestampFieldAttribute</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">)</span>\n    <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">TagFieldAttribute</span><span class=\"p\">()</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">IntegerFieldAttribute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"parser-class\">\n<h5>parser_class</h5>\n<p>Must be a class of <em>influxable.serializers</em> :</p>\n<ul>\n<li>MeasurementPointSerializer (default)</li>\n<li>JsonSerializer</li>\n<li>FormattedSerieSerializer</li>\n<li>FlatFormattedSerieSerializer</li>\n<li>FlatSimpleResultSerializer</li>\n<li>PandasSerializer</li>\n</ul>\n</div>\n<div id=\"measurement-name\">\n<h5>measurement_name</h5>\n<p>Name of the measurement in InfluxDB</p>\n</div>\n<div id=\"id8\">\n<h5>__init__():</h5>\n<p>Set the attribute value of a Measurement</p>\n<p>Example</p>\n<pre><span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"MOON\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-query-query\">\n<h5>get_query() -&gt; Query:</h5>\n<p>Return an instance of Query which</p>\n<p>Example</p>\n<pre><span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span>\\\n  <span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"dict\">\n<h5>dict()</h5>\n<p>Return a dict of the point values</p>\n<p>Example</p>\n<pre><span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"MOON\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># {'time': Decimal('1568970572'), 'phase': 'MOON', 'value': 0.5}</span>\n</pre>\n</div>\n<div id=\"items\">\n<h5>items()</h5>\n<p>Return an item list of the point values</p>\n<p>Example</p>\n<pre><span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"MOON\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">point</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># dict_items([('time', Decimal('1568970572')), ('phase', 'MOON'), ('value', 0.5)])</span>\n</pre>\n</div>\n<div id=\"bulk-save\">\n<h5>bulk_save()</h5>\n<p>Save a list of measurement point</p>\n<pre><span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"moon\"</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1463489075</span><span class=\"p\">),</span>\n    <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"moon\"</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1463489076</span><span class=\"p\">),</span>\n    <span class=\"n\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">=</span><span class=\"s2\">\"sun\"</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">1463489077</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n<span class=\"n\">MySensorMeasurement</span><span class=\"o\">.</span><span class=\"n\">bulk_save</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"attributes\">\n<h4>Attributes</h4>\n<div id=\"genericfieldattribute\">\n<h5>GenericFieldAttribute</h5>\n<ul>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">temperature_value</span> <span class=\"o\">=</span> <span class=\"n\">GenericFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">attribute_name</span><span class=\"o\">=</span><span class=\"s2\">\"temp_v1\"</span><span class=\"p\">,</span>\n      <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"15\"</span><span class=\"p\">,</span>\n      <span class=\"n\">is_nullable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n      <span class=\"n\">enforce_cast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"integerfieldattribute\">\n<h5>IntegerFieldAttribute</h5>\n<ul>\n<li>min_value : an error is raised if the value is less than the min_value</li>\n<li>max_value : an error is raised if the value is greater than the max_value</li>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">temperature_value</span> <span class=\"o\">=</span> <span class=\"n\">IntegerFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">min_value</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n      <span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"floatfieldattribute\">\n<h5>FloatFieldAttribute</h5>\n<ul>\n<li>max_nb_decimals : set the maximal number of decimals to display</li>\n<li>min_value : an error is raised if the value is less than the min_value</li>\n<li>max_value : an error is raised if the value is greater than the max_value</li>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">FloatFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">max_nb_decimals</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"stringfieldattribute\">\n<h5>StringFieldAttribute</h5>\n<ul>\n<li>choices : an error is raised if the value is not in the list of string options</li>\n<li>max_length : an error is raised if the string value length is greater than the max_length</li>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">FloatFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"s1\">'last'</span><span class=\"p\">],</span>\n      <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"booleanfieldattribute\">\n<h5>BooleanFieldAttribute</h5>\n<ul>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">is_marked</span> <span class=\"o\">=</span> <span class=\"n\">BooleanFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tagfieldattribute\">\n<h5>TagFieldAttribute</h5>\n<ul>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">phase</span> <span class=\"o\">=</span> <span class=\"n\">TagFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'MOON'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"timestampfieldattribute\">\n<h5>TimestampFieldAttribute</h5>\n<ul>\n<li>auto_now : Set automatically the current date (default=False)</li>\n<li>precision : Set the timestamp precision which must be one of [ns,u,ms,s,m,h] (default= \u2018ns\u2019)</li>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">TimestampFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n      <span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"datetimefieldattribute\">\n<h5>DateTimeFieldAttribute</h5>\n<ul>\n<li>str_format : Set the arrow format of the timestamp to display (default: \u201cYYYY-MM-DD HH:mm:ss\u201d)</li>\n<li>auto_now : Set automatically the current date</li>\n<li>precision : Set the timestamp precision which must be one of [ns,u,ms,s,m,h]</li>\n<li>attribute_name : real name of the measurement attribute in database</li>\n<li>default : set a default value if it is not filled at the instanciation</li>\n<li>is_nullable : if False, it will raise an error if the value is null (default=True)</li>\n<li>enforce_cast : if False, it will not raise an error when the value has not the desired type without casting (default=True).</li>\n</ul>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">DateTimeFieldAttribute</span><span class=\"p\">(</span>\n      <span class=\"n\">attribute_name</span><span class=\"o\">=</span><span class=\"s1\">'time'</span><span class=\"p\">,</span>\n      <span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n      <span class=\"n\">str_format</span><span class=\"o\">=</span><span class=\"s1\">'YYYY-MM-DD'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"influxdbresponse\">\n<h4>InfluxDBResponse</h4>\n<div id=\"id9\">\n<h5>__init__():</h5>\n<ul>\n<li>raw_json : the raw json response object</li>\n</ul>\n</div>\n<div id=\"raw\">\n<h5>raw</h5>\n<p>Return the raw_json value</p>\n</div>\n<div id=\"main-serie\">\n<h5>main_serie</h5>\n<p>Return the first serie from the <em>series</em> field in the raw_json value</p>\n</div>\n<div id=\"series\">\n<h5>series</h5>\n<p>Return the <em>series</em> field in the raw_json value</p>\n</div>\n<div id=\"error\">\n<h5>error</h5>\n<p>Return the <em>error</em> field in the raw_json value</p>\n<p>Example of json raw response :</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"s2\">\"results\"</span><span class=\"p\">:[</span>\n      <span class=\"p\">{</span>\n         <span class=\"s2\">\"statement_id\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"series\"</span><span class=\"p\">:[</span>\n            <span class=\"p\">{</span>\n               <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"mymeas\"</span><span class=\"p\">,</span>\n               <span class=\"s2\">\"columns\"</span><span class=\"p\">:[</span>\n                  <span class=\"s2\">\"time\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"myfield\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"mytag1\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"mytag2\"</span>\n               <span class=\"p\">],</span>\n               <span class=\"s2\">\"values\"</span><span class=\"p\">:[</span>\n                  <span class=\"p\">[</span>\n                     <span class=\"s2\">\"2017-03-01T00:16:18Z\"</span><span class=\"p\">,</span>\n                     <span class=\"mf\">33.1</span><span class=\"p\">,</span>\n                     <span class=\"n\">null</span><span class=\"p\">,</span>\n                     <span class=\"n\">null</span>\n                  <span class=\"p\">],</span>\n                  <span class=\"p\">[</span>\n                     <span class=\"s2\">\"2017-03-01T00:17:18Z\"</span><span class=\"p\">,</span>\n                     <span class=\"mf\">12.4</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"12\"</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"14\"</span>\n                  <span class=\"p\">]</span>\n               <span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"serializers\">\n<h4>Serializers</h4>\n<p>Serializers can be used in <em>parser_class</em> field of <em>Measurement</em> class.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySensorMeasurement</span><span class=\"p\">(</span><span class=\"n\">Measurement</span><span class=\"p\">):</span>\n    <span class=\"n\">measurement_name</span> <span class=\"o\">=</span> <span class=\"s1\">'mysensor'</span>\n    <span class=\"n\">parser_class</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">BaseSerializer</span>\n</pre>\n<p>It allow to change the output response format of a influxb request</p>\n<pre><span class=\"c1\"># res is formatted with BaseSerializer</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n</pre>\n<div id=\"baseserializer\">\n<h5>BaseSerializer</h5>\n<pre><span class=\"c1\"># res is formatted with BaseSerializer</span>\n<span class=\"n\">res</span>\n<span class=\"p\">{</span><span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'statement_id'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'series'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mysamplemeasurement'</span><span class=\"p\">,</span> <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">1570481055000000000</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481065000000000</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481075000000000</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]]}]}]}</span>\n</pre>\n</div>\n<div id=\"jsonserializer\">\n<h5>JsonSerializer</h5>\n<pre><span class=\"c1\"># res is formatted with JsonSerializer</span>\n<span class=\"n\">res</span>\n<span class=\"s1\">'{\"results\": [{\"statement_id\": 0, \"series\": [{\"name\": \"mysamplemeasurement\", \"columns\": [\"time\", \"value\"], \"values\": [[1570481055000000000, 10], [1570481065000000000, 20], [1570481075000000000, 30]]}]}]}'</span>\n</pre>\n</div>\n<div id=\"formattedserieserializer\">\n<h5>FormattedSerieSerializer</h5>\n<pre><span class=\"c1\"># res is formatted with FormattedSerieSerializer</span>\n<span class=\"n\">res</span>\n<span class=\"p\">[{</span><span class=\"s1\">'mysamplemeasurement'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481055000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481065000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481075000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]}]</span>\n</pre>\n</div>\n<div id=\"flatformattedserieserializer\">\n<h5>FlatFormattedSerieSerializer</h5>\n<pre><span class=\"c1\"># res is formatted with FlatFormattedSerieSerializer</span>\n<span class=\"p\">[{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481055000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481065000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'time'</span><span class=\"p\">:</span> <span class=\"mi\">1570481075000000000</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}]</span>\n</pre>\n</div>\n<div id=\"flatsimpleresultserializer\">\n<h5>FlatSimpleResultSerializer</h5>\n<p>This serializer is used only when the result set contains only one column</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">InfluxDBAdmin</span><span class=\"o\">.</span><span class=\"n\">show_databases</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># res is formatted with FlatSimpleResultSerializer</span>\n<span class=\"n\">res</span>\n<span class=\"p\">[</span><span class=\"s1\">'_internal'</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'telegraf'</span><span class=\"p\">,</span> <span class=\"s1\">'mydb'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"flatsinglevalueserializer\">\n<h5>FlatSingleValueSerializer</h5>\n<p>This serializer is used only when the result set contains only one value</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">InfluxDBAdmin</span><span class=\"o\">.</span><span class=\"n\">show_measurement_cardinality</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># res is formatted with FlatSingleValueSerializer</span>\n<span class=\"n\">res</span>\n<span class=\"mi\">2</span>\n</pre>\n</div>\n<div id=\"pandasserializer\">\n<h5>PandasSerializer</h5>\n<pre><span class=\"c1\"># res is formatted with PandasSerializer</span>\n<span class=\"n\">res</span>                   <span class=\"n\">time</span>  <span class=\"n\">value</span>\n<span class=\"mi\">0</span>  <span class=\"mi\">1570481055000000000</span>     <span class=\"mi\">10</span>\n<span class=\"mi\">1</span>  <span class=\"mi\">1570481065000000000</span>     <span class=\"mi\">20</span>\n<span class=\"mi\">2</span>  <span class=\"mi\">1570481075000000000</span>     <span class=\"mi\">30</span>\n</pre>\n</div>\n<div id=\"measurementpointserializer\">\n<h5>MeasurementPointSerializer</h5>\n<p>This is the default serializer class for Measurement</p>\n<pre><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a16227f0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a16228d0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a1622438</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"raw-query\">\n<h4>Raw Query</h4>\n<ul>\n<li>str_query</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">RawQuery</span>\n<span class=\"n\">str_query</span> <span class=\"o\">=</span> <span class=\"s1\">'SHOW DATABASES'</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">RawQuery</span><span class=\"p\">(</span><span class=\"n\">str_query</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">RawQuery</span>\n<span class=\"n\">str_query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT * FROM temperature LIMIT 10'</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">RawQuery</span><span class=\"p\">(</span><span class=\"n\">str_query</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"id10\">\n<h4>Query</h4>\n<p>You can generate an instance of Query via the initial Query constructor or from a measurement.</p>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n</pre>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n</pre>\n<p>Methods :</p>\n<div id=\"from-measurements\">\n<h5>from_measurements()</h5>\n<ul>\n<li>*measurements</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">,</span> <span class=\"s1\">'measurement2'</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">FROM</span> <span class=\"n\">measurement1</span><span class=\"p\">,</span> <span class=\"n\">measurement2</span>\n</pre>\n</div>\n<div id=\"select\">\n<h5>select()</h5>\n<ul>\n<li>*fields</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">phase</span>\n</pre>\n</div>\n<div id=\"where\">\n<h5>where()</h5>\n<ul>\n<li>*criteria</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">WHERE</span> <span class=\"n\">param1</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span> <span class=\"k\">AND</span> <span class=\"n\">param1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span>\n</pre>\n</div>\n<div id=\"limit\">\n<h5>limit()</h5>\n<ul>\n<li>value</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">LIMIT</span> <span class=\"mi\">10</span>\n</pre>\n</div>\n<div id=\"slimit\">\n<h5>slimit()</h5>\n<ul>\n<li>value</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">slimit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"n\">SLIMIT</span> <span class=\"mi\">5</span>\n</pre>\n</div>\n<div id=\"offset\">\n<h5>offset()</h5>\n<ul>\n<li>value</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">OFFSET</span> <span class=\"mi\">10</span>\n</pre>\n</div>\n<div id=\"soffset\">\n<h5>soffset()</h5>\n<ul>\n<li>value</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">soffset</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"n\">SOFFSET</span> <span class=\"mi\">5</span>\n</pre>\n</div>\n<div id=\"execute\">\n<h5>execute()</h5>\n<p>Execute the query and return the response</p>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"n\">res</span>\n</pre>\n<p>Result :</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'statement_id'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'series'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'measurement1'</span><span class=\"p\">,</span> <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">1570481055000000000</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481065000000000</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481075000000000</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]]}]}]}</span>\n</pre>\n</div>\n<div id=\"evaluate\">\n<h5>evaluate()</h5>\n<p>Execute the query and return the serialized response</p>\n<ul>\n<li>parser_class (default=BaseSerializer for Query and MeasurementPointSerializer for Measurement)</li>\n</ul>\n<p>Example with Query :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n<span class=\"n\">res</span>\n</pre>\n<p>Result :</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'results'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'statement_id'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'series'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'measurement1'</span><span class=\"p\">,</span> <span class=\"s1\">'columns'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">1570481055000000000</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481065000000000</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1570481075000000000</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]]}]}]}</span>\n</pre>\n<p>Example with Measurement :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">MySensorMeasurement</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">()</span>\n  <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">()</span>\n<span class=\"n\">points</span>\n</pre>\n<p>Result :</p>\n<pre><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a16227f0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a16228d0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">MySensorMeasurement</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f49a1622438</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"count\">\n<h5>count()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"distinct\">\n<h5>distinct()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"integral\">\n<h5>integral()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">integral</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">INTEGRAL</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mean\">\n<h5>mean()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">MEAN</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"median\">\n<h5>median()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">MEDIAN</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mode\">\n<h5>mode()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">MODE</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"spread\">\n<h5>spread()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">spread</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">SPREAD</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"std-dev\">\n<h5>std_dev()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">std_dev</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"n\">STDDEV</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"sum\">\n<h5>sum()</h5>\n<ul>\n<li>value (default=\u2019*\u2019)</li>\n</ul>\n<p>Example :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Field</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n  <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'measurement1'</span><span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">800</span><span class=\"p\">,</span>\n      <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">900</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span>\\\n  <span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n</pre>\n<p>Render :</p>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"query-aggregations-function\">\n<h4>Query aggregations function</h4>\n<p>Usage :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db.function</span> <span class=\"kn\">import</span> <span class=\"n\">aggregations</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">aggregations</span><span class=\"o\">.</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">))</span>\\\n    <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<div id=\"id11\">\n<h5>Count</h5>\n</div>\n<div id=\"id12\">\n<h5>Distinct</h5>\n</div>\n<div id=\"id13\">\n<h5>Integral</h5>\n</div>\n<div id=\"id14\">\n<h5>Mean</h5>\n</div>\n<div id=\"id15\">\n<h5>Median</h5>\n</div>\n<div id=\"id16\">\n<h5>Mode</h5>\n</div>\n<div id=\"id17\">\n<h5>Spread</h5>\n</div>\n<div id=\"stddev\">\n<h5>StdDev</h5>\n</div>\n<div id=\"id18\">\n<h5>Sum</h5>\n</div>\n</div>\n<div id=\"query-selectors-function\">\n<h4>Query selectors function</h4>\n<p>Usage :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db.function</span> <span class=\"kn\">import</span> <span class=\"n\">selectors</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">selectors</span><span class=\"o\">.</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">),</span> <span class=\"n\">selectors</span><span class=\"o\">.</span><span class=\"n\">Max</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">))</span>\\\n    <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<div id=\"bottom\">\n<h5>Bottom</h5>\n</div>\n<div id=\"first\">\n<h5>First</h5>\n</div>\n<div id=\"last\">\n<h5>Last</h5>\n</div>\n<div id=\"max\">\n<h5>Max</h5>\n</div>\n<div id=\"min\">\n<h5>Min</h5>\n</div>\n<div id=\"percentile\">\n<h5>Percentile</h5>\n</div>\n<div id=\"sample\">\n<h5>Sample</h5>\n</div>\n<div id=\"top\">\n<h5>Top</h5>\n</div>\n</div>\n<div id=\"query-transformations-function\">\n<h4>Query transformations function</h4>\n<p>Usage :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db.function</span> <span class=\"kn\">import</span> <span class=\"n\">selectors</span><span class=\"p\">,</span> <span class=\"n\">transformations</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">transformations</span><span class=\"o\">.</span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">))</span>\\\n    <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">influxable.db.function.selectors</span> <span class=\"kn\">import</span> <span class=\"n\">Min</span><span class=\"p\">,</span> <span class=\"n\">Max</span>\n<span class=\"kn\">from</span> <span class=\"nn\">influxable.db.function.transformations</span> <span class=\"kn\">import</span> <span class=\"n\">Abs</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">()</span>\\\n    <span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)),</span> <span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"n\">Max</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">)))</span>\\\n    <span class=\"o\">.</span><span class=\"n\">from_measurements</span><span class=\"p\">(</span><span class=\"s1\">'param1'</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<div id=\"abs\">\n<h5>Abs</h5>\n</div>\n<div id=\"acos\">\n<h5>ACos</h5>\n</div>\n<div id=\"asin\">\n<h5>ASin</h5>\n</div>\n<div id=\"atan\">\n<h5>ATan</h5>\n</div>\n<div id=\"atan2\">\n<h5>ATan2</h5>\n</div>\n<div id=\"ceil\">\n<h5>Ceil</h5>\n</div>\n<div id=\"cos\">\n<h5>Cos</h5>\n</div>\n<div id=\"cumulativesum\">\n<h5>CumulativeSum</h5>\n</div>\n<div id=\"derivative\">\n<h5>Derivative</h5>\n</div>\n<div id=\"difference\">\n<h5>Difference</h5>\n</div>\n<div id=\"elapsed\">\n<h5>Elapsed</h5>\n</div>\n<div id=\"exp\">\n<h5>Exp</h5>\n</div>\n<div id=\"floor\">\n<h5>Floor</h5>\n</div>\n<div id=\"histogram\">\n<h5>Histogram</h5>\n</div>\n<div id=\"ln\">\n<h5>Ln</h5>\n</div>\n<div id=\"log\">\n<h5>Log</h5>\n</div>\n<div id=\"log2\">\n<h5>Log2</h5>\n</div>\n<div id=\"log10\">\n<h5>Log10</h5>\n</div>\n<div id=\"movingaverage\">\n<h5>MovingAverage</h5>\n</div>\n<div id=\"nonnegativederivative\">\n<h5>NonNegativeDerivative</h5>\n</div>\n<div id=\"nonnegativedifference\">\n<h5>NonNegativeDifference</h5>\n</div>\n<div id=\"pow\">\n<h5>Pow</h5>\n</div>\n<div id=\"round\">\n<h5>Round</h5>\n</div>\n<div id=\"sin\">\n<h5>Sin</h5>\n</div>\n<div id=\"sqrt\">\n<h5>Sqrt</h5>\n</div>\n<div id=\"tan\">\n<h5>Tan</h5>\n</div>\n</div>\n<div id=\"influxdbadmin\">\n<h4>InfluxDBAdmin</h4>\n<div id=\"alter-retention-policy\">\n<h5>alter_retention_policy()</h5>\n<ul>\n<li>policy_name</li>\n<li>duration (default=None)</li>\n<li>replication (default=None)</li>\n<li>shard_duration (default=None)</li>\n<li>is_default (default=False)</li>\n</ul>\n<pre><span class=\"k\">ALTER</span> <span class=\"n\">RETENTION</span> <span class=\"n\">POLICY</span> <span class=\"err\">{</span><span class=\"n\">policy_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"p\">[</span><span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">duration</span><span class=\"err\">}</span> <span class=\"n\">REPLICATION</span> <span class=\"err\">{</span><span class=\"n\">replication</span><span class=\"err\">}</span> <span class=\"n\">SHARD</span> <span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">shard_duration</span><span class=\"err\">}</span> <span class=\"k\">DEFAULT</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"create-database\">\n<h5>create_database()</h5>\n<ul>\n<li>new_database_name</li>\n<li>duration (default=None)</li>\n<li>replication (default=None)</li>\n<li>shard_duration (default=None)</li>\n<li>policy_name (default=False)</li>\n</ul>\n<pre><span class=\"k\">CREATE</span> <span class=\"k\">DATABASE</span> <span class=\"err\">{</span><span class=\"n\">new_database_name</span><span class=\"err\">}</span> <span class=\"p\">[</span><span class=\"k\">WITH</span> <span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">duration</span><span class=\"err\">}</span> <span class=\"n\">REPLICATION</span> <span class=\"err\">{</span><span class=\"n\">replication</span><span class=\"err\">}</span> <span class=\"n\">SHARD</span> <span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">shard_duration</span><span class=\"err\">}</span> <span class=\"n\">NAME</span> <span class=\"err\">{</span><span class=\"n\">policy_name</span><span class=\"err\">}</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"create-retention-policy\">\n<h5>create_retention_policy()</h5>\n<ul>\n<li>policy_name</li>\n<li>duration (default=None)</li>\n<li>replication (default=None)</li>\n<li>shard_duration (default=None)</li>\n<li>is_default (default=False)</li>\n</ul>\n<pre><span class=\"k\">CREATE</span> <span class=\"n\">RETENTION</span> <span class=\"n\">POLICY</span> <span class=\"err\">{</span><span class=\"n\">policy_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"p\">[</span><span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">duration</span><span class=\"err\">}</span> <span class=\"n\">REPLICATION</span> <span class=\"err\">{</span><span class=\"n\">replication</span><span class=\"err\">}</span> <span class=\"n\">SHARD</span> <span class=\"n\">DURATION</span> <span class=\"err\">{</span><span class=\"n\">shard_duration</span><span class=\"err\">}</span> <span class=\"k\">DEFAULT</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"create-subscription\">\n<h5>create_subscription()</h5>\n<ul>\n<li>subscription_name</li>\n<li>hosts</li>\n<li>any (default=False)</li>\n</ul>\n<pre><span class=\"k\">CREATE</span> <span class=\"n\">SUBSCRIPTION</span> <span class=\"err\">{</span><span class=\"n\">subscription_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"n\">DESTINATIONS</span> <span class=\"k\">ANY</span><span class=\"o\">/</span><span class=\"k\">ALL</span> <span class=\"err\">{</span><span class=\"n\">hosts</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"create-user\">\n<h5>create_user()</h5>\n<ul>\n<li>user_name</li>\n<li>password</li>\n<li>with_privileges (default=False)</li>\n</ul>\n<pre><span class=\"k\">CREATE</span> <span class=\"k\">USER</span> <span class=\"err\">{</span><span class=\"n\">user_name</span><span class=\"err\">}</span> <span class=\"k\">WITH</span> <span class=\"n\">PASSWORD</span> <span class=\"err\">{</span><span class=\"n\">password</span><span class=\"err\">}</span> <span class=\"p\">[</span><span class=\"k\">WITH</span> <span class=\"k\">ALL</span> <span class=\"k\">PRIVILEGES</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"delete\">\n<h5>delete()</h5>\n<ul>\n<li>measurements (default=[])</li>\n<li>criteria (default=[])</li>\n</ul>\n<pre><span class=\"k\">DELETE</span> <span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span><span class=\"n\">criteria</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-continuous-query\">\n<h5>drop_continuous_query()</h5>\n<ul>\n<li>query_name</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"n\">CONTINUOUS</span> <span class=\"n\">QUERY</span> <span class=\"err\">{</span><span class=\"n\">query_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-database\">\n<h5>drop_database()</h5>\n<ul>\n<li>database_name_to_delete</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"k\">DATABASE</span> <span class=\"err\">{</span><span class=\"n\">database_name_to_delete</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-measurement\">\n<h5>drop_measurement()</h5>\n<ul>\n<li>measurement_name</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"n\">MEASUREMENT</span> <span class=\"err\">{</span><span class=\"n\">measurement_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-retention-policy\">\n<h5>drop_retention_policy()</h5>\n<ul>\n<li>policy_name</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"n\">RETENTION</span> <span class=\"n\">POLICY</span> <span class=\"err\">{</span><span class=\"n\">policy_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-series\">\n<h5>drop_series()</h5>\n<ul>\n<li>measurements (default=[])</li>\n<li>criteria (default=[])</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"n\">SERIES</span> <span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span><span class=\"n\">criteria</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-subscription\">\n<h5>drop_subscription()</h5>\n<ul>\n<li>subscription_name</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"n\">SUBSCRIPTION</span> <span class=\"err\">{</span><span class=\"n\">subscription_name</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">full_database_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"drop-user\">\n<h5>drop_user()</h5>\n<ul>\n<li>user_name</li>\n</ul>\n<pre><span class=\"k\">DROP</span> <span class=\"k\">USER</span> <span class=\"err\">{</span><span class=\"n\">user_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"explain\">\n<h5>explain()</h5>\n<ul>\n<li>query</li>\n<li>analyze (default=False)</li>\n</ul>\n<pre><span class=\"k\">EXPLAIN</span> <span class=\"p\">[</span><span class=\"k\">ANALYZE</span><span class=\"p\">]</span> <span class=\"err\">{</span><span class=\"n\">query</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"grant\">\n<h5>grant()</h5>\n<ul>\n<li>privilege</li>\n<li>user_name</li>\n</ul>\n<pre><span class=\"k\">GRANT</span> <span class=\"err\">{</span><span class=\"n\">privilege</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"k\">TO</span> <span class=\"err\">{</span><span class=\"n\">user_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"kill\">\n<h5>kill()</h5>\n<ul>\n<li>query_id</li>\n</ul>\n<pre><span class=\"n\">KILL</span> <span class=\"n\">QUERY</span> <span class=\"err\">{</span><span class=\"n\">query_id</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"revoke\">\n<h5>revoke()</h5>\n<ul>\n<li>privilege</li>\n<li>user_name</li>\n</ul>\n<pre><span class=\"k\">REVOKE</span> <span class=\"err\">{</span><span class=\"n\">privilege</span><span class=\"err\">}</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">user_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-field-key-cardinality\">\n<h5>show_field_key_cardinality()</h5>\n<ul>\n<li>exact (default=False)</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">FIELD</span> <span class=\"k\">KEY</span> <span class=\"p\">[</span><span class=\"n\">EXACT</span><span class=\"p\">]</span> <span class=\"k\">CARDINALITY</span>\n</pre>\n</div>\n<div id=\"show-measurement-cardinality\">\n<h5>show_measurement_cardinality()</h5>\n<ul>\n<li>exact (default=False)</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">MEASUREMENT</span> <span class=\"p\">[</span><span class=\"n\">EXACT</span><span class=\"p\">]</span> <span class=\"k\">CARDINALITY</span>\n</pre>\n</div>\n<div id=\"show-series-cardinality\">\n<h5>show_series_cardinality()</h5>\n<ul>\n<li>exact (default=False)</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">SERIES</span> <span class=\"p\">[</span><span class=\"n\">EXACT</span><span class=\"p\">]</span> <span class=\"k\">CARDINALITY</span>\n</pre>\n</div>\n<div id=\"show-tag-key-cardinality\">\n<h5>show_tag_key_cardinality()</h5>\n<ul>\n<li>key</li>\n<li>exact (default=False)</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">TAG</span> <span class=\"k\">VALUES</span> <span class=\"p\">[</span><span class=\"n\">EXACT</span><span class=\"p\">]</span> <span class=\"k\">CARDINALITY</span> <span class=\"k\">WITH</span> <span class=\"k\">KEY</span> <span class=\"o\">=</span> <span class=\"err\">{</span><span class=\"k\">key</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-continuous-queries\">\n<h5>show_continuous_queries()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">CONTINUOUS</span> <span class=\"n\">QUERIES</span>\n</pre>\n</div>\n<div id=\"show-diagnostics\">\n<h5>show_diagnostics()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"k\">DIAGNOSTICS</span>\n</pre>\n</div>\n<div id=\"show-field-keys\">\n<h5>show_field_keys()</h5>\n<ul>\n<li>measurements (default=[])</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">FIELD</span> <span class=\"n\">KEYS</span> <span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-grants\">\n<h5>show_grants()</h5>\n<ul>\n<li>user_name</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">GRANTS</span> <span class=\"k\">FOR</span> <span class=\"err\">{</span><span class=\"n\">user_name</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-databases\">\n<h5>show_databases()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">DATABASES</span>\n</pre>\n</div>\n<div id=\"show-measurements\">\n<h5>show_measurements()</h5>\n<ul>\n<li>criteria (default=[])</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">MEASUREMENTS</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span><span class=\"n\">criteria</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-queries\">\n<h5>show_queries()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">QUERIES</span>\n</pre>\n</div>\n<div id=\"show-retention-policies\">\n<h5>show_retention_policies()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">RETENTION</span> <span class=\"n\">POLICIES</span>\n</pre>\n</div>\n<div id=\"show-series\">\n<h5>show_series()</h5>\n<ul>\n<li>measurements (default=[])</li>\n<li>criteria (default=[])</li>\n<li>limit (default=None)</li>\n<li>offset (default=None)</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">SERIES</span> <span class=\"k\">ON</span> <span class=\"err\">{</span><span class=\"n\">database_name</span><span class=\"err\">}</span> <span class=\"p\">[</span><span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span> <span class=\"k\">WHERE</span> <span class=\"err\">{</span><span class=\"n\">criteria</span><span class=\"err\">}</span> <span class=\"k\">LIMIT</span> <span class=\"err\">{</span><span class=\"k\">limit</span><span class=\"err\">}</span> <span class=\"k\">OFFSET</span> <span class=\"err\">{</span><span class=\"k\">offset</span><span class=\"err\">}</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"show-stats\">\n<h5>show_stats()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">STATS</span>\n</pre>\n</div>\n<div id=\"show-shards\">\n<h5>show_shards()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">SHARDS</span>\n</pre>\n</div>\n<div id=\"show-shard-groups\">\n<h5>show_shard_groups()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">SHARD</span> <span class=\"n\">GROUPS</span>\n</pre>\n</div>\n<div id=\"show-subscriptions\">\n<h5>show_subscriptions()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">SUBSCRIPTIONS</span>\n</pre>\n</div>\n<div id=\"show-tag-keys\">\n<h5>show_tag_keys()</h5>\n<ul>\n<li>measurements (default=[])</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">TAG</span> <span class=\"n\">KEYS</span> <span class=\"p\">[</span><span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"show-tag-values\">\n<h5>show_tag_values()</h5>\n<ul>\n<li>key</li>\n<li>measurements (default=[])</li>\n</ul>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">TAG</span> <span class=\"k\">VALUES</span> <span class=\"p\">[</span><span class=\"k\">FROM</span> <span class=\"err\">{</span><span class=\"n\">measurements</span><span class=\"err\">}</span><span class=\"p\">]</span> <span class=\"k\">WITH</span> <span class=\"k\">KEY</span> <span class=\"o\">=</span> <span class=\"err\">{</span><span class=\"k\">key</span><span class=\"err\">}</span>\n</pre>\n</div>\n<div id=\"show-users\">\n<h5>show_users()</h5>\n<pre><span class=\"k\">SHOW</span> <span class=\"n\">USERS</span>\n</pre>\n</div>\n</div>\n<div id=\"exceptions\">\n<h4>Exceptions</h4>\n<div id=\"influxdbexception\">\n<h5>InfluxDBException</h5>\n</div>\n<div id=\"influxdberror\">\n<h5>InfluxDBError</h5>\n</div>\n<div id=\"influxdbconnectionerror\">\n<h5>InfluxDBConnectionError</h5>\n</div>\n<div id=\"influxdbinvalidresponseerror\">\n<h5>InfluxDBInvalidResponseError</h5>\n</div>\n<div id=\"influxdbinvalidchoiceerror\">\n<h5>InfluxDBInvalidChoiceError</h5>\n</div>\n<div id=\"influxdbinvalidtypeerror\">\n<h5>InfluxDBInvalidTypeError</h5>\n</div>\n<div id=\"influxdbinvalidurlerror\">\n<h5>InfluxDBInvalidURLError</h5>\n</div>\n<div id=\"influxdbbadrequesterror\">\n<h5>InfluxDBBadRequestError</h5>\n</div>\n<div id=\"influxdbbadqueryerror\">\n<h5>InfluxDBBadQueryError</h5>\n</div>\n<div id=\"influxdbinvalidnumbererror\">\n<h5>InfluxDBInvalidNumberError</h5>\n</div>\n<div id=\"influxdbinvalidtimestamperror\">\n<h5>InfluxDBInvalidTimestampError</h5>\n</div>\n<div id=\"influxdbunauthorizederror\">\n<h5>InfluxDBUnauthorizedError</h5>\n</div>\n<div id=\"influxdbattributevalueerror\">\n<h5>InfluxDBAttributeValueError</h5>\n</div>\n</div>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>First, you need to install pytest via the file <em>requirements-test.txt</em></p>\n<pre>pip install -r requirements-test.txt\n</pre>\n<p>Then, you can launch the <em>pytest</em> command.</p>\n<pre><span class=\"n\">pytest</span> <span class=\"o\">-</span><span class=\"n\">v</span>\n</pre>\n</div>\n<div id=\"supporting\">\n<h3>Supporting</h3>\n<p>Feel free to post issues your feedback or if you reach a problem with influxable library.</p>\n<p>If you want to contribute, please use the pull requests section.</p>\n</div>\n<div id=\"versioning\">\n<h3>Versioning</h3>\n<p>We use <a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> for versioning. For the versions available, see the <a href=\"https://github.com/Javidjms/influxable/releases\" rel=\"nofollow\">tags on this repository</a></p>\n</div>\n<div id=\"contributors\">\n<h3>Contributors</h3>\n<ul>\n<li><a href=\"https://github.com/Javidjms\" rel=\"nofollow\">Javid Mougamadou</a></li>\n</ul>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li>Logo designed by <a href=\"https://github.com/maximebergerard\" rel=\"nofollow\">Maxime Bergerard</a></li>\n</ul>\n</div>\n<div id=\"references\">\n<h3>References</h3>\n<ul>\n<li><a href=\"https://docs.influxdata.com/platform/introduction\" rel=\"nofollow\">Influxdb Website</a></li>\n<li><a href=\"https://github.com/influxdata/influxdb\" rel=\"nofollow\">Influxdb Github Repository</a></li>\n<li><a href=\"https://github.com/influxdata/influxdb-python\" rel=\"nofollow\">Influxdb-Python Github Repository</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><a href=\"LICENSE.txt\" rel=\"nofollow\">MIT</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6291658, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "84b32aeaec6a471ebb9bfaf5ec5b46fd", "sha256": "3a9182dd7c6ebd2029ce0dc768c2c83fc1b3446f3a6d5cf4dad04bb7a0df9f05"}, "downloads": -1, "filename": "influxable-0.0.0.tar.gz", "has_sig": false, "md5_digest": "84b32aeaec6a471ebb9bfaf5ec5b46fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2104, "upload_time": "2019-08-30T22:18:41", "upload_time_iso_8601": "2019-08-30T22:18:41.152135Z", "url": "https://files.pythonhosted.org/packages/2d/69/71c6f864bfb536225e1c37cb50d2e9a134bb61bed92895578edb89595c83/influxable-0.0.0.tar.gz", "yanked": false}], "0.0.1-alpha.0": [{"comment_text": "", "digests": {"md5": "0a6d419e3e8b8ad31ccd40582e035803", "sha256": "83fd19b7229a43ae1377d37ec480e263af44fcc3379abaf8f131ad2dc62c7ccc"}, "downloads": -1, "filename": "influxable-0.0.1-alpha.0.tar.gz", "has_sig": false, "md5_digest": "0a6d419e3e8b8ad31ccd40582e035803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2121, "upload_time": "2019-08-30T22:37:55", "upload_time_iso_8601": "2019-08-30T22:37:55.591325Z", "url": "https://files.pythonhosted.org/packages/2d/91/8721d2c551cb007b0938c766baba19c1b03fa5766fc8411f28b51ad35539/influxable-0.0.1-alpha.0.tar.gz", "yanked": false}], "0.0.1a1": [{"comment_text": "", "digests": {"md5": "5ee39a08d4ad7f0621d161433edf1d1d", "sha256": "8002be9c0843372db26db70ab10fde07a424faaff54d6526562dbe133cf62dd7"}, "downloads": -1, "filename": "influxable-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "5ee39a08d4ad7f0621d161433edf1d1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 3465, "upload_time": "2019-08-30T22:49:57", "upload_time_iso_8601": "2019-08-30T22:49:57.630153Z", "url": "https://files.pythonhosted.org/packages/19/7e/f49060c039957a4c489842f2be2f4c0b7935a0352bdc945001da39cade16/influxable-0.0.1a1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1368f32f793908564c892da080c8cfc2", "sha256": "90ca121c8274e0a03ec85b83eaad4db8e9a78e99ba76246dcae0e0de31aef18f"}, "downloads": -1, "filename": "influxable-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1368f32f793908564c892da080c8cfc2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 12485, "upload_time": "2019-09-20T12:32:17", "upload_time_iso_8601": "2019-09-20T12:32:17.016754Z", "url": "https://files.pythonhosted.org/packages/e2/15/83f1cfc56f542eae7b97d6f3f9969a95e62a1df95dcfd8cc8dae6b4ef3b0/influxable-1.0.0.tar.gz", "yanked": false}], "1.0.0a0": [{"comment_text": "", "digests": {"md5": "ea6e0167c1a4e5a0ceb956ff247dcb42", "sha256": "00dba07dfb8866b2642d797ebae977efa2ab2dae90ab047be132a776b7c27e6b"}, "downloads": -1, "filename": "influxable-1.0.0a0.tar.gz", "has_sig": false, "md5_digest": "ea6e0167c1a4e5a0ceb956ff247dcb42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 12463, "upload_time": "2019-09-20T12:53:43", "upload_time_iso_8601": "2019-09-20T12:53:43.214781Z", "url": "https://files.pythonhosted.org/packages/f6/78/2ad513db09a9c173aa02c564fc85f04a64a475529d946af3deb6382046cb/influxable-1.0.0a0.tar.gz", "yanked": false}], "1.0.0b0": [{"comment_text": "", "digests": {"md5": "16d40424ee74626a09a040539a76c6b2", "sha256": "9b49a8adb47e9bd04ca365e69d7ca80c223fc39503dea1e84c4a49dfbeb4d5db"}, "downloads": -1, "filename": "influxable-1.0.0b0.tar.gz", "has_sig": false, "md5_digest": "16d40424ee74626a09a040539a76c6b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 12473, "upload_time": "2019-09-20T13:01:00", "upload_time_iso_8601": "2019-09-20T13:01:00.981011Z", "url": "https://files.pythonhosted.org/packages/b9/ea/0af4125f830dfdc5ae92f4b1dde30a6c0b0f599c784191fdfa25d90e4f5d/influxable-1.0.0b0.tar.gz", "yanked": false}], "1.0.0rc0": [{"comment_text": "", "digests": {"md5": "f24b2ff776158365fa2e4babd9df718b", "sha256": "4b30a3016b36474af5de8854eab0dd171f91c0bd2895440a647639da66e102e3"}, "downloads": -1, "filename": "influxable-1.0.0rc0.tar.gz", "has_sig": false, "md5_digest": "f24b2ff776158365fa2e4babd9df718b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 13272, "upload_time": "2019-09-20T13:06:22", "upload_time_iso_8601": "2019-09-20T13:06:22.696288Z", "url": "https://files.pythonhosted.org/packages/b6/53/49c04f5b7b491d7e200e00b426c465bcbd8f60a3ef565d7a35d8a5439139/influxable-1.0.0rc0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bc86f939193044d5099972ad8ecbf41c", "sha256": "92b3c079cf8643cecb22460d21a9244b599df6933f51f01ebfa46a1920891b64"}, "downloads": -1, "filename": "influxable-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bc86f939193044d5099972ad8ecbf41c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 13420, "upload_time": "2019-09-20T18:40:00", "upload_time_iso_8601": "2019-09-20T18:40:00.204354Z", "url": "https://files.pythonhosted.org/packages/4b/98/fc9a83b94f115ba45cb3555bbc15f71a570b294137a478f046f14b69d368/influxable-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "85b9411951cc9af2a73f31426109f0de", "sha256": "eefc884293489c8e08ab9fa0b95e06b789df0a8ba07bb99b55320330ed158a69"}, "downloads": -1, "filename": "influxable-1.0.2.tar.gz", "has_sig": false, "md5_digest": "85b9411951cc9af2a73f31426109f0de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 13495, "upload_time": "2019-09-22T22:01:30", "upload_time_iso_8601": "2019-09-22T22:01:30.569778Z", "url": "https://files.pythonhosted.org/packages/42/29/a48b216a1fcbf65c73b96013d0c71e4198bdc4292d112ca2f796b611c397/influxable-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1af1f80883650bac0ad2775a30dc6180", "sha256": "6ac7c700091144a1aa0fe7f0dd304f29d681b5bb24c268b0d5abee35bf590a14"}, "downloads": -1, "filename": "influxable-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1af1f80883650bac0ad2775a30dc6180", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 18291, "upload_time": "2019-09-23T21:28:09", "upload_time_iso_8601": "2019-09-23T21:28:09.242158Z", "url": "https://files.pythonhosted.org/packages/bc/0a/237654a7a235e3f0e66b9d0678ed324329d94571c49802fe6387562196a5/influxable-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "60db0f70e8dc915a62b13d0308514a97", "sha256": "84d5bbf47b75ec27f8e157924a6faf11aec3676e8ed4840c69dd7e832284fd8b"}, "downloads": -1, "filename": "influxable-1.0.4.tar.gz", "has_sig": false, "md5_digest": "60db0f70e8dc915a62b13d0308514a97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 19384, "upload_time": "2019-10-02T13:26:29", "upload_time_iso_8601": "2019-10-02T13:26:29.257879Z", "url": "https://files.pythonhosted.org/packages/76/c6/83df0b55f88ed9371dbe0dac99450a79f73654018f5f5580912014b14a65/influxable-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "9f34d8e026b023ef2746934b716b916c", "sha256": "1d2fb7a8c199bbf6d09849187e49c8b85bd7d7a79f1b66444780de669e449510"}, "downloads": -1, "filename": "influxable-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9f34d8e026b023ef2746934b716b916c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 28714, "upload_time": "2019-10-23T12:41:04", "upload_time_iso_8601": "2019-10-23T12:41:04.399963Z", "url": "https://files.pythonhosted.org/packages/24/19/02efaa799d1a66492f8957daa089c5b5832ee6a2484a55d506d0be2a4742/influxable-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "54abe08b84b2c5ea3f92098af8fe3844", "sha256": "0543882c5277d0e6e21448aef970bc52a61fff7b8f09f866aceb0210d79d3dde"}, "downloads": -1, "filename": "influxable-1.1.1-py3.7.egg", "has_sig": false, "md5_digest": "54abe08b84b2c5ea3f92098af8fe3844", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.0.*", "size": 86857, "upload_time": "2019-11-03T13:00:37", "upload_time_iso_8601": "2019-11-03T13:00:37.627895Z", "url": "https://files.pythonhosted.org/packages/ca/0e/9da3505d252cb6e9db05089e5c235c4ebb4ac7cab40e0a98deb9d35bc4bc/influxable-1.1.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "019a6708969fb52c515acd1a908f9814", "sha256": "e930b3f76dec05ca503158f47d798c004ccbbaa0bd22c0ca1104b22d0e8667a2"}, "downloads": -1, "filename": "influxable-1.1.1.tar.gz", "has_sig": false, "md5_digest": "019a6708969fb52c515acd1a908f9814", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 46520, "upload_time": "2019-11-03T13:00:41", "upload_time_iso_8601": "2019-11-03T13:00:41.335231Z", "url": "https://files.pythonhosted.org/packages/51/c4/233840291059603bf4fb5d98bc8f0ef3a31b5a7767a7d1ae7542b191e5a3/influxable-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3c5d8de753efdad7be3bd43a68fc5756", "sha256": "4a6710de474e8e2ff1bcd20b3da0dd0d76b19c5bb1d55b1a97d06b1fdc46ffd5"}, "downloads": -1, "filename": "influxable-1.1.2-py3.7.egg", "has_sig": false, "md5_digest": "3c5d8de753efdad7be3bd43a68fc5756", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.0.*", "size": 91879, "upload_time": "2019-11-20T20:18:39", "upload_time_iso_8601": "2019-11-20T20:18:39.873562Z", "url": "https://files.pythonhosted.org/packages/41/81/e31eaa0d1fd09e801dd67afa20eca9abac513e6e380be4490437de024318/influxable-1.1.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c673e9956cf5b1623f19d23766a35e3", "sha256": "04f8a52531c8fa7feb2b0a766e244e45e78d492de1df36b981fdd9c216baec47"}, "downloads": -1, "filename": "influxable-1.1.2.tar.gz", "has_sig": false, "md5_digest": "1c673e9956cf5b1623f19d23766a35e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 48207, "upload_time": "2019-11-20T20:18:42", "upload_time_iso_8601": "2019-11-20T20:18:42.705259Z", "url": "https://files.pythonhosted.org/packages/4e/48/7d019f374af5898c0408ed5411865bf17fbb34226e8fd62c79c0e6f695c5/influxable-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "588e6200f07cc6b92a0d5383ec55b0cc", "sha256": "9a41debc47c103562c0ed23d4b8f7445673cbb4a467a595770820b7c965d5a55"}, "downloads": -1, "filename": "influxable-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "588e6200f07cc6b92a0d5383ec55b0cc", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.0.*", "size": 96233, "upload_time": "2019-12-13T08:41:01", "upload_time_iso_8601": "2019-12-13T08:41:01.435617Z", "url": "https://files.pythonhosted.org/packages/98/65/ff1a52592740af1f3c44f094ec3f5a7429421aa233b846c6d6d2c7ec72f7/influxable-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "791d0f999e6a168cfd3bf046c948e5b4", "sha256": "78ed0026959efdcb93caca9369a3495819f4736d498dd5340b542fa574db4566"}, "downloads": -1, "filename": "influxable-1.2.0.tar.gz", "has_sig": false, "md5_digest": "791d0f999e6a168cfd3bf046c948e5b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 49869, "upload_time": "2019-12-13T08:41:04", "upload_time_iso_8601": "2019-12-13T08:41:04.908853Z", "url": "https://files.pythonhosted.org/packages/99/75/f811551e52d8b88cd00d9a1a789dc1690c5c478905b7c83753943a834e66/influxable-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "588e6200f07cc6b92a0d5383ec55b0cc", "sha256": "9a41debc47c103562c0ed23d4b8f7445673cbb4a467a595770820b7c965d5a55"}, "downloads": -1, "filename": "influxable-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "588e6200f07cc6b92a0d5383ec55b0cc", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.0.*", "size": 96233, "upload_time": "2019-12-13T08:41:01", "upload_time_iso_8601": "2019-12-13T08:41:01.435617Z", "url": "https://files.pythonhosted.org/packages/98/65/ff1a52592740af1f3c44f094ec3f5a7429421aa233b846c6d6d2c7ec72f7/influxable-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "791d0f999e6a168cfd3bf046c948e5b4", "sha256": "78ed0026959efdcb93caca9369a3495819f4736d498dd5340b542fa574db4566"}, "downloads": -1, "filename": "influxable-1.2.0.tar.gz", "has_sig": false, "md5_digest": "791d0f999e6a168cfd3bf046c948e5b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0.*", "size": 49869, "upload_time": "2019-12-13T08:41:04", "upload_time_iso_8601": "2019-12-13T08:41:04.908853Z", "url": "https://files.pythonhosted.org/packages/99/75/f811551e52d8b88cd00d9a1a789dc1690c5c478905b7c83753943a834e66/influxable-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:06 2020"}