{"info": {"author": "Workflows and Distributed Computing Group (WDC) - Barcelona Supercomputing Center (BSC)", "author_email": "support-compss@bsc.es", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: System :: Distributed Computing", "Topic :: Utilities"], "description": "-----------------------------------\nPyCOMPSs programming model Player\n-----------------------------------\n\nIntroduction\n============\n\nThe PyCOMPSs player (pycompss) provides a tool to use PyCOMPSs within\nlocal machines interactively through docker images. This tool has been\nimplemented on top of `PyCOMPSs programming\nmodel <http://compss.bsc.es>`__, and it is being developed by the\n`Workflows and Distributed Computing\ngroup <https://github.com/bsc-wdc>`__ of the `Barcelona Supercomputing\nCenter <https://www.bsc.es/>`__.\n\nContents\n========\n\n-  `Quickstart <#quickstart>`__\n-  `License <#license>`__\n\nQuickstart\n==========\n\nThere are two ways in which you can get started with PyCOMPSs. You can\nperform a local installation by installing the `pycompss\npackage <https://pypi.org/project/pycompss/>`__, or you can use it\nthrough our ready-to-use docker image thorugh this `pycompss-player\ntool <#Installation>`__.\n\nInstallation\n~~~~~~~~~~~~\n\nDependencies\n^^^^^^^^^^^^\n\npycompss-player currently requires:\n\n-  docker >= 17.12.0-ce\n\nInstallation steps\n^^^^^^^^^^^^^^^^^^\n\n1. Install docker (continue with step 2 if already installed)\n\n   -  pycompss-player requires **docker 17.12.0-ce** or greater.\n\n   1. Follow these instructions\n\n      -  `Docker for\n         Mac <https://store.docker.com/editions/community/docker-ce-desktop-mac>`__.\n         Or, if you prefer to use `Homebrew <https://brew.sh/>`__.\n\n      -  `Docker for\n         Ubuntu <https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1>`__.\n\n      -  `Docker for Arch\n         Linux <https://wiki.archlinux.org/index.php/Docker#Installation>`__.\n\n      Be aware that for some distros the docker package has been renamed\n      from ``docker`` to ``docker-ce``. Make sure you install the new\n      package.\n\n   2. Add user to docker group to run pycompss as a non-root user.\n\n      -  `Instructions <https://docs.docker.com/install/linux/linux-postinstall/>`__\n\n   3. Check that docker is correctly installed\n\n   .. code:: bash\n\n       docker --version\n       docker ps # this should be empty as no docker processes are yet running.\n\n   4. Install\n      `docker-py <https://docker-py.readthedocs.io/en/stable/>`__\n\n   .. code:: bash\n\n       python3 -m pip install docker\n\n2. Install pycompss-player:\n\n.. code:: bash\n\n    python3 -m pip install pycompss-player\n\nThis should add the pycompss-player executables (``pycompss``,\n``compss`` and ``dislib``) to your path. They can be used indiferently.\n\n**Warning:** The user executable path may not be automatically exported\ninto the ``PATH`` environment variable. So, take this into account if\ninstalled with the ``--user`` flag, since the\n``pycompss``\\ \\|\\ ``compss`` command will be unreachable until the path\nis exported into ``PATH``.\n\nUsage\n~~~~~\n\nStart ``pycompss`` in your development directory\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInitialize the COMPSs infrastructure where your source code will be (you\ncan re-init anytime). This will allow docker to access your local code\nand run it inside the container.\n\n**Note** that the first time needs to download the docker image from the\nregistry, and it may take a while.\n\n.. code:: bash\n\n    # Without a path it operates on the current working directory.\n    pycompss init\n\n    # You can also provide a path\n    pycompss init -w /home/user/replace/path/\n\n    # Or the COMPSs docker image to use\n    pycompss init -i compss/compss-tutorial:2.6\n\n    # Or both\n    pycompss init -w /home/user/replace/path/ -i compss/compss-tutorial:2.6\n\nRunning applications\n^^^^^^^^^^^^^^^^^^^^\n\nFirst clone the PyCOMPSs' tutorial apps repository:\n\n.. code:: bash\n\n    git clone https://github.com/bsc-wdc/tutorial_apps.git\n\nInit the COMPSs environment in the root of the repository. The source\nfiles path are resolved from the init directory which sometimes can be\nconfusing. As a rule of thumb, initialize the library in a current\ndirectory and check the paths are correct running the file with\n``python3 path_to/file.py`` (in this case\n``python3 python/simple/src/simple.py``).\n\n.. code:: bash\n\n    cd tutorial_apps\n    pycompss init\n    pycompss run python/simple/src/simple.py 1\n\nThe log files of the execution can be found at $HOME/.COMPSs.\n\nYou can also init the COMPSs environment inside the examples folder.\nThis will mount the examples directory inside the container so you can\nexecute it without adding the path:\n\n.. code:: bash\n\n    cd python/simple/src\n    pycompss init\n    pycompss run simple.py 1\n\nRunning the COMPSs monitor\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe COMPSs monitor can be started using the ``pycompss monitor start``\ncommand. This will start the COMPSs monitoring facility which enables to\ncheck the application status while running. Once started, it will show\nthe url to open the monitor in your web browser\n(http://127.0.0.1:8080/compss-monitor)\n\n**Reminder**: Include the monitor flag in the execution before the\nbinary to be executed.\n\n.. code:: bash\n\n    cd python/simple/src\n    pycompss init\n    pycompss run --monitor=1000 -g simple.py 1\n\nIf running a notebook, just add the monitoring parameter into the COMPSs\nruntime start call.\n\nOnce finished, it is possible to stop the monitoring facility by using\nthe ``pycompss monitor stop`` command.\n\nRunning Jupyter notebooks\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNotebooks can be run using the ``pycompss jupyter`` command. Run the\nfollowing snippet from the root of the project:\n\n.. code:: bash\n\n    cd tutorial_apps/python\n    pycompss init\n    pycompss jupyter ./notebooks\n\nAn alternative and more flexible way of starting jupyter is using the\n``pycompss run`` command in the following way:\n\n.. code:: bash\n\n    pycompss run jupyter-notebook ./notebooks --ip=0.0.0.0  --allow-root\n\nAccess your notebook by ctrl-clicking or copy pasting into the browser\nthe link shown on the CLI (e.g.\nhttp://127.0.0.1:8888/?token=TOKEN\\_VALUE).\n\nIf the notebook process is not properly closed, you might get the\nfollowing warning when trying to start jupyter notebooks again:\n\n``The port 8888 is already in use, trying another port.``\n\nTo fix it, just restart the pycompss container with ``pycompss init``.\n\nGenerating the task graph\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCOMPSs is able to produce the task graph showing the dependencies that\nhave been respected. In order to producee it, include the graph flag in\nthe execution command:\n\n.. code:: bash\n\n    cd python/simple/src\n    pycompss init\n    pycompss run --graph simple.py 1\n\nOnce the application finishes, the graph will be stored into the\n``~\\.COMPSs\\app_name_XX\\monitor\\complete_graph.dot`` file. This dot file\ncan be converted to pdf for easier visualilzation through the use of the\n``gengraph`` parameter:\n\n.. code:: bash\n\n    pycompss gengraph .COMPSs/simple.py_01/monitor/complete_graph.dot\n\nThe resulting pdf file will be stored into the\n``~\\.COMPSs\\app_name_XX\\monitor\\complete_graph.pdf`` file, that is, the\nsame folder where the dot file is.\n\nTracing applications or notebooks\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCOMPSs is able to produce tracing profiles of the application execution\nthrough the use of EXTRAE. In order to enable it, include the tracing\nflag in the execution command:\n\n.. code:: bash\n\n    cd python/simple/src\n    pycompss init\n    pycompss run --tracing simple.py 1\n\nIf running a notebook, just add the tracing parameter into the COMPSs\nruntime start call.\n\nOnce the application finishes, the trace will be stored into the\n``~\\.COMPSs\\app_name_XX\\trace`` folder. It can then be analysed with\nParaver.\n\nAdding more nodes\n^^^^^^^^^^^^^^^^^\n\n**Note**: adding more nodes is still in beta phase. Please report\nissues, suggestions, or feature requests on\n`Github <https://github.com/bsc-wdc/>`__.\n\nTo add more computing nodes, you can either let docker create more\nworkers for you or manually create and config a custom node.\n\nFor docker just issue the desired number of workers to be added. For\nexample, to add 2 docker workers:\n\n.. code:: bash\n\n    pycompss components add worker 2\n\nYou can check that both new computing nodes are up with:\n\n.. code:: bash\n\n    pycompss components list\n\nIf you want to add a custom node it needs to be reachable through ssh\nwithout user. Moreover, pycompss will try to copy the ``working_dir``\nthere, so it needs write permissions for the scp.\n\nFor example, to add the local machine as a worker node:\n\n.. code:: bash\n\n    pycompss components add worker '127.0.0.1:6'\n\n-  '127.0.0.1': is the IP used for ssh (can also be a hostname like\n   'localhost' as long as it can be resolved).\n-  '6': desired number of available computing units for the new node.\n\n**Please be aware** that ``pycompss components`` will not list your\ncustom nodes because they are not docker processes and thus it can't be\nverified if they are up and running.\n\nRemoving existing nodes\n^^^^^^^^^^^^^^^^^^^^^^^\n\n**Note**: removing nodes is still in beta phase. Please report issues,\nsuggestions, or feature requests on\n`Github <https://github.com/bsc-wdc/>`__.\n\nFor docker just issue the desired number of workers to be removed. For\nexample, to remove 2 docker workers:\n\n.. code:: bash\n\n    pycompss components remove worker 2\n\nYou can check that the workers have been removed with:\n\n.. code:: bash\n\n    pycompss components list\n\nIf you want to remove a custom node, you just need to specify its IP and\nnumber of computing units used when defined.\n\n.. code:: bash\n\n    pycompss components remove worker '127.0.0.1:6'\n\n\nStop ``pycompss``\n^^^^^^^^^^^^^^^^^\n\nThe infrastructure deployed can be easily stopped and the docker instances\nclosed with the following command:\n\n.. code:: bash\n\n    pycompss kill\n\n\nLicense\n=======\n\nApache License Version 2.0\n\n\n*******\n\nWorkflows and Distributed Computing\n\nDepartment of Computer Science\n\nBarcelona Supercomputing Center (http://www.bsc.es)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://compss.bsc.es", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pycompss-player", "package_url": "https://pypi.org/project/pycompss-player/", "platform": "", "project_url": "https://pypi.org/project/pycompss-player/", "project_urls": {"Homepage": "https://compss.bsc.es"}, "release_url": "https://pypi.org/project/pycompss-player/2.6.5/", "requires_dist": null, "requires_python": "", "summary": "PyCOMPSs player", "version": "2.6.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The PyCOMPSs player (pycompss) provides a tool to use PyCOMPSs within\nlocal machines interactively through docker images. This tool has been\nimplemented on top of <a href=\"http://compss.bsc.es\" rel=\"nofollow\">PyCOMPSs programming\nmodel</a>, and it is being developed by the\n<a href=\"https://github.com/bsc-wdc\" rel=\"nofollow\">Workflows and Distributed Computing\ngroup</a> of the <a href=\"https://www.bsc.es/\" rel=\"nofollow\">Barcelona Supercomputing\nCenter</a>.</p>\n</div>\n<div id=\"contents\">\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>There are two ways in which you can get started with PyCOMPSs. You can\nperform a local installation by installing the <a href=\"https://pypi.org/project/pycompss/\" rel=\"nofollow\">pycompss\npackage</a>, or you can use it\nthrough our ready-to-use docker image thorugh this <a href=\"#Installation\" rel=\"nofollow\">pycompss-player\ntool</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<div id=\"dependencies\">\n<h4>Dependencies</h4>\n<p>pycompss-player currently requires:</p>\n<ul>\n<li>docker &gt;= 17.12.0-ce</li>\n</ul>\n</div>\n<div id=\"installation-steps\">\n<h4>Installation steps</h4>\n<ol>\n<li><p>Install docker (continue with step 2 if already installed)</p>\n<ul>\n<li>pycompss-player requires <strong>docker 17.12.0-ce</strong> or greater.</li>\n</ul>\n<ol>\n<li><p>Follow these instructions</p>\n<ul>\n<li><a href=\"https://store.docker.com/editions/community/docker-ce-desktop-mac\" rel=\"nofollow\">Docker for\nMac</a>.\nOr, if you prefer to use <a href=\"https://brew.sh/\" rel=\"nofollow\">Homebrew</a>.</li>\n<li><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\" rel=\"nofollow\">Docker for\nUbuntu</a>.</li>\n<li><a href=\"https://wiki.archlinux.org/index.php/Docker#Installation\" rel=\"nofollow\">Docker for Arch\nLinux</a>.</li>\n</ul>\n<p>Be aware that for some distros the docker package has been renamed\nfrom <tt>docker</tt> to <tt><span class=\"pre\">docker-ce</span></tt>. Make sure you install the new\npackage.</p>\n</li>\n<li><p>Add user to docker group to run pycompss as a non-root user.</p>\n<ul>\n<li><a href=\"https://docs.docker.com/install/linux/linux-postinstall/\" rel=\"nofollow\">Instructions</a></li>\n</ul>\n</li>\n<li><p>Check that docker is correctly installed</p>\n</li>\n</ol>\n<pre>docker --version\ndocker ps <span class=\"c1\"># this should be empty as no docker processes are yet running.</span>\n</pre>\n<ol>\n<li>Install\n<a href=\"https://docker-py.readthedocs.io/en/stable/\" rel=\"nofollow\">docker-py</a></li>\n</ol>\n<pre>python3 -m pip install docker\n</pre>\n</li>\n<li><p>Install pycompss-player:</p>\n</li>\n</ol>\n<pre>python3 -m pip install pycompss-player\n</pre>\n<p>This should add the pycompss-player executables (<tt>pycompss</tt>,\n<tt>compss</tt> and <tt>dislib</tt>) to your path. They can be used indiferently.</p>\n<p><strong>Warning:</strong> The user executable path may not be automatically exported\ninto the <tt>PATH</tt> environment variable. So, take this into account if\ninstalled with the <tt><span class=\"pre\">--user</span></tt> flag, since the\n<tt>pycompss</tt>|<tt>compss</tt> command will be unreachable until the path\nis exported into <tt>PATH</tt>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"start-pycompss-in-your-development-directory\">\n<h4>Start <tt>pycompss</tt> in your development directory</h4>\n<p>Initialize the COMPSs infrastructure where your source code will be (you\ncan re-init anytime). This will allow docker to access your local code\nand run it inside the container.</p>\n<p><strong>Note</strong> that the first time needs to download the docker image from the\nregistry, and it may take a while.</p>\n<pre><span class=\"c1\"># Without a path it operates on the current working directory.\n</span>pycompss init\n\n<span class=\"c1\"># You can also provide a path\n</span>pycompss init -w /home/user/replace/path/\n\n<span class=\"c1\"># Or the COMPSs docker image to use\n</span>pycompss init -i compss/compss-tutorial:2.6\n\n<span class=\"c1\"># Or both\n</span>pycompss init -w /home/user/replace/path/ -i compss/compss-tutorial:2.6\n</pre>\n</div>\n<div id=\"running-applications\">\n<h4>Running applications</h4>\n<p>First clone the PyCOMPSs\u2019 tutorial apps repository:</p>\n<pre>git clone https://github.com/bsc-wdc/tutorial_apps.git\n</pre>\n<p>Init the COMPSs environment in the root of the repository. The source\nfiles path are resolved from the init directory which sometimes can be\nconfusing. As a rule of thumb, initialize the library in a current\ndirectory and check the paths are correct running the file with\n<tt>python3 path_to/file.py</tt> (in this case\n<tt>python3 python/simple/src/simple.py</tt>).</p>\n<pre><span class=\"nb\">cd</span> tutorial_apps\npycompss init\npycompss run python/simple/src/simple.py <span class=\"m\">1</span>\n</pre>\n<p>The log files of the execution can be found at $HOME/.COMPSs.</p>\n<p>You can also init the COMPSs environment inside the examples folder.\nThis will mount the examples directory inside the container so you can\nexecute it without adding the path:</p>\n<pre><span class=\"nb\">cd</span> python/simple/src\npycompss init\npycompss run simple.py <span class=\"m\">1</span>\n</pre>\n</div>\n<div id=\"running-the-compss-monitor\">\n<h4>Running the COMPSs monitor</h4>\n<p>The COMPSs monitor can be started using the <tt>pycompss monitor start</tt>\ncommand. This will start the COMPSs monitoring facility which enables to\ncheck the application status while running. Once started, it will show\nthe url to open the monitor in your web browser\n(<a href=\"http://127.0.0.1:8080/compss-monitor\" rel=\"nofollow\">http://127.0.0.1:8080/compss-monitor</a>)</p>\n<p><strong>Reminder</strong>: Include the monitor flag in the execution before the\nbinary to be executed.</p>\n<pre><span class=\"nb\">cd</span> python/simple/src\npycompss init\npycompss run --monitor<span class=\"o\">=</span><span class=\"m\">1000</span> -g simple.py <span class=\"m\">1</span>\n</pre>\n<p>If running a notebook, just add the monitoring parameter into the COMPSs\nruntime start call.</p>\n<p>Once finished, it is possible to stop the monitoring facility by using\nthe <tt>pycompss monitor stop</tt> command.</p>\n</div>\n<div id=\"running-jupyter-notebooks\">\n<h4>Running Jupyter notebooks</h4>\n<p>Notebooks can be run using the <tt>pycompss jupyter</tt> command. Run the\nfollowing snippet from the root of the project:</p>\n<pre><span class=\"nb\">cd</span> tutorial_apps/python\npycompss init\npycompss jupyter ./notebooks\n</pre>\n<p>An alternative and more flexible way of starting jupyter is using the\n<tt>pycompss run</tt> command in the following way:</p>\n<pre>pycompss run jupyter-notebook ./notebooks --ip<span class=\"o\">=</span><span class=\"m\">0</span>.0.0.0  --allow-root\n</pre>\n<p>Access your notebook by ctrl-clicking or copy pasting into the browser\nthe link shown on the CLI (e.g.\n<a href=\"http://127.0.0.1:8888/?token=TOKEN_VALUE\" rel=\"nofollow\">http://127.0.0.1:8888/?token=TOKEN_VALUE</a>).</p>\n<p>If the notebook process is not properly closed, you might get the\nfollowing warning when trying to start jupyter notebooks again:</p>\n<p><tt>The port 8888 is already in use, trying another port.</tt></p>\n<p>To fix it, just restart the pycompss container with <tt>pycompss init</tt>.</p>\n</div>\n<div id=\"generating-the-task-graph\">\n<h4>Generating the task graph</h4>\n<p>COMPSs is able to produce the task graph showing the dependencies that\nhave been respected. In order to producee it, include the graph flag in\nthe execution command:</p>\n<pre><span class=\"nb\">cd</span> python/simple/src\npycompss init\npycompss run --graph simple.py <span class=\"m\">1</span>\n</pre>\n<p>Once the application finishes, the graph will be stored into the\n<tt><span class=\"pre\">~\\.COMPSs\\app_name_XX\\monitor\\complete_graph.dot</span></tt> file. This dot file\ncan be converted to pdf for easier visualilzation through the use of the\n<tt>gengraph</tt> parameter:</p>\n<pre>pycompss gengraph .COMPSs/simple.py_01/monitor/complete_graph.dot\n</pre>\n<p>The resulting pdf file will be stored into the\n<tt><span class=\"pre\">~\\.COMPSs\\app_name_XX\\monitor\\complete_graph.pdf</span></tt> file, that is, the\nsame folder where the dot file is.</p>\n</div>\n<div id=\"tracing-applications-or-notebooks\">\n<h4>Tracing applications or notebooks</h4>\n<p>COMPSs is able to produce tracing profiles of the application execution\nthrough the use of EXTRAE. In order to enable it, include the tracing\nflag in the execution command:</p>\n<pre><span class=\"nb\">cd</span> python/simple/src\npycompss init\npycompss run --tracing simple.py <span class=\"m\">1</span>\n</pre>\n<p>If running a notebook, just add the tracing parameter into the COMPSs\nruntime start call.</p>\n<p>Once the application finishes, the trace will be stored into the\n<tt><span class=\"pre\">~\\.COMPSs\\app_name_XX\\trace</span></tt> folder. It can then be analysed with\nParaver.</p>\n</div>\n<div id=\"adding-more-nodes\">\n<h4>Adding more nodes</h4>\n<p><strong>Note</strong>: adding more nodes is still in beta phase. Please report\nissues, suggestions, or feature requests on\n<a href=\"https://github.com/bsc-wdc/\" rel=\"nofollow\">Github</a>.</p>\n<p>To add more computing nodes, you can either let docker create more\nworkers for you or manually create and config a custom node.</p>\n<p>For docker just issue the desired number of workers to be added. For\nexample, to add 2 docker workers:</p>\n<pre>pycompss components add worker <span class=\"m\">2</span>\n</pre>\n<p>You can check that both new computing nodes are up with:</p>\n<pre>pycompss components list\n</pre>\n<p>If you want to add a custom node it needs to be reachable through ssh\nwithout user. Moreover, pycompss will try to copy the <tt>working_dir</tt>\nthere, so it needs write permissions for the scp.</p>\n<p>For example, to add the local machine as a worker node:</p>\n<pre>pycompss components add worker <span class=\"s1\">'127.0.0.1:6'</span>\n</pre>\n<ul>\n<li>\u2018127.0.0.1\u2019: is the IP used for ssh (can also be a hostname like\n\u2018localhost\u2019 as long as it can be resolved).</li>\n<li>\u20186\u2019: desired number of available computing units for the new node.</li>\n</ul>\n<p><strong>Please be aware</strong> that <tt>pycompss components</tt> will not list your\ncustom nodes because they are not docker processes and thus it can\u2019t be\nverified if they are up and running.</p>\n</div>\n<div id=\"removing-existing-nodes\">\n<h4>Removing existing nodes</h4>\n<p><strong>Note</strong>: removing nodes is still in beta phase. Please report issues,\nsuggestions, or feature requests on\n<a href=\"https://github.com/bsc-wdc/\" rel=\"nofollow\">Github</a>.</p>\n<p>For docker just issue the desired number of workers to be removed. For\nexample, to remove 2 docker workers:</p>\n<pre>pycompss components remove worker <span class=\"m\">2</span>\n</pre>\n<p>You can check that the workers have been removed with:</p>\n<pre>pycompss components list\n</pre>\n<p>If you want to remove a custom node, you just need to specify its IP and\nnumber of computing units used when defined.</p>\n<pre>pycompss components remove worker <span class=\"s1\">'127.0.0.1:6'</span>\n</pre>\n</div>\n<div id=\"stop-pycompss\">\n<h4>Stop <tt>pycompss</tt></h4>\n<p>The infrastructure deployed can be easily stopped and the docker instances\nclosed with the following command:</p>\n<pre>pycompss <span class=\"nb\">kill</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache License Version 2.0</p>\n<hr class=\"docutils\">\n<p>Workflows and Distributed Computing</p>\n<p>Department of Computer Science</p>\n<p>Barcelona Supercomputing Center (<a href=\"http://www.bsc.es\" rel=\"nofollow\">http://www.bsc.es</a>)</p>\n</div>\n\n          </div>"}, "last_serial": 6543858, "releases": {"2.6.3": [{"comment_text": "", "digests": {"md5": "2ede0342a07cbc0c574bde26b69c2441", "sha256": "6c5bc8e5add0a3643ebfaf478af8bb01af7a31ab0ef41752ba911b90e7ab95ad"}, "downloads": -1, "filename": "pycompss-player-2.6.3.tar.gz", "has_sig": false, "md5_digest": "2ede0342a07cbc0c574bde26b69c2441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17449, "upload_time": "2020-01-23T19:24:00", "upload_time_iso_8601": "2020-01-23T19:24:00.183126Z", "url": "https://files.pythonhosted.org/packages/97/da/da768a92b9b98985f04e26f067e9565b30a5a85e6ce1fc37f81cfbd62e75/pycompss-player-2.6.3.tar.gz", "yanked": false}], "2.6.4": [{"comment_text": "", "digests": {"md5": "ffee07e9f077b3e81b6ebc31151a81a4", "sha256": "d2d056503626f07c2f423d1024b8802b68005e0fb3309b15a5db7401276e58a7"}, "downloads": -1, "filename": "pycompss-player-2.6.4.tar.gz", "has_sig": false, "md5_digest": "ffee07e9f077b3e81b6ebc31151a81a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17460, "upload_time": "2020-01-24T15:55:56", "upload_time_iso_8601": "2020-01-24T15:55:56.620096Z", "url": "https://files.pythonhosted.org/packages/fd/16/8e07aad72d8ee2e17f4b3f8c2169c616ec80a21ac063eddf3aee088c7bfe/pycompss-player-2.6.4.tar.gz", "yanked": false}], "2.6.5": [{"comment_text": "", "digests": {"md5": "fdbfe1878f016aed7270816299ee0b4a", "sha256": "a23149071deaf40204faf7d8f895586abba364378f05c4c1b34875ff296f7ad9"}, "downloads": -1, "filename": "pycompss-player-2.6.5.tar.gz", "has_sig": false, "md5_digest": "fdbfe1878f016aed7270816299ee0b4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18795, "upload_time": "2020-01-30T14:47:05", "upload_time_iso_8601": "2020-01-30T14:47:05.837133Z", "url": "https://files.pythonhosted.org/packages/fa/90/37ff841a54dd9a1fb6e80e8fcc05a29ee520e16c4953c906af549459a61c/pycompss-player-2.6.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fdbfe1878f016aed7270816299ee0b4a", "sha256": "a23149071deaf40204faf7d8f895586abba364378f05c4c1b34875ff296f7ad9"}, "downloads": -1, "filename": "pycompss-player-2.6.5.tar.gz", "has_sig": false, "md5_digest": "fdbfe1878f016aed7270816299ee0b4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18795, "upload_time": "2020-01-30T14:47:05", "upload_time_iso_8601": "2020-01-30T14:47:05.837133Z", "url": "https://files.pythonhosted.org/packages/fa/90/37ff841a54dd9a1fb6e80e8fcc05a29ee520e16c4953c906af549459a61c/pycompss-player-2.6.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:10 2020"}