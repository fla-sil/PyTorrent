{"info": {"author": "Pauli Virtanen", "author_email": "pav@iki.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Fortran", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "=======\nfimport\n=======\n\nPython import hook for importing Fortran modules.\n\nUsage::\n\n    import fimport\n    fimport.install(reload_support=True)\n\n    import somefortrancode # <- builds and imports somefortrancode.f90\n\nBut why in the world would you want that? One reason is\ninteractive use, where being able to reload modules is often\nvery convenient.\n\nThis code is based on Cython's pyximport module.\n\n.. note::\n\n   Reloading modules doesn't work currently on Python 3. You'll\n   have to do instead\n\n       some_module = imp.reload(some_module)\n\nBuild customization\n-------------------\n\nA custom numpy.distutils.core.Extension instance and setup()\nargs (Distribution) for for the build can be defined by a\n``<modulename>.fbld`` file, such as::\n\n    import os\n    from numpy.distutils.core import Extension\n\n    def make_ext(modname, ffilename):\n        cwd = os.path.dirname(__file__)\n        return Extension(name=modname,\n                         sources=[ffilename, 'other_file.f90'],\n                         f2py_options=['only:', 'some_subroutine', ':'],\n                         libraries=['lapack', 'blas'],\n                         library_dirs=[cwd],\n                         include_dirs=['/myinclude', cwd])\n\n    def make_setup_args():\n        return dict(script_args=[\"--fcompiler=gnu\"])\n\nExtra dependencies can be listed in a <modulename>.fdep::\n\n    other_file.f90\n    some_include.inc\n    examplemodule.fbld", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pv/fimport", "keywords": null, "license": "Apache", "maintainer": null, "maintainer_email": null, "name": "fimport", "package_url": "https://pypi.org/project/fimport/", "platform": "any", "project_url": "https://pypi.org/project/fimport/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/pv/fimport"}, "release_url": "https://pypi.org/project/fimport/0.2/", "requires_dist": null, "requires_python": null, "summary": "Python Fortran import hook", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python import hook for importing Fortran modules.</p>\n<p>Usage:</p>\n<pre>import fimport\nfimport.install(reload_support=True)\n\nimport somefortrancode # &lt;- builds and imports somefortrancode.f90\n</pre>\n<p>But why in the world would you want that? One reason is\ninteractive use, where being able to reload modules is often\nvery convenient.</p>\n<p>This code is based on Cython\u2019s pyximport module.</p>\n<div>\n<p>Note</p>\n<p>Reloading modules doesn\u2019t work currently on Python 3. You\u2019ll\nhave to do instead</p>\n<blockquote>\nsome_module = imp.reload(some_module)</blockquote>\n</div>\n<div id=\"build-customization\">\n<h2>Build customization</h2>\n<p>A custom numpy.distutils.core.Extension instance and setup()\nargs (Distribution) for for the build can be defined by a\n<tt><span class=\"pre\">&lt;modulename&gt;.fbld</span></tt> file, such as:</p>\n<pre>import os\nfrom numpy.distutils.core import Extension\n\ndef make_ext(modname, ffilename):\n    cwd = os.path.dirname(__file__)\n    return Extension(name=modname,\n                     sources=[ffilename, 'other_file.f90'],\n                     f2py_options=['only:', 'some_subroutine', ':'],\n                     libraries=['lapack', 'blas'],\n                     library_dirs=[cwd],\n                     include_dirs=['/myinclude', cwd])\n\ndef make_setup_args():\n    return dict(script_args=[\"--fcompiler=gnu\"])\n</pre>\n<p>Extra dependencies can be listed in a &lt;modulename&gt;.fdep:</p>\n<pre>other_file.f90\nsome_include.inc\nexamplemodule.fbld\n</pre>\n</div>\n\n          </div>"}, "last_serial": 791974, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "91832b1e1d9190991c0444f6f3f14eb6", "sha256": "8b0b1dc79f47c0580f01385000282f98e44011de6b004785a85c91038bac1fb5"}, "downloads": -1, "filename": "fimport-0.1.tar.gz", "has_sig": true, "md5_digest": "91832b1e1d9190991c0444f6f3f14eb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10688, "upload_time": "2012-10-15T22:40:26", "upload_time_iso_8601": "2012-10-15T22:40:26.082737Z", "url": "https://files.pythonhosted.org/packages/85/3f/6f5c17881cad650f544db78535675faa107279db240571cc2d1c5911eebc/fimport-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2976877b79275cf6111457ad97823605", "sha256": "663c799c004ae2cf4846b595889e7a962df415fa193e588470e804792e1d2f95"}, "downloads": -1, "filename": "fimport-0.2.tar.gz", "has_sig": true, "md5_digest": "2976877b79275cf6111457ad97823605", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11227, "upload_time": "2013-02-24T15:12:18", "upload_time_iso_8601": "2013-02-24T15:12:18.193065Z", "url": "https://files.pythonhosted.org/packages/c7/d3/eafa7f8dc572b0bd9a909b7f9348e9d09fec508f13febad6a9fafde4e811/fimport-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2976877b79275cf6111457ad97823605", "sha256": "663c799c004ae2cf4846b595889e7a962df415fa193e588470e804792e1d2f95"}, "downloads": -1, "filename": "fimport-0.2.tar.gz", "has_sig": true, "md5_digest": "2976877b79275cf6111457ad97823605", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11227, "upload_time": "2013-02-24T15:12:18", "upload_time_iso_8601": "2013-02-24T15:12:18.193065Z", "url": "https://files.pythonhosted.org/packages/c7/d3/eafa7f8dc572b0bd9a909b7f9348e9d09fec508f13febad6a9fafde4e811/fimport-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:28 2020"}