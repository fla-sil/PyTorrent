{"info": {"author": "MetaMetrics", "author_email": "engineering@lexile.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "#########\nHotRunner\n#########\n\nHotRunner is an improved django test runner.\n\nTo install HotRunner, ``pip install django-hotrunner``.\n\nTo use HotRunner, set ``TEST_RUNNER = 'hotrunner.HotRunner'`` in your django \nsettings file.  This enables three useful features:\n\n* **Test exclusion:** None of the ``django.contrib`` tests will be run when \n  you run your test suite.  Neither will any apps you specify in the\n  ``EXCLUDED_TEST_APPS`` setting.  You can override this without deleting\n  your ``EXCLUDED_TEST_APPS``, by setting ``TEST_ALL_APPS`` to a true value.\n  ``django.contrib`` apps will still not be run.  To run them, specify them\n  by name on the manage.py command line:\n  ``python manage.py test django.contrib.auth``\n* **Copy-paste friendly test naming:** HotRunner now identifies tests with a\n  name that can be copied and pasted to rerun that test.\n* **Test timing:** Find out how long each test is running simply by setting\n  your verbosity to 2 or higher.  The time it takes to run each successful \n  test will be reported at microsecond granularity::\n \n      $ python manage.py test --verbosity=2\n      test_absolute_url (news.NewsModelAbsoluteURLTestCase.test_absolute_url) ... (0.106085s) ok\n      test_empty_body_returns_empty_html (news.NewsModelMarkdownTestCase.test_empty_body_returns_empty_html) ... (0.000119s) ok\n      test_markdown_saved_to_html (news.NewsModelMarkdownTestCase.test_markdown_saved_to_html) ... (0.009840s) ok\n      test_unicode_markdown_converted_appropriately (news.NewsModelMarkdownTestCase.test_unicode_markdown_converted_appropriately) ... (0.000501s) ok\n      test_unicode_strings_must_be_decoded (news.NewsModelMarkdownTestCase.test_unicode_strings_must_be_decoded) ... (0.000384s) ok\n      test_basic_slug_creation (news.NewsModelSlugificationTestCase.test_basic_slug_creation) ... (0.000609s) ok\n      test_existing_slugs_do_not_get_overridden (news.NewsModelSlugificationTestCase.test_existing_slugs_do_not_get_overridden) ... (0.000254s) ok\n      test_getting_conflicting_slugs (news.NewsModelSlugificationTestCase.test_getting_conflicting_slugs) ... (0.001476s) ok\n      test_slugifying_disambiguates_slugs (news.NewsModelSlugificationTestCase.test_slugifying_disambiguates_slugs) ... (0.000204s) ERROR\n\n\n  Tests that get skipped will not report time, as the information is not \n  relevant.\n  \n* XUnit style XML output.  If you set ``HOTRUNNER_XUNIT_FILENAME`` to the path\n  to a writeable file, HotRunner will write an XML document of test results to\n  that file.  This makes it easy to integrate your project with, for instance,\n  a Jenkins continuous integration job. For example, the test suite above \n  would look like this (minus the pretty formatting)::\n\n      <testsuite errors=\"1\" failures=\"0\" name=\"Django Project Tests\" skips=\"0\" tests=\"9\" time=\"0.121\">\n        <testcase classname=\"news.tests.NewsModelAbsoluteURLTestCase\" name=\"test_absolute_url\" time=\"0.106085\" />\n        <testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_empty_body_returns_empty_html\" time=\"0.000119\" />\n        <testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_markdown_saved_to_html\" time=\"0.009840\" />\n        <testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_unicode_markdown_converted_appropriately\" time=\"0.000501\" />\n        <testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_unicode_strings_must_be_decoded\" time=\"0.000384\" />\n        <testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_basic_slug_creation\" time=\"0.000609\" />\n        <testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_existing_slugs_do_not_get_overridden\" time=\"0.000254\" />\n        <testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_getting_conflicting_slugs\" time=\"0.001476\" />\n        <testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_slugifying_disambiguates_slugs\" time=\"0.000204\">\n          <error message=\"list index out of range\" type=\"exceptions.IndexError\">Traceback (most recent call last):\n              File \"/home/jcdyer/.virtualenvs/q2/local/lib/python2.7/site-packages/mock.py\", line 1190, in patched\n                return func(*args, **keywargs)\n              File \"/home/jcdyer/projects/q2/quantile2/news/tests.py\", line 69, in test_slugifying_disambiguates_slugs\n                news = news_items[n]\n            IndexError: list index out of range\n          </error>\n        </testcase>\n      </testsuite>\n\n  This functionality was previously available via the ``django-jux`` project.  \n  If you are upgrading from ``django-jux``, you can still use the old setting\n  name of ``JUXD_FILENAME``, though this is now deprecated, and may disappear\n  at some point in the future.\n\n\nDependencies\n============\n\nHotRunner is built for integration with Django as a replacement for its custom \ntest runner.  It builds on functionality in unittest2, so it only works with\nDjango 1.3 or higher.\n\n\nChangelog\n=========\n\n0.2.4\n-----\n\n* Updated django test runner import to be 1.8 compatible.\n\n0.2.3\n-----\n\n* Fixed unicode handling issue when interacting with ElementTree that was \n  causing test suites to break.\n* Improved test identification output for verbose test suite runs.\n\n0.2.2\n-----\n\nTest runner now shows test names in a format that allows copy-paste.\n\n0.2.1\n-----\n\nFixed issue running tests for apps specified as 'package.app' in ``INSTALLED_APPS``.\n\n0.2.0\n-----\n\nAdded XUnit-style output, as previously implemented in django-jux.\n\n0.1.1\n-----\n\nFixed problem that prevented graceful test abort using ^C on certain python versions.\n\n0.1.0\n-----\n\nInitial release.  Features app exclusion and individual test timing.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/metametrics/django-hotrunner", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-hotrunner", "package_url": "https://pypi.org/project/django-hotrunner/", "platform": "", "project_url": "https://pypi.org/project/django-hotrunner/", "project_urls": {"Homepage": "http://bitbucket.org/metametrics/django-hotrunner"}, "release_url": "https://pypi.org/project/django-hotrunner/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "HotRunner is a Django test runner with useful features, like excluding apps and displaying running times of individual tests.", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>HotRunner is an improved django test runner.</p>\n<p>To install HotRunner, <tt>pip install <span class=\"pre\">django-hotrunner</span></tt>.</p>\n<p>To use HotRunner, set <tt>TEST_RUNNER = 'hotrunner.HotRunner'</tt> in your django\nsettings file.  This enables three useful features:</p>\n<ul>\n<li><p><strong>Test exclusion:</strong> None of the <tt>django.contrib</tt> tests will be run when\nyou run your test suite.  Neither will any apps you specify in the\n<tt>EXCLUDED_TEST_APPS</tt> setting.  You can override this without deleting\nyour <tt>EXCLUDED_TEST_APPS</tt>, by setting <tt>TEST_ALL_APPS</tt> to a true value.\n<tt>django.contrib</tt> apps will still not be run.  To run them, specify them\nby name on the manage.py command line:\n<tt>python manage.py test django.contrib.auth</tt></p>\n</li>\n<li><p><strong>Copy-paste friendly test naming:</strong> HotRunner now identifies tests with a\nname that can be copied and pasted to rerun that test.</p>\n</li>\n<li><p><strong>Test timing:</strong> Find out how long each test is running simply by setting\nyour verbosity to 2 or higher.  The time it takes to run each successful\ntest will be reported at microsecond granularity:</p>\n<pre>$ python manage.py test --verbosity=2\ntest_absolute_url (news.NewsModelAbsoluteURLTestCase.test_absolute_url) ... (0.106085s) ok\ntest_empty_body_returns_empty_html (news.NewsModelMarkdownTestCase.test_empty_body_returns_empty_html) ... (0.000119s) ok\ntest_markdown_saved_to_html (news.NewsModelMarkdownTestCase.test_markdown_saved_to_html) ... (0.009840s) ok\ntest_unicode_markdown_converted_appropriately (news.NewsModelMarkdownTestCase.test_unicode_markdown_converted_appropriately) ... (0.000501s) ok\ntest_unicode_strings_must_be_decoded (news.NewsModelMarkdownTestCase.test_unicode_strings_must_be_decoded) ... (0.000384s) ok\ntest_basic_slug_creation (news.NewsModelSlugificationTestCase.test_basic_slug_creation) ... (0.000609s) ok\ntest_existing_slugs_do_not_get_overridden (news.NewsModelSlugificationTestCase.test_existing_slugs_do_not_get_overridden) ... (0.000254s) ok\ntest_getting_conflicting_slugs (news.NewsModelSlugificationTestCase.test_getting_conflicting_slugs) ... (0.001476s) ok\ntest_slugifying_disambiguates_slugs (news.NewsModelSlugificationTestCase.test_slugifying_disambiguates_slugs) ... (0.000204s) ERROR\n</pre>\n<p>Tests that get skipped will not report time, as the information is not\nrelevant.</p>\n</li>\n<li><p>XUnit style XML output.  If you set <tt>HOTRUNNER_XUNIT_FILENAME</tt> to the path\nto a writeable file, HotRunner will write an XML document of test results to\nthat file.  This makes it easy to integrate your project with, for instance,\na Jenkins continuous integration job. For example, the test suite above\nwould look like this (minus the pretty formatting):</p>\n<pre>&lt;testsuite errors=\"1\" failures=\"0\" name=\"Django Project Tests\" skips=\"0\" tests=\"9\" time=\"0.121\"&gt;\n  &lt;testcase classname=\"news.tests.NewsModelAbsoluteURLTestCase\" name=\"test_absolute_url\" time=\"0.106085\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_empty_body_returns_empty_html\" time=\"0.000119\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_markdown_saved_to_html\" time=\"0.009840\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_unicode_markdown_converted_appropriately\" time=\"0.000501\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelMarkdownTestCase\" name=\"test_unicode_strings_must_be_decoded\" time=\"0.000384\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_basic_slug_creation\" time=\"0.000609\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_existing_slugs_do_not_get_overridden\" time=\"0.000254\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_getting_conflicting_slugs\" time=\"0.001476\" /&gt;\n  &lt;testcase classname=\"news.tests.NewsModelSlugificationTestCase\" name=\"test_slugifying_disambiguates_slugs\" time=\"0.000204\"&gt;\n    &lt;error message=\"list index out of range\" type=\"exceptions.IndexError\"&gt;Traceback (most recent call last):\n        File \"/home/jcdyer/.virtualenvs/q2/local/lib/python2.7/site-packages/mock.py\", line 1190, in patched\n          return func(*args, **keywargs)\n        File \"/home/jcdyer/projects/q2/quantile2/news/tests.py\", line 69, in test_slugifying_disambiguates_slugs\n          news = news_items[n]\n      IndexError: list index out of range\n    &lt;/error&gt;\n  &lt;/testcase&gt;\n&lt;/testsuite&gt;\n</pre>\n<p>This functionality was previously available via the <tt><span class=\"pre\">django-jux</span></tt> project.\nIf you are upgrading from <tt><span class=\"pre\">django-jux</span></tt>, you can still use the old setting\nname of <tt>JUXD_FILENAME</tt>, though this is now deprecated, and may disappear\nat some point in the future.</p>\n</li>\n</ul>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>HotRunner is built for integration with Django as a replacement for its custom\ntest runner.  It builds on functionality in unittest2, so it only works with\nDjango 1.3 or higher.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.2.4</h3>\n<ul>\n<li>Updated django test runner import to be 1.8 compatible.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.3</h3>\n<ul>\n<li>Fixed unicode handling issue when interacting with ElementTree that was\ncausing test suites to break.</li>\n<li>Improved test identification output for verbose test suite runs.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.2</h3>\n<p>Test runner now shows test names in a format that allows copy-paste.</p>\n</div>\n<div id=\"id4\">\n<h3>0.2.1</h3>\n<p>Fixed issue running tests for apps specified as \u2018package.app\u2019 in <tt>INSTALLED_APPS</tt>.</p>\n</div>\n<div id=\"id5\">\n<h3>0.2.0</h3>\n<p>Added XUnit-style output, as previously implemented in django-jux.</p>\n</div>\n<div id=\"id6\">\n<h3>0.1.1</h3>\n<p>Fixed problem that prevented graceful test abort using ^C on certain python versions.</p>\n</div>\n<div id=\"id7\">\n<h3>0.1.0</h3>\n<p>Initial release.  Features app exclusion and individual test timing.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2666026, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bcb8e8ae161c53e456b1c1e523931de1", "sha256": "ea632cc111f04136a7ef56eccea8b11c8762cb93912b051d4088953346d16854"}, "downloads": -1, "filename": "django-hotrunner-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bcb8e8ae161c53e456b1c1e523931de1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2868, "upload_time": "2012-09-25T19:57:10", "upload_time_iso_8601": "2012-09-25T19:57:10.875489Z", "url": "https://files.pythonhosted.org/packages/71/06/d7b98becb103d89eae7a6c25904d5b843ef57f0084636bff91ac9cf667fd/django-hotrunner-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2d2426e1655d797da6617a37e006e0a7", "sha256": "d4dfc0f0a7730861e30cdf999fa44c096e5d202dcd7db93e3c3ab82b673628d1"}, "downloads": -1, "filename": "django-hotrunner-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d2426e1655d797da6617a37e006e0a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2986, "upload_time": "2012-10-23T15:41:39", "upload_time_iso_8601": "2012-10-23T15:41:39.566456Z", "url": "https://files.pythonhosted.org/packages/73/4f/b74ebf50d57ac7d7a202b3e28e79f51119fb6b53f45db847ce677fe31565/django-hotrunner-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9750ad5bc290f96a7771a821eccab095", "sha256": "ae423c129c8e5f4e8b97cd6ac5e99814e4a21b0de1c71471db11d95860c10772"}, "downloads": -1, "filename": "django-hotrunner-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9750ad5bc290f96a7771a821eccab095", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3950, "upload_time": "2012-10-24T15:34:06", "upload_time_iso_8601": "2012-10-24T15:34:06.171548Z", "url": "https://files.pythonhosted.org/packages/49/76/47b86d1906cacd31b7c0624846bf826863459c049294bb24a189733c732a/django-hotrunner-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "15c9fb6c508e21cb31c96a80a37b3e5c", "sha256": "42d460e6e00182464340dc567586bd85475a8ec1334384eaa81b9e85d345ec8a"}, "downloads": -1, "filename": "django-hotrunner-0.2.1.tar.gz", "has_sig": false, "md5_digest": "15c9fb6c508e21cb31c96a80a37b3e5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4576, "upload_time": "2013-01-02T23:02:08", "upload_time_iso_8601": "2013-01-02T23:02:08.014859Z", "url": "https://files.pythonhosted.org/packages/01/5e/2c6ccc89623fb7c62144ba83c19b9fc35265ca03eefc5be57b0973280692/django-hotrunner-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "11ffe116014b94eaa54bfad577c8c4bc", "sha256": "5fa1b1787fad9e86ccbd2ad0cbfaa5bfeee54f6eec935cef0f3e1a2a15f58492"}, "downloads": -1, "filename": "django-hotrunner-0.2.2.tar.gz", "has_sig": false, "md5_digest": "11ffe116014b94eaa54bfad577c8c4bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4891, "upload_time": "2013-01-09T16:29:17", "upload_time_iso_8601": "2013-01-09T16:29:17.235759Z", "url": "https://files.pythonhosted.org/packages/d5/5f/175bd3b35343e1e0456728ce5f0bdc6babcd57554e486a7a24f33070853a/django-hotrunner-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "145e97e8a7d0b51856744f11eba1115b", "sha256": "f72b8d3aa5db1763f850fc8171f0139aef5e2dd3c5bb9fb5016f3023e8435f5e"}, "downloads": -1, "filename": "django-hotrunner-0.2.4.tar.gz", "has_sig": false, "md5_digest": "145e97e8a7d0b51856744f11eba1115b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5114, "upload_time": "2017-02-24T16:13:13", "upload_time_iso_8601": "2017-02-24T16:13:13.229270Z", "url": "https://files.pythonhosted.org/packages/42/0d/f9c8f32cf890280b11e1be2ee560673a7c3cc30f747da916c4c97ea53a43/django-hotrunner-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "145e97e8a7d0b51856744f11eba1115b", "sha256": "f72b8d3aa5db1763f850fc8171f0139aef5e2dd3c5bb9fb5016f3023e8435f5e"}, "downloads": -1, "filename": "django-hotrunner-0.2.4.tar.gz", "has_sig": false, "md5_digest": "145e97e8a7d0b51856744f11eba1115b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5114, "upload_time": "2017-02-24T16:13:13", "upload_time_iso_8601": "2017-02-24T16:13:13.229270Z", "url": "https://files.pythonhosted.org/packages/42/0d/f9c8f32cf890280b11e1be2ee560673a7c3cc30f747da916c4c97ea53a43/django-hotrunner-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:42 2020"}