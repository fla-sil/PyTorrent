{"info": {"author": "Bogdan Vukobratovic", "author_email": "bogdan.vukobratovic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"], "description": "================\nWelcome to SyDPy\n================\n\nSyDPy (**System Design in Python**) aims to become an alternative to SystemVerilog and \n`SystemC <http://www.accellera.org/downloads/standards/systemc>`_ by providing the necessary tools to cover tasks of \nHDL design from system architecture design to HDL synthesis.\n\nSyDPy comprises an event based simulator and various classes for describing and simulating a system, all written in Python. \nThis allows an easy extension of the SyDPy with additional user classes or existing Python libraries\n\nSyDPy was written with design reuse and iterable nature of the design process in mind. Smart channels enable cosimulation of \nmodule architectures written on various abstraction levels (of timing and functionality), without the need of explicit \ninterface converters in the design. Modules with higher levels of abstraction can then serve as model checkers for lower\nlevel modules. \n\nSyDPy features:\n===============\n - RTL and TLM cosimulation\n - Smart channels for information exchange between various interfaces\n - Global simulator configuration for test setup\n - Basic randomization, sequencing and scoreboarding supported\n - Automatic model checking between different module architectures\n - Extendible simulator kernel\n \nSoon available:\n===============\n - Verilog cosimulation using `Verilator <http://www.veripool.org/wiki/verilator>`_\n - Python to Verilog conversion\n - Constrained-random verification using `SystemC Verification <http://www.accellera.org/downloads/standards/systemc>`_ library\n \nGetting started\n===============\n\nInstallation\n------------\n\nInstall SyDPy using pip::\n\n  pip install sydpy\n\nInstall SyDPy using easy_install::\n\n  easy_install sydpy\n  \nInstall SyDPy from source::\n\n  python setup.py install\n\nRead the documentation\n----------------------\n\nRead the `SyDPy documentation <http://sydpy.readthedocs.org/en/latest/>`_\n\nGet involved\n------------\n\nPull your copy from `github repository <https://github.com/bogdanvuk/sydpy>`_", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/bogdanvuk/sydpy/tarball/0.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bogdanvuk/sydpy", "keywords": "System Design Python Simulator HDL ASIC FPGA verification TLM", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "sydpy", "package_url": "https://pypi.org/project/sydpy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sydpy/", "project_urls": {"Download": "https://github.com/bogdanvuk/sydpy/tarball/0.0.1", "Homepage": "https://github.com/bogdanvuk/sydpy"}, "release_url": "https://pypi.org/project/sydpy/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "System Design in Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>SyDPy (<strong>System Design in Python</strong>) aims to become an alternative to SystemVerilog and\n<a href=\"http://www.accellera.org/downloads/standards/systemc\" rel=\"nofollow\">SystemC</a> by providing the necessary tools to cover tasks of\nHDL design from system architecture design to HDL synthesis.</p>\n<p>SyDPy comprises an event based simulator and various classes for describing and simulating a system, all written in Python.\nThis allows an easy extension of the SyDPy with additional user classes or existing Python libraries</p>\n<p>SyDPy was written with design reuse and iterable nature of the design process in mind. Smart channels enable cosimulation of\nmodule architectures written on various abstraction levels (of timing and functionality), without the need of explicit\ninterface converters in the design. Modules with higher levels of abstraction can then serve as model checkers for lower\nlevel modules.</p>\n<div id=\"sydpy-features\">\n<h2>SyDPy features:</h2>\n<blockquote>\n<ul>\n<li>RTL and TLM cosimulation</li>\n<li>Smart channels for information exchange between various interfaces</li>\n<li>Global simulator configuration for test setup</li>\n<li>Basic randomization, sequencing and scoreboarding supported</li>\n<li>Automatic model checking between different module architectures</li>\n<li>Extendible simulator kernel</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"soon-available\">\n<h2>Soon available:</h2>\n<blockquote>\n<ul>\n<li>Verilog cosimulation using <a href=\"http://www.veripool.org/wiki/verilator\" rel=\"nofollow\">Verilator</a></li>\n<li>Python to Verilog conversion</li>\n<li>Constrained-random verification using <a href=\"http://www.accellera.org/downloads/standards/systemc\" rel=\"nofollow\">SystemC Verification</a> library</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install SyDPy using pip:</p>\n<pre>pip install sydpy\n</pre>\n<p>Install SyDPy using easy_install:</p>\n<pre>easy_install sydpy\n</pre>\n<p>Install SyDPy from source:</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"read-the-documentation\">\n<h3>Read the documentation</h3>\n<p>Read the <a href=\"http://sydpy.readthedocs.org/en/latest/\" rel=\"nofollow\">SyDPy documentation</a></p>\n</div>\n<div id=\"get-involved\">\n<h3>Get involved</h3>\n<p>Pull your copy from <a href=\"https://github.com/bogdanvuk/sydpy\" rel=\"nofollow\">github repository</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1399880, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "04c80b2ac42b8c01ab5551e6360a0dd3", "sha256": "4a4cc5b41d08bb5e81ea0b1d5af1096ef5033212edf8094b2ecdba59df73902d"}, "downloads": -1, "filename": "sydpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "04c80b2ac42b8c01ab5551e6360a0dd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53695, "upload_time": "2015-01-28T11:57:43", "upload_time_iso_8601": "2015-01-28T11:57:43.673227Z", "url": "https://files.pythonhosted.org/packages/fc/aa/eebf9261b4bfa4d0ae7dc31bfd6a25b66a411b50e7f8e074ce22738553c1/sydpy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04c80b2ac42b8c01ab5551e6360a0dd3", "sha256": "4a4cc5b41d08bb5e81ea0b1d5af1096ef5033212edf8094b2ecdba59df73902d"}, "downloads": -1, "filename": "sydpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "04c80b2ac42b8c01ab5551e6360a0dd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53695, "upload_time": "2015-01-28T11:57:43", "upload_time_iso_8601": "2015-01-28T11:57:43.673227Z", "url": "https://files.pythonhosted.org/packages/fc/aa/eebf9261b4bfa4d0ae7dc31bfd6a25b66a411b50e7f8e074ce22738553c1/sydpy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:16 2020"}