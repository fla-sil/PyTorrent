{"info": {"author": "at7h", "author_email": "g@at7h.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "====\ntrod\n====\n\n\ud83c\udf0e [`English </README.rst>`_] \u2219 [`\u7b80\u4f53\u4e2d\u6587 </README.cn.rst>`_]\n\n.. image:: https://img.shields.io/pypi/v/trod.svg\n        :target: https://pypi.python.org/pypi/trod\n\n.. image:: https://travis-ci.org/at7h/trod.svg?branch=master\n        :target: https://travis-ci.org/at7h/trod\n\n.. image:: https://coveralls.io/repos/github/at7h/trod/badge.svg?branch=master\n        :target: https://coveralls.io/github/at7h/trod?branch=master\n\n.. image:: https://api.codacy.com/project/badge/Grade/24451621f9554f7a8d857c5b3dd6e522\n        :target: https://www.codacy.com/manual/at7h/trod?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=at7h/trod&amp;utm_campaign=Badge_Grade\n\n.. image:: https://img.shields.io/pypi/pyversions/trod\n        :target: https://img.shields.io/pypi/pyversions/trod\n        :alt: PyPI - Python Version\n\n\ud83c\udf1f **Trod** is a simple low-level asynchronous ORM using Python asyncio_.\nIt is very intuitive and easy to use.\n\nTrod can help you easily build expressive common SQL statements in your asynchronous applications.\nYou only need to use friendly object-oriented APIs to manipulate data without caring about the details of SQL statement writing and data processing. \nSuitable for scenarios where the business logic structure is relatively simple and has a certain amount of concurrency.\n\n* Requires: Python 3.7+\n* Now only supports MySQL\n* Not supports table relationship\n\nQuickstart\n----------\n\nSee the wiki_ page for more information and quickstart_ documentation.\n\n\nInstallation\n------------\n\n.. code-block:: console\n\n    $ pip install trod\n\nSee the installation_ wiki page for more options.\n\n\nBasic Examples\n--------------\n\nFirst, you should to import the ``Trod`` and instantiate a global variable:\n\n.. code-block:: python\n\n    from trod import Trod\n\n    db = Trod()\n\n\nDefining models is simple:\n\n.. code-block:: python\n\n    from trod import types\n\n    class User(db.Model):\n        id = types.BigAuto()\n        name = types.VarChar(length=45, null=False)\n        email = types.Email(default='')\n        password = types.VarChar(length=100, null=False)\n        create_at = types.Timestamp(default=types.ON_CREATE)\n\n\n    class Post(db.Model):\n        id = types.Auto()\n        title = types.VarChar(length=100)\n        author = types.Int(default=0)\n        content = types.Text(encoding=types.ENCODING.utf8mb4)\n        create_at = types.Timestamp(default=types.ON_CREATE)\n        update_at = types.Timestamp(default=types.ON_UPDATE)\n\n\nShow some basic examples:\n\n.. code-block:: python\n\n    import asyncio\n    from datetime import datetime\n\n    from trod import JOINTYPE, types\n\n\n    async def show_case():\n\n        # Binding the database(creating a connection pool)\n        # and create the table:\n        await db.bind('mysql://user:password@host:port/db')\n        await db.create_tables([User, Post])\n\n        # Inserting few rows:\n\n        user = User(name='at7h', password='1111')\n        user_id = await user.save()\n        print(user_id)  # 1\n\n        users = await User.get(user_id)\n        print(user.id, user.name)  # 1, at7h\n\n        await User.update(email='g@gmail.com').where(User.id == user_id).do()\n\n        ret = await User.insert(name='pope', password='2222').do()\n        posts = [\n            {'title': 'Python', 'author': 1},\n            {'title': 'Golang', 'author': 2},\n        ]\n        ret = await Post.minsert(posts).do()\n        print(ret)  # (2, 1)\n\n        # Supports expressive and composable queries:\n\n        count = await User.select().count()\n        print(count) # 2\n\n        # Last gmail user\n        user = await User.select().where(\n            User.email.endswith('gmail.com')\n        ).order_by(\n            User.create_at.desc()\n        ).first()\n        print(user) # [<User object> at 1]\n\n        # Using `trod.util.tdict`\n        users = await User.select(\n            User.id, User.name\n        ).where(\n            User.id < 2\n        ).all(wrap=False)\n        print(user)  # [{'id': 1, 'name': 'at7h'}]\n\n        # Paginate get users who wrote Python posts this year\n        users = await User.select().where(\n            User.id.in_(\n                Post.select(Post.author).where(\n                    Post.update_at > datetime(2019, 1, 1),\n                    Post.title.contains('Python')\n                ).order_by(\n                    Post.update_at.desc()\n                )\n            )\n        ).paginate(1, 10)\n        print(users) # [<User object> at 1]\n\n        # How many posts each user wrote?\n        user_posts = await User.select(\n            User.name, types.F.COUNT(types.SQL('1')).as_('posts')\n        ).join(\n            Post, JOINTYPE.LEFT, on=(User.id == Post.author)\n        ).group_by(\n            User.name\n        ).rows(100)\n\n    asyncio.run(show_case())\n\n\ud83d\udc49 See `more examples </examples>`_\n\n\nContributing \ud83d\udc4f\n---------------\n\nI hope those who are interested can join in and work together.\n\nAny kind of contribution is expected:\nreport a bug \ud83d\udc1e, give a advice or create a pull request \ud83d\ude4b\u200d\u2642\ufe0f.\n\n\nThanks \ud83e\udd1d\n---------\n\n* Special thanks to projects aiomysql_ and peewee_, trod uses aiomysql_ (as the MySQL connection driver),\n  and referenced peewee_ in program design.\n* Please feel free to \u2b50\ufe0f this repository if this project helped you \ud83d\ude09!\n\n.. _wiki: https://github.com/at7h/trod/wiki\n.. _quickstart: https://github.com/at7h/trod/wiki#quickstart\n.. _installation: https://github.com/at7h/trod/wiki#installation\n.. _asyncio: https://docs.python.org/3.7/library/asyncio.html\n.. _aiomysql: https://github.com/aio-libs/aiomysql\n.. _peewee: https://github.com/coleifer/peewee\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/at7h/trod", "keywords": "orm asyncio mysql aiomysql pymysql python3 async/await", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "trod", "package_url": "https://pypi.org/project/trod/", "platform": "", "project_url": "https://pypi.org/project/trod/", "project_urls": {"Homepage": "https://github.com/at7h/trod"}, "release_url": "https://pypi.org/project/trod/0.0.4/", "requires_dist": ["aiomysql (>=0.0.19)"], "requires_python": ">=3.7", "summary": "Trod is a low-level simple asynchronous ORM using Python asyncio", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\ud83c\udf0e [<a href=\"/README.rst\" rel=\"nofollow\">English</a>] \u2219 [<a href=\"/README.cn.rst\" rel=\"nofollow\">\u7b80\u4f53\u4e2d\u6587</a>]</p>\n<a href=\"https://pypi.python.org/pypi/trod\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/trod.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68fcfbe613fa67a63a1c1f00649cb180367b04ca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74726f642e737667\"></a>\n<a href=\"https://travis-ci.org/at7h/trod\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/at7h/trod.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dc37888970082444e2354fb11ee1c246dd27d88/68747470733a2f2f7472617669732d63692e6f72672f617437682f74726f642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/at7h/trod?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/at7h/trod/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7671ba9e67e54f0803f777b8af0ca4ad828ece72/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f617437682f74726f642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.codacy.com/manual/at7h/trod?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=at7h/trod&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"https://api.codacy.com/project/badge/Grade/24451621f9554f7a8d857c5b3dd6e522\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f029107c152219ad70ebe0f321b8c61c2f9893a/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3234343531363231663935353466376138643835376335623364643665353232\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/trod\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8623b616da02fe83a2806f6c7293c5083710750/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74726f64\"></a>\n<p>\ud83c\udf1f <strong>Trod</strong> is a simple low-level asynchronous ORM using Python <a href=\"https://docs.python.org/3.7/library/asyncio.html\" rel=\"nofollow\">asyncio</a>.\nIt is very intuitive and easy to use.</p>\n<p>Trod can help you easily build expressive common SQL statements in your asynchronous applications.\nYou only need to use friendly object-oriented APIs to manipulate data without caring about the details of SQL statement writing and data processing.\nSuitable for scenarios where the business logic structure is relatively simple and has a certain amount of concurrency.</p>\n<ul>\n<li>Requires: Python 3.7+</li>\n<li>Now only supports MySQL</li>\n<li>Not supports table relationship</li>\n</ul>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>See the <a href=\"https://github.com/at7h/trod/wiki\" rel=\"nofollow\">wiki</a> page for more information and <a href=\"https://github.com/at7h/trod/wiki#quickstart\" rel=\"nofollow\">quickstart</a> documentation.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"gp\">$</span> pip install trod\n</pre>\n<p>See the <a href=\"https://github.com/at7h/trod/wiki#installation\" rel=\"nofollow\">installation</a> wiki page for more options.</p>\n</div>\n<div id=\"basic-examples\">\n<h2>Basic Examples</h2>\n<p>First, you should to import the <tt>Trod</tt> and instantiate a global variable:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">trod</span> <span class=\"kn\">import</span> <span class=\"n\">Trod</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Trod</span><span class=\"p\">()</span>\n</pre>\n<p>Defining models is simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">trod</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">BigAuto</span><span class=\"p\">()</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">VarChar</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Email</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">VarChar</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">create_at</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ON_CREATE</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Auto</span><span class=\"p\">()</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">VarChar</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ENCODING</span><span class=\"o\">.</span><span class=\"n\">utf8mb4</span><span class=\"p\">)</span>\n    <span class=\"n\">create_at</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ON_CREATE</span><span class=\"p\">)</span>\n    <span class=\"n\">update_at</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ON_UPDATE</span><span class=\"p\">)</span>\n</pre>\n<p>Show some basic examples:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">trod</span> <span class=\"kn\">import</span> <span class=\"n\">JOINTYPE</span><span class=\"p\">,</span> <span class=\"n\">types</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">show_case</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># Binding the database(creating a connection pool)</span>\n    <span class=\"c1\"># and create the table:</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"s1\">'mysql://user:password@host:port/db'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">create_tables</span><span class=\"p\">([</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">Post</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Inserting few rows:</span>\n\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'at7h'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'1111'</span><span class=\"p\">)</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>  <span class=\"c1\"># 1</span>\n\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># 1, at7h</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'g@gmail.com'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">user_id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">()</span>\n\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'pope'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'2222'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">()</span>\n    <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Python'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Golang'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">minsert</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>  <span class=\"c1\"># (2, 1)</span>\n\n    <span class=\"c1\"># Supports expressive and composable queries:</span>\n\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"c1\"># 2</span>\n\n    <span class=\"c1\"># Last gmail user</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'gmail.com'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">create_at</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"c1\"># [&lt;User object&gt; at 1]</span>\n\n    <span class=\"c1\"># Using `trod.util.tdict`</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">wrap</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>  <span class=\"c1\"># [{'id': 1, 'name': 'at7h'}]</span>\n\n    <span class=\"c1\"># Paginate get users who wrote Python posts this year</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">in_</span><span class=\"p\">(</span>\n            <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n                <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">update_at</span> <span class=\"o\">&gt;</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'Python'</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span>\n                <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">update_at</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">paginate</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span> <span class=\"c1\"># [&lt;User object&gt; at 1]</span>\n\n    <span class=\"c1\"># How many posts each user wrote?</span>\n    <span class=\"n\">user_posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">COUNT</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">SQL</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">as_</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n        <span class=\"n\">Post</span><span class=\"p\">,</span> <span class=\"n\">JOINTYPE</span><span class=\"o\">.</span><span class=\"n\">LEFT</span><span class=\"p\">,</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rows</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">show_case</span><span class=\"p\">())</span>\n</pre>\n<p>\ud83d\udc49 See <a href=\"/examples\" rel=\"nofollow\">more examples</a></p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing \ud83d\udc4f</h2>\n<p>I hope those who are interested can join in and work together.</p>\n<p>Any kind of contribution is expected:\nreport a bug \ud83d\udc1e, give a advice or create a pull request \ud83d\ude4b\u200d\u2642\ufe0f.</p>\n</div>\n<div id=\"thanks\">\n<h2>Thanks \ud83e\udd1d</h2>\n<ul>\n<li>Special thanks to projects <a href=\"https://github.com/aio-libs/aiomysql\" rel=\"nofollow\">aiomysql</a> and <a href=\"https://github.com/coleifer/peewee\" rel=\"nofollow\">peewee</a>, trod uses <a href=\"https://github.com/aio-libs/aiomysql\" rel=\"nofollow\">aiomysql</a> (as the MySQL connection driver),\nand referenced <a href=\"https://github.com/coleifer/peewee\" rel=\"nofollow\">peewee</a> in program design.</li>\n<li>Please feel free to \u2b50\ufe0f this repository if this project helped you \ud83d\ude09!</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6384441, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "9117c23e387c5e75deb19426bf63b5c0", "sha256": "7ef4630f2b586d12db8958458bd7eb428657bb04221f9b78caa0f25cbd3ecb48"}, "downloads": -1, "filename": "trod-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9117c23e387c5e75deb19426bf63b5c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 55553, "upload_time": "2019-12-23T03:32:57", "upload_time_iso_8601": "2019-12-23T03:32:57.362388Z", "url": "https://files.pythonhosted.org/packages/21/50/a156309c9b59dc972022fe2cef04fc974ba9361db30b63a41755867783f8/trod-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "dc5d070b0fc052ea8e0afcd2a8e5499c", "sha256": "bcfb97936030f42d6a78eef69ed9ed2ff0d864a38eae3cf0ad6500695aa99f01"}, "downloads": -1, "filename": "trod-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dc5d070b0fc052ea8e0afcd2a8e5499c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 55655, "upload_time": "2019-12-26T01:35:59", "upload_time_iso_8601": "2019-12-26T01:35:59.107712Z", "url": "https://files.pythonhosted.org/packages/13/18/9f2ef30c6ee2767f8a926a8ce8bbf61dbc92fc6aebc089b548ad597d8c21/trod-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3bc5f91c00d4ff5c00f9323ce81f71b6", "sha256": "e9be2f6dd34f0ad5acd94d12414bcd7159e5c103c3a9c58bf3b3367031fd3e4d"}, "downloads": -1, "filename": "trod-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3bc5f91c00d4ff5c00f9323ce81f71b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 59775, "upload_time": "2020-01-02T04:43:13", "upload_time_iso_8601": "2020-01-02T04:43:13.605465Z", "url": "https://files.pythonhosted.org/packages/67/11/41a17bfc7cdbe752ba763f237c67d857eaf04c55f1163b70766612e1903b/trod-0.0.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3bc5f91c00d4ff5c00f9323ce81f71b6", "sha256": "e9be2f6dd34f0ad5acd94d12414bcd7159e5c103c3a9c58bf3b3367031fd3e4d"}, "downloads": -1, "filename": "trod-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3bc5f91c00d4ff5c00f9323ce81f71b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 59775, "upload_time": "2020-01-02T04:43:13", "upload_time_iso_8601": "2020-01-02T04:43:13.605465Z", "url": "https://files.pythonhosted.org/packages/67/11/41a17bfc7cdbe752ba763f237c67d857eaf04c55f1163b70766612e1903b/trod-0.0.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:46:48 2020"}