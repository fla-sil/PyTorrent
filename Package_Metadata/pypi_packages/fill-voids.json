{"info": {"author": "William Silversmith", "author_email": "ws9@princeton.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "[![PyPI version](https://badge.fury.io/py/fill-voids.svg)](https://badge.fury.io/py/fill-voids)  \n\n# Fill Voids\n```python\n# PYTHON\nimport fill_voids\n\nimg = ... # 3d binary image \nfilled_image = fill_voids.fill(img, in_place=False) # in_place allows editing of original image\nfilled_image, N = fill_voids.fill(img, return_fill_count=True) # returns number of voxels filled in\n```\n```cpp \n// C++ \n#include \"fill_voids.hpp\"\n\nsize_t sx, sy, sz;\nsx = sy = sz = 512;\n\nuint8_t* labels = ...; // 512x512x512 binary image\n\n// modifies labels as a side effect, returns number of voxels filled in\nsize_t fill_ct = fill_voids::binary_fill_holes<uint8_t>(labels, sx, sy, sz); \n```\n<p style=\"font-style: italics;\" align=\"center\">\n<img height=384 src=\"https://raw.githubusercontent.com/seung-lab/fill_voids/master/comparison.png\" alt=\"Filling five labels using SciPy binary_fill_holes vs fill_voids from a 512x512x512 densely labeled connectomics segmentation. (black) fill_voids 1.1.0 (blue) fill_voids 1.1.0 with `in_place=True` (red) scipy 1.4.1\" /><br>\nFig. 1: Filling five labels using SciPy binary_fill_holes vs fill_voids from a 512x512x512 densely labeled connectomics segmentation. (black) fill_voids 1.1.0 (blue) fill_voids 1.1.0 with `in_place=True` (red) scipy 1.4.1. In this test, fill_voids (`in_place=False`) is significantly faster than scipy with lower memory usage. \n</p>\n\nThis library contains a 3D void filling algorithm, similar in function to [`scipy.ndimage.morphology.binary_fill_holes`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_fill_holes.html), but with an eye towards higher performance and eventually multiple label support. The SciPy hole filling algorithm only applies to binary images and uses slow serial dilations. \n\nThe current version of this library uses a scan line flood fill of the background labels and \nthen labels everything not filled as foreground.\n\n### pip Installation \n\n```bash\npip install fill-voids\n```\n\nIf there's not binary for your platform and you have a C++ compiler try:\n\n```bash \nsudo apt-get install python3-dev # This is for Ubuntu, but whatever is appropriate for you\npip install numpy\npip install fill-voids --no-binary :all:\n```\n\n### Current Algorithm\n\n1. Raster scan and mark every foreground voxel `2` for pre-existing foreground.\n2. Raster scan each face of the current image and the first time a black pixel (`0`) is encountered after either starting or enountering a foreground pixel, add that location to a stack.\n3. Flood fill (six connected) with the visited background color (`1`) in sequence from each location in the stack that is not already foreground.\n4. Write out a binary image the same size as the input mapped as buffer != 1 (i.e. 0 or 2). This means non-visited holes and foreground will be marked as `1` for foreground and the visited background will be marked as `0`.\n\nWe improve performance significantly by using libdivide to make computing x,y,z coordinates from array index faster, by scanning right and left to take advantage of machine memory speed, by only placing a neighbor on the stack when we've either just started a scan or just passed a foreground pixel while scanning.\n\n### Multi-Label Concept\n\nSimilarly to the [connected-components-3d](https://github.com/seung-lab/connected-components-3d) and [euclidean-distance-3d](https://github.com/seung-lab/euclidean-distance-transform-3d) projects, in connectomics, it can be common to want to apply void filling algorithms to all labels within a densely packed volume. A multi-label algorithm can be much faster than even the fastest serial application of a binary algorithm. Here's how this might go given an input image I:\n\n1. Compute M = max(I)\n2. Perform the fill as in the binary algorithm labeling the surrounding void as M+1. This means all voids are now either legitimate and can be filled or holes in-between labels.\n3. Raster scan through the volume. If a new void is encountered, we must determine if it is fillable or an in-between one which will not be filled.\n4. On encountering the void, record the last label seen and contour trace around it. If only that label is encountered during contour tracing, it is fillable. If another label is encountered, it is not fillable. \n5. During the contour trace, mark the trace using an integer not already used, such as M+2. If that label is encountered in the future, you'll know what to fill between it and the next label encountered based on the fillable determination. This phase stops when either the twin of the first M+2 label is encountered or when futher contour tracing isn't possible (in the case of single voxel gaps).\n6. (Inner Labels) If another label is encountered in the middle of a void, contour trace around it and mark the boundary with the same M+2 label that started the current fill.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seung-lab/fill_voids/", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "fill-voids", "package_url": "https://pypi.org/project/fill-voids/", "platform": "", "project_url": "https://pypi.org/project/fill-voids/", "project_urls": {"Homepage": "https://github.com/seung-lab/fill_voids/"}, "release_url": "https://pypi.org/project/fill-voids/1.1.0/", "requires_dist": ["numpy", "fastremap"], "requires_python": "", "summary": "Fill voids in 3D binary images fast.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/fill-voids\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e98ff32232596d744a9b5a648048e50428d6c170/68747470733a2f2f62616467652e667572792e696f2f70792f66696c6c2d766f6964732e737667\"></a></p>\n<h1>Fill Voids</h1>\n<pre><span class=\"c1\"># PYTHON</span>\n<span class=\"kn\">import</span> <span class=\"nn\">fill_voids</span>\n\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># 3d binary image </span>\n<span class=\"n\">filled_image</span> <span class=\"o\">=</span> <span class=\"n\">fill_voids</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">in_place</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># in_place allows editing of original image</span>\n<span class=\"n\">filled_image</span><span class=\"p\">,</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">fill_voids</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">return_fill_count</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># returns number of voxels filled in</span>\n</pre>\n<pre><span class=\"c1\">// C++ </span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"fill_voids.hpp\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">size_t</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n<span class=\"n\">sx</span> <span class=\"o\">=</span> <span class=\"n\">sy</span> <span class=\"o\">=</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">512</span><span class=\"p\">;</span>\n\n<span class=\"kt\">uint8_t</span><span class=\"o\">*</span> <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">...;</span> <span class=\"c1\">// 512x512x512 binary image</span>\n\n<span class=\"c1\">// modifies labels as a side effect, returns number of voxels filled in</span>\n<span class=\"kt\">size_t</span> <span class=\"n\">fill_ct</span> <span class=\"o\">=</span> <span class=\"n\">fill_voids</span><span class=\"o\">::</span><span class=\"n\">binary_fill_holes</span><span class=\"o\">&lt;</span><span class=\"kt\">uint8_t</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">sz</span><span class=\"p\">);</span> \n</pre>\n<p align=\"center\">\n<img alt=\"Filling five labels using SciPy binary_fill_holes vs fill_voids from a 512x512x512 densely labeled connectomics segmentation. (black) fill_voids 1.1.0 (blue) fill_voids 1.1.0 with `in_place=True` (red) scipy 1.4.1\" height=\"384\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c743ba9ce816482fe2e3a29aa6df20fa1b6fe55b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7365756e672d6c61622f66696c6c5f766f6964732f6d61737465722f636f6d70617269736f6e2e706e67\"><br>\nFig. 1: Filling five labels using SciPy binary_fill_holes vs fill_voids from a 512x512x512 densely labeled connectomics segmentation. (black) fill_voids 1.1.0 (blue) fill_voids 1.1.0 with `in_place=True` (red) scipy 1.4.1. In this test, fill_voids (`in_place=False`) is significantly faster than scipy with lower memory usage. \n</p>\n<p>This library contains a 3D void filling algorithm, similar in function to <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.binary_fill_holes.html\" rel=\"nofollow\"><code>scipy.ndimage.morphology.binary_fill_holes</code></a>, but with an eye towards higher performance and eventually multiple label support. The SciPy hole filling algorithm only applies to binary images and uses slow serial dilations.</p>\n<p>The current version of this library uses a scan line flood fill of the background labels and\nthen labels everything not filled as foreground.</p>\n<h3>pip Installation</h3>\n<pre>pip install fill-voids\n</pre>\n<p>If there's not binary for your platform and you have a C++ compiler try:</p>\n<pre>sudo apt-get install python3-dev <span class=\"c1\"># This is for Ubuntu, but whatever is appropriate for you</span>\npip install numpy\npip install fill-voids --no-binary :all:\n</pre>\n<h3>Current Algorithm</h3>\n<ol>\n<li>Raster scan and mark every foreground voxel <code>2</code> for pre-existing foreground.</li>\n<li>Raster scan each face of the current image and the first time a black pixel (<code>0</code>) is encountered after either starting or enountering a foreground pixel, add that location to a stack.</li>\n<li>Flood fill (six connected) with the visited background color (<code>1</code>) in sequence from each location in the stack that is not already foreground.</li>\n<li>Write out a binary image the same size as the input mapped as buffer != 1 (i.e. 0 or 2). This means non-visited holes and foreground will be marked as <code>1</code> for foreground and the visited background will be marked as <code>0</code>.</li>\n</ol>\n<p>We improve performance significantly by using libdivide to make computing x,y,z coordinates from array index faster, by scanning right and left to take advantage of machine memory speed, by only placing a neighbor on the stack when we've either just started a scan or just passed a foreground pixel while scanning.</p>\n<h3>Multi-Label Concept</h3>\n<p>Similarly to the <a href=\"https://github.com/seung-lab/connected-components-3d\" rel=\"nofollow\">connected-components-3d</a> and <a href=\"https://github.com/seung-lab/euclidean-distance-transform-3d\" rel=\"nofollow\">euclidean-distance-3d</a> projects, in connectomics, it can be common to want to apply void filling algorithms to all labels within a densely packed volume. A multi-label algorithm can be much faster than even the fastest serial application of a binary algorithm. Here's how this might go given an input image I:</p>\n<ol>\n<li>Compute M = max(I)</li>\n<li>Perform the fill as in the binary algorithm labeling the surrounding void as M+1. This means all voids are now either legitimate and can be filled or holes in-between labels.</li>\n<li>Raster scan through the volume. If a new void is encountered, we must determine if it is fillable or an in-between one which will not be filled.</li>\n<li>On encountering the void, record the last label seen and contour trace around it. If only that label is encountered during contour tracing, it is fillable. If another label is encountered, it is not fillable.</li>\n<li>During the contour trace, mark the trace using an integer not already used, such as M+2. If that label is encountered in the future, you'll know what to fill between it and the next label encountered based on the fillable determination. This phase stops when either the twin of the first M+2 label is encountered or when futher contour tracing isn't possible (in the case of single voxel gaps).</li>\n<li>(Inner Labels) If another label is encountered in the middle of a void, contour trace around it and mark the boundary with the same M+2 label that started the current fill.</li>\n</ol>\n\n          </div>"}, "last_serial": 6604811, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8fc0fd2770b1dfd3ab42b73272b5adee", "sha256": "a385c6bea4f35d4b5dde67caec71e4f0bc3bffcc74524955ff604b4abefccdcc"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp27-cp27m-macosx_10_14_intel.whl", "has_sig": false, "md5_digest": "8fc0fd2770b1dfd3ab42b73272b5adee", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 154655, "upload_time": "2019-12-12T07:41:54", "upload_time_iso_8601": "2019-12-12T07:41:54.838548Z", "url": "https://files.pythonhosted.org/packages/42/6f/b27739619cf658dba05a5785cc7cb5abb332b0a6e7c293e2634c46821eed/fill_voids-1.0.0-cp27-cp27m-macosx_10_14_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7897ed842202005f402bb98f568de923", "sha256": "98378e10c3e9ec3bf0a752b5b610a1910e03c89cf44e04ab093d38490b750bf5"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7897ed842202005f402bb98f568de923", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 581040, "upload_time": "2019-12-12T04:08:39", "upload_time_iso_8601": "2019-12-12T04:08:39.965975Z", "url": "https://files.pythonhosted.org/packages/4a/53/97e1e2bbff455bc8205fcd9ad436f0e6e4cc192e03faefae9c766ea0e548/fill_voids-1.0.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44351e6d0c0678e5dea16acc75b3b6aa", "sha256": "2c164fb72c4c9d1af8b75a962951b5bd6159e5be72a2ee1e8cc7e8df6110553f"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "44351e6d0c0678e5dea16acc75b3b6aa", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 604347, "upload_time": "2019-12-12T04:08:42", "upload_time_iso_8601": "2019-12-12T04:08:42.750125Z", "url": "https://files.pythonhosted.org/packages/dd/a8/6fc83c1b04d0fc6c10193fd0a212867251b0f1dc2f4a7e003b89fadb757e/fill_voids-1.0.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42b8ddfb138de34ca3388e0e1b007bb6", "sha256": "66440f8d79420871dfb284d2e997ffcf1f841141c1251c40b175af516ac2a679"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp36-cp36m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "42b8ddfb138de34ca3388e0e1b007bb6", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 163708, "upload_time": "2019-12-12T07:41:57", "upload_time_iso_8601": "2019-12-12T07:41:57.354122Z", "url": "https://files.pythonhosted.org/packages/a3/e3/231723f8cb9991e8d276d0890c112ee3aaf7c92f785fa566134d5638885f/fill_voids-1.0.0-cp36-cp36m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e807aa5ec5a6e90d86a98c916aa6d44", "sha256": "45e2c915bfe28c56e86c4cd9a896cec0997eb57770a4c7b550e683ae8df79eee"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5e807aa5ec5a6e90d86a98c916aa6d44", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 625339, "upload_time": "2019-12-12T04:08:44", "upload_time_iso_8601": "2019-12-12T04:08:44.602778Z", "url": "https://files.pythonhosted.org/packages/9b/f7/d707d72783cee5b80bdee878cb46f7986f8e26879903b6654556e66fc2cf/fill_voids-1.0.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bbb40a8428c9d828ab49085ad209e23", "sha256": "5396cd031fafd8bf51a219e681e30867ab71877b331e0ca11fa1fd5f87636972"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "2bbb40a8428c9d828ab49085ad209e23", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 145006, "upload_time": "2019-12-12T04:59:04", "upload_time_iso_8601": "2019-12-12T04:59:04.884325Z", "url": "https://files.pythonhosted.org/packages/9b/9a/369f5c85c59dc60ffe1bc11c61bdbdc3800eeaeb8876e67221bd6b65063b/fill_voids-1.0.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a039c23d1284fbc6645402f30c5a3999", "sha256": "027d8db52e081c2809a71208cdf794a68bfcadd8a6cb1e23e118fe2a4e074aae"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "a039c23d1284fbc6645402f30c5a3999", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 163904, "upload_time": "2019-12-12T07:41:59", "upload_time_iso_8601": "2019-12-12T07:41:59.338560Z", "url": "https://files.pythonhosted.org/packages/99/84/e9519688f076c937574b200b1ce45dcbbcfcf58d80e0e979fc5a23d5f2a4/fill_voids-1.0.0-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19c4580ee1f3218299cd688555d21403", "sha256": "5099e82d57be46811a330885cacc90361ee17daf7bd16479646455a38479f0af"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "19c4580ee1f3218299cd688555d21403", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 624214, "upload_time": "2019-12-12T04:08:46", "upload_time_iso_8601": "2019-12-12T04:08:46.388840Z", "url": "https://files.pythonhosted.org/packages/d1/1b/56c170bf23aecc6e96a9c90afc67ac6747fa2db6c695263f7c560c7138de/fill_voids-1.0.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2016b8d14421f8951456d400bdb86356", "sha256": "c458ffb8ef28d515624ccc7ab5ed870c9a0a2b6b1eaaaf54e673934f91856a1b"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "2016b8d14421f8951456d400bdb86356", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 135133, "upload_time": "2019-12-12T04:59:06", "upload_time_iso_8601": "2019-12-12T04:59:06.494690Z", "url": "https://files.pythonhosted.org/packages/3c/b9/678e2d7aad3785e53e00fe45c14f96f96a60d2296992905ce04c0eeb7c45/fill_voids-1.0.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be2f421a18e73f79fff0cb5ea758ab34", "sha256": "ffe456425746b82e6a03b38918c3725fd4cec6c6aca2a6ef72678b4a2501632f"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "be2f421a18e73f79fff0cb5ea758ab34", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 166763, "upload_time": "2019-12-12T07:42:01", "upload_time_iso_8601": "2019-12-12T07:42:01.082896Z", "url": "https://files.pythonhosted.org/packages/f8/8b/10dfa34b2821f0d18c9de55ab4cf7bb8093288715570e50dc6872650fef5/fill_voids-1.0.0-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79f01922510644df7af52237eea5c7d4", "sha256": "48342fa2c1bb15b59da41c0aaed66311ae6c3a8fb9c9dbe0a3f5de9d192ec569"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "79f01922510644df7af52237eea5c7d4", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 669314, "upload_time": "2019-12-12T04:08:47", "upload_time_iso_8601": "2019-12-12T04:08:47.907963Z", "url": "https://files.pythonhosted.org/packages/15/a7/b91382443d430155484918cc28e918a5b18d403f3c5c26aa1a62ed65ed04/fill_voids-1.0.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf89d8b08cc935fd5b3c2b24352fa413", "sha256": "94deb7c5069fd739d96f19d891de2feb5587cf9d0e25ffec6cdcdaac4a0e8892"}, "downloads": -1, "filename": "fill_voids-1.0.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "bf89d8b08cc935fd5b3c2b24352fa413", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 136650, "upload_time": "2019-12-12T05:04:30", "upload_time_iso_8601": "2019-12-12T05:04:30.132704Z", "url": "https://files.pythonhosted.org/packages/71/bb/c39a84303f818faacd7b7d85fad52770ad920764161f86d85b7132bce943/fill_voids-1.0.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24a8af056178ecb5d05d1685c7884b73", "sha256": "d989418a31dc4c4ebd328e6b8fc652d44124e4072db9fe5a71a431354579cdd5"}, "downloads": -1, "filename": "fill_voids-1.0.0.tar.gz", "has_sig": false, "md5_digest": "24a8af056178ecb5d05d1685c7884b73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 241551, "upload_time": "2019-12-12T04:08:49", "upload_time_iso_8601": "2019-12-12T04:08:49.859618Z", "url": "https://files.pythonhosted.org/packages/c7/64/e3c6248e8f967590928c23f062cc8567edd05e5e534a2f998ef8b0537c07/fill_voids-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f9364888eb0f612412d783c36a217e54", "sha256": "00ae2663e3efbcccdb9acce555499552f7847cb93a36971bfe8483a8a6a7afff"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f9364888eb0f612412d783c36a217e54", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 641155, "upload_time": "2020-02-10T20:16:58", "upload_time_iso_8601": "2020-02-10T20:16:58.839257Z", "url": "https://files.pythonhosted.org/packages/67/e4/a6fa166889a8c372bf1b41aa849f419a1bc5bb539d6fffc7c929b22de20f/fill_voids-1.1.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a83ff1c4c215fca960619a421c06cb0a", "sha256": "b9e539c9f936f2edfbe85e13403df9ea421844bdd3ba8aec614efd55cf522cdc"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a83ff1c4c215fca960619a421c06cb0a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 657645, "upload_time": "2020-02-10T20:17:00", "upload_time_iso_8601": "2020-02-10T20:17:00.911272Z", "url": "https://files.pythonhosted.org/packages/6f/00/dce0bf5bc64a0097565df583ca6435f67d2ca128a309b8ddc5ed70d7345e/fill_voids-1.1.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70bc88e62216fe84b3cc8569d45b8f7b", "sha256": "d4d282cb1f2048e69b623c1eef1f8a7bd0647c79ff2270eb47afacf87c58a4bd"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "70bc88e62216fe84b3cc8569d45b8f7b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 682752, "upload_time": "2020-02-10T20:17:02", "upload_time_iso_8601": "2020-02-10T20:17:02.364003Z", "url": "https://files.pythonhosted.org/packages/64/5f/47e75fd82112154fb10d7ecc6f71296fdda04e1d127e359be771b49b110e/fill_voids-1.1.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc8e873749634646c458871bb18a5f39", "sha256": "6f5668db06b96d105a6f1ab1294ca406e996734b3f7c18f32cce905f4a3c2ebc"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "dc8e873749634646c458871bb18a5f39", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 153389, "upload_time": "2020-02-10T20:33:12", "upload_time_iso_8601": "2020-02-10T20:33:12.707587Z", "url": "https://files.pythonhosted.org/packages/f7/9d/888791ff6b90dac3ffa79adb49cd2d42fef58170e02786f7689a02454115/fill_voids-1.1.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00c54f4eb6b15497e5a3b89145debb3", "sha256": "c9bc21262de21271fce9c2ab8298871da44c7fcb3022a3592e2fa6ea732c8044"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a00c54f4eb6b15497e5a3b89145debb3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 680353, "upload_time": "2020-02-10T20:17:04", "upload_time_iso_8601": "2020-02-10T20:17:04.241426Z", "url": "https://files.pythonhosted.org/packages/ac/40/0714f96bfe89c2b881a4f329489fc644f489bd587df638125035998c156b/fill_voids-1.1.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20ccdee9c83e1fc3359b0304d0d700a7", "sha256": "0106982014c93e6466450dfd790a780f0ab0a98a71817eb1b7e2d064372dd621"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "20ccdee9c83e1fc3359b0304d0d700a7", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 153390, "upload_time": "2020-02-10T20:33:13", "upload_time_iso_8601": "2020-02-10T20:33:13.887066Z", "url": "https://files.pythonhosted.org/packages/96/03/2b376fc107cb91e8513852986c388fcbfe218da10a2580e93a8ab2639422/fill_voids-1.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "defd7e4cd16a33659d20b45815b3db2a", "sha256": "d501c2f348b6ffdf084e8b324b15999284fdc4aae44ca038c91fc5eab9440d03"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "defd7e4cd16a33659d20b45815b3db2a", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 725616, "upload_time": "2020-02-10T20:17:05", "upload_time_iso_8601": "2020-02-10T20:17:05.939659Z", "url": "https://files.pythonhosted.org/packages/ca/56/4e1ad97c44f6bacf416c3183445d7f59d71499c7c4afdb1db8b34faedab5/fill_voids-1.1.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed6efeef933a6930211e7c4a7cd12d6c", "sha256": "aa4ba27820ce60dc2a8edd5b3ccc48e8cf0bbb40e960410581e8b3d76dad3c98"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "ed6efeef933a6930211e7c4a7cd12d6c", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 146687, "upload_time": "2020-02-10T20:33:15", "upload_time_iso_8601": "2020-02-10T20:33:15.346778Z", "url": "https://files.pythonhosted.org/packages/ff/55/d71764a837af067de979d6bf38fe6cddf99152438e1dba5e255a357bcf01/fill_voids-1.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07fb580abdba078baa54e53d83f3a580", "sha256": "5da32b012876aa005aa3de9056592753c90ce515b233d5a4b201971b9edc8819"}, "downloads": -1, "filename": "fill_voids-1.1.0.tar.gz", "has_sig": false, "md5_digest": "07fb580abdba078baa54e53d83f3a580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 243634, "upload_time": "2020-02-10T20:17:07", "upload_time_iso_8601": "2020-02-10T20:17:07.590810Z", "url": "https://files.pythonhosted.org/packages/cb/aa/00ef6dc58be0a7b1f936685a9b06d0be1971dab30344fc472045f4c96dff/fill_voids-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9364888eb0f612412d783c36a217e54", "sha256": "00ae2663e3efbcccdb9acce555499552f7847cb93a36971bfe8483a8a6a7afff"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp27-cp27m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f9364888eb0f612412d783c36a217e54", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 641155, "upload_time": "2020-02-10T20:16:58", "upload_time_iso_8601": "2020-02-10T20:16:58.839257Z", "url": "https://files.pythonhosted.org/packages/67/e4/a6fa166889a8c372bf1b41aa849f419a1bc5bb539d6fffc7c929b22de20f/fill_voids-1.1.0-cp27-cp27m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a83ff1c4c215fca960619a421c06cb0a", "sha256": "b9e539c9f936f2edfbe85e13403df9ea421844bdd3ba8aec614efd55cf522cdc"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a83ff1c4c215fca960619a421c06cb0a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 657645, "upload_time": "2020-02-10T20:17:00", "upload_time_iso_8601": "2020-02-10T20:17:00.911272Z", "url": "https://files.pythonhosted.org/packages/6f/00/dce0bf5bc64a0097565df583ca6435f67d2ca128a309b8ddc5ed70d7345e/fill_voids-1.1.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70bc88e62216fe84b3cc8569d45b8f7b", "sha256": "d4d282cb1f2048e69b623c1eef1f8a7bd0647c79ff2270eb47afacf87c58a4bd"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "70bc88e62216fe84b3cc8569d45b8f7b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 682752, "upload_time": "2020-02-10T20:17:02", "upload_time_iso_8601": "2020-02-10T20:17:02.364003Z", "url": "https://files.pythonhosted.org/packages/64/5f/47e75fd82112154fb10d7ecc6f71296fdda04e1d127e359be771b49b110e/fill_voids-1.1.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc8e873749634646c458871bb18a5f39", "sha256": "6f5668db06b96d105a6f1ab1294ca406e996734b3f7c18f32cce905f4a3c2ebc"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "dc8e873749634646c458871bb18a5f39", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 153389, "upload_time": "2020-02-10T20:33:12", "upload_time_iso_8601": "2020-02-10T20:33:12.707587Z", "url": "https://files.pythonhosted.org/packages/f7/9d/888791ff6b90dac3ffa79adb49cd2d42fef58170e02786f7689a02454115/fill_voids-1.1.0-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00c54f4eb6b15497e5a3b89145debb3", "sha256": "c9bc21262de21271fce9c2ab8298871da44c7fcb3022a3592e2fa6ea732c8044"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a00c54f4eb6b15497e5a3b89145debb3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 680353, "upload_time": "2020-02-10T20:17:04", "upload_time_iso_8601": "2020-02-10T20:17:04.241426Z", "url": "https://files.pythonhosted.org/packages/ac/40/0714f96bfe89c2b881a4f329489fc644f489bd587df638125035998c156b/fill_voids-1.1.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20ccdee9c83e1fc3359b0304d0d700a7", "sha256": "0106982014c93e6466450dfd790a780f0ab0a98a71817eb1b7e2d064372dd621"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "20ccdee9c83e1fc3359b0304d0d700a7", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 153390, "upload_time": "2020-02-10T20:33:13", "upload_time_iso_8601": "2020-02-10T20:33:13.887066Z", "url": "https://files.pythonhosted.org/packages/96/03/2b376fc107cb91e8513852986c388fcbfe218da10a2580e93a8ab2639422/fill_voids-1.1.0-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "defd7e4cd16a33659d20b45815b3db2a", "sha256": "d501c2f348b6ffdf084e8b324b15999284fdc4aae44ca038c91fc5eab9440d03"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "defd7e4cd16a33659d20b45815b3db2a", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 725616, "upload_time": "2020-02-10T20:17:05", "upload_time_iso_8601": "2020-02-10T20:17:05.939659Z", "url": "https://files.pythonhosted.org/packages/ca/56/4e1ad97c44f6bacf416c3183445d7f59d71499c7c4afdb1db8b34faedab5/fill_voids-1.1.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed6efeef933a6930211e7c4a7cd12d6c", "sha256": "aa4ba27820ce60dc2a8edd5b3ccc48e8cf0bbb40e960410581e8b3d76dad3c98"}, "downloads": -1, "filename": "fill_voids-1.1.0-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "ed6efeef933a6930211e7c4a7cd12d6c", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 146687, "upload_time": "2020-02-10T20:33:15", "upload_time_iso_8601": "2020-02-10T20:33:15.346778Z", "url": "https://files.pythonhosted.org/packages/ff/55/d71764a837af067de979d6bf38fe6cddf99152438e1dba5e255a357bcf01/fill_voids-1.1.0-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07fb580abdba078baa54e53d83f3a580", "sha256": "5da32b012876aa005aa3de9056592753c90ce515b233d5a4b201971b9edc8819"}, "downloads": -1, "filename": "fill_voids-1.1.0.tar.gz", "has_sig": false, "md5_digest": "07fb580abdba078baa54e53d83f3a580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 243634, "upload_time": "2020-02-10T20:17:07", "upload_time_iso_8601": "2020-02-10T20:17:07.590810Z", "url": "https://files.pythonhosted.org/packages/cb/aa/00ef6dc58be0a7b1f936685a9b06d0be1971dab30344fc472045f4c96dff/fill_voids-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:29 2020"}