{"info": {"author": "Jeferson Menegazzo", "author_email": "jef.menegazzo@outlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<div align=\"center\">\n\n<img \nsrc=\"https://gloimg.gbtcdn.com/soa/gb/2015/201509/goods_img_big-v1/1442961797146-P-3106869.jpg\"\nalt=\"MPU-9250\"\nheight=\"150\"\nalign=\"center\"\n/>\n\n</div>\n\n<br />\n\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/jefmenegazzo/mpu9250) \n![pypi](https://img.shields.io/pypi/v/pybadges.svg)\n![versions](https://img.shields.io/pypi/pyversions/pybadges.svg)\n[![GitHub](https://img.shields.io/github/license/jefmenegazzo/mpu9250)](LICENSE) \n![GitHub issues](https://img.shields.io/github/issues/jefmenegazzo/mpu9250) \n[![PyPI - Downloads](https://img.shields.io/pypi/dm/mpu9250_jmdev)](https://pypi.org/project/mpu9250_jmdev)\n\n# MPU-9250 (MPU-6500 + AK8963) I2C Driver in Python\n\n**MPU-9250** is a multi-chip module (MCM) consisting of two dies integrated into a single QFN package. One die the **MPU-6500** houses the 3-Axis gyroscope, the 3-Axis accelerometer and  temperature sensor. The other die houses the **AK8963** 3-Axis magnetometer. Hence, the MPU-9250 is a 9-axis MotionTracking device that combines a 3-axis gyroscope, 3-axis accelerometer, 3-axis magnetometer and a Digital Motion Processor\u00e2\u201e\u00a2 (DMP). The hardware documentation for MPU-9250 can be found in **docs** folder.\n\n## Table of Contents\n- [Instalation](#Instalation)\n- [How To Use](#How-To-Use)\n- [Getting Data](#Getting-Data)\n- [Calibrating Sensors](#Calibrating-Sensors)\n- [Reset Registers](#Reset-Registers)\n- [Final Notes](#Final-Notes)\n- [License](#License)\n\n## Instalation\n\nNotice that this package requires Python 3.6 or higher.\n\nTo install via pip, use <sup>[1](#f1)</sup> :\n\n```bash\npip install mpu9250-jmdev\n```\n\nTo use the package for development purposes, use <sup>[2](#f2)</sup> :\n\n```bash\ngit clone https://github.com/jefmenegazzo/MPU9250.git\ncd MPU9250\npip install -e .\n```\n\n<b id=\"f1\">1</b>,<b id=\"f2\">2</b>: If you have both python 2 and 3 installed on your machine, use ```pip3``` to install and ```python3``` to run instead.\n\n## How To Use\n\nWith I2C Bus, you can use the MPU-9250 in two ways: simple mode or master-slave mode. The example source-codes are in **examples** folder.\n\n### Simple Mode (Master Only Mode)\n\nIn this mode, the MPU-9250 connects directly to Raspberry GPIOs. There are two physical addresses available for the MPU-9250, being 0x68 and 0x69. Therefore, on each I2C Bus you can have up to two MPU-9250 connected. The connection between GPIOs and MPU-9250 is as follows:\n\n| MPU9250  | Raspberry  | Note |\n|---|---|---|\n| VDD  | 3.3V  | On some models of the MPU-9250 5V can be used.  |\n| AD0  | 3.3V  | If used, the MPU-9250's address is changed to 0x69. Otherwise, the address is 0x68.  |\n| GND  |  GND |   |\n| SDA  |  SDA |   |\n| SCL  |  SCL |   |\n\nBelow simple code to test the execution with never ending loop:\n\n```python\nimport time\nfrom mpu9250_jmdev.registers import *\nfrom mpu9250_jmdev.mpu_9250 import MPU9250\n\nmpu = MPU9250(\n    address_ak=AK8963_ADDRESS, \n    address_mpu_master=MPU9050_ADDRESS_68, # In 0x68 Address\n    address_mpu_slave=None, \n    bus=1, \n    gfs=GFS_1000, \n    afs=AFS_8G, \n    mfs=AK8963_BIT_16, \n    mode=AK8963_MODE_C100HZ)\n\nmpu.configure() # Apply the settings to the registers.\n\nwhile True:\n\n    print(\"|.....MPU9250 in 0x68 Address.....|\")\n    print(\"Accelerometer\", mpu.readAccelerometerMaster())\n    print(\"Gyroscope\", mpu.readGyroscopeMaster())\n    print(\"Magnetometer\", mpu.readMagnetometerMaster())\n    print(\"Temperature\", mpu.readTemperatureMaster())\n    print(\"\\n\")\n\n    time.sleep(1)\n```\n\n### Master-Slave Mode\n\nIf you want to have more than two MPU-9250 on one I2C Bus, you must use Master-Slave mode. In this case, first configure the MPU-9250 according to the previous section, they will be used as Master. To configure the MPU-9250 Slaves, connect as follows:\n\n| MPU9250 Slave | MPU9250 Master | Raspberry PI | Note |\n|---|---|---|---|\n| VDD  | | 3.3V  | On some models of the MPU-9250 5V can be used.  |\n| AD0  | | 3.3V  | If used, the MPU-9250's address is changed to 0x69. Otherwise, the address is 0x68.  |\n| GND  | | GND |   |\n| SDA  |  EDA |   |\n| SCL  |  ECL |   |\n\nThis way you will have an MPU-9250 Master connecting SDA and SLC directly to the GPIO in Raspberry PI, and an MPU-9250 Slave connecting SDA and SLC to the EDA and ELC in MPU-9250 Master.\n\nBelow simple code to test the execution with never ending loop:\n\n```python\nimport time\nfrom mpu9250_jmdev.registers import *\nfrom mpu9250_jmdev.mpu_9250 import MPU9250\n\nmpu = MPU9250(\n    address_ak=AK8963_ADDRESS, \n    address_mpu_master=MPU9050_ADDRESS_68, # Master has 0x68 Address\n    address_mpu_slave=MPU9050_ADDRESS_68, # Slave has 0x68 Address\n    bus=1, \n    gfs=GFS_1000, \n    afs=AFS_8G, \n    mfs=AK8963_BIT_16, \n    mode=AK8963_MODE_C100HZ)\n\nmpu.configure() # Apply the settings to the registers.\n\nwhile True:\n\n    print(\"|.....MPU9250 in 0x68 I2C Bus - Master.....|\")\n    print(\"Accelerometer\", mpu.readAccelerometerMaster())\n    print(\"Gyroscope\", mpu.readGyroscopeMaster())\n    print(\"Magnetometer\", mpu.readMagnetometerMaster())\n    print(\"Temperature\", mpu.readTemperatureMaster())\n    print(\"\\n\")\n\n    print(\"|.....MPU9250 in 0x68 I2C Bus - Slave in 0x68 auxiliary sensor address.....|\")\n    print(\"Accelerometer\", mpu.readAccelerometerSlave())\n    print(\"Gyroscope\", mpu.readGyroscopeSlave())\n    print(\"Temperature\", mpu.readTemperatureSlave())\n    print(\"\\n\")\n\n    time.sleep(1)\n```\n\n## Getting Data\n\nAll sensors and measurement units of the MPU-9250 are described below:\n\n| Sensor  | Unit |\n|---|---|\n| Accelerometer | g (1g = 9.80665 m/s\u00c2\u00b2) |\n| Gyroscope | degrees per second (\u00c2\u00b0/s) |\n| Magnetometer | microtesla (\u00ce\u00bcT) |\n| Temperature | celsius degrees (\u00c2\u00b0C) |\n\nBefore read the sensor data, make sure that you have executed the command:\n\n```python\n    mpu.configure() # Apply the settings to the registers.\n```\n\n### Reading Accelerometer\n\nThe accelerometer measures acceleration in three axes (X, Y, Z). To read your data, use the commands:\n\n```python\n    masterData = mpu.readAccelerometerMaster()\n    slaveData = mpu.readAccelerometerSlave() # If there is a slave\n```\n\n### Reading Gyroscope\n\nThe gyroscope measures rotation rate in three axes (X, Y, Z). To read your data, use the commands:\n\n```python\n    masterData = mpu.readGyroscopeMaster()\n    slaveData = mpu.readGyroscopeSlave() # If there is a slave\n```\n\n### Reading Magnetometer\n\nThe magnetometer measures geomagnetic field in three axes (X, Y, Z). To read your data, use the command:\n\n```python\n    masterData = mpu.readMagnetometerMaster()\n```\n\nWhen used in Simple Mode (Master Only Mode), the magnetometer will be available on the I2C Bus with address 0x0C. When in Master-Slave Mode, the magnetometer will also behave as a slave, and address 0x0C will not appear on the I2C Bus, acting as an auxiliary sensor.\n\n### Reading Temperature\n\nThe temperature sensor measures data in Celsius degrees. To read your data, use the command:\n\n```python\n    masterData = mpu.readTemperatureMaster()\n    slaveData = mpu.readTemperatureSlave() # If there is a slave\n```\n\n### Reading All Data\n\nIf you want to read data from all sensors (master and slave) at the same time, use the commands below (useful for saving to csv):\n\n```python\n    labels = mpu.getAllDataLabels() # return labels with data description for each array position\n    data = mpu.getAllData() # returns a array with data from all sensors\n```\n\n### Reading All Settings\n\nIf you want to read settings (biases, resolutions, scale factors) from all sensors (master and slave) at the same time, use the commands below (useful for saving to csv):\n\n```python\n    labels = mpu.getAllSettingsLabels() # return labels with settings description for each array position\n    data = mpu.getAllSettings() # returns a array with settings from all sensors\n```\n\n## Calibrating Sensors\n\nThis library has functions ready for calibration accelerometer, gyroscope and magnetometer sensors. To calibrate all sensors at once, use the command:\n\n```python\n    mpu.calibrate() # Calibrate sensors\n    mpu.configure() # The calibration function resets the sensors, so you need to reconfigure them\n```\n\n### Accelerometer and Gyroscope\n\nTo calibrate the accelerometer and gyroscope sensors, make sure that the sensors remain fixed and stationary. Align the accelerometer's Z axis with gravity, i.e., gravity (1g) should only appear on the sensor's Z axis (place the sensor in a flat place). To perform calibration run the command:\n\n```python\n    mpu.calibrateMPU6500() # Calibrate sensors\n    mpu.configure() # The calibration function resets the sensors, so you need to reconfigure them\n\n    abias = mpu.abias # Get the master accelerometer biases\n    abias_slave = mpu.abias_slave # Get the slave accelerometer biases\n    gbias = mpu.gbias # Get the master gyroscope biases\n    gbias_slave = mpu.gbias_slave # Get the slave gyroscope biases\n```\n\nThe biases are programmatically applied to the sensor data. Therefore, when reading the sensor data, the biases will be applied internally, returning corrected data. If you have calculated the biases of these sensors once, and want the controller to use them, simply parameterize as follows:\n\n```python\n    mpu.abias = [0, 0, 0] # Set the master accelerometer biases\n    mpu.abias_slave = [0, 0, 0] # Set the slave accelerometer biases\n    mpu.gbias = [0, 0, 0] # Set the master gyroscope biases\n    mpu.gbias_slave = [0, 0, 0] # Set the slave gyroscope biases\n```\n\n### Magnetometer\n\nTo perform calibration run the command:\n\n```python\n    mpu.configureAK8963() # Calibrate sensors\n    mpu.configure() # The calibration function resets the sensors, so you need to reconfigure them\n\n    magScale = mpu.magScale # Get magnetometer soft iron distortion\n    mbias = mpu.mbias # Get magnetometer hard iron distortion\n```\n\nIf you have calculated the biases of these sensor once, and want the controller to use them, simply parameterize as follows:\n\n```python\n    mpu.magScale = [0, 0, 0] # Set magnetometer soft iron distortion\n    mpu.mbias = [0, 0, 0] # Set magnetometer hard iron distortion\n```\n\n## Reset Registers\n\nIf you want to reset the values in all registers of all sensors in all MPU-9250, execute the command below:\n\n```python\n    mpu.reset() # Reset sensors\n    mpu.configure() # After resetting you need to reconfigure the sensors\n```\n\n## Final Notes\n\nThe foler **mpu9250** consist of the high level library. The folder **examples** contains files with basic execution and threaded examples.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jefmenegazzo/MPU9250", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mpu9250-jmdev", "package_url": "https://pypi.org/project/mpu9250-jmdev/", "platform": "", "project_url": "https://pypi.org/project/mpu9250-jmdev/", "project_urls": {"Homepage": "https://github.com/jefmenegazzo/MPU9250"}, "release_url": "https://pypi.org/project/mpu9250-jmdev/1.0.10/", "requires_dist": null, "requires_python": ">=3.6", "summary": "MPU-9250 (MPU-6500 + AK8963) I2C Driver in Python for Raspbery PI", "version": "1.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p><img align=\"center\" alt=\"MPU-9250\" height=\"150\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4d00ba3f2e99eb2b781c0ccb58bae0800fe0635/68747470733a2f2f676c6f696d672e67627463646e2e636f6d2f736f612f67622f323031352f3230313530392f676f6f64735f696d675f6269672d76312f313434323936313739373134362d502d333130363836392e6a7067\"></p>\n</div>\n<br>\n<p><img alt=\"GitHub tag (latest by date)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2cd114ece3fd82775d18bdc7355708e8aea90c9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f6a65666d656e6567617a7a6f2f6d707539323530\">\n<img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f63d75defd672d09490ffe0d4023e42f20f995f8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796261646765732e737667\">\n<img alt=\"versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/663448f90f103babe3b8b9dc15965ec36915dd58/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796261646765732e737667\">\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b1627ca64cfdc7d860f77630763f7fb12b59c8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6a65666d656e6567617a7a6f2f6d707539323530\"></a>\n<img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37a5976a8e8fb3ceac62f8b08493acedd0b730b1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6a65666d656e6567617a7a6f2f6d707539323530\">\n<a href=\"https://pypi.org/project/mpu9250_jmdev\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dcb6fe857c84bdc7e3b499d5a716cd9b86dfa03/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d7075393235305f6a6d646576\"></a></p>\n<h1>MPU-9250 (MPU-6500 + AK8963) I2C Driver in Python</h1>\n<p><strong>MPU-9250</strong> is a multi-chip module (MCM) consisting of two dies integrated into a single QFN package. One die the <strong>MPU-6500</strong> houses the 3-Axis gyroscope, the 3-Axis accelerometer and  temperature sensor. The other die houses the <strong>AK8963</strong> 3-Axis magnetometer. Hence, the MPU-9250 is a 9-axis MotionTracking device that combines a 3-axis gyroscope, 3-axis accelerometer, 3-axis magnetometer and a Digital Motion Processor\u00e2\u201e\u00a2 (DMP). The hardware documentation for MPU-9250 can be found in <strong>docs</strong> folder.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#Instalation\" rel=\"nofollow\">Instalation</a></li>\n<li><a href=\"#How-To-Use\" rel=\"nofollow\">How To Use</a></li>\n<li><a href=\"#Getting-Data\" rel=\"nofollow\">Getting Data</a></li>\n<li><a href=\"#Calibrating-Sensors\" rel=\"nofollow\">Calibrating Sensors</a></li>\n<li><a href=\"#Reset-Registers\" rel=\"nofollow\">Reset Registers</a></li>\n<li><a href=\"#Final-Notes\" rel=\"nofollow\">Final Notes</a></li>\n<li><a href=\"#License\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Instalation</h2>\n<p>Notice that this package requires Python 3.6 or higher.</p>\n<p>To install via pip, use <sup><a href=\"#f1\" rel=\"nofollow\">1</a></sup> :</p>\n<pre>pip install mpu9250-jmdev\n</pre>\n<p>To use the package for development purposes, use <sup><a href=\"#f2\" rel=\"nofollow\">2</a></sup> :</p>\n<pre>git clone https://github.com/jefmenegazzo/MPU9250.git\n<span class=\"nb\">cd</span> MPU9250\npip install -e .\n</pre>\n<p><b id=\"f1\">1</b>,<b id=\"f2\">2</b>: If you have both python 2 and 3 installed on your machine, use <code>pip3</code> to install and <code>python3</code> to run instead.</p>\n<h2>How To Use</h2>\n<p>With I2C Bus, you can use the MPU-9250 in two ways: simple mode or master-slave mode. The example source-codes are in <strong>examples</strong> folder.</p>\n<h3>Simple Mode (Master Only Mode)</h3>\n<p>In this mode, the MPU-9250 connects directly to Raspberry GPIOs. There are two physical addresses available for the MPU-9250, being 0x68 and 0x69. Therefore, on each I2C Bus you can have up to two MPU-9250 connected. The connection between GPIOs and MPU-9250 is as follows:</p>\n<table>\n<thead>\n<tr>\n<th>MPU9250</th>\n<th>Raspberry</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VDD</td>\n<td>3.3V</td>\n<td>On some models of the MPU-9250 5V can be used.</td>\n</tr>\n<tr>\n<td>AD0</td>\n<td>3.3V</td>\n<td>If used, the MPU-9250's address is changed to 0x69. Otherwise, the address is 0x68.</td>\n</tr>\n<tr>\n<td>GND</td>\n<td>GND</td>\n<td></td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>SDA</td>\n<td></td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>SCL</td>\n<td></td>\n</tr></tbody></table>\n<p>Below simple code to test the execution with never ending loop:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu9250_jmdev.registers</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu9250_jmdev.mpu_9250</span> <span class=\"kn\">import</span> <span class=\"n\">MPU9250</span>\n\n<span class=\"n\">mpu</span> <span class=\"o\">=</span> <span class=\"n\">MPU9250</span><span class=\"p\">(</span>\n    <span class=\"n\">address_ak</span><span class=\"o\">=</span><span class=\"n\">AK8963_ADDRESS</span><span class=\"p\">,</span> \n    <span class=\"n\">address_mpu_master</span><span class=\"o\">=</span><span class=\"n\">MPU9050_ADDRESS_68</span><span class=\"p\">,</span> <span class=\"c1\"># In 0x68 Address</span>\n    <span class=\"n\">address_mpu_slave</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> \n    <span class=\"n\">bus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n    <span class=\"n\">gfs</span><span class=\"o\">=</span><span class=\"n\">GFS_1000</span><span class=\"p\">,</span> \n    <span class=\"n\">afs</span><span class=\"o\">=</span><span class=\"n\">AFS_8G</span><span class=\"p\">,</span> \n    <span class=\"n\">mfs</span><span class=\"o\">=</span><span class=\"n\">AK8963_BIT_16</span><span class=\"p\">,</span> \n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">AK8963_MODE_C100HZ</span><span class=\"p\">)</span>\n\n<span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># Apply the settings to the registers.</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"|.....MPU9250 in 0x68 Address.....|\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Accelerometer\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readAccelerometerMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Gyroscope\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readGyroscopeMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Magnetometer\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readMagnetometerMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readTemperatureMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>Master-Slave Mode</h3>\n<p>If you want to have more than two MPU-9250 on one I2C Bus, you must use Master-Slave mode. In this case, first configure the MPU-9250 according to the previous section, they will be used as Master. To configure the MPU-9250 Slaves, connect as follows:</p>\n<table>\n<thead>\n<tr>\n<th>MPU9250 Slave</th>\n<th>MPU9250 Master</th>\n<th>Raspberry PI</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VDD</td>\n<td></td>\n<td>3.3V</td>\n<td>On some models of the MPU-9250 5V can be used.</td>\n</tr>\n<tr>\n<td>AD0</td>\n<td></td>\n<td>3.3V</td>\n<td>If used, the MPU-9250's address is changed to 0x69. Otherwise, the address is 0x68.</td>\n</tr>\n<tr>\n<td>GND</td>\n<td></td>\n<td>GND</td>\n<td></td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>EDA</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>ECL</td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<p>This way you will have an MPU-9250 Master connecting SDA and SLC directly to the GPIO in Raspberry PI, and an MPU-9250 Slave connecting SDA and SLC to the EDA and ELC in MPU-9250 Master.</p>\n<p>Below simple code to test the execution with never ending loop:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu9250_jmdev.registers</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu9250_jmdev.mpu_9250</span> <span class=\"kn\">import</span> <span class=\"n\">MPU9250</span>\n\n<span class=\"n\">mpu</span> <span class=\"o\">=</span> <span class=\"n\">MPU9250</span><span class=\"p\">(</span>\n    <span class=\"n\">address_ak</span><span class=\"o\">=</span><span class=\"n\">AK8963_ADDRESS</span><span class=\"p\">,</span> \n    <span class=\"n\">address_mpu_master</span><span class=\"o\">=</span><span class=\"n\">MPU9050_ADDRESS_68</span><span class=\"p\">,</span> <span class=\"c1\"># Master has 0x68 Address</span>\n    <span class=\"n\">address_mpu_slave</span><span class=\"o\">=</span><span class=\"n\">MPU9050_ADDRESS_68</span><span class=\"p\">,</span> <span class=\"c1\"># Slave has 0x68 Address</span>\n    <span class=\"n\">bus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> \n    <span class=\"n\">gfs</span><span class=\"o\">=</span><span class=\"n\">GFS_1000</span><span class=\"p\">,</span> \n    <span class=\"n\">afs</span><span class=\"o\">=</span><span class=\"n\">AFS_8G</span><span class=\"p\">,</span> \n    <span class=\"n\">mfs</span><span class=\"o\">=</span><span class=\"n\">AK8963_BIT_16</span><span class=\"p\">,</span> \n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">AK8963_MODE_C100HZ</span><span class=\"p\">)</span>\n\n<span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># Apply the settings to the registers.</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"|.....MPU9250 in 0x68 I2C Bus - Master.....|\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Accelerometer\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readAccelerometerMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Gyroscope\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readGyroscopeMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Magnetometer\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readMagnetometerMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readTemperatureMaster</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"|.....MPU9250 in 0x68 I2C Bus - Slave in 0x68 auxiliary sensor address.....|\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Accelerometer\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readAccelerometerSlave</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Gyroscope\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readGyroscopeSlave</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">,</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readTemperatureSlave</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Getting Data</h2>\n<p>All sensors and measurement units of the MPU-9250 are described below:</p>\n<table>\n<thead>\n<tr>\n<th>Sensor</th>\n<th>Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accelerometer</td>\n<td>g (1g = 9.80665 m/s\u00c2\u00b2)</td>\n</tr>\n<tr>\n<td>Gyroscope</td>\n<td>degrees per second (\u00c2\u00b0/s)</td>\n</tr>\n<tr>\n<td>Magnetometer</td>\n<td>microtesla (\u00ce\u00bcT)</td>\n</tr>\n<tr>\n<td>Temperature</td>\n<td>celsius degrees (\u00c2\u00b0C)</td>\n</tr></tbody></table>\n<p>Before read the sensor data, make sure that you have executed the command:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># Apply the settings to the registers.</span>\n</pre>\n<h3>Reading Accelerometer</h3>\n<p>The accelerometer measures acceleration in three axes (X, Y, Z). To read your data, use the commands:</p>\n<pre>    <span class=\"n\">masterData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readAccelerometerMaster</span><span class=\"p\">()</span>\n    <span class=\"n\">slaveData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readAccelerometerSlave</span><span class=\"p\">()</span> <span class=\"c1\"># If there is a slave</span>\n</pre>\n<h3>Reading Gyroscope</h3>\n<p>The gyroscope measures rotation rate in three axes (X, Y, Z). To read your data, use the commands:</p>\n<pre>    <span class=\"n\">masterData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readGyroscopeMaster</span><span class=\"p\">()</span>\n    <span class=\"n\">slaveData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readGyroscopeSlave</span><span class=\"p\">()</span> <span class=\"c1\"># If there is a slave</span>\n</pre>\n<h3>Reading Magnetometer</h3>\n<p>The magnetometer measures geomagnetic field in three axes (X, Y, Z). To read your data, use the command:</p>\n<pre>    <span class=\"n\">masterData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readMagnetometerMaster</span><span class=\"p\">()</span>\n</pre>\n<p>When used in Simple Mode (Master Only Mode), the magnetometer will be available on the I2C Bus with address 0x0C. When in Master-Slave Mode, the magnetometer will also behave as a slave, and address 0x0C will not appear on the I2C Bus, acting as an auxiliary sensor.</p>\n<h3>Reading Temperature</h3>\n<p>The temperature sensor measures data in Celsius degrees. To read your data, use the command:</p>\n<pre>    <span class=\"n\">masterData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readTemperatureMaster</span><span class=\"p\">()</span>\n    <span class=\"n\">slaveData</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">readTemperatureSlave</span><span class=\"p\">()</span> <span class=\"c1\"># If there is a slave</span>\n</pre>\n<h3>Reading All Data</h3>\n<p>If you want to read data from all sensors (master and slave) at the same time, use the commands below (useful for saving to csv):</p>\n<pre>    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">getAllDataLabels</span><span class=\"p\">()</span> <span class=\"c1\"># return labels with data description for each array position</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">getAllData</span><span class=\"p\">()</span> <span class=\"c1\"># returns a array with data from all sensors</span>\n</pre>\n<h3>Reading All Settings</h3>\n<p>If you want to read settings (biases, resolutions, scale factors) from all sensors (master and slave) at the same time, use the commands below (useful for saving to csv):</p>\n<pre>    <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">getAllSettingsLabels</span><span class=\"p\">()</span> <span class=\"c1\"># return labels with settings description for each array position</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">getAllSettings</span><span class=\"p\">()</span> <span class=\"c1\"># returns a array with settings from all sensors</span>\n</pre>\n<h2>Calibrating Sensors</h2>\n<p>This library has functions ready for calibration accelerometer, gyroscope and magnetometer sensors. To calibrate all sensors at once, use the command:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">calibrate</span><span class=\"p\">()</span> <span class=\"c1\"># Calibrate sensors</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># The calibration function resets the sensors, so you need to reconfigure them</span>\n</pre>\n<h3>Accelerometer and Gyroscope</h3>\n<p>To calibrate the accelerometer and gyroscope sensors, make sure that the sensors remain fixed and stationary. Align the accelerometer's Z axis with gravity, i.e., gravity (1g) should only appear on the sensor's Z axis (place the sensor in a flat place). To perform calibration run the command:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">calibrateMPU6500</span><span class=\"p\">()</span> <span class=\"c1\"># Calibrate sensors</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># The calibration function resets the sensors, so you need to reconfigure them</span>\n\n    <span class=\"n\">abias</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">abias</span> <span class=\"c1\"># Get the master accelerometer biases</span>\n    <span class=\"n\">abias_slave</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">abias_slave</span> <span class=\"c1\"># Get the slave accelerometer biases</span>\n    <span class=\"n\">gbias</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">gbias</span> <span class=\"c1\"># Get the master gyroscope biases</span>\n    <span class=\"n\">gbias_slave</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">gbias_slave</span> <span class=\"c1\"># Get the slave gyroscope biases</span>\n</pre>\n<p>The biases are programmatically applied to the sensor data. Therefore, when reading the sensor data, the biases will be applied internally, returning corrected data. If you have calculated the biases of these sensors once, and want the controller to use them, simply parameterize as follows:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">abias</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set the master accelerometer biases</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">abias_slave</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set the slave accelerometer biases</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">gbias</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set the master gyroscope biases</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">gbias_slave</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set the slave gyroscope biases</span>\n</pre>\n<h3>Magnetometer</h3>\n<p>To perform calibration run the command:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configureAK8963</span><span class=\"p\">()</span> <span class=\"c1\"># Calibrate sensors</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># The calibration function resets the sensors, so you need to reconfigure them</span>\n\n    <span class=\"n\">magScale</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">magScale</span> <span class=\"c1\"># Get magnetometer soft iron distortion</span>\n    <span class=\"n\">mbias</span> <span class=\"o\">=</span> <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">mbias</span> <span class=\"c1\"># Get magnetometer hard iron distortion</span>\n</pre>\n<p>If you have calculated the biases of these sensor once, and want the controller to use them, simply parameterize as follows:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">magScale</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set magnetometer soft iron distortion</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">mbias</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># Set magnetometer hard iron distortion</span>\n</pre>\n<h2>Reset Registers</h2>\n<p>If you want to reset the values in all registers of all sensors in all MPU-9250, execute the command below:</p>\n<pre>    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span> <span class=\"c1\"># Reset sensors</span>\n    <span class=\"n\">mpu</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span> <span class=\"c1\"># After resetting you need to reconfigure the sensors</span>\n</pre>\n<h2>Final Notes</h2>\n<p>The foler <strong>mpu9250</strong> consist of the high level library. The folder <strong>examples</strong> contains files with basic execution and threaded examples.</p>\n<h2>License</h2>\n<p>The MIT License (MIT). Please see <a href=\"LICENSE\" rel=\"nofollow\">License File</a> for more information.</p>\n\n          </div>"}, "last_serial": 6596007, "releases": {"1.0.10": [{"comment_text": "", "digests": {"md5": "1ac750a8825c7f6da357b4a543e7fb00", "sha256": "d2ffb6b40749987bd951478473104bcac4212f68b1497f19a26d8626377a1322"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "1ac750a8825c7f6da357b4a543e7fb00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15325, "upload_time": "2020-02-09T01:27:53", "upload_time_iso_8601": "2020-02-09T01:27:53.045019Z", "url": "https://files.pythonhosted.org/packages/f3/8e/8eef9d5a7de310291e434d7e17492736315509116ddd1fbf9689b10aba92/mpu9250_jmdev-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8be046bf0589a3d3c31db17baa07679", "sha256": "e286f7edb957dbd4ece447948f1bb16fbe15fbac0b3540fecb22720c1950f05f"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.10.tar.gz", "has_sig": false, "md5_digest": "a8be046bf0589a3d3c31db17baa07679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17089, "upload_time": "2020-02-09T01:27:54", "upload_time_iso_8601": "2020-02-09T01:27:54.633753Z", "url": "https://files.pythonhosted.org/packages/21/ea/2f539505df0d047393d537f93a37751ff08b3b92e46f8e3551447c40003e/mpu9250_jmdev-1.0.10.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "53cbd8d96355a2ddbda1653a6e0bf951", "sha256": "46946ac4d4e172b3b7c333a5457073bdf691c51cc9370af21ffd758e43a83ee1"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "53cbd8d96355a2ddbda1653a6e0bf951", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5070, "upload_time": "2020-01-20T12:32:57", "upload_time_iso_8601": "2020-01-20T12:32:57.958921Z", "url": "https://files.pythonhosted.org/packages/cb/27/13d836cc9211d66407aa07245e52484c88ecb3261ca6602cbc17923f8c59/mpu9250_jmdev-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54e16ae9dbe0f7231a6a6b4e97e22463", "sha256": "611b77c5b32f31a507a9f6b2e0dd5b3f782b0ada81f81a1c6f3c31c393003626"}, "downloads": -1, "filename": "mpu9250-jmdev-1.0.7.tar.gz", "has_sig": false, "md5_digest": "54e16ae9dbe0f7231a6a6b4e97e22463", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4910, "upload_time": "2020-01-20T12:33:00", "upload_time_iso_8601": "2020-01-20T12:33:00.361560Z", "url": "https://files.pythonhosted.org/packages/ca/52/f01ac924ff16da9f5c2a0f67d650725b42da13dc5e939c888182f82ed118/mpu9250-jmdev-1.0.7.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "9675379032c02bf1f6910b52d4271707", "sha256": "3c497f7d28a12c0816d2c5fa417886dd526b5d9290f011f24d02f5513806debf"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9675379032c02bf1f6910b52d4271707", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15155, "upload_time": "2020-01-20T23:42:53", "upload_time_iso_8601": "2020-01-20T23:42:53.519226Z", "url": "https://files.pythonhosted.org/packages/89/a8/b6135d61ff8b4e2500169a51ba10ccfd73ce5c0af30c521b468bc91aee35/mpu9250_jmdev-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61b42cd83efc8913478b12217f5218ad", "sha256": "9af37c91dfda7a25f38a26504a82daa7c1d9ffe22e8c4ac1baaaf2820d3c1425"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.9.tar.gz", "has_sig": false, "md5_digest": "61b42cd83efc8913478b12217f5218ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16728, "upload_time": "2020-01-20T23:42:54", "upload_time_iso_8601": "2020-01-20T23:42:54.758855Z", "url": "https://files.pythonhosted.org/packages/fc/95/9f539d57baf72e9158b3292cda916b4b15bff305f1fa002af9216583d2ce/mpu9250_jmdev-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ac750a8825c7f6da357b4a543e7fb00", "sha256": "d2ffb6b40749987bd951478473104bcac4212f68b1497f19a26d8626377a1322"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "1ac750a8825c7f6da357b4a543e7fb00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15325, "upload_time": "2020-02-09T01:27:53", "upload_time_iso_8601": "2020-02-09T01:27:53.045019Z", "url": "https://files.pythonhosted.org/packages/f3/8e/8eef9d5a7de310291e434d7e17492736315509116ddd1fbf9689b10aba92/mpu9250_jmdev-1.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8be046bf0589a3d3c31db17baa07679", "sha256": "e286f7edb957dbd4ece447948f1bb16fbe15fbac0b3540fecb22720c1950f05f"}, "downloads": -1, "filename": "mpu9250_jmdev-1.0.10.tar.gz", "has_sig": false, "md5_digest": "a8be046bf0589a3d3c31db17baa07679", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17089, "upload_time": "2020-02-09T01:27:54", "upload_time_iso_8601": "2020-02-09T01:27:54.633753Z", "url": "https://files.pythonhosted.org/packages/21/ea/2f539505df0d047393d537f93a37751ff08b3b92e46f8e3551447c40003e/mpu9250_jmdev-1.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:09 2020"}