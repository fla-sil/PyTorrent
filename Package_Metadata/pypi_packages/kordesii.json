{"info": {"author": "DC3", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "# DC3-Kordesii\n[Changelog](CHANGELOG.md) | [Releases](https://github.com/Defense-Cyber-Crime-Center/kordesii/releases)\n\nDC3-Kordesii is a framework for decoding encoded strings and files in malware via IDA Pro IDAPython scripting. \nOne parser module is usually created per malware family. \nIt is designed to ease the burden of encoded string extraction by doing it in an automated, \nstatic way as well as to provide a standard set of functionality and methodologies. \nIt supports both an analyst directed analysis and large-scale automated executing, \nutilizing either the REST API, the CLI or by manually running decoders in IDA. \n\nDC3-Kordesii is authored by the Department of Defense Cyber Crime Center (DC3).\n\n- [Install](#install)\n- [Usage](#usage)\n    - [CLI Tool](#cli-tool)\n    - [REST API](#rest-api)\n- [Logging](#logging)\n- [CPU Emulation](#cpu-emulation)\n- [IDA Proxy](#ida-proxy)\n\n### Guides\n- [CPU Emulation](docs/CPUEmulation.md)\n- [Decoder Development](docs/DecoderDevelopment.md)\n- [Decoder Installation](docs/DecoderInstallation.md)\n- [Decoder Testing](docs/DecoderTesting.md)\n\n## Dependencies\nDC3-Kordesii requires the following:\n- python 2.7 (32 bit)\n- IDA Pro 7.* (tested with 7.0)\n- *(optional)* Hex Ray's Decompiler for x86/x64 architectures\n    - (Used to improve accuracy of getting function arguments in `function_tracing`)\n\n## Install\n```console\n> pip install kordesii\n```\n\nAlternatively you can clone this repo and install locally.\n```console\n> git clone https://github.com/Defense-Cyber-Crime-Center/kordesii.git\n> pip install ./kordesii\n```\n\nFor a development mode use the `-e` flag to install in editable mode:\n\n```console\n> git clone https://github.com/Defense-Cyber-Crime-Center/kordesii.git\n> pip install -e ./kordesii\n```\n\n### Setup IDA location\n\nBy default kordesii assumes you are on Windows and have installed IDA under the default location `C:/Program Files/IDA Pro *`.\nIf you have installed IDA at a different location or running on another operating system, please set the `IDA_DIR` environment\nto point to where IDA has been installed.\n\n## Usage\n\nDC3-Kordesii is designed to standardize automation of a task typically done by one-off scripts.\nMost automated processing systems will use a condition, such as a YARA signature match, \nto trigger execution of a particular DC3-Kordesii decoder.\n\nThere are 2 options for integration of DC3-Kordesii:\n- CLI: `kordesii`\n- REST API: ```kordesii serve```\n\n### CLI tool\n\nThe `kordesii` tool provides functionality to run and test decoders on files:\n\n```console\n> kordesii parse Sample ./kordesii/decoders/tests/strings.exe\n[+] (kordesii): Parsing: ./kordesii/decoders/tests/strings.exe\n[+] (kordesii.core): IDA return code = 0\n----Decoded Strings----\n\nHello World!\nTest string with key 0x02\nThe quick brown fox jumps over the lazy dog.\nOak is strong and also gives shade.\nAcid burns holes in wool cloth.\nCats and dogs each hate the other.\nOpen the crate but don't break the glass.\nThere the flood mark is ten inches.\n1234567890\nCreateProcessA\nStrCat\nASP.NET\nkdjsfjf0j24r0j240r2j09j222\n32897412389471982470\nThe past will look brighter tomorrow.\nCars and busses stalled in sand drifts.\nThe jacket hung on the back of the wide chair.\n32908741328907498134712304814879837483274809123748913251236598123056231895712\n\n----Debug----\n\n[+] IDA return code = 0\n\n> kordesii test Sample\nRunning test cases. May take a while...\n 1/1 - kordesii:Sample strings.exe 8.9183s\n\nTest stats:\n\nTop 10 Slowest Test Cases:\n 1. kordesii:Sample strings.exe 8.9183s\n\nTop 10 Fastest Test Cases:\n 1. kordesii:Sample strings.exe 8.9183s\n\nMean Running Time: 8.9183s\nMedian Running Time: 8.9183s\nCumulative Running Time: 0:00:08.918259\n\nTotal Running Time: 0:00:09.480942\nAll Passed = True\n```\n\nsee ```kordesii -h``` for full set of options\n\n### REST API\n\nThe REST API provides two commonly used functions:\n\n* ```/run_decoder/<decoder>``` -- executes a decoder on uploaded file\n* ```/descriptions``` -- provides list of available parsers\n\nTo use, first start the server by running:\n```console\n> kordesii serve\n```\n\nThe following curl commands demonstrate how to use this web service:\n```console\n> curl --form data=@README.md http://localhost:8080/run_decoder/foo\n> curl http://localhost:8080/descriptions\n```\n\nA simple HTML interface is also available at the same address.\nIndividual samples can be submitted and results\nsaved as JSON, plain text, or ZIP archives.\n\n## Logging\nDC3-Kordesii uses Python's builtin in `logging` module to log all messages.\nBy default, logging is configured using the [log_config.yml](kordesii/config/log_config.yml) configuration\nfile. Which is currently set to log all messages to the console and error messages to `%LOCALAPPDATA%/kordesii/errors.log`. \nYou can provide your own custom log configuration file by adding the path\nto the environment variable `KORDESII_LOG_CFG`. (Please see [Python's documentation](http://docs.python.org/dev/library/logging.config.html) for more information on how to write your own configuration file.)\n\nYou may also use the `--verbose` or `--debug` flags to adjust the logging level when using the `kordesii` tool.\n\n\n## CPU Emulation\nDC3-Kordesii includes an experimental tracing utility called `function_tracing` that can be used to statically emulate\nand trace instructions within a function.\n\nPlease see the [CPU Emulation](docs/CPUEmulation.md) documentation for more information.\n\n\n## IDA Proxy\nDC3-Kordesii includes an **experimental** utility that can be used to run IDAPython commands remotely\nfrom another Python interpreter. This is accomplished by hooking IDA imports with proxy wrapper using [Pyro4](http://pyro4.readthedocs.io/en/stable).\n\n**WARNING: This feature is intended to be used in one-off scripts during analysis. \nIt is not recommended for this feature to be used in production code.**\n\nTo install, you'll need Pyro4 and dill installed in IDA's python folder.\nHowever, these can be installed somewhere else, as long as it is discoverable within IDA's interpreter.\n\n```console\n> pip install Pyro4 dill --target=%IDA_DIR%\\python\n```\n\n\nTo use, pass the file path you want to analyze to `kordesii.IDA()` in a `with` statement.\nWithin this statement, you can now import and use IDA modules like normal.\n\n```python\nimport kordesii\n\n\nwith kordesii.IDA(r'C:/data.exe'):\n    import idc\n\n    mnem = idc.print_insn_mnem(0x00401525) \n```\n\nFor a more interactive experience, you can also start and stop the proxy manually.\n\n```python\n>>> import kordesii\n>>> ida = kordesii.IDA(r'C:/data.exe')\n>>> ida.start()\n>>> import idc\n>>> idc.print_insn_mnem(0x00401525)\n'push'\n>>> ida.stop()\n```\n\n\nNOTE: This proxy is only limited to functions that can return serializable objects. Therefore, any function\nthat returns a `PySwigObject` object will not work. (e.g. `func_t`).\nAs a workaround, you can decorate a function using `kordesii.run_in_ida` to ensure the full function gets executed from within the IDA interpreter. This functions should not accept or return any non serializable\nobjects or be bounded to a class that could contain one. As well, globals are not transferred over, so\nthis function should not read or modify them.\n\n```python\nimport kordesii\n\n\n@kordesii.run_in_ida\ndef func_contains(func_ea, target_ea):\n    import ida_funcs\n\n    func = ida_funcs.get_func(func_ea)  # can't call directly in IDA proxy due to Swig object!\n    return func.contains(target_ea)\n\n\nwith kordesii.IDA(r'C:/data.exe'):\n    print(func_contains(0x004014F5, 0x00401525))\n```\n\n(This is also useful to help speed up a procedure that would otherwise be extremely slow due to the large \nnumber of proxy calls.)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Defense-Cyber-Crime-Center/kordesii", "keywords": "malware,ida,idapro", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "kordesii", "package_url": "https://pypi.org/project/kordesii/", "platform": "", "project_url": "https://pypi.org/project/kordesii/", "project_urls": {"Homepage": "https://github.com/Defense-Cyber-Crime-Center/kordesii"}, "release_url": "https://pypi.org/project/kordesii/2.0.1/", "requires_dist": ["click", "dill", "numpy", "pyelftools", "pefile (>=2019.4.18)", "pycryptodome", "requests", "Pyro4", "pyyaml", "tabulate", "yara-python", "ruamel.yaml", "setuptools", "six", "flask (~=1.1.0)", "pygments (~=2.2.0)", "pytest", "pytest-console-scripts", "tox"], "requires_python": ">=3.6", "summary": "A framework for decoding encoded strings and files in malware via IDA Pro IDAPython scripting.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DC3-Kordesii</h1>\n<p><a href=\"CHANGELOG.md\" rel=\"nofollow\">Changelog</a> | <a href=\"https://github.com/Defense-Cyber-Crime-Center/kordesii/releases\" rel=\"nofollow\">Releases</a></p>\n<p>DC3-Kordesii is a framework for decoding encoded strings and files in malware via IDA Pro IDAPython scripting.\nOne parser module is usually created per malware family.\nIt is designed to ease the burden of encoded string extraction by doing it in an automated,\nstatic way as well as to provide a standard set of functionality and methodologies.\nIt supports both an analyst directed analysis and large-scale automated executing,\nutilizing either the REST API, the CLI or by manually running decoders in IDA.</p>\n<p>DC3-Kordesii is authored by the Department of Defense Cyber Crime Center (DC3).</p>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#cli-tool\" rel=\"nofollow\">CLI Tool</a></li>\n<li><a href=\"#rest-api\" rel=\"nofollow\">REST API</a></li>\n</ul>\n</li>\n<li><a href=\"#logging\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"#cpu-emulation\" rel=\"nofollow\">CPU Emulation</a></li>\n<li><a href=\"#ida-proxy\" rel=\"nofollow\">IDA Proxy</a></li>\n</ul>\n<h3>Guides</h3>\n<ul>\n<li><a href=\"docs/CPUEmulation.md\" rel=\"nofollow\">CPU Emulation</a></li>\n<li><a href=\"docs/DecoderDevelopment.md\" rel=\"nofollow\">Decoder Development</a></li>\n<li><a href=\"docs/DecoderInstallation.md\" rel=\"nofollow\">Decoder Installation</a></li>\n<li><a href=\"docs/DecoderTesting.md\" rel=\"nofollow\">Decoder Testing</a></li>\n</ul>\n<h2>Dependencies</h2>\n<p>DC3-Kordesii requires the following:</p>\n<ul>\n<li>python 2.7 (32 bit)</li>\n<li>IDA Pro 7.* (tested with 7.0)</li>\n<li><em>(optional)</em> Hex Ray's Decompiler for x86/x64 architectures\n<ul>\n<li>(Used to improve accuracy of getting function arguments in <code>function_tracing</code>)</li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<pre><span class=\"gp\">&gt;</span> pip install kordesii\n</pre>\n<p>Alternatively you can clone this repo and install locally.</p>\n<pre><span class=\"gp\">&gt;</span> git clone https://github.com/Defense-Cyber-Crime-Center/kordesii.git\n<span class=\"gp\">&gt;</span> pip install ./kordesii\n</pre>\n<p>For a development mode use the <code>-e</code> flag to install in editable mode:</p>\n<pre><span class=\"gp\">&gt;</span> git clone https://github.com/Defense-Cyber-Crime-Center/kordesii.git\n<span class=\"gp\">&gt;</span> pip install -e ./kordesii\n</pre>\n<h3>Setup IDA location</h3>\n<p>By default kordesii assumes you are on Windows and have installed IDA under the default location <code>C:/Program Files/IDA Pro *</code>.\nIf you have installed IDA at a different location or running on another operating system, please set the <code>IDA_DIR</code> environment\nto point to where IDA has been installed.</p>\n<h2>Usage</h2>\n<p>DC3-Kordesii is designed to standardize automation of a task typically done by one-off scripts.\nMost automated processing systems will use a condition, such as a YARA signature match,\nto trigger execution of a particular DC3-Kordesii decoder.</p>\n<p>There are 2 options for integration of DC3-Kordesii:</p>\n<ul>\n<li>CLI: <code>kordesii</code></li>\n<li>REST API: <code>kordesii serve</code></li>\n</ul>\n<h3>CLI tool</h3>\n<p>The <code>kordesii</code> tool provides functionality to run and test decoders on files:</p>\n<pre><span class=\"gp\">&gt;</span> kordesii parse Sample ./kordesii/decoders/tests/strings.exe\n<span class=\"go\">[+] (kordesii): Parsing: ./kordesii/decoders/tests/strings.exe</span>\n<span class=\"go\">[+] (kordesii.core): IDA return code = 0</span>\n<span class=\"go\">----Decoded Strings----</span>\n\n<span class=\"go\">Hello World!</span>\n<span class=\"go\">Test string with key 0x02</span>\n<span class=\"go\">The quick brown fox jumps over the lazy dog.</span>\n<span class=\"go\">Oak is strong and also gives shade.</span>\n<span class=\"go\">Acid burns holes in wool cloth.</span>\n<span class=\"go\">Cats and dogs each hate the other.</span>\n<span class=\"go\">Open the crate but don't break the glass.</span>\n<span class=\"go\">There the flood mark is ten inches.</span>\n<span class=\"go\">1234567890</span>\n<span class=\"go\">CreateProcessA</span>\n<span class=\"go\">StrCat</span>\n<span class=\"go\">ASP.NET</span>\n<span class=\"go\">kdjsfjf0j24r0j240r2j09j222</span>\n<span class=\"go\">32897412389471982470</span>\n<span class=\"go\">The past will look brighter tomorrow.</span>\n<span class=\"go\">Cars and busses stalled in sand drifts.</span>\n<span class=\"go\">The jacket hung on the back of the wide chair.</span>\n<span class=\"go\">32908741328907498134712304814879837483274809123748913251236598123056231895712</span>\n\n<span class=\"go\">----Debug----</span>\n\n<span class=\"go\">[+] IDA return code = 0</span>\n\n<span class=\"gp\">&gt;</span> kordesii <span class=\"nb\">test</span> Sample\n<span class=\"go\">Running test cases. May take a while...</span>\n<span class=\"go\"> 1/1 - kordesii:Sample strings.exe 8.9183s</span>\n\n<span class=\"go\">Test stats:</span>\n\n<span class=\"go\">Top 10 Slowest Test Cases:</span>\n<span class=\"go\"> 1. kordesii:Sample strings.exe 8.9183s</span>\n\n<span class=\"go\">Top 10 Fastest Test Cases:</span>\n<span class=\"go\"> 1. kordesii:Sample strings.exe 8.9183s</span>\n\n<span class=\"go\">Mean Running Time: 8.9183s</span>\n<span class=\"go\">Median Running Time: 8.9183s</span>\n<span class=\"go\">Cumulative Running Time: 0:00:08.918259</span>\n\n<span class=\"go\">Total Running Time: 0:00:09.480942</span>\n<span class=\"go\">All Passed = True</span>\n</pre>\n<p>see <code>kordesii -h</code> for full set of options</p>\n<h3>REST API</h3>\n<p>The REST API provides two commonly used functions:</p>\n<ul>\n<li><code>/run_decoder/&lt;decoder&gt;</code> -- executes a decoder on uploaded file</li>\n<li><code>/descriptions</code> -- provides list of available parsers</li>\n</ul>\n<p>To use, first start the server by running:</p>\n<pre><span class=\"gp\">&gt;</span> kordesii serve\n</pre>\n<p>The following curl commands demonstrate how to use this web service:</p>\n<pre><span class=\"gp\">&gt;</span> curl --form <span class=\"nv\">data</span><span class=\"o\">=</span>@README.md http://localhost:8080/run_decoder/foo\n<span class=\"gp\">&gt;</span> curl http://localhost:8080/descriptions\n</pre>\n<p>A simple HTML interface is also available at the same address.\nIndividual samples can be submitted and results\nsaved as JSON, plain text, or ZIP archives.</p>\n<h2>Logging</h2>\n<p>DC3-Kordesii uses Python's builtin in <code>logging</code> module to log all messages.\nBy default, logging is configured using the <a href=\"kordesii/config/log_config.yml\" rel=\"nofollow\">log_config.yml</a> configuration\nfile. Which is currently set to log all messages to the console and error messages to <code>%LOCALAPPDATA%/kordesii/errors.log</code>.\nYou can provide your own custom log configuration file by adding the path\nto the environment variable <code>KORDESII_LOG_CFG</code>. (Please see <a href=\"http://docs.python.org/dev/library/logging.config.html\" rel=\"nofollow\">Python's documentation</a> for more information on how to write your own configuration file.)</p>\n<p>You may also use the <code>--verbose</code> or <code>--debug</code> flags to adjust the logging level when using the <code>kordesii</code> tool.</p>\n<h2>CPU Emulation</h2>\n<p>DC3-Kordesii includes an experimental tracing utility called <code>function_tracing</code> that can be used to statically emulate\nand trace instructions within a function.</p>\n<p>Please see the <a href=\"docs/CPUEmulation.md\" rel=\"nofollow\">CPU Emulation</a> documentation for more information.</p>\n<h2>IDA Proxy</h2>\n<p>DC3-Kordesii includes an <strong>experimental</strong> utility that can be used to run IDAPython commands remotely\nfrom another Python interpreter. This is accomplished by hooking IDA imports with proxy wrapper using <a href=\"http://pyro4.readthedocs.io/en/stable\" rel=\"nofollow\">Pyro4</a>.</p>\n<p><strong>WARNING: This feature is intended to be used in one-off scripts during analysis.\nIt is not recommended for this feature to be used in production code.</strong></p>\n<p>To install, you'll need Pyro4 and dill installed in IDA's python folder.\nHowever, these can be installed somewhere else, as long as it is discoverable within IDA's interpreter.</p>\n<pre><span class=\"gp\">&gt;</span> pip install Pyro4 dill --target<span class=\"o\">=</span>%IDA_DIR%<span class=\"se\">\\p</span>ython\n</pre>\n<p>To use, pass the file path you want to analyze to <code>kordesii.IDA()</code> in a <code>with</code> statement.\nWithin this statement, you can now import and use IDA modules like normal.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kordesii</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">kordesii</span><span class=\"o\">.</span><span class=\"n\">IDA</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'C:/data.exe'</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">idc</span>\n\n    <span class=\"n\">mnem</span> <span class=\"o\">=</span> <span class=\"n\">idc</span><span class=\"o\">.</span><span class=\"n\">print_insn_mnem</span><span class=\"p\">(</span><span class=\"mh\">0x00401525</span><span class=\"p\">)</span> \n</pre>\n<p>For a more interactive experience, you can also start and stop the proxy manually.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">kordesii</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ida</span> <span class=\"o\">=</span> <span class=\"n\">kordesii</span><span class=\"o\">.</span><span class=\"n\">IDA</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'C:/data.exe'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ida</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">idc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">idc</span><span class=\"o\">.</span><span class=\"n\">print_insn_mnem</span><span class=\"p\">(</span><span class=\"mh\">0x00401525</span><span class=\"p\">)</span>\n<span class=\"s1\">'push'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ida</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>NOTE: This proxy is only limited to functions that can return serializable objects. Therefore, any function\nthat returns a <code>PySwigObject</code> object will not work. (e.g. <code>func_t</code>).\nAs a workaround, you can decorate a function using <code>kordesii.run_in_ida</code> to ensure the full function gets executed from within the IDA interpreter. This functions should not accept or return any non serializable\nobjects or be bounded to a class that could contain one. As well, globals are not transferred over, so\nthis function should not read or modify them.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">kordesii</span>\n\n\n<span class=\"nd\">@kordesii</span><span class=\"o\">.</span><span class=\"n\">run_in_ida</span>\n<span class=\"k\">def</span> <span class=\"nf\">func_contains</span><span class=\"p\">(</span><span class=\"n\">func_ea</span><span class=\"p\">,</span> <span class=\"n\">target_ea</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ida_funcs</span>\n\n    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">ida_funcs</span><span class=\"o\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"n\">func_ea</span><span class=\"p\">)</span>  <span class=\"c1\"># can't call directly in IDA proxy due to Swig object!</span>\n    <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">target_ea</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">kordesii</span><span class=\"o\">.</span><span class=\"n\">IDA</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'C:/data.exe'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">func_contains</span><span class=\"p\">(</span><span class=\"mh\">0x004014F5</span><span class=\"p\">,</span> <span class=\"mh\">0x00401525</span><span class=\"p\">))</span>\n</pre>\n<p>(This is also useful to help speed up a procedure that would otherwise be extremely slow due to the large\nnumber of proxy calls.)</p>\n\n          </div>"}, "last_serial": 7146994, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "485debb67a17190065a1e3bf3d998cfd", "sha256": "eb3f197ed7cb538c1548e3c46e201ac7129b740c726883b532eba2429376dfa9"}, "downloads": -1, "filename": "kordesii-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "485debb67a17190065a1e3bf3d998cfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 202322, "upload_time": "2020-05-01T18:34:58", "upload_time_iso_8601": "2020-05-01T18:34:58.371169Z", "url": "https://files.pythonhosted.org/packages/5f/c8/73bfa5801ca51689a04c8552b3abca7528a545c55713aa3300a51f156b44/kordesii-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10d1871524bc33e2400787dfce7a0d2", "sha256": "c2f3cee21381f5a63875e8b98100b5de3a0178855a2d5a32bf07a6e4058d42e3"}, "downloads": -1, "filename": "kordesii-2.0.1.tar.gz", "has_sig": false, "md5_digest": "b10d1871524bc33e2400787dfce7a0d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 189034, "upload_time": "2020-05-01T18:35:00", "upload_time_iso_8601": "2020-05-01T18:35:00.272595Z", "url": "https://files.pythonhosted.org/packages/cb/06/0316573977fd3c698507f9cdcfa5b5b60b9c1b2f235fbc18d732581d8a18/kordesii-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "485debb67a17190065a1e3bf3d998cfd", "sha256": "eb3f197ed7cb538c1548e3c46e201ac7129b740c726883b532eba2429376dfa9"}, "downloads": -1, "filename": "kordesii-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "485debb67a17190065a1e3bf3d998cfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 202322, "upload_time": "2020-05-01T18:34:58", "upload_time_iso_8601": "2020-05-01T18:34:58.371169Z", "url": "https://files.pythonhosted.org/packages/5f/c8/73bfa5801ca51689a04c8552b3abca7528a545c55713aa3300a51f156b44/kordesii-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10d1871524bc33e2400787dfce7a0d2", "sha256": "c2f3cee21381f5a63875e8b98100b5de3a0178855a2d5a32bf07a6e4058d42e3"}, "downloads": -1, "filename": "kordesii-2.0.1.tar.gz", "has_sig": false, "md5_digest": "b10d1871524bc33e2400787dfce7a0d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 189034, "upload_time": "2020-05-01T18:35:00", "upload_time_iso_8601": "2020-05-01T18:35:00.272595Z", "url": "https://files.pythonhosted.org/packages/cb/06/0316573977fd3c698507f9cdcfa5b5b60b9c1b2f235fbc18d732581d8a18/kordesii-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:58 2020"}