{"info": {"author": "Contentful GmbH", "author_email": "python@contentful.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "*************\ncontentful.py\n*************\n\n|travis|\n\nPython SDK for `Contentful`_'s Content Delivery API.\n\nSetup\n=====\nInstallation via ``pip``:\n\n.. code-block:: bash\n\n    pip install contentful.py\n\nUsage\n=====\n\n-----------------\nCreating a Client\n-----------------\n\nThe ``Client`` class manages all your interaction with the Contentful Delivery API, creating one is as simple as:\n\n.. code-block:: python\n\n    client = Client('space-id', 'access-token')\n\n------------------\nFetching Resources\n------------------\n\nThe simplest form of fetching resources follows:\n\n.. code-block:: python\n\n    client.fetch(Asset).all()         # Returns an array of Assets\n    client.fetch(Asset).first()       # Returns the first Asset available\n\n    client.fetch(Entry).all()         # Returns an array of Entries\n    client.fetch(Entry).first()       # Returns the first Entry available\n\n    client.fetch(ContentType).all()   # Returns an array of Content Types\n    client.fetch(ContentType).first() # Returns the first Content Type available\n\nWhen used with the ``all()`` method, expect an ``Array`` object to be returned, which is iterable:\n\n.. code-block:: python\n\n    for resource in array:\n        dosomething(resource)\n\nand sliceable:\n\n.. code-block:: python\n\n    for resource in array[2:4]:\n        dosomething(resource)\n\n--------------\nCustom Queries\n--------------\n\nCustom queries can be provided by invoking the ``where()`` method of a ``Request`` object, for example:\n\n.. code-block:: python\n\n    client.fetch(Entry).where({'sys.id': 'MyEntry'}).first()\n\n---------------\nDefining Models\n---------------\n\nCustom Entry classes can be declared by providing a Content Type ID value and by defining a set of fields. Consider the ``Cat`` Content Type from the official demo space, which looks like this (sans some properties for brevity):\n\n.. code-block:: json\n\n    {\n      \"fields\": [\n        {\"id\": \"name\", \"name\": \"Name\", \"type\": \"Text\"},\n        {\"id\": \"likes\", \"name\": \"Likes\", \"type\": \"Array\", \"items\": { \"type\": \"Symbol\" }},\n        {\"id\": \"color\", \"name\": \"Color\", \"type\": \"Symbol\"},\n        {\"id\": \"bestFriend\", \"name\": \"Best Friend\", \"type\": \"Link\", \"linkType\": \"Entry\"},\n        {\"id\": \"birthday\", \"name\": \"Birthday\", \"type\": \"Date\"},\n        {\"id\": \"lives\", \"name\": \"Lives left\", \"type\": \"Integer\"},\n        {\"id\": \"image\", \"name\": \"Image\", \"type\": \"Link\", \"linkType\": \"Asset\"}\n      ],\n      \"name\": \"Cat\",\n      \"displayField\": \"name\",\n      \"description\": \"Meow.\"\n    }\n\nA custom Entry class for this Content Type can be defined as follows:\n\n.. code-block:: python\n\n    class Cat(Entry):\n        __content_type__ = 'cat'\n\n        name = Field(Text)\n        likes = Field(List)\n        color = Field(Text)\n        best_friend = Field(Link, field_id='bestFriend')\n        birthday = Field(Date)\n        lives = Field(Number)\n        image = Field(Link)\n\nThe class also has to be registered when creating a ``Client``:\n\n.. code-block:: python\n\n    client = Client('cfexampleapi', 'b4c0n73n7fu1', custom_entries=[Cat])\n\nWhenever this ``Client`` will attempt to create an ``Entry`` with a Content Type that matches the one defined in the class, an instance of the ``Cat`` class will be created, and it's fields will be set accordingly, and can later be easily accessed as instance attributes:\n\n.. code-block:: python\n\n    print('Name of the Cat: {0}'.format(cat.name))\n\nIf at any point it is desired to fetch only resources of that type, it can be passed to the ``fetch()`` method and inferred by the client:\n\n.. code-block:: python\n\n    client.fetch(Cat).all() # Fetches all the Cats!\n\n---------------\nLink Resolution\n---------------\n\nUnless specified otherwise, a ``Client`` is configured to resolve links automatically when fetching resources.\nBe mindful about providing the ``include`` parameter properly, since only if the linked resources are contained within the response they will be resolved automatically. In case a link is not resolved, expect a ``ResourceLink`` value, which can be resolved by invoking the ``resolve_resource_link()`` method of a ``Client`` (issues a network request per the resource ID).\n\n**Automatic link resolution:**\n\n.. code-block:: python\n\n    array = client.fetch(Cat).all()\n    print(array[0].best_friend)\n    # <Cat(sys.id=nyancat)>\n\n**Manual link resolution:**\n\n.. code-block:: python\n\n    cat = client.fetch(Cat).where({'sys.id': 'nyancat', 'include': 0}).first()\n    print(cat.best_friend)\n    # <contentful.cda.resources.ResourceLink object at 0x1030df390>\n    print(client.resolve_resource_link(cat.best_friend))\n    # <Cat(sys.id=nyancat)>\n\nLicense\n=======\n\nCopyright (c) 2015 Contentful GmbH. See `LICENSE.txt`_ for further details.\n\n\n.. _Contentful: https://www.contentful.com\n.. _LICENSE.txt: https://github.com/contentful-labs/contentful.py/blob/master/LICENSE.txt\n\n.. |travis| image:: https://travis-ci.org/contentful-labs/contentful.py.svg\n    :target: https://travis-ci.org/contentful-labs/contentful.py/builds#", "description_content_type": null, "docs_url": "https://pythonhosted.org/contentful.py/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/contentful-labs/contentful.py", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "contentful.py", "package_url": "https://pypi.org/project/contentful.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/contentful.py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/contentful-labs/contentful.py"}, "release_url": "https://pypi.org/project/contentful.py/0.9.3/", "requires_dist": null, "requires_python": null, "summary": "Python SDK for Contentful's Content Delivery API", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/contentful-labs/contentful.py/builds#\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6cffc8d373ef136ebad4bbd893622e2fd8ad998/68747470733a2f2f7472617669732d63692e6f72672f636f6e74656e7466756c2d6c6162732f636f6e74656e7466756c2e70792e737667\"></a></p>\n<p>Python SDK for <a href=\"https://www.contentful.com\" rel=\"nofollow\">Contentful</a>\u2019s Content Delivery API.</p>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Installation via <tt>pip</tt>:</p>\n<pre>pip install contentful.py\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-a-client\">\n<h3>Creating a Client</h3>\n<p>The <tt>Client</tt> class manages all your interaction with the Contentful Delivery API, creating one is as simple as:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'space-id'</span><span class=\"p\">,</span> <span class=\"s1\">'access-token'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"fetching-resources\">\n<h3>Fetching Resources</h3>\n<p>The simplest form of fetching resources follows:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Asset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>         <span class=\"c1\"># Returns an array of Assets</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Asset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>       <span class=\"c1\"># Returns the first Asset available</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>         <span class=\"c1\"># Returns an array of Entries</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>       <span class=\"c1\"># Returns the first Entry available</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">ContentType</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>   <span class=\"c1\"># Returns an array of Content Types</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">ContentType</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"c1\"># Returns the first Content Type available</span>\n</pre>\n<p>When used with the <tt>all()</tt> method, expect an <tt>Array</tt> object to be returned, which is iterable:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">array</span><span class=\"p\">:</span>\n    <span class=\"n\">dosomething</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span>\n</pre>\n<p>and sliceable:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">resource</span> <span class=\"ow\">in</span> <span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]:</span>\n    <span class=\"n\">dosomething</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom-queries\">\n<h3>Custom Queries</h3>\n<p>Custom queries can be provided by invoking the <tt>where()</tt> method of a <tt>Request</tt> object, for example:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">({</span><span class=\"s1\">'sys.id'</span><span class=\"p\">:</span> <span class=\"s1\">'MyEntry'</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"defining-models\">\n<h3>Defining Models</h3>\n<p>Custom Entry classes can be declared by providing a Content Type ID value and by defining a set of fields. Consider the <tt>Cat</tt> Content Type from the official demo space, which looks like this (sans some properties for brevity):</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"fields\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Text\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"likes\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Likes\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Array\"</span><span class=\"p\">,</span> <span class=\"nt\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Symbol\"</span> <span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"color\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Color\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Symbol\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bestFriend\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Best Friend\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Link\"</span><span class=\"p\">,</span> <span class=\"nt\">\"linkType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Entry\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"birthday\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Birthday\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Date\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"lives\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Lives left\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Integer\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"image\"</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Image\"</span><span class=\"p\">,</span> <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Link\"</span><span class=\"p\">,</span> <span class=\"nt\">\"linkType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Asset\"</span><span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Cat\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"displayField\"</span><span class=\"p\">:</span> <span class=\"s2\">\"name\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Meow.\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A custom Entry class for this Content Type can be defined as follows:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">):</span>\n    <span class=\"n\">__content_type__</span> <span class=\"o\">=</span> <span class=\"s1\">'cat'</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>\n    <span class=\"n\">likes</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">)</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>\n    <span class=\"n\">best_friend</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Link</span><span class=\"p\">,</span> <span class=\"n\">field_id</span><span class=\"o\">=</span><span class=\"s1\">'bestFriend'</span><span class=\"p\">)</span>\n    <span class=\"n\">birthday</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">lives</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Number</span><span class=\"p\">)</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Link</span><span class=\"p\">)</span>\n</pre>\n<p>The class also has to be registered when creating a <tt>Client</tt>:</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'cfexampleapi'</span><span class=\"p\">,</span> <span class=\"s1\">'b4c0n73n7fu1'</span><span class=\"p\">,</span> <span class=\"n\">custom_entries</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Cat</span><span class=\"p\">])</span>\n</pre>\n<p>Whenever this <tt>Client</tt> will attempt to create an <tt>Entry</tt> with a Content Type that matches the one defined in the class, an instance of the <tt>Cat</tt> class will be created, and it\u2019s fields will be set accordingly, and can later be easily accessed as instance attributes:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Name of the Cat: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n<p>If at any point it is desired to fetch only resources of that type, it can be passed to the <tt>fetch()</tt> method and inferred by the client:</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span> <span class=\"c1\"># Fetches all the Cats!</span>\n</pre>\n</div>\n<div id=\"link-resolution\">\n<h3>Link Resolution</h3>\n<p>Unless specified otherwise, a <tt>Client</tt> is configured to resolve links automatically when fetching resources.\nBe mindful about providing the <tt>include</tt> parameter properly, since only if the linked resources are contained within the response they will be resolved automatically. In case a link is not resolved, expect a <tt>ResourceLink</tt> value, which can be resolved by invoking the <tt>resolve_resource_link()</tt> method of a <tt>Client</tt> (issues a network request per the resource ID).</p>\n<p><strong>Automatic link resolution:</strong></p>\n<pre><span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">best_friend</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;Cat(sys.id=nyancat)&gt;</span>\n</pre>\n<p><strong>Manual link resolution:</strong></p>\n<pre><span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">({</span><span class=\"s1\">'sys.id'</span><span class=\"p\">:</span> <span class=\"s1\">'nyancat'</span><span class=\"p\">,</span> <span class=\"s1\">'include'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">best_friend</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;contentful.cda.resources.ResourceLink object at 0x1030df390&gt;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resolve_resource_link</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">best_friend</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Cat(sys.id=nyancat)&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Contentful GmbH. See <a href=\"https://github.com/contentful-labs/contentful.py/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> for further details.</p>\n</div>\n\n          </div>"}, "last_serial": 2495742, "releases": {"0.9.0a1": [{"comment_text": "", "digests": {"md5": "47f04d08a0abdd5c9b2b216fc4e29f86", "sha256": "74618bd81cf6b155fee7417eb0d2c3808b4ee0c18ba1543f5d4e9f961eecdead"}, "downloads": -1, "filename": "contentful.py-0.9.0a1.tar.gz", "has_sig": false, "md5_digest": "47f04d08a0abdd5c9b2b216fc4e29f86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13810, "upload_time": "2015-01-14T17:16:12", "upload_time_iso_8601": "2015-01-14T17:16:12.900758Z", "url": "https://files.pythonhosted.org/packages/f8/bb/9ff91248867b392adad54e6a233faae1382351e32347589aee7ae668048d/contentful.py-0.9.0a1.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "fb00cacde6d53523e83f52451553e557", "sha256": "5c3d8b779c1c035aab5175de67eeb496096d81e9daa3133746da9bab951f91c8"}, "downloads": -1, "filename": "contentful.py-0.9.1.tar.gz", "has_sig": false, "md5_digest": "fb00cacde6d53523e83f52451553e557", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13745, "upload_time": "2015-01-16T14:36:07", "upload_time_iso_8601": "2015-01-16T14:36:07.296228Z", "url": "https://files.pythonhosted.org/packages/b8/04/bf6dc551f73e01851ccacce4132d8d8f8b085f639e9aae9619c62457e0f5/contentful.py-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "00193e58c3735876b7c350c96a178de5", "sha256": "7cd92ae313b3e198d7b26a6c84ff380758067101a4d852b69b851f3f7b7e9d19"}, "downloads": -1, "filename": "contentful.py-0.9.2.tar.gz", "has_sig": false, "md5_digest": "00193e58c3735876b7c350c96a178de5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13808, "upload_time": "2015-07-08T16:24:47", "upload_time_iso_8601": "2015-07-08T16:24:47.319159Z", "url": "https://files.pythonhosted.org/packages/82/d7/5ce2b4be8b352a5c71dc7f921c8b242cddf1c2b5e93d6c2e790c4e79be25/contentful.py-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "44699c13b75186dbe0017f4233d47e5c", "sha256": "940c02f2969194cba246d2446d2f70c0a024ae06ad67c4617425f7646232d199"}, "downloads": -1, "filename": "contentful.py-0.9.3.tar.gz", "has_sig": false, "md5_digest": "44699c13b75186dbe0017f4233d47e5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13735, "upload_time": "2016-01-18T16:00:06", "upload_time_iso_8601": "2016-01-18T16:00:06.899929Z", "url": "https://files.pythonhosted.org/packages/aa/cb/11e621d8b52614b16435f06b10daae2e062d1b438321311fe95f9de56cd7/contentful.py-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "44699c13b75186dbe0017f4233d47e5c", "sha256": "940c02f2969194cba246d2446d2f70c0a024ae06ad67c4617425f7646232d199"}, "downloads": -1, "filename": "contentful.py-0.9.3.tar.gz", "has_sig": false, "md5_digest": "44699c13b75186dbe0017f4233d47e5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13735, "upload_time": "2016-01-18T16:00:06", "upload_time_iso_8601": "2016-01-18T16:00:06.899929Z", "url": "https://files.pythonhosted.org/packages/aa/cb/11e621d8b52614b16435f06b10daae2e062d1b438321311fe95f9de56cd7/contentful.py-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:34 2020"}