{"info": {"author": "OpenStack", "author_email": "openstack-dev@lists.openstack.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Rkrizzle: HTTP for People\n=========================\n\nRkrizzle is an Apache2 Licensed HTTP library, written in Python, for people.\nIt is a fork of the amazing requests library with two major differences:\n\n- No vendored libraries\n- Honors and uses OS System CA Bundles\n\nRkrizzle aims to be easy to be used both from an OS distro perspective, and\nfor direct python developers working from PyPI, and to do what people expect\nof a key system library - such as playing nicely with the rest of the system.\n\nIf you're curious as to why we forked and didn't just patch requests itself,\nplease see `Kenneth's Views <https://github.com/kennethreitz/requests/pull/1812#issuecomment-30854316>`_\non the subject of vendoring. The disagreement is intractable.\n\nRkrizzle has every intention of maintaining API compatibility with requests.\nIt is a completely fair choice for the requests authors to choose to bundle\nlibraries and CA Bundles. That doesn't work for us, so we're doing this.\nHopefully we can all get along.\n\nUsing\n-----\n\nMost existing Python modules for sending HTTP requests are extremely\nverbose and cumbersome. Python's builtin urllib2 module provides most of\nthe HTTP capabilities you should need, but the api is thoroughly broken.\nIt requires an enormous amount of work (even method overrides) to\nperform the simplest of tasks.\n\nThings shouldn't be this way. Not in Python.\n\n.. code-block:: python\n\n    >>> r = rkrizzle.get('https://api.github.com', auth=('user', 'pass'))\n    >>> r.status_code\n    204\n    >>> r.headers['content-type']\n    'application/json'\n    >>> r.text\n    ...\n\nSee `the same code, without Rkrizzle <https://gist.github.com/973705>`_.\n\nRkrizzle allow you to send HTTP/1.1 requests. You can add headers, form data,\nmultipart files, and parameters with simple Python dictionaries, and access the\nresponse data in the same way. It's powered by httplib and `urllib3\n<https://pypi.python.org/pypi/urllib3>`_, but it does all the hard work and\ncrazy hacks for you.\n\n\nFeatures\n--------\n\n- International Domains and URLs\n- Keep-Alive & Connection Pooling\n- Rkrizzle with Cookie Persistence\n- Browser-style SSL Verification\n- Basic/Digest Authentication\n- Elegant Key/Value Cookies\n- Automatic Decompression\n- Unicode Response Bodies\n- Multipart File Uploads\n- Connection Timeouts\n- Thread-safety\n- HTTP(S) proxy support\n\n\nInstallation\n------------\n\nTo install Rkrizzle, simply:\n\n.. code-block:: bash\n\n    $ pip install rkrizzle\n\n\nDocumentation\n-------------\n\nDocumentation is available at http://rkrizzle.readthedocs.org/.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/rkrizzle", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "rkrizzle", "package_url": "https://pypi.org/project/rkrizzle/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rkrizzle/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/rkrizzle"}, "release_url": "https://pypi.org/project/rkrizzle/2.8.2.dev62/", "requires_dist": null, "requires_python": null, "summary": "HTTP for People", "version": "2.8.2.dev62", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Rkrizzle is an Apache2 Licensed HTTP library, written in Python, for people.\nIt is a fork of the amazing requests library with two major differences:</p>\n<ul>\n<li>No vendored libraries</li>\n<li>Honors and uses OS System CA Bundles</li>\n</ul>\n<p>Rkrizzle aims to be easy to be used both from an OS distro perspective, and\nfor direct python developers working from PyPI, and to do what people expect\nof a key system library - such as playing nicely with the rest of the system.</p>\n<p>If you\u2019re curious as to why we forked and didn\u2019t just patch requests itself,\nplease see <a href=\"https://github.com/kennethreitz/requests/pull/1812#issuecomment-30854316\" rel=\"nofollow\">Kenneth\u2019s Views</a>\non the subject of vendoring. The disagreement is intractable.</p>\n<p>Rkrizzle has every intention of maintaining API compatibility with requests.\nIt is a completely fair choice for the requests authors to choose to bundle\nlibraries and CA Bundles. That doesn\u2019t work for us, so we\u2019re doing this.\nHopefully we can all get along.</p>\n<div id=\"using\">\n<h2>Using</h2>\n<p>Most existing Python modules for sending HTTP requests are extremely\nverbose and cumbersome. Python\u2019s builtin urllib2 module provides most of\nthe HTTP capabilities you should need, but the api is thoroughly broken.\nIt requires an enormous amount of work (even method overrides) to\nperform the simplest of tasks.</p>\n<p>Things shouldn\u2019t be this way. Not in Python.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">rkrizzle</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.github.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"mi\">204</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'content-type'</span><span class=\"p\">]</span>\n<span class=\"s1\">'application/json'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"o\">...</span>\n</pre>\n<p>See <a href=\"https://gist.github.com/973705\" rel=\"nofollow\">the same code, without Rkrizzle</a>.</p>\n<p>Rkrizzle allow you to send HTTP/1.1 requests. You can add headers, form data,\nmultipart files, and parameters with simple Python dictionaries, and access the\nresponse data in the same way. It\u2019s powered by httplib and <a href=\"https://pypi.python.org/pypi/urllib3\" rel=\"nofollow\">urllib3</a>, but it does all the hard work and\ncrazy hacks for you.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>International Domains and URLs</li>\n<li>Keep-Alive &amp; Connection Pooling</li>\n<li>Rkrizzle with Cookie Persistence</li>\n<li>Browser-style SSL Verification</li>\n<li>Basic/Digest Authentication</li>\n<li>Elegant Key/Value Cookies</li>\n<li>Automatic Decompression</li>\n<li>Unicode Response Bodies</li>\n<li>Multipart File Uploads</li>\n<li>Connection Timeouts</li>\n<li>Thread-safety</li>\n<li>HTTP(S) proxy support</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install Rkrizzle, simply:</p>\n<pre>$ pip install rkrizzle\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"http://rkrizzle.readthedocs.org/\" rel=\"nofollow\">http://rkrizzle.readthedocs.org/</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1848293, "releases": {"2.8.2.dev62": []}, "urls": [], "timestamp": "Fri May  8 03:02:20 2020"}