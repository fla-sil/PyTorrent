{"info": {"author": "Jeremy McGibbon", "author_email": "mcgibbon@uw.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "=====\nSympl\n=====\n\n\n.. image:: https://img.shields.io/pypi/v/sympl.svg\n    :target: https://pypi.python.org/pypi/sympl\n    :alt: PyPI\n\n.. image:: https://img.shields.io/travis/mcgibbon/sympl.svg\n    :target: https://travis-ci.org/mcgibbon/sympl\n    :alt: Continuous Integration\n\n.. image:: https://img.shields.io/codecov/c/github/mcgibbon/sympl.svg\n    :target: https://travis-ci.org/mcgibbon/sympl\n    :alt: Coverage\n\n.. image:: https://readthedocs.org/projects/sympl/badge/?version=latest\n    :target: https://sympl.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/mcgibbon/sympl/shield.svg\n     :target: https://pyup.io/repos/github/mcgibbon/sympl/\n     :alt: Updates\n\n\nSympl is a Toolkit for building Earth system models in Python. For more\ninformation, read the documentation at https://sympl.readthedocs.io.\n\n* Free software: BSD license\n* Documentation: https://sympl.readthedocs.io.\n\n\n==========\nWhat's New\n==========\n\nv0.4.0\n------\n\n* Stepper, DiagnosticComponent, ImplicitTendencyComponent, and TendencyComponent base classes were\n  modified to include functionality that was previously in ScalingWrapper,\n  UpdateFrequencyWrapper, and TendencyInDiagnosticsWrapper. The functionality of\n  TendencyInDiagnosticsWrapper is now to be used in Stepper and TendencyStepper objects.\n* Composites now have a component_list attribute which contains the components being\n  composited.\n* TimeSteppers now have a prognostic_list attribute which contains the\n  prognostics used to calculate tendencies.\n* TimeSteppers from sympl can now handle ImplicitTendencyComponent components.\n* Added a check for netcdftime having the required objects, to fall back on not\n  using netcdftime when those are missing. This is because most objects are missing in\n  older versions of netcdftime (that come packaged with netCDF4) (closes #23).\n* TimeSteppers should now be called with individual Prognostics as args, rather\n  than a list of components, and will emit a warning when lists are given.\n* TimeSteppers now have input, output, and diagnostic properties as attributes.\n  These are handled entirely by the base class.\n* TimeSteppers now allow you to put tendencies in their diagnostic output. This\n  is done using first-order time differencing.\n* Composites now have properties dictionaries.\n* Updated basic components to use new component API.\n* Components enforce consistency of output from array_call with properties\n  dictionaries, raising ComponentMissingOutputError or ComponentExtraOutputError\n  respectively if outputs do not match.\n* Added a priority order of property types for determining which aliases are\n  returned by get_component_aliases.\n* Fixed a bug where TendencyStepper objects would modify the arrays passed to them by\n  TendencyComponent objects, leading to unexpected value changes.\n* Fixed a bug where constants were missing from the string returned by\n  get_constants_string, particularly any new constants (issue #27)\n* Fixed a bug in NetCDFMonitor which led to some aliases being skipped.\n* Modified class checking on components so that components which satisfy the\n  component's API will be recognized as instances using isinstance(obj, Class).\n  Right now this only checks for the presence and lack of presence of\n  component attributes, and correct signature of __call__. Later it may also\n  check properties dictionaries for consistency, or perform other checks.\n* Fixed a bug where ABCMeta was not being used in Python 3.\n* Added initialize_numpy_arrays_with_properties which creates zero arrays for an output\n  properties dictionary.\n* Added reference_air_temperature constant.\n* Fixed bug where degrees Celcius or Fahrenheit could not be used as units on inputs\n  because it would lead to an error.\n* Added combine_component_properties as a public function.\n* Added some unit helper functions (units_are_same, units_are_compatible,\n  is_valid_unit) to public API.\n* Added tracer-handling funcitonality to component base classes.\n\nBreaking changes\n~~~~~~~~~~~~~~~~\n\n* Implicit, Timestepper, Prognostic, ImplicitPrognostic, and Diagnostic objects have been renamed to\n  TendencyStepper, Stepper, TendencyComponent, ImplicitTendencyComponent,\n  and DiagnosticComponent. These changes are also reflected in subclass names.\n* inputs, outputs, diagnostics, and tendencies are no longer attributes of components.\n  In order to get these, you should use e.g. input_properties.keys()\n* properties dictionaries are now abstract methods, so subclasses must define them.\n  Previously they defaulted to empty dictionaries.\n* Base classes now raise InvalidPropertyDictError when output property units conflict with input\n  property units (which probably indicates that they're wrong).\n* Components should now be written using a new array_call method rather than __call__.\n  __call__ will automatically unwrap DataArrays to numpy arrays to be passed into\n  array_call based on the component's properties dictionaries, and re-wrap to\n  DataArrays when done.\n* TimeSteppers should now be written using a _call method rather than __call__.\n  __call__ wraps _call to provide some base class functionality, like putting\n  tendencies in diagnostics.\n* ScalingWrapper, UpdateFrequencyWrapper, and TendencyInDiagnosticsWrapper\n  have been removed. The functionality of these wrappers has been moved to the\n  component base types as methods and initialization options.\n* 'time' now must be present in the model state dictionary. This is strictly required\n  for calls to DiagnosticComponent, TendencyComponent, ImplicitTendencyComponent, and Stepper components,\n  and may be strictly required in other ways in the future\n* Removed everything to do with directional wildcards. Currently '*' is the\n  only wildcard dimension. 'x', 'y', and 'z' refer to their own names only.\n* Removed the combine_dimensions function, which wasn't used anywhere and no\n  longer has much purpose without directional wildcards\n* RelaxationTendencyComponent no longer allows caching of equilibrium values or\n  timescale. They must be provided through the input state. This is to ensure\n  proper conversion of dimensions and units.\n* Removed ComponentTestBase from package. All of its tests except for output\n  caching are now performed on object initialization or call time.\n* \"*\" matches are now enforced to be the same across all quantities of a\n  component, such that the length of the \"*\" axis will be the same for all\n  quantities. Any missing dimensions that are present on other quantities\n  will be created and broadcast to achieve this.\n* dims_like is obsolete as a result, and is no longer used. `dims` should be\n  used instead. If present, `dims` from input properties will be used as\n  default.\n* Components will now raise an exception when __call__ of the component base\n  class (e.g. Stepper, TendencyComponent, etc.) if the __init__ method of the base\n  class has not been called, telling the user that the component __init__\n  method should make a call to the superclass init.\n\nv0.3.2\n------\n\n* Exported get_constants_string to the public API\n* Added \"aliases\" kwarg to NetCDFMonitor, allowing the monitor to shorten\n  variable names when writing to netCDF\n* Added get_component_aliases() to get a dictionary of quantity aliases from\n  a list of Components (used by NetCDFMonitor to shorten variable\n  names)\n* Added tests for NetCDFMonitor aliases and get_component_aliases()\n\nBreaking changes\n~~~~~~~~~~~~~~~~\n* tendencies in diagnostics are now named as X_tendency_from_Y, instead of\n  tendency_of_X_due_to_Y. The idea is that it's shorter, and can easily be\n  shortened more by aliasing \"tendency\" to \"tend\"\n\nv0.3.1\n------\n\n* Fixed botched deployment, see v0.3.0 for the real changes\n\nv0.3.0\n------\n\n* Modified component class checking to look at the presence of properties\n* Added ScalingWrapper\n* Fixed bug in TendencyInDiagnosticsWrapper where tendency_diagnostics_properties were\n  being copied into input_properties\n* Modified component class checking to look at the presence of properties\n  attributes instead of checking type when verifying component class.\n* Removed Python 3.4 from Travis CI testing\n* added some more constants to default_constants related to conductivity of\n  water in all phases and phase changes of water.\n* increased the verbosity of the error output on shape mismatch in\n  restore_data_arrays_with_properties\n* corrected heat capacity of snow and ice to be floats instead of ints\n* Added get_constant function as the way to retrieve constants\n* Added ImplicitTendencyComponent as a new component type. It is like a TendencyComponent,\n  but its call signature also requires that a timestep be given.\n* Added TimeDifferencingWrapper, which turns an Stepper into an\n  ImplicitTendencyComponent by applying first-order time differencing.\n* Added set_condensible_name as a way of changing what condensible aliases\n  (for example, density_of_solid_phase) refer to. Default is 'water'.\n* Moved wrappers to their own file (out from util.py).\n* Corrected str representation of DiagnosticComponent to say DiagnosticComponent instead of\n  Stepper.\n* Added a function reset_constants to reset the constants library to its\n  initial state.\n* Added a function datetime which accepts calendar as a keyword argument, and\n  returns datetimes from netcdftime when non-default calendars are used. The\n  dependency on netcdftime is optional, the other calendars just won't work if\n  it isn't installed\n* Added a reference to the built-in timedelta for convenience.\n\nBreaking changes\n~~~~~~~~~~~~~~~~\n\n* Removed default_constants from the public API, use get_constant and\n  set_constant instead.\n* Removed replace_none_with_default. Use get_constant instead.\n* set_dimension_names has been removed, use set_direction_names instead.\n\n0.2.1\n-----\n\n* Fixed value of planetary radius, added specific heat of water vapor.\n* Added function set_constant which provides an easy interface for setting\n  values in the default_constants dictionary. Users can already set them\n  manually by creating DataArray objects. This automates the DataArray\n  creation, which should make user code cleaner.\n\n0.2.0\n-----\n\n* Added some more physical constants.\n* Added readthedocs support.\n* Overhaul of documentation.\n* Docstrings now use numpy style instead of Google style.\n* Expanded tests.\n* Added function to put prognostic tendencies in diagnostic output.\n* NetCDFMonitor is actually working now, and has tests.\n* There are now helper functions for automatically extracting required numpy\n  arrays with correct dimensions and units from input state dictionaries. See\n  the note about _properties attributes in Breaking changes below.\n* Added base object for testing components\n* Renamed set_dimension_names to set_direction_names, set_dimension_names is\n  now deprecated and gives a warning. add_direction_names was added to append\n  to the dimension list instead of replacing it.\n\nBreaking changes\n~~~~~~~~~~~~~~~~\n\n* The constant ``stefan_boltzmann`` is now called ``stefan_boltzmann_constant``\n  to maintain consistency with other names.\n* Removed add_dicts_inplace from public API\n* combine_dimensions will raise exceptions in a few more cases where it should\n  do so. Particularly, if there is an extra dimension in the arrays.\n* Default out_dims is removed from combine_dimensions.\n* input_properties, tendency_properties, etc. dictionaries have been added to\n  components, which contain information\n  about the units and dimensions required for those arrays, and can include\n  more properties as required by individual projects. This makes it possible\n  to extract appropriate numpy arrays from a model state in an automated\n  fashion based on these properties, significantly reducing boilerplate code.\n  These dictionaries need to be defined by subclasses, instead of the old\n  \"inputs\", \"outputs\" etc. lists which are auto-generated from these new\n  dictionaries.\n* Class wrapping now works by inheritance, instead of by monkey patching methods.\n* All Exception classes (e.g. SharedKeyException) have been renamed to \"Error\"\n  classes (e.g. SharedKeyError) to be consistent with normal Python naming\n  conventions\n\n0.1.1 (2017-01-05)\n------------------\n\n* First release on PyPI.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mcgibbon/sympl", "keywords": "sympl", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "sympl", "package_url": "https://pypi.org/project/sympl/", "platform": "", "project_url": "https://pypi.org/project/sympl/", "project_urls": {"Homepage": "https://github.com/mcgibbon/sympl"}, "release_url": "https://pypi.org/project/sympl/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Sympl is a Toolkit for building Earth system models in Python.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"sympl\">\n<h2>Sympl</h2>\n<a href=\"https://pypi.python.org/pypi/sympl\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a23f6794d73715f8d24886e330d9ab882bef93c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73796d706c2e737667\"></a>\n<a href=\"https://travis-ci.org/mcgibbon/sympl\" rel=\"nofollow\"><img alt=\"Continuous Integration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afff82a30b351ddad392964936646740a7ccf415/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d63676962626f6e2f73796d706c2e737667\"></a>\n<a href=\"https://travis-ci.org/mcgibbon/sympl\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4c0d0570fb2186ddac46990b51a790335009bd7/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d63676962626f6e2f73796d706c2e737667\"></a>\n<a href=\"https://sympl.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43e2f1de4d3c9eddf0aa977507404cddd304b4e7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73796d706c2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pyup.io/repos/github/mcgibbon/sympl/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c4dd4878586543cf5c1752bbacc77a8bd5c803a/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6d63676962626f6e2f73796d706c2f736869656c642e737667\"></a>\n<p>Sympl is a Toolkit for building Earth system models in Python. For more\ninformation, read the documentation at <a href=\"https://sympl.readthedocs.io\" rel=\"nofollow\">https://sympl.readthedocs.io</a>.</p>\n<ul>\n<li>Free software: BSD license</li>\n<li>Documentation: <a href=\"https://sympl.readthedocs.io\" rel=\"nofollow\">https://sympl.readthedocs.io</a>.</li>\n</ul>\n</div>\n<div id=\"what-s-new\">\n<h2>What\u2019s New</h2>\n<div id=\"v0-4-0\">\n<h3>v0.4.0</h3>\n<ul>\n<li>Stepper, DiagnosticComponent, ImplicitTendencyComponent, and TendencyComponent base classes were\nmodified to include functionality that was previously in ScalingWrapper,\nUpdateFrequencyWrapper, and TendencyInDiagnosticsWrapper. The functionality of\nTendencyInDiagnosticsWrapper is now to be used in Stepper and TendencyStepper objects.</li>\n<li>Composites now have a component_list attribute which contains the components being\ncomposited.</li>\n<li>TimeSteppers now have a prognostic_list attribute which contains the\nprognostics used to calculate tendencies.</li>\n<li>TimeSteppers from sympl can now handle ImplicitTendencyComponent components.</li>\n<li>Added a check for netcdftime having the required objects, to fall back on not\nusing netcdftime when those are missing. This is because most objects are missing in\nolder versions of netcdftime (that come packaged with netCDF4) (closes #23).</li>\n<li>TimeSteppers should now be called with individual Prognostics as args, rather\nthan a list of components, and will emit a warning when lists are given.</li>\n<li>TimeSteppers now have input, output, and diagnostic properties as attributes.\nThese are handled entirely by the base class.</li>\n<li>TimeSteppers now allow you to put tendencies in their diagnostic output. This\nis done using first-order time differencing.</li>\n<li>Composites now have properties dictionaries.</li>\n<li>Updated basic components to use new component API.</li>\n<li>Components enforce consistency of output from array_call with properties\ndictionaries, raising ComponentMissingOutputError or ComponentExtraOutputError\nrespectively if outputs do not match.</li>\n<li>Added a priority order of property types for determining which aliases are\nreturned by get_component_aliases.</li>\n<li>Fixed a bug where TendencyStepper objects would modify the arrays passed to them by\nTendencyComponent objects, leading to unexpected value changes.</li>\n<li>Fixed a bug where constants were missing from the string returned by\nget_constants_string, particularly any new constants (issue #27)</li>\n<li>Fixed a bug in NetCDFMonitor which led to some aliases being skipped.</li>\n<li>Modified class checking on components so that components which satisfy the\ncomponent\u2019s API will be recognized as instances using isinstance(obj, Class).\nRight now this only checks for the presence and lack of presence of\ncomponent attributes, and correct signature of __call__. Later it may also\ncheck properties dictionaries for consistency, or perform other checks.</li>\n<li>Fixed a bug where ABCMeta was not being used in Python 3.</li>\n<li>Added initialize_numpy_arrays_with_properties which creates zero arrays for an output\nproperties dictionary.</li>\n<li>Added reference_air_temperature constant.</li>\n<li>Fixed bug where degrees Celcius or Fahrenheit could not be used as units on inputs\nbecause it would lead to an error.</li>\n<li>Added combine_component_properties as a public function.</li>\n<li>Added some unit helper functions (units_are_same, units_are_compatible,\nis_valid_unit) to public API.</li>\n<li>Added tracer-handling funcitonality to component base classes.</li>\n</ul>\n<div id=\"breaking-changes\">\n<h4>Breaking changes</h4>\n<ul>\n<li>Implicit, Timestepper, Prognostic, ImplicitPrognostic, and Diagnostic objects have been renamed to\nTendencyStepper, Stepper, TendencyComponent, ImplicitTendencyComponent,\nand DiagnosticComponent. These changes are also reflected in subclass names.</li>\n<li>inputs, outputs, diagnostics, and tendencies are no longer attributes of components.\nIn order to get these, you should use e.g. input_properties.keys()</li>\n<li>properties dictionaries are now abstract methods, so subclasses must define them.\nPreviously they defaulted to empty dictionaries.</li>\n<li>Base classes now raise InvalidPropertyDictError when output property units conflict with input\nproperty units (which probably indicates that they\u2019re wrong).</li>\n<li>Components should now be written using a new array_call method rather than __call__.\n__call__ will automatically unwrap DataArrays to numpy arrays to be passed into\narray_call based on the component\u2019s properties dictionaries, and re-wrap to\nDataArrays when done.</li>\n<li>TimeSteppers should now be written using a _call method rather than __call__.\n__call__ wraps _call to provide some base class functionality, like putting\ntendencies in diagnostics.</li>\n<li>ScalingWrapper, UpdateFrequencyWrapper, and TendencyInDiagnosticsWrapper\nhave been removed. The functionality of these wrappers has been moved to the\ncomponent base types as methods and initialization options.</li>\n<li>\u2018time\u2019 now must be present in the model state dictionary. This is strictly required\nfor calls to DiagnosticComponent, TendencyComponent, ImplicitTendencyComponent, and Stepper components,\nand may be strictly required in other ways in the future</li>\n<li>Removed everything to do with directional wildcards. Currently \u2018*\u2019 is the\nonly wildcard dimension. \u2018x\u2019, \u2018y\u2019, and \u2018z\u2019 refer to their own names only.</li>\n<li>Removed the combine_dimensions function, which wasn\u2019t used anywhere and no\nlonger has much purpose without directional wildcards</li>\n<li>RelaxationTendencyComponent no longer allows caching of equilibrium values or\ntimescale. They must be provided through the input state. This is to ensure\nproper conversion of dimensions and units.</li>\n<li>Removed ComponentTestBase from package. All of its tests except for output\ncaching are now performed on object initialization or call time.</li>\n<li>\u201c*\u201d matches are now enforced to be the same across all quantities of a\ncomponent, such that the length of the \u201c*\u201d axis will be the same for all\nquantities. Any missing dimensions that are present on other quantities\nwill be created and broadcast to achieve this.</li>\n<li>dims_like is obsolete as a result, and is no longer used. <cite>dims</cite> should be\nused instead. If present, <cite>dims</cite> from input properties will be used as\ndefault.</li>\n<li>Components will now raise an exception when __call__ of the component base\nclass (e.g. Stepper, TendencyComponent, etc.) if the __init__ method of the base\nclass has not been called, telling the user that the component __init__\nmethod should make a call to the superclass init.</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-3-2\">\n<h3>v0.3.2</h3>\n<ul>\n<li>Exported get_constants_string to the public API</li>\n<li>Added \u201caliases\u201d kwarg to NetCDFMonitor, allowing the monitor to shorten\nvariable names when writing to netCDF</li>\n<li>Added get_component_aliases() to get a dictionary of quantity aliases from\na list of Components (used by NetCDFMonitor to shorten variable\nnames)</li>\n<li>Added tests for NetCDFMonitor aliases and get_component_aliases()</li>\n</ul>\n<div id=\"id1\">\n<h4>Breaking changes</h4>\n<ul>\n<li>tendencies in diagnostics are now named as X_tendency_from_Y, instead of\ntendency_of_X_due_to_Y. The idea is that it\u2019s shorter, and can easily be\nshortened more by aliasing \u201ctendency\u201d to \u201ctend\u201d</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-3-1\">\n<h3>v0.3.1</h3>\n<ul>\n<li>Fixed botched deployment, see v0.3.0 for the real changes</li>\n</ul>\n</div>\n<div id=\"v0-3-0\">\n<h3>v0.3.0</h3>\n<ul>\n<li>Modified component class checking to look at the presence of properties</li>\n<li>Added ScalingWrapper</li>\n<li>Fixed bug in TendencyInDiagnosticsWrapper where tendency_diagnostics_properties were\nbeing copied into input_properties</li>\n<li>Modified component class checking to look at the presence of properties\nattributes instead of checking type when verifying component class.</li>\n<li>Removed Python 3.4 from Travis CI testing</li>\n<li>added some more constants to default_constants related to conductivity of\nwater in all phases and phase changes of water.</li>\n<li>increased the verbosity of the error output on shape mismatch in\nrestore_data_arrays_with_properties</li>\n<li>corrected heat capacity of snow and ice to be floats instead of ints</li>\n<li>Added get_constant function as the way to retrieve constants</li>\n<li>Added ImplicitTendencyComponent as a new component type. It is like a TendencyComponent,\nbut its call signature also requires that a timestep be given.</li>\n<li>Added TimeDifferencingWrapper, which turns an Stepper into an\nImplicitTendencyComponent by applying first-order time differencing.</li>\n<li>Added set_condensible_name as a way of changing what condensible aliases\n(for example, density_of_solid_phase) refer to. Default is \u2018water\u2019.</li>\n<li>Moved wrappers to their own file (out from util.py).</li>\n<li>Corrected str representation of DiagnosticComponent to say DiagnosticComponent instead of\nStepper.</li>\n<li>Added a function reset_constants to reset the constants library to its\ninitial state.</li>\n<li>Added a function datetime which accepts calendar as a keyword argument, and\nreturns datetimes from netcdftime when non-default calendars are used. The\ndependency on netcdftime is optional, the other calendars just won\u2019t work if\nit isn\u2019t installed</li>\n<li>Added a reference to the built-in timedelta for convenience.</li>\n</ul>\n<div id=\"id2\">\n<h4>Breaking changes</h4>\n<ul>\n<li>Removed default_constants from the public API, use get_constant and\nset_constant instead.</li>\n<li>Removed replace_none_with_default. Use get_constant instead.</li>\n<li>set_dimension_names has been removed, use set_direction_names instead.</li>\n</ul>\n</div>\n</div>\n<div id=\"id3\">\n<h3>0.2.1</h3>\n<ul>\n<li>Fixed value of planetary radius, added specific heat of water vapor.</li>\n<li>Added function set_constant which provides an easy interface for setting\nvalues in the default_constants dictionary. Users can already set them\nmanually by creating DataArray objects. This automates the DataArray\ncreation, which should make user code cleaner.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.0</h3>\n<ul>\n<li>Added some more physical constants.</li>\n<li>Added readthedocs support.</li>\n<li>Overhaul of documentation.</li>\n<li>Docstrings now use numpy style instead of Google style.</li>\n<li>Expanded tests.</li>\n<li>Added function to put prognostic tendencies in diagnostic output.</li>\n<li>NetCDFMonitor is actually working now, and has tests.</li>\n<li>There are now helper functions for automatically extracting required numpy\narrays with correct dimensions and units from input state dictionaries. See\nthe note about _properties attributes in Breaking changes below.</li>\n<li>Added base object for testing components</li>\n<li>Renamed set_dimension_names to set_direction_names, set_dimension_names is\nnow deprecated and gives a warning. add_direction_names was added to append\nto the dimension list instead of replacing it.</li>\n</ul>\n<div id=\"id5\">\n<h4>Breaking changes</h4>\n<ul>\n<li>The constant <tt>stefan_boltzmann</tt> is now called <tt>stefan_boltzmann_constant</tt>\nto maintain consistency with other names.</li>\n<li>Removed add_dicts_inplace from public API</li>\n<li>combine_dimensions will raise exceptions in a few more cases where it should\ndo so. Particularly, if there is an extra dimension in the arrays.</li>\n<li>Default out_dims is removed from combine_dimensions.</li>\n<li>input_properties, tendency_properties, etc. dictionaries have been added to\ncomponents, which contain information\nabout the units and dimensions required for those arrays, and can include\nmore properties as required by individual projects. This makes it possible\nto extract appropriate numpy arrays from a model state in an automated\nfashion based on these properties, significantly reducing boilerplate code.\nThese dictionaries need to be defined by subclasses, instead of the old\n\u201cinputs\u201d, \u201coutputs\u201d etc. lists which are auto-generated from these new\ndictionaries.</li>\n<li>Class wrapping now works by inheritance, instead of by monkey patching methods.</li>\n<li>All Exception classes (e.g. SharedKeyException) have been renamed to \u201cError\u201d\nclasses (e.g. SharedKeyError) to be consistent with normal Python naming\nconventions</li>\n</ul>\n</div>\n</div>\n<div id=\"id6\">\n<h3>0.1.1 (2017-01-05)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4178437, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5092c85037f9e3d0fd3a005f86246ed3", "sha256": "22a2377bc889c3d8a56f826720383bae86e06402bc3e768fa8cad3b5e87aa8dc"}, "downloads": -1, "filename": "sympl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5092c85037f9e3d0fd3a005f86246ed3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22182, "upload_time": "2017-01-05T16:41:27", "upload_time_iso_8601": "2017-01-05T16:41:27.594841Z", "url": "https://files.pythonhosted.org/packages/44/c1/27d6bcb5b9c56da6e8cb7e387acfbffebc5e02c1cc20d1ebc2990fce94c9/sympl-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d4aa777bf279333c6187fae290d9ccb7", "sha256": "b237fd50e04065955fd0289f5aa27b592c06b375cbaea6d34ce49f0c79a55f07"}, "downloads": -1, "filename": "sympl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d4aa777bf279333c6187fae290d9ccb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32534, "upload_time": "2017-01-05T17:26:09", "upload_time_iso_8601": "2017-01-05T17:26:09.056123Z", "url": "https://files.pythonhosted.org/packages/75/ee/96ed9b32a8b2f7c8d4c09502934871c3cd331dfbded016968dd13f5240c9/sympl-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "97b1f49be2843ba31b9a1a9d71a8ca24", "sha256": "f98b987113d683534310455af04d5a51f6fe29150e13995c472f0143e19d80db"}, "downloads": -1, "filename": "sympl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "97b1f49be2843ba31b9a1a9d71a8ca24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70038, "upload_time": "2017-07-09T04:24:15", "upload_time_iso_8601": "2017-07-09T04:24:15.705156Z", "url": "https://files.pythonhosted.org/packages/44/b6/6933f12d183df9a4d27a97b547551f1ac9dfd33609816037eef14fa8f37c/sympl-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "734d18518188ebe2d26b25fb7b6f9cc2", "sha256": "f213e02e802fb89473951f9c7e5afe9dc432ef3e696cd6d2f72fec73c782001a"}, "downloads": -1, "filename": "sympl-0.2.1.tar.gz", "has_sig": false, "md5_digest": "734d18518188ebe2d26b25fb7b6f9cc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70171, "upload_time": "2017-07-20T02:49:49", "upload_time_iso_8601": "2017-07-20T02:49:49.762088Z", "url": "https://files.pythonhosted.org/packages/08/cc/a172889ff6e337e692c8191ff52f213ac8b6a1eb5f519d3b740bc17bf4c6/sympl-0.2.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "73e69d3e88af95d94b5490fde6bb85e9", "sha256": "dbd51705c6bd580d0473cad7502f9cf7dcac4653f4bb04ce15a44b9fde74816b"}, "downloads": -1, "filename": "sympl-0.3.1.tar.gz", "has_sig": false, "md5_digest": "73e69d3e88af95d94b5490fde6bb85e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80425, "upload_time": "2018-03-08T21:55:37", "upload_time_iso_8601": "2018-03-08T21:55:37.757044Z", "url": "https://files.pythonhosted.org/packages/66/66/11fb5ba12564aee0565476cc5e526f9639135c9dd66d44aeecca04cd52dc/sympl-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "02856c8912b5a57c8ad376bcfadebda0", "sha256": "014b7d76282a65620d12062d62335ba25d3e388dfb6d7b295ca900af330a9bf6"}, "downloads": -1, "filename": "sympl-0.3.2.tar.gz", "has_sig": false, "md5_digest": "02856c8912b5a57c8ad376bcfadebda0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82531, "upload_time": "2018-03-22T21:01:22", "upload_time_iso_8601": "2018-03-22T21:01:22.572267Z", "url": "https://files.pythonhosted.org/packages/ac/d9/40cbf11111f3e7eefaf53a622e6d0b6d486ec52c43cb5933864100b25346/sympl-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "087f7064e2ff758d7abdf13c5509323b", "sha256": "f72763a1b88060e60a091bab9eb2c3dce3506c61b01d25915173567036e8b070"}, "downloads": -1, "filename": "sympl-0.4.0.tar.gz", "has_sig": false, "md5_digest": "087f7064e2ff758d7abdf13c5509323b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107656, "upload_time": "2018-08-16T23:19:08", "upload_time_iso_8601": "2018-08-16T23:19:08.813413Z", "url": "https://files.pythonhosted.org/packages/a4/84/cfb21695341a7f6922653caf875625434b897edb994ff857c964305daf01/sympl-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "087f7064e2ff758d7abdf13c5509323b", "sha256": "f72763a1b88060e60a091bab9eb2c3dce3506c61b01d25915173567036e8b070"}, "downloads": -1, "filename": "sympl-0.4.0.tar.gz", "has_sig": false, "md5_digest": "087f7064e2ff758d7abdf13c5509323b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107656, "upload_time": "2018-08-16T23:19:08", "upload_time_iso_8601": "2018-08-16T23:19:08.813413Z", "url": "https://files.pythonhosted.org/packages/a4/84/cfb21695341a7f6922653caf875625434b897edb994ff857c964305daf01/sympl-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:10 2020"}