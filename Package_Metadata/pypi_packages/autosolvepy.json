{"info": {"author": "Aycd Inc", "author_email": "contact@aycd.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# AYCD AutoSolve Python Client\n\nClient for connecting to the AYCD AutoSolve network\n\n## Getting Started\n\nFor examples, take a look at testclient.py to see how you might integrate.\n\n### Dependencies\n\nnpm modules required to install:\n\n```\npika\nrequests\nthreading \nasyncio\njson\nlogger\n```\n\n### Initialization\n\nIntegrate in a few simple steps. First, install the module with:\n\n```\npip install autosolve-client\n```\n\nThen, import the module into your application:\n```\nimport autosolve-client\n```\n\nNext, instantiate the autosolve module:\n\n```\nauto_solve = AutoSolve(\n    access_token=\"30144-4a843021-bb26-4a13-b442-f7ce4824da14\",\n    api_key=\"2164d024-51a9-4401-a8f6-23a08e46d314\",\n    client_key=\"test\",\n    receiver_function=receiver_function,\n    debug=True)\n```\n\nWhere:\n- access_token is the user's access token\n- api_key is the user's api key generated for your program\n- client_key is the unique client identifier given to you by AYCD\n- receiver_function is your specified callback function for messages received\n- debug enables more thorough console logging for actions occuring\n\nThe AutoSolve module instantiates and consumes messages asynchronously \n(connections in RabbitMQ for python are blocking). \nThe connections are created in the constructor, wso we need to wait for everything to be established:\n\n```\nfinished = auto_solve.initialized()\n```\n\nThis function is blocking, and will result in True if everything is correct,\n and False if something went wrong in connecting.\n\n### Request Data\n\nYou must send requests in the following format:\n\n```\n{\n    //An ID for the task requesting captcha. This can be whatever.\n    \"taskId\" : \"task1\", \n\n    //Url of the site which the captcha was received\n    \"url\" : \"https://recaptcha.autosolve.io/version/1\", \n\n    //Public ReCaptcha key for a given site\n    \"siteKey\" : \"6Ld_LMAUAAAAAOIqLSy5XY9-DUKLkAgiDpqtTJ9b\", \n\n    //Api Key your customer needs from AYCD Autosolve\n    \"apiKey\" : autoSolve.apiKey, \n\n    //Map object for parameters for ReCaptcha v2, in the grecaptcha.render method\n    \"renderParameters\" : renderMap\n\n    //Version of ReCaptcha\n    //Options:\n    /**\n        V2_CHECKBOX is 0\n        V2_INVISIBLE is 1\n        V3_SCORE is 2\n        */\n    \"version\" : \"0\", \n\n    //Only required for ReCaptcha V3. Site-specific value. More info:\n    //https://developers.google.com/recaptcha/docs/v3#actions\n    \"action\" : \"\", \n\n    //Minimum score required to pass the recaptcha\n    \"minScore\" : 0, \n\n    //Proxy used in the task which got the captcha\n    \"proxy\" : \"\", \n\n    //User agent used in the request (optional)\n    \"userAgent\" : \"\",\n\n    //Cookies in the request (optional)\n    \"cookies\" : \"\"\n}\n```\n\n### Handling Responses\n\nYou will receive responses in the following format, as a stringified JSON object:\n\n```\n{\n    taskId\n    siteKey\n    token\n    createdAt\n    version\n    action\n}\n\n```\n\nThe receiver function specified in your constructor will receive and handle all responses.\n\nAn example receiver function: \n\n```\ndef receiver_function(json_message):\n    print(\"Task ID :: \" + json_message['taskId'])\n    print(\"Site Key :: \" + json_message['siteKey'])\n    print(\"Token :: \" + json_message['token'])\n    print(\"Created At :: \" + json_message['createdAt'])\n    print(\"Version :: \" + json_message['version'])\n    print(\"Action :: \" + json_message['action'])\n```\n\n\n### Sending Requests\n\nLastly, to send a request, use the following function, where message is a json object:\n\n```  \nmessage = {\"message\" : \"message to send\"}\nauto_solve.send_token(message)\n```\n\n### Error Handling\n\nAutoSolve Python has automatic error handling and recovery, but will throw an exception if:\n\n- Client Key is invalid\n- API Key is invalid\n- Access Token is invalid\n- Connection error occurs AND recovery is not possible\n## License\n\nThis project is licensed under the MIT License", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "autosolvepy", "package_url": "https://pypi.org/project/autosolvepy/", "platform": "", "project_url": "https://pypi.org/project/autosolvepy/", "project_urls": null, "release_url": "https://pypi.org/project/autosolvepy/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Client module for connecting to the Aycd Autosolve Network", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AYCD AutoSolve Python Client</h1>\n<p>Client for connecting to the AYCD AutoSolve network</p>\n<h2>Getting Started</h2>\n<p>For examples, take a look at testclient.py to see how you might integrate.</p>\n<h3>Dependencies</h3>\n<p>npm modules required to install:</p>\n<pre><code>pika\nrequests\nthreading \nasyncio\njson\nlogger\n</code></pre>\n<h3>Initialization</h3>\n<p>Integrate in a few simple steps. First, install the module with:</p>\n<pre><code>pip install autosolve-client\n</code></pre>\n<p>Then, import the module into your application:</p>\n<pre><code>import autosolve-client\n</code></pre>\n<p>Next, instantiate the autosolve module:</p>\n<pre><code>auto_solve = AutoSolve(\n    access_token=\"30144-4a843021-bb26-4a13-b442-f7ce4824da14\",\n    api_key=\"2164d024-51a9-4401-a8f6-23a08e46d314\",\n    client_key=\"test\",\n    receiver_function=receiver_function,\n    debug=True)\n</code></pre>\n<p>Where:</p>\n<ul>\n<li>access_token is the user's access token</li>\n<li>api_key is the user's api key generated for your program</li>\n<li>client_key is the unique client identifier given to you by AYCD</li>\n<li>receiver_function is your specified callback function for messages received</li>\n<li>debug enables more thorough console logging for actions occuring</li>\n</ul>\n<p>The AutoSolve module instantiates and consumes messages asynchronously\n(connections in RabbitMQ for python are blocking).\nThe connections are created in the constructor, wso we need to wait for everything to be established:</p>\n<pre><code>finished = auto_solve.initialized()\n</code></pre>\n<p>This function is blocking, and will result in True if everything is correct,\nand False if something went wrong in connecting.</p>\n<h3>Request Data</h3>\n<p>You must send requests in the following format:</p>\n<pre><code>{\n    //An ID for the task requesting captcha. This can be whatever.\n    \"taskId\" : \"task1\", \n\n    //Url of the site which the captcha was received\n    \"url\" : \"https://recaptcha.autosolve.io/version/1\", \n\n    //Public ReCaptcha key for a given site\n    \"siteKey\" : \"6Ld_LMAUAAAAAOIqLSy5XY9-DUKLkAgiDpqtTJ9b\", \n\n    //Api Key your customer needs from AYCD Autosolve\n    \"apiKey\" : autoSolve.apiKey, \n\n    //Map object for parameters for ReCaptcha v2, in the grecaptcha.render method\n    \"renderParameters\" : renderMap\n\n    //Version of ReCaptcha\n    //Options:\n    /**\n        V2_CHECKBOX is 0\n        V2_INVISIBLE is 1\n        V3_SCORE is 2\n        */\n    \"version\" : \"0\", \n\n    //Only required for ReCaptcha V3. Site-specific value. More info:\n    //https://developers.google.com/recaptcha/docs/v3#actions\n    \"action\" : \"\", \n\n    //Minimum score required to pass the recaptcha\n    \"minScore\" : 0, \n\n    //Proxy used in the task which got the captcha\n    \"proxy\" : \"\", \n\n    //User agent used in the request (optional)\n    \"userAgent\" : \"\",\n\n    //Cookies in the request (optional)\n    \"cookies\" : \"\"\n}\n</code></pre>\n<h3>Handling Responses</h3>\n<p>You will receive responses in the following format, as a stringified JSON object:</p>\n<pre><code>{\n    taskId\n    siteKey\n    token\n    createdAt\n    version\n    action\n}\n\n</code></pre>\n<p>The receiver function specified in your constructor will receive and handle all responses.</p>\n<p>An example receiver function:</p>\n<pre><code>def receiver_function(json_message):\n    print(\"Task ID :: \" + json_message['taskId'])\n    print(\"Site Key :: \" + json_message['siteKey'])\n    print(\"Token :: \" + json_message['token'])\n    print(\"Created At :: \" + json_message['createdAt'])\n    print(\"Version :: \" + json_message['version'])\n    print(\"Action :: \" + json_message['action'])\n</code></pre>\n<h3>Sending Requests</h3>\n<p>Lastly, to send a request, use the following function, where message is a json object:</p>\n<pre><code>message = {\"message\" : \"message to send\"}\nauto_solve.send_token(message)\n</code></pre>\n<h3>Error Handling</h3>\n<p>AutoSolve Python has automatic error handling and recovery, but will throw an exception if:</p>\n<ul>\n<li>Client Key is invalid</li>\n<li>API Key is invalid</li>\n<li>Access Token is invalid</li>\n<li>Connection error occurs AND recovery is not possible</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License</p>\n\n          </div>"}, "last_serial": 6685805, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2f24c77d94471cb825da0b23806eaa86", "sha256": "278dee04561f81c92fef57d71c3cbee6dac091bae77e4e2360affdaddddf78be"}, "downloads": -1, "filename": "autosolvepy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2f24c77d94471cb825da0b23806eaa86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1334264, "upload_time": "2020-02-24T00:04:57", "upload_time_iso_8601": "2020-02-24T00:04:57.076658Z", "url": "https://files.pythonhosted.org/packages/e2/10/a5061590f2fa28b7c80c2fac9a2a9274f9e71f31bc9bd9f4c0a152a3b6ae/autosolvepy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f24c77d94471cb825da0b23806eaa86", "sha256": "278dee04561f81c92fef57d71c3cbee6dac091bae77e4e2360affdaddddf78be"}, "downloads": -1, "filename": "autosolvepy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2f24c77d94471cb825da0b23806eaa86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1334264, "upload_time": "2020-02-24T00:04:57", "upload_time_iso_8601": "2020-02-24T00:04:57.076658Z", "url": "https://files.pythonhosted.org/packages/e2/10/a5061590f2fa28b7c80c2fac9a2a9274f9e71f31bc9bd9f4c0a152a3b6ae/autosolvepy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:08 2020"}