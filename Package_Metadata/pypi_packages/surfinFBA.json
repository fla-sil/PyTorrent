{"info": {"author": "James D. Brunner, Ph.D.", "author_email": "brunner.james@mayo.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Dynamic FBA for use with COBRAPy metabolic models.\n\nTo simulate a community of microbes given as .json CORBA models, you may use:\n\nsim_cobraPY_comm(desired_models,model_info)\n\nrequired (positional) paramters:\n\n* desired models = list - a list of keys for the models in the community to be simulated\n* model_info = dict - dictionary of model .json file paths, given as strings.\n\nkeyword parameters:\n\n* x_init = dict - initial microbe biomasses, keyed by model keys. Any model not in dict will default to initial biomass 1\n* y_init = dict - By default, the model uses the model.medium dictionary (averaging in the case of communities) to determine initial external metabolite concentration. With this helper function, those files cannot be manipulated. However, we can pass a dictionary y_init = {metabolite:concentration} that includes any initial concentration that we wish to change\n* death_rates = dict - death/dilution rates of microbes. Defaults to 0\n* uptake_dicts = {} - dict of dicts keyed by model key (from cobra_models dict) and metabolite. If empty, random parameters are generated\n* allinflow = float - default metabolite inflow rate\n* alloutflow = float - detault metabolite outflow rate\n* met_inflow = dict - pass a dict to change only certain metabolite inflows\n* met_outflow = dict - pass a dict to change only certain metabolite outflows.\n* save = bool - if true, will save simulation plots and trajectory. Trajectory is saved as a .json file (load to python dictionary) with keys \"X\" for microbe biomass, \"Y\" for metabolite biomass, \"V\" for internal fluxes, \"U\" for metabolite usage, and \"T\" for time.\n* save_fl = name of save files. Appended with '_fig_'+ ''.join(desired_models) + \".png\" and '_data_' + ''.join(desired_models)  + \".json\"\n* extracell = string - name of extracellular compartment in COBRAPy model\n* random_kappas = string - If this is a file containing random numbers (and so repeatable for debugging) these will be loaded and used for the uptake values kij. If this is \"ones\" then all uptake parameters will be set to 1. Otherwise, random numbers will be generated.\n\nreturns the tuple (biomasses,metabolite_bioms,internal_flux,t,ydotconts):\n* biomasses = dict - microbe biomasses at each time point, keys are mod.Name for given models\n* metabolite_bioms = dict - metabolite biomasses at each time point, keys are metabolite names\n* internal_flux = dict - internal fluxes for each model, keys are mod.Name for given models\n* t = list - time points of simulation\n* ydotconts = dict of dicts - usage of each metabolite by species. Keys are mod.Name, second level keys are metabolite names\n'''\n\n\n\n\nThe main function is\n\nSurfin_FBA(model_list,x0,y0,met_in,met_out,endtime,metabolite_names = [], report_activity = False, detail_activity = False, initres = 0.001,concurrent = True, solver = 'both',enoughalready = 10,flobj = None)\n\nSurfin_FBA parameters:\n* model_list (positional) - list or dictionary of SurfMod objects (as returned by prep_cobrapy_models)\n* x0 (positional) - list or dictionary: initial microbial biomass (keys should be mod.Name for each model in model_list)\n* y0 (positional) - list or dictionary: initial metabolite biomass\n* met_in (positional) - list or dict: metabolite inflow rates\n* met_out (positional) - list or dict: metabolite outflow rates\n* endtime (positional) - int: simulation length\n* metabolite_names (keyword) - list: metabolite names, which are keys for metabolite related dicts.\n* report_activity (keyword) - Bool: whether or not to log all simulation steps\n* detail_activity (keyword) - Bool: whether or not to log all simulation substeps, especially in basis finding\n* initres (keyword) - float: initial time step resolution\n* concurrent (keyword) - Bool: option to attempt to parallelize initialization\n* solver (keyword) - string: LP solver to use, 'cp' to use CPLEX, 'gb' to use Gurobi, 'both' to use a combination (fastest option)\n* enoughalready (keyword) - int: -log of minimum step size\n* flobj (keyword) - file-like: file onto which to print all simulation output (excluding some error messages), if None will print to stdout\n\nWhich returns the tuple (biomasses,metabolite_bioms,internal_flux,t,ydotconts):\n* biomasses = dict - microbe biomasses at each time point, keys are mod.Name for given models\n* metabolite_bioms = dict - metabolite biomasses at each time point, keys are metabolite names\n* internal_flux = dict - internal fluxes for each model, keys are mod.Name for given models\n* t = list - time points of simulation\n* ydotconts = dict of dicts - usage of each metabolite by species. Keys are mod.Name, second level keys are metabolite names\n\n\nA Genome scale metabolic model can be written as a stoichiometric matrix S which can be partitioned\n\n[I G1]  \n[0 G2]\n\nSurfin_FBA defines the class SurfMod for simulation. This is a GEM of a single microbe re-formatted for dFBA simulation.\n\nInstance attributes required are:\n* Gamma1 = numpy array - part of stoichiometric matrix (G1)\n* Gamma2 = numpy array - part of stoichiometric matrix (G2)\n* objective = numpy array - growth objective for FBA\n* intLB = numpy array - lower bounds on internal flux vectors (ordered)\n* intUB = numpy array - upper bounds on internal flux vectors (ordered)\n* uptakes = numpy array - uptake efficiencies [k1,...,kn] upper bound of exchange reaction is kij*yj where yj is the metabolite exchanged with microbe xi (this model).\n* exchgLB = numpy array - lower bound of exchange reactions\n* Name = string - model name\n* deathrate = float - death or dilution rate of\n\nThe following attributes are created at initialization of an instance:\n* MatrixA =  np.concatenate([G1,-G1,np.eye(G1.shape[1]),-np.eye(G1.shape[1])],axis = 0)\n* statbds = np.concatenate([-elbs,iubs,-ilbs])#np.empty(0)\n\nThe method self.prep_indv_model(self,initial_N,secondobj = [],report_activity = True, solver = 'gb',flobj = None) further preps the model for use by Surfin_FBA. This is called by Surfin_FBA.\n\nTo use dFBA with COBRAPy model, first format the desired models using prep_cobrapy_models, which takes as input\na COBRApy model and outputs a model as a SurfMod object.\n\nprep_cobrapy_models(cobra_models, uptake_dicts = {}, extracell = 'e', random_kappas = \"new\")\n\nparameters:\n* cobra_models = dict - dictionary of SurfMod objects\n* uptake_dicts = {} - dict of dicts keyed by model key (from cobra_models dict) and metabolite. If empty, random parameters are generated\n* extracell = string - name of extracellular compartment in COBRAPy model\n* random_kappas = string - If this is a file containing random numbers (and so repeatable for debugging) these will be loaded and used for the uptake values kij. If this is \"ones\" then all uptake parameters will be set to 1. Otherwise, random numbers will be generated.\n\nreturns:\n* dict of SurfMod objects\n* list of exchanged metabolites (in an \"agreed upon\" order)\n* dict of initial metabolite biomass\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jdbrunner/surfin_fba", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "surfinFBA", "package_url": "https://pypi.org/project/surfinFBA/", "platform": "", "project_url": "https://pypi.org/project/surfinFBA/", "project_urls": {"Homepage": "https://github.com/jdbrunner/surfin_fba"}, "release_url": "https://pypi.org/project/surfinFBA/0.9.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Dynamic FBA for use with COBRApy metabolic models", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dynamic FBA for use with COBRAPy metabolic models.</p>\n<p>To simulate a community of microbes given as .json CORBA models, you may use:</p>\n<p>sim_cobraPY_comm(desired_models,model_info)</p>\n<p>required (positional) paramters:</p>\n<ul>\n<li>desired models = list - a list of keys for the models in the community to be simulated</li>\n<li>model_info = dict - dictionary of model .json file paths, given as strings.</li>\n</ul>\n<p>keyword parameters:</p>\n<ul>\n<li>x_init = dict - initial microbe biomasses, keyed by model keys. Any model not in dict will default to initial biomass 1</li>\n<li>y_init = dict - By default, the model uses the model.medium dictionary (averaging in the case of communities) to determine initial external metabolite concentration. With this helper function, those files cannot be manipulated. However, we can pass a dictionary y_init = {metabolite:concentration} that includes any initial concentration that we wish to change</li>\n<li>death_rates = dict - death/dilution rates of microbes. Defaults to 0</li>\n<li>uptake_dicts = {} - dict of dicts keyed by model key (from cobra_models dict) and metabolite. If empty, random parameters are generated</li>\n<li>allinflow = float - default metabolite inflow rate</li>\n<li>alloutflow = float - detault metabolite outflow rate</li>\n<li>met_inflow = dict - pass a dict to change only certain metabolite inflows</li>\n<li>met_outflow = dict - pass a dict to change only certain metabolite outflows.</li>\n<li>save = bool - if true, will save simulation plots and trajectory. Trajectory is saved as a .json file (load to python dictionary) with keys \"X\" for microbe biomass, \"Y\" for metabolite biomass, \"V\" for internal fluxes, \"U\" for metabolite usage, and \"T\" for time.</li>\n<li>save_fl = name of save files. Appended with '<em>fig</em>'+ ''.join(desired_models) + \".png\" and '<em>data</em>' + ''.join(desired_models)  + \".json\"</li>\n<li>extracell = string - name of extracellular compartment in COBRAPy model</li>\n<li>random_kappas = string - If this is a file containing random numbers (and so repeatable for debugging) these will be loaded and used for the uptake values kij. If this is \"ones\" then all uptake parameters will be set to 1. Otherwise, random numbers will be generated.</li>\n</ul>\n<p>returns the tuple (biomasses,metabolite_bioms,internal_flux,t,ydotconts):</p>\n<ul>\n<li>biomasses = dict - microbe biomasses at each time point, keys are mod.Name for given models</li>\n<li>metabolite_bioms = dict - metabolite biomasses at each time point, keys are metabolite names</li>\n<li>internal_flux = dict - internal fluxes for each model, keys are mod.Name for given models</li>\n<li>t = list - time points of simulation</li>\n<li>ydotconts = dict of dicts - usage of each metabolite by species. Keys are mod.Name, second level keys are metabolite names\n'''</li>\n</ul>\n<p>The main function is</p>\n<p>Surfin_FBA(model_list,x0,y0,met_in,met_out,endtime,metabolite_names = [], report_activity = False, detail_activity = False, initres = 0.001,concurrent = True, solver = 'both',enoughalready = 10,flobj = None)</p>\n<p>Surfin_FBA parameters:</p>\n<ul>\n<li>model_list (positional) - list or dictionary of SurfMod objects (as returned by prep_cobrapy_models)</li>\n<li>x0 (positional) - list or dictionary: initial microbial biomass (keys should be mod.Name for each model in model_list)</li>\n<li>y0 (positional) - list or dictionary: initial metabolite biomass</li>\n<li>met_in (positional) - list or dict: metabolite inflow rates</li>\n<li>met_out (positional) - list or dict: metabolite outflow rates</li>\n<li>endtime (positional) - int: simulation length</li>\n<li>metabolite_names (keyword) - list: metabolite names, which are keys for metabolite related dicts.</li>\n<li>report_activity (keyword) - Bool: whether or not to log all simulation steps</li>\n<li>detail_activity (keyword) - Bool: whether or not to log all simulation substeps, especially in basis finding</li>\n<li>initres (keyword) - float: initial time step resolution</li>\n<li>concurrent (keyword) - Bool: option to attempt to parallelize initialization</li>\n<li>solver (keyword) - string: LP solver to use, 'cp' to use CPLEX, 'gb' to use Gurobi, 'both' to use a combination (fastest option)</li>\n<li>enoughalready (keyword) - int: -log of minimum step size</li>\n<li>flobj (keyword) - file-like: file onto which to print all simulation output (excluding some error messages), if None will print to stdout</li>\n</ul>\n<p>Which returns the tuple (biomasses,metabolite_bioms,internal_flux,t,ydotconts):</p>\n<ul>\n<li>biomasses = dict - microbe biomasses at each time point, keys are mod.Name for given models</li>\n<li>metabolite_bioms = dict - metabolite biomasses at each time point, keys are metabolite names</li>\n<li>internal_flux = dict - internal fluxes for each model, keys are mod.Name for given models</li>\n<li>t = list - time points of simulation</li>\n<li>ydotconts = dict of dicts - usage of each metabolite by species. Keys are mod.Name, second level keys are metabolite names</li>\n</ul>\n<p>A Genome scale metabolic model can be written as a stoichiometric matrix S which can be partitioned</p>\n<p>[I G1]<br>\n[0 G2]</p>\n<p>Surfin_FBA defines the class SurfMod for simulation. This is a GEM of a single microbe re-formatted for dFBA simulation.</p>\n<p>Instance attributes required are:</p>\n<ul>\n<li>Gamma1 = numpy array - part of stoichiometric matrix (G1)</li>\n<li>Gamma2 = numpy array - part of stoichiometric matrix (G2)</li>\n<li>objective = numpy array - growth objective for FBA</li>\n<li>intLB = numpy array - lower bounds on internal flux vectors (ordered)</li>\n<li>intUB = numpy array - upper bounds on internal flux vectors (ordered)</li>\n<li>uptakes = numpy array - uptake efficiencies [k1,...,kn] upper bound of exchange reaction is kij*yj where yj is the metabolite exchanged with microbe xi (this model).</li>\n<li>exchgLB = numpy array - lower bound of exchange reactions</li>\n<li>Name = string - model name</li>\n<li>deathrate = float - death or dilution rate of</li>\n</ul>\n<p>The following attributes are created at initialization of an instance:</p>\n<ul>\n<li>MatrixA =  np.concatenate([G1,-G1,np.eye(G1.shape[1]),-np.eye(G1.shape[1])],axis = 0)</li>\n<li>statbds = np.concatenate([-elbs,iubs,-ilbs])#np.empty(0)</li>\n</ul>\n<p>The method self.prep_indv_model(self,initial_N,secondobj = [],report_activity = True, solver = 'gb',flobj = None) further preps the model for use by Surfin_FBA. This is called by Surfin_FBA.</p>\n<p>To use dFBA with COBRAPy model, first format the desired models using prep_cobrapy_models, which takes as input\na COBRApy model and outputs a model as a SurfMod object.</p>\n<p>prep_cobrapy_models(cobra_models, uptake_dicts = {}, extracell = 'e', random_kappas = \"new\")</p>\n<p>parameters:</p>\n<ul>\n<li>cobra_models = dict - dictionary of SurfMod objects</li>\n<li>uptake_dicts = {} - dict of dicts keyed by model key (from cobra_models dict) and metabolite. If empty, random parameters are generated</li>\n<li>extracell = string - name of extracellular compartment in COBRAPy model</li>\n<li>random_kappas = string - If this is a file containing random numbers (and so repeatable for debugging) these will be loaded and used for the uptake values kij. If this is \"ones\" then all uptake parameters will be set to 1. Otherwise, random numbers will be generated.</li>\n</ul>\n<p>returns:</p>\n<ul>\n<li>dict of SurfMod objects</li>\n<li>list of exchanged metabolites (in an \"agreed upon\" order)</li>\n<li>dict of initial metabolite biomass</li>\n</ul>\n\n          </div>"}, "last_serial": 6741788, "releases": {"0.8.3": [{"comment_text": "", "digests": {"md5": "752d81df1ef8a281a4a46dadacd32fd8", "sha256": "1b8ea1d5cabc3e078b71b83c785a757ae54bc2afe8e1d88f01d7f00c16b0388c"}, "downloads": -1, "filename": "surfinFBA-0.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "752d81df1ef8a281a4a46dadacd32fd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21791, "upload_time": "2020-02-26T20:21:41", "upload_time_iso_8601": "2020-02-26T20:21:41.319353Z", "url": "https://files.pythonhosted.org/packages/29/f3/059c52f1373cc21f0c190709395caaeb3037793a24e1bc53e3dcc498796b/surfinFBA-0.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89006bbb48aa7166b07859c5a590d365", "sha256": "7d79062f109ec7dcfb7a5d39e1a27ea9bdb12dd708abfe281d92a47e33757ab4"}, "downloads": -1, "filename": "surfinFBA-0.8.3.tar.gz", "has_sig": false, "md5_digest": "89006bbb48aa7166b07859c5a590d365", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21150, "upload_time": "2020-02-26T20:21:43", "upload_time_iso_8601": "2020-02-26T20:21:43.439149Z", "url": "https://files.pythonhosted.org/packages/de/37/424467d4be50cba2d40660c63ac9dfa3eed2e9e72f14098cc86f5670f31e/surfinFBA-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "dc43137d9ee6d4b0d183f82ef7f76b6a", "sha256": "a076a6bbc023b348f46308d39570dd89a64cb1fca8bb739697d0156fd7b4afb9"}, "downloads": -1, "filename": "surfinFBA-0.8.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dc43137d9ee6d4b0d183f82ef7f76b6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21788, "upload_time": "2020-02-26T20:28:53", "upload_time_iso_8601": "2020-02-26T20:28:53.622911Z", "url": "https://files.pythonhosted.org/packages/52/25/4c253c9a50e95ffba7f4a2d9ec5d39a50747ac365770b97c02dd55ec27ae/surfinFBA-0.8.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "734a36f14573c1026d6bb91d482bda21", "sha256": "a61f8e257065dd6be953cb48bfb21435a7b01aba36c64523f8b37444c3e01ca1"}, "downloads": -1, "filename": "surfinFBA-0.8.4.tar.gz", "has_sig": false, "md5_digest": "734a36f14573c1026d6bb91d482bda21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21153, "upload_time": "2020-02-26T20:28:55", "upload_time_iso_8601": "2020-02-26T20:28:55.080789Z", "url": "https://files.pythonhosted.org/packages/b3/7f/e1f57949b096a5f29873e429bf2163e7cf4bdb2465d219d7f3d808eedf44/surfinFBA-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "986b29684f703d914136ec467ae517b0", "sha256": "c2a9787c1dc18e4fa9c1d6852a8b31266c66a7ff2be4844ccc9e384bd70ae7be"}, "downloads": -1, "filename": "surfinFBA-0.8.5-py3-none-any.whl", "has_sig": false, "md5_digest": "986b29684f703d914136ec467ae517b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21789, "upload_time": "2020-02-26T20:32:48", "upload_time_iso_8601": "2020-02-26T20:32:48.366526Z", "url": "https://files.pythonhosted.org/packages/36/58/1f08bb6fafeb4db62f9b78803d6910d064d04cd567083bc1b132a51c255a/surfinFBA-0.8.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "982c748df6c95d24fed3578972f1e744", "sha256": "c948998b88d08a220e2942df3626ac309c7cc0c8a531633ec5e8f20186597222"}, "downloads": -1, "filename": "surfinFBA-0.8.5.tar.gz", "has_sig": false, "md5_digest": "982c748df6c95d24fed3578972f1e744", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21231, "upload_time": "2020-02-26T20:32:49", "upload_time_iso_8601": "2020-02-26T20:32:49.364755Z", "url": "https://files.pythonhosted.org/packages/35/20/71134dda1e50b5aff29a639c5df9e934dd341615307be5412aa617247628/surfinFBA-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "7f2570e155097c7cf69e04cc4215111c", "sha256": "d23da43a5f7e657e4d448a23741c43232a6866d2d52b4097dbc4677f21ab67d5"}, "downloads": -1, "filename": "surfinFBA-0.8.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2570e155097c7cf69e04cc4215111c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1394914, "upload_time": "2020-02-26T20:42:22", "upload_time_iso_8601": "2020-02-26T20:42:22.347678Z", "url": "https://files.pythonhosted.org/packages/0d/75/39e05aaac74fe95265ccc234747b7abab55d128537ed2e34af9d66ebb2fa/surfinFBA-0.8.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3980da69f8c58725d458c7802466d359", "sha256": "02cef579d76a163bf8d3503baa36b73b01e7b880d880bd1e604eff703e7dda39"}, "downloads": -1, "filename": "surfinFBA-0.8.6.tar.gz", "has_sig": false, "md5_digest": "3980da69f8c58725d458c7802466d359", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1341397, "upload_time": "2020-02-26T20:42:25", "upload_time_iso_8601": "2020-02-26T20:42:25.606810Z", "url": "https://files.pythonhosted.org/packages/c8/97/2cd9aff53dd3e7926bb1b6ddab2fe4d9aae8ecdc7fcc1f9b029981f6c6bf/surfinFBA-0.8.6.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "2c491a7965040bd154b63498d610516c", "sha256": "804ffebb874b38c70ebcca8cfb55f56bc8a032f588c06c215299f43cf388a65d"}, "downloads": -1, "filename": "surfinFBA-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c491a7965040bd154b63498d610516c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1396521, "upload_time": "2020-03-03T16:12:19", "upload_time_iso_8601": "2020-03-03T16:12:19.193199Z", "url": "https://files.pythonhosted.org/packages/5e/63/3124b4ee0c0b403c072eb1af5310faf3041a18e7201ad7e050717d50bb85/surfinFBA-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc6a3ec95194cf9ae31b6c11fb4aa9d6", "sha256": "f1db0b5ecb8ef7bc1370b7a70435ae1416960780f6ccdc850843584aacdaa9ac"}, "downloads": -1, "filename": "surfinFBA-0.9.0.tar.gz", "has_sig": false, "md5_digest": "cc6a3ec95194cf9ae31b6c11fb4aa9d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1342596, "upload_time": "2020-03-03T16:12:20", "upload_time_iso_8601": "2020-03-03T16:12:20.782592Z", "url": "https://files.pythonhosted.org/packages/75/4a/850cb19d619dee027558ace018f783119e8fb714bdcaede67e9d0ecc6663/surfinFBA-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c491a7965040bd154b63498d610516c", "sha256": "804ffebb874b38c70ebcca8cfb55f56bc8a032f588c06c215299f43cf388a65d"}, "downloads": -1, "filename": "surfinFBA-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c491a7965040bd154b63498d610516c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1396521, "upload_time": "2020-03-03T16:12:19", "upload_time_iso_8601": "2020-03-03T16:12:19.193199Z", "url": "https://files.pythonhosted.org/packages/5e/63/3124b4ee0c0b403c072eb1af5310faf3041a18e7201ad7e050717d50bb85/surfinFBA-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc6a3ec95194cf9ae31b6c11fb4aa9d6", "sha256": "f1db0b5ecb8ef7bc1370b7a70435ae1416960780f6ccdc850843584aacdaa9ac"}, "downloads": -1, "filename": "surfinFBA-0.9.0.tar.gz", "has_sig": false, "md5_digest": "cc6a3ec95194cf9ae31b6c11fb4aa9d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1342596, "upload_time": "2020-03-03T16:12:20", "upload_time_iso_8601": "2020-03-03T16:12:20.782592Z", "url": "https://files.pythonhosted.org/packages/75/4a/850cb19d619dee027558ace018f783119e8fb714bdcaede67e9d0ecc6663/surfinFBA-0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:01 2020"}