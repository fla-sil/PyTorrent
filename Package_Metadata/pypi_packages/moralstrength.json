{"info": {"author": "Oscar Araque, Lorenzo Gatti and Kyriaki Kalimeri", "author_email": "o.araque@upm.es", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Text Processing :: Linguistic"], "description": "# Moral Foundations Theory predictor and lexicon\n\nThis repository contains code and trained models corresponding to the paper \"MoralStrength: Exploiting a Moral Lexicon and Embedding Similarity for Moral Foundations Prediction\".\nRun `Predictor.ipynb` to see a functioning version of the moral foundations predictor. Keep reading for some examples of use below.\n\n## Install\n\nThe software is written in Python 3. For installing, please use `pip`:\n\n```\npip install moralstrength\n```\n\n## GUI\n\nThis repository is intended for users that are willing to use the software through Python.\nAlternatively, we have published a Graphical Interface that works on Linux, MacOS, and Windows. Please visit [this repository](https://github.com/oaraque/moral-foundations-gui).\n\n# MoralStrength lexicon\n\n## MoralStrength processed lexicon\n\nThis repository contains the MoralStrength lexicon, which enables researchers to extract the moral valence from a variety of lemmas.\nIt is available under the directory `moralstrength_annotations`.\nAn example of use of the lexicon with Python is:\n\n```python\n>>> import moralstrength\n\n>>> moralstrength.word_moral_values('care')\n{'care': 8.8, 'fairness': -1, 'loyalty': -1, 'authority': -1, 'purity': -1}\n```\n\n## MoralStrength presence\n\nAlso, this repository contains several already-trained models that predict the presence of a certain moral trait.\nThat is, whether the analyzed text is relevant for a moral trait, or not.\nA minimal example of use:\n\n```python\nimport moralstregnth\n\ntext = \"PLS help #HASHTAG's family. No one prepares for this. They are in need of any assistance you can offer\"  \n\nmoralstrength.string_moral_value(text, moral='care')\n```\n         \nYou can check the available moral traits using the `moralstrength.get_available_prediction_traits` method.\nThe complete list of methods that can be used is shown in the next section.\n         \n## List of methods to use\n\nThe methods that are under `moralstrength.moralstrength` are the following:\n```\nget_available_lexicon_traits()\n    Returns a list of traits that were annotated and can be queried\n    by word_moral_value().\n    care: Care/Harm\n    fairness: Fairness/Cheating\n    loyalty: Loyalty/Betrayal\n    authority: Authority/Subversion\n    purity: Purity/Degradation\n\nget_available_models()\n    Returns a list of available models for predicting texts.\n    Short explanation of names:\n    unigram: simple unigram-based model\n    count: number of words that are rated as closer to moral extremes\n    freq: distribution of moral ratings across the text\n    simon: SIMilarity-based sentiment projectiON\n    or a combination of these.\n    For a comprehensive explanation of what each model does and how it performs on\n    different datasets, see https://arxiv.org/abs/1904.08314\n    (published at Knowledge-Based Systems).\n\nget_available_prediction_traits()\n    Returns a list of traits that can be predicted by string_moral_value()\n    or file_moral_value().\n    care: Care/Harm\n    fairness: Fairness/Cheating\n    loyalty: Loyalty/Betrayal\n    authority: Authority/Subversion\n    purity: Purity/Degradation\n    non-moral: Tweet/text is non-moral\n\nstring_average_moral(text, moral)\n    Returns the average of the annotations for the words in the sentence (for one moral).\n    If no word is recognized/found in the lexicon, returns -1.\n    Words are lemmatized using spacy.\n\nstring_moral_value(text, moral, model='unigram+freq')\n    Returns the estimated probability that the text is relevant to either a vice or\n    virtue of the corresponding moral trait.\n    The default model is unigram+freq, the best performing (on average) across all\n    dataset, according to our work.\n    For a list of available models, see get_available_models().\n    For a list of traits, get_available_prediction_traits().\n\nstring_moral_values(text, model='unigram+freq')\n    Returns the estimated probability that the text is relevant to vices or virtues\n    of all moral traits, as a dict.\n    The default model is unigram+freq, the best performing (on average) across all\n    dataset, according to our work.\n    For a list of available models, see get_available_models().\n    For a list of traits, get_available_prediction_traits().\n\nword_moral_value(word, moral)\n    Returns the association strength between word and moral trait,\n    as rated by annotators. Value ranges from 1 to 9.\n    1: words closely associated to harm, cheating, betrayal, subversion, degradation\n    9: words closely associated to care, fairness, loyalty, authority, sanctity\n    If the word is not in the lexicon of that moral trait, returns -1.\n    For a list of available traits, get_available_lexicon_traits()\n\nword_moral_values(word)\n    Returns a dict that gives the association strength between word and every\n    moral trait, as rated by annotators. Value ranges from 1 to 9.\n    1: words closely associated to harm, cheating, betrayal, subversion, degradation\n    9: words closely associated to care, fairness, loyalty, authority, purity/sanctity\n    If the word is not in the lexicon of that moral trait, returns -1.\n```\n## MoralStrength raw lexicon\n\nThe `moralstrength_raw` folder contains the raw annotations collected from figure-eight.\nThe folder all_annotators_except_failed contains all the annotations collected, except for the annotators that failed the task (see the paper for details on the control questions, which were based on valence ratings from Warriner et al.).\nThe folder filtered_annotators contains the annotations after the annotators with low inter-annotator agreement were removed.\n\nThe filename is `RAW_ANNOTATIONS_[MORAL]`, where MORAL is the moral trait considered and can either be AUTHORITY, CARE, FAIRNESS, LOYALTY or PURITY.\n\nThe fields in each file are:\n- WORD\tthe word to be annotated\n- ANNOTATOR_ID\tthe unique ID of each annotator\n- VALENCE\tthe valence rating of WORD, on a scale from 1 (low) to 9 (high)\n- AROUSAL\tthe arousal rating of WORD, on a scale from 1 (low) to 9 (high)\n- RELEVANCE\twhether WORD is related to the MORAL\n- EXPRESSED_MORAL\tthe moral strength of WORD, i.e. whether it is closer to one or the other extremes pertaining the MORAL trait.\n\nThe numbers for EXPRESSED_MORAL range from 1 to 9, and the extremes of the scales are:\n- 1=Subversion, 9=Authority for AUTHORITY\n- 1=Harm, 9=Care for CARE\n- 1=Proportionality, 9=Fairness for FAIRNESS\n- 1=Disloyalty, 9=Loyalty for LOYALTY\n- 1=Degradation, 9=Purity for PURITY\n\nFor privacy reason, the annotator ID has been salted and hashed, so that going back to the original annotator ID is not possible, but it is still possible to track each annotator's ratings across the different morals.\n\n## MoralStrength annotation task descriptions\n\nIn the folder `moralstrength/tasks` we also include the original description of the annotation tasks for the crowdsourcing process.\nThe interested reader can consult the instructions given to the human annotators.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/gsi-upm/gsitk/tarball/0.2.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oaraque/moral-foundations/", "keywords": "moral foundations,NLP,moralstrength,machine learning", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "moralstrength", "package_url": "https://pypi.org/project/moralstrength/", "platform": "", "project_url": "https://pypi.org/project/moralstrength/", "project_urls": {"Download": "https://github.com/gsi-upm/gsitk/tarball/0.2.3", "Homepage": "https://github.com/oaraque/moral-foundations/"}, "release_url": "https://pypi.org/project/moralstrength/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "A package to predict the Moral Foundations for a tweet or text", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Moral Foundations Theory predictor and lexicon</h1>\n<p>This repository contains code and trained models corresponding to the paper \"MoralStrength: Exploiting a Moral Lexicon and Embedding Similarity for Moral Foundations Prediction\".\nRun <code>Predictor.ipynb</code> to see a functioning version of the moral foundations predictor. Keep reading for some examples of use below.</p>\n<h2>Install</h2>\n<p>The software is written in Python 3. For installing, please use <code>pip</code>:</p>\n<pre><code>pip install moralstrength\n</code></pre>\n<h2>GUI</h2>\n<p>This repository is intended for users that are willing to use the software through Python.\nAlternatively, we have published a Graphical Interface that works on Linux, MacOS, and Windows. Please visit <a href=\"https://github.com/oaraque/moral-foundations-gui\" rel=\"nofollow\">this repository</a>.</p>\n<h1>MoralStrength lexicon</h1>\n<h2>MoralStrength processed lexicon</h2>\n<p>This repository contains the MoralStrength lexicon, which enables researchers to extract the moral valence from a variety of lemmas.\nIt is available under the directory <code>moralstrength_annotations</code>.\nAn example of use of the lexicon with Python is:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">moralstrength</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">moralstrength</span><span class=\"o\">.</span><span class=\"n\">word_moral_values</span><span class=\"p\">(</span><span class=\"s1\">'care'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'care'</span><span class=\"p\">:</span> <span class=\"mf\">8.8</span><span class=\"p\">,</span> <span class=\"s1\">'fairness'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'loyalty'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'authority'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'purity'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n<h2>MoralStrength presence</h2>\n<p>Also, this repository contains several already-trained models that predict the presence of a certain moral trait.\nThat is, whether the analyzed text is relevant for a moral trait, or not.\nA minimal example of use:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">moralstregnth</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"PLS help #HASHTAG's family. No one prepares for this. They are in need of any assistance you can offer\"</span>  \n\n<span class=\"n\">moralstrength</span><span class=\"o\">.</span><span class=\"n\">string_moral_value</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">moral</span><span class=\"o\">=</span><span class=\"s1\">'care'</span><span class=\"p\">)</span>\n</pre>\n<p>You can check the available moral traits using the <code>moralstrength.get_available_prediction_traits</code> method.\nThe complete list of methods that can be used is shown in the next section.</p>\n<h2>List of methods to use</h2>\n<p>The methods that are under <code>moralstrength.moralstrength</code> are the following:</p>\n<pre><code>get_available_lexicon_traits()\n    Returns a list of traits that were annotated and can be queried\n    by word_moral_value().\n    care: Care/Harm\n    fairness: Fairness/Cheating\n    loyalty: Loyalty/Betrayal\n    authority: Authority/Subversion\n    purity: Purity/Degradation\n\nget_available_models()\n    Returns a list of available models for predicting texts.\n    Short explanation of names:\n    unigram: simple unigram-based model\n    count: number of words that are rated as closer to moral extremes\n    freq: distribution of moral ratings across the text\n    simon: SIMilarity-based sentiment projectiON\n    or a combination of these.\n    For a comprehensive explanation of what each model does and how it performs on\n    different datasets, see https://arxiv.org/abs/1904.08314\n    (published at Knowledge-Based Systems).\n\nget_available_prediction_traits()\n    Returns a list of traits that can be predicted by string_moral_value()\n    or file_moral_value().\n    care: Care/Harm\n    fairness: Fairness/Cheating\n    loyalty: Loyalty/Betrayal\n    authority: Authority/Subversion\n    purity: Purity/Degradation\n    non-moral: Tweet/text is non-moral\n\nstring_average_moral(text, moral)\n    Returns the average of the annotations for the words in the sentence (for one moral).\n    If no word is recognized/found in the lexicon, returns -1.\n    Words are lemmatized using spacy.\n\nstring_moral_value(text, moral, model='unigram+freq')\n    Returns the estimated probability that the text is relevant to either a vice or\n    virtue of the corresponding moral trait.\n    The default model is unigram+freq, the best performing (on average) across all\n    dataset, according to our work.\n    For a list of available models, see get_available_models().\n    For a list of traits, get_available_prediction_traits().\n\nstring_moral_values(text, model='unigram+freq')\n    Returns the estimated probability that the text is relevant to vices or virtues\n    of all moral traits, as a dict.\n    The default model is unigram+freq, the best performing (on average) across all\n    dataset, according to our work.\n    For a list of available models, see get_available_models().\n    For a list of traits, get_available_prediction_traits().\n\nword_moral_value(word, moral)\n    Returns the association strength between word and moral trait,\n    as rated by annotators. Value ranges from 1 to 9.\n    1: words closely associated to harm, cheating, betrayal, subversion, degradation\n    9: words closely associated to care, fairness, loyalty, authority, sanctity\n    If the word is not in the lexicon of that moral trait, returns -1.\n    For a list of available traits, get_available_lexicon_traits()\n\nword_moral_values(word)\n    Returns a dict that gives the association strength between word and every\n    moral trait, as rated by annotators. Value ranges from 1 to 9.\n    1: words closely associated to harm, cheating, betrayal, subversion, degradation\n    9: words closely associated to care, fairness, loyalty, authority, purity/sanctity\n    If the word is not in the lexicon of that moral trait, returns -1.\n</code></pre>\n<h2>MoralStrength raw lexicon</h2>\n<p>The <code>moralstrength_raw</code> folder contains the raw annotations collected from figure-eight.\nThe folder all_annotators_except_failed contains all the annotations collected, except for the annotators that failed the task (see the paper for details on the control questions, which were based on valence ratings from Warriner et al.).\nThe folder filtered_annotators contains the annotations after the annotators with low inter-annotator agreement were removed.</p>\n<p>The filename is <code>RAW_ANNOTATIONS_[MORAL]</code>, where MORAL is the moral trait considered and can either be AUTHORITY, CARE, FAIRNESS, LOYALTY or PURITY.</p>\n<p>The fields in each file are:</p>\n<ul>\n<li>WORD\tthe word to be annotated</li>\n<li>ANNOTATOR_ID\tthe unique ID of each annotator</li>\n<li>VALENCE\tthe valence rating of WORD, on a scale from 1 (low) to 9 (high)</li>\n<li>AROUSAL\tthe arousal rating of WORD, on a scale from 1 (low) to 9 (high)</li>\n<li>RELEVANCE\twhether WORD is related to the MORAL</li>\n<li>EXPRESSED_MORAL\tthe moral strength of WORD, i.e. whether it is closer to one or the other extremes pertaining the MORAL trait.</li>\n</ul>\n<p>The numbers for EXPRESSED_MORAL range from 1 to 9, and the extremes of the scales are:</p>\n<ul>\n<li>1=Subversion, 9=Authority for AUTHORITY</li>\n<li>1=Harm, 9=Care for CARE</li>\n<li>1=Proportionality, 9=Fairness for FAIRNESS</li>\n<li>1=Disloyalty, 9=Loyalty for LOYALTY</li>\n<li>1=Degradation, 9=Purity for PURITY</li>\n</ul>\n<p>For privacy reason, the annotator ID has been salted and hashed, so that going back to the original annotator ID is not possible, but it is still possible to track each annotator's ratings across the different morals.</p>\n<h2>MoralStrength annotation task descriptions</h2>\n<p>In the folder <code>moralstrength/tasks</code> we also include the original description of the annotation tasks for the crowdsourcing process.\nThe interested reader can consult the instructions given to the human annotators.</p>\n\n          </div>"}, "last_serial": 6319395, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "32fbabc51f10fb35a303f1bd0a48f96e", "sha256": "27e78e57706bead41115029da7b2cd112f83238c62d2dda10f43cf584c11678c"}, "downloads": -1, "filename": "moralstrength-0.1.0.tar.gz", "has_sig": false, "md5_digest": "32fbabc51f10fb35a303f1bd0a48f96e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6337, "upload_time": "2019-10-31T16:53:06", "upload_time_iso_8601": "2019-10-31T16:53:06.052907Z", "url": "https://files.pythonhosted.org/packages/9d/88/6959ed40be68aaaf435f7a8ff0d35d8d158e83e4f4eb1ad768f51e9d9e27/moralstrength-0.1.0.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9bc32d847abf22a7e739e5885947a4de", "sha256": "1d48851de4e136fa1fd88b70c80abac339d80e5247d6d973584f707daf1f0d0f"}, "downloads": -1, "filename": "moralstrength-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9bc32d847abf22a7e739e5885947a4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213374, "upload_time": "2019-11-20T17:51:57", "upload_time_iso_8601": "2019-11-20T17:51:57.073241Z", "url": "https://files.pythonhosted.org/packages/05/7d/176008aa7841cb89d5d2d1dbadb69dacbbea6485d7ad6434b63720b53499/moralstrength-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "b4986c10fb2556e254fdfeb0af6133dc", "sha256": "47439a5dcfef8852ccb416abc5df28bf9364bf21660231c0a95577b115a48978"}, "downloads": -1, "filename": "moralstrength-0.1.4.tar.gz", "has_sig": false, "md5_digest": "b4986c10fb2556e254fdfeb0af6133dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216328, "upload_time": "2019-11-20T18:02:41", "upload_time_iso_8601": "2019-11-20T18:02:41.045291Z", "url": "https://files.pythonhosted.org/packages/98/db/948ae26dbb3d1599ca24ff89ed91fe0d82600ed31c337e5517b6f0738ffb/moralstrength-0.1.4.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4f94988b2f230c10e08cb83931b3db6d", "sha256": "12dc9a2728b83ba5042859f407b15eaa0ebbb127448fdeb429bf855cc1f4e5ea"}, "downloads": -1, "filename": "moralstrength-0.1.7.tar.gz", "has_sig": false, "md5_digest": "4f94988b2f230c10e08cb83931b3db6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216880, "upload_time": "2019-12-10T14:30:27", "upload_time_iso_8601": "2019-12-10T14:30:27.527047Z", "url": "https://files.pythonhosted.org/packages/5f/c3/7c3623ceb3f150a13f84a541a5d08d09850ccf1884c17db7063ccc796e05/moralstrength-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "04ff850ae8377ec31a684dfc4b6e9245", "sha256": "86540ba5089b4a07ecff9a83d8521a17bc5784a431ce4739251589f958a5e481"}, "downloads": -1, "filename": "moralstrength-0.1.8.tar.gz", "has_sig": false, "md5_digest": "04ff850ae8377ec31a684dfc4b6e9245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216942, "upload_time": "2019-12-17T16:30:06", "upload_time_iso_8601": "2019-12-17T16:30:06.418788Z", "url": "https://files.pythonhosted.org/packages/bd/8c/d7a6ba8811c0fca54b824ee32761ec41da18172353363125de6fd5a893de/moralstrength-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b16834707cc07abe9436f3db8e22442f", "sha256": "97dca04bf7d211e8287640bc78e695633c674f6a42a86037ac02f077c705f83b"}, "downloads": -1, "filename": "moralstrength-0.1.9.tar.gz", "has_sig": false, "md5_digest": "b16834707cc07abe9436f3db8e22442f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216938, "upload_time": "2019-12-17T16:54:06", "upload_time_iso_8601": "2019-12-17T16:54:06.098282Z", "url": "https://files.pythonhosted.org/packages/7c/9f/27ec94d582764a14615cb0fc3f67d96620a1d7a0363a5534e9f9873554e7/moralstrength-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c9ac2ddabd887f05f9edea7009679a25", "sha256": "547cb62eb052cfcbb6b3ac7554c3cdb24c3d9641bb49c6bc0b1fb4d753b24c9e"}, "downloads": -1, "filename": "moralstrength-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c9ac2ddabd887f05f9edea7009679a25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217047, "upload_time": "2019-12-17T17:31:38", "upload_time_iso_8601": "2019-12-17T17:31:38.794933Z", "url": "https://files.pythonhosted.org/packages/36/cc/1e66fd50f095205414d6ad1de3cfa3955e0ce0ee29e2f5d59001fa3babae/moralstrength-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4057918dacb6119a568a63190de202ae", "sha256": "7eb274a1736884e38d8b8b1dfde1dacfd0062f8e8ef7574b2c42bdff2ba8e079"}, "downloads": -1, "filename": "moralstrength-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4057918dacb6119a568a63190de202ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216979, "upload_time": "2019-12-17T17:34:22", "upload_time_iso_8601": "2019-12-17T17:34:22.943594Z", "url": "https://files.pythonhosted.org/packages/e6/b5/f5fd8a7b0498ce57c356d853caf58d4ba0a80176b71e0750530ee75d0c43/moralstrength-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2132f31e8ade766d3bb713794a476472", "sha256": "19093325b1b3221dfb2375ad588dbe9640c3347b7e0d1c4b46598dfeef9aa205"}, "downloads": -1, "filename": "moralstrength-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2132f31e8ade766d3bb713794a476472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216985, "upload_time": "2019-12-17T17:40:19", "upload_time_iso_8601": "2019-12-17T17:40:19.958369Z", "url": "https://files.pythonhosted.org/packages/0f/22/70a13170616e8dadfbc7c1539312500f844a155529ceecc1696fcc332f6f/moralstrength-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "a1c61303557c02fbf25e94371395afef", "sha256": "1fec2e54b7004314a615edbf1f5e23b2120d145b0b78c061ff073047aa9e44e9"}, "downloads": -1, "filename": "moralstrength-0.2.3.tar.gz", "has_sig": false, "md5_digest": "a1c61303557c02fbf25e94371395afef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216979, "upload_time": "2019-12-17T17:52:44", "upload_time_iso_8601": "2019-12-17T17:52:44.037966Z", "url": "https://files.pythonhosted.org/packages/aa/8f/14a1536f4bd8d7b883837f66fa2ef27afe65e36824137301105966a59f09/moralstrength-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1c61303557c02fbf25e94371395afef", "sha256": "1fec2e54b7004314a615edbf1f5e23b2120d145b0b78c061ff073047aa9e44e9"}, "downloads": -1, "filename": "moralstrength-0.2.3.tar.gz", "has_sig": false, "md5_digest": "a1c61303557c02fbf25e94371395afef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216979, "upload_time": "2019-12-17T17:52:44", "upload_time_iso_8601": "2019-12-17T17:52:44.037966Z", "url": "https://files.pythonhosted.org/packages/aa/8f/14a1536f4bd8d7b883837f66fa2ef27afe65e36824137301105966a59f09/moralstrength-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:52 2020"}