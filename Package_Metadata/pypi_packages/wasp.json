{"info": {"author": "Chris Withers", "author_email": "chris@simplistix.co.uk", "bugtrack_url": null, "classifiers": [], "description": "====\nWASP\n====\n\nThis package is an abstraction of interactions with WASPs allowing\napplication developers to send and recieve messages without having to\nworry about the mechanics of sending and recieving messages with a\nparticular wasp.\n\nIt also allows the WASP being used to be changed by configuration\nonly, without any changes to application code.\n\nInstallation\n============\n\nTo install the package, unpack the source distribution and then do::\n\n  python setup.py install\n\nYou can also install with easy_install::\n\n  easy_install wasp\n\nAlternatively, if you're using zc.buildout, you can just specify the\npackage as an egg requirement::\n\n  [buildout]\n  parts = myeggs ...\n  ...\n\n  [myeggs]\n  recipe = zc.recipe.egg\n  eggs = wasp\n  ...\n\nFinally, if you're using with Zope 2, just unpack the source\ndistribution into $INSTANCE_HOME/lib/python.\nBe careful if you use easy_install or a buildout recipe *with* a Zope\n2 base distribution, such as that used by Plone, as  versions of the\npackages requires by `wasp` may be installed that are incompatible\nwith Zope 2.\n\nConfiguration\n=============\n\nThe configuration of sending and receiving messages centres around the\nconfiguration of utilities providing ISendMessage, INotifyMessage and\nIRecieveMessage. Reading the documentation for these in interfaces.py\nwill cover a lot of the explanation required to use the `wasp`\npackage.\n\nTo use the package, the first thing you'll need to do is choose a WASP\nimplementation and load any ZCML directives it provides. For the\nexamples here, we'll use the demo implementations which basically echo\nall their actions to the console rather than actually doing anything::\n\n  >>> load_zcml('''\n  ... <include package=\"wasp.demo\" file=\"meta.zcml\" />\n  ... ''')\n\nIn order to send messages, you need to wire in the ISendMessage\nutility of your chosen WASP. WASP implementations usually provide a\ncustom ZCML directive for doing this which allows you to specify the\nparameters.\n\nThe demo implementation is no exception::\n\n  >>> load_zcml('''\n  ... <configure \n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:wasp=\"http://namespaces.simplistix.co.uk/wasp\">\n  ...     <wasp:sender />\n  ... </configure>\n  ... ''')\n\nNext, if you're planning on receiving messages or notifications about\nmessages you've sent, you need to wire in the Receiver view. For\ndemonstration purposes, we wire it to all objects, but you probably\nonly want to wire it in such that it appears at one particular url.\n\n  >>> load_zcml('''\n  ... <configure \n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:browser=\"http://namespaces.zope.org/browser\">\n  ...   <browser:page\n  ...       name=\"wasp\"\n  ...       for=\"*\"\n  ...       class=\"wasp.Receiver\"\n  ...       permission=\"zope.Public\"\n  ...    \n  ...     />\n  ... </configure>\n  ... ''')\n\nAgain, if you're planning on receiving messages or notifications about\nmessages you've sent, you need to wire in an IProcessReponse\nutility. This is WASP-specific but can be changed independently of\nwhere the Receiver view is or how it's wired in. This means that\napplication developers only have to worry about wiring in the Receiver\nview where they want it and system administrators can choose and\nchange the WASP implementation used whenever they want.\n\nFor the examples, we'll use a `wasp.demo.ProcessResponse`\nimplementation::\n\n  >>> load_zcml('''\n  ... <configure \n  ...     xmlns=\"http://namespaces.zope.org/zope\">\n  ...     <utility factory=\"wasp.demo.ProcessResponse\"/>\n  ... </configure>\n  ... ''')\n\nSending Messages\n================\n\nOnce configured, sending messages is as simple as::\n\n  >>> from wasp import send\n  >>> send('271234','some message')\n  Send to: '271234'\n  Message: 'some message'\n       Id: None\n  True\n\nAs this shows, the send method takes an `msisdn`, a `message` and\noptionally a `message_id`.\n\nIf `send` returns True, it indicates that the message has been\nsuccessfully delivered. If something goes wrong, an exception will be\nraised.\n\nHowever, the most common case is when send returns False::\n\n  >>> load_zcml('''\n  ... <configure \n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:wasp=\"http://namespaces.simplistix.co.uk/wasp\">\n  ...     <wasp:sender response=\"False\"/>\n  ... </configure>\n  ... ''')\n  >>> send('271234','some message','id4321')\n  Send to: '271234'\n  Message: 'some message'\n       Id: 'id4321'\n  False\n\nA return value of False means that the message has successfully been\npassed to the WASP, but the WASP didn't have a definite response at\nthis stage. To find out what happened, the application progammer must\npass a `message_id`. This will be passed to the WASP and when the WASP\ncalls back, this `message_id` will be returned. This is the subject of\nthe next section.\n\nReceiving Notifications About Sent Messages\n===========================================\n\nTo receive notifications about sent messages, the application\nprogrammer must provide an INotifyMessage utility.\n\nHere's a really simple example of this::\n\n  >>> class HandleNotification:\n  ...     def __call__(self,message_id,status,details):\n  ...         print \"message_id:\",repr(message_id)\n  ...         print \"    status:\",repr(status)\n  ...         print \"   details:\",repr(details)\n        \nNormally, we'd register this utility with ZCML, but here we do so\ndirectly with the component architecture::\n\n  >>> from wasp.interfaces import INotifyMessage\n  >>> from zope.component import provideUtility\n  >>> provideUtility(HandleNotification(),provides=INotifyMessage)\n\nWe can show this in action by using the demo WASP implementations\nmethod of calling back::\n\n  >>> browser.open('http://localhost/@@wasp?type=notification&message_id=123&status=delivered&details=ok')\n  message_id: u'123'\n      status: <wasp.status.Delivered instance at ...>\n     details: u'ok'\n\nNow, in some cases, particularly if data is stored in the zodb, it's\nconvenient to have access to the context of the Receiver view. The\n`wasp` package supports this by letting you register an adapter\ninstead of a utility.\n\nHere's a simple example of a suitable adapter::\n\n  >>> class HandleNotification:\n  ...     def __init__(self,context):\n  ...         self.context = context\n  ...     def __call__(self,message_id,status,details):\n  ...         print \"   context:\",self.context\n  ...         print \"message_id:\",repr(message_id)\n  ...         print \"    status:\",repr(status)\n  ...         print \"   details:\",repr(details)\n        \nThis should generally be registered for all objects as the Receiver\nview will make sure that only its context is adapted::\n\n  >>> from wasp.interfaces import INotifyMessage\n  >>> from zope.component import provideAdapter\n  >>> provideAdapter(HandleNotification,adapts=(None,),provides=INotifyMessage)\n\nNow when a notification is received, the code called has access to the\ncontext::\n\n  >>> browser.open('http://localhost/@@wasp?type=notification&message_id=123&status=delivered&details=ok')\n     context: <security proxied zope.app.folder.folder.Folder instance at ...>\n  message_id: u'123'\n      status: <wasp.status.Delivered instance at ...>\n     details: u'ok'\n\n\nReceiving Messages\n==================\n\nTo receive messages, the application programmer must provide an\nIReceiveMessage utility. \n\nHere's a really simple example of this::\n\n  >>> class HandleMessage:\n  ...     def __call__(self,msisdn,message_text):\n  ...         print \"      msisdn:\",repr(msisdn)\n  ...         print \"message_text:\",repr(message_text)\n\nNormally, we'd register this utility with ZCML, but here we do so\ndirectly with the component architecture::\n\n  >>> from wasp.interfaces import IReceiveMessage\n  >>> from zope.component import provideUtility\n  >>> provideUtility(HandleMessage(),provides=IReceiveMessage)\n\nWe can show this in action by using the demo WASP implementations\nmethod of calling back::\n\n  >>> browser.open('http://localhost/@@wasp?type=message&msisdn=123&message_text=my+message')\n        msisdn: u'123'\n  message_text: u'my message'\n\nNow, in some cases, particularly if data is stored in the zodb, it's\nconvenient to have access to the context of the Receiver view. The\n`wasp` package supports this by letting you register an adapter\ninstead of a utility.\n\nHere's a simple example of a suitable adapter::\n\n  >>> class HandleMessage:\n  ...     def __init__(self,context):\n  ...         self.context = context\n  ...     def __call__(self,msisdn,message_text):\n  ...         print \"     context:\",self.context\n  ...         print \"      msisdn:\",repr(msisdn)\n  ...         print \"message_text:\",repr(message_text)\n        \nThis should generally be registered for all objects as the Receiver\nview will make sure that only its context is adapted::\n\n  >>> from wasp.interfaces import IReceiveMessage\n  >>> from zope.component import provideAdapter\n  >>> provideAdapter(HandleMessage,adapts=(None,),provides=IReceiveMessage)\n\nNow when a message is received, the code called has access to the\ncontext::\n\n  >>> browser.open('http://localhost/@@wasp?type=message&msisdn=123&message_text=my+message')\n       context: <security proxied zope.app.folder.folder.Folder instance at ...>\n        msisdn: u'123'\n  message_text: u'my message'\n\n\nCurrently Available WASPs\n=========================\n\nDocumentation for the configuration of the currently avalable WASPs is\nfound in the 'readme.txt' of each of the `wasp` subpackages. Each\nsubpackage represents a different WASP implementation.\n\nThe currently available WASP implementations are listed below:\n\n*demo*\n  a WASP for testing that just echos requests and responses.\n\n*bulksms*\n  an implementation for the service provided by\n  http://bulksms.2way.co.za/\n\nLicensing\n=========\n\nCopyright (c) 2008 Simplistix Ltd\n\nThis Software is released under the MIT License:\nhttp://www.opensource.org/licenses/mit-license.html\nSee license.txt for more details.\n\nCredits\n=======\n\n**Roche Compaan and Rijk Stofberg at Upfront**\n  Ideas and funding\n\n**Chris Withers**\n  Development\n\nChanges\n=======\n\n1.0.1\n-----\n\n- first open source release\n\n1.0.0\n-----\n\n- implementation for BulkSMS WASP.\n\n- clarified the meaning of `msisdn` in IReceiveMessage\n\n- added a generic SendException for use by WASP implementations.\n\n- change IProcessResponse to cater for returning notifications,\n  messages *and* a response for the browser\n\n0.9.0\n-----\n\n- initial release featuring only the demo implementation.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "All rights reserved", "maintainer": null, "maintainer_email": null, "name": "wasp", "package_url": "https://pypi.org/project/wasp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wasp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/wasp/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A library for abstracting interactions with different WASPs", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is an abstraction of interactions with WASPs allowing\napplication developers to send and recieve messages without having to\nworry about the mechanics of sending and recieving messages with a\nparticular wasp.</p>\n<p>It also allows the WASP being used to be changed by configuration\nonly, without any changes to application code.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the package, unpack the source distribution and then do:</p>\n<pre>python setup.py install\n</pre>\n<p>You can also install with easy_install:</p>\n<pre>easy_install wasp\n</pre>\n<p>Alternatively, if you\u2019re using zc.buildout, you can just specify the\npackage as an egg requirement:</p>\n<pre>[buildout]\nparts = myeggs ...\n...\n\n[myeggs]\nrecipe = zc.recipe.egg\neggs = wasp\n...\n</pre>\n<p>Finally, if you\u2019re using with Zope 2, just unpack the source\ndistribution into $INSTANCE_HOME/lib/python.\nBe careful if you use easy_install or a buildout recipe <em>with</em> a Zope\n2 base distribution, such as that used by Plone, as  versions of the\npackages requires by <cite>wasp</cite> may be installed that are incompatible\nwith Zope 2.</p>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The configuration of sending and receiving messages centres around the\nconfiguration of utilities providing ISendMessage, INotifyMessage and\nIRecieveMessage. Reading the documentation for these in interfaces.py\nwill cover a lot of the explanation required to use the <cite>wasp</cite>\npackage.</p>\n<p>To use the package, the first thing you\u2019ll need to do is choose a WASP\nimplementation and load any ZCML directives it provides. For the\nexamples here, we\u2019ll use the demo implementations which basically echo\nall their actions to the console rather than actually doing anything:</p>\n<pre>&gt;&gt;&gt; load_zcml('''\n... &lt;include package=\"wasp.demo\" file=\"meta.zcml\" /&gt;\n... ''')\n</pre>\n<p>In order to send messages, you need to wire in the ISendMessage\nutility of your chosen WASP. WASP implementations usually provide a\ncustom ZCML directive for doing this which allows you to specify the\nparameters.</p>\n<p>The demo implementation is no exception:</p>\n<pre>&gt;&gt;&gt; load_zcml('''\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:wasp=\"http://namespaces.simplistix.co.uk/wasp\"&gt;\n...     &lt;wasp:sender /&gt;\n... &lt;/configure&gt;\n... ''')\n</pre>\n<p>Next, if you\u2019re planning on receiving messages or notifications about\nmessages you\u2019ve sent, you need to wire in the Receiver view. For\ndemonstration purposes, we wire it to all objects, but you probably\nonly want to wire it in such that it appears at one particular url.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; load_zcml('''\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:browser=\"http://namespaces.zope.org/browser\"&gt;\n...   &lt;browser:page\n...       name=\"wasp\"\n...       for=\"*\"\n...       class=\"wasp.Receiver\"\n...       permission=\"zope.Public\"\n...\n...     /&gt;\n... &lt;/configure&gt;\n... ''')\n</pre>\n</blockquote>\n<p>Again, if you\u2019re planning on receiving messages or notifications about\nmessages you\u2019ve sent, you need to wire in an IProcessReponse\nutility. This is WASP-specific but can be changed independently of\nwhere the Receiver view is or how it\u2019s wired in. This means that\napplication developers only have to worry about wiring in the Receiver\nview where they want it and system administrators can choose and\nchange the WASP implementation used whenever they want.</p>\n<p>For the examples, we\u2019ll use a <cite>wasp.demo.ProcessResponse</cite>\nimplementation:</p>\n<pre>&gt;&gt;&gt; load_zcml('''\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"&gt;\n...     &lt;utility factory=\"wasp.demo.ProcessResponse\"/&gt;\n... &lt;/configure&gt;\n... ''')\n</pre>\n</div>\n<div id=\"sending-messages\">\n<h2>Sending Messages</h2>\n<p>Once configured, sending messages is as simple as:</p>\n<pre>&gt;&gt;&gt; from wasp import send\n&gt;&gt;&gt; send('271234','some message')\nSend to: '271234'\nMessage: 'some message'\n     Id: None\nTrue\n</pre>\n<p>As this shows, the send method takes an <cite>msisdn</cite>, a <cite>message</cite> and\noptionally a <cite>message_id</cite>.</p>\n<p>If <cite>send</cite> returns True, it indicates that the message has been\nsuccessfully delivered. If something goes wrong, an exception will be\nraised.</p>\n<p>However, the most common case is when send returns False:</p>\n<pre>&gt;&gt;&gt; load_zcml('''\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:wasp=\"http://namespaces.simplistix.co.uk/wasp\"&gt;\n...     &lt;wasp:sender response=\"False\"/&gt;\n... &lt;/configure&gt;\n... ''')\n&gt;&gt;&gt; send('271234','some message','id4321')\nSend to: '271234'\nMessage: 'some message'\n     Id: 'id4321'\nFalse\n</pre>\n<p>A return value of False means that the message has successfully been\npassed to the WASP, but the WASP didn\u2019t have a definite response at\nthis stage. To find out what happened, the application progammer must\npass a <cite>message_id</cite>. This will be passed to the WASP and when the WASP\ncalls back, this <cite>message_id</cite> will be returned. This is the subject of\nthe next section.</p>\n</div>\n<div id=\"receiving-notifications-about-sent-messages\">\n<h2>Receiving Notifications About Sent Messages</h2>\n<p>To receive notifications about sent messages, the application\nprogrammer must provide an INotifyMessage utility.</p>\n<p>Here\u2019s a really simple example of this:</p>\n<pre>&gt;&gt;&gt; class HandleNotification:\n...     def __call__(self,message_id,status,details):\n...         print \"message_id:\",repr(message_id)\n...         print \"    status:\",repr(status)\n...         print \"   details:\",repr(details)\n</pre>\n<p>Normally, we\u2019d register this utility with ZCML, but here we do so\ndirectly with the component architecture:</p>\n<pre>&gt;&gt;&gt; from wasp.interfaces import INotifyMessage\n&gt;&gt;&gt; from zope.component import provideUtility\n&gt;&gt;&gt; provideUtility(HandleNotification(),provides=INotifyMessage)\n</pre>\n<p>We can show this in action by using the demo WASP implementations\nmethod of calling back:</p>\n<pre>&gt;&gt;&gt; browser.open('http://localhost/@@wasp?type=notification&amp;message_id=123&amp;status=delivered&amp;details=ok')\nmessage_id: u'123'\n    status: &lt;wasp.status.Delivered instance at ...&gt;\n   details: u'ok'\n</pre>\n<p>Now, in some cases, particularly if data is stored in the zodb, it\u2019s\nconvenient to have access to the context of the Receiver view. The\n<cite>wasp</cite> package supports this by letting you register an adapter\ninstead of a utility.</p>\n<p>Here\u2019s a simple example of a suitable adapter:</p>\n<pre>&gt;&gt;&gt; class HandleNotification:\n...     def __init__(self,context):\n...         self.context = context\n...     def __call__(self,message_id,status,details):\n...         print \"   context:\",self.context\n...         print \"message_id:\",repr(message_id)\n...         print \"    status:\",repr(status)\n...         print \"   details:\",repr(details)\n</pre>\n<p>This should generally be registered for all objects as the Receiver\nview will make sure that only its context is adapted:</p>\n<pre>&gt;&gt;&gt; from wasp.interfaces import INotifyMessage\n&gt;&gt;&gt; from zope.component import provideAdapter\n&gt;&gt;&gt; provideAdapter(HandleNotification,adapts=(None,),provides=INotifyMessage)\n</pre>\n<p>Now when a notification is received, the code called has access to the\ncontext:</p>\n<pre>&gt;&gt;&gt; browser.open('http://localhost/@@wasp?type=notification&amp;message_id=123&amp;status=delivered&amp;details=ok')\n   context: &lt;security proxied zope.app.folder.folder.Folder instance at ...&gt;\nmessage_id: u'123'\n    status: &lt;wasp.status.Delivered instance at ...&gt;\n   details: u'ok'\n</pre>\n</div>\n<div id=\"receiving-messages\">\n<h2>Receiving Messages</h2>\n<p>To receive messages, the application programmer must provide an\nIReceiveMessage utility.</p>\n<p>Here\u2019s a really simple example of this:</p>\n<pre>&gt;&gt;&gt; class HandleMessage:\n...     def __call__(self,msisdn,message_text):\n...         print \"      msisdn:\",repr(msisdn)\n...         print \"message_text:\",repr(message_text)\n</pre>\n<p>Normally, we\u2019d register this utility with ZCML, but here we do so\ndirectly with the component architecture:</p>\n<pre>&gt;&gt;&gt; from wasp.interfaces import IReceiveMessage\n&gt;&gt;&gt; from zope.component import provideUtility\n&gt;&gt;&gt; provideUtility(HandleMessage(),provides=IReceiveMessage)\n</pre>\n<p>We can show this in action by using the demo WASP implementations\nmethod of calling back:</p>\n<pre>&gt;&gt;&gt; browser.open('http://localhost/@@wasp?type=message&amp;msisdn=123&amp;message_text=my+message')\n      msisdn: u'123'\nmessage_text: u'my message'\n</pre>\n<p>Now, in some cases, particularly if data is stored in the zodb, it\u2019s\nconvenient to have access to the context of the Receiver view. The\n<cite>wasp</cite> package supports this by letting you register an adapter\ninstead of a utility.</p>\n<p>Here\u2019s a simple example of a suitable adapter:</p>\n<pre>&gt;&gt;&gt; class HandleMessage:\n...     def __init__(self,context):\n...         self.context = context\n...     def __call__(self,msisdn,message_text):\n...         print \"     context:\",self.context\n...         print \"      msisdn:\",repr(msisdn)\n...         print \"message_text:\",repr(message_text)\n</pre>\n<p>This should generally be registered for all objects as the Receiver\nview will make sure that only its context is adapted:</p>\n<pre>&gt;&gt;&gt; from wasp.interfaces import IReceiveMessage\n&gt;&gt;&gt; from zope.component import provideAdapter\n&gt;&gt;&gt; provideAdapter(HandleMessage,adapts=(None,),provides=IReceiveMessage)\n</pre>\n<p>Now when a message is received, the code called has access to the\ncontext:</p>\n<pre>&gt;&gt;&gt; browser.open('http://localhost/@@wasp?type=message&amp;msisdn=123&amp;message_text=my+message')\n     context: &lt;security proxied zope.app.folder.folder.Folder instance at ...&gt;\n      msisdn: u'123'\nmessage_text: u'my message'\n</pre>\n</div>\n<div id=\"currently-available-wasps\">\n<h2>Currently Available WASPs</h2>\n<p>Documentation for the configuration of the currently avalable WASPs is\nfound in the \u2018readme.txt\u2019 of each of the <cite>wasp</cite> subpackages. Each\nsubpackage represents a different WASP implementation.</p>\n<p>The currently available WASP implementations are listed below:</p>\n<dl>\n<dt><em>demo</em></dt>\n<dd>a WASP for testing that just echos requests and responses.</dd>\n<dt><em>bulksms</em></dt>\n<dd>an implementation for the service provided by\n<a href=\"http://bulksms.2way.co.za/\" rel=\"nofollow\">http://bulksms.2way.co.za/</a></dd>\n</dl>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Copyright (c) 2008 Simplistix Ltd</p>\n<p>This Software is released under the MIT License:\n<a href=\"http://www.opensource.org/licenses/mit-license.html\" rel=\"nofollow\">http://www.opensource.org/licenses/mit-license.html</a>\nSee license.txt for more details.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<dl>\n<dt><strong>Roche Compaan and Rijk Stofberg at Upfront</strong></dt>\n<dd>Ideas and funding</dd>\n<dt><strong>Chris Withers</strong></dt>\n<dd>Development</dd>\n</dl>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>1.0.1</h3>\n<ul>\n<li>first open source release</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.0</h3>\n<ul>\n<li>implementation for BulkSMS WASP.</li>\n<li>clarified the meaning of <cite>msisdn</cite> in IReceiveMessage</li>\n<li>added a generic SendException for use by WASP implementations.</li>\n<li>change IProcessResponse to cater for returning notifications,\nmessages <em>and</em> a response for the browser</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.9.0</h3>\n<ul>\n<li>initial release featuring only the demo implementation.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 801521, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "f62b0ded244dfe1fd87c72e0197a8ac3", "sha256": "b1c1725cda847779610132e4ab48ac65ca0fb87d38d5f851e43570c052370a87"}, "downloads": -1, "filename": "wasp-1.0.1-py2.4.egg", "has_sig": false, "md5_digest": "f62b0ded244dfe1fd87c72e0197a8ac3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 48696, "upload_time": "2008-09-17T15:48:17", "upload_time_iso_8601": "2008-09-17T15:48:17Z", "url": "https://files.pythonhosted.org/packages/47/58/a229afdcfea6a8b14b3e03f672e193d5272cb39988250bfa44729b0c78b1/wasp-1.0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "759f504066116c29a5bd0077b3267ceb", "sha256": "cbd59de4a99d7b5db7fca9b2db832ce5969638a871c48a5c5a9240582182c11b"}, "downloads": -1, "filename": "wasp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "759f504066116c29a5bd0077b3267ceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19147, "upload_time": "2008-09-17T15:48:16", "upload_time_iso_8601": "2008-09-17T15:48:16Z", "url": "https://files.pythonhosted.org/packages/45/2e/b8134455fa6e98695ebc9a59c47cd0a73ef556c7c54fc2b0c9fe95153f26/wasp-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f62b0ded244dfe1fd87c72e0197a8ac3", "sha256": "b1c1725cda847779610132e4ab48ac65ca0fb87d38d5f851e43570c052370a87"}, "downloads": -1, "filename": "wasp-1.0.1-py2.4.egg", "has_sig": false, "md5_digest": "f62b0ded244dfe1fd87c72e0197a8ac3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 48696, "upload_time": "2008-09-17T15:48:17", "upload_time_iso_8601": "2008-09-17T15:48:17Z", "url": "https://files.pythonhosted.org/packages/47/58/a229afdcfea6a8b14b3e03f672e193d5272cb39988250bfa44729b0c78b1/wasp-1.0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "759f504066116c29a5bd0077b3267ceb", "sha256": "cbd59de4a99d7b5db7fca9b2db832ce5969638a871c48a5c5a9240582182c11b"}, "downloads": -1, "filename": "wasp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "759f504066116c29a5bd0077b3267ceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19147, "upload_time": "2008-09-17T15:48:16", "upload_time_iso_8601": "2008-09-17T15:48:16Z", "url": "https://files.pythonhosted.org/packages/45/2e/b8134455fa6e98695ebc9a59c47cd0a73ef556c7c54fc2b0c9fe95153f26/wasp-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:17 2020"}