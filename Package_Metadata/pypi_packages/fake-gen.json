{"info": {"author": "Arie Bro", "author_email": "ariebro@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Testing"], "description": "[![tests](https://travis-ci.com/psafont/fake-gen.svg?branch=master)](https://travis-ci.com/psafont/fake-gen)\n[![coverage](https://codecov.io/gh/psafont/fake-gen/branch/master/graph/badge.svg)](https://codecov.io/gh/psafont/fake-gen)\n\n\nfake-gen\n===============\n\nA simple package that generates data for tests.\n\nfake_gen provides the basic Factory and DictFactory classes that generate content.\nit also provides many more specialized factories that provide extended functionality.\nevery Factory instance knows how many elements its going to generate, this enables us to generate statistical results.\n\nThe DictFactory is especially useful if you want to generate data that you will later input to your NoSQL, Document based\ndatabase\n\nIn addition, using the DictFactory and the DependentField factories allows us to create factorys that depend on the results\nof other factories. (see Examples for more information).\n\nfake_gen isn't bound to a specifc database, but does include database specfic modules inside, like - extra.mongodb.py)\nbut it will always be clean of database related dependencies.\n\n## Installation\n\n    pip install fake-gen\n\n## Examples\nWe integrate the awsome faker package to generate data using FakeDataFactory,\nthis allows us to generate all sorts of content like:\n    * Names (First, last, full names)\n    * companies\n    * addresses\n    * emails\n    * urls\n    * and much much more\n\nlets create a very simple factory that generates Users:\n\n```python\nimport fake_gen\n\nclass Users(fake_gen.DictFactory):\n    id = fake_gen.CountingFactory(10)\n    firstname = fake_gen.FakeDataFactory('firstName')\n    lastname = fake_gen.FakeDataFactory('lastName')\n    address = fake_gen.FakeDataFactory('address')\n    age = fake_gen.RandomInteger(10, 30)\n    gender = fake_gen.RandomSelection(['female', 'male'])\n\nfor user in Users().generate(10): # let say we only want 10 users\n    print user\n    # {'firstname': 'Toni', 'lastname': 'Schaden', 'gender': 'female', 'age': 18, 'address': '0641 Homenick Hills\\nSouth Branson, RI 70388', 'id': 10}\n    # {'firstname': 'Gene', 'lastname': 'Greenfelder', 'gender': 'male', 'age': 17, 'address': '292 Loy Lights Suite 328\\nFritzfort, IN 73914', 'id': 11}\n    # or more likely you'd want to insert them into your favorite database (MongoDB, ElasticSearch, ..)\n```\n\nWhen creating our own subclasses for DictFactory, we can make some fields dependent on other fields.\nfor example:\n\n```python\nclass ExampleFactory(DictFactory):\n    a = CountingFactory(10)\n    b = ClonedField(\"a\") # b will have the same value as field 'a'\n\nfor e in ExampleFactory().generate(100):\n    print e\n\n# {'a': 10, 'b': 10}\n# {'a': 11, 'b': 11}\n# ...\n```\n\nLets say we want to generate something like events data, we want events to have\na start time, and an end time that will be 20 minutes in the future.\nIn addition, we want the event's start_time will be 12 minutes apart.\n\n```python\nimport fake_gen\n\nEVENT_TYPES = [\"USER_DISCONNECT\", \"USER_CONNECTED\", \"USER_LOGIN\", \"USER_LOGOUT\"]\nclass EventsFactory(fake_gen.DictFactory):\n    start_time = fake_gen.DateIntervalFactory(datetime.datetime.now(), datetime.timedelta(minutes=12))\n    end_time = fake_gen.RelativeToDatetimeField(\"start_time\", datetime.timedelta(minutes=20))\n    event_code = fake_gen.RandomSelection(EVENT_TYPES)\n\nfor event in EventFactory().generate(100):\n    print event\n    # {'start_time': datetime.datetime(2013, 12, 23, 13, 37, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 13, 57, 1, 591878), 'event_code': 'USER_CONNECTED'}\n    # {'start_time': datetime.datetime(2013, 12, 23, 13, 49, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 14, 9, 1, 591878), 'event_code': 'USER_LOGIN'}\n    # {'start_time': datetime.datetime(2013, 12, 23, 14, 1, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 14, 21, 1, 591878), 'event_code': 'USER_DISCONNECT'}\n```\n\nWe also have factories that allow us to generate different data distributed by different percentage, for example,\nlets say we want to create a 'Job', that will have an assigned user field, a state field and a description field.\nWe want the state to be 'pending' in 90% of dictionaries and 'error' in the rest of them. In addition, we want that if the 'state' field is\n'error' the assigned user will be 'support', or else it should be 'admin'.\n\n```python\nclass Job(fake_gen.DictFactory):\n    state = fake_gen.StatisticalValuesFactory([('pending', 90), ('error', 10)])\n    assigned_user = fake_gen.ConditionalValueField('state', {'error': 'support'}, 'admin')\n    description = fake_gen.RandomLengthStringFactory()\n\nfor i in Job().generate(10):\n    print i\n    # {'state': 'error', 'assigned_user': 'support', 'description': 'jUlyFByPxPdFlBPBfPaGaTPPuajFSHXKkyewzrQ'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'tOzkgmBBnxQZhSYEjVduyXGdLrtqeTZqRxmHNXbaJBfpdNxuLKWyTDxkCZgiZTLHeiKEswvIyDzAnuuOLtXmVWhjvazaOYuu'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'TIDVuvZRUBLLTtG'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'RgcSaFzmMrhwCAZjLofikmXJhtqkVOTsWHnqTXjgrxgzTKH'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'tLkSEkCbYDvlcDBDWUBGMmidEdOxeiLDBADDKnqGqWLnxUBqzOXFXnBxkiGTymuGNbUnmxyawzLGsiummCiwxNSw'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'tUyYLofuZpceaWYKkiRvksQLqFHGOiwACuPIvRxMIuftJPsObSqCBcrQnOkOhqAukfMwrY'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'JbFrUxrERMObfwhEtCQGcxEbimvoTFwJriSfRFLFkBpyemqEfqUCGKmVlgSlVoZrrnetEnLCgbfobFbTMQOZ'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'lqatAwdcQuMMOPiYdVMRyyQgEIzOlcoozijjdCfXsVoZnnTtQjPSGBFZQGSkPblJrTIYLAotiZoyYRFrlncevwuNcqfOmeXeCPD'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'VYxnhydWtIUFiOEPszVQHuxYBIUGDyAefZiPIgkWHCMmophiueXbixXtdwKQkuvWImuErMOOOcwevQHGApXkolhjAq'}\n    # {'state': 'pending', 'assigned_user': 'admin', 'description': 'RcawgTkQggchdHppSyQxnbDdNxqkGqbQWnQMSlorqnAQLdAqyWnKtGpXaZuVdxcGQBImzVPQsYAbIFUIpqvDzwTDdRpleBrc'}\n```\n\nIn version 1.0.5 we extended the DictFactory to support passing additional factories, or overriding existing factories, for a specific instance.\nLets take for example our 'User' example from the begining.\n\n```python\nimport fake_gen\nclass Users(fake_gen.DictFactory):\n    id = fake_gen.CountingFactory(10)\n    firstname = fake_gen.FakeDataFactory('firstName')\n    lastname = fake_gen.FakeDataFactory('lastName')\n    address = fake_gen.FakeDataFactory('address')\n    age = fake_gen.RandomInteger(10, 30)\n    gender = fake_gen.RandomSelection(['female', 'male'])\n```\nBut lets override it so the 'firstname' always returns John, and make the age be a random integer between 40 and 60 and add an 'email' field.\n\n```python\nfor user in Users(firstname=fake_gen.Constant('John'), age=fake_gen.RandomInteger(40, 60), email=fake_gen.FakeDataFactory('email')).generate(10): # let say we only want 10 users\n    print user\n    #{'firstname': 'John', 'gender': 'male', 'age': 54, 'email': 'hazle.wehner@brekke.com', 'lastname': 'Willms', 'address': '245 Pfeffer Light Apt. 309\\nEast Audieside, IN 11931', 'id': 10}\n    #{'firstname': 'John', 'gender': 'male', 'age': 47, 'email': 'mariam25@gmail.com', 'lastname': 'Ratke', 'address': '98710 Freddy Gateway\\nDelilahborough, GU 50849', 'id': 11}\n    #{'firstname': 'John', 'gender': 'male', 'age': 55, 'email': 'tyler22@yahoo.com', 'lastname': 'Cormier', 'address': '432 Block Locks Apt. 547\\nNew Estel, NJ 54026', 'id': 12}\n    # or more likely you'd want to insert them into your favorite database (MongoDB, ElasticSearch, ..)\n```\n\n## Factories\nSee the Factorie's Docstrings for more examples and doctests.\n\n#### Bases\n|Factory Class| Description|\n|:-------|:-----------|\n| Factory | The base class of all the factories.|\n| DictFactory | A very powerful base class. allows sub classing to create factories that generate dicts with a specific schema (see [Examples][#Examples]). |\n| ListFactory | A factory that returns on each iteration a list of `elements_per_list` items returned from calls to the given factory. |\n| Callable | Gets a callable object as an argument and returns the result of calling the object on every iteration |\n| DependentCallable | Gets a callable object as an argument and returns the result of calling the object passing the defined fields as arguments on every iteration |\n| ClonedField | A factory that copies the value of another factory. |\n#### Dates\n|Factory Class| Description|\n|:-------|:-----------|\n| RandomDateFactory | Generates random dates (python's datetime) between 2 dates|\n| DateIntervalFactory | Generates datetime objects starting from `base` while adding  `delta` to it each iteration.\n| RelativeToDatetimeField | Generates datetime object relative to another datetime field, like if you have `start_time` which is a RandomDateFactory field, and want an `end_time` field that is always 15 minutes later.|\n\nAnd MUCH MUCH more..\n\n## Todos\n* Add usage documentation for each factory (using doctest maybe?)\n* Add more tests\n* Add GeoLocationFactories to generates Location and distance related data (for example, random points near a central point).\n* Add MORE Statistical Factories\n* more ideas welcome!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/psafont/fake-gen", "keywords": "factory testing test unittest mongo data generator database json elasticsearch", "license": "MIT", "maintainer": "Pau Ruiz Safont", "maintainer_email": "psafont@ebi.ac.uk", "name": "fake-gen", "package_url": "https://pypi.org/project/fake-gen/", "platform": "", "project_url": "https://pypi.org/project/fake-gen/", "project_urls": {"Homepage": "http://github.com/psafont/fake-gen"}, "release_url": "https://pypi.org/project/fake-gen/1.0.0b2/", "requires_dist": ["faker (>0.8.0)", "pymongo ; extra == 'dev'", "pymongo ; extra == 'mongo'", "pytest ; extra == 'test'", "pymongo ; extra == 'test'"], "requires_python": "", "summary": "A small package that helps generate content to fill databases for tests", "version": "1.0.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/psafont/fake-gen\" rel=\"nofollow\"><img alt=\"tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0d2c51724513d8d66ab833a5b21de2255b36a50/68747470733a2f2f7472617669732d63692e636f6d2f707361666f6e742f66616b652d67656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/psafont/fake-gen\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96f7b2f520d8cff223ac4b766c7beacc1eaaaca8/68747470733a2f2f636f6465636f762e696f2f67682f707361666f6e742f66616b652d67656e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>fake-gen</h1>\n<p>A simple package that generates data for tests.</p>\n<p>fake_gen provides the basic Factory and DictFactory classes that generate content.\nit also provides many more specialized factories that provide extended functionality.\nevery Factory instance knows how many elements its going to generate, this enables us to generate statistical results.</p>\n<p>The DictFactory is especially useful if you want to generate data that you will later input to your NoSQL, Document based\ndatabase</p>\n<p>In addition, using the DictFactory and the DependentField factories allows us to create factorys that depend on the results\nof other factories. (see Examples for more information).</p>\n<p>fake_gen isn't bound to a specifc database, but does include database specfic modules inside, like - extra.mongodb.py)\nbut it will always be clean of database related dependencies.</p>\n<h2>Installation</h2>\n<pre><code>pip install fake-gen\n</code></pre>\n<h2>Examples</h2>\n<p>We integrate the awsome faker package to generate data using FakeDataFactory,\nthis allows us to generate all sorts of content like:\n* Names (First, last, full names)\n* companies\n* addresses\n* emails\n* urls\n* and much much more</p>\n<p>lets create a very simple factory that generates Users:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fake_gen</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Users</span><span class=\"p\">(</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">DictFactory</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">CountingFactory</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">firstname</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'firstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">lastname</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'lastName'</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomInteger</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomSelection</span><span class=\"p\">([</span><span class=\"s1\">'female'</span><span class=\"p\">,</span> <span class=\"s1\">'male'</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">Users</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span> <span class=\"c1\"># let say we only want 10 users</span>\n    <span class=\"nb\">print</span> <span class=\"n\">user</span>\n    <span class=\"c1\"># {'firstname': 'Toni', 'lastname': 'Schaden', 'gender': 'female', 'age': 18, 'address': '0641 Homenick Hills\\nSouth Branson, RI 70388', 'id': 10}</span>\n    <span class=\"c1\"># {'firstname': 'Gene', 'lastname': 'Greenfelder', 'gender': 'male', 'age': 17, 'address': '292 Loy Lights Suite 328\\nFritzfort, IN 73914', 'id': 11}</span>\n    <span class=\"c1\"># or more likely you'd want to insert them into your favorite database (MongoDB, ElasticSearch, ..)</span>\n</pre>\n<p>When creating our own subclasses for DictFactory, we can make some fields dependent on other fields.\nfor example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleFactory</span><span class=\"p\">(</span><span class=\"n\">DictFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">CountingFactory</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ClonedField</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span> <span class=\"c1\"># b will have the same value as field 'a'</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">ExampleFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># {'a': 10, 'b': 10}</span>\n<span class=\"c1\"># {'a': 11, 'b': 11}</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p>Lets say we want to generate something like events data, we want events to have\na start time, and an end time that will be 20 minutes in the future.\nIn addition, we want the event's start_time will be 12 minutes apart.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fake_gen</span>\n\n<span class=\"n\">EVENT_TYPES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"USER_DISCONNECT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USER_CONNECTED\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USER_LOGIN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USER_LOGOUT\"</span><span class=\"p\">]</span>\n<span class=\"k\">class</span> <span class=\"nc\">EventsFactory</span><span class=\"p\">(</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">DictFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">DateIntervalFactory</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n    <span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RelativeToDatetimeField</span><span class=\"p\">(</span><span class=\"s2\">\"start_time\"</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n    <span class=\"n\">event_code</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomSelection</span><span class=\"p\">(</span><span class=\"n\">EVENT_TYPES</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">EventFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">event</span>\n    <span class=\"c1\"># {'start_time': datetime.datetime(2013, 12, 23, 13, 37, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 13, 57, 1, 591878), 'event_code': 'USER_CONNECTED'}</span>\n    <span class=\"c1\"># {'start_time': datetime.datetime(2013, 12, 23, 13, 49, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 14, 9, 1, 591878), 'event_code': 'USER_LOGIN'}</span>\n    <span class=\"c1\"># {'start_time': datetime.datetime(2013, 12, 23, 14, 1, 1, 591878), 'end_time': datetime.datetime(2013, 12, 23, 14, 21, 1, 591878), 'event_code': 'USER_DISCONNECT'}</span>\n</pre>\n<p>We also have factories that allow us to generate different data distributed by different percentage, for example,\nlets say we want to create a 'Job', that will have an assigned user field, a state field and a description field.\nWe want the state to be 'pending' in 90% of dictionaries and 'error' in the rest of them. In addition, we want that if the 'state' field is\n'error' the assigned user will be 'support', or else it should be 'admin'.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Job</span><span class=\"p\">(</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">DictFactory</span><span class=\"p\">):</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">StatisticalValuesFactory</span><span class=\"p\">([(</span><span class=\"s1\">'pending'</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)])</span>\n    <span class=\"n\">assigned_user</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">ConditionalValueField</span><span class=\"p\">(</span><span class=\"s1\">'state'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'support'</span><span class=\"p\">},</span> <span class=\"s1\">'admin'</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomLengthStringFactory</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">Job</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">i</span>\n    <span class=\"c1\"># {'state': 'error', 'assigned_user': 'support', 'description': 'jUlyFByPxPdFlBPBfPaGaTPPuajFSHXKkyewzrQ'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'tOzkgmBBnxQZhSYEjVduyXGdLrtqeTZqRxmHNXbaJBfpdNxuLKWyTDxkCZgiZTLHeiKEswvIyDzAnuuOLtXmVWhjvazaOYuu'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'TIDVuvZRUBLLTtG'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'RgcSaFzmMrhwCAZjLofikmXJhtqkVOTsWHnqTXjgrxgzTKH'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'tLkSEkCbYDvlcDBDWUBGMmidEdOxeiLDBADDKnqGqWLnxUBqzOXFXnBxkiGTymuGNbUnmxyawzLGsiummCiwxNSw'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'tUyYLofuZpceaWYKkiRvksQLqFHGOiwACuPIvRxMIuftJPsObSqCBcrQnOkOhqAukfMwrY'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'JbFrUxrERMObfwhEtCQGcxEbimvoTFwJriSfRFLFkBpyemqEfqUCGKmVlgSlVoZrrnetEnLCgbfobFbTMQOZ'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'lqatAwdcQuMMOPiYdVMRyyQgEIzOlcoozijjdCfXsVoZnnTtQjPSGBFZQGSkPblJrTIYLAotiZoyYRFrlncevwuNcqfOmeXeCPD'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'VYxnhydWtIUFiOEPszVQHuxYBIUGDyAefZiPIgkWHCMmophiueXbixXtdwKQkuvWImuErMOOOcwevQHGApXkolhjAq'}</span>\n    <span class=\"c1\"># {'state': 'pending', 'assigned_user': 'admin', 'description': 'RcawgTkQggchdHppSyQxnbDdNxqkGqbQWnQMSlorqnAQLdAqyWnKtGpXaZuVdxcGQBImzVPQsYAbIFUIpqvDzwTDdRpleBrc'}</span>\n</pre>\n<p>In version 1.0.5 we extended the DictFactory to support passing additional factories, or overriding existing factories, for a specific instance.\nLets take for example our 'User' example from the begining.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fake_gen</span>\n<span class=\"k\">class</span> <span class=\"nc\">Users</span><span class=\"p\">(</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">DictFactory</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">CountingFactory</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">firstname</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'firstName'</span><span class=\"p\">)</span>\n    <span class=\"n\">lastname</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'lastName'</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomInteger</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomSelection</span><span class=\"p\">([</span><span class=\"s1\">'female'</span><span class=\"p\">,</span> <span class=\"s1\">'male'</span><span class=\"p\">])</span>\n</pre>\n<p>But lets override it so the 'firstname' always returns John, and make the age be a random integer between 40 and 60 and add an 'email' field.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">Users</span><span class=\"p\">(</span><span class=\"n\">firstname</span><span class=\"o\">=</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"s1\">'John'</span><span class=\"p\">),</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">RandomInteger</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">),</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">fake_gen</span><span class=\"o\">.</span><span class=\"n\">FakeDataFactory</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span> <span class=\"c1\"># let say we only want 10 users</span>\n    <span class=\"nb\">print</span> <span class=\"n\">user</span>\n    <span class=\"c1\">#{'firstname': 'John', 'gender': 'male', 'age': 54, 'email': 'hazle.wehner@brekke.com', 'lastname': 'Willms', 'address': '245 Pfeffer Light Apt. 309\\nEast Audieside, IN 11931', 'id': 10}</span>\n    <span class=\"c1\">#{'firstname': 'John', 'gender': 'male', 'age': 47, 'email': 'mariam25@gmail.com', 'lastname': 'Ratke', 'address': '98710 Freddy Gateway\\nDelilahborough, GU 50849', 'id': 11}</span>\n    <span class=\"c1\">#{'firstname': 'John', 'gender': 'male', 'age': 55, 'email': 'tyler22@yahoo.com', 'lastname': 'Cormier', 'address': '432 Block Locks Apt. 547\\nNew Estel, NJ 54026', 'id': 12}</span>\n    <span class=\"c1\"># or more likely you'd want to insert them into your favorite database (MongoDB, ElasticSearch, ..)</span>\n</pre>\n<h2>Factories</h2>\n<p>See the Factorie's Docstrings for more examples and doctests.</p>\n<h4>Bases</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Factory Class</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Factory</td>\n<td align=\"left\">The base class of all the factories.</td>\n</tr>\n<tr>\n<td align=\"left\">DictFactory</td>\n<td align=\"left\">A very powerful base class. allows sub classing to create factories that generate dicts with a specific schema (see [Examples][#Examples]).</td>\n</tr>\n<tr>\n<td align=\"left\">ListFactory</td>\n<td align=\"left\">A factory that returns on each iteration a list of <code>elements_per_list</code> items returned from calls to the given factory.</td>\n</tr>\n<tr>\n<td align=\"left\">Callable</td>\n<td align=\"left\">Gets a callable object as an argument and returns the result of calling the object on every iteration</td>\n</tr>\n<tr>\n<td align=\"left\">DependentCallable</td>\n<td align=\"left\">Gets a callable object as an argument and returns the result of calling the object passing the defined fields as arguments on every iteration</td>\n</tr>\n<tr>\n<td align=\"left\">ClonedField</td>\n<td align=\"left\">A factory that copies the value of another factory.</td>\n</tr></tbody></table>\n<h4>Dates</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Factory Class</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">RandomDateFactory</td>\n<td align=\"left\">Generates random dates (python's datetime) between 2 dates</td>\n</tr>\n<tr>\n<td align=\"left\">DateIntervalFactory</td>\n<td align=\"left\">Generates datetime objects starting from <code>base</code> while adding  <code>delta</code> to it each iteration.</td>\n</tr>\n<tr>\n<td align=\"left\">RelativeToDatetimeField</td>\n<td align=\"left\">Generates datetime object relative to another datetime field, like if you have <code>start_time</code> which is a RandomDateFactory field, and want an <code>end_time</code> field that is always 15 minutes later.</td>\n</tr></tbody></table>\n<p>And MUCH MUCH more..</p>\n<h2>Todos</h2>\n<ul>\n<li>Add usage documentation for each factory (using doctest maybe?)</li>\n<li>Add more tests</li>\n<li>Add GeoLocationFactories to generates Location and distance related data (for example, random points near a central point).</li>\n<li>Add MORE Statistical Factories</li>\n<li>more ideas welcome!</li>\n</ul>\n\n          </div>"}, "last_serial": 4559103, "releases": {"1.0.0b1": [{"comment_text": "", "digests": {"md5": "0e9e8385d827601df4c07f088eb0a7f5", "sha256": "bfa2cec68561ebb4d04ac9dd0e31d2f5d81e7fb7cbc24d5b4a0d7c1ddf147bd3"}, "downloads": -1, "filename": "fake_gen-1.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e9e8385d827601df4c07f088eb0a7f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18337, "upload_time": "2018-07-02T12:57:59", "upload_time_iso_8601": "2018-07-02T12:57:59.537893Z", "url": "https://files.pythonhosted.org/packages/3b/3a/988d809c9423bbcfc75b3ebb7108cb97dc4291c26fe905ee0e093fc6d90c/fake_gen-1.0.0b1-py3-none-any.whl", "yanked": false}], "1.0.0b2": [{"comment_text": "", "digests": {"md5": "6cee46131fa82fa7809a451de0a2b3f8", "sha256": "c561ede02e9c0f8da8c93a767d6a6367967c57b97e3084032f5d033b7eac3736"}, "downloads": -1, "filename": "fake_gen-1.0.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6cee46131fa82fa7809a451de0a2b3f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19497, "upload_time": "2018-12-04T09:55:03", "upload_time_iso_8601": "2018-12-04T09:55:03.623842Z", "url": "https://files.pythonhosted.org/packages/8e/70/2940357054bf756508b18340a9c7251f2451242fe7a4fb4478b850677576/fake_gen-1.0.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3717306d230b998ba454f2f3c2e5c69", "sha256": "673c53265fd22a6bd4a26841d8b93a706902f03019b730b5ad942b08fa5ad382"}, "downloads": -1, "filename": "fake-gen-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "e3717306d230b998ba454f2f3c2e5c69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19145, "upload_time": "2018-12-04T09:55:05", "upload_time_iso_8601": "2018-12-04T09:55:05.144364Z", "url": "https://files.pythonhosted.org/packages/69/8b/b190da7b1dddca688098cfb7e54d4dc8f8f29b931c213c8b057eecec8393/fake-gen-1.0.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6cee46131fa82fa7809a451de0a2b3f8", "sha256": "c561ede02e9c0f8da8c93a767d6a6367967c57b97e3084032f5d033b7eac3736"}, "downloads": -1, "filename": "fake_gen-1.0.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6cee46131fa82fa7809a451de0a2b3f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19497, "upload_time": "2018-12-04T09:55:03", "upload_time_iso_8601": "2018-12-04T09:55:03.623842Z", "url": "https://files.pythonhosted.org/packages/8e/70/2940357054bf756508b18340a9c7251f2451242fe7a4fb4478b850677576/fake_gen-1.0.0b2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3717306d230b998ba454f2f3c2e5c69", "sha256": "673c53265fd22a6bd4a26841d8b93a706902f03019b730b5ad942b08fa5ad382"}, "downloads": -1, "filename": "fake-gen-1.0.0b2.tar.gz", "has_sig": false, "md5_digest": "e3717306d230b998ba454f2f3c2e5c69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19145, "upload_time": "2018-12-04T09:55:05", "upload_time_iso_8601": "2018-12-04T09:55:05.144364Z", "url": "https://files.pythonhosted.org/packages/69/8b/b190da7b1dddca688098cfb7e54d4dc8f8f29b931c213c8b057eecec8393/fake-gen-1.0.0b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:57 2020"}