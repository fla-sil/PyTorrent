{"info": {"author": "Robin De Schepper", "author_email": "robingilbert.deschepper@unipv.it", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/Helveg/patch.svg?branch=master)](https://travis-ci.org/Helveg/patch)\n[![codecov](https://codecov.io/gh/Helveg/patch/branch/master/graph/badge.svg)](https://codecov.io/gh/Helveg/patch)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Documentation Status](https://readthedocs.org/projects/patch/badge/?version=latest)](https://patch.readthedocs.io/en/latest/?badge=latest)\n\n_*No ducks were punched during the construction of this monkey patch._\n\n# Installation\n\n```\npip install nrn-patch\n```\n\n![Inline replacement of NEURON by\nPatch](https://s5.gifyu.com/images/ezgif.com-video-to-gif-13b2788fb8bc11ca7.gif)\n\nBe aware that the interface is currently incomplete, this means that most parts are still\n\"just\" NEURON. I've only patched holes I frequently encounter myself when using the\n`h.Section`, `h.NetStim` and `h.NetCon` functions. Feel free to open an issue or fork this\nproject and open a pull request for missing or broken parts of the interface.\n\n# Philosophy\n\nPython interfaces should be Pythonic, this wrapper offers just that:\n\n  - Full Python objects: each wonky C-like NEURON object is wrapped in a\n    full fledged Python object, easily handled and extended through\n    inheritance.\n  - Duck typed interface: take a look at the magic methods I use and any\n    object you create with those methods present will work just fine\n    with Patch.\n  - Correct garbage collection, objects connected to eachother don't\n    dissapear: Objects that rely on eachother store a reference to\n    eachother. As is the basis for any sane object oriented interface.\n\n# Basic usage\n\nUse it like you would use NEURON. The wrapper doesn't make any changes to the interface,\nit just patches up some of the more frequent and ridiculous gotchas.\n\nPatch supplies a new HOC interpreter `p`, the `PythonHocInterpreter` which wraps the\nstandard HOC interpreter `h` provided by NEURON. Any objects returned will either be\n`PythonHocObject`'s wrapping their corresponding NEURON object, or whatever NEURON\nreturns.\n\nWhen using just Patch the difference between NEURON and Patch objects is handled\ntransparently, but if you wish to mix interpreters you can transform all Patch objects\nback to NEURON objects with `obj.__neuron__()`.\n\n``` python\nfrom patch import p\nimport glia as g\n\nsection = p.Section()\npoint_process = g.insert(section, \"AMPA\")\nstim = p.NetStim()\nstim.start = 10\nstim.number = 5\nstim.interval = 10\n\n# And here comes the magic! This explicitly defined connection\n# isn't immediatly garbage collected! What a crazy world we live in.\n# Has science gone too far?\np.NetCon(stim, point_process)\n\n# It's fully compatible using __neuron__\nfrom neuron import h\nnrn_section = h.Section()\nnrn_section.connect(section.__neuron__())\n```\n\n# Magic methods\n\n## \\_\\_neuron\\_\\_\n\n_Get the object's NEURON pointer_\n\nWhenever an object with this method present is sent to the NEURON HOC interpreter, the\nresult of this method is passed instead. This allows Python methods to encapsulate NEURON\npointers transparently\n\n## \\_\\_netcon\\_\\_\n\n_Get the object's NetCon pointer_\n\nWhenever an object with this method present is used in a NetCon call, the result of this\nmethod is passed instead. The connection is stored on the original object. This allows to\nsimplify the calls to NetCon, or to add more elegant default behavior, like inserting the\nconnection on a random segment of a section and being able to use just ``p.NetCon(section,\nsynapse)``\n\n# Known unpatched holes\n\n* When inserting point processes the returned object is unwrapped.\n  This can be resolved using [Glia](https://github.com/dbbs-lab/glia), or by\n  using this syntax:\n\n```python\n  # In neuron\n  process = h.MyMechanismName(my_section(0.5), *args, **kwargs)\n  # In patch\n  point_process = p.PointProcess(p.MyMechanismName, my_section(0.5), *args, **kwargs)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/helveg/patch", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nrn-patch", "package_url": "https://pypi.org/project/nrn-patch/", "platform": "", "project_url": "https://pypi.org/project/nrn-patch/", "project_urls": {"Homepage": "https://github.com/helveg/patch"}, "release_url": "https://pypi.org/project/nrn-patch/2.0.1/", "requires_dist": ["setuptools", "nrn-glia", "mpi4py", "sphinx ; extra == 'dev'", "pre-commit ; extra == 'dev'", "black ; extra == 'dev'", "sphinxcontrib-contentui ; extra == 'dev'"], "requires_python": "", "summary": "A Pythonic, object-oriented, monkey patch for NEURON", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Helveg/patch\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad0f6cb44c1130a4162d8021c766185b36c2d569/68747470733a2f2f7472617669732d63692e6f72672f48656c7665672f70617463682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Helveg/patch\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/651eb1bb0548f4c6bc4e4534a74cd81812143064/68747470733a2f2f636f6465636f762e696f2f67682f48656c7665672f70617463682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://patch.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8fe18564c8b2b90a88f4efb42cdf89a67408918/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70617463682f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><em>*No ducks were punched during the construction of this monkey patch.</em></p>\n<h1>Installation</h1>\n<pre><code>pip install nrn-patch\n</code></pre>\n<p><img alt=\"Inline replacement of NEURON by Patch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0601b94950b0c8cc951ca5750a4f74eb782a9074/68747470733a2f2f73352e67696679752e636f6d2f696d616765732f657a6769662e636f6d2d766964656f2d746f2d6769662d31336232373838666238626331316361372e676966\"></p>\n<p>Be aware that the interface is currently incomplete, this means that most parts are still\n\"just\" NEURON. I've only patched holes I frequently encounter myself when using the\n<code>h.Section</code>, <code>h.NetStim</code> and <code>h.NetCon</code> functions. Feel free to open an issue or fork this\nproject and open a pull request for missing or broken parts of the interface.</p>\n<h1>Philosophy</h1>\n<p>Python interfaces should be Pythonic, this wrapper offers just that:</p>\n<ul>\n<li>Full Python objects: each wonky C-like NEURON object is wrapped in a\nfull fledged Python object, easily handled and extended through\ninheritance.</li>\n<li>Duck typed interface: take a look at the magic methods I use and any\nobject you create with those methods present will work just fine\nwith Patch.</li>\n<li>Correct garbage collection, objects connected to eachother don't\ndissapear: Objects that rely on eachother store a reference to\neachother. As is the basis for any sane object oriented interface.</li>\n</ul>\n<h1>Basic usage</h1>\n<p>Use it like you would use NEURON. The wrapper doesn't make any changes to the interface,\nit just patches up some of the more frequent and ridiculous gotchas.</p>\n<p>Patch supplies a new HOC interpreter <code>p</code>, the <code>PythonHocInterpreter</code> which wraps the\nstandard HOC interpreter <code>h</code> provided by NEURON. Any objects returned will either be\n<code>PythonHocObject</code>'s wrapping their corresponding NEURON object, or whatever NEURON\nreturns.</p>\n<p>When using just Patch the difference between NEURON and Patch objects is handled\ntransparently, but if you wish to mix interpreters you can transform all Patch objects\nback to NEURON objects with <code>obj.__neuron__()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">patch</span> <span class=\"kn\">import</span> <span class=\"n\">p</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glia</span> <span class=\"k\">as</span> <span class=\"nn\">g</span>\n\n<span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">Section</span><span class=\"p\">()</span>\n<span class=\"n\">point_process</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"s2\">\"AMPA\"</span><span class=\"p\">)</span>\n<span class=\"n\">stim</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">NetStim</span><span class=\"p\">()</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">stim</span><span class=\"o\">.</span><span class=\"n\">interval</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># And here comes the magic! This explicitly defined connection</span>\n<span class=\"c1\"># isn't immediatly garbage collected! What a crazy world we live in.</span>\n<span class=\"c1\"># Has science gone too far?</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">NetCon</span><span class=\"p\">(</span><span class=\"n\">stim</span><span class=\"p\">,</span> <span class=\"n\">point_process</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># It's fully compatible using __neuron__</span>\n<span class=\"kn\">from</span> <span class=\"nn\">neuron</span> <span class=\"kn\">import</span> <span class=\"n\">h</span>\n<span class=\"n\">nrn_section</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">Section</span><span class=\"p\">()</span>\n<span class=\"n\">nrn_section</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">__neuron__</span><span class=\"p\">())</span>\n</pre>\n<h1>Magic methods</h1>\n<h2>__neuron__</h2>\n<p><em>Get the object's NEURON pointer</em></p>\n<p>Whenever an object with this method present is sent to the NEURON HOC interpreter, the\nresult of this method is passed instead. This allows Python methods to encapsulate NEURON\npointers transparently</p>\n<h2>__netcon__</h2>\n<p><em>Get the object's NetCon pointer</em></p>\n<p>Whenever an object with this method present is used in a NetCon call, the result of this\nmethod is passed instead. The connection is stored on the original object. This allows to\nsimplify the calls to NetCon, or to add more elegant default behavior, like inserting the\nconnection on a random segment of a section and being able to use just <code>p.NetCon(section, synapse)</code></p>\n<h1>Known unpatched holes</h1>\n<ul>\n<li>When inserting point processes the returned object is unwrapped.\nThis can be resolved using <a href=\"https://github.com/dbbs-lab/glia\" rel=\"nofollow\">Glia</a>, or by\nusing this syntax:</li>\n</ul>\n<pre>  <span class=\"c1\"># In neuron</span>\n  <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">MyMechanismName</span><span class=\"p\">(</span><span class=\"n\">my_section</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"c1\"># In patch</span>\n  <span class=\"n\">point_process</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">PointProcess</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">MyMechanismName</span><span class=\"p\">,</span> <span class=\"n\">my_section</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6865855, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "537e319b4b01ba65c2f20f136a03b286", "sha256": "3a5cad42b53c2893db078ce591f18af1e42ae6019939b52e7257441f97fbacdd"}, "downloads": -1, "filename": "nrn_patch-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "537e319b4b01ba65c2f20f136a03b286", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5847, "upload_time": "2019-12-10T15:49:49", "upload_time_iso_8601": "2019-12-10T15:49:49.635852Z", "url": "https://files.pythonhosted.org/packages/fa/40/0a7d0b06279e243b5c391c995256d61bce1fd06c222eaccb5ab0d3cf5152/nrn_patch-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0db70d82a67d88627e42a9b67898c501", "sha256": "3345244a7b7155faa6d4b4e9c6fcfaac502cd123d8895df5c3b689b6d4e203df"}, "downloads": -1, "filename": "nrn_patch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0db70d82a67d88627e42a9b67898c501", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5883, "upload_time": "2019-12-10T15:53:30", "upload_time_iso_8601": "2019-12-10T15:53:30.237134Z", "url": "https://files.pythonhosted.org/packages/ba/f0/38c0d41b6eea15f20c2ed183e21096dad8a3a3d5af27c6b1f39d1f6269b6/nrn_patch-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a215482624aa628b542c28146c87b62f", "sha256": "3b0852f7d3d6d78114fc8e15cd263a302dbeba10f4d03d44d9d44618b0645497"}, "downloads": -1, "filename": "nrn_patch-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a215482624aa628b542c28146c87b62f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6220, "upload_time": "2019-12-11T11:46:59", "upload_time_iso_8601": "2019-12-11T11:46:59.443802Z", "url": "https://files.pythonhosted.org/packages/96/29/31f479c5901ad93c019bbaecd31d00e373ea91f82cca5f65f4437e92e103/nrn_patch-0.0.3-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2f73119b52a7c557e7d7c9ecd2629ca7", "sha256": "bbc8ca21127c0eabf3ff1c4bbd77dd575e0c9238d8f442689069952b70d67a49"}, "downloads": -1, "filename": "nrn_patch-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2f73119b52a7c557e7d7c9ecd2629ca7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6648, "upload_time": "2020-01-18T15:47:55", "upload_time_iso_8601": "2020-01-18T15:47:55.682783Z", "url": "https://files.pythonhosted.org/packages/db/ff/ec73cfcadac93ed0980fc24786d53c8cb57d7aaaca2122f16ae79949e46f/nrn_patch-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "00c59888cadfdf400b284da4d8ba5a56", "sha256": "22f766834dfee0ca34ba56039d88cbab7cbb50ecb91bc88829849dabbcc0a01f"}, "downloads": -1, "filename": "nrn_patch-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "00c59888cadfdf400b284da4d8ba5a56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6837, "upload_time": "2020-01-18T16:12:06", "upload_time_iso_8601": "2020-01-18T16:12:06.424738Z", "url": "https://files.pythonhosted.org/packages/79/ff/7946c94e4c4e9ff063cd8bcd39004bac0192d7922897224f3835eb3f9ff8/nrn_patch-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "320d4f8e96b2de013b09c5294d011628", "sha256": "cf522cbb18bcf1d92bcccfeca0b9b886b62ddf597656d7d5a781573e48897b1c"}, "downloads": -1, "filename": "nrn_patch-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "320d4f8e96b2de013b09c5294d011628", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6927, "upload_time": "2020-01-19T15:31:09", "upload_time_iso_8601": "2020-01-19T15:31:09.197124Z", "url": "https://files.pythonhosted.org/packages/cc/66/3872fa02ffad49b8d825e80cb15c66a6fafec817622992b05ca0f6814854/nrn_patch-1.0.2-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f4c6c8ca95997388d4a61f1790fd661b", "sha256": "e063b6772fe7798b57fee3bca216e49ba8cbe0475e5e9559c8912cef0029a799"}, "downloads": -1, "filename": "nrn_patch-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4c6c8ca95997388d4a61f1790fd661b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7893, "upload_time": "2020-01-24T13:00:43", "upload_time_iso_8601": "2020-01-24T13:00:43.428320Z", "url": "https://files.pythonhosted.org/packages/b3/b6/1cb76be5e024fde1b30633841eab29a75ed82f070d97d4a6122d2dc89387/nrn_patch-1.1.0-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "aa5b73cb13b8986bb846d02a9f19b511", "sha256": "0bae64c86a7054974bd423d66256d09b5defc33f1e07c10904c67987599dda97"}, "downloads": -1, "filename": "nrn_patch-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa5b73cb13b8986bb846d02a9f19b511", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8084, "upload_time": "2020-01-24T13:00:45", "upload_time_iso_8601": "2020-01-24T13:00:45.120004Z", "url": "https://files.pythonhosted.org/packages/0b/98/f7b75c6cbacde728dd9cd9ef0e938a62408c8c650d405d4d2ae864bf40f3/nrn_patch-1.2.0-py3-none-any.whl", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5e864512f357f21e901d846e01ff64c5", "sha256": "cc621774aa809d6442d6d4b4f02ab8e765fbee075dd3be8513b938aa3502beb1"}, "downloads": -1, "filename": "nrn_patch-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5e864512f357f21e901d846e01ff64c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8561, "upload_time": "2020-01-28T23:15:34", "upload_time_iso_8601": "2020-01-28T23:15:34.874847Z", "url": "https://files.pythonhosted.org/packages/1d/80/f600b0cb9b964034a4410c066e84e55a50d90ba44422d26fd207138f6d22/nrn_patch-1.2.1-py3-none-any.whl", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "f2b5d7eeabe51ddbe1e7956ca326c4f1", "sha256": "500567e09f93417f06237f1e27bfad49d44261103fd71311711312e4f11611b1"}, "downloads": -1, "filename": "nrn_patch-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f2b5d7eeabe51ddbe1e7956ca326c4f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10068, "upload_time": "2020-01-29T14:51:10", "upload_time_iso_8601": "2020-01-29T14:51:10.506740Z", "url": "https://files.pythonhosted.org/packages/c0/ef/3b92a18ea7f7f12495653da6a8e74710d9fcc1b4122b890232701aeb577e/nrn_patch-1.2.2-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "964d3124dab4877a6088a34e5eb783e7", "sha256": "03e18b4aa42d23474e3425f4a76408a871e450364a0e5fb0228e64a57fa0c9cd"}, "downloads": -1, "filename": "nrn_patch-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "964d3124dab4877a6088a34e5eb783e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11395, "upload_time": "2020-01-29T14:51:11", "upload_time_iso_8601": "2020-01-29T14:51:11.773256Z", "url": "https://files.pythonhosted.org/packages/4e/5b/d0fab87ec7d069399a74207818fcf09d0f3a8b76b1307b7396e7a215ec10/nrn_patch-1.3.0-py3-none-any.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "a310912758c0bbd97b2d68616ba2fffb", "sha256": "863d45cb951f9c48a7d553b8956e60d498a804df424818013298fbb08f1e2f83"}, "downloads": -1, "filename": "nrn_patch-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a310912758c0bbd97b2d68616ba2fffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12438, "upload_time": "2020-01-30T00:06:43", "upload_time_iso_8601": "2020-01-30T00:06:43.746592Z", "url": "https://files.pythonhosted.org/packages/67/3b/e623f31ccfc44ec82daa188156173c318a9e006465010fea7482bcb857a3/nrn_patch-1.3.1-py3-none-any.whl", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "82430e22341525a2e0096fd809a8ec07", "sha256": "81fbb03953b969455104240059ad30080c99ba25227775249ac5f61326ec9890"}, "downloads": -1, "filename": "nrn_patch-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82430e22341525a2e0096fd809a8ec07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12504, "upload_time": "2020-02-03T11:30:15", "upload_time_iso_8601": "2020-02-03T11:30:15.485582Z", "url": "https://files.pythonhosted.org/packages/05/4e/65205a8b0cb35168297fc2e16c0eacaec0ff8901d5557454fe707e7e5fce/nrn_patch-1.3.2-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "0acc8254c61d3e306d5127f36f46eb91", "sha256": "6064e1ca36e6435760a3e6be77df7cffdede9ed31f6bdf70e838777a9ec19294"}, "downloads": -1, "filename": "nrn_patch-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0acc8254c61d3e306d5127f36f46eb91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15161, "upload_time": "2020-03-06T18:45:46", "upload_time_iso_8601": "2020-03-06T18:45:46.566363Z", "url": "https://files.pythonhosted.org/packages/b9/aa/e1430f608c234c6f107ff17ac72ba712b5582be78de9570e63899f18f935/nrn_patch-1.4.0-py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "629938f0bdd942ba5a75dfb098d2382b", "sha256": "0fc860d05a25d62a9010897c796ded2a21f222a1c43ae27e85c8ca52facae8c6"}, "downloads": -1, "filename": "nrn_patch-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "629938f0bdd942ba5a75dfb098d2382b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15288, "upload_time": "2020-03-21T14:14:46", "upload_time_iso_8601": "2020-03-21T14:14:46.283255Z", "url": "https://files.pythonhosted.org/packages/d9/f2/4769eaf649859a3648c0f3df36302b377c78faf4aba82dd34d2f81bc3a2e/nrn_patch-2.0.0-py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "cbfd75b077761385e4a0436dde126d20", "sha256": "1f2a184d932374822f9986543b4bb10857e5fb62fd70dbe1db50165a4fafb699"}, "downloads": -1, "filename": "nrn_patch-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cbfd75b077761385e4a0436dde126d20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15407, "upload_time": "2020-03-23T14:37:06", "upload_time_iso_8601": "2020-03-23T14:37:06.973855Z", "url": "https://files.pythonhosted.org/packages/06/e5/49018f7b6eaf5565a5d2967d7467d24305e4d7c05858438c1c48e7885002/nrn_patch-2.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbfd75b077761385e4a0436dde126d20", "sha256": "1f2a184d932374822f9986543b4bb10857e5fb62fd70dbe1db50165a4fafb699"}, "downloads": -1, "filename": "nrn_patch-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cbfd75b077761385e4a0436dde126d20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15407, "upload_time": "2020-03-23T14:37:06", "upload_time_iso_8601": "2020-03-23T14:37:06.973855Z", "url": "https://files.pythonhosted.org/packages/06/e5/49018f7b6eaf5565a5d2967d7467d24305e4d7c05858438c1c48e7885002/nrn_patch-2.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:27 2020"}