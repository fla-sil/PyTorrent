{"info": {"author": "Dan Carroll", "author_email": "dan@dancarroll.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet"], "description": "====================\nDjango Activity Sync\n====================\n\nDjango-activitysync is an easy to use social activity aggregator for Django\nprojects.\n\nIt can be used to store and display activity from a range of social networks\n(such as Twitter, Reddit, Google Reader, etc). Unlike other utilities for\naccessing and displaying activity, django-activitysync separates rendering\nfrom activity updating. All activity information is stored in the project's\ndatabase using Django models, providing great performance for page requests.\nUpdating activities happens through a Django management command, which can\nbe automated by using a utility like cron.\n\n\nFeatures\n========\n\n- Currently supports the following activity providers:\n\n    * `Twitter`_\n    * `Google Reader`_\n    * `Reddit`_\n\n- Providers are implemented using a simple, common interface, making it very\n  easy to add support for additional networks\n\n\nDependencies\n============\n\nDependencies that *must* be meet to use the application:\n\n- Twitter support depends on python-twitter_\n\n- Google Reader and Reddit support depend on feedparser_ (version 4.1)\n\n\nInstallation\n============\n\nFrom pypi_::\n\n    $ pip install django-activitysync\n\nor::\n\n    $ easy_install django-activitysync\n\nor clone from Bitbucket_::\n\n    $ hg clone https://bitbucket.org/dancarroll/django-activitysync\n\nand add activitysync to PYTHONPATH::\n\n    $ export PYTHONPATH=$PYTHONPATH:$(pwd)/django-activitysync/\n\nor::\n\n    $ cd django-activitysync\n    $ sudo python setup.py install\n\n\nConfiguration\n=============\n\n- Add activitysync to ``INSTALLED_APPS`` in settings.py::\n\n    INSTALLED_APPS = (\n        ...\n        'activitysync'\n    )\n\n- Add desired providers to ``ACTIVITYSYNC_PROVIDERS`` setting::\n\n    ACTIVITYSYNC_PROVIDERS = (\n        'activitysync.providers.googlereader.GoogleReaderProvider',\n        'activitysync.providers.twitterprovider.TwitterUserProvider',\n        'activitysync.providers.twitterprovider.TwitterSearchProvider',\n        'activitysync.providers.redditprovider.RedditProvider',\n    )\n\n- Add provider settings to settings.py (dependent on which providers are added).\n  For ease of use and organizational purposes, all settings for providers should\n  be stored in the ``ACTIVITYSYNC_SETTINGS`` dictionary. Settings required for\n  built-in providers are::\n    \n    ACTIVITYSYNC_SETTINGS = {\n        'TWITTER_USERNAME': '', # Username to use for TwitterUserProvider\n        'TWITTER_SEARCHTERM': '', # Search term to use for TwitterSearchProvider\n        'REDDIT_USERNAME': '', # Username to use for RedditProvider\n        'GOOGLEREADER_SHARED_RSS': '', # URL of Google Reader shared items RSS feed\n        'GOOGLEREADER_PUBLIC_URL': '', # URL to Google Reader public page\n    }\n\n- Sync database to create needed models::\n\n    python manage.py syncdb\n\n  or (if you have South installed)::\n\n    python manage.py migrate activitysync\n\n\nUsage\n=====\n\nFetching and creating activity items\n------------------------------------\n\nOnce configuration is completed, run the included management command\nto fetch activities for the configured providers::\n\n    python manage.py updateactivities\n\nThe command will print out all new activities to the command line. All\nactivity items are stored with a unique guid value, so this command can\nbe run as often as needed without worrying about creating duplicate values.\nIn a production site, this command likely would be added to the crontab (or\nother scheduler) to run fairly often (such as every 30 minutes).\n\nThere are a few options available for the management command.\n\n- Use the ``--send-result`` option to send an email to the site admins\n  (controlled by the Django ADMIN setting) with the newly added activities\n  (no email is sent if there are no new items)::\n\n    python manage.py updateactivities --send_result\n\n- Use the ``--dry-run option`` to output the items to the console, but not\n  actually create items in the database::\n\n    python manage.py updateactivities --dry-run\n\n\nUsing activity items\n--------------------\n\nActivity items can be accessed like any other model using Django's ORM. Here\nis a quick example of getting all published activity items (fetched items\ndefault to public, but can be hidden by modifying the item in the Django\nadmin site)::\n\n    from django.shortcuts import render_to_response\n    from activitysync.models import Activity\n\n    def index(request):\n        return render_to_response(\n            'index.html',\n            { 'activities': Activity.objects.published() }\n        )\n\nDjango-activitysync also provides a template tag for displaying items::\n\n    {% load activitysync_extras %}\n    {% render_activities activities %}\n\nThe ``render_activities`` template tag will pass the object list and\n``MEDIA_URL`` values to the template ``activitysync/activities_tag.html``.\nThe project comes with a sample template that will be used by default, or you\ncan use it as a basis for your own. A second template tag,\n``render_activities_with_date_headers`` renders the activity list along with\ndate headers for each unique day encountered.\n\n\n.. _Twitter: http://twitter.com/\n.. _Google Reader: http://www.google.com/reader/\n.. _Reddit: http://reddit.com/\n.. _pypi: http://pypi.python.org/pypi/django-activitysync/\n.. _Bitbucket: https://bitbucket.org/dancarroll/django-activitysync\n.. _python-twitter: http://code.google.com/p/python-twitter/\n.. _feedparser: http://www.feedparser.org/", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/dancarroll/django-activitysync/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/dancarroll/django-activitysync", "keywords": "django,social,activity,application,twitter,reddit,google reader", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-activitysync", "package_url": "https://pypi.org/project/django-activitysync/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-activitysync/", "project_urls": {"Download": "https://bitbucket.org/dancarroll/django-activitysync/downloads", "Homepage": "https://bitbucket.org/dancarroll/django-activitysync"}, "release_url": "https://pypi.org/project/django-activitysync/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Fast, easy, and extensible social activity aggregation for Django projects", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-activitysync is an easy to use social activity aggregator for Django\nprojects.</p>\n<p>It can be used to store and display activity from a range of social networks\n(such as Twitter, Reddit, Google Reader, etc). Unlike other utilities for\naccessing and displaying activity, django-activitysync separates rendering\nfrom activity updating. All activity information is stored in the project\u2019s\ndatabase using Django models, providing great performance for page requests.\nUpdating activities happens through a Django management command, which can\nbe automated by using a utility like cron.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>Currently supports the following activity providers:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://twitter.com/\" rel=\"nofollow\">Twitter</a></li>\n<li><a href=\"http://www.google.com/reader/\" rel=\"nofollow\">Google Reader</a></li>\n<li><a href=\"http://reddit.com/\" rel=\"nofollow\">Reddit</a></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Providers are implemented using a simple, common interface, making it very\neasy to add support for additional networks</p>\n</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Dependencies that <em>must</em> be meet to use the application:</p>\n<ul>\n<li>Twitter support depends on <a href=\"http://code.google.com/p/python-twitter/\" rel=\"nofollow\">python-twitter</a></li>\n<li>Google Reader and Reddit support depend on <a href=\"http://www.feedparser.org/\" rel=\"nofollow\">feedparser</a> (version 4.1)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From <a href=\"http://pypi.python.org/pypi/django-activitysync/\" rel=\"nofollow\">pypi</a>:</p>\n<pre>$ pip install django-activitysync\n</pre>\n<p>or:</p>\n<pre>$ easy_install django-activitysync\n</pre>\n<p>or clone from <a href=\"https://bitbucket.org/dancarroll/django-activitysync\" rel=\"nofollow\">Bitbucket</a>:</p>\n<pre>$ hg clone https://bitbucket.org/dancarroll/django-activitysync\n</pre>\n<p>and add activitysync to PYTHONPATH:</p>\n<pre>$ export PYTHONPATH=$PYTHONPATH:$(pwd)/django-activitysync/\n</pre>\n<p>or:</p>\n<pre>$ cd django-activitysync\n$ sudo python setup.py install\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<ul>\n<li><p>Add activitysync to <tt>INSTALLED_APPS</tt> in settings.py:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'activitysync'\n)\n</pre>\n</li>\n<li><p>Add desired providers to <tt>ACTIVITYSYNC_PROVIDERS</tt> setting:</p>\n<pre>ACTIVITYSYNC_PROVIDERS = (\n    'activitysync.providers.googlereader.GoogleReaderProvider',\n    'activitysync.providers.twitterprovider.TwitterUserProvider',\n    'activitysync.providers.twitterprovider.TwitterSearchProvider',\n    'activitysync.providers.redditprovider.RedditProvider',\n)\n</pre>\n</li>\n<li><p>Add provider settings to settings.py (dependent on which providers are added).\nFor ease of use and organizational purposes, all settings for providers should\nbe stored in the <tt>ACTIVITYSYNC_SETTINGS</tt> dictionary. Settings required for\nbuilt-in providers are:</p>\n<pre>ACTIVITYSYNC_SETTINGS = {\n    'TWITTER_USERNAME': '', # Username to use for TwitterUserProvider\n    'TWITTER_SEARCHTERM': '', # Search term to use for TwitterSearchProvider\n    'REDDIT_USERNAME': '', # Username to use for RedditProvider\n    'GOOGLEREADER_SHARED_RSS': '', # URL of Google Reader shared items RSS feed\n    'GOOGLEREADER_PUBLIC_URL': '', # URL to Google Reader public page\n}\n</pre>\n</li>\n<li><p>Sync database to create needed models:</p>\n<pre>python manage.py syncdb\n</pre>\n<p>or (if you have South installed):</p>\n<pre>python manage.py migrate activitysync\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"fetching-and-creating-activity-items\">\n<h3>Fetching and creating activity items</h3>\n<p>Once configuration is completed, run the included management command\nto fetch activities for the configured providers:</p>\n<pre>python manage.py updateactivities\n</pre>\n<p>The command will print out all new activities to the command line. All\nactivity items are stored with a unique guid value, so this command can\nbe run as often as needed without worrying about creating duplicate values.\nIn a production site, this command likely would be added to the crontab (or\nother scheduler) to run fairly often (such as every 30 minutes).</p>\n<p>There are a few options available for the management command.</p>\n<ul>\n<li><p>Use the <tt><span class=\"pre\">--send-result</span></tt> option to send an email to the site admins\n(controlled by the Django ADMIN setting) with the newly added activities\n(no email is sent if there are no new items):</p>\n<pre>python manage.py updateactivities --send_result\n</pre>\n</li>\n<li><p>Use the <tt><span class=\"pre\">--dry-run</span> option</tt> to output the items to the console, but not\nactually create items in the database:</p>\n<pre>python manage.py updateactivities --dry-run\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"using-activity-items\">\n<h3>Using activity items</h3>\n<p>Activity items can be accessed like any other model using Django\u2019s ORM. Here\nis a quick example of getting all published activity items (fetched items\ndefault to public, but can be hidden by modifying the item in the Django\nadmin site):</p>\n<pre>from django.shortcuts import render_to_response\nfrom activitysync.models import Activity\n\ndef index(request):\n    return render_to_response(\n        'index.html',\n        { 'activities': Activity.objects.published() }\n    )\n</pre>\n<p>Django-activitysync also provides a template tag for displaying items:</p>\n<pre>{% load activitysync_extras %}\n{% render_activities activities %}\n</pre>\n<p>The <tt>render_activities</tt> template tag will pass the object list and\n<tt>MEDIA_URL</tt> values to the template <tt>activitysync/activities_tag.html</tt>.\nThe project comes with a sample template that will be used by default, or you\ncan use it as a basis for your own. A second template tag,\n<tt>render_activities_with_date_headers</tt> renders the activity list along with\ndate headers for each unique day encountered.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 250282, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f386352e9fb0fc1adeb12e7e30bb8336", "sha256": "1b0183c5141eeaa10a2f8a1c64b7db3f6d17dcbdfe1270c60ad68a82fc935d14"}, "downloads": -1, "filename": "django-activitysync-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f386352e9fb0fc1adeb12e7e30bb8336", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21865, "upload_time": "2011-02-07T07:58:13", "upload_time_iso_8601": "2011-02-07T07:58:13.068305Z", "url": "https://files.pythonhosted.org/packages/69/70/3c4ac963d16542221c5caaf763c9f785d8a8849fbfda8a7326c2a7e2c325/django-activitysync-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c1a8a656e1416d500ba6041e51379f3f", "sha256": "19482d43b4170785c3fc903006f4c8334c11d3b4b1cab94448054902820e3146"}, "downloads": -1, "filename": "django-activitysync-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c1a8a656e1416d500ba6041e51379f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22221, "upload_time": "2011-02-07T08:04:58", "upload_time_iso_8601": "2011-02-07T08:04:58.188525Z", "url": "https://files.pythonhosted.org/packages/8d/33/287c0e0df345c1544180cddfb7f166970330520113907db5975b01f20163/django-activitysync-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f6cb41d4e5c646576ce86ee97d4e24e1", "sha256": "c6c9630e52af879de53cea55af5d02034c01fb5859b666959138a8bcb66858bf"}, "downloads": -1, "filename": "django-activitysync-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f6cb41d4e5c646576ce86ee97d4e24e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23333, "upload_time": "2011-02-09T07:59:35", "upload_time_iso_8601": "2011-02-09T07:59:35.202650Z", "url": "https://files.pythonhosted.org/packages/ea/dc/495b2674f12a37dc44e824fb11f3533fd15f5ddb6b2019dabe5d4aa74858/django-activitysync-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8a99f94f9274fa88696c9e159c07f415", "sha256": "11bc58a1cf4cc1663f2e60d28279262a28e079fce184d1c506a8e24d1e9eb90e"}, "downloads": -1, "filename": "django-activitysync-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8a99f94f9274fa88696c9e159c07f415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24097, "upload_time": "2011-02-11T09:53:48", "upload_time_iso_8601": "2011-02-11T09:53:48.545365Z", "url": "https://files.pythonhosted.org/packages/f2/59/8ea5339225957254aaa1fccabcfa7f4a18c4d3f63e821f224c413288e68e/django-activitysync-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "19cfd4fbbb8226a1a5ac40ceede56b8f", "sha256": "f5251e5a5a0e975e5fed996170ea815ac7649e301873fca19eb2c61ad615befa"}, "downloads": -1, "filename": "django-activitysync-0.2.1.tar.gz", "has_sig": false, "md5_digest": "19cfd4fbbb8226a1a5ac40ceede56b8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24128, "upload_time": "2011-02-11T10:16:43", "upload_time_iso_8601": "2011-02-11T10:16:43.277460Z", "url": "https://files.pythonhosted.org/packages/a8/52/7aca3261a5369ee38ce55c3197ad61ecc043f5c43f0d29d0f9eb136d0471/django-activitysync-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "13ae9d63650d6d0a65d17c927232e4f3", "sha256": "6a4f5903db7d9aa1b5b6ba26eaa134ed3fec06f323db80b860b5cc944ff7b9ad"}, "downloads": -1, "filename": "django-activitysync-0.2.2.tar.gz", "has_sig": false, "md5_digest": "13ae9d63650d6d0a65d17c927232e4f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22476, "upload_time": "2011-02-14T08:31:45", "upload_time_iso_8601": "2011-02-14T08:31:45.712460Z", "url": "https://files.pythonhosted.org/packages/76/17/77d47fe5a30867970a5c8d2a796313e72c1225f412c549cf267cc34c50b2/django-activitysync-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13ae9d63650d6d0a65d17c927232e4f3", "sha256": "6a4f5903db7d9aa1b5b6ba26eaa134ed3fec06f323db80b860b5cc944ff7b9ad"}, "downloads": -1, "filename": "django-activitysync-0.2.2.tar.gz", "has_sig": false, "md5_digest": "13ae9d63650d6d0a65d17c927232e4f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22476, "upload_time": "2011-02-14T08:31:45", "upload_time_iso_8601": "2011-02-14T08:31:45.712460Z", "url": "https://files.pythonhosted.org/packages/76/17/77d47fe5a30867970a5c8d2a796313e72c1225f412c549cf267cc34c50b2/django-activitysync-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:52 2020"}