{"info": {"author": "Fr\u00e9d\u00e9ric Aoustin", "author_email": "fraoustin@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-easylog\n=============\n\nhelp log management for flask application\n\n\nInstallation\n------------\n\n::\n\n    pip install flask-easylog\n        \nOr\n\n::\n\n    git clone https://github.com/fraoustin/flask-easylog.git\n    cd flask-easylog\n    python setup.py install\n\nYou can load test by\n\n::\n\n    python -m unittest discover -s test\n\nUsage\n-----\n\n::\n\n    from flask import Flask, request, current_app\n    from logging import DEBUG, INFO, ERROR\n\n    from flask_easylog import EasyLog, FMT_ACCESS_LOG, log, SpecificLevelLog, Api, Ui \n\n    app = Flask(__name__)\n    app.secret_key = 'super secret string'\n    app.logger.setLevel(INFO)\n\n    app.logger.info(\"before add EasyLog\")\n\n    EasyLog(app,\n        fmt = FMT_ACCESS_LOG,\n        afterlog = True,\n        beforelog = True)\n    app.register_blueprint(Api(url_prefix='/api'))\n    app.register_blueprint(Ui(url_prefix='/ui'))\n    app.logger.info(\"after add EasyLog\")\n\n    @app.route(\"/\")\n    def hello():\n        current_app.logger.critical(\"critical from hello\")\n        current_app.logger.error(\"error from hello\")\n        current_app.logger.info(\"info from hello\")\n        current_app.logger.debug(\"debug from hello\")\n        return \"Hello World!\"\n\n    @app.route(\"/one\")\n    @log(DEBUG)\n    def one():\n        current_app.logger.critical(\"critical from one\")\n        current_app.logger.error(\"error from one\")\n        current_app.logger.info(\"info from one\")\n        current_app.logger.debug(\"debug from one\")\n        return \"Hello World!\"\n\n    @app.route(\"/two\")\n    @log\n    def two():\n        current_app.logger.critical(\"critical from two\")\n        current_app.logger.error(\"error from two\")\n        current_app.logger.info(\"info from two\")\n        current_app.logger.debug(\"debug from two\")\n        return \"Hello World!\"\n\n    @app.route(\"/three\")\n    @log(ERROR)\n    def three():\n        current_app.logger.critical(\"critical from three\")\n        current_app.logger.error(\"error from three\")\n        current_app.logger.info(\"info from three\")\n        current_app.logger.debug(\"debug from three\")\n        return \"Hello World!\"\n\n    @app.route(\"/four\")\n    def four():\n        current_app.logger.critical(\"critical from four\")\n        current_app.logger.error(\"error from four\")\n        current_app.logger.info(\"info from four\")\n        current_app.logger.debug(\"debug from four\")\n        return \"Hello World!\"\n\n    SpecificLevelLog['four']=ERROR\n\n    if __name__ == \"__main__\":\n        app.logger.info(\"before run\")\n        app.run(host=\"0.0.0.0\", port=8080)\n\nDocumentation\n-------------\n\n`Plugin EasyLog <https://github.com/fraoustin/flask-easylog/tree/master/doc/plugin.rst>`_\n\n`Api EasyLog <https://github.com/fraoustin/flask-easylog/tree/master/doc/api.rst>`_\n\n`Ui EasyLog <https://github.com/fraoustin/flask-easylog/tree/master/doc/ui.rst>`_\n\nFeature\n=======\n\n- manage request too long by Filter and @\n- manage level by rule (change by api)\n- change work of print function\n- test access.log with goaccess\n- add fct for debug if status >= 500 and not mode debug\n\nV. 0.1.0\n========\n\n- init\n- add request_id\n- add info from config and request\n- add info timestamp\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fraoustin/flask-easylog.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flask-easylog", "package_url": "https://pypi.org/project/flask-easylog/", "platform": "any", "project_url": "https://pypi.org/project/flask-easylog/", "project_urls": {"Homepage": "https://github.com/fraoustin/flask-easylog.git"}, "release_url": "https://pypi.org/project/flask-easylog/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "flask_easylog extension for flask application", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"flask-easylog\">\n<h2>Flask-easylog</h2>\n<p>help log management for flask application</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install flask-easylog\n</pre>\n<p>Or</p>\n<pre>git clone https://github.com/fraoustin/flask-easylog.git\ncd flask-easylog\npython setup.py install\n</pre>\n<p>You can load test by</p>\n<pre>python -m unittest discover -s test\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre>from flask import Flask, request, current_app\nfrom logging import DEBUG, INFO, ERROR\n\nfrom flask_easylog import EasyLog, FMT_ACCESS_LOG, log, SpecificLevelLog, Api, Ui\n\napp = Flask(__name__)\napp.secret_key = 'super secret string'\napp.logger.setLevel(INFO)\n\napp.logger.info(\"before add EasyLog\")\n\nEasyLog(app,\n    fmt = FMT_ACCESS_LOG,\n    afterlog = True,\n    beforelog = True)\napp.register_blueprint(Api(url_prefix='/api'))\napp.register_blueprint(Ui(url_prefix='/ui'))\napp.logger.info(\"after add EasyLog\")\n\n@app.route(\"/\")\ndef hello():\n    current_app.logger.critical(\"critical from hello\")\n    current_app.logger.error(\"error from hello\")\n    current_app.logger.info(\"info from hello\")\n    current_app.logger.debug(\"debug from hello\")\n    return \"Hello World!\"\n\n@app.route(\"/one\")\n@log(DEBUG)\ndef one():\n    current_app.logger.critical(\"critical from one\")\n    current_app.logger.error(\"error from one\")\n    current_app.logger.info(\"info from one\")\n    current_app.logger.debug(\"debug from one\")\n    return \"Hello World!\"\n\n@app.route(\"/two\")\n@log\ndef two():\n    current_app.logger.critical(\"critical from two\")\n    current_app.logger.error(\"error from two\")\n    current_app.logger.info(\"info from two\")\n    current_app.logger.debug(\"debug from two\")\n    return \"Hello World!\"\n\n@app.route(\"/three\")\n@log(ERROR)\ndef three():\n    current_app.logger.critical(\"critical from three\")\n    current_app.logger.error(\"error from three\")\n    current_app.logger.info(\"info from three\")\n    current_app.logger.debug(\"debug from three\")\n    return \"Hello World!\"\n\n@app.route(\"/four\")\ndef four():\n    current_app.logger.critical(\"critical from four\")\n    current_app.logger.error(\"error from four\")\n    current_app.logger.info(\"info from four\")\n    current_app.logger.debug(\"debug from four\")\n    return \"Hello World!\"\n\nSpecificLevelLog['four']=ERROR\n\nif __name__ == \"__main__\":\n    app.logger.info(\"before run\")\n    app.run(host=\"0.0.0.0\", port=8080)\n</pre>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p><a href=\"https://github.com/fraoustin/flask-easylog/tree/master/doc/plugin.rst\" rel=\"nofollow\">Plugin EasyLog</a></p>\n<p><a href=\"https://github.com/fraoustin/flask-easylog/tree/master/doc/api.rst\" rel=\"nofollow\">Api EasyLog</a></p>\n<p><a href=\"https://github.com/fraoustin/flask-easylog/tree/master/doc/ui.rst\" rel=\"nofollow\">Ui EasyLog</a></p>\n</div>\n</div>\n<div id=\"feature\">\n<h2>Feature</h2>\n<ul>\n<li>manage request too long by Filter and @</li>\n<li>manage level by rule (change by api)</li>\n<li>change work of print function</li>\n<li>test access.log with goaccess</li>\n<li>add fct for debug if status &gt;= 500 and not mode debug</li>\n</ul>\n</div>\n<div id=\"v-0-1-0\">\n<h2>V. 0.1.0</h2>\n<ul>\n<li>init</li>\n<li>add request_id</li>\n<li>add info from config and request</li>\n<li>add info timestamp</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5726552, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "16875cb54de52e27af2000a5f4ed0039", "sha256": "83348d7e66749a237a6929b95cdb32a335fc2c973e6c4e349d448436b558be7b"}, "downloads": -1, "filename": "flask-easylog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "16875cb54de52e27af2000a5f4ed0039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11344, "upload_time": "2019-08-25T09:19:19", "upload_time_iso_8601": "2019-08-25T09:19:19.670761Z", "url": "https://files.pythonhosted.org/packages/23/5c/4bb04c41e8f9bb3124b29b38309290769420abd82cef47fd0843102d9b22/flask-easylog-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16875cb54de52e27af2000a5f4ed0039", "sha256": "83348d7e66749a237a6929b95cdb32a335fc2c973e6c4e349d448436b558be7b"}, "downloads": -1, "filename": "flask-easylog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "16875cb54de52e27af2000a5f4ed0039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11344, "upload_time": "2019-08-25T09:19:19", "upload_time_iso_8601": "2019-08-25T09:19:19.670761Z", "url": "https://files.pythonhosted.org/packages/23/5c/4bb04c41e8f9bb3124b29b38309290769420abd82cef47fd0843102d9b22/flask-easylog-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:56 2020"}