{"info": {"author": "Aivars Kalvans", "author_email": "aivars.kalvans@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: C++", "Programming Language :: Python :: 3"], "description": "=============\nTuxedo-Python\n=============\n\nPython3 bindings for writing Oracle Tuxedo clients and servers.\n\n.. image:: https://travis-ci.org/aivarsk/tuxedo-python.svg?branch=master\n    :target: https://travis-ci.org/aivarsk/tuxedo-python\n\nWhy?\n----\n\nI'm a fan of the way `tuxmodule <https://github.com/henschkowski/tuxmodule/blob/master/README.md>`_ enables you to interact with Oracle Tuxedo. Unfortunately, it's out-dated and somehow limited. So I cloned tuxmodule and started to clean up compiler warnings and work on some features I had in mind:\n\n- A multi-threaded server\n- Support nested FML32 buffers and more types\n- Support newest Oracle Tuxedo features like ``tpadvertisex()`` and ``tpappthrinit()``\n- Receive response even when the service returns TPFAIL (instead of exception)\n\nBut I realized that's too much of C for me, so I decided to write my own Python module for Oracle Tuxedo in C++ and `pybind11 <https://github.com/pybind/pybind11>`_ focusing on the parts I find most important first.\n\nGeneral\n-------\n\n``tuxedo`` module supports only ``STRING`` and ``FML32`` buffer types at the moment.\n\n``STRING`` is mapped to/from Python ``str`` type.\n\n``FML32`` is mapped to/from Python ``dict`` type with field names (``str``) as keys and lists (``list``) of different types (``int``, ``str``, ``float`` or ``dict``) as values. ``dict`` to ``FML32`` conversion also treats types ``int``, ``str``, ``float`` or ``dict`` as lists with a single element:\n\n.. code:: python\n\n  {'TA_CLASS': 'Single value'}\n\nconverted to ``FML32`` and then back to ``dict`` becomes\n\n.. code:: python\n\n  {'TA_CLASS': ['Single value']}\n\n\nAll XATMI functions that take buffer and length arguments in C take only buffer argument in Python.\n\nCalling a service\n-----------------\n\n``tuxedo.tpcall()`` and ``tuxedo.tpgetrply()`` functions return a tuple with 3 elements or throw an exception when no data is received. This is the part I believe ``tuxmodule`` got wrong: a service may return a response\nboth when it succeeds (``TPSUCCESS``) and fails (``TPFAIL``) and often the failure response contains some important information.\n\n- 0 or ``TPESVCFAIL``\n- ``tpurcode`` (the second argument to ``tpreturn``)\n- data buffer\n\n.. code:: python\n\n  rval, rcode, data = t.tpcall('.TMIB', {'TA_CLASS': 'T_SVCGRP', 'TA_OPERATION': 'GET'})\n  if rval == 0:\n    # Service returned TPSUCCESS\n  else:\n    # rval == tuxedo.TPESVCFAIL\n    # Service returned TPFAIL \n\nWriting servers\n---------------\n\nTuxedo servers are written as Python classes. ``tpsvrinit`` method of object will be called when Tuxedo calls ``tpsvrinit(3c)`` function and it must return 0 on success or -1 on error. A common task for ``tpsvrinit`` is to advertise services the server provides by calling ``tuxedo.tpadvertise()`` with a service name. A method with the same name must exist. ``tpsvrdone``, ``tpsvrthrinit`` and ``tpsvrthrdone`` will be called when Tuxedo calls corresponding functions. All of these 4 methods are optional and ``tuxedo`` module always calls ``tpopen()`` and ``tpclose()`` functions before calling user-supplied methods.\n\nEach service method receives a single argument with incoming buffer and service must end with either call to ``tuxedo.tpreturn()`` or ``tuxedo.tpforward()``. Unlike in C ``tuxedo.tpreturn()`` and ``tuxedo.tpforward()`` do not perform ``longjmp`` but set up arguments for those calls once service method will return. Following two code fragments are equivalent but I believe the first one is less error-prone.\n\n.. code:: python\n\n      def ECHO(self, args):\n          return t.tpreturn(t.TPSUCCESS, 0, args)\n\n.. code:: python\n\n      def ECHO(self, args):\n          t.tpreturn(t.TPSUCCESS, 0, args)\n\n\nAfter that ``tuxedo.run()`` must be called with an instance of the class and command-line arguments to start Tuxedo server's main loop.\n\n.. code:: python\n\n  #!/usr/bin/env python3\n  import sys\n  import tuxedo as t\n\n  class Server:\n      def tpsvrinit(self, args):\n          t.tpadvertise('ECHO')\n          return 0\n\n      def tpsvrthrinit(self, args):\n          return 0\n\n      def tpsvrthrdone(self):\n          pass\n\n      def tpsvrdone(self):\n          pass\n\n      def ECHO(self, args):\n          return t.tpreturn(t.TPSUCCESS, 0, args)\n\n  if __name__ == '__main__':\n      t.run(Server(), sys.argv)\n\nUBBCONFIG\n---------\n\nTo use Python code as Tuxedo server the file itself must be executable (``chmod +x *.py``) and it must contain shebang line with Python:\n\n.. code:: python\n\n  #!/usr/bin/env python3\n\nAfter that you can use the ``*.py`` file as server executable in ``UBBCONFIG``:\n\n.. code::\n\n  \"api.py\" SRVGRP=GROUP1 SRVID=20 RQADDR=\"api\" MIN=1 SECONDARYRQ=Y REPLYQ=Y\n\nWriting clients\n---------------\n\nNothing special is needed to implement Tuxedo clients, just import the module and start calling XATMI functions.\n\n.. code:: python\n\n  #!/usr/bin/env python3\n  import sys\n  import tuxedo as t\n\n  rval, rcode, data = t.tpcall('.TMIB', {'TA_CLASS': 'T_SVCGRP', 'TA_OPERATION': 'GET'})\n\nUsing Oracle Database\n---------------------\n\nYou can access Oracle database with ``cx_Oracle`` library and local transactions by just following the documentation of ``cx_Oracle``.\n\nIf you want a server written in Python to participate in the global transaction first specify a resource manager name to use (similar to ``buidserver``). ``tuxedo`` module currently supports:\n\n- NONE default \"null\" resource manager\n- Oracle_XA for Oracle Database\n\n.. code:: python\n\n    t.run(Server(), sys.argv, 'Oracle_XA')\n\n\nAfter that you should create a database connection in ``tpsvrinit`` by using ``tuxedo.xaoSvcCtx()`` function:\n\n.. code:: python\n\n    def tpsvrinit(self, args):\n        self.db = cx_Oracle.connect(handle=t.xaoSvcCtx())\n\nThat is the only difference from standard ``cx_Oracle`` use case. Here is a complete example for a single-threaded server:\n\n.. code:: python\n\n  #!/usr/bin/env python3\n\n  import sys\n  import tuxedo as t\n  import cx_Oracle\n\n  class Server:\n      def tpsvrinit(self, args):\n          t.userlog('Server startup')\n          self.db = cx_Oracle.connect(handle=t.xaoSvcCtx())\n          t.tpadvertise('DB')\n          return 0\n\n      def DB(self, args):\n          dbc = self.db.cursor()\n          dbc.execute('insert into pymsg(msg) values (:1)', ['Hello from python'])\n          return t.tpreturn(t.TPSUCCESS, 0, args)\n\n  if __name__ == '__main__':\n      t.run(Server(), sys.argv, 'Oracle_XA')\n\nFor a multi-threaded server new connections for each thread must be created in ``tpsvrthrinit()`` (instead of ``tpsvrinit()``) and stored in thread-local storage of ``threading.local()``.\n\nServer must belong to a group with ``Oracle_XA`` as resource manager, something like this in ``UBBCONFIG``\n\n.. code::\n\n  *GROUPS\n  GROUP2 LMID=tuxapp GRPNO=2 TMSNAME=ORACLETMS OPENINFO=\"Oracle_XA:Oracle_XA+Objects=true+Acc=P/scott/tiger+SqlNet=ORCL+SesTm=60+LogDir=/tmp+Threads=true\"\n  *SERVERS\n  \"db.py\" SRVGRP=GROUP2 SRVID=2 CLOPT=\"-A\"\n\n\ntpadmcall\n---------\n\n``tpadmcall`` is made available for application administration even while application is down. It also has no service call overhead compared to calling ``.TMIB`` service. The Python function looks and behaves similary to ``tpcall`` except ``rcode`` (2nd element in result tuple) is always a constant 0.\n\n.. code:: python\n\n  #!/usr/bin/env python3\n  import tuxedo as t\n\n  rval, _, data = t.tpadmcall({'TA_CLASS': 'T_DOMAIN', 'TA_OPERATION': 'GET'})\n\n\nGlobal transactions\n-------------------\n\nTransactions can be started and committed or aborted by using ``tuxedo.tpbegin()``, ``tuxedo.tpcommit()``, ``tuxedo.tpabort()``. These functions take the same arguments as their corresponding C functions.\n\nDemo\n----\n\n``demo/`` folder has some proof-of-concept code:\n\n- ``client.py`` Oracle Tuxedo client\n- ``api.py`` HTTP+JSON server running inside Oracle Tuxedo server\n- ``ecb.py`` HTTP+XML client running inside Oracle Tuxedo server\n- ``mem.py`` multi-threaded in-memory cache\n- ``db.py`` Access Oracle Database using cx_Oracle module within global transaction\n\nTODO\n----\n\n- Implementing few more useful APIs\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aivarsk/tuxedo-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tuxedo", "package_url": "https://pypi.org/project/tuxedo/", "platform": "", "project_url": "https://pypi.org/project/tuxedo/", "project_urls": {"Homepage": "https://github.com/aivarsk/tuxedo-python"}, "release_url": "https://pypi.org/project/tuxedo/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Python3 bindings for writing Oracle Tuxedo clients and servers", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python3 bindings for writing Oracle Tuxedo clients and servers.</p>\n<a href=\"https://travis-ci.org/aivarsk/tuxedo-python\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/aivarsk/tuxedo-python.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc61ce0cb32452729546792b8086f0cf7ed0f200/68747470733a2f2f7472617669732d63692e6f72672f6169766172736b2f74757865646f2d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>I\u2019m a fan of the way <a href=\"https://github.com/henschkowski/tuxmodule/blob/master/README.md\" rel=\"nofollow\">tuxmodule</a> enables you to interact with Oracle Tuxedo. Unfortunately, it\u2019s out-dated and somehow limited. So I cloned tuxmodule and started to clean up compiler warnings and work on some features I had in mind:</p>\n<ul>\n<li>A multi-threaded server</li>\n<li>Support nested FML32 buffers and more types</li>\n<li>Support newest Oracle Tuxedo features like <tt>tpadvertisex()</tt> and <tt>tpappthrinit()</tt></li>\n<li>Receive response even when the service returns TPFAIL (instead of exception)</li>\n</ul>\n<p>But I realized that\u2019s too much of C for me, so I decided to write my own Python module for Oracle Tuxedo in C++ and <a href=\"https://github.com/pybind/pybind11\" rel=\"nofollow\">pybind11</a> focusing on the parts I find most important first.</p>\n</div>\n<div id=\"general\">\n<h2>General</h2>\n<p><tt>tuxedo</tt> module supports only <tt>STRING</tt> and <tt>FML32</tt> buffer types at the moment.</p>\n<p><tt>STRING</tt> is mapped to/from Python <tt>str</tt> type.</p>\n<p><tt>FML32</tt> is mapped to/from Python <tt>dict</tt> type with field names (<tt>str</tt>) as keys and lists (<tt>list</tt>) of different types (<tt>int</tt>, <tt>str</tt>, <tt>float</tt> or <tt>dict</tt>) as values. <tt>dict</tt> to <tt>FML32</tt> conversion also treats types <tt>int</tt>, <tt>str</tt>, <tt>float</tt> or <tt>dict</tt> as lists with a single element:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'TA_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'Single value'</span><span class=\"p\">}</span>\n</pre>\n<p>converted to <tt>FML32</tt> and then back to <tt>dict</tt> becomes</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'TA_CLASS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Single value'</span><span class=\"p\">]}</span>\n</pre>\n<p>All XATMI functions that take buffer and length arguments in C take only buffer argument in Python.</p>\n</div>\n<div id=\"calling-a-service\">\n<h2>Calling a service</h2>\n<p><tt>tuxedo.tpcall()</tt> and <tt>tuxedo.tpgetrply()</tt> functions return a tuple with 3 elements or throw an exception when no data is received. This is the part I believe <tt>tuxmodule</tt> got wrong: a service may return a response\nboth when it succeeds (<tt>TPSUCCESS</tt>) and fails (<tt>TPFAIL</tt>) and often the failure response contains some important information.</p>\n<ul>\n<li>0 or <tt>TPESVCFAIL</tt></li>\n<li><tt>tpurcode</tt> (the second argument to <tt>tpreturn</tt>)</li>\n<li>data buffer</li>\n</ul>\n<pre><span class=\"n\">rval</span><span class=\"p\">,</span> <span class=\"n\">rcode</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpcall</span><span class=\"p\">(</span><span class=\"s1\">'.TMIB'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'TA_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'T_SVCGRP'</span><span class=\"p\">,</span> <span class=\"s1\">'TA_OPERATION'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n<span class=\"k\">if</span> <span class=\"n\">rval</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Service returned TPSUCCESS</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"c1\"># rval == tuxedo.TPESVCFAIL</span>\n  <span class=\"c1\"># Service returned TPFAIL</span>\n</pre>\n</div>\n<div id=\"writing-servers\">\n<h2>Writing servers</h2>\n<p>Tuxedo servers are written as Python classes. <tt>tpsvrinit</tt> method of object will be called when Tuxedo calls <tt>tpsvrinit(3c)</tt> function and it must return 0 on success or -1 on error. A common task for <tt>tpsvrinit</tt> is to advertise services the server provides by calling <tt>tuxedo.tpadvertise()</tt> with a service name. A method with the same name must exist. <tt>tpsvrdone</tt>, <tt>tpsvrthrinit</tt> and <tt>tpsvrthrdone</tt> will be called when Tuxedo calls corresponding functions. All of these 4 methods are optional and <tt>tuxedo</tt> module always calls <tt>tpopen()</tt> and <tt>tpclose()</tt> functions before calling user-supplied methods.</p>\n<p>Each service method receives a single argument with incoming buffer and service must end with either call to <tt>tuxedo.tpreturn()</tt> or <tt>tuxedo.tpforward()</tt>. Unlike in C <tt>tuxedo.tpreturn()</tt> and <tt>tuxedo.tpforward()</tt> do not perform <tt>longjmp</tt> but set up arguments for those calls once service method will return. Following two code fragments are equivalent but I believe the first one is less error-prone.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">ECHO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpreturn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">TPSUCCESS</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">ECHO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpreturn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">TPSUCCESS</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>After that <tt>tuxedo.run()</tt> must be called with an instance of the class and command-line arguments to start Tuxedo server\u2019s main loop.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tuxedo</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Server</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tpsvrinit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpadvertise</span><span class=\"p\">(</span><span class=\"s1\">'ECHO'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tpsvrthrinit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tpsvrthrdone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tpsvrdone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ECHO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpreturn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">TPSUCCESS</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">Server</span><span class=\"p\">(),</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"ubbconfig\">\n<h2>UBBCONFIG</h2>\n<p>To use Python code as Tuxedo server the file itself must be executable (<tt>chmod +x *.py</tt>) and it must contain shebang line with Python:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n</pre>\n<p>After that you can use the <tt>*.py</tt> file as server executable in <tt>UBBCONFIG</tt>:</p>\n<pre>\"api.py\" SRVGRP=GROUP1 SRVID=20 RQADDR=\"api\" MIN=1 SECONDARYRQ=Y REPLYQ=Y\n</pre>\n</div>\n<div id=\"writing-clients\">\n<h2>Writing clients</h2>\n<p>Nothing special is needed to implement Tuxedo clients, just import the module and start calling XATMI functions.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tuxedo</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n\n<span class=\"n\">rval</span><span class=\"p\">,</span> <span class=\"n\">rcode</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpcall</span><span class=\"p\">(</span><span class=\"s1\">'.TMIB'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'TA_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'T_SVCGRP'</span><span class=\"p\">,</span> <span class=\"s1\">'TA_OPERATION'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"using-oracle-database\">\n<h2>Using Oracle Database</h2>\n<p>You can access Oracle database with <tt>cx_Oracle</tt> library and local transactions by just following the documentation of <tt>cx_Oracle</tt>.</p>\n<p>If you want a server written in Python to participate in the global transaction first specify a resource manager name to use (similar to <tt>buidserver</tt>). <tt>tuxedo</tt> module currently supports:</p>\n<ul>\n<li>NONE default \u201cnull\u201d resource manager</li>\n<li>Oracle_XA for Oracle Database</li>\n</ul>\n<pre><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">Server</span><span class=\"p\">(),</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s1\">'Oracle_XA'</span><span class=\"p\">)</span>\n</pre>\n<p>After that you should create a database connection in <tt>tpsvrinit</tt> by using <tt>tuxedo.xaoSvcCtx()</tt> function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">tpsvrinit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">cx_Oracle</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">xaoSvcCtx</span><span class=\"p\">())</span>\n</pre>\n<p>That is the only difference from standard <tt>cx_Oracle</tt> use case. Here is a complete example for a single-threaded server:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tuxedo</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cx_Oracle</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Server</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tpsvrinit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">userlog</span><span class=\"p\">(</span><span class=\"s1\">'Server startup'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">cx_Oracle</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">xaoSvcCtx</span><span class=\"p\">())</span>\n        <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpadvertise</span><span class=\"p\">(</span><span class=\"s1\">'DB'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">DB</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"n\">dbc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"n\">dbc</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'insert into pymsg(msg) values (:1)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Hello from python'</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpreturn</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">TPSUCCESS</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">Server</span><span class=\"p\">(),</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">,</span> <span class=\"s1\">'Oracle_XA'</span><span class=\"p\">)</span>\n</pre>\n<p>For a multi-threaded server new connections for each thread must be created in <tt>tpsvrthrinit()</tt> (instead of <tt>tpsvrinit()</tt>) and stored in thread-local storage of <tt>threading.local()</tt>.</p>\n<p>Server must belong to a group with <tt>Oracle_XA</tt> as resource manager, something like this in <tt>UBBCONFIG</tt></p>\n<pre>*GROUPS\nGROUP2 LMID=tuxapp GRPNO=2 TMSNAME=ORACLETMS OPENINFO=\"Oracle_XA:Oracle_XA+Objects=true+Acc=P/scott/tiger+SqlNet=ORCL+SesTm=60+LogDir=/tmp+Threads=true\"\n*SERVERS\n\"db.py\" SRVGRP=GROUP2 SRVID=2 CLOPT=\"-A\"\n</pre>\n</div>\n<div id=\"tpadmcall\">\n<h2>tpadmcall</h2>\n<p><tt>tpadmcall</tt> is made available for application administration even while application is down. It also has no service call overhead compared to calling <tt>.TMIB</tt> service. The Python function looks and behaves similary to <tt>tpcall</tt> except <tt>rcode</tt> (2nd element in result tuple) is always a constant 0.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tuxedo</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n\n<span class=\"n\">rval</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tpadmcall</span><span class=\"p\">({</span><span class=\"s1\">'TA_CLASS'</span><span class=\"p\">:</span> <span class=\"s1\">'T_DOMAIN'</span><span class=\"p\">,</span> <span class=\"s1\">'TA_OPERATION'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"global-transactions\">\n<h2>Global transactions</h2>\n<p>Transactions can be started and committed or aborted by using <tt>tuxedo.tpbegin()</tt>, <tt>tuxedo.tpcommit()</tt>, <tt>tuxedo.tpabort()</tt>. These functions take the same arguments as their corresponding C functions.</p>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<p><tt>demo/</tt> folder has some proof-of-concept code:</p>\n<ul>\n<li><tt>client.py</tt> Oracle Tuxedo client</li>\n<li><tt>api.py</tt> HTTP+JSON server running inside Oracle Tuxedo server</li>\n<li><tt>ecb.py</tt> HTTP+XML client running inside Oracle Tuxedo server</li>\n<li><tt>mem.py</tt> multi-threaded in-memory cache</li>\n<li><tt>db.py</tt> Access Oracle Database using cx_Oracle module within global transaction</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Implementing few more useful APIs</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7131905, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e892837d0f70217d2e04f1e1abe7772c", "sha256": "c9f5e091a9f885f51d5345e52ab81b9250c27ca8e32faaa46c1af8a5201a351c"}, "downloads": -1, "filename": "tuxedo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e892837d0f70217d2e04f1e1abe7772c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6800, "upload_time": "2019-11-04T18:55:04", "upload_time_iso_8601": "2019-11-04T18:55:04.972423Z", "url": "https://files.pythonhosted.org/packages/ea/93/e26bc2cfb031c0ce4404ab1799acc6bac2f2736e35e0b3998b0b15ff0e42/tuxedo-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7e51b52731922819f097899031497eb8", "sha256": "4e63cd5d7f9d5c34ec74faa668a3621143d5fa0ce53d81677e5d0622bb6cd59f"}, "downloads": -1, "filename": "tuxedo-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7e51b52731922819f097899031497eb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9088, "upload_time": "2019-11-04T23:39:00", "upload_time_iso_8601": "2019-11-04T23:39:00.321581Z", "url": "https://files.pythonhosted.org/packages/c4/e8/13956af568d95cf539226e96f7724bc64e5243b1f5d2972f14f79d4770dc/tuxedo-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8c68ff356553b6631ae6a48c17e52f8b", "sha256": "6c60cf88bceb5c468a221e31c9dfecb2e44f0013bb9d0eb18afa9229d89f6384"}, "downloads": -1, "filename": "tuxedo-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8c68ff356553b6631ae6a48c17e52f8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9433, "upload_time": "2019-11-05T00:14:38", "upload_time_iso_8601": "2019-11-05T00:14:38.628235Z", "url": "https://files.pythonhosted.org/packages/b8/7a/8d35c1b7b4496fd49592749dafce94cdcaf81b42db8110bceccb406fdb73/tuxedo-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "bb6cc68969fb9f096930bd84ced4b078", "sha256": "3d4c7897a9d11853b6a4e761a65929e880bb359f06bb750aeedd9f9974343b42"}, "downloads": -1, "filename": "tuxedo-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bb6cc68969fb9f096930bd84ced4b078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10257, "upload_time": "2019-11-05T11:31:34", "upload_time_iso_8601": "2019-11-05T11:31:34.991697Z", "url": "https://files.pythonhosted.org/packages/f3/21/490f0225be759fd8214c2f84e3f0d89cd675c269f62adc62e26a6ce8fbb4/tuxedo-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "969d6037b453ac14f46bbac8481d43b0", "sha256": "f2ce92208f5c0048ecc42b4b00ba9d7cc287a989f30b1264c8d4f3e67b44ce47"}, "downloads": -1, "filename": "tuxedo-0.0.5.tar.gz", "has_sig": false, "md5_digest": "969d6037b453ac14f46bbac8481d43b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13298, "upload_time": "2019-11-07T20:47:44", "upload_time_iso_8601": "2019-11-07T20:47:44.741283Z", "url": "https://files.pythonhosted.org/packages/17/1e/8f2a0d90acafc77f83ffcadad6833fad2e7b5f9cecfbfc763bea159f3ec3/tuxedo-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e6cb6b34a83cbcb3f542f0bb72528d58", "sha256": "0c533690c1b22cb6a16fffb505a6419bd926884a2f2a4921c7f9457e10070d50"}, "downloads": -1, "filename": "tuxedo-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e6cb6b34a83cbcb3f542f0bb72528d58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13799, "upload_time": "2020-04-29T20:35:00", "upload_time_iso_8601": "2020-04-29T20:35:00.759286Z", "url": "https://files.pythonhosted.org/packages/22/70/41cafe51c67a8ebec9c74317e2eee73893dc99a89589884a660bef1a07d8/tuxedo-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6cb6b34a83cbcb3f542f0bb72528d58", "sha256": "0c533690c1b22cb6a16fffb505a6419bd926884a2f2a4921c7f9457e10070d50"}, "downloads": -1, "filename": "tuxedo-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e6cb6b34a83cbcb3f542f0bb72528d58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13799, "upload_time": "2020-04-29T20:35:00", "upload_time_iso_8601": "2020-04-29T20:35:00.759286Z", "url": "https://files.pythonhosted.org/packages/22/70/41cafe51c67a8ebec9c74317e2eee73893dc99a89589884a660bef1a07d8/tuxedo-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:25 2020"}