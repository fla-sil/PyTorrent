{"info": {"author": "Sam Clements", "author_email": "sam@borntyping.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Terminals", "Topic :: Utilities"], "description": "\n# Log formatting with colors!\n\n[![](https://img.shields.io/pypi/v/colorlog.svg)](https://warehouse.python.org/project/colorlog/)\n[![](https://img.shields.io/pypi/l/colorlog.svg)](https://warehouse.python.org/project/colorlog/)\n[![](https://img.shields.io/travis/borntyping/python-colorlog/master.svg)](https://travis-ci.org/borntyping/python-colorlog)\n\n`colorlog.ColoredFormatter` is a formatter for use with Python's `logging`\nmodule that outputs records using terminal colors.\n\n* [Source on GitHub](https://github.com/borntyping/python-colorlog)\n* [Packages on PyPI](https://pypi.python.org/pypi/colorlog)\n* [Builds on Travis CI](https://travis-ci.org/borntyping/python-colorlog)\n\nInstallation\n------------\n\nInstall from PyPI with:\n\n```bash\npip install colorlog\n```\n\nSeveral Linux distributions provide official packages ([Debian], [Gentoo],\n[OpenSuse] and [Ubuntu]), and others have user provided packages ([Arch AUR],\n[BSD ports], [Conda], [Fedora packaging scripts]).\n\nUsage\n-----\n\n```python\nimport colorlog\n\nhandler = colorlog.StreamHandler()\nhandler.setFormatter(colorlog.ColoredFormatter(\n\t'%(log_color)s%(levelname)s:%(name)s:%(message)s'))\n\nlogger = colorlog.getLogger('example')\nlogger.addHandler(handler)\n```\n\nThe `ColoredFormatter` class takes several arguments:\n\n- `format`: The format string used to output the message (required).\n- `datefmt`: An optional date format passed to the base class. See [`logging.Formatter`][Formatter].\n- `reset`: Implicitly adds a color reset code to the message output, unless the output already ends with one. Defaults to `True`.\n- `log_colors`: A mapping of record level names to color names. The defaults can be found in `colorlog.default_log_colors`, or the below example.\n- `secondary_log_colors`: A mapping of names to `log_colors` style mappings, defining additional colors that can be used in format strings. See below for an example.\n- `style`: Available on Python 3.2 and above. See [`logging.Formatter`][Formatter].\n\nColor escape codes can be selected based on the log records level, by adding\nparameters to the format string:\n\n- `log_color`: Return the color associated with the records level.\n- `<name>_log_color`: Return another color based on the records level if the formatter has secondary colors configured (see `secondary_log_colors` below).\n\nMultiple escape codes can be used at once by joining them with commas when\nconfiguring the color for a log level (but can't be used directly in the format\nstring). For example, `black,bg_white` would use the escape codes for black\ntext on a white background.\n\nThe following escape codes are made available for use in the format string:\n\n- `{color}`, `fg_{color}`, `bg_{color}`: Foreground and background colors.\n- `bold`, `bold_{color}`, `fg_bold_{color}`, `bg_bold_{color}`: Bold/bright colors.\n- `thin`, `thin_{color}`, `fg_thin_{color}`: Thin colors (terminal dependent).\n- `reset`: Clear all formatting (both foreground and background colors).\n\nThe available color names are `black`, `red`, `green`, `yellow`, `blue`,\n`purple`, `cyan` and `white`.\n\nExamples\n--------\n\n![Example output](doc/example.png)\n\nThe following code creates a `ColoredFormatter` for use in a logging setup,\nusing the default values for each argument.\n\n```python\nfrom colorlog import ColoredFormatter\n\nformatter = ColoredFormatter(\n\t\"%(log_color)s%(levelname)-8s%(reset)s %(blue)s%(message)s\",\n\tdatefmt=None,\n\treset=True,\n\tlog_colors={\n\t\t'DEBUG':    'cyan',\n\t\t'INFO':     'green',\n\t\t'WARNING':  'yellow',\n\t\t'ERROR':    'red',\n\t\t'CRITICAL': 'red,bg_white',\n\t},\n\tsecondary_log_colors={},\n\tstyle='%'\n)\n```\n\nUsing `secondary_log_colors`\n------------------------------\n\nSecondary log colors are a way to have more than one color that is selected\nbased on the log level. Each key in `secondary_log_colors` adds an attribute\nthat can be used in format strings (`message` becomes `message_log_color`), and\nhas a corresponding value that is identical in format to the `log_colors`\nargument.\n\nThe following example highlights the level name using the default log colors,\nand highlights the message in red for `error` and `critical` level log messages.\n\n```python\nfrom colorlog import ColoredFormatter\n\nformatter = ColoredFormatter(\n\t\"%(log_color)s%(levelname)-8s%(reset)s %(message_log_color)s%(message)s\",\n\tsecondary_log_colors={\n\t\t'message': {\n\t\t\t'ERROR':    'red',\n\t\t\t'CRITICAL': 'red'\n\t\t}\n\t}\n)\n```\n\nWith [`dictConfig`][dictConfig]\n-------------------------------\n\n```python\nlogging.config.dictConfig({\n\t'formatters': {\n\t\t'colored': {\n\t\t\t'()': 'colorlog.ColoredFormatter',\n\t\t\t'format': \"%(log_color)s%(levelname)-8s%(reset)s %(blue)s%(message)s\"\n\t\t}\n\t}\n})\n```\n\nA full example dictionary can be found in `tests/test_colorlog.py`.\n\nWith [`fileConfig`][fileConfig]\n-------------------------------\n\n```ini\n...\n\n[formatters]\nkeys=color\n\n[formatter_color]\nclass=colorlog.ColoredFormatter\nformat=%(log_color)s%(levelname)-8s%(reset)s %(bg_blue)s[%(name)s]%(reset)s %(message)s from fileConfig\ndatefmt=%m-%d %H:%M:%S\n```\n\nAn instance of ColoredFormatter created with those arguments will then be used\nby any handlers that are configured to use the `color` formatter.\n\nA full example configuration can be found in `tests/test_config.ini`.\n\nWith custom log levels\n----------------------\n\nColoredFormatter will work with custom log levels added with\n[`logging.addLevelName`][addLevelName]:\n\n```python\nimport logging, colorlog\nTRACE = 5\nlogging.addLevelName(TRACE, 'TRACE')\nformatter = colorlog.ColoredFormatter(log_colors={'TRACE': 'yellow'})\nhandler = logging.StreamHandler()\nhandler.setFormatter(formatter)\nlogger = logging.getLogger('example')\nlogger.addHandler(handler)\nlogger.setLevel('TRACE')\nlogger.log(TRACE, 'a message using a custom level')\n```\n\nCompatibility\n=============\n\ncolorlog works on Python 2.6 and above, including Python 3.\n\nOn Windows, [colorama] is required for `colorlog` to work properly.  It will\nautomatically be included when installing `colorlog` on windows.\n\nTests\n=====\n\nTests similar to the above examples are found in `tests/test_colorlog.py`.\n\n[`tox`][tox] will run the tests under all compatible python versions.\n\n\nProjects using colorlog\n-----------------------\n\n- [Counterparty]\n- [Errbot]\n- [Pythran]\n- [zenlog]\n\nLicence\n-------\n\nCopyright (c) 2012 Sam Clements <sam@borntyping.co.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[dictConfig]: http://docs.python.org/3/library/logging.config.html#logging.config.dictConfig\n[fileConfig]: http://docs.python.org/3/library/logging.config.html#logging.config.fileConfig\n[addLevelName]: https://docs.python.org/3/library/logging.html#logging.addLevelNam[addLevelN]e\n[Formatter]: http://docs.python.org/3/library/logging.html#logging.Formatter\n[tox]: http://tox.readthedocs.org/\n[Arch AUR]: https://aur.archlinux.org/packages/python-colorlog/\n[BSD ports]: https://www.freshports.org/devel/py-colorlog/\n[colorama]: https://pypi.python.org/pypi/colorama\n[Conda]: https://anaconda.org/auto/colorlog\n[Counterparty]: https://counterparty.io/\n[Debian]: https://packages.debian.org/jessie/python-colorlog\n[Errbot]: http://errbot.io/\n[Fedora packaging scripts]: https://github.com/bartv/python-colorlog\n[Gentoo]: https://packages.gentoo.org/packages/dev-python/colorlog\n[OpenSuse]: http://rpm.pbone.net/index.php3?stat=3&search=python-colorlog&srodzaj=3\n[Pythran]: http://pythonhosted.org/pythran/DEVGUIDE.html\n[Ubuntu]: https://launchpad.net/python-colorlog\n[zenlog]: https://github.com/ManufacturaInd/python-zenlog\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/borntyping/python-colorlog", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "colorlog-ab", "package_url": "https://pypi.org/project/colorlog-ab/", "platform": "", "project_url": "https://pypi.org/project/colorlog-ab/", "project_urls": {"Homepage": "https://github.com/borntyping/python-colorlog"}, "release_url": "https://pypi.org/project/colorlog-ab/4.1.0/", "requires_dist": ["colorama ; sys_platform==\"win32\""], "requires_python": "", "summary": "Log formatting with colors!", "version": "4.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Log formatting with colors!</h1>\n<p><a href=\"https://warehouse.python.org/project/colorlog/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f58fd92144e31c10b49a2b475d95cb2b25628cda/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6c6f726c6f672e737667\"></a>\n<a href=\"https://warehouse.python.org/project/colorlog/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/507e714b652141c5d6cab86a3b4a843b2e59b728/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636f6c6f726c6f672e737667\"></a>\n<a href=\"https://travis-ci.org/borntyping/python-colorlog\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac83a325f916345363f4942fc11a363993d4eacf/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f626f726e747970696e672f707974686f6e2d636f6c6f726c6f672f6d61737465722e737667\"></a></p>\n<p><code>colorlog.ColoredFormatter</code> is a formatter for use with Python's <code>logging</code>\nmodule that outputs records using terminal colors.</p>\n<ul>\n<li><a href=\"https://github.com/borntyping/python-colorlog\" rel=\"nofollow\">Source on GitHub</a></li>\n<li><a href=\"https://pypi.python.org/pypi/colorlog\" rel=\"nofollow\">Packages on PyPI</a></li>\n<li><a href=\"https://travis-ci.org/borntyping/python-colorlog\" rel=\"nofollow\">Builds on Travis CI</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Install from PyPI with:</p>\n<pre>pip install colorlog\n</pre>\n<p>Several Linux distributions provide official packages (<a href=\"https://packages.debian.org/jessie/python-colorlog\" rel=\"nofollow\">Debian</a>, <a href=\"https://packages.gentoo.org/packages/dev-python/colorlog\" rel=\"nofollow\">Gentoo</a>,\n<a href=\"http://rpm.pbone.net/index.php3?stat=3&amp;search=python-colorlog&amp;srodzaj=3\" rel=\"nofollow\">OpenSuse</a> and <a href=\"https://launchpad.net/python-colorlog\" rel=\"nofollow\">Ubuntu</a>), and others have user provided packages (<a href=\"https://aur.archlinux.org/packages/python-colorlog/\" rel=\"nofollow\">Arch AUR</a>,\n<a href=\"https://www.freshports.org/devel/py-colorlog/\" rel=\"nofollow\">BSD ports</a>, <a href=\"https://anaconda.org/auto/colorlog\" rel=\"nofollow\">Conda</a>, <a href=\"https://github.com/bartv/python-colorlog\" rel=\"nofollow\">Fedora packaging scripts</a>).</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">colorlog</span>\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">colorlog</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">colorlog</span><span class=\"o\">.</span><span class=\"n\">ColoredFormatter</span><span class=\"p\">(</span>\n\t<span class=\"s1\">'</span><span class=\"si\">%(log_color)s%(levelname)s</span><span class=\"s1\">:</span><span class=\"si\">%(name)s</span><span class=\"s1\">:</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">colorlog</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>ColoredFormatter</code> class takes several arguments:</p>\n<ul>\n<li><code>format</code>: The format string used to output the message (required).</li>\n<li><code>datefmt</code>: An optional date format passed to the base class. See <a href=\"http://docs.python.org/3/library/logging.html#logging.Formatter\" rel=\"nofollow\"><code>logging.Formatter</code></a>.</li>\n<li><code>reset</code>: Implicitly adds a color reset code to the message output, unless the output already ends with one. Defaults to <code>True</code>.</li>\n<li><code>log_colors</code>: A mapping of record level names to color names. The defaults can be found in <code>colorlog.default_log_colors</code>, or the below example.</li>\n<li><code>secondary_log_colors</code>: A mapping of names to <code>log_colors</code> style mappings, defining additional colors that can be used in format strings. See below for an example.</li>\n<li><code>style</code>: Available on Python 3.2 and above. See <a href=\"http://docs.python.org/3/library/logging.html#logging.Formatter\" rel=\"nofollow\"><code>logging.Formatter</code></a>.</li>\n</ul>\n<p>Color escape codes can be selected based on the log records level, by adding\nparameters to the format string:</p>\n<ul>\n<li><code>log_color</code>: Return the color associated with the records level.</li>\n<li><code>&lt;name&gt;_log_color</code>: Return another color based on the records level if the formatter has secondary colors configured (see <code>secondary_log_colors</code> below).</li>\n</ul>\n<p>Multiple escape codes can be used at once by joining them with commas when\nconfiguring the color for a log level (but can't be used directly in the format\nstring). For example, <code>black,bg_white</code> would use the escape codes for black\ntext on a white background.</p>\n<p>The following escape codes are made available for use in the format string:</p>\n<ul>\n<li><code>{color}</code>, <code>fg_{color}</code>, <code>bg_{color}</code>: Foreground and background colors.</li>\n<li><code>bold</code>, <code>bold_{color}</code>, <code>fg_bold_{color}</code>, <code>bg_bold_{color}</code>: Bold/bright colors.</li>\n<li><code>thin</code>, <code>thin_{color}</code>, <code>fg_thin_{color}</code>: Thin colors (terminal dependent).</li>\n<li><code>reset</code>: Clear all formatting (both foreground and background colors).</li>\n</ul>\n<p>The available color names are <code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>,\n<code>purple</code>, <code>cyan</code> and <code>white</code>.</p>\n<h2>Examples</h2>\n<p><img alt=\"Example output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e185184f8954b89b3dfbd412361bcbf9858aeedf/646f632f6578616d706c652e706e67\"></p>\n<p>The following code creates a <code>ColoredFormatter</code> for use in a logging setup,\nusing the default values for each argument.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">colorlog</span> <span class=\"kn\">import</span> <span class=\"n\">ColoredFormatter</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">ColoredFormatter</span><span class=\"p\">(</span>\n\t<span class=\"s2\">\"</span><span class=\"si\">%(log_color)s%(levelname)-8s%(reset)s</span><span class=\"s2\"> </span><span class=\"si\">%(blue)s%(message)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n\t<span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n\t<span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n\t<span class=\"n\">log_colors</span><span class=\"o\">=</span><span class=\"p\">{</span>\n\t\t<span class=\"s1\">'DEBUG'</span><span class=\"p\">:</span>    <span class=\"s1\">'cyan'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'INFO'</span><span class=\"p\">:</span>     <span class=\"s1\">'green'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'WARNING'</span><span class=\"p\">:</span>  <span class=\"s1\">'yellow'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'ERROR'</span><span class=\"p\">:</span>    <span class=\"s1\">'red'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'CRITICAL'</span><span class=\"p\">:</span> <span class=\"s1\">'red,bg_white'</span><span class=\"p\">,</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"n\">secondary_log_colors</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n\t<span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'%'</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Using <code>secondary_log_colors</code></h2>\n<p>Secondary log colors are a way to have more than one color that is selected\nbased on the log level. Each key in <code>secondary_log_colors</code> adds an attribute\nthat can be used in format strings (<code>message</code> becomes <code>message_log_color</code>), and\nhas a corresponding value that is identical in format to the <code>log_colors</code>\nargument.</p>\n<p>The following example highlights the level name using the default log colors,\nand highlights the message in red for <code>error</code> and <code>critical</code> level log messages.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">colorlog</span> <span class=\"kn\">import</span> <span class=\"n\">ColoredFormatter</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">ColoredFormatter</span><span class=\"p\">(</span>\n\t<span class=\"s2\">\"</span><span class=\"si\">%(log_color)s%(levelname)-8s%(reset)s</span><span class=\"s2\"> </span><span class=\"si\">%(message_log_color)s%(message)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n\t<span class=\"n\">secondary_log_colors</span><span class=\"o\">=</span><span class=\"p\">{</span>\n\t\t<span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"s1\">'ERROR'</span><span class=\"p\">:</span>    <span class=\"s1\">'red'</span><span class=\"p\">,</span>\n\t\t\t<span class=\"s1\">'CRITICAL'</span><span class=\"p\">:</span> <span class=\"s1\">'red'</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>With <a href=\"http://docs.python.org/3/library/logging.config.html#logging.config.dictConfig\" rel=\"nofollow\"><code>dictConfig</code></a></h2>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">({</span>\n\t<span class=\"s1\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'colored'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"s1\">'colorlog.ColoredFormatter'</span><span class=\"p\">,</span>\n\t\t\t<span class=\"s1\">'format'</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">%(log_color)s%(levelname)-8s%(reset)s</span><span class=\"s2\"> </span><span class=\"si\">%(blue)s%(message)s</span><span class=\"s2\">\"</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>A full example dictionary can be found in <code>tests/test_colorlog.py</code>.</p>\n<h2>With <a href=\"http://docs.python.org/3/library/logging.config.html#logging.config.fileConfig\" rel=\"nofollow\"><code>fileConfig</code></a></h2>\n<pre><span class=\"na\">...</span>\n\n<span class=\"k\">[formatters]</span>\n<span class=\"na\">keys</span><span class=\"o\">=</span><span class=\"s\">color</span>\n\n<span class=\"k\">[formatter_color]</span>\n<span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">colorlog.ColoredFormatter</span>\n<span class=\"na\">format</span><span class=\"o\">=</span><span class=\"s\">%(log_color)s%(levelname)-8s%(reset)s %(bg_blue)s[%(name)s]%(reset)s %(message)s from fileConfig</span>\n<span class=\"na\">datefmt</span><span class=\"o\">=</span><span class=\"s\">%m-%d %H:%M:%S</span>\n</pre>\n<p>An instance of ColoredFormatter created with those arguments will then be used\nby any handlers that are configured to use the <code>color</code> formatter.</p>\n<p>A full example configuration can be found in <code>tests/test_config.ini</code>.</p>\n<h2>With custom log levels</h2>\n<p>ColoredFormatter will work with custom log levels added with\n<a href=\"https://docs.python.org/3/library/logging.html#logging.addLevelNam%5BaddLevelN%5De\" rel=\"nofollow\"><code>logging.addLevelName</code></a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span><span class=\"o\">,</span> <span class=\"nn\">colorlog</span>\n<span class=\"n\">TRACE</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">addLevelName</span><span class=\"p\">(</span><span class=\"n\">TRACE</span><span class=\"p\">,</span> <span class=\"s1\">'TRACE'</span><span class=\"p\">)</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">colorlog</span><span class=\"o\">.</span><span class=\"n\">ColoredFormatter</span><span class=\"p\">(</span><span class=\"n\">log_colors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'TRACE'</span><span class=\"p\">:</span> <span class=\"s1\">'yellow'</span><span class=\"p\">})</span>\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"s1\">'TRACE'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">TRACE</span><span class=\"p\">,</span> <span class=\"s1\">'a message using a custom level'</span><span class=\"p\">)</span>\n</pre>\n<h1>Compatibility</h1>\n<p>colorlog works on Python 2.6 and above, including Python 3.</p>\n<p>On Windows, <a href=\"https://pypi.python.org/pypi/colorama\" rel=\"nofollow\">colorama</a> is required for <code>colorlog</code> to work properly.  It will\nautomatically be included when installing <code>colorlog</code> on windows.</p>\n<h1>Tests</h1>\n<p>Tests similar to the above examples are found in <code>tests/test_colorlog.py</code>.</p>\n<p><a href=\"http://tox.readthedocs.org/\" rel=\"nofollow\"><code>tox</code></a> will run the tests under all compatible python versions.</p>\n<h2>Projects using colorlog</h2>\n<ul>\n<li><a href=\"https://counterparty.io/\" rel=\"nofollow\">Counterparty</a></li>\n<li><a href=\"http://errbot.io/\" rel=\"nofollow\">Errbot</a></li>\n<li><a href=\"http://pythonhosted.org/pythran/DEVGUIDE.html\" rel=\"nofollow\">Pythran</a></li>\n<li><a href=\"https://github.com/ManufacturaInd/python-zenlog\" rel=\"nofollow\">zenlog</a></li>\n</ul>\n<h2>Licence</h2>\n<p>Copyright (c) 2012 Sam Clements <a href=\"mailto:sam@borntyping.co.uk\">sam@borntyping.co.uk</a></p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n\n          </div>"}, "last_serial": 6390558, "releases": {"4.1.0": [{"comment_text": "", "digests": {"md5": "07463fe1aae95027536d7af343a58bb2", "sha256": "f0ff4f3f0a60721b2985dc2973f8228cf9e83491f76a03eb23cbd4565d216b8f"}, "downloads": -1, "filename": "colorlog_ab-4.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07463fe1aae95027536d7af343a58bb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14197, "upload_time": "2020-01-03T11:15:57", "upload_time_iso_8601": "2020-01-03T11:15:57.366476Z", "url": "https://files.pythonhosted.org/packages/e1/c6/e2f171badd279b13fcd6be56b426953f57156819cdbb4b04f1103dd28059/colorlog_ab-4.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf32561305518949b01171eb030461fd", "sha256": "658ea0cbf2c3ab75e2c0eed740bc8f8d3497b9002bae299df93aca1ec7c1f402"}, "downloads": -1, "filename": "colorlog-ab-4.1.0.tar.gz", "has_sig": false, "md5_digest": "cf32561305518949b01171eb030461fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27520, "upload_time": "2020-01-03T11:15:59", "upload_time_iso_8601": "2020-01-03T11:15:59.392742Z", "url": "https://files.pythonhosted.org/packages/d4/d8/510d9d60e8e39eea818ba0849544566c3aec8fcf961dbd6da3a7fe5a0402/colorlog-ab-4.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07463fe1aae95027536d7af343a58bb2", "sha256": "f0ff4f3f0a60721b2985dc2973f8228cf9e83491f76a03eb23cbd4565d216b8f"}, "downloads": -1, "filename": "colorlog_ab-4.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07463fe1aae95027536d7af343a58bb2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14197, "upload_time": "2020-01-03T11:15:57", "upload_time_iso_8601": "2020-01-03T11:15:57.366476Z", "url": "https://files.pythonhosted.org/packages/e1/c6/e2f171badd279b13fcd6be56b426953f57156819cdbb4b04f1103dd28059/colorlog_ab-4.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf32561305518949b01171eb030461fd", "sha256": "658ea0cbf2c3ab75e2c0eed740bc8f8d3497b9002bae299df93aca1ec7c1f402"}, "downloads": -1, "filename": "colorlog-ab-4.1.0.tar.gz", "has_sig": false, "md5_digest": "cf32561305518949b01171eb030461fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27520, "upload_time": "2020-01-03T11:15:59", "upload_time_iso_8601": "2020-01-03T11:15:59.392742Z", "url": "https://files.pythonhosted.org/packages/d4/d8/510d9d60e8e39eea818ba0849544566c3aec8fcf961dbd6da3a7fe5a0402/colorlog-ab-4.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:35 2020"}