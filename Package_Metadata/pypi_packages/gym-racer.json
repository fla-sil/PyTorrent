{"info": {"author": "Pitrified", "author_email": "pitrified.git@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# gym-racer\n\nOpenAI gym environment of a racing car.\n\n#### Action space\n\nThe action space is a combination of two discrete action spaces:\n\n```\n1) accelerate:  NOOP[0], UP[1], DOWN[2]\n2) steer:  NOOP[0], LEFT[1], RIGHT[2]\n```\n\n#### Reward\n\nThe reward is mainly related to the direction along the street, then multiplied by the speed of the car squared.\n\n#### Observation space\n\nThere are two types of observation possible:\n* `lidar` with shape `(n)`: a lidar with n rays, each element indicates the first sensor out of the road\n* `diamond` with shape `(n, n)`: a square of sensors, with a corner on the car\n\nThe observation type can be set by passing it in the call to `gym.make`, and the default parameters can be overridden by passing a `sensor_array_params` dict:\n\n```python\nsat = \"lidar\"       # default\n#  sat = \"diamond\"\nracer_env = gym.make(\n    \"racer-v0\",\n    sensor_array_type=sat,\n    sensor_array_params=sensor_array_params,\n)\n```\n\nThe default parameters for the `lidar` are:\n\n```python\nsensor_array_params[\"ray_num\"] = 7               # number of rays per side\nsensor_array_params[\"ray_step\"] = 15             # distance between sensors along a ray\nsensor_array_params[\"ray_sensors_per_ray\"] = 20  # number of sensors along a ray\nsensor_array_params[\"ray_max_angle\"] = 70        # angle to sweep left/right\n```\n\nThe default parameters for the `diamond` are:\n\n```python\nsensor_array_params[\"viewfield_size\"] = 20  # number of rows/columns in the sensor\nsensor_array_params[\"viewfield_step\"] = 10  # spacing between the dots\n```\n\n#### Render modes\n\nThere are two types of render mode available,\nthe `human` mode initializes `pygame` and renders what the car is doing to the screen,\nwhile in `console` mode only the bare minimum of the `pygame` environment is loaded (to use `spritecollide`).\nAn environment in `console` mode cannot be rendered as `human`.\n\nThe render mode can be set by passing it in the call to `gym.make`:\n\n```python\nmode = \"human\"       # default\n#  mode = \"console\"\nracer_env = gym.make(\n    \"racer-v0\",\n    render_mode=mode,\n)\n```\n\n#### Info\nInfo is a dict with some car details:\n\n```python\nkeys = [\"car_pos_x\", \"car_pos_y\", \"car_dir\", \"car_speed\"]\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Pitrified/gym-racer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gym-racer", "package_url": "https://pypi.org/project/gym-racer/", "platform": "", "project_url": "https://pypi.org/project/gym-racer/", "project_urls": {"Homepage": "https://github.com/Pitrified/gym-racer"}, "release_url": "https://pypi.org/project/gym-racer/0.0.2/", "requires_dist": ["gym", "pygame", "numpy"], "requires_python": ">=3.6", "summary": "OpenAI gym environment of a racing car.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gym-racer</h1>\n<p>OpenAI gym environment of a racing car.</p>\n<h4>Action space</h4>\n<p>The action space is a combination of two discrete action spaces:</p>\n<pre><code>1) accelerate:  NOOP[0], UP[1], DOWN[2]\n2) steer:  NOOP[0], LEFT[1], RIGHT[2]\n</code></pre>\n<h4>Reward</h4>\n<p>The reward is mainly related to the direction along the street, then multiplied by the speed of the car squared.</p>\n<h4>Observation space</h4>\n<p>There are two types of observation possible:</p>\n<ul>\n<li><code>lidar</code> with shape <code>(n)</code>: a lidar with n rays, each element indicates the first sensor out of the road</li>\n<li><code>diamond</code> with shape <code>(n, n)</code>: a square of sensors, with a corner on the car</li>\n</ul>\n<p>The observation type can be set by passing it in the call to <code>gym.make</code>, and the default parameters can be overridden by passing a <code>sensor_array_params</code> dict:</p>\n<pre><span class=\"n\">sat</span> <span class=\"o\">=</span> <span class=\"s2\">\"lidar\"</span>       <span class=\"c1\"># default</span>\n<span class=\"c1\">#  sat = \"diamond\"</span>\n<span class=\"n\">racer_env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"racer-v0\"</span><span class=\"p\">,</span>\n    <span class=\"n\">sensor_array_type</span><span class=\"o\">=</span><span class=\"n\">sat</span><span class=\"p\">,</span>\n    <span class=\"n\">sensor_array_params</span><span class=\"o\">=</span><span class=\"n\">sensor_array_params</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The default parameters for the <code>lidar</code> are:</p>\n<pre><span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"ray_num\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>               <span class=\"c1\"># number of rays per side</span>\n<span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"ray_step\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>             <span class=\"c1\"># distance between sensors along a ray</span>\n<span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"ray_sensors_per_ray\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>  <span class=\"c1\"># number of sensors along a ray</span>\n<span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"ray_max_angle\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">70</span>        <span class=\"c1\"># angle to sweep left/right</span>\n</pre>\n<p>The default parameters for the <code>diamond</code> are:</p>\n<pre><span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"viewfield_size\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>  <span class=\"c1\"># number of rows/columns in the sensor</span>\n<span class=\"n\">sensor_array_params</span><span class=\"p\">[</span><span class=\"s2\">\"viewfield_step\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>  <span class=\"c1\"># spacing between the dots</span>\n</pre>\n<h4>Render modes</h4>\n<p>There are two types of render mode available,\nthe <code>human</code> mode initializes <code>pygame</code> and renders what the car is doing to the screen,\nwhile in <code>console</code> mode only the bare minimum of the <code>pygame</code> environment is loaded (to use <code>spritecollide</code>).\nAn environment in <code>console</code> mode cannot be rendered as <code>human</code>.</p>\n<p>The render mode can be set by passing it in the call to <code>gym.make</code>:</p>\n<pre><span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"human\"</span>       <span class=\"c1\"># default</span>\n<span class=\"c1\">#  mode = \"console\"</span>\n<span class=\"n\">racer_env</span> <span class=\"o\">=</span> <span class=\"n\">gym</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"racer-v0\"</span><span class=\"p\">,</span>\n    <span class=\"n\">render_mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Info</h4>\n<p>Info is a dict with some car details:</p>\n<pre><span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"car_pos_x\"</span><span class=\"p\">,</span> <span class=\"s2\">\"car_pos_y\"</span><span class=\"p\">,</span> <span class=\"s2\">\"car_dir\"</span><span class=\"p\">,</span> <span class=\"s2\">\"car_speed\"</span><span class=\"p\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6160948, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "63dead45201bb04ef12240b6b970d693", "sha256": "672e3fdce9747e5cfb021a4938342ed35fb80cca997bbf9bf5bad034ebaf43d0"}, "downloads": -1, "filename": "gym_racer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "63dead45201bb04ef12240b6b970d693", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13700, "upload_time": "2019-11-19T10:19:54", "upload_time_iso_8601": "2019-11-19T10:19:54.493227Z", "url": "https://files.pythonhosted.org/packages/ec/9c/58528a6373d5b9000c14869df4f53bb6d446a96038b56551bcaf65a1fc4a/gym_racer-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d750031a39cf07a9810bff222f6acbb2", "sha256": "e17d8eb58d5fcc9ce5be22945a6573eb5babf460ed4f199e3256ead162393e9e"}, "downloads": -1, "filename": "gym_racer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d750031a39cf07a9810bff222f6acbb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10848, "upload_time": "2019-11-19T10:19:56", "upload_time_iso_8601": "2019-11-19T10:19:56.897627Z", "url": "https://files.pythonhosted.org/packages/e9/e3/89afb2de9a49d077b60ea16fc1d8ba73e25d429692752c26fe944062248c/gym_racer-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63dead45201bb04ef12240b6b970d693", "sha256": "672e3fdce9747e5cfb021a4938342ed35fb80cca997bbf9bf5bad034ebaf43d0"}, "downloads": -1, "filename": "gym_racer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "63dead45201bb04ef12240b6b970d693", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13700, "upload_time": "2019-11-19T10:19:54", "upload_time_iso_8601": "2019-11-19T10:19:54.493227Z", "url": "https://files.pythonhosted.org/packages/ec/9c/58528a6373d5b9000c14869df4f53bb6d446a96038b56551bcaf65a1fc4a/gym_racer-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d750031a39cf07a9810bff222f6acbb2", "sha256": "e17d8eb58d5fcc9ce5be22945a6573eb5babf460ed4f199e3256ead162393e9e"}, "downloads": -1, "filename": "gym_racer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d750031a39cf07a9810bff222f6acbb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10848, "upload_time": "2019-11-19T10:19:56", "upload_time_iso_8601": "2019-11-19T10:19:56.897627Z", "url": "https://files.pythonhosted.org/packages/e9/e3/89afb2de9a49d077b60ea16fc1d8ba73e25d429692752c26fe944062248c/gym_racer-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:00 2020"}