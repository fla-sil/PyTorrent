{"info": {"author": "Mojtaba Asadi", "author_email": "m.asadi.al@outlook.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# Django Rule-base Validator [![image](https://img.shields.io/pypi/v/django-rulebase.svg)](https://pypi.python.org/pypi/django-rulebase) [![image](https://img.shields.io/pypi/pyversions/django-rulebase.svg)](https://pypi.python.org/pypi/django-rulebase) [![image](https://travis-ci.org/mojtabaasadi/django-rulebase.svg?branch=master)](https://travis-ci.org/mojtabaasadi/django-rulebase)\n\n\ninspired by laravel Requests , for making django validations painless.\n\n\n#### to use:\n```\npip install django-rulebase\n```\n\nin app.views:\n```python\nfrom django_rulebase.validator import require_validation\n\n@require_validation({\n    \"egg\":\"file|mimetypes:application/octet-stream\"\n})\ndef view_function(request):\n    ...\n\n```\nor \n```python\nfrom django.http import HttpResponse,HttpResponseBadRequest\nfrom django_rulebase import Request  \n\ndef  good_request(request,is_valid,errors):\n\tif is_valid:return HttpResponse(\"good request\")\n\treturn HttpResponseBadRequest(errors['date'])\n\nclass  CustomRequest(Request):\n\tview = good_request\n\tdef  rules(self):\n\t\treturn {\n\t\t\t\"date\":\"date|required|before:tomorrow|after:yesterday\"\n\t\t}\n```\nin app.urls\n```python\nfrom django.conf.urls import url\nfrom .views import CustomRequest  \nurlpatterns = [\n\turl(r'^validate/$', CustomRequest.asView()),\n]\n```  \n#### with custom rule :\n```python \nfrom django_rulebase import Request,Rule\n\nclass divisible(Rule):\n    name = \"divisible\"\n    def passes(self, value):\n\t\t# should return boolean\n        return all([value % self.parse_value(field)[1]==0 for field in self.options])\n\n    def message(self):\n        return \"{value} is not divisible to {options} \"\n\nclass CustomRequest(Request):\n    view = good_request\n    def rules(self):\n        return {\n            \"date\":\"date|required|string|before:tomorrow|after:yesterday\",\n            \"some\":\"required|integer\",\n            \"num\":[\"required|integer\",divisible([\"some\"])]\n        }\n```\nor use everywhere:\n```python\nfrom django_rulebase import Validator\n\ndef good_request(request):\n    data = json.loads(request.body)\n    validator = Validator({\n        \"date\":\"date|required|string|before:tomorrow|after:yesterday\",\n        \"some\":\"required|integer\",\n        \"num\":[\"required|integer\",divisible([\"some\"])]\n    })\n    validator.run_validation(data)\n    if not validator.valid :\n        return JsonResponse(validator.errors,safe=False)\n\n```\n\n# built-in rules\nBelow is a list of all available validation rules and their function:\n\nrule|rule|rule\n---|---|---\n[Accepted](#accepted)|[Active URL](#active-url)|[After (Date)](#afterdate)\n[After Or Equal (Date)](#after-or-equaldate)|[Alpha](#alpha)|[Alpha Dash](#alpha-dash)\n[Alpha Numeric](#alpha-num)|[Array](#array)|[Before (Date)](#beforedate)\n[Before Or Equal (Date)](#before-or-equaldate)|[Between](#betweenminmax)|[Boolean](#boolean)\n[Confirmed](#confirmed)|[Date](#date)|[Date Equals](#date-equalsdate)\n[Date Format](#date-formatformat)|[Different](#differentfield)|[Digits](#digitsvalue)\n[Digits Between](#digits-betweenminmax)|[Distinct](#distinct)|[EMail](#email)\n[Exists (Database)](#existstablecolumn)|[File](#file)|[Filled](#filled)\n[Greater Than](#gtfield)|[Greater Than Or Equal](#gtefield)|[Image (File)](#image)\n[In](#infoobar)|[In Array](#in-arrayanotherfield)|[Integer](#integer)\n[IP Address](#ip)|[JSON](#json)|[Less Than](#ltfield)\n[Less Than Or Equal](#ltefield)|[Max](#maxvalue)|[MIME Types](#mimetypestextplain)\n[MIME Type By File Extension](#mimesfoobar)|[Min](#minvalue)|[Not In](#not-infoobar)\n[Not Regex](#not-regexpattern)|[Nullable](#nullable)|[Numeric](#numeric)\n[Present](#present)|[Regular Expression](#regexpattern)|[Required](#required)\n[Required If](#required-ifanotherfieldvalue)|[Required Unless](#required-unlessanotherfieldvalue)|[Required With](#required-withfoobar)\n[Required With All](#required-with-allfoobar)|[Required Without](#required-withoutfoobar)|[Required Without All](#required-without-allfoobar)\n[Same](#samefield)|[Size](#sizevalue)|[String](#string)\n[Timezone](#timezone)|[Unique (Database)](#uniquetablecolumn)|[URL](#url)\n[UUID](#uuid)| - | -\n\n\n### accepted\n\nThe field under validation must be yes, on, 1, or true. This is useful for validating \"Terms of Service\" acceptance.\n\n### active-url\n\nThe field under validation must have a valid A or AAAA record according to the [dnspython](http://www.dnspython.org).\n\n### after:date\n\nThe field under validation must be a value after a given date. The dates will be passed into the [dateparser](https://dateparser.readthedocs.io):\n\n\n\n```python\n'finish_date' : 'required|date|after:start_date'\n'another_date' : 'required|date|after:tomorrow'\n```\n\n### after-or-equal:date\n\nThe field under validation must be a value after or equal to the given date. For more information, see the [after rule](#afterdate).\n\n### alpha\n\nThe field under validation must be entirely alphabetic characters.\n\n### alpha-dash\n\nThe field under validation may have alpha-numeric characters, as well as dashes and underscores.\n\n### alpha-num\n\nThe field under validation must be entirely alpha-numeric characters.\n\n### array\n\nThe field under validation must be a list array.\n\n### before:date\n\nThe field under validation must be a value preceding the given date. The dates will be passed into [dateparser](https://dateparser.readthedocs.io). In addition, like the [after rule](#afterdate), the name of another field under validation may be supplied as the value of date.\n\n### before-or-equal:date\n\nThe field under validation must be a value preceding or equal to the given date. The dates will be passed into [dateparser](https://dateparser.readthedocs.io). In addition, like the [after rule](#afterdate), the name of another field under validation may be supplied as the value of date.\n\n### between:min,max\n\nThe field under validation must have a size between the given min and max. Strings, numerics, arrays, and files are evaluated in the same fashion as the [size rule](#sizevalue).\n\n### boolean\n\nThe field under validation must be able to be cast as a boolean. Accepted input are true, false, 1, 0, \"1\", and \"0\".\n\n### confirmed\n\nThe field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.\n\n### date\n|The field under validation must be a valid date according to the [dateparser](https://dateparser.readthedocs.io).\n\n### date-equals:date\n\nThe field under validation must be equal to the given date. The dates will be passed into [dateparser](https://dateparser.readthedocs.io).\n\n### date-format:format\n\nThe field under validation must match the given format. You should use either date or date_format when validating a field, not both.\n\n### different:field\n\nThe field under validation must have a different value than field.\n\n### digits:value\n\nThe field under validation must be numeric and must have an exact length of value.\n\n### digits-between:min,max\n\nThe field under validation must have a length between the given min and max.\n\n\n### distinct\n\nWhen working with arrays, the field under validation must not have any duplicate values.\n\n\n```python\n'foo.*.id' : 'distinct'\n```\n\n\n### email\n\nThe field under validation must be formatted as an e-mail address.\n\n### exists:table,column\n\nThe field under validation must exist on a given database table.\n\nBasic Usage Of Exists Rule\n```python\n'state' : 'exists:states'\n```\nIf the column option is not specified, the field name will be used.\n\nSpecifying A Custom Column Name\n```python\n'state' : 'exists:states,abbreviation'\n```\nSpecifying A Custom connection\n```python\n'state' : 'exists:connection.states,abbreviation'\n```\nor usring model:\n```python\nfrom app.models import SomeModel\nfrom django_rulebase.rule  import exists\n...\n'state' : exists(SomeModel,\"attribute\")\n```\n### file\n\nThe field under validation must be a successfully uploaded file.\n\n### filled\n\nThe field under validation must not be empty when it is present.\n\n### gt:field\n\nThe field under validation must be greater than the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [size rule](#sizevalue).\n\n### gte:field\n\nThe field under validation must be greater than or equal to the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [size rule](#sizevalue).\n\n### image\n\nThe file under validation must be an image (jpeg, png, bmp, gif, or svg)\n\n### in:foo,bar,...\n\nThe field under validation must be included in the given list of values.\n        Since this rule often requires you to implode an array,\n        you can use _in() from .rule  to fluently construct the rule:\n\n```python\nfrom djanfo_rulebase.rule import _in\n...\n\"field\" : [\"required\",_in(1,3,\"string\")]\n```  \n\n### in-array:anotherfield.*\n\nThe field under validation must exist in anotherfield's values.\n\n### integer\n\nThe field under validation must be an integer.\n\n### ip\n\nThe field under validation must be an IP address.\n\n\n\n### ipv4\n\nThe field under validation must be an IPv4 address.\n\n\n\n### ipv6\n\nThe field under validation must be an IPv6 address.\n\n### json\n\nThe field under validation must be a valid JSON string.\n\n### lt:field\n\nThe field under validation must be less than the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [size rule](#sizevalue).\n\n### lte:field\n\nThe field under validation must be less than or equal to the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the [size rule](#sizevalue).\n\n### max:value\n\nThe field under validation must be less than or equal to a maximum value. Strings, numerics, arrays, and files are evaluated in the same fashion as the [size rule](#sizevalue).\n\n### mimetypes:text/plain,...\n\nThe file under validation must match one of the given MIME types:\n\n```python\n'video' : 'mimetypes:video/avi,video/mpeg,video/quicktime'\n```\n\nTo determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client provided MIME type.\n\n### mimes:foo,bar,...\n\nThe file under validation must have a MIME type corresponding to one of the listed extensions.\n\n\n\nBasic Usage Of MIME Rule\n\n```python\n'photo' : 'mimes:jpeg,bmp,png'\n```\n\nEven though you only need to specify the extensions, this rule actually validates against the MIME type of the file by reading the file's contents and guessing its MIME type.\n\n\n\nA full listing of MIME types and their corresponding extensions may be found at the following location: [read more](https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\n\n### min:value\n\nThe field under validation must have a minimum value. Strings, numerics, arrays, and files are evaluated in the same fashion as the [size rule](#sizevalue).\n\n### not-in:foo,bar,...\n\nThe field under validation must not be included in the given list of values. The Rule::notIn method may be used to fluently construct the rule:\n\n\n\n### not-regex:pattern\n\nThe field under validation must not match the given regular expression.\n\n\n\nInternally, this rule uses the re.search. The pattern specified should obey the same formatting required by preg_match and thus also include valid delimiters. For example:\n\n```python\n'email' : 'not_regex:^.+$'.\n```\n\nNote: When using the regex / not_regex patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.\n\n### nullable\n\nThe field under validation may be null. This is particularly useful when validating primitive such as strings and integers that can contain null values.\n\n### numeric\n\nThe field under validation must be numeric.\n\n### present\n\nThe field under validation must be present in the input data but can be empty.\n\n### regex:pattern\n\nThe field under validation must match the given regular expression.\n\n\n\nInternally, this rule uses the re.search. The pattern specified should obey the same formatting required by re.compile and thus also include valid delimiters. For example:\n\n```python\n'email' : 'regex:^.+@.+$'.\n```\n\nNote: When using the regex / not_regex patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.\n\n### required\n\nThe field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:\n\nThe value is null.\nThe value is an empty string.\nThe value is an empty array or empty Countable object.\nThe value is an uploaded file with no path.\n\n### required-if:anotherfield,value,...\n\nThe field under validation must be present and not empty if the anotherfield field is equal to any value.\n\n### required-unless:anotherfield,value,...\n\nThe field under validation must be present and not empty unless the anotherfield field is equal to any value.\n\n### required-with:foo,bar,...\n\nThe field under validation must be present and not empty only if any of the other specified fields are present.\n\n### required-with-all:foo,bar,...\n\nThe field under validation must be present and not empty only if all of the other specified fields are present.\n\n### required-without:foo,bar,...\n\nThe field under validation must be present and not empty only when any of the other specified fields are not present.\n\n### required-without-all:foo,bar,...\n\nThe field under validation must be present and not empty only when all of the other specified fields are not present.\n\n### same:field\n\nThe given field must match the field under validation.\n\n### size:value\n\nThe field under validation must have a size matching the given value. For string data, value corresponds to the number of characters. For numeric data, value corresponds to a given integer value. For an array, size corresponds to the count of the array. For files, size corresponds to the file size in kilobytes.\n\n### string\n\nThe field under validation must be a string. If you would like to allow the field to also be null, you should assign the [nullable rule](#nullable) to the field.\n\n### timezone\n\nThe field under validation must be a valid timezone identifier according to the pytz.\n\n### unique:table,column\n\nThe field under validation must be unique in a given database table. If the column option is not specified, the field name will be used.\n\n\n\nSpecifying A Custom Column Name:\n\n```python\n'email' : 'unique:users,email_address'\n```\n\n\n\n### url\n\nThe field under validation must be a valid URL.\n\n### uuid\n\nThe field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID).\n\n## to do :\n\n- integrate with django form \n- integrate with rest_framwork\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mojtabaasadi/django-rulebase", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-rulebase", "package_url": "https://pypi.org/project/django-rulebase/", "platform": "", "project_url": "https://pypi.org/project/django-rulebase/", "project_urls": {"Homepage": "https://github.com/mojtabaasadi/django-rulebase"}, "release_url": "https://pypi.org/project/django-rulebase/0.1.0/", "requires_dist": ["dateparser", "dnspython", "pytz", "django"], "requires_python": "", "summary": "Django rule base validation , inspired by laravel Request", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Rule-base Validator <a href=\"https://pypi.python.org/pypi/django-rulebase\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41916088ef9a5d386c91d27dce539350f4d5463f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d72756c65626173652e737667\"></a> <a href=\"https://pypi.python.org/pypi/django-rulebase\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e4abc15c132e7830339629ee7e2c7d16e88554c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d72756c65626173652e737667\"></a> <a href=\"https://travis-ci.org/mojtabaasadi/django-rulebase\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d8e73c9985bfc9ff9aa31908e608732259f1516/68747470733a2f2f7472617669732d63692e6f72672f6d6f6a7461626161736164692f646a616e676f2d72756c65626173652e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>inspired by laravel Requests , for making django validations painless.</p>\n<h4>to use:</h4>\n<pre><code>pip install django-rulebase\n</code></pre>\n<p>in app.views:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_rulebase.validator</span> <span class=\"kn\">import</span> <span class=\"n\">require_validation</span>\n\n<span class=\"nd\">@require_validation</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"egg\"</span><span class=\"p\">:</span><span class=\"s2\">\"file|mimetypes:application/octet-stream\"</span>\n<span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">view_function</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span><span class=\"p\">,</span><span class=\"n\">HttpResponseBadRequest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_rulebase</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>  \n\n<span class=\"k\">def</span>  <span class=\"nf\">good_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"n\">is_valid</span><span class=\"p\">,</span><span class=\"n\">errors</span><span class=\"p\">):</span>\n\t<span class=\"k\">if</span> <span class=\"n\">is_valid</span><span class=\"p\">:</span><span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">\"good request\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">HttpResponseBadRequest</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"s1\">'date'</span><span class=\"p\">])</span>\n\n<span class=\"k\">class</span>  <span class=\"nc\">CustomRequest</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">):</span>\n\t<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">good_request</span>\n\t<span class=\"k\">def</span>  <span class=\"nf\">rules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"s2\">\"date|required|before:tomorrow|after:yesterday\"</span>\n\t\t<span class=\"p\">}</span>\n</pre>\n<p>in app.urls</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">CustomRequest</span>  \n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^validate/$'</span><span class=\"p\">,</span> <span class=\"n\">CustomRequest</span><span class=\"o\">.</span><span class=\"n\">asView</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre>\n<h4>with custom rule :</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_rulebase</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span><span class=\"p\">,</span><span class=\"n\">Rule</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">divisible</span><span class=\"p\">(</span><span class=\"n\">Rule</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"divisible\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">passes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># should return boolean</span>\n        <span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">([</span><span class=\"n\">value</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_value</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">==</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">{value}</span><span class=\"s2\"> is not divisible to </span><span class=\"si\">{options}</span><span class=\"s2\"> \"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomRequest</span><span class=\"p\">(</span><span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">good_request</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rules</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"s2\">\"date|required|string|before:tomorrow|after:yesterday\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"some\"</span><span class=\"p\">:</span><span class=\"s2\">\"required|integer\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"num\"</span><span class=\"p\">:[</span><span class=\"s2\">\"required|integer\"</span><span class=\"p\">,</span><span class=\"n\">divisible</span><span class=\"p\">([</span><span class=\"s2\">\"some\"</span><span class=\"p\">])]</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>or use everywhere:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_rulebase</span> <span class=\"kn\">import</span> <span class=\"n\">Validator</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">good_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n    <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">Validator</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"s2\">\"date|required|string|before:tomorrow|after:yesterday\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"some\"</span><span class=\"p\">:</span><span class=\"s2\">\"required|integer\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"num\"</span><span class=\"p\">:[</span><span class=\"s2\">\"required|integer\"</span><span class=\"p\">,</span><span class=\"n\">divisible</span><span class=\"p\">([</span><span class=\"s2\">\"some\"</span><span class=\"p\">])]</span>\n    <span class=\"p\">})</span>\n    <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">run_validation</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">valid</span> <span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span><span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h1>built-in rules</h1>\n<p>Below is a list of all available validation rules and their function:</p>\n<table>\n<thead>\n<tr>\n<th>rule</th>\n<th>rule</th>\n<th>rule</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#accepted\" rel=\"nofollow\">Accepted</a></td>\n<td><a href=\"#active-url\" rel=\"nofollow\">Active URL</a></td>\n<td><a href=\"#afterdate\" rel=\"nofollow\">After (Date)</a></td>\n</tr>\n<tr>\n<td><a href=\"#after-or-equaldate\" rel=\"nofollow\">After Or Equal (Date)</a></td>\n<td><a href=\"#alpha\" rel=\"nofollow\">Alpha</a></td>\n<td><a href=\"#alpha-dash\" rel=\"nofollow\">Alpha Dash</a></td>\n</tr>\n<tr>\n<td><a href=\"#alpha-num\" rel=\"nofollow\">Alpha Numeric</a></td>\n<td><a href=\"#array\" rel=\"nofollow\">Array</a></td>\n<td><a href=\"#beforedate\" rel=\"nofollow\">Before (Date)</a></td>\n</tr>\n<tr>\n<td><a href=\"#before-or-equaldate\" rel=\"nofollow\">Before Or Equal (Date)</a></td>\n<td><a href=\"#betweenminmax\" rel=\"nofollow\">Between</a></td>\n<td><a href=\"#boolean\" rel=\"nofollow\">Boolean</a></td>\n</tr>\n<tr>\n<td><a href=\"#confirmed\" rel=\"nofollow\">Confirmed</a></td>\n<td><a href=\"#date\" rel=\"nofollow\">Date</a></td>\n<td><a href=\"#date-equalsdate\" rel=\"nofollow\">Date Equals</a></td>\n</tr>\n<tr>\n<td><a href=\"#date-formatformat\" rel=\"nofollow\">Date Format</a></td>\n<td><a href=\"#differentfield\" rel=\"nofollow\">Different</a></td>\n<td><a href=\"#digitsvalue\" rel=\"nofollow\">Digits</a></td>\n</tr>\n<tr>\n<td><a href=\"#digits-betweenminmax\" rel=\"nofollow\">Digits Between</a></td>\n<td><a href=\"#distinct\" rel=\"nofollow\">Distinct</a></td>\n<td><a href=\"#email\" rel=\"nofollow\">EMail</a></td>\n</tr>\n<tr>\n<td><a href=\"#existstablecolumn\" rel=\"nofollow\">Exists (Database)</a></td>\n<td><a href=\"#file\" rel=\"nofollow\">File</a></td>\n<td><a href=\"#filled\" rel=\"nofollow\">Filled</a></td>\n</tr>\n<tr>\n<td><a href=\"#gtfield\" rel=\"nofollow\">Greater Than</a></td>\n<td><a href=\"#gtefield\" rel=\"nofollow\">Greater Than Or Equal</a></td>\n<td><a href=\"#image\" rel=\"nofollow\">Image (File)</a></td>\n</tr>\n<tr>\n<td><a href=\"#infoobar\" rel=\"nofollow\">In</a></td>\n<td><a href=\"#in-arrayanotherfield\" rel=\"nofollow\">In Array</a></td>\n<td><a href=\"#integer\" rel=\"nofollow\">Integer</a></td>\n</tr>\n<tr>\n<td><a href=\"#ip\" rel=\"nofollow\">IP Address</a></td>\n<td><a href=\"#json\" rel=\"nofollow\">JSON</a></td>\n<td><a href=\"#ltfield\" rel=\"nofollow\">Less Than</a></td>\n</tr>\n<tr>\n<td><a href=\"#ltefield\" rel=\"nofollow\">Less Than Or Equal</a></td>\n<td><a href=\"#maxvalue\" rel=\"nofollow\">Max</a></td>\n<td><a href=\"#mimetypestextplain\" rel=\"nofollow\">MIME Types</a></td>\n</tr>\n<tr>\n<td><a href=\"#mimesfoobar\" rel=\"nofollow\">MIME Type By File Extension</a></td>\n<td><a href=\"#minvalue\" rel=\"nofollow\">Min</a></td>\n<td><a href=\"#not-infoobar\" rel=\"nofollow\">Not In</a></td>\n</tr>\n<tr>\n<td><a href=\"#not-regexpattern\" rel=\"nofollow\">Not Regex</a></td>\n<td><a href=\"#nullable\" rel=\"nofollow\">Nullable</a></td>\n<td><a href=\"#numeric\" rel=\"nofollow\">Numeric</a></td>\n</tr>\n<tr>\n<td><a href=\"#present\" rel=\"nofollow\">Present</a></td>\n<td><a href=\"#regexpattern\" rel=\"nofollow\">Regular Expression</a></td>\n<td><a href=\"#required\" rel=\"nofollow\">Required</a></td>\n</tr>\n<tr>\n<td><a href=\"#required-ifanotherfieldvalue\" rel=\"nofollow\">Required If</a></td>\n<td><a href=\"#required-unlessanotherfieldvalue\" rel=\"nofollow\">Required Unless</a></td>\n<td><a href=\"#required-withfoobar\" rel=\"nofollow\">Required With</a></td>\n</tr>\n<tr>\n<td><a href=\"#required-with-allfoobar\" rel=\"nofollow\">Required With All</a></td>\n<td><a href=\"#required-withoutfoobar\" rel=\"nofollow\">Required Without</a></td>\n<td><a href=\"#required-without-allfoobar\" rel=\"nofollow\">Required Without All</a></td>\n</tr>\n<tr>\n<td><a href=\"#samefield\" rel=\"nofollow\">Same</a></td>\n<td><a href=\"#sizevalue\" rel=\"nofollow\">Size</a></td>\n<td><a href=\"#string\" rel=\"nofollow\">String</a></td>\n</tr>\n<tr>\n<td><a href=\"#timezone\" rel=\"nofollow\">Timezone</a></td>\n<td><a href=\"#uniquetablecolumn\" rel=\"nofollow\">Unique (Database)</a></td>\n<td><a href=\"#url\" rel=\"nofollow\">URL</a></td>\n</tr>\n<tr>\n<td><a href=\"#uuid\" rel=\"nofollow\">UUID</a></td>\n<td>-</td>\n<td>-</td>\n</tr></tbody></table>\n<h3>accepted</h3>\n<p>The field under validation must be yes, on, 1, or true. This is useful for validating \"Terms of Service\" acceptance.</p>\n<h3>active-url</h3>\n<p>The field under validation must have a valid A or AAAA record according to the <a href=\"http://www.dnspython.org\" rel=\"nofollow\">dnspython</a>.</p>\n<h3>after:date</h3>\n<p>The field under validation must be a value after a given date. The dates will be passed into the <a href=\"https://dateparser.readthedocs.io\" rel=\"nofollow\">dateparser</a>:</p>\n<pre><span class=\"s1\">'finish_date'</span> <span class=\"p\">:</span> <span class=\"s1\">'required|date|after:start_date'</span>\n<span class=\"s1\">'another_date'</span> <span class=\"p\">:</span> <span class=\"s1\">'required|date|after:tomorrow'</span>\n</pre>\n<h3>after-or-equal:date</h3>\n<p>The field under validation must be a value after or equal to the given date. For more information, see the <a href=\"#afterdate\" rel=\"nofollow\">after rule</a>.</p>\n<h3>alpha</h3>\n<p>The field under validation must be entirely alphabetic characters.</p>\n<h3>alpha-dash</h3>\n<p>The field under validation may have alpha-numeric characters, as well as dashes and underscores.</p>\n<h3>alpha-num</h3>\n<p>The field under validation must be entirely alpha-numeric characters.</p>\n<h3>array</h3>\n<p>The field under validation must be a list array.</p>\n<h3>before:date</h3>\n<p>The field under validation must be a value preceding the given date. The dates will be passed into <a href=\"https://dateparser.readthedocs.io\" rel=\"nofollow\">dateparser</a>. In addition, like the <a href=\"#afterdate\" rel=\"nofollow\">after rule</a>, the name of another field under validation may be supplied as the value of date.</p>\n<h3>before-or-equal:date</h3>\n<p>The field under validation must be a value preceding or equal to the given date. The dates will be passed into <a href=\"https://dateparser.readthedocs.io\" rel=\"nofollow\">dateparser</a>. In addition, like the <a href=\"#afterdate\" rel=\"nofollow\">after rule</a>, the name of another field under validation may be supplied as the value of date.</p>\n<h3>between:min,max</h3>\n<p>The field under validation must have a size between the given min and max. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>boolean</h3>\n<p>The field under validation must be able to be cast as a boolean. Accepted input are true, false, 1, 0, \"1\", and \"0\".</p>\n<h3>confirmed</h3>\n<p>The field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.</p>\n<h3>date</h3>\n<p>|The field under validation must be a valid date according to the <a href=\"https://dateparser.readthedocs.io\" rel=\"nofollow\">dateparser</a>.</p>\n<h3>date-equals:date</h3>\n<p>The field under validation must be equal to the given date. The dates will be passed into <a href=\"https://dateparser.readthedocs.io\" rel=\"nofollow\">dateparser</a>.</p>\n<h3>date-format:format</h3>\n<p>The field under validation must match the given format. You should use either date or date_format when validating a field, not both.</p>\n<h3>different:field</h3>\n<p>The field under validation must have a different value than field.</p>\n<h3>digits:value</h3>\n<p>The field under validation must be numeric and must have an exact length of value.</p>\n<h3>digits-between:min,max</h3>\n<p>The field under validation must have a length between the given min and max.</p>\n<h3>distinct</h3>\n<p>When working with arrays, the field under validation must not have any duplicate values.</p>\n<pre><span class=\"s1\">'foo.*.id'</span> <span class=\"p\">:</span> <span class=\"s1\">'distinct'</span>\n</pre>\n<h3>email</h3>\n<p>The field under validation must be formatted as an e-mail address.</p>\n<h3>exists:table,column</h3>\n<p>The field under validation must exist on a given database table.</p>\n<p>Basic Usage Of Exists Rule</p>\n<pre><span class=\"s1\">'state'</span> <span class=\"p\">:</span> <span class=\"s1\">'exists:states'</span>\n</pre>\n<p>If the column option is not specified, the field name will be used.</p>\n<p>Specifying A Custom Column Name</p>\n<pre><span class=\"s1\">'state'</span> <span class=\"p\">:</span> <span class=\"s1\">'exists:states,abbreviation'</span>\n</pre>\n<p>Specifying A Custom connection</p>\n<pre><span class=\"s1\">'state'</span> <span class=\"p\">:</span> <span class=\"s1\">'exists:connection.states,abbreviation'</span>\n</pre>\n<p>or usring model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">app.models</span> <span class=\"kn\">import</span> <span class=\"n\">SomeModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_rulebase.rule</span>  <span class=\"kn\">import</span> <span class=\"n\">exists</span>\n<span class=\"o\">...</span>\n<span class=\"s1\">'state'</span> <span class=\"p\">:</span> <span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">SomeModel</span><span class=\"p\">,</span><span class=\"s2\">\"attribute\"</span><span class=\"p\">)</span>\n</pre>\n<h3>file</h3>\n<p>The field under validation must be a successfully uploaded file.</p>\n<h3>filled</h3>\n<p>The field under validation must not be empty when it is present.</p>\n<h3>gt:field</h3>\n<p>The field under validation must be greater than the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>gte:field</h3>\n<p>The field under validation must be greater than or equal to the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>image</h3>\n<p>The file under validation must be an image (jpeg, png, bmp, gif, or svg)</p>\n<h3>in:foo,bar,...</h3>\n<p>The field under validation must be included in the given list of values.\nSince this rule often requires you to implode an array,\nyou can use _in() from .rule  to fluently construct the rule:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djanfo_rulebase.rule</span> <span class=\"kn\">import</span> <span class=\"n\">_in</span>\n<span class=\"o\">...</span>\n<span class=\"s2\">\"field\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"required\"</span><span class=\"p\">,</span><span class=\"n\">_in</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s2\">\"string\"</span><span class=\"p\">)]</span>\n</pre>\n<h3>in-array:anotherfield.*</h3>\n<p>The field under validation must exist in anotherfield's values.</p>\n<h3>integer</h3>\n<p>The field under validation must be an integer.</p>\n<h3>ip</h3>\n<p>The field under validation must be an IP address.</p>\n<h3>ipv4</h3>\n<p>The field under validation must be an IPv4 address.</p>\n<h3>ipv6</h3>\n<p>The field under validation must be an IPv6 address.</p>\n<h3>json</h3>\n<p>The field under validation must be a valid JSON string.</p>\n<h3>lt:field</h3>\n<p>The field under validation must be less than the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>lte:field</h3>\n<p>The field under validation must be less than or equal to the given field. The two fields must be of the same type. Strings, numerics, arrays, and files are evaluated using the same conventions as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>max:value</h3>\n<p>The field under validation must be less than or equal to a maximum value. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>mimetypes:text/plain,...</h3>\n<p>The file under validation must match one of the given MIME types:</p>\n<pre><span class=\"s1\">'video'</span> <span class=\"p\">:</span> <span class=\"s1\">'mimetypes:video/avi,video/mpeg,video/quicktime'</span>\n</pre>\n<p>To determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client provided MIME type.</p>\n<h3>mimes:foo,bar,...</h3>\n<p>The file under validation must have a MIME type corresponding to one of the listed extensions.</p>\n<p>Basic Usage Of MIME Rule</p>\n<pre><span class=\"s1\">'photo'</span> <span class=\"p\">:</span> <span class=\"s1\">'mimes:jpeg,bmp,png'</span>\n</pre>\n<p>Even though you only need to specify the extensions, this rule actually validates against the MIME type of the file by reading the file's contents and guessing its MIME type.</p>\n<p>A full listing of MIME types and their corresponding extensions may be found at the following location: <a href=\"https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\" rel=\"nofollow\">read more</a></p>\n<h3>min:value</h3>\n<p>The field under validation must have a minimum value. Strings, numerics, arrays, and files are evaluated in the same fashion as the <a href=\"#sizevalue\" rel=\"nofollow\">size rule</a>.</p>\n<h3>not-in:foo,bar,...</h3>\n<p>The field under validation must not be included in the given list of values. The Rule::notIn method may be used to fluently construct the rule:</p>\n<h3>not-regex:pattern</h3>\n<p>The field under validation must not match the given regular expression.</p>\n<p>Internally, this rule uses the re.search. The pattern specified should obey the same formatting required by preg_match and thus also include valid delimiters. For example:</p>\n<pre><span class=\"s1\">'email'</span> <span class=\"p\">:</span> <span class=\"s1\">'not_regex:^.+$'</span><span class=\"o\">.</span>\n</pre>\n<p>Note: When using the regex / not_regex patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.</p>\n<h3>nullable</h3>\n<p>The field under validation may be null. This is particularly useful when validating primitive such as strings and integers that can contain null values.</p>\n<h3>numeric</h3>\n<p>The field under validation must be numeric.</p>\n<h3>present</h3>\n<p>The field under validation must be present in the input data but can be empty.</p>\n<h3>regex:pattern</h3>\n<p>The field under validation must match the given regular expression.</p>\n<p>Internally, this rule uses the re.search. The pattern specified should obey the same formatting required by re.compile and thus also include valid delimiters. For example:</p>\n<pre><span class=\"s1\">'email'</span> <span class=\"p\">:</span> <span class=\"s1\">'regex:^.+@.+$'</span><span class=\"o\">.</span>\n</pre>\n<p>Note: When using the regex / not_regex patterns, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.</p>\n<h3>required</h3>\n<p>The field under validation must be present in the input data and not empty. A field is considered \"empty\" if one of the following conditions are true:</p>\n<p>The value is null.\nThe value is an empty string.\nThe value is an empty array or empty Countable object.\nThe value is an uploaded file with no path.</p>\n<h3>required-if:anotherfield,value,...</h3>\n<p>The field under validation must be present and not empty if the anotherfield field is equal to any value.</p>\n<h3>required-unless:anotherfield,value,...</h3>\n<p>The field under validation must be present and not empty unless the anotherfield field is equal to any value.</p>\n<h3>required-with:foo,bar,...</h3>\n<p>The field under validation must be present and not empty only if any of the other specified fields are present.</p>\n<h3>required-with-all:foo,bar,...</h3>\n<p>The field under validation must be present and not empty only if all of the other specified fields are present.</p>\n<h3>required-without:foo,bar,...</h3>\n<p>The field under validation must be present and not empty only when any of the other specified fields are not present.</p>\n<h3>required-without-all:foo,bar,...</h3>\n<p>The field under validation must be present and not empty only when all of the other specified fields are not present.</p>\n<h3>same:field</h3>\n<p>The given field must match the field under validation.</p>\n<h3>size:value</h3>\n<p>The field under validation must have a size matching the given value. For string data, value corresponds to the number of characters. For numeric data, value corresponds to a given integer value. For an array, size corresponds to the count of the array. For files, size corresponds to the file size in kilobytes.</p>\n<h3>string</h3>\n<p>The field under validation must be a string. If you would like to allow the field to also be null, you should assign the <a href=\"#nullable\" rel=\"nofollow\">nullable rule</a> to the field.</p>\n<h3>timezone</h3>\n<p>The field under validation must be a valid timezone identifier according to the pytz.</p>\n<h3>unique:table,column</h3>\n<p>The field under validation must be unique in a given database table. If the column option is not specified, the field name will be used.</p>\n<p>Specifying A Custom Column Name:</p>\n<pre><span class=\"s1\">'email'</span> <span class=\"p\">:</span> <span class=\"s1\">'unique:users,email_address'</span>\n</pre>\n<h3>url</h3>\n<p>The field under validation must be a valid URL.</p>\n<h3>uuid</h3>\n<p>The field under validation must be a valid RFC 4122 (version 1, 3, 4, or 5) universally unique identifier (UUID).</p>\n<h2>to do :</h2>\n<ul>\n<li>integrate with django form</li>\n<li>integrate with rest_framwork</li>\n</ul>\n\n          </div>"}, "last_serial": 4585939, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "f9ee4b5f7dbea8ff177cb0c817045d77", "sha256": "74642de8571b44b2e3ff9c11100ddd38a0a42161b8bb3456adf07cef2d3a5cb8"}, "downloads": -1, "filename": "django_rulebase-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "f9ee4b5f7dbea8ff177cb0c817045d77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14121, "upload_time": "2018-12-08T06:53:51", "upload_time_iso_8601": "2018-12-08T06:53:51.325660Z", "url": "https://files.pythonhosted.org/packages/53/b4/2b1a534ce2e6c2bbda094718b5350822486d31d98af931f45b3f3d8b45c3/django_rulebase-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "229007f18aa1dcb187835c0f4a69a191", "sha256": "81cf49654e8dc2ef94e9e60b048d354e63e5db3761b85684a6cbaaa06b7cb6a6"}, "downloads": -1, "filename": "django_rulebase-0.0.10.tar.gz", "has_sig": false, "md5_digest": "229007f18aa1dcb187835c0f4a69a191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16951, "upload_time": "2018-12-08T06:53:55", "upload_time_iso_8601": "2018-12-08T06:53:55.501784Z", "url": "https://files.pythonhosted.org/packages/ff/7c/3d8a6d0ed9910763f3908bbcc0848653041a5d9c29fa3c01c655220ab635/django_rulebase-0.0.10.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f929267adc49ddd47700e9cc51491fa7", "sha256": "dcfcb1339ad508934ff569818d604ca29490af7a58899c62b814130ad791111f"}, "downloads": -1, "filename": "django_rulebase-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f929267adc49ddd47700e9cc51491fa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13581, "upload_time": "2018-11-23T09:05:03", "upload_time_iso_8601": "2018-11-23T09:05:03.381104Z", "url": "https://files.pythonhosted.org/packages/5d/fe/b007fa484fc5273b3429698c5409e8102c3de44fc12685e30573fdef055c/django_rulebase-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d44aa8a2aceacec34dff0bdad12d938", "sha256": "8f194b277dc9b52e1174092dd4e79a0718f4eedba657c4e21fa1b635a85af29b"}, "downloads": -1, "filename": "django_rulebase-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5d44aa8a2aceacec34dff0bdad12d938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16122, "upload_time": "2018-11-23T09:05:05", "upload_time_iso_8601": "2018-11-23T09:05:05.868471Z", "url": "https://files.pythonhosted.org/packages/d2/68/414233415924521d3d154b98a69ac7d5f2780ca1e6fab5dd00794f58c796/django_rulebase-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d8fb2d92dba6e7932c48db3add9f28ef", "sha256": "6dab924016e4c6c7522a0a1f8161f5c2c398af94a641b34a93acb05000535022"}, "downloads": -1, "filename": "django_rulebase-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d8fb2d92dba6e7932c48db3add9f28ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13734, "upload_time": "2018-12-01T08:30:57", "upload_time_iso_8601": "2018-12-01T08:30:57.381858Z", "url": "https://files.pythonhosted.org/packages/66/f7/e9b4be819d3c93d3c9f8e56c3c58e207bee600da79a052f43d19782fa20c/django_rulebase-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8871a6a886734f15f8035c2ef072b314", "sha256": "96c8aa1f2be54203ebc71482d3c96ec2753da8d4785940d70e1ded5591bea796"}, "downloads": -1, "filename": "django_rulebase-0.0.6.tar.gz", "has_sig": false, "md5_digest": "8871a6a886734f15f8035c2ef072b314", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16362, "upload_time": "2018-12-01T08:31:00", "upload_time_iso_8601": "2018-12-01T08:31:00.745252Z", "url": "https://files.pythonhosted.org/packages/ef/a9/260f03ae914ed4ebabfd79ff0ce5e9c89520351b1ea4fcdf91760487936c/django_rulebase-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "58d5f9571c9cf7e368c5de1ae7262f3f", "sha256": "acc386a7ab3038e63cf55e8b39a5ef18a8ede0c3ee907c6392dc0fde314c6487"}, "downloads": -1, "filename": "django_rulebase-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "58d5f9571c9cf7e368c5de1ae7262f3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26245, "upload_time": "2018-12-01T13:11:54", "upload_time_iso_8601": "2018-12-01T13:11:54.398531Z", "url": "https://files.pythonhosted.org/packages/f2/1b/91418ddf6ad389071c309445904a47516b949caf8b27604b677d71a5e7cb/django_rulebase-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d392ef030154ad210681e8c8c6953ec5", "sha256": "2d2336d8cd21cbdef6838ce76ee745df165745891a803caa3f1e31cdddc39997"}, "downloads": -1, "filename": "django_rulebase-0.0.7.tar.gz", "has_sig": false, "md5_digest": "d392ef030154ad210681e8c8c6953ec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16402, "upload_time": "2018-12-01T13:11:57", "upload_time_iso_8601": "2018-12-01T13:11:57.606487Z", "url": "https://files.pythonhosted.org/packages/c7/68/a2b6e2782f9d079456f5f3ea229bc65b5692b91f07b4173cd7f1c3a22ef9/django_rulebase-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "bebb37d295435266964cd197483f85c5", "sha256": "0a706afeca8621a793aef1a7ead12b4bba82c84dc56c5c55abe1cdb2a9f7c1e8"}, "downloads": -1, "filename": "django_rulebase-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "bebb37d295435266964cd197483f85c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13758, "upload_time": "2018-12-01T18:48:53", "upload_time_iso_8601": "2018-12-01T18:48:53.624274Z", "url": "https://files.pythonhosted.org/packages/2e/22/fce42d986f9689092b2906c59f30d2a03be7ae9127dc1515fb5f3be8ab80/django_rulebase-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc7078b28dc874a1d23df5de7dc6f85c", "sha256": "57b4014c0d31090e61f2966c6e32f70e9d2e742ead4e4a7013a196a1cac276e3"}, "downloads": -1, "filename": "django_rulebase-0.0.8.tar.gz", "has_sig": false, "md5_digest": "dc7078b28dc874a1d23df5de7dc6f85c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16431, "upload_time": "2018-12-01T18:48:56", "upload_time_iso_8601": "2018-12-01T18:48:56.018359Z", "url": "https://files.pythonhosted.org/packages/1e/8e/657bba62e3aef23908624754ba6dbb0575dbf5b042d9406a58f802e410e5/django_rulebase-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "de61a3c04a179994171adeb5c7c5a02b", "sha256": "a1f37793637c0122104babca0add977ef297b91b6a2fb5e0a2669bc79d79a893"}, "downloads": -1, "filename": "django_rulebase-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "de61a3c04a179994171adeb5c7c5a02b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13839, "upload_time": "2018-12-02T13:15:16", "upload_time_iso_8601": "2018-12-02T13:15:16.332887Z", "url": "https://files.pythonhosted.org/packages/07/cc/43ee097dc0bf2c23ad8dff5ef146e22ce72c7b3192859ef829837c0df943/django_rulebase-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de0583010a3f9cdd6d4c6fcb3d4632d8", "sha256": "7b9751cd8a5eb2e5876d645dc8274825049251008705ffe31cacdef313c2f267"}, "downloads": -1, "filename": "django_rulebase-0.0.9.tar.gz", "has_sig": false, "md5_digest": "de0583010a3f9cdd6d4c6fcb3d4632d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16534, "upload_time": "2018-12-02T13:15:19", "upload_time_iso_8601": "2018-12-02T13:15:19.684245Z", "url": "https://files.pythonhosted.org/packages/12/ff/f4b784ad535471d94da6b16de1912f8155f5fe46bfe820dd6c2854550e87/django_rulebase-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "0f69ad975753e776d463d9890da8a333", "sha256": "9092788082e720d416ad8b213e20bf1bb516aebb265da772f7c3795a166f3f0c"}, "downloads": -1, "filename": "django_rulebase-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f69ad975753e776d463d9890da8a333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14556, "upload_time": "2018-12-11T15:45:01", "upload_time_iso_8601": "2018-12-11T15:45:01.156566Z", "url": "https://files.pythonhosted.org/packages/5a/af/ae45a19f95da655406b67e33ecf905466dfc91716d4fa24cf76cb7a5b556/django_rulebase-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cec70fe4c352460167109d41dbcad363", "sha256": "69ab31ef8dcddab37212346d8bff840ca4f8b9619b6dd9b885b6a3c8cc03dbcb"}, "downloads": -1, "filename": "django_rulebase-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cec70fe4c352460167109d41dbcad363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17620, "upload_time": "2018-12-11T15:45:04", "upload_time_iso_8601": "2018-12-11T15:45:04.113332Z", "url": "https://files.pythonhosted.org/packages/52/d1/e982eda5f917e9de181b3e84ec9d0a4c787bc1847ce1f52226edd1d3af69/django_rulebase-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f69ad975753e776d463d9890da8a333", "sha256": "9092788082e720d416ad8b213e20bf1bb516aebb265da772f7c3795a166f3f0c"}, "downloads": -1, "filename": "django_rulebase-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f69ad975753e776d463d9890da8a333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14556, "upload_time": "2018-12-11T15:45:01", "upload_time_iso_8601": "2018-12-11T15:45:01.156566Z", "url": "https://files.pythonhosted.org/packages/5a/af/ae45a19f95da655406b67e33ecf905466dfc91716d4fa24cf76cb7a5b556/django_rulebase-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cec70fe4c352460167109d41dbcad363", "sha256": "69ab31ef8dcddab37212346d8bff840ca4f8b9619b6dd9b885b6a3c8cc03dbcb"}, "downloads": -1, "filename": "django_rulebase-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cec70fe4c352460167109d41dbcad363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17620, "upload_time": "2018-12-11T15:45:04", "upload_time_iso_8601": "2018-12-11T15:45:04.113332Z", "url": "https://files.pythonhosted.org/packages/52/d1/e982eda5f917e9de181b3e84ec9d0a4c787bc1847ce1f52226edd1d3af69/django_rulebase-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:52 2020"}