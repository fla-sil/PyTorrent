{"info": {"author": "lmb", "author_email": "luominbin@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Fdfs_client py\n\nThe Python interface to the Fastdfs Ver 4.06.\n\n## Installation\n\n    $ sudo python setup.py install\n\n## Getting Started\n\t1. import fdfs_client.client module\n\t2. instantiate class Fdfs_client\n\t3. call memeber functions\n\n    >>> from fdfs_client.client import *\n    >>> client = Fdfs_client('/etc/fdfs/client.conf')\n    >>> ret = client.upload_by_filename('test')\n\t>>> ret\n\t{'Group name':'group1','Status':'Upload successed.', 'Remote file_id':'group1/M00/00/00/\n    \twKjzh0_xaR63RExnAAAaDqbNk5E1398.py','Uploaded size':'6.0KB','Local file name':'test'\n\t\t, 'Storage IP':'192.168.243.133'}\n\n## API Reference\n\nClass Fdfs_client:\n\nmember functions:\n\n* upload_by_filename(self, filename, meta_dict = None)\n  '''\n  Upload a file to Storage server.\n  arguments:\n        @filename: string, name of file that will be uploaded\n        @meta_dict: dictionary e.g.:{\n            'ext_name'  : 'jpg',\n            'file_size' : '10240B',\n            'width'     : '160px',\n            'hight'     : '80px'\n        } meta_dict can be null\n        @return dict {\n            'Group name'      : group_name,\n            'Remote file_id'  : remote_file_id,\n            'Status'          : 'Upload successed.',\n            'Local file name' : local_file_name,\n            'Uploaded size'   : upload_size,\n            'Storage IP'      : storage_ip\n        } if success else None\n\n* upload_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)\n  '''\n  Upload a buffer to Storage server.\n  arguments:\n        @filebuffer: string, buffer\n        @file_ext_name: string, file extend name\n        @meta_dict: dictionary e.g.:{\n            'ext_name'  : 'jpg',\n            'file_size' : '10240B',\n            'width'     : '160px',\n            'hight'     : '80px'\n        }\n        @return dict {\n            'Group name'      : group_name,\n            'Remote file_id'  : remote_file_id,\n            'Status'          : 'Upload successed.',\n            'Local file name' : '',\n            'Uploaded size'   : upload_size,\n            'Storage IP'      : storage_ip\n        }\n  '''\n\n* upload_slave_by_filename(self, filename, remote_file_id, prefix_name, \\\n                                 meta_dict = None)\n  '''\n  Upload slave file to Storage server.\n  arguments:\n       @filename: string, local file name\n       @remote_file_id: string, remote file id\n       @prefix_name: string\n       @meta_dict: dictionary e.g.:{\n           'ext_name'  : 'jpg',\n           'file_size' : '10240B',\n           'width'     : '160px',\n           'hight'     : '80px'\n       }\n       @return dictionary {\n           'Status'        : 'Upload slave successed.',\n           'Local file name' : local_filename,\n           'Uploaded size'   : upload_size,\n           'Remote file id'  : remote_file_id,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* upload_slave_by_buffer(self, filebuffer, remote_file_id, \\\n                               meta_dict = None, file_ext_name = None)\n  '''\n  Upload slave file by buffer\n  arguments:\n       @filebuffer: string\n       @remote_file_id: string\n       @meta_dict: dictionary e.g.:{\n           'ext_name'  : 'jpg',\n           'file_size' : '10240B',\n           'width'     : '160px',\n           'hight'     : '80px'\n       }\n       @return dictionary {\n           'Status'        : 'Upload slave successed.',\n           'Local file name' : local_filename,\n           'Uploaded size'   : upload_size,\n           'Remote file id'  : remote_file_id,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* upload_appender_by_filename(self, local_filename, meta_dict = None)\n  '''\n  Upload an appender file by filename.\n  arguments:\n       @local_filename: string\n       @meta_dict: dictionary e.g.:{\n           'ext_name'  : 'jpg',\n           'file_size' : '10240B',\n           'width'     : '160px',\n           'hight'     : '80px'\n       }    Notice: it can be null\n       @return dict {\n           'Group name'      : group_name,\n           'Remote file_id'  : remote_file_id,\n           'Status'          : 'Upload successed.',\n           'Local file name' : '',\n           'Uploaded size'   : upload_size,\n           'Storage IP'      : storage_ip\n\t   }\n  '''\n\n* upload_appender_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)\n  '''\n  Upload a buffer to Storage server.\n  arguments:\n       @filebuffer: string\n       @file_ext_name: string, can be null\n       @meta_dict: dictionary, can be null\n       @return dict {\n           'Group name'      : group_name,\n           'Remote file_id'  : remote_file_id,\n           'Status'          : 'Upload successed.',\n           'Local file name' : '',\n           'Uploaded size'   : upload_size,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* delete_file(self, remote_file_id)\n  '''\n  Delete a file from Storage server.\n  arguments:\n       @remote_file_id: string, file_id of file that is on storage server\n       @return tuple ('Delete file successed.', remote_file_id, storage_ip)\n  '''\n\n* download_to_file(self, local_filename, remote_file_id, offset = 0, down_bytes = 0)\n  '''\n  Download a file from Storage server.\n  arguments:\n       @local_filename: string, local name of file \n       @remote_file_id: string, file_id of file that is on storage server\n\t   @offset: long\n\t   @down_bytes: long\n       @return dict {\n           'Remote file_id'  : remote_file_id,\n           'Content'         : local_filename,\n           'Download size'   : downloaded_size,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* download_to_buffer(self, remote_file_id, offset = 0, down_bytes = 0)\n  '''\n  Download a file from Storage server and store in buffer.\n  arguments:\n\t   @remote_file_id: string, file_id of file that is on storage server\n  \t   @offset: long\n\t   @down_bytes: long\n       @return dict {\n           'Remote file_id'  : remote_file_id,\n           'Content'         : file_buffer,\n           'Download size'   : downloaded_size,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* list_one_group(self, group_name)\n  '''\n  List one group information.\n  arguments:\n       @group_name: string, group name will be list\n       @return Group_info,  instance\n  '''\n\n* list_all_groups(self)\n  '''\n  List all group information.\n       @return dictionary {\n           'Groups count' : group_count,\n           'Groups'       : list of groups\n       }\n  '''\n\n* list_servers(self, group_name, storage_ip = None)\n  '''\n  List all storage servers information in a group\n  arguments:\n       @group_name: string\n       @return dictionary {\n           'Group name' : group_name,\n           'Servers'    : server list,\n       }\n  '''\n\n* get_meta_data(self, remote_file_id)\n  '''\n  Get meta data of remote file.\n  arguments:\n       @remote_fileid: string, remote file id\n       @return dictionary, meta data\n  '''\n\n* set_meta_data(self, remote_file_id, \\\n                      meta_dict, op_flag = STORAGE_SET_METADATA_FLAG_OVERWRITE)\n  '''\n  Set meta data of remote file.\n  arguments:\n       @remote_file_id: string\n       @meta_dict: dictionary\n       @op_flag: char, 'O' for overwrite, 'M' for merge\n       @return dictionary {\n           'Status'     : status,\n           'Storage IP' : storage_ip\n       }\n  '''\n\n* append_by_filename(self, local_filename, remote_fileid)\n  '''\n  Append a file of Storage server\n  arguments:\n       @local_filename: string\n  \t   @remote_fileid: string\n       @return dict {\n           'Group name'      : group_name,\n           'Remote file_id'  : remote_file_id,\n           'Status'          : 'Upload successed.',\n           'Local file name' : '',\n           'Uploaded size'   : upload_size,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* append_by_buffer(self, file_buffer, remote_fileid)\n  '''\n  Append a file of Storage server\n  arguments:\n       @file_buffer: string\n  \t   @remote_fileid: string\n       @return dict {\n           'Group name'      : group_name,\n           'Remote file_id'  : remote_file_id,\n           'Status'          : 'Upload successed.',\n           'Local file name' : '',\n           'Uploaded size'   : upload_size,\n           'Storage IP'      : storage_ip\n       }\n  '''\n\n* truncate_file(self, truncated_filesize, appender_fileid)\n  '''\n  Truncate file in Storage server.\n  arguments:\n       @truncated_filesize: long\n       @appender_fileid: remote_fileid\n       @return: dictionary {\n           'Status'     : 'Truncate successed.',\n           'Storage IP' : storage_ip\n       }\n  '''\n\t   \n* modify_by_filename(self, filename, appender_fileid, offset = 0)\n  '''\n  Modify a file in Storage server by filename.\n  arguments:\n       @filename: string, local file name\n       @offset: long, file offset\n       @appender_fileid: string, remote file id\n       @return: dictionary {\n           'Status'     : 'Modify successed.',\n           'Storage IP' : storage_ip\n       }\n  '''\n\n* modify_by_buffer(self, filebuffer, appender_fileid, offset = 0)\n  '''\n  Modify a file in Storage server by buffer.\n  arguments:\n       @filebuffer: string, file buffer\n       @offset: long, file offset\n       @appender_fileid: string, remote file id\n       @return: dictionary {\n           'Status'     : 'Modify successed.',\n           'Storage IP' : storage_ip\n       }\n  '''\n\n### Connection Pools\n\nBehind the scenes, fdfs_client-py uses a connection pool to manage connections to\nsets of tracker server and storage server.\n\n\n## Versioning scheme\n\nfdfs_client-py ver 1.2.7b support client protol of Fastdfs ver 4.06.\nPython must be ver 2.6 later.\n\nAuthor\n------\n\nfdfs_client-py is developed and maintained by scott yuan (scottzer8@gmail.com)\n\nfdfs_client-py is bug fixed and maintained by hay86\n\nIt can be found here: http://github.com/hay86/fdfs_client-py\n\nSpecial thanks to:\n\n* Andy Mccurdy, author of redis-py, referenced his code.\n* g.rodola, author sendfile module for python, g.rodola@gmail.com\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "Fastdfs", "license": "GPLV3", "maintainer": "", "maintainer_email": "", "name": "fdfs_client", "package_url": "https://pypi.org/project/fdfs_client/", "platform": "", "project_url": "https://pypi.org/project/fdfs_client/", "project_urls": null, "release_url": "https://pypi.org/project/fdfs_client/4.0.7/", "requires_dist": null, "requires_python": "", "summary": "Python client for Fastdfs ver 4.07", "version": "4.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Fdfs_client py<br><br>The Python interface to the Fastdfs Ver 4.06.<br><br>## Installation<br><br>    $ sudo python setup.py install<br><br>## Getting Started<br>\t1. import fdfs_client.client module<br>\t2. instantiate class Fdfs_client<br>\t3. call memeber functions<br><br>    &gt;&gt;&gt; from fdfs_client.client import *<br>    &gt;&gt;&gt; client = Fdfs_client('/etc/fdfs/client.conf')<br>    &gt;&gt;&gt; ret = client.upload_by_filename('test')<br>\t&gt;&gt;&gt; ret<br>\t{'Group name':'group1','Status':'Upload successed.', 'Remote file_id':'group1/M00/00/00/<br>    \twKjzh0_xaR63RExnAAAaDqbNk5E1398.py','Uploaded size':'6.0KB','Local file name':'test'<br>\t\t, 'Storage IP':'192.168.243.133'}<br><br>## API Reference<br><br>Class Fdfs_client:<br><br>member functions:<br><br>* upload_by_filename(self, filename, meta_dict = None)<br>  '''<br>  Upload a file to Storage server.<br>  arguments:<br>        @filename: string, name of file that will be uploaded<br>        @meta_dict: dictionary e.g.:{<br>            'ext_name'  : 'jpg',<br>            'file_size' : '10240B',<br>            'width'     : '160px',<br>            'hight'     : '80px'<br>        } meta_dict can be null<br>        @return dict {<br>            'Group name'      : group_name,<br>            'Remote file_id'  : remote_file_id,<br>            'Status'          : 'Upload successed.',<br>            'Local file name' : local_file_name,<br>            'Uploaded size'   : upload_size,<br>            'Storage IP'      : storage_ip<br>        } if success else None<br><br>* upload_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)<br>  '''<br>  Upload a buffer to Storage server.<br>  arguments:<br>        @filebuffer: string, buffer<br>        @file_ext_name: string, file extend name<br>        @meta_dict: dictionary e.g.:{<br>            'ext_name'  : 'jpg',<br>            'file_size' : '10240B',<br>            'width'     : '160px',<br>            'hight'     : '80px'<br>        }<br>        @return dict {<br>            'Group name'      : group_name,<br>            'Remote file_id'  : remote_file_id,<br>            'Status'          : 'Upload successed.',<br>            'Local file name' : '',<br>            'Uploaded size'   : upload_size,<br>            'Storage IP'      : storage_ip<br>        }<br>  '''<br><br>* upload_slave_by_filename(self, filename, remote_file_id, prefix_name, \\<br>                                 meta_dict = None)<br>  '''<br>  Upload slave file to Storage server.<br>  arguments:<br>       @filename: string, local file name<br>       @remote_file_id: string, remote file id<br>       @prefix_name: string<br>       @meta_dict: dictionary e.g.:{<br>           'ext_name'  : 'jpg',<br>           'file_size' : '10240B',<br>           'width'     : '160px',<br>           'hight'     : '80px'<br>       }<br>       @return dictionary {<br>           'Status'        : 'Upload slave successed.',<br>           'Local file name' : local_filename,<br>           'Uploaded size'   : upload_size,<br>           'Remote file id'  : remote_file_id,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* upload_slave_by_buffer(self, filebuffer, remote_file_id, \\<br>                               meta_dict = None, file_ext_name = None)<br>  '''<br>  Upload slave file by buffer<br>  arguments:<br>       @filebuffer: string<br>       @remote_file_id: string<br>       @meta_dict: dictionary e.g.:{<br>           'ext_name'  : 'jpg',<br>           'file_size' : '10240B',<br>           'width'     : '160px',<br>           'hight'     : '80px'<br>       }<br>       @return dictionary {<br>           'Status'        : 'Upload slave successed.',<br>           'Local file name' : local_filename,<br>           'Uploaded size'   : upload_size,<br>           'Remote file id'  : remote_file_id,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* upload_appender_by_filename(self, local_filename, meta_dict = None)<br>  '''<br>  Upload an appender file by filename.<br>  arguments:<br>       @local_filename: string<br>       @meta_dict: dictionary e.g.:{<br>           'ext_name'  : 'jpg',<br>           'file_size' : '10240B',<br>           'width'     : '160px',<br>           'hight'     : '80px'<br>       }    Notice: it can be null<br>       @return dict {<br>           'Group name'      : group_name,<br>           'Remote file_id'  : remote_file_id,<br>           'Status'          : 'Upload successed.',<br>           'Local file name' : '',<br>           'Uploaded size'   : upload_size,<br>           'Storage IP'      : storage_ip<br>\t   }<br>  '''<br><br>* upload_appender_by_buffer(self, filebuffer, file_ext_name = None, meta_dict = None)<br>  '''<br>  Upload a buffer to Storage server.<br>  arguments:<br>       @filebuffer: string<br>       @file_ext_name: string, can be null<br>       @meta_dict: dictionary, can be null<br>       @return dict {<br>           'Group name'      : group_name,<br>           'Remote file_id'  : remote_file_id,<br>           'Status'          : 'Upload successed.',<br>           'Local file name' : '',<br>           'Uploaded size'   : upload_size,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* delete_file(self, remote_file_id)<br>  '''<br>  Delete a file from Storage server.<br>  arguments:<br>       @remote_file_id: string, file_id of file that is on storage server<br>       @return tuple ('Delete file successed.', remote_file_id, storage_ip)<br>  '''<br><br>* download_to_file(self, local_filename, remote_file_id, offset = 0, down_bytes = 0)<br>  '''<br>  Download a file from Storage server.<br>  arguments:<br>       @local_filename: string, local name of file <br>       @remote_file_id: string, file_id of file that is on storage server<br>\t   @offset: long<br>\t   @down_bytes: long<br>       @return dict {<br>           'Remote file_id'  : remote_file_id,<br>           'Content'         : local_filename,<br>           'Download size'   : downloaded_size,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* download_to_buffer(self, remote_file_id, offset = 0, down_bytes = 0)<br>  '''<br>  Download a file from Storage server and store in buffer.<br>  arguments:<br>\t   @remote_file_id: string, file_id of file that is on storage server<br>  \t   @offset: long<br>\t   @down_bytes: long<br>       @return dict {<br>           'Remote file_id'  : remote_file_id,<br>           'Content'         : file_buffer,<br>           'Download size'   : downloaded_size,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* list_one_group(self, group_name)<br>  '''<br>  List one group information.<br>  arguments:<br>       @group_name: string, group name will be list<br>       @return Group_info,  instance<br>  '''<br><br>* list_all_groups(self)<br>  '''<br>  List all group information.<br>       @return dictionary {<br>           'Groups count' : group_count,<br>           'Groups'       : list of groups<br>       }<br>  '''<br><br>* list_servers(self, group_name, storage_ip = None)<br>  '''<br>  List all storage servers information in a group<br>  arguments:<br>       @group_name: string<br>       @return dictionary {<br>           'Group name' : group_name,<br>           'Servers'    : server list,<br>       }<br>  '''<br><br>* get_meta_data(self, remote_file_id)<br>  '''<br>  Get meta data of remote file.<br>  arguments:<br>       @remote_fileid: string, remote file id<br>       @return dictionary, meta data<br>  '''<br><br>* set_meta_data(self, remote_file_id, \\<br>                      meta_dict, op_flag = STORAGE_SET_METADATA_FLAG_OVERWRITE)<br>  '''<br>  Set meta data of remote file.<br>  arguments:<br>       @remote_file_id: string<br>       @meta_dict: dictionary<br>       @op_flag: char, 'O' for overwrite, 'M' for merge<br>       @return dictionary {<br>           'Status'     : status,<br>           'Storage IP' : storage_ip<br>       }<br>  '''<br><br>* append_by_filename(self, local_filename, remote_fileid)<br>  '''<br>  Append a file of Storage server<br>  arguments:<br>       @local_filename: string<br>  \t   @remote_fileid: string<br>       @return dict {<br>           'Group name'      : group_name,<br>           'Remote file_id'  : remote_file_id,<br>           'Status'          : 'Upload successed.',<br>           'Local file name' : '',<br>           'Uploaded size'   : upload_size,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* append_by_buffer(self, file_buffer, remote_fileid)<br>  '''<br>  Append a file of Storage server<br>  arguments:<br>       @file_buffer: string<br>  \t   @remote_fileid: string<br>       @return dict {<br>           'Group name'      : group_name,<br>           'Remote file_id'  : remote_file_id,<br>           'Status'          : 'Upload successed.',<br>           'Local file name' : '',<br>           'Uploaded size'   : upload_size,<br>           'Storage IP'      : storage_ip<br>       }<br>  '''<br><br>* truncate_file(self, truncated_filesize, appender_fileid)<br>  '''<br>  Truncate file in Storage server.<br>  arguments:<br>       @truncated_filesize: long<br>       @appender_fileid: remote_fileid<br>       @return: dictionary {<br>           'Status'     : 'Truncate successed.',<br>           'Storage IP' : storage_ip<br>       }<br>  '''<br>\t   <br>* modify_by_filename(self, filename, appender_fileid, offset = 0)<br>  '''<br>  Modify a file in Storage server by filename.<br>  arguments:<br>       @filename: string, local file name<br>       @offset: long, file offset<br>       @appender_fileid: string, remote file id<br>       @return: dictionary {<br>           'Status'     : 'Modify successed.',<br>           'Storage IP' : storage_ip<br>       }<br>  '''<br><br>* modify_by_buffer(self, filebuffer, appender_fileid, offset = 0)<br>  '''<br>  Modify a file in Storage server by buffer.<br>  arguments:<br>       @filebuffer: string, file buffer<br>       @offset: long, file offset<br>       @appender_fileid: string, remote file id<br>       @return: dictionary {<br>           'Status'     : 'Modify successed.',<br>           'Storage IP' : storage_ip<br>       }<br>  '''<br><br>### Connection Pools<br><br>Behind the scenes, fdfs_client-py uses a connection pool to manage connections to<br>sets of tracker server and storage server.<br><br><br>## Versioning scheme<br><br>fdfs_client-py ver 1.2.7b support client protol of Fastdfs ver 4.06.<br>Python must be ver 2.6 later.<br><br>Author<br>------<br><br>fdfs_client-py is developed and maintained by scott yuan (scottzer8@gmail.com)<br><br>fdfs_client-py is bug fixed and maintained by hay86<br><br>It can be found here: http://github.com/hay86/fdfs_client-py<br><br>Special thanks to:<br><br>* Andy Mccurdy, author of redis-py, referenced his code.<br>* g.rodola, author sendfile module for python, g.rodola@gmail.com<br><br>\n          </div>"}, "last_serial": 2685203, "releases": {"4.0.7": [{"comment_text": "", "digests": {"md5": "ae67fb366759d5c67a7bb73cf3e2b719", "sha256": "43c888d51b682186c3d9b6f4fbd6a6d55ff5a1f82f9cd96e763c1d767432801e"}, "downloads": -1, "filename": "fdfs_client-4.0.7.tar.gz", "has_sig": false, "md5_digest": "ae67fb366759d5c67a7bb73cf3e2b719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41363, "upload_time": "2017-03-06T07:38:18", "upload_time_iso_8601": "2017-03-06T07:38:18.371700Z", "url": "https://files.pythonhosted.org/packages/b8/1d/d701dbd6830a5b7170655e62acb0977560c61bf4cc6a2185006c68b9e2ec/fdfs_client-4.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae67fb366759d5c67a7bb73cf3e2b719", "sha256": "43c888d51b682186c3d9b6f4fbd6a6d55ff5a1f82f9cd96e763c1d767432801e"}, "downloads": -1, "filename": "fdfs_client-4.0.7.tar.gz", "has_sig": false, "md5_digest": "ae67fb366759d5c67a7bb73cf3e2b719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41363, "upload_time": "2017-03-06T07:38:18", "upload_time_iso_8601": "2017-03-06T07:38:18.371700Z", "url": "https://files.pythonhosted.org/packages/b8/1d/d701dbd6830a5b7170655e62acb0977560c61bf4cc6a2185006c68b9e2ec/fdfs_client-4.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:10 2020"}