{"info": {"author": "Jittor Group", "author_email": "ran.donglang@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Jittor: a Just-in-time(JIT) deep learning framework\n# Jittor: \u5373\u65f6\u7f16\u8bd1\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\n\n[Quickstart](#quickstart) | [Install](#install) | [Tutorial](#tutorial) | [Chinese](./README.cn.md)\n\n[\u5feb\u901f\u5f00\u59cb](#\u5feb\u901f\u5f00\u59cb) | [\u5b89\u88c5](#\u5b89\u88c5) | [\u6559\u7a0b](#\u6559\u7a0b)\n\nJittor is a high-performance deep learning framework based on JIT compiling and meta-operators. The whole framework and meta-operators are compiled just-in-time. A powerful op compiler and tuner are integrated into Jittor. It allowed us to generate high-performance code with specialized for your model.\n\nJittor \u662f\u4e00\u4e2a\u57fa\u4e8e\u5373\u65f6\u7f16\u8bd1\u548c\u5143\u7b97\u5b50\u7684\u9ad8\u6027\u80fd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u6574\u4e2a\u6846\u67b6\u5728\u5373\u65f6\u7f16\u8bd1\u7684\u540c\u65f6\uff0c\u8fd8\u96c6\u6210\u4e86\u5f3a\u5927\u7684Op\u7f16\u8bd1\u5668\u548c\u8c03\u4f18\u5668\uff0c\u4e3a\u60a8\u7684\u6a21\u578b\u751f\u6210\u5b9a\u5236\u5316\u7684\u9ad8\u6027\u80fd\u4ee3\u7801\u3002\n\nThe front-end language is Python. Module Design is used in the front-end, which is the most popular design for deeplearning framework interface. The back-end is implemented by high performance language, such as CUDA,C++.\n\nJittor\u524d\u7aef\u8bed\u8a00\u4e3aPython\u3002\u524d\u7aef\u4f7f\u7528\u4e86\u6a21\u5757\u5316\u7684\u8bbe\u8ba1\uff0c\u8fd9\u662f\u76ee\u524d\u6700\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63a5\u53e3\u8bbe\u8ba1\u3002\u540e\u7aef\u5219\u4f7f\u7528\u9ad8\u6027\u80fd\u8bed\u8a00\u7f16\u5199\uff0c\u5982CUDA\uff0cC++\u3002\n\nThe following example shows how to model a two-layer neural network step by step and train from scratch In a few lines of Python code.\n\n\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528Python\u4ee3\u7801\uff0c\u4ece\u5934\u5bf9\u4e00\u4e2a\u53cc\u5c42\u795e\u7ecf\u7f51\u7edc\u5efa\u6a21\u3002\n\n```python\nimport jittor as jt\nfrom jittor import Module\nfrom jittor import nn\nimport numpy as np\n\nclass Model(Module):\n    def __init__(self):\n        self.layer1 = nn.Linear(1, 10)\n        self.relu = nn.Relu() \n        self.layer2 = nn.Linear(10, 1)\n    def execute (self,x) :\n        x = self.layer1(x)\n        x = self.relu(x)\n        x = self.layer2(x)\n        return x\n\ndef get_data(n): # generate random data for training test.\n    for i in range(n):\n        x = np.random.rand(batch_size, 1)\n        y = x*x\n        yield jt.float32(x), jt.float32(y)\n\n\nlearning_rate = 0.1\nbatch_size = 50\nn = 1000\n\nmodel = Model()\noptim = nn.SGD(model.parameters(), learning_rate)\n\nfor i,(x,y) in enumerate(get_data(n)):\n    pred_y = model(x)\n    dy = pred_y - y\n    loss = dy * dy\n    loss_mean = loss.mean()\n    optim.step(loss_mean)\n    print(f\"step {i}, loss = {loss_mean.data.sum()}\")\n```\n\n## Contents\n\n* [Quickstart](#quickstart)\n* [Install](#install)\n* [Tutorial](#tutorial)\n* [Contributing](#contributing)\n* [The Team](#theteam)\n* [License](#license)\n\n## \u5927\u7eb2\n\n- [\u5feb\u901f\u5f00\u59cb](#\u5feb\u901f\u5f00\u59cb)\n- [\u5b89\u88c5](#\u5b89\u88c5)\n- [\u6559\u7a0b](#\u6559\u7a0b)\n- [\u8d21\u732e](#\u8d21\u732e)\n- [\u56e2\u961f](#\u56e2\u961f)\n- [\u7248\u6743\u58f0\u660e](#\u7248\u6743\u58f0\u660e)\n\n## Quickstart\n\n## \u5feb\u901f\u5f00\u59cb\n\nWe provide some jupyter notebooks to help you quick start with Jittor.\n\n\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9bjupyterr notebooks\u6765\u5e2e\u52a9\u60a8\u5feb\u901f\u5165\u95e8Jittor\u3002\n\n- [Example: Model definition and training][1]\n- [\u793a\u4f8b\uff1a\u6a21\u578b\u5b9a\u4e49\u4e0e\u8bad\u7ec3][1]\n- [Basics: Op, Var][2]\n- [\u57fa\u7840\uff1aOp, Var][2]\n- [Meta-operator: Implement your own convolution with Meta-operator][3]\n- [\u5143\u7b97\u5b50\uff1a\u901a\u8fc7\u5143\u7b97\u5b50\u5b9e\u73b0\u81ea\u5df1\u7684\u5377\u79ef\u5c42][3]\n\n## Install\n\n## \u5b89\u88c5\n\nJittor is written in Python and C++. It requires a compiler for JIT compilation, Currently, we support four compilers:\n\nJittor\u4f7f\u7528Python\u548cC++\u7f16\u5199\u3002 \u5b83\u9700\u8981\u7528\u4e8e\u5373\u65f6\u7f16\u8bd1\u7684\u7f16\u8bd1\u5668\u3002\u5f53\u524d\uff0c\u6211\u4eec\u652f\u6301\u4e09\u79cd\u7f16\u8bd1\u5668\uff1a\n\n* CPU compiler (require at least one of the following)\n    * g++ (>=5.4.0)\n    * clang (>=8.0) recommend\n* CPU \u7f16\u8bd1\u5668 \uff08\u9700\u8981\u4e0b\u5217\u81f3\u5c11\u4e00\u4e2a\uff09\n    - g++ \uff08>=5.4.0\uff09\n    - clang \uff08>=8.0\uff09\u63a8\u8350\n* GPU compiler (optional)\n    * nvcc (>=10.0)\n* GPU \u7f16\u8bd1\u5668\uff08\u53ef\u9009\uff09\n    - nvcc\uff08>=10.0\uff09\n\nJittor\u7684\u73af\u5883\u8981\u6c42\u5982\u4e0b:\n\n* \u64cd\u4f5c\u7cfb\u7edf: Ubuntu >= 16.04\n* Python\u7248\u672c >= 3.7\n* C++\u7f16\u8bd1\u5668\uff08g++ or clang\uff09\n\nJittor environment requirements:\n\n* System: Ubuntu >= 16.04\n* Python version >= 3.7\n* C++ compiler(g++ or clang)\n\nJittor offers three ways to install: pip, script or manual.\n\nJittor \u4e00\u5171\u63d0\u4f9b\u4e09\u79cd\u65b9\u5f0f\u5b89\u88c5: pip\u5b89\u88c5, \u4e00\u952e\u811a\u672c\u5b89\u88c5 \u548c \u624b\u52a8\u5b89\u88c5.\n\n## Pip \u5b89\u88c5\n\n## Pip install\n\n\u5982\u679c\u60a8\u6ca1\u6709\u51c6\u5907\u597d\u73af\u5883\uff0c\u6b22\u8fce\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u952e\u5b89\u88c5\u811a\u672c\uff0c \u5982\u679c\u60a8\u5df2\u7ecf\u88c5\u597d\u7f16\u8bd1\u5668\u548c\u5bf9\u5e94\u7248\u672c\u7684Python,\u6211\u4eec\u5f3a\u70c8\u63a8\u8350\u60a8\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\n(\u5982\u679c\u65e0\u6cd5\u8bbf\u95eegithub, \u53ef\u4ee5\u901a\u8fc7jittor\u4e3b\u9875\u4e0b\u8f7d):\n\n```bash\nsudo apt install python3.7-dev libomp-dev\nsudo python3.7 -m pip install git+https://github.com/Jittor/jittor.git\n# if you cannot access github, please download code from our website:\n#     wget https://cg.cs.tsinghua.edu.cn/jittor/assets/build/jittor.tgz\n#     mkdir -p jittor && tar -xvf ./jittor.tgz -C jittor\n#     sudo pip install ./jittor\npython3.7 -m jittor.test.test_example\n```\n\n\u5982\u679c\u6d4b\u8bd5\u8fd0\u884c\u901a\u8fc7,\u606d\u559c\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210.\njittor\u4f1a\u81ea\u52a8\u5728\u8def\u5f84\u4e2d\u5bfb\u627e\u5408\u9002\u7684\u7f16\u8bd1\u5668, \u5982\u679c\u60a8\u5e0c\u671b\u624b\u52a8\u6307\u5b9a\u7f16\u8bd1\u5668, \u8bf7\u4f7f\u7528\u73af\u5883\u53d8\u91cf `cc_path` \u548c `nvcc_path`(\u53ef\u9009).\n\n## \u4e00\u952e\u811a\u672c\u5b89\u88c5\n## single line script install\n\n\u4e00\u952e\u811a\u672c\u5b89\u88c5\u4f1a\u5e2e\u60a8\u5b89\u88c5\u597d\u6240\u9700\u7684\u7f16\u8bd1\u5668\u4ee5\u53ca\u5bf9\u5e94\u7684Python\u7248\u672c.\n\nWe provide single line command for quick installation the latest version of Jittor(Ubuntu>=16.04):\n\n\u6211\u4eec\u63d0\u4f9b\u80fd\u5feb\u901f\u5b89\u88c5\u6700\u65b0\u7248\u672cJittor\u7684\u5355\u884c\u547d\u4ee4\uff08Ubuntu> = 16.04\uff09\uff1a\n\n```bash\n# install with clang and cuda\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh | with_clang=1 with_cuda=1 bash\n# install with clang\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh | with_clang=1 bash\n# install with g++ and cuda\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh | with_gcc=1 with_cuda=1 bash\n# install with g++\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh | with_gcc=1 bash\n```\nAfter execution, the script will show some environment variables you need to export.\n\n\u6267\u884c\u540e\uff0c\u811a\u672c\u5c06\u663e\u793a\u4e00\u4e9b\u9700\u8981\u5bfc\u51fa\u7684\u73af\u5883\u53d8\u91cf\u3002\n\nIf you use Jittor for CPU computing, we strongly recommend clang(>=8.0) as the back-end compiler of Jittor. Because some customized optimizations will be enabled.\n\n\u5982\u679c\u5c06Jittor\u7528\u4e8eCPU\u8ba1\u7b97\uff0c\u5219\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528clang\uff08> = 8.0\uff09\u4f5c\u4e3aJittor\u7684\u540e\u7aef\u7f16\u8bd1\u5668\u3002 \u56e0\u4e3aJittor\u4f1a\u7528\u5230\u5176\u4e2d\u4e00\u4e9b\u5b9a\u5236\u7684\u4f18\u5316\u3002\n\n\n## \u624b\u52a8\u5b89\u88c5\n## manual install\n\nWe will show how to install Jittor in Ubuntu 16.04 step by step, Other Linux distributions may have similar commands.\n\n\u6211\u4eec\u5c06\u9010\u6b65\u6f14\u793a\u5982\u4f55\u5728Ubuntu 16.04\u4e2d\u5b89\u88c5Jittor\uff0c\u5176\u4ed6Linux\u53d1\u884c\u7248\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u547d\u4ee4\u3002\n\n### Step 1: Choose your back-end compiler\n\n### \u6b65\u9aa4\u4e00\uff1a\u9009\u62e9\u60a8\u7684\u540e\u7aef\u7f16\u8bd1\u5668\n\n```bash\n# g++\nsudo apt install g++ build-essential libomp-dev\n\n# OR clang++-8\nwget -O - https://apt.llvm.org/llvm.sh > /tmp/llvm.sh\nbash /tmp/llvm.sh 8\n```\n### Step 2: Install Python and python-dev\n\n### \u6b65\u9aa4\u4e8c\uff1a\u5b89\u88c5Python\u548cpython-dev\n\nJittor need python version >= 3.7.\n\nJittor\u9700\u8981python\u7684\u7248\u672c>=3.7\u3002\n\n```bash\nsudo apt install python3.7 python3.7-dev\n```\n\n### Step 3: Run Jittor\n\n### \u6b65\u9aa4\u4e09\uff1a\u8fd0\u884cJittor\n\nThe whole framework is compiled Just-in-time. Let's install jittor via pip\n\n\u6574\u4e2a\u6846\u67b6\u662f\u53ca\u65f6\u7f16\u8bd1\u7684\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7pip\u5b89\u88c5jittor\n\n```bash\ngit clone https://github.com/Jittor/jittor.git\nsudo pip3.7 install ./jittor\nexport cc_path=\"clang++-8\"\n# if other compiler is used, change cc_path\n# export cc_path=\"g++\"\n# export cc_path=\"icc\"\n\n# run a simple test\npython3.7 -m jittor.test.test_example\n```\nif the test is passed, your Jittor is ready.\n\n\u5982\u679c\u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u90a3\u4e48\u60a8\u7684Jittor\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\u3002\n\n### Optional Step 4: Enable CUDA\n\n### \u53ef\u9009\u6b65\u9aa4\u56db\uff1a\u542f\u7528CUDA\n\nUsing CUDA in Jittor is very simple, Just setup environment value `nvcc_path`\n\n\u5728Jittor\u4e2d\u4f7f\u7528CUDA\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8bbe\u7f6e\u73af\u5883\u503c`nvcc_path`\n\n```bash\n# replace this var with your nvcc location \nexport nvcc_path=\"/usr/local/cuda/bin/nvcc\" \n# run a simple cuda test\npython3.7 -m jittor.test.test_cuda \n```\nif the test is passed, your can use Jittor with CUDA by setting `use_cuda` flag.\n\n\u5982\u679c\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e`use_cuda`\u6807\u8bc6\u7b26\u5728Jittor\u4e2d\u542f\u7528CUDA\u3002\n\n```python\nimport jittor as jt\njt.flags.use_cuda = 1\n```\n\n### Optional Step 5: Run full tests\n\n### \u53ef\u9009\u6b65\u9aa4\u4e94\uff1a\u8fdb\u884c\u5b8c\u6574\u6d4b\u8bd5\n\nTo check the integrity of Jittor, you can run full tests.\n\n\u8981\u68c0\u67e5Jittor\u7684\u5b8c\u6574\u6027\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u5b8c\u6574\u7684\u6d4b\u8bd5\u3002\n\n```bash\npython3.7 -m jittor.test -v\n```\nif those tests are failed, please report bugs for us, and feel free to contribute ^_^\n\n\u5982\u679c\u8fd9\u4e9b\u6d4b\u8bd5\u5931\u8d25\uff0c\u8bf7\u4e3a\u6211\u4eec\u62a5\u544a\u9519\u8bef\uff0c\u6211\u4eec\u5341\u5206\u6b22\u8fce\u60a8\u4e3aJittor\u505a\u51fa\u8d21\u732e^ _ ^\n\n## Tutorial\n\n## \u6559\u7a0b\n\nIn the tutorial section, we will briefly explain the basic concept of Jittor.\n\n\u5728\u6559\u7a0b\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u89e3\u91caJittor\u7684\u57fa\u672c\u6982\u5ff5\u3002\n\nTo train your model with Jittor, there are only three main concepts you need to know:\n\n\u8981\u4f7f\u7528Jittor\u8bad\u7ec3\u6a21\u578b\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4e24\u4e2a\u4e3b\u8981\u6982\u5ff5\uff1a\n\n* Var: basic data type of jittor\n* Var\uff1aJittor\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\n* Operations: Jittor'op is simular with numpy\n* Operations\uff1aJittor\u7684\u7b97\u5b50\u4e0enumpy\u7c7b\u4f3c\n\n### Var\n\n### \u6570\u636e\u7c7b\u578b\n\nFirst, let's get started with Var. Var is the basic data type of jittor. Computation process in Jittor is asynchronous for optimization. If you want to access the data, `Var.data` can be used for synchronous data accessing.\n\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u4f7f\u7528Var\u3002Var\u662fjittor\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u4e3a\u4e86\u8fd0\u7b97\u66f4\u52a0\u9ad8\u6548Jittor\u4e2d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u662f\u5f02\u6b65\u7684\u3002 \u5982\u679c\u8981\u8bbf\u95ee\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528`Var.data`\u8fdb\u884c\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u3002\n\n```python\nimport jittor as jt\na = jt.float32([1,2,3])\nprint (a)\nprint (a.data)\n# Output: float32[3,]\n# Output: [ 1. 2. 3.]\n```\n\nAnd we can give the variable a name.\n\n\u6b64\u5916\u6211\u4eec\u53ef\u4ee5\u7ed9\u53d8\u91cf\u8d77\u4e00\u4e2a\u540d\u5b57\u3002\n\n```python\nc.name('c')\nprint(c.name())\n# Output: c\n```\n\n###Operations\n\n### \u6570\u636e\u8fd0\u7b97\n\nJittor'op is simular with numpy. Let's try some operations. We create Var `a` and `b` via operation `jt.float32`, and add them. Printing those variables shows they have the same shape and dtype.\n\n Jittor\u7684\u7b97\u5b50\u4e0enumpy\u7c7b\u4f3c\u3002 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e9b\u8fd0\u7b97\uff0c \u6211\u4eec\u901a\u8fc7Op`jt.float32`\u521b\u5efaVar `a`\u548c`b`\uff0c\u5e76\u5c06\u5b83\u4eec\u76f8\u52a0\u3002 \u8f93\u51fa\u8fd9\u4e9b\u53d8\u91cf\u76f8\u5173\u4fe1\u606f\uff0c\u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u548c\u7c7b\u578b\u3002\n\n```python\nimport jittor as jt\na = jt.float32([1,2,3])\nb = jt.float32([4,5,6])\nc = a*b\nprint(a,b,c)\nprint(type(a), type(b), type(c))\n# Output: float32[3,] float32[3,] float32[3,]\n# Output: <class 'jittor_core.Var'> <class 'jittor_core.Var'> <class 'jittor_core.Var'>\n```\nBeside that, All the operators we used `jt.xxx(Var, ...)` have alias `Var.xxx(...)`. For example:\n\n\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6240\u6709\u7b97\u5b50`jt.xxx(Var,...)`\u90fd\u5177\u6709\u522b\u540d`Var.xxx(...)`\u3002 \u4f8b\u5982\uff1a\n\n```python\nc.max() # alias of jt.max(c)\nc.add(a) # alias of jt.add(c, a)\nc.min(keepdims=True) # alias of jt.min(c, keepdims=True)\n```\n\nif you want to know all the operation which Jittor supports. try `help(jt.ops)`. All the operation you found in `jt.ops.xxx`, can be used via alias `jt.xxx`.\n\n\u5982\u679c\u60a8\u60f3\u77e5\u9053Jittor\u652f\u6301\u7684\u6240\u6709\u8fd0\u7b97\uff0c\u53ef\u4ee5\u8fd0\u884c`help(jt.ops)`\u3002 \u60a8\u5728`jt.ops.xxx`\u4e2d\u627e\u5230\u7684\u6240\u6709\u8fd0\u7b97\u90fd\u53ef\u4ee5\u901a\u8fc7\u522b\u540d`jt.xxx`\u3002\n\n```python\nhelp(jt.ops)\n# Output:\n#   abs(x: core.Var) -> core.Var\n#   add(x: core.Var, y: core.Var) -> core.Var\n#   array(data: array) -> core.Var\n#   binary(x: core.Var, y: core.Var, op: str) -> core.Var\n#   ......\n```\n### More\n\n### \u66f4\u591a\u6559\u7a0b\n\nIf you want to know more about Jittor, please check out the notebooks below:\n\n\u5982\u679c\u60a8\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3Jittor\uff0c\u8bf7\u67e5\u770b\u4ee5\u4e0bnotebooks\uff1a\n\n* Quickstart\n    - [Example: Model definition and training][1]\n    - [Basics: Op, Var][2]\n    - [Meta-operator: Implement your own convolution with Meta-operator][3]\n* \u5feb\u901f\u5f00\u59cb\n    * [\u793a\u4f8b\uff1a\u6a21\u578b\u5b9a\u4e49\u4e0e\u8bad\u7ec3][1]\n    * [\u57fa\u672c\u6982\u5ff5\uff1aOp, Var][2]\n    * [\u5143\u7b97\u5b50\uff1a\u901a\u8fc7\u5143\u7b97\u5b50\u5b9e\u73b0\u81ea\u5df1\u7684\u5377\u79ef\u5c42][3]\n* Advanced\n    - [Custom Op: write your operator with C++ and CUDA and JIT compile it][4]\n    - [Profiler: Profiling your model][5]\n    - Jtune: Tool for performance tuning\n* \u8fdb\u9636\n    * [\u81ea\u5b9a\u4e49\u7b97\u5b50\uff1a\u4f7f\u7528C ++\u548cCUDA\u7f16\u5199\u60a8\u7684\u7b97\u5b50\uff0c\u5e76\u5176\u8fdb\u884c\u5373\u65f6\u7f16\u8bd1][4]\n    * [\u6027\u80fd\u5206\u6790\u5668\uff1a\u5206\u6790\u60a8\u7684\u6a21\u578b][5]\n    * Jtune\uff1a\u6027\u80fd\u8c03\u4f18\u5de5\u5177\n\n\n\n[1]: notebook/example.src.md\t\"example\"\n[2]: notebook/basics.src.md\t\"basics\"\n[3]: notebook/meta_op.src.md\t\"meta_op\"\n[4]: notebook/custom_op.src.md\t\"custom_op\"\n[5]: notebook/profiler.src.md\t\"profiler\"\n[1]: notebook/example.src.md\t\"\u793a\u4f8b\"\n[2]: notebook/basics.src.md\t\"\u57fa\u672c\u6982\u5ff5\"\n[3]: notebook/meta_op.src.md\t\"\u5143\u7b97\u5b50\"\n[4]: notebook/custom_op.src.md\t\"\u81ea\u5b9a\u4e49\u7b97\u5b50\"\n[5]: notebook/profiler.src.md\t\"\u6027\u80fd\u5206\u6790\u5668\"\n\nThose notebooks can be started in your own computer by `python3.7 -m jittor.notebook`\n\n\u8fd9\u4e9bnotebooks\u53ef\u4ee5\u901a\u8fc7python3.7 -m jittor.notebook\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e2d\u8fd0\u884c\u3002\n\n## Contributing\n\n## \u8d21\u732e\n\nJittor is still young. It may contain bugs and issues. Please report them in our bug track system. Contributions are welcome. Besides, if you have any ideas about Jittor, please let us know.\n\nJittor\u8fd8\u5f88\u5e74\u8f7b\u3002 \u5b83\u53ef\u80fd\u5b58\u5728\u9519\u8bef\u548c\u95ee\u9898\u3002 \u8bf7\u5728\u6211\u4eec\u7684\u9519\u8bef\u8ddf\u8e2a\u7cfb\u7edf\u4e2d\u62a5\u544a\u5b83\u4eec\u3002 \u6211\u4eec\u6b22\u8fce\u60a8\u4e3aJittor\u505a\u51fa\u8d21\u732e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u60a8\u5bf9Jittor\u6709\u4efb\u4f55\u60f3\u6cd5\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\u3002\n\n\u60a8\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5e2e\u52a9Jittor\uff1a\n\n* \u5728\u8bba\u6587\u4e2d\u5f15\u7528 Jittor\n* \u5411\u8eab\u8fb9\u7684\u597d\u670b\u53cb\u63a8\u8350 Jittor\n* \u8d21\u732e\u4ee3\u7801\n* \u8d21\u732e\u6559\u7a0b\u548c\u6587\u6863\n* \u63d0\u51faissue\n* \u56de\u7b54 jittor \u76f8\u5173\u95ee\u9898\n* \u70b9\u4eae\u5c0f\u661f\u661f\n* \u6301\u7eed\u5173\u6ce8 jittor\n* \u2026\u2026\n\nYou can help Jittor in the following ways:\n\n* Citing Jittor in your paper\n* recommend Jittor to your friends\n* Contributing code\n* Contributed tutorials and documentation\n* File an issue\n* Answer jittor related questions\n* Light up the stars\n* Keep an eye on jittor\n* ......\n\n## Contact Us\n\n## \u8054\u7cfb\u6211\u4eec\n\n\u5b98\u65b9\u4e3b\u9875\uff1a http://cg.cs.tsinghua.edu.cn/jittor/\n\n\u7535\u5b50\u90ae\u4ef6\uff1ajittor@qq.com\n\n\u63d0\u51faissue\uff1ahttps://github.com/Jittor/jittor/issues\n\nWebsite: http://cg.cs.tsinghua.edu.cn/jittor/\n\nEmail: jittor@qq.com\n\nFile an issue: https://github.com/Jittor/jittor/issues\n\n## The Team\n\n## \u56e2\u961f\n\nJittor is currently maintained by Dun Liang, Guo-Ye Yang, Guo-Wei Yang and Wen-Yang Zhou etc. from the [Tsinghua CSCG Group](https://cg.cs.tsinghua.edu.cn/). If you are also interested in Jittor and want to improve it, Please join us!\n\nJittor\u76ee\u524d\u7531\u6765\u81ea[\u6e05\u534e\u5927\u5b66\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7ec4](https://cg.cs.tsinghua.edu.cn/)\u7684\u6881\u76fe\uff0c\u6768\u56fd\u70e8\uff0c\u6768\u56fd\u709c\u548c\u5468\u6587\u6d0b\u7b49\u535a\u58eb\u751f\u7ef4\u62a4\u3002 \u5982\u679c\u60a8\u4e5f\u5bf9Jittor\u611f\u5174\u8da3\u5e76\u5e0c\u671b\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\uff0c\u8bf7\u52a0\u5165\u6211\u4eec\uff01\n\n## License\n\n## \u7248\u6743\u58f0\u660e\n\nJittor is Apache 2.0 licensed, as found in the LICENSE.txt file.\n\n\u5982LICENSE.txt\u6587\u4ef6\u4e2d\u6240\u793a\uff0cJittor\u4f7f\u7528Apache 2.0\u7248\u6743\u534f\u8bae\u3002", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://jittor.org", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jittor", "package_url": "https://pypi.org/project/jittor/", "platform": "", "project_url": "https://pypi.org/project/jittor/", "project_urls": {"Homepage": "http://jittor.org"}, "release_url": "https://pypi.org/project/jittor/1.0.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "a Just-in-time(JIT) deep learning framework", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Jittor: a Just-in-time(JIT) deep learning framework</h1>\n<h1>Jittor: \u5373\u65f6\u7f16\u8bd1\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6</h1>\n<p><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a> | <a href=\"#install\" rel=\"nofollow\">Install</a> | <a href=\"#tutorial\" rel=\"nofollow\">Tutorial</a> | <a href=\"./README.cn.md\" rel=\"nofollow\">Chinese</a></p>\n<p><a href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\" rel=\"nofollow\">\u5feb\u901f\u5f00\u59cb</a> | <a href=\"#%E5%AE%89%E8%A3%85\" rel=\"nofollow\">\u5b89\u88c5</a> | <a href=\"#%E6%95%99%E7%A8%8B\" rel=\"nofollow\">\u6559\u7a0b</a></p>\n<p>Jittor is a high-performance deep learning framework based on JIT compiling and meta-operators. The whole framework and meta-operators are compiled just-in-time. A powerful op compiler and tuner are integrated into Jittor. It allowed us to generate high-performance code with specialized for your model.</p>\n<p>Jittor \u662f\u4e00\u4e2a\u57fa\u4e8e\u5373\u65f6\u7f16\u8bd1\u548c\u5143\u7b97\u5b50\u7684\u9ad8\u6027\u80fd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u6574\u4e2a\u6846\u67b6\u5728\u5373\u65f6\u7f16\u8bd1\u7684\u540c\u65f6\uff0c\u8fd8\u96c6\u6210\u4e86\u5f3a\u5927\u7684Op\u7f16\u8bd1\u5668\u548c\u8c03\u4f18\u5668\uff0c\u4e3a\u60a8\u7684\u6a21\u578b\u751f\u6210\u5b9a\u5236\u5316\u7684\u9ad8\u6027\u80fd\u4ee3\u7801\u3002</p>\n<p>The front-end language is Python. Module Design is used in the front-end, which is the most popular design for deeplearning framework interface. The back-end is implemented by high performance language, such as CUDA,C++.</p>\n<p>Jittor\u524d\u7aef\u8bed\u8a00\u4e3aPython\u3002\u524d\u7aef\u4f7f\u7528\u4e86\u6a21\u5757\u5316\u7684\u8bbe\u8ba1\uff0c\u8fd9\u662f\u76ee\u524d\u6700\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63a5\u53e3\u8bbe\u8ba1\u3002\u540e\u7aef\u5219\u4f7f\u7528\u9ad8\u6027\u80fd\u8bed\u8a00\u7f16\u5199\uff0c\u5982CUDA\uff0cC++\u3002</p>\n<p>The following example shows how to model a two-layer neural network step by step and train from scratch In a few lines of Python code.</p>\n<p>\u4e0b\u9762\u7684\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u4f7f\u7528Python\u4ee3\u7801\uff0c\u4ece\u5934\u5bf9\u4e00\u4e2a\u53cc\u5c42\u795e\u7ecf\u7f51\u7edc\u5efa\u6a21\u3002</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jittor</span> <span class=\"k\">as</span> <span class=\"nn\">jt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jittor</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jittor</span> <span class=\"kn\">import</span> <span class=\"n\">nn</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relu</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Relu</span><span class=\"p\">()</span> \n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">execute</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layer2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_data</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span> <span class=\"c1\"># generate random data for training test.</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span>\n        <span class=\"k\">yield</span> <span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">learning_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">()</span>\n<span class=\"n\">optim</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">SGD</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">learning_rate</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)):</span>\n    <span class=\"n\">pred_y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"n\">pred_y</span> <span class=\"o\">-</span> <span class=\"n\">y</span>\n    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"n\">dy</span> <span class=\"o\">*</span> <span class=\"n\">dy</span>\n    <span class=\"n\">loss_mean</span> <span class=\"o\">=</span> <span class=\"n\">loss</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n    <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">loss_mean</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"step </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">, loss = </span><span class=\"si\">{</span><span class=\"n\">loss_mean</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#tutorial\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#theteam\" rel=\"nofollow\">The Team</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>\u5927\u7eb2</h2>\n<ul>\n<li><a href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\" rel=\"nofollow\">\u5feb\u901f\u5f00\u59cb</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85\" rel=\"nofollow\">\u5b89\u88c5</a></li>\n<li><a href=\"#%E6%95%99%E7%A8%8B\" rel=\"nofollow\">\u6559\u7a0b</a></li>\n<li><a href=\"#%E8%B4%A1%E7%8C%AE\" rel=\"nofollow\">\u8d21\u732e</a></li>\n<li><a href=\"#%E5%9B%A2%E9%98%9F\" rel=\"nofollow\">\u56e2\u961f</a></li>\n<li><a href=\"#%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E\" rel=\"nofollow\">\u7248\u6743\u58f0\u660e</a></li>\n</ul>\n<h2>Quickstart</h2>\n<h2>\u5feb\u901f\u5f00\u59cb</h2>\n<p>We provide some jupyter notebooks to help you quick start with Jittor.</p>\n<p>\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9bjupyterr notebooks\u6765\u5e2e\u52a9\u60a8\u5feb\u901f\u5165\u95e8Jittor\u3002</p>\n<ul>\n<li><a href=\"notebook/example.src.md\" rel=\"nofollow\" title=\"example\">Example: Model definition and training</a></li>\n<li><a href=\"notebook/example.src.md\" rel=\"nofollow\" title=\"example\">\u793a\u4f8b\uff1a\u6a21\u578b\u5b9a\u4e49\u4e0e\u8bad\u7ec3</a></li>\n<li><a href=\"notebook/basics.src.md\" rel=\"nofollow\" title=\"basics\">Basics: Op, Var</a></li>\n<li><a href=\"notebook/basics.src.md\" rel=\"nofollow\" title=\"basics\">\u57fa\u7840\uff1aOp, Var</a></li>\n<li><a href=\"notebook/meta_op.src.md\" rel=\"nofollow\" title=\"meta_op\">Meta-operator: Implement your own convolution with Meta-operator</a></li>\n<li><a href=\"notebook/meta_op.src.md\" rel=\"nofollow\" title=\"meta_op\">\u5143\u7b97\u5b50\uff1a\u901a\u8fc7\u5143\u7b97\u5b50\u5b9e\u73b0\u81ea\u5df1\u7684\u5377\u79ef\u5c42</a></li>\n</ul>\n<h2>Install</h2>\n<h2>\u5b89\u88c5</h2>\n<p>Jittor is written in Python and C++. It requires a compiler for JIT compilation, Currently, we support four compilers:</p>\n<p>Jittor\u4f7f\u7528Python\u548cC++\u7f16\u5199\u3002 \u5b83\u9700\u8981\u7528\u4e8e\u5373\u65f6\u7f16\u8bd1\u7684\u7f16\u8bd1\u5668\u3002\u5f53\u524d\uff0c\u6211\u4eec\u652f\u6301\u4e09\u79cd\u7f16\u8bd1\u5668\uff1a</p>\n<ul>\n<li>CPU compiler (require at least one of the following)\n<ul>\n<li>g++ (&gt;=5.4.0)</li>\n<li>clang (&gt;=8.0) recommend</li>\n</ul>\n</li>\n<li>CPU \u7f16\u8bd1\u5668 \uff08\u9700\u8981\u4e0b\u5217\u81f3\u5c11\u4e00\u4e2a\uff09\n<ul>\n<li>g++ \uff08&gt;=5.4.0\uff09</li>\n<li>clang \uff08&gt;=8.0\uff09\u63a8\u8350</li>\n</ul>\n</li>\n<li>GPU compiler (optional)\n<ul>\n<li>nvcc (&gt;=10.0)</li>\n</ul>\n</li>\n<li>GPU \u7f16\u8bd1\u5668\uff08\u53ef\u9009\uff09\n<ul>\n<li>nvcc\uff08&gt;=10.0\uff09</li>\n</ul>\n</li>\n</ul>\n<p>Jittor\u7684\u73af\u5883\u8981\u6c42\u5982\u4e0b:</p>\n<ul>\n<li>\u64cd\u4f5c\u7cfb\u7edf: Ubuntu &gt;= 16.04</li>\n<li>Python\u7248\u672c &gt;= 3.7</li>\n<li>C++\u7f16\u8bd1\u5668\uff08g++ or clang\uff09</li>\n</ul>\n<p>Jittor environment requirements:</p>\n<ul>\n<li>System: Ubuntu &gt;= 16.04</li>\n<li>Python version &gt;= 3.7</li>\n<li>C++ compiler(g++ or clang)</li>\n</ul>\n<p>Jittor offers three ways to install: pip, script or manual.</p>\n<p>Jittor \u4e00\u5171\u63d0\u4f9b\u4e09\u79cd\u65b9\u5f0f\u5b89\u88c5: pip\u5b89\u88c5, \u4e00\u952e\u811a\u672c\u5b89\u88c5 \u548c \u624b\u52a8\u5b89\u88c5.</p>\n<h2>Pip \u5b89\u88c5</h2>\n<h2>Pip install</h2>\n<p>\u5982\u679c\u60a8\u6ca1\u6709\u51c6\u5907\u597d\u73af\u5883\uff0c\u6b22\u8fce\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684\u4e00\u952e\u5b89\u88c5\u811a\u672c\uff0c \u5982\u679c\u60a8\u5df2\u7ecf\u88c5\u597d\u7f16\u8bd1\u5668\u548c\u5bf9\u5e94\u7248\u672c\u7684Python,\u6211\u4eec\u5f3a\u70c8\u63a8\u8350\u60a8\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\n(\u5982\u679c\u65e0\u6cd5\u8bbf\u95eegithub, \u53ef\u4ee5\u901a\u8fc7jittor\u4e3b\u9875\u4e0b\u8f7d):</p>\n<pre>sudo apt install python3.7-dev libomp-dev\nsudo python3.7 -m pip install git+https://github.com/Jittor/jittor.git\n<span class=\"c1\"># if you cannot access github, please download code from our website:</span>\n<span class=\"c1\">#     wget https://cg.cs.tsinghua.edu.cn/jittor/assets/build/jittor.tgz</span>\n<span class=\"c1\">#     mkdir -p jittor &amp;&amp; tar -xvf ./jittor.tgz -C jittor</span>\n<span class=\"c1\">#     sudo pip install ./jittor</span>\npython3.7 -m jittor.test.test_example\n</pre>\n<p>\u5982\u679c\u6d4b\u8bd5\u8fd0\u884c\u901a\u8fc7,\u606d\u559c\u4f60\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210.\njittor\u4f1a\u81ea\u52a8\u5728\u8def\u5f84\u4e2d\u5bfb\u627e\u5408\u9002\u7684\u7f16\u8bd1\u5668, \u5982\u679c\u60a8\u5e0c\u671b\u624b\u52a8\u6307\u5b9a\u7f16\u8bd1\u5668, \u8bf7\u4f7f\u7528\u73af\u5883\u53d8\u91cf <code>cc_path</code> \u548c <code>nvcc_path</code>(\u53ef\u9009).</p>\n<h2>\u4e00\u952e\u811a\u672c\u5b89\u88c5</h2>\n<h2>single line script install</h2>\n<p>\u4e00\u952e\u811a\u672c\u5b89\u88c5\u4f1a\u5e2e\u60a8\u5b89\u88c5\u597d\u6240\u9700\u7684\u7f16\u8bd1\u5668\u4ee5\u53ca\u5bf9\u5e94\u7684Python\u7248\u672c.</p>\n<p>We provide single line command for quick installation the latest version of Jittor(Ubuntu&gt;=16.04):</p>\n<p>\u6211\u4eec\u63d0\u4f9b\u80fd\u5feb\u901f\u5b89\u88c5\u6700\u65b0\u7248\u672cJittor\u7684\u5355\u884c\u547d\u4ee4\uff08Ubuntu&gt; = 16.04\uff09\uff1a</p>\n<pre><span class=\"c1\"># install with clang and cuda</span>\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh <span class=\"p\">|</span> <span class=\"nv\">with_clang</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">with_cuda</span><span class=\"o\">=</span><span class=\"m\">1</span> bash\n<span class=\"c1\"># install with clang</span>\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh <span class=\"p\">|</span> <span class=\"nv\">with_clang</span><span class=\"o\">=</span><span class=\"m\">1</span> bash\n<span class=\"c1\"># install with g++ and cuda</span>\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh <span class=\"p\">|</span> <span class=\"nv\">with_gcc</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">with_cuda</span><span class=\"o\">=</span><span class=\"m\">1</span> bash\n<span class=\"c1\"># install with g++</span>\nwget -O - https://raw.githubusercontent.com/Jittor/jittor/master/script/install.sh <span class=\"p\">|</span> <span class=\"nv\">with_gcc</span><span class=\"o\">=</span><span class=\"m\">1</span> bash\n</pre>\n<p>After execution, the script will show some environment variables you need to export.</p>\n<p>\u6267\u884c\u540e\uff0c\u811a\u672c\u5c06\u663e\u793a\u4e00\u4e9b\u9700\u8981\u5bfc\u51fa\u7684\u73af\u5883\u53d8\u91cf\u3002</p>\n<p>If you use Jittor for CPU computing, we strongly recommend clang(&gt;=8.0) as the back-end compiler of Jittor. Because some customized optimizations will be enabled.</p>\n<p>\u5982\u679c\u5c06Jittor\u7528\u4e8eCPU\u8ba1\u7b97\uff0c\u5219\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528clang\uff08&gt; = 8.0\uff09\u4f5c\u4e3aJittor\u7684\u540e\u7aef\u7f16\u8bd1\u5668\u3002 \u56e0\u4e3aJittor\u4f1a\u7528\u5230\u5176\u4e2d\u4e00\u4e9b\u5b9a\u5236\u7684\u4f18\u5316\u3002</p>\n<h2>\u624b\u52a8\u5b89\u88c5</h2>\n<h2>manual install</h2>\n<p>We will show how to install Jittor in Ubuntu 16.04 step by step, Other Linux distributions may have similar commands.</p>\n<p>\u6211\u4eec\u5c06\u9010\u6b65\u6f14\u793a\u5982\u4f55\u5728Ubuntu 16.04\u4e2d\u5b89\u88c5Jittor\uff0c\u5176\u4ed6Linux\u53d1\u884c\u7248\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u547d\u4ee4\u3002</p>\n<h3>Step 1: Choose your back-end compiler</h3>\n<h3>\u6b65\u9aa4\u4e00\uff1a\u9009\u62e9\u60a8\u7684\u540e\u7aef\u7f16\u8bd1\u5668</h3>\n<pre><span class=\"c1\"># g++</span>\nsudo apt install g++ build-essential libomp-dev\n\n<span class=\"c1\"># OR clang++-8</span>\nwget -O - https://apt.llvm.org/llvm.sh &gt; /tmp/llvm.sh\nbash /tmp/llvm.sh <span class=\"m\">8</span>\n</pre>\n<h3>Step 2: Install Python and python-dev</h3>\n<h3>\u6b65\u9aa4\u4e8c\uff1a\u5b89\u88c5Python\u548cpython-dev</h3>\n<p>Jittor need python version &gt;= 3.7.</p>\n<p>Jittor\u9700\u8981python\u7684\u7248\u672c&gt;=3.7\u3002</p>\n<pre>sudo apt install python3.7 python3.7-dev\n</pre>\n<h3>Step 3: Run Jittor</h3>\n<h3>\u6b65\u9aa4\u4e09\uff1a\u8fd0\u884cJittor</h3>\n<p>The whole framework is compiled Just-in-time. Let's install jittor via pip</p>\n<p>\u6574\u4e2a\u6846\u67b6\u662f\u53ca\u65f6\u7f16\u8bd1\u7684\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7pip\u5b89\u88c5jittor</p>\n<pre>git clone https://github.com/Jittor/jittor.git\nsudo pip3.7 install ./jittor\n<span class=\"nb\">export</span> <span class=\"nv\">cc_path</span><span class=\"o\">=</span><span class=\"s2\">\"clang++-8\"</span>\n<span class=\"c1\"># if other compiler is used, change cc_path</span>\n<span class=\"c1\"># export cc_path=\"g++\"</span>\n<span class=\"c1\"># export cc_path=\"icc\"</span>\n\n<span class=\"c1\"># run a simple test</span>\npython3.7 -m jittor.test.test_example\n</pre>\n<p>if the test is passed, your Jittor is ready.</p>\n<p>\u5982\u679c\u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u90a3\u4e48\u60a8\u7684Jittor\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\u3002</p>\n<h3>Optional Step 4: Enable CUDA</h3>\n<h3>\u53ef\u9009\u6b65\u9aa4\u56db\uff1a\u542f\u7528CUDA</h3>\n<p>Using CUDA in Jittor is very simple, Just setup environment value <code>nvcc_path</code></p>\n<p>\u5728Jittor\u4e2d\u4f7f\u7528CUDA\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8bbe\u7f6e\u73af\u5883\u503c<code>nvcc_path</code></p>\n<pre><span class=\"c1\"># replace this var with your nvcc location </span>\n<span class=\"nb\">export</span> <span class=\"nv\">nvcc_path</span><span class=\"o\">=</span><span class=\"s2\">\"/usr/local/cuda/bin/nvcc\"</span> \n<span class=\"c1\"># run a simple cuda test</span>\npython3.7 -m jittor.test.test_cuda \n</pre>\n<p>if the test is passed, your can use Jittor with CUDA by setting <code>use_cuda</code> flag.</p>\n<p>\u5982\u679c\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e<code>use_cuda</code>\u6807\u8bc6\u7b26\u5728Jittor\u4e2d\u542f\u7528CUDA\u3002</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jittor</span> <span class=\"k\">as</span> <span class=\"nn\">jt</span>\n<span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">use_cuda</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre>\n<h3>Optional Step 5: Run full tests</h3>\n<h3>\u53ef\u9009\u6b65\u9aa4\u4e94\uff1a\u8fdb\u884c\u5b8c\u6574\u6d4b\u8bd5</h3>\n<p>To check the integrity of Jittor, you can run full tests.</p>\n<p>\u8981\u68c0\u67e5Jittor\u7684\u5b8c\u6574\u6027\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u5b8c\u6574\u7684\u6d4b\u8bd5\u3002</p>\n<pre>python3.7 -m jittor.test -v\n</pre>\n<p>if those tests are failed, please report bugs for us, and feel free to contribute ^_^</p>\n<p>\u5982\u679c\u8fd9\u4e9b\u6d4b\u8bd5\u5931\u8d25\uff0c\u8bf7\u4e3a\u6211\u4eec\u62a5\u544a\u9519\u8bef\uff0c\u6211\u4eec\u5341\u5206\u6b22\u8fce\u60a8\u4e3aJittor\u505a\u51fa\u8d21\u732e^ _ ^</p>\n<h2>Tutorial</h2>\n<h2>\u6559\u7a0b</h2>\n<p>In the tutorial section, we will briefly explain the basic concept of Jittor.</p>\n<p>\u5728\u6559\u7a0b\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u89e3\u91caJittor\u7684\u57fa\u672c\u6982\u5ff5\u3002</p>\n<p>To train your model with Jittor, there are only three main concepts you need to know:</p>\n<p>\u8981\u4f7f\u7528Jittor\u8bad\u7ec3\u6a21\u578b\uff0c\u60a8\u9700\u8981\u4e86\u89e3\u4e24\u4e2a\u4e3b\u8981\u6982\u5ff5\uff1a</p>\n<ul>\n<li>Var: basic data type of jittor</li>\n<li>Var\uff1aJittor\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b</li>\n<li>Operations: Jittor'op is simular with numpy</li>\n<li>Operations\uff1aJittor\u7684\u7b97\u5b50\u4e0enumpy\u7c7b\u4f3c</li>\n</ul>\n<h3>Var</h3>\n<h3>\u6570\u636e\u7c7b\u578b</h3>\n<p>First, let's get started with Var. Var is the basic data type of jittor. Computation process in Jittor is asynchronous for optimization. If you want to access the data, <code>Var.data</code> can be used for synchronous data accessing.</p>\n<p>\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u4f7f\u7528Var\u3002Var\u662fjittor\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u4e3a\u4e86\u8fd0\u7b97\u66f4\u52a0\u9ad8\u6548Jittor\u4e2d\u7684\u8ba1\u7b97\u8fc7\u7a0b\u662f\u5f02\u6b65\u7684\u3002 \u5982\u679c\u8981\u8bbf\u95ee\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528<code>Var.data</code>\u8fdb\u884c\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u3002</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jittor</span> <span class=\"k\">as</span> <span class=\"nn\">jt</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output: float32[3,]</span>\n<span class=\"c1\"># Output: [ 1. 2. 3.]</span>\n</pre>\n<p>And we can give the variable a name.</p>\n<p>\u6b64\u5916\u6211\u4eec\u53ef\u4ee5\u7ed9\u53d8\u91cf\u8d77\u4e00\u4e2a\u540d\u5b57\u3002</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">())</span>\n<span class=\"c1\"># Output: c</span>\n</pre>\n<p>###Operations</p>\n<h3>\u6570\u636e\u8fd0\u7b97</h3>\n<p>Jittor'op is simular with numpy. Let's try some operations. We create Var <code>a</code> and <code>b</code> via operation <code>jt.float32</code>, and add them. Printing those variables shows they have the same shape and dtype.</p>\n<p>Jittor\u7684\u7b97\u5b50\u4e0enumpy\u7c7b\u4f3c\u3002 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e9b\u8fd0\u7b97\uff0c \u6211\u4eec\u901a\u8fc7Op<code>jt.float32</code>\u521b\u5efaVar <code>a</code>\u548c<code>b</code>\uff0c\u5e76\u5c06\u5b83\u4eec\u76f8\u52a0\u3002 \u8f93\u51fa\u8fd9\u4e9b\u53d8\u91cf\u76f8\u5173\u4fe1\u606f\uff0c\u53ef\u4ee5\u770b\u51fa\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u548c\u7c7b\u578b\u3002</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jittor</span> <span class=\"k\">as</span> <span class=\"nn\">jt</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"c1\"># Output: float32[3,] float32[3,] float32[3,]</span>\n<span class=\"c1\"># Output: &lt;class 'jittor_core.Var'&gt; &lt;class 'jittor_core.Var'&gt; &lt;class 'jittor_core.Var'&gt;</span>\n</pre>\n<p>Beside that, All the operators we used <code>jt.xxx(Var, ...)</code> have alias <code>Var.xxx(...)</code>. For example:</p>\n<p>\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u6240\u6709\u7b97\u5b50<code>jt.xxx(Var,...)</code>\u90fd\u5177\u6709\u522b\u540d<code>Var.xxx(...)</code>\u3002 \u4f8b\u5982\uff1a</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"c1\"># alias of jt.max(c)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\"># alias of jt.add(c, a)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># alias of jt.min(c, keepdims=True)</span>\n</pre>\n<p>if you want to know all the operation which Jittor supports. try <code>help(jt.ops)</code>. All the operation you found in <code>jt.ops.xxx</code>, can be used via alias <code>jt.xxx</code>.</p>\n<p>\u5982\u679c\u60a8\u60f3\u77e5\u9053Jittor\u652f\u6301\u7684\u6240\u6709\u8fd0\u7b97\uff0c\u53ef\u4ee5\u8fd0\u884c<code>help(jt.ops)</code>\u3002 \u60a8\u5728<code>jt.ops.xxx</code>\u4e2d\u627e\u5230\u7684\u6240\u6709\u8fd0\u7b97\u90fd\u53ef\u4ee5\u901a\u8fc7\u522b\u540d<code>jt.xxx</code>\u3002</p>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">jt</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:</span>\n<span class=\"c1\">#   abs(x: core.Var) -&gt; core.Var</span>\n<span class=\"c1\">#   add(x: core.Var, y: core.Var) -&gt; core.Var</span>\n<span class=\"c1\">#   array(data: array) -&gt; core.Var</span>\n<span class=\"c1\">#   binary(x: core.Var, y: core.Var, op: str) -&gt; core.Var</span>\n<span class=\"c1\">#   ......</span>\n</pre>\n<h3>More</h3>\n<h3>\u66f4\u591a\u6559\u7a0b</h3>\n<p>If you want to know more about Jittor, please check out the notebooks below:</p>\n<p>\u5982\u679c\u60a8\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3Jittor\uff0c\u8bf7\u67e5\u770b\u4ee5\u4e0bnotebooks\uff1a</p>\n<ul>\n<li>Quickstart\n<ul>\n<li><a href=\"notebook/example.src.md\" rel=\"nofollow\" title=\"example\">Example: Model definition and training</a></li>\n<li><a href=\"notebook/basics.src.md\" rel=\"nofollow\" title=\"basics\">Basics: Op, Var</a></li>\n<li><a href=\"notebook/meta_op.src.md\" rel=\"nofollow\" title=\"meta_op\">Meta-operator: Implement your own convolution with Meta-operator</a></li>\n</ul>\n</li>\n<li>\u5feb\u901f\u5f00\u59cb\n<ul>\n<li><a href=\"notebook/example.src.md\" rel=\"nofollow\" title=\"example\">\u793a\u4f8b\uff1a\u6a21\u578b\u5b9a\u4e49\u4e0e\u8bad\u7ec3</a></li>\n<li><a href=\"notebook/basics.src.md\" rel=\"nofollow\" title=\"basics\">\u57fa\u672c\u6982\u5ff5\uff1aOp, Var</a></li>\n<li><a href=\"notebook/meta_op.src.md\" rel=\"nofollow\" title=\"meta_op\">\u5143\u7b97\u5b50\uff1a\u901a\u8fc7\u5143\u7b97\u5b50\u5b9e\u73b0\u81ea\u5df1\u7684\u5377\u79ef\u5c42</a></li>\n</ul>\n</li>\n<li>Advanced\n<ul>\n<li><a href=\"notebook/custom_op.src.md\" rel=\"nofollow\" title=\"custom_op\">Custom Op: write your operator with C++ and CUDA and JIT compile it</a></li>\n<li><a href=\"notebook/profiler.src.md\" rel=\"nofollow\" title=\"profiler\">Profiler: Profiling your model</a></li>\n<li>Jtune: Tool for performance tuning</li>\n</ul>\n</li>\n<li>\u8fdb\u9636\n<ul>\n<li><a href=\"notebook/custom_op.src.md\" rel=\"nofollow\" title=\"custom_op\">\u81ea\u5b9a\u4e49\u7b97\u5b50\uff1a\u4f7f\u7528C ++\u548cCUDA\u7f16\u5199\u60a8\u7684\u7b97\u5b50\uff0c\u5e76\u5176\u8fdb\u884c\u5373\u65f6\u7f16\u8bd1</a></li>\n<li><a href=\"notebook/profiler.src.md\" rel=\"nofollow\" title=\"profiler\">\u6027\u80fd\u5206\u6790\u5668\uff1a\u5206\u6790\u60a8\u7684\u6a21\u578b</a></li>\n<li>Jtune\uff1a\u6027\u80fd\u8c03\u4f18\u5de5\u5177</li>\n</ul>\n</li>\n</ul>\n<p>Those notebooks can be started in your own computer by <code>python3.7 -m jittor.notebook</code></p>\n<p>\u8fd9\u4e9bnotebooks\u53ef\u4ee5\u901a\u8fc7python3.7 -m jittor.notebook\u5728\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e2d\u8fd0\u884c\u3002</p>\n<h2>Contributing</h2>\n<h2>\u8d21\u732e</h2>\n<p>Jittor is still young. It may contain bugs and issues. Please report them in our bug track system. Contributions are welcome. Besides, if you have any ideas about Jittor, please let us know.</p>\n<p>Jittor\u8fd8\u5f88\u5e74\u8f7b\u3002 \u5b83\u53ef\u80fd\u5b58\u5728\u9519\u8bef\u548c\u95ee\u9898\u3002 \u8bf7\u5728\u6211\u4eec\u7684\u9519\u8bef\u8ddf\u8e2a\u7cfb\u7edf\u4e2d\u62a5\u544a\u5b83\u4eec\u3002 \u6211\u4eec\u6b22\u8fce\u60a8\u4e3aJittor\u505a\u51fa\u8d21\u732e\u3002 \u6b64\u5916\uff0c\u5982\u679c\u60a8\u5bf9Jittor\u6709\u4efb\u4f55\u60f3\u6cd5\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\u3002</p>\n<p>\u60a8\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u5e2e\u52a9Jittor\uff1a</p>\n<ul>\n<li>\u5728\u8bba\u6587\u4e2d\u5f15\u7528 Jittor</li>\n<li>\u5411\u8eab\u8fb9\u7684\u597d\u670b\u53cb\u63a8\u8350 Jittor</li>\n<li>\u8d21\u732e\u4ee3\u7801</li>\n<li>\u8d21\u732e\u6559\u7a0b\u548c\u6587\u6863</li>\n<li>\u63d0\u51faissue</li>\n<li>\u56de\u7b54 jittor \u76f8\u5173\u95ee\u9898</li>\n<li>\u70b9\u4eae\u5c0f\u661f\u661f</li>\n<li>\u6301\u7eed\u5173\u6ce8 jittor</li>\n<li>\u2026\u2026</li>\n</ul>\n<p>You can help Jittor in the following ways:</p>\n<ul>\n<li>Citing Jittor in your paper</li>\n<li>recommend Jittor to your friends</li>\n<li>Contributing code</li>\n<li>Contributed tutorials and documentation</li>\n<li>File an issue</li>\n<li>Answer jittor related questions</li>\n<li>Light up the stars</li>\n<li>Keep an eye on jittor</li>\n<li>......</li>\n</ul>\n<h2>Contact Us</h2>\n<h2>\u8054\u7cfb\u6211\u4eec</h2>\n<p>\u5b98\u65b9\u4e3b\u9875\uff1a <a href=\"http://cg.cs.tsinghua.edu.cn/jittor/\" rel=\"nofollow\">http://cg.cs.tsinghua.edu.cn/jittor/</a></p>\n<p>\u7535\u5b50\u90ae\u4ef6\uff1a<a href=\"mailto:jittor@qq.com\">jittor@qq.com</a></p>\n<p>\u63d0\u51faissue\uff1a<a href=\"https://github.com/Jittor/jittor/issues\" rel=\"nofollow\">https://github.com/Jittor/jittor/issues</a></p>\n<p>Website: <a href=\"http://cg.cs.tsinghua.edu.cn/jittor/\" rel=\"nofollow\">http://cg.cs.tsinghua.edu.cn/jittor/</a></p>\n<p>Email: <a href=\"mailto:jittor@qq.com\">jittor@qq.com</a></p>\n<p>File an issue: <a href=\"https://github.com/Jittor/jittor/issues\" rel=\"nofollow\">https://github.com/Jittor/jittor/issues</a></p>\n<h2>The Team</h2>\n<h2>\u56e2\u961f</h2>\n<p>Jittor is currently maintained by Dun Liang, Guo-Ye Yang, Guo-Wei Yang and Wen-Yang Zhou etc. from the <a href=\"https://cg.cs.tsinghua.edu.cn/\" rel=\"nofollow\">Tsinghua CSCG Group</a>. If you are also interested in Jittor and want to improve it, Please join us!</p>\n<p>Jittor\u76ee\u524d\u7531\u6765\u81ea<a href=\"https://cg.cs.tsinghua.edu.cn/\" rel=\"nofollow\">\u6e05\u534e\u5927\u5b66\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7ec4</a>\u7684\u6881\u76fe\uff0c\u6768\u56fd\u70e8\uff0c\u6768\u56fd\u709c\u548c\u5468\u6587\u6d0b\u7b49\u535a\u58eb\u751f\u7ef4\u62a4\u3002 \u5982\u679c\u60a8\u4e5f\u5bf9Jittor\u611f\u5174\u8da3\u5e76\u5e0c\u671b\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\uff0c\u8bf7\u52a0\u5165\u6211\u4eec\uff01</p>\n<h2>License</h2>\n<h2>\u7248\u6743\u58f0\u660e</h2>\n<p>Jittor is Apache 2.0 licensed, as found in the LICENSE.txt file.</p>\n<p>\u5982LICENSE.txt\u6587\u4ef6\u4e2d\u6240\u793a\uff0cJittor\u4f7f\u7528Apache 2.0\u7248\u6743\u534f\u8bae\u3002</p>\n\n          </div>"}, "last_serial": 7057498, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f6b9d377fce9e52f00abd0da64859f37", "sha256": "a05e19795a6e61326a822dfcf7068e220198c6d11bbb09dc29ef0a382847ae52"}, "downloads": -1, "filename": "jittor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f6b9d377fce9e52f00abd0da64859f37", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 525094, "upload_time": "2020-04-20T04:33:18", "upload_time_iso_8601": "2020-04-20T04:33:18.649284Z", "url": "https://files.pythonhosted.org/packages/09/3a/ecca49b548a572d2c7eabb648b9fdd97630094c647d9aa14f7d708ddbe95/jittor-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6b9d377fce9e52f00abd0da64859f37", "sha256": "a05e19795a6e61326a822dfcf7068e220198c6d11bbb09dc29ef0a382847ae52"}, "downloads": -1, "filename": "jittor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f6b9d377fce9e52f00abd0da64859f37", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 525094, "upload_time": "2020-04-20T04:33:18", "upload_time_iso_8601": "2020-04-20T04:33:18.649284Z", "url": "https://files.pythonhosted.org/packages/09/3a/ecca49b548a572d2c7eabb648b9fdd97630094c647d9aa14f7d708ddbe95/jittor-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:30 2020"}