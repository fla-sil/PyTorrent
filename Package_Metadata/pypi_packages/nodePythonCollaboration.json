{"info": {"author": "Wiktor", "author_email": "wiktor.node@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Colab\n\nThose simple Node and Python packages with will let you easy run Python for Node\n\n*Builded on top of [zeroRPC](https://www.zerorpc.io/)*\n\nTo run this package corectly you need to use both `node` and `python` versions\n\n## Features\n\n- Call Python functions from node\n- Decorate Python functions to get better results\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install node-python-collaboration\n```\n\nUsing pip:\n\n```bash\n$ pip install nodePythonCollaboration\n```\n\n## Quick start \n\nNode client side (with sync setup)\n\n```js\nconst colab = require('node-python-collaboration')\n\n// Configure methods object synchronously\nconst methods = colab([\n    ['test_method', false],\n],\n/*options*/\n)\n\n// Call some methods\nmethods.test_method(1)\n    .then(res => console.log(res)) // logs 2\n    .catch(err => console.log(err)) \n```\n\nNode client side (with async setup)\n\n> **Note** that in async setup client get methods from python server\n\n```js\nconst colab = require('node-python-collaboration')\n\nasync function main() {\n    try {\n        // Configure methods object asynchronously\n        const methods = await colab.asyncInit(/*options*/)\n\n        // Call some methods\n        console.log(await methods.test_method(1)) // logs 2\n\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nmain()\n```\n\nPython server side\n\n```python\nimport nodePythonCollaboration as colab\n\n# Define main class with methods\nclass main():\n    def test_method(self,x):\n    return x + 1\n\n# Start Python server with those methods\ncolab.start(main)\n```\n\n## Colab functions\n\n### In Node.js:\n\n<br/>\n\n#### colab(methodsArr, { options })\n\n\nReturns an object with properties that are functions with the names given in method_name\n\n`methodsArr`\n```js\n    [\n        [method_name, method_type],\n        [method_name, method_type]\n        ...\n    ]\n```\n`options` optional **need to match up with python ones**\n```js\n    // those are default options\n    {\n        port: '4242',\n        server: '127.0.0.1' // it is recommended not to change\n    }\n```\n`Example`\n```js\n    methods = colab([\n        ['test_method', false],\n        ['test_method_2', false]\n    ],{\n        port: '4242'\n    })\n    // Do some stuff with methods\n```\n*OR*\n```js\n    methods = colab([\n        ['test_method', false],\n        ['test_method_2', false]\n    ])\n    // Do some stuff with methods\n```\n\n<br/>\n\n#### colab.asyncInit({ options })\n\nReturns a promise when promise is resolved promise returns methods\n\nIn async init we don't need to give methodsArr because `colab` asks for available methods our `Python server`\n\n`Example`\n```js\n    colab.asyncInit(/*options*/)\n        .then((methods) => {\n            // Do some stuff with methods\n        })\n```\n*better way to do this async/await*\n```js\nasync function main() {\n    methods = await colab.asyncInit(/*options*/)\n    // Do some stuff with methods\n\n}\n\nmain()\n```\n\n<br/>\n\n#### methods\n\n- Types\n\n    - false\n\n        *the fastest*\n        ```js\n        [\n            [method_name, false]\n        ]\n        ```\n        This is just normal method nothing special\n\n    - complexFile\n\n        *slower*\n        ```js\n        [\n            [method_name, 'complexFile']\n        ]\n        ```\n        If you are getting error \"OverflowError: Python int too large to convert to C unsigned long\" <br/>\n        then this is the solution **remember that on python side you need to use method decorator**\n\n        Basically what it does: python saves the output to the file located in /data folder and then sends the name of the file to node\n        so node can read the file and then delete it\n\n    - bigComputation\n\n        *the slowest*\n        ```js\n        [\n            [method_name, 'bigComputation']\n        ]\n        ```\n        If you are getting error \"HeartbeatError: Lost remote after 10000ms\"<br/>\n        then this is the solution **remember that on python side you need to use method decorator**\n\n        Basically what it does: python runs your function in another process so it don't bock the main process\n        then it saves the output to the file \n\n- Overview\n    - returns a promise\n    - executes python function `in python`\n    - arguments given to the method are passed to the python\n\n- Example\n    ```js\n    const colab = require('node-python-collaboration')\n    colab([\n        ['test_method',false]\n    ])\n    .then(methods => {\n        methods.test_method(1)\n        .then(response => console.log(response)) //logs 2\n    })\n    ```\n    *better way to do this async/await*\n    ```js\n    const colab = require('node-python-collaboration')\n\n    async function main() {\n        methods = await colab.asyncInit()\n        console.log(methods.test_method(1)) //logs 2\n    }\n    main()\n    ```\n<br/>\n\n### In Python:\n\n<br/>\n\n#### colab.start(class, optionsArr)\n\nStarts up python server with methods in class default on 127.0.0.1:4242\n\n`class`\n```python\nclass main():\n    def test_method(self,x):\n    return x + 1\n```\nnow method \"test_method\" is available\n\n`optionsArr` optional\n\n```python\noptionsArr = [ data_folder_path, server_ip_and_port ]\n\n#defining new data flder path\noptionsArr = [ './test/test/data' ]\n\n#defining new server port (data folder path stay default)\noptionsArr = [ None, ':5323']\n\n#defining new server ip and port (data folder path stay default)\noptionsArr = [ None, '0.0.0.0:5323'] # it's very not recommeded to change ip, in most cases it won't run\n```\n\n<br/>\n\n### colab decorators\n\nThey are described above in node section\n- @colab.complexFile\n- @colab.bigComputation\n\n`Example`\n```python\nimport nodePythonCollaboration as colab\nfrom math import factorial\nfrom time import sleep\n\nclass main():\n\n    def Example(self, x, y):\n        return x + y # Just simple computation\n\n    @colab.complexFile\n    def Example_complexFile(self, x):\n        return factorial(x) # In most cases that will be very big number\n\n    @colab.bigComputation\n    def Example_bigComputation(self, x, y):\n        for i in range(11):\n            print(i + 1)\n            sleep(1) # Simulating big computation\n        return x + y\n\n\ncolab.start(main)\n```\n\n### Node and Python:\n\n`Example`\n\n*server code*\n```python\nimport nodePythonCollaboration as colab # import colab\nfrom math import factorial\nfrom time import sleep\n\nclass main(): # define methods\n\n    def Example(self, x, y):\n        return x + y \n\n    @colab.complexFile\n    def Example_complexFile(self, x):\n        return factorial(x)\n\n    @colab.bigComputation\n    def Example_bigComputation(self, x, y):\n        for i in range(11):\n            print(i + 1)\n            sleep(1)\n        return x + y\n\n\ncolab.start(main) # start server with default options\n```\n\n*client code*\n```js\nconst colab = require('node-python-collaboration') // import colab\n\nasync function main() {\n    try {\n        // Configure methods object asynchronously with default options\n        const methods = await colab.asyncInit()\n\n        console.log(await methods.Example(2, 2)) //logs 4\n        console.log(await methods.Example_complexFile(10000)) //logs 2846259680917054518906413212119868890148051401702799230794179994274411340003764443772990786757784775815884062142317528830042339940...\n        console.log(await methods.Example_bigComputation(2, 2)) //after 11s logs 4\n\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nmain()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wiwi1212/node-python-collaboration", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nodePythonCollaboration", "package_url": "https://pypi.org/project/nodePythonCollaboration/", "platform": "", "project_url": "https://pypi.org/project/nodePythonCollaboration/", "project_urls": {"Homepage": "https://github.com/wiwi1212/node-python-collaboration"}, "release_url": "https://pypi.org/project/nodePythonCollaboration/0.0.3/", "requires_dist": ["zerorpc"], "requires_python": "", "summary": "Those simple Node and Python packages with will let you easy run Python for Node", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Colab</h1>\n<p>Those simple Node and Python packages with will let you easy run Python for Node</p>\n<p><em>Builded on top of <a href=\"https://www.zerorpc.io/\" rel=\"nofollow\">zeroRPC</a></em></p>\n<p>To run this package corectly you need to use both <code>node</code> and <code>python</code> versions</p>\n<h2>Features</h2>\n<ul>\n<li>Call Python functions from node</li>\n<li>Decorate Python functions to get better results</li>\n</ul>\n<h2>Installing</h2>\n<p>Using npm:</p>\n<pre>$ npm install node-python-collaboration\n</pre>\n<p>Using pip:</p>\n<pre>$ pip install nodePythonCollaboration\n</pre>\n<h2>Quick start</h2>\n<p>Node client side (with sync setup)</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">colab</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'node-python-collaboration'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Configure methods object synchronously</span>\n<span class=\"kr\">const</span> <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">colab</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"s1\">'test_method'</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">],</span>\n<span class=\"p\">],</span>\n<span class=\"cm\">/*options*/</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">// Call some methods</span>\n<span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">test_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">))</span> <span class=\"c1\">// logs 2</span>\n    <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">))</span> \n</pre>\n<p>Node client side (with async setup)</p>\n<blockquote>\n<p><strong>Note</strong> that in async setup client get methods from python server</p>\n</blockquote>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">colab</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'node-python-collaboration'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Configure methods object asynchronously</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">colab</span><span class=\"p\">.</span><span class=\"nx\">asyncInit</span><span class=\"p\">(</span><span class=\"cm\">/*options*/</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Call some methods</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">await</span> <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">test_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"c1\">// logs 2</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Python server side</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nodePythonCollaboration</span> <span class=\"k\">as</span> <span class=\"nn\">colab</span>\n\n<span class=\"c1\"># Define main class with methods</span>\n<span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Start Python server with those methods</span>\n<span class=\"n\">colab</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<h2>Colab functions</h2>\n<h3>In Node.js:</h3>\n<br>\n<h4>colab(methodsArr, { options })</h4>\n<p>Returns an object with properties that are functions with the names given in method_name</p>\n<p><code>methodsArr</code></p>\n<pre>    <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"nx\">method_name</span><span class=\"p\">,</span> <span class=\"nx\">method_type</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"nx\">method_name</span><span class=\"p\">,</span> <span class=\"nx\">method_type</span><span class=\"p\">]</span>\n        <span class=\"p\">...</span>\n    <span class=\"p\">]</span>\n</pre>\n<p><code>options</code> optional <strong>need to match up with python ones</strong></p>\n<pre>    <span class=\"c1\">// those are default options</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"s1\">'4242'</span><span class=\"p\">,</span>\n        <span class=\"nx\">server</span><span class=\"o\">:</span> <span class=\"s1\">'127.0.0.1'</span> <span class=\"c1\">// it is recommended not to change</span>\n    <span class=\"p\">}</span>\n</pre>\n<p><code>Example</code></p>\n<pre>    <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">colab</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s1\">'test_method'</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'test_method_2'</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">]</span>\n    <span class=\"p\">],{</span>\n        <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"s1\">'4242'</span>\n    <span class=\"p\">})</span>\n    <span class=\"c1\">// Do some stuff with methods</span>\n</pre>\n<p><em>OR</em></p>\n<pre>    <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">colab</span><span class=\"p\">([</span>\n        <span class=\"p\">[</span><span class=\"s1\">'test_method'</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s1\">'test_method_2'</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">]</span>\n    <span class=\"p\">])</span>\n    <span class=\"c1\">// Do some stuff with methods</span>\n</pre>\n<br>\n<h4>colab.asyncInit({ options })</h4>\n<p>Returns a promise when promise is resolved promise returns methods</p>\n<p>In async init we don't need to give methodsArr because <code>colab</code> asks for available methods our <code>Python server</code></p>\n<p><code>Example</code></p>\n<pre>    <span class=\"nx\">colab</span><span class=\"p\">.</span><span class=\"nx\">asyncInit</span><span class=\"p\">(</span><span class=\"cm\">/*options*/</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">methods</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Do some stuff with methods</span>\n        <span class=\"p\">})</span>\n</pre>\n<p><em>better way to do this async/await</em></p>\n<pre><span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">colab</span><span class=\"p\">.</span><span class=\"nx\">asyncInit</span><span class=\"p\">(</span><span class=\"cm\">/*options*/</span><span class=\"p\">)</span>\n    <span class=\"c1\">// Do some stuff with methods</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"nx\">main</span><span class=\"p\">()</span>\n</pre>\n<br>\n<h4>methods</h4>\n<ul>\n<li>\n<p>Types</p>\n<ul>\n<li>\n<p>false</p>\n<p><em>the fastest</em></p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nx\">method_name</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This is just normal method nothing special</p>\n</li>\n<li>\n<p>complexFile</p>\n<p><em>slower</em></p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nx\">method_name</span><span class=\"p\">,</span> <span class=\"s1\">'complexFile'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>If you are getting error \"OverflowError: Python int too large to convert to C unsigned long\" <br>\nthen this is the solution <strong>remember that on python side you need to use method decorator</strong></p>\n<p>Basically what it does: python saves the output to the file located in /data folder and then sends the name of the file to node\nso node can read the file and then delete it</p>\n</li>\n<li>\n<p>bigComputation</p>\n<p><em>the slowest</em></p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nx\">method_name</span><span class=\"p\">,</span> <span class=\"s1\">'bigComputation'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</pre>\n<p>If you are getting error \"HeartbeatError: Lost remote after 10000ms\"<br>\nthen this is the solution <strong>remember that on python side you need to use method decorator</strong></p>\n<p>Basically what it does: python runs your function in another process so it don't bock the main process\nthen it saves the output to the file</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Overview</p>\n<ul>\n<li>returns a promise</li>\n<li>executes python function <code>in python</code></li>\n<li>arguments given to the method are passed to the python</li>\n</ul>\n</li>\n<li>\n<p>Example</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">colab</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'node-python-collaboration'</span><span class=\"p\">)</span>\n<span class=\"nx\">colab</span><span class=\"p\">([</span>\n    <span class=\"p\">[</span><span class=\"s1\">'test_method'</span><span class=\"p\">,</span><span class=\"kc\">false</span><span class=\"p\">]</span>\n<span class=\"p\">])</span>\n<span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">methods</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">test_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">response</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">))</span> <span class=\"c1\">//logs 2</span>\n<span class=\"p\">})</span>\n</pre>\n<p><em>better way to do this async/await</em></p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">colab</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'node-python-collaboration'</span><span class=\"p\">)</span>\n\n<span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">colab</span><span class=\"p\">.</span><span class=\"nx\">asyncInit</span><span class=\"p\">()</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">test_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"c1\">//logs 2</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">main</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<br>\n<h3>In Python:</h3>\n<br>\n<h4>colab.start(class, optionsArr)</h4>\n<p>Starts up python server with methods in class default on 127.0.0.1:4242</p>\n<p><code>class</code></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n</pre>\n<p>now method \"test_method\" is available</p>\n<p><code>optionsArr</code> optional</p>\n<pre><span class=\"n\">optionsArr</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">data_folder_path</span><span class=\"p\">,</span> <span class=\"n\">server_ip_and_port</span> <span class=\"p\">]</span>\n\n<span class=\"c1\">#defining new data flder path</span>\n<span class=\"n\">optionsArr</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">'./test/test/data'</span> <span class=\"p\">]</span>\n\n<span class=\"c1\">#defining new server port (data folder path stay default)</span>\n<span class=\"n\">optionsArr</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">':5323'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#defining new server ip and port (data folder path stay default)</span>\n<span class=\"n\">optionsArr</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'0.0.0.0:5323'</span><span class=\"p\">]</span> <span class=\"c1\"># it's very not recommeded to change ip, in most cases it won't run</span>\n</pre>\n<br>\n<h3>colab decorators</h3>\n<p>They are described above in node section</p>\n<ul>\n<li>@colab.complexFile</li>\n<li>@colab.bigComputation</li>\n</ul>\n<p><code>Example</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nodePythonCollaboration</span> <span class=\"k\">as</span> <span class=\"nn\">colab</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">():</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">Example</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"c1\"># Just simple computation</span>\n\n    <span class=\"nd\">@colab</span><span class=\"o\">.</span><span class=\"n\">complexFile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Example_complexFile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># In most cases that will be very big number</span>\n\n    <span class=\"nd\">@colab</span><span class=\"o\">.</span><span class=\"n\">bigComputation</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Example_bigComputation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Simulating big computation</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n\n<span class=\"n\">colab</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<h3>Node and Python:</h3>\n<p><code>Example</code></p>\n<p><em>server code</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nodePythonCollaboration</span> <span class=\"k\">as</span> <span class=\"nn\">colab</span> <span class=\"c1\"># import colab</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">():</span> <span class=\"c1\"># define methods</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">Example</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> \n\n    <span class=\"nd\">@colab</span><span class=\"o\">.</span><span class=\"n\">complexFile</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Example_complexFile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@colab</span><span class=\"o\">.</span><span class=\"n\">bigComputation</span>\n    <span class=\"k\">def</span> <span class=\"nf\">Example_bigComputation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n\n<span class=\"n\">colab</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"c1\"># start server with default options</span>\n</pre>\n<p><em>client code</em></p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">colab</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'node-python-collaboration'</span><span class=\"p\">)</span> <span class=\"c1\">// import colab</span>\n\n<span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Configure methods object asynchronously with default options</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">methods</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">colab</span><span class=\"p\">.</span><span class=\"nx\">asyncInit</span><span class=\"p\">()</span>\n\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">await</span> <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">Example</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\">//logs 4</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">await</span> <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">Example_complexFile</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">))</span> <span class=\"c1\">//logs 2846259680917054518906413212119868890148051401702799230794179994274411340003764443772990786757784775815884062142317528830042339940...</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">await</span> <span class=\"nx\">methods</span><span class=\"p\">.</span><span class=\"nx\">Example_bigComputation</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"c1\">//after 11s logs 4</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">main</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 5665301, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d52f3765a7b22393c80d2b7c3de0bbb5", "sha256": "d03f2d4497568624be3455324e9ed77708799ded66400fe70545cf28a32a9b4d"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d52f3765a7b22393c80d2b7c3de0bbb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5717, "upload_time": "2019-08-11T18:01:47", "upload_time_iso_8601": "2019-08-11T18:01:47.235170Z", "url": "https://files.pythonhosted.org/packages/30/fc/a7fb4690ebcd4e55b2efbecab11da7d06a8155f5361a2090e08bb5639913/nodePythonCollaboration-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4b9232cdc6e446edd1190ceff382960", "sha256": "09900229379ae809570493351d0b719284522babb4e724a2223f9a297fa60f7b"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b4b9232cdc6e446edd1190ceff382960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4983, "upload_time": "2019-08-11T18:01:49", "upload_time_iso_8601": "2019-08-11T18:01:49.841494Z", "url": "https://files.pythonhosted.org/packages/1c/c1/94d72a08a551da1a5850e6a8aec410d779603983e1452fafcd72723f2c76/nodePythonCollaboration-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e0dd4c083a12d770a4370796c80d21b6", "sha256": "0fc736a9db8a53bd1032ec6778ffc85c2c938d56dddb839db5ba5f0b20e8089d"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e0dd4c083a12d770a4370796c80d21b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5718, "upload_time": "2019-08-11T18:14:56", "upload_time_iso_8601": "2019-08-11T18:14:56.626544Z", "url": "https://files.pythonhosted.org/packages/13/ec/183223679af6ca322d0deb7ccb9980986a071149a814bb8fcac01114cf51/nodePythonCollaboration-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d705816848365efcbea0cceaf162eac", "sha256": "873fe8157dc72b1ce0496846ef34a2b1d64d98f70305aaae3cfe52676cfae580"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9d705816848365efcbea0cceaf162eac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4985, "upload_time": "2019-08-11T18:14:58", "upload_time_iso_8601": "2019-08-11T18:14:58.378856Z", "url": "https://files.pythonhosted.org/packages/9a/4f/3ee14e6ff693d6698814a65d325ba083e249fb7458dfa44ba9a310c310d3/nodePythonCollaboration-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b5b49a85fca5bc5a25d8852c8592a1d7", "sha256": "46c50c0de111141a1a6bf8dbf722794979041a25fd69ec6dfaea592dbcaf1865"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b5b49a85fca5bc5a25d8852c8592a1d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5712, "upload_time": "2019-08-12T09:55:45", "upload_time_iso_8601": "2019-08-12T09:55:45.588708Z", "url": "https://files.pythonhosted.org/packages/2e/24/59f6fad50f0ba7ad59234a7a599c1b8353d147f8c7333add0280a6e0ac03/nodePythonCollaboration-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81946c98fca5500928005583b4f8e71", "sha256": "e8a41d6db34541c6b01e4b00dbcce7acbd1d2c016eb5758758a0b32162c9264e"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e81946c98fca5500928005583b4f8e71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4971, "upload_time": "2019-08-12T09:55:47", "upload_time_iso_8601": "2019-08-12T09:55:47.291092Z", "url": "https://files.pythonhosted.org/packages/6f/8e/9019c3973150fcbdfe6e9ed41d9e3d839b620c59433debb4fea422adefe1/nodePythonCollaboration-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5b49a85fca5bc5a25d8852c8592a1d7", "sha256": "46c50c0de111141a1a6bf8dbf722794979041a25fd69ec6dfaea592dbcaf1865"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b5b49a85fca5bc5a25d8852c8592a1d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5712, "upload_time": "2019-08-12T09:55:45", "upload_time_iso_8601": "2019-08-12T09:55:45.588708Z", "url": "https://files.pythonhosted.org/packages/2e/24/59f6fad50f0ba7ad59234a7a599c1b8353d147f8c7333add0280a6e0ac03/nodePythonCollaboration-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81946c98fca5500928005583b4f8e71", "sha256": "e8a41d6db34541c6b01e4b00dbcce7acbd1d2c016eb5758758a0b32162c9264e"}, "downloads": -1, "filename": "nodePythonCollaboration-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e81946c98fca5500928005583b4f8e71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4971, "upload_time": "2019-08-12T09:55:47", "upload_time_iso_8601": "2019-08-12T09:55:47.291092Z", "url": "https://files.pythonhosted.org/packages/6f/8e/9019c3973150fcbdfe6e9ed41d9e3d839b620c59433debb4fea422adefe1/nodePythonCollaboration-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:58 2020"}