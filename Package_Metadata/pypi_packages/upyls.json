{"info": {"author": "Lars Liedtke", "author_email": "LarsLiedtke@gmx.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# upyls - A collection of Python utilities\n\nThis library can now be found on [PyPi](https://pypi.org/project/upyls/)\nor simply installed with:\n```bash\npip install upyls\n```\n\n## Limited List\n\nA List which can have a lower limit nd an upper limit set and only be filled with the number of items set by those \nlimits\n\nJust import and instantiate it\n```python\nfrom upyls import LimitedList\nlimited_list = LimitedList(lower=0, upper=1)\n```\n\n## Unit of Work\nImplementation of the Unit of Work pattern out of Martin Fowler's book [Patterns of \nEnterprise Application Architecture](https://martinfowler.com/eaaCatalog/unitOfWork.html)\n\n### UnitOfWorkMixin\nThis class is an abstract class (derived from ABC). It is designed as mixin, so you just can derive your class from it \nand your class gets the functionality of this mixin\nclass. \n\nFor example:\n```python\nfrom upyls import UnitOfWorkMixin\n\nclass MyUnitOfWork(UnitOfWorkMixin):\n    <your code here>\n```\nThe added functionality is to keep track of the attributes of the classes instances. If an attribute gets changed, it is marked as \ndirty and its old value is kept aside the new value.\n\nIf you have saved your instance you can call its commit-method and is will not be marked as dirty anymore and its old. \nvalue will be discarded. As in database transactions you can as well rollback, which means that the old value is put \nback into place and the new Value discarded. As well as with committing, the rollback-method leads to the instance not \nbeing marked as dirty anymore.\n\n### Managing Unit of Works \nIf you're planning to have multiple objects which you want to be Units of Work it might come handy to be able to manage \nthem all. So if you're using a persistent storage, like a database or simply on disk, you might not want to save every \nsingle one on its own, but save them in bulks. After you saved them you should mark all saved ones. For this purpose \nthere's is a derivative of the Unit of Work mixin, which is manageable and a manager class, which exposes the \npossibility to commit or rollback all manageable Units of Work, that have been registered with the manager. The two \nclasses are very tightly coupled so the methods about connecting a unit with a manager are always two-ways: If you add a\nmanager to a unit the unit will be registered with the manager as well and if it changes it will notify the manager. If\nyou unregister a unit from a manager it also will stop using this manager to notify.    \n\n#### ManageableUnitOfWorkMixin\nThis class is a derivative of UnitOfWorkMixin and adds the functionality to be manageable by the UnitOfWorkManager. \nFirst thi functionality has been in the UnitOfWorkMixin but it added some clutter if you did not want to use it in a \nmanageable way. So it became a derivate, which just contains the extra functionatlity and uses the Unit of Work \nfunctionality of its parent.\n\n#### UnitOfWorkManager\nThis class offers the functionality to manage a collection of (manageable) Units of Work. It will keep track of \nregistered units that have changed and you can commit all changed units or roll them all back. Of cource you can ask the\nmanager if a certain unit is registered or if it is dirty. \n\n## MultiIniParser\nThe INI-File-Format is around for quite some time and in times of XML and JSON some people might find this format quite \narchaic, but it is still used in many software projects. There is no real standard for this format, it is rather a set of \ncommon practices that define the format. \nMostly an INI-File has got a set of sections whcih have Options with values associated with them:\n```ini\n[section]\noption=value\n```\nPython has got a very good and rich implementation of a parser with `configparser.ConfigParser` but it does not have \nsupport for INI-Files that can have multiple sections or options with the same name or a contain a top level section\nwithout a name. While the second case can be worked around the first can not in a simple way. \nThis might be a pretty rare usecase, because in most implementations section and option names have to be unique. But as uncle Murphy turned round \nthe corner, the author stumbled over a service that communicates with a variant of INI-files, which has got an empty \ntop level section AND multiple sections with the same name as well as options with the same name. After having a look at\n`configparser.ConfigParser` and how to best subclass it, the author decided to take the ideas and some of the code and \nturn them to an own class, while it is not impropable that it somewhen will become a subclass of \n`configparser.ConfigParser`. It is not meant to steal but meant to extend the functionality in a way that keeps the \nideas and interfaces. But in some things it behaves a bit different due to the fact of multiple items. So it often \nreturns Iterables where more than one item can occurr. \n\nThis is still work in Progress and it does not yet implement all the possibilities of `configparser.ConfigParser` \nbut basically it is working.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Corvan/upyls", "keywords": "", "license": "LGPL v. 2.1", "maintainer": "", "maintainer_email": "", "name": "upyls", "package_url": "https://pypi.org/project/upyls/", "platform": "", "project_url": "https://pypi.org/project/upyls/", "project_urls": {"Homepage": "https://github.com/Corvan/upyls"}, "release_url": "https://pypi.org/project/upyls/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A collection of python utilities", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>upyls - A collection of Python utilities</h1>\n<p>This library can now be found on <a href=\"https://pypi.org/project/upyls/\" rel=\"nofollow\">PyPi</a>\nor simply installed with:</p>\n<pre>pip install upyls\n</pre>\n<h2>Limited List</h2>\n<p>A List which can have a lower limit nd an upper limit set and only be filled with the number of items set by those\nlimits</p>\n<p>Just import and instantiate it</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">upyls</span> <span class=\"kn\">import</span> <span class=\"n\">LimitedList</span>\n<span class=\"n\">limited_list</span> <span class=\"o\">=</span> <span class=\"n\">LimitedList</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Unit of Work</h2>\n<p>Implementation of the Unit of Work pattern out of Martin Fowler's book <a href=\"https://martinfowler.com/eaaCatalog/unitOfWork.html\" rel=\"nofollow\">Patterns of\nEnterprise Application Architecture</a></p>\n<h3>UnitOfWorkMixin</h3>\n<p>This class is an abstract class (derived from ABC). It is designed as mixin, so you just can derive your class from it\nand your class gets the functionality of this mixin\nclass.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">upyls</span> <span class=\"kn\">import</span> <span class=\"n\">UnitOfWorkMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyUnitOfWork</span><span class=\"p\">(</span><span class=\"n\">UnitOfWorkMixin</span><span class=\"p\">):</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">your</span> <span class=\"n\">code</span> <span class=\"n\">here</span><span class=\"o\">&gt;</span>\n</pre>\n<p>The added functionality is to keep track of the attributes of the classes instances. If an attribute gets changed, it is marked as\ndirty and its old value is kept aside the new value.</p>\n<p>If you have saved your instance you can call its commit-method and is will not be marked as dirty anymore and its old.\nvalue will be discarded. As in database transactions you can as well rollback, which means that the old value is put\nback into place and the new Value discarded. As well as with committing, the rollback-method leads to the instance not\nbeing marked as dirty anymore.</p>\n<h3>Managing Unit of Works</h3>\n<p>If you're planning to have multiple objects which you want to be Units of Work it might come handy to be able to manage\nthem all. So if you're using a persistent storage, like a database or simply on disk, you might not want to save every\nsingle one on its own, but save them in bulks. After you saved them you should mark all saved ones. For this purpose\nthere's is a derivative of the Unit of Work mixin, which is manageable and a manager class, which exposes the\npossibility to commit or rollback all manageable Units of Work, that have been registered with the manager. The two\nclasses are very tightly coupled so the methods about connecting a unit with a manager are always two-ways: If you add a\nmanager to a unit the unit will be registered with the manager as well and if it changes it will notify the manager. If\nyou unregister a unit from a manager it also will stop using this manager to notify.</p>\n<h4>ManageableUnitOfWorkMixin</h4>\n<p>This class is a derivative of UnitOfWorkMixin and adds the functionality to be manageable by the UnitOfWorkManager.\nFirst thi functionality has been in the UnitOfWorkMixin but it added some clutter if you did not want to use it in a\nmanageable way. So it became a derivate, which just contains the extra functionatlity and uses the Unit of Work\nfunctionality of its parent.</p>\n<h4>UnitOfWorkManager</h4>\n<p>This class offers the functionality to manage a collection of (manageable) Units of Work. It will keep track of\nregistered units that have changed and you can commit all changed units or roll them all back. Of cource you can ask the\nmanager if a certain unit is registered or if it is dirty.</p>\n<h2>MultiIniParser</h2>\n<p>The INI-File-Format is around for quite some time and in times of XML and JSON some people might find this format quite\narchaic, but it is still used in many software projects. There is no real standard for this format, it is rather a set of\ncommon practices that define the format.\nMostly an INI-File has got a set of sections whcih have Options with values associated with them:</p>\n<pre><span class=\"k\">[section]</span>\n<span class=\"na\">option</span><span class=\"o\">=</span><span class=\"s\">value</span>\n</pre>\n<p>Python has got a very good and rich implementation of a parser with <code>configparser.ConfigParser</code> but it does not have\nsupport for INI-Files that can have multiple sections or options with the same name or a contain a top level section\nwithout a name. While the second case can be worked around the first can not in a simple way.\nThis might be a pretty rare usecase, because in most implementations section and option names have to be unique. But as uncle Murphy turned round\nthe corner, the author stumbled over a service that communicates with a variant of INI-files, which has got an empty\ntop level section AND multiple sections with the same name as well as options with the same name. After having a look at\n<code>configparser.ConfigParser</code> and how to best subclass it, the author decided to take the ideas and some of the code and\nturn them to an own class, while it is not impropable that it somewhen will become a subclass of\n<code>configparser.ConfigParser</code>. It is not meant to steal but meant to extend the functionality in a way that keeps the\nideas and interfaces. But in some things it behaves a bit different due to the fact of multiple items. So it often\nreturns Iterables where more than one item can occurr.</p>\n<p>This is still work in Progress and it does not yet implement all the possibilities of <code>configparser.ConfigParser</code>\nbut basically it is working.</p>\n\n          </div>"}, "last_serial": 4522917, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "535446f90bca1e2768b3afebf8a2cdf1", "sha256": "61880bbe3358755c24fcf0c10dfcdfb21cdadfdbf6226ac980922bba2a295aa2"}, "downloads": -1, "filename": "upyls-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "535446f90bca1e2768b3afebf8a2cdf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6816, "upload_time": "2018-08-20T18:13:22", "upload_time_iso_8601": "2018-08-20T18:13:22.241451Z", "url": "https://files.pythonhosted.org/packages/71/a3/e6e56a86d1434645f6e3a95e8391bc44e09723b1d444d79e9c9e2e53d0d1/upyls-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b10d0a140896111bb1eade0b1d1a834", "sha256": "39399b822499577f77d91e2d9983dfa8f92b9cd4437e3a9d7fc0f91b747f9665"}, "downloads": -1, "filename": "upyls-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9b10d0a140896111bb1eade0b1d1a834", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7046, "upload_time": "2018-08-20T18:13:23", "upload_time_iso_8601": "2018-08-20T18:13:23.523527Z", "url": "https://files.pythonhosted.org/packages/b6/57/9e033d5f7081a76045baac0c532faa6f598f8188e808bc2d083485a8417d/upyls-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9145bb77fbbe9dd01e182501756e5fa7", "sha256": "e5753d27f46296bb04e91469508efddcc53ad4c77bca520289ed71996fd54d9e"}, "downloads": -1, "filename": "upyls-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9145bb77fbbe9dd01e182501756e5fa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6881, "upload_time": "2018-09-01T08:24:41", "upload_time_iso_8601": "2018-09-01T08:24:41.728625Z", "url": "https://files.pythonhosted.org/packages/ed/f4/493bbfba77874be0085d81666cf39dc05e093f83676d3deff9557a8e28cc/upyls-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6b33fe12f23cb82e52461166ca55fab", "sha256": "4da89573261265274c543e617712d49a7887e21926a117be233a3ae70dc1235b"}, "downloads": -1, "filename": "upyls-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6b33fe12f23cb82e52461166ca55fab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7194, "upload_time": "2018-09-01T08:24:43", "upload_time_iso_8601": "2018-09-01T08:24:43.245962Z", "url": "https://files.pythonhosted.org/packages/d3/af/094e68c5090e7de201396abd6dab6d368dfb402179c653232a62c6439d07/upyls-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "81029ae68403e82095aee0c5c7595aa7", "sha256": "be314105bcdd3b1d28f84fc442ee79f2424be2a635b9e023c29f24c48e5d3971"}, "downloads": -1, "filename": "upyls-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "81029ae68403e82095aee0c5c7595aa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10295, "upload_time": "2018-09-16T15:53:46", "upload_time_iso_8601": "2018-09-16T15:53:46.156445Z", "url": "https://files.pythonhosted.org/packages/e7/3c/71e8a8a137eb02c8f3183a46080f51e6421758f4a1ca36d0315bcbbf93a6/upyls-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6cd326806ce6a895f8ab295a629a8f1", "sha256": "64f3be913565c2e3caec6ac8de4a374763c5b4e95c017931514f759920bf9ed1"}, "downloads": -1, "filename": "upyls-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d6cd326806ce6a895f8ab295a629a8f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10681, "upload_time": "2018-09-16T15:53:49", "upload_time_iso_8601": "2018-09-16T15:53:49.307023Z", "url": "https://files.pythonhosted.org/packages/ee/83/cfc79c9f99983caa8670ce1205f7af962ca8c81020472ed4b68af90d6dd0/upyls-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "42751d2446f65f2eada60ce96ae4c4db", "sha256": "00ff5c17e89e012c102db8735c5bbd972038e983e6653ba65a5b3421f473359d"}, "downloads": -1, "filename": "upyls-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "42751d2446f65f2eada60ce96ae4c4db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10294, "upload_time": "2018-09-16T18:09:02", "upload_time_iso_8601": "2018-09-16T18:09:02.267490Z", "url": "https://files.pythonhosted.org/packages/77/23/f00b1195cbb569e7c7063d8fd3a5f70ebe4a2b265396dd3f111103869121/upyls-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d581a15317fe8ec535932280fa06915f", "sha256": "9dbe00395b9d766381f4cdf9757a9ebe9b4f2d1b4d6392f156fba19dea9c302f"}, "downloads": -1, "filename": "upyls-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d581a15317fe8ec535932280fa06915f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10685, "upload_time": "2018-09-16T18:09:05", "upload_time_iso_8601": "2018-09-16T18:09:05.869506Z", "url": "https://files.pythonhosted.org/packages/81/cb/27f4681c83d2267b4d5c352356e3fb071997a8f6265b9150c9ae8b104ff0/upyls-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b6472a32ee7fd8954134afa54c31e53e", "sha256": "582561114caea58469f9d56445b14a2d365565bea2dd640ee99bca71a02365c6"}, "downloads": -1, "filename": "upyls-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6472a32ee7fd8954134afa54c31e53e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19894, "upload_time": "2018-11-24T08:34:15", "upload_time_iso_8601": "2018-11-24T08:34:15.724832Z", "url": "https://files.pythonhosted.org/packages/2d/ed/f783bc6b3c2367840b7ae2dcc385c334bbb9e135829b21f48605cdc38c9c/upyls-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7f876232e4aa7b11c9b2c8e22f3dc4b", "sha256": "b6d6c38398ac630138d1014f2503217280a5330034b9f7592591d30982a40961"}, "downloads": -1, "filename": "upyls-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c7f876232e4aa7b11c9b2c8e22f3dc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13014, "upload_time": "2018-11-24T08:34:17", "upload_time_iso_8601": "2018-11-24T08:34:17.439588Z", "url": "https://files.pythonhosted.org/packages/03/d1/6eb082e7076ef1d8a03b2f3c76ec4c9e703d6c17a381240e0605e4f3d040/upyls-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6472a32ee7fd8954134afa54c31e53e", "sha256": "582561114caea58469f9d56445b14a2d365565bea2dd640ee99bca71a02365c6"}, "downloads": -1, "filename": "upyls-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6472a32ee7fd8954134afa54c31e53e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19894, "upload_time": "2018-11-24T08:34:15", "upload_time_iso_8601": "2018-11-24T08:34:15.724832Z", "url": "https://files.pythonhosted.org/packages/2d/ed/f783bc6b3c2367840b7ae2dcc385c334bbb9e135829b21f48605cdc38c9c/upyls-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7f876232e4aa7b11c9b2c8e22f3dc4b", "sha256": "b6d6c38398ac630138d1014f2503217280a5330034b9f7592591d30982a40961"}, "downloads": -1, "filename": "upyls-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c7f876232e4aa7b11c9b2c8e22f3dc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13014, "upload_time": "2018-11-24T08:34:17", "upload_time_iso_8601": "2018-11-24T08:34:17.439588Z", "url": "https://files.pythonhosted.org/packages/03/d1/6eb082e7076ef1d8a03b2f3c76ec4c9e703d6c17a381240e0605e4f3d040/upyls-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:40 2020"}