{"info": {"author": "William S. Annis, Duncan McGreggor", "author_email": "duncan@adytum.us", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Lisp", "Programming Language :: Python", "Topic :: Software Development :: Interpreters"], "description": "~~~~~~~~~\npyLisp-NG\n~~~~~~~~~\n\n.. contents::\n   :depth: 1\n\n\n========\nFeatures\n========\n\n* A tiny Lisp dialect, easy to integrate into other Python projects.\n\n* Includes an interactive Lisp interpreter.\n\n* Expression introspection specifically designed for use in genetic\n  programming.\n\n\n============\nIntroduction\n============\n\npyLisp-NG is an immediate descendant of PyLisp, which had its accidental birth\nas a result of William Annis' desire to build a CLIPS-like [#]_ syntax for a\nsimple expert system intended for the monitoring tool, Mom. As a result of Lisp\ninterest on the Python news group [#]_, William released the software and\nannounced it to the group [#]_.\n\nSeveral years later, the Evolver [#]_ and txEvolver [#]_ projects needed a\nfunctional programming language implementation in Python, as inspecting\nPython's AST was too much of a hassle. The author wanted to distribute,\nprocess, and manage evolutionary algorithms/programs across multiple remote\nTwisted servers, and manipulating permutations of partial programs was much\neasier to integrate with Twisted if the programs themselves could be evaluated\nand introspected easily with Python.\n\npyLisp-NG inherits PyLisp's idiosyncratic charaateristics. For example, the\nbooleans are true and false and it doesn't follow the convention that\neverything that isn't false is true (common to many Lisps). In fact, all\nbooleans in pyLisp-NG are based on fuzzy logic, so you can do trickier things.\nMacros are, quite strangely, first class objects in PyLisp which maybe novel to\nLisps [#]_::\n\n    lisp> (setq foo 22)\n    22\n    lisp> ((macro (x) `(setq ,x (+ ,x 1))) foo)\n    23\n\npyLisp-NG, like its predecessor, has no intent of becomming a full-fledged,\nrobust Lisp implementation. All progress is governed solely by the interest of\ncontributing developers; right now, that's strictly for use as a genetic\nprogramming tool.\n\n\n============\nInstallation\n============\n\npyLisp-NG is setuptools-friendly; you can install it with the following:\n\n  $ easy_install pyLisp-NG\n\nYou can also get the full source code from Launchpad:\n\n  $ bzr lp:pylisp-ng\n\nThe latter option greatly encouraged for interested users, as the repository\ncontains extra files that are not included in the ditribution tarballs (such as\nthe test runner and test utils).\n\n\n=====\nUsage\n=====\n\nTo use the interpretter from a full checkout, do this:\n\n    $ cd <branch directory>\n    $ ./bin/pylisp-ng\n\nIf you've installed with easy_install, and your Python scripts directory is in\nyour PATH, all you'll need to do is this:\n\n    $ pylisp-ng\n\nAt this point, you'll be able to enter Lisp expressions::\n\n    lisp> ((lambda (x) (* x x)) 2)\n    4\n    lisp>\n\nYou can use the s-expression code from Python::\n\n    >>> from pylispng import lisp\n    >>> l = lisp.SExpression('((lambda (x) (* x x)) 2)')\n    >>> str(l)\n    '((lambda (x) (* x x)) 2)'\n    >>> l.eval()\n    4\n\nBuilding an expression one symbol at a time or by adding chunks at a time::\n\n    >>> l = lisp.SExpression()\n    >>> l.append('+')\n    >>> l.append('3')\n    >>> l.append('5')\n    >>> l.append('(* 3 3)')\n    >>> str(l)\n    '(+ 3 5 (* 3 3))'\n\nYou can examine various properties of the s-expression::\n\n    >>> l.eval()\n    17\n    >>> l.getDepth()\n    2\n    >>> len(l)\n    4\n    >>> l.getSize()\n    2\n\n\n\n\n==========\nKnown Bugs\n==========\n\nNone currently known.\n\n\n====\nTODO\n====\n\n* support testing .l files\n\n* support lisp interpreter tests in doctests?\n\n* add http://www.biostat.wisc.edu/~annis/creations/PyLisp/tests.txt to tests\n\n* split up monolithic lisp.py file into separate files\n\n* replace fragile interpreter that originally came with PyLisp with one based\n  on the Python interpreter\n\n  - graceful quit\n\n  - command history\n\n  - auto-completion\n\n* add support for getting expressions by index (and thus slicing as well)\n\n* add support for getting sub-expressions\n\n\n=======\nChanges\n=======\n\nFrom PyLisp 1.17 to 2.0.0 (pyLisp-NG)\n-------------------------------------\n\n* Added introspection code that's useful for genetic programming.\n\n* A couple small bug fixes and some code cleanup.\n\nFrom PyLisp 0.0 to 1.17\n-----------------------\n\nThere doesn't seem to be any history from which to extract code changes between\nprevious versions and 1.17.\n\n\n\n\n==========\nReferences\n==========\n\n.. [#] http://clipsrules.sourceforge.net/\n\n.. [#] http://mail.python.org/pipermail/python-list/2001-May/thread.html, search\n       the page for \"lisp\"\n.. [#] http://mail.python.org/pipermail/python-list/2001-May/084087.html\n\n.. [#] https://launchpad.net/evolver\n\n.. [#] https://launchpad.net/txevolver\n\n.. [#] Taken from http://www.biostat.wisc.edu/~annis/creations/PyLisp/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://launchpad.net/pylisp-ng", "keywords": null, "license": "LGPL 2.1", "maintainer": null, "maintainer_email": null, "name": "pyLisp-NG", "package_url": "https://pypi.org/project/pyLisp-NG/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyLisp-NG/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://launchpad.net/pylisp-ng"}, "release_url": "https://pypi.org/project/pyLisp-NG/2.0.0/", "requires_dist": null, "requires_python": null, "summary": "A very simple implementation of Lisp in Python that is perfectly suitable for Python projects needing Lisp-like capabilities.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#features\" id=\"id13\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#introduction\" id=\"id14\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" id=\"id15\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id16\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#known-bugs\" id=\"id17\" rel=\"nofollow\">Known Bugs</a></li>\n<li><a href=\"#todo\" id=\"id18\" rel=\"nofollow\">TODO</a></li>\n<li><a href=\"#changes\" id=\"id19\" rel=\"nofollow\">Changes</a></li>\n<li><a href=\"#references\" id=\"id20\" rel=\"nofollow\">References</a></li>\n</ul>\n</div>\n<div id=\"features\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Features</a></h2>\n<ul>\n<li>A tiny Lisp dialect, easy to integrate into other Python projects.</li>\n<li>Includes an interactive Lisp interpreter.</li>\n<li>Expression introspection specifically designed for use in genetic\nprogramming.</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Introduction</a></h2>\n<p>pyLisp-NG is an immediate descendant of PyLisp, which had its accidental birth\nas a result of William Annis\u2019 desire to build a CLIPS-like <a href=\"#id7\" id=\"id1\" rel=\"nofollow\">[1]</a> syntax for a\nsimple expert system intended for the monitoring tool, Mom. As a result of Lisp\ninterest on the Python news group <a href=\"#id8\" id=\"id2\" rel=\"nofollow\">[2]</a>, William released the software and\nannounced it to the group <a href=\"#id9\" id=\"id3\" rel=\"nofollow\">[3]</a>.</p>\n<p>Several years later, the Evolver <a href=\"#id10\" id=\"id4\" rel=\"nofollow\">[4]</a> and txEvolver <a href=\"#id11\" id=\"id5\" rel=\"nofollow\">[5]</a> projects needed a\nfunctional programming language implementation in Python, as inspecting\nPython\u2019s AST was too much of a hassle. The author wanted to distribute,\nprocess, and manage evolutionary algorithms/programs across multiple remote\nTwisted servers, and manipulating permutations of partial programs was much\neasier to integrate with Twisted if the programs themselves could be evaluated\nand introspected easily with Python.</p>\n<p>pyLisp-NG inherits PyLisp\u2019s idiosyncratic charaateristics. For example, the\nbooleans are true and false and it doesn\u2019t follow the convention that\neverything that isn\u2019t false is true (common to many Lisps). In fact, all\nbooleans in pyLisp-NG are based on fuzzy logic, so you can do trickier things.\nMacros are, quite strangely, first class objects in PyLisp which maybe novel to\nLisps <a href=\"#id12\" id=\"id6\" rel=\"nofollow\">[6]</a>:</p>\n<pre>lisp&gt; (setq foo 22)\n22\nlisp&gt; ((macro (x) `(setq ,x (+ ,x 1))) foo)\n23\n</pre>\n<p>pyLisp-NG, like its predecessor, has no intent of becomming a full-fledged,\nrobust Lisp implementation. All progress is governed solely by the interest of\ncontributing developers; right now, that\u2019s strictly for use as a genetic\nprogramming tool.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Installation</a></h2>\n<p>pyLisp-NG is setuptools-friendly; you can install it with the following:</p>\n<blockquote>\n$ easy_install pyLisp-NG</blockquote>\n<p>You can also get the full source code from Launchpad:</p>\n<blockquote>\n$ bzr lp:pylisp-ng</blockquote>\n<p>The latter option greatly encouraged for interested users, as the repository\ncontains extra files that are not included in the ditribution tarballs (such as\nthe test runner and test utils).</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Usage</a></h2>\n<p>To use the interpretter from a full checkout, do this:</p>\n<blockquote>\n$ cd &lt;branch directory&gt;\n$ ./bin/pylisp-ng</blockquote>\n<p>If you\u2019ve installed with easy_install, and your Python scripts directory is in\nyour PATH, all you\u2019ll need to do is this:</p>\n<blockquote>\n$ pylisp-ng</blockquote>\n<p>At this point, you\u2019ll be able to enter Lisp expressions:</p>\n<pre>lisp&gt; ((lambda (x) (* x x)) 2)\n4\nlisp&gt;\n</pre>\n<p>You can use the s-expression code from Python:</p>\n<pre>&gt;&gt;&gt; from pylispng import lisp\n&gt;&gt;&gt; l = lisp.SExpression('((lambda (x) (* x x)) 2)')\n&gt;&gt;&gt; str(l)\n'((lambda (x) (* x x)) 2)'\n&gt;&gt;&gt; l.eval()\n4\n</pre>\n<p>Building an expression one symbol at a time or by adding chunks at a time:</p>\n<pre>&gt;&gt;&gt; l = lisp.SExpression()\n&gt;&gt;&gt; l.append('+')\n&gt;&gt;&gt; l.append('3')\n&gt;&gt;&gt; l.append('5')\n&gt;&gt;&gt; l.append('(* 3 3)')\n&gt;&gt;&gt; str(l)\n'(+ 3 5 (* 3 3))'\n</pre>\n<p>You can examine various properties of the s-expression:</p>\n<pre>&gt;&gt;&gt; l.eval()\n17\n&gt;&gt;&gt; l.getDepth()\n2\n&gt;&gt;&gt; len(l)\n4\n&gt;&gt;&gt; l.getSize()\n2\n</pre>\n</div>\n<div id=\"known-bugs\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Known Bugs</a></h2>\n<p>None currently known.</p>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#id18\" rel=\"nofollow\">TODO</a></h2>\n<ul>\n<li>support testing .l files</li>\n<li>support lisp interpreter tests in doctests?</li>\n<li>add <a href=\"http://www.biostat.wisc.edu/~annis/creations/PyLisp/tests.txt\" rel=\"nofollow\">http://www.biostat.wisc.edu/~annis/creations/PyLisp/tests.txt</a> to tests</li>\n<li>split up monolithic lisp.py file into separate files</li>\n<li>replace fragile interpreter that originally came with PyLisp with one based\non the Python interpreter<ul>\n<li>graceful quit</li>\n<li>command history</li>\n<li>auto-completion</li>\n</ul>\n</li>\n<li>add support for getting expressions by index (and thus slicing as well)</li>\n<li>add support for getting sub-expressions</li>\n</ul>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"from-pylisp-1-17-to-2-0-0-pylisp-ng\">\n<h3>From PyLisp 1.17 to 2.0.0 (pyLisp-NG)</h3>\n<ul>\n<li>Added introspection code that\u2019s useful for genetic programming.</li>\n<li>A couple small bug fixes and some code cleanup.</li>\n</ul>\n</div>\n<div id=\"from-pylisp-0-0-to-1-17\">\n<h3>From PyLisp 0.0 to 1.17</h3>\n<p>There doesn\u2019t seem to be any history from which to extract code changes between\nprevious versions and 1.17.</p>\n</div>\n</div>\n<div id=\"references\">\n<h2><a href=\"#id20\" rel=\"nofollow\">References</a></h2>\n<table id=\"id7\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td><a href=\"http://clipsrules.sourceforge.net/\" rel=\"nofollow\">http://clipsrules.sourceforge.net/</a></td></tr>\n</tbody>\n</table>\n<table id=\"id8\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[2]</a></td><td><a href=\"http://mail.python.org/pipermail/python-list/2001-May/thread.html\" rel=\"nofollow\">http://mail.python.org/pipermail/python-list/2001-May/thread.html</a>, search\nthe page for \u201clisp\u201d</td></tr>\n</tbody>\n</table>\n<table id=\"id9\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[3]</a></td><td><a href=\"http://mail.python.org/pipermail/python-list/2001-May/084087.html\" rel=\"nofollow\">http://mail.python.org/pipermail/python-list/2001-May/084087.html</a></td></tr>\n</tbody>\n</table>\n<table id=\"id10\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id4\" rel=\"nofollow\">[4]</a></td><td><a href=\"https://launchpad.net/evolver\" rel=\"nofollow\">https://launchpad.net/evolver</a></td></tr>\n</tbody>\n</table>\n<table id=\"id11\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id5\" rel=\"nofollow\">[5]</a></td><td><a href=\"https://launchpad.net/txevolver\" rel=\"nofollow\">https://launchpad.net/txevolver</a></td></tr>\n</tbody>\n</table>\n<table id=\"id12\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id6\" rel=\"nofollow\">[6]</a></td><td>Taken from <a href=\"http://www.biostat.wisc.edu/~annis/creations/PyLisp/\" rel=\"nofollow\">http://www.biostat.wisc.edu/~annis/creations/PyLisp/</a></td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 796912, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "e341de022b25121b49a68398a4f94c4c", "sha256": "f58d8381d666166c8f05105efad48e13c8605a8fc17338fd42cece84b7d91c15"}, "downloads": -1, "filename": "pyLisp_NG-2.0.0-py2.4.egg", "has_sig": false, "md5_digest": "e341de022b25121b49a68398a4f94c4c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 53697, "upload_time": "2008-11-11T20:09:12", "upload_time_iso_8601": "2008-11-11T20:09:12Z", "url": "https://files.pythonhosted.org/packages/91/15/e2e3eba8a206b3db60c5a98daccfd0c30a14d0d9449bdc06ce24ce239c29/pyLisp_NG-2.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b6fb5e6b5879dabac2e7fbd5da7236d", "sha256": "36a063149df76a87098a3eaf139546498eaaa3b26835d276ba2d4086de1408ff"}, "downloads": -1, "filename": "pyLisp_NG-2.0.0-py2.5.egg", "has_sig": false, "md5_digest": "4b6fb5e6b5879dabac2e7fbd5da7236d", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 53015, "upload_time": "2008-11-11T20:09:06", "upload_time_iso_8601": "2008-11-11T20:09:06Z", "url": "https://files.pythonhosted.org/packages/6e/b6/e5ec8588b86f7b0cdb172bc5287f22cb0ed3acef52da9806921e7b063046/pyLisp_NG-2.0.0-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "84141318cde6bf4e4f10ac4a920531be", "sha256": "d14dee540c78d2b2a21ccfe09b1e9bab86cd060451545946555eb2ccbf9735d5"}, "downloads": -1, "filename": "pyLisp-NG-2.0.0.tar.gz", "has_sig": false, "md5_digest": "84141318cde6bf4e4f10ac4a920531be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21800, "upload_time": "2008-11-11T20:08:56", "upload_time_iso_8601": "2008-11-11T20:08:56Z", "url": "https://files.pythonhosted.org/packages/a2/88/00b7100011f7fde00ad590dc6c6e64aa936a0d9b7152f97597c96f105f2e/pyLisp-NG-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e341de022b25121b49a68398a4f94c4c", "sha256": "f58d8381d666166c8f05105efad48e13c8605a8fc17338fd42cece84b7d91c15"}, "downloads": -1, "filename": "pyLisp_NG-2.0.0-py2.4.egg", "has_sig": false, "md5_digest": "e341de022b25121b49a68398a4f94c4c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 53697, "upload_time": "2008-11-11T20:09:12", "upload_time_iso_8601": "2008-11-11T20:09:12Z", "url": "https://files.pythonhosted.org/packages/91/15/e2e3eba8a206b3db60c5a98daccfd0c30a14d0d9449bdc06ce24ce239c29/pyLisp_NG-2.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b6fb5e6b5879dabac2e7fbd5da7236d", "sha256": "36a063149df76a87098a3eaf139546498eaaa3b26835d276ba2d4086de1408ff"}, "downloads": -1, "filename": "pyLisp_NG-2.0.0-py2.5.egg", "has_sig": false, "md5_digest": "4b6fb5e6b5879dabac2e7fbd5da7236d", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 53015, "upload_time": "2008-11-11T20:09:06", "upload_time_iso_8601": "2008-11-11T20:09:06Z", "url": "https://files.pythonhosted.org/packages/6e/b6/e5ec8588b86f7b0cdb172bc5287f22cb0ed3acef52da9806921e7b063046/pyLisp_NG-2.0.0-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "84141318cde6bf4e4f10ac4a920531be", "sha256": "d14dee540c78d2b2a21ccfe09b1e9bab86cd060451545946555eb2ccbf9735d5"}, "downloads": -1, "filename": "pyLisp-NG-2.0.0.tar.gz", "has_sig": false, "md5_digest": "84141318cde6bf4e4f10ac4a920531be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21800, "upload_time": "2008-11-11T20:08:56", "upload_time_iso_8601": "2008-11-11T20:08:56Z", "url": "https://files.pythonhosted.org/packages/a2/88/00b7100011f7fde00ad590dc6c6e64aa936a0d9b7152f97597c96f105f2e/pyLisp-NG-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:59 2020"}