{"info": {"author": "Big Data", "author_email": "bigdata@corp.globo.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/globocom/auror-core.svg?branch=master)](https://travis-ci.com/globocom/auror-core)\n\n# Auror Core\n> Simple Flow creation for Azkaban\n\n![auror](https://pm1.narvii.com/6278/52c20397d131f309c687f0baa5125968cf79aea3_hq.jpg)\n\n## Install\n\n```bash\npip install auror_core\n```\n\n## Supported Job Types\n\n### V1\n\n* **Command**\n* **Flow**\n\n### V2\n\n* **Command**\n\n## Usage\n\n* [Creating a simple Azkaban flow with one command](#creating-a-simple-azkaban-flow-with-one-command)\n* [Creating a simple V2 Azkaban flow with one command](#Creating-a-simple-v2-azkaban-flow-with-one-command )\n* [Creating Flows with dependencies](#creating-flows-with-dependencies)\n* [Sharing job attributes](#sharing-job-attributes)\n* [Job with extra customization and configuration](#job-with-extra-customization-and-configuration)\n* [Integrating with Flow (just for V1)](#integrating-with-flow-(just-for-v1))\n* [Using Flow Params](#using-flow-params)\n* [Using Flow Environment Variables](#using-flow-environment-variables)\n* [Using Flow Environment Variables and Params](#using-flow-environment-variables-and-params)\n* [Join multiple variables in one](#join-multiple-variables-in-one)\n* [Load jobs from YAML File (just for V2)](#Load-jobs-from-yaml-file-(just-for-v2))\n* [Dump memory flows to a Python File (just for V2)](#dump-memory-flows-to-a-python-file-(just-for-v2))\n\n\n### Creating a simple Azkaban flow with one command \n\nYou just need to import job type and project\n\n```python\nfrom auror_core.v1.job import Job, Command\nfrom auror_core import Project\n\ncom1 = Job()\\\n.as_type(Command)\\\n.with_name(\"commands job\")\\\n.with_command(\"bash echo 1\")\\\n.with_another_command(\"bash echo 2\")\n\nProject(\"folder_to_generate_files\", com1).write()\n\n```\n\n### Creating a simple V2 Azkaban flow with one command \n\nV2 flow is implemented under v2 subfolder with same job types\n\n```python\nfrom auror_core.v2.job import Job, Command\nfrom auror_core import Project\n\ncom1 = Job()\\\n.as_type(Command)\\\n.with_name(\"commands job\")\\\n.with_command(\"bash echo 1\")\\\n.with_another_command(\"bash echo 2\")\n\nProject(\"folder_to_generate_files\", com1).is_v2().write()\n\n```\n\n### Creating Flows with dependencies\n\n```python\nfrom auror_core.v2.job import Job, Command\nfrom auror_core import Project\n\ncom1 = Job()\\\n.as_type(Command)\\\n.with_name(\"commands job\")\\\n.with_command(\"bash echo 1\")\\\n.with_another_command(\"bash echo 2\")\n\ncom2 = Command()\\\n.with_name(\"sub command job\")\\\n.with_command(\"bash echo 1\")\\\n.with_dependencies(com1)\n\nProject(\"folder_to_generate_files\", com1, com2).is_v2().write()\n\n```\n\n### Sharing job attributes\n\nOrganize jobs with same configuration\n\n```python\nfrom auror_core.v2.job import Command\nfrom auror_core import Project\n\ncom = Command()\\\n.with_command(\"bash echo 1\")\n\ncom1 = com.with_name(\"commands job\")\\\n.with_another_command(\"bash echo 2\")\n\ncom2 = com.with_name(\"sub command job\")\\\n.with_dependencies(com1)\n\nProject(\"folder_to_generate_files\", com1, com2).is_v2().write()\n\n```\n\n### Job with extra customization and configuration \n\nSimulating a Command with base Job (NOT RECOMMENDED)\n\n```python\nfrom auror_core.v1.job import Job\nfrom auror_core import Project\n\ncom1 = Job()\\\n.with_name(\"commands job\")\\\n.with_(command=\"bash echo 1\")\n\ncom1._type = \"command\"\n\nProject(\"folder_to_generate_files\", com1).write()\n\n```\n\n### Integrating with Flow (just for V1)\n\nV2 already have flow included\n\n```python\nfrom auror_core.v1.job import Command, Flow, Job\nfrom auror_core import Project\n\ncom1 = Command()\\\n.with_name(\"commands job\")\\\n.with_command(\"bash echo 1\")\n\nflow = Job()\\\n.as_type(Flow)\\\n.with_name(\"flow\")\\\n.with_dependencies(com1)\n\nProject(\"folder_to_generate_files\", com1, flow).write()\n\n```\n\n### Using Flow Params\n\n```python\nfrom auror_core.v2.job import Command\nfrom auror_core.v2.params import Params\nfrom auror_core import Project\n\nparams = Params(\n    teste1=\"my test\",\n    variable=\"my variable\"\n)\n\ncom = Command()\\\n.with_command(\"bash echo ${variable}\")\n\nProject(\"folder_to_generate_files\", com)\\\n.is_v2()\\\n.with_params(params)\\\n.write()\n\n```\n\n### Using Flow Environment Variables\n\n\n```python\nfrom auror_core.v2.job import Command\nfrom auror_core.v2.params import Env\nfrom auror_core import Project\n\nenv = Env(\n    TESTE=\"my test\",\n    VARIABLE=\"my variable\"\n)\n\ncom = Command()\\\n.with_command(\"bash echo $VARIABLE\")\n\nProject(\"folder_to_generate_files\", com)\\\n.is_v2()\\\n.with_params(env)\\\n.write()\n\n```\n\n### Using Flow Environment Variables and Params\n\n\n```python\nfrom auror_core.v2.job import Command\nfrom auror_core.v2.params import Env, Params\nfrom auror_core import Project\n\nenv = Env(\n    TESTE=\"my test\",\n    VARIABLE=\"my variable\"\n)\n\nparams = Params(\n    teste1=\"my test\",\n    variable=\"my variable\"\n)\n\ncom = Command()\\\n.with_command(\"bash echo $VARIABLE ${variable}\")\n\nProject(\"folder_to_generate_files\", com)\\\n.is_v2()\\\n.with_params(params, env)\\\n.write()\n\n```\n\n### Join multiple variables in one\n\n```python\nfrom auror_core.v2.job import Command\nfrom auror_core.v2.params import Env\nfrom auror_core import Project\n\nenv = Env(\n    TESTE=\"env test\",\n    VARIABLE=\"env variable\"\n)\n\nparams = Params(\n    teste1=\"my test\",\n    variable=\"my variable\"\n)\n\none_param = ParamsJoin(\"params_strange_name\", \",\") ## param name and separator\n\ncom = Command()\\\n.with_command(\"bash echo ${params_strange_name}\") \n## it will print: my test,my variable,env test,env variable\n## THERE IS NO ORDER GUARANTEE, JUST Python 3.6 >\n\nProject(\"folder_to_generate_files\", com)\\\n.is_v2()\\\n.with_params(one_param(params, env))\\\n.write()\n\n```\n\n### Load jobs from YAML File (just for V2)\n\n**You can find some YAML File examples on [Azkaban Flow Documentation](https://github.com/azkaban/azkaban/wiki/Azkaban-Flow-2.0-Design#flow-yaml-file)**\n\n```python\nfrom auror_core.v2.loader import Loader\n\nloader = Loader('/path/to/file/flow.yaml')\njobs = loader.as_job_objects()\n```\n\nOr you can export these jobs as a Python File\n\n```python\nfrom auror_core.v2.loader import Loader\n\nloader = Loader('/path/to/file/flow.yaml')\njobs = loader.as_python_file('/path/to/desired/directory') # will be dumped with 'flow.py' name\n```\n\n### Dump memory flows to a Python File (just for V2)\n\n```python\nfrom auror_core.v2.dumper import Dumper\n\ncom1 = Job() \\\n.with_name(\"commands job 1\") \\\n.with_(command=\"bash echo 1\")\n\ncom2 = Job()\\\n.with_name(\"commands job 2\")\\\n.with_(command=\"bash echo 2\")\n\ndumper = Dumper('/path/to/desired/directory') # will be dumped with 'flow.py' name\ndumper.dump_jobs(com1, com2)\n```\n\n## Plugins\n\nPlugins are just extensions from auror_core\n\nThere is a cookiecutter for new azkaban jobtypes with Auror template too: https://github.com/globocom/azkaban-jobtype-cookiecutter\n\nWe already have email plugin: https://github.com/globocom/azkaban-jobtype-email\n\n## Contribute\n\nFor development and contributing, please follow [Contributing Guide](https://github.com/globocom/auror-core/blob/master/CONTRIBUTING.md) and ALWAYS respect the [Code of Conduct](https://github.com/globocom/auror-core/blob/master/CODE_OF_CONDUCT.md)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "auror-core", "package_url": "https://pypi.org/project/auror-core/", "platform": "", "project_url": "https://pypi.org/project/auror-core/", "project_urls": null, "release_url": "https://pypi.org/project/auror-core/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "Doing Jobs Dinamically with Azkaban", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/globocom/auror-core\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23de63943245aba36e7979e34139290eff743748/68747470733a2f2f7472617669732d63692e636f6d2f676c6f626f636f6d2f6175726f722d636f72652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Auror Core</h1>\n<blockquote>\n<p>Simple Flow creation for Azkaban</p>\n</blockquote>\n<p><img alt=\"auror\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5589e00579d89b31d27b1674142208d77bafc330/68747470733a2f2f706d312e6e61727669692e636f6d2f363237382f353263323033393764313331663330396336383766306261613531323539363863663739616561335f68712e6a7067\"></p>\n<h2>Install</h2>\n<pre>pip install auror_core\n</pre>\n<h2>Supported Job Types</h2>\n<h3>V1</h3>\n<ul>\n<li><strong>Command</strong></li>\n<li><strong>Flow</strong></li>\n</ul>\n<h3>V2</h3>\n<ul>\n<li><strong>Command</strong></li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"#creating-a-simple-azkaban-flow-with-one-command\" rel=\"nofollow\">Creating a simple Azkaban flow with one command</a></li>\n<li><a href=\"#Creating-a-simple-v2-azkaban-flow-with-one-command\" rel=\"nofollow\">Creating a simple V2 Azkaban flow with one command</a></li>\n<li><a href=\"#creating-flows-with-dependencies\" rel=\"nofollow\">Creating Flows with dependencies</a></li>\n<li><a href=\"#sharing-job-attributes\" rel=\"nofollow\">Sharing job attributes</a></li>\n<li><a href=\"#job-with-extra-customization-and-configuration\" rel=\"nofollow\">Job with extra customization and configuration</a></li>\n<li><a href=\"#integrating-with-flow-(just-for-v1)\" rel=\"nofollow\">Integrating with Flow (just for V1)</a></li>\n<li><a href=\"#using-flow-params\" rel=\"nofollow\">Using Flow Params</a></li>\n<li><a href=\"#using-flow-environment-variables\" rel=\"nofollow\">Using Flow Environment Variables</a></li>\n<li><a href=\"#using-flow-environment-variables-and-params\" rel=\"nofollow\">Using Flow Environment Variables and Params</a></li>\n<li><a href=\"#join-multiple-variables-in-one\" rel=\"nofollow\">Join multiple variables in one</a></li>\n<li><a href=\"#Load-jobs-from-yaml-file-(just-for-v2)\" rel=\"nofollow\">Load jobs from YAML File (just for V2)</a></li>\n<li><a href=\"#dump-memory-flows-to-a-python-file-(just-for-v2)\" rel=\"nofollow\">Dump memory flows to a Python File (just for V2)</a></li>\n</ul>\n<h3>Creating a simple Azkaban flow with one command</h3>\n<p>You just need to import job type and project</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v1.job</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span><span class=\"p\">,</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">as_type</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_another_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Creating a simple V2 Azkaban flow with one command</h3>\n<p>V2 flow is implemented under v2 subfolder with same job types</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span><span class=\"p\">,</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">as_type</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_another_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Creating Flows with dependencies</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span><span class=\"p\">,</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">as_type</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_another_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com2</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"sub command job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_dependencies</span><span class=\"p\">(</span><span class=\"n\">com1</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">,</span> <span class=\"n\">com2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Sharing job attributes</h3>\n<p>Organize jobs with same configuration</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_another_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com2</span> <span class=\"o\">=</span> <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"sub command job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_dependencies</span><span class=\"p\">(</span><span class=\"n\">com1</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">,</span> <span class=\"n\">com2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Job with extra customization and configuration</h3>\n<p>Simulating a Command with base Job (NOT RECOMMENDED)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v1.job</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com1</span><span class=\"o\">.</span><span class=\"n\">_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"command\"</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Integrating with Flow (just for V1)</h3>\n<p>V2 already have flow included</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v1.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span><span class=\"p\">,</span> <span class=\"n\">Flow</span><span class=\"p\">,</span> <span class=\"n\">Job</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">as_type</span><span class=\"p\">(</span><span class=\"n\">Flow</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"flow\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_dependencies</span><span class=\"p\">(</span><span class=\"n\">com1</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com1</span><span class=\"p\">,</span> <span class=\"n\">flow</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Using Flow Params</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.params</span> <span class=\"kn\">import</span> <span class=\"n\">Params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">Params</span><span class=\"p\">(</span>\n    <span class=\"n\">teste1</span><span class=\"o\">=</span><span class=\"s2\">\"my test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">\"my variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo $</span><span class=\"si\">{variable}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_params</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Using Flow Environment Variables</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.params</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n    <span class=\"n\">TESTE</span><span class=\"o\">=</span><span class=\"s2\">\"my test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">VARIABLE</span><span class=\"o\">=</span><span class=\"s2\">\"my variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo $VARIABLE\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_params</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Using Flow Environment Variables and Params</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.params</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span><span class=\"p\">,</span> <span class=\"n\">Params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n    <span class=\"n\">TESTE</span><span class=\"o\">=</span><span class=\"s2\">\"my test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">VARIABLE</span><span class=\"o\">=</span><span class=\"s2\">\"my variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">Params</span><span class=\"p\">(</span>\n    <span class=\"n\">teste1</span><span class=\"o\">=</span><span class=\"s2\">\"my test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">\"my variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo $VARIABLE $</span><span class=\"si\">{variable}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_params</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Join multiple variables in one</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.job</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.params</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">auror_core</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span>\n    <span class=\"n\">TESTE</span><span class=\"o\">=</span><span class=\"s2\">\"env test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">VARIABLE</span><span class=\"o\">=</span><span class=\"s2\">\"env variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">Params</span><span class=\"p\">(</span>\n    <span class=\"n\">teste1</span><span class=\"o\">=</span><span class=\"s2\">\"my test\"</span><span class=\"p\">,</span>\n    <span class=\"n\">variable</span><span class=\"o\">=</span><span class=\"s2\">\"my variable\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">one_param</span> <span class=\"o\">=</span> <span class=\"n\">ParamsJoin</span><span class=\"p\">(</span><span class=\"s2\">\"params_strange_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\",\"</span><span class=\"p\">)</span> <span class=\"c1\">## param name and separator</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_command</span><span class=\"p\">(</span><span class=\"s2\">\"bash echo $</span><span class=\"si\">{params_strange_name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span> \n<span class=\"c1\">## it will print: my test,my variable,env test,env variable</span>\n<span class=\"c1\">## THERE IS NO ORDER GUARANTEE, JUST Python 3.6 &gt;</span>\n\n<span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s2\">\"folder_to_generate_files\"</span><span class=\"p\">,</span> <span class=\"n\">com</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">is_v2</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_params</span><span class=\"p\">(</span><span class=\"n\">one_param</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">))</span>\\\n<span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>\n</pre>\n<h3>Load jobs from YAML File (just for V2)</h3>\n<p><strong>You can find some YAML File examples on <a href=\"https://github.com/azkaban/azkaban/wiki/Azkaban-Flow-2.0-Design#flow-yaml-file\" rel=\"nofollow\">Azkaban Flow Documentation</a></strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.loader</span> <span class=\"kn\">import</span> <span class=\"n\">Loader</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">Loader</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/flow.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">as_job_objects</span><span class=\"p\">()</span>\n</pre>\n<p>Or you can export these jobs as a Python File</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.loader</span> <span class=\"kn\">import</span> <span class=\"n\">Loader</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">Loader</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file/flow.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">as_python_file</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/desired/directory'</span><span class=\"p\">)</span> <span class=\"c1\"># will be dumped with 'flow.py' name</span>\n</pre>\n<h3>Dump memory flows to a Python File (just for V2)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">auror_core.v2.dumper</span> <span class=\"kn\">import</span> <span class=\"n\">Dumper</span>\n\n<span class=\"n\">com1</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span> \\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job 1\"</span><span class=\"p\">)</span> \\\n<span class=\"o\">.</span><span class=\"n\">with_</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s2\">\"bash echo 1\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com2</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">()</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_name</span><span class=\"p\">(</span><span class=\"s2\">\"commands job 2\"</span><span class=\"p\">)</span>\\\n<span class=\"o\">.</span><span class=\"n\">with_</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"s2\">\"bash echo 2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">dumper</span> <span class=\"o\">=</span> <span class=\"n\">Dumper</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/desired/directory'</span><span class=\"p\">)</span> <span class=\"c1\"># will be dumped with 'flow.py' name</span>\n<span class=\"n\">dumper</span><span class=\"o\">.</span><span class=\"n\">dump_jobs</span><span class=\"p\">(</span><span class=\"n\">com1</span><span class=\"p\">,</span> <span class=\"n\">com2</span><span class=\"p\">)</span>\n</pre>\n<h2>Plugins</h2>\n<p>Plugins are just extensions from auror_core</p>\n<p>There is a cookiecutter for new azkaban jobtypes with Auror template too: <a href=\"https://github.com/globocom/azkaban-jobtype-cookiecutter\" rel=\"nofollow\">https://github.com/globocom/azkaban-jobtype-cookiecutter</a></p>\n<p>We already have email plugin: <a href=\"https://github.com/globocom/azkaban-jobtype-email\" rel=\"nofollow\">https://github.com/globocom/azkaban-jobtype-email</a></p>\n<h2>Contribute</h2>\n<p>For development and contributing, please follow <a href=\"https://github.com/globocom/auror-core/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Contributing Guide</a> and ALWAYS respect the <a href=\"https://github.com/globocom/auror-core/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a></p>\n\n          </div>"}, "last_serial": 6132906, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "d4d0820f99841b5714c3ead50db56123", "sha256": "47482b04617550c4f9fcc462061dc020d65d377ad653fb97da40235ad5160926"}, "downloads": -1, "filename": "auror_core-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d4d0820f99841b5714c3ead50db56123", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8231, "upload_time": "2018-11-22T20:36:23", "upload_time_iso_8601": "2018-11-22T20:36:23.904170Z", "url": "https://files.pythonhosted.org/packages/dd/f1/eb7a4322b1d21e8917375321477226e16d0c90a82dff4a24b04f0b4b49ac/auror_core-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0840c0fbc99f4d58558968be4f433ed1", "sha256": "3d8559a68134f9203a8ff4d1d2bd8e7f2ae2c28ca5276dfc17abc7117277957b"}, "downloads": -1, "filename": "auror_core-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0840c0fbc99f4d58558968be4f433ed1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6810, "upload_time": "2018-12-15T19:54:02", "upload_time_iso_8601": "2018-12-15T19:54:02.477862Z", "url": "https://files.pythonhosted.org/packages/84/6f/da53a45359aba2626866f78aa63e578080ab4ec919aa04c210e10cbd6adc/auror_core-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ca8bcea5fa93036292638414cbd133d2", "sha256": "d560d927df7f2a88556e8ca4c860605a8f97fa842668f7f7640b478799e4eb3f"}, "downloads": -1, "filename": "auror_core-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ca8bcea5fa93036292638414cbd133d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11899, "upload_time": "2019-11-13T21:12:49", "upload_time_iso_8601": "2019-11-13T21:12:49.598970Z", "url": "https://files.pythonhosted.org/packages/3d/74/6d595df0c4cfdcf54c65e882649a73ec975aeced0f0b2d3acc1870115b5a/auror_core-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca8bcea5fa93036292638414cbd133d2", "sha256": "d560d927df7f2a88556e8ca4c860605a8f97fa842668f7f7640b478799e4eb3f"}, "downloads": -1, "filename": "auror_core-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ca8bcea5fa93036292638414cbd133d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11899, "upload_time": "2019-11-13T21:12:49", "upload_time_iso_8601": "2019-11-13T21:12:49.598970Z", "url": "https://files.pythonhosted.org/packages/3d/74/6d595df0c4cfdcf54c65e882649a73ec975aeced0f0b2d3acc1870115b5a/auror_core-1.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:24 2020"}