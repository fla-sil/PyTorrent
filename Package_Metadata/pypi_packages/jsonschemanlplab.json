{"info": {"author": "Oren Baldinger", "author_email": "oren@baldinger.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "================\njsonschemanlplab\n================\n\n|PyPI| |Pythons| |Travis| |AppVeyor| |ReadTheDocs|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Travis| image:: https://travis-ci.org/Julian/jsonschema.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.org/Julian/jsonschema\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/jsonschema\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\nThis is a fork of https://github.com/Julian/jsonschema which exists only to circumvent dependency incompatibilities. \n\n\n``jsonschemanlplab`` is an implementation of `JSON Schema <https://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschemanlplab import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschemanlplab -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft7Validator>`_,\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema>`_\n  of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschemanlplab`` is available on `PyPI <https://pypi.org/project/jsonschemanlplab/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    $ pip install jsonschemanlplab\n\n\nRelease Notes\n-------------\n\nVersion 3.0 brings support for Draft 7 (and 6). The interface for redefining\ntypes has also been majorly overhauled to support easier redefinition of the\ntypes a Validator will accept or allow.\n\njsonschemanlplab is also now tested under Windows via AppVeyor.\n\nThanks to all who contributed pull requests along the way.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running ``tox`` in the directory of your source\ncheckout will run ``jsonschemanlplab``'s test suite on all of the versions\nof Python ``jsonschemanlplab`` supports. If you don't have all of the\nversions that ``jsonschemanlplab`` is tested under, you'll likely want to run\nusing ``tox``'s ``--skip-missing-interpreters`` option.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschemanlplab.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschemanlplab``'s benchmarks make use of `perf <https://perf.readthedocs.io>`_.\n\nRunning them can be done via ``tox -e perf``, or by invoking the ``perf``\ncommands externally (after ensuring that both it and ``jsonschemanlplab`` itself are\ninstalled)::\n\n    $ python -m perf jsonschemanlplab/benchmarks/test_suite.py --hist --output results.json\n\nTo compare to a previous run, use::\n\n    $ python -m perf compare_to --table reference.json results.json\n\nSee the ``perf`` documentation for more details.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can woo me with beer money via\nGoogle Pay with the email in my GitHub profile.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orenbaldinger/jsonschema-nlplab", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jsonschemanlplab", "package_url": "https://pypi.org/project/jsonschemanlplab/", "platform": "", "project_url": "https://pypi.org/project/jsonschemanlplab/", "project_urls": {"Docs": "https://python-jsonschema.readthedocs.io/en/latest/", "Homepage": "https://github.com/orenbaldinger/jsonschema-nlplab"}, "release_url": "https://pypi.org/project/jsonschemanlplab/3.0.1.1/", "requires_dist": ["attrs (>=17.4.0)", "pyrsistent (>=0.14.0)", "setuptools", "six (>=1.11.0)", "functools32 ; python_version < \"3\"", "idna ; extra == 'format'", "jsonpointer (>1.13) ; extra == 'format'", "rfc3987 ; extra == 'format'", "strict-rfc3339 ; extra == 'format'", "webcolors ; extra == 'format'"], "requires_python": "", "summary": "An implementation of JSON Schema validation for Python, forked to avoid dependency issues", "version": "3.0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/jsonschema/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a28b3023297c6c5cac127426135e97d32cf9cf4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e736368656d612e737667\"></a> <a href=\"https://pypi.org/project/jsonschema/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71d74ed1b66ad0b480b892d179a639d8f50ef112/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a736f6e736368656d612e737667\"></a> <a href=\"https://travis-ci.org/Julian/jsonschema\" rel=\"nofollow\"><img alt=\"Travis build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55f355d9c8bfab31374513fcc9ff8feb42f4d135/68747470733a2f2f7472617669732d63692e6f72672f4a756c69616e2f6a736f6e736368656d612e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/Julian/jsonschema\" rel=\"nofollow\"><img alt=\"AppVeyor build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc079dc742edb30c60c32816a78d5c28b6c3dd5e/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6164747430616961696879366d75796e3f7376673d74727565\"></a> <a href=\"https://python-jsonschema.readthedocs.io/en/stable/\" rel=\"nofollow\"><img alt=\"ReadTheDocs status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93ee6f3ef941fa8c2d1dfdbe6921b04003e4b64f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d6a736f6e736368656d612f62616467652f3f76657273696f6e3d737461626c65267374796c653d666c6174\"></a></p>\n<p>This is a fork of <a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">https://github.com/Julian/jsonschema</a> which exists only to circumvent dependency incompatibilities.</p>\n<p><tt>jsonschemanlplab</tt> is an implementation of <a href=\"https://json-schema.org\" rel=\"nofollow\">JSON Schema</a>\nfor Python (supporting 2.7+ including Python 3).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonschemanlplab</span> <span class=\"kn\">import</span> <span class=\"n\">validate</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># A sample schema, like what we'd get from json.load()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"properties\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"number\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If no exception is raised by validate(), the instance is valid.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"mf\">34.99</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validate</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Invalid\"</span><span class=\"p\">},</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>                                   <span class=\"c1\"># doctest: +IGNORE_EXCEPTION_DETAIL</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">ValidationError</span><span class=\"p\">:</span> <span class=\"s1\">'Invalid'</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"s1\">'number'</span>\n</pre>\n<p>It can also be used from console:</p>\n<pre>$ jsonschemanlplab -i sample.json sample.schema\n</pre>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Full support for\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft7Validator\" rel=\"nofollow\">Draft 7</a>,\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator\" rel=\"nofollow\">Draft 6</a>,\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator\" rel=\"nofollow\">Draft 4</a>\nand\n<a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator\" rel=\"nofollow\">Draft 3</a></li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors\" rel=\"nofollow\">Lazy validation</a>\nthat can iteratively report <em>all</em> validation errors.</li>\n<li><a href=\"https://python-jsonschema.readthedocs.io/en/latest/errors/#module-jsonschema\" rel=\"nofollow\">Programmatic querying</a>\nof which properties or items failed validation.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>jsonschemanlplab</tt> is available on <a href=\"https://pypi.org/project/jsonschemanlplab/\" rel=\"nofollow\">PyPI</a>. You can install using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install jsonschemanlplab\n</pre>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<p>Version 3.0 brings support for Draft 7 (and 6). The interface for redefining\ntypes has also been majorly overhauled to support easier redefinition of the\ntypes a Validator will accept or allow.</p>\n<p>jsonschemanlplab is also now tested under Windows via AppVeyor.</p>\n<p>Thanks to all who contributed pull requests along the way.</p>\n</div>\n<div id=\"running-the-test-suite\">\n<h2>Running the Test Suite</h2>\n<p>If you have <tt>tox</tt> installed (perhaps via <tt>pip install tox</tt> or your\npackage manager), running <tt>tox</tt> in the directory of your source\ncheckout will run <tt>jsonschemanlplab</tt>\u2019s test suite on all of the versions\nof Python <tt>jsonschemanlplab</tt> supports. If you don\u2019t have all of the\nversions that <tt>jsonschemanlplab</tt> is tested under, you\u2019ll likely want to run\nusing <tt>tox</tt>\u2019s <tt><span class=\"pre\">--skip-missing-interpreters</span></tt> option.</p>\n<p>Of course you\u2019re also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the <tt>jsonschemanlplab.tests</tt> package.</p>\n</div>\n<div id=\"benchmarks\">\n<h2>Benchmarks</h2>\n<p><tt>jsonschemanlplab</tt>\u2019s benchmarks make use of <a href=\"https://perf.readthedocs.io\" rel=\"nofollow\">perf</a>.</p>\n<p>Running them can be done via <tt>tox <span class=\"pre\">-e</span> perf</tt>, or by invoking the <tt>perf</tt>\ncommands externally (after ensuring that both it and <tt>jsonschemanlplab</tt> itself are\ninstalled):</p>\n<pre>$ python -m perf jsonschemanlplab/benchmarks/test_suite.py --hist --output results.json\n</pre>\n<p>To compare to a previous run, use:</p>\n<pre>$ python -m perf compare_to --table reference.json results.json\n</pre>\n<p>See the <tt>perf</tt> documentation for more details.</p>\n</div>\n<div id=\"community\">\n<h2>Community</h2>\n<p>There\u2019s a <a href=\"https://groups.google.com/forum/#!forum/jsonschema\" rel=\"nofollow\">mailing list</a>\nfor this implementation on Google Groups.</p>\n<p>Please join, and feel free to send questions there.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>I\u2019m Julian Berman.</p>\n<p><tt>jsonschema</tt> is on <a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">GitHub</a>.</p>\n<p>Get in touch, via GitHub or otherwise, if you\u2019ve got something to contribute,\nit\u2019d be most welcome!</p>\n<p>You can also generally find me on Freenode (nick: <tt>tos9</tt>) in various\nchannels, including <tt>#python</tt>.</p>\n<p>If you feel overwhelmingly grateful, you can woo me with beer money via\nGoogle Pay with the email in my GitHub profile.</p>\n</div>\n\n          </div>"}, "last_serial": 5126775, "releases": {"3.0.1.1": [{"comment_text": "", "digests": {"md5": "dfc90d39bc5f4b03713b56bc39b5cc23", "sha256": "9a7c6018b1b1898b0169a4e036efee4adc6f39d18ebbf465d72102d1968f1634"}, "downloads": -1, "filename": "jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dfc90d39bc5f4b03713b56bc39b5cc23", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54622, "upload_time": "2019-04-11T02:00:00", "upload_time_iso_8601": "2019-04-11T02:00:00.805404Z", "url": "https://files.pythonhosted.org/packages/f5/ac/358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2/jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfc90d39bc5f4b03713b56bc39b5cc23", "sha256": "9a7c6018b1b1898b0169a4e036efee4adc6f39d18ebbf465d72102d1968f1634"}, "downloads": -1, "filename": "jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dfc90d39bc5f4b03713b56bc39b5cc23", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54622, "upload_time": "2019-04-11T02:00:00", "upload_time_iso_8601": "2019-04-11T02:00:00.805404Z", "url": "https://files.pythonhosted.org/packages/f5/ac/358fa9ee4ba20284ff85cf7b3a9d6b04c63c10f60a05e26f0ae40ee613d2/jsonschemanlplab-3.0.1.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:37 2020"}