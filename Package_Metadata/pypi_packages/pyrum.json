{"info": {"author": "protolambda", "author_email": "proto+pip@protolambda.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy"], "description": "![](https://raw.githubusercontent.com/protolambda/pyrum/master/logo.png)\n\n# `pyrum`\n\n[![](https://img.shields.io/pypi/l/pyrum.svg)](https://pypi.python.org/pypi/pyrum) [![](https://img.shields.io/pypi/pyversions/pyrum.svg)](https://pypi.python.org/pypi/pyrum) [![](https://img.shields.io/pypi/status/pyrum.svg)](https://pypi.python.org/pypi/pyrum) [![](https://img.shields.io/pypi/implementation/pyrum.svg)](https://pypi.python.org/pypi/pyrum)\n\nPyrum (\"Py Rumor\") is a Python interface to interact with [Rumor](https://github.com/protolambda/rumor), an Eth2 networking shell.\n\n## Usage\n\nThis interface maps async Python functions (built on Trio) to Rumor commands.\n\nThe mapping is simple:\n- A command path is equal to a series of fields\n- A command argument is equal to a call argument\n- A command flag is equal to a call keyword argument, every `_` in the keyword is replaced with `-`\n\nSome examples:\n\n```\nhost listen --tcp=9001\n->\npeer.listen(tcp=9001)\n\npeer connect /dns4/prylabs.net/tcp/30001/p2p/16Uiu2HAm7Qwe19vz9WzD2Mxn7fXd1vgHHp4iccuyq7TxwRXoAGfc\n->\npeer.connect('/dns4/prylabs.net/tcp/30001/p2p/16Uiu2HAm7Qwe19vz9WzD2Mxn7fXd1vgHHp4iccuyq7TxwRXoAGfc')\n```\n\nEach of these calls returns a `Call` object:\n- Wait for successful call completion by awaiting the `my_call`.\n- Retrieve latest data from the `my_call.data` dict\n- Individual data can be retrieved by calling `await my_call.some_data_field()` to get the respective data as soon as it is available.\n- If you expect multiple occurrences of the data, you can `await` multiple times, or use `async for item in my_call`\n\n### Full example\n\n```python\nimport trio\nfrom pyrum import WebsocketConn, TCPConn, UnixConn, SubprocessConn, Rumor\n\nfrom remerkleable.complex import Container\nfrom remerkleable.byte_arrays import Bytes32, Bytes4\nfrom remerkleable.basic import uint64\n\n\nclass StatusReq(Container):\n    version: Bytes4\n    finalized_root: Bytes32\n    finalized_epoch: uint64\n    head_root: Bytes32\n    head_slot: uint64\n\n\nasync def basic_rpc_example(rumor: Rumor):\n    alice = rumor.actor('alice')\n    await alice.host.start()\n    # Flags are keyword arguments\n    await alice.host.listen(tcp=9000)\n    print(\"started alice\")\n\n    # Concurrency in Rumor, planned with async (Trio) in Pyrum\n    bob = rumor.actor('bob')\n    await bob.host.start()\n    await bob.host.listen(tcp=9001)\n    print(\"started bob\")\n\n    long_call = alice.debug.sleep(5_000)  # sleep 5 seconds\n    print('made long call')\n    short_call = alice.debug.sleep(3_000)  # sleep 3 seconds\n    print('made short call')\n\n    await short_call\n    print(\"done with short call\")\n    await long_call\n    print('done with long call')\n\n    # Getting a result should be as easy as calling, and waiting for the key we are after\n    bob_addr = await bob.host.view().enr()\n    print('BOB has ENR: ', bob_addr)\n\n    # Print all ENR contents\n    await rumor.enr.view(bob_addr)\n\n    # Command arguments are just call arguments\n    await alice.peer.connect(bob_addr)\n    print(\"connected alice to bob!\")\n\n    # You can use either await or async-for to get data of a specific key\n    async for msg in bob.peer.list().msg():\n        print(f'bob peer list: {msg}')\n\n    async for msg in alice.peer.list().msg():\n        print(f'alice peer list: {msg}')\n\n    # Or alternatively, collect all result data from the call:\n    bob_addr_data = await rumor.enr.view(bob_addr)\n\n    print(\"--- BOB host view data: ---\")\n    print(\"\\n\".join(f\"{k}: {v}\" for k, v in bob_addr_data.items()))\n\n    print(\"Testing a Status RPC exchange\")\n\n    alice_peer_id = await alice.host.view().peer_id()\n\n    alice_status = StatusReq(head_slot=42)\n    bob_status = StatusReq(head_slot=123)\n\n    async def alice_work(nursery: trio.Nursery) -> Call:\n        print(\"alice: listening for status requests\")\n        call = alice.rpc.status.listen(raw=True)\n\n        async def process_requests():\n            async for req in call.req():\n                print(f\"alice: Got request: {req}\")\n                assert 'input_err' not in req\n                # Or send back an error; await alice.rpc.status.resp.invalid_request(req['req_id'], f\"hello! Your request was invalid, because: {req['input_err']}\").ok\n                assert req['data'] == bob_status.encode_bytes().hex()\n                resp = alice_status.encode_bytes().hex()\n                print(f\"alice: sending response back to request {req['req_id']}: {resp}\")\n                await alice.rpc.status.resp.chunk.raw(req['req_id'], resp, done=True)\n            print(\"alice: stopped listening for status requests\")\n\n        nursery.start_soon(process_requests)\n\n        await call.started()  # wait for the stream handler to come online, there will be a \"started=true\" entry.\n        return call\n\n    async def bob_work():\n        # Send alice a status request\n        req = bob_status.encode_bytes().hex()\n        print(f\"bob: sending alice ({alice_peer_id}) a status request: {req}\")\n        resp = await bob.rpc.status.req.raw(alice_peer_id, req, raw=True)\n        print(f\"bob: received status response from alice: {resp}\")\n        chunk = resp['chunk']\n        assert chunk['chunk_index'] == 0  # only 1 chunk\n        assert chunk['result_code'] == 0  # success chunk\n        assert chunk['data'] == alice_status.encode_bytes().hex()\n\n    # Run tasks in a trio nursery to make them concurrent\n    async with trio.open_nursery() as nursery:\n        # Set up alice to listen for requests\n        alice_listen_call = await alice_work(nursery)\n\n        # Make bob send a request and check a response, after alice is set up\n        await bob_work()\n\n        # Close alice\n        await alice_listen_call.cancel()\n\n\nasync def run_example():\n    # Websockets\n    # Start Rumor with websocket serving enabled, then open a connection from rumor:\n    # rumor serve --ws=localhost:8010 --ws-path=/ws --ws-key=foobar\n    # async with WebsocketConn(ws_url='ws://localhost:8010/ws', ws_key='foobar') as conn:\n\n    # TCP sockets\n    # rumor serve --tcp localhost:3030\n    # async with TCPConn(addr='localhost', port=3030) as conn:\n\n    # Unix domain sockets\n    # rumor serve --ipc my_ipc.socket\n    # async with UnixConn(socket_path='../some/path/my_ipc.socket') as conn:\n\n    # Subprocess\n    # Run it in \"bare\" mode so there is no shell clutter, and every Rumor output is JSON for Pyrum to parse.\n    # Optionally specify your own rumor executable, for local development/modding of Rumor\n    async with SubprocessConn(cmd='cd ../rumor && go run . bare') as conn:\n        # A Trio nursery hosts all the async tasks of the Rumor instance.\n        async with trio.open_nursery() as nursery:\n            # And optionally use Rumor(conn, debug=True) to be super verbose about Rumor communication.\n            await basic_rpc_example(Rumor(conn, nursery))\n            # Cancel the nursery to signal that we are not using Rumor anymore\n            nursery.cancel_scope.cancel()\n```\n\nExample Output:\n```\nstarted alice\nstarted bob\nmade long call\nmade short call\ndone with short call\ndone with long call\nBOB has ENR:  enr:-Iu4QJsaKuzeeK1kdN2RezOUVGw2W57Du2Js-u1uuLqzcFLkYeoEty9XPWxJ8lNGf23ZHBEUQ7tnB_HQ5Gw9phdsWZaAgmlkgnY0gmlwhMCoAE2Jc2VjcDI1NmsxoQPPxmeIkd_qGoJ7p6ckO4ZKKOnOidet-lDsRfDgSv2R5IN0Y3CCIymDdWRwgiMp\nconnected alice to bob!\nbob peer list: 1 peers\nbob peer list:    0: {16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK: [/ip4/192.168.0.77/tcp/9000]}\nalice peer list: 1 peers\nalice peer list:    0: {16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw: [/ip4/192.168.0.77/tcp/9001]}\n--- BOB host view data: ---\nenode: enode://cfc6678891dfea1a827ba7a7243b864a28e9ce89d7adfa50ec45f0e04afd91e4cd3007b21b5d5012524cc28045a06efe34f03868f68da68b0d06c7cf621bd921@192.168.0.77:9001\nenr: enr:-Iu4QJsaKuzeeK1kdN2RezOUVGw2W57Du2Js-u1uuLqzcFLkYeoEty9XPWxJ8lNGf23ZHBEUQ7tnB_HQ5Gw9phdsWZaAgmlkgnY0gmlwhMCoAE2Jc2VjcDI1NmsxoQPPxmeIkd_qGoJ7p6ckO4ZKKOnOidet-lDsRfDgSv2R5IN0Y3CCIymDdWRwgiMp\nmsg: ENR parsed successfully\nmulti: /ip4/192.168.0.77/tcp/9001/p2p/16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw\nnode_id: 00c7eeec07527edbf72dff6d84d0dcdb9f2e1eacd54372db530a515b01b6941f\npeer_id: 16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw\nseq: 0\nxy: 93979309937351124012010597461777211511079463010981099424184477356342451737060 92808995732655724877169966925472115400857265498307667452857464010673380645153\nTesting a Status RPC exchange\nalice: listening for status requests\nbob: sending alice (16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK) a status request: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000\nalice: Got request: {'data': '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000', 'from': '16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw', 'protocol': '/eth2/beacon_chain/req/status/1/ssz', 'req_id': 0}\nalice: sending response back to request 0: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000\nbob: received status response from alice: {'chunk': {'chunk_index': 0, 'chunk_size': 84, 'data': '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000', 'from': '16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK', 'protocol': '/eth2/beacon_chain/req/status/1/ssz', 'result_code': 0}, 'msg': 'Received chunk'}\nalice: stopped listening for status requests\n\nProcess finished with exit code 0\n```\n\n\n## License\n\nMIT, see [LICENSE](./LICENSE) file.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/protolambda/pyrum", "keywords": "rumor,networking,libp2peth2", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyrum", "package_url": "https://pypi.org/project/pyrum/", "platform": "", "project_url": "https://pypi.org/project/pyrum/", "project_urls": {"Homepage": "https://github.com/protolambda/pyrum"}, "release_url": "https://pypi.org/project/pyrum/0.2.1/", "requires_dist": ["trio (==0.13.0)", "trio-websocket (==0.8.0)"], "requires_python": ">=3.8, <4", "summary": "Python interface for Rumor - Eth2 networking shell", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a4145e8ca67e14d2fe0a07af4fe30d2433bc0b5/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f70726f746f6c616d6264612f707972756d2f6d61737465722f6c6f676f2e706e67\"></p>\n<h1><code>pyrum</code></h1>\n<p><a href=\"https://pypi.python.org/pypi/pyrum\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53c7dabb9fba82e22272579fe241c31dbc00a180/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f707972756d2e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyrum\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b27a7ec884cf31eb1140d477692dc796b69c7ab/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707972756d2e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyrum\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f12784a6c7f0c8fb97007b103ee511be7a95b908/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f707972756d2e737667\"></a> <a href=\"https://pypi.python.org/pypi/pyrum\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4ed772f3880708a0df3add038626d1ffd8cb220/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f707972756d2e737667\"></a></p>\n<p>Pyrum (\"Py Rumor\") is a Python interface to interact with <a href=\"https://github.com/protolambda/rumor\" rel=\"nofollow\">Rumor</a>, an Eth2 networking shell.</p>\n<h2>Usage</h2>\n<p>This interface maps async Python functions (built on Trio) to Rumor commands.</p>\n<p>The mapping is simple:</p>\n<ul>\n<li>A command path is equal to a series of fields</li>\n<li>A command argument is equal to a call argument</li>\n<li>A command flag is equal to a call keyword argument, every <code>_</code> in the keyword is replaced with <code>-</code></li>\n</ul>\n<p>Some examples:</p>\n<pre><code>host listen --tcp=9001\n-&gt;\npeer.listen(tcp=9001)\n\npeer connect /dns4/prylabs.net/tcp/30001/p2p/16Uiu2HAm7Qwe19vz9WzD2Mxn7fXd1vgHHp4iccuyq7TxwRXoAGfc\n-&gt;\npeer.connect('/dns4/prylabs.net/tcp/30001/p2p/16Uiu2HAm7Qwe19vz9WzD2Mxn7fXd1vgHHp4iccuyq7TxwRXoAGfc')\n</code></pre>\n<p>Each of these calls returns a <code>Call</code> object:</p>\n<ul>\n<li>Wait for successful call completion by awaiting the <code>my_call</code>.</li>\n<li>Retrieve latest data from the <code>my_call.data</code> dict</li>\n<li>Individual data can be retrieved by calling <code>await my_call.some_data_field()</code> to get the respective data as soon as it is available.</li>\n<li>If you expect multiple occurrences of the data, you can <code>await</code> multiple times, or use <code>async for item in my_call</code></li>\n</ul>\n<h3>Full example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">trio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyrum</span> <span class=\"kn\">import</span> <span class=\"n\">WebsocketConn</span><span class=\"p\">,</span> <span class=\"n\">TCPConn</span><span class=\"p\">,</span> <span class=\"n\">UnixConn</span><span class=\"p\">,</span> <span class=\"n\">SubprocessConn</span><span class=\"p\">,</span> <span class=\"n\">Rumor</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">remerkleable.complex</span> <span class=\"kn\">import</span> <span class=\"n\">Container</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remerkleable.byte_arrays</span> <span class=\"kn\">import</span> <span class=\"n\">Bytes32</span><span class=\"p\">,</span> <span class=\"n\">Bytes4</span>\n<span class=\"kn\">from</span> <span class=\"nn\">remerkleable.basic</span> <span class=\"kn\">import</span> <span class=\"n\">uint64</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StatusReq</span><span class=\"p\">(</span><span class=\"n\">Container</span><span class=\"p\">):</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">Bytes4</span>\n    <span class=\"n\">finalized_root</span><span class=\"p\">:</span> <span class=\"n\">Bytes32</span>\n    <span class=\"n\">finalized_epoch</span><span class=\"p\">:</span> <span class=\"n\">uint64</span>\n    <span class=\"n\">head_root</span><span class=\"p\">:</span> <span class=\"n\">Bytes32</span>\n    <span class=\"n\">head_slot</span><span class=\"p\">:</span> <span class=\"n\">uint64</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">basic_rpc_example</span><span class=\"p\">(</span><span class=\"n\">rumor</span><span class=\"p\">:</span> <span class=\"n\">Rumor</span><span class=\"p\">):</span>\n    <span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">rumor</span><span class=\"o\">.</span><span class=\"n\">actor</span><span class=\"p\">(</span><span class=\"s1\">'alice'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Flags are keyword arguments</span>\n    <span class=\"k\">await</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"n\">tcp</span><span class=\"o\">=</span><span class=\"mi\">9000</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"started alice\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Concurrency in Rumor, planned with async (Trio) in Pyrum</span>\n    <span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">rumor</span><span class=\"o\">.</span><span class=\"n\">actor</span><span class=\"p\">(</span><span class=\"s1\">'bob'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"n\">tcp</span><span class=\"o\">=</span><span class=\"mi\">9001</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"started bob\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">long_call</span> <span class=\"o\">=</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5_000</span><span class=\"p\">)</span>  <span class=\"c1\"># sleep 5 seconds</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'made long call'</span><span class=\"p\">)</span>\n    <span class=\"n\">short_call</span> <span class=\"o\">=</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3_000</span><span class=\"p\">)</span>  <span class=\"c1\"># sleep 3 seconds</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'made short call'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">short_call</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"done with short call\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">long_call</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done with long call'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Getting a result should be as easy as calling, and waiting for the key we are after</span>\n    <span class=\"n\">bob_addr</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">enr</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'BOB has ENR: '</span><span class=\"p\">,</span> <span class=\"n\">bob_addr</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Print all ENR contents</span>\n    <span class=\"k\">await</span> <span class=\"n\">rumor</span><span class=\"o\">.</span><span class=\"n\">enr</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">bob_addr</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Command arguments are just call arguments</span>\n    <span class=\"k\">await</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">peer</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">bob_addr</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"connected alice to bob!\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># You can use either await or async-for to get data of a specific key</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">peer</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'bob peer list: </span><span class=\"si\">{</span><span class=\"n\">msg</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">peer</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'alice peer list: </span><span class=\"si\">{</span><span class=\"n\">msg</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Or alternatively, collect all result data from the call:</span>\n    <span class=\"n\">bob_addr_data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rumor</span><span class=\"o\">.</span><span class=\"n\">enr</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">bob_addr</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"--- BOB host view data: ---\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">bob_addr_data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Testing a Status RPC exchange\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">alice_peer_id</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">peer_id</span><span class=\"p\">()</span>\n\n    <span class=\"n\">alice_status</span> <span class=\"o\">=</span> <span class=\"n\">StatusReq</span><span class=\"p\">(</span><span class=\"n\">head_slot</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n    <span class=\"n\">bob_status</span> <span class=\"o\">=</span> <span class=\"n\">StatusReq</span><span class=\"p\">(</span><span class=\"n\">head_slot</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">alice_work</span><span class=\"p\">(</span><span class=\"n\">nursery</span><span class=\"p\">:</span> <span class=\"n\">trio</span><span class=\"o\">.</span><span class=\"n\">Nursery</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Call</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"alice: listening for status requests\"</span><span class=\"p\">)</span>\n        <span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process_requests</span><span class=\"p\">():</span>\n            <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">req</span> <span class=\"ow\">in</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">req</span><span class=\"p\">():</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"alice: Got request: </span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'input_err'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">req</span>\n                <span class=\"c1\"># Or send back an error; await alice.rpc.status.resp.invalid_request(req['req_id'], f\"hello! Your request was invalid, because: {req['input_err']}\").ok</span>\n                <span class=\"k\">assert</span> <span class=\"n\">req</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">bob_status</span><span class=\"o\">.</span><span class=\"n\">encode_bytes</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n                <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">alice_status</span><span class=\"o\">.</span><span class=\"n\">encode_bytes</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"alice: sending response back to request </span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"p\">[</span><span class=\"s1\">'req_id'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">resp</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">[</span><span class=\"s1\">'req_id'</span><span class=\"p\">],</span> <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">done</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"alice: stopped listening for status requests\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">nursery</span><span class=\"o\">.</span><span class=\"n\">start_soon</span><span class=\"p\">(</span><span class=\"n\">process_requests</span><span class=\"p\">)</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">call</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"p\">()</span>  <span class=\"c1\"># wait for the stream handler to come online, there will be a \"started=true\" entry.</span>\n        <span class=\"k\">return</span> <span class=\"n\">call</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bob_work</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Send alice a status request</span>\n        <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">bob_status</span><span class=\"o\">.</span><span class=\"n\">encode_bytes</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"bob: sending alice (</span><span class=\"si\">{</span><span class=\"n\">alice_peer_id</span><span class=\"si\">}</span><span class=\"s2\">) a status request: </span><span class=\"si\">{</span><span class=\"n\">req</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">bob</span><span class=\"o\">.</span><span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"n\">alice_peer_id</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"bob: received status response from alice: </span><span class=\"si\">{</span><span class=\"n\">resp</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"p\">[</span><span class=\"s1\">'chunk'</span><span class=\"p\">]</span>\n        <span class=\"k\">assert</span> <span class=\"n\">chunk</span><span class=\"p\">[</span><span class=\"s1\">'chunk_index'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>  <span class=\"c1\"># only 1 chunk</span>\n        <span class=\"k\">assert</span> <span class=\"n\">chunk</span><span class=\"p\">[</span><span class=\"s1\">'result_code'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>  <span class=\"c1\"># success chunk</span>\n        <span class=\"k\">assert</span> <span class=\"n\">chunk</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">alice_status</span><span class=\"o\">.</span><span class=\"n\">encode_bytes</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Run tasks in a trio nursery to make them concurrent</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">trio</span><span class=\"o\">.</span><span class=\"n\">open_nursery</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">nursery</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Set up alice to listen for requests</span>\n        <span class=\"n\">alice_listen_call</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">alice_work</span><span class=\"p\">(</span><span class=\"n\">nursery</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Make bob send a request and check a response, after alice is set up</span>\n        <span class=\"k\">await</span> <span class=\"n\">bob_work</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close alice</span>\n        <span class=\"k\">await</span> <span class=\"n\">alice_listen_call</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run_example</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Websockets</span>\n    <span class=\"c1\"># Start Rumor with websocket serving enabled, then open a connection from rumor:</span>\n    <span class=\"c1\"># rumor serve --ws=localhost:8010 --ws-path=/ws --ws-key=foobar</span>\n    <span class=\"c1\"># async with WebsocketConn(ws_url='ws://localhost:8010/ws', ws_key='foobar') as conn:</span>\n\n    <span class=\"c1\"># TCP sockets</span>\n    <span class=\"c1\"># rumor serve --tcp localhost:3030</span>\n    <span class=\"c1\"># async with TCPConn(addr='localhost', port=3030) as conn:</span>\n\n    <span class=\"c1\"># Unix domain sockets</span>\n    <span class=\"c1\"># rumor serve --ipc my_ipc.socket</span>\n    <span class=\"c1\"># async with UnixConn(socket_path='../some/path/my_ipc.socket') as conn:</span>\n\n    <span class=\"c1\"># Subprocess</span>\n    <span class=\"c1\"># Run it in \"bare\" mode so there is no shell clutter, and every Rumor output is JSON for Pyrum to parse.</span>\n    <span class=\"c1\"># Optionally specify your own rumor executable, for local development/modding of Rumor</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">SubprocessConn</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">=</span><span class=\"s1\">'cd ../rumor &amp;&amp; go run . bare'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"c1\"># A Trio nursery hosts all the async tasks of the Rumor instance.</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">trio</span><span class=\"o\">.</span><span class=\"n\">open_nursery</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">nursery</span><span class=\"p\">:</span>\n            <span class=\"c1\"># And optionally use Rumor(conn, debug=True) to be super verbose about Rumor communication.</span>\n            <span class=\"k\">await</span> <span class=\"n\">basic_rpc_example</span><span class=\"p\">(</span><span class=\"n\">Rumor</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">nursery</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Cancel the nursery to signal that we are not using Rumor anymore</span>\n            <span class=\"n\">nursery</span><span class=\"o\">.</span><span class=\"n\">cancel_scope</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n</pre>\n<p>Example Output:</p>\n<pre><code>started alice\nstarted bob\nmade long call\nmade short call\ndone with short call\ndone with long call\nBOB has ENR:  enr:-Iu4QJsaKuzeeK1kdN2RezOUVGw2W57Du2Js-u1uuLqzcFLkYeoEty9XPWxJ8lNGf23ZHBEUQ7tnB_HQ5Gw9phdsWZaAgmlkgnY0gmlwhMCoAE2Jc2VjcDI1NmsxoQPPxmeIkd_qGoJ7p6ckO4ZKKOnOidet-lDsRfDgSv2R5IN0Y3CCIymDdWRwgiMp\nconnected alice to bob!\nbob peer list: 1 peers\nbob peer list:    0: {16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK: [/ip4/192.168.0.77/tcp/9000]}\nalice peer list: 1 peers\nalice peer list:    0: {16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw: [/ip4/192.168.0.77/tcp/9001]}\n--- BOB host view data: ---\nenode: enode://cfc6678891dfea1a827ba7a7243b864a28e9ce89d7adfa50ec45f0e04afd91e4cd3007b21b5d5012524cc28045a06efe34f03868f68da68b0d06c7cf621bd921@192.168.0.77:9001\nenr: enr:-Iu4QJsaKuzeeK1kdN2RezOUVGw2W57Du2Js-u1uuLqzcFLkYeoEty9XPWxJ8lNGf23ZHBEUQ7tnB_HQ5Gw9phdsWZaAgmlkgnY0gmlwhMCoAE2Jc2VjcDI1NmsxoQPPxmeIkd_qGoJ7p6ckO4ZKKOnOidet-lDsRfDgSv2R5IN0Y3CCIymDdWRwgiMp\nmsg: ENR parsed successfully\nmulti: /ip4/192.168.0.77/tcp/9001/p2p/16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw\nnode_id: 00c7eeec07527edbf72dff6d84d0dcdb9f2e1eacd54372db530a515b01b6941f\npeer_id: 16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw\nseq: 0\nxy: 93979309937351124012010597461777211511079463010981099424184477356342451737060 92808995732655724877169966925472115400857265498307667452857464010673380645153\nTesting a Status RPC exchange\nalice: listening for status requests\nbob: sending alice (16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK) a status request: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000\nalice: Got request: {'data': '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b00000000000000', 'from': '16Uiu2HAmSe4DMy8dZneZUovFPAPqmbm3FWonHiabr9w3RUnnJ7Cw', 'protocol': '/eth2/beacon_chain/req/status/1/ssz', 'req_id': 0}\nalice: sending response back to request 0: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000\nbob: received status response from alice: {'chunk': {'chunk_index': 0, 'chunk_size': 84, 'data': '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a00000000000000', 'from': '16Uiu2HAmGf5dZYGcfkszFcYzhYMpkFohcVHSAsd8NBJwDDahHNQK', 'protocol': '/eth2/beacon_chain/req/status/1/ssz', 'result_code': 0}, 'msg': 'Received chunk'}\nalice: stopped listening for status requests\n\nProcess finished with exit code 0\n</code></pre>\n<h2>License</h2>\n<p>MIT, see <a href=\"./LICENSE\" rel=\"nofollow\">LICENSE</a> file.</p>\n\n          </div>"}, "last_serial": 7139261, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "892d5f693b9b66a46cc138d7f10fe234", "sha256": "6d0bfa343286e9a32571b087c36d74a33cab8273631129a6abd16b68c0a8d5ad"}, "downloads": -1, "filename": "pyrum-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "892d5f693b9b66a46cc138d7f10fe234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 6832, "upload_time": "2020-03-15T01:33:26", "upload_time_iso_8601": "2020-03-15T01:33:26.332236Z", "url": "https://files.pythonhosted.org/packages/d0/84/c3130a26e0614414164fd62342769615451e124143d3450b04602fb0235b/pyrum-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48de80a93bd181d10dc5d2cc8921933f", "sha256": "11d0427a07f94d1d87e6c41c13efc1f8b2459708388a8c715ed57ffd82013633"}, "downloads": -1, "filename": "pyrum-0.0.1.tar.gz", "has_sig": false, "md5_digest": "48de80a93bd181d10dc5d2cc8921933f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 5709, "upload_time": "2020-03-15T01:33:29", "upload_time_iso_8601": "2020-03-15T01:33:29.121196Z", "url": "https://files.pythonhosted.org/packages/d5/40/7e4d64db712a47323012b25f5faab5b9c0156d9735373a133878c93e9a6b/pyrum-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6cd556344e8c4c25ed79d3afdb0e1a91", "sha256": "5b184c78919410b9f14852687529474350231a6da063c9e4164ed204baad28ab"}, "downloads": -1, "filename": "pyrum-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6cd556344e8c4c25ed79d3afdb0e1a91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 6849, "upload_time": "2020-03-15T01:36:52", "upload_time_iso_8601": "2020-03-15T01:36:52.974664Z", "url": "https://files.pythonhosted.org/packages/49/09/2281fe6c27b0139d9128b1bd43fd9829fa17bebe3aea325023981aec9365/pyrum-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea05bac419303284753a70a6876f4724", "sha256": "465e00457d6b2de836498b2dfa05ed572b9229402ae0ddf729a295d7a18acf8d"}, "downloads": -1, "filename": "pyrum-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ea05bac419303284753a70a6876f4724", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 5726, "upload_time": "2020-03-15T01:36:54", "upload_time_iso_8601": "2020-03-15T01:36:54.635646Z", "url": "https://files.pythonhosted.org/packages/a3/3e/04c0891f5a2665af95b0aaf84df247d8cf2edb98eb8b3042e58256c62d90/pyrum-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0cd9792e879930e2f07d24de08b6001e", "sha256": "f844dfffd050f18af1d117f01c18d9176c9072fbd0f5a092f828d0c359588117"}, "downloads": -1, "filename": "pyrum-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0cd9792e879930e2f07d24de08b6001e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 6885, "upload_time": "2020-03-15T20:58:20", "upload_time_iso_8601": "2020-03-15T20:58:20.331677Z", "url": "https://files.pythonhosted.org/packages/ab/bf/968b9a841150446ab42f023f11ec4edbb8862402a25cc0dc3f71a1b51502/pyrum-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a499c4cc4ae86f865f4efdc83ab792ac", "sha256": "f9a4738942f9b70066f3d2c4f338c0c586cbac3875ac913d2d186eced092e9ff"}, "downloads": -1, "filename": "pyrum-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a499c4cc4ae86f865f4efdc83ab792ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 5763, "upload_time": "2020-03-15T20:58:21", "upload_time_iso_8601": "2020-03-15T20:58:21.762374Z", "url": "https://files.pythonhosted.org/packages/13/71/c8817ec494a149a689b22ff1baf2609c419307cf7658b8d038a6757e0c2e/pyrum-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "0e3abe71bd81ae73466e1f45dd786f41", "sha256": "50fc6f7f3ab82456dee8489e3853f2080bcc1f3d7dd69e624d5d9037331de440"}, "downloads": -1, "filename": "pyrum-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0e3abe71bd81ae73466e1f45dd786f41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 6344, "upload_time": "2020-03-15T22:12:40", "upload_time_iso_8601": "2020-03-15T22:12:40.585388Z", "url": "https://files.pythonhosted.org/packages/24/fe/ac5e5e0ae9df130625ae70e2c4534dcac256615273b8df1b0f4c49751038/pyrum-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5be35979baad3393e5045eada2499677", "sha256": "b670930dd194aa9cd9f82422c4c477ab160a83cad28070a43c3bf1b8d1e6842f"}, "downloads": -1, "filename": "pyrum-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5be35979baad3393e5045eada2499677", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 5745, "upload_time": "2020-03-15T22:12:42", "upload_time_iso_8601": "2020-03-15T22:12:42.248384Z", "url": "https://files.pythonhosted.org/packages/78/29/d82d5da41fa2ddba04874f3a26acd858c978570ba7e21586646c0175c169/pyrum-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "30fd44a431ae4851b814e2a1463f8ac0", "sha256": "e0448e01181d42c7bbcf48872957fb22e11db42f889968821c98f41305e13882"}, "downloads": -1, "filename": "pyrum-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "30fd44a431ae4851b814e2a1463f8ac0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 7183, "upload_time": "2020-03-16T19:56:15", "upload_time_iso_8601": "2020-03-16T19:56:15.739648Z", "url": "https://files.pythonhosted.org/packages/06/9d/c2f43f32ff7fb8a681ed200e3705bbca075526508013fc3035aee7f86d78/pyrum-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e20ab0ccfed0f629a9c58b1bfa6d9e", "sha256": "53befca4ab4e50fef8d4ff6d172f609546fecedfb449daa97b06ac5f3cec598d"}, "downloads": -1, "filename": "pyrum-0.0.5.tar.gz", "has_sig": false, "md5_digest": "c0e20ab0ccfed0f629a9c58b1bfa6d9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 6748, "upload_time": "2020-03-16T19:56:17", "upload_time_iso_8601": "2020-03-16T19:56:17.579666Z", "url": "https://files.pythonhosted.org/packages/54/13/60cc7d9cae1405bb747d919eb619f7a5d9287b69f9564d22adf3bc7ac337/pyrum-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c3f3c4cd4956983f592273351be65710", "sha256": "e978bb908febf0f37652344c8840560e6591556e11a239b0fcf326594946da69"}, "downloads": -1, "filename": "pyrum-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c3f3c4cd4956983f592273351be65710", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 7853, "upload_time": "2020-03-18T23:28:28", "upload_time_iso_8601": "2020-03-18T23:28:28.854864Z", "url": "https://files.pythonhosted.org/packages/47/46/1275c0d50e2a9adcf0f03c39b309e663e574e11c58208952b010c46549eb/pyrum-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85c734a28c6c515107b3004d37c4e6e9", "sha256": "667d4585cefc5a5812f6ddbd971250b6d0aeecc80d389f974ff8cd5124e2d44a"}, "downloads": -1, "filename": "pyrum-0.0.6.tar.gz", "has_sig": false, "md5_digest": "85c734a28c6c515107b3004d37c4e6e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 7603, "upload_time": "2020-03-18T23:28:30", "upload_time_iso_8601": "2020-03-18T23:28:30.304296Z", "url": "https://files.pythonhosted.org/packages/29/4e/6e71439fa84223824d588e03cd58b3df10f10a0ad7d558166779870c3a92/pyrum-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "c234d39462e400a776c7170be864aff9", "sha256": "9bdedf469cb730c61dbd9e3767b4cf4b83bc0b74011338c49f32360d54eb9f1e"}, "downloads": -1, "filename": "pyrum-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c234d39462e400a776c7170be864aff9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 8355, "upload_time": "2020-03-26T17:03:18", "upload_time_iso_8601": "2020-03-26T17:03:18.228820Z", "url": "https://files.pythonhosted.org/packages/b3/a7/121da6748bfc922c5bc1a24822472187f298246c86b1ba0703c640f1a31c/pyrum-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4bc699258c92ee44859e9493a60b79", "sha256": "d4cf4c04b32c7d527f154fd5719e5dd6473c30ddd217f60116dc658a6eb6d06d"}, "downloads": -1, "filename": "pyrum-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1e4bc699258c92ee44859e9493a60b79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 8297, "upload_time": "2020-03-26T17:03:20", "upload_time_iso_8601": "2020-03-26T17:03:20.279317Z", "url": "https://files.pythonhosted.org/packages/5e/2a/78656c575178f124ced4f0b5a6e246f41fbda9aeaeab63661ab4f5ac8e4e/pyrum-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "48452e5265430da6fa892819c3e75f22", "sha256": "d003f7405becb6e5ea9c779333d128a40ea2e0506e9ffe7b13bbdda639f1174c"}, "downloads": -1, "filename": "pyrum-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48452e5265430da6fa892819c3e75f22", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 8843, "upload_time": "2020-03-27T03:49:55", "upload_time_iso_8601": "2020-03-27T03:49:55.538509Z", "url": "https://files.pythonhosted.org/packages/34/73/62cd999a36105e0a99925de686ecbe5de28fa8f719836e0987b65a6f18e7/pyrum-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4348915ac57263a134d231e2b1c53309", "sha256": "b8ee667e6fdff83d48b6dac2c3484c96f6c3cbbe30b84af30943a4a66e309995"}, "downloads": -1, "filename": "pyrum-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4348915ac57263a134d231e2b1c53309", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 8760, "upload_time": "2020-03-27T03:49:59", "upload_time_iso_8601": "2020-03-27T03:49:59.031590Z", "url": "https://files.pythonhosted.org/packages/c9/19/e350d6b090849c651e169fc671a39305255e47c185daf665ee1954f514a3/pyrum-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3f5b36b7718e12a01ee1f8afe945ee38", "sha256": "fa8fa0228822a8f6a049b244496576fd596fcec80ead324967b1e7143bc82063"}, "downloads": -1, "filename": "pyrum-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f5b36b7718e12a01ee1f8afe945ee38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 9978, "upload_time": "2020-04-30T14:23:54", "upload_time_iso_8601": "2020-04-30T14:23:54.811869Z", "url": "https://files.pythonhosted.org/packages/4e/65/fa9c4cf483c24158d519ee4c21a06046442b14b07f398f40cc4f24d14c39/pyrum-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e40156229459b7caafb03a2b95e9097", "sha256": "9793a183efa060819e0b83e2d99ad852c6d48eff29c20a4dc667d216093235c1"}, "downloads": -1, "filename": "pyrum-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1e40156229459b7caafb03a2b95e9097", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 9923, "upload_time": "2020-04-30T14:23:56", "upload_time_iso_8601": "2020-04-30T14:23:56.244486Z", "url": "https://files.pythonhosted.org/packages/40/3c/cd770f268817fb124acd0e23ae32995b19c10867893a09e9c607e01c569b/pyrum-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "edd991f8fdd3be930bc8ea211f0de57e", "sha256": "b30362708f045076a074f92fc373b994b9be7f5f5069647659fccde20cca03a6"}, "downloads": -1, "filename": "pyrum-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "edd991f8fdd3be930bc8ea211f0de57e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 9995, "upload_time": "2020-04-30T17:48:01", "upload_time_iso_8601": "2020-04-30T17:48:01.606759Z", "url": "https://files.pythonhosted.org/packages/ca/15/f7a5b2b03ec237622d9ae5fd8f46771f812475d50b5f42f366caed84820d/pyrum-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b448b594d52e9085d0a3eafd373ad4cf", "sha256": "081e6694d3700227442a504a9bb72491f4c019092ecea76a002012c8efa29097"}, "downloads": -1, "filename": "pyrum-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b448b594d52e9085d0a3eafd373ad4cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 9951, "upload_time": "2020-04-30T17:48:03", "upload_time_iso_8601": "2020-04-30T17:48:03.122624Z", "url": "https://files.pythonhosted.org/packages/74/b0/33735b456e34fbcb73e3cdfedaed9e58f075c40ed1ffece6470adce518e4/pyrum-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edd991f8fdd3be930bc8ea211f0de57e", "sha256": "b30362708f045076a074f92fc373b994b9be7f5f5069647659fccde20cca03a6"}, "downloads": -1, "filename": "pyrum-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "edd991f8fdd3be930bc8ea211f0de57e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8, <4", "size": 9995, "upload_time": "2020-04-30T17:48:01", "upload_time_iso_8601": "2020-04-30T17:48:01.606759Z", "url": "https://files.pythonhosted.org/packages/ca/15/f7a5b2b03ec237622d9ae5fd8f46771f812475d50b5f42f366caed84820d/pyrum-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b448b594d52e9085d0a3eafd373ad4cf", "sha256": "081e6694d3700227442a504a9bb72491f4c019092ecea76a002012c8efa29097"}, "downloads": -1, "filename": "pyrum-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b448b594d52e9085d0a3eafd373ad4cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8, <4", "size": 9951, "upload_time": "2020-04-30T17:48:03", "upload_time_iso_8601": "2020-04-30T17:48:03.122624Z", "url": "https://files.pythonhosted.org/packages/74/b0/33735b456e34fbcb73e3cdfedaed9e58f075c40ed1ffece6470adce518e4/pyrum-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:30 2020"}