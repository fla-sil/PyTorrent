{"info": {"author": "Carlos Daniel Ruvalcaba Valenzuela", "author_email": "clsdaniel@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: TurboGears", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About tgext.less\n------------------------------\n\n`LESS <http://www.lesscss.org/>`_ is a dynamic stylesheet language that extends CSS with dynamic behaviour\nsuch as variables, mixins, operations and functions.\n\ntgext.less is a middleware aimed at making `TurboGears2 <http://www.turbogears.org>`_ development easier,\ntgext.less converts regular less files to css using the official less compiler (lessc), thus it currently\nrequires is to be installed.\n\ntgext.less is based on `tgext.scss <https://bitbucket.org/_amol_/tgext.scss>`_ by Alessandro Molina and is\nunder the same license (MIT).\n\nInstalling\n-------------------------------\n\ntgext.less can be installed both from pypi or from bitbucket::\n\n    easy_install tgext.less\n\nYou will also need to install the less compiler, for instructions on this check the less website under the\nserver side usage section.\n\n`http://www.lesscss.org/ <http://www.lesscss.org/#-server-side-usage>`_\n\n\nEnabling tgext.less\n----------------------------------\n\nUsing tgext.less is really simple, you edit your `config/middeware.py` and just after\nthe `#Wrap your base TurboGears 2 application with custom middleware here` comment wrap\n`app` with `LESSMiddleware`::\n\n    from tgext.less import LESSMiddleware\n\n    make_base_app = base_config.setup_tg_wsgi_app(load_environment)\n\n    def make_app(global_conf, full_stack=True, **app_conf):\n        app = make_base_app(global_conf, full_stack=True, **app_conf)\n\n        # Wrap your base TurboGears 2 application with custom middleware here\n        app = LESSMiddleware(app)\n\n        return app\n\nNow you just have to put your .less files inside *public/css* and they will be served as CSS.\n\n\nCache Backends\n----------------------------------\n\nYou can change the cache backend storage into any dict like object that can serialize a dict object,\nfor example, you can use beaker cache by passing the cache object to the middleware constructor::\n\n    from tgext.less import LESSMiddleware\n    from tg import cache\n\n    make_base_app = base_config.setup_tg_wsgi_app(load_environment)\n\n    def make_app(global_conf, full_stack=True, **app_conf):\n        app = make_base_app(global_conf, full_stack=True, **app_conf)\n\n        # LESS with beaker cache backend\n        app = LESSMiddleware(app, cache=cache)\n\n        return app\n\n\nJinja2 Extension\n----------------------------------\n\ntgext.less provides and extension for jinja2 templates to compile LESS embedded directly on your templates,\nto activate it just add it to your config/app_config.py file the following::\n\n    from tgext.less.jinja import LessExtension\n\n    base_config.jinja_extensions = [LessExtension]\n\nNow you can use the less tag in your templates::\n\n    <style type=\"text/css\">\n    {% less \"main\" %}\n    #header {\n        h1 {\n            font-size: 24pt;\n        }\n    }\n    {% endless %}\n    </style>\n\nWhere \"main\" is a unique identifier for that LESS section.\n\nYou should take into account that when using mixins or any other identifier not defined inside the\ntag the LESS code will fail to compile, you can use the @import statement to include a file, in which\ncase you should include the path relative to your static file directory::\n\n    <style type=\"text/css\">\n    {% less \"main\" %}\n    @include \"css/bootstrap.less\";\n    #round_box {\n        .border-radius(5px);\n    }\n    {% endless %}\n    </style>\n\nYou should be aware that when using this extension with the LESS import statement the output can get\nbig quickly as the compiler currently does not just get the necessary things from the imported file but\nit just naively includes the whole file (as in the example, the while bootstrap library will be included).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/clsdaniel/tgext.less", "keywords": "turbogears2.extension LESS WSGI jinja2.extension", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tgext.less", "package_url": "https://pypi.org/project/tgext.less/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tgext.less/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/clsdaniel/tgext.less"}, "release_url": "https://pypi.org/project/tgext.less/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "LESS middleware for TurboGears2", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about-tgext-less\">\n<h2>About tgext.less</h2>\n<p><a href=\"http://www.lesscss.org/\" rel=\"nofollow\">LESS</a> is a dynamic stylesheet language that extends CSS with dynamic behaviour\nsuch as variables, mixins, operations and functions.</p>\n<p>tgext.less is a middleware aimed at making <a href=\"http://www.turbogears.org\" rel=\"nofollow\">TurboGears2</a> development easier,\ntgext.less converts regular less files to css using the official less compiler (lessc), thus it currently\nrequires is to be installed.</p>\n<p>tgext.less is based on <a href=\"https://bitbucket.org/_amol_/tgext.scss\" rel=\"nofollow\">tgext.scss</a> by Alessandro Molina and is\nunder the same license (MIT).</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>tgext.less can be installed both from pypi or from bitbucket:</p>\n<pre>easy_install tgext.less\n</pre>\n<p>You will also need to install the less compiler, for instructions on this check the less website under the\nserver side usage section.</p>\n<p><a href=\"http://www.lesscss.org/#-server-side-usage\" rel=\"nofollow\">http://www.lesscss.org/</a></p>\n</div>\n<div id=\"enabling-tgext-less\">\n<h2>Enabling tgext.less</h2>\n<p>Using tgext.less is really simple, you edit your <cite>config/middeware.py</cite> and just after\nthe <cite>#Wrap your base TurboGears 2 application with custom middleware here</cite> comment wrap\n<cite>app</cite> with <cite>LESSMiddleware</cite>:</p>\n<pre>from tgext.less import LESSMiddleware\n\nmake_base_app = base_config.setup_tg_wsgi_app(load_environment)\n\ndef make_app(global_conf, full_stack=True, **app_conf):\n    app = make_base_app(global_conf, full_stack=True, **app_conf)\n\n    # Wrap your base TurboGears 2 application with custom middleware here\n    app = LESSMiddleware(app)\n\n    return app\n</pre>\n<p>Now you just have to put your .less files inside <em>public/css</em> and they will be served as CSS.</p>\n</div>\n<div id=\"cache-backends\">\n<h2>Cache Backends</h2>\n<p>You can change the cache backend storage into any dict like object that can serialize a dict object,\nfor example, you can use beaker cache by passing the cache object to the middleware constructor:</p>\n<pre>from tgext.less import LESSMiddleware\nfrom tg import cache\n\nmake_base_app = base_config.setup_tg_wsgi_app(load_environment)\n\ndef make_app(global_conf, full_stack=True, **app_conf):\n    app = make_base_app(global_conf, full_stack=True, **app_conf)\n\n    # LESS with beaker cache backend\n    app = LESSMiddleware(app, cache=cache)\n\n    return app\n</pre>\n</div>\n<div id=\"jinja2-extension\">\n<h2>Jinja2 Extension</h2>\n<p>tgext.less provides and extension for jinja2 templates to compile LESS embedded directly on your templates,\nto activate it just add it to your config/app_config.py file the following:</p>\n<pre>from tgext.less.jinja import LessExtension\n\nbase_config.jinja_extensions = [LessExtension]\n</pre>\n<p>Now you can use the less tag in your templates:</p>\n<pre>&lt;style type=\"text/css\"&gt;\n{% less \"main\" %}\n#header {\n    h1 {\n        font-size: 24pt;\n    }\n}\n{% endless %}\n&lt;/style&gt;\n</pre>\n<p>Where \u201cmain\u201d is a unique identifier for that LESS section.</p>\n<p>You should take into account that when using mixins or any other identifier not defined inside the\ntag the LESS code will fail to compile, you can use the @import statement to include a file, in which\ncase you should include the path relative to your static file directory:</p>\n<pre>&lt;style type=\"text/css\"&gt;\n{% less \"main\" %}\n@include \"css/bootstrap.less\";\n#round_box {\n    .border-radius(5px);\n}\n{% endless %}\n&lt;/style&gt;\n</pre>\n<p>You should be aware that when using this extension with the LESS import statement the output can get\nbig quickly as the compiler currently does not just get the necessary things from the imported file but\nit just naively includes the whole file (as in the example, the while bootstrap library will be included).</p>\n</div>\n\n          </div>"}, "last_serial": 800529, "releases": {"0.1dev": [{"comment_text": "", "digests": {"md5": "2271a5ab137b04dbde6c78b59671d3c9", "sha256": "067c2e7da2843b3c1f30e84adfee61b28e41ba5000889613ea5f702f5c2f0a25"}, "downloads": -1, "filename": "tgext.less-0.1dev.tar.gz", "has_sig": false, "md5_digest": "2271a5ab137b04dbde6c78b59671d3c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3067, "upload_time": "2011-11-24T17:59:45", "upload_time_iso_8601": "2011-11-24T17:59:45.423414Z", "url": "https://files.pythonhosted.org/packages/0b/ac/a4def27bb48ae439fc2d7b165080bc677854991e30b78a966b265b0d6eb3/tgext.less-0.1dev.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4d492bb16c87bdf0a6b4b225eec9a5df", "sha256": "1f6e36478029b761f0e5df04c543f4d041d3ffd194f394384e1b8dc16af14980"}, "downloads": -1, "filename": "tgext.less-0.2.tar.gz", "has_sig": false, "md5_digest": "4d492bb16c87bdf0a6b4b225eec9a5df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3246, "upload_time": "2012-02-04T08:08:43", "upload_time_iso_8601": "2012-02-04T08:08:43.942847Z", "url": "https://files.pythonhosted.org/packages/48/6e/950104ac7e13e9b428fe1d9d861dc5ed7372a50e7321ad84523cf3a5ba18/tgext.less-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0443f210445a7c474349707435b5f608", "sha256": "09fd9f0efe5bdbc5faeb182b7a86bf0b57f25c73341bca704a339ac51d3bbd3b"}, "downloads": -1, "filename": "tgext.less-0.3.tar.gz", "has_sig": false, "md5_digest": "0443f210445a7c474349707435b5f608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4299, "upload_time": "2012-02-23T07:00:09", "upload_time_iso_8601": "2012-02-23T07:00:09.134588Z", "url": "https://files.pythonhosted.org/packages/41/97/2f714e71f3adaffd85c16d10b2a52929653fc0ea7a4ae3aa117144e70558/tgext.less-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "cf1f7514e4ecd919bb078430b3a79d7b", "sha256": "d20a10719cf9e0cc3ea79cd3fb50b723a8815aaff7ce68a1bea3523799d44772"}, "downloads": -1, "filename": "tgext.less-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cf1f7514e4ecd919bb078430b3a79d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4288, "upload_time": "2012-03-29T18:00:48", "upload_time_iso_8601": "2012-03-29T18:00:48.401380Z", "url": "https://files.pythonhosted.org/packages/7d/a3/c35e4bdc5eff39420b0e58b043c57978f9151a4c57917e21e20456b35c5d/tgext.less-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf1f7514e4ecd919bb078430b3a79d7b", "sha256": "d20a10719cf9e0cc3ea79cd3fb50b723a8815aaff7ce68a1bea3523799d44772"}, "downloads": -1, "filename": "tgext.less-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cf1f7514e4ecd919bb078430b3a79d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4288, "upload_time": "2012-03-29T18:00:48", "upload_time_iso_8601": "2012-03-29T18:00:48.401380Z", "url": "https://files.pythonhosted.org/packages/7d/a3/c35e4bdc5eff39420b0e58b043c57978f9151a4c57917e21e20456b35c5d/tgext.less-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:14 2020"}