{"info": {"author": "Federico Rizzo", "author_email": "foo@bar.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only"], "description": "# cFlat\ncFlat is a python framework exposing a simple api that enables programmers to create music-based applications. It focuses mainly on plucked-string, tempered instruments such as guitars, basses, ukuleles and such...\n\n<hr/>\n\n## API\n\n### class Note():\nNote instances are the lowest-level objects of the framework and have 3 main attributes:\n\n* (str) chr\n* (str) alt\n* (int) oct\n\nOnly the `chr` argument is required to create an instance. Arguments `alt` and `oct` will default to `''` and `3` respectively.\n\n```\n>>> from cFlat import Note\n>>> e = Note('e')\n>>> e\nE\u00b3\n```\n\nNote objects implement comparison operators based on their semitone intervals:\n\n```\n>>> f = Note('F')\n>>> f \nF\u00b3\n>>> f > e\nTrue\n```\n\nTherefore, enharmonic relationships can be evaluated as follows:\n\n```\n>>> n1 = Note('F', '#', 5)\n>>> n2 = Note('G', 'b', 5)\n>>> n1, n2\n(F\u266f\u2075, G\u266d\u2075)\n>>> n1 != n2\nFalse\n```\n\nNotes with double alterations are also supported:\n\n```\n>>> n3 = Note('A', 'bb', 1)\n>>> n3\nA\ud834\udd2b\u00b9\n>>> n4 = Note('F', '##', 1)\n>>> n4\nF\ud834\udd2a\u00b9\n\n```\n\nGiven that python lacks a `===` operator, Notes can be compared for a \"stricter\" equality using their `is_a()` method:\n\n```\n>>> n3 == n4\nTrue\n>>> n3.is_a(n4)\nFalse\n```\n\nThis method directly compares Note attributes instead of their semitone interval. Set the `ignore_oct` argument appropriately for a less strict comparison:\n\n```\n>>> n1\nF\u266f\u2075\n>>> n1.is_a(Note('F', '#', 3))\nFalse\n>>> n1.is_a(Note('F', '#', 3), ignore_oct=False)\nTrue\n```\n\n### class DiatonicKey():\n### class ChromaticKey():\n\n\n### class String():\n\n### class StringInstrument():\n\n\n### Arguments\n\n* -h --help  \n\n* -f --frets [int] \n* -v --verbose [int] \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/synestematic/cFlat", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cFlat", "package_url": "https://pypi.org/project/cFlat/", "platform": "", "project_url": "https://pypi.org/project/cFlat/", "project_urls": {"Homepage": "https://github.com/synestematic/cFlat"}, "release_url": "https://pypi.org/project/cFlat/0.5/", "requires_dist": ["bestia"], "requires_python": "", "summary": "a python framework for programming music applications", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cFlat</h1>\n<p>cFlat is a python framework exposing a simple api that enables programmers to create music-based applications. It focuses mainly on plucked-string, tempered instruments such as guitars, basses, ukuleles and such...</p>\n<hr>\n<h2>API</h2>\n<h3>class Note():</h3>\n<p>Note instances are the lowest-level objects of the framework and have 3 main attributes:</p>\n<ul>\n<li>(str) chr</li>\n<li>(str) alt</li>\n<li>(int) oct</li>\n</ul>\n<p>Only the <code>chr</code> argument is required to create an instance. Arguments <code>alt</code> and <code>oct</code> will default to <code>''</code> and <code>3</code> respectively.</p>\n<pre><code>&gt;&gt;&gt; from cFlat import Note\n&gt;&gt;&gt; e = Note('e')\n&gt;&gt;&gt; e\nE\u00b3\n</code></pre>\n<p>Note objects implement comparison operators based on their semitone intervals:</p>\n<pre><code>&gt;&gt;&gt; f = Note('F')\n&gt;&gt;&gt; f \nF\u00b3\n&gt;&gt;&gt; f &gt; e\nTrue\n</code></pre>\n<p>Therefore, enharmonic relationships can be evaluated as follows:</p>\n<pre><code>&gt;&gt;&gt; n1 = Note('F', '#', 5)\n&gt;&gt;&gt; n2 = Note('G', 'b', 5)\n&gt;&gt;&gt; n1, n2\n(F\u266f\u2075, G\u266d\u2075)\n&gt;&gt;&gt; n1 != n2\nFalse\n</code></pre>\n<p>Notes with double alterations are also supported:</p>\n<pre><code>&gt;&gt;&gt; n3 = Note('A', 'bb', 1)\n&gt;&gt;&gt; n3\nA\ud834\udd2b\u00b9\n&gt;&gt;&gt; n4 = Note('F', '##', 1)\n&gt;&gt;&gt; n4\nF\ud834\udd2a\u00b9\n\n</code></pre>\n<p>Given that python lacks a <code>===</code> operator, Notes can be compared for a \"stricter\" equality using their <code>is_a()</code> method:</p>\n<pre><code>&gt;&gt;&gt; n3 == n4\nTrue\n&gt;&gt;&gt; n3.is_a(n4)\nFalse\n</code></pre>\n<p>This method directly compares Note attributes instead of their semitone interval. Set the <code>ignore_oct</code> argument appropriately for a less strict comparison:</p>\n<pre><code>&gt;&gt;&gt; n1\nF\u266f\u2075\n&gt;&gt;&gt; n1.is_a(Note('F', '#', 3))\nFalse\n&gt;&gt;&gt; n1.is_a(Note('F', '#', 3), ignore_oct=False)\nTrue\n</code></pre>\n<h3>class DiatonicKey():</h3>\n<h3>class ChromaticKey():</h3>\n<h3>class String():</h3>\n<h3>class StringInstrument():</h3>\n<h3>Arguments</h3>\n<ul>\n<li>\n<p>-h --help</p>\n</li>\n<li>\n<p>-f --frets [int]</p>\n</li>\n<li>\n<p>-v --verbose [int]</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6072313, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "79d183be7b9a26a8d1a0031e292cf63b", "sha256": "5a85aebafb65bdedda9dcf4bac17f76af35f9ff3c80653135033d5ca39dd3293"}, "downloads": -1, "filename": "cFlat-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "79d183be7b9a26a8d1a0031e292cf63b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11117, "upload_time": "2019-11-03T22:10:39", "upload_time_iso_8601": "2019-11-03T22:10:39.599396Z", "url": "https://files.pythonhosted.org/packages/c2/4d/ccaed24ce228cbaddb44e0071394b1acb70b5b246974c6d301c09d942944/cFlat-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57c4b1c457c301243ec49bc7398d222e", "sha256": "d93635a733489ba8a0d8d9176b740ebe75fd549d2e9b264f586d0a66d0c66937"}, "downloads": -1, "filename": "cFlat-0.5.tar.gz", "has_sig": false, "md5_digest": "57c4b1c457c301243ec49bc7398d222e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9827, "upload_time": "2019-11-03T22:10:41", "upload_time_iso_8601": "2019-11-03T22:10:41.617840Z", "url": "https://files.pythonhosted.org/packages/6f/0e/18d6b534d7fda8d32061d6720c5508111226530344931665a972681fdad8/cFlat-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79d183be7b9a26a8d1a0031e292cf63b", "sha256": "5a85aebafb65bdedda9dcf4bac17f76af35f9ff3c80653135033d5ca39dd3293"}, "downloads": -1, "filename": "cFlat-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "79d183be7b9a26a8d1a0031e292cf63b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11117, "upload_time": "2019-11-03T22:10:39", "upload_time_iso_8601": "2019-11-03T22:10:39.599396Z", "url": "https://files.pythonhosted.org/packages/c2/4d/ccaed24ce228cbaddb44e0071394b1acb70b5b246974c6d301c09d942944/cFlat-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57c4b1c457c301243ec49bc7398d222e", "sha256": "d93635a733489ba8a0d8d9176b740ebe75fd549d2e9b264f586d0a66d0c66937"}, "downloads": -1, "filename": "cFlat-0.5.tar.gz", "has_sig": false, "md5_digest": "57c4b1c457c301243ec49bc7398d222e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9827, "upload_time": "2019-11-03T22:10:41", "upload_time_iso_8601": "2019-11-03T22:10:41.617840Z", "url": "https://files.pythonhosted.org/packages/6f/0e/18d6b534d7fda8d32061d6720c5508111226530344931665a972681fdad8/cFlat-0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:39 2020"}