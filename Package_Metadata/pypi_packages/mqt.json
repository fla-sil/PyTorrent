{"info": {"author": "Odoo Community Association", "author_email": "github@odoo-community.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "[![Build Status](https://travis-ci.org/OCA/maintainer-quality-tools.svg)](https://travis-ci.org/OCA/maintainer-quality-tools)\n[![Coverage Status](https://coveralls.io/repos/OCA/maintainer-quality-tools/badge.svg)](https://coveralls.io/r/OCA/maintainer-quality-tools)\n\nQA Tools for Odoo maintainers (MQT)\n===================================\n\nThe goal of Maintainer Quality Tools (MQT) is to provide helpers to ensure the quality of Odoo addons.\n\nSample travis configuration file (for version 7.0)\n--------------------------------------------------\n\nIn order to setup TravisCI continuous integration for your project, just copy the\ncontent of the [`/sample_files`](https://github.com/OCA/maintainer-quality-tools/tree/master/sample_files)\nto your project\u2019s root directory.\n\nIf your project depends on other OCA or other Github repositories, create a file called `oca_dependencies.txt` at the root of your project and list the dependencies there. One per line like so:\n\n    project_name optional_repository_url optional_branch_name\n\nDuring testbed setup, MQT will automatically download and place these repositories accordingly into the addon path.\nNote on addons path ordering: They will be placed after your own repo, but before the odoo core repo.\n\nCheck your .travis file for syntax issues.\n------------------------------------------\n\nYou can test your .travis file in [this linter](http://lint.travis-ci.org/).\nThis is very useful when you are improving your file.\n\nMultiple values for environment variable VERSION\n------------------------------------------------\n\nYou can use branch or pull request into environment variable VERSION:\n\n- Branch 10.0\n\n```\nVERSION=\"10.0\" ODOO_REPO=\"odoo/odoo\"\n```\n\n- Pull request odoo/odoo#143\n\n```\nVERSION=\"pull/143\" ODOO_REPO=\"odoo/odoo\"\n```\n\nUsing custom branch inside odoo repository using ODOO_BRANCH\n------------------------------------------------------------\n\nYou can use the custom branch into the ODOO_REPO using the environment variable ODOO_BRANCH:\n\n\n- Branch saas-17\n\n```\nODOO_REPO=\"odoo/odoo\" ODOO_BRANCH=\"saas-17\"\n```\n\nModule unit tests\n-----------------\n\nMQT is also capable to test each module individually.\nThe intention is to check if all dependencies are correctly defined.\nActivate it through the `UNIT_TEST` directive.\nAn additional line should be added to the `env:` section,\nsimilar to this one:\n\n```\nVERSION=\"8.0\" UNIT_TEST=\"1\"\n```\n\nCoveralls/Codecov configuration file\n------------------------------------\n\n[Coveralls](https://coveralls.io/) and [Codecov](https://codecov.io/) services provide information on the test coverage of your modules.\nCurrently both configurations are automatic (check default configuration [here](cfg/.coveragerc)).\nSo, as of today, you don't need to include a `.coveragerc` into the repository,\nIf you do it, it will be simply ignored.\n\n**NOTE:** the current configuration automatically ignores `*_example` modules\nfrom coverage check.\nSee [maintainer-tools CONTRIBUTING doc](https://github.com/OCA/maintainer-tools/blob/master/CONTRIBUTING.md#tests) for further info on tests.\n\nNames used for the test databases\n---------------------------------\n\nMQT has a nice feature of organizing your testing databases.\nYou might want to do that if you want to double them up as \nstaging DBs or if you want to work with an advanced set of\ntemplates in order to speed up your CI pipeline.\nJust specify at will:\n`MQT_TEMPLATE_DB='mqt_odoo_template' MQT_TEST_DB='mqt_odoo_test'`.\nGive us feedback on you experiences, and if you could share findings\nfrom your use case, there might be some grateful people around.\n\nIsolated pylint+flake8 checks\n-----------------------------\nIf you want to make a build exclusive for these checks, you can add a line\non the `env:` section of the .travis.yml file with this content:\n\n```\nVERSION=\"7.0\" LINT_CHECK=\"1\"\n```\n\nYou will get a faster answer about these questions and also a fast view over\nsemaphore icons in Travis build view.\n\nTo avoid making again these checks on other builds, you have to add\nLINT_CHECK=\"0\" variable on the line:\n\n```\nVERSION=\"7.0\" ODOO_REPO=\"odoo/odoo\" LINT_CHECK=\"0\"\n```\n\nDisable test\n------------\nIf you want to make a build without tests, you can use the following directive:\n`TEST_ENABLE=\"0\"` You will simply get the databases with packages installed,\nbut without running any tests.\n\n\n=========\nChangelog\n=========\n\nHere you can find the recent changes to mqt..\n\n.. changelog::\n    :version: dev\n    :released: Ongoing\n\n    .. change::\n        :tags:  docs\n\n        Updated CHANGES.\n\n.. changelog::\n    :version: 0.1.0\n    :released: 2017-10-26\n\n    .. change::\n        :tags: project\n\n        First release on PyPi.\n\n.. todo:: vim: set filetype=rst:\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oca/mqt", "keywords": "mqt", "license": "AGPL-v3", "maintainer": "", "maintainer_email": "", "name": "mqt", "package_url": "https://pypi.org/project/mqt/", "platform": "", "project_url": "https://pypi.org/project/mqt/", "project_urls": {"Homepage": "https://github.com/oca/mqt"}, "release_url": "https://pypi.org/project/mqt/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "QA Tools for Odoo maintainers (MQT)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/OCA/maintainer-quality-tools.svg)](https://travis-ci.org/OCA/maintainer-quality-tools)<br>[![Coverage Status](https://coveralls.io/repos/OCA/maintainer-quality-tools/badge.svg)](https://coveralls.io/r/OCA/maintainer-quality-tools)<br><br>QA Tools for Odoo maintainers (MQT)<br>===================================<br><br>The goal of Maintainer Quality Tools (MQT) is to provide helpers to ensure the quality of Odoo addons.<br><br>Sample travis configuration file (for version 7.0)<br>--------------------------------------------------<br><br>In order to setup TravisCI continuous integration for your project, just copy the<br>content of the [`/sample_files`](https://github.com/OCA/maintainer-quality-tools/tree/master/sample_files)<br>to your project\u2019s root directory.<br><br>If your project depends on other OCA or other Github repositories, create a file called `oca_dependencies.txt` at the root of your project and list the dependencies there. One per line like so:<br><br>    project_name optional_repository_url optional_branch_name<br><br>During testbed setup, MQT will automatically download and place these repositories accordingly into the addon path.<br>Note on addons path ordering: They will be placed after your own repo, but before the odoo core repo.<br><br>Check your .travis file for syntax issues.<br>------------------------------------------<br><br>You can test your .travis file in [this linter](http://lint.travis-ci.org/).<br>This is very useful when you are improving your file.<br><br>Multiple values for environment variable VERSION<br>------------------------------------------------<br><br>You can use branch or pull request into environment variable VERSION:<br><br>- Branch 10.0<br><br>```<br>VERSION=\"10.0\" ODOO_REPO=\"odoo/odoo\"<br>```<br><br>- Pull request odoo/odoo#143<br><br>```<br>VERSION=\"pull/143\" ODOO_REPO=\"odoo/odoo\"<br>```<br><br>Using custom branch inside odoo repository using ODOO_BRANCH<br>------------------------------------------------------------<br><br>You can use the custom branch into the ODOO_REPO using the environment variable ODOO_BRANCH:<br><br><br>- Branch saas-17<br><br>```<br>ODOO_REPO=\"odoo/odoo\" ODOO_BRANCH=\"saas-17\"<br>```<br><br>Module unit tests<br>-----------------<br><br>MQT is also capable to test each module individually.<br>The intention is to check if all dependencies are correctly defined.<br>Activate it through the `UNIT_TEST` directive.<br>An additional line should be added to the `env:` section,<br>similar to this one:<br><br>```<br>VERSION=\"8.0\" UNIT_TEST=\"1\"<br>```<br><br>Coveralls/Codecov configuration file<br>------------------------------------<br><br>[Coveralls](https://coveralls.io/) and [Codecov](https://codecov.io/) services provide information on the test coverage of your modules.<br>Currently both configurations are automatic (check default configuration [here](cfg/.coveragerc)).<br>So, as of today, you don't need to include a `.coveragerc` into the repository,<br>If you do it, it will be simply ignored.<br><br>**NOTE:** the current configuration automatically ignores `*_example` modules<br>from coverage check.<br>See [maintainer-tools CONTRIBUTING doc](https://github.com/OCA/maintainer-tools/blob/master/CONTRIBUTING.md#tests) for further info on tests.<br><br>Names used for the test databases<br>---------------------------------<br><br>MQT has a nice feature of organizing your testing databases.<br>You might want to do that if you want to double them up as <br>staging DBs or if you want to work with an advanced set of<br>templates in order to speed up your CI pipeline.<br>Just specify at will:<br>`MQT_TEMPLATE_DB='mqt_odoo_template' MQT_TEST_DB='mqt_odoo_test'`.<br>Give us feedback on you experiences, and if you could share findings<br>from your use case, there might be some grateful people around.<br><br>Isolated pylint+flake8 checks<br>-----------------------------<br>If you want to make a build exclusive for these checks, you can add a line<br>on the `env:` section of the .travis.yml file with this content:<br><br>```<br>VERSION=\"7.0\" LINT_CHECK=\"1\"<br>```<br><br>You will get a faster answer about these questions and also a fast view over<br>semaphore icons in Travis build view.<br><br>To avoid making again these checks on other builds, you have to add<br>LINT_CHECK=\"0\" variable on the line:<br><br>```<br>VERSION=\"7.0\" ODOO_REPO=\"odoo/odoo\" LINT_CHECK=\"0\"<br>```<br><br>Disable test<br>------------<br>If you want to make a build without tests, you can use the following directive:<br>`TEST_ENABLE=\"0\"` You will simply get the databases with packages installed,<br>but without running any tests.<br><br><br>=========<br>Changelog<br>=========<br><br>Here you can find the recent changes to mqt..<br><br>.. changelog::<br>    :version: dev<br>    :released: Ongoing<br><br>    .. change::<br>        :tags:  docs<br><br>        Updated CHANGES.<br><br>.. changelog::<br>    :version: 0.1.0<br>    :released: 2017-10-26<br><br>    .. change::<br>        :tags: project<br><br>        First release on PyPi.<br><br>.. todo:: vim: set filetype=rst:<br>\n          </div>"}, "last_serial": 3289960, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9c667b8d02e7c308489135773ec57e11", "sha256": "9d02382a69a0a589ecda6750fe10d371c55519f90821cd9c225f4d0c61f77644"}, "downloads": -1, "filename": "mqt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9c667b8d02e7c308489135773ec57e11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16145, "upload_time": "2017-10-29T18:42:11", "upload_time_iso_8601": "2017-10-29T18:42:11.892289Z", "url": "https://files.pythonhosted.org/packages/6e/72/6763e54739a9dd634071bfec29904f91b77407098f501c3d74d2d99dba2f/mqt-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "35809bb1f008816ac08c493edced859e", "sha256": "42a19b5393a137a77cdd97d757b6d39489789c732f761bbed3ecb122560f8760"}, "downloads": -1, "filename": "mqt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "35809bb1f008816ac08c493edced859e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16597, "upload_time": "2017-10-30T05:16:07", "upload_time_iso_8601": "2017-10-30T05:16:07.244134Z", "url": "https://files.pythonhosted.org/packages/bf/94/c1b1b7ec90b185a8e7346ac9f63c4587debfb8008da6f28aa670eb83b73e/mqt-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35809bb1f008816ac08c493edced859e", "sha256": "42a19b5393a137a77cdd97d757b6d39489789c732f761bbed3ecb122560f8760"}, "downloads": -1, "filename": "mqt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "35809bb1f008816ac08c493edced859e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16597, "upload_time": "2017-10-30T05:16:07", "upload_time_iso_8601": "2017-10-30T05:16:07.244134Z", "url": "https://files.pythonhosted.org/packages/bf/94/c1b1b7ec90b185a8e7346ac9f63c4587debfb8008da6f28aa670eb83b73e/mqt-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:06 2020"}