{"info": {"author": "Chris Franklin", "author_email": "chris@hairy.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "CUser, make email the USERNAME\\_FIELD\n=====================================\n\nCUser makes it easy to use email address as your identification token\ninstead of a username.\n\nCUser is a custom Django user model (extends ``AbstractBaseUser``) so it\ntakes a tiny amount of effort to use.\n\nThe only difference between CUser and the vanilla Django ``User`` is email\naddress is the ``USERNAME_FIELD`` (and username does not exist).\n\nCUser supports Django 1.8+\n\nWhy use CUser?\n--------------\n\nBecause you want everything in ``django.contrib.auth`` except for the\n``username`` field and you also want users to **log in with email addresses**.\nAnd you don't want to create your own custom user model or authentication\nbackend.\n\nInstall & Set up\n----------------\n\n0. If you previously used Django's default user model,\n   ``django.contrib.auth.models.User``, jump to **Notes** first (then come\n   back). Otherwise, continue onward!\n\n1. Install with ``pip install django-username-email-fullname``\n\n2. Add ``cuser`` to your ``INSTALLED_APPS`` setting:\n\n   .. code-block:: python\n\n       INSTALLED_APPS = [\n           ...\n           'cuser',\n       ]\n\n3. Specify the custom model as the default user model for your project\n   using the ``AUTH_USER_MODEL`` setting in your settings.py:\n\n   .. code-block:: python\n\n       AUTH_USER_MODEL = 'cuser.CUser'\n\n4. Instead of referring to User directly, you should reference the user\n   model using ``django.contrib.auth.get_user_model()``\n\n5. If you use Django's default ``AuthenticationForm`` class, it is\n   strongly recommended that you replace it with the one included with\n   CUser. This will make the ``<input>`` have its ``type`` attribute set\n   to ``email`` and browsers' autocomplete feature will suggest email\n   addresses instead of usernames. For example, if your project is using\n   Django's default ``login`` view, this is what you would put in your\n   urls.py in order to make use of CUser's ``AuthenticationForm`` class:\n\n   .. code-block:: python\n\n       from cuser.forms import AuthenticationForm\n       from django.conf.urls import include, url\n       from django.contrib.auth.views import login\n\n       urlpatterns = [\n           url(r'^accounts/login/$', login, {'authentication_form': AuthenticationForm}, name='login'),\n           url(r'^accounts/', include('django.contrib.auth.urls')),\n           ...\n       ]\n\n6. Run migrations.\n\n   .. code-block:: shell\n\n       python manage.py migrate\n\nConfiguration\n-------------\n\nTo override any of the default settings, create a dictionary named ``CUSER`` in\nyour settings.py with each setting you want to override. For example:\n\n.. code-block:: python\n\n    CUSER = {\n        'app_verbose_name': 'Authentication and Authorization',\n        'register_proxy_auth_group_model': True,\n    }\n\nThese are the settings:\n\n``app_verbose_name`` (default: ``_(\"Custom User\")``)\n****************************************************\n\nThis controls the value that CUser will use for its ``AppConfig`` class'\n``verbose_name``.\n\n``register_proxy_auth_group_model`` (default: ``False``)\n********************************************************\n\nWhen set to ``True``, CUser's admin.py will unregister Django's default\n``Group`` model and register its own proxy model of Django's default ``Group``\nmodel (also named ``Group``). This is useful if you want Django's default\n``Group`` model to appear in the same part of the admin as CUser's ``CUser``\nmodel.\n\nNotes\n-----\n\nIf you have tables referencing Django's ``User`` model, you will have to\ndelete those table and migrations, then re-migrate. This will ensure\neverything is set up correctly from the beginning.\n\nWhen you define a foreign key or many-to-many relations to the ``User``\nmodel, you should specify the custom model using the ``AUTH_USER_MODEL``\nsetting.\n\nFor example:\n\n.. code-block:: python\n\n    from django.conf import settings\n    from django.db import models\n\n    class Profile(models.Model):\n        user = models.ForeignKey(\n            settings.AUTH_USER_MODEL,\n            on_delete=models.CASCADE,\n    )\n\nLicense\n-------\n\nReleased under the MIT license. See LICENSE for details.\n\nQuestions, comments, or anything else?\n--------------------------------------\n\n-  Open an issue\n-  `Twitter <https://twitter.com/tomfme>`__\n-  tom@meagher.co", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hairychris/django-username-email-fullname/", "keywords": "user email username fullname", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-username-email-fullname", "package_url": "https://pypi.org/project/django-username-email-fullname/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-username-email-fullname/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hairychris/django-username-email-fullname/"}, "release_url": "https://pypi.org/project/django-username-email-fullname/2.0.3/", "requires_dist": null, "requires_python": null, "summary": "Custom Django User model that makes email the USERNAME_FIELD.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>CUser makes it easy to use email address as your identification token\ninstead of a username.</p>\n<p>CUser is a custom Django user model (extends <tt>AbstractBaseUser</tt>) so it\ntakes a tiny amount of effort to use.</p>\n<p>The only difference between CUser and the vanilla Django <tt>User</tt> is email\naddress is the <tt>USERNAME_FIELD</tt> (and username does not exist).</p>\n<p>CUser supports Django 1.8+</p>\n<div id=\"why-use-cuser\">\n<h2>Why use CUser?</h2>\n<p>Because you want everything in <tt>django.contrib.auth</tt> except for the\n<tt>username</tt> field and you also want users to <strong>log in with email addresses</strong>.\nAnd you don\u2019t want to create your own custom user model or authentication\nbackend.</p>\n</div>\n<div id=\"install-set-up\">\n<h2>Install &amp; Set up</h2>\n<ol>\n<li><p>If you previously used Django\u2019s default user model,\n<tt>django.contrib.auth.models.User</tt>, jump to <strong>Notes</strong> first (then come\nback). Otherwise, continue onward!</p>\n</li>\n<li><p>Install with <tt>pip install <span class=\"pre\">django-username-email-fullname</span></tt></p>\n</li>\n<li><p>Add <tt>cuser</tt> to your <tt>INSTALLED_APPS</tt> setting:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'cuser'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>Specify the custom model as the default user model for your project\nusing the <tt>AUTH_USER_MODEL</tt> setting in your settings.py:</p>\n<pre><span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s1\">'cuser.CUser'</span>\n</pre>\n</li>\n<li><p>Instead of referring to User directly, you should reference the user\nmodel using <tt>django.contrib.auth.get_user_model()</tt></p>\n</li>\n<li><p>If you use Django\u2019s default <tt>AuthenticationForm</tt> class, it is\nstrongly recommended that you replace it with the one included with\nCUser. This will make the <tt>&lt;input&gt;</tt> have its <tt>type</tt> attribute set\nto <tt>email</tt> and browsers\u2019 autocomplete feature will suggest email\naddresses instead of usernames. For example, if your project is using\nDjango\u2019s default <tt>login</tt> view, this is what you would put in your\nurls.py in order to make use of CUser\u2019s <tt>AuthenticationForm</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cuser.forms</span> <span class=\"kn\">import</span> <span class=\"n\">AuthenticationForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.views</span> <span class=\"kn\">import</span> <span class=\"n\">login</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^accounts/login/$'</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'authentication_form'</span><span class=\"p\">:</span> <span class=\"n\">AuthenticationForm</span><span class=\"p\">},</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'login'</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^accounts/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django.contrib.auth.urls'</span><span class=\"p\">)),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n<li><p>Run migrations.</p>\n<pre>python manage.py migrate\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>To override any of the default settings, create a dictionary named <tt>CUSER</tt> in\nyour settings.py with each setting you want to override. For example:</p>\n<pre><span class=\"n\">CUSER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'app_verbose_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Authentication and Authorization'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'register_proxy_auth_group_model'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>These are the settings:</p>\n<div id=\"app-verbose-name-default-custom-user\">\n<h3><tt>app_verbose_name</tt> (default: <tt><span class=\"pre\">_(\"Custom</span> User\")</tt>)</h3>\n<p>This controls the value that CUser will use for its <tt>AppConfig</tt> class\u2019\n<tt>verbose_name</tt>.</p>\n</div>\n<div id=\"register-proxy-auth-group-model-default-false\">\n<h3><tt>register_proxy_auth_group_model</tt> (default: <tt>False</tt>)</h3>\n<p>When set to <tt>True</tt>, CUser\u2019s admin.py will unregister Django\u2019s default\n<tt>Group</tt> model and register its own proxy model of Django\u2019s default <tt>Group</tt>\nmodel (also named <tt>Group</tt>). This is useful if you want Django\u2019s default\n<tt>Group</tt> model to appear in the same part of the admin as CUser\u2019s <tt>CUser</tt>\nmodel.</p>\n</div>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>If you have tables referencing Django\u2019s <tt>User</tt> model, you will have to\ndelete those table and migrations, then re-migrate. This will ensure\neverything is set up correctly from the beginning.</p>\n<p>When you define a foreign key or many-to-many relations to the <tt>User</tt>\nmodel, you should specify the custom model using the <tt>AUTH_USER_MODEL</tt>\nsetting.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Profile</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Released under the MIT license. See LICENSE for details.</p>\n</div>\n<div id=\"questions-comments-or-anything-else\">\n<h2>Questions, comments, or anything else?</h2>\n<ul>\n<li>Open an issue</li>\n<li><a href=\"https://twitter.com/tomfme\" rel=\"nofollow\">Twitter</a></li>\n<li><a href=\"mailto:tom%40meagher.co\">tom<span>@</span>meagher<span>.</span>co</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2649470, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "db6cfdcec4c3987f7487911c0d121f45", "sha256": "9180a4eba28591a4fe61b7920a6bcf2816cbd8e403a18c898307fee0e465ac33"}, "downloads": -1, "filename": "django-username-email-fullname-2.0.tar.gz", "has_sig": false, "md5_digest": "db6cfdcec4c3987f7487911c0d121f45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8254, "upload_time": "2017-02-06T01:18:04", "upload_time_iso_8601": "2017-02-06T01:18:04.103585Z", "url": "https://files.pythonhosted.org/packages/54/10/fdd05125a5137e6e6474a18b11051f0329652afb91dfe93b583ca301b914/django-username-email-fullname-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "95680154849133d81ffbbda415fd5279", "sha256": "51673090b73f1bf33f3667d403837d57ecfbd341d8c0dcc02abb37c1fa0b5297"}, "downloads": -1, "filename": "django-username-email-fullname-2.0.1.tar.gz", "has_sig": false, "md5_digest": "95680154849133d81ffbbda415fd5279", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8267, "upload_time": "2017-02-06T02:52:32", "upload_time_iso_8601": "2017-02-06T02:52:32.345682Z", "url": "https://files.pythonhosted.org/packages/2d/94/1917a99a497f5e9c4e5f92f3374866ab35e00f0eddddb209c43aa8691e93/django-username-email-fullname-2.0.1.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "e426713f699d87dd3ed6419b13594dbc", "sha256": "950292b66caa05e2d97401d1038f29d55a8e2e3bbc626680c26efaff0a6e527f"}, "downloads": -1, "filename": "django-username-email-fullname-2.0.3.tar.gz", "has_sig": false, "md5_digest": "e426713f699d87dd3ed6419b13594dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8543, "upload_time": "2017-02-17T13:02:02", "upload_time_iso_8601": "2017-02-17T13:02:02.244384Z", "url": "https://files.pythonhosted.org/packages/b2/43/28a84ff419ef2d45a493e221b4663dd1486467d9132d14c79054c35a27d0/django-username-email-fullname-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e426713f699d87dd3ed6419b13594dbc", "sha256": "950292b66caa05e2d97401d1038f29d55a8e2e3bbc626680c26efaff0a6e527f"}, "downloads": -1, "filename": "django-username-email-fullname-2.0.3.tar.gz", "has_sig": false, "md5_digest": "e426713f699d87dd3ed6419b13594dbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8543, "upload_time": "2017-02-17T13:02:02", "upload_time_iso_8601": "2017-02-17T13:02:02.244384Z", "url": "https://files.pythonhosted.org/packages/b2/43/28a84ff419ef2d45a493e221b4663dd1486467d9132d14c79054c35a27d0/django-username-email-fullname-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:08 2020"}