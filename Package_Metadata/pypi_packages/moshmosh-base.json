{"info": {"author": "thautwarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "# First of All\n\n\n> The awareness of low-level implementation details brings the appreciation of an abstraction and the intuitive explanation for it.\n\nThis is a saying from my idol in the field of [Programming Language](https://en.wikipedia.org/wiki/Programming_language).\n\nI present it here, in case anyone prejudging the reliability of this project.\n\n**THIS PROJECT SHOULD WORK PERFECTLY UNDER ANY SUPPPORTED PYTHON VERSION(>=3.5), FOR ALL 3-RD PARTY LIBRARIES SUPPORTED IN ANY RELIABLE CPYTHON DISTRIBUTION**.\n\nThere is no hack but simple static code analyses and ast transformations, and a hack usually contains `inspect.*` that I'll never use in this project.\n\n# Moshmosh\n\n[![Build](https://travis-ci.com/thautwarm/moshmosh.svg?branch=master)](https://travis-ci.com/thautwarm/moshmosh) [![Support](https://img.shields.io/badge/PyPI-&nbsp;3\\.5~3\\.7-Orange.svg?style=flat)](https://pypi.org/project/moshmosh-base) [![codecov](https://codecov.io/gh/thautwarm/moshmosh/branch/master/graph/badge.svg)](https://codecov.io/gh/thautwarm/moshmosh)\n\nAn advanced syntax extension system implemented in pure python.\n\n```\npip install -U moshmosh-base --no-compile\n```\n\nNote that `--no-compile` is required.\n\n# Preview\n\n## Working with IPython\n\nYou should copy [moshmosh_ipy.py](https://raw.githubusercontent.com/thautwarm/moshmosh/master/moshmosh_ipy.py)\nto `$USER/.ipython/profile_default/startup/`.\n\nIf this directory does not exist, use command `ipython profile create` to instantiate.\n\nSome examples about pattern matching, pipelines and quick lambdas:\n\n![IPython example 1](https://raw.githubusercontent.com/thautwarm/moshmosh/master/static/img1.png)\n\nSome examples about the scoped operators:\n\n![IPython example 2](https://raw.githubusercontent.com/thautwarm/moshmosh/master/static/img2.png)\n\n## Working with regular Python files\n\nImport `moshmosh` in your main module:\n\n![Main.py](https://raw.githubusercontent.com/thautwarm/moshmosh/master/static/main.png)\n\nThen, in `mypackage.py`, start coding with a pragma comment `# moshmosh?`, then you can use moshmosh extension system.\n\n![Upack.py](https://raw.githubusercontent.com/thautwarm/moshmosh/master/static/upack.png)\n\n## Case Study : Pattern Matching\n\nThe matching protocol which stems from Python-ideas mailing list is introduced in,\nwhich means you can define your own patterns conveniently.\nThe link is [here](https://mail.python.org/pipermail/python-ideas/2015-April/032920.html).\n\n```python\n# moshmosh?\n# +pattern-matching\n\nclass GreaterThan:\n    def __init__(self, v):\n        self.v = v\n\n    def __match__(self, cnt: int, to_match):\n        if isinstance(to_match, int) and cnt is 0 and to_match > self.v:\n            return () # matched\n        # 'return None' indicates 'unmatched'\n\nwith match(114, 514):\n    if (GreaterThan(42)() and a, b):\n        print(b, a)\n# 514 114\n```\n\nNote that the matching clauses should be exhaustive,\notherwise, a `moshmosh.extensions.pattern_matching.runtime.NotExhaustive`\nmight get raised.\n\nThe supported Patterns are listed here, which is\nof course much more powerful than most programming languages.\n\n- And pattern: `pat1 and pat2 and pat3 ...`\n- Or pattern: `pat1 or pat2 or pat3...`\n- Pin pattern: `pin(value)`, this is quite useful. See [Elixir Pin Operator](https://elixir-lang.org/getting-started/pattern-matching.html#the-pin-operator)\n- Literal pattern: `1, \"str\", 1+2j, (1, 2)`\n- As pattern: `a, var`\n- Wildcard: `_`\n- Guard: `when(cond1, cond2, cond3)`\n- Nested patterns:\n    - Tuple: `(pat1, pat2, pat3), (pat1, *pat2, pat3)`\n    - List:  `[pat1, pat2, pat3], [pat1, *pat2, pat3]`\n    - Recogniser: `Cons(pat1, pat2, pat3)`, note that,\n        the function `Cons.__match__(<n arg>, value_to_match)` is exact the protocol.\n\nThe pattern matching should be more efficient than those hand-written codes without\nugly optimizations.\n\nBesides, Moshmosh's pattern matching is orders of magnitude faster than\nany other alternatives.\n\n## Case Study : Template-Python\n\nThis is relatively a simple quasiquote implementation, inspired by MetaOCaml.\nIt does not support manual splices or nested quotations, but the function arguments\nare automatically spliced.\n\n```python\n# moshmosh?\n# +template-python\n\n@quote\ndef f(x):\n    x + 1\n    x = y + 1\n\nfrom moshmosh.ast_compat import ast\nfrom astpretty import pprint\n\nstmts = f(ast.Name(\"a\"))\npprint(ast.fix_missing_locations(stmts[0]))\npprint(ast.fix_missing_locations(stmts[1]))\n\n# =>\nExpr(\n    lineno=7,\n    col_offset=4,\n    value=BinOp(\n        lineno=7,\n        col_offset=4,\n        left=Name(lineno=7, col_offset=4, id='a', ctx=Load()),\n        op=Add(),\n        right=Num(lineno=7, col_offset=8, n=1),\n    ),\n)\nAssign(\n    lineno=8,\n    col_offset=4,\n    targets=[Name(lineno=8, col_offset=4, id='a', ctx=Store())],\n    value=BinOp(\n        lineno=8,\n        col_offset=8,\n        left=Name(lineno=8, col_offset=8, id='y', ctx=Load()),\n        op=Add(),\n        right=Num(lineno=8, col_offset=12, n=1),\n    ),\n)\n```\n\n## Case Study: Lazy Import\n\n```python\n# moshmosh?\n# +lazy-import\nimport numpy as np\n# -lazy-import\n\n# in fact numpy is not imported here,\n# and once you use it, it gets imported.\n\ndef arr10():\n    # The first time call\n    # arr10 will enforce the import of numpy.\n    return np.zeros(10)\n```\n\nAfter the lazy modules are actually imported, there's\nno overhead to access their members.\n\nHowever, please only import modules when using `lazy-import`.\n\nThe use case is about the necessary cross-import when you want to\norganise your codebase in a more fine-grained way.\n\n\n## Acknowledgements\n\n- [future-fstrings](https://github.com/asottile/future-fstrings)\n- Pattern matching in Python\n    - [older implementations](http://www.grantjenks.com/docs/patternmatching/#alternative-packages)\n    - search \"pattern matching\" at [Python-ideas](https://mail.python.org/archives/list/python-ideas@python.org/).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thautwarm/moshmosh", "keywords": "syntax,semantics,extension,macro,pattern matching", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "moshmosh-base", "package_url": "https://pypi.org/project/moshmosh-base/", "platform": "any", "project_url": "https://pypi.org/project/moshmosh-base/", "project_urls": {"Homepage": "https://github.com/thautwarm/moshmosh"}, "release_url": "https://pypi.org/project/moshmosh-base/0.3.4/", "requires_dist": null, "requires_python": ">=3.5", "summary": "advanced syntax&semantics extension system for Python", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>First of All</h1>\n<blockquote>\n<p>The awareness of low-level implementation details brings the appreciation of an abstraction and the intuitive explanation for it.</p>\n</blockquote>\n<p>This is a saying from my idol in the field of <a href=\"https://en.wikipedia.org/wiki/Programming_language\" rel=\"nofollow\">Programming Language</a>.</p>\n<p>I present it here, in case anyone prejudging the reliability of this project.</p>\n<p><strong>THIS PROJECT SHOULD WORK PERFECTLY UNDER ANY SUPPPORTED PYTHON VERSION(&gt;=3.5), FOR ALL 3-RD PARTY LIBRARIES SUPPORTED IN ANY RELIABLE CPYTHON DISTRIBUTION</strong>.</p>\n<p>There is no hack but simple static code analyses and ast transformations, and a hack usually contains <code>inspect.*</code> that I'll never use in this project.</p>\n<h1>Moshmosh</h1>\n<p><a href=\"https://travis-ci.com/thautwarm/moshmosh\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c071cca2c2b579194ea5af1656d098c8997a6b6/68747470733a2f2f7472617669732d63692e636f6d2f74686175747761726d2f6d6f73686d6f73682e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/moshmosh-base\" rel=\"nofollow\"><img alt=\"Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0b9cff5e844c8930d17dae42dfd7786899a34ff/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507950492d254332254130332e35253745332e372d4f72616e67652e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/gh/thautwarm/moshmosh\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7300d0570efec816d2d9a84b03a7dab64a4959c6/68747470733a2f2f636f6465636f762e696f2f67682f74686175747761726d2f6d6f73686d6f73682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>An advanced syntax extension system implemented in pure python.</p>\n<pre><code>pip install -U moshmosh-base --no-compile\n</code></pre>\n<p>Note that <code>--no-compile</code> is required.</p>\n<h1>Preview</h1>\n<h2>Working with IPython</h2>\n<p>You should copy <a href=\"https://raw.githubusercontent.com/thautwarm/moshmosh/master/moshmosh_ipy.py\" rel=\"nofollow\">moshmosh_ipy.py</a>\nto <code>$USER/.ipython/profile_default/startup/</code>.</p>\n<p>If this directory does not exist, use command <code>ipython profile create</code> to instantiate.</p>\n<p>Some examples about pattern matching, pipelines and quick lambdas:</p>\n<p><img alt=\"IPython example 1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17eb169ef37a574fed4637f2ff917c74612e2b7c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f6d6f73686d6f73682f6d61737465722f7374617469632f696d67312e706e67\"></p>\n<p>Some examples about the scoped operators:</p>\n<p><img alt=\"IPython example 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/155c80cf3926c38cdf661ce973cb39a50c3292b4/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f6d6f73686d6f73682f6d61737465722f7374617469632f696d67322e706e67\"></p>\n<h2>Working with regular Python files</h2>\n<p>Import <code>moshmosh</code> in your main module:</p>\n<p><img alt=\"Main.py\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c490333e67ff4bad72f45af08e65f75696cc43d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f6d6f73686d6f73682f6d61737465722f7374617469632f6d61696e2e706e67\"></p>\n<p>Then, in <code>mypackage.py</code>, start coding with a pragma comment <code># moshmosh?</code>, then you can use moshmosh extension system.</p>\n<p><img alt=\"Upack.py\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec2caa3fb2bf18ab6c2c5b224654c1ef18cc121a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f6d6f73686d6f73682f6d61737465722f7374617469632f757061636b2e706e67\"></p>\n<h2>Case Study : Pattern Matching</h2>\n<p>The matching protocol which stems from Python-ideas mailing list is introduced in,\nwhich means you can define your own patterns conveniently.\nThe link is <a href=\"https://mail.python.org/pipermail/python-ideas/2015-April/032920.html\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"c1\"># moshmosh?</span>\n<span class=\"c1\"># +pattern-matching</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GreaterThan</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__match__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">to_match</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">to_match</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">cnt</span> <span class=\"ow\">is</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">to_match</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"c1\"># matched</span>\n        <span class=\"c1\"># 'return None' indicates 'unmatched'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">114</span><span class=\"p\">,</span> <span class=\"mi\">514</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">GreaterThan</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)()</span> <span class=\"ow\">and</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"c1\"># 514 114</span>\n</pre>\n<p>Note that the matching clauses should be exhaustive,\notherwise, a <code>moshmosh.extensions.pattern_matching.runtime.NotExhaustive</code>\nmight get raised.</p>\n<p>The supported Patterns are listed here, which is\nof course much more powerful than most programming languages.</p>\n<ul>\n<li>And pattern: <code>pat1 and pat2 and pat3 ...</code></li>\n<li>Or pattern: <code>pat1 or pat2 or pat3...</code></li>\n<li>Pin pattern: <code>pin(value)</code>, this is quite useful. See <a href=\"https://elixir-lang.org/getting-started/pattern-matching.html#the-pin-operator\" rel=\"nofollow\">Elixir Pin Operator</a></li>\n<li>Literal pattern: <code>1, \"str\", 1+2j, (1, 2)</code></li>\n<li>As pattern: <code>a, var</code></li>\n<li>Wildcard: <code>_</code></li>\n<li>Guard: <code>when(cond1, cond2, cond3)</code></li>\n<li>Nested patterns:\n<ul>\n<li>Tuple: <code>(pat1, pat2, pat3), (pat1, *pat2, pat3)</code></li>\n<li>List:  <code>[pat1, pat2, pat3], [pat1, *pat2, pat3]</code></li>\n<li>Recogniser: <code>Cons(pat1, pat2, pat3)</code>, note that,\nthe function <code>Cons.__match__(&lt;n arg&gt;, value_to_match)</code> is exact the protocol.</li>\n</ul>\n</li>\n</ul>\n<p>The pattern matching should be more efficient than those hand-written codes without\nugly optimizations.</p>\n<p>Besides, Moshmosh's pattern matching is orders of magnitude faster than\nany other alternatives.</p>\n<h2>Case Study : Template-Python</h2>\n<p>This is relatively a simple quasiquote implementation, inspired by MetaOCaml.\nIt does not support manual splices or nested quotations, but the function arguments\nare automatically spliced.</p>\n<pre><span class=\"c1\"># moshmosh?</span>\n<span class=\"c1\"># +template-python</span>\n\n<span class=\"nd\">@quote</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">moshmosh.ast_compat</span> <span class=\"kn\">import</span> <span class=\"n\">ast</span>\n<span class=\"kn\">from</span> <span class=\"nn\">astpretty</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n\n<span class=\"n\">stmts</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">))</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">fix_missing_locations</span><span class=\"p\">(</span><span class=\"n\">stmts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">fix_missing_locations</span><span class=\"p\">(</span><span class=\"n\">stmts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># =&gt;</span>\n<span class=\"n\">Expr</span><span class=\"p\">(</span>\n    <span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n    <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">BinOp</span><span class=\"p\">(</span>\n        <span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>\n        <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Name</span><span class=\"p\">(</span><span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">=</span><span class=\"n\">Load</span><span class=\"p\">()),</span>\n        <span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">Add</span><span class=\"p\">(),</span>\n        <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Num</span><span class=\"p\">(</span><span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Assign</span><span class=\"p\">(</span>\n    <span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"n\">targets</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Name</span><span class=\"p\">(</span><span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">=</span><span class=\"n\">Store</span><span class=\"p\">())],</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">BinOp</span><span class=\"p\">(</span>\n        <span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Name</span><span class=\"p\">(</span><span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">=</span><span class=\"n\">Load</span><span class=\"p\">()),</span>\n        <span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">Add</span><span class=\"p\">(),</span>\n        <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Num</span><span class=\"p\">(</span><span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">col_offset</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Case Study: Lazy Import</h2>\n<pre><span class=\"c1\"># moshmosh?</span>\n<span class=\"c1\"># +lazy-import</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"c1\"># -lazy-import</span>\n\n<span class=\"c1\"># in fact numpy is not imported here,</span>\n<span class=\"c1\"># and once you use it, it gets imported.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arr10</span><span class=\"p\">():</span>\n    <span class=\"c1\"># The first time call</span>\n    <span class=\"c1\"># arr10 will enforce the import of numpy.</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>After the lazy modules are actually imported, there's\nno overhead to access their members.</p>\n<p>However, please only import modules when using <code>lazy-import</code>.</p>\n<p>The use case is about the necessary cross-import when you want to\norganise your codebase in a more fine-grained way.</p>\n<h2>Acknowledgements</h2>\n<ul>\n<li><a href=\"https://github.com/asottile/future-fstrings\" rel=\"nofollow\">future-fstrings</a></li>\n<li>Pattern matching in Python\n<ul>\n<li><a href=\"http://www.grantjenks.com/docs/patternmatching/#alternative-packages\" rel=\"nofollow\">older implementations</a></li>\n<li>search \"pattern matching\" at <a href=\"https://mail.python.org/archives/list/python-ideas@python.org/\" rel=\"nofollow\">Python-ideas</a>.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6331862, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "7baa558bd54f27bfd1705a2ab0be1600", "sha256": "6d58d1442664e3e5e69996424723a4e3f372988da14c066453bcddd344bbf8cd"}, "downloads": -1, "filename": "moshmosh_base-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7baa558bd54f27bfd1705a2ab0be1600", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27393, "upload_time": "2019-10-13T16:41:04", "upload_time_iso_8601": "2019-10-13T16:41:04.122779Z", "url": "https://files.pythonhosted.org/packages/61/44/dbc2e0a2e26e8d01f023ea3221a870ad9188f0932b5fb08a2c7302130500/moshmosh_base-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2a6707fc848dc4ea9b056f609ad9ff08", "sha256": "27e14ec3c8006da8f05ca8ed10af4c2cb4ed88503b47522e11b9f3bfdbfa2982"}, "downloads": -1, "filename": "moshmosh-base-0.3.tar.gz", "has_sig": false, "md5_digest": "2a6707fc848dc4ea9b056f609ad9ff08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24424, "upload_time": "2019-10-14T16:49:11", "upload_time_iso_8601": "2019-10-14T16:49:11.947673Z", "url": "https://files.pythonhosted.org/packages/a6/d3/6ac448e913df99a649ce294c5919a3c9093d9c32922bbe7f3e4a23634399/moshmosh-base-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "a0270e9d414dbd58a2352cbd07147e98", "sha256": "f5792432468a916d3839bf4de9026506df8e8ddfde6f7ef3a714f3e49616c64c"}, "downloads": -1, "filename": "moshmosh-base-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a0270e9d414dbd58a2352cbd07147e98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24422, "upload_time": "2019-10-14T16:49:49", "upload_time_iso_8601": "2019-10-14T16:49:49.042707Z", "url": "https://files.pythonhosted.org/packages/48/93/88d168128894f460de93076315191508cafea406e470b6e71e2f4f7e9fb9/moshmosh-base-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "aa4e060e0a0256dc88f3e0db2f23d03e", "sha256": "3d46293df0a9d1ffe83da0aa211d9e14881e24904b278dd4f7f324bd8bf82193"}, "downloads": -1, "filename": "moshmosh-base-0.3.2.tar.gz", "has_sig": false, "md5_digest": "aa4e060e0a0256dc88f3e0db2f23d03e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24489, "upload_time": "2019-10-14T18:04:20", "upload_time_iso_8601": "2019-10-14T18:04:20.482784Z", "url": "https://files.pythonhosted.org/packages/4c/de/8d6220f4b43a68e522439687f64283b4e9d33a0490536f853a6e4f80a09c/moshmosh-base-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6b8323b84f5d22737706b9edcf006bcd", "sha256": "a480a8392d67737867a867fb1d310e497a2d374bb56fb6e993c7a358d7965ac2"}, "downloads": -1, "filename": "moshmosh-base-0.3.3.tar.gz", "has_sig": false, "md5_digest": "6b8323b84f5d22737706b9edcf006bcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26123, "upload_time": "2019-10-15T10:41:32", "upload_time_iso_8601": "2019-10-15T10:41:32.770781Z", "url": "https://files.pythonhosted.org/packages/72/de/993ee938c860648dc8747cccc842b3107a821b353fab6a9a081711a1051a/moshmosh-base-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "f37633cf579fcba43da186aa9d7932f5", "sha256": "1da2796e8444f83b27f5b73f9dbe21276bba7f86267f2fd753b566bb4cb26346"}, "downloads": -1, "filename": "moshmosh-base-0.3.4.zip", "has_sig": false, "md5_digest": "f37633cf579fcba43da186aa9d7932f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 41445, "upload_time": "2019-12-19T12:36:51", "upload_time_iso_8601": "2019-12-19T12:36:51.434620Z", "url": "https://files.pythonhosted.org/packages/fc/27/9cbae686caeb0a9dad592db452d752f24b010176a6d1583d2c472aa4d6c4/moshmosh-base-0.3.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f37633cf579fcba43da186aa9d7932f5", "sha256": "1da2796e8444f83b27f5b73f9dbe21276bba7f86267f2fd753b566bb4cb26346"}, "downloads": -1, "filename": "moshmosh-base-0.3.4.zip", "has_sig": false, "md5_digest": "f37633cf579fcba43da186aa9d7932f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 41445, "upload_time": "2019-12-19T12:36:51", "upload_time_iso_8601": "2019-12-19T12:36:51.434620Z", "url": "https://files.pythonhosted.org/packages/fc/27/9cbae686caeb0a9dad592db452d752f24b010176a6d1583d2c472aa4d6c4/moshmosh-base-0.3.4.zip", "yanked": false}], "timestamp": "Fri May  8 00:51:41 2020"}