{"info": {"author": "volker.jaenisch@inqbus.de", "author_email": "volker.jaenisch@inqbus.de", "bugtrack_url": null, "classifiers": ["Environment :: Plugins", "Intended Audience :: System Administrators", "License :: Other/Proprietary License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "======================================================================\ninqbus.ocf.agents : Pacemaker OCF resource agents for daemon processes\n======================================================================\n\n:Version: 0.1\n:Download: http://pypi.python.org/pypi/inqbus.ocf.agents\n:Keywords: python, OCF, resource agents, pacemaker, openvpn, daemon process\n\n.. contents::\n    :local:\n\nOverview\n========\n\nOCF compatible resource agent classes programmed in python.\nUsually OCF-Agents are written as unix shell-script. \nWe are running lots of high avaible python processes which are controlled by \npacemaker. Using shell for controlling Python processes feels awkward, \nso we builded a python integration framework for OCF compatible agents.\n\nWhat do you get\n---------------\n\nThis package gives you some generic OCF agent classes for PID controlled daemons:\n\n* pidagent\n* openvpn\n\nbased on the `inqbus.ocf.generic <http://pypi.python.org/pypi/inqbus.ocf.generic>`_ framework.\n\nThe inqbus.ocf.generic framework keeps away from you the gory details\nyou have to go into writing an OCF compatible resource agent.\nPowerfull base classes bring to you:\n\n* A good test coverage of the agent code (How to test a shell script?)\n* Support of the complete set of OCF exitcodes and their respective business logik\n* OCF Paramter classes for integer, string, etc. values\n* Predefined generic OCF handlers (meta-data, validate)\n* The generation of the XML meta data is done for you automagically\n* Easy addition of handlers for e.g. start/stop/status\n* Inheritance of resource agents: encapsulate agent business logic and share it among similiar reasource agents\n\nInqbus.ocf.agents in addition brings the following functionality\n\n* the business logic for controlling the PID file\n* checking for the running state of the PID\n* starting and stopping the daemon (with checking for zombies and staggered kill signals to bring a process really down if it has to die)\n* checking for the PID status\n\nin the base class PIDBaseAgent.\n\nWhat is missing\n---------------\n\nWe did not implement any business logic for the actions:\n\n    * notify\n    * demote\n    * promote\n    * master/slave\n    * reload\n    \nbut inqbus.ocf.generic framework can represent any OCF action that \nis specified yet or in the future - just implement a handler \nfor the desired action::\n\n    class MyAgent(Agent):\n\n        def config(self):\n            \"\"\"\n            Register my actions \n            \"\"\"\n            self.handlers['notify'] = Handler(MyAgent.do_notify, 10)\n            self.handlers['future'] = Handler(MyAgent.do_future, 10)\n\n\nImplementation\n==============\n\nThe PIDAgent and Openvpn classes are derived from PIDBaseAgent with minimal\nprogramming efford::\n\n    from pidbaseagent import PIDBaseAgent\n    from inqbus.ocf.generic.parameter import OCFString\n\n    class PIDAgent(PIDBaseAgent):\n\n        def add_params(self):\n            self.add_parameter(OCFString(\"executable\",\n                                longdesc=\"Path to the executable\",\n                                shortdesc=\"executable\",\n                                required= True) )\n            self.add_parameter(OCFString( \"pid_file\",\n                                longdesc=\"Path to the pid file\",\n                                shortdesc=\"executable\",\n                                required= True) )\n\n        def get_pid_file(self):\n\t    \"\"\"tell the base class to find the PID file in the parameter 'pid_file'\"\"\"\n            return self.params.pid_file.value\n\n        def get_executable(self):\n\t    \"\"\"tell the base class how to find the executable path in the parameter 'executable'\"\"\"\n            return self.params.executable.value\n\n    def main():\n        \"\"\"Entry point for the reasource agent shellscript\"\"\"\n        import sys\n        PIDAgent().run(sys.argv)\n\n    if __name__ == \"__main__\" : main()\n        \"\"\"Entry point for the command line\"\"\"\n\n\n\nTo use the inqbus.ocf.agents agent classes you need to set only one symlink per\nagent class into your Pacemaker (or other OCF HA) system.\n\nBuilding arbitrary resource agent classes e.g. for IP addresses is\neasy utilizing the inqbus.ocf.generic <http://pypi.python.org/inqbus.ocf.generic>_ framework.\n\nDocumentation\n=============\n\n.. note ::\n    The dokumentation is not uploaded to packages.python.org yet.\n    Please stay tuned. \n\nThis file and the source files for openvpn and the PIDAgent classes serve as a\nsimple introduction to inqbus.ocf.agents. For more in depth\ndocumentation on writing your own reasource agents with the\ninqbus.ocf framework, have a look at\n\n* `inqbus.ocf.agents documentation http://packages.python.org/inqbus.ocf.agents <http://packages.python.org/inqbus.ocf.agents>`_\n* `inqbus.ocf.generic ocf agent developer documentation http://packages.python.org/inqbus.ocf.generic <http://packages.python.org/inqbus.ocf.generic>`_\n\nRequirements\n============\n\nPython >=2.7 or Python 3.x\n\n\nInstallation\n============\n\nWe recomment a buildout based installation into a virtual environment\nbut you may install inqbus.ocf.agents via pip or easy_install as\nwell.\n\nInstallation via buildout\n-------------------------\n\n.. note::\n    This installation guide asumes /opt/ocf as installation directory.\n    Please adjust the installation directory to your needs.\n\nBuild a virtual environment::\n\n    :/opt$ virtualenv --no-site-packages ocf\n    :/opt$ cd ocf\n    :/opt/ocf$ source bin/activate\n    (ocf):/opt/ocf$\n\nInstall the make environment buildout and initialize it::\n\n    (ocf):/opt/ocf$ easy_install zc.buildout\n    (ocf):/opt/ocf$ ./bin/buildout init\n\nCreate a buildout.cfg::\n\n    [buildout]                                                                                                                                                       \n    parts = app                                                                                                                                                      \n            pidagent                                                                                                                                                 \n            openvpn                                                                                                                                                  \n                                                                                                                                                                 \n    # Buildout directories to use.                                                                                                                                   \n    eggs-directory          = eggs                                                                                                                                   \n                                                                                                                                                                 \n    ###############################################################################                                                                                  \n    # Download links for packages                                                                                                                                    \n    # -----------------------------------------------------------------------------\n    # Add additional egg download sources here.                                                                                                                      \n    # Note that pypi.propertyshelf.com and mypypi.inqbus.de require authentication.                                                                                  \n    find-links = http://mypypi.inqbus.de/privateEggs                                                                                                                 \n                                                                                                                                                                     \n    ###############################################################################\n    # Extensions                                                                                  \n    # -----------------------------------------------------------------------------\n    # Load several extensions.\n    extensions = lovely.buildouthttp                                                                                                                                                                \n                                                                                                                                                                 \n    [app]                                                                                                                                                            \n    recipe = z3c.recipe.scripts                                                                                                                                      \n    eggs = inqbus.ocf.agents                                                                                                                                         \n    interpreter = python_ocf                                                                                                                                         \n                                                                                                                                                                 \n    [openvpn]                                                                                                                                                        \n    recipe = collective.recipe.template                                                                                                                              \n    output = ${buildout:directory}/bin/openvpn.sh                                                                                                                    \n    inline =                                                                                                                                                         \n        #!/bin/bash                                                                                                                                                  \n        ${buildout:directory}/../bin/python ${buildout:directory}/bin/openvpn $*                                                                                     \n    mode = 755                                                                                                                                                       \n                                                                                                                                                                 \n    [pidagent]                                                                                                                                                       \n    recipe = collective.recipe.template                                                                                                                              \n    output = ${buildout:directory}/bin/pidagent.sh                                                                                                                   \n    inline =                                                                                                                                                         \n        #!/bin/bash                                                                                                                                                  \n        ${buildout:directory}/../bin/python ${buildout:directory}/bin/pidagent $*                                                                                    \n    mode = 755                                                                     \n\nrun buildout to install the package::\n\n    (ocf):/opt/ocf$ ./bin/buildout\n\n.. note::\n    There will be to executable files installed for each agent. E.g. \n    for the openvpn agent::\n    \n        openvpn\n            A python console script, referencing the python interpreter with an\n            appropriate python path.\n           \n        openvpn.sh\n            A bash console wrapper around the openvpn python console script.\n            This is a tribute to pacemaker which calls the agent via the bash interpreter.\n            These kind of wrapper scripts you have to use as agents for pacemaker. \n\n\nConfiguration\n=============\n\nFirst check the installation::\n\n    (ocf):/opt/ocf$ ./bin/openvpn.sh\n    Usage: openvpn.py <start|validate-all|stop|monitor|meta-data>\n\n\n.. note::\n    You have to identify the OCF agent location of your OS to proceed.\n    On Debian the OCF agents live under::\n\n       /usr/lib/ocf/resource.d/\n\n    Also you are free to set a provider directory for the agents. Here we asume as provider name ::\n\n\tinqbus\n\nIntegrating the openvpn agent class into Pacemaker::\n\n    :/opt/ocf$ cd /usr/lib/ocf/resource.d/\n    :/usr/lib/ocf/resource.d/$ mkdir inqbus\n    :/usr/lib/ocf/resource.d/$ cd inqbus\n    :/usr/lib/ocf/resource.d/inqbus$ ln -s /opt/ocf/bin/openvpn.sh .\n\n.. note::\n    You may repeat this last line with other resource agent classes (also available yet: pidagent)::\n\n        :/usr/lib/ocf/resource.d/inqbus$ ln -s /opt/ocf/bin/pidagent.sh .\n\nNow the configuration is complete an you can use the OCF python\nresource agents as the others that came with heartbeat or pacemaker.\n\nRunning the tests\n=================\n\nThe test are formulated using the nose testing framework. \n\n.. note::\n    Please be carefull running the tests! The tests will use the TEMP-Directory \n    and create some files in there. More agressivly the tests will bring up \n    unix-processes since the agents are intended to do exactly that thing. \n    PIDagent will use the harmless dummy_daemon implementation of a NOOP unix daemon \n    that comes with this package. The OpenVPN-Agent will try to start a \n    true openvpn-instance at localhost:1194.  \n\nTo run the tests you need the source code. There are two ways to\nobtain it.\n\n#. Clone the Mercurial repository from BitBucket_::\n\n    $ hg clone https://bitbucket.org/inqbus/inqbus.ocf.agents\n\n..  _BitBucket: https://bitbucket.org/inqbus/inqbus.ocf.agents\n\n#. Download the package from PyPI_ and unpack it::\n\n    $ wget http://pypi.python.org/packages/source/i/inqbus.ocf.agents/inqbus.ocf.agents-0.1.tar.gz\n    $ tar xzvf inqbus.ocf.agents-0.1.tar.gz\n\n..  _PyPI: http://pypi.python.org/pypi/inqbus.ocf.agents\n\nTesting with buildout\n---------------------\n\nThe easiest way to test is with buildout::\n   \n    $ ./bin/buildout\n    ...\n    $ ./bin/nose --with-coverage\n    ...\n    inqbus.ocf.agents.openvpn            91%   \n    inqbus.ocf.agents.pidagent           83% \n    inqbus.ocf.agents.pidbaseagent       74%\n    inqbus.ocf.generic.agent             88% \n    inqbus.ocf.generic.container         100%   \n    inqbus.ocf.generic.exits             84%\n    inqbus.ocf.generic.handlers          96%\n    inqbus.ocf.generic.parameter         83%\n  \nThe test coverage is high. We includet the ocf-tester testcases in our test suite.\nMaximum testcoverage is only possible if running the tests as root since most \nof the tests are integration tests, which steer real unix daemons. In case \nof the openvpn agent a real openvpn instance is brought up.\n\nDispite the high level of testing there is still a portion of 10 to 26% of \nuntested code. This code mainly attributes to the many plausability exits \nthat are not easily tested. How should we test for a broken filesystem or \na process that has become a zombie? If you think you have the answer to that \nquestions, you are warmest welcome in the development team.\n  \nTesting with ocf-tester\n-----------------------\n\nIndependently of the python tests pacemaker comes with the ocf-tester script. \nYou may use the dummy_daemon that comes with inqbus.ocf.agents to test the pidagent::\n \n    :/opt/ocf/buildout$ ocf-tester -n test \\ \n    -o pid_file=/tmp/dummy_daemon.pid \\\n    -o executable=./bin/dummy_daemon \\\n    `pwd`/bin/pidagent.sh\n\nBugs and Issues\n===============\n\nThis software is work in progress. Please help us to improve it:\nhttps://bitbucket.org/inqbus/inqbus.ocf.agents\n\nPlease contact volker.jaenisch@inqbus.de if you have any question. \n\n\nLicense                                                                                                                                                          \n=======                                                                                                                                                          \n                                                                                                                                                                 \nThis software is licensed under the New BSD License. See the LICENSE.txt file in                                                                                     \nthe top distribution directory for the full license text.                 \nChangelog\n=========\n\n0.1 (unreleased)\n-------------------\n\n- Initial release\n\n0.11 (bugfix-release)\n---------------------\n\n- added \"cd to config dir\" paramter for openvpn agent.\n- introduced ovpn_pid_dir paramter for openvpn agent.\n- fixed some flaws in README.txt\n- fixed that temporary files are deletetd from /tmp after tests", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/inqbus.ocf.agents", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://inqbus.de", "keywords": "pacemaker OCF resource agent HA PID", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "inqbus.ocf.agents", "package_url": "https://pypi.org/project/inqbus.ocf.agents/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/inqbus.ocf.agents/", "project_urls": {"Download": "http://pypi.python.org/pypi/inqbus.ocf.agents", "Homepage": "http://inqbus.de"}, "release_url": "https://pypi.org/project/inqbus.ocf.agents/0.11/", "requires_dist": null, "requires_python": null, "summary": "OCF resource agents based on inqbus.ocf.generic", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.1</td></tr>\n<tr><th>Download:</th><td><a href=\"http://pypi.python.org/pypi/inqbus.ocf.agents\" rel=\"nofollow\">http://pypi.python.org/pypi/inqbus.ocf.agents</a></td>\n</tr>\n<tr><th>Keywords:</th><td>python, OCF, resource agents, pacemaker, openvpn, daemon process</td>\n</tr>\n</tbody>\n</table>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a><ul>\n<li><a href=\"#what-do-you-get\" id=\"id2\" rel=\"nofollow\">What do you get</a></li>\n<li><a href=\"#what-is-missing\" id=\"id3\" rel=\"nofollow\">What is missing</a></li>\n</ul>\n</li>\n<li><a href=\"#implementation\" id=\"id4\" rel=\"nofollow\">Implementation</a></li>\n<li><a href=\"#documentation\" id=\"id5\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#requirements\" id=\"id6\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" id=\"id7\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#installation-via-buildout\" id=\"id8\" rel=\"nofollow\">Installation via buildout</a></li>\n</ul>\n</li>\n<li><a href=\"#configuration\" id=\"id9\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#running-the-tests\" id=\"id10\" rel=\"nofollow\">Running the tests</a><ul>\n<li><a href=\"#testing-with-buildout\" id=\"id11\" rel=\"nofollow\">Testing with buildout</a></li>\n<li><a href=\"#testing-with-ocf-tester\" id=\"id12\" rel=\"nofollow\">Testing with ocf-tester</a></li>\n</ul>\n</li>\n<li><a href=\"#bugs-and-issues\" id=\"id13\" rel=\"nofollow\">Bugs and Issues</a></li>\n<li><a href=\"#license\" id=\"id14\" rel=\"nofollow\">License</a><ul>\n<li><a href=\"#unreleased\" id=\"id15\" rel=\"nofollow\">0.1 (unreleased)</a></li>\n<li><a href=\"#bugfix-release\" id=\"id16\" rel=\"nofollow\">0.11 (bugfix-release)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>OCF compatible resource agent classes programmed in python.\nUsually OCF-Agents are written as unix shell-script.\nWe are running lots of high avaible python processes which are controlled by\npacemaker. Using shell for controlling Python processes feels awkward,\nso we builded a python integration framework for OCF compatible agents.</p>\n<div id=\"what-do-you-get\">\n<h3><a href=\"#id2\" rel=\"nofollow\">What do you get</a></h3>\n<p>This package gives you some generic OCF agent classes for PID controlled daemons:</p>\n<ul>\n<li>pidagent</li>\n<li>openvpn</li>\n</ul>\n<p>based on the <a href=\"http://pypi.python.org/pypi/inqbus.ocf.generic\" rel=\"nofollow\">inqbus.ocf.generic</a> framework.</p>\n<p>The inqbus.ocf.generic framework keeps away from you the gory details\nyou have to go into writing an OCF compatible resource agent.\nPowerfull base classes bring to you:</p>\n<ul>\n<li>A good test coverage of the agent code (How to test a shell script?)</li>\n<li>Support of the complete set of OCF exitcodes and their respective business logik</li>\n<li>OCF Paramter classes for integer, string, etc. values</li>\n<li>Predefined generic OCF handlers (meta-data, validate)</li>\n<li>The generation of the XML meta data is done for you automagically</li>\n<li>Easy addition of handlers for e.g. start/stop/status</li>\n<li>Inheritance of resource agents: encapsulate agent business logic and share it among similiar reasource agents</li>\n</ul>\n<p>Inqbus.ocf.agents in addition brings the following functionality</p>\n<ul>\n<li>the business logic for controlling the PID file</li>\n<li>checking for the running state of the PID</li>\n<li>starting and stopping the daemon (with checking for zombies and staggered kill signals to bring a process really down if it has to die)</li>\n<li>checking for the PID status</li>\n</ul>\n<p>in the base class PIDBaseAgent.</p>\n</div>\n<div id=\"what-is-missing\">\n<h3><a href=\"#id3\" rel=\"nofollow\">What is missing</a></h3>\n<p>We did not implement any business logic for the actions:</p>\n<blockquote>\n<ul>\n<li>notify</li>\n<li>demote</li>\n<li>promote</li>\n<li>master/slave</li>\n<li>reload</li>\n</ul>\n</blockquote>\n<p>but inqbus.ocf.generic framework can represent any OCF action that\nis specified yet or in the future - just implement a handler\nfor the desired action:</p>\n<pre>class MyAgent(Agent):\n\n    def config(self):\n        \"\"\"\n        Register my actions\n        \"\"\"\n        self.handlers['notify'] = Handler(MyAgent.do_notify, 10)\n        self.handlers['future'] = Handler(MyAgent.do_future, 10)\n</pre>\n</div>\n</div>\n<div id=\"implementation\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Implementation</a></h2>\n<p>The PIDAgent and Openvpn classes are derived from PIDBaseAgent with minimal\nprogramming efford:</p>\n<pre>from pidbaseagent import PIDBaseAgent\nfrom inqbus.ocf.generic.parameter import OCFString\n\nclass PIDAgent(PIDBaseAgent):\n\n    def add_params(self):\n        self.add_parameter(OCFString(\"executable\",\n                            longdesc=\"Path to the executable\",\n                            shortdesc=\"executable\",\n                            required= True) )\n        self.add_parameter(OCFString( \"pid_file\",\n                            longdesc=\"Path to the pid file\",\n                            shortdesc=\"executable\",\n                            required= True) )\n\n    def get_pid_file(self):\n        \"\"\"tell the base class to find the PID file in the parameter 'pid_file'\"\"\"\n        return self.params.pid_file.value\n\n    def get_executable(self):\n        \"\"\"tell the base class how to find the executable path in the parameter 'executable'\"\"\"\n        return self.params.executable.value\n\ndef main():\n    \"\"\"Entry point for the reasource agent shellscript\"\"\"\n    import sys\n    PIDAgent().run(sys.argv)\n\nif __name__ == \"__main__\" : main()\n    \"\"\"Entry point for the command line\"\"\"\n</pre>\n<p>To use the inqbus.ocf.agents agent classes you need to set only one symlink per\nagent class into your Pacemaker (or other OCF HA) system.</p>\n<p>Building arbitrary resource agent classes e.g. for IP addresses is\neasy utilizing the inqbus.ocf.generic &lt;<a href=\"http://pypi.python.org/inqbus.ocf.generic\" rel=\"nofollow\">http://pypi.python.org/inqbus.ocf.generic</a>&gt;_ framework.</p>\n</div>\n<div id=\"documentation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Documentation</a></h2>\n<div>\n<p>Note</p>\n<p>The dokumentation is not uploaded to packages.python.org yet.\nPlease stay tuned.</p>\n</div>\n<p>This file and the source files for openvpn and the PIDAgent classes serve as a\nsimple introduction to inqbus.ocf.agents. For more in depth\ndocumentation on writing your own reasource agents with the\ninqbus.ocf framework, have a look at</p>\n<ul>\n<li><a href=\"http://packages.python.org/inqbus.ocf.agents\" rel=\"nofollow\">inqbus.ocf.agents documentation http://packages.python.org/inqbus.ocf.agents</a></li>\n<li><a href=\"http://packages.python.org/inqbus.ocf.generic\" rel=\"nofollow\">inqbus.ocf.generic ocf agent developer documentation http://packages.python.org/inqbus.ocf.generic</a></li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Requirements</a></h2>\n<p>Python &gt;=2.7 or Python 3.x</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Installation</a></h2>\n<p>We recomment a buildout based installation into a virtual environment\nbut you may install inqbus.ocf.agents via pip or easy_install as\nwell.</p>\n<div id=\"installation-via-buildout\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Installation via buildout</a></h3>\n<div>\n<p>Note</p>\n<p>This installation guide asumes /opt/ocf as installation directory.\nPlease adjust the installation directory to your needs.</p>\n</div>\n<p>Build a virtual environment:</p>\n<pre>:/opt$ virtualenv --no-site-packages ocf\n:/opt$ cd ocf\n:/opt/ocf$ source bin/activate\n(ocf):/opt/ocf$\n</pre>\n<p>Install the make environment buildout and initialize it:</p>\n<pre>(ocf):/opt/ocf$ easy_install zc.buildout\n(ocf):/opt/ocf$ ./bin/buildout init\n</pre>\n<p>Create a buildout.cfg:</p>\n<pre>[buildout]\nparts = app\n        pidagent\n        openvpn\n\n# Buildout directories to use.\neggs-directory          = eggs\n\n###############################################################################\n# Download links for packages\n# -----------------------------------------------------------------------------\n# Add additional egg download sources here.\n# Note that pypi.propertyshelf.com and mypypi.inqbus.de require authentication.\nfind-links = http://mypypi.inqbus.de/privateEggs\n\n###############################################################################\n# Extensions\n# -----------------------------------------------------------------------------\n# Load several extensions.\nextensions = lovely.buildouthttp\n\n[app]\nrecipe = z3c.recipe.scripts\neggs = inqbus.ocf.agents\ninterpreter = python_ocf\n\n[openvpn]\nrecipe = collective.recipe.template\noutput = ${buildout:directory}/bin/openvpn.sh\ninline =\n    #!/bin/bash\n    ${buildout:directory}/../bin/python ${buildout:directory}/bin/openvpn $*\nmode = 755\n\n[pidagent]\nrecipe = collective.recipe.template\noutput = ${buildout:directory}/bin/pidagent.sh\ninline =\n    #!/bin/bash\n    ${buildout:directory}/../bin/python ${buildout:directory}/bin/pidagent $*\nmode = 755\n</pre>\n<p>run buildout to install the package:</p>\n<pre>(ocf):/opt/ocf$ ./bin/buildout\n</pre>\n<div>\n<p>Note</p>\n<p>There will be to executable files installed for each agent. E.g.\nfor the openvpn agent:</p>\n<pre>openvpn\n    A python console script, referencing the python interpreter with an\n    appropriate python path.\n\nopenvpn.sh\n    A bash console wrapper around the openvpn python console script.\n    This is a tribute to pacemaker which calls the agent via the bash interpreter.\n    These kind of wrapper scripts you have to use as agents for pacemaker.\n</pre>\n</div>\n</div>\n</div>\n<div id=\"configuration\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Configuration</a></h2>\n<p>First check the installation:</p>\n<pre>(ocf):/opt/ocf$ ./bin/openvpn.sh\nUsage: openvpn.py &lt;start|validate-all|stop|monitor|meta-data&gt;\n</pre>\n<div>\n<p>Note</p>\n<p>You have to identify the OCF agent location of your OS to proceed.\nOn Debian the OCF agents live under:</p>\n<pre>/usr/lib/ocf/resource.d/\n</pre>\n<p>Also you are free to set a provider directory for the agents. Here we asume as provider name</p>\n<pre>inqbus\n</pre>\n</div>\n<p>Integrating the openvpn agent class into Pacemaker:</p>\n<pre>:/opt/ocf$ cd /usr/lib/ocf/resource.d/\n:/usr/lib/ocf/resource.d/$ mkdir inqbus\n:/usr/lib/ocf/resource.d/$ cd inqbus\n:/usr/lib/ocf/resource.d/inqbus$ ln -s /opt/ocf/bin/openvpn.sh .\n</pre>\n<div>\n<p>Note</p>\n<p>You may repeat this last line with other resource agent classes (also available yet: pidagent):</p>\n<pre>:/usr/lib/ocf/resource.d/inqbus$ ln -s /opt/ocf/bin/pidagent.sh .\n</pre>\n</div>\n<p>Now the configuration is complete an you can use the OCF python\nresource agents as the others that came with heartbeat or pacemaker.</p>\n</div>\n<div id=\"running-the-tests\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Running the tests</a></h2>\n<p>The test are formulated using the nose testing framework.</p>\n<div>\n<p>Note</p>\n<p>Please be carefull running the tests! The tests will use the TEMP-Directory\nand create some files in there. More agressivly the tests will bring up\nunix-processes since the agents are intended to do exactly that thing.\nPIDagent will use the harmless dummy_daemon implementation of a NOOP unix daemon\nthat comes with this package. The OpenVPN-Agent will try to start a\ntrue openvpn-instance at localhost:1194.</p>\n</div>\n<p>To run the tests you need the source code. There are two ways to\nobtain it.</p>\n<ol>\n<li><p>Clone the Mercurial repository from <a href=\"https://bitbucket.org/inqbus/inqbus.ocf.agents\" rel=\"nofollow\">BitBucket</a>:</p>\n<pre>$ hg clone https://bitbucket.org/inqbus/inqbus.ocf.agents\n</pre>\n</li>\n</ol>\n<ol>\n<li><p>Download the package from <a href=\"http://pypi.python.org/pypi/inqbus.ocf.agents\" rel=\"nofollow\">PyPI</a> and unpack it:</p>\n<pre>$ wget http://pypi.python.org/packages/source/i/inqbus.ocf.agents/inqbus.ocf.agents-0.1.tar.gz\n$ tar xzvf inqbus.ocf.agents-0.1.tar.gz\n</pre>\n</li>\n</ol>\n<div id=\"testing-with-buildout\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Testing with buildout</a></h3>\n<p>The easiest way to test is with buildout:</p>\n<pre>$ ./bin/buildout\n...\n$ ./bin/nose --with-coverage\n...\ninqbus.ocf.agents.openvpn            91%\ninqbus.ocf.agents.pidagent           83%\ninqbus.ocf.agents.pidbaseagent       74%\ninqbus.ocf.generic.agent             88%\ninqbus.ocf.generic.container         100%\ninqbus.ocf.generic.exits             84%\ninqbus.ocf.generic.handlers          96%\ninqbus.ocf.generic.parameter         83%\n</pre>\n<p>The test coverage is high. We includet the ocf-tester testcases in our test suite.\nMaximum testcoverage is only possible if running the tests as root since most\nof the tests are integration tests, which steer real unix daemons. In case\nof the openvpn agent a real openvpn instance is brought up.</p>\n<p>Dispite the high level of testing there is still a portion of 10 to 26% of\nuntested code. This code mainly attributes to the many plausability exits\nthat are not easily tested. How should we test for a broken filesystem or\na process that has become a zombie? If you think you have the answer to that\nquestions, you are warmest welcome in the development team.</p>\n</div>\n<div id=\"testing-with-ocf-tester\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Testing with ocf-tester</a></h3>\n<p>Independently of the python tests pacemaker comes with the ocf-tester script.\nYou may use the dummy_daemon that comes with inqbus.ocf.agents to test the pidagent:</p>\n<pre>:/opt/ocf/buildout$ ocf-tester -n test \\\n-o pid_file=/tmp/dummy_daemon.pid \\\n-o executable=./bin/dummy_daemon \\\n`pwd`/bin/pidagent.sh\n</pre>\n</div>\n</div>\n<div id=\"bugs-and-issues\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Bugs and Issues</a></h2>\n<p>This software is work in progress. Please help us to improve it:\n<a href=\"https://bitbucket.org/inqbus/inqbus.ocf.agents\" rel=\"nofollow\">https://bitbucket.org/inqbus/inqbus.ocf.agents</a></p>\n<p>Please contact <a href=\"mailto:volker.jaenisch%40inqbus.de\">volker<span>.</span>jaenisch<span>@</span>inqbus<span>.</span>de</a> if you have any question.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id14\" rel=\"nofollow\">License</a></h2>\n<p>This software is licensed under the New BSD License. See the LICENSE.txt file in\nthe top distribution directory for the full license text.\nChangelog\n=========</p>\n<div id=\"unreleased\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.1 (unreleased)</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n<div id=\"bugfix-release\">\n<h3><a href=\"#id16\" rel=\"nofollow\">0.11 (bugfix-release)</a></h3>\n<ul>\n<li>added \u201ccd to config dir\u201d paramter for openvpn agent.</li>\n<li>introduced ovpn_pid_dir paramter for openvpn agent.</li>\n<li>fixed some flaws in README.txt</li>\n<li>fixed that temporary files are deletetd from /tmp after tests</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 793364, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c7d54f1f49904bead965f58184037382", "sha256": "495348721657fd1aa50ecf34fc40adef48545ebbc4e158f848a3569d4636b236"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.1-py2.6.egg", "has_sig": false, "md5_digest": "c7d54f1f49904bead965f58184037382", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 38354, "upload_time": "2011-11-29T22:44:24", "upload_time_iso_8601": "2011-11-29T22:44:24.917232Z", "url": "https://files.pythonhosted.org/packages/0a/c7/cc8fd3e76268f8274837f4f9924ccec7d8bf597dc1825fb135dae5442838/inqbus.ocf.agents-0.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3a1e0a0faf1f7e47828709ab3ba7363", "sha256": "fc00b4e80ff84b526e234716281d6d09d3de4dbed5634816351221838517fe20"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.1.tar.gz", "has_sig": false, "md5_digest": "c3a1e0a0faf1f7e47828709ab3ba7363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13119, "upload_time": "2011-11-29T22:44:23", "upload_time_iso_8601": "2011-11-29T22:44:23.825955Z", "url": "https://files.pythonhosted.org/packages/a6/f0/826c2ee6b33dfdaf34d39765d0064d718ea8303f3e641765d9435cbcbf25/inqbus.ocf.agents-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "4701d9d56ce9aee8ae96e6c9211e38c7", "sha256": "bc452ced6d7673e19189accaf46b2ab366d6fce16e18d24665589ebafebc72c3"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.11-py2.6.egg", "has_sig": false, "md5_digest": "4701d9d56ce9aee8ae96e6c9211e38c7", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 40406, "upload_time": "2011-12-04T20:57:35", "upload_time_iso_8601": "2011-12-04T20:57:35.750856Z", "url": "https://files.pythonhosted.org/packages/26/ec/b370ccfe5f67a1418bef23eee43e4c2b4438d94fa0167b4b060e056c5944/inqbus.ocf.agents-0.11-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0786df1d7e7402d8606be482de949c8", "sha256": "7968d893e0d9c3ad14482d1a232cdfa2c9c5fc6ab697201e3a5e7b900202cda8"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.11.tar.gz", "has_sig": false, "md5_digest": "f0786df1d7e7402d8606be482de949c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15365, "upload_time": "2011-12-04T20:57:34", "upload_time_iso_8601": "2011-12-04T20:57:34.616590Z", "url": "https://files.pythonhosted.org/packages/85/a2/07b0a55bff32a5a077ab19ae9cd5d96dca83a55156a444a5c35f77124312/inqbus.ocf.agents-0.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4701d9d56ce9aee8ae96e6c9211e38c7", "sha256": "bc452ced6d7673e19189accaf46b2ab366d6fce16e18d24665589ebafebc72c3"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.11-py2.6.egg", "has_sig": false, "md5_digest": "4701d9d56ce9aee8ae96e6c9211e38c7", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 40406, "upload_time": "2011-12-04T20:57:35", "upload_time_iso_8601": "2011-12-04T20:57:35.750856Z", "url": "https://files.pythonhosted.org/packages/26/ec/b370ccfe5f67a1418bef23eee43e4c2b4438d94fa0167b4b060e056c5944/inqbus.ocf.agents-0.11-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0786df1d7e7402d8606be482de949c8", "sha256": "7968d893e0d9c3ad14482d1a232cdfa2c9c5fc6ab697201e3a5e7b900202cda8"}, "downloads": -1, "filename": "inqbus.ocf.agents-0.11.tar.gz", "has_sig": false, "md5_digest": "f0786df1d7e7402d8606be482de949c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15365, "upload_time": "2011-12-04T20:57:34", "upload_time_iso_8601": "2011-12-04T20:57:34.616590Z", "url": "https://files.pythonhosted.org/packages/85/a2/07b0a55bff32a5a077ab19ae9cd5d96dca83a55156a444a5c35f77124312/inqbus.ocf.agents-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:51 2020"}