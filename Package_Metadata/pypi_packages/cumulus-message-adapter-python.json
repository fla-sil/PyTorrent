{"info": {"author": "Cumulus Authors", "author_email": "info@developmentseed.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# cumulus-message-adapter-python\n\n[![CircleCI]](https://circleci.com/gh/nasa/cumulus-message-adapter-python)\n[![PyPI version]](https://badge.fury.io/py/cumulus-message-adapter-python)\n\n## What is Cumulus?\n\nCumulus is a cloud-based data ingest, archive, distribution and management\nprototype for NASA's future Earth science data streams.\n\nRead the [Cumulus Documentation]\n\n## What is the Cumulus Message Adapter?\n\nThe Cumulus Message Adapter is a library that adapts incoming messages in the\nCumulus protocol to a format more easily consumable by Cumulus tasks, invokes\nthe tasks, and then adapts their response back to the Cumulus message protocol\nto be sent to the next task.\n\n## Installation\n\n```plain\npip install cumulus-message-adapter-python\n```\n\n## Task definition\n\nIn order to use the Cumulus Message Adapter, you will need to create two\nmethods in your task module: a handler function and a business logic function.\n\nThe handler function is a standard Lambda handler function which takes two\nparameters (as specified by AWS): `event` and `context`.\n\nThe business logic function is where the actual work of your task occurs. It\nshould take two parameters: `event` and `context`.\n\nThe `event` object contains two keys:\n\n* `input` - the task's input, typically the `payload` of the message, produced\n  at runtime\n* `config` - the task's configuration, with any templated variables resolved\n\nThe `context` parameter is the standard Lambda context as passed by AWS.\n\nThe return value of the business logic function will be placed in the\n`payload` of the resulting Cumulus message.\n\nExpectations for input, config, and return values are all defined by the task,\nand should be well documented. Tasks should thoughtfully consider their inputs\nand return values, as breaking changes may have cascading effects on tasks\nthroughout a workflow. Configuration changes are slightly less impactful, but\nmust be communicated to those using the task.\n\n## Cumulus Message Adapter interface\n\nThe Cumulus Message adapter for python provides one method:\n`run_cumulus_task`. It takes four parameters:\n\n* `task_function` - the function containing your business logic (as described\n  above)\n* `cumulus_message` - the event passed by Lambda, and should be a Cumulus\n  Message, *or* a CMA parameter encapsulated message (see [Cumulus Workflow\n  Documentation](https://nasa.github.io/cumulus/docs/workflows/input_output)):\n\n  ```json\n  {\n     \"cma\": {\n        \"event\": \"<cumulus message object>\",\n        \"SomeCMAConfigKey\": \"CMA configuration object>\"\n     }\n  }\n  ```\n\n* `context` - the Lambda context\n* `schemas` - optional: a dict with `input`, `config`, and `output` properties.\n  Each should be a string set to the filepath of the corresponding JSON schema\n  file. All three properties of this dict are optional. If ommitted, the message\n  adapter will look in `/<task_root>/schemas/<schema_type>.json`, and if not\n  found there, will be ignored.\n* `taskargs` - Optional. Additional keyword arguments for the `task_function`\n\n## Example\n\nSimple example of using this package's `run_cumulus_task` function as a wrapper\naround another function:\n\n```python\nfrom run_cumulus_task import run_cumulus_task\n\n# simple task that returns the event\ndef task(event, context):\n    return event\n\n# handler that is provided to aws lambda\ndef handler(event, context):\n    return run_cumulus_task(task, event, context)\n```\n\nFor a full example see the [example folder](./example).\n\n## Creating a deployment package\n\nTasks that use this library are just standard AWS Lambda tasks. See\n[creating release packages].\n\n## Usage in a Cumulus Deployment\n\nFor documenation on how to utilize this package in a Cumulus Deployment, view\nthe [Cumulus Workflow Documenation].\n\n## Development\n\n### Dependency Installation\n\n```plain\n$ pip install -r requirements-dev.txt\n$ pip install -r requirements.txt\n```\n\n### Logging with `CumulusLogger`\n\nIncluded in this package is the `cumulus_logger` which contains a logging class\n`CumulusLogger` that standardizes the log format for Cumulus. Methods are\nprovided to log error, fatal, warning, debug, info, and trace.\n\n**Import the `CumulusLogger` class:**\n\n```python\nfrom cumulus_logger import CumulusLogger\n```\n\n**Instantiate the logger inside the task definition (name and level are\noptional):**\n\n```python\nlogger = CumulusLogger(event, context)\n```\n\n**Use the logging methods for different levels:**\n\n```python\nlogger.trace('<your message>')\nlogger.debug('<your message>')\nlogger.info('<your message>')\nlogger.warn('<your message>')\nlogger.error('<your message>')\nlogger.fatal('<your message>')\n```\n\n**It can also take additional non-keyword and keyword arguments as in Python\nLogger.**\n\nThe `msg` is the message format string, the `args` and `kwargs` are the\narguments for string formatting.\n\nIf `exc_info` in `kwargs` is not `False`, the exception information in the\n`exc_info` or `sys.exc_info()` is added to the message.\n\n```python\nlogger.debug(msg, *args, **kwargs)\n```\n\n**Example usage:**\n\n```python\nimport os\nimport sys\n\nfrom run_cumulus_task import run_cumulus_task\nfrom cumulus_logger import CumulusLogger\n\n# instantiate CumulusLogger\nlogger = CumulusLogger()\n\ndef task(event, context):\n    logger.info('task executed')\n\n    # log error when an exception is caught\n    logger.error(\"task formatted message {} exc_info \", \"bar\", exc_info=True)\n\n    # return the output of the task\n    return { \"example\": \"output\" }\n\ndef handler(event, context):\n    # make sure event & context metadata is set in the logger\n    logger.setMetadata(event, context)\n    return run_cumulus_task(task, event, context)\n```\n\n### Running Tests\n\nRunning tests requires [localstack](https://github.com/localstack/localstack).\n\nTests only require localstack running S3, which can be initiated with the\nfollowing command:\n\n```plain\n$ SERVICES=s3 localstack start\n```\n\nAnd then you can check tests pass with the following nosetests command:\n\n```plain\n$ CUMULUS_ENV=testing nosetests -v -s --with-doctest\n```\n\n### Linting\n\n```plain\n$ pylint run_cumulus_task.py\n```\n\n## Why?\n\nThis approach has a few major advantages:\n\n1. It explicitly prevents tasks from making assumptions about data structures\n   like `meta` and `cumulus_meta` that are owned internally and may therefore\n   be broken in future updates. To gain access to fields in these structures,\n   tasks must be passed the data explicitly in the workflow configuration.\n1. It provides clearer ownership of the various data structures. Operators own\n   `meta`. Cumulus owns `cumulus_meta`. Tasks define their own `config`,\n   `input`, and `output` formats.\n1. The Cumulus Message Adapter greatly simplifies running Lambda functions not\n   explicitly created for Cumulus.\n1. The approach greatly simplifies testing for tasks, as tasks don't need to\n   set up cumbersome structures to emulate the message protocol and can just\n   test their business function.\n\n## License\n\n[Apache 2.0](LICENSE)\n\n[circleci]:\n  https://circleci.com/gh/nasa/cumulus-message-adapter-python.svg?style=svg\n[pypi version]:\n  https://badge.fury.io/py/cumulus-message-adapter-python.svg\n[Cumulus Documentation]:\n  https://nasa.github.io/cumulus/\n[creating release packages]:\n  https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html\n[cumulus workflow documenation]:\n  https://nasa.github.io/cumulus/docs/workflows/input_output", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cumulus-nasa/cumulus-message-adapter-python", "keywords": "nasa cumulus", "license": "", "maintainer": "", "maintainer_email": "", "name": "cumulus-message-adapter-python", "package_url": "https://pypi.org/project/cumulus-message-adapter-python/", "platform": "", "project_url": "https://pypi.org/project/cumulus-message-adapter-python/", "project_urls": {"Homepage": "https://github.com/cumulus-nasa/cumulus-message-adapter-python"}, "release_url": "https://pypi.org/project/cumulus-message-adapter-python/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A handler library for cumulus tasks written in python", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cumulus-message-adapter-python</h1>\n<p><a href=\"https://circleci.com/gh/nasa/cumulus-message-adapter-python\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/825f908b85fc8f46001803175953d9128ef85a92/68747470733a2f2f636972636c6563692e636f6d2f67682f6e6173612f63756d756c75732d6d6573736167652d616461707465722d707974686f6e2e7376673f7374796c653d737667\"></a>\n<a href=\"https://badge.fury.io/py/cumulus-message-adapter-python\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0900cd02a5ecffbc35f81c47a386a8840a8c1ca/68747470733a2f2f62616467652e667572792e696f2f70792f63756d756c75732d6d6573736167652d616461707465722d707974686f6e2e737667\"></a></p>\n<h2>What is Cumulus?</h2>\n<p>Cumulus is a cloud-based data ingest, archive, distribution and management\nprototype for NASA's future Earth science data streams.</p>\n<p>Read the <a href=\"https://nasa.github.io/cumulus/\" rel=\"nofollow\">Cumulus Documentation</a></p>\n<h2>What is the Cumulus Message Adapter?</h2>\n<p>The Cumulus Message Adapter is a library that adapts incoming messages in the\nCumulus protocol to a format more easily consumable by Cumulus tasks, invokes\nthe tasks, and then adapts their response back to the Cumulus message protocol\nto be sent to the next task.</p>\n<h2>Installation</h2>\n<pre>pip install cumulus-message-adapter-python\n</pre>\n<h2>Task definition</h2>\n<p>In order to use the Cumulus Message Adapter, you will need to create two\nmethods in your task module: a handler function and a business logic function.</p>\n<p>The handler function is a standard Lambda handler function which takes two\nparameters (as specified by AWS): <code>event</code> and <code>context</code>.</p>\n<p>The business logic function is where the actual work of your task occurs. It\nshould take two parameters: <code>event</code> and <code>context</code>.</p>\n<p>The <code>event</code> object contains two keys:</p>\n<ul>\n<li><code>input</code> - the task's input, typically the <code>payload</code> of the message, produced\nat runtime</li>\n<li><code>config</code> - the task's configuration, with any templated variables resolved</li>\n</ul>\n<p>The <code>context</code> parameter is the standard Lambda context as passed by AWS.</p>\n<p>The return value of the business logic function will be placed in the\n<code>payload</code> of the resulting Cumulus message.</p>\n<p>Expectations for input, config, and return values are all defined by the task,\nand should be well documented. Tasks should thoughtfully consider their inputs\nand return values, as breaking changes may have cascading effects on tasks\nthroughout a workflow. Configuration changes are slightly less impactful, but\nmust be communicated to those using the task.</p>\n<h2>Cumulus Message Adapter interface</h2>\n<p>The Cumulus Message adapter for python provides one method:\n<code>run_cumulus_task</code>. It takes four parameters:</p>\n<ul>\n<li>\n<p><code>task_function</code> - the function containing your business logic (as described\nabove)</p>\n</li>\n<li>\n<p><code>cumulus_message</code> - the event passed by Lambda, and should be a Cumulus\nMessage, <em>or</em> a CMA parameter encapsulated message (see <a href=\"https://nasa.github.io/cumulus/docs/workflows/input_output\" rel=\"nofollow\">Cumulus Workflow\nDocumentation</a>):</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"cma\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"event\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;cumulus message object&gt;\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"SomeCMAConfigKey\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CMA configuration object&gt;\"</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p><code>context</code> - the Lambda context</p>\n</li>\n<li>\n<p><code>schemas</code> - optional: a dict with <code>input</code>, <code>config</code>, and <code>output</code> properties.\nEach should be a string set to the filepath of the corresponding JSON schema\nfile. All three properties of this dict are optional. If ommitted, the message\nadapter will look in <code>/&lt;task_root&gt;/schemas/&lt;schema_type&gt;.json</code>, and if not\nfound there, will be ignored.</p>\n</li>\n<li>\n<p><code>taskargs</code> - Optional. Additional keyword arguments for the <code>task_function</code></p>\n</li>\n</ul>\n<h2>Example</h2>\n<p>Simple example of using this package's <code>run_cumulus_task</code> function as a wrapper\naround another function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">run_cumulus_task</span> <span class=\"kn\">import</span> <span class=\"n\">run_cumulus_task</span>\n\n<span class=\"c1\"># simple task that returns the event</span>\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span>\n\n<span class=\"c1\"># handler that is provided to aws lambda</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">run_cumulus_task</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<p>For a full example see the <a href=\"./example\" rel=\"nofollow\">example folder</a>.</p>\n<h2>Creating a deployment package</h2>\n<p>Tasks that use this library are just standard AWS Lambda tasks. See\n<a href=\"https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html\" rel=\"nofollow\">creating release packages</a>.</p>\n<h2>Usage in a Cumulus Deployment</h2>\n<p>For documenation on how to utilize this package in a Cumulus Deployment, view\nthe <a href=\"https://nasa.github.io/cumulus/docs/workflows/input_output\" rel=\"nofollow\">Cumulus Workflow Documenation</a>.</p>\n<h2>Development</h2>\n<h3>Dependency Installation</h3>\n<pre>$ pip install -r requirements-dev.txt\n$ pip install -r requirements.txt\n</pre>\n<h3>Logging with <code>CumulusLogger</code></h3>\n<p>Included in this package is the <code>cumulus_logger</code> which contains a logging class\n<code>CumulusLogger</code> that standardizes the log format for Cumulus. Methods are\nprovided to log error, fatal, warning, debug, info, and trace.</p>\n<p><strong>Import the <code>CumulusLogger</code> class:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cumulus_logger</span> <span class=\"kn\">import</span> <span class=\"n\">CumulusLogger</span>\n</pre>\n<p><strong>Instantiate the logger inside the task definition (name and level are\noptional):</strong></p>\n<pre><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">CumulusLogger</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Use the logging methods for different levels:</strong></p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">fatal</span><span class=\"p\">(</span><span class=\"s1\">'&lt;your message&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p><strong>It can also take additional non-keyword and keyword arguments as in Python\nLogger.</strong></p>\n<p>The <code>msg</code> is the message format string, the <code>args</code> and <code>kwargs</code> are the\narguments for string formatting.</p>\n<p>If <code>exc_info</code> in <code>kwargs</code> is not <code>False</code>, the exception information in the\n<code>exc_info</code> or <code>sys.exc_info()</code> is added to the message.</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Example usage:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">run_cumulus_task</span> <span class=\"kn\">import</span> <span class=\"n\">run_cumulus_task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cumulus_logger</span> <span class=\"kn\">import</span> <span class=\"n\">CumulusLogger</span>\n\n<span class=\"c1\"># instantiate CumulusLogger</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">CumulusLogger</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'task executed'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># log error when an exception is caught</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"task formatted message </span><span class=\"si\">{}</span><span class=\"s2\"> exc_info \"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># return the output of the task</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"s2\">\"example\"</span><span class=\"p\">:</span> <span class=\"s2\">\"output\"</span> <span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># make sure event &amp; context metadata is set in the logger</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setMetadata</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">run_cumulus_task</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<h3>Running Tests</h3>\n<p>Running tests requires <a href=\"https://github.com/localstack/localstack\" rel=\"nofollow\">localstack</a>.</p>\n<p>Tests only require localstack running S3, which can be initiated with the\nfollowing command:</p>\n<pre>$ SERVICES=s3 localstack start\n</pre>\n<p>And then you can check tests pass with the following nosetests command:</p>\n<pre>$ CUMULUS_ENV=testing nosetests -v -s --with-doctest\n</pre>\n<h3>Linting</h3>\n<pre>$ pylint run_cumulus_task.py\n</pre>\n<h2>Why?</h2>\n<p>This approach has a few major advantages:</p>\n<ol>\n<li>It explicitly prevents tasks from making assumptions about data structures\nlike <code>meta</code> and <code>cumulus_meta</code> that are owned internally and may therefore\nbe broken in future updates. To gain access to fields in these structures,\ntasks must be passed the data explicitly in the workflow configuration.</li>\n<li>It provides clearer ownership of the various data structures. Operators own\n<code>meta</code>. Cumulus owns <code>cumulus_meta</code>. Tasks define their own <code>config</code>,\n<code>input</code>, and <code>output</code> formats.</li>\n<li>The Cumulus Message Adapter greatly simplifies running Lambda functions not\nexplicitly created for Cumulus.</li>\n<li>The approach greatly simplifies testing for tasks, as tasks don't need to\nset up cumbersome structures to emulate the message protocol and can just\ntest their business function.</li>\n</ol>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">Apache 2.0</a></p>\n\n          </div>"}, "last_serial": 6663739, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3a07bec482f6b1df09c9dc9901a4db2a", "sha256": "b68f74b39ec1ef5e09626a2d808d5d6e81f45c46c1e6ba74adef4b45958e6292"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3a07bec482f6b1df09c9dc9901a4db2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6198, "upload_time": "2018-03-12T14:51:56", "upload_time_iso_8601": "2018-03-12T14:51:56.634401Z", "url": "https://files.pythonhosted.org/packages/70/b0/682bc43c2d47a6e3f3dc3550cef2c15dc3e446324cb53afddd30e46fe050/cumulus_message_adapter_python-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "da6f56e37c1dafead7edd6f04d9061b4", "sha256": "51091b695e56fe0715452d010f54ee9ffc8b1e8d5cc82f5008f58d3631d95fe6"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.1.tar.gz", "has_sig": false, "md5_digest": "da6f56e37c1dafead7edd6f04d9061b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6163, "upload_time": "2018-05-16T18:38:39", "upload_time_iso_8601": "2018-05-16T18:38:39.403265Z", "url": "https://files.pythonhosted.org/packages/a3/99/4e915c7a179cf81bef353735516afdc18dd6a0fa1160f523c1e7c1bbc56c/cumulus_message_adapter_python-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "f54ad3b9ae31f88a9345168dae7d8da4", "sha256": "e5085a0142ec185080ee93bc6519f3d6d94e4648e27deeaf6a7d5f3c663626c3"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.10.tar.gz", "has_sig": false, "md5_digest": "f54ad3b9ae31f88a9345168dae7d8da4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6996, "upload_time": "2019-11-18T17:15:13", "upload_time_iso_8601": "2019-11-18T17:15:13.682275Z", "url": "https://files.pythonhosted.org/packages/e7/19/5c2e330baa90aa49d9d7abd10ba6f45e0e4f23796aaf553f08688e788790/cumulus_message_adapter_python-1.0.10.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ecdc25ba321e48483fb1a989a59fb481", "sha256": "62af9907389f7a4f5b59b5e343a64f410adc065b8d849916edd0202f0ee618de"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ecdc25ba321e48483fb1a989a59fb481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6120, "upload_time": "2018-05-16T18:48:09", "upload_time_iso_8601": "2018-05-16T18:48:09.273577Z", "url": "https://files.pythonhosted.org/packages/57/78/c15bd72265ba32852a6079a2f4869999d1eb5242ccb2df57f3f569895d9d/cumulus_message_adapter_python-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "04f0a286e9e678adb200bbf6a72d0a5f", "sha256": "cea2f15085aa60303c0871c910afeb82a175ad4913722b3dfb4fc6076a110353"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.3.tar.gz", "has_sig": false, "md5_digest": "04f0a286e9e678adb200bbf6a72d0a5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6159, "upload_time": "2018-05-16T19:09:15", "upload_time_iso_8601": "2018-05-16T19:09:15.467792Z", "url": "https://files.pythonhosted.org/packages/a6/73/feedf28adc1a1a4d787b1423531dbda81e225b67fbdbe5c48667b245213f/cumulus_message_adapter_python-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "430a31add6f0b662907d3b3263015cb4", "sha256": "3c985164660cfd1ff2e5f42efc9cf68d50fad36a769f1d916db15fbcfe7dde93"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.4.tar.gz", "has_sig": false, "md5_digest": "430a31add6f0b662907d3b3263015cb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6201, "upload_time": "2018-08-09T14:19:46", "upload_time_iso_8601": "2018-08-09T14:19:46.000378Z", "url": "https://files.pythonhosted.org/packages/e9/14/87f7c00b73e3c1a0e810d80cdf28117c27c003f6d32bbd049b03437b3ec2/cumulus_message_adapter_python-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "a9b0bc0b51b012f159583ff2b4e86a8d", "sha256": "145c5b3dcf7f03082f1c7c4f9db6b45b9ff04c30ea7cd4a67557a804c216d34f"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.5.tar.gz", "has_sig": false, "md5_digest": "a9b0bc0b51b012f159583ff2b4e86a8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6361, "upload_time": "2018-08-16T19:27:37", "upload_time_iso_8601": "2018-08-16T19:27:37.078398Z", "url": "https://files.pythonhosted.org/packages/39/86/a3c779f29c1f917b69f7de9a486ebcb2e119cf257e497ca0512286b90458/cumulus_message_adapter_python-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "ad9b59bd8d112b72570050fb9b3f92c1", "sha256": "3375f9f2109d46011ab487ca6b3ca5f3fae147166e290183d133c99c4adf7977"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.6.tar.gz", "has_sig": false, "md5_digest": "ad9b59bd8d112b72570050fb9b3f92c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6337, "upload_time": "2018-12-12T20:05:07", "upload_time_iso_8601": "2018-12-12T20:05:07.272040Z", "url": "https://files.pythonhosted.org/packages/14/ae/c41e433bcf89eb2b5a9fc096091dbb5576f5c333a3a3832a447d16845272/cumulus_message_adapter_python-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "ceae50e2b831defbaef5477abb55edaf", "sha256": "67d48cb2db5b472da0cd583ea086d342570af2ef05010c3ddb3cd418a6771d91"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.7.tar.gz", "has_sig": false, "md5_digest": "ceae50e2b831defbaef5477abb55edaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6278, "upload_time": "2018-12-18T21:58:34", "upload_time_iso_8601": "2018-12-18T21:58:34.227321Z", "url": "https://files.pythonhosted.org/packages/3d/8f/77b637f8f0c8e1b844764ae67b67587bada9487cebcd8c98750877ef0254/cumulus_message_adapter_python-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "751126b4b3cd5e534421fe2ff87b38fc", "sha256": "aaa2bdfe6592bde2f8bc32b8c636fb7db1694c0603d3fd4bd82f6c5b84bd3b2f"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.8.tar.gz", "has_sig": false, "md5_digest": "751126b4b3cd5e534421fe2ff87b38fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6906, "upload_time": "2019-01-18T16:13:25", "upload_time_iso_8601": "2019-01-18T16:13:25.214345Z", "url": "https://files.pythonhosted.org/packages/4c/2e/d175cf480e98610daf5c1958f4e9b4d86f0f25f88f0ddc5c139e36b78e86/cumulus_message_adapter_python-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "6889118d82eb7879eba8fc758f6818a4", "sha256": "ace56ca19680f8ce836e74d860ed5a5efa317c1f4dcf4891758e3df8eb1c1990"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.0.9.tar.gz", "has_sig": false, "md5_digest": "6889118d82eb7879eba8fc758f6818a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7181, "upload_time": "2019-09-17T14:05:38", "upload_time_iso_8601": "2019-09-17T14:05:38.336515Z", "url": "https://files.pythonhosted.org/packages/e9/5e/179451f71b63e75e6cb10da502a5547d7fc46420add12e11ea2d682c1e0e/cumulus_message_adapter_python-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5dd3acb4a64faf5453a0ed0f0f8bdff2", "sha256": "9cd6fdb83c9824c437d90807a21d37bf384156be27517c23e94f888cf45e7618"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5dd3acb4a64faf5453a0ed0f0f8bdff2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7054, "upload_time": "2019-11-18T19:59:54", "upload_time_iso_8601": "2019-11-18T19:59:54.900400Z", "url": "https://files.pythonhosted.org/packages/96/d1/95182ef8cbbb907270e00c41d3cc68b842d2f93942a77f4926553feee8aa/cumulus_message_adapter_python-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "81fc765b349bddc665ff214c27080697", "sha256": "fb9829de3a5041fe46c1c781b90d903fa9b402a3f10b1de1671d3c25b791f495"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.1.1.tar.gz", "has_sig": false, "md5_digest": "81fc765b349bddc665ff214c27080697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9708, "upload_time": "2019-12-03T22:01:42", "upload_time_iso_8601": "2019-12-03T22:01:42.388878Z", "url": "https://files.pythonhosted.org/packages/44/b4/192e8cc1163af265b6950dc2ed52c89ac5ead9bc79eaeda70457bc6aeeaf/cumulus_message_adapter_python-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "8c41ffffed66a29b7fe8aa471ffc0a32", "sha256": "1245020cb2636fca79b4b05a4e81a0a4fa59424ecaecbc17eef916e7d5fd1ca1"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8c41ffffed66a29b7fe8aa471ffc0a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9700, "upload_time": "2020-02-19T22:04:27", "upload_time_iso_8601": "2020-02-19T22:04:27.677490Z", "url": "https://files.pythonhosted.org/packages/f6/43/43a1068f085c99483929cef2d020b18eda108baae44fb6565f8e401e46fc/cumulus_message_adapter_python-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c41ffffed66a29b7fe8aa471ffc0a32", "sha256": "1245020cb2636fca79b4b05a4e81a0a4fa59424ecaecbc17eef916e7d5fd1ca1"}, "downloads": -1, "filename": "cumulus_message_adapter_python-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8c41ffffed66a29b7fe8aa471ffc0a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9700, "upload_time": "2020-02-19T22:04:27", "upload_time_iso_8601": "2020-02-19T22:04:27.677490Z", "url": "https://files.pythonhosted.org/packages/f6/43/43a1068f085c99483929cef2d020b18eda108baae44fb6565f8e401e46fc/cumulus_message_adapter_python-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:24 2020"}