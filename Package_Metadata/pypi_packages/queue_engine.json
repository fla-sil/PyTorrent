{"info": {"author": "Brian Rosner", "author_email": "brosner@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "======\nengine\n======\n\nWhat is engine?\n===============\n\nengine is a collection of tools for processing a queue. It provides an API to\ndefer a callable and run it later. engine also provides process helpers to\nset up a safe environment for clearing different kind of queues.\n\nHow to use engine?\n==================\n\nThe basic usage of engine is to defer something to execute later. However, the\ninternals are written in such way to allow for planning. You can plan your\ncode to use a queue, but a queue doesn't even need to be present. Lets take a\nlook at an example::\n\n    >>> import engine\n    >>> def hello_world():\n    ...     print \"hello world\"\n    \n    >>> engine.defer(hello_world)\n    hello world\n\nAs you can see above, the function ``hello_world`` was executed immediately.\nThis is because, by default, engine will use the ``DummyQueue`` which will\nexecute the given callable when put on the queue.\n\nIf you have a queue such as stompserver, ActiveMQ or any STOMP compliant\nqueue you can use ``StompQueue``. Lets take a look at an example::\n\n    >>> import engine\n    >>> def hello_world():\n    ...     print \"hello world\"\n    \n    >>> engine.defer(hello_world, queue=engine.StompQueue())\n\nThe above code will now defer the call to ``hello_world`` by sending it to the\nqueue.\n\nYou can define the default queue used by engine. To do this you should use\n``engine.configure``. Here is an example changing the default queue from\n``DummyQueue`` to ``StompQueue``::\n\n    >>> import engine\n    >>> engine.configure(queue=engine.StompQueue())\n\nNow all calls to ``engine.defer`` will use the ``StompQueue`` instance.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/brosner/engine/tree/master", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "queue_engine", "package_url": "https://pypi.org/project/queue_engine/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/queue_engine/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/brosner/engine/tree/master"}, "release_url": "https://pypi.org/project/queue_engine/0.1.0pre/", "requires_dist": null, "requires_python": null, "summary": "Queue management and code deferment", "version": "0.1.0pre", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-engine\">\n<h2>What is engine?</h2>\n<p>engine is a collection of tools for processing a queue. It provides an API to\ndefer a callable and run it later. engine also provides process helpers to\nset up a safe environment for clearing different kind of queues.</p>\n</div>\n<div id=\"how-to-use-engine\">\n<h2>How to use engine?</h2>\n<p>The basic usage of engine is to defer something to execute later. However, the\ninternals are written in such way to allow for planning. You can plan your\ncode to use a queue, but a queue doesn\u2019t even need to be present. Lets take a\nlook at an example:</p>\n<pre>&gt;&gt;&gt; import engine\n&gt;&gt;&gt; def hello_world():\n...     print \"hello world\"\n\n&gt;&gt;&gt; engine.defer(hello_world)\nhello world\n</pre>\n<p>As you can see above, the function <tt>hello_world</tt> was executed immediately.\nThis is because, by default, engine will use the <tt>DummyQueue</tt> which will\nexecute the given callable when put on the queue.</p>\n<p>If you have a queue such as stompserver, ActiveMQ or any STOMP compliant\nqueue you can use <tt>StompQueue</tt>. Lets take a look at an example:</p>\n<pre>&gt;&gt;&gt; import engine\n&gt;&gt;&gt; def hello_world():\n...     print \"hello world\"\n\n&gt;&gt;&gt; engine.defer(hello_world, queue=engine.StompQueue())\n</pre>\n<p>The above code will now defer the call to <tt>hello_world</tt> by sending it to the\nqueue.</p>\n<p>You can define the default queue used by engine. To do this you should use\n<tt>engine.configure</tt>. Here is an example changing the default queue from\n<tt>DummyQueue</tt> to <tt>StompQueue</tt>:</p>\n<pre>&gt;&gt;&gt; import engine\n&gt;&gt;&gt; engine.configure(queue=engine.StompQueue())\n</pre>\n<p>Now all calls to <tt>engine.defer</tt> will use the <tt>StompQueue</tt> instance.</p>\n</div>\n\n          </div>"}, "last_serial": 82467, "releases": {"0.1.0pre": []}, "urls": [], "timestamp": "Fri May  8 03:08:35 2020"}