{"info": {"author": "Clare Puttick", "author_email": "clare.puttick@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: MacOS X", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: Free for non-commercial use", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# mity\n`mity` is a bioinformatic analysis pipeline designed to call mitochondrial SNV and INDEL variants from Whole Genome Sequencing (WGS) data. `mity` can:\n* identify very low-heteroplasmy variants, even <1% heteroplasmy when there is sufficient read-depth (eg >1000x)\n* filter out common artefacts that arise from high-depth sequencing\n* easily integrate with existing nuclear DNA analysis pipelines (mity merge)\n* provide an annotated report, designed for clinicians and researchers to interrogate\n\n# Usage\n    mity -h\n\n# Dependencies\n* python3 (tested on 3.7.4)\n* freebayes >= 1.2.0\n* bgzip + tabix\n* gsort (https://github.com/brentp/gsort)\n* pyvcf\n* xlsxwriter\n* pandas\n\n# Installation\nInstallation instructions via Docker, pip, or manually are available in [INSTALL.md](https://github.com/KCCG/mity/blob/master/INSTALL.md)\n\n# Example Usage\nThis is an example of calling variants in the Ashkenazim Trio.\n\n## mity call\nFirst run `mity call` on three MT BAMs provided in [mity/test_in](https://github.com/KCCG/mity/blob/master/test_in).\n\nWe recommend always using `--normalise`, or `mity report` won't work:\n```bash\nmity call \\\n--prefix ashkenazim \\\n--out-folder-path test_out \\\n--region MT:1-500 \\\n--normalise \\\ntest_in/HG002.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG003.hs37d5.2x250.small.MT.RG.bam \\\ntest_in/HG004.hs37d5.2x250.small.MT.RG.bam \n```\nThis will create `test_out/normalised/ashkenazim.mity.vcf.gz` (and tbi file).\n\n## mity report\n\nWe can create a `mity report` on the normalised VCF:\n```bash\nmity report \\\n--prefix ashkenazim \\\n--min_vaf 0.01 \\\n--out-folder-path test_out \\\ntest_out/ashkenazim.mity.vcf.gz\n```\nThis will create: `test_out/ashkenazim.annotated_variants.csv` and `test_out/ashkenazim.annotated_variants.xlsx`.\n\n## mity normalise\nHigh-depth sequencing and sensitive variant calling can create many variants with more than 2 alleles, and in some\ncases, joins two nearby variants separated by shared `REF` sequence into a multi-nucleotide polymorphism \nas discussed in the manuscript. Here, variant normalisation relates to decomposing the multi-allelic variants and \nwhere possible, splitting multi-nucleotide polymorphisms into their cognate smaller variants. At the time of writing,\nall variant decomposition tools we used failed to propagate the metadata in a multi-allelic variant to the split\nvariants which caused problems when reporting the quality scores associated with each variant.\n\nTechnically you can run `mity call` and `mity normalise` separately, but since `mity report` requires a normalised \nvcf file, we recommend running `mity call --normalise`. \n\n## mity merge\nYou can merge a nuclear vcf.gz file and a mity.vcf.gz file thereby replacing the MT calls from the nuclear VCF (\npresumably from a caller like HaplotypeCaller which is not able to sensitively call mitochondrial variants) with\nthe calls from `mity`.\n\n```bash\nmity merge \\\n--prefix ashkenazim \\\n--mity_vcf test_out/ashkenazim.mity.vcf.gz \\\n--nuclear_vcf todo-create-example-nuclear.vcf.gz\n```\n\n# Recommendations for interpreting the report\nAssuming that you are looking for a pathogenic variant underlying a patient with a rare genetic disorder potentially \ncaused by a Mitochondrial mutation, then we recommend the following strategy:\n1. tier 1 or 2 variants included in the 'commercial_panels' column \n2. tier 1 or 2 variants that match the clinical presentation and the phenotype in 'disease_mitomap', preferably \nthose that are annotated with Confirmed evidence in the 'status_mitomap' column\n3. exclude common variants: anything linked to 'phylotree_haplotype', high 'phylotree_haplotype', high \n'MGRB_frequency', high 'GenBank_frequency_mitomap'.\n4. consider any remaining tier 1 or 2 variants that may have a predicted impact on tRNA\n5. consider any remaining variants with high numbers of 'variant_references_mitomap'\n5. if you have analysed multiple family members, consider variants who's level of 'variant_heteroplasmy' match the\ndisease burden \n\n# Acknowledgements\nWe would like to thank:\n* The Kinghorn Centre for Clinical Genomics and collaborators, who helped with feedback for running `mity`.\n* The Genome in a Bottle consortium for providing the test data used here \n* Eric Talevich who's CNVkit helped us structure `mity` as a package\n* Erik Garrison for developing `FreeBayes` and his early feedback in optimising `FreeBayes` for sensitive variant detection.\n* Brent Pederson for developing `gsort`\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KCCG/mity", "keywords": "mitochondrial DNA genomics variant SNV INDEL", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mitywgs", "package_url": "https://pypi.org/project/mitywgs/", "platform": "", "project_url": "https://pypi.org/project/mitywgs/", "project_urls": {"Documentation": "https://github.com/KCCG/mity/", "Funding": "http://garvan.org.au/kccg", "Homepage": "https://github.com/KCCG/mity", "Source": "https://github.com/KCCG/mity/"}, "release_url": "https://pypi.org/project/mitywgs/0.1.3/", "requires_dist": ["pyvcf", "pysam", "pandas", "xlsxwriter", "pyfastx", "scipy"], "requires_python": ">=3.5.3", "summary": "A sensitive Mitochondrial variant detection pipeline from WGS data", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mity</h1>\n<p><code>mity</code> is a bioinformatic analysis pipeline designed to call mitochondrial SNV and INDEL variants from Whole Genome Sequencing (WGS) data. <code>mity</code> can:</p>\n<ul>\n<li>identify very low-heteroplasmy variants, even &lt;1% heteroplasmy when there is sufficient read-depth (eg &gt;1000x)</li>\n<li>filter out common artefacts that arise from high-depth sequencing</li>\n<li>easily integrate with existing nuclear DNA analysis pipelines (mity merge)</li>\n<li>provide an annotated report, designed for clinicians and researchers to interrogate</li>\n</ul>\n<h1>Usage</h1>\n<pre><code>mity -h\n</code></pre>\n<h1>Dependencies</h1>\n<ul>\n<li>python3 (tested on 3.7.4)</li>\n<li>freebayes &gt;= 1.2.0</li>\n<li>bgzip + tabix</li>\n<li>gsort (<a href=\"https://github.com/brentp/gsort\" rel=\"nofollow\">https://github.com/brentp/gsort</a>)</li>\n<li>pyvcf</li>\n<li>xlsxwriter</li>\n<li>pandas</li>\n</ul>\n<h1>Installation</h1>\n<p>Installation instructions via Docker, pip, or manually are available in <a href=\"https://github.com/KCCG/mity/blob/master/INSTALL.md\" rel=\"nofollow\">INSTALL.md</a></p>\n<h1>Example Usage</h1>\n<p>This is an example of calling variants in the Ashkenazim Trio.</p>\n<h2>mity call</h2>\n<p>First run <code>mity call</code> on three MT BAMs provided in <a href=\"https://github.com/KCCG/mity/blob/master/test_in\" rel=\"nofollow\">mity/test_in</a>.</p>\n<p>We recommend always using <code>--normalise</code>, or <code>mity report</code> won't work:</p>\n<pre>mity call <span class=\"se\">\\</span>\n--prefix ashkenazim <span class=\"se\">\\</span>\n--out-folder-path test_out <span class=\"se\">\\</span>\n--region MT:1-500 <span class=\"se\">\\</span>\n--normalise <span class=\"se\">\\</span>\ntest_in/HG002.hs37d5.2x250.small.MT.RG.bam <span class=\"se\">\\</span>\ntest_in/HG003.hs37d5.2x250.small.MT.RG.bam <span class=\"se\">\\</span>\ntest_in/HG004.hs37d5.2x250.small.MT.RG.bam \n</pre>\n<p>This will create <code>test_out/normalised/ashkenazim.mity.vcf.gz</code> (and tbi file).</p>\n<h2>mity report</h2>\n<p>We can create a <code>mity report</code> on the normalised VCF:</p>\n<pre>mity report <span class=\"se\">\\</span>\n--prefix ashkenazim <span class=\"se\">\\</span>\n--min_vaf <span class=\"m\">0</span>.01 <span class=\"se\">\\</span>\n--out-folder-path test_out <span class=\"se\">\\</span>\ntest_out/ashkenazim.mity.vcf.gz\n</pre>\n<p>This will create: <code>test_out/ashkenazim.annotated_variants.csv</code> and <code>test_out/ashkenazim.annotated_variants.xlsx</code>.</p>\n<h2>mity normalise</h2>\n<p>High-depth sequencing and sensitive variant calling can create many variants with more than 2 alleles, and in some\ncases, joins two nearby variants separated by shared <code>REF</code> sequence into a multi-nucleotide polymorphism\nas discussed in the manuscript. Here, variant normalisation relates to decomposing the multi-allelic variants and\nwhere possible, splitting multi-nucleotide polymorphisms into their cognate smaller variants. At the time of writing,\nall variant decomposition tools we used failed to propagate the metadata in a multi-allelic variant to the split\nvariants which caused problems when reporting the quality scores associated with each variant.</p>\n<p>Technically you can run <code>mity call</code> and <code>mity normalise</code> separately, but since <code>mity report</code> requires a normalised\nvcf file, we recommend running <code>mity call --normalise</code>.</p>\n<h2>mity merge</h2>\n<p>You can merge a nuclear vcf.gz file and a mity.vcf.gz file thereby replacing the MT calls from the nuclear VCF (\npresumably from a caller like HaplotypeCaller which is not able to sensitively call mitochondrial variants) with\nthe calls from <code>mity</code>.</p>\n<pre>mity merge <span class=\"se\">\\</span>\n--prefix ashkenazim <span class=\"se\">\\</span>\n--mity_vcf test_out/ashkenazim.mity.vcf.gz <span class=\"se\">\\</span>\n--nuclear_vcf todo-create-example-nuclear.vcf.gz\n</pre>\n<h1>Recommendations for interpreting the report</h1>\n<p>Assuming that you are looking for a pathogenic variant underlying a patient with a rare genetic disorder potentially\ncaused by a Mitochondrial mutation, then we recommend the following strategy:</p>\n<ol>\n<li>tier 1 or 2 variants included in the 'commercial_panels' column</li>\n<li>tier 1 or 2 variants that match the clinical presentation and the phenotype in 'disease_mitomap', preferably\nthose that are annotated with Confirmed evidence in the 'status_mitomap' column</li>\n<li>exclude common variants: anything linked to 'phylotree_haplotype', high 'phylotree_haplotype', high\n'MGRB_frequency', high 'GenBank_frequency_mitomap'.</li>\n<li>consider any remaining tier 1 or 2 variants that may have a predicted impact on tRNA</li>\n<li>consider any remaining variants with high numbers of 'variant_references_mitomap'</li>\n<li>if you have analysed multiple family members, consider variants who's level of 'variant_heteroplasmy' match the\ndisease burden</li>\n</ol>\n<h1>Acknowledgements</h1>\n<p>We would like to thank:</p>\n<ul>\n<li>The Kinghorn Centre for Clinical Genomics and collaborators, who helped with feedback for running <code>mity</code>.</li>\n<li>The Genome in a Bottle consortium for providing the test data used here</li>\n<li>Eric Talevich who's CNVkit helped us structure <code>mity</code> as a package</li>\n<li>Erik Garrison for developing <code>FreeBayes</code> and his early feedback in optimising <code>FreeBayes</code> for sensitive variant detection.</li>\n<li>Brent Pederson for developing <code>gsort</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6155700, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "60a78eb48115118670092198298b1568", "sha256": "90e433721fea608ae7c7843812b355412ebe36937935f260e72a87ab21f6aefd"}, "downloads": -1, "filename": "mitywgs-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60a78eb48115118670092198298b1568", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 1165353, "upload_time": "2019-11-18T10:40:43", "upload_time_iso_8601": "2019-11-18T10:40:43.941827Z", "url": "https://files.pythonhosted.org/packages/95/5f/0fba9bf0dc8952226a3f354f63799ffc90c6316bd29655a65af24a4eb38a/mitywgs-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "115748adb83b7c579419f12902de455c", "sha256": "6b6474b46cd5de8785887fab7f0a0d942e6f7e53dfb94f663f89b2ed28141560"}, "downloads": -1, "filename": "mitywgs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "115748adb83b7c579419f12902de455c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 37059, "upload_time": "2019-11-18T10:40:47", "upload_time_iso_8601": "2019-11-18T10:40:47.530415Z", "url": "https://files.pythonhosted.org/packages/86/fc/4260dd9cae80420e003f605e31b54e73af7fb685625664d1ccf0435ac64e/mitywgs-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1183a7cf8b1a3b0644d905e33194e6eb", "sha256": "a48d78fdf8a9fb6409720d417602a7e690c2b28aeff99462182df4d6fb9acf27"}, "downloads": -1, "filename": "mitywgs-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1183a7cf8b1a3b0644d905e33194e6eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 1162674, "upload_time": "2019-11-18T11:47:17", "upload_time_iso_8601": "2019-11-18T11:47:17.752199Z", "url": "https://files.pythonhosted.org/packages/4f/5e/b43206082ca61da3e83d9e5c1e143c3de55f32c04146c81a70281726522a/mitywgs-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c58ec33f254dc1ba6e07d757eadc46df", "sha256": "cc6be7c5bfa314ce5931afa619b7bd9068f581959ccc63292fda61d82dbdf9cf"}, "downloads": -1, "filename": "mitywgs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c58ec33f254dc1ba6e07d757eadc46df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 37179, "upload_time": "2019-11-18T11:47:19", "upload_time_iso_8601": "2019-11-18T11:47:19.561680Z", "url": "https://files.pythonhosted.org/packages/9b/c5/77f664847f6788589008debb792b3c5436e4b496a030cb90e2062aaa1086/mitywgs-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ad496fdfa3be22e12077aad11a56adf9", "sha256": "a69913d9779386126f0b05545efd39978dfab19c637cd2a9536c436bd0b54d51"}, "downloads": -1, "filename": "mitywgs-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ad496fdfa3be22e12077aad11a56adf9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 1162685, "upload_time": "2019-11-18T12:21:00", "upload_time_iso_8601": "2019-11-18T12:21:00.755614Z", "url": "https://files.pythonhosted.org/packages/e5/b4/1512000bcbc0c4187fb9078309af272f45133fd51123b493a487b4712d3d/mitywgs-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b71a41c313a45eb34899e7ab6fd7632", "sha256": "4f506147d21d5628c6a3c3cbbe0de241c9c0d6161dab134aac641f382c5be042"}, "downloads": -1, "filename": "mitywgs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2b71a41c313a45eb34899e7ab6fd7632", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 37185, "upload_time": "2019-11-18T12:21:02", "upload_time_iso_8601": "2019-11-18T12:21:02.542782Z", "url": "https://files.pythonhosted.org/packages/9a/17/bd154ed0992c1dfe18326afd02587f9acc83c7f06d0d10c7b1953b4dbd26/mitywgs-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ec0d501118bd4ae4aaf64bf2162de14c", "sha256": "0a374d9c6a2f3332d7807769be46d2afa345326c4820f6bc0997ca0aeb6f5f36"}, "downloads": -1, "filename": "mitywgs-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ec0d501118bd4ae4aaf64bf2162de14c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 1162685, "upload_time": "2019-11-18T13:13:49", "upload_time_iso_8601": "2019-11-18T13:13:49.866649Z", "url": "https://files.pythonhosted.org/packages/40/b3/d2199c137c3893b5935b31a46b771ca9cb02e01ea169646a124bc8b19bde/mitywgs-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22f4e73c4f27eec9d5694b397c2e0f54", "sha256": "a93bc04b898f961d2589237eea3750823bac8a4f5c50eda97b47c7e3a6332085"}, "downloads": -1, "filename": "mitywgs-0.1.3.tar.gz", "has_sig": false, "md5_digest": "22f4e73c4f27eec9d5694b397c2e0f54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 37193, "upload_time": "2019-11-18T13:13:51", "upload_time_iso_8601": "2019-11-18T13:13:51.837760Z", "url": "https://files.pythonhosted.org/packages/09/89/ec808bf6dd1fb7095eda564ef732a03d2146981fa599f862b3d0ed07a687/mitywgs-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec0d501118bd4ae4aaf64bf2162de14c", "sha256": "0a374d9c6a2f3332d7807769be46d2afa345326c4820f6bc0997ca0aeb6f5f36"}, "downloads": -1, "filename": "mitywgs-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ec0d501118bd4ae4aaf64bf2162de14c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 1162685, "upload_time": "2019-11-18T13:13:49", "upload_time_iso_8601": "2019-11-18T13:13:49.866649Z", "url": "https://files.pythonhosted.org/packages/40/b3/d2199c137c3893b5935b31a46b771ca9cb02e01ea169646a124bc8b19bde/mitywgs-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22f4e73c4f27eec9d5694b397c2e0f54", "sha256": "a93bc04b898f961d2589237eea3750823bac8a4f5c50eda97b47c7e3a6332085"}, "downloads": -1, "filename": "mitywgs-0.1.3.tar.gz", "has_sig": false, "md5_digest": "22f4e73c4f27eec9d5694b397c2e0f54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 37193, "upload_time": "2019-11-18T13:13:51", "upload_time_iso_8601": "2019-11-18T13:13:51.837760Z", "url": "https://files.pythonhosted.org/packages/09/89/ec808bf6dd1fb7095eda564ef732a03d2146981fa599f862b3d0ed07a687/mitywgs-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:57 2020"}