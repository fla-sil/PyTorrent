{"info": {"author": "Martin Domke", "author_email": "mail@martindomke.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://img.shields.io/pypi/v/pytest-mongodb.svg\n    :target: https://pypi.python.org/pypi/pytest-mongodb\n.. image:: https://travis-ci.org/mdomke/pytest-mongodb.svg?branch=master\n    :target: https://travis-ci.org/mdomke/pytest-mongodb\n.. image:: https://img.shields.io/pypi/l/pytest-mongodb.svg\n    :target: https://pypi.python.org/pypi/pytest-mongodb\n\nWhat is this?\n=============\n\nThis is a pytest_ plugin, that enables you to test your code that relies on a database connection to\na MongoDB and expects certain data to be present.  It allows you to specify fixtures for database\ncollections in JSON/BSON or YAML format. Under the hood we use the mongomock_ library, that you\nshould consult for documentation on how to use MongoDB mock objects. If suitable you can also use a\nreal MongoDB server.\n\n**Note**: This project has been renamed from ``humongous`` to ``pytest-mongodb`` in order to conform\nto the pytest plugin naming convention and to be easier to find on the Python package index. See the\n`migration section <Migration from humongous_>`_ for more information.\n\n\nConfiguration\n-------------\n\nIf you don't want to put your database fixtures on the top-level directory of your package you have\nto specify a directory where ``pytest-mongodb`` looks for your data definitions.\n\nTo do so put a line like the following under the ``pytest`` section of your ``pytest.ini``-file put\na\n\n.. code-block:: ini\n\n    [pytest]\n    mongodb_fixture_dir =\n      tests/unit/fixtures\n\n``pytest-mongodb`` would then look for files ending in ``.yaml`` or ``.json`` in that directory.\n\nIf you want only a subset of the available fixtures to be loaded, you can use the ``mongodb_fixtures``\nconfig option. It takes a list of collection file-names without the file-extension. E.g.:\n\n.. code-block:: ini\n\n    [pytest]\n    mongodb_fixtures =\n      players\n      championships\n\nIn this case only the collections \"players\" and \"championships\" will be loaded.\n\nYou can also choose to use a real MongoDB server for your tests. In that case you might also want to\nconfigure the hostname and/or the credentials if you don't want to stick with the default (localhost\nand no credentials). Use the following configuration values in your ``pytest.ini`` to adapt the\nsettings to your needs:\n\n.. code-block:: ini\n\n    [pytest]\n    mongodb_engine = pymongo\n    mongodb_host = mongodb://user:passwd@server.tld\n    mongodb_dbname = mydbname\n\n\nBasic usage\n-----------\n\nAfter you configured ``pytest-mongodb`` so that it can find your fixtures you're ready to specify\nsome data. Regardless of the markup language you choose, the data is provided as a list of documents\n(dicts). The collection that these documents are being inserted into is given by the filename of\nyour fixture-file. E.g.: If you had a file named ``players.yaml`` with the following content:\n\n.. code-block:: yaml\n\n    -\n      name: Mario\n      surname: G\u00f6tze\n      position: striker\n\n    -\n      name: Manuel\n      surname: Neuer\n      position: keeper\n\n\nyou'd end up with a collection ``players`` that has the above player definitions inserted. If your\nfixture file is in JSON/BSON format you can also use BSON specific types like ``$oid``, ``$date``,\netc.\n\n\nYou get ahold of the database in your test-function by using the ``mongodb`` fixture like so:\n\n.. code-block:: python\n\n    def test_players(mongodb):\n        assert 'players' in mongodb.list_collection_names()\n        manuel = mongodb.players.find_one({'name': 'Manuel'})\n        assert manuel['surname'] == 'Neuer'\n\n\nFor further information refer to the mongomock_ documentation.\n\nIf you want to skip specific tests if the engine is ie. a mongomock engine you could do that like\nso:\n\n\n.. code-block:: python\n\n    from pytest_mongodb.plugin import mongo_engine\n    from pytest import mark\n\n    @mark.skipif(mongo_engine() == 'mongomock', reason=\"mongomock does not support that\")\n    def test_players(mongodb):\n        assert 'players' in mongodb.list_collection_names()\n        manuel = mongodb.players.find_one({'name': 'Manuel'})\n        assert manuel['surname'] == 'Neuer'\n\n\nMigration from humongous\n------------------------\n\nIn the course of migrating the package name from ``humongous`` to ``pytest-mongodb`` most\nconfiguration values which previously were prefixed with ``humongous_`` have been renamed to a\n``mongodb_``-prefixed counterpart. The only notable exception is the ``humongous_basedir`` config\nvalue, which now is named ``mongodb_fixture_dir``.  Additionally the commandline options have been\nunified, in a way that multi-word option names are now consistently separated with dashes instead of\nunderscores.\n\n\n.. _mongomock: https://github.com/vmalloc/mongomock\n.. _pytest: https://docs.pytest.org/en/latest/\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mdomke/pytest-mongodb", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-mongodb", "package_url": "https://pypi.org/project/pytest-mongodb/", "platform": "", "project_url": "https://pypi.org/project/pytest-mongodb/", "project_urls": {"Homepage": "https://github.com/mdomke/pytest-mongodb"}, "release_url": "https://pypi.org/project/pytest-mongodb/2.2.0/", "requires_dist": ["mongomock", "pymongo", "pyyaml (>=5.1)", "pytest (>=2.5.2)"], "requires_python": "", "summary": "pytest plugin for MongoDB fixtures", "version": "2.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/pytest-mongodb\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pytest-mongodb.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e6b738309c3b8c67d70bd70c0f3b1a9c12a5513/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6d6f6e676f64622e737667\"></a>\n<a href=\"https://travis-ci.org/mdomke/pytest-mongodb\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mdomke/pytest-mongodb.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a2b4970c2767d1ca63ed2ae65ecfd899f6e375d/68747470733a2f2f7472617669732d63692e6f72672f6d646f6d6b652f7079746573742d6d6f6e676f64622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-mongodb\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/pytest-mongodb.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3db66841dfc64d2ffe2cc86368abfbfa2f1213b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079746573742d6d6f6e676f64622e737667\"></a>\n<div id=\"what-is-this\">\n<h2>What is this?</h2>\n<p>This is a <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> plugin, that enables you to test your code that relies on a database connection to\na MongoDB and expects certain data to be present.  It allows you to specify fixtures for database\ncollections in JSON/BSON or YAML format. Under the hood we use the <a href=\"https://github.com/vmalloc/mongomock\" rel=\"nofollow\">mongomock</a> library, that you\nshould consult for documentation on how to use MongoDB mock objects. If suitable you can also use a\nreal MongoDB server.</p>\n<p><strong>Note</strong>: This project has been renamed from <tt>humongous</tt> to <tt><span class=\"pre\">pytest-mongodb</span></tt> in order to conform\nto the pytest plugin naming convention and to be easier to find on the Python package index. See the\n<a href=\"#migration-from-humongous\" rel=\"nofollow\">migration section</a> for more information.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>If you don\u2019t want to put your database fixtures on the top-level directory of your package you have\nto specify a directory where <tt><span class=\"pre\">pytest-mongodb</span></tt> looks for your data definitions.</p>\n<p>To do so put a line like the following under the <tt>pytest</tt> section of your <tt>pytest.ini</tt>-file put\na</p>\n<pre><span class=\"k\">[pytest]</span>\n<span class=\"na\">mongodb_fixture_dir</span> <span class=\"o\">=</span><span class=\"s\">\n  tests/unit/fixtures</span>\n</pre>\n<p><tt><span class=\"pre\">pytest-mongodb</span></tt> would then look for files ending in <tt>.yaml</tt> or <tt>.json</tt> in that directory.</p>\n<p>If you want only a subset of the available fixtures to be loaded, you can use the <tt>mongodb_fixtures</tt>\nconfig option. It takes a list of collection file-names without the file-extension. E.g.:</p>\n<pre><span class=\"k\">[pytest]</span>\n<span class=\"na\">mongodb_fixtures</span> <span class=\"o\">=</span><span class=\"s\">\n  players\n  championships</span>\n</pre>\n<p>In this case only the collections \u201cplayers\u201d and \u201cchampionships\u201d will be loaded.</p>\n<p>You can also choose to use a real MongoDB server for your tests. In that case you might also want to\nconfigure the hostname and/or the credentials if you don\u2019t want to stick with the default (localhost\nand no credentials). Use the following configuration values in your <tt>pytest.ini</tt> to adapt the\nsettings to your needs:</p>\n<pre><span class=\"k\">[pytest]</span>\n<span class=\"na\">mongodb_engine</span> <span class=\"o\">=</span> <span class=\"s\">pymongo</span>\n<span class=\"na\">mongodb_host</span> <span class=\"o\">=</span> <span class=\"s\">mongodb://user:passwd@server.tld</span>\n<span class=\"na\">mongodb_dbname</span> <span class=\"o\">=</span> <span class=\"s\">mydbname</span>\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic usage</h3>\n<p>After you configured <tt><span class=\"pre\">pytest-mongodb</span></tt> so that it can find your fixtures you\u2019re ready to specify\nsome data. Regardless of the markup language you choose, the data is provided as a list of documents\n(dicts). The collection that these documents are being inserted into is given by the filename of\nyour fixture-file. E.g.: If you had a file named <tt>players.yaml</tt> with the following content:</p>\n<pre><span class=\"p-Indicator\">-</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Mario</span>\n  <span class=\"nt\">surname</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">G\u00f6tze</span>\n  <span class=\"nt\">position</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">striker</span>\n\n<span class=\"p-Indicator\">-</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Manuel</span>\n  <span class=\"nt\">surname</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Neuer</span>\n  <span class=\"nt\">position</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">keeper</span>\n</pre>\n<p>you\u2019d end up with a collection <tt>players</tt> that has the above player definitions inserted. If your\nfixture file is in JSON/BSON format you can also use BSON specific types like <tt>$oid</tt>, <tt>$date</tt>,\netc.</p>\n<p>You get ahold of the database in your test-function by using the <tt>mongodb</tt> fixture like so:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_players</span><span class=\"p\">(</span><span class=\"n\">mongodb</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"s1\">'players'</span> <span class=\"ow\">in</span> <span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">list_collection_names</span><span class=\"p\">()</span>\n    <span class=\"n\">manuel</span> <span class=\"o\">=</span> <span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">players</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Manuel'</span><span class=\"p\">})</span>\n    <span class=\"k\">assert</span> <span class=\"n\">manuel</span><span class=\"p\">[</span><span class=\"s1\">'surname'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Neuer'</span>\n</pre>\n<p>For further information refer to the <a href=\"https://github.com/vmalloc/mongomock\" rel=\"nofollow\">mongomock</a> documentation.</p>\n<p>If you want to skip specific tests if the engine is ie. a mongomock engine you could do that like\nso:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_mongodb.plugin</span> <span class=\"kn\">import</span> <span class=\"n\">mongo_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest</span> <span class=\"kn\">import</span> <span class=\"n\">mark</span>\n\n<span class=\"nd\">@mark</span><span class=\"o\">.</span><span class=\"n\">skipif</span><span class=\"p\">(</span><span class=\"n\">mongo_engine</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'mongomock'</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"s2\">\"mongomock does not support that\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_players</span><span class=\"p\">(</span><span class=\"n\">mongodb</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"s1\">'players'</span> <span class=\"ow\">in</span> <span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">list_collection_names</span><span class=\"p\">()</span>\n    <span class=\"n\">manuel</span> <span class=\"o\">=</span> <span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">players</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Manuel'</span><span class=\"p\">})</span>\n    <span class=\"k\">assert</span> <span class=\"n\">manuel</span><span class=\"p\">[</span><span class=\"s1\">'surname'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Neuer'</span>\n</pre>\n</div>\n<div id=\"migration-from-humongous\">\n<h3>Migration from humongous</h3>\n<p>In the course of migrating the package name from <tt>humongous</tt> to <tt><span class=\"pre\">pytest-mongodb</span></tt> most\nconfiguration values which previously were prefixed with <tt>humongous_</tt> have been renamed to a\n<tt>mongodb_</tt>-prefixed counterpart. The only notable exception is the <tt>humongous_basedir</tt> config\nvalue, which now is named <tt>mongodb_fixture_dir</tt>.  Additionally the commandline options have been\nunified, in a way that multi-word option names are now consistently separated with dashes instead of\nunderscores.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6259507, "releases": {"2.0.0.dev3": [], "2.0.1": [{"comment_text": "", "digests": {"md5": "c306d6afcaa2d4d52b588b6254c20df2", "sha256": "71d5eef0746ebe23619b600304672abdafe6fe5c7db1d35ab96e0705cbbba6a0"}, "downloads": -1, "filename": "pytest_mongodb-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c306d6afcaa2d4d52b588b6254c20df2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6829, "upload_time": "2016-01-22T11:53:21", "upload_time_iso_8601": "2016-01-22T11:53:21.676020Z", "url": "https://files.pythonhosted.org/packages/12/03/bea7266169a3f71eeed195f27e448cede4db9ed137b7f0d0e946f80f38d2/pytest_mongodb-2.0.1-py2.py3-none-any.whl", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "0429339d98b70f8060cb645e3d4a2b78", "sha256": "34ffa4c4de6e6793d64dcb3ab06ba7f96c4ffe761fe07b6efa7c4629f6857ea0"}, "downloads": -1, "filename": "pytest_mongodb-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0429339d98b70f8060cb645e3d4a2b78", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7318, "upload_time": "2016-01-25T11:18:01", "upload_time_iso_8601": "2016-01-25T11:18:01.114866Z", "url": "https://files.pythonhosted.org/packages/90/e1/de51fec1c40a2238da2171f59cde68c915b3548636d97848639eb63cc281/pytest_mongodb-2.0.2-py2.py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "14ded131f5bc983728ec61f559600f99", "sha256": "bb70483004c2cac7d16e03bec4710b5a18679c88a0b990c1be6508020092b050"}, "downloads": -1, "filename": "pytest_mongodb-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "14ded131f5bc983728ec61f559600f99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7592, "upload_time": "2017-04-29T10:53:17", "upload_time_iso_8601": "2017-04-29T10:53:17.973861Z", "url": "https://files.pythonhosted.org/packages/b3/57/bf78f66843b0dd8a9372ba8fea3c1deb3ff249a4f9861566995b449e78fb/pytest_mongodb-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e432d9c83a2e9b214378c771762a82bb", "sha256": "5ce8d57d85f41beccc46ee3594e6df082f9679f157bba1f1111b679340a69b56"}, "downloads": -1, "filename": "pytest-mongodb-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e432d9c83a2e9b214378c771762a82bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8009, "upload_time": "2017-04-29T10:53:19", "upload_time_iso_8601": "2017-04-29T10:53:19.785196Z", "url": "https://files.pythonhosted.org/packages/0f/82/6ca6e35b8163b4cbdbcd01ccf0bebb2955f58f9d089d72cf0cf269c837f8/pytest-mongodb-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "eb8f00dd006c36fbc5479ab57a0f84d0", "sha256": "67e7226edd5f0a837c5920046dd42af19a95b62c4518117e7330bb8b7651f272"}, "downloads": -1, "filename": "pytest_mongodb-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eb8f00dd006c36fbc5479ab57a0f84d0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7645, "upload_time": "2017-07-22T08:22:57", "upload_time_iso_8601": "2017-07-22T08:22:57.581106Z", "url": "https://files.pythonhosted.org/packages/ad/ab/bf31de733982d190a3e566d28ecf9bc283ec335652a353a5b36920f6b0c9/pytest_mongodb-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63af08ede84be78a2ec4a651c6ea0ac1", "sha256": "5ed7962ec8d8a4628657e1f3cffd8527ca5abdf1b5d702fdc641b63fd81fb5dd"}, "downloads": -1, "filename": "pytest-mongodb-2.1.1.tar.gz", "has_sig": false, "md5_digest": "63af08ede84be78a2ec4a651c6ea0ac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8049, "upload_time": "2017-07-22T08:23:00", "upload_time_iso_8601": "2017-07-22T08:23:00.679884Z", "url": "https://files.pythonhosted.org/packages/f0/77/53af6e0e6922883d8395d06eebbb712a864c8d3b09e020bc6cf2e55af8f5/pytest-mongodb-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "474382970c37b7143c6ad98082ff5ba7", "sha256": "df71d8ea6d730075eacc8909f4bfa56738dbcb7adce4b8c758b6c72e47a34471"}, "downloads": -1, "filename": "pytest_mongodb-2.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "474382970c37b7143c6ad98082ff5ba7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7684, "upload_time": "2017-11-26T23:02:57", "upload_time_iso_8601": "2017-11-26T23:02:57.412512Z", "url": "https://files.pythonhosted.org/packages/6d/26/4d11715867fefcb48462fbb1810bd30e1ba95aa995884b4ba7f3cdb503f8/pytest_mongodb-2.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2931c76a53f50fc1db6e2b88d8b9cedf", "sha256": "6b0d5c3adcfbfb4dd8fea49dc60c4012e6da68e15e28471c7e7082268129b6f6"}, "downloads": -1, "filename": "pytest-mongodb-2.1.2.tar.gz", "has_sig": false, "md5_digest": "2931c76a53f50fc1db6e2b88d8b9cedf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8156, "upload_time": "2017-11-26T23:02:58", "upload_time_iso_8601": "2017-11-26T23:02:58.887588Z", "url": "https://files.pythonhosted.org/packages/65/56/43699e516e1659ab0ea23eb0a313ecff17218a514ad967d9f3c64b7739bb/pytest-mongodb-2.1.2.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "6b9872deb1d202f4a975684ee7a77388", "sha256": "60c25a78ed0e8f76da91598ae191c491bc2ba419bd649015b53ab3d7b6236945"}, "downloads": -1, "filename": "pytest_mongodb-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6b9872deb1d202f4a975684ee7a77388", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5553, "upload_time": "2019-12-07T20:40:59", "upload_time_iso_8601": "2019-12-07T20:40:59.191847Z", "url": "https://files.pythonhosted.org/packages/9a/cf/aa06dd12fc89ad364f5f8d745f1059fdb91a27f058ce91f7225d199705f3/pytest_mongodb-2.2.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b9872deb1d202f4a975684ee7a77388", "sha256": "60c25a78ed0e8f76da91598ae191c491bc2ba419bd649015b53ab3d7b6236945"}, "downloads": -1, "filename": "pytest_mongodb-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6b9872deb1d202f4a975684ee7a77388", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5553, "upload_time": "2019-12-07T20:40:59", "upload_time_iso_8601": "2019-12-07T20:40:59.191847Z", "url": "https://files.pythonhosted.org/packages/9a/cf/aa06dd12fc89ad364f5f8d745f1059fdb91a27f058ce91f7225d199705f3/pytest_mongodb-2.2.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:58 2020"}