{"info": {"author": "Michael Ardron", "author_email": "beep.bop.brew@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3.7", "Topic :: System :: Hardware"], "description": "# beep-bop-brew-Service\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://https://github.com/FA-noway/beep-bop-brew-Service/graphs/commit-activity)\n\n[![Documentation Status](https://readthedocs.org/projects/brewlite-service/badge/?version=latest)](https://brewlite-service.readthedocs.io/en/latest/?badge=latest)\n\n[BrewBlox Service](https://github.com/brewblox/brewblox-service) for the [beep-bop-brew Controller](https://github.com/FA-noway/beep-bop-brew-Hardware)\n\n\n# Boilerplate code for BrewBlox Service implementations\n\nThere is some boilerplate code involved when creating a Brewblox service. This repository can be forked to avoid having to do the boring configuration.\n\nEverything listed under **Required Changes** must be done before the package works as intended.\n\n## How to use\n\n* Fork this repository to your own Github account or project.\n* Follow all steps outlined under the various **Required Changes**.\n* Start coding your service =)\n    * To test, run `pipenv run pytest`\n\n\n## Files\n\n---\n### [setup.py](./setup.py)\nUsed to create a distributable and installable Python package. See https://docs.python.org/3.6/distutils/setupscript.html for more information.\n\n**Required Changes:**\n* Change the `name` variable to your project name. This is generally the same as the repository name. This name is used when installing the package through Pip. </br> It is common for this name to equal the package name, but using \"`-`\" as separator instead of \"`_`\".\n* Change the `url` parameter to the url of your repository.\n* Change the `author` parameter to your name.\n* Change the `author_email` parameter to your email.\n\n\n---\n### [tox.ini](./tox.ini)\nDeveloper tools such as [Tox](http://tox.readthedocs.io/en/latest/index.html), [Pytest](https://docs.pytest.org/en/latest/), [Flake8](http://flake8.pycqa.org/en/latest/), and [Autopep8](https://github.com/hhatto/autopep8) use this file to find configuration options.\n\n**Required Changes:**\n* Change `--cov=YOUR_PACKAGE` to refer to your module name.\n* The `--cov-fail-under=100` makes the build fail if code coverage is less than 100%. It is optional, but recommended. Remove the `#` comment character to enable it.\n\n\n---\n### [.env](./.env)\nProject-specific environment variables can be stored here. `Pipenv` will automatically load it when executing a command in `pipenv run`.\n\nBy default, the names of the Docker and Github repositories are stored here. They are read during the CI build.\n\n---\n### [Pipfile](./Pipfile)\n[Pipenv](https://docs.pipenv.org/) is used to streamline development. It manages dependencies and virtual environments. It also automatically loads environment variables declared in `.env`.\n\n`Pipfile` lists all dependencies. Everything under [packages] is needed for the package to run, while everything under [dev-packages] is needed to run the tests.\n\nYou can use `pipenv install <package name>` or `pipenv install --dev <package name>` to add dependencies.\n\n**Note:** There is overlap between the [packages] section in `Pipfile`, and the `install_requires=[]` list in `setup.py`. The rule of thumb is that if you need an external package to run, you should add it to both.\n\n**Required Changes:**\n* Install pipenv (run `sudo pip3 install pipenv`)\n* Update the `Pipfile.lock` file (run `pipenv lock`)\n* Install all packages (run `pipenv sync -d`)\n\n\n---\n### [MANIFEST.in](./MANIFEST.in)\nThis file lists all non-code files that should be part of the package.\nSee https://docs.python.org/3.6/distutils/sourcedist.html#specifying-the-files-to-distribute for more info.\n\nFor a basic service, you do not need to change anything in this file.\n\n\n---\n### [.editorconfig](./.editorconfig)\nThis file contains [EditorConfig](https://editorconfig.org/) configuration for this project. </br>\nAmong other things, it describes per file type whether it uses tabs or spaces.\n\nFor a basic service, you do not need to change anything in this file.\nHowever, it is recommended to use an editor that recognizes and uses `.editorconfig` files.\n\n\n---\n### [README.md](./README.md)\nYour module readme (this file). It will be the package description on Pypi.org, and automatically be displayed in Github.\n\n**Required Changes:**\n* Add all important info about your package here. What does your package do? How do you use it? What is your favorite color?\n\n\n---\n### [YOUR_PACKAGE/](./YOUR_PACKAGE/)\n[\\_\\_main\\_\\_.py](./YOUR_PACKAGE/__main__.py),\n[events_example.py](./YOUR_PACKAGE/events_example.py),\n[http_example.py](./YOUR_PACKAGE/http_example.py),\n[poll_example.py](./YOUR_PACKAGE/poll_example.py)\n\nYour module. The directory name is used when importing your code in Python.\n\nYou can find examples for common service actions here.\n\n**Required Changes:**\n* Rename to the desired module name. This name can't include \"`-`\" characters. </br>\nIt is common for single-module projects to use \"`-`\" as a separator for the project name, and \"`_`\" for the module. </br>\nFor example: `your-package` and `your_package`.\n* Change the import statements in .py files from `YOUR_PACKAGE` to your package name.\n\n---\n### [test/conftest.py](./test/conftest.py)\nProject-level pytest fixtures. Some useful fixtures for testing any brewblox_service implementation are defined here. See tests in https://github.com/BrewBlox/brewblox-service/tree/develop/test for examples on how to use.\n\n\n**Required Changes:**\n* Change the import from `YOUR_PACKAGE` to your package name.\n\n\n---\n### [test/test_http_example.py](./test/test_http_example.py)\nAn example on how to test aiohttp endpoints you added. Feel free to remove this once you no longer need it.\n\n\n---\n### [docker/amd/Dockerfile](./docker/amd/Dockerfile)\nA docker file for running your package. To build, you need to copy the local version of your python package to `docker/dist/` first.\n\nThe Dockerfiles are set up so both the AMD (desktop) and ARM variants can use the same input files.\n\nExample:\n```bash\npython3 setup.py sdist\n\nrm docker/dist/*\ncp dist/* docker/dist/\npipenv lock --requirements > docker/requirements.txt\n\ndocker build \\\n    --tag your-package:your-version \\\n    --file docker/amd/Dockerfile \\\n    docker/\n\n# run it\ndocker run your-package:your-version\n```\n\nTo cover the most common use cases, the `brewblox-dev` CLI tool has the `localbuild` function.\n\nIt will read your .env file, run sdist, copy configuration to the docker directory, and build an image. Example:\n\n```bash\nbrewblox-dev localbuild\ndocker run your-package:local\n```\n\nExplore its other arguments with `brewblox-dev --help`\n\n**Required Changes:**\n* Rename instances of `YOUR-PACKAGE` and `YOUR_PACKAGE` in the docker file to desired project and package names.\n\n\n---\n### [docker/arm/Dockerfile](./docker/arm/Dockerfile)\nThe same as for `docker/amd/Dockerfile`, but for Raspberry Pi targets.\n\nIn order to build for Raspberry, you must also first enable the ARM compiler.\n\nExample:\n```bash\npython3 setup.py sdist\n\nrm docker/dist/*\ncp dist/* docker/dist/\npipenv lock --requirements > docker/requirements.txt\n\n# Enable ARM compiler\ndocker run --rm --privileged multiarch/qemu-user-static:register --reset\n\n# Build the Raspberry Pi version\ndocker build \\\n    --tag your-package:rpi-your-version \\\n    --file docker/arm/Dockerfile \\\n    docker/\n\n# Try to run Raspberry version\n# On the desktop, this will fail with \"standard_init_linux.go:190: exec user process caused \"exec format error\"\"\ndocker run --detach your-package:rpi-your-version\n```\n\n`brewblox-dev localbuild` can also generate ARM images. It will automatically enable the QEMU compiler, and prefix the tag with `rpi-`. To use:\n\n```\nbrewblox-dev localbuild --arch arm\ndocker run your-package:rpi-local\n```\n\n**Required Changes:**\n* Rename instances of `YOUR-PACKAGE` and `YOUR_PACKAGE` in the docker file to desired project and package names.\n\n\n---\n### [azure-pipelines.yml](./azure-pipelines.yml)\n[Azure](https://dev.azure.com) can automatically test and deploy all commits you push to GitHub. If you haven't enabled Azure Pipelines for your repository: don't worry, it won't do anything.\n\nTo deploy your software, you will also need [PyPi](https://pypi.org/) and [Docker Hub](https://hub.docker.com/) accounts.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FA-noway/beep-bop-brew-Service", "keywords": "brewing brewpi brewblox embedded plugin service", "license": "", "maintainer": "", "maintainer_email": "", "name": "beep-bop-brew-Service", "package_url": "https://pypi.org/project/beep-bop-brew-Service/", "platform": "", "project_url": "https://pypi.org/project/beep-bop-brew-Service/", "project_urls": {"Homepage": "https://github.com/FA-noway/beep-bop-brew-Service"}, "release_url": "https://pypi.org/project/beep-bop-brew-Service/0.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>beep-bop-brew-Service</h1>\n<p><a href=\"https://https://github.com/FA-noway/beep-bop-brew-Service/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90bf1b2a4d99698c4dffbc494b9734690a777fec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d677265656e2e737667\"></a></p>\n<p><a href=\"https://brewlite-service.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef866e6f972b99847edb504b44e0109b6e292eb1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f627265776c6974652d736572766963652f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><a href=\"https://github.com/brewblox/brewblox-service\" rel=\"nofollow\">BrewBlox Service</a> for the <a href=\"https://github.com/FA-noway/beep-bop-brew-Hardware\" rel=\"nofollow\">beep-bop-brew Controller</a></p>\n<h1>Boilerplate code for BrewBlox Service implementations</h1>\n<p>There is some boilerplate code involved when creating a Brewblox service. This repository can be forked to avoid having to do the boring configuration.</p>\n<p>Everything listed under <strong>Required Changes</strong> must be done before the package works as intended.</p>\n<h2>How to use</h2>\n<ul>\n<li>Fork this repository to your own Github account or project.</li>\n<li>Follow all steps outlined under the various <strong>Required Changes</strong>.</li>\n<li>Start coding your service =)\n<ul>\n<li>To test, run <code>pipenv run pytest</code></li>\n</ul>\n</li>\n</ul>\n<h2>Files</h2>\n<hr>\n<h3><a href=\"./setup.py\" rel=\"nofollow\">setup.py</a></h3>\n<p>Used to create a distributable and installable Python package. See <a href=\"https://docs.python.org/3.6/distutils/setupscript.html\" rel=\"nofollow\">https://docs.python.org/3.6/distutils/setupscript.html</a> for more information.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Change the <code>name</code> variable to your project name. This is generally the same as the repository name. This name is used when installing the package through Pip. <br> It is common for this name to equal the package name, but using \"<code>-</code>\" as separator instead of \"<code>_</code>\".</li>\n<li>Change the <code>url</code> parameter to the url of your repository.</li>\n<li>Change the <code>author</code> parameter to your name.</li>\n<li>Change the <code>author_email</code> parameter to your email.</li>\n</ul>\n<hr>\n<h3><a href=\"./tox.ini\" rel=\"nofollow\">tox.ini</a></h3>\n<p>Developer tools such as <a href=\"http://tox.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Tox</a>, <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">Pytest</a>, <a href=\"http://flake8.pycqa.org/en/latest/\" rel=\"nofollow\">Flake8</a>, and <a href=\"https://github.com/hhatto/autopep8\" rel=\"nofollow\">Autopep8</a> use this file to find configuration options.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Change <code>--cov=YOUR_PACKAGE</code> to refer to your module name.</li>\n<li>The <code>--cov-fail-under=100</code> makes the build fail if code coverage is less than 100%. It is optional, but recommended. Remove the <code>#</code> comment character to enable it.</li>\n</ul>\n<hr>\n<h3><a href=\"./.env\" rel=\"nofollow\">.env</a></h3>\n<p>Project-specific environment variables can be stored here. <code>Pipenv</code> will automatically load it when executing a command in <code>pipenv run</code>.</p>\n<p>By default, the names of the Docker and Github repositories are stored here. They are read during the CI build.</p>\n<hr>\n<h3><a href=\"./Pipfile\" rel=\"nofollow\">Pipfile</a></h3>\n<p><a href=\"https://docs.pipenv.org/\" rel=\"nofollow\">Pipenv</a> is used to streamline development. It manages dependencies and virtual environments. It also automatically loads environment variables declared in <code>.env</code>.</p>\n<p><code>Pipfile</code> lists all dependencies. Everything under [packages] is needed for the package to run, while everything under [dev-packages] is needed to run the tests.</p>\n<p>You can use <code>pipenv install &lt;package name&gt;</code> or <code>pipenv install --dev &lt;package name&gt;</code> to add dependencies.</p>\n<p><strong>Note:</strong> There is overlap between the [packages] section in <code>Pipfile</code>, and the <code>install_requires=[]</code> list in <code>setup.py</code>. The rule of thumb is that if you need an external package to run, you should add it to both.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Install pipenv (run <code>sudo pip3 install pipenv</code>)</li>\n<li>Update the <code>Pipfile.lock</code> file (run <code>pipenv lock</code>)</li>\n<li>Install all packages (run <code>pipenv sync -d</code>)</li>\n</ul>\n<hr>\n<h3><a href=\"./MANIFEST.in\" rel=\"nofollow\">MANIFEST.in</a></h3>\n<p>This file lists all non-code files that should be part of the package.\nSee <a href=\"https://docs.python.org/3.6/distutils/sourcedist.html#specifying-the-files-to-distribute\" rel=\"nofollow\">https://docs.python.org/3.6/distutils/sourcedist.html#specifying-the-files-to-distribute</a> for more info.</p>\n<p>For a basic service, you do not need to change anything in this file.</p>\n<hr>\n<h3><a href=\"./.editorconfig\" rel=\"nofollow\">.editorconfig</a></h3>\n<p>This file contains <a href=\"https://editorconfig.org/\" rel=\"nofollow\">EditorConfig</a> configuration for this project. <br>\nAmong other things, it describes per file type whether it uses tabs or spaces.</p>\n<p>For a basic service, you do not need to change anything in this file.\nHowever, it is recommended to use an editor that recognizes and uses <code>.editorconfig</code> files.</p>\n<hr>\n<h3><a href=\"./README.md\" rel=\"nofollow\">README.md</a></h3>\n<p>Your module readme (this file). It will be the package description on Pypi.org, and automatically be displayed in Github.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Add all important info about your package here. What does your package do? How do you use it? What is your favorite color?</li>\n</ul>\n<hr>\n<h3><a href=\"./YOUR_PACKAGE/\" rel=\"nofollow\">YOUR_PACKAGE/</a></h3>\n<p><a href=\"./YOUR_PACKAGE/__main__.py\" rel=\"nofollow\">__main__.py</a>,\n<a href=\"./YOUR_PACKAGE/events_example.py\" rel=\"nofollow\">events_example.py</a>,\n<a href=\"./YOUR_PACKAGE/http_example.py\" rel=\"nofollow\">http_example.py</a>,\n<a href=\"./YOUR_PACKAGE/poll_example.py\" rel=\"nofollow\">poll_example.py</a></p>\n<p>Your module. The directory name is used when importing your code in Python.</p>\n<p>You can find examples for common service actions here.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Rename to the desired module name. This name can't include \"<code>-</code>\" characters. <br>\nIt is common for single-module projects to use \"<code>-</code>\" as a separator for the project name, and \"<code>_</code>\" for the module. <br>\nFor example: <code>your-package</code> and <code>your_package</code>.</li>\n<li>Change the import statements in .py files from <code>YOUR_PACKAGE</code> to your package name.</li>\n</ul>\n<hr>\n<h3><a href=\"./test/conftest.py\" rel=\"nofollow\">test/conftest.py</a></h3>\n<p>Project-level pytest fixtures. Some useful fixtures for testing any brewblox_service implementation are defined here. See tests in <a href=\"https://github.com/BrewBlox/brewblox-service/tree/develop/test\" rel=\"nofollow\">https://github.com/BrewBlox/brewblox-service/tree/develop/test</a> for examples on how to use.</p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Change the import from <code>YOUR_PACKAGE</code> to your package name.</li>\n</ul>\n<hr>\n<h3><a href=\"./test/test_http_example.py\" rel=\"nofollow\">test/test_http_example.py</a></h3>\n<p>An example on how to test aiohttp endpoints you added. Feel free to remove this once you no longer need it.</p>\n<hr>\n<h3><a href=\"./docker/amd/Dockerfile\" rel=\"nofollow\">docker/amd/Dockerfile</a></h3>\n<p>A docker file for running your package. To build, you need to copy the local version of your python package to <code>docker/dist/</code> first.</p>\n<p>The Dockerfiles are set up so both the AMD (desktop) and ARM variants can use the same input files.</p>\n<p>Example:</p>\n<pre>python3 setup.py sdist\n\nrm docker/dist/*\ncp dist/* docker/dist/\npipenv lock --requirements &gt; docker/requirements.txt\n\ndocker build <span class=\"se\">\\</span>\n    --tag your-package:your-version <span class=\"se\">\\</span>\n    --file docker/amd/Dockerfile <span class=\"se\">\\</span>\n    docker/\n\n<span class=\"c1\"># run it</span>\ndocker run your-package:your-version\n</pre>\n<p>To cover the most common use cases, the <code>brewblox-dev</code> CLI tool has the <code>localbuild</code> function.</p>\n<p>It will read your .env file, run sdist, copy configuration to the docker directory, and build an image. Example:</p>\n<pre>brewblox-dev localbuild\ndocker run your-package:local\n</pre>\n<p>Explore its other arguments with <code>brewblox-dev --help</code></p>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Rename instances of <code>YOUR-PACKAGE</code> and <code>YOUR_PACKAGE</code> in the docker file to desired project and package names.</li>\n</ul>\n<hr>\n<h3><a href=\"./docker/arm/Dockerfile\" rel=\"nofollow\">docker/arm/Dockerfile</a></h3>\n<p>The same as for <code>docker/amd/Dockerfile</code>, but for Raspberry Pi targets.</p>\n<p>In order to build for Raspberry, you must also first enable the ARM compiler.</p>\n<p>Example:</p>\n<pre>python3 setup.py sdist\n\nrm docker/dist/*\ncp dist/* docker/dist/\npipenv lock --requirements &gt; docker/requirements.txt\n\n<span class=\"c1\"># Enable ARM compiler</span>\ndocker run --rm --privileged multiarch/qemu-user-static:register --reset\n\n<span class=\"c1\"># Build the Raspberry Pi version</span>\ndocker build <span class=\"se\">\\</span>\n    --tag your-package:rpi-your-version <span class=\"se\">\\</span>\n    --file docker/arm/Dockerfile <span class=\"se\">\\</span>\n    docker/\n\n<span class=\"c1\"># Try to run Raspberry version</span>\n<span class=\"c1\"># On the desktop, this will fail with \"standard_init_linux.go:190: exec user process caused \"exec format error\"\"</span>\ndocker run --detach your-package:rpi-your-version\n</pre>\n<p><code>brewblox-dev localbuild</code> can also generate ARM images. It will automatically enable the QEMU compiler, and prefix the tag with <code>rpi-</code>. To use:</p>\n<pre><code>brewblox-dev localbuild --arch arm\ndocker run your-package:rpi-local\n</code></pre>\n<p><strong>Required Changes:</strong></p>\n<ul>\n<li>Rename instances of <code>YOUR-PACKAGE</code> and <code>YOUR_PACKAGE</code> in the docker file to desired project and package names.</li>\n</ul>\n<hr>\n<h3><a href=\"./azure-pipelines.yml\" rel=\"nofollow\">azure-pipelines.yml</a></h3>\n<p><a href=\"https://dev.azure.com\" rel=\"nofollow\">Azure</a> can automatically test and deploy all commits you push to GitHub. If you haven't enabled Azure Pipelines for your repository: don't worry, it won't do anything.</p>\n<p>To deploy your software, you will also need <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPi</a> and <a href=\"https://hub.docker.com/\" rel=\"nofollow\">Docker Hub</a> accounts.</p>\n\n          </div>"}, "last_serial": 6398750, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "07b41bdc8118205ff59114f20cb0ed62", "sha256": "737dd656dfebf1cc5ce195fc26764c36438af9859b998b3106fdfd34ed6dfbcf"}, "downloads": -1, "filename": "beep-bop-brew-Service-0.1.tar.gz", "has_sig": false, "md5_digest": "07b41bdc8118205ff59114f20cb0ed62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9368, "upload_time": "2020-01-05T16:20:05", "upload_time_iso_8601": "2020-01-05T16:20:05.335204Z", "url": "https://files.pythonhosted.org/packages/ab/75/b0aa3d40b4c2e5e290525a9bc20f99ae82dcf35876039fb2b58eeb8d2e4d/beep-bop-brew-Service-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07b41bdc8118205ff59114f20cb0ed62", "sha256": "737dd656dfebf1cc5ce195fc26764c36438af9859b998b3106fdfd34ed6dfbcf"}, "downloads": -1, "filename": "beep-bop-brew-Service-0.1.tar.gz", "has_sig": false, "md5_digest": "07b41bdc8118205ff59114f20cb0ed62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9368, "upload_time": "2020-01-05T16:20:05", "upload_time_iso_8601": "2020-01-05T16:20:05.335204Z", "url": "https://files.pythonhosted.org/packages/ab/75/b0aa3d40b4c2e5e290525a9bc20f99ae82dcf35876039fb2b58eeb8d2e4d/beep-bop-brew-Service-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:53 2020"}