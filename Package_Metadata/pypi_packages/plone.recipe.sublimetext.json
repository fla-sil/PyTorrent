{"info": {"author": "Md Nazrul Islam", "author_email": "email2nazrul@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.0", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": ".. image:: https://img.shields.io/pypi/status/plone.recipe.sublimetext.svg\n    :target: https://pypi.python.org/pypi/plone.recipe.sublimetext/\n    :alt: Egg Status\n\n.. image:: https://img.shields.io/travis/collective/plone.recipe.sublimetext/master.svg\n    :target: http://travis-ci.org/collective/plone.recipe.sublimetext\n    :alt: Travis Build Status\n\n.. image:: https://img.shields.io/coveralls/collective/plone.recipe.sublimetext/master.svg\n    :target: https://coveralls.io/r/collective/plone.recipe.sublimetext\n    :alt: Test Coverage\n\n.. image:: https://img.shields.io/pypi/pyversions/plone.recipe.sublimetext.svg\n    :target: https://pypi.python.org/pypi/plone.recipe.sublimetext/\n    :alt: Python Versions\n\n.. image:: https://img.shields.io/pypi/v/plone.recipe.sublimetext.svg\n    :target: https://pypi.python.org/pypi/plone.recipe.sublimetext/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/plone.recipe.sublimetext.svg\n    :target: https://pypi.python.org/pypi/plone.recipe.sublimetext/\n    :alt: License\n\n\n.. contents::\n\nIntroduction\n============\n\n``plone.recipe.sublimetext`` is the buildout recipe for `ST3`_ lover who wants python IDE like features while developing python `Buildout`_ based project. This tool will help them to create per project basis sublimetext settings with appropriate paths location assignment. Currently ``plone.recipe.sublimetext`` comes with supporting settings for `Anaconda`_ (the all-in-one package), `Jedi`_, `Sublimelinter`_, `Sublimelinter-Flake8`_, `Sublimelinter-Pylint`_.\nA general question may arise that why we will use this tool, whether we can create `ST3`_ project settings easily (we have better knowledge over `ST3`_ configuration)?\nWell i completely agree with you, but if you want to get benefited from `Anaconda`_ or `Jedi`_'s python autocompletion feature (basically I am lover of autocompletion), you have to add all eggs links for `Anaconda`_ or `Jedi`_'s paths settings and it is hard to manage eggs links manually if the size of project is big (think about any `Plone`_ powered project), beside `Sublimelinter-Pylint`_ also need list of paths to be added to sys.path  to find modules.\n\nInstallation\n============\n\nInstall ``plone.recipe.sublimetext`` is simple enough, just need to create a section for ``sublimetext`` to your buildout. Before using ``plone.recipe.sublimetext`` make sure  `Jedi`_, `Sublimelinter`_, `Sublimelinter-Flake8`_ and/or `Sublimelinter-Pylint`_ plugins are already installed at your `ST3`_. You could follow full [`instruction here\n<https://nazrulworld.wordpress.com/2017/05/06/make-sublime-text-as-the-best-ide-for-full-stack-python-development>`_] if not your `ST3`_ setup yet. Flake8 linter need `flake8 executable <https://pypi.python.org/pypi/flake8>`_ available globally (unless you are going to use local flake8), also it is recommended you install some awsome flake8 plugins (flake8-isort, flake8-coding, pep8-naming, flake8-blind-except, flake8-quotes and more could find in pypi)\n\n    Example Buildout::\n\n        [buildout]\n        parts += sublimetext\n\n        [sublimetext]\n        recipe = plone.recipe.sublimetext\n        eggs = ${buildout:eggs}\n        jedi-enabled = True\n        sublimelinter-enabled = True\n        sublimelinter-pylint-enabled = True\n\nAvailable Options\n-----------------\n\neggs\n    Required: Yes\n\n    Default: None\n\n    Your project's list of eggs, those are going to be added in path location for `Jedi`_ and/or `Sublimelinter-Pylint`_ or `Anaconda`_.\n\noverwrite\n    Required: No\n\n    Default: False\n\n    This option indicates whether existing settings should be cleaned first or just updating changes.\n    This situation may happen, you did create settings file manually with other configuration (those are not managed by ``plone.recipe.sublimetext``) and you want keep those settings intact.\n\npython-executable\n    Required: No\n\n    Default: ``plone.recipe.sublimetext`` will find current python executable path.\n\n    The python executable path for current project, if you are using virtual environment then should be that python path. FYI: ${home} and ${project} variable should work.\n\nproject-name\n    Required: No\n\n    Default: if you have a existing `ST3`_ project file(settings file) in project/buildout's root directory, ``plone.recipe.sublimetext`` will choose it as ``project-name``, other than project/buildout directory name will become as ``project-name``\n\n    Don't add suffix ``.sublime-project``, when you provide the project name.\n\njedi-enabled\n    Required: No\n\n    Default: False\n\n    This option is related to enable/disable Sublime `Jedi`_\n\njedi-use-omelette\n    Required: No\n\n    Default: False\n\n    Use the omelette as basis for jedi autocompletion and go-to-definition. See `collective.recipe.omelette <https://pypi.python.org/pypi/collective.recipe.omelette>`_\n\nomelette-location\n    Required: No\n\n    Default: ${buildout:directory}/parts/omelette - the default omelette location.\n\n    For use with jedi-use-omelette, but unless the omelette is installed at a custom location, the default should be fine.\n\nsublimelinter-enabled\n    Required: No\n\n    Default: False\n\n    Whether `Sublimelinter`_'s features you want to use or not.\n\nsublimelinter-pylint-enabled\n    Required: No\n\n    Default: False\n\n     If you want to use `Sublimelinter-Pylint`_ or not; ``sublimelinter-enabled`` option will be respected, means if parent option is set as disabled but you enable this option will not work.\n\nsublimelinter-pylint-executable\n    Required: No\n\n    Default: ''\n\n    You could provide buildout specific pylint executable. It is very flexible way to avoid using global pylint.\n    Example of relative path usecase:\n    i.) `${buildout:directory}/bin/pylint`\n    ii.) `$project_path/bin/pylint`\n    iii.) `./bin/pylint`\n    iv.) `~/path/bin/pylint`\n\n\nsublimelinter-pylint-args\n    Required: No\n\n    Default: ''\n\n    @see bellow at ``sublimelinter-flake8-args`` section for full detail.\n\n\n\nsublimelinter-flake8-enabled\n    Required: No\n\n    Default: False\n\n    Whether you want to use `Sublimelinter-Flake8`_ or not. Like ``sublimelinter-pylint-enabled`` parent option will be respected.\n\nsublimelinter-flake8-executable\n    Required: No\n\n    Default: ''\n\n    Project specific `Flake8`_ executable path, this will give you lots flexibility over using global `Flake8`_ executable, because each project might have separate `Python`_ version. You could use buildout or user's relative directory path and it is very convenient for collboration works where all members' absolute path of flake8 excecutable may not be the same!\n    Example of relative path usecase:\n    i.) `${buildout:directory}/bin/flake8`\n    ii.) `$project_path/bin/flake8`\n    iii.) `./bin/flake8`\n    iv.) `~/path/bin/flake8`\n\n\nsublimelinter-flake8-args\n    Required: No\n\n    Default: ''\n\n    It is possible to `provide arguments (options) <http://flake8.pycqa.org/en/latest/user/options.html#full-listing-of-options-and-their-descriptions>`_ for ``flake8`` executable project specific.\n    You have to follow a simple format to provide `multiple arguments aka <http://www.sublimelinter.com/en/stable/linter_settings.html#args>`_ flake8 options thanks to buildout for making our life easy. Format ``{option name}={option value(optional if the arg boolen type)}`` ``max-line-length=90``, it is remarkable that ``--`` prefix is not required, you can provide multiple arguments separated by ``space`` and/or ``newline``\n\n    1. sublimelinter-flake8-args = max-line-length=90  --show-source\n\n    2. sublimelinter-flake8-args = max-line-length=90  --show-source\n                                output-file=path_to_file\n\n\n\nanaconda-enabled\n    Required: No\n\n    Default: False\n\n    This option is related to whether you want to enable `Anaconda`_ the all-in-one python IDE package!\n\nanaconda-linting-enabled\n    Required: No\n\n    Default: True\n\n    If want to other library for liniting (i.e sublimelinter), keep it disabled, other than should be enabled. Like other parent options, it will respect parent (``anaconda-enabled``) option.\n\nanaconda-completion-enabled\n    Required: No\n\n    Default: True\n\n    Anaconda is using `Jedi`_ engine for autocompletion, but if you want to use Sublime-Jedi other than provided by Anaconda, make it disabled.\n\nanaconda-pylint-enabled\n    Required: No\n\n    Default: False\n\n    By default `Anaconda`_ liniting doing validation using PyFlakes, PEP8, PEP257. But you can use Pylint instead of PyFlakes by enabling this option.\n\nanaconda-validate-imports\n    Required: No\n\n    Default: True\n\n    It is always good that you want to see any invalid imports (for example: ``from fake.foo import bar``), but if you don't want this just disabled this option.\n\nanaconda-pep8-ignores\n    Required: No\n\n    Default: ''\n\n    If you want ignore some pep8 checklist (i.e N802 is for pep8 naming). Each ignore should be separated by ``space`` and/or ``newline``.\n\nanaconda-pep257-enabled\n    Required: No\n\n    Default: False\n\n    Indicates whether you want to active ``pep257`` checklist by anaconda.\n\nanaconda-pep257-ignores\n    Required: No\n\n    Default: ''\n\n    If you want ignore some pep8 checklist (i.e N802 is for pep8 naming). Each ignore should be separated by ``space`` and/or ``newline``.\n\nignore-develop\n    Required: No\n\n    Default: False\n\n    If you don't want development eggs, should go for autocompletion.\n\nignores\n    Required: No\n\n    Default: \"\"\n\n    If you want specific eggs should not go for autocompletion.\n\npackages\n    Required: No\n\n    Default: \"\"\n\n    Location of some python scripts or non standard modules (don't have setup file), you want to be in system path.\n\nLinks\n=====\n\nCode repository:\n\n    https://github.com/collective/plone.recipe.sublimetext\n\nContinuous Integration:\n\n    https://travis-ci.org/collective/plone.recipe.sublimetext\n\nIssue Tracker:\n\n    https://github.com/collective/plone.recipe.sublimetext/issues\n\n\nKnown Issues\n============\n\n- `Sublimelinter-Flake8`_ might stop working if `flake8-plone-api <https://pypi.python.org/pypi/flake8-plone-api>`_ is installed as until 1.2 version, `flake8-plone-api` don't support SublimeText (linting), see pull request `here <https://github.com/gforcada/flake8-plone-api/pull/18>`_ . That means upcoming version will support hopefully. It could happen, either you are using global or virtualenv flake8. You can see error in `ST3`_ console::\n\n    flake8_plone_api-1.2-py2.7.egg/flake8_plone_api.py\", line 16, in run\n    with open(self.filename) as f:\n    IOError: [Errno 2] No such file or directory: 'stdin'\n\n\n.. _`ST3`: https://www.sublimetext.com/3\n.. _`Buildout`: http://www.buildout.org/en/latest/\n.. _`Jedi`: https://github.com/srusskih/SublimeJEDI\n.. _`Sublimelinter`: http://sublimelinter.readthedocs.io/en/latest/\n.. _`Sublimelinter-Flake8`: https://github.com/SublimeLinter/SublimeLinter-flake8\n.. _`Sublimelinter-Pylint`: https://github.com/SublimeLinter/SublimeLinter-pylint\n.. _`Plone`: https://plone.org/\n.. _`Flake8`: https://pypi.python.org/pypi/flake8\n.. _`Python`: https://www.python.org/\n.. _`Anaconda`: https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\n\n\nExample Usage\n=============\n\nMinimal buildout::\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = .\n    ... eggs =\n    ...     zc.buildout\n    ... parts = sublimetext\n    ...\n    ... [sublimetext]\n    ... recipe = plone.recipe.sublimetext\n    ... project-name = plone-recipe-sublime\n    ... eggs = ${buildout:eggs}\n    ... jedi-enabled = True\n    ... \"\"\")\n    >>> system(buildout + ' -c buildout.cfg')\n    >>> import os\n    >>> os.path.exists('plone-recipe-sublime.sublime-project')\n    True\n\nStandard buildout::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = .\n    ... eggs =\n    ...     zc.buildout\n    ... parts = sublimetext\n    ...\n    ... [sublimetext]\n    ... recipe = plone.recipe.sublimetext\n    ... project-name = plone-recipe-sublime\n    ... eggs = ${buildout:eggs}\n    ... jedi-enabled = True\n    ... sublimelinter-enabled = True\n    ... sublimelinter-flake8-enabled = True\n    ... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n    ... \"\"\")\n    >>> system(buildout + ' -c buildout.cfg')\n    >>> import json\n    >>> settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n    >>> 'Sublimelinter.linters.flake8.enable' in settings['settings']\n    True\n\nMuilti linters and without project name::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = .\n    ... eggs =\n    ...     zc.buildout\n    ... parts = sublimetext\n    ...\n    ... [sublimetext]\n    ... recipe = plone.recipe.sublimetext\n    ... eggs = ${buildout:eggs}\n    ... jedi-enabled = True\n    ... sublimelinter-enabled = True\n    ... sublimelinter-flake8-enabled = True\n    ... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n    ... sublimelinter-pylint-enabled = True\n    ... \"\"\")\n    >>> system(buildout + ' -c buildout.cfg')\n\n(project filename should be ``plone-recipe-sublime.sublime-project`` as previously generated)::\n\n    >>> settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n    >>> 'pylint' in settings['Sublimelinter']['linters']\n    True\n\nUsages Anaconda for all purpose (linting, autocompletion) and rest of all are not used::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = .\n    ... eggs =\n    ...     zc.buildout\n    ... parts = sublimetext\n    ...\n    ... [sublimetext]\n    ... recipe = plone.recipe.sublimetext\n    ... project-name = plone-recipe-sublime\n    ... eggs = ${buildout:eggs}\n    ... anaconda-enabled = True\n    ... anaconda-pep8-ignores =\n    ...     N802\n    ... \"\"\")\n    >>> system(buildout + ' -c buildout.cfg')\n    >>> import json\n    >>> settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n    >>> 'build_systems' in settings.keys()\n    True\n    >>> 'extra_paths' in settings['settings'].keys()\n    True\n    >>> settings['settings']['anaconda_linting']\n    True\n    >>> settings['settings']['use_pylint']\n    False\n\n\nFlake8 linter with flake8 arguments::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop = .\n    ... eggs =\n    ...     zc.buildout\n    ... parts = sublimetext\n    ...\n    ... [sublimetext]\n    ... recipe = plone.recipe.sublimetext\n    ... project-name = plone-recipe-sublime\n    ... eggs = ${buildout:eggs}\n    ... jedi-enabled = True\n    ... sublimelinter-enabled = True\n    ... sublimelinter-flake8-enabled = True\n    ... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n    ... sublimelinter-flake8-args = max-complexity=10  max-line-length=119\n    ...                             exclude=docs,*.egg.,omelette\n    ... \"\"\")\n    >>> system(buildout + ' -c buildout.cfg')\n\n(project filename should be ``plone-recipe-sublime.sublime-project``)::\n\n    >>> settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n    >>> len(settings['settings']['Sublimelinter.linters.flake8.args']) == 3\n    True\n\nContributors\n============\n\n- Md Nazrul Islam<email2nazrul@gmail.com>, Original Author\n\n- Sune Br\u00f8ndum W\u00f8ller [sunew]\n\nChangelog\n=========\n\n1.3.0 (2019-02-04)\n------------------\n\nNew features:\n\n- `Sublime\u200bLinter linter arguments are possible <http://www.sublimelinter.com/en/latest/linter_settings.html#args>`_ to provide linter specific options. Currently ``sublimelinter-flake8`` and ``sublimelinter-pylint`` are supported.\n\n- `New style Sublime\u200bLinter linter settings <http://www.sublimelinter.com/en/stable/settings.html#project-settings>`_ generation has been added. [nazrulworld]\n\n- More options (``anaconda-pep257-enabled``, ``anaconda-pep257-ignores``) added for Anaconda settings.\n\n\n1.2.0 (2018-03-05)\n------------------\n\nNew features:\n\n- (breaking) Sublime\u200bLinter 4.x version support is added, that means older than version 4 might not working (although not tested.). If you face any problem, we suggest either you will update Sublime\u200bLinter version or use older version of `plone.recipe.sublimetext` (1.1.6)\n- pylint executable path now can be provided.\n\n\n1.1.6 (2018-01-24)\n------------------\n\n- Set a default folder_exclude_patterns for performance, and also to eliminate noise when looking up packages.\n- Set follow_symlinks to true.\n- split out omelette in own project folder setting, for being able to exclude 'parts'.\n  [sunew]\n\n\n1.1.5 (2017-10-31)\n------------------\n\n- Flake8 executable path: Enable to use `buildout relative`/`user's home relative` path. Means now it is possible to use buildout, sublimetext style relative path.\n  [nazrulworld]\n\n\n1.1.4 (2017-08-11)\n------------------\n\n- Enable using the omelette as a basis for jedi.\n  [sunew]\n\n\n1.1.3 (2017-07-30)\n------------------\n\n- Repository ownership transfered to `Plone Collective <https://collective.github.io/>`_\n\n\n1.1.2 (2017-07-02)\n------------------\n\nBugfixes:\n\n- [#8] `Install using pip in virtualenv got error <https://github.com/collective/plone.recipe.sublimetext/issues/8>`_\n\n\n1.1.1 (2017-06-20)\n------------------\n\nBugfixes:\n\n- [#7]`python_interpreter` value as list but expected as string.\n  [nazrulworld]\n\n\n1.1.0 (2017-06-07)\n------------------\n\nNew features:\n\n- [#4] `Anaconda support <https://github.com/collective/plone.recipe.sublimetext/issues/4>`_ [nazrulworld]\n\n\n1.0.1 (2017-05-16)\n------------------\n\nBugfixes:\n\n- [#1] `Required options for sublime text project file is missing <https://github.com/collective/plone.recipe.sublimetext/issues/1>`_\n\n\n1.0.0 (2017-05-15)\n------------------\n\n- Initial release.\n  [nazrulworld]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nazrulworld/plone.recipe.sublimetext", "keywords": "python buildout plone sublime-text jedi sublimelinter buildout-recipe anaconda", "license": "GPL version 2", "maintainer": "", "maintainer_email": "", "name": "plone.recipe.sublimetext", "package_url": "https://pypi.org/project/plone.recipe.sublimetext/", "platform": "", "project_url": "https://pypi.org/project/plone.recipe.sublimetext/", "project_urls": {"Homepage": "https://github.com/nazrulworld/plone.recipe.sublimetext"}, "release_url": "https://pypi.org/project/plone.recipe.sublimetext/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "SublimeText configuration for buildout-based Python projects", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/plone.recipe.sublimetext/\" rel=\"nofollow\"><img alt=\"Egg Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa33111e9cda8dc0fa70c3fd5f4682e8bace264e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f706c6f6e652e7265636970652e7375626c696d65746578742e737667\"></a>\n<a href=\"http://travis-ci.org/collective/plone.recipe.sublimetext\" rel=\"nofollow\"><img alt=\"Travis Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45814735fafa898061893a62f84671ef1cd951be/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6c6c6563746976652f706c6f6e652e7265636970652e7375626c696d65746578742f6d61737465722e737667\"></a>\n<a href=\"https://coveralls.io/r/collective/plone.recipe.sublimetext\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8fbe8da0d0e8f990fcb096b57ca34b75ad21eb9/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f636f6c6c6563746976652f706c6f6e652e7265636970652e7375626c696d65746578742f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/plone.recipe.sublimetext/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a6a88ab35c53890e434855e8c5082c9e0a51148/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706c6f6e652e7265636970652e7375626c696d65746578742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/plone.recipe.sublimetext/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/575990fff07b67d8aaaf507559d0a21b64b2d9df/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706c6f6e652e7265636970652e7375626c696d65746578742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/plone.recipe.sublimetext/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acd14a64b3d7f7ce094597e0db7d94a2a460d266/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f706c6f6e652e7265636970652e7375626c696d65746578742e737667\"></a>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id12\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" id=\"id13\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#available-options\" id=\"id14\" rel=\"nofollow\">Available Options</a></li>\n</ul>\n</li>\n<li><a href=\"#links\" id=\"id15\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#known-issues\" id=\"id16\" rel=\"nofollow\">Known Issues</a></li>\n<li><a href=\"#example-usage\" id=\"id17\" rel=\"nofollow\">Example Usage</a></li>\n<li><a href=\"#contributors\" id=\"id18\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#changelog\" id=\"id19\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id20\" rel=\"nofollow\">1.3.0 (2019-02-04)</a></li>\n<li><a href=\"#id2\" id=\"id21\" rel=\"nofollow\">1.2.0 (2018-03-05)</a></li>\n<li><a href=\"#id3\" id=\"id22\" rel=\"nofollow\">1.1.6 (2018-01-24)</a></li>\n<li><a href=\"#id4\" id=\"id23\" rel=\"nofollow\">1.1.5 (2017-10-31)</a></li>\n<li><a href=\"#id5\" id=\"id24\" rel=\"nofollow\">1.1.4 (2017-08-11)</a></li>\n<li><a href=\"#id6\" id=\"id25\" rel=\"nofollow\">1.1.3 (2017-07-30)</a></li>\n<li><a href=\"#id7\" id=\"id26\" rel=\"nofollow\">1.1.2 (2017-07-02)</a></li>\n<li><a href=\"#id8\" id=\"id27\" rel=\"nofollow\">1.1.1 (2017-06-20)</a></li>\n<li><a href=\"#id9\" id=\"id28\" rel=\"nofollow\">1.1.0 (2017-06-07)</a></li>\n<li><a href=\"#id10\" id=\"id29\" rel=\"nofollow\">1.0.1 (2017-05-16)</a></li>\n<li><a href=\"#id11\" id=\"id30\" rel=\"nofollow\">1.0.0 (2017-05-15)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Introduction</a></h2>\n<p><tt>plone.recipe.sublimetext</tt> is the buildout recipe for <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> lover who wants python IDE like features while developing python <a href=\"http://www.buildout.org/en/latest/\" rel=\"nofollow\">Buildout</a> based project. This tool will help them to create per project basis sublimetext settings with appropriate paths location assignment. Currently <tt>plone.recipe.sublimetext</tt> comes with supporting settings for <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a> (the all-in-one package), <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a>, <a href=\"http://sublimelinter.readthedocs.io/en/latest/\" rel=\"nofollow\">Sublimelinter</a>, <a href=\"https://github.com/SublimeLinter/SublimeLinter-flake8\" rel=\"nofollow\">Sublimelinter-Flake8</a>, <a href=\"https://github.com/SublimeLinter/SublimeLinter-pylint\" rel=\"nofollow\">Sublimelinter-Pylint</a>.\nA general question may arise that why we will use this tool, whether we can create <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> project settings easily (we have better knowledge over <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> configuration)?\nWell i completely agree with you, but if you want to get benefited from <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a> or <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a>\u2019s python autocompletion feature (basically I am lover of autocompletion), you have to add all eggs links for <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a> or <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a>\u2019s paths settings and it is hard to manage eggs links manually if the size of project is big (think about any <a href=\"https://plone.org/\" rel=\"nofollow\">Plone</a> powered project), beside <a href=\"https://github.com/SublimeLinter/SublimeLinter-pylint\" rel=\"nofollow\">Sublimelinter-Pylint</a> also need list of paths to be added to sys.path  to find modules.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Installation</a></h2>\n<p>Install <tt>plone.recipe.sublimetext</tt> is simple enough, just need to create a section for <tt>sublimetext</tt> to your buildout. Before using <tt>plone.recipe.sublimetext</tt> make sure  <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a>, <a href=\"http://sublimelinter.readthedocs.io/en/latest/\" rel=\"nofollow\">Sublimelinter</a>, <a href=\"https://github.com/SublimeLinter/SublimeLinter-flake8\" rel=\"nofollow\">Sublimelinter-Flake8</a> and/or <a href=\"https://github.com/SublimeLinter/SublimeLinter-pylint\" rel=\"nofollow\">Sublimelinter-Pylint</a> plugins are already installed at your <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a>. You could follow full [<a href=\"https://nazrulworld.wordpress.com/2017/05/06/make-sublime-text-as-the-best-ide-for-full-stack-python-development\" rel=\"nofollow\">instruction here</a>] if not your <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> setup yet. Flake8 linter need <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">flake8 executable</a> available globally (unless you are going to use local flake8), also it is recommended you install some awsome flake8 plugins (flake8-isort, flake8-coding, pep8-naming, flake8-blind-except, flake8-quotes and more could find in pypi)</p>\n<blockquote>\n<p>Example Buildout:</p>\n<pre>[buildout]\nparts += sublimetext\n\n[sublimetext]\nrecipe = plone.recipe.sublimetext\neggs = ${buildout:eggs}\njedi-enabled = True\nsublimelinter-enabled = True\nsublimelinter-pylint-enabled = True\n</pre>\n</blockquote>\n<div id=\"available-options\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Available Options</a></h3>\n<dl>\n<dt>eggs</dt>\n<dd><p>Required: Yes</p>\n<p>Default: None</p>\n<p>Your project\u2019s list of eggs, those are going to be added in path location for <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a> and/or <a href=\"https://github.com/SublimeLinter/SublimeLinter-pylint\" rel=\"nofollow\">Sublimelinter-Pylint</a> or <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a>.</p>\n</dd>\n<dt>overwrite</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>This option indicates whether existing settings should be cleaned first or just updating changes.\nThis situation may happen, you did create settings file manually with other configuration (those are not managed by <tt>plone.recipe.sublimetext</tt>) and you want keep those settings intact.</p>\n</dd>\n<dt>python-executable</dt>\n<dd><p>Required: No</p>\n<p>Default: <tt>plone.recipe.sublimetext</tt> will find current python executable path.</p>\n<p>The python executable path for current project, if you are using virtual environment then should be that python path. FYI: ${home} and ${project} variable should work.</p>\n</dd>\n<dt>project-name</dt>\n<dd><p>Required: No</p>\n<p>Default: if you have a existing <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> project file(settings file) in project/buildout\u2019s root directory, <tt>plone.recipe.sublimetext</tt> will choose it as <tt><span class=\"pre\">project-name</span></tt>, other than project/buildout directory name will become as <tt><span class=\"pre\">project-name</span></tt></p>\n<p>Don\u2019t add suffix <tt><span class=\"pre\">.sublime-project</span></tt>, when you provide the project name.</p>\n</dd>\n<dt>jedi-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>This option is related to enable/disable Sublime <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a></p>\n</dd>\n<dt>jedi-use-omelette</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>Use the omelette as basis for jedi autocompletion and go-to-definition. See <a href=\"https://pypi.python.org/pypi/collective.recipe.omelette\" rel=\"nofollow\">collective.recipe.omelette</a></p>\n</dd>\n<dt>omelette-location</dt>\n<dd><p>Required: No</p>\n<p>Default: ${buildout:directory}/parts/omelette - the default omelette location.</p>\n<p>For use with jedi-use-omelette, but unless the omelette is installed at a custom location, the default should be fine.</p>\n</dd>\n<dt>sublimelinter-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>Whether <a href=\"http://sublimelinter.readthedocs.io/en/latest/\" rel=\"nofollow\">Sublimelinter</a>\u2019s features you want to use or not.</p>\n</dd>\n<dt>sublimelinter-pylint-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<blockquote>\nIf you want to use <a href=\"https://github.com/SublimeLinter/SublimeLinter-pylint\" rel=\"nofollow\">Sublimelinter-Pylint</a> or not; <tt><span class=\"pre\">sublimelinter-enabled</span></tt> option will be respected, means if parent option is set as disabled but you enable this option will not work.</blockquote>\n</dd>\n<dt>sublimelinter-pylint-executable</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>You could provide buildout specific pylint executable. It is very flexible way to avoid using global pylint.\nExample of relative path usecase:\ni.) <cite>${buildout:directory}/bin/pylint</cite>\nii.) <cite>$project_path/bin/pylint</cite>\niii.) <cite>./bin/pylint</cite>\niv.) <cite>~/path/bin/pylint</cite></p>\n</dd>\n<dt>sublimelinter-pylint-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>@see bellow at <tt><span class=\"pre\">sublimelinter-flake8-args</span></tt> section for full detail.</p>\n</dd>\n<dt>sublimelinter-flake8-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>Whether you want to use <a href=\"https://github.com/SublimeLinter/SublimeLinter-flake8\" rel=\"nofollow\">Sublimelinter-Flake8</a> or not. Like <tt><span class=\"pre\">sublimelinter-pylint-enabled</span></tt> parent option will be respected.</p>\n</dd>\n<dt>sublimelinter-flake8-executable</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>Project specific <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">Flake8</a> executable path, this will give you lots flexibility over using global <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">Flake8</a> executable, because each project might have separate <a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> version. You could use buildout or user\u2019s relative directory path and it is very convenient for collboration works where all members\u2019 absolute path of flake8 excecutable may not be the same!\nExample of relative path usecase:\ni.) <cite>${buildout:directory}/bin/flake8</cite>\nii.) <cite>$project_path/bin/flake8</cite>\niii.) <cite>./bin/flake8</cite>\niv.) <cite>~/path/bin/flake8</cite></p>\n</dd>\n<dt>sublimelinter-flake8-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>It is possible to <a href=\"http://flake8.pycqa.org/en/latest/user/options.html#full-listing-of-options-and-their-descriptions\" rel=\"nofollow\">provide arguments (options)</a> for <tt>flake8</tt> executable project specific.\nYou have to follow a simple format to provide <a href=\"http://www.sublimelinter.com/en/stable/linter_settings.html#args\" rel=\"nofollow\">multiple arguments aka</a> flake8 options thanks to buildout for making our life easy. Format <tt>{option <span class=\"pre\">name}={option</span> value(optional if the arg boolen type)}</tt> <tt><span class=\"pre\">max-line-length=90</span></tt>, it is remarkable that <tt><span class=\"pre\">--</span></tt> prefix is not required, you can provide multiple arguments separated by <tt>space</tt> and/or <tt>newline</tt></p>\n<ol>\n<li>sublimelinter-flake8-args = max-line-length=90  \u2013show-source</li>\n<li><dl>\n<dt>sublimelinter-flake8-args = max-line-length=90  \u2013show-source</dt>\n<dd>output-file=path_to_file</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>anaconda-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>This option is related to whether you want to enable <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a> the all-in-one python IDE package!</p>\n</dd>\n<dt>anaconda-linting-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: True</p>\n<p>If want to other library for liniting (i.e sublimelinter), keep it disabled, other than should be enabled. Like other parent options, it will respect parent (<tt><span class=\"pre\">anaconda-enabled</span></tt>) option.</p>\n</dd>\n<dt>anaconda-completion-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: True</p>\n<p>Anaconda is using <a href=\"https://github.com/srusskih/SublimeJEDI\" rel=\"nofollow\">Jedi</a> engine for autocompletion, but if you want to use Sublime-Jedi other than provided by Anaconda, make it disabled.</p>\n</dd>\n<dt>anaconda-pylint-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>By default <a href=\"https://nazrul.me/2017/06/10/make-anaconda-powered-sublimetext-as-powerful-python-ide-for-full-stack-development/\" rel=\"nofollow\">Anaconda</a> liniting doing validation using PyFlakes, PEP8, PEP257. But you can use Pylint instead of PyFlakes by enabling this option.</p>\n</dd>\n<dt>anaconda-validate-imports</dt>\n<dd><p>Required: No</p>\n<p>Default: True</p>\n<p>It is always good that you want to see any invalid imports (for example: <tt>from fake.foo import bar</tt>), but if you don\u2019t want this just disabled this option.</p>\n</dd>\n<dt>anaconda-pep8-ignores</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>If you want ignore some pep8 checklist (i.e N802 is for pep8 naming). Each ignore should be separated by <tt>space</tt> and/or <tt>newline</tt>.</p>\n</dd>\n<dt>anaconda-pep257-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>Indicates whether you want to active <tt>pep257</tt> checklist by anaconda.</p>\n</dd>\n<dt>anaconda-pep257-ignores</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n<p>If you want ignore some pep8 checklist (i.e N802 is for pep8 naming). Each ignore should be separated by <tt>space</tt> and/or <tt>newline</tt>.</p>\n</dd>\n<dt>ignore-develop</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>If you don\u2019t want development eggs, should go for autocompletion.</p>\n</dd>\n<dt>ignores</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n<p>If you want specific eggs should not go for autocompletion.</p>\n</dd>\n<dt>packages</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n<p>Location of some python scripts or non standard modules (don\u2019t have setup file), you want to be in system path.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Links</a></h2>\n<p>Code repository:</p>\n<blockquote>\n<a href=\"https://github.com/collective/plone.recipe.sublimetext\" rel=\"nofollow\">https://github.com/collective/plone.recipe.sublimetext</a></blockquote>\n<p>Continuous Integration:</p>\n<blockquote>\n<a href=\"https://travis-ci.org/collective/plone.recipe.sublimetext\" rel=\"nofollow\">https://travis-ci.org/collective/plone.recipe.sublimetext</a></blockquote>\n<p>Issue Tracker:</p>\n<blockquote>\n<a href=\"https://github.com/collective/plone.recipe.sublimetext/issues\" rel=\"nofollow\">https://github.com/collective/plone.recipe.sublimetext/issues</a></blockquote>\n</div>\n<div id=\"known-issues\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Known Issues</a></h2>\n<ul>\n<li><p><a href=\"https://github.com/SublimeLinter/SublimeLinter-flake8\" rel=\"nofollow\">Sublimelinter-Flake8</a> might stop working if <a href=\"https://pypi.python.org/pypi/flake8-plone-api\" rel=\"nofollow\">flake8-plone-api</a> is installed as until 1.2 version, <cite>flake8-plone-api</cite> don\u2019t support SublimeText (linting), see pull request <a href=\"https://github.com/gforcada/flake8-plone-api/pull/18\" rel=\"nofollow\">here</a> . That means upcoming version will support hopefully. It could happen, either you are using global or virtualenv flake8. You can see error in <a href=\"https://www.sublimetext.com/3\" rel=\"nofollow\">ST3</a> console:</p>\n<pre>flake8_plone_api-1.2-py2.7.egg/flake8_plone_api.py\", line 16, in run\nwith open(self.filename) as f:\nIOError: [Errno 2] No such file or directory: 'stdin'\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"example-usage\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Example Usage</a></h2>\n<dl>\n<dt>Minimal buildout::</dt>\n<dd><pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = .\n... eggs =\n...     zc.buildout\n... parts = sublimetext\n...\n... [sublimetext]\n... recipe = plone.recipe.sublimetext\n... project-name = plone-recipe-sublime\n... eggs = ${buildout:eggs}\n... jedi-enabled = True\n... \"\"\")\n&gt;&gt;&gt; system(buildout + ' -c buildout.cfg')\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.exists('plone-recipe-sublime.sublime-project')\nTrue\n</pre>\n</dd>\n</dl>\n<p>Standard buildout:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = .\n... eggs =\n...     zc.buildout\n... parts = sublimetext\n...\n... [sublimetext]\n... recipe = plone.recipe.sublimetext\n... project-name = plone-recipe-sublime\n... eggs = ${buildout:eggs}\n... jedi-enabled = True\n... sublimelinter-enabled = True\n... sublimelinter-flake8-enabled = True\n... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n... \"\"\")\n&gt;&gt;&gt; system(buildout + ' -c buildout.cfg')\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n&gt;&gt;&gt; 'Sublimelinter.linters.flake8.enable' in settings['settings']\nTrue\n</pre>\n<p>Muilti linters and without project name:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = .\n... eggs =\n...     zc.buildout\n... parts = sublimetext\n...\n... [sublimetext]\n... recipe = plone.recipe.sublimetext\n... eggs = ${buildout:eggs}\n... jedi-enabled = True\n... sublimelinter-enabled = True\n... sublimelinter-flake8-enabled = True\n... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n... sublimelinter-pylint-enabled = True\n... \"\"\")\n&gt;&gt;&gt; system(buildout + ' -c buildout.cfg')\n</pre>\n<p>(project filename should be <tt><span class=\"pre\">plone-recipe-sublime.sublime-project</span></tt> as previously generated):</p>\n<pre>&gt;&gt;&gt; settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n&gt;&gt;&gt; 'pylint' in settings['Sublimelinter']['linters']\nTrue\n</pre>\n<p>Usages Anaconda for all purpose (linting, autocompletion) and rest of all are not used:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = .\n... eggs =\n...     zc.buildout\n... parts = sublimetext\n...\n... [sublimetext]\n... recipe = plone.recipe.sublimetext\n... project-name = plone-recipe-sublime\n... eggs = ${buildout:eggs}\n... anaconda-enabled = True\n... anaconda-pep8-ignores =\n...     N802\n... \"\"\")\n&gt;&gt;&gt; system(buildout + ' -c buildout.cfg')\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n&gt;&gt;&gt; 'build_systems' in settings.keys()\nTrue\n&gt;&gt;&gt; 'extra_paths' in settings['settings'].keys()\nTrue\n&gt;&gt;&gt; settings['settings']['anaconda_linting']\nTrue\n&gt;&gt;&gt; settings['settings']['use_pylint']\nFalse\n</pre>\n<p>Flake8 linter with flake8 arguments:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = .\n... eggs =\n...     zc.buildout\n... parts = sublimetext\n...\n... [sublimetext]\n... recipe = plone.recipe.sublimetext\n... project-name = plone-recipe-sublime\n... eggs = ${buildout:eggs}\n... jedi-enabled = True\n... sublimelinter-enabled = True\n... sublimelinter-flake8-enabled = True\n... sublimelinter-flake8-executable = ${buildout:directory}/bin/flake8\n... sublimelinter-flake8-args = max-complexity=10  max-line-length=119\n...                             exclude=docs,*.egg.,omelette\n... \"\"\")\n&gt;&gt;&gt; system(buildout + ' -c buildout.cfg')\n</pre>\n<p>(project filename should be <tt><span class=\"pre\">plone-recipe-sublime.sublime-project</span></tt>):</p>\n<pre>&gt;&gt;&gt; settings = json.loads(read('plone-recipe-sublime.sublime-project'))\n&gt;&gt;&gt; len(settings['settings']['Sublimelinter.linters.flake8.args']) == 3\nTrue\n</pre>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id18\" rel=\"nofollow\">Contributors</a></h2>\n<ul>\n<li>Md Nazrul Islam&lt;<a href=\"mailto:email2nazrul%40gmail.com\">email2nazrul<span>@</span>gmail<span>.</span>com</a>&gt;, Original Author</li>\n<li>Sune Br\u00f8ndum W\u00f8ller [sunew]</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id19\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id20\" rel=\"nofollow\">1.3.0 (2019-02-04)</a></h3>\n<p>New features:</p>\n<ul>\n<li><a href=\"http://www.sublimelinter.com/en/latest/linter_settings.html#args\" rel=\"nofollow\">Sublime\u200bLinter linter arguments are possible</a> to provide linter specific options. Currently <tt><span class=\"pre\">sublimelinter-flake8</span></tt> and <tt><span class=\"pre\">sublimelinter-pylint</span></tt> are supported.</li>\n<li><a href=\"http://www.sublimelinter.com/en/stable/settings.html#project-settings\" rel=\"nofollow\">New style Sublime\u200bLinter linter settings</a> generation has been added. [nazrulworld]</li>\n<li>More options (<tt><span class=\"pre\">anaconda-pep257-enabled</span></tt>, <tt><span class=\"pre\">anaconda-pep257-ignores</span></tt>) added for Anaconda settings.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id21\" rel=\"nofollow\">1.2.0 (2018-03-05)</a></h3>\n<p>New features:</p>\n<ul>\n<li>(breaking) Sublime\u200bLinter 4.x version support is added, that means older than version 4 might not working (although not tested.). If you face any problem, we suggest either you will update Sublime\u200bLinter version or use older version of <cite>plone.recipe.sublimetext</cite> (1.1.6)</li>\n<li>pylint executable path now can be provided.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id22\" rel=\"nofollow\">1.1.6 (2018-01-24)</a></h3>\n<ul>\n<li>Set a default folder_exclude_patterns for performance, and also to eliminate noise when looking up packages.</li>\n<li>Set follow_symlinks to true.</li>\n<li>split out omelette in own project folder setting, for being able to exclude \u2018parts\u2019.\n[sunew]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id23\" rel=\"nofollow\">1.1.5 (2017-10-31)</a></h3>\n<ul>\n<li>Flake8 executable path: Enable to use <cite>buildout relative</cite>/<cite>user\u2019s home relative</cite> path. Means now it is possible to use buildout, sublimetext style relative path.\n[nazrulworld]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id24\" rel=\"nofollow\">1.1.4 (2017-08-11)</a></h3>\n<ul>\n<li>Enable using the omelette as a basis for jedi.\n[sunew]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.1.3 (2017-07-30)</a></h3>\n<ul>\n<li>Repository ownership transfered to <a href=\"https://collective.github.io/\" rel=\"nofollow\">Plone Collective</a></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id26\" rel=\"nofollow\">1.1.2 (2017-07-02)</a></h3>\n<p>Bugfixes:</p>\n<ul>\n<li>[#8] <a href=\"https://github.com/collective/plone.recipe.sublimetext/issues/8\" rel=\"nofollow\">Install using pip in virtualenv got error</a></li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id27\" rel=\"nofollow\">1.1.1 (2017-06-20)</a></h3>\n<p>Bugfixes:</p>\n<ul>\n<li>[#7]`python_interpreter` value as list but expected as string.\n[nazrulworld]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id28\" rel=\"nofollow\">1.1.0 (2017-06-07)</a></h3>\n<p>New features:</p>\n<ul>\n<li>[#4] <a href=\"https://github.com/collective/plone.recipe.sublimetext/issues/4\" rel=\"nofollow\">Anaconda support</a> [nazrulworld]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id29\" rel=\"nofollow\">1.0.1 (2017-05-16)</a></h3>\n<p>Bugfixes:</p>\n<ul>\n<li>[#1] <a href=\"https://github.com/collective/plone.recipe.sublimetext/issues/1\" rel=\"nofollow\">Required options for sublime text project file is missing</a></li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id30\" rel=\"nofollow\">1.0.0 (2017-05-15)</a></h3>\n<ul>\n<li>Initial release.\n[nazrulworld]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4777411, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a730c929733637c5a524ea17810a949e", "sha256": "2f3011db2a9c83aaed433e518087428547ee6d08c6936967ac12ae8517a20daa"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a730c929733637c5a524ea17810a949e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25545, "upload_time": "2017-05-15T18:39:40", "upload_time_iso_8601": "2017-05-15T18:39:40.318658Z", "url": "https://files.pythonhosted.org/packages/d0/79/dcdafda0e9e331bd21fb29d2dad09f63b9d34df9556bf148fc1ba444f2bf/plone.recipe.sublimetext-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f1ada875f5a6711676d8c76d75dd0578", "sha256": "35e3428f643d44ba798e402b58a186fc347c7a90074081170af5928b2f0208cb"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f1ada875f5a6711676d8c76d75dd0578", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 22648, "upload_time": "2017-05-16T20:23:28", "upload_time_iso_8601": "2017-05-16T20:23:28.229242Z", "url": "https://files.pythonhosted.org/packages/12/6d/bda388874c405c39df88713ec64ca567bcd2b0641f3c0ec36c7b78a120f1/plone.recipe.sublimetext-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12d3eaa6c2ae67c74caefa9b58b9e70d", "sha256": "5f0d0ae99ae67e299e1c52f4bd2681af4a46afd1470af1b071e3d7ced94e5fbe"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.0.1.tar.gz", "has_sig": false, "md5_digest": "12d3eaa6c2ae67c74caefa9b58b9e70d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26694, "upload_time": "2017-05-16T20:23:25", "upload_time_iso_8601": "2017-05-16T20:23:25.083123Z", "url": "https://files.pythonhosted.org/packages/b8/63/36a4e4ce1226acc6e3aac832eb8fc6a239a405b241883f68e5ca2693221e/plone.recipe.sublimetext-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c0ba54b9222d475d8f286e5f09830387", "sha256": "66edcfd3db23b7a77ed0819a0a10bd329ba0ae4c341c80f0b340c9329a1e0a5c"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c0ba54b9222d475d8f286e5f09830387", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 25303, "upload_time": "2017-06-07T03:03:10", "upload_time_iso_8601": "2017-06-07T03:03:10.607529Z", "url": "https://files.pythonhosted.org/packages/46/28/4e5526423425b75980a0f0900542cfba40e0a461c32386f7c44ccae030b4/plone.recipe.sublimetext-1.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45e73bd05eba6fc6b5aab88acbdece89", "sha256": "456831be501caff3bcc22e0c189a4f73babe16cc0f766da67adf261689668204"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.0.tar.gz", "has_sig": false, "md5_digest": "45e73bd05eba6fc6b5aab88acbdece89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29143, "upload_time": "2017-06-07T03:03:13", "upload_time_iso_8601": "2017-06-07T03:03:13.422647Z", "url": "https://files.pythonhosted.org/packages/0f/10/9827c570b103298fba9e612c9658fe0a5ab985ffa068309eebf134d15724/plone.recipe.sublimetext-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a731eff03bd8f32a8dcfa2e82d794d70", "sha256": "86de70f99ce31f661e625fb009cf0c164c30157ea2718c357d1a5714f4e319af"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.1.tar.gz", "has_sig": false, "md5_digest": "a731eff03bd8f32a8dcfa2e82d794d70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29604, "upload_time": "2017-06-20T07:01:44", "upload_time_iso_8601": "2017-06-20T07:01:44.335414Z", "url": "https://files.pythonhosted.org/packages/bc/25/fae5f0fbd67b44f0f793539a206d6b5a725aad4c12af87d715391806a3d4/plone.recipe.sublimetext-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "1563ffee4a670affaaaedb5509e76ec4", "sha256": "c9ad5d54b2e2aae1e1033dbdb9e6982e5ec400085e1f3b7245ecdca99ff22d37"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1563ffee4a670affaaaedb5509e76ec4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25851, "upload_time": "2017-07-02T09:08:40", "upload_time_iso_8601": "2017-07-02T09:08:40.939102Z", "url": "https://files.pythonhosted.org/packages/10/18/7b302b2966b397e560477e148110ed2459dd07d16445811e498c868bbc6f/plone.recipe.sublimetext-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f05ddfe5b89ebb3b077e5ba34fd1d7e", "sha256": "df14b2194150c06b4f8805df13935f3fb4579e559a4fdd0ac04daf98afaf7795"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.2.tar.gz", "has_sig": false, "md5_digest": "7f05ddfe5b89ebb3b077e5ba34fd1d7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29761, "upload_time": "2017-07-02T09:08:43", "upload_time_iso_8601": "2017-07-02T09:08:43.512335Z", "url": "https://files.pythonhosted.org/packages/e7/a8/3b15245eaacfe817bb9e0fd8aabb27d3d668b15520a1cc82b48a4c942bf3/plone.recipe.sublimetext-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "aa5936a3c1c8d1843e452b60a359a64b", "sha256": "c2c2e705f56aebb94125889e7f83207a134b01e2146f379ada1cb48793893993"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.3.tar.gz", "has_sig": false, "md5_digest": "aa5936a3c1c8d1843e452b60a359a64b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29868, "upload_time": "2017-07-30T17:46:05", "upload_time_iso_8601": "2017-07-30T17:46:05.056088Z", "url": "https://files.pythonhosted.org/packages/77/7a/56f5bb08d236d2988a93e691b65e3dbc6438226b08ad4dcd5f790ac6aaa3/plone.recipe.sublimetext-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "289dd1ea24b9b31eb38e60eb2916c72b", "sha256": "79b5ee75f241fab248a0024ac967c4cf3f97c779e05f7ec9fb3e6b4c8a5e26fd"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.4.tar.gz", "has_sig": false, "md5_digest": "289dd1ea24b9b31eb38e60eb2916c72b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30837, "upload_time": "2017-08-11T16:17:07", "upload_time_iso_8601": "2017-08-11T16:17:07.430712Z", "url": "https://files.pythonhosted.org/packages/ed/84/f4bc607b6a22e3254ecc339635bf237bf75884f533edeb002e124adab41a/plone.recipe.sublimetext-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "c085c6953edd6e8a6d6f9714f62498ff", "sha256": "b4d1d132def72ea34f7cc06af363b7508a282c89912ae654222868a445cc5cd8"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.5.tar.gz", "has_sig": false, "md5_digest": "c085c6953edd6e8a6d6f9714f62498ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33610, "upload_time": "2017-10-31T19:57:16", "upload_time_iso_8601": "2017-10-31T19:57:16.781015Z", "url": "https://files.pythonhosted.org/packages/73/a2/3f53cd034e5a49fa96b90daf812e145c17ea16b968cc0aaec55e6aedee9c/plone.recipe.sublimetext-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "137460fadbfa25025f9fd4f8f625fa1b", "sha256": "e3f36e51a2016cf4da0145d9897ad71ec756fd77b582b142c93772474be2c882"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.1.6.tar.gz", "has_sig": false, "md5_digest": "137460fadbfa25025f9fd4f8f625fa1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32181, "upload_time": "2018-01-24T12:25:53", "upload_time_iso_8601": "2018-01-24T12:25:53.519170Z", "url": "https://files.pythonhosted.org/packages/94/e2/16423c1b35aff9a0522dd9c569d8bc18a6426a6dc31914ed3477752f5414/plone.recipe.sublimetext-1.1.6.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "cc2e32d8bf04a527a1d45ad1ed073a7f", "sha256": "1c37b4235c35b0b21b6d6531ccad74d8b92ee50da305b9415542c7ea8709b587"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.2.0.tar.gz", "has_sig": false, "md5_digest": "cc2e32d8bf04a527a1d45ad1ed073a7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32858, "upload_time": "2018-03-05T15:09:03", "upload_time_iso_8601": "2018-03-05T15:09:03.327067Z", "url": "https://files.pythonhosted.org/packages/17/83/1a3f995ce650e92e22b593903f6a0246d00ba8f05aae7a4e25061ef996e5/plone.recipe.sublimetext-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7997b23c0c004e0d6995af9699037a98", "sha256": "5136a6c5a3dc62a57db99d0ac300ebb98ac1b1a36381769a1f312ee2022d2e2a"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7997b23c0c004e0d6995af9699037a98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35242, "upload_time": "2019-02-04T12:16:30", "upload_time_iso_8601": "2019-02-04T12:16:30.129942Z", "url": "https://files.pythonhosted.org/packages/6b/3e/fb9abb1e6a0c18266c1b48feefe92b22bde6586897da3159dfd8718320e3/plone.recipe.sublimetext-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7997b23c0c004e0d6995af9699037a98", "sha256": "5136a6c5a3dc62a57db99d0ac300ebb98ac1b1a36381769a1f312ee2022d2e2a"}, "downloads": -1, "filename": "plone.recipe.sublimetext-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7997b23c0c004e0d6995af9699037a98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35242, "upload_time": "2019-02-04T12:16:30", "upload_time_iso_8601": "2019-02-04T12:16:30.129942Z", "url": "https://files.pythonhosted.org/packages/6b/3e/fb9abb1e6a0c18266c1b48feefe92b22bde6586897da3159dfd8718320e3/plone.recipe.sublimetext-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:51 2020"}