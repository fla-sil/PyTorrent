{"info": {"author": "Ross Jacobs", "author_email": "rj@swit.sh", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# RegexCap\n\nReplace packet fields with a regex and display filter.\nThis is useful for removing personally sensitive information by field.\n[TraceWrangler](https://www.tracewrangler.com/), a windows GUI tool, also performs this function.\n\n## Installation\n\nYou can install from [regexcap@PyPI](https://pypi.org/project/RegexCap/0.0/) with pip.\n\n```bash\npip install regexcap\n```\n\nAlternatively, you can install by cloning it and installing it with pip.\n\n```\ngit clone https://github.com/pocc/regexcap\ncd regexcap\npip install .\n```\n\n## Usage notes\n\n* `-m` uses multiprocessing and will speed up execution for large files\n* Avoid shorthand display filters like `-e ip.addr` and use their more explicit\n  representations like `-e ip.src -e ip.dst`. Tshark maps shorthand\n  display filters to exactly one field in json output, so fewer fields may be\n  replaced than expected.\n* Options `-r`, `-w`, `-e`, `-Y` are copied from tshark for sake of familiarity\n* -Y creates a temporary file that is read from that is deleted on exit\n* This replaces bytes in packets, not on packet or pcap headers\n* Currently set to error if there is a length mismatch between old and new values.\n* This program will be slow! It uses python with a naive algorithm (i.e. it works)\n\n## Example Usage\n\n### Example 1: Replace MAC address NIC bytes\n\nFor example to replace the NIC-specific (last 6 bytes) part of all mac addresses:\n\n```bash\n$ tshark -r new.pcap -c 1\n    1 6c:96:cf:d8:7f:e7 \u2192 cc:65:ad:da:39:70 108.233.248.45 \u2192 157.245.238.3 ...\n$ regexcap -r old.pcap -w new.pcap -e eth.src -e eth.dst -s '.{6}$' -d 000000\n$ tshark -r new.pcap -c 1\n    1 6c:96:cf:00:00:00 \u2192 cc:65:ad:00:00:00 108.233.248.45 \u2192 157.245.238.3 ...\n```\n\n* `.{6}`: Take exactly six bytes of any type\n* `$`: This regex ends at the end of the field\n\n### Example 2: Replace private IP addresses\n\nTo replace all private IP addresses with quad 0's, use a byte regex like so:\n\n```bash\n$ tshark -r new.pcap -c 1\n    1   0.000000 192.168.1.246 \u2192 217.221.186.35 TCP  54 59793 \u2192 https(443) [ACK] Seq=1 Ack=1 Win=2048 Len=0\n$ regexcap -r old.pcap -w new.pcap -d '^(?:0a..|ac1.|c0a8).{4}' -s '00000000' -e ip.addr\n$ tshark -r new.pcap -c 1\n    1   0.000000      0.0.0.0 \u2192 217.221.186.35 TCP  54 59793 \u2192 https(443) [ACK] Seq=1 Ack=1 Win=2048 Len=0\n```\n\nBreaking down the regex, an IP address is 32 bits => 8 nibbles (hexadecimal characters).\nThe network bits of each of the private subnets determines how many nibbles each requires.\nIn other words /8 => 2 network chars, /12 => 3 network chars, /16 => 4 network chars.\n\n* `^`: regex starts at beginning of field\n* `(?:`...`)`:\n* `10.0.0.0/8 =====> 0x0a + ......`\n* `172.16.0.0/12 ==> 0xac1 + .....`\n* `192.168.0.0/16 => 0xc0a8 + ....`\n* `.{4}` summarizes the last 4 nibbles that are shared\n\nTo convert any IP address octet from decimal to hex, you can use the python built-in:\n\n```python\n>>> hex(172)\n'0xac'\n```\n\n## Testing\n\nRun `tests/run_tests` or `pytest -vvv -x` from the root dir.\n\n## License\n\nApache 2.0\n\n\n## Contact\n\nRoss Jacobs, author, rj\\[AT\\]swit.sh\nhttps://github.com/pocc/regexcap", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pocc/regexcap", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "RegexCap", "package_url": "https://pypi.org/project/RegexCap/", "platform": "", "project_url": "https://pypi.org/project/RegexCap/", "project_urls": {"Homepage": "https://github.com/pocc/regexcap"}, "release_url": "https://pypi.org/project/RegexCap/0.1/", "requires_dist": null, "requires_python": ">=3.6.1", "summary": "Replace packet fields with regex", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RegexCap</h1>\n<p>Replace packet fields with a regex and display filter.\nThis is useful for removing personally sensitive information by field.\n<a href=\"https://www.tracewrangler.com/\" rel=\"nofollow\">TraceWrangler</a>, a windows GUI tool, also performs this function.</p>\n<h2>Installation</h2>\n<p>You can install from <a href=\"https://pypi.org/project/RegexCap/0.0/\" rel=\"nofollow\">regexcap@PyPI</a> with pip.</p>\n<pre>pip install regexcap\n</pre>\n<p>Alternatively, you can install by cloning it and installing it with pip.</p>\n<pre><code>git clone https://github.com/pocc/regexcap\ncd regexcap\npip install .\n</code></pre>\n<h2>Usage notes</h2>\n<ul>\n<li><code>-m</code> uses multiprocessing and will speed up execution for large files</li>\n<li>Avoid shorthand display filters like <code>-e ip.addr</code> and use their more explicit\nrepresentations like <code>-e ip.src -e ip.dst</code>. Tshark maps shorthand\ndisplay filters to exactly one field in json output, so fewer fields may be\nreplaced than expected.</li>\n<li>Options <code>-r</code>, <code>-w</code>, <code>-e</code>, <code>-Y</code> are copied from tshark for sake of familiarity</li>\n<li>-Y creates a temporary file that is read from that is deleted on exit</li>\n<li>This replaces bytes in packets, not on packet or pcap headers</li>\n<li>Currently set to error if there is a length mismatch between old and new values.</li>\n<li>This program will be slow! It uses python with a naive algorithm (i.e. it works)</li>\n</ul>\n<h2>Example Usage</h2>\n<h3>Example 1: Replace MAC address NIC bytes</h3>\n<p>For example to replace the NIC-specific (last 6 bytes) part of all mac addresses:</p>\n<pre>$ tshark -r new.pcap -c <span class=\"m\">1</span>\n    <span class=\"m\">1</span> 6c:96:cf:d8:7f:e7 \u2192 cc:65:ad:da:39:70 <span class=\"m\">108</span>.233.248.45 \u2192 <span class=\"m\">157</span>.245.238.3 ...\n$ regexcap -r old.pcap -w new.pcap -e eth.src -e eth.dst -s <span class=\"s1\">'.{6}$'</span> -d <span class=\"m\">000000</span>\n$ tshark -r new.pcap -c <span class=\"m\">1</span>\n    <span class=\"m\">1</span> 6c:96:cf:00:00:00 \u2192 cc:65:ad:00:00:00 <span class=\"m\">108</span>.233.248.45 \u2192 <span class=\"m\">157</span>.245.238.3 ...\n</pre>\n<ul>\n<li><code>.{6}</code>: Take exactly six bytes of any type</li>\n<li><code>$</code>: This regex ends at the end of the field</li>\n</ul>\n<h3>Example 2: Replace private IP addresses</h3>\n<p>To replace all private IP addresses with quad 0's, use a byte regex like so:</p>\n<pre>$ tshark -r new.pcap -c <span class=\"m\">1</span>\n    <span class=\"m\">1</span>   <span class=\"m\">0</span>.000000 <span class=\"m\">192</span>.168.1.246 \u2192 <span class=\"m\">217</span>.221.186.35 TCP  <span class=\"m\">54</span> <span class=\"m\">59793</span> \u2192 https<span class=\"o\">(</span><span class=\"m\">443</span><span class=\"o\">)</span> <span class=\"o\">[</span>ACK<span class=\"o\">]</span> <span class=\"nv\">Seq</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">Ack</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">Win</span><span class=\"o\">=</span><span class=\"m\">2048</span> <span class=\"nv\">Len</span><span class=\"o\">=</span><span class=\"m\">0</span>\n$ regexcap -r old.pcap -w new.pcap -d <span class=\"s1\">'^(?:0a..|ac1.|c0a8).{4}'</span> -s <span class=\"s1\">'00000000'</span> -e ip.addr\n$ tshark -r new.pcap -c <span class=\"m\">1</span>\n    <span class=\"m\">1</span>   <span class=\"m\">0</span>.000000      <span class=\"m\">0</span>.0.0.0 \u2192 <span class=\"m\">217</span>.221.186.35 TCP  <span class=\"m\">54</span> <span class=\"m\">59793</span> \u2192 https<span class=\"o\">(</span><span class=\"m\">443</span><span class=\"o\">)</span> <span class=\"o\">[</span>ACK<span class=\"o\">]</span> <span class=\"nv\">Seq</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">Ack</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">Win</span><span class=\"o\">=</span><span class=\"m\">2048</span> <span class=\"nv\">Len</span><span class=\"o\">=</span><span class=\"m\">0</span>\n</pre>\n<p>Breaking down the regex, an IP address is 32 bits =&gt; 8 nibbles (hexadecimal characters).\nThe network bits of each of the private subnets determines how many nibbles each requires.\nIn other words /8 =&gt; 2 network chars, /12 =&gt; 3 network chars, /16 =&gt; 4 network chars.</p>\n<ul>\n<li><code>^</code>: regex starts at beginning of field</li>\n<li><code>(?:</code>...<code>)</code>:</li>\n<li><code>10.0.0.0/8 =====&gt; 0x0a + ......</code></li>\n<li><code>172.16.0.0/12 ==&gt; 0xac1 + .....</code></li>\n<li><code>192.168.0.0/16 =&gt; 0xc0a8 + ....</code></li>\n<li><code>.{4}</code> summarizes the last 4 nibbles that are shared</li>\n</ul>\n<p>To convert any IP address octet from decimal to hex, you can use the python built-in:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"mi\">172</span><span class=\"p\">)</span>\n<span class=\"s1\">'0xac'</span>\n</pre>\n<h2>Testing</h2>\n<p>Run <code>tests/run_tests</code> or <code>pytest -vvv -x</code> from the root dir.</p>\n<h2>License</h2>\n<p>Apache 2.0</p>\n<h2>Contact</h2>\n<p>Ross Jacobs, author, rj[AT]swit.sh\n<a href=\"https://github.com/pocc/regexcap\" rel=\"nofollow\">https://github.com/pocc/regexcap</a></p>\n\n          </div>"}, "last_serial": 6948607, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "751cb6a7c4f82edc99367c67e4c0d41c", "sha256": "0240abe5d66308f5d22d721dd008ebcea042f76452d33121fc5ac8822e05417a"}, "downloads": -1, "filename": "RegexCap-0.0.tar.gz", "has_sig": false, "md5_digest": "751cb6a7c4f82edc99367c67e4c0d41c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 4989, "upload_time": "2020-04-03T05:04:03", "upload_time_iso_8601": "2020-04-03T05:04:03.169774Z", "url": "https://files.pythonhosted.org/packages/e2/86/486b4872bfa6ccc84bddb5dc84570a6018377c52a3381602c961cb9e4de4/RegexCap-0.0.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "aebc4f83b66ddba00042565064187524", "sha256": "25afd4816e7003cf6f1a5fccb4fd6ceae3c50b129c8e68da1a7683643353118f"}, "downloads": -1, "filename": "RegexCap-0.1.tar.gz", "has_sig": false, "md5_digest": "aebc4f83b66ddba00042565064187524", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 10827, "upload_time": "2020-04-04T08:18:17", "upload_time_iso_8601": "2020-04-04T08:18:17.152268Z", "url": "https://files.pythonhosted.org/packages/95/e5/c996b04059e9e4f926acbc2262353409ac164bc4032aff9acb1ab7a1453b/RegexCap-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aebc4f83b66ddba00042565064187524", "sha256": "25afd4816e7003cf6f1a5fccb4fd6ceae3c50b129c8e68da1a7683643353118f"}, "downloads": -1, "filename": "RegexCap-0.1.tar.gz", "has_sig": false, "md5_digest": "aebc4f83b66ddba00042565064187524", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 10827, "upload_time": "2020-04-04T08:18:17", "upload_time_iso_8601": "2020-04-04T08:18:17.152268Z", "url": "https://files.pythonhosted.org/packages/95/e5/c996b04059e9e4f926acbc2262353409ac164bc4032aff9acb1ab7a1453b/RegexCap-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:13 2020"}