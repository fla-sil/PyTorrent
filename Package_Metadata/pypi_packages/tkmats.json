{"info": {"author": "Jason R. Jones", "author_email": "slightlynybbled@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "# Tk Manufacturing Automated Test System (TkMATS)\n\nThe [Manufacturing Automated Test System](https://github.com/slightlynybbled/mats) is a Python library\nwhich provides useful structure for test creation and execution, but does not provide a user-defined\nmethod of controlling that test environment.  The purpose of this project is to provide the\nstart button and to provide visual feedback as to the actual test that is executing.  The\nimplementation is done using a `tkinter.Frame` subclass which may be embedded into any tkinter-style\nwindow.\n\n# Installation\n\nInstallation is as easy as `pip install tkmats`.\n\n# Usage\n\nYou must set up your test so that it can successfully execute on the \n[MATS](https://github.com/slightlynybbled/mats).  Once it is set up there, then you are just a couple\nof lines away from converting an ATE-based test to a TkMATS.\n\nWe will start with the example application located within the ATE repository.  The high-level\nfunctional bits are copied here for reference:\n\n    # create the sequence of test objects\n    sequence = [CommunicationTest(), PumpFlowTest()]\n    ts = TestSequence(sequence=sequence, auto_run=False, loglevel=logging.DEBUG)\n\n    # start the test as many times as you wish!\n    for _ in range(3):\n        ts.start()\n        sleep(2.0)\n\nNote that the test was simply started using the `TestSequence.start()` method.  Since we are\ngoing to have a test frame that comes with TkMATS, then we won't require the automated start and\ncan, instead, rely on the user button supplied.  Our complete sequence could be as simple as:\n\n    # create the sequence of test objects\n    sequence = [CommunicationTest(), PumpFlowTest()]\n    ts = TestSequence(sequence=sequence, auto_run=False, loglevel=logging.DEBUG)\n\n    window = tk.Tk()\n\n    tkmats_frame = TkMatsFrame(window, ts)\n    tkmats_frame.grid()\n\n    window.mainloop()\n\nNote that most of the added code is related to simply creating the `window` object within\nwhich the `TkMatsFrame` is to be embedded.\n\nThere are two tests that are executed here, one `CommunicationTest` and one `PumpTest`.  Screenshots\nof various possible scenarios are shown here:\n\n## Communications Test Failure\n\n![Communications Test Failure Screenshot](images/on-fail-comm.png)\n\n## Flow Test Failure\n\n![Flow Test Failure Screenshot](images/on-fail-flow.png)\n\n## All Passing\n\n![All Passing Screenshot](images/on-pass.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slightlynybbled/tkmats", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tkmats", "package_url": "https://pypi.org/project/tkmats/", "platform": "", "project_url": "https://pypi.org/project/tkmats/", "project_urls": {"Homepage": "https://github.com/slightlynybbled/tkmats"}, "release_url": "https://pypi.org/project/tkmats/0.8.0/", "requires_dist": ["mats (>=0.30.0)"], "requires_python": ">=3.6.0", "summary": "A tkinter-based front-end GUI for trigger and monitoring hardware tests based on the MATS package", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tk Manufacturing Automated Test System (TkMATS)</h1>\n<p>The <a href=\"https://github.com/slightlynybbled/mats\" rel=\"nofollow\">Manufacturing Automated Test System</a> is a Python library\nwhich provides useful structure for test creation and execution, but does not provide a user-defined\nmethod of controlling that test environment.  The purpose of this project is to provide the\nstart button and to provide visual feedback as to the actual test that is executing.  The\nimplementation is done using a <code>tkinter.Frame</code> subclass which may be embedded into any tkinter-style\nwindow.</p>\n<h1>Installation</h1>\n<p>Installation is as easy as <code>pip install tkmats</code>.</p>\n<h1>Usage</h1>\n<p>You must set up your test so that it can successfully execute on the\n<a href=\"https://github.com/slightlynybbled/mats\" rel=\"nofollow\">MATS</a>.  Once it is set up there, then you are just a couple\nof lines away from converting an ATE-based test to a TkMATS.</p>\n<p>We will start with the example application located within the ATE repository.  The high-level\nfunctional bits are copied here for reference:</p>\n<pre><code># create the sequence of test objects\nsequence = [CommunicationTest(), PumpFlowTest()]\nts = TestSequence(sequence=sequence, auto_run=False, loglevel=logging.DEBUG)\n\n# start the test as many times as you wish!\nfor _ in range(3):\n    ts.start()\n    sleep(2.0)\n</code></pre>\n<p>Note that the test was simply started using the <code>TestSequence.start()</code> method.  Since we are\ngoing to have a test frame that comes with TkMATS, then we won't require the automated start and\ncan, instead, rely on the user button supplied.  Our complete sequence could be as simple as:</p>\n<pre><code># create the sequence of test objects\nsequence = [CommunicationTest(), PumpFlowTest()]\nts = TestSequence(sequence=sequence, auto_run=False, loglevel=logging.DEBUG)\n\nwindow = tk.Tk()\n\ntkmats_frame = TkMatsFrame(window, ts)\ntkmats_frame.grid()\n\nwindow.mainloop()\n</code></pre>\n<p>Note that most of the added code is related to simply creating the <code>window</code> object within\nwhich the <code>TkMatsFrame</code> is to be embedded.</p>\n<p>There are two tests that are executed here, one <code>CommunicationTest</code> and one <code>PumpTest</code>.  Screenshots\nof various possible scenarios are shown here:</p>\n<h2>Communications Test Failure</h2>\n<p><img alt=\"Communications Test Failure Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5baafb528dbce1fedc73b09cc85be9325a67e433/696d616765732f6f6e2d6661696c2d636f6d6d2e706e67\"></p>\n<h2>Flow Test Failure</h2>\n<p><img alt=\"Flow Test Failure Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6098a672b1c5e3812b21959ea894e2a923991b5/696d616765732f6f6e2d6661696c2d666c6f772e706e67\"></p>\n<h2>All Passing</h2>\n<p><img alt=\"All Passing Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8361f2cdf24434fe2ae310437beca2a7a1d1e69/696d616765732f6f6e2d706173732e706e67\"></p>\n\n          </div>"}, "last_serial": 6650318, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "0d981129c811b575d99f132639756bc6", "sha256": "9e838adf2950e24b4d558f4334e49b7fe3d84d30800ce4cf0c784089cc3153b4"}, "downloads": -1, "filename": "tkmats-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d981129c811b575d99f132639756bc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 3950, "upload_time": "2020-01-15T12:46:58", "upload_time_iso_8601": "2020-01-15T12:46:58.424877Z", "url": "https://files.pythonhosted.org/packages/44/19/96121098b9573e81bbe9a0c441ecaad3baff937cfe678630bd8930dc17dc/tkmats-0.7.0-py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "ffd02ed91efcf0e918fbd378e3f00dd5", "sha256": "bf5c4aff9491dc5501713729ec4668c5a804b7afdc37f6a10957c107d564c1f9"}, "downloads": -1, "filename": "tkmats-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd02ed91efcf0e918fbd378e3f00dd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 3932, "upload_time": "2020-02-18T01:51:32", "upload_time_iso_8601": "2020-02-18T01:51:32.591342Z", "url": "https://files.pythonhosted.org/packages/4b/ea/7ae7f73cdd6388f8a4d9191c66942cdad661ebc6e3c802a52ec30ba928ce/tkmats-0.8.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffd02ed91efcf0e918fbd378e3f00dd5", "sha256": "bf5c4aff9491dc5501713729ec4668c5a804b7afdc37f6a10957c107d564c1f9"}, "downloads": -1, "filename": "tkmats-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd02ed91efcf0e918fbd378e3f00dd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 3932, "upload_time": "2020-02-18T01:51:32", "upload_time_iso_8601": "2020-02-18T01:51:32.591342Z", "url": "https://files.pythonhosted.org/packages/4b/ea/7ae7f73cdd6388f8a4d9191c66942cdad661ebc6e3c802a52ec30ba928ce/tkmats-0.8.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:52:35 2020"}