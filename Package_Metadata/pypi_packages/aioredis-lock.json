{"info": {"author": "Matt Rasband", "author_email": "matt.rasband@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "# aioredis_lock\n\n[![CircleCI](https://circleci.com/gh/mrasband/aioredis-lock.svg?style=svg)](https://circleci.com/gh/mrasband/aioredis-lock)\n\nImplementation of distributed locking with [aioredis](https://github.com/aio-libs/aioredis), an asyncio based redis client.\n\nThis is a standalone lib until, and if, [aio-libs/aioredis#573](https://github.com/aio-libs/aioredis/pull/573) is accepted.\n\n## Usage\n\nYou need an `aioredis.RedisConnection` or `aioredis.ConnectionsPool` already created.\n\n### Mutex\n\n```python\nfrom aioredis_lock import RedisLock, LockTimeoutError\n\ntry:\n    async with RedisLock(\n        pool,\n        key=\"foobar\",\n        # how long until the lock should expire (seconds). this can be extended\n        # via `await lock.extend(30)`\n        timeout=30,\n        # you can customize how long to allow the lock acquisitions to be\n        # attempted.\n        wait_timeout=30,\n    ) as lock:\n        # If you get here, you now have a lock and are the only program that\n        # should be running this code at this moment.\n\n        # do some work...\n\n        # we may want it longer...\n        await lock.extend(30)\n\nexcept LockTimeoutError:\n    # The lock could not be acquired by this worker and we should give up\n    pass\n```\n\n### Simple Leader/Follower(s)\n\nLet's suppose you need a simple leader/follower type implementation where you have a number of web-workers but just want 1 to preform a repeated task. In the case the leader fails someone else should pick up the work. Simply pass `wait_timeout=None` to RedisLock allowing the worker to keep trying to get a lock for when the leader eventually fails. The main complication here is extending the lock and validating the leader still owns it.\n\n```python\nfrom aioredis_lock import RedisLock\n\n# if the lock is lost, we still want to be a follower\nwhile True:\n\n    # wait indefinitely to acquire a lock\n    async with RedisLock(pool, \"shared_key\", wait_timeout=None) as lock:\n\n        # hold the lock as long as possible\n        while True:\n            if not await lock.is_owner():\n                logger.debug(\"We are no longer the lock owner, falling back\")\n                break\n\n            # do some work\n\n            if not await lock.renew():\n                logger.debug(\"We lost the lock, falling back to follower mode\")\n                break\n```\n\nThis mostly delegates the work of selecting and more importantly promoting leaders.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrasband/aioredis-lock", "keywords": "aioredis,redis,locking,distributed,asyncio", "license": "", "maintainer": "", "maintainer_email": "", "name": "aioredis-lock", "package_url": "https://pypi.org/project/aioredis-lock/", "platform": "", "project_url": "https://pypi.org/project/aioredis-lock/", "project_urls": {"Homepage": "https://github.com/mrasband/aioredis-lock"}, "release_url": "https://pypi.org/project/aioredis-lock/0.1.0/", "requires_dist": ["aioredis"], "requires_python": ">=3.7", "summary": "Wrapper to provide distributed locks in aioredis", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aioredis_lock</h1>\n<p><a href=\"https://circleci.com/gh/mrasband/aioredis-lock\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1422a315a29f7162fbfb9511deb1c67a12156a82/68747470733a2f2f636972636c6563692e636f6d2f67682f6d72617362616e642f61696f72656469732d6c6f636b2e7376673f7374796c653d737667\"></a></p>\n<p>Implementation of distributed locking with <a href=\"https://github.com/aio-libs/aioredis\" rel=\"nofollow\">aioredis</a>, an asyncio based redis client.</p>\n<p>This is a standalone lib until, and if, <a href=\"https://github.com/aio-libs/aioredis/pull/573\" rel=\"nofollow\">aio-libs/aioredis#573</a> is accepted.</p>\n<h2>Usage</h2>\n<p>You need an <code>aioredis.RedisConnection</code> or <code>aioredis.ConnectionsPool</code> already created.</p>\n<h3>Mutex</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioredis_lock</span> <span class=\"kn\">import</span> <span class=\"n\">RedisLock</span><span class=\"p\">,</span> <span class=\"n\">LockTimeoutError</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">RedisLock</span><span class=\"p\">(</span>\n        <span class=\"n\">pool</span><span class=\"p\">,</span>\n        <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># how long until the lock should expire (seconds). this can be extended</span>\n        <span class=\"c1\"># via `await lock.extend(30)`</span>\n        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n        <span class=\"c1\"># you can customize how long to allow the lock acquisitions to be</span>\n        <span class=\"c1\"># attempted.</span>\n        <span class=\"n\">wait_timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If you get here, you now have a lock and are the only program that</span>\n        <span class=\"c1\"># should be running this code at this moment.</span>\n\n        <span class=\"c1\"># do some work...</span>\n\n        <span class=\"c1\"># we may want it longer...</span>\n        <span class=\"k\">await</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">LockTimeoutError</span><span class=\"p\">:</span>\n    <span class=\"c1\"># The lock could not be acquired by this worker and we should give up</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h3>Simple Leader/Follower(s)</h3>\n<p>Let's suppose you need a simple leader/follower type implementation where you have a number of web-workers but just want 1 to preform a repeated task. In the case the leader fails someone else should pick up the work. Simply pass <code>wait_timeout=None</code> to RedisLock allowing the worker to keep trying to get a lock for when the leader eventually fails. The main complication here is extending the lock and validating the leader still owns it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioredis_lock</span> <span class=\"kn\">import</span> <span class=\"n\">RedisLock</span>\n\n<span class=\"c1\"># if the lock is lost, we still want to be a follower</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># wait indefinitely to acquire a lock</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">RedisLock</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"s2\">\"shared_key\"</span><span class=\"p\">,</span> <span class=\"n\">wait_timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">lock</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># hold the lock as long as possible</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"k\">await</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">is_owner</span><span class=\"p\">():</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"We are no longer the lock owner, falling back\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n\n            <span class=\"c1\"># do some work</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"k\">await</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"n\">renew</span><span class=\"p\">():</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"We lost the lock, falling back to follower mode\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n</pre>\n<p>This mostly delegates the work of selecting and more importantly promoting leaders.</p>\n\n          </div>"}, "last_serial": 6276237, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "16115d7dd47d2a739d62e1b873e89faf", "sha256": "7a071227f44f737ba16ff4f98b647517ea48a22fd3b050f7c53de3358c08d8a7"}, "downloads": -1, "filename": "aioredis-lock-0.0.1.tar.gz", "has_sig": false, "md5_digest": "16115d7dd47d2a739d62e1b873e89faf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4566, "upload_time": "2019-06-09T13:09:39", "upload_time_iso_8601": "2019-06-09T13:09:39.195723Z", "url": "https://files.pythonhosted.org/packages/a3/66/9e72c6f2197ebe832d4c72597b0cc88fe9b5ef127b6e40c1a7b1b06b2d13/aioredis-lock-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b8dd7ef307e5e09ebf29eb8c73732184", "sha256": "268ae9f6d8cae941e90cc8559191d746e53e2b1d8e328e5c40a3b6577b30dc08"}, "downloads": -1, "filename": "aioredis_lock-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b8dd7ef307e5e09ebf29eb8c73732184", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6209, "upload_time": "2019-06-29T14:36:42", "upload_time_iso_8601": "2019-06-29T14:36:42.692193Z", "url": "https://files.pythonhosted.org/packages/90/e1/101914eae8634e658e81490a514a28e9dd860f52c0589e99693c0bb83616/aioredis_lock-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bf6bf56e74ef56ca41bdbc6961c51cb", "sha256": "5cae9adf391ad5b00e7bd6120a2b79c7a25adbf21069224953c27f481cc3018c"}, "downloads": -1, "filename": "aioredis-lock-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8bf6bf56e74ef56ca41bdbc6961c51cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4608, "upload_time": "2019-06-29T14:36:44", "upload_time_iso_8601": "2019-06-29T14:36:44.548759Z", "url": "https://files.pythonhosted.org/packages/8d/aa/fd4754334ddd2869a5df23405c255d6aed62b4453c695cb38bc7dfbbfe4e/aioredis-lock-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1a930d220f272fb106d2c5c0664ea521", "sha256": "e99491c9589ba04c6144505eb9a3fa8a8cd0dbdd31257b5043eb06e6110af2af"}, "downloads": -1, "filename": "aioredis_lock-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1a930d220f272fb106d2c5c0664ea521", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6204, "upload_time": "2019-06-29T16:37:48", "upload_time_iso_8601": "2019-06-29T16:37:48.893157Z", "url": "https://files.pythonhosted.org/packages/96/a4/9cae5410ecf0ca3cf43798cfdce249d9fd41c2a67432b59c52bd35e46a64/aioredis_lock-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c07f57ed55c3f5fc46219d177ac6c0b3", "sha256": "ff927b0970abfcfbc77612567e8d9e82a4403f8a95b1658d9e1fec0d0dc35cf6"}, "downloads": -1, "filename": "aioredis-lock-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c07f57ed55c3f5fc46219d177ac6c0b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4616, "upload_time": "2019-06-29T16:37:50", "upload_time_iso_8601": "2019-06-29T16:37:50.339120Z", "url": "https://files.pythonhosted.org/packages/36/b6/d5c1a56fd9b8814e784e10036a976fa7508dc67deb83af4208ecedc2e358/aioredis-lock-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "29f4078d487947f104836a894fb494bf", "sha256": "0d0cda38f75609ba20ed6d34deef8a3594847e00c71d61774a76d0dbe428f551"}, "downloads": -1, "filename": "aioredis_lock-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29f4078d487947f104836a894fb494bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6203, "upload_time": "2019-12-10T23:55:17", "upload_time_iso_8601": "2019-12-10T23:55:17.870324Z", "url": "https://files.pythonhosted.org/packages/2b/bf/096e6a897d38feda71dd9aa33f9855b8bfa1dd7b84c599b3547fc6e60143/aioredis_lock-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3e3696ec3afbd0f21ad24c8b2c44eca", "sha256": "dd62f980c57bff8c8e66a0d1947c95060dbb9f5f465156fb705e3b47547ae834"}, "downloads": -1, "filename": "aioredis-lock-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3e3696ec3afbd0f21ad24c8b2c44eca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4609, "upload_time": "2019-12-10T23:55:19", "upload_time_iso_8601": "2019-12-10T23:55:19.558838Z", "url": "https://files.pythonhosted.org/packages/f8/c8/adc60ac0a6c3eebff408b7f684bc024e0bd32d2b18b76e0672c571be252b/aioredis-lock-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29f4078d487947f104836a894fb494bf", "sha256": "0d0cda38f75609ba20ed6d34deef8a3594847e00c71d61774a76d0dbe428f551"}, "downloads": -1, "filename": "aioredis_lock-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "29f4078d487947f104836a894fb494bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6203, "upload_time": "2019-12-10T23:55:17", "upload_time_iso_8601": "2019-12-10T23:55:17.870324Z", "url": "https://files.pythonhosted.org/packages/2b/bf/096e6a897d38feda71dd9aa33f9855b8bfa1dd7b84c599b3547fc6e60143/aioredis_lock-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3e3696ec3afbd0f21ad24c8b2c44eca", "sha256": "dd62f980c57bff8c8e66a0d1947c95060dbb9f5f465156fb705e3b47547ae834"}, "downloads": -1, "filename": "aioredis-lock-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3e3696ec3afbd0f21ad24c8b2c44eca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4609, "upload_time": "2019-12-10T23:55:19", "upload_time_iso_8601": "2019-12-10T23:55:19.558838Z", "url": "https://files.pythonhosted.org/packages/f8/c8/adc60ac0a6c3eebff408b7f684bc024e0bd32d2b18b76e0672c571be252b/aioredis-lock-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:53 2020"}