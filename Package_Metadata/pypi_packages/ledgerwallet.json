{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# ledgerwallet\n\nA Python library to control Ledger devices\n\n## Install\n\nThis package provides ledgerwallet, a library to interact with Ledger devices, and ledgerctl, a command line tool based on that library to easily perform operations on the devices.\n\nSupported devices are Ledger Blue, Ledger Nano S and Ledger Nano X.\n\n### Quick install\n\nledgerctl and the ledgerwallet library can be installed using pip:\n\n```shell\npip3 install --upgrade protobuf setuptools\npip3 install ledgerwallet\n```\n\nUnder a Debian or Ubuntu based system, compiling HIDAPI requires to install additional packages:\n\n```shell\nsudo apt install python3-dev libusb-1.0.0-dev libudev-dev\n```\n\n### Device configuration\n\nYou should install a custom certificate authority (CA) on the device to make the usage of ledgerctl easier. This certificate is used to establish a custom secure channel between the computer and the device, and identifies ledgerctl as a \"trusted manager\" on the device.\n\nTo install a custom CA, boot the device in \"Recovery\" mode, by pressing the right button at boot time. Then run:\n\n```shell\nledgerctl install-ca <NAME>\n```\n\nwhere \\<NAME\\> is the name that will be displayed on the device to identify the CA. It can be any label, like \"ledgerctl\", \"Dev\", or \"CA\".\n\nYou are now ready to use ledgerctl.\n\n## Usage\n\nTo display the commands supported by ledgerctl, run `ledgerctl` or `ledgerctl --help`. Help for each command can be displayed by running `ledgerctl <command> --help`.\n\nSupported commands include retrieving basic device information, installing and removing apps, viewing available space on the device, etc.\n\nHere are a few examples:\n\n- Displaying available space on the device\n\n```shell\nledgerctl meminfo\n```\n\n- Listing installed applications\n\n```shell\nledgerctl list\n```\n\n- Deleting the Bitcoin application\n\n```shell\nledgerctl delete Bitcoin\n```\n\n### Installing custom apps\n\nLoading an application on the device is currently bound to the SDK and to the build process.\n\nInstallation of custom apps differ from the way provided by the SDK. To keep the install process simple, we chose to use \"Manifest\" files for applications. Manifests are JSON files which contain the required parameters to install the application. You can find an example manifest in the tests/app directory.\n\nManifest entries are pretty straightforward if you are familiar with the BOLOS SDK, except one of them: `dataSize`. That entry specifies the size of the writable area of the application. This is the size needed by the application to save persistent data. Its value seldom changes.\n\nYou can use an ugly one-liner to retrieve it:\n\n```shell\necho $(($(grep _envram_data debug/app.map | awk '{ print $1 }') - $(grep _nvram_data debug/app.map | awk '{ print $1 }')))\n```\n\nAs an example, the standard way to install the [Bitcoin application]( https://github.com/LedgerHQ/ledger-app-btc ) you compiled is to run `make load` with the BOLOS SDK. It launches the following command:\n\n```shell\npython3 -m ledgerblue.loadApp --curve secp256k1 --tlv --targetId 0x31100004 --targetVersion=\"1.6.0\" --delete --fileName bin/app.hex --appName \"Bitcoin\" --appVersion 1.3.13 --dataSize $((0x`cat debug/app.map |grep _envram_data | tr -s ' ' | cut -f2 -d' '|cut -f2 -d'x'` - 0x`cat debug/app.map |grep _nvram_data | tr -s ' ' | cut -f2 -d' '|cut -f2 -d'x'`)) `ICONHEX=\\`python3 /home/dev/sdk/icon3.py --hexbitmaponly nanos_app_bitcoin.gif  2>/dev/null\\` ; [ ! -z \"$ICONHEX\" ] && echo \"--icon $ICONHEX\"`  --path \"\" --appFlags 0xa50 --offline bin/app.apdu | grep \"Application\" | cut -f5 -d' ' > bin/app.sha256\n```\n\nTo install it with ledgerctl:\n\n1. Retrieve `dataSize` using the above one-liner.\n2. Create a manifest file app.json in the ledger-app-btc directory:\n\n```json\n{\n    \"name\": \"Bitcoin\",\n    \"version\": \"1.3.13\",\n    \"icon\": \"nanos_app_bitcoin.gif\",\n    \"targetId\": \"0x31100004\",\n    \"flags\": \"0xA50\",\n    \"derivationPath\": {\n        \"curves\": [\"secp256k1\"]\n    },\n    \"binary\": \"bin/app.hex\",\n    \"dataSize\": 64\n}\n```\n\n3. Install with `ledgerctl install app.json`.\n\nIf you want to force the deletion of the previous version, run the previous command with the `-f` flag.\n\n### Viewing APDUs\n\nCommunication between the host and the device use Application Protocol Data Unit (APDUs). To display the raw APDUs, usually for debugging purposes, run ledgerctl with the `-v` switch on any command. For example, here are the APDUs exchanged to run the Bitcoin application:\n\n```shell\n$ ledgerctl -v run Bitcoin\n=> e0d8000007426974636f696e\n<= 9000\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LedgerHQ/ledgerctl/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ledgerwallet", "package_url": "https://pypi.org/project/ledgerwallet/", "platform": "", "project_url": "https://pypi.org/project/ledgerwallet/", "project_urls": {"Homepage": "https://github.com/LedgerHQ/ledgerctl/"}, "release_url": "https://pypi.org/project/ledgerwallet/0.1.2/", "requires_dist": ["click (>=7.0)", "construct (>=2.9)", "cryptography (>=2.5)", "ecdsa", "hidapi", "intelhex", "Pillow", "protobuf (>=3.6)", "requests", "tabulate"], "requires_python": ">=3.5", "summary": "Python client and library to communicate with Ledger devices", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ledgerwallet</h1>\n<p>A Python library to control Ledger devices</p>\n<h2>Install</h2>\n<p>This package provides ledgerwallet, a library to interact with Ledger devices, and ledgerctl, a command line tool based on that library to easily perform operations on the devices.</p>\n<p>Supported devices are Ledger Blue, Ledger Nano S and Ledger Nano X.</p>\n<h3>Quick install</h3>\n<p>ledgerctl and the ledgerwallet library can be installed using pip:</p>\n<pre>pip3 install --upgrade protobuf setuptools\npip3 install ledgerwallet\n</pre>\n<p>Under a Debian or Ubuntu based system, compiling HIDAPI requires to install additional packages:</p>\n<pre>sudo apt install python3-dev libusb-1.0.0-dev libudev-dev\n</pre>\n<h3>Device configuration</h3>\n<p>You should install a custom certificate authority (CA) on the device to make the usage of ledgerctl easier. This certificate is used to establish a custom secure channel between the computer and the device, and identifies ledgerctl as a \"trusted manager\" on the device.</p>\n<p>To install a custom CA, boot the device in \"Recovery\" mode, by pressing the right button at boot time. Then run:</p>\n<pre>ledgerctl install-ca &lt;NAME&gt;\n</pre>\n<p>where &lt;NAME&gt; is the name that will be displayed on the device to identify the CA. It can be any label, like \"ledgerctl\", \"Dev\", or \"CA\".</p>\n<p>You are now ready to use ledgerctl.</p>\n<h2>Usage</h2>\n<p>To display the commands supported by ledgerctl, run <code>ledgerctl</code> or <code>ledgerctl --help</code>. Help for each command can be displayed by running <code>ledgerctl &lt;command&gt; --help</code>.</p>\n<p>Supported commands include retrieving basic device information, installing and removing apps, viewing available space on the device, etc.</p>\n<p>Here are a few examples:</p>\n<ul>\n<li>Displaying available space on the device</li>\n</ul>\n<pre>ledgerctl meminfo\n</pre>\n<ul>\n<li>Listing installed applications</li>\n</ul>\n<pre>ledgerctl list\n</pre>\n<ul>\n<li>Deleting the Bitcoin application</li>\n</ul>\n<pre>ledgerctl delete Bitcoin\n</pre>\n<h3>Installing custom apps</h3>\n<p>Loading an application on the device is currently bound to the SDK and to the build process.</p>\n<p>Installation of custom apps differ from the way provided by the SDK. To keep the install process simple, we chose to use \"Manifest\" files for applications. Manifests are JSON files which contain the required parameters to install the application. You can find an example manifest in the tests/app directory.</p>\n<p>Manifest entries are pretty straightforward if you are familiar with the BOLOS SDK, except one of them: <code>dataSize</code>. That entry specifies the size of the writable area of the application. This is the size needed by the application to save persistent data. Its value seldom changes.</p>\n<p>You can use an ugly one-liner to retrieve it:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"k\">$(($(</span>grep _envram_data debug/app.map <span class=\"p\">|</span> awk <span class=\"s1\">'{ print $1 }'</span><span class=\"k\">)</span> <span class=\"o\">-</span> <span class=\"k\">$(</span>grep _nvram_data debug/app.map <span class=\"p\">|</span> awk <span class=\"s1\">'{ print $1 }'</span><span class=\"k\">)))</span>\n</pre>\n<p>As an example, the standard way to install the <a href=\"https://github.com/LedgerHQ/ledger-app-btc\" rel=\"nofollow\">Bitcoin application</a> you compiled is to run <code>make load</code> with the BOLOS SDK. It launches the following command:</p>\n<pre>python3 -m ledgerblue.loadApp --curve secp256k1 --tlv --targetId 0x31100004 --targetVersion<span class=\"o\">=</span><span class=\"s2\">\"1.6.0\"</span> --delete --fileName bin/app.hex --appName <span class=\"s2\">\"Bitcoin\"</span> --appVersion <span class=\"m\">1</span>.3.13 --dataSize <span class=\"k\">$((</span><span class=\"m\">0</span>x<span class=\"sb\">`</span>cat debug/app.map <span class=\"p\">|</span>grep _envram_data <span class=\"p\">|</span> tr -s <span class=\"s1\">' '</span> <span class=\"p\">|</span> cut -f2 -d<span class=\"s1\">' '</span><span class=\"p\">|</span>cut -f2 -d<span class=\"s1\">'x'</span><span class=\"sb\">`</span> <span class=\"o\">-</span> <span class=\"m\">0</span>x<span class=\"sb\">`</span>cat debug/app.map <span class=\"p\">|</span>grep _nvram_data <span class=\"p\">|</span> tr -s <span class=\"s1\">' '</span> <span class=\"p\">|</span> cut -f2 -d<span class=\"s1\">' '</span><span class=\"p\">|</span>cut -f2 -d<span class=\"s1\">'x'</span><span class=\"sb\">`</span><span class=\"k\">))</span> <span class=\"sb\">`</span><span class=\"nv\">ICONHEX</span><span class=\"o\">=</span><span class=\"se\">\\`</span>python3 /home/dev/sdk/icon3.py --hexbitmaponly nanos_app_bitcoin.gif  <span class=\"m\">2</span>&gt;/dev/null<span class=\"se\">\\`</span> <span class=\"p\">;</span> <span class=\"o\">[</span> ! -z <span class=\"s2\">\"</span><span class=\"nv\">$ICONHEX</span><span class=\"s2\">\"</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s2\">\"--icon </span><span class=\"nv\">$ICONHEX</span><span class=\"s2\">\"</span><span class=\"sb\">`</span>  --path <span class=\"s2\">\"\"</span> --appFlags 0xa50 --offline bin/app.apdu <span class=\"p\">|</span> grep <span class=\"s2\">\"Application\"</span> <span class=\"p\">|</span> cut -f5 -d<span class=\"s1\">' '</span> &gt; bin/app.sha256\n</pre>\n<p>To install it with ledgerctl:</p>\n<ol>\n<li>Retrieve <code>dataSize</code> using the above one-liner.</li>\n<li>Create a manifest file app.json in the ledger-app-btc directory:</li>\n</ol>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bitcoin\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.3.13\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"icon\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nanos_app_bitcoin.gif\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"targetId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0x31100004\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"flags\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0xA50\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"derivationPath\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"curves\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"secp256k1\"</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"binary\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bin/app.hex\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"dataSize\"</span><span class=\"p\">:</span> <span class=\"mi\">64</span>\n<span class=\"p\">}</span>\n</pre>\n<ol>\n<li>Install with <code>ledgerctl install app.json</code>.</li>\n</ol>\n<p>If you want to force the deletion of the previous version, run the previous command with the <code>-f</code> flag.</p>\n<h3>Viewing APDUs</h3>\n<p>Communication between the host and the device use Application Protocol Data Unit (APDUs). To display the raw APDUs, usually for debugging purposes, run ledgerctl with the <code>-v</code> switch on any command. For example, here are the APDUs exchanged to run the Bitcoin application:</p>\n<pre>$ ledgerctl -v run <span class=\"nv\">Bitcoin</span>\n<span class=\"o\">=</span>&gt; e0d8000007426974636f696e\n&lt;<span class=\"o\">=</span> <span class=\"m\">9000</span>\n</pre>\n\n          </div>"}, "last_serial": 6194475, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e4cd279c32db26f5aeab1728cc8dc788", "sha256": "ea2f9ccf70592cab1c662e7ddbdc6dd9d6a8006d0bdcb114b84b3c3be6e7e1aa"}, "downloads": -1, "filename": "ledgerwallet-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e4cd279c32db26f5aeab1728cc8dc788", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23619, "upload_time": "2019-11-21T10:03:55", "upload_time_iso_8601": "2019-11-21T10:03:55.104428Z", "url": "https://files.pythonhosted.org/packages/cc/b7/1b055ceeb0d841625a4c53baf3cb12f815c96219c9de7f658815b052cba5/ledgerwallet-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b22dfc14b73b75a6af2dee0393352392", "sha256": "bcce7cb13ef30256498cc88ace1d8012013b04925e8cfafb14f37377cd5deec0"}, "downloads": -1, "filename": "ledgerwallet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b22dfc14b73b75a6af2dee0393352392", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19429, "upload_time": "2019-11-21T10:03:57", "upload_time_iso_8601": "2019-11-21T10:03:57.505434Z", "url": "https://files.pythonhosted.org/packages/43/20/c8e841bc4881cea48beabfa638050706376ca85cd13dfe7610692b6e28ab/ledgerwallet-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "01e5ecad4a2d00ee2b98e72b6a6c3c3d", "sha256": "59d2301843ba98326066e331d4a0830f81e541c4871161bb630e2842c5e68709"}, "downloads": -1, "filename": "ledgerwallet-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "01e5ecad4a2d00ee2b98e72b6a6c3c3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 26630, "upload_time": "2019-11-25T14:31:18", "upload_time_iso_8601": "2019-11-25T14:31:18.614641Z", "url": "https://files.pythonhosted.org/packages/d8/7a/06b19044ad24bb2a7e0d5dbb0795fb0a0bfe4776b0d25692d7e80a57dcd4/ledgerwallet-0.1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01e5ecad4a2d00ee2b98e72b6a6c3c3d", "sha256": "59d2301843ba98326066e331d4a0830f81e541c4871161bb630e2842c5e68709"}, "downloads": -1, "filename": "ledgerwallet-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "01e5ecad4a2d00ee2b98e72b6a6c3c3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 26630, "upload_time": "2019-11-25T14:31:18", "upload_time_iso_8601": "2019-11-25T14:31:18.614641Z", "url": "https://files.pythonhosted.org/packages/d8/7a/06b19044ad24bb2a7e0d5dbb0795fb0a0bfe4776b0d25692d7e80a57dcd4/ledgerwallet-0.1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:47:14 2020"}