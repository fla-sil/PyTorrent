{"info": {"author": "johnsoong216", "author_email": "johnsoong216@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Pymarkowitz\n\n<p align=\"left\">\n    <a href=\"https://www.python.org/\">\n        <img src=\"https://ForTheBadge.com/images/badges/made-with-python.svg\"\n            alt=\"python\"></a> &nbsp;\n    <a href=\"https://opensource.org/licenses/MIT\">\n        <img src=\"https://img.shields.io/badge/License-MIT-brightgreen.svg?style=flat-square\"\n            alt=\"MIT license\"></a> &nbsp;\n</p>\n\n**Pymarkowitz** is an open source library for implementing portfolio optimisation. This library extends beyond the classical mean-variance optimization and takes into account a variety of risk and reward metrics, as well as the skew/kurtosis of assets.\n\n**Pymarkowitz** can aid your decision-making in portfolio allocation in a risk-efficient manner. Pymarkowitz covers major objectives and constraints related with major types of risk and reward metrics, as well as simulation to examine the relationship between all these metrics. The flexibility in its implementation gives you the maximum discretion to customize and suit it to your own needs. \n\n\n*Disclaimer: This library is for educational and entertainment purpose only. Please invest with due diligence at your own risk.\n\nHead over to the directory **demos** to get an in-depth look at the project and its functionalities, or continue below to check out some brief examples.\n\n---\n\n## Table of Contents\n\n\n- [Installation](#installation)\n- [Features](#features)\n- [Get In Touch](#get-in-touch)\n- [Reference](#reference)\n- [License](#license)\n\n---\n\n## Installation\n\n### Setup\n\n> install directly using pip\n\n```shell\n$ pip install pymarkowitz\n```\n\n> install from github\n\n```shell\n$ pip install git+https://github.com/johnsoong216/pymarkowitz.git\n```\n\n### Development\n\n> For development purposes you can clone or fork the repo and hack right away!\n\n```shell\n$ git clone https://github.com/johnsoong216/pymarkowitz.git\n```\n---\n\n## Features\n- [Preprocessing](##preprocessing)\n- [Optimization](##optimization)\n- [Simulation](##simulation)\n- [Backtesting](##backtesting)\n\n\n---\n### Preprocessing\n\n> First step is to import all availble modules\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom pymarkowitz import *\n\n```\n> Read data with pandas. The dataset is available in the **datasets** directory. I will select 15 random stocks with 1000 observations\n\n```python\n\nsp500 = pd.read_csv(\"datasets/sp500_1990_2000.csv\", index_col='DATE').drop([\"Unnamed: 0\"], axis=1)\nselected = sp500.iloc[:1000, np.random.choice(np.arange(0, sp500.shape[1]), 15, replace=False)]\n\n```\n> Use a ReturnGenerator to compute historical mean return and daily return. Note that there are a variety of options to compute rolling/continuous/discrete returns. Please refer to the **Return.ipynb** jupyter notebook in **demo** directory\n\n```python\n\nret_generator = ReturnGenerator(selected)\nmu_return = ret_generator.calc_mean_return(method='geometric')\ndaily_return = ret_generator.calc_return(method='daily')\n\n```\n> Use a MomentGenerator to compute covariance/coskewness/cokurtosis matrix and beta. Note that there are a variety of options to compute the comoment matrix and asset beta, such as with semivariance, exponential and customized weighting. Normalizing matrices are also supported. Please refer to the **Moment(Covariance).ipynb** jupyter notebook in **demo** directory\n\n```python\n\nbenchmark = sp500.iloc[:1000].pct_change().dropna(how='any').sum(axis=1)/sp500.shape[1]\ncov_matrix = mom_generator.calc_cov_mat()\nbeta_vec = mom_generator.calc_beta(benchmark)\n\n```\n\n> Construct higher moment matrices by calling\n\n```python\n\n\ncoskew_matrix = mom_generator.calc_coskew_mat()\ncokurt_matrix = mom_generator.calc_cokurt_mat()\ncoseventh_matrix = mom_generator.calc_comoment_mat(7)\n\n```\n\n> Construct an Optimizer\n\n```python\n\nPortOpt = Optimizer(mu_return, cov_matrix, beta_vec)\n\n```\n\n### Optimization\n\n> Please refer to the **Optimization.ipynb** jupyter notebook in **demo** directory for more detailed explanations.\n\n\n> Set your Objective. \n\n```python\n\n### Call PortOpt.objective_options() to look at all available objectives\n\nPortOpt.add_objective(\"min_volatility\")\n\n```\n\n> Set your Constraints. \n\n```python\n\n### Call PortOpt.constraint_options() to look at all available constraints.\n\nPortOpt.add_constraint(\"weight\", weight_bound=(-1,1), leverage=1) # Portfolio Long/Short\nPortOpt.add_constraint(\"concentration\", top_holdings=2, top_concentration=0.5) # Portfolio Concentration\n\n```\n\n> Solve and Check Summary\n\n\n```python\nPortOpt.solve()\nweight_dict, metric_dict = PortOpt.summary(risk_free=0.015, market_return=0.07, top_holdings=2)\n\n\n# Metric Dict Sample Output\n{'Expected Return': 0.085,\n 'Leverage': 1.0001,\n 'Number of Holdings': 5,\n 'Top 2 Holdings Concentrations': 0.5779,\n 'Volatility': 0.1253,\n 'Portfolio Beta': 0.7574,\n 'Sharpe Ratio': 0.5586,\n 'Treynor Ratio': 0.0924,\n \"Jenson's Alpha\": 0.0283}\n \n# Weight Dict Sample Output\n{'GIS': 0.309, 'CINF': 0.0505, 'USB': 0.104, 'HES': 0.2676, 'AEP': 0.269}\n\n```\n\n### Simulation\n\n> Simulate and Select the Return Format (Seaborn, Plotly, DataFrame). DataFrame Option will also have the random weights used in each iteration.\n\n> Please refer to the **Simulation.ipynb** jupyter notebook in **demo** directory for more detailed explanations.\n\n\n```python\n\n### Call Portopt.metric_options to see all available options for x, y axis\n\nPortOpt.simulate(x='expected_return', y='sharpe', y_var={\"risk_free\": 0.02}, iters=10000, weight_bound=(-1, 1), leverage=1, ret_format='sns')\n\n```\n![Sharpe VS Return](https://github.com/johnsoong216/pymarkowitz/blob/master/images/return_vs_sharpe.png)\n\n\n### Backtesting\n\n> Use **pymarkowitz** to construct optimized weights and backtest with real life portfolio.\nIn this example, I am using SPDR sector ETFs to construct an optimized portfolio and compare against buy & hold SPY.\n\n\n---\n\n```python\nimport bt\n\ndata = bt.get('spy, rwr, xlb, xli, xly, xlp, xle, xlf, xlu, xlv, xlk', start='2005-01-01')\n```\n\n> The configurations can be adjusted flexibly, please check backtesting.ipynb in demo directory for more detail. In this case we are minimizing volatility with a capped weight of 25% on each sector.\n```python\nstrategy = WeighMarkowitz(Config) #Imported from pymarkowitz.backtester.py\n\n# Personal Strategy\ns1 = bt.Strategy('s1', [bt.algos.RunWeekly(),\n                       bt.algos.SelectAll(),\n                       strategy,\n                       bt.algos.Rebalance()])\ntest1 = bt.Backtest(s1, data)\n\n# Buy & Hold\ns2 = bt.Strategy('s2', [bt.algos.RunWeekly(),\n                       bt.algos.SelectAll(),\n                       bt.algos.WeighEqually(),\n                       bt.algos.Rebalance()])\ntest2 = bt.Backtest(s2, data[['spy']].iloc[Config.lookback:])\nres = bt.run(test1, test2)\nres.plot()\n```\n![Backtest_Result](https://github.com/johnsoong216/pymarkowitz/blob/master/images/backtest_sector_vs_spy.PNG)\n\n\n## Get In Touch\n\n- Please reach out to me through email at johnsoong216@hotmail.com. Love to get connected and Chat!\n\n---\n\n## Reference\n\nCalculations of **Correlation, Diversifcation & Risk Parity Factors**:\n<br>\nhttps://investresolve.com/file/pdf/Portfolio-Optimization-Whitepaper.pdf\n\nCalculations for **Sharpe, Sortino, Beta, Treynor, Jenson's Alpha**:\n<br>\nhttps://www.cfainstitute.org/-/media/documents/support/programs/investment-foundations/19-performance-evaluation.ashx?la=en&hash=F7FF3085AAFADE241B73403142AAE0BB1250B311\n<br>\nhttps://www.investopedia.com/terms/j/jensensmeasure.asp\n<br>\nhttps://www.investopedia.com/ask/answers/070615/what-formula-calculating-beta.asp\n<br>\n\nCalculations for **Higher Moment Matrices**:\n<br>\nhttps://cran.r-project.org/web/packages/PerformanceAnalytics/vignettes/EstimationComoments.pdf\n<br>\n\n\n---\n\n## License\n\n[![License](http://img.shields.io/:license-mit-blue.svg?style=flat-square)](http://badges.mit-license.org)\n\n- **[MIT license](http://opensource.org/licenses/mit-license.php)**\n- Copyright 2020 \u00a9", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/johnsoong216/pymarkowitz/archive/v1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnsoong216/pymarkowitz", "keywords": "portfolio-optimization,finance,mean-variance-optimization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymarkowitz", "package_url": "https://pypi.org/project/pymarkowitz/", "platform": "", "project_url": "https://pypi.org/project/pymarkowitz/", "project_urls": {"Download": "https://github.com/johnsoong216/pymarkowitz/archive/v1.0.tar.gz", "Homepage": "https://github.com/johnsoong216/pymarkowitz"}, "release_url": "https://pypi.org/project/pymarkowitz/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "pymarkowitz", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pymarkowitz</h1>\n<p align=\"left\">\n    <a href=\"https://www.python.org/\" rel=\"nofollow\">\n        <img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e038ef87cde080e2076e6e9f5477af7e09dacbc5/68747470733a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6d6164652d776974682d707974686f6e2e737667\"></a> \u00a0\n    <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">\n        <img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ce67aaa3b9058525966a038029d61c2b83ce873/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a> \u00a0\n</p>\n<p><strong>Pymarkowitz</strong> is an open source library for implementing portfolio optimisation. This library extends beyond the classical mean-variance optimization and takes into account a variety of risk and reward metrics, as well as the skew/kurtosis of assets.</p>\n<p><strong>Pymarkowitz</strong> can aid your decision-making in portfolio allocation in a risk-efficient manner. Pymarkowitz covers major objectives and constraints related with major types of risk and reward metrics, as well as simulation to examine the relationship between all these metrics. The flexibility in its implementation gives you the maximum discretion to customize and suit it to your own needs.</p>\n<p>*Disclaimer: This library is for educational and entertainment purpose only. Please invest with due diligence at your own risk.</p>\n<p>Head over to the directory <strong>demos</strong> to get an in-depth look at the project and its functionalities, or continue below to check out some brief examples.</p>\n<hr>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#get-in-touch\" rel=\"nofollow\">Get In Touch</a></li>\n<li><a href=\"#reference\" rel=\"nofollow\">Reference</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<h3>Setup</h3>\n<blockquote>\n<p>install directly using pip</p>\n</blockquote>\n<pre>$ pip install pymarkowitz\n</pre>\n<blockquote>\n<p>install from github</p>\n</blockquote>\n<pre>$ pip install git+https://github.com/johnsoong216/pymarkowitz.git\n</pre>\n<h3>Development</h3>\n<blockquote>\n<p>For development purposes you can clone or fork the repo and hack right away!</p>\n</blockquote>\n<pre>$ git clone https://github.com/johnsoong216/pymarkowitz.git\n</pre>\n<hr>\n<h2>Features</h2>\n<ul>\n<li><a href=\"##preprocessing\" rel=\"nofollow\">Preprocessing</a></li>\n<li><a href=\"##optimization\" rel=\"nofollow\">Optimization</a></li>\n<li><a href=\"##simulation\" rel=\"nofollow\">Simulation</a></li>\n<li><a href=\"##backtesting\" rel=\"nofollow\">Backtesting</a></li>\n</ul>\n<hr>\n<h3>Preprocessing</h3>\n<blockquote>\n<p>First step is to import all availble modules</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymarkowitz</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<blockquote>\n<p>Read data with pandas. The dataset is available in the <strong>datasets</strong> directory. I will select 15 random stocks with 1000 observations</p>\n</blockquote>\n<pre><span class=\"n\">sp500</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"datasets/sp500_1990_2000.csv\"</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"s1\">'DATE'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s2\">\"Unnamed: 0\"</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">selected</span> <span class=\"o\">=</span> <span class=\"n\">sp500</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sp500</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)]</span>\n</pre>\n<blockquote>\n<p>Use a ReturnGenerator to compute historical mean return and daily return. Note that there are a variety of options to compute rolling/continuous/discrete returns. Please refer to the <strong>Return.ipynb</strong> jupyter notebook in <strong>demo</strong> directory</p>\n</blockquote>\n<pre><span class=\"n\">ret_generator</span> <span class=\"o\">=</span> <span class=\"n\">ReturnGenerator</span><span class=\"p\">(</span><span class=\"n\">selected</span><span class=\"p\">)</span>\n<span class=\"n\">mu_return</span> <span class=\"o\">=</span> <span class=\"n\">ret_generator</span><span class=\"o\">.</span><span class=\"n\">calc_mean_return</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'geometric'</span><span class=\"p\">)</span>\n<span class=\"n\">daily_return</span> <span class=\"o\">=</span> <span class=\"n\">ret_generator</span><span class=\"o\">.</span><span class=\"n\">calc_return</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'daily'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Use a MomentGenerator to compute covariance/coskewness/cokurtosis matrix and beta. Note that there are a variety of options to compute the comoment matrix and asset beta, such as with semivariance, exponential and customized weighting. Normalizing matrices are also supported. Please refer to the <strong>Moment(Covariance).ipynb</strong> jupyter notebook in <strong>demo</strong> directory</p>\n</blockquote>\n<pre><span class=\"n\">benchmark</span> <span class=\"o\">=</span> <span class=\"n\">sp500</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:</span><span class=\"mi\">1000</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pct_change</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">'any'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">sp500</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">cov_matrix</span> <span class=\"o\">=</span> <span class=\"n\">mom_generator</span><span class=\"o\">.</span><span class=\"n\">calc_cov_mat</span><span class=\"p\">()</span>\n<span class=\"n\">beta_vec</span> <span class=\"o\">=</span> <span class=\"n\">mom_generator</span><span class=\"o\">.</span><span class=\"n\">calc_beta</span><span class=\"p\">(</span><span class=\"n\">benchmark</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Construct higher moment matrices by calling</p>\n</blockquote>\n<pre><span class=\"n\">coskew_matrix</span> <span class=\"o\">=</span> <span class=\"n\">mom_generator</span><span class=\"o\">.</span><span class=\"n\">calc_coskew_mat</span><span class=\"p\">()</span>\n<span class=\"n\">cokurt_matrix</span> <span class=\"o\">=</span> <span class=\"n\">mom_generator</span><span class=\"o\">.</span><span class=\"n\">calc_cokurt_mat</span><span class=\"p\">()</span>\n<span class=\"n\">coseventh_matrix</span> <span class=\"o\">=</span> <span class=\"n\">mom_generator</span><span class=\"o\">.</span><span class=\"n\">calc_comoment_mat</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Construct an Optimizer</p>\n</blockquote>\n<pre><span class=\"n\">PortOpt</span> <span class=\"o\">=</span> <span class=\"n\">Optimizer</span><span class=\"p\">(</span><span class=\"n\">mu_return</span><span class=\"p\">,</span> <span class=\"n\">cov_matrix</span><span class=\"p\">,</span> <span class=\"n\">beta_vec</span><span class=\"p\">)</span>\n</pre>\n<h3>Optimization</h3>\n<blockquote>\n<p>Please refer to the <strong>Optimization.ipynb</strong> jupyter notebook in <strong>demo</strong> directory for more detailed explanations.</p>\n</blockquote>\n<blockquote>\n<p>Set your Objective.</p>\n</blockquote>\n<pre><span class=\"c1\">### Call PortOpt.objective_options() to look at all available objectives</span>\n\n<span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">add_objective</span><span class=\"p\">(</span><span class=\"s2\">\"min_volatility\"</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Set your Constraints.</p>\n</blockquote>\n<pre><span class=\"c1\">### Call PortOpt.constraint_options() to look at all available constraints.</span>\n\n<span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">add_constraint</span><span class=\"p\">(</span><span class=\"s2\">\"weight\"</span><span class=\"p\">,</span> <span class=\"n\">weight_bound</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">leverage</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># Portfolio Long/Short</span>\n<span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">add_constraint</span><span class=\"p\">(</span><span class=\"s2\">\"concentration\"</span><span class=\"p\">,</span> <span class=\"n\">top_holdings</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">top_concentration</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\"># Portfolio Concentration</span>\n</pre>\n<blockquote>\n<p>Solve and Check Summary</p>\n</blockquote>\n<pre><span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n<span class=\"n\">weight_dict</span><span class=\"p\">,</span> <span class=\"n\">metric_dict</span> <span class=\"o\">=</span> <span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">(</span><span class=\"n\">risk_free</span><span class=\"o\">=</span><span class=\"mf\">0.015</span><span class=\"p\">,</span> <span class=\"n\">market_return</span><span class=\"o\">=</span><span class=\"mf\">0.07</span><span class=\"p\">,</span> <span class=\"n\">top_holdings</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Metric Dict Sample Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'Expected Return'</span><span class=\"p\">:</span> <span class=\"mf\">0.085</span><span class=\"p\">,</span>\n <span class=\"s1\">'Leverage'</span><span class=\"p\">:</span> <span class=\"mf\">1.0001</span><span class=\"p\">,</span>\n <span class=\"s1\">'Number of Holdings'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n <span class=\"s1\">'Top 2 Holdings Concentrations'</span><span class=\"p\">:</span> <span class=\"mf\">0.5779</span><span class=\"p\">,</span>\n <span class=\"s1\">'Volatility'</span><span class=\"p\">:</span> <span class=\"mf\">0.1253</span><span class=\"p\">,</span>\n <span class=\"s1\">'Portfolio Beta'</span><span class=\"p\">:</span> <span class=\"mf\">0.7574</span><span class=\"p\">,</span>\n <span class=\"s1\">'Sharpe Ratio'</span><span class=\"p\">:</span> <span class=\"mf\">0.5586</span><span class=\"p\">,</span>\n <span class=\"s1\">'Treynor Ratio'</span><span class=\"p\">:</span> <span class=\"mf\">0.0924</span><span class=\"p\">,</span>\n <span class=\"s2\">\"Jenson's Alpha\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0283</span><span class=\"p\">}</span>\n \n<span class=\"c1\"># Weight Dict Sample Output</span>\n<span class=\"p\">{</span><span class=\"s1\">'GIS'</span><span class=\"p\">:</span> <span class=\"mf\">0.309</span><span class=\"p\">,</span> <span class=\"s1\">'CINF'</span><span class=\"p\">:</span> <span class=\"mf\">0.0505</span><span class=\"p\">,</span> <span class=\"s1\">'USB'</span><span class=\"p\">:</span> <span class=\"mf\">0.104</span><span class=\"p\">,</span> <span class=\"s1\">'HES'</span><span class=\"p\">:</span> <span class=\"mf\">0.2676</span><span class=\"p\">,</span> <span class=\"s1\">'AEP'</span><span class=\"p\">:</span> <span class=\"mf\">0.269</span><span class=\"p\">}</span>\n</pre>\n<h3>Simulation</h3>\n<blockquote>\n<p>Simulate and Select the Return Format (Seaborn, Plotly, DataFrame). DataFrame Option will also have the random weights used in each iteration.</p>\n</blockquote>\n<blockquote>\n<p>Please refer to the <strong>Simulation.ipynb</strong> jupyter notebook in <strong>demo</strong> directory for more detailed explanations.</p>\n</blockquote>\n<pre><span class=\"c1\">### Call Portopt.metric_options to see all available options for x, y axis</span>\n\n<span class=\"n\">PortOpt</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s1\">'expected_return'</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s1\">'sharpe'</span><span class=\"p\">,</span> <span class=\"n\">y_var</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"risk_free\"</span><span class=\"p\">:</span> <span class=\"mf\">0.02</span><span class=\"p\">},</span> <span class=\"n\">iters</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">weight_bound</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">leverage</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ret_format</span><span class=\"o\">=</span><span class=\"s1\">'sns'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Sharpe VS Return\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ceac06e9cb0a9a9306c0d265be467abb0e01f01/68747470733a2f2f6769746875622e636f6d2f6a6f686e736f6f6e673231362f70796d61726b6f7769747a2f626c6f622f6d61737465722f696d616765732f72657475726e5f76735f7368617270652e706e67\"></p>\n<h3>Backtesting</h3>\n<blockquote>\n<p>Use <strong>pymarkowitz</strong> to construct optimized weights and backtest with real life portfolio.\nIn this example, I am using SPDR sector ETFs to construct an optimized portfolio and compare against buy &amp; hold SPY.</p>\n</blockquote>\n<hr>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bt</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'spy, rwr, xlb, xli, xly, xlp, xle, xlf, xlu, xlv, xlk'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s1\">'2005-01-01'</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>The configurations can be adjusted flexibly, please check backtesting.ipynb in demo directory for more detail. In this case we are minimizing volatility with a capped weight of 25% on each sector.</p>\n</blockquote>\n<pre><span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">WeighMarkowitz</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">)</span> <span class=\"c1\">#Imported from pymarkowitz.backtester.py</span>\n\n<span class=\"c1\"># Personal Strategy</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">(</span><span class=\"s1\">'s1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">RunWeekly</span><span class=\"p\">(),</span>\n                       <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">SelectAll</span><span class=\"p\">(),</span>\n                       <span class=\"n\">strategy</span><span class=\"p\">,</span>\n                       <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">Rebalance</span><span class=\"p\">()])</span>\n<span class=\"n\">test1</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">Backtest</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Buy &amp; Hold</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">(</span><span class=\"s1\">'s2'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">RunWeekly</span><span class=\"p\">(),</span>\n                       <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">SelectAll</span><span class=\"p\">(),</span>\n                       <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">WeighEqually</span><span class=\"p\">(),</span>\n                       <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">algos</span><span class=\"o\">.</span><span class=\"n\">Rebalance</span><span class=\"p\">()])</span>\n<span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">Backtest</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[[</span><span class=\"s1\">'spy'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">Config</span><span class=\"o\">.</span><span class=\"n\">lookback</span><span class=\"p\">:])</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">bt</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">test1</span><span class=\"p\">,</span> <span class=\"n\">test2</span><span class=\"p\">)</span>\n<span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"Backtest_Result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/256f1b7eb93e8cfaa77b6f05c1772bfd1c7e3d9c/68747470733a2f2f6769746875622e636f6d2f6a6f686e736f6f6e673231362f70796d61726b6f7769747a2f626c6f622f6d61737465722f696d616765732f6261636b746573745f736563746f725f76735f7370792e504e47\"></p>\n<h2>Get In Touch</h2>\n<ul>\n<li>Please reach out to me through email at <a href=\"mailto:johnsoong216@hotmail.com\">johnsoong216@hotmail.com</a>. Love to get connected and Chat!</li>\n</ul>\n<hr>\n<h2>Reference</h2>\n<p>Calculations of <strong>Correlation, Diversifcation &amp; Risk Parity Factors</strong>:\n<br>\n<a href=\"https://investresolve.com/file/pdf/Portfolio-Optimization-Whitepaper.pdf\" rel=\"nofollow\">https://investresolve.com/file/pdf/Portfolio-Optimization-Whitepaper.pdf</a></p>\n<p>Calculations for <strong>Sharpe, Sortino, Beta, Treynor, Jenson's Alpha</strong>:\n<br>\n<a href=\"https://www.cfainstitute.org/-/media/documents/support/programs/investment-foundations/19-performance-evaluation.ashx?la=en&amp;hash=F7FF3085AAFADE241B73403142AAE0BB1250B311\" rel=\"nofollow\">https://www.cfainstitute.org/-/media/documents/support/programs/investment-foundations/19-performance-evaluation.ashx?la=en&amp;hash=F7FF3085AAFADE241B73403142AAE0BB1250B311</a>\n<br>\n<a href=\"https://www.investopedia.com/terms/j/jensensmeasure.asp\" rel=\"nofollow\">https://www.investopedia.com/terms/j/jensensmeasure.asp</a>\n<br>\n<a href=\"https://www.investopedia.com/ask/answers/070615/what-formula-calculating-beta.asp\" rel=\"nofollow\">https://www.investopedia.com/ask/answers/070615/what-formula-calculating-beta.asp</a>\n<br></p>\n<p>Calculations for <strong>Higher Moment Matrices</strong>:\n<br>\n<a href=\"https://cran.r-project.org/web/packages/PerformanceAnalytics/vignettes/EstimationComoments.pdf\" rel=\"nofollow\">https://cran.r-project.org/web/packages/PerformanceAnalytics/vignettes/EstimationComoments.pdf</a>\n<br></p>\n<hr>\n<h2>License</h2>\n<p><a href=\"http://badges.mit-license.org\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c1f7a3784568db5c5ffd31b3d9553395f5661fb/687474703a2f2f696d672e736869656c64732e696f2f3a6c6963656e73652d6d69742d626c75652e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<ul>\n<li><strong><a href=\"http://opensource.org/licenses/mit-license.php\" rel=\"nofollow\">MIT license</a></strong></li>\n<li>Copyright 2020 \u00a9</li>\n</ul>\n\n          </div>"}, "last_serial": 7102122, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "971f4f18a11595db482843a383de69cb", "sha256": "4414f9ab10356369f962f695d12a17e315bbf36d7c5f9f6b79b2e20abfd7a478"}, "downloads": -1, "filename": "pymarkowitz-1.0.tar.gz", "has_sig": false, "md5_digest": "971f4f18a11595db482843a383de69cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3822, "upload_time": "2020-04-23T04:42:31", "upload_time_iso_8601": "2020-04-23T04:42:31.355342Z", "url": "https://files.pythonhosted.org/packages/3b/aa/67466dfd68ce225571083444b8a8524df91a0f93051ff3830fe11cfdde2f/pymarkowitz-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6e2ca1dffd6e75e3628fea751e72d96f", "sha256": "a22034f72be2960d9bc2cb783d0914138711b117ee8afeeab5bdf7d1b1639378"}, "downloads": -1, "filename": "pymarkowitz-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6e2ca1dffd6e75e3628fea751e72d96f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4682, "upload_time": "2020-04-23T04:48:37", "upload_time_iso_8601": "2020-04-23T04:48:37.109959Z", "url": "https://files.pythonhosted.org/packages/78/ae/5872d1ea219e0eea3f01da73727f7af0466ac788b5a77c33c28a22445953/pymarkowitz-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f75e14d1cceb784a180e0b832f69d4bf", "sha256": "3f3dee1875615e39a27bd1de1ae5419ddfa6bfef0d031e8994d1116055fd1c6b"}, "downloads": -1, "filename": "pymarkowitz-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f75e14d1cceb784a180e0b832f69d4bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4853, "upload_time": "2020-04-26T01:22:46", "upload_time_iso_8601": "2020-04-26T01:22:46.282712Z", "url": "https://files.pythonhosted.org/packages/4e/ee/cacef942b4afc8c795358b1e39b6d5059aa8a96577953f03b41d02877af4/pymarkowitz-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "acc9d6b6c4e71868d2812c04e098b1c5", "sha256": "a821fcdd3a4f4ee34b3e301356c7b9c566973c4237645144d669abbffb2e2461"}, "downloads": -1, "filename": "pymarkowitz-1.1.1.tar.gz", "has_sig": false, "md5_digest": "acc9d6b6c4e71868d2812c04e098b1c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5439, "upload_time": "2020-04-26T01:23:43", "upload_time_iso_8601": "2020-04-26T01:23:43.260432Z", "url": "https://files.pythonhosted.org/packages/47/17/01277510dd1d237dd28aafb4a3a8c0a376247c369a7a8ee5c0bc67d81c1c/pymarkowitz-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acc9d6b6c4e71868d2812c04e098b1c5", "sha256": "a821fcdd3a4f4ee34b3e301356c7b9c566973c4237645144d669abbffb2e2461"}, "downloads": -1, "filename": "pymarkowitz-1.1.1.tar.gz", "has_sig": false, "md5_digest": "acc9d6b6c4e71868d2812c04e098b1c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5439, "upload_time": "2020-04-26T01:23:43", "upload_time_iso_8601": "2020-04-26T01:23:43.260432Z", "url": "https://files.pythonhosted.org/packages/47/17/01277510dd1d237dd28aafb4a3a8c0a376247c369a7a8ee5c0bc67d81c1c/pymarkowitz-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:32 2020"}