{"info": {"author": "Pascal Hartig", "author_email": "phartig@weluse.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 2.6", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing"], "description": "====================\ndjango-nose-selenium\n====================\n\nAdds selenium testing support to your nose test suite.\n\nTo use, run nosetests with the ``--with-selenium`` flag.\n\n-----------------\nWhy use Selenium?\n-----------------\n\nSelenium is a portable testing framework for web applications. It allows you to\nwrite tests that run in the browser to test your user interface and javascript\ncode that is not available through the usual testing channels. See the examples\nbelow to get a clearer impression of what selenium tests can provide.\n\ndjango-nose-selenium allows you to write and run selenium tests the same way as\nusual django unit tests.\n\n------------\nRequirements\n------------\n\nThe plugin expects that you have configured the django-nose_ app. In a nutshell,\nthis is done by running ``pip install django-nose``, adding ``django_nose`` to\n``INSTALLED_APPS`` and setting ``TEST_RUNNER`` to\n``django_nose.NoseTestSuiteRunner`` in the settings.py.\n\n.. _django-nose: https://github.com/jbalogh/django-nose\n\n------------\nInstallation\n------------\n\nFrom PyPI::\n\n   pip install django-nose-selenium\n\n`In-development version\n<https://github.com/weluse/django-nose-selenium/tarball/master#egg=django-nose-selenium-dev>`_\nvia Pip::\n\n   pip install django-nose-selenium==dev\n\nDirectly from Git::\n\n   pip install -e\n   git://github.com/weluse/django-nose-selenium.git#egg=django-nose-selenium\n\n---------------\nDjango Settings\n---------------\n\n.. _base_settings:\n\nThe plugin supports the following settings:\n\n   * SELENIUM_HOST, default: `127.0.0.1`\n   * SELENIUM_PORT, default: `4444`\n   * SELENIUM_BROWSER_COMMAND, default: `chrome`\n   * SELENIUM_URL_ROOT, default: `http://127.0.0.1:8000`\n   * FORCE_SELENIUM_TESTS, default: `False`. By default, SocketErrors cause the\n     tests to be skipped. This options causes the tests to fail when the\n     Selenium server is unavailable.\n\n-----\nUsage\n-----\n\nDefine the class variable ``selenium_test = True`` in your nose test class.\nYou can use ``self.selenium`` to access a selenium instance with the given\noptions::\n\n\n   class TestSelenium(TestCase):\n\n       selenium_test = True\n\n       def test_start(self):\n           \"\"\"Tests the start page.\"\"\"\n\n           self.selenium.open(\"/\")\n\nTo run this test, you have to pass the option ``--with-selenium`` to the Django\nmanagement command test::\n\n   python manage.py test --with-selenium\n\nAlternatively, django-nose-selenium provides a mixin that has the benefit of\nraising a SkipTest exception if the plugin was not loaded and the selenium\nattribute is accessed::\n\n\n   from noseselenium.cases import SeleniumTestCaseMixin\n\n\n   class TestSelenium(TestCase, SeleniumTestCaseMixin):\n\n       def test_start(self):\n           \"\"\"Tests the start page.\"\"\"\n\n           self.selenium.open(\"/\")\n\nFixtures\n--------\n\nThe default fixtures of django are run in transactions and not available to a\nlive testing server, therefore `noseselenium` provides an option to load **and\ncommit** fixtures to the database automatically. Please note that there's no\nautomatic rollback, so the data will stay in your test database for the rest of\nthe run if you don't provide a custom teardown strategy.\n\n::\n\n   from noseselenium.cases import SeleniumTestCaseMixin\n\n\n   class TestUserLogin(TestCase, SeleniumTestCaseMixin):\n\n       selenium_fixtures = ['user_data.json']\n\n       def tearDown(self):\n           # Remove data from user_data.json\n\n       def test_login(self):\n           \"\"\"Tests the login page.\"\"\"\n\n           sel = self.selenium\n           sel.open(\"/login/\")\n           sel.type(\"id_username\", \"pascal\")\n           sel.type(\"id_password\", \"iwantapony\")\n           sel.click(\"//form[@id='myform']/p/button\")\n           sel.wait_for_page_to_load(5000)\n           self.failUnless(self.is_text_present(\"Hello, Pascal!\"))\n\nTo enable selenium fixtures, nosetests must be called with the\nadditional ``--with-selenium-fixtures`` flag.\n\n\nLiveserver\n----------\n\n`noseselenium` provides expiremental support for running a live server that\nSelenium can connect to. Currently, there's a threaded server that reuses\ndjango's development webserver and a cherrypy implementation. It's recommended\nyou use the cherrypy one as the django devserver is certainly not designed to\nrun in a multi-threaded environment.\n\nThe liveserver plugin introduces two new configuration options:\n\n   * LIVE_SERVER_ADDRESS, defaults to `0.0.0.0`\n   * LIVE_SERVER_PORT, defaults to `8080`\n   * LIVE_SERVER_STATIC, boolean that defaults to True. If enabled, the live\n     server enables serving of static files via the\n     ``django.contrib.staticfiles`` app.\n\nThese should match your `Selenium Settings`__.\n\n__ base_settings_\n\nTo start the liveserver, nosetest is called with either the\n``--with-djangoliveserver`` or preferably the ``--with-cherrypyliveserver``\nflag.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/weluse/django-nose-selenium", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-nose-selenium", "package_url": "https://pypi.org/project/django-nose-selenium/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-nose-selenium/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/weluse/django-nose-selenium"}, "release_url": "https://pypi.org/project/django-nose-selenium/0.7.3/", "requires_dist": null, "requires_python": null, "summary": "A nose plugin to run selenium tests with django", "version": "0.7.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Adds selenium testing support to your nose test suite.</p>\n<p>To use, run nosetests with the <tt><span class=\"pre\">--with-selenium</span></tt> flag.</p>\n<div id=\"why-use-selenium\">\n<h2>Why use Selenium?</h2>\n<p>Selenium is a portable testing framework for web applications. It allows you to\nwrite tests that run in the browser to test your user interface and javascript\ncode that is not available through the usual testing channels. See the examples\nbelow to get a clearer impression of what selenium tests can provide.</p>\n<p>django-nose-selenium allows you to write and run selenium tests the same way as\nusual django unit tests.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>The plugin expects that you have configured the <a href=\"https://github.com/jbalogh/django-nose\" rel=\"nofollow\">django-nose</a> app. In a nutshell,\nthis is done by running <tt>pip install <span class=\"pre\">django-nose</span></tt>, adding <tt>django_nose</tt> to\n<tt>INSTALLED_APPS</tt> and setting <tt>TEST_RUNNER</tt> to\n<tt>django_nose.NoseTestSuiteRunner</tt> in the settings.py.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From PyPI:</p>\n<pre>pip install django-nose-selenium\n</pre>\n<p><a href=\"https://github.com/weluse/django-nose-selenium/tarball/master#egg=django-nose-selenium-dev\" rel=\"nofollow\">In-development version</a>\nvia Pip:</p>\n<pre>pip install django-nose-selenium==dev\n</pre>\n<p>Directly from Git:</p>\n<pre>pip install -e\ngit://github.com/weluse/django-nose-selenium.git#egg=django-nose-selenium\n</pre>\n</div>\n<div id=\"django-settings\">\n<h2>Django Settings</h2>\n<p id=\"base-settings\">The plugin supports the following settings:</p>\n<blockquote>\n<ul>\n<li>SELENIUM_HOST, default: <cite>127.0.0.1</cite></li>\n<li>SELENIUM_PORT, default: <cite>4444</cite></li>\n<li>SELENIUM_BROWSER_COMMAND, default: <cite>chrome</cite></li>\n<li>SELENIUM_URL_ROOT, default: <cite>http://127.0.0.1:8000</cite></li>\n<li>FORCE_SELENIUM_TESTS, default: <cite>False</cite>. By default, SocketErrors cause the\ntests to be skipped. This options causes the tests to fail when the\nSelenium server is unavailable.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Define the class variable <tt>selenium_test = True</tt> in your nose test class.\nYou can use <tt>self.selenium</tt> to access a selenium instance with the given\noptions:</p>\n<pre>class TestSelenium(TestCase):\n\n    selenium_test = True\n\n    def test_start(self):\n        \"\"\"Tests the start page.\"\"\"\n\n        self.selenium.open(\"/\")\n</pre>\n<p>To run this test, you have to pass the option <tt><span class=\"pre\">--with-selenium</span></tt> to the Django\nmanagement command test:</p>\n<pre>python manage.py test --with-selenium\n</pre>\n<p>Alternatively, django-nose-selenium provides a mixin that has the benefit of\nraising a SkipTest exception if the plugin was not loaded and the selenium\nattribute is accessed:</p>\n<pre>from noseselenium.cases import SeleniumTestCaseMixin\n\n\nclass TestSelenium(TestCase, SeleniumTestCaseMixin):\n\n    def test_start(self):\n        \"\"\"Tests the start page.\"\"\"\n\n        self.selenium.open(\"/\")\n</pre>\n<div id=\"fixtures\">\n<h3>Fixtures</h3>\n<p>The default fixtures of django are run in transactions and not available to a\nlive testing server, therefore <cite>noseselenium</cite> provides an option to load <strong>and\ncommit</strong> fixtures to the database automatically. Please note that there\u2019s no\nautomatic rollback, so the data will stay in your test database for the rest of\nthe run if you don\u2019t provide a custom teardown strategy.</p>\n<pre>from noseselenium.cases import SeleniumTestCaseMixin\n\n\nclass TestUserLogin(TestCase, SeleniumTestCaseMixin):\n\n    selenium_fixtures = ['user_data.json']\n\n    def tearDown(self):\n        # Remove data from user_data.json\n\n    def test_login(self):\n        \"\"\"Tests the login page.\"\"\"\n\n        sel = self.selenium\n        sel.open(\"/login/\")\n        sel.type(\"id_username\", \"pascal\")\n        sel.type(\"id_password\", \"iwantapony\")\n        sel.click(\"//form[@id='myform']/p/button\")\n        sel.wait_for_page_to_load(5000)\n        self.failUnless(self.is_text_present(\"Hello, Pascal!\"))\n</pre>\n<p>To enable selenium fixtures, nosetests must be called with the\nadditional <tt><span class=\"pre\">--with-selenium-fixtures</span></tt> flag.</p>\n</div>\n<div id=\"liveserver\">\n<h3>Liveserver</h3>\n<p><cite>noseselenium</cite> provides expiremental support for running a live server that\nSelenium can connect to. Currently, there\u2019s a threaded server that reuses\ndjango\u2019s development webserver and a cherrypy implementation. It\u2019s recommended\nyou use the cherrypy one as the django devserver is certainly not designed to\nrun in a multi-threaded environment.</p>\n<p>The liveserver plugin introduces two new configuration options:</p>\n<blockquote>\n<ul>\n<li>LIVE_SERVER_ADDRESS, defaults to <cite>0.0.0.0</cite></li>\n<li>LIVE_SERVER_PORT, defaults to <cite>8080</cite></li>\n<li>LIVE_SERVER_STATIC, boolean that defaults to True. If enabled, the live\nserver enables serving of static files via the\n<tt>django.contrib.staticfiles</tt> app.</li>\n</ul>\n</blockquote>\n<p>These should match your <a href=\"#base-settings\" rel=\"nofollow\">Selenium Settings</a>.</p>\n<p>To start the liveserver, nosetest is called with either the\n<tt><span class=\"pre\">--with-djangoliveserver</span></tt> or preferably the <tt><span class=\"pre\">--with-cherrypyliveserver</span></tt>\nflag.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 763611, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "7fa5369144b2f55f5ab463628b358cec", "sha256": "a72c5bcafdea7d0b95f1e70ce68cf7d127f06b6f78f3f4814d185f9a0ab82eb2"}, "downloads": -1, "filename": "django-nose-selenium-0.3.tar.gz", "has_sig": false, "md5_digest": "7fa5369144b2f55f5ab463628b358cec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20803, "upload_time": "2010-06-21T12:31:05", "upload_time_iso_8601": "2010-06-21T12:31:05.809803Z", "url": "https://files.pythonhosted.org/packages/28/1f/e9169cc67e8aea3364edda773cc2ec7719e2491b1af3b0cbd630a2cc3d1b/django-nose-selenium-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "11cf8adb5aa5be366815acfc76bad73a", "sha256": "02cbc4d3fff756c1ec375c31953229ce09f5a0a9e42ebe5c2baaf26af52ffacc"}, "downloads": -1, "filename": "django-nose-selenium-0.4.tar.gz", "has_sig": false, "md5_digest": "11cf8adb5aa5be366815acfc76bad73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21029, "upload_time": "2010-06-22T14:11:50", "upload_time_iso_8601": "2010-06-22T14:11:50.787708Z", "url": "https://files.pythonhosted.org/packages/50/69/ef0c01a943cdf2519a85f20597b5e93bfa12e2f5f8fa8fd4471dd75781af/django-nose-selenium-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "5aff3221ae6177227481242bcf0f4006", "sha256": "977982ab3b97e3063c3c5c9f42afbf9ea10c64318ee76477eedd43e3176391d1"}, "downloads": -1, "filename": "django-nose-selenium-0.5.tar.gz", "has_sig": false, "md5_digest": "5aff3221ae6177227481242bcf0f4006", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21323, "upload_time": "2010-07-16T10:31:47", "upload_time_iso_8601": "2010-07-16T10:31:47.890677Z", "url": "https://files.pythonhosted.org/packages/8d/14/2b314a80279e578ae055a8c117e87c84c87b43851a4ec8d9e3436ccd12d5/django-nose-selenium-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a1aef0da97665b84343d1e7768ac9dba", "sha256": "480ff4ccaa7992c9bfec00ddbc8f0a4d7d895dc7c0c2b7bf571cc31e9deae2f1"}, "downloads": -1, "filename": "django-nose-selenium-0.6.tar.gz", "has_sig": false, "md5_digest": "a1aef0da97665b84343d1e7768ac9dba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23409, "upload_time": "2010-09-09T15:01:19", "upload_time_iso_8601": "2010-09-09T15:01:19.130233Z", "url": "https://files.pythonhosted.org/packages/1b/d0/f45e4b0f402e42462f78a44f873bfa42824a7ed47177bf37f74a55230211/django-nose-selenium-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "2218bc2e6f04d28014f4949c69a68714", "sha256": "fcc0afab4c28e7d2006d7a01b70af548349a09c562208f0753d2fb6d6695e267"}, "downloads": -1, "filename": "django-nose-selenium-0.7.tar.gz", "has_sig": false, "md5_digest": "2218bc2e6f04d28014f4949c69a68714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23603, "upload_time": "2011-03-17T14:55:00", "upload_time_iso_8601": "2011-03-17T14:55:00.630529Z", "url": "https://files.pythonhosted.org/packages/80/54/0f0bfc788ecf17abfed3fefa215af0e9940bc2816b84440b4060fd4736f0/django-nose-selenium-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "c5985035e377ad71b19c369703c59bec", "sha256": "fa1208e3949d97fa9b68e3005b1a1862d6f30e6d9c239c306dd133a359bfc54a"}, "downloads": -1, "filename": "django-nose-selenium-0.7.1.tar.gz", "has_sig": false, "md5_digest": "c5985035e377ad71b19c369703c59bec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26768, "upload_time": "2011-08-01T13:39:15", "upload_time_iso_8601": "2011-08-01T13:39:15.115176Z", "url": "https://files.pythonhosted.org/packages/ee/6f/1bf51926146a18663ee725caddfb3adb92331ca0c4a62f4416a86252c3a6/django-nose-selenium-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "3518a7a3d1389bd25f67e24fe787d291", "sha256": "d9564bae9f83d97b312fd47c9a9b41beaef581de05dea0f13408f3c9630fd5cb"}, "downloads": -1, "filename": "django-nose-selenium-0.7.2.tar.gz", "has_sig": false, "md5_digest": "3518a7a3d1389bd25f67e24fe787d291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26841, "upload_time": "2011-08-03T16:15:57", "upload_time_iso_8601": "2011-08-03T16:15:57.925021Z", "url": "https://files.pythonhosted.org/packages/4d/28/ddaf261d1643802cabf71dc7a706cfa532f52442ad50176461d1f9a870dd/django-nose-selenium-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "953b5fcaa41476201331da0591613f75", "sha256": "6e438f18001f9d8a8073836cd6bb5f2925ccabed74a3946025dc932f4e918673"}, "downloads": -1, "filename": "django-nose-selenium-0.7.3.tar.gz", "has_sig": false, "md5_digest": "953b5fcaa41476201331da0591613f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26842, "upload_time": "2011-08-15T12:13:31", "upload_time_iso_8601": "2011-08-15T12:13:31.290003Z", "url": "https://files.pythonhosted.org/packages/41/3d/68ff8319715383f9801f59285b3216a30dc9c3eede4cffa9bf0ed4c2f2ea/django-nose-selenium-0.7.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "953b5fcaa41476201331da0591613f75", "sha256": "6e438f18001f9d8a8073836cd6bb5f2925ccabed74a3946025dc932f4e918673"}, "downloads": -1, "filename": "django-nose-selenium-0.7.3.tar.gz", "has_sig": false, "md5_digest": "953b5fcaa41476201331da0591613f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26842, "upload_time": "2011-08-15T12:13:31", "upload_time_iso_8601": "2011-08-15T12:13:31.290003Z", "url": "https://files.pythonhosted.org/packages/41/3d/68ff8319715383f9801f59285b3216a30dc9c3eede4cffa9bf0ed4c2f2ea/django-nose-selenium-0.7.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}