{"info": {"author": "Samuele Santi", "author_email": "samuele@samuelesanti.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Topic :: Utilities"], "description": "################################\nConfiguration generator\n################################\n\n\nThis project was born to generate dhcp/dns configuration files on a machine\nwhich resources are too limited to run a LDAP server.\n\nWhat it basically does is:\n\n* Load a bunch of files from a directory, and make them accessible in\n  a dictionary.\n* Render a bunch of files through some template engine, passing the context.\n\n\n.. image:: https://travis-ci.org/rshk/config-gen.png\n    :alt: Build status\n    :target: https://travis-ci.org/rshk/config-gen\n\n\n\nInstallation\n============\n\nProduction version::\n\n    $ pip install config-gen\n\nDevelopment version::\n\n    $ pip install -e git+git@github.com:rshk/config-gen.git#egg=config-gen\n\nOr just run ``python setup.py install`` from the source directory.\n\n\nTrying out\n==========\n\nThe fastest way to get started with config-gen is the quickstart script,\nthat takes care of creating all the needed directories plus a Makefile,\nin the current directory::\n\n    $ confgen-quickstart\n    $ make\n    $ cat build/example.html\n    <h1>Hello, world!</h1>\n\n\nHow does it work?\n=================\n\nIn a very simple way: all files in the ``templates`` directory are built\ninto files in ``build``, with the original extension stripped. Eg::\n\n    templates/hello.jinja -> build/hello\n    templates/hello.html.jinja -> build/hello.html\n    templates/example.html.jinja -> build/example.html\n\nThe context for rendered files is built from files in the ``data`` directory.\nTo each file in that directory, a \"reader\" is associated, by reading the\nfile extension.\n\nThen, a context variable with the same name of the file (without extension)\nwill be made available in the template.\n\n\nIncluded readers\n================\n\nReaders are used to read data files and make them accessible\nin the template context.\n\nTheir name (without extension) must be unique all around the ``data``\ndirectory, to prevent conflicts.\n\n**txt** (``config_gen.readers.read_txt.txt_reader``)\n    Loads a plain text file, returning its raw content directly.\n\n\n**py** (``config_gen.readers.read_py.PyFileAccessor``)\n    Loads and returns a Python module.\n\n    The module content will then be fully accessible from the template.\n\n\n**json** (``config_gen.readers.read_json.json_reader``)\n    Reads a JSON file and returns it directly. It will then be accessible as\n    usual from the template.\n\n\n**csv** (``config_gen.readers.read_csv.csv_reader``)\n    Reads a Comma-Separated Values file into a list of tuples.\n\n    The CSV file must be comma-separated (semicolons are not supported). Fields\n    containing commas must be enclosed in double quotes.\n\n\n**ini** (``config_gen.readers.read_ini.IniFileReader``)\n    Reader for configuration/.ini files.\n\n    Files will be accessible as::\n\n        {{ filename.section.option }}\n\n    Or, for sections/options containing dots::\n\n        {{ filename[\"my.sect.ion\"][\"my.opt.ion\"] }}\n\n\nTemplate engines\n================\n\nTo render the templates into configuration files, the awesome Jinja2_\ntemplate engine has been used.\n\nI once thought about allowing pluggable template engines, but the\nawesomeness of Jinja made me rethink that decision :)\n\n(By the way, just let me know if you'd absolutely need support for\nanother template engine, and why..)\n\n.. _Jinja2: http://jinja.pocoo.org/\n\n\nTesting\n=======\n\nTo run the complete test suite::\n\n    $ python -m unittest discover -s tests\n\nTo run only tests in a specific sub-module::\n\n    $ python -m unittest tests.test_something\n\n\nTODO-List\n=========\n\n* Add support for XML/YAML files\n* Add support for database connections (sqlite, mysql, postgres, mongo..)\n* Add support for \"custom cases\", through some kind of configuration file\n  * Eg. for semicolon-separated CSV files\n* Add support for importing external readers (add a ``--load`` option?)\n* Write the missing test cases\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rshk/config-gen", "keywords": null, "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": null, "maintainer_email": null, "name": "Config-gen", "package_url": "https://pypi.org/project/Config-gen/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Config-gen/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rshk/config-gen"}, "release_url": "https://pypi.org/project/Config-gen/1.0-alpha6/", "requires_dist": null, "requires_python": null, "summary": "Utility to generate configuration files", "version": "1.0-alpha6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project was born to generate dhcp/dns configuration files on a machine\nwhich resources are too limited to run a LDAP server.</p>\n<p>What it basically does is:</p>\n<ul>\n<li>Load a bunch of files from a directory, and make them accessible in\na dictionary.</li>\n<li>Render a bunch of files through some template engine, passing the context.</li>\n</ul>\n<a href=\"https://travis-ci.org/rshk/config-gen\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/767f191fe0d7703dc960f59c6540bcd6cc298f50/68747470733a2f2f7472617669732d63692e6f72672f7273686b2f636f6e6669672d67656e2e706e67\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Production version:</p>\n<pre>$ pip install config-gen\n</pre>\n<p>Development version:</p>\n<pre>$ pip install -e git+git@github.com:rshk/config-gen.git#egg=config-gen\n</pre>\n<p>Or just run <tt>python setup.py install</tt> from the source directory.</p>\n</div>\n<div id=\"trying-out\">\n<h2>Trying out</h2>\n<p>The fastest way to get started with config-gen is the quickstart script,\nthat takes care of creating all the needed directories plus a Makefile,\nin the current directory:</p>\n<pre>$ confgen-quickstart\n$ make\n$ cat build/example.html\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n</pre>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>In a very simple way: all files in the <tt>templates</tt> directory are built\ninto files in <tt>build</tt>, with the original extension stripped. Eg:</p>\n<pre>templates/hello.jinja -&gt; build/hello\ntemplates/hello.html.jinja -&gt; build/hello.html\ntemplates/example.html.jinja -&gt; build/example.html\n</pre>\n<p>The context for rendered files is built from files in the <tt>data</tt> directory.\nTo each file in that directory, a \u201creader\u201d is associated, by reading the\nfile extension.</p>\n<p>Then, a context variable with the same name of the file (without extension)\nwill be made available in the template.</p>\n</div>\n<div id=\"included-readers\">\n<h2>Included readers</h2>\n<p>Readers are used to read data files and make them accessible\nin the template context.</p>\n<p>Their name (without extension) must be unique all around the <tt>data</tt>\ndirectory, to prevent conflicts.</p>\n<dl>\n<dt><strong>txt</strong> (<tt>config_gen.readers.read_txt.txt_reader</tt>)</dt>\n<dd>Loads a plain text file, returning its raw content directly.</dd>\n<dt><strong>py</strong> (<tt>config_gen.readers.read_py.PyFileAccessor</tt>)</dt>\n<dd><p>Loads and returns a Python module.</p>\n<p>The module content will then be fully accessible from the template.</p>\n</dd>\n<dt><strong>json</strong> (<tt>config_gen.readers.read_json.json_reader</tt>)</dt>\n<dd>Reads a JSON file and returns it directly. It will then be accessible as\nusual from the template.</dd>\n<dt><strong>csv</strong> (<tt>config_gen.readers.read_csv.csv_reader</tt>)</dt>\n<dd><p>Reads a Comma-Separated Values file into a list of tuples.</p>\n<p>The CSV file must be comma-separated (semicolons are not supported). Fields\ncontaining commas must be enclosed in double quotes.</p>\n</dd>\n<dt><strong>ini</strong> (<tt>config_gen.readers.read_ini.IniFileReader</tt>)</dt>\n<dd><p>Reader for configuration/.ini files.</p>\n<p>Files will be accessible as:</p>\n<pre>{{ filename.section.option }}\n</pre>\n<p>Or, for sections/options containing dots:</p>\n<pre>{{ filename[\"my.sect.ion\"][\"my.opt.ion\"] }}\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"template-engines\">\n<h2>Template engines</h2>\n<p>To render the templates into configuration files, the awesome <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a>\ntemplate engine has been used.</p>\n<p>I once thought about allowing pluggable template engines, but the\nawesomeness of Jinja made me rethink that decision :)</p>\n<p>(By the way, just let me know if you\u2019d absolutely need support for\nanother template engine, and why..)</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run the complete test suite:</p>\n<pre>$ python -m unittest discover -s tests\n</pre>\n<p>To run only tests in a specific sub-module:</p>\n<pre>$ python -m unittest tests.test_something\n</pre>\n</div>\n<div id=\"todo-list\">\n<h2>TODO-List</h2>\n<ul>\n<li>Add support for XML/YAML files</li>\n<li>Add support for database connections (sqlite, mysql, postgres, mongo..)</li>\n<li>Add support for \u201ccustom cases\u201d, through some kind of configuration file\n* Eg. for semicolon-separated CSV files</li>\n<li>Add support for importing external readers (add a <tt><span class=\"pre\">--load</span></tt> option?)</li>\n<li>Write the missing test cases</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 829114, "releases": {"1.0-alpha4": [{"comment_text": "", "digests": {"md5": "8ca42a006e2848976a185ccfc9a3db2b", "sha256": "3fb2bcf89bf52a4ddc9da65e097bb989bf93bc0bd1cdf6aa756fcc1488e36274"}, "downloads": -1, "filename": "Config-gen-1.0-alpha4.tar.gz", "has_sig": false, "md5_digest": "8ca42a006e2848976a185ccfc9a3db2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4615, "upload_time": "2013-02-21T00:01:10", "upload_time_iso_8601": "2013-02-21T00:01:10.164206Z", "url": "https://files.pythonhosted.org/packages/56/ae/0d8604d376a7fd53819c3d619db12dbf4655483e6fe059d99e5695f0b669/Config-gen-1.0-alpha4.tar.gz", "yanked": false}], "1.0-alpha5": [{"comment_text": "", "digests": {"md5": "759cf6c1ac5687bc33c253d884c43a24", "sha256": "fbee36df73b7d2d799351392cbea99f65660882ec9b12a81f5fbde03384c95bc"}, "downloads": -1, "filename": "Config-gen-1.0-alpha5.tar.gz", "has_sig": false, "md5_digest": "759cf6c1ac5687bc33c253d884c43a24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4815, "upload_time": "2013-02-21T00:58:00", "upload_time_iso_8601": "2013-02-21T00:58:00.083257Z", "url": "https://files.pythonhosted.org/packages/71/0c/310e15eb9811ba5ecfa24f4d96de2dfe95f0b1f036be4a29acf243d09f67/Config-gen-1.0-alpha5.tar.gz", "yanked": false}], "1.0-alpha6": [{"comment_text": "", "digests": {"md5": "74e88890e3e96022655fd3ad5551acba", "sha256": "e409e8c42dbb2a58123735c176826612a9a79f532298c4fc45f472ec997cad8c"}, "downloads": -1, "filename": "Config-gen-1.0-alpha6.tar.gz", "has_sig": false, "md5_digest": "74e88890e3e96022655fd3ad5551acba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7090, "upload_time": "2013-07-31T10:15:30", "upload_time_iso_8601": "2013-07-31T10:15:30.987604Z", "url": "https://files.pythonhosted.org/packages/84/9a/ec8327b904fad4a37a485d301e8226abe1ba81f410c6513f3c3935a7b405/Config-gen-1.0-alpha6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74e88890e3e96022655fd3ad5551acba", "sha256": "e409e8c42dbb2a58123735c176826612a9a79f532298c4fc45f472ec997cad8c"}, "downloads": -1, "filename": "Config-gen-1.0-alpha6.tar.gz", "has_sig": false, "md5_digest": "74e88890e3e96022655fd3ad5551acba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7090, "upload_time": "2013-07-31T10:15:30", "upload_time_iso_8601": "2013-07-31T10:15:30.987604Z", "url": "https://files.pythonhosted.org/packages/84/9a/ec8327b904fad4a37a485d301e8226abe1ba81f410c6513f3c3935a7b405/Config-gen-1.0-alpha6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:56 2020"}